When you render your page, you look up the next highest id, and the next lowest id, then you use those to create your links / buttons
 ( &lt;a href="posts.php?post\\\_id=&lt;?php echo $id+1; ?&gt;"&gt; next&lt;/a&gt; &lt;a href="posts.php?post\\\_id=&lt;?php echo $id-1; ?&gt;"&gt; previuous&lt;/a&gt;) So when i delete post, i get in trouble :(
There is no point asking. Nobody has.
Just use documentation and sources - this works for me. But check this resource https://github.com/ziadoz/awesome-php#php-books
I have just added `get_result()` to the post. Thanks for the suggestion.
I would say the main takeaway from this cheat sheet would be "use PDO". All you need is to look at these two code snipptes doing the same $stmt = $mysqli -&gt; prepare('INSERT INTO users (name, email) VALUES (?,?)'); foreach ($newUsers as $user) { $name = $user[0]; $email = $user[1]; $stmt -&gt; bind_param('ss', $name, $email); $stmt -&gt; execute(); } to $stmt = $pdo-&gt; prepare('INSERT INTO users (name, email) VALUES (?,?)'); foreach ($newUsers as $user) { $stmt -&gt; execute($user); }
Stop and read what the above comment said. You CAN'T just increment, so you need to look up what is the previous id and then the next id dynamically.
Yeah, PDO have really cool features. Also, naming prepared params is a really nice feature that I like most. It's upto you to choose MYSQLI or PDO. 
Real question is why is php doing the fallback on each function execution. I would expect it would remember there doesn't exist same function in current namespace on first execution and doesn't try to fallback on following executions. This should be fixed in PHP so ecosystem doesn't need to workaround this. Maybe /r/nikic could shine some light?
As others have said, the framework didn't evolve when the language did, resulting in a framework whose conventions actively fight you when you try to build maintainable code IMO. When you're building decent software in spite of your framework rather than because of it, no wonder it isn't getting new development. inb4 someone says Laravel is the same way. Yes, Laravel is a RAD framework first and foremost, same as CI was. But if you want less magic in your app, Laravel will get out of your way. So it's easier to get out of the corner that the first quick dev phase paints you into.
Wait, Wait, Wait - WHAT? \&gt;it's got devs too damn stubborn to ditch SVN and migrate to GitHub so the rest of the community can do pull requests to clean that POS up. You can still do PR's and still contribute. What the fuck does SVn have to do with it? Nothing. &amp;#x200B;
If the only line of defense is htmlspecialchars then I'd be worried. * Older browsers allowed executing "javascript: alert(123)" if placed in src or href. htmlspecialchars will not do a thing to block that. Hint: PCI scanners will test this. * Single/Double quotes are not escaped unless you provide ENT\_QUOTES. * UTF-8 love? * You may want to double encode Overall spitting out this as a HTML block, is more or less okay, using this to filter an HTML attribute is a bigger problem. Maybe look into [https://github.com/voku/anti-xss](https://github.com/voku/anti-xss)
PHP does remember that the namespaced function doesn't exist, inside a runtime cache. (This optimization isn't entirely correct, because the namespaced function may be defined at a later point in time, but we do it anyway.) You still see a difference due to secondary effects: If the called function is known during compilation, then we emit more efficient call opcodes, more efficient argument sending opcodes, and in some cases (like the count example here) even specialized opcodes for entire functions. This is a case where a JIT compiler might possibly help in the future, because we have more freedom to make assumptions (= nobody overrides global functions) and bail if they turn out to be wrong.
`&amp;lt;a href=&amp;quot;javascript:alert(123)&amp;quot;&amp;gt;Click me&amp;lt;/a&amp;gt;` \- not clickable &amp;#x200B;
No. You. Can't. You have to get special access to the SVN if you want to contribute to the WordPress core. You're obviously clueless on the very thing you're defending.
No. Well, you *could*, but no. 
If Article 13 happens, folks will just host outside of the EU. Changing stuff for the EU is more trouble than it's worth anyway.
Grab the ROWNUM of your post, and use that to grab the previous and next IDs.
Named params is the reason I dropped mysqli actually. 
What is the point of reactions and comments on a cheat sheet page?
You can react or comment
Sorry I should have provide a more concrete example: `&lt;a href="&lt;?php echo htmlspecialchars('javascript:alert(123)') ?&gt;"&gt;Link&lt;/a&gt;` &amp;#x200B; In this situation, because its injected as an attribute and not an element, it cannot be filtered correctly. As you saw in your example nothing about `javascript:alert(123)` was filtered. Older browsers will still allow "javascript:" execution. Here is a code demo: [http://sandbox.onlinephpfunctions.com/code/1502d10d8d21cd59c4be75086b370c40b5bbe394](http://sandbox.onlinephpfunctions.com/code/1502d10d8d21cd59c4be75086b370c40b5bbe394) &amp;#x200B; If you overlay Mod\_Sec it will prevent posting data like this so it will never make it to the database to pulled later, but that is always a can of beans when trying to find the right balance. &amp;#x200B;
What kind of bullshit is this? Its not about PHP at all, and none of the 'books' are remotely useful. 
Sure. And before I make an comment against this I wanted to say that I welcome the input and I believe this is a valuable discussion to have. You did point out the flaws with htmlspecialchars and it makes me realize that I should use htmlentities. With that being said, I can't think of a scenario where this issue would come up unless you were printing urls directly, in which case you should be using urlencode. If you are taking a block of user text (which may contain tags) htmlspecialchars will encode all of that and prevent the code injection, and as far as the quotes go, while it is not 'valid' html, it's not going to cause a security issue.
that parts hard, so we pretend it doesnt exist when writing blogspam
Finding a good book for advanced users is tough, and those books are not. &amp;#x200B; I explain, in general, paradygms patterns and designs are fine, but an advanced user usually breaks it or mixes it all. An advanced developer knows there is not a silver bullet. For example, let's say MVC. We have a back-end to edit products. Usually the path is as follow: \&gt; /product/list \&gt; /product/get/{1} or /product/{1} and such. &amp;#x200B; But those paths are useless for a front-end. In the front end, we don't want something like \*\*/product/list\*\* but &amp;#x200B; \&gt;/product/list-top-products or simply \&gt; /list-top-products &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
Ugh, `bind_param` 👎
Query the id of the next post. Maybe there is no next post. Maybe there is but it’s not id+1. Query and you know for sure. 
Hey y'all, I'm one of the organizers for Longhorn PHP. We'd love if you would check out our schedule. The conference is May 2-4 in Austin, TX. Feel free to ask me any questions, and I'll answer as soon as I finish watching Captain Marvel! 
``composer require erusev/parsedown``
Thanks. Every day I learn a little more and this is very helpful as I was looking at switching to pdo.
Thankfully no. Imagine you have ``` 1 | "How my cat became a vigilante" 2 | "Using Javascript to write Java VM" 3 | "Top 50 Javascript trends of this week" ``` And you're using friendly URLs, so the links are ``` website.com/1/how-my-cat-became-a-vigilante website.com/2/using-javascript-to-write-java-vm website.com/3/top-50-javascript-trends-of-this-week ``` And someone saves the link to article about Javascript trends. Then, you remove ``"Using Javascript to write Java VM"`` because you decide it's not the best idea after all, and are left with ``` 1 | "How my cat became a vigilante" 2 | "Top 50 Javascript trends of this week" ``` Now, the link the user saved becomes useless. Clicking it tries to load the article with ID 3, but it doesn't exist, the article has na ID=2 now. Similarly, if your article had tags and you removed one, most of your articles would now have completely different tags. Or categories. Comments would show different authors, so would articles. Articles would go into different categories than intended. Comment chains would appear under wrong articles... Basically, each time you'd remove something you'd have to completely rebuild your database, and perhaps even create redirects, so that link with ID=3 opens an article with ID=2. But then how'd you open the article that now has the ID=3? ____ tl;dr # DON'T
Hey, I just noticed something, I'm a big fan of PHP and all, but why is the website for the Longhorn PHP Conference built with Ruby/Ruby on Rails?
This might be neat, but it doesn't look as nice with explicitly defined 1 character (usually a letter) arguments. Besides, you can already kind of do that, with the spread operator: array_map(fn (...$args) =&gt; $args[0]-&gt;id(), $records); Maybe it might cool to allow `$argv` (or create another, e.g., `$argf`) to provide all parameters to anonymous functions and class methods, instead of only script arguments, and having to use `func_get_args()`? Your example would then be, array_map(fn =&gt; $argf[0]-&gt;id(), $records) but could then be used in a class method as well, // some generic queue worker, idk public function work() { $users = array_filter(fn =&gt; $argf[0] instanceof User, $argf); $users = array_map(fn (User $user) =&gt; /* do some work */); } But scope might be weird... I don't know.. Anyways.. I am just thinking outloud now. In short – I agree, would be cool to access arguments without having to specify them (even though we can do that sort of with `...$args` already, as I mentioned previously).
Interesting when I ran `composer install --no-dev -a` on my Cake 3.5 application I immediately encountered an error where it couldn't find a class in bootstrap.php
I am specifically looking at Swift. At first I didn't like the "default" options list `newValue`, `error`, `$0` etc, thinking that they may make code less explicit. The opposite is true here, code is less verbose, and more consistent. And it's rather easy to see why, these two lines do essentially the same ``` array_map(fn($x) =&gt; $x-&gt;id(), $records); array_map(fn($userEntity) =&gt; $userEntity-&gt;id(), $records); ``` The parameter's name is constrained by the lambda's scope, most of the time staying on the same line even, the amount of additional information such name provides is minimal.
 this code works as intended, copypasta and it works. as long as the proper configurations are made on your test server. &lt;?php $servicio="https://www.dataaccess.com/webservicesserver/numberconversion.wso?WSDL"; //service URL $parametros=array(); //call parameters $parametros['ubiNum']=23;//actual variable $client = new SoapClient($servicio, $parametros); //make a soap client to handle xml $result = $client-&gt;NumberToWords($parametros);//call to the method var_dump( $result);// dump it to see all of the results. echo $result-&gt;NumberToWordsResult;//actually what i came for. ?&gt; how would you make something similar ? I'm intending of dissecting your code to learn more.
``` &lt;?php $parametros = [ 'ubiNum' =&gt; 23, ]; $client = new SoapClient("https://www.dataaccess.com/webservicesserver/numberconversion.wso?WSDL", $parametros); $result = $client-&gt;NumberToWords($parametros); var_dump($result); echo $result-&gt;NumberToWordsResult; ```
The main site is built with WordPress, but the "tickets" subdomain is hosted by our ticketing system (Tito).
In addition to the other comments, make 23 a constant. Today, you know what 23 means. The next person reading your code has no idea what 23 means. Define a constant with the value of 23 and a name of whatever it is. 
This is a bit late but I thought you should know that Google cloud has a free forever micro tier type of instance.
“Maintainer supported” is misleading. He’s not maintaining any part of PHP or backporting security fixes, he’s just maintaining the hacks to keep Homestead working with 5.6 If you NEED 5.x, use 5.4 on CentOS/RHEL where there’s an actual effort to backport patches
You are welcome. So, you would switch to PDO or will use MYSQLI?
You can wrap your code with a try-catch block, then throw errors when something goes wrong. In every response, you will send a variable `status`, which is true if everything is fine and, false if something went wrong. I wrote more details [here](https://developer.hyvor.com/php/ajax-request-handler-with-php).
This. Mostly slow web applications are because of poor database access (sub selects, poorly thought out queries, not caching data that doesn't change etc), poor database design (overly normalized), or lack of indexes. I have come across PHP optimizations, most of which was terrible big-0, but its been rare compared to database access/layer. I still look for small system wide optimizations that can be implemented in minutes, but generally you roll up your sleeves, identify the slow parts, and dig in which generally leads to database access.
Never understood the template engines. PHP is already a template engine... 
But correct.
The only way to contribute to the WP core is by submitting SVN patches. If you want to use Git you have to first convert the pull requests to SVN patches and submit them via Trac ticket. It's slow, tedious, and counterproductive. Do your research next time before making a fool of yourself.
I always love to do mini services/libraries to abstract underlying mechanism. Of course we can even do it container style, but I guess it's kinda overkilled for this case, but you get what I mean. So this would be your service class, `DataAccessService.php` &lt;?php /** * Given such name because it will be * specific to just this service */ class DataAccessService { const WSDL_ENDPOINT = "ttps://www.dataaccess.com/webservicesserver/numberconversion.wso?WSDL"; /* @var SoapClient */ protected $client; public function __construct() { $this-&gt;client = new SoapClient(static::WSDL_ENDPOINT); } /** * Convert number to words * @param int|string $num * * @return string */ public function numberToWords($num) { // You might want to catch SoapFault // for any unrecoverable errors, // connection issues etc. $result = $this-&gt;client-&gt;NumberToWords([ 'ubiNum' =&gt; $num ]); return $result-&gt;NumberToWordsResult; } } Then in your actual code that uses it: &lt;?php $dataAccessService = new DataAccessService; $words = $dataAccessService-&gt;numberToWords(23); The idea of this over engineering is that you will have a peace of mind using such class without worrying if it's not working. And furthermore you can write your test cases easily with such set up. Yes it's overkilled for one time task, but it's very good if you need it for long run.
So you measured it on shared hosting with no means to establish a controlled environment. Clearly a brilliant basis for a time-sensitive experiment
Simplest for is to add these to your query SELECT main.*, (SELECT MIN(id) FROM posts WHERE id &gt; main.id )AS nextpost, (SELECT MAX(id) FROM posts WHERE id &gt; main.id AS prevpost FROM posts main WHERE Blah blah
This.Exactly my mindset. Except the client should be passed to the constructor for DI Keep using this approach until it feels natural for you and doesn't feel like "overhead". Thinking in these abstraction will make you a better developer
Cmiiw, I was always taught that OOP doesn't automatically translate to fast and efficient. It has its own overhead. It helps you structure your code using real world scenarios, in exchange of some overhead in the execution pipeline. Imagine you would need to loop through ten of thousands of iterations, you would not want to create new object in each loop.
Looks like pretty nice tutorial, thanks.
Terrible code. You are already presuming there is a +1 or -1 I suggest you to change to action=next&amp;id=22&amp;increment=1&amp;sort=sequence action = next or back id = current id increment = the steps of the post type = sequence, date or anything &amp;#x200B; From there you should should able to construct the correct sql to show your desired display. Most of the basic sql has been shared by fellow reddit. you can just improvise from that &amp;#x200B; &amp;#x200B;
You are welcome!
I'll be migrating to Adelaide Australia this year and wondering how much a PHP developer with 7 years of experience would earn there. My primary skill sets are web designing from Photoshop, WordPress, PHP OOP, LAMP stack, Laravel, Android SDK. I've looked up on Payscale it says the average salary is AU$66,470 not sure how accurate it is though. 
What a lame latter statement.
Why the heck would one use MySQLi if there's PDO and dozens of ORM's?
66k is generally a junior dev salaray. Your salaray will be based on actual skill, not how long you've been doing it or how many tech stacks you know. So it hard to say how much you will get specifically. 
Are the talks going to be accessible online after or during the conference?
Install php-cs extension and you should be all set!
no
PHP does not do that, though, right? https://3v4l.org/VNvh8 &gt; Output for 7.3.3 &gt; &gt; Non-empty inner loop float(1.234482049942) &gt; &gt; Empty inner loop . . . . float(0.68857789039612) 
I'm still learning, and trying to find best way and heading the benefits of using PDO I'd like to give it a go. Do you know of any drawbacks on using pdo over mysqli?
This is useful for learning and research, but the behavior here is clearly not very useful for the site. For some security audit on the host: in first, check file permissions, owners.
seems alright, problem with teaching oo is the ‘why’. when i first learned perl 25 years ago i didnt understand the purpose of functions. the ‘why’ is harder to crack than ‘how’, thats why theory has to play some part.
$66k per month or per year ?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Ah damn I feel like I'm underpaid :(
https://github.com/phpexpertsinc/RESTSpeaker It's a wrapper around Guzzle meant to facilitate RESTful JSON APIs: $authStrat = new RESTAuth(RESTAuth::AUTH_MODE_XAPI); $api = new RESTSpeaker($authStrat, 'https://api.my-site.dev/'); // For URLs that return Content-Type: application/json: $json = $api-&gt;post('/members/' . $username . '/session');
Or the phan extension, or the phpstan extension, or the phpmd extension, or the...
are these figures before or after tax?
[http://php.net/manual/en/book.fann.php](http://php.net/manual/en/book.fann.php)
Beautiful work. Thanks for sharing. 
TRUNCATE `post`
The symfony serialization component first. I just love that package . 
As with any city, prices vary a lot from person to person, and company to company. I do a lot of work in Adelaide, and my experience is that jr. devs start \~40k at a creative agency and \~50k for a company. This is low, but if they're good they should expect a steep pay rise within the first 2-3 years. Medium experience \~65k, and senior 75-100k (large bracket as it really depends a lot on the kind of work and the kind of company you're working for). 
I dont mean to be presumptuous but do you live in Adelaide? 66 is not at all a typical salary for a jr dev. Adelaide does well in tech but it's still a relatively small city with a lower cost of living and proportionately lower salaries compared to Melb or Sydney, and certainly compared to a lot of US cities. 
https://github.com/hirak/prestissimo An operations partner just let me know about this one - converts the serial HTTP requests made by Composer and parallelises them. Previously a slow 30 second dependency install now takes 3-4 seconds. 
Looks interesting, but it's very new - 7 days old `:-)`. 
Jump on the PHP Australia slack. There is an Adelaide channel in there. They will help you out. Also, there is a lot of talk in that slack about expected wages. It's a great community. https://slack.phpaustralia.org/
Huh that would be.... Really really weird 
In the Beta version of PhpStorm, there is now an "Unused Declaration" inspection who check for public/protected methods, but also unused properties and unused classes.
https://meekro.com
130 LoC. Test coverage and code quality aren't exactly hard to reach with that... 
"Maintainer Supported" was intended to infer 2 things. 1) The maintainer of Homestead built this, so you can be confident in the quality and know that the project is well supported until it can no longer be. (Which my guess would be whenever the repos stop supporting these versions of PHP) 2) This project is supported by the maintainer because you're paying me to do so. &gt; He’s not maintaining any part of PHP or backporting security fixes I hate to shatter any delusions of grandeur but most people who provide OSS packages don't actually work on the core security teams of that language. Meaning: Just because I maintain a project that uses PHP doesn't mean I'm the expert authority on back porting security fixes. Spoiler: I'm not. I'm an expert in many areas but security fixes for legacy C applications is not one. I saw what I felt was to be a gap in full featured Vagrant development environments that still supported some recently end of life PHP versions. At my own day job we're still using PHP 5.6 and use Homestead as a base of our development environment. The aging version of Homestead v6.4.0 base box is getting older every day and I wanted to provide something my team could use as a stop gap while we wrap up our PHP 7.3 migration plan. As most often in the open source world I scratched my own itch and packaged it up but with one slight difference: if you want to use this you need to pay me for my efforts. If financially supporting an open source maintainer is foreign to you I'm happy to be the first one you support and introduce you to the amazing world of supporting individuals whose work you value. 
Unfortunately not. Our venue charges a *lot* for recording video. We hope to in the future!
I love how a library named Fann is collectively regarded to be the coolest
Full disclosure: I'm not a PHP programmer, rather a Javascript/Node programmer, but I'm trying to help a friend fix a fatal PHP error on their site. To wit, `Fatal error: Call to undefined function import_request_variables()` I've looked it up and `import_request_variables()` is deprecated. The relevant piece of code is this -- I noticed that the developer seems to have tried out the more modern form (?) and abandoned it. `import_request_variables("pgc", "re_");` `//extract($_GET, EXTR_PREFIX_ALL, "pgc");` `//extract($_POST, EXTR_PREFIX_ALL, "pgc");` `//extract($_GET, EXTR_PREFIX_ALL, "re_");` `//extract($_POST, EXTR_PREFIX_ALL, "re_");` &amp;#x200B; I found a solution on Stack Overflow here [Php import\_request\_variable stopped working](https://stackoverflow.com/questions/24782633/php-import-request-variable-stopped-working), that suggests using that same extract method &amp;#x200B; `extract($_GET, EXTR_PREFIX_ALL, 'p');` `extract($_POST, EXTR_PREFIX_ALL, 'p');` &amp;#x200B; Is this the correct method to follow? I've read in other posts (e.g. [here](https://www.google.com/search?q=import_request_variables%20not%20working&amp;oq=import_request_variables%20not%20working&amp;aqs=chrome..69i57.3071j0j7&amp;sourceid=chrome&amp;ie=UTF-8)) that this could lead to security errors, as does the PHP documentation [here](http://uk3.php.net/manual/en/function.extract.php) &amp;#x200B; &gt;Warning Do not use extract() on untrusted data, like user input (e.g. $\_GET, $\_FILES). and that it's best to import the variables specifically, but I'm not sure that I'm adept enough at PHP to go through all the code and figure out where each variable is being used... What's the best way to solve this issue swiftly and securely? Thanks for any help!
Burn it with fire and start over.
The `query()` method is using `%s` variables in the query string. That almost certainly means no prepared statements. I would not use this package.
Okay, clearly my misunderstanding on that first part, sorry about that. But I still don’t think anything I’ve said is wrong, and I don’t think you’re giving Red Hat et. al. enough credit for actually putting the effort in to backport security fixes to versions of PHP that are no longer supported by upstream. 
I really wish it would work on Windows as I've seen it work on our production server and it's absolutely amazing.
It uses http://php.net/manual/en/mysqli.real-escape-string.php for all "%" variables. I have used it in public facing production sites for 5+ years and witnessed SQL injection attempts and scans - never had a problem. As it says on the meekro site: "MeekroDB has a perfect security track record. No bugs relating to security or SQL injection have ever been discovered." Takes both the security risk and overall clumsiness of MySQL/MariaDB/Postgres in PHP away.
Are you trying to sell this?
&gt; But I still don’t think anything I’ve said is wrong, and I don’t think you’re giving Red Hat et. al. enough credit for actually putting the effort in to backport security fixes to versions of PHP that are no longer supported by upstream. What we do is about making trade offs. There are no solutions, [only trade offs](https://www.goodreads.com/quotes/1411380-there-are-no-solutions-there-are-only-trade-offs). My team uses PHP 5.6.x on CentOS because I (and we as an industry), trust that project. I'm comfortable with the trade offs between running 5.4.x and 5.6.x. Others may not be and I'm not saying any of us are wrong. We all have these trade offs we have to do deal with because BUSINESS!™. It's not for me to tell *anyone* what they *need to do*. This is where so many of our colleagues go wrong (IMHO) and how flame wars and tribal angst festers. I can only tell you what worked well *for me in my situation of trade offs* and how my usage varies from industry practices / best standards / PSRs / The Right Way / etc because I found value in a process that was outside of the normal. This is exactly where every conference talk idea I've ever written comes from. &gt; Okay, clearly my misunderstanding on that first part, sorry about that. Absolutely. we're just a couple of people who are wrong on the internet.
Full disclosure: I'm not a PHP programmer, rather a Javascript/Node programmer, but I'm trying to help a friend fix a fatal PHP error on their site. To wit, &amp;#x200B; `Fatal error: Call to undefined function import_request_variables()` I've looked it up and import\_request\_variables() is deprecated. &amp;#x200B; The relevant piece of code is this -- I noticed that the developer seems to have tried out the more modern form (?) and abandoned it. &amp;#x200B; `import_request_variables("pgc", "re_");` `//extract($_GET, EXTR_PREFIX_ALL, "pgc");` `//extract($_POST, EXTR_PREFIX_ALL, "pgc");` `//extract($_GET, EXTR_PREFIX_ALL, "re_");` `//extract($_POST, EXTR_PREFIX_ALL, "re_");` I found a solution on Stack Overflow that suggests using that same extract method &amp;#x200B; `extract($_GET, EXTR_PREFIX_ALL, 'p');` `extract($_POST, EXTR_PREFIX_ALL, 'p');` &amp;#x200B; So I uncommented the code above. However I get nothing in the variables that are being passed, which in this case, are `$re_sec` and `$re_sub` &amp;#x200B; That is, this code fails &amp;#x200B; `if ($re_sub &amp;&amp; $re_sec) { $content="./$re_sec/$re_sub.php";}` `else if ($re_sec) { $content="./$re_sec/index.php";}` `else { $content="./home.php";}` I've also read that using extract with $GET may be unsafe, although I've been told if it's the first line in the file it should be fine. &amp;#x200B; What's the best way to solve this issue? As I said, I'm not a PHP programmer and I'm kind of banging my head against this.... &amp;#x200B; Thanks for any help!
TIL, Thanks! That sounds like something implementable in Sniff or better Rector. Could you share a link? 
`Warning This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.` Just use `$_GET` and `$_POST`... Or `$_REQUEST` Also, don't copy scripts you find online that are 8+ years old. They are what give phone bad name. 
You're welcome :) &amp;#x200B; [https://blog.jetbrains.com/phpstorm/2019/03/phpstorm-2019-1-beta/](https://blog.jetbrains.com/phpstorm/2019/03/phpstorm-2019-1-beta/) &amp;#x200B; There's a "Locating dead code" section
Thanks for the feedback and your are welcome.
You are correct. 'Why' is powerful than 'how'. Actually, it's a very nice quote, I think.
When it comes to obsolete public APIs, doing machine checks can be really unreliable, because you never know if all uses are within the particular codebase. What I do is instead, is: - I'm extremely skimpy on public methods in the first place. Public API should be minimal and tight. - I have a concept of "public classes and interfaces" despite PHP doesn't. Most of the implementation details go in a subnamespace "Internal" that no one outside the parent namespace should ever call. - When a method/class is being replaced with something better/different, I immediately mark the old one as @deprecated. - Over time, users of the code adapt as their IDEs show deprecated symbols as crossed out. - In the next major version, everything @deprecated is removed.
Never "import" anything you don't expect. If I expect a $_GET[$varname], I use only that. If I expect a $_POST[..] or $_SESSION[..] variable, I call it, that's all.
Before bullshit detector
Per class
https://github.com/jenssegers/imagehash is quite niche but, conceptually, I think it's pretty cool!
You should check out https://github.com/usmanhalalit/pixie
Wonder whether it allows one to take advantage of more modern SQL techniques such as Window Functions, CTEs etc?
Melbourne; Juniors 50-80k, mids 80-100k, seniors 100-130k, leads 130-150k excl super. Sydney: +10k. Adelaide, Brisbane, Perth, Darwin: -10k. &amp;#x200B; If you're not getting paid along those lines, find new work. Good devs are in pretty short supply at the moment. &amp;#x200B; Fun fact - those salaries have been consistent over the past 4 years; there's been no "wage growth" at all.
That stuff sounds a little over my head. But it does allow you to execute raw SQL statements (I've used it for custom functions quite a bit). You can chain your raw SQL with the built-in methods as well. As such it should still provide you the flexibility to run whatever SQL you need with the added benefit of using a PDO layer under the hood.
Does this include WP Developer as well?
I really do not like JavaScript/ES6 's syntax for arrow functions. Especially this proposal because it is similar and makes the code more confusing/slower to read and understand. Think of all the mental mappings you need to parse in your head each time (fn to function and =&gt; to use etc). It's not intuitive unless you've really studied the language and all its idiosyncrasies intensely. I prefer the clarity of the existing method even if it is more verbose. Code is supposed to be quickly readable for the programmer writing and maintaining it. Programmer time is more expensive so it shouldn't be terse quirky syntax optimised for the computer to understand. So, a big downvote from me, it goes against the principles outlined in the book "Clean Code" from Bob Martin.
Install PhpStorm 😂
Not really to be honest, this is for Software Engineers. If you're using WP/Drupal/Joomla/Magento etc - chances are you're at an agency, the work is shit, clients are on a budget and you're basically getting $20k under what the market is paying SE's. I got a bit of flack for being a bit too direct on a related post a few years ago - might be worth a read: [https://www.reddit.com/r/webdev/comments/1bn140/looking\_for\_a\_raise\_as\_a\_front\_end\_developer/](https://www.reddit.com/r/webdev/comments/1bn140/looking_for_a_raise_as_a_front_end_developer/) &amp;#x200B;
&gt; &gt; &gt;Also, don't copy scripts you find online that are 8+ years old. They are what give PHP a bad name. Thanks. As said, apart from being a programmer (Node, JS, etc) I don't know anything about PHP, just trying to help a friend. I will pass along the general sentiment (which I've gotten in other forums) that the existing code is bad and should be replaced.... &amp;#x200B;
I agree on the agency part. I've worked on an two agencies and the pay is terribly low. Afterwards, I applied for a company who develops proprietary system and got offered twice as much as I earned on those agencies. Are you still working as a frontend developer in agency? I wonder how many companies are hiring php developer.
Do you live in Adelaide by any chance? Is there a high demand for PHP Developers there? I tried looking for jobs on Indeed in Adelaide and only got 2 pages of result.
Which database? MS Sql, MySql, MariaDB, PostGreSql ?
MySql
Awesome, thank you :)
Indeed, I agree with you on all points! Also, instead of doing it such a complicated way, you can provide people instant upgrade path. I also write in the post **this is mostly useful for private projects**.
Micro-optimizations usually aren't worthwhile for project code, but enough of them can sometimes make a huge difference for libraries and their users. For example, we've been able to boost performance 50% in `league/commonmark` over the years thanks to dozens of micro-optimizations that were gradually introduced over time. And we just got another 5-8% boost with this backslash optimization, likely due to the massive number of calls to core functions like `count`, `str*`, `preg_*`, and `mb_*` during the Markdown parsing process. Yes, some logic is more convoluted and harder to maintain as a result, but I've decided that tradeoff is worthwhile in this particular situation. Ultimately you just need to weigh the time spent making those optimizations against the net impact to determine if it makes sense for your particular case.
Looks very much like Laravels query builder
Alternative (self permotion warning) which isnt a query writer, just a PDO wrapper to help with binding: https://github.com/ellisgl/GeekLab-GLPDO2
Indeed. But nicely de-coupled from Laravel.
It's a bit of a loaded question... The reason you're using a specific method is usually down to the problem that you're trying to solve, and by extension, is dependent on the examples and projects that they're learning from. I think a good piece of general advice is "avoid repetition" ... many people getting into PHP basics for the first time will do horribly outdated things like put database connection logic into each and every page, so I'd suggest maybe starting off with an introduction to flow control and the idea of a bootstrap -&gt; execution -&gt; render pipeline. 
Nice, somewhat. But it's only query abstraction, right? I've been using https://github.com/illuminate/database and the nice thing is IT IS Laravel without the framework. You can just ist they query builder part, too. But you can go full ORM and use the model concept. I actuality use the latter and find it quite nice because it's lead mental overhead for everyone. 
Well what's in a post URL? I assume the post ID? Then you would need to get the ID of the next/previous post from your database. One way to do it is to sort your select query by the created date, and get the next/previous record from the result set. Another option could be to sort by ID if it's an auto increment integer value.
Please post this to /r/PHPhelp 
I assumed as much. I would still rather use prepared statements and parameter binding (PDO) for performance.
For something that is maintained, try latitude/latitude. (Full disclosure: I created it.)
 [http://localhost/blog/post.php?post\_id=34](http://localhost/blogas/postas.php?post_id=34) but when i have posts with ids [34.35.36.37](https://34.35.36.37).. and delete 35, i cant go to next post
As I said the [first time you posted this] (https://www.reddit.com/r/PHP/comments/b1s3wh/what_is_the_safe_correct_alternative_to_import), you should just burn it and start over. There are probably a huge pile of other bugs in this code.
Each to his own - enjoy
Right so you would need to fetch it from db, something like this should suffice: Select id from posts where id &gt; 34 order by id asc limit 1 This should return ID of 36 when 35 is deleted
\&gt; I'd like to know what particular understandings people struggled with while learning PHP, I spent a lot of time worrying about the performance of every last bit of code instead of learning to recognize the places where inefficient code would cause problems. I also didn't understand that step 1 is get to working code with tests around it, and step 2 is optimizing what you've written (using those tests to make sure it does the same things) &amp;#x200B; I also spent a lot of time worrying about whether code would continue to operate the same way in future versions -- one example that sticks with me is the order that nodes will be returned in when looping over a \`SimpleXML\` or \`DomDocument\` object. This was the early days of XML and there was no explicit contract about what order nodes would come back in (vs. SQL, which I was more used to). Again, it took me a while to accept that \_this code does what it does now, we probably can't know how it will behave in the future, so the best we can do is make it work and make sure it has tests around it\_. &amp;#x200B; So rereading that, I guess generally the important message is: The most important thing to worry about is getting to working code, quality/improvement is an iterative process. So with your frame I'd say lessons that can demonstrate two ways of doing something that lead to an identical result, but then diving deep on what some of those differences are with live profiling/logging. Seeing the differences is more important than being told, as is learning \_how\_ to profile/examine the full behavior of code.
Have a look into that stuff, it's very cool
https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client This plugin. It has a built in static analyzer which is must faster (almost real time) compared to PHPStan. It will catch typos as undefined variables and highlight them. Also it's free and doesn't require a yearly license to use.
https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client This plugin for VSCode highlights unused variables and functions. Public, private, and protected.
This is definitely useful, but I've found it to produce an awful lot of false positives. For example classes which are constructed in Symfony's DI container are marked as unused, as well as things like event listener methods or others which are only called via DI config. That might be improved by not excluding the cache directory, but then you get duplicate declarations which interfere with navigation. If anyone knows a solution or improvement to this please let me know.
I've tried all of those -- can't get it to catch undefined variables in viscose UI :(
I've tried it. intelephense will flag certain problems (e.g. missing ';'), but it's not highlighting undefined variables. Does that require special configuration?
Cover composing systems with independent components as well as using a big framework. And when to use which.
WordPress has this feature built in no coding neccessary. The default theme.
yup, but my task is to create simple blog only with php and database. without wordpress 
If we do your homework your lecturer gets the credit when obviously he failed to teach it.
Can it remove the code for you?
Or Netbeans (it’s free)
* When running functional tests, generate doctrine database schema once for first test and on every other test just run cached raw sql to re-create schema * Use in-memory sqlite db for tests * run tests in parallel with brianium/paratest * ignore all unit test files from vendor directory * disable xdebug for composer and tests if coverage is not required * run as much as possible in parallel- composer, npm, tests. *Use precompilled unit test, qa tools, so they are not required to be installed every time
Why can not be taught bc you learn it through experience. 
Bitch bitch bitch, that’s all I hear from you. “Oh it’s so hard cry cry” Shut the fuck up
What is with the spaces in the arrow syntax? iv never seen that before. $example -&gt; echo('Hello World'); 
Hi all! I am web designer by trade that builds mostly simple business websites but have been branching out my PHP knowledge beyond some basic templating. When I was building my own personal site I wanted to try something different to WordPress. I was keen to handcode much of my website but running a blog in this way would be a nightmare. The state of PHP static site generation is not ideal and I do not really fancy the build step stage anyway. I built this to be everything I wanted from a blog and nothing more. A super simple, customisable frontend and a JSON API to integrate elsewhere. There is basic demo with default theme here: [https://nicholas.dev1.adgr.dev/](https://nicholas.dev1.adgr.dev/) I am 100% sure there is some huge improvements that can be made to the codebase and I really appreciate some pointers if anybody could be so kind!! Many thanks. :)
Hey man. Congrats on your first project. I suggest you check out php the right way and research design patterns. There are lots of things wrong with the code and these will point you in the correct direction. 
Design patterns like MVC are always important, and kind of what other people have said about not repeating yourself. 
The easiest solution (not best perfromance-wise) would be to have a method like: $data = getDataFrompage($page); In cour code it would look like this: &amp;#x200B; // mypage.test/?page=1 $page = $_GET['page']; getDataFromPage(int $page): array { $limit = 10; // on all pages 10 entries, magic number here $offset = $page * $limit; $result = query("SELECT * FROM mytable ORDER BY id LIMIT $limit OFFSET $offset)"; // handle errors return $result; } $prevPage = getDataFromPage($page - 1); $currentPage = getDataFromPage($page); $nextPage = getDataFromPage($page + 1); $hasPrevPageEntries = !empty($prevPage); $hasCurrentPageEntries = !empty($currentPage); $hasNextPageEntries = !empty($nextPage); Of course the code will not work and is poorly written (not even a class). But it should give you an idea how you can achieve your goal. &amp;#x200B;
Hi folks, I'm the author of this project and while you all guided him all the way to executing the script correctly (thanks!), PHP distributions on Windows seem to include a cURL module that is incapable of verifying some HTTPS certificates so a bugfix for Windows compatibility was needed. &amp;#x200B; You can read the rest here: [https://github.com/itskenny0/dumpia/issues/4](https://github.com/itskenny0/dumpia/issues/4)
Where are you gonna host your app?
On my web server that I currently have through ipage 
Then yeah mail should work http://php.net/manual/en/function.mail.php AWS won’t let you send emails from EC2 instances, that’s why I asked 
Sure, it‘s great because it does the job of those many encodings and quirks. BTW: Not using SMTP and a real account for sending mail (but mail() ) will be punished by most receiving mailservers.
 $number = 294.1; var_dump($number * 100); // float(29410) everything fine here var_dump(ceil($number * 100)); // float(29411) ceil() should have been a no opperation in this case why it adds one? &amp;#x200B;
Does it make it easier to send html formatted emails 
Look at example 5 on the link I shared ...
Well my tiny mind has been expanded. I gotta go practice my SQL now. Thanks!
I will! Thank you!
Check out https://www.h-schmidt.net/FloatConverter/IEEE754.html Floats are still represented in binary. 294.100006103515625 * 100 = 29410.0006
It's going to be a floating point error. because of how binary storage works for decimals, what you are actually working with is the closest approximation to 294.1 which is going to be something like 294.1000000000000000000000003 (not actually accurate, but an idea). When you multiply it by 100 you're getting 29410.0000000000000000003 Because you're using `ceil` which is a function to always round up, it see's the `0.000003` and rounds that up 1.
The fact that PHP is displaying 29410 does not mean that value is 29410. There is a fractional value to that float that PHP is not displaying. From php.net &gt; Note that 'ceil' can show unexpected behaviour when using float values due to inaccuracies in the float system and PHP tendency to freely limiting the number of digits it displays to the user. It might like it is rounding up values that end in 0 (zero) but actually PHP is not showing that the value is not exactly the value it shows.
I use it on an AWS instance (using SES). It's great for our use. Attachments, embedded images, HTML with a Plain Text alternative. Simple to use and have never had a failure due to it. 
It's hard to make a 'code review' because you really don't know where to start... This is not how php development should be done, I suggest looking at the popular frameworks and how they work. To be honest, every piece of your project (code, structure etc) must be rewritten. I don't mean to be rude, but it's a very immature code.
I think some people miss out when they talk of symfony as a framework. The significance of Symfony is not the "Symfony Framework", which can be great, but the components which somewhat became the std lib of PHP at this point. mainly by copying Java though. Some people who use other frameworks don't even realize that they use Symfony under the hood. Laravel is build using Symfony components and functionality. So while SF kept up with improvements of the language, CodeIgniter hasn't. And that was all it took to have a strong enough foot hold. Laravel 5 coming into the scene which offered stream lined, rapid development type of development made CI utterly redundant. At this point I don't think there is a need for more php web frameworks. The ecosystem is somewhat stable and gets continues improvements. Want something lean, use collection of necessary Symfony components or make your own SF skeleton. Need to develop and deliver something fast under more standard requirements Laravel have you covered. Need something which may get complicated down the line, pick Symfony. So what else we need. What CI 4 would provide what we couldn't get with time tested, maintained and developed tools? &amp;#x200B;
As others have pointed out, it's floating points issue, that exists in all programming languages. They couldn't be represented correctly in computers and tend to have unexpected rounding issues like what you have been experiencing. I would suggest you to use BCMath (http://php.net/manual/en/ref.bc.php) if you need to do operation on floating point numbers.
PHPMailer is a sweet tool and is the standard workhorse of PHP mailing. However, the very process of sending mail has lots to consider, DKIM, SPF and plenty more. I recently dumped all of my PHPMailer setups in favour of Mailgun and its PHP API (HTTP client). They have a free tier that provides 10,000 emails per month. 
No. It's not a feature I'd want because static analyzers are not yet good enough to know about dynamic usage of functions as well as variable class names. Things like: $className::function(); call_user_func(array($myobject, 'say_hello'));
You can send mail through Mailgun using their SMTP connection method and stick with PHPMailer if you don't want to lock yourself into a library, but I think it's generally less reliable than the API method.
Thanks for your feedback. When you add spaces before and after the object operator (`-&gt;`) it becomes more readable. right? It supports all the new versions in PHP (I have tested 5.3+). However, it's your choice. When you create an object from `myClass`, that object is an instance of `myClass`. When, you convert an array from or the result from `json_decode()` will be an in instance of stdClass. Please see this to learn more: [http://php.net/manual/en/language.types.object.php#language.types.object.casting](http://php.net/manual/en/language.types.object.php#language.types.object.casting)
It's certainly a bit slower back of the back-and-forth round trips as part of the SMTP protocol. The bigger benefit is, you avoid things like port blocks (common on cloud providers) and having your server IP blacklisted. 
I see. Can it report all unused functions and variables at once or just in opened file?
You can setup a static analyzer to do that. It takes a long time to parse all the source on a large project with lots of packages so typically you would not want that to be constantly running in the background. It tries to prioritize open files and scans things outward from there in priority depending on what it uses. The above is just example code but it's typical for routers to do something similar where you give it a regular expression to match and if it matches a certain function runs. The static analyzer won't realize that function is being used in many situations. I've also written CLI tools in PHP where the "jobs" are classes and the functions in them only runs once a certain command line switch is passed which matches the class name so again the static analyzer won't think it ever runs because I'm checking if the switch is in an array of allowed switches. The array is populated by grepping the namespace folder for any classes that extend a "Job" abstract class so it's populated dynamically from the source code. You could also write path routing in a much simpler way /$classname/$function/$param1/$param2/$param3
That understanding what was going on was possible without the use of XDebug. Seriously. It took 4 months to finally understand what my boss was telling me when he asked "And what is this parameter's value when you step through the code?" I always answered by quickly recalling what was being passed. It was only when he stepped through the code with me (for about the thirtieth time) that I saw that Xdebug allowed me to check my assumptions.
Do not exclude the cache directory and make sure the Symfony plugin is enabled. I have no issues with duplicate declarations since Symfony stopped "compiling" all classes into a giant file years ago. 
&gt; [...]that exists in all programming languages[...] This is the key takeaway here.
Throw exceptions in the constructor for invalid values.
Well your doing something wrong. Did you read their docs? Did you install their dependencies? Did you configure them? [https://imgur.com/a/GkBCBJv](https://imgur.com/a/GkBCBJv)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/OYfKK0U.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
There’s heaps of agencies looking for devs, but from your other posts that might not be what you’re after. Still, as a short term job that would be an easier thing to get your foot in the door while you look for higher paying jobs. 
How FPM segregated multiple sites on a multi tenant host via running a pool under separate system usernames. And before that jails. But, now that VPS machines are so cheap-- I don't worry about it so much anymore because each client gets their own.
It is possible to inspect data without xdebug. But, it is slower and worse in just about every aspect you can compare...
My biggest misconceptions was that I should use LAMP. The AMP part is TERRIBLE. I use nginx, postesql (or sqlite) and C#/razor. I would NEVER recommend apache/mysql/php; not even to my enemies.
I've done one stint at an agency as a lead / principal (managed both front/back teams) and wouldn't do it again, I'll take a lower pay at a product company without hesitation (which I ended up doing and actually enjoy the work 10x). There's plenty of PHP work in Melbourne and Sydney from what I gather - look into a few frameworks / meetups (symfony, laravel etc), join the slack / discord groups and so forth. I'd recommend getting into React / Vue if you haven't already. 
I've got a site sort of dedicated to misconceptions, https://phpdelusions.net/top The list is not well formed though, some entries are just trifle, and some are missing. But it can give you some pointers. I would say that the most muddled topic for learners is error reporting. There is a whole bunch of delusions. Starting from the notion that errors are sort of nagging that have to be ridden of at any cost. And then a learner finally gets to the idea if handling errors, there almost no good examples showing how to do so
I would highly recommend swift
Session state management
Swiftmailer is a much more modern approach, I would go with that.
&gt;If (isset($var) &amp;&amp; !empty($var)) Oh that one is a good one, I had a lot of people doing that the first time I did a bootcamp.
I’ll do it for $5k usd
Why do you need it from scratch? There are a lot of forum software packages out there already. You'd have a much easier time hiring someone to customize one of those to your needs. I suggest checking out /r/forhire The going rate for a decent PHP developer, depending on experience is $30-70/hr.
whats the average up front pricem? sorry idk if i used the right term :E
No one could tell you that without a comprehensive business requirement document outlining everything you need the forum to do. Anyone who quotes you a price without seeing a detailed plan is trying to rip you off.
Why don't you take any of the thousand forum softwares out there? phpbb e.g. Custom software is pretty expensive
Odd. intelephense is the last one I tied, and with that I do get undefined variables flagged if they're **in a function** (as in your image), but if they'e in the global part of the script then they'e ignored. Is that just a standard part of php? &amp;#x200B; \[my vscode\]([https://imgur.com/cc28VVC](https://imgur.com/cc28VVC)) &amp;#x200B; &amp;#x200B;
I went in trying to build an entire project, but I had no understanding of the fact that each page didn’t have to be its own program. When I learned about the power of a file with the common methods, I started using a file called functions.php. It took me a lot longer to start learning OOP and by the time I got half decent with it, I lost the programming bug... :/
swiftmailer, your can sign your emails
Any Dev would just go and modify something existing anyhow. The client rarely cares how it was done, just as long as the specification is met.
What's your budget? 
 - that i would spend 6 months to a year learning php and then start making php websites. It actually took many, many years to cover the language and gather an efficient set of snippets. 
There is a way to add any method called "magically" into the list of entry points in PhpStorm. It will then be considered that this method is called and will stop warn that this method and the methods it uses are not used. &amp;#x200B; To access the list of entry points, you have to use the inspect code command manually (on your file or your project) and you will see the list of the entry points. &amp;#x200B; They are considering changing the way entry points are managed to make them more accessible.
Have a look at https://github.com/php-deal/framework (Aspect-Oriented Programming)
* Misconception 1: That the term "model" has a consistent meaning. It turns out some people refer to the model as a folder or namespace containing all your business logic while other people refer to "models" as your entity classes. I would read instructions like "put your model code in this folder" or "put all your business logic in the model" and think they meant I should only have entity classes, each with dozens or hundreds of functions. * Misconception 2: That, after teaching myself PHP/programming for years and then joining an agency, I'd be working with competent programmers on par with myself. In reality (from my experience in Australia), many people have little experience, can't resolve git conflicts, definitely can't architect a project, and have no desire to learn.
Phpmailer is a great library I myself have used it so many times.. Lots of documentation, online example and lots of Developers to help you out in case any problem arises.. While swift mailer can be a good library also,phpmailer have been there for long.the most important thing about a Lib is to have an army of developers around it who can help you whenever a problem arises. Note : before you use a Library research If there are lots of Dev around so can help you out in case any problem arises. 
Where are you getting those figures from? I'm in the lead category, and a few years ago I approached a recruiter in Brisbane and said my goal was six figures. They practically laughed in my face. Or do product companies tend to hire privately?
Performance is often not the issue.. in webapps... it's mostly IO that makes a site respond fast or slow... (e.g. slow database queries, low disk IOPS, networking issues, etc.. or badly written code, that repeats without reason (unoptimized loops etc)). But all the famous languages are faster in doing their thing, than we can process in our brains. And ttm (time to market) is more appreciated than execution speed, from the business vision. Tuning can be achieved later on (and via all kinds of means: loadbalancing, clustering/sharing, code optimizations, cdn, etc etc)
Ah, I did not know it did not work on Windows. I don't know why that would be - I assume it uses `multi_curl` internally, and I imagine there is no reason why call would not work on Windows. 
I see. I'm PHPStorm user, so this would very difficult for me. It's better to be IDE and OS independent. Have a tool in CI, like PHPUnit or EasyCodingStandard.
Think of a class as a cookie cutter and the object is the cookie, even though they are related it wouldn't be right to call the cookie cutter a cookie, the class is just a template.
Hi friends! I posted my code here for review yesterday and was ROASTED! Not wanting to waste anyone elses time I removed it and went away and did some learning on OOP design patterns. I am just having some trouble applying this conceptually to my code. I'd really appreciate if someone could share some thoughts on how you would structure your classes &amp; methods in my fairly simple example? &amp;#x200B; My current code is here: [https://github.com/adamgreenough/nicholas](https://github.com/adamgreenough/nicholas) &amp;#x200B; Simply, it gets files from a /posts/ directory, parses front matter &amp; markdown from them and then loads them in to an array for generating JSON &amp; outputting on front-end. 
Just wanted to say that I don't think your code is that bad. You use comments in a good way (perhaps a little excessive), it's easy to follow the execution flow, the code is easy to read and the functions does what you expect. OOP is great and will make the code more maintainable if this project grows. On the other hand, I've seen OOP-code that is way worse than your code.
Code is not bad but can be massively cleaned up... you have too many unnecessary if/else statements. Some of them can be extracted to reusable functions and also look into ternary operators. You also repeat some code which again can be extracted. I’m on my phone so can’t give specific examples. More of a personal gripe but maybe look into PSR-2 standard... it takes no time at all to learn and makes code more readable in my opinion.
I saw your post yesterday and didn't comment because I generally don't comment on anything, but I would say that getting roasted for posting a procedural-style PHP blog isn't very fair, so don't take it too seriously. Anyone who has been using PHP for a long time started there and it is a fine place to start. In terms of structuring classes and methods just start with doing what makes sense to you. There are lots of great object-oriented principles (like the SOLID principles: [https://en.wikipedia.org/wiki/SOLID](https://en.wikipedia.org/wiki/SOLID)) and frameworks that can help to lead the way (Symfony or Laravel), but really it's just practice that will make it make sense. Go nuts and try something and when you realize you've written a confusing mess refactor it and try again! I thought I would share my own personal markdown reader as well, hopefully no one feels the need to roast me but if they do, meh, I'm still working: [https://gitlab.com/midnightLuke/wiki-reader](https://gitlab.com/midnightLuke/wiki-reader)
Thank you for taking the time to check it out! Appreciate your comments and glad I am doing some things right. Some great points about OOP not being a silver bullet.
Looking at [https://github.com/adamgreenough/nicholas/blob/master/app/frontend.php](https://github.com/adamgreenough/nicholas/blob/master/app/frontend.php) This files seems to contain 3 groups of functions. Pagination (get\_next\_page\_link, get\_prev\_page\_link), Theme specific (load\_theme, get\_header, get\_footer, ) and Tags (display\_tag\_list). You could easily turn this into 3 classes with minimal effort. However, the load\_theme seems to function seems to do less loading of themes, and more instantiating of routes. Consider changing this. Looking at the index.php from on overall point of view, you registrer all the routes in a clean way, I can instantly tell what's going on, then out of nowhere this load\_theme() function is called, from just the index.php's file point of view I'd assume this to just load the theme, I didn't know it's responsible for loading the 3 key front-end routes.
I don't have a written example but here is some good reading: https://phptherightway.com https://phpunit.de https://github.com/vlucas/phpdotenv https://github.com/domnikl/DesignPatternsPHP And, nowadays I would keep my html/css/js separate as their own files and php would just act as an API to the front end. For inspiration on how to use oop I would take a look at some of the existing frameworks out there. Hint: Your index.php can start with loading the entry point to the app and then -&gt;run(). You would use the 'use' statements to import your classes vs requiring them. SOLID design principles - https://en.m.wikipedia.org/wiki/SOLID Unit testing your code, tdd will make you think about your code differently, and help you write better as well. 
If you don't like (their idea of) OOP, you may try going the functional way. Do OOP your way, whatever. Experiment. Learn (at least on beginner level) other language and see how they approach OOP. Either way, it's more important to know principles, than object orientation, like DRY, SOLID, REST, fail fast, boolean trap, 80/20 etc. Side note: I usually make 2 project, one back end, one front end, and the front end doesn't have a P from PHP since browsers don't run PHP. This way it's easier to maintain, deploy, add other front end... In short, separation of concerns (another principle)
Also just a tip about your config.php file, I would use just 1 array list called $configOptions or something and have every config option as the keys of an associative array.
I 100% understand im trying trying to get my head around the concept. All im trying to outline is that when someone sees: $object = (object) $array; They are going to get confused, because (object) is notationally being used as a defined class type and not an instance.
First of all you need to think of: which classes make sense in my project. Label your functions and group them together in one file. Change the filename to that label. Then you can create a class per label and put the functions inside. Also note: check your params before using them in your method. You have 2 options on how to put them in your class, statically and "normal", while statically cannot reach $this, keep that in mind. Which parts do you want a class for, keep that in mind
There is plenty of stuff to nitpick, but most of it really is no big deal. Having markup in your code made me wince a bit (get_prev_page_link). You are clearly a novice, but your code is reasonably clean and concise and structured. Doing it "OOP way" would mean creating classes of Posts, Tags, maybe Themes and such. But in practical terms you would end up with more files, more functions, more code and might be left wondering why you would jump through these hoops. There is no reason to assume it is the "correct" way unless you are doing it as an exercise simply to understand OOP. It only really starts to make sense when you have tons of classes with complex relationships and interactions. Generally speaking, in OOP, a class would represent a DB table and an object of that class a DB record. Obviously you don't even have a database, but you can still use classes as sort of containers for related functionality. You can also have pure utility classes for security- or maintenance-related tasks etc. Having a "functions.php" is a bit of an anti-pattern to begin with and if you continue to develop your project, it will grown into an unreadable 1000-line behemoth. Seeing naked function names like that also bugs me - unless they are rather verbose it is not obvious what they relate to. Whereas, say, $t = new Tag('showerthoughts'); $t-&gt;getPosts() is rather self-explanatory. Or you can go static route with TagManager::getPosts('showerthoughts'). Referring to $_GET and such directly is error prone and tedious. You are already using composer, find a component to handle request life cycle. In fact, using a microframework like Silex or similar will go a long way. Then again, it might not be as educational. 
You don't get it do you? I'm not the one bitching or crying about it. I don't use Wordpress and I have the luxury of turning down any WP work that comes my way. I'm simply stating the reason why Wordpress has fallen out of favor with experienced developers and why it will eventually become obsolete. Right now, if you want to contribute code to the Wordpress core, you have to submit it through what is essentially a SUPPORT TICKET SYSTEM. That does not have a happy ending. Period.
Prestissimo will finally be obsolete when Composer 2.0 releases, the c[urrent dev has parallel downloads and HTTP/2 support](https://github.com/composer/composer/pull/7904).
Thank you for taking the time to check it out! I am sure you are right that would be better but I would love to understand why if you have a good resource on hand? 🙂
For one, it takes up less space, it's cleaner and it doesn't waste variables, read this also: [https://www.abeautifulsite.net/a-better-way-to-write-config-files-in-php](https://www.abeautifulsite.net/a-better-way-to-write-config-files-in-php)
Great point about the if/else statements! Definitely the more I wrote I think there must be cleaner way for this. I will revisit many of those as well as look in to the PSR-2 standards. Thank you for taking the time to reply! 😊
You rock! Excellent link. Thank you. 
I am earning a solid part of my income by programming (however not fulltime) since 30 years now and let me say this: I think I know what OOP is and that it does make a lot of sense if you're dealing with molecules, real objects that are modeled inside a machine over sufficient timespans so that multiple operations or modifications on the objects do make sense. This being said, what "objects" do we have in webdesign? A database object, that's for sure and it does make sense to create an object in memory for each mail to send, each PDF - but besides? Maybe a table could be an object, or a database row - but it will last only milliseconds and we always have the same procedure: Some SQL query gets gobbled together (SQL knows nothing about objects), then the database does the rest. You display what the DB throws at you. I rather try to model my software very close to the capabilities of a database. If I would add more and more abstractions with getters and setters and whatnot for every single table columns, I feel that's waste of lines. I also try to reduce the dependencies to the absolute minimum. 
It's not that bad. OOP is nice and I would encourage you to learn it but take one step at a time. I've taken a quick look and found something you should address IMO. Found it here: https://github.com/adamgreenough/nicholas/blob/master/app/api.php Take a look at how it sets the page variable. What happens if someone passes through a different type than integer. You can easily fix it by doing something like: intval($_GET['page']);
Nice! `:-)`
Personal experience hiring / firing devs, being in the Melbourne market 4 years, help run a few meetups, seen friends move across a bunch of cities. We're pretty candid with each other about what we're earning etc. I'm on $1k/day and was on $150k + super as a lead back in 2014-2015 (both PHP/Laravel). Don't work with recruiters - it's in their interest to get you as low as a wage as possible, because that means they get a higher cut; eg company approaches recruiter with a 120k budget for a role. Recruiter offers you 90k, you accept 95k. Recruiter pockets 25k. If you're on an hourly / day rate - and the budget is $1000/day - same deal. They'll try and get you for $750 meaning they get to keep $250 every day that you work. A few recruiters get a flat rate per placement - something like $10k per hire, those are a bit better at getting you what you want. Some do 3 months salary, which is more incentivised to give you the max salary as that means they get more. Product companies don't work with recruiters generally for the above reason. Go to meetups, go to networking events. Meet people, add them on LinkedIn / Facebook etc. Have a portfolio site, have a github account with a bunch of random code. Find companies you want to work for (Brisbane has Boeing, Microsoft, Amazon etc) and these are paying a pretty good salary. Polish up the CV, make connections, apply directly. Get on the discord, slack etc. Honestly if you've got Australian Citizenship, get an E3 visa and jump to LA/San Fran - it's one hell of an experience and worth doing - you'll come back 2-3 years later with around $100k cash and can laugh in recruiters faces when they try and short change you. 
I usually Just do something like: ``` $config = require('config.php'); ``` And then in config.php ``` &lt;?php return [ 'key' =&gt; 'value' ]; ```
The real link is here: https://morioh.com/p/a06f4f365b59/developing-restful-apis-with-lumen-a-php-micro-framework
On a sidenote, stuff like DB connection which is individual per user, I'd use dotenv for that.
Thank you very much! Those classes make sense now you say it. That is an excellent point on the theme loading too of course it made sense to me as I wrote it but totally see how that is not as clear. I will address that also. Thanks again for your nice comments! Really appreciate your time. 😄
Beautiful README.md! Code style is somewhat inconsistent, for example `if(condition)` for all `if` conditions but `foreach ($x as $y)` for all `foreach` loops and https://github.com/adamgreenough/nicholas/blob/master/app/functions.php contains mixed tabs and spaces. In the PHP world people usually stick to [PSR-2](https://www.php-fig.org/psr/psr-2/) which includes PSR-1. In the near future [PSR-12](https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md) is probably going to be accepted so I would recommend sticking to that. There are tools like [PHP_CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer) which may detect inconsistencies and [PHP CS Fixer](https://github.com/FriendsOfPHP/PHP-CS-Fixer) which may automatically fix those. Obviously code style is a matter of personal preference but if people are seeing something unfamiliar in every new project it is more taxing to read through it. Or vice-versa: A single universal code style (per language) is better than multiple even if in the beginning you don't like it just because it makes it a little bit easier to work on multiple projects. Regarding OOP. Have a look at for example: https://github.com/adamgreenough/nicholas/blob/master/app/functions.php#L103 If you would do OOP you make it possible for someone to for example use another Markdown parser or another approach for rendering posts entirely (for example BBCode from decades ago). You could have an interface Renderer { /** * Renders content into HTML. * * @param string $content The raw content * @return string The rendered content (HTML) */ public function render(string $content): string } The function from above could be written (leaving out doc comments for now) class ParsedownExtraAdapter implements Renderer { private $parsedownExtra; public function __construct(ParsedownExtra $parsedownExtra) { $this-&gt;parsedownExtra = $parsedownExtra; } final public function render(string $content): string { return $this-&gt;parsedownExtra-&gt;text($content); } } And on the calling site, at https://github.com/adamgreenough/nicholas/blob/master/app/functions.php#L72 you could wrap `get_posts` and `get_single` into a class and depend on the interface from above: class PostController { private $renderer; public function __construct(Renderer $renderer) { $this-&gt;renderer = $renderer; } public function getMultiple() { // ... left out for brevity $post-&gt;body = $this-&gt;renderer-&gt;render($content-&gt;getContent)); } // getSingle is almost the same } Then if you use a DI container (like [PHP-DI](http://php-di.org/)) you enable the person who might want to use your blog system to replace `ParsedownExtra` with any other renderer without having to touch the code, just by implementing the `Renderer` interface and configuring the DI container. All this is the __[dependency inversion principle](https://en.wikipedia.org/wiki/Dependency_inversion_principle)__. Obviously this is a lot more code so you have to weigh whether that's something you want as a feature or not for each aspect of your software. But it also makes [unit testing](https://phpunit.de/) simple because then you could test the `PostController` without having to rely on Markdown content or a working Markdown parser and HTML renderer.
That's one of the SOLID princles people bang on about, the S - Single responsibility. A class should be responsible for 1 thing. If you we're to take that load_theme, there's 2 things in there, 1 - the inclusion of the theme, 2 - the registing of the routes. In an ideal world, you'd have your own `Route` class, and that'll be called like `$route-&gt;registerFrontendRoutes()` to register those routes (as well as $route-&gt;registerCoreRoutes()` or whatever for the other routes listed in you index.php file. The `Theme` class would have `$theme-&gt;load('my-theme')`, and the load function would parse the argument into a resolved path. I did start taking a look through your entire code to see HOW things should be split up, but footie is on the TV and that takes presidence over Sunday coding ;)
The OP has been heavily influenced by WordPress (get_header, get_footer, get_prev_page_link, etc).
100% look at a coding standard, PSR-2 is always one I use, it reads the cleanest IMO. https://www.php-fig.org/psr/psr-2/
Spot on! I am a WordPress designer/developer by day. I have clearly picked up some bad habits from that. 
Thank you for taking the time to respond! Glad I am doing some things right. I am learning a lot about OOP and I really appreciate your thoughts. I did not know that using $\_GET directly would be an issue so thank you for bringing that up. I am thinking about how I can remove the HTML from the next/prev page links. Would you have those as a separate view file with just the tiny bit of HTML?
I also don’t post normally. The few times I did I got bashed. I don’t think the community is very friendly. Procedural is great to start. Any coding is great to start. Experience, not talking and reading, will teach you the best practices. If you can take some time for reading and practicing that’s awesome, but you need to make some mistake to understand the value of some practices that are considered best. 
I write procedural code all day everyday, not in PHP, but still... what's wrong with procedural code?
The PHP community got stuck in rut a loooong time ago
Here's my 2 cents. I've said it before, the PHP community is stuck in a rut. It's that mentality that "it can't be any other way, just the PHP way", which is wrong. It's a good thing that "standards" are starting to emerge, PSRs and Composer helped a lot, but it's also a fact that it's easier to write bad code in PHP than maybe in a statically typed language. Let's be honest, most PHP devs. haven't touched any serious programming language besides PHP, these are the people who roast and bash others online. I'm sure that programmers who really push PHP forward as a language are not doing this at all. So you should think about how much weight you put on those comments. Once you broaden your horizon and start looking at other programming languages you'll realize that there's nothing wrong with procedural code, there's nothing wrong with requiring all your dependencies and not to abstract it away with autoloading, etc. etc. These are the questions that you should ask yourself regarding your code. Does it work? Is it secure enough? Can I write unit tests for the code base? I my code consistent enough? Would I have to re-read all my code base 3 months from now, just to make sense of it? Also, performance should be almost the last thing you should think of, cross that bridge when you get there. 
I don't usually answer to this kind of question, because I think I'm not knowledgeable enough to answer, but based on my humble experience, I'd learned OOP the hard way (I think so) by using frameworks (like CI, Laravel, etc). Understand first the framework that you choose to play with, I suggest you try using Laravel, this framework helps me a lot on understanding OOP and design patterns. My advise for you is you must understand first the basics of the OOP bit by bit while using framework, experiment on how it works and eventually you'll get it as you are getting familiar with it. Lastly, stick to 1 or 2 guides that you find easy to follow and understand, having too much resources might get you confuse because everyone has their opinion at some point,specially in design pattern.
Everyone is hard for OOP. And this is a very unpopular opinion nowadays, but there’s nothing wrong with using procedural code if that’s all that is necessary. 
good code overall. &amp;#x200B; I suggest you group functionality in separate files instead of creating classes as a first step: create post\_functions, parse\_functions, etc .. so you can visualize which functions belong to the same domain. &amp;#x200B; As others have pointed out you have repeated code specifically the \*Get the contents and convert it to HTML\*: promote it to its own function. &amp;#x200B; And since you're targeting PHP &gt; 7 you can use ?? operator to remove those if/else statements found in api.php.
To me you sound just like someone who's used to 30 years of procedural programming and not wanting to learn something new (even though OOP has been around for many years). &amp;#x200B;
&gt;Less code means less errors, better to audit and maintain. I feel that very often, OOP adds bloat. I hate t when I have to read OOP code to really understand what's going on. I swap between dozens of files continuously. This shows you don't understand what OOP is. Better to audit... I just don't even know what to say but wanted to reply anyway to express how wrong your comment is. 
Procedural code has its place but it's not ideal for situations in which you're dealing with structured data. You end up re-writing the same thing over and over.
There is certainly a risk of abuse of OOP patterns and the 90ies lead to to much OOisms. However saying "it will only last milliseconds" is not an argument. Milliseconds is looong (especially if CPU, not wall time) in context of a PHP script. However objects and classes are a way to structure and encapsulate code as well as giving names to things. An array with a row of data from the database but if it is passed to some "distant" part of the application it might not matter that the data came from the database and how the database is structured but calling it a "User" and describing what a user can do is beneficial. Also "jumping between files" is not much of an argument. With good names one can follow the high level outline and only drill down if needed (of course OOisms can hide the flow behind factories and facades and useless abstractions) Back in the days we only had goto as a way to structure code. This works but enforces to always look at the low level detail, making the big picture harder to grep and making collaboration in teams harder. Clear module boundaries and protocols for Cross-Module calls allow parallel development which is is essential for larger systems. The 80ies were great, but things evolved. Things change for reasons and there is always some experimental Avantgarde followed by mainstream which settles in the good parts.
Procedural code is object-oriented code without making use of polymorphism. (Vice-versa polymorphism is the essence of OOP, there cannot be OOP without polymorphism.) Polymorphism is useful for exchanging parts of your software without changing the code itself. Which is required for unit tests. Don't you write unit tests?
Sorry if I missed something in your post when making this reply, I kinda skim read it. I think this is your problem: &gt; Note that I'm the only one working on the sites so I don't have the issue of conflicts and branches. You *want* branches, usually one for production, and one for development. Your production one is often, but not always, master. You then apply a gitlab-ci.yml to your respective branches, you can either have a distinct gitlab-ci.yml file per branch, or have one master file and use branch selectors in it to control what happens. When you commit a change, gitlab will run your gitlab script (assuming you've set up the relevant runners) and, depending on your clone settings, should automatically load the committed project branch into the run directory for the build process. You can do whatever you want with at that point, including deploying it to servers via whatever means are available. When you want to push those changes to production, you merge your development branch changes into production/master.
Even better, use dotenv.
Look into autoloading PSR-4 with Composer
What the hell does it have to do with PHP?
I poop on camera for money.
Yea its not really possible to detect if a variable is declared in the global scope because that variable could have been defined before including that file with \`include\` or \`require\`. Its best to avoid using global scope. 
 &lt;?php if(preg_match($content, 'PHP') echo "You are cool";
Missing a delimiter aren't you?
Without testing the script, I'm guessing: Parse error: syntax error, unexpected echo, expecting '(' at line 2
Yup, but if you fixed that you'd still need delimiters around the pattern: &lt;?php if(preg_match('/PHP/', $content)) echo "You are cool"; 
I believe I've been messing with frontend frameworks for too long. E_WARNING would also complain about the undefined variable, unless the script is being included somewhere else.
&gt; So if I fix a bug for example, I can't do a 'git push' because I'll also push my working stuff that I don't want out there yet. As Sentient_Blade said, use branches. "git flow" is a branching model that addresses exactly this problem. In this model there are two main branches: master and develop. Anything that's on develop automatically deploys to staging, anything from master deploys to production. You work on develop branch, and when changes are ready to be deployed, you merge changes to master branch. Now, if you have some changes on develop, and want to release a bugfix, you create a hotfix branch from master, apply the fix, and merge it into both master and develop. In git-flow there are also release and feature branches, but it's not that important if you're working alone. There's git-flow extension to git that simplifies the process (although I think it's best to know how to use it without the extension first). &gt; Maybe there's an exclude option for git so I can tell git to not show Static Files Well, there's .gitignore - you just put patterns which files/directories to ignore.
No wonder that show is messed up.
Why did people laugh when he said he built a website in PHP once? 
Their production schedule perhaps. But the show itself is really well written. To be fair, you have to have a very high IQ to understand Rick and Morty.
Indeed. The Hemingway/shotgun reference comes to mind.
 No, you don't need a really high iq to do either of these.
[The humour is extremely subtle, and without a solid grasp of theoretical physics most of the jokes will go over a typical viewer's head. ](https://knowyourmeme.com/memes/to-be-fair-you-have-to-have-a-very-high-iq-to-understand-rick-and-morty) 
Because if he would have said Javascript, they would have given a standing ovation.
If you want to see a project that does what you are trying to do done right, check out: https://github.com/getkirby/plainkit Their main website is at getkirby.com It’s really great and is really well designed and written.
Not without first installing 52 different libraries through 5 package managers
/whoosh 
Don't know why you are getting downvoted you don't need to be Einstein to understand Ricky and Morty or code PHP
Not OP, but: In this case, I'd create $nextPageLink and $prevPageLink when you fetch all $posts. Then, in your view, use something like: &lt;?php if ($nextPageLink !== null) { ?&gt; &lt;a href="&lt;?= $nextPageLink ?&gt;"&gt;Previous page&lt;/a&gt; &lt;?php } ?&gt; Generally, your view isn't split well enough from rest of your logic. It's confusing when you call functions from your themes, since sometimes it's just a *require*, but sometimes it's actually more than that. I think it would be better if you'd make a function like: function render($viewName) { require 'themes/' . FRONTEND_THEME . '/' . $viewName . '.php'; } and that would be the only function called in files from themes folders. For instance, instead of get_theme_directory_url I'd create $themeDirectoryUrl variable or THEME_DIRECTORY_URL constant before rendering view etc. I hope I've explained it well? Overall, I'd use the MVC pattern - it should make it easier to use OOP in your code.
We’re in the same boat... I interviewed at this new studio for a development position. I have been a dev for 2 years and part of my request when accepting this job was that I had a senior developer to work under and be mentored by. The boss was happy to agree, telling me all about their processes and how everything goes through a rigorous system and yada yada. So I accepted the job, keen to work under someone much smarter than me and improve my dev skills and also do everything “properly and go industry standard”. What they didn’t tell me was that a) The senior developer had already put in his resignation letter and b) no.. they did not do anything “properly / to industry standard” Was out of there so quick..
Half of which may or may not contain malware dependencies.
There's sort of a meme around about it, I forgot completely about it when I posted that. Oh well lol, let the down votes come!
Others have explained the issue if the float representation and why you get that result from ceil(). I'd recommend you to use round(), specifying the rounding strategy that fits your problem instead of ceil() to get around that issue.
2 years working full time with non trivial applications, and perhaps a year of learning basics of coding prior to that. Now if you take into account all the irrelevant quirks which are kept for BC perhaps longer, but that's just a distraction for the most part. Did you know that php has "var" keyword for declaring variables? Was common in php 4. It's very productive, very simple, straight forward, synchronous server side scripting language. So simply there isn't all that much to learn. You can start learning other relevant things like software architecture while using php. But if we are talking just algorithms when to step up your game as a programmer you'll eventually have to pick up another language which has broader feature set.
because that line was a bit like "I can draw. I drew a stick figure once..."
To be fair, you have to have a very high IQ to write PHP.
I guess they took it to mean that he was being self deprecating - he's in a room full of Googlers and he's saying, yeah I'm just like you guys, I did a thing in PHP once so I totally know how to build a complex web application! I think they were probably not laughing at PHP per se, but rather at the fact that what he'd done with it was probably nothing very sophisticated, and yet he's saying "ah yes - I too am... *a coder*".
The high IQ thing is copypasta and a sarcastic joke about people that think the high IQ thing is true
Technically not a book, but https://phptherightway.com/ is a phenomenal resource!
52? Are you just getting started?
Ya, caught that a little too late. I'll leave it rather than delete out of shame.
It was rather long. I was trying to be clear with my existing process and how I was perceiving the new CI/CD type process with the tools would work. The branches comment was certainly uninformed :) I was just saying that since I'm the only one doing the coding, that I didn't have to deal with others and doing merges and such. Thank you for your response. I'll dig deeper into the branches. Even your comments has me rethinking the process so I hope to be on the right track.
Thanks. I'll check out the 'git flow' model. I'll have to study upon the creating a hotfix branch to post updates like bugfixes. It sounds like I have to copy my changes to the master in order to apply them to the production server. I'll dig deeper into that. And I've seen .gitignore. I think that'll help although if I'm just pushing to a different develop branch, I may not need that. Thanks folks! I wasn't sure where I could ask this and I figured a programming sub (and my site is php) might have some insights. It's appreciated.
Hey, me too! PHP
NOYCE 
I agree
IMO there are two ways to start learning OOP. (I think #2 below is better) 1. Learn and understand two concepts: High cohesion, and low coupling. 2. Learn test driven development and try to get 100% test coverage on something that you create. The reason I prefer #2 is because you, in trying to achieve this will as a side effect teach yourself #1 and #2 in an intuitive way. I should note that there are many other principles of "good code" that I'm leaving out, but IMO you're 99% there if you can achieve low coupling and high cohesion. As far as your library goes, honestly I would start by adding phpunit to your composer.json and create your first object. Mabe it's an HTTP `Request` object? Something that handles/processes an HTTP request and the superglobals that you reference throughout the code base.
Considering Google use PHP themselves it would be a bit weird if they were laughing at PHP itself.
I would suggest not to get hang up too much on buzzwords of various paradigms. There is nothing innately wrong with procedural code, for example success of Go language should serve as convincing enough. And I would bet that most people commenting here are actually writing procedural code by composing php classes. People often confuse code modularity and reusability with OOP for some reason. When you adhere strictly to OOP principles it actually creates more problems than it solves. Hence most of the languages support multiple paradigms. SOLID does not apply just to OOP. Actually OOP is rather poor way of following SOLID to it's logical conclusion, functional does it way better, but that's a discussion for another time. &amp;#x200B; Now to the actual request for comments. In PHP it's commonly accepted to use classes as modules. And dependency injection as a common way to bring those modules into scope where you need them. So you can bundle up those functions into class member methods and import entire class where you need it. Now this is not OOP. This is still procedural code. As you're not actually encapsulating data with behavior. Your class represents set of functions which share common orientation in your program. Right, we are not bundling those methods together with state / data they operate on. Data is kept separate. And we compose our services through which we run our data in sort of reusable pipeline components which run an entire procedure on set of data. I hope you catch my drift now. :) Just expect a lot of people to talk about OOP here and how OOP is great and OOP is king. And as well meaning it is, it's not accurate description of what we commonly do in PHP. We write procedural code using classes as means to modularize our code and to compose different set of procedures to run our data on. &amp;#x200B; So what you can do next? Look for easily implementable dependency injection libarary. Something like Pimple might help. Or just go straight for Symfony DI component. Learn to use the container to bring class instances into scope. And rewrite your code using that. Oh also, props for snake\_case\_naming. It's actually way more readable than camelCase. However, for some awkward reason PHP FIG opted in for camelCase as agreed upon standard. And while it's suboptimal in terms of readability, it's better to maintain consistency with the rest of professionals. :)
It’s just a hello world app
&gt; Generally speaking, in OOP, a class would represent a DB table and an object of that class a DB record. Oh my god. THANK YOU. I've been working with SQL for years and have been trying to break into programming this year but have been having real trouble getting my head around OOP. I realize you've given a general rule of thumb there, but I feel that was the last dot I needed to connect things. I feel like an idiot, this is **already how I mentally picture things**.
I guess that explains why he's such a genius.
No problem! &gt;I'll have to study upon the creating a hotfix branch to post updates like bugfixes. It sounds like I have to copy my changes to the master in order to apply them to the production server. I'll dig deeper into that. In this model you don't "copy" the changes, you "merge" them to master ;)
Well I would not be surprised if they did use PHP for certain things, after all, Google is a pretty sizeable company, but I am not aware of any Google projects that use PHP. AFAIK Google is mostly a Python, C++, JavaScript and Go shop. Care to share which Google products are PHP based?
NIYCE
I'd strongly recommend looking into deploying to a container via the gitlab ci/cd process. In many ways it can simplify the process by giving you a consistent environment, although the setup can be a bit harder.
Containers is something else I'm exploring. I'm the Kubernetes SME at work and have a Kubernetes here at home but I don't deal with containers other than system level ones. Just like the programming stack, I want to get familiar with the container process including deployment.yaml files to deploy my code.
It sounded like I had to create a third branch where I'd have to redo or copy my develop branch changes back into the master branch. I'll get it. :) I need to poke at branches a bit and see how that works. Sometimes we just need someone pointing in the right direction :) 
&gt; Don't work with recruiters - it's in their interest to get you as low as a wage as possible, because that means they get a higher cut; eg company approaches recruiter with a 120k budget for a role. Recruiter offers you 90k, you accept 95k. Recruiter pockets 25k. That's not how recruiters work in my experience. They tend to work off a % of the first years salary package + GST for full time employment. As a result, they tend to _over inflate_ the asking rate for a candidate. They are incentivised to keep their candidates happy at a place of employment by a (typical) 3 month replacement guarantee. They do a lot of shady shit, but I've never heard of them pocketing the difference between an asking rate and a paid rate - except in the context of contract work where the recruitment company is paid by the employer and the employee is paid by the recruitment company which is typical with some government contract arrangements.
[I was basing it off of this wiki page](https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites) Though now I have another look at it it doesn't have any citations so I'm less sure.
I wrote this: [https://developer.hyvor.com/tutorials/php/introduction](https://developer.hyvor.com/tutorials/php/introduction) to teach from the beginning to OOP. And, I'm updating it continuously. I have used the latest of PHP to write this. Code examples and visual examples are available. Also, there are more tutorials in the internet. If you search in google, you would find other resources. When you get a problem about a functions or any other language syntax, [http://php.net](http://php.net) is the best place to find our more details, as it describes everything deeply.
For those who missed it or would like to read: &gt;To be fair, you have to have a very high IQ to understand Rick and Morty. The humor is extremely subtle, and without a solid grasp of theoretical physics most of the jokes will go over a typical viewer's head. There's also Rick's nihilistic outlook, which is deftly woven into his characterisation - his personal philosophy draws heavily from Narodnaya Volyaliterature, for instance. The fans understand this stuff; they have the intellectual capacity to truly appreciate the depths of these jokes, to realize that they're not just funny- they say something deep about LIFE. As a consequence people who dislike Rick and Morty truly ARE idiots- of course they wouldn't appreciate, for instance, the humour in Rick's existencial catchphrase "Wubba Lubba Dub Dub," which itself is a cryptic reference to Turgenev's Russian epic Fathers and Sons I'm smirking right now just imagining one of those addlepated simpletons scratching their heads in confusion as Dan Harmon's genius unfolds itself on their television screens. What fools... how I pity them. 😂 And yes by the way, I DO have a Rick and Morty tattoo. And no, you cannot see it. It's for the ladies' eyes only- And even they have to demonstrate that they're within 5 IQ points of my own (preferably lower) beforehand.
That's pretty commendable!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
That's a laugh track added in editing not real.
They did those studies and wrote those books. Mythical Man Month and Peopleware.
I was not actually aware this was something to be concerned about in php. How exactly do you pull over memory leaks? some weird reference logic?
Easiest two causes of memory not being released in PHP (and many other languages, for that matter) are singletons and circular references. Singletons do it by design, so there's not a lot to be said for it. Config/DI tools tend to use them a lot for performance, which makes sense in a typical script so it's not a problem. Circular references simplify down to something like this: ``` $a = new stdClass(); $b = new stdClass(); $a-&gt;b = $b; $b-&gt;a = $a; ``` I think `gc_collect_cycles` will find and release that one if nothing else is pointing to either object, but once they start to get deeper (like parent/child relationships in an ORM or view hierarchy), good luck. There's a `WeakReference` RFC which I believe just passed which should help alleviate this when used correctly.
* Modern PHP - Josh Lockheart * Laravel Up &amp; Running - Matt Stauffer * Building Test Driven Developers - Chris Hartjes * Base Code Field Guide - Jason McCreary * Docker for PHP Developers - Chris Tankersley 
&gt; but once they start to get deeper (like parent/child relationships in an ORM or view hierarchy), good luck That's deeply concerning. Should those classes __deconstruct magic methods include what to set to null to remedy this normally out int he wild?
Well 52 is just what he *directly* uses, all the dependencies of those bring it up to around 5200. 
The guy who authored Modern PHP also built that website I believe.
Cause it's not in Node using the "Today's framework"
Destructors won’t fire if you’ve created a memory leak situation - if they did, you wouldn’t have a leak. They’re more useful for cleaning up resources like file handles. If you look at e.g. Doctrine, there’s the clear method on the entity manager to release all of its references (among other things). Thats one of the reasons it adds proxy classes. It’s pretty rare that any of this matters unless you’re using something like ReactPHP, since data carries over between requests. Obviously it’s better to not have memory leaks, but the “kill the world” serving model minimizes their impact. 
I can help, PM me
I see, thank you for your insight.
I’m available if you need any help.
This package does not concern itself with `gc_collect_cycles()`: those happen and are often unavoidable. More problematic are globals, statics, registered handlers with references to an entire framework stack, etc. Those are way more common, and very complicated to catch.
Thanks for the info! You might want to consider adding that to the README as well. 
Can you just use google forms? 
Send a patch: I explicitly call `gc_collect_cycles()` before performing memory measurements BTW.
Try r/phphelp That'll be $10 please. 
&gt; The only part i was unsure on was calling instances of classes "objects", because object is also a class with stdClass. Nah, they're objects. As in, that's the right term for them. Also: $obj = new Whatever(); var_dump(is_object($obj)); // true 
Object is not defined as a class type, it's just that stdClass is the only object PHP can automatically cast to. When people say "object", however, it can mean an instance of any class (including, but not limited to stdClass).
I think you might have misunderstood your example code. `is_object($obj)` means that somewhere down the line it inherits from stdClass which is the type class object. So it's both being used as the name as instances and the class.
Oh, come on, Duckett is launching his PHP&amp;MySQL book in September. That will be a huge thing given his normal top quality.
&gt; is_object($obj) means that somewhere down the line it inherits from stdClass which is the type class (object). Nope. It means it's an instance of any class. Not having to do anything with stdClass.
It's like telling a sculptur that you've made a snowman before. It's funny because it's not real sculpture. 
I think your not reading my text you have said this already. I don't know why your showing me code examples or docs. Im talking about clarity. I already knew what it evaluated to in your test example. I know what the docs say. Im suggesting that for clarity reasons, it may be confusing to call an instance of a class also the thing that the class creates instances from. instance type $object = (object) array('1' =&gt; 'foo');
&gt; I think your not reading my text you have said this already. OK that's four out of four cases now... &gt; Im suggesting that for clarity reasons, it may be confusing to call an instance of a class also the thing that the class creates instances from. An object. Is an instance. Of **any** class. That's what it means. If you find that confusing, you need to fix that with yourself, not with the rest of the world, which uses the term "object" properly.
That's soo weird dude. This really does not look like an instances of a class to me: (object)
It's quite clear you'll be stuck on this misconception for the rest of your life. Hang on to it, if it's that important to you.
Yes, it's a cast... because it casts to an object. This doesn't mean only instances of stdClass are objects. Which is very clearly shown by my code example. It's like this: - Red balls are balls. - This doesn't mean that *all balls are red*. Basic logic. - stdClass instances are objects. - This doesn't mean that *all objects are stdClass instances*. It's quite clear you'll be stuck on this misconception for the rest of your life. Hang on to it, if it's that important to you. Just don't tell other people they're wrong, when they aren't and you are.
W3schools
w3schools indeed my friend. https://www.w3schools.com/ 😏
&gt; I think gc_collect_cycles will find and release that one if nothing else is pointing to either object, but once they start to get deeper (like parent/child relationships in an ORM or view hierarchy), good luck. Cycles will be collected no matter how deep or complex they are. If a cycle is not collected it's either a bug in PHP, or (much more likely) not a pure cycle (you have something, somewhere referencing it.)
I think what i got stuck on was declarations being made. When we say objects are instances of classes that's true. I just meant we should have a cavat that the keyword is used for typecasting in the php implementation as well. I'm sorry for a bit of fun at your expense.
Please use r/phphelp for help requests in future (this and more in the sidebar). You don't give us much useful information to help you. "search bar" is pretty vague and could mean several different things. "Admin portal" covers a huge amount of possibilities. Break down your task specification into sub-tasks (eg. login, user management, etc) and work out which areas you need help with, then ask for help with those specific areas. There's tutorials in the PHP manual for handling forms. There's core libraries with documented examples for most functionality you should need including handling sessions, passwords and database connections (there's several options here - I'd recommend PDO as it's probably the most popular so is often easiest to get support for in forums and chat rooms - see also [PHP Delusions PDO Tutorial](https://phpdelusions.net/pdo)).
Sorry dude, but basically i have to make an e-commerce site got 5 pages index, aboutus, contactus, login and log out, basically i want the search bar which i got to go to the products on the page with php which i cannot do, i also want to make the admin page so when i login as an admin instead of it saying login and logout again i want it to show admin and then the privileges if that makes sense.
Lool tried that
Already tried bro
Also using mysqli with this
if you don't mind me asking what are you trying to code in PHP 
What specific part of your task are you stuck on? The PHP manual has tutorials for handling forms, and well documented core libraries / functions for handling sessions and database connections. It may help you to stop talking about "PHPMyAdmin" as if it were the database. PHPMyAdmin is a client for MySQL. Your application will interact directly with MySQL - it won't interact with PHPMyAdmin at all.
An ecommerce website with php and mysqli bro
what level course is this? also is it needing to be functional or?
Level 3 course bro, yeah its needs to work correctly, do you know any other site or someway i could figure this out because i need this in by friday
well I could probably help more if I knew the scope of the assignment. or what you're sruggling with..😅
Technically (and sadly) it is not 2019 as it was last updated in 2018 and the guy don't seem to be willing to make it up to date anymore :(
Lool its calm bro, ill just figure some way out 😂
there is a long way to go with your tutorial. It is good in general but needs some polishing. For example, PHP Output section is a mess: 1. It makes a link between the output and strings while there is none. There should be a separate chapter on PHP strings, while ouptou should cover only well - output. 2. Forget about print. It's no use to explain it to a learner. It would make them confused with no benefit. Whoever will be curious about print will learn from the manual. but it's no use to mention it in the basics tutorial. 3. "*Both echo and print can be used with or without parentheses*" is just a bullshit. Parentheses can be added to any php statement, not only echo and print. There is nothing special about echo. You are adding your parentheses not to echo but to the following statement. also, introducing shorthand echo before escaping from HTML is a bit premature.
Then I would recommend you re do that and actually get an understanding of PHP, rather than following a how to, if you want to be a developer you need to understand the code.
And the Strings section should be renamed to String functions. Just like it is done in the PHP manual. Strings as a PHP syntax element and string manipulation functions are teo completely different topics. And in 2019 it should really mention mb_ functions not basic ones. 
Bro, thats not it i understand whats on w3 but it does not explain what i need which is to make an admin page with admin privileges and so on, thats the issue dude since i am using mysqli with this.
Arrays section needs some polishing too. I am not sure if it's because you don't entirely understand arrays yourself or it's just the bad explanation but result is all the same: array(4 =&gt; 4) is technically associative but one wouldn't say so from your tutorial.
You say &gt; I also don’t post normally. The few times I did I got bashed. I don’t think the community is very friendly. but all I see in this thread are helpful comments, in a sub that is not supposed to be a help-sub. That is actually unfair. Most people in this community are really helpful. What people in this community don't like, and that goes for all programming communities: 1) Asking for help like they are entitled to receive it, as in, we owe it to them 2) Bashing PHP for non-sense reasons (we do laugh about the correct reasons) 3) Posting your framework full of security holes and bugs, telling us how all we did up until now was useless and they will make a "dent in the software industry" with it and then proceed to discuss how you are a software expert and we're just children not knowing anything As you can see, the OP did neither of those 3, so why would there be an outcry. Don't talk this community worse than it is, it's not helping anyone.
Don't use it on WordPress. I mean, unless you like having blood coming out of your eyes. Do you enjoy eye bleeding? 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Your post is very ironic. Thanks for the note. 
[Professional PHP](https://patricklouys.com/professional-php/) &amp;#x200B; Disclaimer: I wrote it
1: define a table structure (apply normalisation) looks like you'll need a user, permission and role table 2: create data type models in php 3: create service classes 4: create your controllers with the desired usage of service functionality 5: bind permissions to roles 6: restrict controller access based on role (and the role's permissions) &amp;#x200B;
&gt; &gt; &gt;The organization and the work-environment accounts for 1x \~ 5x. Good point, can confirm
Ok dude im going to try this thanks!
The state of this library and the state of a HTTP Request (the reason why JWT is called "stateless" is because you're authenticating with each request you do, you don't have a session ("the state") for the user) JWT and this library are two completely own things with completely own use-cases. There won't be a conflict.
This application was nice &amp; easy to understand, though I suspect it would quick grow worse with size here are my suggestions: add namespaces to stop operating in global scope, this will help prevent clashes in the future run the code through phpcs for whatever standard you want to abide by add a editor config file to help enforce your standards add doc hints to your functions add return types and input types add autoload -&gt; files to composer.json to get composer to require in your files if you find yourself needing runtime polymorphism, use higher order functions use a static analyser like phan or phpstan to check if anything moves outside of your expectations (in regards to types and dochints) move your routes to either a single location or consistent location relative to your modules/namespaces change your file names so that functions that have the word "posts" in them exist in posts.php, the same for tags etc, when they grow beyond a single file, create a folder and spread them across multiple files, at the moment they're in files likes "functions.php" which doesn't make much semantic sense, you wouldn't call a file variables.php or objects.php in get_tag_list() you want to use url decoding try to stop using generic variable names like $tmp add tests, for your application I would suggest http://peridot-php.github.io/ it's a rspec clone 
I think a good piece of general advice is "avoid repetition"
After years of using npm that still seems a little light
what are you paying, bud?
What are your thoughts on the topic /u/pwmosquito ?
Not aware about a stand-alone project, but they still write plenty of SDKs in PHP for developers, and wouldn’t be surprising if they use some of them internally.
Can conferm. Web divelipor, hear.
&gt;I was not actually aware this was something to be concerned about in php. I remember reading somewhere, from people working on projects like ReactPHP who are bringing the event loop to PHP saying that, there are a lot of libraries out there who are full of memory leaks, and part of the effort done by those communities as been driving the community to kill those leaks. 
Hey, I tried something like this once. &amp;#x200B; [https://find.techin.scot/news/](https://find.techin.scot/news/) is powered by blog RSS feeds, the Symfony app that collects and manages the data is open source but totally undocumented, but I could pull it out if you want. &amp;#x200B; Honestly, the biggest problem I found? &amp;#x200B; No-one has blogs with RSS feeds any more. Lots of content just wasn't there. Some was, but so much was missing. People tweet storm things, or they post on Medium or another walled garden then tweet them. Or they just post them in Slack channels. &amp;#x200B; Anyway, good luck :-(
Didn't give it much time, but seems it doesn't work with spl\_autoload\_register/spl\_autoload\_register\_checkClass\_setAlias, gives Class 'bar' not found "class foo extends bar {" and dies....
Do you have any peoducts in the database to search for yet?
Roll your own. Really, writing a blog is like next-level todo-list. 
I actually find that quite a lot of people are moving away from Medium these days. I also find that many blogs still have RSS feeds, especially people who decide to move away from big platforms like Medium. At least in my circles. It's true that not all blogs have RSS enabled right now, but it's kind of trivial to set up in most cases: many non-tech bloggers use Wordpress or a similar CSS focused on blogs. You're just a click away from enabling an RSS feed. Most static site generators also have the possibility to simply enable RSS. It's true that my target audience right now is focussed on blogs with an RSS feed enabled. But if the platform really gets going, I imagine bloggers will want to spend five minutes on adding an RSS feed, to be able to use this channel to reach new audiences. There's also the idea to support blogs without RSS feeds by crawling their website. This is a little more tricky, but it might be added in the future. 
- Principles of Packages Design - Pragmatic Code - Clean Code - Deep Work
If you report the issue - https://github.com/symplify/symplify/issues, I'll look into it
That's a suck good list, thanks!
I am very impressive with the content on the sample! It's in my must-read list. Nice work! :D
% is usually around 3 months salary (25%) - but that's no longer the majority of recruiters I've worked with (old school big companies \[Hays etc\] are still doing this, but experimenting with new ideas too).
lol bro dude you arent giving us enough info bro dude you need to figure out what specific questions to ask lol bro instead of "how do i make an admin portal" dude bro loooooool Also, seriously, drop the dude, bro, and lol
Procedural Programming is for amateurs, OOP is the professional standard. In a perfect script/program, everything is an object. You cant be perfect, but you can approach as close as you can. Procedural code is a code smell, something that professional programmers will need to identify and get rid of. 
That the xdebug will always work. Imaginve 15 days in fresh junior dev learning from experienced developer that binary search can also be applied to finding bugs by commenting out 1/2 then 1/4 then 1/8 portion of the code O\_O
Cache your migrations &amp;#x200B;
&gt; Last Updated: 2019-02-08 13:43:46 +0000
Oh, it was a [big one](https://github.com/codeguy/php-the-right-way/commit/e8c464dcea4c386123b8b0ed486bfad4ac69cd0b)
What exactly is not "up to date" about it?
On my Laravel project, I have a decoupled folder that has the business logic. I want to make this files fully decoupled from the framework. I always create classes for domain entities, but I need a solution to validate them. I have some questions: 1) If a class doesn't need any setter, should I still create setters/getters? If so, it will be a mix of setter/getter classes and public property classes. 2) I don't need getters on some classes. Can I only use setters with protected properties? The problem is I want to expose all properties of that object by itself without using getters. If I use public properties with setters, it wouldn't make sense. What do you recommend? I have some objects that have other objects as properties, so it is a bit painful to output them when I output these objects on an API. Regards.
Not a big deal to be honest. It's just the feeling when you come to a repository and suddenly remember there is a pull request you submitted a while ago.
But those would still be freed once the script finished executing, correct? Or is there something I'm missing.
Just to let you know, I only downvoted you because you're whining about downvotes in an edit like a little schoolboy bitch. Grow the hell up.
Yeah, nothing will persist across requests unless it’s a language bug. 
OK I see why maybe I came across whiny there, it's just weird to me that somehow people apparently think I'm saying wrong things, where I have absolutely no idea why. Apart from the whininess in the edit, I actually still don't. It's kind of like on Stack Overflow: if you're going to downvote, at least let me learn something. So, weird as it may sound: thanks for saying I'm being a little schoolboy bitch.
What is the homework and how far have you got so far?
What are you looking for ? Convention? URL Paths ? Etc?
Source code. I made a MVC website but I want to compare with other MVC website. I want to see how others made theirs MVC website. How they made their classes, etc. I find some example but only part, not the complete working website. 
Are you using a framework?
Pretty much all real world programs have to deal with state. Unless your whole computation can be modelled as a pure function you will have state. State itself is just a fact of reality. It's a function of time. &amp;#x200B; What we generally don't want to deal with in our programs is state that is implicit and/or mutable as they are difficult to reason about. Ephemerality here, in my interpretation at least, is to do with mutability of state, ie. a clean way to safely manage an entity's life-cycle is to create new instances on change. This is the basic idea behind containers. &amp;#x200B; On the other hand FSM is about explicitness. It's a tool to describe state in an explicit and centralised fashion as well as to restrict the potential state space to valid/meaningful ones. Not describing the state of your system explicitly does not mean it has no state, it just means that its state is implicit and hard to comprehend.
Nope, I try to understand everything (the most I can) before using them. Some of my controllers are very ugly... So I try to see how to make a good MVC before using framework. 
Symfony framework is MVC. Or are you looking for finalised sites?
tldr; wordpress is a virus with blogging features
I would then go look at some git projects using mvc frameworks for examples of what others have done.
I'm looking for finalised site in MVC but without framework. I try to see how to make a pretty good MVC website before using framework. I want to understand how a framework work before using it. 
Couldn't watch the whole video because of a slow Internet connection but the first 20 seconds are very true. A senior dev on my first job gave me a tip that I still use to this day. First make it work, then make it pretty. 
Couldn't watch the whole video because of a slow Internet connection but the first 20 seconds are very true. A senior dev on my first job gave me a tip that I still use to this day. First make it work, then make it pretty. 
You’re in the wrong place, neighbor. You want r/PHPhelp Or, find some classmates, a good computer lab, and enjoy the fun of figuring things out together.
I've been experimenting recently writing MVC projects from scratch like you. I ended up in making the decision to write a single controller class for each route, even without grouping related controllers in the same class. If your project is large, you will end in having a lot of class files, but this should not be a problem. I was worried at first because I was afraid to have duplicated code in controllers. I read a lot of articles. I am now sure this is a good pattern to follow, unless someone convince me otherwise. If you need the same service in more than one controller, you can write inject the required service in the controller's constructor. This way the dependencies are immediatly clear. You should take advantage of auto-loading so only the required classes will be loaded for a specific route. This should make the application super responsive (in terms of server processing time). The code will be clear and short, you will not have to be lost in hundreds of code looking for a particular method. And then, the light classes you will end up will be easy to test, and will follow the single responsability principle. While testing a method, you will end up in instantiating your class passing the required dependencies and nothing else. (E.g. if you are testing a method that doesn't call a dependency, you are forced to pass a null object anyway). &amp;#x200B;
The assignment is to create PHP pages using PhpMyAdmin database. Here is my zip file with clear and detailed assignment instructions and resources you might find to make your task easier: [https://drive.google.com/file/d/1bE7Xh1prSL39xofu-veGtlFp9haiHADR/view?usp=sharing](https://drive.google.com/file/d/1bE7Xh1prSL39xofu-veGtlFp9haiHADR/view?usp=sharing) 
Have gotten only 5% done. Wish I had more expertise and time. The assignment is to create PHP pages using PhpMyAdmin database. Here is my zip file with clear and detailed assignment instructions and resources you might find to make your task easier: [https://drive.google.com/file/d/1bE7Xh1prSL39xofu-veGtlFp9haiHADR/view?usp=sharing](https://drive.google.com/file/d/1bE7Xh1prSL39xofu-veGtlFp9haiHADR/view?usp=sharing)
Thank you for that information.
I've been recommending this book to junior developers since its release. It's an excellent resource for teaching the fundamentals of structuring a web application.
Why did you just link to another forum that links to the post you're referencing? Please just submit it directly.
Bub you're not gonna learn anything asking for somebody else to do your work. However I will give you some tips. $_POST Validate Protect from injection. Your hw is rather simple honestly. And I could probably write it up in a matter of minutes. But that wouldnt help you a bit
&gt; ended up in making the decision to write a single controller class for each route, even without grouping related controllers in the same class. If your project is large, you will end in having a lot of class files, but this should not be a problem. You may wish to investigate the [Action Domain Responder](http://pmjones.io) pattern, which works this way. (I am the author behind that site.)
Thank you, that is some motivating and wise advise!
Then I can highly recommend [Patrick Louys' No Framework Framework](https://github.com/PatrickLouys/no-framework-tutorial) and the more detailed book he wrote based on it. It goes through the basics of how a framework works and how to build your own simple framework. You can compare that approach to what you've achieved so far on your own.
I recommend you to check Codeigniter 3.x. In my opinion, this is the only framework which has pretty simple syntax and it's easy to understand. Check their [github repository](https://github.com/bcit-ci/CodeIgniter/tree/3.1-stable)
Domain Driven Design in PHP: https://leanpub.com/ddd-in-php
Let me introduce you to my good friend OWASP. https://www.owasp.org/index.php/SQL_Injection
Thanks ! This book will be helpful.
I will read this documentation, thank you.
Thanks, I'm reading your resource, it's well writing, nice job !
OK, thank you, i was doing one controller for each routes like you, so your answer reassure me :) 
Just to let you know, I only downvoted you because you're whining about whining about downvotes in an edit like a little schoolboy bitch. Grow the hell up.
Thanks for your thoughtful reply. I would beg to differ on "state being a function of time". As Albert Einstein demonstrated when he introduced the theory of general relativity, space and time are intertwined in a 4-dimensional manifold. And since "space" can be thought of as "state", I believe this implies that one isn't strictly a function of the other. But let's agree to disagree here. Regarding your other points, I agree entirely that describing state in a central fashion is better than having it implicit. But recently there has been a movement towards having no state at all (stateless lambda functions, stateless authorisation with JWT, etc), and this seems very sensible to me. It is somewhat similar to what happened with databases. People realised that SQL was causing a lot of scalability issues, came up with NoSQL databases (Cassandra, Google BigTable, AWS DynamoDB, etc) and the problems went away. Thank you for this intellectually enriching conversation by the way; this is why I love the internet so much. It advances human development by allowing us to communicate across the globe and exchange ideas. This makes me very hopeful for the future of humanity. Yours truly, H.
Ok, he lost me at his claim that WordPress is written using the functional programming paradigm, and that October CMS using an imperative paradigm. That’s most definitely false. Wordpress does not use functional programming but (bad) imperative programming, and October is object oriented. Not sure what this means about the rest of his statements or conclusions. I will look into October CMS next time I need a CMS.
How to get HACKED using PHP, MySQL
http://fabien.potencier.org/what-is-symfony2.html#is-symfony2-an-mvc-framework
Thank you for everything. I'll work on these very soon.
I think there was at least hundred similar videos posted during the last year, teaching php3 era coding. What makes these poor Indian guys shoot such terrible quality videos nobody in their right mind would watch? 
I just finished a really good course by Dave H on udemy that explains the process very well. His code for the course is available on GitHub: https://github.com/daveh/php-mvc The only hard bit to follow was the composer bits. They were recorded in a weird order. Disclaimer: am not David H, just really benefited from the course and the framework is simple to follow. 
No you again...
Little Bobby Tables.....
I recommend just reading through the tutorial for the Symfony framework. It has lots of code examples and is a pretty good implementation of MVC for the web. 
&gt;AWS won’t let you send emails from EC2 instances, that’s why I asked That's incorrect, you just have to register the sender on SES.
Yeah but why reinvent the wheel. It's not like rolling your own wheel is infallible to exploits either. Just my 2 cents.
I was a big fan!!! The project still exists: http://www.channel101.com/ It's where Rick &amp; Morty started, in fact (NSFW): http://www.channel101.com/episode/937 And probably a dozen other popular comedy shows (example: Community). 
Well... this is partial explanation. Yes, Symfony is not MVC framework but it **does** come with MVC support. RouterListener (and few others) are files that make it happen. &amp;#x200B; As example, I am making bundle that allows SPA w/o using JS framework, just simple &lt;20 lines of JS code. That means I have to take control over those files and render things differently; no json stuff, pure twig responses as usual. For non-js browsers (FB bot etc), site works as normal full-page load.
my emotional intelligence is that of a flea but I don't care.
Congrats on the new gig.
colinodell, i know it's an old reply of yours, but hopefully you can help me. We are in the process of "upgrading" our build and deploy flow (now deploy is done with git push, and than manually clearing cache, etc - which is obviously not right) I suggested Deployer + Gitlab CI combo. However my coworker (he recently joined us) saying that "the only real use case he sees for deployer is single developer who want to deploy fast from their local machine without writing gitlab/docker images, and since we already have docker images written (for our dev environment) that we should use docker images+ Gitlab CI" I guess has something like this in mind: [https://puu.sh/D1ZRp/c7f83905c8.png](https://puu.sh/D1ZRp/c7f83905c8.png) [https://thecodingmachine.io/continuous-delivery-on-a-dedicated-server](https://thecodingmachine.io/continuous-delivery-on-a-dedicated-server) Could you comment on that? I gave argument that with Deployer you can easily roll back, but he replied that you can rollback with Gitlab CI too which is right.
Tetracyclic, very detailed reply! &gt;Tools like [Deployer](https://deployer.org/) (self-hosted) and [Envoyer](https://envoyer.io/) (SaaS) make this process easier to manage and potentially more reliable. From there you can grow the complexity of the system in many different ways, using continuous integration tools such as CircleCI, Gitlab CI, Travis or Jenkins to automate the build process, run through your entire test suite and compile assets before deployment. Does it make sense to use Deployer with Gitlab CI ? Or is Deployer for more simple set-ups and Gitlab CI for more advanced build processes? The reason i am asking is: We are in the process of "upgrading" our build and deploy flow (now deploy is done with git push, and than manually clearing cache, etc - which is obviously not right) I suggested Deployer + Gitlab CI combo. However my coworker (he recently joined us) saying that "the only real use case he sees for deployer is single developer who want to deploy fast from their local machine without writing gitlab/docker images, and since we already have docker images written (for our dev environment) that we should use docker images+ Gitlab CI" I guess he has something like this in mind: [https://puu.sh/D1ZRp/c7f83905c8.png](https://puu.sh/D1ZRp/c7f83905c8.png) [https://thecodingmachine.io/continuous-delivery-on-a-dedicated-server](https://thecodingmachine.io/continuous-delivery-on-a-dedicated-server) Could you comment on that? I gave argument that with Deployer you can easily roll back, but he replied that you can rollback with Gitlab CI too which is right. &amp;#x200B;
&gt;If you are using docker, you can carry out many of your build tasks locally, build it into a new version of your image and then you just have to pull a new version of your image on the remote. [https://docs.docker.com/get-started/](https://docs.docker.com/get-started/) Do you mean something like this? [https://puu.sh/D1ZRp/c7f83905c8.png](https://puu.sh/D1ZRp/c7f83905c8.png) [https://thecodingmachine.io/continuous-delivery-on-a-dedicated-server](https://thecodingmachine.io/continuous-delivery-on-a-dedicated-server) The reason i am asking is: We are in the process of "upgrading" our build and deploy flow (now deploy is done with git push, and than manually clearing cache, etc - which is obviously not right) I suggested Deployer + Gitlab CI combo. However my coworker (he recently joined us) saying that "the only real use case he sees for deployer is single developer who want to deploy fast from their local machine without writing gitlab/docker images, and since we already have docker images written (for our dev environment) that we should use docker images+ Gitlab CI" Could you comment on that? I gave argument that with Deployer you can easily roll back, but he replied that you can rollback with Gitlab CI too which is right.
&gt;The company I work at has moved all it's products and services to docker and have everyone run local development in docker containers and have Jenkins/Gitlab (CI/CD) can handle deployments. We have them set up with webhooks so when we push, it'll automatically build and test the environments and then if everything passes it'll merge the branch into master and deploys to a testing/staging server. Do you mean something like this? [https://puu.sh/D1ZRp/c7f83905c8.png](https://puu.sh/D1ZRp/c7f83905c8.png) [https://thecodingmachine.io/continuous-delivery-on-a-dedicated-server](https://thecodingmachine.io/continuous-delivery-on-a-dedicated-server) The reason i am asking is: We are in the process of "upgrading" our build and deploy flow (now deploy is done with git push, and than manually clearing cache, etc - which is obviously not right) I suggested Deployer + Gitlab CI combo. However my coworker (he recently joined us) saying that "the only real use case he sees for deployer is single developer who want to deploy fast from their local machine without writing gitlab/docker images, and since we already have docker images written (for our dev environment) that we should use docker images+ Gitlab CI" Could you comment on that? I gave argument that with Deployer you can easily roll back, but he replied that you can rollback with Gitlab CI too which is right. &amp;#x200B;
What?
&gt; IMHO as someone who has done both I don’t really see the benefit of solution #2 yet. I did solution #1 for a long while and it was nothing less than efficient. However our lead dev told me to go the solution #2 route and so I did. :shrug: LOL, that's exactly the argument we have now with my coworker: We are in the process of "upgrading" our build and deploy flow (now deploy is done with git push, and than manually clearing cache, etc - which is obviously not right) I suggested Deployer + Gitlab CI combo. However my coworker (he recently joined us) saying that "the only real use case he sees for deployer is single developer who want to deploy fast from their local machine without writing gitlab/docker images, and since we already have docker images written (for our dev environment) that we should use docker images+ Gitlab CI" We have smaller size project, so i don't want to add unnecessary complexity.
If your team is familiar with docker then yes, that is a better plan, otherwise Deployer is an excellent solution for continuous deployment of non-containerized projects to single or clustered VPS environments.
Also, if you're doing Docker, you will definitely want to use an orchestration tool like Kubernetes. Simpler solutions like docker-compose will cause more downtime because they aren't as smart about rolling out deployments.
Great news! All the best for the future.
That's good news! Over the years, not always but sometimes, it felt like the ES PHP team didn't always manage to be on top of their game. No recent complains though; and overall it's a great library, looking forward how it's getting improved.
Thanks - this has restored my sanity somewhat. However, I'm still a bit surprised that you recommend avoiding the global scope; I mean, don't php developers just plug &lt;?php ... ?&gt; elements into their html like **all the time** without putting the bulk of their code within functions?
The biggest question is how many frameworks use these misconceptions?
We need a similar pasta for PHP, just for the lulz
What?
What?
What?
Maybe you can try out Qmessaging API gateway, it is based on http method. Qmessaging is one of the most reliable bulk SMS service that helps to blast out your SMS to 200+ countries. It's fast and cheap! Click [HERE](http://www.qmessaging.com/) to find out more. 
#WHAT?
It's something like this in the database. [https://imgur.com/Ez3nlf0](https://imgur.com/Ez3nlf0) I don't understand why this was done.
Probably used to wrap html links around the url 
URLs can be stored in the database, just like any other data. What's particularly wrong with it?
Seriously? If you decide to run the site on any other server it won't work, that's what's wrong with it. Fucking Wordpress inspired stupidity. 
If your assumption is correct and these are the site's own URLs then yes. I don't see why it should be so though, unless this site weren't put live for all these years
You're right on. It has never been live and has only been running on localhost. What they did was put the computer's IP on static. When the IP was reset, it did not run. This is why I'm trying to understand what is the use for this URL in the database. My office mate said it is for security purposes (not sure if he's right) and I highly doubt it's the case since it's been running on localhost.
It's the application's own URL. We had to enter the local machine's IP every time.
\&gt;PHP 5.2 &amp;#x200B; ABANDON, I REPEAT SOLDIER, ABANDON RIGHT NOW!
my eyes [bleed](https://github.com/SergeyTsalkov/meekrodb/blob/master/db.class.php). And the dev asks 50$-400$ for that? damn
Congrats! Recently I started working at one of the larger companies and I've had to switch to python as my main language... Makes me miss PHP quite a bit, specifically I feel the open source community in PHP is more mature than the python one. In any case, live the dream buddy. Live the dream. 
:'(
misconception: MVC means something specific: as commonly used in PHP it does not refer to the actual MVC pattern, because it's not feasible using traditional http and html. It just means there is some separation of concerns which can take many forms.
He's not kidding. 5.2 was unsupported for more than 8 years (http://php.net/eol.php). There's a reasonable chance your application needs a ground-up rebuild. 
Haha. Hire devs from reddit spam... Sure
I saw the image you posted, so this is a rough idea. Write a bunch of PHP MySQL code to go through every column and every row in the DB, look for that http://[127.0.0.1](https://127.0.0.1) URL and replace it or remove it, you basically will have those 2 options, better to remove it, but you'll have to do a lot more work where links don't work. And https:// is a requirement nowadays, and you really don't want to do the following crap every single time something changes and you need to push to live from dev. Start by getting a list of all tables (SQL), now SELECT \* from each table and loop through it in PHP, for each row, and each column, you can first get a list of the columns and column types so you don't process columns like date or int, or just brute force each column with str\_replace() replacing the URL, then UPDATE that row with the ID you already have. **Obviously duplicate the tables and work on the copy,** otherwise you'll destroy the data during development. Taking WordPress as example, the hardcoded URL is stored in the options table, and you can easily call it (or change it in the admin), site\_url() (there are others functions to specific parts of the site) with the purpose of generating an absolute URL.
&gt;don't php developers just plug &lt;?php ... ?&gt; elements into their html like &gt; &gt;all the time No, no they don't. Good developers create reusable, testable code. Global scope is not. 
well, it can be safely assumed that the code has been written by a beginner like you who just had no idea how to do it properly.
One thing you can do is to use relative URL's. So just open a mysql console and run a replace: `Update 'TABLE_NAME' set` `'FIELD_NAME' = REPLACE('FIELD_NAME','`[`https://domain.com`](https://domain.com)`','')` `where 'FIELD_NAME' like '`[`https://domain.com`](https://domain.com)`%';` This will have the effect of finding any string that contains "[https://domain.com](https://domain.com)" and replace that string with nothing. **MAKE BACK UPS BEFORE RUNNING THIS**
Of course, that's going to have some fallout. Now you've got to go find the code the looks for links in the db and set it to your actual domain whenever you pull out a value (I sure hope that is nicely coded and not a bunch of procedural nonsense) and you'll have to find where your domain name value is written to the db and change that too. I've moved enough wordpress sites to know that the above does work to solve the problem.
[http://php.net/manual/en/sodium.installation.php](http://php.net/manual/en/sodium.installation.php)
Ah, I seem to have wrongly assumed that it being bundled with php by default, also means I don't have to change configs for it. Thanks! On Fedora on the other hand.. Do you or possibly someone else know a repository that has been compiled with sodium support?
That is the plan. We want the app to be in Laravel but the thing is.. the app should be running in a temp live server (I imagine most servers don't offer PHP 5.2 nowadays) before working on the new one.
The idea of this development is to have this app up and running as is which I highly doubt will work. We might have to do a few changes and migrations before we can do it but the goal is to push this live. Next step is to build the app from scratch in Laravel but will have to use the same tables and columns for imports in the future. I'm looking at the codes right now and it's giving me the headaches. It is so clustered. Smh
Yeah, I guess so. I wish it was written in a more organized way but damn codes are clustered af
The app is a point of sales system. Not really something like wordpress. And oh boy, the variables. $x
It sounds like the app was designed with the intention of running the backend and frontend on the same machine, so using localhost in the URL would always be valid. Not the best idea, but given the requirements at the time, it may have been acceptable. Still, hardcoding links is not a great idea because even on localhost port 80 might already be in us by another app. As other have said, it should be trivial to convert these absolute links to relative links using SQL and PHP.
It sounds like the app was designed with the intention of running the backend and frontend on the same machine, so using localhost in the URL would always be valid. Not the best idea, but given the requirements at the time, it may have been acceptable. Still, hardcoding links is not a great idea because even on localhost port 80 might already be in us by another app. As other have said, it should be trivial to convert these absolute links to relative links using SQL and PHP.
&gt;I imagine most servers don't offer PHP 5.2 nowadays No servers offer this anymore, you could prolly cobble together a development area locally using old versions, but it would be insane to stick it on the web, it would just get destroyed.
To be fair, PHP's support policy is a bit meh: * Short support cycles: ~2 years Active Support, ~3 years Security Support * No defined policy at the time PHP 5.2 or 5.3 were released^[[1]](https://wiki.php.net/rfc/releaseprocess) * Breaking changes in minor versions. * No change in support cycle for major versions. Reactor helps, but with many breaking changes in minor versions, many still desired: pretty much every other mainstream language provides better breaking-changes language support.
Simple comparison between WordPress and OctoberCMS &amp;#x200B; WordPress = Software OctoberCMS = Software
although its not really a good practice to store site urls ala wordpress but to solve your mutating local machine ip, you can specify local domain via hosts file /etc/hosts or c:/windows/system32/drivers/etc/hosts like mycomputer.local points to [127.0.0.1](https://127.0.0.1) or any local ip address, and use it at your database so it doesnt rely on ip address
colinodell, thanks you for you reply &gt; If your team is familiar with docker then yes, that is a better plan Could you please explain why? I try to learn and understand things :) What are the pros of docker images over Deployer?
This still uses a Google API, you could achieve this with codeception aswell without the need for a third part server. &amp;#x200B; [https://codeception.com/docs/modules/PhpBrowser](https://codeception.com/docs/modules/PhpBrowser)
In my opinion the best book for advanced PHP user is a notebook.
As someone writing my own to strengthen my knowkedge, this is a pretty good basic example. I've been out of the php workd for some tine and notoced the newer routers and had a question you might know. Where do people nornally store routes so that people can quickly add and edit them, or so addon components can? Surely we don't want to have a massive heap of adds in the index.php?
You could also use [https://wkhtmltopdf.org/](https://wkhtmltopdf.org/) Not really PHP, it's a binary executable, anyway you could call it from php scripts as usual; 3rd party wrappers for Symfony / Laravel etc. are available.
LOL, prime example of what's wrong with the PHP community...
This dude's entire post history is posting those Hangout-recorded tutorials on 3-4 subreddits. He doesn't even comment on anything.
No, don't do this. CodeIgniter has fallen a long way behind the curve. It uses outdated practices and I'd actively recommend against using it. There are better frameworks around these days that embrace modern best practices.
Somewhat outdated, but still relevant, as actually the MVC https://web.archive.org/web/20120607054846/http://www.phppatterns.com/docs/design/hello_world_in_patterns
The router stores generic routes for example: $router-&gt;add('{controller}/{action}'); So based on this all you have to do is add the controller and view, then specify the in your controller action, for example: public function indexAction() {} There is a question on a PR on that GitHub profile which explains it a bit better. Hope this helps. 
it took me several minutes to realise it wasn't the post he referenced to and then find a link to the original source
Some interesting code (and libraries) can be found here: * https://github.com/ziadoz/awesome-php
Docker has a much steeper learning curve, but provides several advantages, especially when combined with Kubernetes: - Docker forces you to build your images before using them - You can run tests against the exact images you're about to place into production - You are forced (or at least strongly encouraged) to explicitly define the separations between your app, database, load balancer, file storage, etc. This makes it easier to scale the individual components. - Kubernetes can run health checks against your containers, which is particularly useful when making a deployment, as sometimes containers take a few seconds to get up-and-running, and you don't want people hitting that container if it's not ready yet. Don't get me wrong, both Docker and Deployer are very nice tools, they just rely on completely different types of infrastructure. If you're already familiar with "git pull in production" then Deployer can be a logical next step and doesn't require any radical changes to your infrastructure. Docker and k8s are very nice tools too, and it sounds like your organization might be moving in that direction, which is totally fine! I would just caution you against using this in production if you only have one person familiar with how it works. What if he's out on vacation, or is hit by the proverbial bus, or leaves the organization? You need to make sure others can also support the application if anything were to happen. Hope that helps! Let me know if you have any other questions :)
The question is: Is it relevant? For short requests "throw away on the end" can be faster than detailed tracking and manually unlinking data, so recount handling can kick in. Also sometimes a naïve implementation can ease maintenance with acceptable performance impact. One of course has to be aware of not overdoing and linking all data to global scope or something, so it never can be freed till the end, will hurt unit test memory usage (while then again a contemporary dev box should have enough memory these days ...)
no _you're_ terrible. LNPC doesn't even make a word, stupid
well I would prefer headless Chrome to headless QT Webkit 
That all software builds up and tears down on every request from a client.
&gt;Don't get me wrong, both Docker and Deployer are very nice tools, they just rely on completely different types of infrastructure. If you're already familiar with "git pull in production" then Deployer can be a logical next step and doesn't require any radical changes to your infrastructure. Do i understand it right that when deploying docker images you are deploying full environment, and with deployer you are deploying "app files" so to speak. So if our environment does not change often (in fact we are using same version of php, apache, mysql for last year or more) than deploying with deployer is more logical and faster. &gt;I would just caution you against using this in production if you only have one person familiar with how it works. What if he's out on vacation, or is hit by the proverbial bus, or leaves the organization? great point
wow! congrats
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Yep. I use [spatie/browsershot](https://github.com/spatie/browsershot)
It can depend on web server interface too. Litespeed and DSO run inside Apache memory space. Recycling workers helps but if the leaks are bad it could put too much additional load on the server.
Someone has to update it. It's op's job. 
TL;DR: it's a poor man's nuxt.js, the concept is nearly the same but execution is vastly inferior. &amp;#x200B; It's a cool little toy, it definitely was fun for the author to create it - however, nuxt does every single thing better - from ease of development to hot reload / bundling etc. &amp;#x200B; &amp;#x200B;
This, my friends, is the problem with frameworks.
&gt; Do i understand it right that when deploying docker images you are deploying full environment, and with deployer you are deploying "app files" so to speak Yep exactly! &gt; So if our environment does not change often (in fact we are using same version of php, apache, mysql for last year or more) than deploying with deployer is more logical and faster. In most cases, yes.
colinodell, thank you for your time! Your replies were very helpful! &amp;#x200B;
any suggestions? :)
If you are already using Laravel and you don't know how users should upload images, I suggest you start over and cover the bases before starting to use shortcuts.
Yet another stupid framework we don't need
I know how to let users upload an image. my question is how to implement a text editor that can implement the safe feat 
I don't understand how you can't come up with a solution on your own to one of the web's most basic problems. Look into TinyMCE I guess?
TinyMCE would be your best bet probably. It has some file upload plugin that requires you to create an API endpoint for processing and saving those images.
You shouldn't tie yourself to a framework for every implementation detail. Something like this should not be dependent on Laravel. There are lots of rich text editors out there, there is an excellent PHP library called HTML purifier that can be used to protect against malicious injections, if you're concerned about that: [http://htmlpurifier.org/](http://htmlpurifier.org/)
Thought this is nice, I didn't get why this is "server-side and client-side framework agnostic".
I see. thanks for the suggestion :)
What does Laravel have with text editors?
Because those are cool words to use these days and you can't live without fashion in IT industry.
Be careful, author seems to be on a downvote spree :) I agree with your statement 100%
How do you make direct SQL queries to your backend database in Nuxt?
What I mean by that (OP here) is that you are not being forced to use a whole new framework. If you're currently using Laravel and Vue, you can continue using those frameworks. If you're using Rails and React, again, you can continue using those. I wanted to make it clear (which maybe I haven't) that you don't have to learn some big massive new framework to use Inertia. Inertia is really a thin layer between existing server-side and client-side frameworks.
Seems like a nice thing for existing server-side rendered apps, that don’t want to transition to nuxt or full SPA. Interesting!
If you're intelligent, and that's what everyone strives to be, you'd come to this conclusion: \- Use Laravel as API, return JSON back \- Use Nuxt to organize Vue frontend \- "Speak" to Laravel via axios, using JSON Voila, now you've got your concerns separated. Your backend is powered by Laravel and it's awesome Eloquent and what not, while your frontend is entirely decoupled and you don't need Laravel for anything except to return JSON upon queries. &amp;#x200B; Now, Nuxt can be the backend server too, but we're discussing Laravel. &amp;#x200B; If you use Nuxt, all you need to do is send xhr to Laravel-powered endpoint. Nuxt takes care of frontend routing, components, setup and what not. &amp;#x200B; Approach in the blog is vastly inferior - components made with Laravel - are you fucking kidding me? Laravel that DOES NOT spit JSON back out? Turbolinks? Mix? If it's hard to understand why I'm criticizing Inertia.js - it's because every person out there creates a framework after they solve one problem they find interesting. No one wonders any more whether someone else had the issue and how they solved the problem. It's annoying and I, as person with broadband internet, retain the right to voice my opinion. My opinion is that Inertia.js is a cool little toy for the author. For a professional who earns money developing, using Inertia.js is a step back. It solves nothing. It makes nothing easier. It uses inferior principle. It's NOT useful to a person who makes a living via coding. Therefore, it's just a nice toy to fiddle with. There are VASTLY more advanced, easier, better tools out there - Nuxt.js is only one, and using it makes Inertia.js absolutely not needed. &amp;#x200B; Take it behind the barn and shoot it. &amp;#x200B; &amp;#x200B;
truth is hard sometimes. &amp;#x200B; prop to OP tho. i cant even make my porfolio website
&gt; It's NOT useful to a person who makes a living via coding. "Not useful to me" is not the same thing as "not useful to anyone". It's arrogant to suggest that it is.
I think you missed his point. Seems like he's sort of speaking to these sentences in the article: &gt;It allows developers to build rich single-page client-side apps, without having to build a full REST or GraphQL API, or learn client-side state management, routing, and really much of what comes with modern SPAs. When you are working with a database you already have an API. The database. The idea, as I see it, is to simplify the process of creating an SPA using standard server-side rendered/routing methodology. I think it's a wonderful effort and it seems a lot of people are looking for ways to simplify this whole frontend/backend mess.
&gt; they solve one problem they find interesting I mean, isn't that what you've done with your post when you say: &gt; If you're intelligent, and that's what everyone strives to be, you'd come to this conclusion ? When you've got a hammer, everything looks like a nail. 
&gt;Therefore, we have added a red warning to the unique validation rule documentation pointing out that the rule should only be used as documented and warning users against allowing user controlled input as a parameter to this rule. Maybe the framework should do more than a warning, i am sure people will not see the warning and get bitten by this.
Boy, I'd love to have a job working on an open source project.
The location of production of the database, and the location of exploitation of the same database may be different. Also, we can't use a service, as the tool have to be standalone. Sqlite works well in that context, as an illustration 
I can only speak from my perspective. If it's not useful for me, a mere mortal, there are many mere mortals out there that are capable of using tools that simplify development. It's not meant to sound arrogant, but I like the way you interpreted it so you have some "ammo" for flaming. You don't need ammo, you can hate openly without reason, it's ok. While on topic, are you using Intertia.js or are you just trying to detect the asshole and play whack-a-mole?
Matt Stauffer recently tweeted that he'll be releasing a new version in april (up to L 5.8), so maybe wait until then if you want to buy it. (It's easy to find a pdf download by googling if you want to look at the current version)
The article states they're looking into that: &gt; It may be possible for the framework to prevent SQL injection even when developers accidentally allow user controlled input to be passed to this rule. We will explore this thoroughly in an upcoming Laravel release. For what it's worth, while the framework should _absolutely_ be safe by default and do its best to prevent a developer's mistake causing security issues... this is an extremely unlikely way for a developer to write that code, it's _possible_ someone might have once before but there's no reason you would see this code. I've done a cursory look around GitHub (although their search isn't perfect) and can't find any instances of it.
Hmm, as someone who actually uses this and suprised of it being a vulnrability. I am shocked that they are only warning against its use with user input. &amp;#x200B; My current use of this is on a video page where I have a sidebar which suggests videos from the author of the video being watched. I use \`ignore()\` to not get the current video so it isnt in suggested videos. I feel this is an acceptable use for this, anyone else?
&gt; However, if users depart from the documented usage of the feature &amp;#x200B; Well.. that's a stretch... to the point one would call that utter bullshit. The documentation never stated what was / was not allowed. &amp;#x200B;
The problem with the "effort" is the following: - while you tackle a problem, you often miss what other people do - when you're done solving the problem, you should ask yourself whether the solution is really good and whether there's something else out there that does it - it doesn't matter if you invested time into something, if there's a better tool out there - your effort is shit. You can only hope you learned something from the time invested. &gt; It allows developers to build rich single-page client-side apps, without having to build a full REST or GraphQL API, Let's forget GraphQL for a minute and the fact that fanboys resort to it. Let's focus on `without having to build a full REST API`: - creating an API using Laravel is way simpler than doing the regular thing where you return HTML instead of JSON. - adding an "api" (a route that spits JSON back) is incredibly trivial - resorting to "I'll sort my frontend with Vue and Nuxt, backend with Laravel" is cleaner - I don't have to mix projects, code, paradigms and what not, it's even easier to add contributors if I need to work in a team So instead of spending about 20 seconds to add a route such as `/api/v1/my-feature`, it's better to use an entire library that.. does what exactly? Make me spend more time, but elsewhere? 
Here's a question for you - have you tried this Inertia.js?
`unique` rule is prone to concurrency. You can get false positives. I would never recommend anyone to rely on that rule, not because of "potential SQL injection" but due to the fact that there exists a scenario where it fucks up and it fucks up royally. 
The only thing worse than blunt truth is receiving validation from people who'll never use your tool and who defend you because it's easier to focus on the asshole messenger than the tool being subpar. To the author - I could lie to you that I appreciate your effort but I don't. I appreciate the fact you put yourself out there for criticism - that takes balls and that I will give you props for. Sometimes it goes well, sometimes it doesn't. If I ever find myself in your shoes, I'd rather face a million of assholes like me who won't bullshit me than a few SJWs who'll pamper me and lie to me but won't use the tool I spent hours making. Having said that, I do hope you'll continue making cool shit, whether some internet douchebag finds it useful or not. &amp;#x200B; Have a nice day ;) &amp;#x200B;
I mean it does say: &gt;It may be possible for the framework to prevent SQL injection even when developers accidentally allow user controlled input to be passed to this rule. We will explore this thoroughly in an upcoming Laravel release
I unsubscribed from this sub a looooong time ago. Thought I'd drop by after seeing this tweet.
it's definitely worsened the last months, but still not too bad imo. And most toxic comments are generally downvoted hard and fast, so I guess that's good. Also, kind of ironic he's posting this on twitter, not exactly a bastion of quality content :)
What exactly is the problem?
if every row in the table has the same prefix in that column, it's useless duplicate data. strip the prefix and add it (or the correct version) dynamically, in code, when needed.
Yeah. It being a native part of PHP obscure the part where it still needs to be selected as an option compile-time and is frequently split out into a separate package by the distros. Bit me, too.
oh fuck off already.
I think it's still smart to use it. You should just not expect it to replace unique keys on your persistence layer. It's still an easy way to let an end user know that something is already taken.
People don't bother to learn how to do things, they instead learn how framework does things. That leads to people being able to use frameworks but unable to perform the simplest tasks when the framework is taken away.
oh fuck off already.
Because we're egoistic pieces of shit with broadband internet access and every and each one of us is constantly, undoubtedly 100% correct and if anyone disagrees - well, there are decades of toxicity ready for those cunts. They will learn of our peaceful ways - by force!
Eh, I don't really see it as so bad. Did I miss something, why is this place "toxic"?
I feel kinda dumb for still liking the Kohana 2.x way of handling things :) Then again, I only somewhat understand modern routing rather than having your url represent a single controller/action. I get what it does, but have yet to see a real world need for the complexity it offers. Know of any full app that would sgow this off on git or otherwise?
/r/iamverysmart
You're always going to have those oddballs that cause trouble. In general I think it's not a toxic place
When you rewrite the codebase in Laravel, are you sure you have to use the same database structure, or could you possibly use a migration tool to map the old data structure to your new schema? Just some food for thought
Try and run it on a new version of PHP then patch up the deprecated code
Surely you could just use fetch and document inner html instead and remove the need for cue and react altogether here if all you are doing is Ajax requests that return document fragments ? I don’t get why you need a framework to do that 
Cool. But it's still toxic, so go away now :) 
Do you have an example or at least can you elaborate more why this sub can be considered toxic? It's not that I'm doubting you, just that I never got that impression. Most of the cases I've seen someone being told a not so positive response here was posts like "I'm learning php, how can I do X and Z?" Clearly someone just wants a fast answer to some test... I don't think it is a problem to answer: use Google you lazy ass, there is probably 100 answers to that question on stackoverflow already. But still, the kind of answers I see are more on the lines: this sub us not for asking questions nor help with the language, you can try phphelp or something, but for your problem you could do this and that. Now how is this toxic? Am I missing something?
At least it's already shipped with the windows versions. Had a hard time to install it on mac
I couldn't point you at a publicly available one, but I used to build Phonegap apps for a living, with Laravel for the API backend, and I definitely needed a powerful routing solution for that. My first app used CodeIgniter and it just wasn't up to the task routing-wise. Typically I'd have multiple API resources with subresources underneath, such as `/api/magazines/1/subscriptions/1` (not a real application, but indicative). The admin would use the same API as the app, so it would have to support multiple layers of resources to represent different actions, e.g. in this example, you'd make a POST request to `/api/magazines/1/subscriptions` to create a new subscription, and a DELETE request to `/api/magazines/1/subscriptions/1` to delete that subscription afterwards. I maintain a legacy Zend 1 application and the routing for that is utterly horrific compared to modern solutions like Laravel's routing or `league/route`.
If you think this sub is toxic, you should've seen #php on Quakenet 10-15 years ago
ITT: Toxic people wonder why everyone thinks this sub is toxic.
At least in part because the whole of Reddit is toxic, and designed to promote 'conversation' (aka drama) which gives more ad impressions, and not designed for useful discourse. Any site that doesn't allow you to ignore other users is going to end up with much more toxicity than other sites. The other main problem is that people in this sub-reddit can have valid disagreements - i.e. the choices you make might not be the right choices for me, and vice-versa choices I make might not be the right choices for you. That's not to say that either of us would be right or wrong, just that the choices appropriate for each of us to choose could be different. The more specific communities are formed of people who have self-selected to have similar sets of circumstances*, and have similar sets of requirements, and so for them, a lot more of the time they have similar trade-offs, and so much more of the time, there are choices that would be 'correct' for the vast majority of people in those communities. As people have a really difficult time allowing someone else to have the last word [if they think they are wrong](https://xkcd.com/386/) this leads to people trying to 'prove' that the other person is wrong. And people have gotten much better at 'winning' arguments, than they have at conducting useful discussions: &gt; People are getting really good at arguing on the internet &gt; &gt; People who take part in online discussions have had a long time to practice. Even for people who discovered the internet later than most people, there has been a decade for them to practice their arguing skills. &gt; &gt; And unfortunately, the main skill people (including myself) have developed is not how to make cogent and clear points, but instead how to avoid conceding anything in a discussion. This is done either by bringing up more and more unrelated points, or by claiming things as facts when actually they're just opinions, or other various tactics. Finally, as it hasn't been a place to have useful discussions, from natural selection everyone who dislikes useless argument has left, leaving only the (deliberate)trolls and the people who like arguing for the sake of arguing. *e.g. People for whom Laravel is the right choice of framework to use, are going to have different sets of tradeoffs from people who maybe should be using wordpress, or those people who should be writing their application without a framework.
I would say it is not as bad as it was, there was a time 3-4 years ago when there was not a single day without drama, a Laravel shilling every second comment and all kinds of other crap. So, it's relative. &amp;#x200B; Should mods step up on moderation a bit and filter out the spam more actively - sure.
I been part of facebook programming communities, and I have seen that PHP communities have the higher degree of toxic ego-based discussions. Don't know if ego is part of the ecuation, but for example, node.js communities are really nice.
CKEditor [https://ckeditor.com/](https://ckeditor.com/)
The purpose of my comment isn't to flame. It's to draw attention to the subjectivity of your argument. Given your response, here, I doubt any good can come from continuing to engage with you. 
Did I miss something? While there's the odd disagreement, I've found r/php to generally be pretty decent. We can be a bit blunt at times but usually in a helpful manner. 
I've never seen much toxicity here, besides a couple of notorious comment trolls.
This is probably the most toxic behavior I've seen here in months. "I don't come here but you guys suck! Bye!"
At the beginning I had absolute no knowledge about data types. Yeah... that resulted in stuff like \`expr == 'true'\`. Worked fine. But \`expr == 'false'\` did not. I had a hard time to understand why.
If it's a custom point-of-sale application that was written more than 8 years ago, and your goal is to have it run modern Laravel on modern PHP, then why are you trying to get it running on a new server? It will need to be completely rewritten. Not refactored, not upgraded to a modern version of PHP, not moved to a new server. Take inventory of the application's features. Those are your new specs for a brand new application.
What you're describing is [Turbolinks](https://github.com/turbolinks/turbolinks). It does HTML replacement in this way. But my goals are different. I *want* to use a client-side framework like Vue.js or React, but Turbolinks doesn't play well with those libraries. Which is how Inertia.js came to be!
oh... and I've reinvented the wheel hundreds of times. php as a lot of great array and string functions I've ignored for years
Oh I think I get it. Rather than having 2 separate controllers or logic (an admin subscription controller and a front end user sub controller) it determined action based on the header / response (is that the right term)? So you technically have the roite as a get and one for delete? Err, rather post and delete?
\&gt; It may be possible for the framework to prevent SQL injection even when developers accidentally allow user controlled input to be passed to this rule. We will explore this thoroughly in an upcoming Laravel release Patch now, anything else is unacceptable.
Basically, yes. You can map different HTTP verbs to different routes, and thus to different methods. So one route will show a form via GET, while another handles the submission via POST. It allow you to make your controller methods more specific to a given action, and allows it to return a 405 if an endpoint doesn't support an HTTP verb.
Aqesome, this has actually been very helpful!
Here's an example response of the additude I see here: &amp;#x200B; Obviously you don't have enough experience on /r/php to understand why it is toxic and I am not going to explain it to you. Try working on a real project for once and maybe you will learn something. 
/u/TaylorCodes, it would be good to get confirmation that a patch targeting this vulnerability will be released as soon as possible. The language about potentially fixing it in an "upcoming release" is vague at best and doesn't inspire much confidence in Laravel's handling of security disclosures.
Doesn't look to me the warning in that place is enough, if you just go to [https://laravel.com/docs/5.8/validation#rule-unique](https://laravel.com/docs/5.8/validation#rule-unique) , isn't this the same rule and thus problem? I'm sometimes confused by the many ways you can define things in Laravel.
IMO most of the database based validation rules could need a little update. Dont like the way of handling the rules next to the model. e.g. why do I have to write the id (so the key) and the table name manually when both things are declared in the user model for simple PK validation: Rule::unique('users')-&gt;ignore($user-&gt;id); class User extends Model { $primaryKey = "id"; // aleady here... $table = "users; // already here... } Redudant code uuiiiiuuu uuuiiiuuu uuuiiu🚨💥🚨🚨
https://www.google.com/search?q=definition+acronym
You actually can pass the model directly already: &amp;#x200B; Rule::unique('users')-&gt;ignore($user); &amp;#x200B; Works the same as: &amp;#x200B; Rule::unique('users')-&gt;ignore($user-&gt;id); 
To play devil's advocate, in the context of the Laravel's doc I think it's safe to assume that $user is an Eloquent model. But I agree that this should be more explicit given the security warning.
Just to play the devil's advocate... This is all avoidable if you write your own queries and bind anything variadic. ORMs are soooo..... Uhh.... I better stop here. 🤗
Thanks, man! For a minute there, you looked like a prick
But the table name still needs to be declared twice 😮
Im not sure what you're expecting this API to be...
I am; but mostly to technologies
Ok, maybe I'm missing something, but.... no shit? The ignore rule does exactly what it's designed to do: check for uniqueness except for the ID you give it. If you give it a value from user-controlled input, isn't it obvious that this is going to be a vulnerability of your own making? Same is true of the `$fillable` properties. If you mark a bunch of fields as `$fillable` and then just blindly create a new instance of an object using `$request-&gt;all()` for its data, you're going to have a bad time... The axiom "Never trust user input" doesn't go away just because you're using a framework. It can't think for you...
Who hurt you?
This would seem to be different, as it doesn't seem like there's any reason this should allow for arbitrary injection. The `ignore` method is taking a value to ignore, there's no reason that value should be a SQL statement.
You could increment it by three and take mod 3 to alternate between 1 and 4, but I think an if statement might be more readable.
 function increment(int $i) { return $i &lt; 4 ? $i + 1 : 1; } $num = 1; $num = increment($num); $num = increment($num); $num = increment($num); $num = increment($num); var_dump($num); //int(1) I mean, its still an if statement
I agree with you *if* that's what's going on here. Without further details, I can only assume that it internally it applies that value through PDO and thus some kind of prepared statement. I would be highly surprised if this was an actual SQL injection vulnerability, or if it's just a matter of the researcher saying "Hey, I was able to pass in an id of `1` and therefore update the admin account" or some such.
If `$i = 2` then `($i + 3) % 6` will yield 5, which is greater than 4. I think this would be the easiest: ``` ($i % 4) + 1 ``` In this case, `$i = 0` yields 1, `$i = 3` yields 4 and `$i = 4` yields 1.
&gt; $i = ($i % 4) + 1 Or alternatively $i &amp;= 3;
I read the title wrong, I thought OP wanted to switch between 1 and 4 so there is no case i = 2. Updated my answer ;-)
Fun with order of operations! `$i = ($i % 4) + 1;` In other words, mod by 4 to wrap back around to 0 as appropriate, then add 1. Input 1 returns 2 Input 2 returns 3 Input 3 returns 4 Input 4 returns 1
Dang, I like this one a lot!
Bit operator is the most elegant, although you might want to write a comment for clarity: $i &amp;=3; # 1-4 only
https://3v4l.org/YGR64 You still need the +1. https://3v4l.org/GKcff
&gt; To play devil's advocate, in the context of the Laravel's doc I think it's safe to assume that $user is an Eloquent model. Yes, but while the laravel docs cover some ground on the framework, a lot is left in the dark and usage is implied. Since the docs mix single-use use of a method (only system input) and cross use (both system and user input) with seemingly little discretion, the original statement doesn't hold any ground.
A major PHP framework actually has SQL injection Vulnerability, and it is 2019 already, I am speechless. 
My thoughts exactly. But this is Laravel, so I am not surprised.
That's what happens when you try to be cool and reinvent the wheel.
&gt; The axiom "Never trust user input" doesn't go away just because you're using a framework. It does when you expect the framework to do sane things like not be vulnerable to SQL injection. If you have to do all of that work yourself, you might need a better framework.
That's your opinion and probably many Laravel users agree. I don't agree with that. I think models could / should validate input before storing or updating data in the database. For me, a model has validation rules. 
You're not missing the point. This is similar to the $fillable properties piece, which are not labeled as an SQL injection vulnerability. But I get a feeling that a lot of this is people reading the headline and without understanding the vulnerability saying, "Oh man! I told you frameworks are garbage!" As I understand this bug, it is essentially saying that bad coding leads to this vulnerability in a similar way that the following line would: &amp;#x200B; \`'select \* from users where username = '.$\_REQUEST\['username'\].';'\` So yeah. Understand the code you write and its consequences.
&gt;The axiom "Never trust user input" doesn't go away just because you're using a framework. It can't think for you... This is so true, I never blindly trust user input, don't understand why this is any different.
Why though? Not all models are related to needing user input, 
Actually this discussion wasn't about where to validate stuff 😳 ....it was about have the table name and primary key being written in the validation rule but -already being declared in the model. Redundant. E.g. changing a table name would require me to go through every validation rule while I could simply change the $table attribute from the model.
While I agree about responsibility, it would not at all be out of character for Laravel to support something like `Rule::unique($user)` and have the framework work it out. In practice though, probably the most common usage of the rule is for email validation, and because an email address is rarely (if ever) the primary key, it wouldn’t really help much. 
Where is that coming from? As long as you don't make terrible posts like "Here's what my client wants, now do my entire work for me" or "Here, I made a terrible, terrible tutorial describing how to make the world's most unsafe, most unmaintainable login system ever, except I claim it's safe because I base64 \\"encrypt\\" the passwords", this sub is fine.
You didn't get my point. What about: Rule::unique(User::class)-&gt;ignore($pk); ...No need of table name nor the pk name because both things are already given in the model.
Because sometimes I am the user 😉 Or one of my colleagues is. In an ideal world everything is tested but in a less ideal world I want to prevent unexpected data in the database. I want validation tightly coupled to the database. Not only for user input. I hate corrupted data. 
&gt; 'select * from users where username = '.$_REQUEST['username'].';' Hey how did you get my proprietary login code??
Fair enough. public function ignore (Model $model); Problem solved ;)
The first thing I did was go look at the code. It's just a string concatenated with quotes into the sql, no binging. Ouch. Torvolds excuse that the documentation only shows a system generated ID does not wash. There is no warning in the docs. It's a bug.
If you're wanting to feel cool you can implement it as an infinite iterator. Ex: &lt;?php function one_to_four() { for (;;) { yield 1; yield 2; yield 3; yield 4; } } $iter_count = 0; foreach (one_to_four() as $value) { echo $value; if (++$iter_count == $value) break; } which will output 1 2 3 4 1
I believe if you pass in the model, the ID column is picked up automatically. You don't need to specify it again. 
Look at the source code. You may be surprised. 
Look at the code, there is no need to guess. It is a real SQL injection vulnerability, caused by NOT preparing the value in a bind variable. 
We just need to make the data migrations work. Not necessarily use the same data structure.
The app is still used in two different machines and running in localhost. Both have different databases. The client wants it live using one database. I proposed it to be rewritten in Laravel because it is really outdated. They want it up and running before I can work from scratch, however. That's why I am trying to get it running.
Yeah I've seen so but still the table name needs to added :(
Funny how people keep assuming that only user input can cause SQL injections. What if UUIDs are stored in a BINARY(16) column?
I really don't think you understood the article. &gt;simpler than doing the regular thing where you return HTML instead of JSON The first request only returns both HTML and the data. Any subsequent request is done via XHR (AJAX) and returns only the data (JSON) and the name of the component needed render (which might be pulled down as a separate JS file if using split bundles). Also, this is framework agnostic. Laravel/Vue is just the given example. This'll also work with Symfony, React, etc. Not everyone wants to be using Nuxt/Vue/Laravel/whatever. There's isn't a single solution to every problem. Also, if you build a separate API, then it means you need to do auth using JWT or something similar, which adds another host of problems and complexity. If you're doing a full SPA then you'll probably also need state management in the frontend. This approach avoids needing state management at all because it just loads all the data for each page fully. You also don't need to worry about backend and frontend routing matching up which is another issue with SPAs.
Considering it isn't released yet, nobody has. But people have already built things using the architecture he suggested in his previous blog post (as I have) and it works extremely well. Much less to worry about compared to the standard SPA architecture.
I'd count myself as the toxic part and it's because PHP the language is suffering because many of its user are bad or conservative programmers who don't recognize good design and are standing in the way of progress
Your way isn't SOLID
I don't think you've missed anything, because I've seen you post on the type of threads this is talking about. See here for exactly what that tweet is complaining about: https://www.reddit.com/r/PHP/comments/b2xp40/introducing_inertiajs_framework_agnostic_full/eivu0ww/
One sees what he seeks? Labeling some community after an isolated uncertain incident also lacks objectivity.
Last week someone wrote a blog post criticizing one of Adam's conference talks and posted it to this sub. That may have prompted the tweet. Personally I dont think it is. His response might be to just dismiss the entire sub completely.
fuck off
This is why there are no big companies that use Laravel. Laravel is great for small projects and hobbyists. 
The fact that he posted this himself on his blog should inspire all the confidence you need about security disclosures. Don't conflate wanting to have this patched immediately with Taylor's transparency regarding security. He's actually been ok in that regard.
Because it's expected that your database layer *already* doesn't trust user input.
I didn't look at the code. You're saying its not using binded parameters?
And where do you think `$pk`s value comes from? You're implying that your API can automatically divine this value from thin air. In reality your API looks like this: $pk = $user-&gt;id; Rule::unique(User::class)-&gt;ignore($pk); So you really haven't accomplished anything.......
Model validation and form validation are different things. Sometimes they share the same rules, sometimes they do not.
Oh, nice! I forgot all about the seldom-used yield.
For starters, the name of the table is usually by convention. If you have a `User` model, you don't declare `protected $table = 'users'`. That is superfluous. It would be equally silly to have to manually declare the table name in each model, and then make it public, just so that the validation rules can have access to it. If you care that much, just create your own constant that represents it and then you only have to change it in one place. Secondly, the rule isn't bound to models. It's literally for any table. As it is now, it's more flexible. Not every table in your DB will necessarily be bound to a model, and it would be a bit silly to have to declare a model for a table just so the validation rule knows how to get the table name from it. It's literally *better* code design for it to accept the only thing it needs: the name of the table. It's then up to *you*, the developer, to supply that name in a way that is maintainable (such as declaring it in a constants file or making it a constant of the model if you care that much). Laravel is unopinionated about how you do that.
Anyone use this? I manually use wkhtmltopdf.
Well reddit can be toxic, nothing unique going on in this sub. You should've seen /r/NYGiants after they traded Odell. Then you dive into programming languages which people get zealous about. Then subdive into frameworks which people get zealous about. Then of course you have different patterns people support, libraries, etc... etc...
This is absolutely false. Even if your statement were true, this specific vulnerability would have nothing to do with it.
Your argument seems to be based on the assumption that the ideal architecture is an API that produces JSON, and an SPA that consumes JSON. That is a totally reasonable architecture, but not everyone wants to build applications that way. There are still some that believe in progressive enhancement of HTML using JS and inertia.js is for those people. No need to shit in their tea because you don't agree.
I have used it a lot, but not for HTML to PDF generation, the Results where to bad for what we needed. (B2B Reports and so on). We where Coding everything... no HTML used... &amp;#x200B;
&gt; and have the framework work it out. Work out what though? What do you want the behavior to be in the above example? That the value should be unique on the `users` table, and ignore the ID present in the given user? What if you *don't* want it to ignore the given user ID? Overloading the `unique` method like that is not great from the design of the underlying code, and I would argue it's not great for DX either. Nothing about `Rule::unique($user)` hints to me that it is going to ignore the ID of the given user. It's all very implicit, and implicit code is almost always harder to grok. I don't know about you, but saving a handful of keystrokes is not really a huge advantage. Code that is more clear and expressive, is. `Rule::unique('users')-&gt;ignore($user)` (the API that Laravel does already support) is more clear what's going on IMO. You can add even more clarity and maintainability by assigning the table name to a constant: `Rule::unique(Tables::users)-&gt;ignore($user)`; 
It’s toxic, a lot!
That's nowhere near abstracted enough for laravel, are you insane?
Man. Now I’m really confused. Do I not actually work at a big company or are we not actually using Laravel. My whole worldview is shaken. 
Who cares
Yep.. clearly there is a need for this: [Stimulus](https://github.com/stimulusjs/stimulus) from the tiny company Basecamp and Caleb Porzia is working on [Laravel Livewire](http://calebporzio.com/livewire-no-need-for-controllers-anymore/) (just a random blog post talking about his progress).
It isn't false. You can't name a single tech-advanced company that uses Laravel. Just because a company has 10,000 employees, that doesn't make it "big".
Lol ok.
I agree that Taylor has been good with security disclosures in the past, but this falls short. Either the vulnerability isn't as severe as it sounds, in which case the blog post really needs some clarification, or this blog post shouldn't have been made until a proper patch was ready to be deployed. There is currently an open pull request made by themsaid that attempts to use `addslashes()` to fix the hole, however beyond issues with certain databases, `addslashes()` itself is vulnerable to multibyte attacks (or at least was).
I really fail to understand the uproar here. I find it disturbing that apparently so many of us are using a database wrapper without ever looking under the hood and evaluating security considerations, but rather "demand" a framework should take care of security, even if it is used in the wrong way. 
I am biting: then what?
Worst case, the binary UUID has one \0 in it which, when interpreted directly by libmysql could be just as bad as a `--` and lead to an instant SQL injection exploit, if the attacker is able to cajole a UUID into a more nuanced ASCII after the \0.
These days I'm using mpdf, though I previously used fpdf. I never even heard of tcpdf. In any case, I only allow identified users who have to login to use it, it's not exposed to just any web rando.
Same basic thing I started over a year ago. Currently used by several large sites for dev, test, and prod. https://github.com/phpexpertsinc/docker-php-stack
I’m stoked for this. Having followed the original blog article/full stack radio episode I was anticipating something like this but didn’t expect to hear about it, albeit not released yet, for quite some time. Hopefully it won’t be too much longer, I’ll be waiting impatiently!
I use FPDF and DomPDF depending on the project. I was looking at TCPDF because I had a need to add a layer with a path using a named swatch (to specify cutlines for a fabric cutter). I thought maybe TCPPDF could do it but I haven't gotten that far...
Upgrading this library has always been very challenging. The developers regularly published new point releases (eg 4.2.3 to 4.2.4) that contained regressions and new bugs. Even the original blog post about this vulnerability notes the devs reintroduced the vulnerability after fixing it in one version. If your platform supports wkhtmltopdf or similar for PDF creation try that first.
[removed]
Laravel has nothing to do with this. The server side just has to accept html/markdown and images, and store it somewhere. The text editor is for the front end. Laravel doesn't even need to know which one you used. Google javascript wysiwyg editors and you will get dozens. Find a good one and viola!
The addslashes stuff has nothing to do with escaping a value for database use. It's just to escape quotes for our call to str\_getcsv in the Validator.
Yes, we plan to patch it tomorrow. However, I should note it's unclear why anyone would ever use the rule this way in the wild. Definitely is never documented and the feature explicitly revolves around ignoring a model by its primary key - not using any user input of any other value. &amp;#x200B; That being said, I've seen people do pretty crazy things so we will patch it just to be sure. I will probably still leave the warning in place in the documentation clarifying the feature's intended use though.
How about Apple? They use it for some internal projects according to engineers that work there that I have talked to at Laracon US. Is that big enough for your circlejerk?
[TCPDF](https://tcpdf.org/) for anyone that doesn't want to click through to the article.
It has been patched: [https://github.com/laravel/framework/pull/27940](https://github.com/laravel/framework/pull/27940)
In my experience Adelaide is much much lower than the rest. Junior: 50-60, mids: 60-70, senior: 70-80, Leads: 80-90 Wealthy employers just don't value devs and are greedy misers. And struggling employers just can't afford any more. The market is really just rubbish here.
66k is a mid to senior dev in adelaide. A junior should expect 50-60. I know one guy getting 46k (the award rate). He was getting paid less but argued for a pay raise and had to produce a print out for the award rates before he got it raised to that. Adelaide is full of a lot of really shitty employers. Its why everyone is moving to Melbourne.
&gt; lower cost of living I agree with you in almost every way but its not because of lower cost of living. Rent may be cheaper but everything else is more expensive. Cost of living is not that much less. Wages are low because Adelaide businesses don't like to pay people well. And its driving everyone interstate.
A WP dev isn't considered a programmer. You can expect between 46-60k. You may need to take a job like that at first just to get into the market. But only do it if you have to. And start applying elsewhere right away. I recommend you find opportunities to network. The Adelaide PHP users group is good. And the professional connections you make just by being here will help a lot too. Most good jobs in Adelaide will come from who you know, as much as what you know. 
If we’re going to title it “fun with order of operations”, then maybe we leave out the parentheses, since that would actually calculate the same thing while relying on operative precedence: $i = $i % 4 + 1; [PHP Operator Precedence](http://php.net/manual/en/language.operators.precedence.php) 
That is a perfectly valid use case. Why shouldn’t it be? And why shouldn’t it be escaped? I can’t think of a reason not to. Every dynamic value sent to SQL should be escaped by default. There also (theoretically) could be characters in automatically generated ids that break the query.
You can’t check all the code you’re using. Or have you ever looked at the whole PHP code you’re using itself?
The good news is while there are lots of PHP devs here, most of the good ones have moved interstate or are entrenched in long term positions. Those 2 pages of results can be demoralising, but at least some of those companies are equally frustrated at not being able to find good devs. Those are the ones you want. The bad companies will hire anyone, use them up and spit them out. There are a few good ones though who will be happy to have you so long as you are really good/have good experience. You may have to accept a lower wage than you would in Melbourne or Sydney. But you can still have a fulfilling career. Worst case is you end up in a job you don't like, but you can start applying elsewhere and networking right away.
Never ever do this. Use what's already out there, do not reinvent the wheel. Use a popular, well maintained framework you like and focus on your project, not on writing routers, orm, whatever.
Actually I’m using some raw piece of code found on the internet as a base, and move on to edit these. But I’ve never use any framework, so I don’t know how it work? Do you think it will be helpful? What will I found « inside a framework »?
You'll learn current best practices in much less time than reading books about design patterns. Pick from one of the many (I really recommend Symfony or Laravel). Their documentation is excellent, has a large user base so there'll be always someone who can help you. Finding a snippet on the web "wrote by someone" with no documentation, standards, tests, etc. can teach you nothing.
Frankly, I'm a bit confused as to what this is meant for. Could you give an example of when this would be useful? 
&gt; Actually I’m using some raw piece of code found on the internet as a base Please tell me you are joking.
I'm probably in the minority here, but my position is that you don't *need* frameworks. If you have a side project with no deadlines and you're willing to put the time, doing everything from zero will be a huge learning experience. It will also be agonizing, as you'll go through so many mistakes and rewrites you'll get tired of it. But if you stick to it, and constantly try to improve yourself as a dev, you'll learn a lot. And then you can you that knowledge to pick up a framework if you want to, and you'll understand how it really works under the hood. &amp;#x200B; I built my own pet project (you can see it [here](https://www.theguitarlickdatabase.com/)) from the ground up, no frameworks, just PHP, SCSS &amp; jQuery. Of course I still used some libraries to do the stuff that was too complex/unappealing for me to do. &amp;#x200B; The most important question imo is this: do you find enjoyable to code and to solve problems pertaining to database management, page generation or design constraints? Or do you just want to focus on the content and put something out there? If the first answer is no and the second is yes, then you should definitely look into frameworks. &amp;#x200B; But in any case, for the love of God, DO NOT copy a random piece of code from the Internet. If you don't invest yourself 100% in learning and try to cut corners, your project is just going to crash and burn.
I’ve heard so many times about Laravel and Symfony, I’m gonna double check these to find a step by step tutorial 😉
You made a blank page from scratch? Respect.
An UUID is usually formatted as hex data split by dashes. But it can be represented as 16 bytes of binary data, which can contain any byte between 0 and 255, including quotes. And quotes tend to break SQL commands if values are concatenated directly in the SQL string (sql injections)
You’re right, this side project has no deadline, and is pushing me away of my confort zone and actual skills: I’m a designer, I’ve never learned code. And this is exactely what I’m doing: writing, rewriting, struggling, crying, doing some magical incantations, and finally « it works baby » The true point is that I take code as a way to do something different in my life, and it’s for me like an investigation game. So I don’t presure too much while coding: it’s just for fun. When you said you are using some libraries for too complex/unappealing things: this is want I will dream to do. Can you give me an example of these complex/unappealing tasks? Into your questions: actually I think I like both situations, and especially the first situation with database, page and design constraints. When I’m copying a code from someone else, it take me sooooo long to understand how it’s made, and finally succeed to hack the code, that I’m wondering why not using frameworks instead!
Ahah on my side it’s not a blank page, something must be wrong in here... If I wanted to joke on it, I will ask you for a screenshot 😂
At work I'm building some services with Lumen (a subset of Laravel). But to be honest - I don't like all parts of it. If I had to build a project from scratch I would rather look for the libraries I need. This will give you tested and flexible code without the overhead of a complete framework. 
Why was this downvoted. You give a series of good arguments, and contention gets people talking about this.
That’s probably why I need feameworks!!
I'd like to see video examples of side-by-side comparisons of what you'd currently use vs. inertia.js. 
Never heard of it, gonna double check this one!
&gt;The true point is that I take code as a way to do something different in my life, and it’s for me like an investigation game. So I don’t presure too much while coding: it’s just for fun. Seems like you're in the right mindset to me. Keep going! &gt;When you said you are using some libraries for too complex/unappealing things: this is want I will dream to do. Can you give me an example of these complex/unappealing tasks? Well first I always use jQuery because it makes writing JS faster and shorter. For this particular project, I also needed some way to render musical scores and tablature to the screen -- which is extremely complex and time-consuming to do. Thankfully there was an open-source library which did just that, alphaTab. As for PHP libraries, I use Parsedown to parse Markdown text. I could have written a shitty parser myself, but this typically the kind of self-contained task that are already tackled by many talented programmers, so there's bound to be a good free library somewhere. What I like about Parsedown is that it's just a single PHP file, you put it in your project folder, include it, and you're good to go. &gt;When I’m copying a code from someone else, it take me sooooo long to understand how it’s made, and finally succeed to hack the code, that I’m wondering why not using frameworks instead! Don't just copy code from somewhere, that's the worst way to learn. Find a good tutorial (or even better, a good book, can't beat that) and follow each step through. Again, I cannot stress this enough: if you really want to learn properly, type every single line of code yourself. (except when you use a library ofc)
This is great for learning purpose, and you will build invaluable experience. But when you are working on real word product, unless you are going to roll out your own framework/library, you'd better use some matured framework such as Laravel, so you don't need to solve all bugs and traps the other developers had done years ago, and you can focus on the product itself rather than the framework.
[screenshot](https://boring.host/TJ3NPMB) 
Great! 👍 On the parser, great example! I’m using something called [PHP simple dom parser](http://simplehtmldom.sourceforge.net/) : is it considered as a framework? I’m gonna double check your Parsedown and see if it’s easier! 
YES! IT WILL SOLVE ALLL YOUR PROBLEMS AND MANY MORE!
It's totally blank for me too btw. There's not even a single line of HTML in the page source. Using latest version Firefox on Linux desktop.
It gives me an error 500
Sure, it allow to work together...! As I’m working alone on this project I’ve never faced this issue! You’re totally right: it will help collaboration
You don’t need a framework, but you can either spend time learning how a framework does things, or you can spend more time building the same functionality from scratch. Also, if your project grows and you need to add a new developer, you can find one with experience in the framework you use. This means they only have to spend time learning the unique things your app does, not things like how it does routing or how it’s ORM works, etc.
No, it's not a framework, it's just a library. And Parsedown is not made for parsing HTML, but Markdown. If you don't know what that is: https://en.wikipedia.org/wiki/Markdown
Ahah you’re totally right: it’s fucked, I’ve seen it on my side also :) I’m commuting right now, I will have a look on it in a couple of minutes! That’s also a good point: do using a framework helps you avoid error 500?
THIS IS JUST MAGIC, I THINK WE HAVE FOUND THE SECRET TO ETERNITY 👍👍👍
I would add some kind of database abstraction to that list. It'll be much easier to switch to another database. (e.g. Eloquent or doctrine/dbal)
Yes I’ve seen it, I will fix that in a couple of minutes: I’m in transportation right now ;)
A true hero.
Yes saw it, will fix that in a couple of minute: I’m in transportation right now. Maybe a good point on framework: does « using a framework » help you not to have error 500?
No, not really. Using a development server and some ci stuff (try phpstan) will help to avoid lots of errors
Yes, I’m totally align with you on the growing phase of the project. I’m telling myself that when my project will be bigger and I will need some people, I will hire the right person to develop something great. But still: how can I build something today, which will not be a mess when the next developer will join my team?
Good! Gonna have a look on it! I’m already learning things by posting on Reddit this morning! Thx for that!
Good point! Thank you 🙏 
What is this trend? One dickhead posting a pointless article on devto, then another reposting it on morioh and then the last one linking it on Reddit. What's the point? Do they get paid for the views or what?
it helps you to avoid a blank page. and about a zillion other things. Good luck with writhing them all from scratch.
Some questions: 1. Which editor do you use? 2. Do you use composer? 3. Do you follow any code style rules?
SEO. More backlinks = more relevant search.
Oh... 4. Do you use any VCS?
Why such language? Everything starts somewhere! Regardless of the language used, a few things must always remain true. &amp;#x200B; 1. It must be able to do the task the developer needs it to do 2. Documentation must be easily available, and preferably with working code examples, not the theoretical stuff from so-called high end sites. 3. It must be maintained for security, features and speed. &amp;#x200B; Why do I use PHP, amongst other languages. Because it does what I need it to do with little fuss. I've used plenty of Linux and Windows based languages, and I switched early on from ASP to PHP for a few good reasons. &amp;#x200B; The first reason being that it worked every time a page loaded. ASP was a headache, it would just decide to fail for no good reason. &amp;#x200B; The second reason is because early one there was a community of people willing to share their experiences of the language and help others. If a community doesn't come together around a language and acts like elitists, then the language will not be popular enough to be maintained. &amp;#x200B; And, PHP is continuously being worked on. PHP is not the best language, sure. But, it is a functioning language that does exactly what many other developers need, and because of the community it gets updated, is made safer and is made faster. &amp;#x200B; Keep one thing in mind, when you talk about security, nothing is perfect. Windows core languages are all flaws related to memory and data access. What language doesn't have issues? 
&gt;**why you should too** we all do use php here, come on
You're right, I need to begin to have a look on Laravel and Symfony : might be a good starting point...!
PHP enables me to make good money in short time. No backlink sources needed to tell me why I should keep using PHP.
1. a basic Sublime text and Filezilla to push everything 2. not at all, I've tried to have a look on that, but I've been so impressed by the terminal that I didn't tried anything... 3. I don't think so... 4. I don't even know what this is?
&gt; For real though, the fact that you can convert any valid HTML file to a PHP file by simply changing the file extension is just so simple. Holy fuck. No. Just no.
Some projects I work on use TCPDF. It's disgusting, I wrote up some of the atrocious bits here: https://www.reddit.com/r/programminghorror/comments/4b3e9z/generating_pdfs_from_regexparsed_html_is/ .
wow that cyclomatic complexity score.
2. the terminal should be your best friend 3. you should. It will enhance the readability of your code. Have a look at psr-2 4. version control. e.g. git; it will allow you to revert changes in your code
Right? To make a case for using PHP in modern applications and not point straight towards excellent templating engines written in PHP, like Twig, is astounding. 
Thanks for the response, it is genuinely appreciated.
Is using \`$this-&gt;route('user')\` still secure when used in a Form Request?
I don't want to sound rude, but the only reason to avoid a framework in 2019 (apart from a deliberate learning) is *illiteracy* in web-development. Indeed, in 1999 we knew that to launch a decent web-site you need to bang some straightforward code together. But since then we learned some things - that it is not enough just to launch a site. it is much more important to maintain it though ages - that it is not enough to provide a code that runs when everything goes all right. It is no less important to provide a code to run when something goes wrong. - that after launching a third site you are starting to notice that you are duplicating a lot of code - that there are many routine tasks which are better to be done programmatically, not manually. Such as database migrations, code profiling, event logging - that there are things essential for the modern development, such as decent logging, templating, internationalization, handling emails - and it would be just madness to write everything from scratch. - that there are certain best practices, and it is easier to follow the, by following the guidelines offered by a decent framework A simple example: PHP evolves rapidly. There are many things that were removed from the language in 7.0 and even more will be removed in 8.0. Having founded your site based on a decent framework you will have to just upgrade the framework to upgrade all the service code (a database wrapper for example) so you will have to revise the actual application code only. But having all on your own will make you to upgrade 100% of code manually. And the bigger the code base gets, the lesser resources you will have at your disposal to keep the thing from falling apart. So well. For a site that you want to "fire and forget" it's sort of OK to write it from scratch. But if you have any vision for the future, it's better to delegate the service parts of your application to the community, concentrating on the actual business logic. 
You should read the 12 factor app, especially the config section. While not explicitly specified, if you needed a config for the server domain, it should be passed in with environment variables. Of course, 99.999% of the time, you shouldn't need that because figuring out the current domain is pretty trivial in PHP or any other language. Finally, go look at a wordpress install. Install it locally and then try to move it to a different domain. Do that with a multisite wordpress install with a ton of plugins and posts and all kinds of other shite that writes URLs to the DB. It's an absolute nightmare. There are plugins out there to handle just this and none of them work very well (at least that I've tried), that's how bad this situation can get. The lesson here is: Do NOT ever store the app's base URL/domain in the DB. It's a horrible anti-pattern. https://12factor.net/
Starts what? 
Of course it's the app's URL. What else would you use a localhost address for? Only idiots would code something like this and store such URLs in the database. As I said above, see wordpress for a horrific example of this stupid anti-pattern. To their defense, WP was started a long time ago, but still, it's horrific. 
You're very true, thank you for your comment. I totally assume to be illiterated on web-dev: this is not my skillset at the base, I'm learning From now, I con't figure out what services I could use from a framework (as I don't know exactely what this is), but having a clear view on logging and emailing could be great! I only work on that website as a MVP to test the user value first, I know that if I receive some great traction from user, I will need to create a team and rewrite everything from scratch. That's why I'm wondering how to use some decent tech, not to rewrite 100% of the code, but maybe 90% only :D
A test link for example. You have no idea what is this table for and what are other records in it. But well, you can fume on, looks like you are enjoying it. Cheers.
Well, yes, could be just morioh spam. especially because it's linked though a doorway and apparently a spam Reddit account.
And it only applies if the PDF contains user generated input that is formatted to resemble a phar:// url.
Wait, you're drawing attention to my subjectivity as if my subjectivity is in question? Of course it's subjective. I just don't know whether people "defend" the author or are they genuinely disagreeing with me because the tool is useful. Did you use the tool?
How much cocaine is he on in this video
Not standing on the shoulders of giants is a great way to get your site hacked. 
&gt; That being said, I've seen people do pretty crazy things One not-so-crazy reason to push an input variable into the validation rules like that, is if the validation is being setup before the model is being loaded.
My 2cents: &amp;#x200B; Approach to frameworks really diffs between different language communities. I worked with most of the popular languages over years and this is the main 3 approaches; &amp;#x200B; \- NodeJS approach; instead of using a single framework that includes everything, you require all the small stuff and basically make your own framework. This sounds good until you realize how messy this becomes after couple of years. &amp;#x200B; \- Go approach; don't use any framework or library if you really don't have to and just copy/paste the code you actually need. This way your project is more contained and easier to maintain and control. &amp;#x200B; \- PHP approach; install a framework that may bring everything you basically need and at least 3 times more stuff that you don't. This makes building a MVP super fast and easy. It also handles a lot of stuff for you so you may end up build great web apps without actually learning basic stuff that makes web work. &amp;#x200B; All 3 of this approaches, you can use in all languages, there is no rule that you can't use go approach in php etc. But this is generally how each ecosystem evolved in time. &amp;#x200B; The question you should answer is what you are trying to accomplish? &amp;#x200B; \- If you want to build and test and MVP fast, trust a framework and focus on the business side of the things. \- If you want to learn and develop yourself as an engineer or the thing that you are building needs to work under high traffic with the optimum performance, try to build the functions from scratch. Always look at popular libraries for inspiration but try to come up with your own code. 
You don’t ‘need’ to learn all frameworks. But getting familiar with one will help you out massively, I’d recommend Laravel, purely because of all the information that is out there 
You're right...
With the PHP approach, I'm totally agree with you: I have this sensation to use 10% of the unstalled programs only and get lost inside all this mess...
You're right, I just have the sensation to be affraid of the first basical steps of setting up laravel...
nah I'd never get anything done
I'm not looking for php.ini settings but rather the name of a plugin for Apache or something else that dynamically blocks certain potentially malicious scripts from being able to write to disk. I run a service that needs to be able to write to disk for certain tasks and I remember several months ago someone posting their error logs and it mentioned something about dynamically blocking the writes my script was performing. But I can't remember what that was.
`$i = ($i + 1) % 4 +1;` Lets unwrap it: `($i + 1)` will increment `$i` `(..) % 4` will map any positive value to a `0..3` range `(...) % 4 + 1` will map `0..3` range into `1..4` range &amp;#x200B;
What about better coding? Validate every single input, remember there's no hacking, just programmers' mistakes
Depends on the project. A framework seems to be the better choice for most projects I can imagine. I don´t have to reinvent the wheel and the people / community developing the framework are probably more skilled in doing so. Writing your own framework / application core is a lot of work and if you want to reuse it you end up writing just another framework (which might be lacking in expandability, readability, performance and more compared to an established, mature one). However, if the system under development was a continually evolving product (e.g. the main SaaS product of my own startup) I'd think twice. I've recently attended a talk where a developer such a SaaS company presented why they decided to not use any frameworks (PHP backend without a framework, frontend without a framework besides jquery) and he had a very convincing point: If they had chosen the popular technologies in 2012 when they started they'd had chosen Symfony 2.x, Doctrine 2.x and AngularJS 1.x. All these have seen major overhauls since then, and upgrading those could have cost them the company. So, as long as the dependency on a framework and its development isn't crucial I'd always go that route. As a side point: if you don't have a lot of experience in php, learning a framework has its advantages. It should minimize the mistakes you make and can teach you how a modern php application can be structured (bootstrapping, configuration, dependency injection, authorization, authentication, routing etc.)
It sounds like you are trying to build a prototype website quickly with the expectation that if it takes off , you’ll need to rewrite it? To get something done quickly and reasonably well structured , it’s by far better to use a framework - things you have not even thought of will just be there and work. Frameworks also typically at least enforce a basic separation of concerns so even writing it badly , it will be better then no framework (typically) If I wanted to do what you were doing , I’d start in Symfony as I’m more experienced in it - but Laravel is pretty straight forward as well. But if I wanted to build something useable and decent in a short amount of time , I would go with a framework. I’d only go no framework if I wanted to learn the ins and outs of how the web works - so only for education , not to build something :) But hey , if you’re having fun and learning , just keep doing what you are doing. Doing something is better then just theorising and not actually doing anything 👍
You'd be better off disabling functions via `php.ini`; &gt; disable_functions =exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source I've never heard of dynamically blocking disk writes...
I find a great compromise is something like a micro framework. I started using Frameworks with Silex, which I wouldn't recommend today, as it's abandoned. Slim or Lumen are good alternatives. The nice thing about these is that you have a really minimal structure, which you can learn in a few hours, and then you can build on top and learn as you go. I think it's a nice level of minimal good practice.
Generating PDFs for me now is basically rendering a page in Google Chrome headless and generating it from there with @media print CSS.
Try to use file system permissions.
Who the hell trusts `stripslashes()` and `addslashes()` anymore? That's a fix from the age of PHP 4 or 5. It even says this on the doc page for `addslashes()`: &gt; The addslashes() is sometimes incorrectly used to try to prevent SQL Injection. Instead, database-specific escaping functions and/or prepared statements should be used.
After learning PHP using frameworks I struggle to make anything with a medium/large scope without a considerable amount of time when I'm not using a Framework. I don't know if that's just my lack of intelligence or experience though. Only been a software engineer for a little over a year. 
*I'll do it myself how hard can it be?* is the rite of passage of every developer.
I'm trying to install Swagger-PHP library to my project file. I did installed but it didnt comes with the OpenAPI specification. My purpose is to generate an API documentation. &amp;#x200B; .. There is no OpenApi included in the Swagger-PHP folder or anywhere inside my project's folder. &amp;#x200B; Can anyone help me please? Thanks! :) 
4. Ooof
I also had that animal inside me that forced me to make everything from scratch. After I came to know about Laravel (PHP Framework), I never made any project from scratch! From Engineer's perspective, It's always awesome to get started from scratch, But if you want to make serious money, Start using the code hundreds of developers has developed for free for you and save hundreds of hours! ;) 
Not a big fan of that idea in general. But the term you're looking for is called "WAF". Web Application Firewall. There's many offers on the market, hardware-based firewalls with custom rules, SaaS, etc. Be prepared they cost a LOT. As an additional layer, sure, you can use them. But just deploying a WAF and thinking "I'm secure now" is nonsense.
How old are you? Maybe I'm old an cynical as I've been coding for several decades, but I've seen this several times before, and never in a good way. The usual scenario is young, largely self taught, programmer decides he can do things better than people have before him, and builds his own framework. Said programmers are generally pretty talented, but nowhere near as talented or as knowledgeable as they think they are (the Dunning-Kruger effect is strong with these guys) and the result is generally a monstrosity which I've then made a pretty packets replacing with something solid later. Some highlights include 'frameworks' that use a single God object (quite common that) and extensive use of dynamically allocated methods such that debugging always involved crawling though stack traces because the code state is undecipherable by just reading it. Generally code delivered by them sort of works, but is full of hard-to-trace bugs and vulnerabilities that consume hours and are never completely fixed. It's usually quite deceiving code too to as generally it looks OK (indented, reasonable variable naming etc) until you actually start tracing whatever twisted logic has been use. Please don't be that guy. Have some humility, and build on the good work that people have done before you. There's scores of solid frameworks out there, choose whichever you like. If you're not sure spend a couple of days messing around with a few (personally I don't like [cakePHP](https://cakephp.org/) at all. but love [Laravel](https://laravel.com/)). If you want to be minimal consider a microframework like [slim](https://www.slimframework.com/) or [lumen](https://lumen.laravel.com/). &amp;#x200B;
ah the classic rookie "I don't need frameworks, i will build everything from scratch/my own framework" mistake
These two Slim and Lumen looks great! I'm gonna have a try
Re-inventing the wheel is a great way to learn why wheels aren't square. &amp;#x200B; But if your job is to make a car - you've got more important things to spend your time on than re-inventing the wheel. &amp;#x200B; Unless you're making a Mars rover that needs special wheels that haven't been invented yet. &amp;#x200B; &amp;#x200B; Building stuff from scratch is a great learning experience and sometimes its necessary if what you want to do genuinely hasn't been done before. Generally speaking though, most projects are built from the same component pieces and their primary purpose isn't for you to learn programming...its to show blog posts, or its to sell stuff online, or its so friends can talk to each other etc. 
It's not "I don't need frameworks" but more "I don't know how to use a framework"
Hey Thank you for your comment, It's not creating my own framework but more deciding to learn how to use a framework and how?
\[Opinion\] \- Use frameworks when you need something to be reasonably reliable (Most of the time, a popular framework or library will be stable, so you are pretty much in the clear with the components of the website they deal with), you will need to pass the code off, in large, to another developer, or if you are on a professional project that doesn't have very specific and unusual needs (You'll see one of these at least once, so it'll make more sense when you come across the unusual requirements on practice). \- The above said, be aware that using a framework for a single component is generally a waste and you should use a framework that meets a few of your requirements and work with it from there (For instance, if you want to use Laravel, you should want DB handling, cache handling, routing and simple auth out of the box and work with what is there as opposed to making your own version of these systems, as that breaks quite a few things along the way). HOWEVER \- I am also all in favor of having at least one personal project where you write everything yourself in order to fully understand how libraries that deal with things like request routing, database connection and query management, templating, caching, etc. actually work. Making these components helps grow your knowledge and understanding of not only PHP, but all of the other pieces of software that PHP interacts with (MySQL, Memcache, logging vendors, etc.) &amp;#x200B; As for the specific answers: \- Are you working the same? \- I have a personal project where I am writing everything more or less for the fun of it and the learning experience in writing all components of a CMS. It is a project I fully expect to never finish, but it is well worth the time that has been, and likely will be put into it. \- How did you go from working with frameworks? \- I'm going to re-interpret this as you asking how I went from writing everything to using frameworks, in which case I got a job and many of the pieces of software we had were in one of a number of frameworks, pretty much putting me in a place where I needed to learn the frameworks in order to do any maintenance or migrations on what we had. There was a lot of looking at documentation and looking at how it was already used within the software. \- How to learn frameworks? \- This is very person dependent and really should be based on how you learn best. I learn best by just doing something, so I generally just make a simple project or the first phase of a project to learn how the framework interacts with what i want it to do. Others can go about just reading the documentation they need to get the section they are working on done, then going back to the documentation to read up for the next part. Others still learn by watching/listening to videos and tutorials. Do what works best for you.
I code everything in binary.
Thank you for your message :) You're right: it's the quick prototype built phase from now!
If you use framework, then you are way more intelligent than me ;)
My true question is : will it be easier with a framework? And how not to be discouraged to learn to use a first framework
Sure!
I think the question asked for a text editor with an upload image feature built in and I assume the image would then be inserted into the user text area. There's no reason why you should waste time writing your own JS to handle this when there are countless opensource wysiwyg editors around. It also sounds like creating an api end point and handling the upload wasn't an issue. Sorry if I'm wrong, just wanted to clear things up.. 
It's way more humble than that, I don't remember how everything began, but as of today, the only "skills" I have on PHP are without using any framework, and I'm struggling as hell... My question is just about: is it easier to use a framework and how?
Great Opinion, really appreciate thank you :)
And this is how you invented the workd wide web?
If you want to learn frameworks Laracasts is great to learn Laravel, also scotch.io had some decent tutorials! :) 
Seems great! Gonna have a look on it! Thx ;)
Oh so that's why your website is not loading...
Might be yes :)
I've tried to get into Symfony/Laravel as they are predominant frameworks in PHP. But they are just so over-bloated, especially if you work alone and not in a team. They are super great though. But for my own project I always pick Slim and include ORM. It give me simple routing, my own code structure that I won't get lost into and proper database handling.
There's a third option from 100% from scratch and a full framework. Install composer, then install the libs that do what you need, and implement standard influences such as those in the PSRs, or builtins (eg Traversable). Single responsibility is a good idea is a good idea at all levels of software development, including dependencies. A lot of r/PHP is still in the honeymoon phase with frameworks, but JS devs have known for a while the pain of having a vendor addiction can cause. They'll solve a subset of problems really well, but can eventually cause more effort to support than they save you from. Look at how many devs complain about dealing with jQuery these days, when not too long ago it was so tightly coupled in people's minds, many couldn't separate what was JS and what was specific to jQuery. 
Sounds great, I think I'm gonna do the same
True story! Thank you for that, I didn't realized that. I think I'm gonna go with compposer
I feel this is a troll post I badly misinterpreted
Read symfony and laravel and whatnots source code for what you want to do and replicate it on a smaller and simpler system. You don't need a framework, but no one told you you have to k own everything from the get go; if you read how the guys who know more than you coded it and can replicate it (even on a simpler scale) you're off to a better start than simply _using_ the framework Ofc, I'm assuming this is a research side project: don't you ever fucking do this in prod unless you're paid your weight in gold - and be sure to gain some weight before :p
Thanks, man. This is giving me some light.
&gt; will it be easier with a framework You can either use a framework (or set of libraries) or spend couple of years writing your own.
Years... you so right on that point 😁
I love the hands-on explanation, great work!
I'm not sure any of these PHP PDF generators are any good. They all seem messy.
Yeah I turned binary into HTML programming language
/r/phphelp
It is a micro-framework, i actually think this is what you need instead of reinventing the wheel. Also [Slim](https://www.slimframework.com/) is nice too.
From the responses i've read, start with a micro-framework. (Easier to learn, after 2 projects you'r ready to go on) Then you can go on with a framework.
OK, post an example of your own that has even 75% test code coverage.
what he didn't add is that you'll also spend the next 10 years fixing all of the security and bug issues of the framework you just built.
use Slim. it's pretty easy
I’m downloading composer just right now 😉
I'd like to start with it because it's easy to get jobs but eventually I'd like to get to $5k/month (must be online sourced freelance gigs. Maybe a salaried remote job). 
Sorry, looks like I've misread your post. The way I like to learn a new tool is by implementing a project with it. Approach it by thinking 'I want to make this, how can I do it with *that*?' And then just start making stuff. How you want to learn the way a framework works, depends on preference. Books, official guides and docs, tutorials, udemy courses... For the big ones, there are plenty available. For Laravel some good starting points are: * The official documentation * Laracasts * Laravel up and running (book, new version is coming in april) * [Laravel Core Adventures](https://laravelcoreadventures.com) (video series) if youre interested in how it works under the hood
Well basically you are redirecting to new page, so anything below header call won't be executed. Put something like header("location: ../HTML/index.php?logout=true"); &amp;#x200B; And then to index.php if (isset($\_GET\['logout'\])): // your script tag here. endif;
Correct, this will not work because your order of operation here will block the javascript from executing. You are sending the browser the command to redirect and rendering just a script tag. There is no context around how this is being triggered, but essentially if this is being called via ajax you could return a simple json string and have the JS function that triggered the ajax alert your user the way you see fit. If this is a browser request you can tell your index script to render out the tooltip message given a param string to alert them the action was complete. IF this is a JSONP call, you can just skip the header redirect and call messagetooltip and follow it up with a redirect on the javascript layer with window.location = &lt; url you want to send user to &gt; 
This. Wkhtml2pdf even runs basic javascript
WordPress is one tool in the tool set. There are an awful lot of websites that's in my opinion it's counterproductive in terms of time and budget to custom code a solution to. WordPress is about 50% of my income. I would definitely not say to a professional dead end. You can use it as casually or as deeply as you want. If you learn WordPress you'll have opportunities for the foreseeable future. 
Guys, you just kill the new Fabien Potencier and Taylor Otwell )))
yep. 
This guy said it all, but if want something that is also good as wordpress but without many of the problems that come with wordpress (specially insecure plugins), you can try Bolt CMS. I use it and its great, and it gives you a nice structure and better control. 
It's not easier to use a framework if what you are doing is something very simple but as projects grow they are harder and harder to maintain without one. &amp;#x200B; Also, you will also be probably putting security vulnerabilities everywhere if you don't know what you are doing, and you seem like you don't. &amp;#x200B; I wouldn't suggest you to learn an entire framework before starting your project but you could start with lumen (laravel micro framework), learn some functionalities and get later into laravel if you just feel like it. &amp;#x200B; Once you learn some routing, templating and [the orm](https://laravel.com/docs/5.8/eloquent) you can start doing some tinkering and keep learning the rest of the framework.
i now use https://github.com/nesk/puphpeteer and couldn't be happier.
In terms of flexibility how does bolt compared to wordpress? The two concerns that have always prevented me from moving on to a different CMS are the availability of plugins and the desire to give my client something standard that they can pass on if and when they choose to work with somebody else. Vendor CMS lock-in is a really bad customer experience. And having to charge 2 custom code every little thing is also a very bad customer experience so even though there are very few plugins that I truly trust having so many available is still a massive net positive for WordPress.
i now use https://github.com/nesk/puphpeteer and couldn't be happier.
Sorry, still don't get it. So what is the scenario? I assume your backend (here PHP) removes the dashes and your SQL unhexes the UUID to fit into a 16 byte binary? And any potential matching `... ON` [`table1.id`](https://table1.id) `= table2.foreign_id` wouldn't interpret the binary data. And potential queries would contain something like `... WHERE id LIKE HEX('aab5d5fd70c111e5a4fbb026b977eb28')` &amp;#x200B; So it seems to me that only the HEX-function itself could potentially execute (or rather stop executing) due to interpretation. But why would it? Doesn't it simply translate into binary? &amp;#x200B;
Not in its entirety, of course. But I don't see how that compares. Something as basic as a database-wrapper should be of interest. maybe it's just me, but whenever I encounter something like that the "how does it do that" must be answered. And yes, therefore I dig into code. The truth is: there is always a intended use/format. Being in the industry for quite a while, I know that it is impossible to think outside of the developer's intention when BEING the developer. What if a user does "b" instead of "a"? In order to catch/document such cases, one would have to come up with the idea of a user potentially trying that. And if that is the case, then normally the design is addressed (making it less ambiguous) rather than documenting it for edge-cases. 
Added to my To - Do List!
There are some good plugins, but compared to wordpress, in a much smaller scale. In terms of flexibility, in my opinion, Bolt CMS is more flexible than wordpress.
I'm not saying it's a bad way to deploy laravel, but definitely not the easy way.
I hope you never have to pass your project on to some poor soul...
Thanks! Works perfectly
&gt; But they are just so over-bloated, especially if you work alone and not in a team - no they are not bloated. - it doesn't matter how many people work on a project for it to make sense to use any framework.
Couldn't you have expressed yourself without cussing or name calling ? Is it possible that what you are expressing is so devoid of content that you have to flesh it out with name calling ? Please don't do this, it doesn't do anyone any good, least of all you.
Thanks for providing your opinion :) I like that it's based on best-of-breed components I'm already very familiar with. It certainly seems like it elevates post types to a level of importance/user accessibility that WordPress fails to do, at least without installing ACF everywhere. I like that.
I disagree with you on so many levels. Though it's great to be able to use a framework, I have found that framework guys cannot solve a technical problem if it's not solvable by the framework. If you only work with a framework, you are limiting your knowledge to a WYSIWYG type of programming that cannot be called programming. It's puzzle solving at its best. Don't get me wrong, I understand the benefits of using a framework. But a framework has a steep learning curve that sometimes just isn't enough when you run into really challenging stuff. Framework management doesn't make anyone a software engineer. As well, frameworks tend to over bloat a project and if you don't mind having 40 gigs of shit in your project, and I might add, shit you don't now, or will never use, then it's no issue. For a company, like mine, that over the years, has pretty much built our own kind of framework, (stuff like database wrapper, reusable functions, databases and tables, classes and...) the use of framework becomes a liability rather than something we can actually use. An example of this is a web project I did some consulting on that was using node.js, 1 MILLION lines of code on their index page. Literally. And it was a rather simple web page. Writing code properly is of upmost importance. We were able to upgrade from PHP 5 to PHP 7 in under 2 days. And then it was very basic stuff that had to be changed or modified. This was on an application running billions of financial transactions a year. Without attempting to insult anyone, I have found that most programmers I have interviewed in the past 10 years have had a favorite toy language they like to play with. From programmers wanting to change our core language from PHP to Python, or C to C++ without providing any lucid reason to do so. Again, frameworks are a tool that you use when the job it does merits their use. Like everything else, use the best tool for the job. Learning to choose which tool is best for the job is as important as knowing how to use the tool you use. Using frameworks for everything is like using a hammer to fix everything. I'm not against frameworks, but our guys have to have a pretty good set of reasons to convince me that a framework is absolutely necessary before we even take one into account. Then you have the question of how long it will be before someone stops supporting it.
Using Composer, I base any project off of one DB connector (usually Doctrine) and a low level router (if it is web based (usually FlightPHP). That's it. If I need a very specific lib like AWS or Redis, composer brings them in, but typically I'll build the rest myself. 
Just one more thing, if you start with bolt and keep with it, you may get a nice reward, since bolt developers are working on version 4 of it, and they have nice plans. You can read more about that here: [https://bolt.cm/item/the-road-to-bolt-4](https://bolt.cm/item/the-road-to-bolt-4)
&gt;Writing code properly is of upmost importance. We were able to upgrade from PHP 5 to PHP 7 in under 2 days. And then it was very basic stuff that had to be ch Agreed 100%
&gt; Are you working the same? No. I exclusively use Laravel. If I start from scratch (or even shop around packagist of components), I'll eventually end up with a less awesome version of an off-the-shelf framework anyways. Time is gold! &gt; How did you go from working with frameworks? Funnily enough, I actually started learning PHP simultaneously with Laravel. Though I'm already well versed with OOP from Java and dynamic scripting with Python at that point. &gt; How to learn frameworks? Build a small yet full-stack project with clear specifications (a blogging app, Twitter clone, etc.) and spend a day or two writing the same app with your framework of choice. At that point you'll have enough knowledge to make an informed decision on what framework you like better. Good luck!
There's plenty of work in the world of wordpress, and real need for competent experts! You should make sure you do other things too because that will keep your options open and your skills sharp. The way wordpress encourages you to work is, well, not the best, so making sure you are a good all-round developer will help you.
I am working towards re-inventing the wheel. I will after 100 years build cycle, then 500 years later scooter. And in tech field, let me build my own browser, my own client side script like javascript , then my own server side language like ChapsoPHP :) ! Unfortunately we live lot less than that :) Whatever is the reason, use already built tools :) 
&gt;I have found that framework guys cannot solve a technical problem if it's not solvable by the framework Completely opposite here. Anyone I know that knows even just ONE major php framework has a much better idea how to solve things that the framework might not have any functionality for, and are generally better developers because they also just seem to know php itself better. I'd also argue that when you have a team, using a framework (in my experience) just helps people get on the same page. For a small personal project that doesn't demand a lot of maintaining? I get not using a framework. Multiple people over time working on it? Framework all the way. &amp;#x200B;
It's always a matter of opinion and money. I can't say you are wrong, but I don't really agree.
While working on an XML streaming package I had this problem as well. I finally got together a working solution as the following [cursor class](https://github.com/TBPixel/xml-streamer/blob/master/src/Cursor.php), feel free to steal it and use it in your own code.
 &lt;?php $answer1 = $_POST['question-1-answers']; $answer2 = $_POST['question-2-answers']; $answer3 = $_POST['question-3-answers']; $answer4 = $_POST['question-4-answers']; $answer5 = $_POST['question-5-answers']; $totalCorrect = 0; if ($answer1 == "C") { $totalCorrect++; } if ($answer2 == "D") { $totalCorrect++; } if ($answer3 == "A") { $totalCorrect++; } if ($answer4 == "B") { $totalCorrect++; } if ($answer5 == "D") { $totalCorrect++; } echo "&lt;div id='results'&gt;$totalCorrect / 5 correct&lt;/div&gt;"; ?&gt; If this is all the PHP in your code, just use javascript.
I cannot say I really get in detail what you wrote (this English is rather hard for me) but I suppose you take this article as someone's honest expression of thought. However, it is not. It's a blatant and insolent spam. Although I agree in general that it doesn't justify swearing, but sometime it just goes beyond limits. 
&gt; I did some consulting on that was using node.js, 1 MILLION lines of code on their index page. I think we just have a different take on the term "framework", hence the confusion
Not from scratch. But I use stand alone components. I am not going to spend time replacing things like phpunit and guzzle and mpdf. They are too good to make my own. The infrastructure (mvc stuff, routing etc..), I do my own. Having those kinds in my own hands saves a lot of time reading and searching in documentations.
Professional is one thing and money-making is another. You stated the former in the title but it is apparent from your comment that your only concern is the latter. So Wordpress can generate enough revenue, don't you worry.
Imo: Wordpress is the real deal.... for People ignoring much more reliable CMS's/headless CMS's. Wordpress limits the dev and designer extremely. I would never recommend it. Same as Typo3. These two CMS's i hate especially from my experience with them. It's not just a professionals dead, it's the excuse of being lazy for no reason at all and because of the extremely unnecessary, big and partly missing, Documentation absolutely unproductive in my eyes.
[https://modsecurity.org/](https://modsecurity.org/) is an open source one, so the main cost is configuring it and keeping it up to date. Though a WAF doesn't strictly prevent disk writes just inspect incoming requests and blocks them if they look malicious.
if you want to be a *software engineer*, then yes, WP is a dead end. 
Making excuses as usual. 
/r/phphelp will get a better response!
So why Wordpress? I see a lot more React contract jobs at the moment than Wordpress.
What I (almost religiously) don't use in my side projects: * Auto wired dependency injection - seriously, I think that naming manual composition "Poor man's DI" was the biggest crime in OOP history. * ORMs (Data mappers/active records) - I use query builders or plain "sql-aware" objects. It sometimes slows me down, but usually once per unique entity ("User" looks similar enough to be copied betwqeen projects &amp; slightly changed), and that is low cost for code such obvious that I can think of real problems while writing it. * Annotations, code generation and reflection magic in production code - I keep some of these in dev tools though.
Someone ELI5 how having multiple instances of your app on the same server can help handle more traffic. Do the new instances get more resources? What is the limiting factor that is being alleviated? Or maybe this is generally run across multiple server instances and this is just a simplified example, in which case I get it. 
I haven't read the obvious click bait ... &gt; Although I agree in general that it doesn't justify swearing, but sometime it just goes beyond limits. I don't object to swearing really, we're all adults (most of the time) ... I've nothing to say to someone saying "Oh fuck no", as they did in this thread. Calling someone a dickhead, however justified you feel in doing so, is not okay. It communicates no more than you don't know how to conduct yourself, and the rest of what you have to say is not worth listening to.
What is a framework? I sort of use a framework in that I heavily lean on composer and stitch together the parts I need. Mostly what I am writing now are provisioning/deployment scripts &amp; configurations, a data description/relationship object (which gets run through a code generator), and then super mangling the front end view code. I call my code generator "the chainsaw factory". It does have the caveat that it is very much a rewrite for major updates-- which would include depracated PHP commands evaporating into the ether. Regardless, it is a framework of sorts... but super trimmed down and task specific. It becomes like any other composer based app that can be extended and modified once it is a thing. My solution is good for people that plan on rewriting every few years. My solution is good for small to medium projects. I specialize in CRUD apps. It has taken me decades to get here, to have past projects to cut and paste from to arrive at so many DRY solutions and a preferred third party library to do what frameworks bundle for us. My suggestion is to use a framework until not using a framework provides clear and specific advantages is equal or lesser timeframes.
There are plenty of jobs where Wordpress knowledge is valuable. There are also tons where it isn’t. Speaking as someone who hires application engineers in a domain with complicated data and logic, I rarely, if ever, hire someone with Wordpress experience. Their overall knowledge level and experience with modern frameworks and databases tends to be weak, but they apply for Sr. Level positions, with the expectation that they are strong because they’ve been working with Wordpress for a long time. TL;DR: IMO, if you only learn Wordpress, you will find jobs, but you will also hit a ceiling relatively quickly.
okay okay, if you say so. I wish however, that local mods were showed signs of life a bit more than does a mummy. So there will be no spam posts hanging around for hours and hence no such discussions whatsoever.
&gt;The password must be a minimum of 12 characters in length. I also set a maximum of 30 characters to ensure compatibility with bcrypt. &amp;#x200B; Ugh. bCrypt's maximum is 72 characters. Don't be like this and limit users to 30, those with password managers will thank you. &amp;#x200B; &gt;The password must include an upper case and a lower case letter. &gt; &gt;The password must include a number. &gt; &gt;The password must include a symbol. \*sigh\*. Again, don't do this. Length &gt; character set requirements. Go look at a [diceware passphrase](https://en.wikipedia.org/wiki/Diceware). Even with the wordlist you're not going to break a diceware passphrase hashed in bcrypt in any short order. Diceware words don't contain any numbers, symbols or upper case letters. &amp;#x200B; &amp;#x200B; The idea is great, require stronger passwords, but the author shows a lack of understanding on what makes a strong password. This ends up doing more harm than good because the moment you add too many rules to a password, people start thinking of ways to defeat the checks, rather than choose a strong password (for those who still type their own passwords).
I don't want to start a shitstorm. I am very aware of frameworks and their usefulness. But my opinion is that like any tool, they have their place and use. Node.js is also a framework and I used it as an example of overkill for some applications. Since the early 2000's, I've been involved in many online gaming software projects, and to give you another example, I've seen bingo software built in Java that had way too many dependencies in it that it didn't need, and you're probably going to guess right when you guess that the programmers were not knowledgeable enough to use Java in an effective manner. But the sheer number of dependencies they allowed in the system slowed that thing down to a crawl. Getting rid of the dependencies cleared all the issues, but that took writing a lot of proprietary code, in Java still, but it finally worked better. Which brings me to my present problem in using frameworks, any of them, for everything. Some things just don't need that much power behind them, or dependencies, or even reliance on a third party. As a developer, and by developer, I mean the one who makes decisions and puts up the development money, I much rather have systems that have zero dependency on third parties whenever I can avoid it. I do know how to program, but prefer to hire. But like I said, it's just me and my opinion. I am not bashing frameworks. Only stressing that they have their place, and identifying their place is often influenced by an engineer's personal preference rather than pure logic. 
01101000 01110100 01110100 01110000 01110011 00111010 00101111 00101111 01101100 01100001 01110010 01100001 01110110 01100101 01101100 00101101 01101110 01100101 01110111 01110011 00101110 01100011 01101111 01101101 00101111 01111001 01101111 01110101 01110010 00101101 01100110 01101001 01110010 01110011 01110100 00101101 01101100 01100001 01110010 01100001 01110110 01100101 01101100 00101101 01100001 01110000 01110000 01101100 01101001 01100011 01100001 01110100 01101001 01101111 01101110
That translates to: "https://laravel-news.com/your-first-laravel-application". ^(I am a bot. I'm sorry if I ruined your surprise.)
https://www.youtube.com/user/phpukconference/videos
I'm still using the ancient Zend_Pdf class for making PDF in a ton of places. I need to look into mpdf...
I suppose you could have both. When you launch apps in your kubernetes cluster (and you're following best practices) you assign memory and CPU to your containers. If the container requests more memory or CPU it's killed by the Docker daemon. So you could scale your apps to work around that. Also, containers are just glorified processes. Launching a new container is equivalent to spawning another process. If you have multiple servers it makes even more sense.
I agree that this should be patced, however, what is a valid use case to allow a user submitted value to a unique rule? The whole point of that validation rule is to prevent people from creating duplicate things. You typically want to enforce that behavior, not let the user ignore it if they want.
Always remember to this XKCD comics: [https://xkcd.com/936/](https://xkcd.com/936/)
In my experience, WordPress work tends to pay pretty poorly. If you're just getting started, you may have a hard time getting that $5k/month goal.
Neither do I. But really, your example is so much off the track. We are talking of PHP frameworks here. So show me a project based on Symfony that has more than a dozen lines in the index file. 
&gt;The way wordpress encourages you to work is, well, not the best, so making sure you are a good all-round developer will stop you getting stuck in a dead-end. This is how I feel. Big money making projects are going to use a lot of processes such as npm, composer, CI, migrations, source control, etc and wordpress doesnt really fit that ecosystem. 
As a Laravel developer, and freelancer for 9 years, Wordpress is the ugliest mess you can find in CMS. Wordpress, at least last time I checked the code, was still procedural php which is heresy nowadays. &amp;#x200B; With Wordpress, you won't have much hope for evolving in your job. And basically, wordpress job are mostly done in communication agency or web agency and as previously told, not much evolution. &amp;#x200B; On the other hand, learning something very specific such as laravel, symfony or any other high used framework may open many door and trust me of wayyy more interesting project than you could do with wordpress. &amp;#x200B; React is good, so far, one of the best with angular and vue. Wordpress is nice for beginner and people which are just working with little to medium companies. But this is not the thing that will makes you work with huge company. And Huge company have way better budget for their project and by experience are really less annoying than people without budget. &amp;#x200B; &amp;#x200B;
Yes, but so is becoming a "Laravel developer" os "CodeIgniter developer". Instead on sticking all your future prospects on a single tool, you should be learning *good programming practices*.
I disagree with other comments here. There is nothing wrong with starting from scratch especially as a learning experience. Too many people rely on frameworks without ever solving for certain issues themselves. However, you will naturally come to the conclusion that in order to be productive, more and more of your routing will be lifted, common business-cases will be abstracted and wrapped and you will naturally account for more and more cases of using different external tools. In other words: If you are doing it right, you will end up with a framework anyway. It will be your own and developed by yourself, having no feedback-loop of a community nor the "manpower" to update. **BUT**: I wish building a framework from scratch would be something everyone did at least once. This makes the most sense AFTER you have worked with (and looked under the hood of) some existing frameworks and inspected how they achieve things, without being afraid of then doing things completely differently. &amp;#x200B; The fact that this will lead to the conclusion that for a given project it normally makes most sense to use a well-documented framework does not matter. What you will have learned is valuable and helps understanding and learning other frameworks better. &amp;#x200B; So I guess for your last question: yes, you should learn using some frameworks. Not sure if "all these" is necessary, but here are my picks for different concepts: &amp;#x200B; Laravel (rather complex, but rather important and interesting) Phalcon (Most innovative when it comes to the core concept) Slim (Unfairly dubbed as "API-only", but in reality a lightweight all-purpose framework ) &amp;#x200B; Avoid concepts that are still around a lot but simply aren't useful anymore (I would have to dive deep for an explanation, so I'll leave it at that) in my opinion like CodeIgnitor or CakePHP. &amp;#x200B;
&gt; I have found that framework guys cannot solve a technical problem if it's not solvable by the framework. If you only work with a framework, you are limiting your knowledge to a WYSIWYG type of programming that cannot be called programming. That's correct, but also, dare I say, not the point. Your problem is not framework, it's developer's quality. There should be no such thing as a framework guy. There's a developer who chooses (or is forced to use) a framework depending on the circumstances, but who masters his trade. Just like there's no "screwdriver guy" or "wrench guy" but just a mechanic. And a good developer will use the framework at its full potential for the things the framework is good at, but also decouple as much of his code as possible from the framework. &gt; As well, frameworks tend to over bloat a project and if you don't mind having 40 gigs of shit in your project, and I might add, shit you don't now, or will never use, then it's no issue. There are frameworks that allow you to pick and choose exactly what you need, so there's minimal bloat. &gt; For a company, like mine, that over the years, has pretty much built our own kind of framework So you use a framework, it's just not a public one. A framework is exactly that: a set of boilerplate code that you use to avoid rewriting the same thing over and over again. &gt; Then you have the question of how long it will be before someone stops supporting it. So you prefer your in-house framework instead of an outside one. And I think this is a valid point. I prefer to use something with several dozens or hundreds of contributors because I believe that a public (particularly a prominent) framework gets more scrutinizing eye balls and that is more effective in terms of security than any internal code-review, but having already found myself with a framework that was no longer supported (symfony 1) and having written a codebase that was not decoupled at all from the framework, I understand this preference. 
0110111001100101011101100110010101110010001000000111011101110010011010010111010001100101001000000111011101101000011000010111010000100000011010000110000101110011001000000110000101101100011100100110010101100001011001000111100100100000011000100110010101100101011011100010000001110111011100100110100101110100011101000110010101101110
To be honest, node and the entire js ecosystem (including tooling) is a complete mess. We should consider them as a special case.
No, but make sure you're a developer who knows PHP and uses WordPress, not a WordPress developer. WP has a way of sucking people very deep into its ecosystem, so you're stuck eternally using the WordPress way to do everything. We still run a bit of WordPress, but we install it via composer using fancyguy/webroot-installer, have it sit as one library among many. It's for writing blog entries and using nice themes. There's also a lot of money in integrating solutions with existing WordPress sites. Writing good plugins requires a lot of PHP skill, and those can be quite valuable to clients.
&gt;Have you ever needed to convert one instance (usually a data transfer object) from one type to another? I found myself writing static constructors like: class Foo { /** @var string **/ public $name; } class Bar { /** @var string **/ public $name; public static function fromFoo(Foo $foo): self { return new self($foo-&gt;name); } } &gt;In all honesty this is fine for a start, but it really creates tight coupling between objects in order to handle these constructor conversions. If I wanted to remove Foo entirely, I'd have to go and find every place where I called fromFoo on the Bar class! This can get even worse if the source type comes from a package; it may become critical to decouple this package from an application and yet references to it are now littered all through out my application. &gt; &gt;This why I created the Type Adapter package. This package allows for loosely coupled, type safe conversions without static constructors. It attempts to reduce coupling and act as a communication converter between the layers of your application. It is particularly useful in hexagonal architected, and by extension domain driven application, software design. Hey all! I wanted to share this package I put together the other day to help me decouple externally defined types from my internal types. I'm always open to feedback and suggestions so feel free to leave your feedback below!
For example, if you want to update a relationship for something. Then you'd have two IDs that need to be touched. You first validate the user input (primary and foreign ID, both coming from the user), and then you make sure that the user is allowed to update that relationship.
I guess I don't know where to look (I only browse Upwork). Where are the React contract jobs?
Where does the unique role come into play there?
A "WordPress developer" is basically the 21st century equivalent of flipping burgers at McDonald's. Also flipping burgers at McDonald's is the 21 century equivalent of flipping burgers at McDonald's, but you get my point. It requires little skill or training, and it's mostly mashing plugins forcefully into one another until the mess resembles roughly what the client wants. And I mean *roughly*. Then it regularly falls apart, usually during updates, and you get paid to mash it up a bit more until it breaths again.
I don't understand why people think the options are either WordPress or custom code. Like you know there's plenty of other, better tools for basically any situation right? I get milking the cash cow for unsuspecting clients, but that doesn't actually make it a good product.
Checking if the desired new relationship already exists, for example.
I inherited a legacy project that uses it. It's a pain in the ass to dynamically add text over an image, and after this I will look at replacing it.
Yeah but the WordPress ecosystem is very much full of "WordPress developers" that couldn't actually code their way out of a paper bag. Kind of like "jQuery developers".
If I knew of a marketplace with freelance work in React I'd take it. But it seems Wordpress work rules online
They should make it work like this: &lt;?php class Foo { public $name = 'foo'; } class Bar { public $name = 'bar'; } $foo = new Foo; $foo = (Bar) $foo; // &lt;- error &amp;#x200B;
Wouldn't you want the exists rule, not the unique rule?
Otherwise you'll be doing the same for the framework your didn't build.
I don't code everything from scratch, and I feel it would be immoral to do so. The word "everything" is an important piece of that. Are you doing in-application routing (which I recommend)? Then you can probably use one of the many routing *libraries* for that. There are *libraries* for a lot of useful things. Use them. But *frameworks*..? What is a *framework*? Some people would just say it's a group of libraries designed to go together, others would say it's the skeleton of your program, and changing skeletal structure is not easy. In the very least, do not code *everything* from scratch. Find good libraries, and use them. If that's a framework, then whatever. I don't care. 
After college I took $5 - $10 dollar an hour jobs on upwork to teach my self how to program. It's been 7 years and 2 of my 3 contracts are in Wordpress still. Since you mention money I'm making more than $5k/mo so I wouldn't worry about getting stuck in Wordpress because there is work, but like others are saying keep expanding your stack. I spent some time at a start-up and I think that has been the biggest growing period in my career. 
Speaking as someone who hires developers to work in a PHP shop, I'd say it's a good indicator that a candidate doesn't actually know PHP, but only knows WP. I still ask them technical questions, but more often than not, if they have WP on their resume, they're not getting far in our interview process.
I may simply be unaware, but how would this be possible within PHP? It would be great to have casting flexibility such as this, especially if it can continue to uphold the loose coupling that this package aims to provide.
Generally webpages are whole things, not partial things.
WordPress deserves some credit and is often "the best tool for the job" but those jobs are likely to be lower paying, lower skills requirement, and less interesting than a job where something like "laravel is the best tool for the job."
A job is a job. Regarding your "dead end" question, I'd suggest take on WordPress projects if that's what's available, and look for more opportunities. The only occasions I've taken on WordPress projects is because I want to help someone's existing project, or to get access to other WordPress-unrelated work. It's not that terrible, but it's best to not make WordPress your career.
Becoming a "backend MVC framework developer" does not seem like a dead end.
Like I said it's "one tool in the tool set." I personally don't believe it's either WordPress or custom coding. But WordPress is a great tool for a lot of website projects. Is there something better? It's entirely possible that there is. But I've always considered part of my job is helping my client to make good decisions about how to build their website, and asking my client to essentially "dog food" a different platform has never felt like a great choice. In addition it doesn't feel like a great decision to lock them into a platform in which their support is going to be limited. If I build them a WordPress site I know they'll be taken care of, whether or not I'm the one taking care of them. However i think I could be doing a better job of vetting some other platforms and factoring them into my decision-making. Conversely I have recommended clients *not* use WordPress. Some clients have familiarity with it and want to shoehorn anything that runs in a browser into it, and I think that's an equally wrongheaded approach. &amp;#x200B;
Oh man, I'm trying to get work done here.
I write my own skeleton framework, which is influenced by various experiences over decades and years of development in things other than PHP. The existing frameworks are almost universally overkill for any project I have started, which is why I created my own. I know what changes I would have to make (since I have a separate framework repo) upon language changes. Trivial changes at worst.
I'm no expert, but at the end of the day that casting operator should be overrideable somewhere.
&gt; There should be no such thing as a framework guy. There is always a framework guy (or team). There is always a gatekeeper (or the framework risks becoming unstable). In the rare case, where your team happens to still be the same team that assembles a framework from scratch, gatekeepers (individual or team) are ubiquitous.
I did a quick check and as awesome as that would be it appears it is not. From the [PHP docs on Type Juggling](http://php.net/manual/en/language.types.type-juggling.php), specifically the **Type Casting** section: &gt;The casts allowed are: &gt; &gt;(int), (integer) - cast to [integer](http://php.net/manual/en/language.types.integer.php) &gt; &gt;(bool), (boolean) - cast to [boolean](http://php.net/manual/en/language.types.boolean.php) &gt; &gt;(float), (double), (real) - cast to [float](http://php.net/manual/en/language.types.float.php) &gt; &gt;(string) - cast to [string](http://php.net/manual/en/language.types.string.php) &gt; &gt;(array) - cast to [array](http://php.net/manual/en/language.types.array.php) &gt; &gt;(object) - cast to [object](http://php.net/manual/en/language.types.object.php) &gt; &gt;(unset) - cast to [NULL](http://php.net/manual/en/language.types.null.php) &amp;#x200B;
Take a look at Symfony 4. Fabien has been working towards decoupling Symfony for many years and the result is just amazing. You literally picking up only components you really need. 
Can you please expand your answer? How would I make it work offline?
Thank you for these inputs! I've began some tutorials with laravel, quite nice, I'll try to work on a small piece of tech on the side to understand more of it
Don't know who they are, I'm learning 100 things today ;)
Will do it!
&gt;Or maybe this is generally run across multiple server instances and this is just a simplified example, in which case I get it. Yes, this is simplified. Minikube is not intended to run as a production (or any other) system except to give you an easy way to play around/test things with k8s. In reality you'd have multiple nodes (servers) in your cluster and you don't care on which node your application runs, because k8s as a scheduler determines the "best" node for you automagically. &amp;#x200B; Just took a glance but the article seems pretty good to get your feet wet with k8s.
It is really weird. I had a client go with a firm because they thought I wasn't capable of implementing their new vision with more features. The company took a year and failed to deliver, all the while saying some things were "impossible" to implement. They came back to me, and I inherited a giant mess. They installed over a dozen plugins just for getting minor features from each plugin. Multiple theme plugins too. Hopefully it is in the budget to redo from scratch eventually, but my gosh. At the very least I did learn a lot about developing for salesforce since there was supposed to be tight integration with salesforce, which never ended up working right. 
Nice piece of art! Waiting for that Quantum computer to change the 0 to 1 and the 1 to 0 which will be the same piece at the same time, or reverse...
I've began to investigate on Chapsoravel ;)
Because their business model is to pump out as many sites as possible. As long as they "work", they're good to go. This often involves mass amounts of plugins because none of their staff can actually code, and generally the sites are full of security issues. The WordPress way.
Absolutely nothing for me to say, add, or disagree with here. You rock.
I would get that for some firms, but if they land a contract that is tens of thousands of dollars you would expect more. 
Pitty you can't extend it so easy. You could do it in the [source code of P](https://github.com/php/php-src)HP and build your own PHP interperator build. Good luck passing a pull request though.
[https://git-scm.com/](https://git-scm.com/)
Got it, multiple processes available basically multi threads your whole app. Thanks!
Got it that makes sense. Thanks!
As u/jkoudys already stated, make sure you are a PHP developer that uses WordPress. If you're good at PHP you will be able to take advantage of Composer to install WordPress as a dependency and do any fancy and complex things you want/need to, using modern methods. Regarding money, access to really big companies can be quite difficult, as many talk with Automattic/VIP first instead of going directly to an agency. Medium sized companies would definitely be your target if you want to stay a freelancer, but if you want to go to an agency you will might get access to the good stuff and see that WordPress projects can be quite complex and use modern code practices. Disclaimer: I work remotely for one of the biggest WordPress-only agencies
I don't know the first thing about Symfony. But I think I did not get my point across. My point is that there may be a thousand instances where a framework is the right choice. But there are also a thousand instances where they are not needed. Choosing between them can make a difference in a project's success or demise. And the choice should not be based on "liking" one over another. Any framework. It's just a statement, no obligation to agree or not. Just stirring up some discussion by bringing my opinion into it.
Well this statement is so generalized that it hardly needed at all. Sometimes you need a car and sometimes you go by foot. But as a rule, nowadays, for PHP development, to answer a question phrased as "I am doing everything from scratch" the answer is yes, you need a framework. 
please read the sidebar before spamming posts across several subreddits. /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required).
That might be so, but the mentioned frameworks are related to MVC in the same way as Democratic People's Republic of Korea relates to democracy. My point was that focusing on a specific (and poor) framework is a terrible idea in the long term. Especially since most of the thing that you would learn in that line of work would not be transferable to any other project.
 class Bar { /** @var string **/ public $name; public static function fromFoo(Foo $foo): self { return new self($foo-&gt;name); } } this code makes zero sense.
so this entire library is basically an interface for a factory method?
Try some recruiters local to your area. The jobs I was on about were mostly in emails from them.
Yep, in the start I learned entirely by doing, no formal education, books or videos. I progressed to having an `includes.php`, then a `functions.php`. By the time I had read about separation of concerns, I was already splitting my files like `blog/create.php` had an accompanying `blog/create.action.php` so that felt quite natural to me. I remember believing for a while that a class was just a big function, some kind of wrapper around loads of related functions.
Pretty much. I found myself making static constructors and wanted a way around it that was type safe. The \`Adapter\` itself is really just a factory that ensures type safety.
It's a static constructor, and it's usually useful for pre-configuring things or as it was used in this example, converting between types. As u/mythix_dnb noted above, this package is a small factory implementation with a type checker. It allows me to remove static constructors entirely and instead create re-usable factory \`Adaptable\`s instead. This doesn't make sense for everyone; it has a niche use case, but I wanted to share it regardless.
Is this legitimately converting html to image to pdf? How does it handle complex styles?
It's considerably harder not to use a framework and produce solid code. Particularly because you don't have the skill to realize when you're making a mistake. You don't have to actually 'learn' the whole framework. I've picked up new technologies scores of times now. The best approach is read enough to understand what said technology/framework broadly does (an hour or two at most) then start trying to use it. The best way of learning is always to do and fill in your knowledge as you need to. I use Laravel regularly for example having started to move to it as my framework of choice for new development three or four years ago, but I still don't know substantial portions of it which I've not had cause to use. I'd suggest starting with Lumen or full blown Laravel and working out from there. Also, at some point you will get stuck. If you're using a widely used framework chances are you'll get stuck on something many, many people have been stuck on before and the answer will be easy to google up. If you develop your own system then when you get stuck the odds are that your problem will be much more specific to you, and consequently more difficult to solve. As most developers spend more time debugging and testing than actually writing new code this is a \*major\* consideration.
God bless you.
Forget about PHP if you won't have a web server listening to requests for this offline (not connected to internet) site. We're assuming you won't code a desktop app (C#/Delphi/whatever compiled language) or a native android/ios app. If it will work OFFLINE you'd choose for a HTML/Javascript solution -you can even pack it in a Cordova app for mobiles - which you will need to load before going offline, otherwise you won't be able to access it later. This should be coded in HTML and plain JS, using jQuery or (better) a framework like Angular/React/Vue. This offline app should use LocalStorage or IndexedBD for example (check the compatibility level you need) to store the information each user saves offline, the app should have a "sync page" that pushes that information to a server, handling communication errors or whatever error the server may reply and deleting each record from the local storage once it has been successfully transmitted. On the server side you'll need to implement an API endpoint to receive and process clients information, plus some kind of authentication/authorization should be included in this communication. Hope this helps.
Just pointing it out as it showed up on my YouTube subscriptions :-) I'm not associated in any way.
It's a marketing firm, not a development firm. They drag and drop websites in place as part of a larger marketing package. They probably don't employ a single developer.
Title Should say: \`use Some\\Name\\Space\` not \`space\`. Question still remains though.
Good question. I usually end up resorting back to lazy loading.
Which is better, Code Igniter or Laravel?
Have you seen an open source PDF generator in *any* language that wasn't messy? I think some "problems" don't have "clean" solutions and I think PDFs are probably a good example of this..
That's what I'm doing. AltoRouter, Twig, Parsedown, Dotenv, and a fully-fledged framework isn't really needed. Not for anything on the scale I'm working with anyway.
Well, you have options. Normal: use App\User\User; use App\User\UserEvents; use App\User\UserRegistrationService; Grouped: use App\User\{User, UserEvents, UserRegistrationService}; Import root namespace, and then prepend each class with the last segment: use App\User; $user = new User\User(); $service = new User\UserRegistrationService(); $event = User\UserEvents::REGISTERED; The last method has risks of collisions if you have a class with the same name as a namespace segment, e.g. if `App\User` is a `User` class in the `App` namespace. Not saying any of these are better than your suggestion. Personally, I just use the individual imports. PhpStorm does a great job of taking care of those for me, and most of the time they're automatically folded so they don't take up space, anyway.
There are methods to import multiple classes: use some\namespace\{ClassA, ClassB, ClassC as C}; However, considering most IDEs will auto import a class the moment you use it, and the use list is quite explicit and gives no scope for ambiguity, it serves its purpose quite well. Also, unlike Java, the class structure is not fully known ahead of time. You could include Ns1\* and Ns2\* and both of them have Class1 inside, with no way of knowing which one you want to use.
Post a gist on github and explain a bit more. Reddit isn’t a very good platform for sharing this sort of thing
I don't like laravel but codeigniter is pretty dead 
Same. It's another "well you can write more code" solution. One day it will be nicer.
Laravel is far better designed than CodeIgniter. That being said, my personal preference is Symfony.
11100010 10011000 10101111
I'd actually say that crappy clients pay low. And though I'm not a WP developer, I actually have seen people who were very good with WP (and being actual developers who can code properly) pulling some pretty impressive coin and have more work than they can do. I also have done some WP related jobs via upwork (MySQL DB and query optimizations for WooCommerce install) that I charged pretty good and client is happy as a labrador :)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Yeeaaaah, have you tried others SQLi ? Injecting after a LIMIT, ORDER BY for example ? That's pretty common. Does it work with commentaries ? IF statements ? SQLi is a pretty wide subject, I doubt a simple regex would be enough to detect every injection possible, that's why you should prepared statements
Additionally, both the UK's National Cyber Security Centre and the US National Institute of Standards and Technology explicitly recommend against password complexity requirements beyond requiring a reasonable minimum length.
Any good ones?
&gt; I have found that framework guys cannot solve a technical problem if it's not solvable by the framework. If you only work with a framework, you are limiting your knowledge to a WYSIWYG type of programming that cannot be called programming. How can your "framework guys" build anything that isn't just a raw CRUD application, in that case? Business requirements require technical problem-solving, and a framework can't write those for you.
This is Quantum!
What makes you like it more?
Wordpress is a single instance of the broader pattern of framework driven full stack web development. It's not a particularly good framework imo. Don't slot yourself into being a "Wordpress developer", learn web development in a more comprehensive way and be capable of working in many different languages and frameworks. 
I use mailgun for everything now. Makes life super easy and I get great reporting, which is something PHPmailer does not offer.
I like the third variant as it can give you little bit of context and also avoids confusion with duplicate names without using aliases. Like `Repository\User` and `Entity\User`.
Thanks for the links 👍
I had no idea you could do `\{ClassA ... }`. I understand from an IDE point of view (I personally use Atom, so I have to type out the namespace (which isn't as bad as you think it is)). The reason I asked the question was because some PHP classes, as the app grows, Could have 20 `use` statements or more and im like "why cant we shorten this down to a `use *` For example.
The last one has always looked ugly to me. But I understand your point.
does composer or what not, not do this? or did I miss something?
AWS have a WAF as well, not sure on pricing, but useful to know if you're already on their infrastructure
Maybe because "import everything" is not an important enough feature to implement? 
If you're on AWS, use S3 instead of local file writes, as any script uploaded will not be executed (unless you specifically bring it back to the server or exec the content - don't do that). Otherwise, you should look at file system permissions, or prevent executive of files in your upload directory. My favoured approach is S3or to store files outside of the Web directory, so that they cannot be accessed from the frontend, and only serve them up through a permissions / sanity check script. 
Anyone talking shit on WordPress on here is silly. It is absolutely not a professional dead end. I'm not arguing my job is the best job in the world ever...but I work at easily the best agency in the state of South Dakota, and yeah, that's not saying a lot, but we work nationally with big names, and do a LOT of WordPress work. Yeah, it's not perfect, but it's an amazing introduction into a lot of things, and getting a strong understanding of it will definitely translate into better understanding of other platforms that you will pivot to down the road. It also was last measured at powering 30% of the internet? Sounds like a real dead end. &amp;#x200B; Obviously it all depends on the type of work you want to do. I work at an agency, we rotate through project after project. We have projects that run long term, but we aren't focusing on one giant piece of software that the whole team contributes to year after year. If you want to be a part of a team like that, maybe WP isn't the most inline with that goal, but it's not gonna hurt either. &amp;#x200B; This subreddit is soooooo positive. All the devs here acting superior to WP must just knock out full featured CMS's left and right, without even breaking a sweat. It's astonishing how quickly developers go from being humbled by the lack of knowledge they have to shitting on everything that they don't use anymore because it's "beneath them". Honestly, do what feels right to you, and try and not get too caught up in the bullshit arguments that go on in r/php &amp;#x200B; &amp;#x200B;
+1 for Bolt! A fair amount of things don't even *need* plugins, since it's either natively baked in: custom content types, a decent template engine, caching that doesn't suck and doesn't bring the site down if you disable it and more than three people visit your site, native HTML and markdown support, and so on. In all honesty, in some other areas its currently more Spartan than other CMSes, but nothing I haven't been able to extend or otherwise work around.
I can't say I've used Atom, but in PHPStorm, which is the de-facto industry standard, all of the "use" statements get collapsed and hidden by default. I can't actually remember a situation in which I have actually written a 'use' statement by hand, and the only time I ever tend to look at them is if PHPStorm complains it can't import a class because it was already imported before I copied and pasted some code into the file which used the FQDN. 
React isn't a CMS? the two are not the same thing...
Open_basedir and/or selinux? Is it always the same script or different script you want to prevent? Can you time it when writes happen? If yes you can use cron and set permissions when writes are allowed / not allowed. If possible split between upload/written files and scripts. If done you can set permissions to disallow writing in scripts folder / files and prevent execution on writable files/folders.