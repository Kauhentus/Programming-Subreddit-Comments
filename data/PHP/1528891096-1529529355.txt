About "Regarding #1", I think this is a double\-edged sword. I'd take a stance and say the library author should be the one to know the domain and do the right things (not push the problem down the stack). Regarding that, PHP has random\_bytes() and that is enough. You probably could just use plain bin2hex(random\_bytes(16)) and call it a day. More about that was discussed [here](https://www.reddit.com/r/PHP/comments/8n819d/uuids_are_obsolete/) a while ago. Big \+ for minimalism (and simplicity)! Complexity is the worst enemy of security and I'd like to see more heading to direction you were talking about.
I switched years ago after another fruitless battle with Apaches horrible config files. Nginx still isn't perfect in that regard but it is a lot better imho.
Thanks, i'll take a look and hopefully make something usefull with it after work today :)
This was fixed in a patch for versions going back to 3.1 over a month ago.
Thanks for the big + :) It's good to know that I'm not alone in thinking this. Re `bin2hex(random_bytes(16))` - If it would only be for internal use and also if I knew that it would forever stay that way then I'd go for it. The reason of having/using a standard (UUIDv4 in this case) is interop, ie. systems consuming our data expect UUIDs to have the structure defined in RFC 4122. Re #1 - I disagree that decoupling PRNG from the UUID type def/creation is pushing the problem down the stack. It actually saves you a lot of time/headache when something like the above mentioned dupe generation issue happens as you would immediately know that whatever the underlying issue is it's beyond the lib and could respond/act/communicate accordingly. 
Caddy is great for simplifying config. Check it out!
Tank you for feedback, I'm not that good with database related stuff and specially not with optimization, that's on my "Things I need to learn" \-list. So I didn't even thought about comments being problem with queries. Need to fix that for sure. What comes to what I find easier to write, might also be that I have just used to write so and didn't even think other methods. I try suggested way, fewer more generic functions might work better in long term.
Personally, I don't think so. I found the non Laravel Laracasts much more helpful after I was already fluent in PHP. A lot of the concepts, suggestions and patterns won't mean much to you because you haven't felt the pains they fix. Having said that, Laracasts does now have a "PHP for Beginners" series... so maybe the answer is yes. https://laracasts.com/series/php-for-beginners
To be fair you cannot get the last item of a Traversable without consuming the iterator, and given that many Traversable's cannot be rewound this means that you better have only needed the last one because the rest are gone. I'm not sure that this would be useful in practice. Also, to be fair if you want to get the first or last value you could use these key functions to do so.
It landed just AFTER the code freeze for 7.2, so you'll only see this behavior in 7.3+ https://github.com/php/php-src/commit/00cd671233e8181746ff2853365fb2362dd178e8 As noted already, the docs page SHOULD show a changelog for that, but doesn't. I'll try to remember to push that today. Ugh.... SVN... 
Well, to make it straight, it'snot a comment that makes a problem. A comment is just a variant of a malicious payload, but there could be no comment at all. It's the ability to inject the arbitrary SQL code into your query which is the problem, not a particular SQL, be it a comment or a [DROP TABLE students](https://xkcd.com/327/) query.
You have a typo here: `private function crateInsertPlaceholders($data)`
Avoid everything that starts with lara- like the plague.
http://bugs.php.net
I still use apache but I am a developer first and unwilling reluctant devops third. Second is anything but devops.
Completely \+1. You are looking for a common way to put things in a container. This is out of the scope of PSR\-11 but will be in the scope of a future PSR. [https://github.com/container\-interop/service\-provider](https://github.com/container-interop/service-provider) is the precursor of this future PSR. If you are used to Pimple, I'd recommend you take a look at \[Simplex\]\[[https://github.com/mnapoli/simplex\]](https://github.com/mnapoli/simplex]). This is a fork of Pimple 3 that is compatible with the ServiceProviderInterface we define. Then, you can take a look at the various service providers I've already written: * [DBAL](https://github.com/thecodingmachine/dbal-universal-module) * [Twig](https://github.com/thecodingmachine/twig-universal-module) * [Doctrine Annotations Module](https://github.com/thecodingmachine/doctrine-annotations-universal-module) * [TDBM](https://github.com/thecodingmachine/tdbm-universal-module) * [Monolog](https://github.com/thecodingmachine/monolog-universal-service-provider) Logger * There are plenty more... I'm using this Simplex \+ service providers combo on several of my projects and it is working pretty well. Also, this is clearly work in progress as it is supposed to turn in a PSR at some point. And help is very much needed to help shape the definitive ServiceProviderInterface and to write service providers for existing packages!
[Can't help it](https://xkcd.com/927/)
To be fair, its an old platform, very modular and has a large user base. There are very few elements of the code I would call 'spaghetti' and many of the conventions work very well once you understand how they do things. How long ago did you work with it?
plague does not start with lara? 
What kind of debugger did you use? X\-Debug with IDE?
&gt; To be fair, its an old platform, very modular and has a large user base. To be fair, so is WordPress, and they're managed to pull their own chestnuts out of the fire a few times ;) &gt; There are very few elements of the code I would call 'spaghetti' and many of the conventions work very well once you understand how they do things. This makes me want to yell "Stockholm syndrome" whilst running away :D I worked with it about 6 years ago, customizing existing functionality, mostly to align with a more stringent permissions system than the base offered natively, so fingers in many subsystems.
A web server isn't a standard, it's a piece of software. That doesn't fit this case at all.
Ah, I see, `nNumUsed` will grow continuously, whereas `nNumElements` will go up/down. So `nNumUsed` will always be greater than the last element in the array. Certainly more optimal than my code. Negative \`array\_slice\` looks like it could use some optimization.
It is. Maybe it's my theme or something messing it up? Not sure how to change that.
You must be fun at parties! 
Wat. You're spouting nonsense at this point.
That's `7.0.30` not `7.30`.
Ok, I almost submit the bug report for the PHP community. And I hope this will be fixed in the next released version :-).
You gotta be kidding about the last two lines? Lines of code have nothing to do with anything. If the execution of the code at once time hits "2000" lines, and not the other 198,000 then whats the difference for performance?
Yes. Just fix the PHP version typo.
Checkmate.
&gt; Hi guys, I came on here a couple weeks ago asking for resources to start learning PhP as I will be using it on the job. I’m an a new grad from the UK starting my job as a junior iOS dev. Do you mean you'll be writing PHP APIs that you will be consuming through iOS apps? If so, take a look at RESTful API design. &gt; The senior Dev told me if they gave me the job, I should look in CodeIgniter because it’s what they use. This is a bit worrying. CodeIgniter is quite old and hasn't aged very well. Most people who continue to use it are doing so because they don't know any better, are reluctant to change or are being forced to... &gt; Is it advisable to start diving into learning the framework after learning some OOP... Yes. If you don't understand OOP you will be making life harder for yourself. &gt; ...or just continue to learn and start doing on the job. If you think you can learn everything before you start your job you're delusional. You will need to do both. &gt; If so what best resources would you recommend to learn this framework. I suggest (after finding out what version of CodeIgniter they use) that you read the relevant documentation: https://codeigniter.com/docs
PDO::FETCH_LAZY is interesting... I've got to try it and see if it works for me. Would it allow for another, separate query running? Since another function in my wrapper is similar, and if another query is performed, a new database connection is done for it.
Six years is a long time especially in Web Development. Moodle releases a major point upgrade every 6 months and a minor point every 2 months. We've also seen the transition from v2 to v3 since then along with PHP7 support. I won't deny there is a learning curve but Moodle has improved significantly since 2.x. Though everyone has their preferred frameworks I guess. Wordpress still gets a lot of hate on this subreddit.
Ofcos i know i can't learn everything before the job. I wanna learn a little bit to not look very incompetent when i start. I understand OOP at least for Swift so I don't think it changes and differs that much. They use CodeIgniter to build their web app not REST APIs. I guess i will dabbling into that. That's the whole reason i'm tryna learn PHP. 
Well, technically PDO::FETCH_LAZY doesn't prevent parallel queries by itself. But indeed, it is best to be used with [unbuffered query](https://phpdelusions.net/pdo#mysqlnd), which, in turn, prevents any database interaction within the same connection until all the data is fetched. But to be honest, I am not sure I do understand why you're opening a new connection right now. I would rather blame a [stateful wrapper](https://phpdelusions.net/pdo/common_mistakes#statefulness) for that. 
Yeah to oversimplify things Codeigniter is really old and out of date and really not a good thing to be learning from. You'll be leaning bad habits that you'll later have to unlearn. Since it's for a job I don't know what to suggest. It's not like you can steamroller in their and make them change, but yeah, be cautious.
You mean like the `FormBuilderFactoryFactory`?
Sounds more like the work. I presume you've tried to get yourself onto the new stuff?
Thats the thing, i didn't even know it was that old and outdated as you you guys said. Unfortunately it's my first programming job out of Uni. So i'm gonna have adapt. I'm also doing iOS with Swift which i'm more happy with. 
Yup, it has to be a buffered query in the few cases that I may get _lots_ of results, and need to process them one by one, and for a few of them, further queries need to be made. So I made a fetchAsync that returns an object from where rows can be extracted one by one. Only if a new query is made while that object is active, a new database connection is setup for those queries, and when the object is exhausted, its connection is closed.
The CodeIgniter documentation is pretty well written for beginners. https://codeigniter.com/user_guide/ Ideally you should be using version 3 of the framework because version 2 is really old. But it depends on what your job current codebase requires.
Cheers 
I still use apache2 with php-fpm, got a lot of legacy stuff with 200-500 line .htaccess files. No way do I want to refactor that into NGINX for the very slight speed boost we might get. Also Apache2 already has HTTP/2 support, but it looks like it's experimental in NGINX.
So I'm trying to make a forum plugin that will allow you to essentially turn it into a threaded forum like reddit with nested comments. I've looked through a lot of different methods on how to do this, mostly nested sets and closure tables. I think I'll go with closure tables. How does reddit sort its comments? There are a lot of fields... by default it would be sorted by post date, but they have their own algorithm "best", they have top posts.. controversial.. and on top of that you have to keep the hierarchy order. How do they do this? I'd be doing this in mysql by the way.
Wow, sounds very smart (there is a typo, I take it that you mean an *un*buffered query).
While Codeigniter is showing its age and lower in popularity, I think it is a perfect place for a brand new developer to start. There were some tutorials by Joost van Veen back in 2012 or so that could help. I am on my mobile so I cannot look them up but a Google search should hopefully find them. 
https://i.imgur.com/DK1ckG8.png Means you are supposed to delete from here and re-ask in /r/phphelp
Cheers mate 
That's exactly what I was hoping to start from. Thanks! I hope it becomes a full PSR standard at some point.
Sadly, it's a mess of a code. Maybe some day I'll clean it up.
I'm in great part agree with everything FV68s said. But I want to add some things. &gt; &gt; Do you mean you'll be writing PHP APIs that you will be consuming through iOS apps? If so, take a look at RESTful API design. Be carefull when reading about RESTful API design. In one or two years, when you have a good level on web development look at Phil Sturgeon post's. There is a lot of mistakes about how people understand the concept of "RESTful" api, you might want to correct those. But, don't read it now, do it when you grow as a web-dev. &gt; &gt; CodeIgniter is quite old and hasn't aged very well. Even though CodeIgniter is quite old. I think is a good starting point to learn the MVC-ish pattern and understand how to design web apps. I think is easier to start with CodeIgniter and then jump to another Framework like Symfony or Laravel. Also, try to start using composer from the beggining. I don't know how different are things in the CodeIgniter 3 community (It seems they build CI3 around composer), but in CI2 there was a lot of tutorials like "download those files, place them in X folder" &gt; &gt; https://codeigniter.com/docs Always, but Always, try at fist to learn from the documentation. Today most docs are a great resource, most of them are complete and explain things as they are. I have found a lot of tutorials/videotutorials on other frameworks who adds a lot of buzz word, make you loose a lot of time and teach you so little for the time they take to read. Always try docs first, then seek for help.
You could aak jetbrains on Twitter 🙂
I'm on mobile. 
This is something I’ve wondered about. What exactly is the difference between a software developer and a software engineer?
This seems to be universally accepted as "the right way to do it". However, I never found the source for this. Who/when/how/why said that this is the way to go?
Google serves us all much better than your memory. Maybe you should check that first. A cursory search turns up a ~20 part laracast series on fundamental PHP concepts including: installation, variables, iterators, PDO, simple routing.
CodeIgniter 3.1.9 was released on 6/12/2018. Less than two days old as of this writing. 
Old != unmaintained.
You can always use a [.user.ini](http://php.net/manual/en/configuration.file.per-user.php) instead
That's the key, for this, for you, at this moment, if you want this job. As others say, there's a smell there, consider that this may not ultimately be your Chosen One, but nonetheless, research and Hello World the world of Codeigniter in good time if you want the position. There's possibly better positions with companies that aren't so wedded to CI, but I'd argue most companies have some legacy code to maintain, and as long as you understand that CI is the products of a PHP5 world with antiquated practices, that you should in no way consider authoritative, I'd say, as my Dad always has, 'Apply yourself.'
[Laracast](https://laracasts.com/series?curated) 
CGI is a bad idea since it launches a new process from scratch for every request. mod_php is bad because * each httpd worker process needs to drag a copy of PHP around even if it only serves static files * it can not run as different users for different virtual hosts * it does not work with the thread-based httpd MPMs, only the prefork one * it needs to be compiled for your version of httpd so it is more tightly coupled to httpd
Laracasts is what I would suggest. If you specifically need book suggestions only, Dayle Rees 's "code smart" and "PHP pandas" are the books to go for. [Link](https://daylerees.com/books/)
Thank you! 
But have you looked at the code?
Lovely! But I'm traveling a lot without a laptop, so books are more useful for me. 
Its worth noting code igniter is still really fast. I moved a project to laravel and ended up being 20 times slower.
Oh! Nice. Didn't see that basic php was added a year ago. Excellent :)
I hear ya, but this is as good as gets for Laravel learning tools. Laracasts is the best, and they allow you to download to watch offline.
You might also want to check out [Modern PHP](http://shop.oreilly.com/product/0636920033868.do)
FYI, you can download the videos to your phone and watch them offline.
Php object patterns &amp; practice - Matt Zandstra
\&gt; until very recently, mysqli prepared statements were [almost unusable](https://twitter.com/ShrapnelCol/status/811554258927702016). mysqlnd has been the default driver as of PHP 5.4, which came out in 2012. I'd hardly called that "recent" \&gt; due to that and to a lifelong habit, most users just used mysqli as a mere replacement for the familiar mysql\_\* functions The ability to use procedural or object\-oriented is not a disadvantage. How would you know how most people use MySQLi? Do you have data to back up this claim? 
Jeffrey Way is a genius, is one of the best screencast I have seen so far. Please, pay for Laracast you won't regret! You can download Laracast episodes, really dude, I'm the kind of "I preffer book" person, but Laracast is soo awesome. So much knowledge condensed in a little time. Give it a chance!
This? Why I could make a hat, or a broach, or a pteradactyl!!
Thank you. I'll listen to your advice and just pay for Laracast, it seems pretty interesting indeed. 
Please post this in /r/PHPhelp. This is not a support subreddit.
I wonder, if they're like .htaccess, will disabling them bring a noticable performance improvement?
Hey, Pesthuf, just a quick heads-up: **noticable** is actually spelled **noticeable**. You can remember it by **remember the middle e**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
It's not even PHP related.
We usually run the newest lts release of Ubuntu on our servers, ubuntu 18 comes with php 7.1, not the newest version, but stability is great. 
\[Professional PHP\]([https://patricklouys.com/professional\-php/](https://patricklouys.com/professional-php/)) Will get you up to speed on OOP, security, clean code etc. Doesn't cover any framework related things, but everything that you learn can easily be applied to Laravel (or any other framework for that matter). (Disclaimer: I wrote the book)
I would say most traversables in practice are rewindable. In case it's not, that's logical and correct it will make rest of the results unavailable. That's pretty much same as it would be when doing this in other means. Even with such limitation it would be much more useful than just limiting it on arrays.
yup, PHPStorm.
There's a script on GitHub which let's you download all the videos for offline at once, so if money is tight you only have to pay for one month and can slowly work your way through offline 
And to complete the list: php-fpm is bad, because it adds latency. It requires an extra connection between the webserver and PHP. 
&gt;CGI is a bad idea since it launches a new process from scratch for every request Well, not really. The php\-cgi SAPI uses [FastCGI](https://github.com/php/php-src/tree/c1ce43d1d2e500aeb0143c7c0f051e40f09ce4db/sapi/cgi) &gt; it does not work with the thread\-based httpd MPMs, only the prefork one It does, if you compile it with thread safety ([Using mod\_php as a DSO with a threaded mpm (2.0 and newer)](https://wiki.apache.org/httpd/php)) Which also invalidates your first point. &gt; it can not run as different users for different virtual hosts [https://httpd.apache.org/docs/2.4/mod/mod\_privileges.html](https://httpd.apache.org/docs/2.4/mod/mod_privileges.html) &gt; it needs to be compiled for your version of httpd so it is more tightly coupled to httpd &gt; &gt; it does not work with other webservers (though a lot of PHP apps rely on .htaccess files with Rewrite rules which are a pain to rewrite for something else) That's hardly a problem in the real world. Unless you are running different versions of apache in the same machine in which case I applaud your bravery. So basically, I'm sorry to say that at this point, you are just propagating the myth.
Because that's 198k lines of code that need to be kept patched and updated, in case of new exploits. And backed up. 
CodeIgniter is easy to get started with and 3.0 doesn't seem too bad to me. It's great for quickly prototyping something. Where I work, we created a git project that has CodeIgniter 3, Bootstrap, and a bunch of libraries, sample reports using stuff like server-side Datatables, etc... already built in and we use it as a kickstarter project for new projects. We put a lot of effort into get that one correct and now it's real easy to build new projects. I like Query Builder syntax, although some of my coworkers prefer to write SQL statements. I've written enough SQL in my life that I'm not going to forget how though. I suggest that you download the latest framework and try out building stuff with it. Various people have built starter projects with stuff like 0Auth, Bootstrap, etc... and put them on Github. (One disadvantage to CodeIgniter is that some other popular frameworks have stuff like Auth integrated already). I use Centos virtual machines to build on (using Virtual Box) but the PHP can be difficult to get correct on that, so if you use Linux, you might prefer Debian or something like Lubuntu. Most of the PHP developers I work with use either IntelliJ or PHPSTORM. You might want to ask your prospective employer how they have things set up and what they use in their environment.
Interesting, there are companies using codeigniter as their primary framework. Codeigniter does things the old fashioned way in the php world, but who knows what version 4 will bring. The codeigniter docs are great, and TraversyMedia on YouTube has some great tutorials on the subject. Codeigniter is easy to pick up for beginners, and it will give you good grounds for more advanced frameworks in the future. Learn some core php before you start. Here is a free resource on the subject. https://daylerees.com/books/ Good luck matey. 
I have no actual evidence, but it seems like not, since there's a separate setting for cache values.
If ur ready to make the jump from 5 to 7. I'd suggest installing the latest stable release. At the time of writing it's 7.2.6
If ur ready to make the jump from 5 to 7. I'd suggest installing the latest stable release. At the time of writing it's 7.2.6
You should try the same with CakePHP \- it is both fast and rapid development.
Unless you do a trivial Hello World style example that doesn't matter much. Latency tends to be dominated by either disk I/O or database connections, not to mention the tens of thousands of lines of framework initialization code.
I also use php storm. I have a student account 
Cheers 
So someone was stubborn enough to fix all those things after they first recommended FPM in PHP 5.3 as the preferred option, huh? Well, "fix" anyway. From your own link about mod_php with thread safety &gt; Special care must be taken to ensure that workers are restarted often enough (MaxConnectionsPerChild &gt; 0) since child processes are still prone to php memory leaks and processes are likely to consume large amounts of RAM and deplete the available system resources. &gt; This is probably the least used approach of all, due to the headaches of maintaining a thread-safe php library, and since most linux distributions do not ship those packages. You also seem to have skipped the bit under security considerations in your mod_privileges link where it said you either have the choice of a fast mode that does not offer any separation between different users Apache uses and a mode that forks every time. It also mentions it is incompatible with threaded MPMs. I also forgot one more point, mod_php does not allow you to run two different PHP versions on the same webserver. To be honest it looks like you just googled some random links but do not really use any of these in the real world. So maybe you should stop talking about other people perpetuating myths.
Would you want a "Eloquent Javascript &amp; jQuery" book? Here is the free piece of advice: ignore the frameworks. Instead focus on learning the core PHP7. prioritize things like OOP, SOLID, Separation of Concerns and Law of Demeter.
So you think this is a valuable resource? https://laracasts.com/series/php-bits/episodes/1 
This is not the right sub. I also have no idea what you’re asking for. 
Refactor your question and try openstack.
Nettuts used to have a good video series on CodeIgniter. Jeffrey Way used to record that series, before he founded Laracasts.
i want to create a function that authenticates to any login form like the ftp one which i provided
If you can, always jump to the latest version. The 5.x "mini-jumps" were dumb, and purely due to the _major_ changes happening throughout the 5.x branch. 7.x follows more of a proper development cycle.
If you can, the latest will almost always be the right choice. That said, if you have someone like an employer pressuring you to have something more battle tested, 7.1.latest is fine. The extra functionality and performance in 7.2 is iterative and minor. Just don't touch 7.0, it's EOL already.
&gt;recoomandations
Their respective manuals..
PHP is not as bad as some people make out, however the main issue I see with PHP in 2018 is simply it offers nothing that can't be done equally well or easily in several other languages, yet those languages offer things PHP doesn't, so there is little to recommend it.
clone($this)
The article mentions php-fpm being the preferred method for containers. This isn't quite true. PHP-FPM isn't suitable for normal docker logs that are displayed on STDOUT/STDERR as they will get truncated with a warning appended. https://bugs.php.net/bug.php?id=71880
but why.. ps: when userland implementation is just trivial.
&gt;Special care must be taken to ensure that workers are restarted often enough (MaxConnectionsPerChild \&gt; 0) since child processes are still prone to php memory leaks and processes are likely to consume large amounts of RAM and deplete the available system resources. What do you think FPM's pm.max\_requests is for? &gt;This is probably the least used approach of all, due to the headaches of maintaining a thread\-safe php library, and since most linux distributions do not ship those packages. I never said it was easier, I'm just saying it is possible. Yes, you are right, I don't use these in production. And sure, I googled some links. But apparently that is more than what you were willing to do when you presented your list of reasons why FPM is better. Had you Googled, and you would know you were just repeating what you heard/read/watched once somewhere.
It feels like this is the third time this has been posted to this sub in as many weeks.
Ubuntu 18.04 actually ships with 7.2, I've upgraded two of my servers recently.
Yep, third time indeed! 
In his original vision, how exactly would you integrate C backend code with PHP? PHP Extensions? I don't see how that idea was ever going to work. Places where I saw C used with a template used XML and XSLT. 
Actually, most php users are not even programmers. They're *painters*. They draw their programs diligently, line after line, following a few simple patterns. All the terms including "programmer", "developer" and "engineer" are a world away. There is nothing wrong with programmers btw, this is a cover term for the whole profession. 
&gt; how exactly would you integrate C backend code with PHP? PHP Extensions? yes exactly the intention was to write your code in an extension and use PHP as the API to execute the C code. It was pretty simple tbh https://docstore.mik.ua/orelly/webprog/php/ch14_03.htm
Nah it's not employer pressure, this is something I've started as an aid to learn and further development my....well, development skills. I'm in a bit of a weird position at the moment and am trying to get to the level my manager is (hence - with his 'okay' - copying the legacy environment) so that I'm able to help out on future projects. Thanks for the info dude, I had no clue 7.0 was already tossed out. 
Phan looks awesome!
HTTP/2 is not experimental in Nginx. 
&gt;CGI is a bad idea since it launches a new process from scratch for every request. mod_php is bad because &gt; &gt;* each httpd worker process needs to drag a copy of PHP around even if it only serves static files &gt;* it does not work with the thread-based httpd MPMs, only the prefork one These two alone are enough justification for me. mod_php requires you to run the prefork MPM, so you have one process per connection. You can't off your visitors a longlived KeepAlive, and your CPU will spent lots of time context swotching and preempting processes when under load. With FPM you disconnect the web connection handling from PHP processing. We normally offer 20 minutes KeepAlive (a bit excessive maybe, but more sane than the default 5 seconds in Apache). We have few enough FPM processes that we don't overload the CPU cores. Under load the FastCGI calls gets queued instead of competing for resources. We get better throughput and better latency under load. 
I have been running PHP-FPM in production on dozens of servers for years now. Before PHP 5.3 it used to be mod_php and I have experienced some of those issues first hand back then. pm.max_requests defaults to 0 (no limit) and it has not been necessary to set it on any of our systems for many years (closely monitored systems at that, with hundreds of thousands of requests per day in some cases). Given the average PHP code quality on other issues I highly doubt that that was because every PHP developer involved paid close attention to avoiding memory leaks. Why would I google links for the mod_php way of doing things when FPM works well?
20 minutes KeepAlive seems excessive. It makes it incredibly easy to do a DoS on your server. That means even at just 1 new connection per second you will have 1200 connections hanging around if someone makes full use of the KeepAlive timeout. &gt; Setting KeepAliveTimeout to a high value may cause performance problems in heavily loaded servers. The higher the timeout, the more server processes will be kept occupied waiting on connections with idle clients. From the Apache documentation. This suggests that at your 256 TCP connections you will be able to handle a maximum of about 1 connection every 5 seconds (every 1200/256 seconds).
Oh I see, my host doesn't support ubuntu 18 yet still, still waiting for that. That's great news, so ubuntu 18 will be very up-to-date indeed. 
HTTP/2 has been around since 1.9.5 (September 22, 2015) and 1.10.0 (April 26, 2016). Definitely not experimental. [Source] (https://nginx.org/en/CHANGES-1.10)
 &gt; Any pointers in the right direction here? My tip is to write an integration test that takes a populated object and renders a form, or that takes input data and populates an object: debugging through the form component will unlikely lead to something you can understand because it follows something similar to the visitor pattern to "jump" in and out of fields, and that leads to very messy debugging overall. This is neither your fault nor Symfony's: that's just how forms tend to be designed in order to allow for composable elements to be slammed together. You will have more success (or at least that's what I think and hope for) by analysing differences in the test outcomes as you tinker with the form setup. Doing this field by field can lead to incremental success and final stability :-)
I'm not running Apache. I run Nginx where 1200 idle connections is nothing. Thanks for clarifying my point, though.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
 It was meant for them to plug their array into and see how it might react. On a superficial level it should react similarly. 
Interface. We want to be able to check if an object can be tested for equality with a simple \`Object instanceof Equalisty\` 
But all objects can already be checked for equality with ==. 
But all objects can already be tested for equality with ==. This would only be to override that behaviour. Checking instanceof Equality won't give you much information. 
Indeed: * [on PHP7 by the Creator of PHP. Must watch!!! He is so awesome!](https://www.reddit.com/r/PHP/comments/8m5tu5/on_php7_by_the_creator_of_php_must_watch_he_is_so/) * [Rasmus Lerdorf talking about PHP in 2018 and PHAN](https://www.reddit.com/r/PHP/comments/8p167d/rasmus_lerdorf_talking_about_php_in_2018_and_phan/)
Usually checking for equality using == will not really help you, since it only tests for identity. If you use the interface you can specifically check whether the object implements a custom equality operation. For example you could think of the following case: You want to implement a comparator. If the object implement Equality, you know that the object will test for equality properly. If it doesn't, you'll use Reflection.
...... This reminds me of Java which has/had(?) `a.equals(b)` (programmer implements a equals method, and this tells you whether the object values match) `a == b`... (same instance check) 
^The linked tweet was tweeted by [@jwage](https://twitter.com/jwage) on Jun 13, 2018 20:30:04 UTC (59 Retweets | 99 Favorites) ------------------------------------------------- Deprecate == and != in PHP! 😎 [https://github.com/php/php-src/compare/master...Majkl578:deprecate-equals-operator](https://github.com/php/php-src/compare/master...Majkl578:deprecate-equals-operator) cc [@Majkl578](https://twitter.com/Majkl578) ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
=== is for identity, I thought? 
I'm into this.
You may start from reading this sub's rules. /r/PHP is not a support subreddit. Delete from here and ask in /r/phphelp
thanks
From I point of view, PHP should accept that pull request in order to make the language more stable and secure.
1200 idle connections at 1 connection per second. At a more reasonable 100 connections per second we are talking 120000 idle connections.
Oh fuck no. Don't remove expressive power from a language just to prevent noobs from shooting themselves in the foot. If you don't like == then use a static analyzer to detect usage and warn you. I don't want to have to type `if ($obj1 instanceof someclass &amp;&amp; $obj1-&gt;equals($obj2)){...}` just to check if two simple value objects match. Besides, what about the whole class of cases this doesn't catch, like `if (!strpos($x, $y)){...}`? You've removed a useful feature from the language in order to fail to solve a problem. The problem isn't non-strict equality, it's dynamic typing/type juggling (and it's not a problem so much as a trade-off (except in the retarded cases)). Actually while you're at it, I bet loads of noobs forget to catch exceptions diligently - best make them checked!!!
== does not test for object identity https://3v4l.org/kGj4C
I know, we but we have not had that problem. I did say 20 minutes was a bit excessive, and we might lower it if we get issues. My point still stands, Apache prefork with 256 max processes can not even handle its own default of 5 seconds KeepAlive during your kind of attack.
Exactly. Problem is not the language, problem is developers. Stop making PHP the problem. 
I prefer '1' == 1. Because '1' + 0 = 1
How reliable is this equality test ?
Have a look at [http://symfony.com/doc/4.0/frontend/encore/installation.html](http://symfony.com/doc/4.0/frontend/encore/installation.html)
It checks instance of the same class and compares properties using ==. It's reliable, just not controlled by the user in any way. 
According to this http://kb.mozillazine.org/Network.http.keep-alive.timeout Firefox times out KeepAlive connections after 115 seconds anyway, not sure about the other browsers but some sources say IE uses 60 seconds.
&gt; problem is developers So much this.
&gt; make the language more stable and secure How does it make the language itself more stable and secure?
Keep your emoji out of my feed reader :^)
I would love this change. There's literally nothing you can't solve without \`==\`. It prevents issues like this by default: * [https://3v4l.org/GT4Tk](https://3v4l.org/GT4Tk) * [https://3v4l.org/RXpfe](https://3v4l.org/RXpfe) * [https://3v4l.org/P8YPT](https://3v4l.org/P8YPT) So for anyone commenting on the developer being the problem: No, the problem is PHP in this scenario.
The problem *is* php, and all the magic that `==` does. See my comment as of why: [https://www.reddit.com/r/PHP/comments/8r08n2/deprecate\_and\_in\_php/e0nk1fl/](https://www.reddit.com/r/PHP/comments/8r08n2/deprecate_and_in_php/e0nk1fl/)
Strange, I missed it the first two go arounds. Glad I caught it on the third attempt. 
I found this funny to see "REST API" and "RPC" as separate options... Hope that most of devs understands that their's rest API is not more that JSON RPC over HTTP (and this is not something that you need to avoid).
Psalm is a bit better.
I didn't say the problem wasn't PHP, I said: &gt; The problem isn't non-strict equality, it's dynamic typing/type juggling (and it's not a problem so much as a trade-off (except in the retarded cases)). And you proceeded to list some of the retarded type-juggling. In fact every one of the three cases you listed is just a restatement of the same stupid type-juggling - coercing strings to ints for no reason. If php didn't coerce the operands of (string) == (string) into ints _just because it thinks it can_ then your problems go away. THAT is the problem, not `==`.
It's reliable for anything which doesn't use streams: class F { public $f; } $a = new F; $b = new F; var_dump($a == $b); // bool(true) var_dump($a === $b); // bool(false) $data = base64_encode('hello'); $a-&gt;f = fopen('data://text/plain;base64,'.$data, 'r'); $b-&gt;f = fopen('data://text/plain;base64,'.$data, 'r'); var_dump($a == $b); // bool(false) var_dump(fgets($a-&gt;f) == fgets($b-&gt;f)); // bool(true) Whereas in a lot of situations, you might want to check if the streams are equal. This happens a lot when I'm testing PSR-7 requests/responses. I personally don't like overriding object equality because it makes the == operator less reliable, how when I'm reading code do I know that $model overrides equals but $otherModel doesn't?
Agree, what do I do to compare value objects now? If I can't use == then every single value object has to have an equals() method to see if it's the same as another value object... no way.
That is good to hear!
Checkout Phalcon framework and Zephir lang, a shorthand way of doing pretty much just that.
Dude's a dudette 😁
It's still prob not a touch on code igniter for speed. Phalcon is the only one faster I think. I love phalcon but it's quite hard to get into. It's documentation isn't that great and its loosely connected components make it so there are more than one way of doing things.
Try meetup.com or https://php.ug/
/u/CalEvans is the expert on this. I'm sure he'd be willing and able to help you if you reach out. I think he also might have some blog posts or articles as well.
No, the developer is definitely the problem here. Unless PHP wants strict typing as well, it won't work. ``` $foo = "1"; $bar = 1; ``` Those two are not identical, but they are _equal_, and sometimes all you want to know is, if they are equal.
No, they are not equal, they have the same string representation, that's something _completely_ different. 
PHP is dynamically typed. If a developer fails to understand that from the beginning and has bugs like the ones in your examples, that is the fault of the developer for failing to understand when to use `==` vs `===`
Maybe they have the same _integer_ representation? Or the same floating point representation? Maybe PHP should continue to treat 1.00 as being equal, but not identical, to 1, as long as PHP is not a strongly typed language. Take a language like Golang; you cannot compare an integer to a float, nor a string to an int. It's an invalid comparison because of the type-checker. Naturally, you can coerce this by converting, say, `strconv.Itoa(10)` which gives you `"10"`, but PHP isn't like that and the laizzes faire nature of PHPs type system doesn't even encourage any such behaviour.
&gt; The problem isn't non-strict equality, it's dynamic typing/type juggling what is non-strict equality if not comparison with type juggling &gt; Actually while you're at it, I bet loads of noobs forget to catch exceptions diligently - best make them checked!!! ...you're trolling aren't you? :D
I'm from California, 'dude' is gender neutral.
I think deprecating == is too drastic. What we can actually do is deprecate the strangest type juggling cases, it is, just convert string to integer if they are numeric: * "0e462097431906509019562988736854" == "0e830400451993494058024219903391" * "4 little birds" == 4 * "\\n\\n\\n0.0" == ' 0.' * " " == 0
[https://github.com/sveneisenschmidt/yay](https://github.com/sveneisenschmidt/yay) Yay is a gamification engine written in PHP on top of Symfony4. It is directly exposing a web service API to bring everyone the joy of gamification and integrating any kinds of gamified features into a organisation. Yay's aim is to integrate into many landscapes by offering extension points that are flexible and easy to use with the ultimate goal to write your own tailored integration. The project originally started as a 36 hour hackathon project at trivago. In the recent months I took some time and converted it from a prototype into a full fledged tool. It is also possible to try the hosted demo: [http://yay\-demo.sloppy.zone/api/doc](http://yay-demo.sloppy.zone/api/doc) Thank you, looking forward to your feedback! \-\-\- Ready to use Docker images: \- [https://hub.docker.com/r/sveneisenschmidt/yay/](https://hub.docker.com/r/sveneisenschmidt/yay/) \- [https://hub.docker.com/r/sveneisenschmidt/yay-demo/](https://hub.docker.com/r/sveneisenschmidt/yay-demo/) (pre\-packed demo)
This is fucking stupid.
I feel like this was posted by someone who would blame php for being a bad programmer..
Your comment made me loose brain cells. (Inb4 some witty comeback about not having any yo begin with)
Hi! Step 1: Join the [ug\-admins@lists.php.net](mailto:ug-admins@lists.php.net) mailing list. Introduce yourself. That list is filled with helpful people who have literally been there, done that. Ask questions. Step 2: Find at least 1 other person who will help you organize and manage the group. The best PUGS I know of are run by committees, not loners. Step 3: Find a location. If your company doesn't have a conference room you can use, check with local co\-working spaces. We've got a great one here in West Palm Beach, FL \- US called [Palm Beach Tech](https://palmbeachtech.org/coworking/) that will let any tech meet up meet there after hours. Worst case scenario, see if you can get a room at a local pub or restaurant. It's not ideal, but it's better than nothing. Step 4: [Meetup.com](https://Meetup.com). It **IS** a necessary evil. You will need to be there so people can find you. Step 5: Write a talk. Guess what, YOU are the first speaker. Sure, you can say the first meeting is going to be organizational, but you want some kind of content there, so write up a 10 lightning talk on what you've been working on or something cool you discovered. Tell your co\-organizer that it their turn next month. :) Step 6: Go here [https://nomadphp.com/user\-group\-package/](https://nomadphp.com/user-group-package/) and request our free PUG package. It includes a coupon for a free video that you can use as your NEXT meeting. (We ask that you don't do this more than once a quarter. We want to HELP local PUGs, we don't want to BECOME the local PUG) :) From there on out it's just a matter of keeping your pipeline full of speakers. The two hardest things in running a PUG are stable venue and speakers. Try to stay consistent on date and time. (e.g. Second Tuesday of each month at 7:00 PM) If you start moving things around, people get confused and stop coming. When you get stuck See Step 1. That's your best resource for help. HTH, =C=
Yes, it _is_ comparison with type juggling, but my point is that 1. The problem is with the type juggling part, not the comparison part. 2. The problem with the type juggling part is that it is often insane. The reason why (1) is important is that php is built on dynamic typing - so deprecating == and != is a drop in the ocean. `if/while` accept truthy values, `switch` coerces types, `&lt;,&gt;, &lt;=, &gt;=` all coerce types. What logic is there to allowing all of that to coerce types, but ban it for simple equality tests? The only way to truly "fix" the issue is to kill type-juggling across the board. At which point...you really ain't using PHP any more. And the REAL real problem is (2). If you prevent the completely crazy jugging (`'0e5' == '0e6'` has NO REASON WHATSOEVER to cast operands to a float, for example, and `"\n \n 5" == 5` is way too permissive for its own good) then you keep the core language the same, you keep the advantages of a dynamically typed language (`'7' == 7` sounds useful to me in a language where user input comes in as strings), while removing the majority of the real WTFs.
My bad! /u/SaraMG is right though, I tend to just use that term for everyone, my cats included.
I thought it was funny that GraphQL and websockets were separte options since GraphQL can be used with websockets
`object_equals_object()`. Also, comparing VOs (from my experience) mostly happens inside PHPUnit tests, for which I've already submitted https://github.com/sebastianbergmann/comparator/pull/58 to fix the problem.
The problem is that type juggling can make it really difficult to understand what a piece of code is meant to do. Also comparing ints and floats is never a good idea anyways so I would say that type juggling here is actually a nightmare. I never liked type juggling, I never use type juggling or the == and != operator, I wouldn't mind if they removed it but I wouldn't seriously advocate for this PR going through. 
\&gt; "If you write really really crappy code, PHP 7.2 and PHP 7.3 even moreso, is going to run it really really fast. \[...\] it's been sort of PHP's thing forever. PHP runs crappy code, really really well. \[...\] and that's why PHP has become so popular \[...\] very few other languages can say that. \[...\] it really helps people get started with it \[...\] it's just that they don't have this huge pressure to write better code" [Source](https://youtu.be/rKXFgWP-2xQ) PHP is a loosely typed first, a strongly typed second. That's the point of PHP. In "truthy" mode, the defaults going on 20\+ years now, PHP guesses bad code's intentions and tries not to crash. In strict mode it does exactly what you asked it. Sometimes we forget that bad programmers, people starting out, don't actually know what they are asking. PHP lets them go far. Often times too far! That's PHP. Several comments in this thread call for fixing the "dumb" type\-jugling instead of removing it all together (which would also require removing it from if/while/switch to be consistent) and that's the more reasonable solution. If you want a STRICT STRONGLY typed language there are many others. I recommend C. It's what PHP is written in. 
Having had at least a handful of security issues because of `==` in well-tested code: no, that's not how it works. Wishful thinking, yes, but the language implementation is part of the problem indeed. If you think the problem is rather with the spec, send a PR to https://github.com/php/php-langspec/blob/63375439ff7e8a1be93d0ef7d3c3b4833d5e35a0/tests/expressions/equality_operators/ maybe?
This still exists in Java. Kotlin actually calls the .equals method automatically if you use ==
Fuck anyone that hasn't seen something I've already seen. Truly the lowest pieces of shit. 
&gt; I never use type juggling Playing devil's advocate here: ``` $var1 = 5; if ($var1) { echo 'IN HERE'; } $var2 = 0.0; if ($var2) { echo 'IN HERE'; } ``` Neither of those are boolean. A strongly typed language should probably crash. PHP will try to run it. What should the "correct" PHP behaviour be here? 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
1. I know it might sound kind of self\-defeating but be sure there's actually a need for it in the area you're looking at. I've seen some people start meetups in very small geographic areas and they don't gain much traction because the audience just isn't there. If you're in a smaller area think about spreading the net a little wider to reach as many folks as possible. 2. Be consistent \- I know it can be difficult when there's only one or two people that show up (or maybe just you!) but if you have consistent meetings people know what to expect and when to expect it. We have some people that just have it as a reoccurring event on their calendar to come, regardless of the topic. 3. Try to find a co\-conspirator (or two or three) \- running a meetup alone can be fun but having someone else there to act as a backup or even just to provide a different perspective on things is helpful. This isn't as important to a group just starting out but it can definitely help the group grow. 4. Don't feel like you have to have a presentation every time \- this is especially important for groups just starting out. While it's good for more established groups to have a topic and a presenter to "teach" the attendees, smaller groups can benefit from just meeting up and talking about current tech, happenings, etc. Anything to build up the relationships with other tech folks in the area. After all, that's what meetups are about :) 5. Advertising \- as with anything new, you have to get the word out about it as much as possible. If you try to rely on the "if you build it they will come" mentality, you're not going to get much traction. Try to find companies in your area that are doing web development and reach out to let them know about the meetup. Even if it's just a one time mention to their employees about it, it'll help spread the word. You can also try and find other similar meetups (like on [Meetup.com](https://Meetup.com)) in the area and reach out to their organizers to let them know about it and ask for a mention. There's plenty of other things to learn about running a meetup but a lot of those will differ based on who makes up the group and how it "feels". Don't be discouraged if the first few meetings don't explode with people. It takes time to get this stuff established.
Maybe you should change your code to fix security issues, since until today we were OK with that comparison operators. It is really so bad to see a well\-known developer trying to change language since his code is not working properly...
The code was already fixed, of course - how many others didn't do that?
So, what is the problem here if problem is fixed? For me, \`null\` is the stupidiest thing on PL design, but never tried to make it deprecated. Still has no logic to deprecate it. 
When you can't be arsed to memorize a few simple rules around dynamically typed operators so you demand the entire language change to appease you. Sounds like a child having a tantrum.
I learned from Cal, chris spruck in Atlanta and others. What /u/enygmadae and /u/calevans said is the advice I’ve followed. I’ve helped Run AtlantaPHP and NashvillePHP as well as NashAPIs and SoutheastPHP. 
Looks like a joke
No, the problem is people who doesn't learn PHP the right way. There is something called type juggling, read the manual!. The same problems happens on other languages when people complain about node.js with their type coercion. Implicit type casting is awesome, just learn how to do it the right way.
My own broad use of the term 'dude' aside, depending on who's using it and arguing the neutrality, I'll sometimes ask them exactly how many dudes they've slept with. 'cause I'm a troll.
&gt; I had no clue 7.0 was already tossed out. Technically, it's still in security mode till December (at which point it will be EOL for real). But if you're talking about moving ON to a version, one with a six month life expectancy is probably not the one to move it. :)
&gt; Neither of those are boolean. A strongly typed language should probably crash. PHP will try to run it. PHP uses type coercion to boolean in these cases; there's a list of _falsy_ values (e.g. null, "", 0, false) and anything else is auto-cast to boolean. `(bool)0.0` is `false`. It's not that PHP is _trying_ to run it, it's that there are specific rules in PHP about these things and we know them.
Crash with an error
Sometimes you run `json_decode('{"value":"2"}')` and you want to test if `value`is equal to an integer value, but `json_decode()` will cast the decoded value as string, as it's quoted. What you could do is simply use `intval()`or `(int)$val`, but PHP _does_ that for us, by allowing a non-strict equality comparison with `==`. I rarely use `==` but that doesn't mean we should remove it, or even deprecate it as it will break BC _badly_.
Right, totally makes sense. Welp, now that I have an updated environment, guess it's time to update the scripts that got FUBAR'ed. Yay.
&gt; how exactly would you integrate C backend code with PHP? Wasn't this called CGI?
Compare serialized objects? This will not work for entities where the have a unique ID though.
Any experienced developer knows that, doing the best posible implementation at first isn't always possible. Go and look the benchmarks on the versions on any language, and you're going to see the same effect. the techniques used behind the scenes on PHP, are exactly the same used in other languages, for example, packed array's PHP implemented packed array in php7 NodeJS implemented Common elements kinds in Node8 (not completely sure about the version). Yeah, the details on the implementation differ, each language has their own data structure, so, they must implement those tricks on top of their own data structure. On the other side, you have to take in account, there is a long time between php 5.6 and 7.0 (3 years and some months). PHP core developers are awesome people doing an awesome job, stop trowing shit to their job.
Some people think that the glass is half full and some think it's half empty. Some people appreciate an improvement and some take it as a reason to hate...
&gt; can be used with websockets Well... kinda... it still RPC, websockets are used only for subscriptions (read only). You could for example do the same by using centrifugo, but it will not make all of your network interactions over websockets. But yes, you could use websockets as transport layer for graphql. But I just don't see any profit from that (http for writes and websockets for reads is preferred in most of the cases)
Look at the changes PHP is making as a language. Look at best practices in the PHP community. Look at modern PHP tooling. If you don't want strong/strict typing, you might be the one who ends up not using PHP anymore.
I've been running [UpstatePHP](https://twitter.com/upstatephp) for 4+ years now. Everything I learned and wish I knew back then I put on "paper" a couple of years ago here - https://www.stevenwadejr.com/2016/03/03/starting-a-user-group/
I wish I could downvote this 9000 times. 
From my experience, I've noticed strictly typed programming languages are harder to use than the dynamically typed ones. But the mentioned difficulty comes from the time you have to spend thinking about how are you going to design your code, so everything is stable. The comparison of two variables of different types is not secure, because the dynamic conversion, the language performs, can lead to mistakes and malfunction. The `==` comparison is already considered as a bad practice in JavaScript community, and, as I think, should be viewed in the same way in all the dynamic typed programming languages. On the other hand, PHP has a perfect data type conversion that can be used when checking the equality of two variables of different types.
hi steven
What is the difference between `==` and `===`? I always thought it was `==` Means `x = x` and `===` is `x IS x, and nothing else.`
Im using "Smallblog" a lot. Doesnt fit all needs out of the box but it doenst look like shit after installing it. 
Slightly OT, but if you haven't heard of, check out [http://gwan.com/](http://gwan.com/) which allows you to write backend in pure C. Pretty interesting but I'd say only for fun/experimental.
Divi and Divi Builder aren't that bad.. takes some CSS work, but for drag and drop and easy editing, it's not bad.. 
I have this book. It's well written and very informative. I second the recommendation.
I'd look into ThemeForest [https://themeforest.net/](https://themeforest.net/)
I used to feel this way too. But then I started learning how to make my own themes. Still a lot to learn but the freedom to make your own theme is nice.
I start with BlankSlate, which is literally just the default template files with the bare minimum Wordpress loops and functions, and zero css. Then it really is my site. I’ve worked with devs who like bootstrap and start with b4st, which is pretty good. 
Try Sage by Roots, it's an excellent starter theme that uses a lot of tools for fast development (Blade for views, webpack, etc) Combined with ACF (expecially the Pro version) it's powerful, and after a little time needed to understand how them works, you'll find that is faster to create a brand new theme than to buy a premium one and customize it. https://roots.io/sage/ https://www.advancedcustomfields.com/ 
Fantastic. Thanks for sharing this.
How are you coding the designs on your Laravel platforms? Because you can do the same thing with a custom theme in Wordpress and it doesn’t really take any longer once you have a bit of experience. I only recently got my feelings about Wordpress down from “pure hatred” to “intense dislike but it pays the bills”. Using someone else’s theme is almost always going to be a headache in my experience.
`===` compares type as well as value. Using `==`, you can compare just value, and the type may be cast in order to perform the comparison. For instance: `1 == true` `'' == false` `1 == "1"` With the `==` operator, these all evaluate to true. The `==` operator also lets you compare two objects that are of the same type and value, but different instances: class Foo { private $bar; public function __construct($bar) { $this-&gt;bar = $bar; } } $a = new Foo(2); $b = new Foo(2); $c = new Foo(4); var_dump($a == $b); // true var_dump($a == $c); // false
We've done this in the past. It's my preferred method, but due to the extra time in building it custom it doesn't work well with my clients that are on a tight budget. I'll bet with some thought, I could find a way to speed it up though...
Ohh...I didn't know about BlankSlate. I'll have to look into that. This may be a great option.
I really need to give this a try. I'm sure the code is a mess, but if it's well supported and I can get a site done in less time, and it makes the customer happy, it could be a good fit. The longer I run my business the more I realize that sometimes cutting corners isn't so bad (caveat...as long as it's not at the customer's expense/detriment). I'll bet most customers' needs would be well met by a builder like Divi.
Kind of a gamble most of the time IMO. I'm sure there are some great, clean, well coded themes there, just hard to sort through all the others. Do you have a few that you've used and been happy with?
I completely agree, I would love to build beautiful code, but it will take me 10 times longer and most expensive for the client.. Here's one that I'm working on at the moment in Divi (still in dev): https://dropspace.io/business/
Well...shit. I know what I'm wasting my time on this weekend. This looks very interesting. Blade for views and webpack would be game changing.
&gt; I only recently got my feelings about Wordpress down from “pure hatred” to “intense dislike but it pays the bills”. Using someone else’s theme is almost always going to be a headache in my experience. You are definitely right. We have the skills to completely write custom themes, and we've done plenty of that. It's just that if I could shave a few hours off each project in this area by standardizing some of it or finding a framework that's good for quickly starting, it would allow me to chase jobs more aggressively. I'm probably not going to find a perfect solution though. :( 
Alternatively, forget WordPress and use a Laravel based CMS. I’d strongly recommend Statamic.
Looks good. Any of my clients would be thrilled with something like this. How does pricing work for Divi? I join Elegant Themes for $249 (one time) and then I can use their themes on any site for my clients? Probably worth it as I'd easily make that back even with just one job. How is long term maintenance with Divi? Are my clients going to be screwed in a few years unless my team keeps everything up to date? Is it more than just running some updates from time to time?
Yes, I do the one time fee as well.. and just tacked it onto my clients quote as a required tech option. I've only been using it for a year or so, but has good reviews and seems solid for regular updates. Even if they fall off the planet, no sites are going to break as there's no hooks into their environment, everything is installed locally.. 
&gt;The same problems happens on other languages when people complain about node.js with their type coercion. And people bitch and moan about `==` vs `===` in javascript to, and point out that most other languages - even dynamically typed ones - in common usage don't do the type mangling of `==` in either PHP or javascript. &gt;Implicit type casting is awesome, just learn how to do it the right way. I hope you never have one of the soul-ripping and mind-numbing extended experiences that can come of bugs due to 'fun' implicit type casts. But I think a lot of people will agree with this statement: Sometimes the implicit casts can save you some characters because you can rely on PHP's rules to perform all the looser equality checks the right way... but unless you know *all* the ins and outs of PHP's implicit casting and can absolutely guarantee your inputs will never have an undesired cast then you need to use a stricter check anyway. $x = md5($thing_one); $y = md5($thing_two); if ($x == $y) { ... } if you don't immediately see why this code will fail miserably in some fringe but hardly impossible situations without issuing a notice or warning: maybe reconsider using `==`.
Cool. I'm going to give it a shot. 
I LOVE Statamic. We use it from time to time. Sometimes the clients insist on WordPress though. I wish my agency were getting enough jobs to just refer WP jobs somewhere else, but that's not the case just yet.
Another tool in the Roots toolkit is bedrock. It’ll give you the ability to use composer and dotenv files.
You can also contact them and ask for a 20&amp;#37; discount code, as there's usually some floating around. I did, and that converted me into buying it.. 
Dude, that's terrible idea.
Tell this to authors of some ORM libraries ;).
Bad idea as every component of your application can simply change the $connection property at any time and simply will breake your entire system. Use proper dependency injection instead. 
We have some 'legacy' auto-scaling servers (each last about 24 hours) - ALL the code (including vendor/) is in git - so there's only one dependency for deployment (github - which we could work around if it's unavailable). Elsewhere, for kubernetes/docker containers, all files (inc. vendor/) are in the container image - so again - only one dependency for deployment (the container repo). If a package was unavailable at build time then the build will fail and the image would never get pushed out. Long lived 'more traditional' web servers have **composer.lock** in git, and we do a 'composer install' when rolling out an update. If something's messed up we can at least go back to a known commit, run '`composer install`' and hopefully everything will work :)
Let's say you want to put a string into the database like this: `I'm ready to code.` But the query is: INSERT INTO `comments` SET `Comment`='I\'m ready to code.' The reason is you are surrounding the string with a single quote but your text also contains a single quote. So you must "escape" it. `mysql_real_escape_string` adds the slash for you. MySQL has other things in it besides a single quote which can be construed by MySQL as a "control character". These characters get escaped for you. As per the documentation these characters are: `\x00, \n, \r, \, ', " and \x1a`
&gt;INSERT INTO \`comments\` SET \`Comment\`='I\\'m ready to code.' i want to know how that can relate to sql injection?
Why would you want to open multiple connections to the database though?
If you are working with data that comes from outside of your application (ie a form that any person can fill out on the website) then someone can put in something that would change your query if you don't escape it. So let's say you have a form submission that submits a variable $_POST['comment'] Now you want to build your query to put this data into a database. $query = "INSERT INTO `comments` SET `Comment`='{$_POST['comment']}'"; This is not escaped. DO NOT DO THIS. It is dangerous. If someone writes into the comment form something like this: some text'; DROP table comments; SELECT ' They will have effectively written this query: INSERT INTO `comments` SET `Comment`='some text'; DROP table comments; SELECT '' Which will delete the comments table. Also what if they want to put code in the comment? If you don't escape it the code in the comment might break your query. Just a simple example. https://xkcd.com/327/
4 more to go
Try to look for local it-groups in social networks. It can be a group on some general topic, but inside you can search for people of similar interests or write a post. 
You're blatantly mischaracterizing my argument to fit your own narrative of being attacked. I'm not sure why you like being a victim so much, but I'm not going to roleplay your attacker, bud. It doesn't suit me.
Seeing Divi mentioned here I would also like to point you to Elementor with their starter hello theme. Bought life time subscription of Divi but later found out Elementor was better for my needs. Currently running Divi (child theme) with WooCommerce and not quite happy with it. Elementor on the other hand works with any theme that respects Wordpress coding standards. But you would only need their starter theme and do the rest in a really short time with builder. Recently they started to support custom header &amp; footer, archive and single page features. Also upcoming version is gonna be able to build WooCommerce. This is just my personal experience/preference.
Completely agree with you, if you don't know the rules of loose comparison, don't use it. It's really simple, but, why you want to take the knives away from us? (https://rubyonrails.org/doctrine/#provide-sharp-knives) I admit the behavior could be unexpected when you see PHP from the eyes of another languages, but, doesn't that happens in any language switch?. How often I have seen people struggling with javascript, it's awesome how they refuse to accept that they do not know javascript. Okay so, let's take a look at your example, if you read the comparison page of the PHP docs: &gt; &gt; If you compare a number with a string or the comparison involves numerical strings, then *each string is converted to a number and the comparison performed numerically*. These rules also apply to the switch statement. The type conversion does not take place when the comparison is === or !== as this involves comparing the type as well as the value. Also, you can find this: "TRUE if $a is equal to $b after type juggling.". To that point one should be kind of warned about using loose comparison on random strings. If you take a look at the string type docs page, after the explanation on how does string are converted to numbers, you see this example: $foo = 1 + "-1.3e3"; // $foo is float (-1299) If you sum the knowledge from both pages, it should be pretty clear why you can't use loose comparison between two random strings. It's strange, even though I don't know why tutorials don't warn people about this, yeah, you should use strict comparison always. Just use loose comparison when you want to use type juggling. I have had a lot of those "soul-ripping and mind-numbing extended experiences" in many languages. It's not the language fault, it been always my fault for not properly studying the language and don't understanding how the internals works. So, what I do, when some time has pass (1 or 2 years) I read my main (and secondary) language docs. So, I have dedicated some day's of my year to read the PHP official docs completely like 3 times. Of course I forgot things, but, when something "magic" happens, most of the time I can recall something I have read here. So, what I see is people blaming the language just because you haven't learned it well. They just hate loose comparison because they see a sharp knife they don't use. I won't say I love this feature, I prefer javascript coercion, where the type convertion are a lot more clear and sorted than PHP's rules. I have loose comparison way more on JS than I have done on PHP. So, I'm not sure if people is arguing against loose comparison or type juggling, the problem seems to be type juggling, so, maybe we should change type juggling rules to make them more, understandable?. Or maybe we should take object inheritance from the language too and force all developers to use composition.
`==` compares two operands using type juggling (it could convert the types acording to some PHP rules) `===`compares the type and value of the operands. So, two variables can have the same value, but be of different type, like: `'0' == 0; // true`, but at the same time, they don't are of the same type `'0' === 0; //false`. in the first example PHP try to convert the `'0'`string to a number, so, it really ends up comparing `0 == 0`. On the second example PHP compare the type and the value of both operands, as the first is an integer and the second is a number, they're not equal.
This was also very helpful to me, thanks so much. 
https://en.wikipedia.org/wiki/Escape_character
**Escape character** In computing and telecommunication, an escape character is a character which invokes an alternative interpretation on subsequent characters in a character sequence. An escape character is a particular case of metacharacters. Generally, the judgment of whether something is an escape character or not depends on context. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
In my area there are a lot of Pandera restuarants. They have free wifi and will allow user groups to meet at specific scheduled times if we let them know in advance. They tend to have side rooms also. They get a little traffic as users will mostly always buy a soup or a drink or coffee or something during the 2hrs we are there. so win win. 
Just adding to this comment. I have a 4 year old app, that I wrote, running CodeIgniter (will be rewritten/refactored out of CI). The biggest gripe I have with CodeIgniter, looking back, was it did not teach nor, at the time, even expect you to really understand OOP. The God object(s), or in Laravel facades, allow you, and in some cases, force you to write bad code (not so much force in Laravel - which was my next stepping stone), unless you know what you are doing. I'll have to go back and look at my own app, but once I learned better habits I feel like I even went back and wrote my own hooks to accept middleware - but it didn't really have the concept at the time. From my own experience I felt like CI was a good introduction to OOP, but you have to want to grow and once you do you'll never look back at CI.
What!? That's incredible! 
What didn't you like about Divi? How did Elementor solve those problems? I have an immediate need for a theme that works with Woocommerce, so I may have to hold on Elementor for that project, but it sounds really interesting. 
&gt; The reason I even asked was primarily to open the door for discussion into why the cases where you find this handy are actually just cases where you've chosen the wrong data structure for the job. You come off as though you would always be taking the stance that, whoever you’re discussing this with, has in-fact *actually* chosen the wrong data structure. Thats not a discussion. Thats -splaining. You didn’t say anything about opening a discussion to determine whether or not the new functions would be a better or worse way to solve a particular problem. To me, you believe that there is no problem with the language and no benefits will come from these functions. Anyone who thinks otherwise is wrong and has chosen poorly in their design, hard stop. You might not have meant it, but that’s how your intent of a “discussion” comes off to me. Hope this clarifies.
Are you saying we should use serialization as an equality indicator? I don't think I like that. You can't bake logic into the serialized data either. 
You can search for some general designs that interest you like "real estate" then look at the highest rated ones then maybe take a peak at the front-end code, if the HTML, custom CSS/JS look reasonable it'll probably be a good theme. 
``` class Jerk { public function __construct() { throw new Exception(); } } try { $result = new Jerk(); } catch (Exception $e) { var_dump($result); } ``` ;-)
[https://github.com/connerbw/parsedownparty](https://github.com/connerbw/parsedownparty) Markdown editing for WordPress. I wrote this because 1) I wanted to use Markdown in WordPress and 2) [I wanted to demonstrate](http://kizu514.com/blog/namespaces-and-objects/) that in 2018 you could write a WordPress Plugin with namespaces, Composer support, unit tests, 90&amp;#37; code coverage, and Travis-CI.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt;why you want to take the knives away from us? I understand the desire for a 'sharp knife', but 'sharp' in this metaphor not only means potentially dangerous to the user, but also potentially much more useful. Is the type inference really that useful? How much would `$x == $y` really provide for us as compared to the scarcely-longer and easier to read `(float)$x === (float)$y` I'd say in this case a much better analogy is that on one hand you have a drawer of knives containing a paring knife, bread knife, a cleaver and what not, and on the on the other you have a swiss-army knife will all the knives combined but unless you treat it very delicately sometimes the spring gets overactive and swings out a knife you didn't want, potentially right into your own hand. Both situations offer the same features. &gt; I have had a lot of those "soul-ripping and mind-numbing extended experiences" in many languages. It's not the language fault, it been always my fault for not properly studying the language and don't understanding how the internals works. Given enough study and comprehension you could certainly write programs in malbolge and you'd know all bugs in your program were really a failure on your part to exercise that knowledge, so why not do that? Because things that are hard to understand and/or use correctly aren't preferable. Certainly you *can* use malbolge correctly, but why would you ever bother with that nonsense when you can instead use a language with as much or more capacity to express what you want while simultaneously being easy to use correctly? The goal of deprecating `==` and `!=` would be to take away a component of PHP that's harder to use correctly and reasonably than alternatives that are just as good (if not arguably better now that you're making the expected type conversions explicit) and just as functional. 
Wow, very helpful answer! Out of curiosity, what is evil about Meetup?
Why should I?
As a system guy, Drupal competes against the incumbent "yum-update-cron". Keeping a few drupal housepets updates is a manual process for me. 2% of my herd require 50 times the work. That may be a factor.
You're telling me I'm wrong for the only reason "because you're wrong", but hey, at least you're not attacking me? Sure dude!
Because there are many types of databases and some are useful in one case scenario and different databases in other case scenario. Lets say you have e-commerce webpage containing tons of products, you might use mysql to keep user data and payment system and elastic search to provide full text search functionallity for your clients, you can also use redis to provide some caching layer.
It is never that easy in the real life. Database interactions are not limited to simple lookups and joins. Any real world application would require complex SQL queries not covered by a mapper. That aside, ORM is not a PDO wrapper technically, it's another kind of software.
You can make it just a single method, query(), but make it return PDOStatement. it will make your return values much more flexible than blunt fetchAll(). [See example](https://phpdelusions.net/pdo/pdo_wrapper#samples)
In my opinion in such situations an explicit cast to integers is better for 2 reasons. 1. It's easier to read for other developers 2. You are more explicitly testing what's going on. If the api for some reason starts retiring true instead of a number and you are == comparing it to 1 you could get all sorts of weird errors 
&gt; Having had at least a handful of security issues because of == in well-tested code You can't blame that on PHP: If you have security sensitive code and don't take all measures to make sure it operates as expected (like using the correct operators), that's nothing whatever to do with PHP ... We could remove those operators (in a dream world) and you could still make mistakes in security sensitive code ... it is *your* mistake, own it ...
&gt;Because there are many types of databases and some are useful in one case scenario and different databases in other case scenarios. There are several needs to different connections to the same DB engine also, say, reads to one connection and writes to another, or just plain logging querys.
What is Online Business Directory Software Script? ===================================================== Online Business Directory Software Script is one of the best Open source Business Listing script written in Php, MySQL and Laravel Php Framework. It is very easy to use and its powerful Administration control panel makes it more flexible, it provides an easy way to search Business information by Search Keyword and Location. As an Administrator, it's very easy to manage and control without any technical knowledge. With expressive, elegant syntax, it provides accessible, Powerful &amp; Extensible application System. It’s quick and easy to deploy. No clutter, no bloat, no complex dependencies. Fully Open Source Php Application, built using Laravel Framework. Centralized administration makes site management fast and easy, without any technical knowledge for Administrator. Why use it? ==================== Our Online Business Directory Software Script is easy to manage, either for normal user or administrator without knowledge of codding. Unlike traditional business listings, you are not limited to put the only business name, address and telephone no, you can add a logo, images, website links, working hours, YouTube videos etc. This Yellow Pages PHP Script increases your Revenue massively, it provides users the ability to accrue recurring revenue from advertiser and Google Adsense. In the Features Section, we have given all the detail modules that we have developed in last few years. Who can use it and how? ========================== Anybody can use it, whether you are in Profession or Housewife or Student or an unemployed looking to start your own Web Business, you don't need to have the technical knowledge to manage the Site. Our expert team will help you with Installation and other Administration processes. And whenever you need our expert help, feel free to contact us. Are not you Technical? ========================= Don't Worry! We are here to help you. We do Free Installation service for you. In that case, you have to provide us the Domain and Cpanel/MySQL database detail only, our expert team will do the rest. Moreover, we will send you an Installation document along with the script, by following the steps you can do it your self. If you need any help regarding installation you can Contact Us anytime. If you are thinking to start your own Yellow Pages Business Directory portal, then you are in right place. Our Online Business Directory Software Script is very simple, powerful and flexible, it's an enterprise level Business Directory solution. It provides all the necessary features which need for running a successful website like Listing Management, Flexible Listing Plan, SEO Friendly URLs, Google Map, powerful Banner management, eye catchy template and many more. So it is really easy to start your own successful Business directory website. Best price, we guarantee it. You'll always get the best price—we guarantee it. You will be confident that we’ll never be beaten on price. Do you Need Custom work? ============================= We coded the application, by keeping all the important features needs while user visiting or surfing on your Site. However, if you feel to have any changes in the code, or like to have some new features or modules, we will be glad to do it for you. Please discuss with us, We would love to hear your thoughts. Life Cycle: ================== We have started development of Online Business Directory Software Script in late 2010 in CodeIgniter Php Framework, and in 2013 we rewrite the whole code in Laravel Framework. And in the last few years, we have been updating it time to time in the different module. Now it becomes 100 times faster, secure and robust than our previous releases. WHY USE IT =========== Anybody can use it, whether you are in Profession or Housewife or Student or an unemployed looking to start your own Web Business, you don't need to have the technical knowledge to manage the Site. Our expert team will help you on Installation and other Administration processes. And whenever you need our expert help, feel free to contact us.
You Chinese,科学上网来的
I do *OWN* those mistakes. The security advisories don't contain "PHP is shit", but a description of the bug and the fix. What I'm saying is that I'm pretty much the least pragmatic PHP developer you can find around, and I test everything centimeter per centimeter. This kind of stuff still manages to act as a tripwire even for me. I take every counter-measure I can: * All code is peer reviewed * Required tests and requirement to have them pass. Cronjobs to verify that upgrades in dependencies don't break things. * Strict BC compliance policies (and now even tooling for that) * Both e2e and unit tests * Additional code without test additions is rejected upfront * Static analysis * Mutation testing, lately * Starting last year, simply disallowing a lot of PHP functionality that makes no sense (`empty()`, `==`, implicit casts, backtics, etc) If somebody that still goes these lengths still manages to trip over language potholes (and nobody notices until the security issue is hit), then there is a problem, because 95% of the ecosystem doesn't even go to the testing bit.
I did quite a lot customisations and before I bought Divi I thought I could do it with the builder but I was mistaken. But when I tried Elementor I found out it was more suited with my workflow. Then came their header and footer support and announced for full WooCommerce support soon. Divi pushes a lot of updates but those features looks like candy coat for me. I want more streamlined workflow and for me Elementor provides that. And it’s quite fast. I suggest you to take a look at their blog and compare features with each other. But with WooCommerce support coming soon I wont be going with Divi. 
&gt; All code is peer reviewed &gt; The root cause of the problem here can only be that you are using the *wrong operator*, the cause of that problem is that programmer who wrote the code wrong, and the first counter measure should have caught it, shouldn't it ? You're not making much sense, I'm not attacking you, or your ability, that would be stupid ... we know each other ... I just don't see how you can blame your mistakes on PHP, they are different operators, and you simply used the wrong one ...
This is some of the most incoherent spam I have ever seen 
Oh, I agree with the mistake being `==` over `===`: that was also the fix. Now what I miss is the use-cases where `==` makes any sense at all. Given the quirks linked in https://github.com/sebastianbergmann/comparator/pull/58, I don't think `==` is suited for anything at all, really. Even value object comparison can only be performed with a recursive function that uses `===`, and not `==`, according to these quirks. Hence the proposed deprecation.
True.
Go with Laravel, or go with Python, it will help you to get good job with better salary. http://www.scriptbazar.com
Hum, interesting. Apparently [FastMail found out](https://fastmail.blog/2011/06/28/http-keep-alive-connection-timeouts/) about this too. Chrome seems to keep the connection going, though!
How bout make == and != behave like === and !== when strict types are declared?
&gt; without knowledge of codding Sounds like this is for me! Seriously....remove this spam please.
Foremost in my mind when considering deprecation of that operator isn't how it works, or should work, but that it *does* work (even if we think it doesn't work correctly, or in a useful way), and we'll break so much code by removing it, that it's not a thing we can seriously discuss, even if we left it deprecated for 10 years, it wouldn't be long enough ... Nobody expects a programming language that has no support for `==`. What you (we) want is for `==`, and `===` to work in some common-sense predictable way, but you (we) must realise the impracticality of changing the semantics of or removing either ... We can seriously discuss what operators should be used, and since you agree that the wrong ones were used, you must agree that it's not PHP at fault, however warty it may be ... my only point is that it's your mistake, the way those operators work is known, documented, they have a different purpose (even if it's stupid), you can't blame PHP for your using the wrong one.
For all the hateful comments: Jeez, grow up, stop being an ass just because you disagree! Also, according to the shared logic here, you need to have knowledge to not do it wrong. This is the wrong approach! This means that by default, if you don't have the knowledge to do it right, you'll end up making terrible bugs, simply because you didn't know how it was done the right way. When developing, it should be hard to do things wrong, it should be intuitive and not make `===` a requirement to know. Other languages use `==` by default, which is what php does with `===`. New php developers don't know about the magic behind `==`, they shouldn't \_have\_ to know about this magic. Imagine being new to php, you'll see that the result of `'0' == '0.0'` and you waste hours trying to find out why this returns true, or 2 md5 hashes that are equal according to php, while their values are different. How can you possibly think this is a good thing for php? If you're used to using `==` in pretty much any sane comparison, then php's behavior is buggy and inconsistent due to said magic. I know my opinion is unpopular, but that doesn't make it wrong from a DX perspective,
Thank you for taking the time to provide this information, it's really useful :) 
Thanks for sharing that article. That is an excellent resource. I also hadn't heard of fiveminutegeekshow. Looks like I'll be catching up with some of those :) 
Chrome's TCP Keepalive make sense too. TCP itself has a 120 timeout if no packages are seen on a connection.
Sorry Joe, you are getting repetitive with &gt; you can't blame PHP for your using the wrong one. This is not useful, and I do indeed not use `==` in my codebases anymore. I just told you there's no scenario where `==` works as expected in the totality of its supported parameters. Deprecation is the most sensible approach, compared to: * changing it (huge hidden BC break) * removing it (even worse) &gt; Nobody expects a programming language that has no support for `==` I expect something that works like `==`, not something that does arbitrary magic and dangerous juggling. A language with `===` and without this version of `==` is a better language anyway.
&gt; 195 people from the "symfony slack community" surveyed not really a representative group imho. too small and homogeneous too draw any conclusions.
delete
Oh good. So they didn't repeat apache's mistake.
"Changing behaviour of existing functionality is a massive BC break: don't ever do it" - @Ocramius [https://github.com/php/php-src/compare/master...Majkl578:deprecate-equals-operator#commitcomment-29354643](https://github.com/php/php-src/compare/master...Majkl578:deprecate-equals-operator#commitcomment-29354643)
I report stuff like this all the time, they never remove it
I'm posting this because the news for GitHub users leaving for GitLab shot to the top in this sub, and yet the aftermath is not acknowledged. Do we just want the quick rush of the panic and ignore the aftermath, or we want to know what actually happened and learn from it?
Actually it's not an exodus for all of them. Some of these "moves" are only project duplication, especially since there are some rating systems based on the number of github stars (packagist, I'm looking at you :)
I absolutely agree, though this is certainly not how it was presented around. 
Went with bitbucket
Sure. /s
I'm sorry, but that document doesn't contain essential syntax and functions for new PHP devs. Strip away 90% of the content and it might be meaningful for someone. (I have no idea who, the functions don't even have documented arguments..)
Ah, statistics. Those graphs, to me, look like everyone who wanted to move as part of a knee-jerk reaction, did so in the first couple of days. So, there may well have been an exodus (peaking at just under 8k repos in one hour). Whether or not it counts as 'mass' is another matter. They also don't show the overall numbers before and after, which is a pain. I think a better chart would be number of active repositories on the service against an increasing dateline. I expect there would have been a sharp increase around the GitHub/MS announcement, followed by a more-than-normal increase after the initial spike as slower-moving individuals and entities moved their repos over. Ten days on, you might be seeing a more normal 'natural' increase in the base number that more closely resembled the increase prior to the announcement. However, depending on the overall number of repos, this might not have been a particularly large spike, so on a chart like that, it may have shown up as quite a small fluctuation if there are already multiple-millions of repositories on the platform.
&gt; They also don't show the overall numbers before and after, which is a pain. I can't cite the GitLab numbers, but GitHub has around 60 million repos, and considering GitLab seems to have largest mindshare among GitHub competitors (I think), we can at most double these numbers to account for people moving to BitBucket etc. It's still not a significant enough number to say it'd affect GitHub. By rough math, they maybe lost something like 0.1 - 0.2% of their users, but new users are signing up all the time, so...
I agree with the other comment. When one tries to cover too wide a topic, the result is ultimately a bullshit. &gt; Variable Scope function myFunction() { global $a, $b; $b = $a - $b; } WAT? this is all you can say on the variable scope? &gt; empty() Checks whether a variable is empty or not this definition is outright wrong. In PHP, one don't need any functions to test whether a variable is empty or not. &gt; addslashes() Returns a string with backslashes in front of characters that need to be escaped WAT?!! need by whom? for what? What kind of a cheatsheet it is if raises questions instead of answering them? &gt; You can use the @ sign to prevent expressions from generating error messages. This is often important for security reasons, for example to keep confidential information safe. This is blatant, utter and complete bullshit. [@ should never be used for such a purpose](https://phpdelusions.net/top#zero_error_reporting) &gt; Form Security PHP offers tools to thwart those attacks, namely: htmlspecialchars() trim() stripslashes() ROFLMAO. Which security threat is "thwarted" by trim()? stripslashes? &gt; PHP is able to define required fields (you can’t submit the form without filling them out), Come on, I can't read this bullshit any further. Learn the difference between HTML and PHP. PHP cannot control what you can do in your browser. 
Of the two of us, you're the only one who's claimed that you're wrong. I'll defer to your wisdom on this one.
I think most people are still waiting to see what happens - Github does not belong to Microsoft yet, the whole process will take quite a while. More people might switch when the "takeover" happens, and when they had time to think about an alternative until then, because right now Github is exactly the same company as 2 months ago. And for many projects it probably does not matter if Microsoft owns Github - I mainly fear that Microsoft screws up everything, as they have with a lot of things.
I understand that these types of posts are a response to people shitting on PHP, but the popularity of a language does not excuse its awful design. I’ve written software in the language for 10 years and have learned a lot about its quirks. It is bad, but it is slowly improving.
I assume you are kinda new with programming/PHP and you wrote this Cheatsheet. Most of us fell in the common pitfall of believing that we are able to write something useful for other devs after spending a relatively short amount of time with a language. I know your intentions are good and I'm not trying to discourage you, but it takes several years to master a language and be able to write really useful documents for other devs. Internet in general is full of people spreading bad practices and is hard to notice with articles to avoid without enough experience in the field. My advice for you is keep learning, contribute to some project where other people more experienced can review your code and little by little become a better developer.
Sounds right up my alley. I'll give it a look.
I did not write it actually. Just found and wanted to share.
That's not just my stance; it's the fact of the matter. A feature like what is being proposed seems superficially useful because it's quite common to choose the wrong data structure for a particular task or requirement. The correct way to solve the problem is not to introduce new functions to the language; it's for developers to examine _why_ they think they need such functions, and then fix the underlying data structure design that caused them to think that they needed such functionality. Developers love to think that they can always fall back on "code correctness is subjective". To a large degree, that's true. Programming is nothing if not a never-ending stream of trade-offs, and what's correct for a particular person/team/application/context might be incorrect for another. However, there is actually a very large percentage of code to be written whose correctness can be determined objectively. And this is one of those scenarios. There is no example of a scenario where this functionality would be useful to you, where you have not also chosen an objectively incorrect data structure for your requirements. And this is ultimately the reason why people haven't been dropping any examples here. None exist. What _does_ exist, though, is a plethora of developers whose code is utterly sacrosanct to themselves, and anyone who would dare suggest that they had made a suboptimal choice is clearly attacking them on a personal level.
https://github.com/connerbw/parsedownparty Markdown editing for WordPress. I made this WordPress plugin because 1) I wanted to use Markdown in WordPress and 2) (I wanted to demonstrate)[http://kizu514.com/blog/namespaces-and-objects/] that you can write a WP plugin with namespaces, Composer support, unit tests, 90% code coverage, and Travis-CI.
I didn't mean it as an argument but as a mere quip, but yeah, people would take it way too seriously. Cheers :)
Hating on PHP because it has too many functions is like hating on Chinese because, instead of 26 letters that you can combine to write anything, functional literacy requires a knowledge of between three and four thousand characters and that's just sloppy language design!
&gt; I understand that these types of posts are a response to people shitting on PHP, but the popularity of a language does not excuse its awful design I'd argue to an extent that it does actually. PHP's design may be still lacking in some areas, but it's large usage is it's real strength. From the large active community in terms of good libraries and frameworks to the fact that it ease easier to find PHP Developers than developers of other languages. It's popularity has definitely made it a viable choice, despite its shortcomings
/u/ventagepoint Do you have a link to where they've announced they are going to fully support Woocommerce?
My god I second this. I inherited a codebase that had these @ symbols in front of multiple statements. No wonder why it took me quite a bit of time to figure out why things broke and where. It needs to be abolished as try/catch can make your life so much easier. 
Here it is. They talk about it at the end of the post. But good read though. I like their business approach. https://elementor.com/2nd-year-journey/
&gt; Such a function is a reason to fire a programmer immediately Acting this petty, one would run out of programmers really quick &gt; empty() Checks whether a variable is empty or not &gt; &gt; this definition is outright wrong Look up the definition of word definition &gt; Needed by whom? For what? What kind of a cheat sheet it is if raises questions instead of answering them? A cheat sheet is made for aiding memory to recollect things, not for *explaining* basics. &gt; You can use the @ sign to prevent expressions from generating error messages. This is often important for security reasons, for example to keep confidential information safe. &gt; &gt; This is blatant, utter and complete bullshit. Nope, it is the blatant truth. Whether should you use it or not, is another point. &gt; PHP cannot control what you can do in a browser. Apart from the fact that PHP was made to create web pages, which define the way of what user can or can't do in a browser.
[https://github.com/darsyn/ip](https://github.com/darsyn/ip) ([Packagist](https://packagist.org/packages/darsyn/ip)). Just released a major version (`4.0.0`) for my IP value-object library, which is a massive overhaul internally and loads of new features. It's a pretty simple library and I've tried to write easy-to-understand documentation, but always looking for ways to improve - critique, suggestions, praise, criticism and general roasting all welcome!
I think I'd prefer more a syntax like switch(strict $var){}.. Either every case is strict or not
Personally I love PHP. Write it well and it looks lovely. 
When did internals get a redesign?
Agreed. I feel that Sarah's proposal changes the syntax too much in a way that makes it too different from other languages, and even a bit inconsistent. I can certainly see why someone might disagree and be in favor of her proposal though. Having said that I like yours much better. 
You: &gt; where you've chosen the wrong data structure Bye bye now
The "you" in that comment was blatantly a figure of speech. Also, there's an enormous difference between telling someone they're wrong and telling them that they've chosen the wrong data structure. Would you also fly off the handle if someone told you that you chose the wrong outfit based on the temperature outside? Get a grip, bud.
Has anyone tried this? Would love to hear about it.
I really like this.
I actually quite agree with the mere quip. PHP was originally a template engine made to look like Perl since it was the new hot topic for the time but keeping its roots in C. It grew into a language naturally and people demanded it to be object oriented so they adopted the paradigms popular from the next hot topic at the time: Java.
having written switch (true) { case $x === "5": ... once, I can see the appeal of having a strict switch. Looking through the linked thread, of all the ideas, `switch ($foo) use (operator)` was the most intriguing to me, but honestly using `&gt;=` (or `!=`!) and such would violate least surprise after this many decades and probably not make good code.
Nice idea. Nice site. But I clicked to create a new PHP project and was only given the option of 5.5.9.
I'm also curious what is about to happen. Three largest Microsoft acquisitions so far? * LinkedIn - neutral here, doesn't seem screwed to me (it's just as stupid as before, but I'm not using it regullary). * Skype - yeah, I guess it would work out better without Microsoft trying to integrate it everywhere (wrong), it would probably be a serious competitor of Messenger or WhatsUp. * Nokia - serious fuckup here. They also bought Mojang or Xamarin and afaik, nothing wrong happened here. HotMail (now OutLook) - seems fine to me, or works as expected to me, at least. That being said, Microsoft doesn't seem to destroy everything, but GitHub is something very different. I hope they'll just leave it and do the integration things in their current products (like Azure), thus potentially make more devs to join GitHub. From open-source perspective, Microsoft does what it can to show they're not evil anymore, last years. Fingers crossed.
`strict switch` with override on case level: switch ($a) strict case 0: case 2: strict switch ($a) case 0: derp case 2: 
Can we get a screenshot? Graph isn't loading for me.
It seems it's down for everyone, including me. [So please accept this artist's rendition...](https://imgur.com/TFz3QS8)
Those who think PHP is ugly, are probably the ones writing it ugly. 
Yeah, I am using absolutely no Microsoft products or services anymore since 3 years, so the best case scenario for me is that they improve Github itself yet do nothing Microsoft-specific, which seems unlikely. So for my usage, it will probably become worse - they are bound to focus more on integration with other Microsoft products and their OS (as they have synergies there &amp; that brings them money), so people using Linux might be left out.
Bitbucket isn't bad!
Well, unlike other products, there are lot of devs using linux/mac and those are tend to be much more sensitive about this, so I don't really belive Microsoft would risk that. Moreover, Microsoft is member of Linux Foundation and their reaction was positive about this - it's not like 10 years ago. Things changed, so hopefully it won't fuck up.
Hey, adawolfa, just a quick heads-up: **belive** is actually spelled **believe**. You can remember it by **i before e**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
delete
I quite like the idea `switch ($a)` `case (int) 0:` `break` `case (string) 1:` `break` effectively type casting the case
Honestly it smells of subtle bugs that’ll be hard to track down. If you need any combination of strict and not strict, use if/else if. PHP’s appeal is its low barrier to entry. This is unnecessarily complex with very little real world benefit. 
Well, I understand that. I mean, by using a singleton db class, you dont have to worry about different pieces of code duplicating the same connection to the same database. 
What about just having switch use strict comparison if the file has `declare(strict_types=1);`?
PHP Internals is a public mailing list. You can read everything using any GUI, like http://www.serverphorums.com/read.php?7,1531083
Presumably, performance gains.
Try Sylius or this version in particular? We have used Sylius, but way back in 2015 while they were still alpha or 0.x release. Our experience have been great that time. You can customize your ecommerce system however you wanted, being Symfony based. We have literally plugged in a lot of others symfony-based 3rd party packages and never had problem (if there's conflicts or anything, just override as needed). The best thing we like about Sylius is the way it it developed. You can learn a lot from its BDD implementation and that really helps us a lot in customizing it, but still maintains the sylius core (adjust the test as needed) and we have full BDD to be used with our CI/CD. This is before they released v1, but I think most of our positive experience should still be there and we'll definitely use this framework again if we're to start another new e-commerce store. The flexibility, ease of customization (for backend and frontend level) and the ecosystem (both for Symfony and Sylius) have helped us before in getting our custom system up and running quickly.
I can recommend mounting with either Expandrive or MountainDuck
I really enjoy using it. Its lightweight, easy to develop for and does you a nice cart system. Some of its features aren't as mature as say like some things in Magento, promotions and such. But it gets the Job done and is nice to work with. Stick it on your local or on a dev server and have a play around. Its good fun. 
I think there's a much better situation which is more advanced pattern matching. It's mentioned in some of the discussion: $y = switch ($var) { int $x =&gt; (int) $x / 2, float $x =&gt; $x / 2, }; // no default, so will throw if no match This basically means that if `$var` is an `int` then `$x` will be set to the integer value (which for these simple things is not that helpful, you could have just used `$var`), and the result of the right-hand-side of the double-arrow is the return result. Here's a slightly more advanced possiblity, such as getting an object property or an array key: $y = switch ($dict) { {$foo} =&gt; $foo, ['foo' =&gt; $foo] =&gt; $foo, }; // again no default, so will throw if no match We can combine types and object properties too. Let's say we had something like this: class Some { public $value; } $result = switch ($some) { Some{int $value} =&gt; (int) ($value / 2), Some{float $value} =&gt; $value / 2, }; The above examples are possible because `switch` is not allowed as an expression currently.
I'd have to think about exact implications, but I think that strict on case leaves the door open for trouble.. I think it would be better, and easier to implement that the entire switch is strict, or not
switch(strict $var) would be VERY nice to have..
Would cause loads of problems when mixing libraries..
I moved all my oruvate stuff to gitlab and downgraded my github acct back to free.
PHP is more ugly than other languages because we refuse to break BC when maybe we should. Hopefully in PHP 8 we can prune the stdlib and have methods on primatives.
One can hope! At least they will have to prove themselves, because there are already alternatives, and more will probably pop up.
More like /r/PHPhelp but it's because `getPath` method won't return "filename", which means last segment (and it's directory name in your case).
mod_rewrite in apache is an option
Check out flightphp! I use it for all my projects, it does exactly this.
Looks interesting yet simple to get started with. May give it a shot.
Yeah that’s why I use it! It’s super minimal barebones framework basically just for easy routes
[Laravel](https://laravel.com/)
Maybe even fix the needle/haystack issue while we are at it. 
You might be interested in Laravel. It'll do all of what you're asking, and so much more. I'm a complete n00b with Laravel, but I've been following along [this YouTube tutorial](https://www.youtube.com/watch?v=EU7PRmCpx-0&amp;list=PLillGF-RfqbYhQsN5WMXy6VsDMKGadrJ-) and it's been absolutely dope so far. Same dude has a ton of other videos/playlists, including one where he uses [Vue.js with Laravel](https://www.youtube.com/watch?v=DJ6PD_jBtU0). That's on my radar in the near future.
Thanks heaps, this looks like exactly what I need!
Larvel looks great, I've been looking into it lately however it seems to be a fairly large framework and might be a bit much for the small project I am working on at the moment. A user suggested flightphp which seems to be a lot less and a good starting point for the time being.
I guess I don't understand the question. You would have to if desired make views a while mother folder as that would get you example.com/views/home.php. you would rout it just like anything else but it will have a .php at the end of it lol. That's how I routed my websites about business http://www.maxedbusinesssolutions.com/blog.php 
I want to remove the .php as well. That was implied in my post. Sorry for the confusion!
Tbh I hadn't heard of FlightPHP until now either, so I'm going to look into that myself :)
Use a $get in the header.location in your php script for the redirect 
[FlightPHP](http://flightphp.com)
You'll get a lot of different answers here but any decent micro framework should be able to let you do exactly what you want relatively easy. I'll throw [Slim](https://www.slimframework.com/) into the mix.
Klein router is also worth a look.
Since others are throwing micro-frameworks at you, consider https://lumen.laravel.com/ . You get the benefit of a completely cut down and performant framework with being able to add Laravel components optionally - if you want it. Win win.
I have looked into it before but it seems so complex, even just trying to install it looked like a whole process
Like I mentioned above, if you don't know of it, Laravel has a micro-framework version called Lumen. Give it a look, at the very least. :)
hm... two commands doesn't seem unreasonable to me? https://lumen.laravel.com/docs/5.6 `composer global require "laravel/lumen-installer"` `lumen new blog` Or am I missing something?
I just throwing this one out there for S&amp;Gs: http://www.twitto.org
Starts to remind me overloading. 
You need to separate, in your mind, the names of the scripts that run from the paths in the urls. Routing in whatever framework you use will map the url paths onto controllers, views, etc.
Using a tool to install a module (a simple router?) screams over-engineered. I stay away from that.
Using apache rewrite in the httpd.conf or an .htaccess file will do the trick. RewriteCond "%{REQUEST_URI}" "^assets/(.+)$" RewriteCond "%{REQUEST_URI}" "-d" RewriteRule ^(.+)$ /public/assets/$1 [L,END,NS] # Serv files found in /public/assets/ RewriteCond "%{REQUEST_URI}" "^assets/(.+)$" RewriteCond "%{REQUEST_URI}" "-f" RewriteRule ^(.+)$ /public/assets/$1 [L,END,NS] # Send nothing/empty to the entry point RewriteRule ^$ /public/index.php [NC,L,END] # Send everything to the entry point RewriteRule ^(?!assets/)(.+)$ /public/index.php [NC,L,END,NS] 
Gonna just toss [FastRoute](https://github.com/nikic/FastRoute) in here. My framework's router is based on it and it is godlike.
I think that is ill-advised, but if you suffer from the "not invented here" syndrome, then there is always the routing library that lumen uses: https://github.com/nikic/FastRoute
you don't need to put the .php in either way, Apache routes it automatically, why make it difficult, just make your folder tree and put the files in where you want them to be accessed?
Oh I didn't realize that, good to know! Thank you very much.
just be careful to not have names that duplicate and screw up the priority, eg. if you have index.htm and index.php in the same folder, and just call index without an extension, you need to know which extension gets priority from apache 
This is 2018, Composer is the current conventional way to install PHP modules. I get that OP may not know Composer, but the notion that using Composer to install a module makes that module over-engineered is nonsense.
If you want to learn how to do it without a framework, check out [this tutorial](https://github.com/PatrickLouys/no-framework-tutorial).
I'll second Flightphp. Great tool.
I know what Composer is and I have used it before however i don't have access to command line on the box this website is currently being hosted on (which is BS imo). From what I understand Composer would be a PHP alternative to NPM (Node Packet Manager). 
That's exactly what Composer is. Officially they call it a dependency manager, not a package manager, but I, for one, don't know the difference. Not sure what best practices are, but if you want to use Composer, I would suggest that you use Composer locally and deploy the resulting vendor directory to the server along with your other code. That way you don't need command line access on the server. I'd make sure to either have the vendor directory outside the document root, or blocked somehow, so it's not publicly accessible with a URL. Just to hide the information of which packages you have installed as a security measure.
You're not a competent developer then. This is how it's done in php, node, c# etc.
dude, I'm an old fart that still writes most of my tools with procedural PHP or Perl and even I know that composer is the way to go on anything larger than 1 file these days.. c'mon.. get with the times..
Your site is vulnerable to SQL injections, nobody should be taking your advice and I hope to god you haven't made any sites for businesses when you can't even follow basic fucking security practices.
That makes your entire application dependent on those rewrite rules, though. That's not so good.
Discusses strict type proposal, spells name wrong. There's a joke in there, I certain of it.
🙈Terribly sorry! Spelling mistakes happen to me a lot. I even double checked it before posting, but apparently my brain registered it wrong 😅
The first step is acknowledging you have a problem. After 20 years it seems the PHP community has reached the first step. 
&gt; 200-500 line .htaccess files If you want a speed boost, turn off htaccess and put the server config in the conf files. 
All good. Got my last name right, that's usually where it happens.
No but, it isn't as feature complete, you get less build minutes and have to find a separate container registry, and has built in ticket metrics. Gitlab is cheaper and more functional. We are starting new projects on gitlab and finding it to just be a slightly better overall product.
Most of the "world" isn't speaking PHP...
The community knows that for a long time. The problem is the BC with every new major version. Php7 should have break that and be more modern language. There are rfcs to introduce promisses, es6 syntax etc. But it will take some time and even then it will be only a side feature.
By far the most common feedback. My initial version was based on avoiding adding new tokens (at which point the per-case became more readable), but I agree that allowing that is a step too far. 90% case is all about the whole switch being strict. Also not a hard implementation... I'll put forward another version, probably with a new token when I have time. Thoughts on embedding the expected type? switch (int $foo) {...} Having a type would make it implicitly strict without adding keywords, allows short-circuit fail when type is unexpected, and we could even combine it under strict_types to allow it to be coercive in the strict_types==0 case.
Why would you create two connections to the same database, and use one for writing and the other for reading? It seems like a waste of resources, for what? Ive never seen that before so I'm curious. A database connection is one of the best cases for a singleton class. I feel like you guys dont understand the problem it solves. 
Maybe I'm inventing problems, but it seems that making it strict by using a type loses some power as you can't use mixed types: switch (strpos($haystack, $needle)){ case === false: echo "Not found"; break; case === 0: echo "At the start"; break; default: echo "Elsewhere"; break; } Possibly this would also form an argument for keeping stict/non-strict on a per-case basis (i.e. being able to have a non-strict switch statement, but with strict handling of true/false as a special case) but I'm struggling to come up with a compelling example. FWIW, I'm one of the (seemingly) minority who thinks that your original `case === value` syntax is quite clean and readable.
Don't blame the tool; An ugly programmer will be writing ugly code. 
That's what I get for posting right before bed. Thanks for answering my question anyway. I can't believe that never crossed my mind.
I find the ES6 vs "plain JavaScript" equally funny. I can only assume the author wanted to compare ES3+ES5 vs ES6.
Said the dude mocking me for upgrading over 150 packages to "ancient" 7.2 :P How's it up there in your Ivory 7.3 tower? Someday I'll make the switch (PHP_VERSION_ID) { case &gt;= 70400: dance(); }
As mical noted in the replies, I’d rather have a new `declare()` than mess with the control structure syntax. 
Come on guys, I expected some people to take the joke too seriously, but to take it literally? )
I have no idea when I interacted with you, but if I called 7.2 ancient, it was surely in jest. :p
Definitely a joke. Either the tweet, or its author. 
Dynamic typing doesn't imply loads of implicit type casting - the static/dynamic typing divide and the weak/strong typing divide are different things. Two other popular dynamic languages, Ruby and Python, both do some implicit casting, but is far less overreaching than PHP's. ex: `10 == 10.0` is true, but `10 == "10"` is false, and asking `"0e01" == "0e02"` will cause a string comparison, not an 'attempt to parse a numeric value then compare those because the string matches `\d+e\d+`.
I Don't buy into all this bullshit hype, I think logically and not emotionally. I use the tools that get the job done and not worry about who naught what and who owns who because at the end of the day they have shown no signs that they plan to ruin the product. It’s sad and pathetic to see people not think logically in these situations and just think irrationally. OH NO it’s microsoft RUN EVERY ONE RUN!!! Gods sakes grow up. PUT your personal tantrums aside and think about the buisness, the code. The reason you went with GitHub to begin with. Does it still have all the features you chose? Yes? Then what the hell are you complaining about?
Hey, SavishSalacious, just a quick heads-up: **buisness** is actually spelled **business**. You can remember it by **begins with busi-**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
&gt; The == comparison is already considered as a bad practice in JavaScript community, and, as I think, should be viewed in the same way in all the dynamic typed programming languages. PHP and javascript are the only popular dynamically typed languages that seem to attract this complaint - so much so I don't think any other dynamic languages in general use even have a `==` / `===` divide. Python, for example, will do implicit casting for numerical values (ex: `10 == 10.0` will upgrade `10` to a float because `10` can be losslessly upgraded.) but nothing else, and it would never dream of doing something like making a comparison between two strings actually cast both strings to numeric values first, then compare those. With one minor exception that is only a problem for the very few people that would care about considering all ints and floats unequal Python (out of the box, at least, Python supports operator overloading) will just tell you two differently-typed things are not equal. `"10" != 10`, `{} != []`, `None != 0`, etc. &gt; On the other hand, PHP has a perfect data type conversion that can be used when checking the equality of two variables of different types. Do you mean things like `(int)"10"` are 'perfect data type conversion`? Because honestly PHP does a lot of flakey shit with that. (int)""; // 0 (int)"asdf"; // 0 (int)"1.35e1"; // 13 If you want to know if a string contains an integer literal `(int)` is useless. If you're prepared to bet your input string will never be anything except a correctly formatted scientific-notation float with no decimal components? Then `(int)` can be quite useful. But if there's even the tiniest doubt that your input string will be empty, improperly formatted, or be some sort of float with a decimal component it will silently fail to find a valid value and just return 0 or will silently drop data respectively.
Please, if you are new to PHP, read this instead [https://www.phptherightway.com/](https://www.phptherightway.com/) !!
Hello I'm very concerned about the future of PHP as a template language. I love using PHP because it's very flexible and allows you do things that other languages do not. In the recent proposed updates i see that slowly PHP is been destroyed as language for templates. I don't want to see this happening. Its being destroyed by the changes and deprications of functions that allow PHP to be used as a flexible template language PHP have long history and destroying it as template language will suffer the community a lot. Making the language more strict by introducing BC changes is bad and affect the whole community. We want to see PHP drive the future and being used from many people around the world, but deprecating functions and BC changes is not the right way to make the language better. People using PHP as template language for many many years. All recent deprecations of functions like count and the proposed compact functions deprecation taking away the ability of php to be a template language By making the language more strict you take away the ability of it to be flexible and be used as a template language Other things that are proposed which are pure madness are the deprivation of the global namespace. Those things will lead to Total Disaster! and make PHP truly a hell to be used as a template language Please save PHP and don't break backward compatibility I want to continue to use PHP as a template language 
Using == vs === is easy after using the language for at least a few minutes. Am I missing something here?
Thanks for the kind words! The link should let you create a PHP 7 without needing to provide any options; https://lair.io/sourcelair/php-7.
`==` should mostly die and `===` shouldn't be overloaded. Use an interface and make the comparison explicit.
Basic master-slave setups are easy to do when your app decides the end-point to use. I.e. one master where data is inserted (and maybe read) and multiple slaves for reading. It is basic horizontal scaling.
Your age will not matter. Just have something to show and a passion to learn 
Hi bud. First of all congrats on making the decision to switch! Welcome to the never ending rabbit hole that is software engineering. In regards to your question, I can only speak for the UK market as that is where I am based. I was in charge of hiring engineers at my last company and now CTO of a my own company so know a little. In my experience, age doesn't matter one bit. With new/junior engineers it is much more about passion and drive. How much are they willing to learn and can they follow direction quickly and effectively. I would recommend building up some side projects/contributing to open source to show that your motivated to improve on your own time. Plus this builds up a portfolio of things you can talk about when it comes to interview. Keep it up!
I’m 30 and just about finished with my 1st year in this career path. I went back to school and completed a BS in CS beforehand though, and have been using the PHP stack for 10 years on personal projects before landing a legitimate job. Even though I’m only a year in, I feel as though I’m more qualified than lots of others in the field. Long story short, possible? Yes. Worth it? Yes. Are you going to have to work for it? Probably.
I commend you for making the switch! As others have said, age will not matter much. Proving you're willing to learn (and already know some things) will matter much much more. Just a thought I had, when it comes to web development, we usually talk about front end development (javascript/html/css) and backend development (php with some kind of database). There are people who combine the two, who are usually called "full stack developers". Depending on what you want to do, you might want to limit yourself to a couple technologies (e.g. start with front end OR back end). Doing both might be a little overwhelming? On the other hand, you might have a better chance of getting a job at an agency as a starting full stack developer... How are you studying these technologies? Self study? Some kind of school?
I think thatThat would remove flexibility, as I can now only have either all switches strict, or all switches non strict after that declare statement.. If adding strict to the switch would be a simple optional extra argument, what would be wrong with that in your opinion?
Thank u for an optimistic reply. As u asked, I m taking classes which covers php,javascript,css, bootstrap. After getting a brief knowledge in atleast the backend part as u said PHP. I wl put my resumé for job. Is that the correct time to put resumé.
I hv a rough knowlege in c and c++. Which i expect will b helpful to know the concept of the above said language and coding. Which gives me confidence. And with ur replies and guidance makes me more. Thank u for the reply
Thank u. I m positive. I hope i wl learn it as soon as possible.. 
In my experience (I am a former Drupal core database subsystem maintainer) the promise of PDO to be cross database is a bit ... rich. Try to insert a large object (LOB/BLOB) in a database and see how cross platform you get. And there is the different syntax for case sensitive and insensitive LIKE and then DDL and then... endless. 
I took it as a jest, as you should my ivory tower and the reference to your strict switch proposal :P
I would definitely like checked exceptions.
`json_decode` and `count` or am I missing something extra? you just need a count of `"subscription"` keys rights?
 $record = json_decode($data, true); echo count($record['subscription']['customer']); 
No sorry, I'm trying to count the "customer" key, "subscription" is the top level object key.
Perfect, I'll try that out, thank you!
JmesPath would be a good fit here.
perhaps then represent `"customer"` as `"customer" : [{/*data for #0*/}, {/*data for #1*/}]` as array looping through each identified customer
I'm certain this feature, whatever the final syntax is decided to be, will be implemented in a way that doesn't break existing code. The PHP core developers are very careful in considering backwards compatibility when they make changes. I'm not sure where you got the idea count() is (being) deprecated from. I don't recall that ever being even suggested on internals. The compact() function has not yet been deprecated. It's been mentioned in passing but I don't believe there's even a draft RFC for it yet. It's being considered because there are performance trade-offs with the way this function works. The only change that's (almost - RFC vote closes in 2 days) certain on compact() is having it report undefined variables - this fixes an inconsistency which can often cause bugs in code (eg. typos in variable names) to be missed, and can be nullified using error suppression, error reporting levels or a custom error handler. I have no idea what you're referring to regarding "deprivation of the global namespace" - I don't think I've seen any discussion of even possible changes to globals. My suspicion is that you may have misunderstood a discussion / proposed changes - can you link to the change documentation / RFC / discussion and if possible provide an example of something you believe you'll no longer be able to do?
https://eval.in/1022305 Use json_decode the standard method without converting to an associative array then using [array_walk_recursive](http://php.net/array_walk_recursive) to count the number of values that return true when check if they are an "instanceof stdClass"? 
Thoughts on the discussion so far, in no particular order: I somewhat agree with the assertion that "strict" should be avoided. It's ambiguous and potentially confusing. A declare switch should definitely not be used for this change. It restricts usage of the new syntax (for example adding methods to existing classes). Declare switches are something that should generally be avoided and only used where there is no sensible alternative. I think it doesn't make sense to have mixed strict and non-strict cases in a single switch. Additionally requiring the syntax to be on each case statement would be unnecessarily verbose in my opinion. I would prefer that the specification that the switch is type sensitive be part of the opening "switch (&lt;var&gt;)" syntax. I personally disagree that fall-through on switch cases is confusing - I think it's clear that switch cases end with break and this is a useful feature. `sswitch` was suggested as a possible syntax. I think `tswitch` would be better (type-sensitive switch), but I like the idea - it's concise.
Passing uncountable variables to `count()` is deprecated and throws a notice on PHP 7.2. `count()` itself isn't deprecated.
By explicit do you mean .equals(...)? The real problem we're trying to solve is using something like array_search or in_array, where we might want to specify what makes two objects equal (even if not identical). Is the person with ID 5 already in this structure? In saying that.. it's a rare use case when == wouldn't cover that anyway because two objects that are considered equal would probably have the same properties as well? Maybe the best approach is to consider use cases for overriding equality first. Can't say I've ever wanted to do that, but maybe you can short-circuit equality testing by saying if it's an instance of the same class and has ID 5, it's the same record. No need to check further properties that may be arrays, other objects etc. 
I was going to suggest opening the file in an editor and doing a Ctrl + f for customer, but I like your solution much better. :-) (Be kind. I'm new to this!)
Haha, I'm relatively new to PHP myself, getting more and more accustomed to it. Unfortunately I need to keep track of the number of "customer" objects dynamically as it's these numbers will always be fluctuating.
If you don’t want to decode the json file, you can also use echo substr_count ( $jsondata, ‘“customer”:’ );
I'd just use Drupal 🤗💻
This deprecation breaks a lot of templates: https://wiki.php.net/rfc/counting_non_countables This will break all templates: https://wiki.php.net/rfc/fallback-to-root-scope-deprecation 
Json decode it, then setup a for each inside a foreach to count / do something with each instance of customer.
&gt; If adding strict to the switch would be a simple optional extra argument, what would be wrong with that in your opinion? It goes back to my original comment: subtle and hard to find bugs. I believe you shouldn’t mix strict and non-strict. It’s a matter of consistency. 
What in the love of fuck does that have to do with literally ANYTHING?
Literally took the words out of my mouth
Sorry but personally I really don't get the point in making a language intentionally difficult. There are many non security reasons why using `==` is better than using `===`. One I used not to long ago was in creating an anagram checker (mainly for my own amusment). With `==` two assosiative arrays do not have to be in the same order for it to return true. This was perfect for what I had to do and while yes I could have ordered both of the arrays by keys before using `===` it would add unnessisary lines of code. The same goes for comparing two different datatypes with the same value e.g. 2 == "2". There's a thousand different ways that doing this would be useful and while sure you could change the datatypes earlier in the code. Again you're adding more lines to your code you don't need to and you're probably going to run into the same problems. ------------------ I mean sure there are lots of reasons where you should use `===` over `==` but ... that's why there's two of them. To ask for it's deprication because you personally don't use it or made a mistake where you used one over the other is just arrogant if I'm honest.
Do you have control over the data structure? Ideally the key of subscriptions should contain an array of objects. It would then be extremely easy to use a foreach or array map/filter
To be clear, just because there is an RFC for something doesn't mean that it will be accepted. For example, while I sympathize with the motivations behind removing the global namespace fallback, I don't think there is the slightest chance of this proposal being accepted.
&gt; One I used not too long ago was in creating an anagram checker (mainly for my own amusement). Interesting, didn't know it acted in this weird way as well. To me, this just adds up to the list of problems, not to the solutions, as it goes very much against the principle of least possible astonishment. Same solution is implemented with `array_map('strval', ...)` and explicit sorting (sorting functions in the standard lib are terrible btw). &gt; The same goes for comparing two different datatypes with the same value e.g. 2 == "2". Either validate them and then cast+compare or cast+compare, but no implicit cast+compare. Failing to upcast values to the intended domain they're supposed to be used in leads to translation issues, bugs, and ultimately security issues (which is just a keyword for "bad bug"). &gt; There are a thousand different ways that doing this would be useful and while sure you could change the datatypes earlier in the code. After years of maintaining mapping libraries and security-sensitive data validators, I don't believe this to be true anymore. Yes, there are a lot of variants, but they are coded explicitly, not via juggling. You always cast and/or validate in separate independent steps, if you mix them you are making things hard for downstream consumers and for BC. &gt; Again you're adding more lines to your code you don't need to and you're probably going to run into the same problems. Adding lines of code has never been the problem: that's OK as long as the code has deterministic and verified outcomes. If something like the quirks of `==` come up this late, the only proper solution is to pull away as quickly as possible, since the operator has an extremely high implicit cyclomatic complexity that wasn't clear upfront, and apparently became clear only recently. &gt; To ask for it's deprication because you personally don't use it or made a mistake where you used one over the other is just arrogant if I'm honest. No arrogance intended: I've very well explained why this operator is fucked up beyond fixing (without massive BC breaks). The deprecation path is just a sensible results across the other possible ones. It may be perceived as arrogance because everyone is busy with protecting something "because that's how we always did it" that a differing opinion may be extremely unwelcome.
I'm being silly, and agree with some of the "decode and count" solutions. But if it's in a json file and as a key value in a standard format, couldn't you also just do `substr_count($json_text, '"customer": {')` to count them?
I do not like composer for the same reason as I have come to dislike node. Development is not based on random bits of strings.
Wat
Here comes the almighty *Configurator*...
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I feel like everyone starts with a personal blog, it gets you adjusted to crud concepts, security and front and backend integration
I keep meaning to do this, but a netflix clone for my desktop that I just run in xampp or whatever. Basically in the back end admin you can choose what folders to scan, then store the data about the files in a json file or a mysql database. A good js library is https://videojs.com/ that you can use to play the videos also you can use imdb to retrieve video info about the files you find in those folders. 
That's a neat idea.
well if it makes you rich... send me a gold
Wouldn't be too difficult, I've thought of something similar before.
Oh! This is wonderful. I'll really implement this I promise myself. Great and challenging for a beginner like myself.
Most importantly, PHP is *practical*. PHP isn't built to win any beauty contests, its built for practical web programming at which it is simply the best. No doubt, the award for being beautiful goes to its pretty sister Python (just like it went to C's pretty sister Pascal in the early years), but when it comes to who's good at web development, there is simply no contest!
OK!
I would prefer all switches to be strict, honestly... But your argument can be applied exactly as well on == and ===
you could use the "Evaluate expression" function of the debugger: just put in your function call and hit enter to see the result
First thing I wrote was simple af. It was a web form that posted short messages into a text file that was read into a comment section. Think I called it a shout out.
It depends heavily on which way you want to develop yourself in near future. It can be full-stack, backend or move away from web. Yes, that was popular thing for most of frameworks for a while to develop blog. But, if you prefer to do just backend, probably one of highly educational thing will be some kind of API (REST for ex.) or bot for some platform, like Telegram (Web Hook for ex.) If you prefer to go full-stack way, i would recommend you to try an popular now SPA + Backend bundle, so your SPA will use something like Vue or React or etc., you can develop whatever you want with it, but blog would be good enough for the start.
Cool, but way too specific for a beginner.
You could make it a combined keyword like `yield from` currently is, avoiding all BC break.
If you want something that you can use rather than just doing this as a learning process I would suggest you look into plex - https://www.plex.tv/
**Counting non-countables**: This fixes what I've long perceived to be a bug. One problem with allowing counting of non-countables is that you might perform count() on an object (that implements some sort of collection-like behavior) expecting it implements Countable, but it actually doesn't. It's a warning, so can be hidden in production or suppressed for legacy code. This can be worked around by implementing a helper function for those who need it. **Fallback to root scope**: An RFC under discussion - 3 months old with no recent discussion / movement - as mentioned by others, the chances of this actually getting accepted (any time soon) are questionable. There's also a workaround written in the RFC if you want to maintain this behavior. **compact() raising warnings for undefined variables**: As I already mentioned, this is a consistency issue that will hilight potential bugs and can be worked around. Since it's only a notice, it doesn't actually break anything. Notices should never be visible to users in production - you should be using logs or custom error handling (perhaps via something like Sentry). **Forced strict switch**: If existing switch implementations are intentionally broken by the final form of this change I will eat a hat, video it and put it on YouTube. That's how confident I am it won't happen. **uniqid()**: This is a terrible function. It doesn't really do what its name suggests. There are much better alternatives and it can easily be reimplemented if you really need it (see [the discussion thread](https://externals.io/message/102097) for some examples). I will bet money that someone will release a compat_uniqid package on Packagist if this RFC is implemented. So of all the items you've raised, ignoring forced strict switch (because it won't happen), none are without any sort of workaround and most of them hilight potential bugs or issues. So I don't believe your assertion that the core developers are breaking the language holds up.
The decision should not be based on popularity, especially when it comes to something as significant as React vs Vue. What is better should be based on an evaluation and feedback from the developer resources available.
CodeCourse has some interesting courses, I recommend their [design patterns videos](https://codecourse.com/library/search?q=design%20pattern) and the ["'No Framework' framework"](https://codecourse.com/watch/the-no-framework-framework) where Alex creates a PHP framework from composer components and pieces them together, it really shows you every piece of a modern framework like Laravel and how it works together.
Another this that is very helpful for learning, is to actually build stuff for yourself. Pick a project and build it out, don't worry if you get stuck, when you get stuck and google stuff for what seems like eternity is you spunging up new information and learning. Here are some specific projects you could try to build (ignore design for now, use Bootstrap or whatever you already know, focus on the PHP part): - Issue tracker application with login, task have a title, body and priority (low, medium, high), tickets can be assigned to another user, figure out how you would model that in the database, how would you build authentication etc, It's a great beginner project, and it's way more interesting than the "simple blog" example.
Whoa that was smart. I've never written a functioning program that perform a real task. All I was doing was reading books after books and only applying what was in the book and couldn't get out of that scope. I came to realise I have wasted so much time i.e 2half year. Thanks I'll try to create something similar.
Whoa that was smart. I've never written a functioning program that perform a real task. All I was doing was reading books after books and only applying what was in the book and couldn't get out of that scope. I came to realise I have wasted so much time i.e 2half year. Thanks I'll try to create something similar.
&gt; as it goes very much against the principle of least possible astonishment. I don't see how if an array has all the keys with the same values they are equal but not identical, that's exactly what that operator means. If you have an array where you have `['a'=&gt;1, 'b'=&gt;2, 'c'=&gt;3]` that's very much the same as `['c'=&gt;3, 'a'=&gt;1, 'b'=&gt;2]`. I mean this functionality has always been in the first couple of pages of any PHP book I've ever read. &gt;and explicit sorting (sorting functions in the standard lib are terrible btw). Thanks but you're kind of helping me with my point here by adding more code you're adding more breaking points if you need more code. ------ The next two point I agree with for a lot of code although I think it depends on what you're writing in how devastating it is if you get a false positive. But if I'm honest all these "bugs" I've seen on this page are kind of what I'd expect from an equality operator which isn't an identical operator. For most of these problems it just seems like `===` should have been used instead. I mean don't get me wrong I think `===` should always be used as default but `==` has functionality that can be useful in certain pieces of code. &gt;Adding lines of code has never been the problem: that's OK as long as the code has deterministic and verified outcomes. This kind of reminds me of a video with Larry Paul on Java. [Here](https://vimeo.com/79504691) &gt;I've very well explained why this operator is fucked up beyond fixing (without massive BC breaks). Is it though? I really mean no offence by this but most of your arguments just seem to be repeating that it should be depreciated simply because you don't find it useful. As I've said a lot of the examples on here seem to be what you'd expect if you can show me an actual bug. Not just something that has the same value compared with something else with the same value. &gt;is busy with protecting something "because that's how we always did it" that a differing opinion may be extremely unwelcome. It's not because that's how they've always done it it's because they've written code that works using that operator and saying that people want to get rid of it because it doesn't act like `===` is not welcome.
Thanks
Thanks very much. This is very good idea 
OK thanks so much.
80% of the web is.
Okay so if you contextualise the world of programming languages as nothing but the web, then you take the number from one site and ignore that other sites have it significantly lower (but still the most used on the web backend) and then you assign equal importance to every site, that a wordpress blog about Barry's garden with 30 hits a week, has no devs, etc is equal to Youtube with billions of views a week. Then yes in that case PHP is 80% of the web...
It is because of == and === that I make my argument. :-)
I don't expect `==` to operate like `===`, I said that `==` is broken. I probably posted it elsewhere in the thread here, but `==` does not operate like `==` (!!!). Please see https://github.com/sebastianbergmann/comparator/pull/58 for sample data (couldn't so far, shoot me an 3v4l.org link when you can): it really really really is broken. Will probably need to add the sorting problem to it once it is reproduced.
Expected type instead of "strict".. interesting.. Strict would allow crap like switch(strict $var){ Case 1: Case "1": } Whereas expected data type would make it very clean, code could already be checked (cases would have to match the data type specified in switch) and at runtime warnings could be given for incorrect data type.. What about this through? switch(string $var){ Case null : Case "test": } 
I've never really had any trouble with those at all
I've looked at the GitHub link but out of the 6 examples the only one I'd say is a problem is `var_dump('0.0' == '25e-10000');` which isn't too surprising either as `floatval('25e-10000')` is 0 which is just another issue entirely. Other than that it may be a failure of knowledge on my side or a lack of adequate communication on yours but I have no clue what you're trying to communicate. &gt; (couldn't so far, shoot me an 3v4l.org link when you can): it really really really is broken. A link showing what? I can only imagine that you actually meant that you mean you'll actually send me a link otherwise I have no idea what code you want me to send in that link. &gt; Will probably need to add the sorting problem to it once it is reproduced. Again is this me or you? &gt;`==` does not operate like `==` Isn't that tautologically false? It acts like what it is same as everything in the world.
If you think the data provider entries in that PR are not disturbing, then I will end my discussion thread here: if we disagree on that, there's no common ground to lead the discussion anywhere productive anyway.
[removed]
Right well, why don't you explain to me why they're disturbing because at the moment quite frankly you haven't really been making any kind of point except a long-winded way of saying "It's bad ok!". Maybe that's just me. I'm really trying to give you the benefit of the doubt here but that's how it comes across. I mean you don't have to use the equivalence operator if you don't want to but why remove it for those of us that find it useful. I think the issue really is what you call bugs most of us would call features. The associative array example I talked about earlier is the obvious example of this and most of the examples seem to be that `0 == 0` is true no matter how you style the zeros. Which is the whole point of the operator? ------------- It's kind of like if we were workman and you found a screwdriver in my tall box and you got it out and said "You shouldn't have a screwdriver! Look how bad it is". Then proceded to screw in a nail with it. They're different operators used for different things and like a guy in reply to one of those tweets you linked to said. You wouldn't remove a word from the English language because you personally don't use it. Why remove functionality from a programming language because you don't like it. 
Good luck and post some information when you get finished
You’re really asking how to build a whole application? If you don’t have a clue and this is a big deal, you should hire some one. 
IMO yield-from is a gross hack and should be buried in the past with all our other mistakes. Clarification: The parser implementation is a gross hack, not the feature itself.
switch (?string $var) {...}
That’s pretty cool 
You should take a look at PSR-1 and PSR-2 (which extends PSR-1).
jesus fucking christ how to get sql injection 101
You should read about PSR-2 and follow its definitions. Also, many parameters are optional when the value is empty. You should set them as required, as a connection will always need a host, for example. Lines like: $params = explode(",", $params); could be easily replaced by receiving the parameters as array already. There is no benefit for writing a method call like: $db-&gt;getRow(..., "username,hash,date_created"); instead of $db-&gt;getRow(..., ["username","hash","user_created"]);
now I haven't touched PHP in a good while and maybe i'm just retarded but couldn't you replace the entire GetRow(args) with "return GetRows(args)[1];"? same goes for countRows(args), just do "return count(GetRows(args));"
I don't want to discourage you, but with all due respect, I hope noone is going to use your class, for the following reasons: - the code is potentially prone to [SQL injection through column names](https://phpdelusions.net/pdo/sql_injection_example) - there are some basic principles violated, like [proper error reporting](https://phpdelusions.net/articles/error_reporting#bad) and [selecting rows from the database only to get the count](https://phpdelusions.net/pdo#count), both being big no-no's. - it is a *very* untidy programming in general, the code is extremely [WET](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself), with huge code blocks repeated in every method. If you're after such a homegrown query builder, why not to put all its code in a private method? - like many other wrappers, it is not extending the original PDO but rather making it much limited. PDO can return your data in [dozens different formats](https://phpdelusions.net/pdo/fetch_modes) but your wrapper supports only two - there is no error handling. you are checking input parameters which is good, but silently return NULL if some conditions failed, leaving you in puzzle, what went wrong. such a code should always report parameter errors verbosely, to help a programmer After all, your class is practically unusable for any more or less real life application that may contain a comma in the input parameters. For example, your own code, $db-&gt;insertRow("users","username,password,dateJoined","$username,$password,$date"); given punctuation is encouraged in the passwords, will stop working if I add a comma to my password. I hope you would listen to a good advise and rewrite your class to make it more safe and reliable. 
You’ll wanna start with downloadmoreram.com, just to make sure your development machine has the horsepower required for such a project. 
&gt; couldn't you replace the entire GetRow(args) with "return GetRows(args)[1];"? Sure, if you want to retrieve millions of rows and throw them away :-)
Check orms like propel or doctrine. Compare those with your solution...
Solid advice!
you really think from should have been a keyword? I rather consider it an elegant solution than a gross hack :-P
Why did you roll your own pdo query builder, when most of the PDO wrappers on github are just that? There are two that I know of that are not query builders: https://github.com/nkt/flame https://github.com/ellisgl/GeekLab-GLPDO2 (I'm sure I'll get slapped for linking a my own project)
Flame is using a brilliant idea - setting the parameter type right in the placeholder/ People often underestimate the power of such a simple solution that is not only making ugly manual binding obsoleted but also introduce a whole lot of new types such as arrays, identifiers, etc. 
Yeah, upvoted for solid advice. The OP actually just got priceless guidance on what he wants to achieve. I got plenty of it too. Thanks both.
debian + [deb.sury.org](https://deb.sury.org) \+ 7.1/7.2 works well for me (see: [https://packages.sury.org/php/](https://packages.sury.org/php/) ) See also : [http://php.net/supported-versions.php](http://php.net/supported-versions.php) 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I'm working on an API wrapper and need to abstract out the HTTP layer. HTTPlug seems to be the best available option for that but I'm not sure if anyone uses it or knows of any reasons I shouldn't. Also: Why can't I add a body to my post?
I'm working on an API wrapper and need to abstract out the HTTP layer. HTTPlug seems to be the best available option for that but I'm not sure if anyone uses it or knows of any reasons I shouldn't.
noooooooooooooooooooooooo
I recommend you to check any framework other than code igniter and get understanding how dependency injection container works and how to use it.
Unfortunately this is one of those things where "If you have to ask, then you can't handle the answer". You are looking at... * A custom distribution model * An array of custom ecommerce subscriptions * And custom user permissions for media access So using something like wordpress/woocommerce isn't going to be a realistic option. You will be rolling your own. To hold as much content as you would like, you are going to be using a platform such as AWS, which doesn't exactly have a step-by-step guide to setting up and maintaining instances and services, doing security audits, PCI compliance, and all that fun stuff. Oh, you wanted an app? Your 'web guy' isn't going to be be making that for you. You are going to need dedicated developers with a well defined project schema. If you don't have the standards doc together, then your UI/UX is going to be all over the place, and no one will touch it (assuming it works).
not entirely true because it does use prepared statements under the hood. a bad approach nonetheless since basic symbols like commas will break queries
Making apps are pretty simple. All you need is Android Studio
The app is the easy part. The website isn't. I just want something where local artist and bands can upload their "garageband CDs." Where every one can stream it. I know use third party software for this stuff. 
What you’re describing is a web app. You seem to be confused. When people are talking about building an app they are talking about a web app. 
I talking about app you get out of the app store or google play
I don’t think you understand what you are trying to build here. There’s isn’t a plug-in or add on you can buy. You need to build an infrastructure. You need to deal with things such as ecommerce, taking payments, authentication, security, servers, hosting platforms, media streaming, building an api. Then you still have to create the front end that the user can use which is going to have its own challenges. Each one of these things are going to require decisions to be made and only the developer building it knows what is the best solution to go with. If you’re that developer and you are asking basic questions, then you’re going to have problems. I recommend you spend weeks doing research and start to understand how the web works and how modern web development works. Maybe once you do that you can come back with more informed questions that a person can actually answer. 
&gt; Only reason I would hire developer is cosmetic stuff. This right here is exactly why you shouldn't be responsible for hiring anyone. You need to do your research and figure out exactly what goes into web applications. And no, web applications are *not* the same as what you see in the app store or Google Play.
Thank you for your insight. This is the first time I have ever put any of my code out online, with the sole intention of getting feedback of all types, whether it be harsh, encouraging, or just flat-out nasty. I most definitely appreciate your feedback, and I'll be looking at fixing it up. I treated this sort of as a 'throw out the code I use on internal projects with the hopes that people will pick it apart.' I know that it's some fairly dirty code, but I intend to make it better with the help and guidance from people like yourself. So thanks for the information! Also, I really do need to fix the arrays. I honestly did not even think about one of those pieces of information having a comma in it -- absolutely retarded mistake on my part. I used to have them as actual arrays that you put into the function itself (insertRows("users",array("username","password"),array($username,$password))) and really, I will probably shift it back to that. I just got tired of typing the array arguments out each time, but I'm not sure I see any other way to do it safely than to swap it back to the way I had it. Again, thanks for your advice! I can only grow as a developer with the advice from solid folks like yourself.
I will definitely do that. Thank you for the response!
Never heard of them, but I will most certainly be researching them shortly. Thank you very much!
My mother told me you guys would do this to me if I had no idea where start from. She said I need take some online courses. I just familiar with Java and HTML. So I didn't think it would be that hard to make. I have concept of the site and appin my head. I just wished I had someone point right direction. I wanted to make it from ground up. So I can make another site or app if I to from scratch. How much would cost to have some develope it for me?
For sure! Thanks for the info. I try to avoid using other people's code, not because I don't trust anyone, but because the only way I ever learned how to do anything is by typing it out and doing it myself. Is this code ugly? Fuck yea it is. But I threw it online, knowing it was ugly, with the hopes that people would blast it and make it better, be it through being assholes or giving actual, solid advice. One way or another, I was hoping for some guidance from other peeps while I learned about classes, etc.
A couple thoughts: As someone that has overseen development of multiple apps integrated with consumer facing web systems, I would say that the web facing construct is *much* easier to manage over time. For the web side you could probably crib together something using Magento along with some different tools for [managing content access](https://www.cadence-labs.com/2015/10/how-to-create-a-membership-only-store-in-magento/) but considering the changes that Magento is going through right now, that's not the safest of bets. You would then need to secure all of your content on a CDN for decent performance with assets remotely linked. This is an asset security issue, to say the least (protecting your content from leachers/redistributors). The app side gets tricky, where you will need to support a native interface for media interaction, sorting, filtering etc. This becomes a constant maintenance kind of deal as OS revisions and interface standards change --you have to be ready to change with them on a constant basis. Something to consider is that if you want to place access to subscribed materials on Apple, you will run into cost overhead where Apple will require to keep **30%** of revenue off the top for having a subscription that is accessible on their platform. If you want to charge people $5 per month for access, if they use the app you are giving up $1.50 for each person. No idea what Android does for this currently. 
Why does anyone do anything even though it already exists? Why do I make beef jerky when I can go to the store and just buy some? I do appreciate the guidance and information, but just because it already exists doesn't mean I shouldn't pursue doing it myself. It's a good way to learn, and honestly, it's how I have learned most of everything I know when it comes to design and development.
Elaborate, please. The code might be ugly as shit and not follow the principles that most people follow, but I do not see where this "jesus fucking christ" moment of yours glares through. It almost feels like you're just throwing shit comments my way just for the sake of throwing shit comments.
The commas are definitely a problem...yep. I'm going to work on fixing that, though, and just take them back to being regular arrays in the function call itself instead of having the explode query on the back-end.
k?
I wasnt bashing you or your atempt, just something I have seen is that there are what seems to be hundreds of them out there. Was just wondering your motivation. 
My bad, I might have misunderstood you. But really, my only real solid reason for using it is because it makes sense to me. The functions and shit click in my brain therefore I figured they might click in someone else's. Reading someone else's code is always a bit challenging for me, so if I can roll out my own stuff, it makes it easier on my part.
Text as communication medium can lead to meta information loss. 😛 I understand the not understanding which leads to creating a solution that you understand untill your understanding changes or evolves then you refactor based on your new understanding.
Hey, ellisgl, just a quick heads-up: **untill** is actually spelled **until**. You can remember it by **one l at the end**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
delete
I'm the guy because I have clientale. I just need scale down my project. Do with out somethings. From what hear from you IT guys. I need to just focus one major feature. That is uploading music and displaying it. I can live without ecommerce part. 
Perhaps running the cache commands of artisan would have helped a bit (after fixing the permissions of certain directories...)
To get to a minimal viable product for an upload and media streaming for both web and cross-platform mobile apps that isn't going to immediately crash and burn with scale or mobile OS changes, and in less than a year? You are looking around $200,000 - $300,000, and be sure to have funds set aside for infrastructure costs and streaming bandwidth.
This guy is obviously here to learn, and is very humble about it. Whoever downvoted this response, you don’t understand how improvement works. +1 for OP
 &lt;?php include 'config.php'; include 'session.php'; $page = $_GET['page']; include "pages/$page.php";
Written like a real master
why not sell it?
Just a thought. Redirect it to phptherightway for now 
I'd recommend a more flexible approach so other file types can be included too. &lt;?php $page = $_GET['page']; include $page;
eh, would could have gone with other idioms. AIUI there's languages which consider yield*expr to indicate delegation for example. Though that's uglier. yield =&gt; expr perhaps?
Awesome work. I've been meaning to look into doing this for a long time. Now to throw it into (Own|Next)cloud and replace Google photos. 
Can you tell us how this code would be exploitable? Seems pretty innocuous to me in a PHP 5.3.4+ setup.
Don't be a putz. Make that site where you leave a copy if your resume. That way employers always know where to find a php master....
That's what it was originally. I figure it's time to pass the torch to the next up-and-coming PHP master. 
The mastery of PHP can only be passed, never sold!
Clearly, you have learned the exquisite art of PHP from another master
I'm pretty sure a king reigns for his whole life before he has to to pass on the crown.
It's not exploitable as I have actually mapped over the $_GET variable inside config.php with some clean function I found on stackoverflow 12 years ago.
`https://example.com/index.php?page=..%2F..%2Fany_dir%2Fany_script_not_meant_for_plublic_to_run`
That is, unless, the king ascends to a higher throne. Like say, in Tennessee somewhere.
I've been to Nashville. There are no Kings in Nashville.
You might try Union Avenue 
https://i.imgur.com/DK1ckG8.png 
You are somewhat missing the main point in your question. What you're asking is, like "I am going to be an artist. I am familiar with wooden frames, can I keep using them or it's better to use plastic ones"? It is not a frame that makes an artist. It is not a basic syntax of a sole language that makes a devops. It is expected from a devops to know several languages and have deep skills in system administration and operation systems as well. 
What's the speed comparison like with python and C++. I once had this guy ask me to rewrite his OpenCV product from python to C++ because it was "too slow".
Thanks. I'm very grateful.
Null byte injection is still a thing, afaik
You are saying that as though stack overflow is undisputable source of wisdom BTW, so is 9 years old.
I'm a fairly new front-end web developer - and this might sound super basic, but where would you guys recommend I go from here? I've built a couple basic sites in Laravel, but I'm not sure if it's the best framework i should continue with that'll help get me a job in the field. Any recommendations? 
That’s the joke.jpg
I mean if it's strict, you don't want to match null, you're switching strings only in a strict case. if ($var === null) { throw new \IllegalArgumentException(""); } switch (strict $var) { ... }
Nullable type sure, but if not explicitly allowed as nullable such a value surely must throw.
Instead of overloading switch for pattern matching, wouldn't it be better to use a different keyword? E.g. scala's match keyword? People have built up years of expectations on the behavior of switch and adding these kinds of subtleties is highly likely to break those expectations.
You just don't want anything to change because you're to lazy to refactor your "templates". There is also a huge group of people who want to language to move forward in terms of performance and usability and sometimes that means they have to walk back on bad decisions made in the past. There are very obvious reasons for all these changes varying from improved performance, easier interface from new programmers (also important for the future of PHP) or just plain security. If you can't understand these reasons then I don't know what to say to you.
I wouldn't mind this addition to the switch statement but it doesn't particularly make me excited. I rarely use switch as it is and strict comparison wouldn't change much. Never the less I'm very supportive of people like /u/SaraMG who are trying to move the language forward by doing this type of work. Something that I would love to see is something similar to the `when` expression in [kotlin (scroll down to when)](https://www.youtube.com/watch?v=7BUvwlsNbvM). Some things that stand out * if, and when statements are expressions so their result can be returned or assigned to a variable (if they are exhaustive) * syntax is more similar to `if` statements by using the `else` keyword instead of the clunky `case` and `default` * when without a value defaults to `when (true)` something people on the mailing list are also suggesting Anyways just mentioning this as a possible source of inspiration. Thanks for the hard work!
The funniest thing is that GitLab is actually hosted on Azure so Microsoft will still have your data.
You missed one .. Do your developers know how to say 'No'? Nothing is worse than a development team that just say "Yes, it can be done", "Yes, it will be on time" to every request for update up until the date something is due, before turning around to say "Oh, actually it will be next week". Particularly if, as a company I had the misfortune to work with did, they carry it on for about three months.
Ah, I didn't get it, though now it seems obvious. Mea culpa!
Add some more users to GitHub once Microsoft interfaces it with visual studio and all those "Team Foundation" projects move to GitHub in the near future. There are shitton of Windows devs that do not use GitHub (due to it mostly requiring bash and being outright unusable with an UI). 
Skype has become sluggish but it's just the nature of the app. It always sorta was. Those skype guys cashed in big time on it. It was a shitty but popular product. Nothing has changed there. LinkedIn has become faster. I'm salty about the Nokia thing. That was simply put, their biggest fuckup. And they blamed it on developers. With Minecraft - Microsoft has done wonders. It's better than ever. Azure is peachy, and on some fronts, I'd say better than AWS. I'm using Outlook for my business emails. I like the recent redesign. It makes everything good and fast and snappy. It's a bit faster than GMail. I don't know why but the new gmail version is a bit sluggish, especially if you run Gmail extensions. In retrospect, they do have some hits and misses. Like every other company under the sun. It's a pity people only know them for their misses. 
I've been putting out code for over 5 years, and this is the first I'm hearing about this stuff. I've always used == and !=. The way a lot of amateur people learn PHP leaves them with a lot of holes in their knowledge and this one is a pretty obscure one for us.
Really? It seems fixed as of this commit: https://github.com/php/php-src/commit/ce96fd6b0761d98353761bf78d5bfb55291179fd
Why an extension? What benefit does this offer over the several JWT libraries on Packagist?
Performance?
I added this extension to my list, definitely will use in new projects as JWT is now standard of all projects I work on :) 
Just class-based interface would be better for oop :)
Oh, joy, it supports the NONE algo. This is a massive footgun. [Also consider if you really need JWT at all](http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/). You usecase might be better served by something else.
I know it wouldn't be compliant with the JSON RFC (I believe), but I'd support removing decoding without specifying an algorithm as a feature. Allowing the token to specify the algorithm is a large security hole (unless you've already chosen to use None for some reason).
Whoops. Looks like last time i checked happened to be a millennium ago. 
Oh hey. 2010th called. It needs its extension back! 
My second go-to option after Laravel would be Yii2. Why aren't you so sure about Laravel though?
Awesome stuff! I've been toying around with OpenCV in C++ and I've been meaning to get back onto it sometime, and this really helps, thanks 
An useful read related to JWT: [https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid](https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid)
Thanx man
FWIW (not much, I'm not an expert like a lot of guys here) I go for this approach: doDbInsert('tableName', ['username' =&gt; $username, 'email' =&gt; $email, 'zipcode' =&gt; $zipcode]); I think it makes it easier to see what's going where than with two separate arrays. You can then parse that array with a foreach($data as $column =&gt; $value) and build up a parameterised query so it's injection-safe.
Really good article
True - but it also supports mercurial :)
&gt; Do we just want the quick emotional rush of the panic and ignore the aftermath That basically sums up everything happening on the internet and media these days. It's good to see not every single person is looking for that short adrenaline kick, so 👍to you taking the time to post a reminder.
https://github.com/villfa/php-invert-color This is a tiny library that inverts colors. I hope someone will find it useful.
Dude, I dig that solution for sure! I may just implement doing it that way instead. It's much cleaner. Thanks!
I see a lot of people saying that it's 100% the developer's fault if they write ugly code. That's true to some extent, but you should not ignore the fact that PHP is an older language, it grew over time, and sometimes bad decisions were made during its design. There's nothing wrong with that per se, but there _are_ some ugly things in the language itself. Plain old saying that "it's the developer's fault" sounds naive and ill-informed. A tip I have for some of those people: take a look at the documentation of modern designed languages. Languages like Rust, Go or Elixir. These are languages that don't carry the backwards compatibility burden yet, and that's very clear in their design. 
Thanks dude. I really appreciate that. The crazy thing is I have been developing in PHP for about 10 years now, but have never really looked into the "right" way of doing everything. I've always done what I thought was the right way, and figured if I shortened my code by five or six lines and made something more efficient, then I was doing it the way the "pros" are. Boy was I wrong...hahaha. I appreciate the vote of confidence, though! I'll get there eventually.
Great Work!!
In your place I would keep insert and update helpers but for selects I would really consider using vanilla SQL. In the end it will turn out to be much readable than your select function that saves you from typing 3 words, SELECT, FROM and WHERE at a price of the reduced readability.
u probably want it at least for interoperability. pretty sure many services such as **amazon cognito** and **Auth0** for example use them by default, for the SSO tokens etc. never seen JWTs being used for session storage though. 
Thing is maybe this subreddit is for things more ready to use in production than to discuss guidance. But also there should be some common sense on those who rant about your code. Good thing that you learnt something! People complains that PHP has many bad developers but if you try to learn people rant because it's not right, when you need to know what is right first. Keep it up and PM me if you need some advice. 
[removed]
Oh sure, if you're having to integrate with other solutions that are already using JWT, then using JWT with them is ok (assuming that's all they offer). If you're starting afresh, or you're making something that other people might have to integrate with, then re-consider JWT.
I just killed a kitten accidentally when I saw this, dropped my laptop on it. Now I need a new laptop and a kitten.
A year ago i asked myself how to transpose match (sml, ocaml, scala, racket) into PHP. Here is the grammar [http://antoineb.github.io/blog/2017/03/05/ideas-of-a-match-form-for-php/](http://antoineb.github.io/blog/2017/03/05/ideas-of-a-match-form-for-php/) i write. 
Could you elaborate? How would you *prefer* to manage your dependencies?
Happy to help. I have a similar one for doDbUpdate as well. I'm ashamed to say that these are global functions for me rather than something encapsulated in a DB class... But hey, it works.
I agree. Selects frequently end up being far too convoluted to try to write a wrapper function for.
PSR's are sets of standards adopted by [PHP-FIG](https://www.php-fig.org/), a standards group aimed at keeping PHP more or less the same language between different frameworks (that's my take on it anyways). Almost all of the frameworks development groups are on board for the early PSR's which are about naming conventions and other basic stuff. Some of them jumped ship on the later PSR's though when they deemed them too restrictive. It's still great though that some thinking went into the basic stuff.
I actually kind of like Yii. Where are you located (broadly) since I don't see it used very often in the US, I see a lot more Cake jobs actually.
For the purpose of helping you get a job Laravel may very well be your best option. Regardless of anyone’s opinion of it, it is the most popular framework (for now) by a mile.
Laravel is the thing to know if you are doing PHP. Everything else is generally very easy after Laravel. Still, poke around and build basic sites in everything (start with the microframeworks) as having a basic knowledge of the landscape is very useful for landing work. Also, keep in mind, it will depend upon where you are located in the world, so do some research with the job postings. For me, my next thing to learn is always something from a job posting that is better than the job I have now.
I'm going on a tangent but, what is the use case for mercurial? Large repo sizes different workflows?
Bosnia, but I did some freelance gigs for clients from Austria and Sweden, and they've used Yii2. There are also a couple of job openings here for Yii2, Laravel and Cake 
That makes sense. There are so many different tools, it is always great to see that they are getting used.
It’s a preference thing - for one, it’s a lot easier getting a load of devs who’ve only used SVN to use mercurial than git from personal experience - less easy to hose a repo. That’s why I’ve seen it used in businesses. I know FB use it for a huge monorepo.
I don't use frameworks, and if I find a piece of something in the wild that interests me I use it for inspiration and work the design into my application. So with your italicized preference, I speculate that I don't have dependencies as most consider them.
If you don’t mind I’ve got a few questions. I’m genuinely curious about how/what you develop. What type/size of applications do you develop? How do you handle testing? Do you develop professionally or as a hobby? Are you primarily a PHP developer?
This helps. Thanks r/colshrapnel! 
Ahh gotcha, yes learning git from svn was kinda painful; unlearning a lot of commands and muscle memory was kind of a pain.
If you already know other languages, give the php docs a try, they're pretty good explained. If I would choose a book, Trully I haven't read any. I learn PHP years ago, so, when I want to re-learn PHP, I just read the docs, and I think they're awesome :) If I would choose a Screencast/video series: laracast has a good bunch of PHP resources, but I think they're not for begginers/starters (not really sure)
I recently stumbled on a guy whose username on youtube is mmtuts who has great tutorials for php. If you’re already familiar with other languages this should be easy to get follow. I’ve taken a subscription on Lynda.com and find their courses to be pretty good generally speaking. The thing about PHP is that it only recently strted focusing on OOP, so a lot of tutorials you’ll find will not be centered on OOP, and you’ll have a few differences in syntax (-&gt; instead of . , or . instead of + for concatenation).
You should learn by doing projects. Set up a WordPress blog. Create a website for yourself from scratch using nothing but PHP. Build a URL shortening service. Then read http://www.phptherightway.com/ and do them all again. If you get stuck along the way read the documentation http://php.net/manual/en/ and search on Stack Overflow. Then try using a framework (such as Laravel or Symfony) to build a Twitter clone. Then watch as many Laracasts as you can and do the same project again.
For what? Creating strings?
It's a question of philosophy. I would say reserving new words is against our interest if we can help it. In this case there isn't overlap, but if you want pattern matching as an expression and a non-expression statement then a new keyword would be required, sure.
This is all good advice ***except*** the wordpress part. That is a good way to learn bad practice right outside the gate.
I’m building a library that I plan on releasing as open source that makes HTTP requests that uses HTTPlug to remove dependencies on any particular library. I noticed that the repository has no recent activity and want to make sure that it’s because the API is stable and not that it’s a abandoned. Is there any reason not to use it?
Unless you're interested in doing WordPress freelance and as long as you tell yourself that WordPress is an example of how not to do PHP then you should be ok. 
&gt;NONE algo isn't it part of the JWT spec? in which case blame the spec not the implementation following it. also programmers should understand what they are doing in the first place.
&gt; isn't it part of the JWT spec? in which case blame the spec not the implementation following it. Well, it's a problem of both the spec and implementing libs... &gt; also programmers should understand what they are doing in the first place. No, this is where I really disagree. The point of libs are to reduce complexity. In *any* case where there's crypto involved, a lib should also remove the ability to incorrectly use the lib in a way that produces insecurities. For example, password_hash doesn't let you shoot yourself by choosing something like md5/sha1/sha2/etc. Sodium doesn't let you shoot yourself by choosing terrible padding schemes or broken cryptography. A JWT lib *should* go off-spec and not offer you NONE algo. Like the name, there's NONE reasons to use NONE. (If you're using NONE, then you might as well not use JWT). If a JWT lib wants to offer NONE, then it should also force the programmer to declare which algos are expected before it decodes the token. If it does neither of these (i.e. offers NONE and doesn't let you clamp down on which algos are expected) then it's a defective lib. Doubly so when it deals with cryptography. (For an example, firebase/php-jwt not only doesn't offer NONE, but it also requires you to detail which algos it's expecting when calling decode())
Or...how to do bring modern methodologies to a less than modern code-base. Or...how to learn to use a new code-base. Since essentially all modern PHP is done in some type of framework or CMS. Just because WordPress is still largely procedural does not mean the code you write has to be. Everything I do in WordPress is OO, uses PSR standards, and uses Composer. Which also brings up another topic: code standards
The use of the term "mile" is telling. In Europe, Symfony is the most popular framework(for now) by at least 1.6 kilometers.
Please can you justify that? Why would embedding a pure function inside a class make it 'better for oop'. Also, why are you testing functions external to your code?
First, PHP is fine for essentially any web-related work. People will shit on it but for completely academic reasons. Very little of what they will complain about is relevant in day-to-day development. Second, Python, JavaScript, and to an extent, Java, are all fine for web related work. They just don't have the same market share in the projects you're going to get as a student freelancer. Your bread and butter are going to be small business marketing sites. Which is going to be a great fit for WordPress. To a lesser extend Drupal. --- The following is not exactly what you asked but I'm going to include it. Your big four in PHP are Symfony, Laravel, WordPress and Drupal. The first two being frameworks with the latter two being CMSs. There are certainly other options but those are most common/popular in their respective categories. There are some things to keep in mind for freelancing as well. Always have some type of Scope of Work. Where it lays out very clearly what is included and what is not included. Use hourly rates as opposed to flat pricing. Get paid. Half up front then half upon delivery. And put that half you got up front in a separate account and don't touch it until you deliver. Have the client pay for everything with their own money. Do not purchase something on your own dime and "bill" it to the client. I would stay away from offering hosting. Same goes with ongoing support. They will be an absolute time-suck with little reward. You don't want to be the person they call in the middle of the night. Document everything. If it doesn't exist in writing it doesn't exist.
There are two good youtube channels that you should check out. Traversy media and mmtuts. I did my first php project watching the mmtuts tutorials. These two channels are the best.
Those are good things to learn, but they should be learned after you have the basics down. I would highly recommend against trying to modernize an old code base before you have a solid understanding of how the language works and what a good codebase actually looks like.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
qwer
You should first search the subreddit for posts like these. And I think /r/PHP should have a FAQ that includes exactly that question. From Laravel to documentation, from Youtube to Google. It's way too repetitive. It's not OP faults though, but really we have at least one question like that once a week. My contribution would be learn things like: http://www.phpinternalsbook.com/, but that's not to start learning how to program, but to understand what happens in your webserver.
Get your shit together man. 
'delete'
 how/what you develop, What type/size of applications do you develop? : a bit of everything. Monoliths, Apis, Event driven, crud, mobile apps, websites, whatever is needed. How do you handle testing? Depends on the contract. Do you develop professionally or as a hobby? Both. Are you primarily a PHP developer? Hard to answer this question is. I don't gravitate towards any specific platform as client requests vary greatly. I think a decade ago I may have said yes, but then that wouldn't be completely true as I think somewhere deep down I still think in C.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
/u/ColdCaseQuiet -- This estimate is reasonable. 
https://insights.stackoverflow.com/trends?tags=laravel%2Csymfony https://trends.google.com/trends/explore?q=Laravel,symfony https://www.similartech.com/compare/laravel-vs-symfony Do you have anything to back that or do you hope that witty semantics can change facts?
&gt; Use hourly rates as opposed to flat pricing. Whether contractor for software development or contractor for work on my house I would never hire someone that charges hourly. If it takes you longer than you thought it would after reading the spec of what I asked for that's your problem, need to learn how to estimate times better. You pointed out being clear on both ends of what is expected and excluded so that protects the developer from feature creep from the customer claiming "it's not done yet". If they want to buy additional tasks then they can. It's really best for both parties. 
msoft killed messenger - big fail!
you can patch out the countable warnings in 7.2 to keep scripts truckin'
Well good luck to you if you ever need software because that is essentially how the industry works. In my experience, overages have little to do with the dev and more to do with clients. They don't give you the whole story or forget about some feature or integration. And typically, the thing they forget is critical. So the project would just stop until they agree to more time. Rinse and repeat. Or, the increase comes from things you just won't know until you're in the project. The only way to mitigate that is to do a much larger and in-depth investigation. Which would require the client handing over complete access to a third party they don't have a contract with. Or, you end up with two projects and two contracts and two sets of deliverables. I might agree to it if it the project was super small. Like, crazy small. Something like "I need a website with one page with a simple contact form" type of small. Where I work now they used to do fix-bid projects but even those were not "do this for X amount of money". We still did an hours estimate and the agreement was basically a purchase of hours. If the hours went over the client had to purchase more. The size and complexity of most software (website, app, whatever) projects is just too large to not do a time and materials based approach. Otherwise you would end up with two situations. The cost of development skyrocking or very few places that do development.
Anyone who actually works in this industry knows this. No need to defend yourself to someone trying to offer input on something he clearly knows nothing about. 
Build something that requires a database. That's how i first started learning php.
I know. My hope is always that maybe I'll prevent him from roping in some poor bastard that's just starting into a bad situation. Most likely has no change but a man can dream....
&gt; If it takes you longer than you thought it would after reading the spec of what I asked for that's your problem, need to learn how to estimate times better. Have you ever worked with clients on a software project? The spec is never final, there's always "just one more thing". I'm not working based on someone's interpretation of "done" (which is never with fixed pricing).
&gt;The thing about PHP is that it only recently strted focusing on OOP Depends on a definition for "recent", I guess. PHP 5.2 had quite robust OO features, with 5.3 starting the language Renaissance.
What about sticky sessions?
http://www.phptherightway.com/
Tymon's JWTAuth expressly forbids the NONE algorithm. Like literally, you go out of your way to ensure that your tokens are all signed using your very secure JWT_SECRET, only to have some malicious person sending a "ALG: NONE; username=foo" and Oops! They're accepted in! `alg: none` is a disgrace for any standard.
&gt; PSR-7 server What exactly is a PSR-7?
Can this be used to run ecommerce php apps like Magento?
How can you write a "PSR-7 server" in Go? PSR-7 is a collection of PHP interfaces.
Hi, this is Golang app which do all the heavy work to parse user http request into PSR-7 form (https://www.php-fig.org/psr/psr-7/) which is community standard for HTTP messages in PHP frameworks. The result allows you to plug it into any modern framework without any change. We are using it in combination with our framework to create distributed applications (Consul, Prometheus plugins and etc) by utilizing PHP for most of the business logic. 
I'd like to see a comparison running magento2 versus this with all the front-end fixings optimized on varnish-nginx-php-fpm compared to this!
There've been a number of features discussed like this (and if I could I'd have them yesterday). In general I prefer the interface because it allows your IDE to track custom implementations more easily. Btw, have you considered converting this into a Comparable interface instead? One could account for other comparisons are well that way. --- FULL STOP --- So I just read up on how this exact feature evolved in Python (which is a language I don't often use but do enjoy reading). They had the __cmp__ comparator func but have moved to all magic methods of every comparison operator. It's probably wise to take the experience they've had with this feature into account: http://portingguide.readthedocs.io/en/latest/comparisons.html#rich-comparisons
Indeed. My comment was just to let OP know that they may find a lot of non OOP tutorials out there, so to keep looking until they find something that is. But I take your point, I should have clarified that better.
You could try to run Magento with this [zend-psr7bridge](https://github.com/zendframework/zend-psr7bridge).
PSR-7 is just a convention. Go provides raw data while the PSR-7 request itself is created on PHP side with [Diactoros\ServerRequest](https://github.com/zendframework/zend-diactoros).
&gt; orry but personally I I disagree. Problems are devs AND languages that allow you to use not-well-defined stuff. And PHP is a mess.
I agree. PHP and DB's go together powerfully, and easily. 
You mentioned that you don’t have dependencies as most would consider them. Does this mean don’t avoid them entirely? An example of something that, I think, would be problematic to do in house is currency conversion/manipulation. There are many currencies that don’t use decimal systems that need subunit handling when doing arithmetic. What kind of dependencies *do* you have?
I too would like to make Magento scale please
Does this mean I don't need a webserver like Apache to run PHP or serve static files?
This is excellent, and really highlights PHP's strengths. A lot of people's minds are stuck in this decades-old view of PHP, as a very slow, mismash of type juggling and functions that start echoing to stdout without warning. PHP today is all about the interface. Good DI, composer, and the PSR lets us do some great projects at scale. I already have Slim sitting in front of my php-graphql, which are both psr-7 based. Stick roadrunner in front, and redis in back (as psr6), and run on php7, and you'll have one fast appserver with loads of community and modules behind it, and you'll be able to easily upgrade. There's way too much vendor addiction (even still in the PHP world), and I'm so happy to build things around standard interfaces, rather than installing some enormous, flavour of the day framework. 
I got Magento to scale once. You just have to remove the frontend and host it on a massive cluster.
YMMV, but in my experience Magento performance is almost always bottlenecked at the DB (blame EAV). 
How it is compared to swoole?
That's what the page says.
Theoretically this is just like how you can run a Rack-compatible ruby app from any rack app server. 
At volume I doubt it stacks up. But if this tech is now more easily available to the masses who aren’t supporting thousands of users, speed won’t matter much. I think this is good news. 
&gt; - Same goes with ongoing support. &gt; - They will be an absolute time-suck with little reward. You don't want to be the person they call in the middle of the night. &gt; - Document everything. If it doesn't exist in writing it doesn't exist Just want to give a particular +1 to this part. You **will** do a fixed price for the website. Then you **will** be berated for support, quotes, and updates for the rest of time. Lawyers charge by the minute for answering a phone call. You should do the same for your emails as well. But christ almighty, get it in writing. I recently finally got rid of a client I built a CMS for when I was in uni. They've been a thorn in my life for years. Seriously the day they left I felt a weight lift from my shoulders that I didn't even realise was there. I was on call 24/7 without even realising it and not getting paid for it.
There’s a lot more laravel jobs out there than anything else! 
Could anyone provide an example on how to run laravel with this? I tried but failed miserably. 
This seems really interesting! I take it that it replaces PHP-FPM? Would I still want Nginx in front? What happens in the event of a fatal error, or something else where a well-formed response isn't sent to the client? And most importantly, where does that amount of speedup come from? Surely PHP-FPM isn't _that_ inefficient in processing FastCGI messages, and it doesn't appear to be replacing any other part of the runtime. Or am I completely misinterpreting what this does?
Since you can not even properly quote, you are so true. 
This shiny thing started development just 6 months ago. No, you don't need an old, rusty and battle proven Apache.
This shiny thing started development just 6 months ago. No, you don't need an old, rusty and battle proven Apache.
Absolutely none, no benefit at all. However, disadvantages are plenty: The code is written by an inexperienced C programmer, the code is written by an inexperienced PHP internals developer: The code has memory errors and basic mistakes (invalid reads/writes, read after free), all but one of the tests fail when run through a memory testing program as a result. This code has been on github for about a month, 60 people have starred it already, and no doubt deployed it, since there have been no open issues and no pull requests, I'm allowed to assume that of all the people that have looked at it, none of them could really read it, and so don't hear the deafening alarm bells I hear. Deploying code like this isn't only pointless in terms of performance, but it's dangerous; Introducing memory errors into an application may have serious security implications. This may seem a bit petty, I could just fix it ... but the question is, should I? and if I did, should you use it ? Nope, and nope. There's just nothing to be gained, and *everything* to loose ...
I've aways found it to be really slow anywhere in the UK. The UX of all Atlassian products has seemingly taken a major nosedive in the last year or so. I didn't think it was possible for them to make Jira and Confluence and worse than they already were!
This is the Gitlab problem - more often than not somethings broken. They really have been abysmal at keeping their network stable over the last year or so. 
People arent really moving. Just reserving their namespace on an alternative platform. Realistically anyone moving is doing so for the wrong reasons. Microsoft for all their faults have built a pretty decent developer ecosystem, and wouldn't buy out github just to fuck it up.
The potential speedup comes from the fact that this architecture wants you to keep the workers running, avoiding process creation and bootstrapping overhead. This must be done with great care and most existing applications will have a hard time to adapt.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Serving static files is a solved problem, golang can do it just fine. It's the rest that is new
You can use it with nginx or any other proxy/load-balancer (we are using it with AWS LB). Fatal errors would be handled on the protocol level (in the case when a worker dies unexpectedly) - rr includes error detection to avoid unexpected responses. In the worse case, you will get an error like "unable to allocate worker: EOF".
I'm not sure if sticky sessions have to be solved within single server context but HTTPS is coming, with HTTP/2 Push support directly from PHP application.
&gt; This must be done with great care Absolutely, this approach forces you to write more carefully, however, there is no special approach is required, SOLID and no global state will do the trick.
It's not a stupid extension. 
This is great stuff. Do you have any connectors available for say Symfony? Would it even make sense to do so? Shouldn't be difficult to use diactoros factory in it to transform back and forth HttpFoundation.
&gt; This may seem a bit petty, I could just fix it ... but the question is, should I? and if I did, should you use it ? &gt; Nope, and nope. There's just nothing to be gained, and everything to loose ... Maybe worth a small blogpost on the gotchas and ways to detect the memory errors? There's been times I've been tempted to dust of my C/C++ gloves and take a swing at various random ideas I've had for PHP extensions, but I've always been held back by the thin documentation and lack of knowledge on what modern C/C++ development uses. (it's been ~10 years since I last used my C/C++ gloves in anger ;) ). 
I generally circumvent the problem overall with either a centralised storage or by using client-side storage.
You would need to convert PSR-7 ServerRequest into HttpFoundation Request, punch it into laravel, capture the HttpFoundation Response and convert it back to PSR-7 Response. You can do the conversion via symfony/psr-http-message-bridge.
[removed]
And another JWT library of no use for a resource server (so most API). It want a key to check the signature before you can decode. But if you accept multiple issuers giving JWT as access tokens you have to manually extract the issuer from the JWT, get the key then you can call the decode function. Why no jwt_get_issuer ? Why can't we give a callback as the key which would take the issuer as a parameter? Best example would be if you use Auth0 as your authentication site : it gives your client a JWT access token. From the issuer field you can easily download the key (as a JWKS). Making your API usable by multiple clients who authentify their own end-users. It's like people use JWT and API only to say they have an API but everything (authentication, resource, clients) are so intertwined it could just be a monolith.
https://3v4l.org/FVlpE Which is still utterly shitty, but imo a but less shitty as it throws the error the moment it actually should. But obviously what you really want is generics instead or maybe some implementation of arrayof.
Three other ways: - You can typehint variadic functions: `function a(string ...$listOfStrings)` - Generics, making a "list of type". It doesn't exist in PHP (yet; I hope). - Make your own list implementations by implementing `ArrayAccess`. I made a proof of concept a while ago, which supports a generic approach for these kind of lists: https://github.com/spatie/typed
How does it stack up against ppm?
&gt; Everything the Internet touches is our Kingdom There are TONs of places where you can start and go to. &gt; There are many roads to rome Just try avoiding w3schools or other heavily biased websites that force you to go just one path. Try not only beeing a PHP developer, but a Fullstack Web Developer. Learn EVERYTHING you can learn starting from bits and bytes going up to "brain fuck" (just knowing that it exists and maybe how it looks like is enough :P). Everything IT related I learned in the past 10 years are used nearly every single day. Also just the plain understandment of something is really important so I can understand how something works and make my code better overall. Learn design patterns, best practiest, worst practices (phpthewrongway etc.), common pitfalls, SECURITY, database, refactoring, unit testing deployment routins, back ups, setups etc. etc. etc.
I'm the dude in the video, if you have any suggestions or questions please don't hesitate to ask.
https://github.com/search?l=php&amp;q=stars%3A%3E1&amp;s=stars&amp;type=Repositories now you can delete your spam article
Hi, Swoole would be somewhat faster on bare tests since it's native C extension for PHP. With Swoole you would have share memory between multiple requests and use async techniques. This approach is good but we prefer to avoid dealing with PHP in a concurrent mode for production projects since we have a lot of DB interactions and etc, my team prefer to use proper multi-thread language for that. RoadRunner runs each of the PHP processes in isolation (much like PHP-FPM), which helps to mitigate risks of failure since one dead worker won't kill the rest of the system and does not require many changes in application business logic.
TL;DR please?
RR would be couple times faster due: - faster IPC communication (goroutines vs PHP event loop) - faster HTTP server Overall, net/http server provided by Golang is way more mature (TLS, Keep-Alive, HTTP/2) and much faster than HTTP server written in PHP. 
There is a tool call EditorConfig and you can use it.
Thank you, very informative.
I guess it's a trade off. Make your parameters look messy and weird or make the first line of your function look messy and weird. As you said, both are utterly shitty. I'm really gutted https://wiki.php.net/rfc/arrayof was declined. It seems like such a win. That syntax has proven itself to work in other languages! What was the reasoning behind declining it? Also, generics doesn't look that appealing for just type hinting arrays. Unless I've misunderstood it, I now have to create an collection/bag class that holds my elements. And again, unless I've misunderstood it, now all the `array_*` functions are worthless and I have to try and implement them again in my own collection/bag class.
There is a bunch of bridges to and from PSR-7 for different frameworks. As far I remember Symfony you would only have to invoke HttpKernel with a proper request to make it work with RR.
It is a trade off indeed.But it's all we got right now. The main advantage over my way is error reporting is actually correct as it states where the error is coming from instead of deeper into the function where it is eventually being "validated". In general you want it to 1) fail as soon as possible 2) have an error pointing at the actual line on which the error occurred. &gt; What was the reasoning behind declining it? https://externals.io/message/71192 
Very interesting. So it's like a php -S suitable for production. It is nice that httpd be part of the project instead system wide approach of Apache, nginx or other stuff
Visual studio already supports git repos hosted on github, and has for quite a while now. VSTS already uses git, and GitHub is sort of a downgrade as far as features are concerned. You can also just use the command line tool in CMD or Powershell. 
And for those of us who are at work with no sound? 
My question is, let's say I've included my .editorconfig in my repository and it contains indent_style = tab for .js files and some other styles but the user cloned my repository uses spaces for .js files but mostly ok for other styles. What will happen? 
PHP is really going places.
In this day and age, witty semantics most definitely trumps facts. None of your links directly address the job situation. My purely anecdotal feeling is that Symfony does offer more jobs on the Continent. But if there is a point here it is that you need to look at your own specific job markets to see what is available. 
The editorconfig will overwrite the settings of the editor of the user that checks it out. So if they do nothing, they will automatically indent with tabs if they press the tab button. Now in the case of the other use not enabling editorconfig, or overwriting it in their own settings. This is something editorconfig can't do anything about. So the next time you accept their pull request (with spaces) it will appear in your code with space. Now it would deppend on the settings of you editor how this will unfold. For example PHPStorm, will complain about seeing spaces when editorconfig is enabled for tabs.
The validation can be hidden without changing the function signature, like this: [https://3v4l.org/Em1Uq](https://3v4l.org/Em1Uq) But I don't know how significant the overhead is if done like this.
Yes, that's a downside of having my content as video. I know this is an issue, but I don't really know how to solve it.
Correct :) Having app server as part of the project is our primary goal, not nesessary the performance boost (which is nice to have anyway): DEBU[0000] [rpc]: started DEBU[0000] [http]: started DEBU[0000] [consul]: started DEBU[0000] [prometheus]: started 
But but advertisment, very money, much link.
I mentioned "after Microsoft interfaces github with their other services". GitHub is lacking CI/CD tool, BitBucket has one and it's a money earner. I dont see why it should be free since we already pay for TravisCI etc. It is logical that in the near future GitHub will implement all the features of VSTS. This must be the plan. There is no other sane reason for Microsoft to cough up billions of dollars just to claim they own a platform that may or may have not 60 million repos. Those bragging rights are too expensive. And there's no ROI in there. And about your last paragraph. When I use Git it's hardly just git. I use a plethora of other command-line tools that just don't work under Windows. WSL is a godsend in that aspect.
As this discussion also came up in the internals mailing list I've extended the scope of the RFC to cover also array_value_first() and array_value_last(). 
add subtitles?
Using the functions for accessing the first/last value may lead to notices. eg. using $array[array_key_first($array)] on an empty array.
Are you happy now? :)
I'm curious...assuming you need to do something like date manipulation to humanize dates (e.g showing things like "Posted 5 minutes ago", "Posted an hour ago", etc), we all generally use something like Carbon for this. How do you do it? You don't really go and code that functionality up yourself do you? I can understand wanting stricter control over dependencies, but surely some things are better being used and save a hell of a lot of time.
Hey I've got an idea, lets make 90% of projects need a massive code audit all because someone decided to remove two highly used bits of code for no real reason.
It's very useful for my own private projects but we have to point out, e.g. in README.md, that following .editorconfig styles is a contribution rule/requirement to prevent style conflicts. I wish there was something like this for PhpStorm settings. There are some settings that I made for every project but they must be done again for every new project.
https://github.com/spiral/roadrunner/issues/11 you can find the solution here.
What makes you think you cannot replace carbon with a simple sprintf call?
There is something like this https://github.com/pwm/tc worth a look
Well since you said "load balancer", I figured there would be more than one server instance. If it's only one server, than sticky sessions would be implied. =) HTTPS via HTTP/2, so that would totally take care of that. 
&gt;There are some settings that I made for every project but they must be done again for every new project. I'm not really following. I think you are describing exactly what editorConfig does. PhpStorm automaticity takes these files and apply the settings. On a project basis.
Yes. If you want a proper language, go use "C". Any other language is a mess and suck. 
Ah, I see. Yes, square brackets are slightly confusing to use given their relationship with arrays. Maybe a generics style angle brackets are better upon second thought...
I was talking about PhpStorm specific settings. For example, you can add artisan command-line interface of Laravel as a command line tool to PhpStorm but this should done for every new project via settings window. I want someting like this: settings.commandLine.symfonyBased.path.tool = {project_dir}/artisan settings.commandLine.symfonyBased.path.php = /path/to/php settings.commandLine.symfonyBased.alias = artisan
Ah right. Yeah that's not something EditorConfig can help with. Maybe you could setup some aliases. But that's also not really a solution for the issue.
Microsoft clearly bought GitHub as a strategic acquisition, not because they think slightly deeper integration with Microsoft services will generate that much revenue. The price they paid is totally disproportionate with the revenue github is likely to generate under any level of integration. Anyway, your particular choices of tools don’t really have much to do with Windows developers and GitHub. GitHub already worked fine with a 100% windows-native development tool chain. Certainly Microsoft can not be anticipating some massive increase in the number of developers using GitHub as a result of this. They aren’t that foolish. 
&gt; PSR-7 immutability works perfectly with long running scripts. Although, FWIW, PSR-7 is immutable only in theory, not in practice. Cf. &lt;http://paul-m-jones.com/archives/6510&gt;
This is true, but constraints applied by PSR-7 to the application design force you to write stateless code one way or another.
Useful, but I still dislike how all these array functions (including ones which modify their argument) have to be global functions instead of being instance methods on the array.
Transcript works for me. I don't understand the need to put everything in a video, it's 10x easier to read something and if you get interrupted, you don't have to pause a video, track back to where you were etc. Best of you, CTRL+F works!
Are these really necessary? `// array_key_first()` : `$keys = array_keys($array);` `$key = reset($keys);` `// array_key_last()` : `$keys = array_keys($array);` `$key = end($keys);` `// array_value_first()` : `$values = array_values($array);` `$value = reset($values);` `// array_value_last()` : `$values = array_values($array);` `$value = end($values);`
&gt; instead of being instance methods. Do you really dislike the fact that this function is available globally (just as everything else in PHP), registered in global namespace or you just want to chain function calls?
All of this has been discussed to death in the previous thread. https://www.reddit.com/r/PHP/comments/8qjibp/new_rfc_for_adding_array_key_first_and_array_key/
No, no they're not. OP is asking for comments and the comment is this is a shit idea. Sounds like some bullshit concocted to say you had a pull request taken in by internals to put on your resume. 
I usually use the end/reset methids but they do move the array cursor so it's not the exact same thing and would have side effects in certain contexts.
Arrays can contain all possible values in their values so there is no way to distinguish between false, null, etc, from it being empty or from it having a value of false, null, etc. You have to check size before grabbing the first or last element.
My equivalent code isn't performing end/reset on the array
Symfony is listed twice.
[https://github.com/adhocore/phalcon-ext](https://github.com/adhocore/phalcon-ext) Ignite your phalcon app with this multipurpose library. It is a collection of extensions/adapters/middlewares and utilities to make development with phalcon fun and easy. \[scrutinizer rating 10/10, test coverage 96&amp;#37;, version 0.0.2, illustrative readme doc\]
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Not sure if troll or script boy...
&gt; $key = end($keys); I was going to make the same comment on list, but realised that end() is dumb, https://3v4l.org/pVlvP Because it takes the argument by reference, it can only operate on variables rather than values. Which is a bit crap.
then use `array_pop()` if you have a grudge
&gt; GitHub is lacking CI/CD tool You **can** use GitLab CI/CD on GitHub repos: [GitLab CI/CD for GitHub ](https://about.gitlab.com/features/github/), [Using GitLab CI/CD with a GitHub repository](https://docs.gitlab.com/ee/ci/ci_cd_for_external_repos/github_integration.html). Though I can't speak to how well it all works in practice.
&gt; Are these really necessary? &gt; Array pointer not affected: What about memory usage?
`function sum(int ...$nums) {}`
`PHP Warning: Uncaught TypeError: Argument 3 passed to sum() must be of the type integer, string given, called in php shell code online 1 and defined in php shell code:1`
`PHP 7.2.4 (cli) (built: Apr 12 2018 02:49:37) ( NTS )`
`function sum(array $nums) { (function(int ...$nums){})(...$nums); }` if you must accept an array, is still neater and faster for me.
It makes things easier, why not do it? Ruby does things beautifully for just getting down and writing code, it does a lot for you, a lot of helper methods are present to allow that; this is a good helper method in my mind for PHP regardless. $values = array_values($array); $value = end($values); Is far less helpful then `array_value_last($array)` in my mind.
&gt; array_pop Which modifies the array, which is annoying.
By definition. We're working with a temporary array. Who cares. Context
How about `end($array)` ? Short and succinct. If, for whatever reason you're concerned about the internal pointer, use the more verbose $values = array_values($array); $value = end($values); 
Preach the Word my brother.
The biggest issue I keep waiting for them to fix if they can is: Needle, Haystack and Haystack, Needle when it comes to array functions.
Yes, they're necessary. The alternatives you posted are awful in terms of both performance and memory usage. You shouldn't need to copy the entire array just to get a single key/value from it. The time it takes to retrieve the key/value shouldn't depend on the length of the array. This stuff is important when you're trying to optimize a tight loop.
`reset()`and `end()` are sufficient 99%+ of the time for retrieving the first and last value of an array
That creates a copy of all the array's keys / values. Seems wasteful.
Instance methods make my code cleaner and my autocomplete happier.
Magnificent 
\&gt; Php7 should have break that and be more modern language. Breaking backwards compatibility is dangerous. It should be done slowly and carefully. I think PHP has been doing a fantastic job at moving forward lately. Change too much and you end up splitting your community like Python did. Python 3 is nearly 10 years old and they're still supporting Python 2 because of the split.
what about Swoole ?
See above, in another thread.
What does this mean for Magento and the community at large?
PH: Programming Humour. [Sure](https://media1.giphy.com/media/ANbD1CCdA3iI8/200_d.gif).
:\^) 
WTF? why Adobe wants a shop system?.. hmm
[https://www.businesswire.com/news/home/20180619005418/en/Adobe-Completes-Acquisition-Magento-Commerce](https://www.businesswire.com/news/home/20180619005418/en/Adobe-Completes-Acquisition-Magento-Commerce)
They've been making their big push into web for sometime. Supposedly they're losing a big share to Sketch and Invision, while Adobes (IDK what they call it) No one is really into it. 
I would like to benchmark RR for our (laravel+beanstalk) workers. What should I put in the dockerfile to make RR work with our existing application? Thanks in advance 👍
You only have to put a binary file which you can download from "releases" section on GitHub and .rr.yaml config file. You can find some tips here: https://github.com/spiral/roadrunner/issues/11
Thanks for the info! I have some additional feedback - would you prefer it here or Github?
You can create a ticket on GitHub if you want. :)
They have a CMS too and I hate it.
Adobe XD. I just picked it up because it's free and works on Windows, unlike Sketch. Adobe has a long history of buying into markets - their push to dominate creative software is well documented. Their push to get into Web design started with buying out Dreamweaver and given their size, I doubt it'll stop anytime soon. 
More loading screens for starters.
It's included with your Creative Cloud subscription. 
That Magento stores will be hacked every other week. You should stay far away of Adobe if security is your main concern.
AEM. yep, it's clunky as fuck.
Also Affinity. Both Affinity Designer &amp; Photo are better products than Photoshop and Illustrator without the subscription tag price.
I havnt used them yet. So I can’t say. But from what I’ve seen they look amazing. Waiting for their version of desktop publisher to drop and give it a try. 
&gt; clunky as fuck Magento fits the description
Wouldn't it be great to have 1000 workers? Balancing between the msec
The real answer is more micro-services and more options to upgrade to. Magento 2 won't change that much. I've been a Magento developer for 10 years now. Lots of companies do just fine with it. Lots of developers make a decent salary with it. I've grown some gray hairs. If it were easy, it wouldn't be "work" .
i was just gonna say, i love that site...
While I agree to an extent, I don't think it's unfair to say that Magento is needlessly overly complicated in a lot of ways. And their documentation is garbage tier. 
That code looks like the kind of shit you'd expect to see in the php.net comments section.
&gt; without copying the entire array &gt;array_keys 🤡
Relying on the pointer position between contexts is asking for bugs.
Thank you for the constructive feedback
keys, not values
The memory will end before the issues with the context switches can begin.
4chan: not even once.
Adobe XD is actually very nice to use. It works in windows and is free. As it matures and gains more needed features, it will be a formidable rival to sketch.
They're both great. Takes a little getting used to since working with Adobe since CS3, but it's not a super steep learning curve.
Oh not even close. It's part of the marketing cloud. Paying creative cloud prices would be so sweet for those of us who use marketing cloud products.
Do you have any recommendations? I am about to go down the path of evaluating this and competition, and I would love to hear your experiences with some good ones to make sure I check them out.
Cool. I've been using [https://github.com/datto/php-json-rpc](https://github.com/datto/php-json-rpc). I'll check this out though.
since when is Adobe XD free?
I like PHP but this makes me happy we went with Solidus.io
You can hold an entire conversation using only the word 'dude'. I'm pretty sure I've done it when I was stoned, but then again I was stoned at the time. It might have only been inside my head.
If Adobe take a similar approaches to before, Magento will likely stay freely available but new features will only be available to paying customers. In particular I’m thinking of AEM which is mostly built from open source libraries. Adobe makes money from this in a few ways; 1. Adobe sells a proprietary UI that sits on top of the open source libraries / frameworks. They’re the only company doing it too. 2. It’s a complex and monolithic system which is very difficult to build from scratch, so Adobe makes a pretty penny from consultancy. 3. The documentation for most of AEM is very lacking, so Adobe sells both development and user training. 4. Hosting AEM is far from straight forward, especially when scaling the Author instance, which is where their Cloud offering comes in. 5. There’s a perception that to get the most out of AEM you need the rest of the Adobe suite, which means most enterprises end up buying everything else. Purchasing Magento will probably help them corner the Digital market a bit more and sell an entire e-commerce platform to enterprises.
I'm sure it means Adobe will improve the documentation.... I can't believe I typed that without laughing.
Is there a resource / example / diagram of a typical API implementation structure. I was fleshing out a library to connect to a third party API the other night and the structure bothered me.
Dude.
&gt; If it were easy, it wouldn't be "work" . https://en.wikipedia.org/wiki/Stockholm_syndrome
That's 50% less than before! Cool!
The internal pointer of the array being modified by end means current would be modified to be set to end, right? I can't understand why wanting to avoid this is discouraged. If the only reasoning is that it's the wrong data structure, then I can't accept that answer. Can you explain why adding this function is not a good idea with respect to the data structure in hand? In other words, tell me how the hammer can be improved without suggesting the drill. 
That three liner is not as immediately apparent as the suggested functions. You bring up the obvious: there is obviously a way to get the last value of an array. There's no need to prove it because we already know it exists. This is more to increase readability and reduce unintended gotchas.
If I had an option to work with magento again, or hammer nails into my skull, I think the nails would be less painful...
I believe as of today. I don't know if it's just a free version or what but it's showing up on my creative cloud account apps and I've never purchased it.
It's honestly what's got me looking at new jobs. I absolutely love the company I work for, but working with Magento is so god damn frustrating, especially after being coddling by Visual Studio/C#. Debugging that shit is a dream. Debugging Magento is a nightmare. 
There's no such thing as debugging magento, IMO. It either works, or you throw it away and start over because you'll never figure out why it didn't work. Out of all the systems I've worked with, Magento is by far the most anti-developer. As a result its also anti-user because it takes so long to develop anything of value that any extension or modules are hugely expensive. I don't think I've ever used revert so much on a repo as I did on magento...
What a piece of shit software owned by a piece of shit software company
Thats way to wide of a question, different CMS systems do different things better. But I do know one thing - anything but AEM. Or joomla. Or modx.
Honestly I agree 100%, I was blown away when I realized I had no way to step through an observer class I had written. At least that I’ve found. And even getting PHPStorm to catch my command line command modules I had run was a bitch and a half. Imo the biggest problem is seriously the lack of documentation. I have no idea what the “right” way to do things are, because the documentation often just has massive leaps or holes in it. It’s also so incomplete that any time I encounter some odd functionality, I have no idea why or how to fix it. For instance, right now I’m working on a module to create and add products to shared catalogs which are a part of the B2B module suite they introduced a couple months ago. I follow the documentation to the tee, even fixing some issues as usual along the way. My code “should” be working but I get a weird error about Category Permissions when trying to add products to the catalog. I scour the internet, no references ANYWHERE to this specific error, not even someone else on stack overflow. I open a support ticket with Magento to clarification, and all they do is quote the documentation and completely ignore the question I asked. Entirely rage inducing. 
Your experience has been mine as well using Zend Framework and Doctrine. Yet, I think single-stepping is both the best way to solve your problems and also the best way to learn how things work. OO seems to value ease of change over ease of comprehending the execution flow. In the "old days" of procedural code, you could watch something execute top-to-bottom and understand how it worked. But nested if's, spaghetti code, dependency loops and other nightmares led the industry to OO. "Proper" OO is all about passing the buck (or "messages"). Nobody seems to do anything. Layers upon layers, listeners of listeners, indirect patterns upon indirect patterns. Why? So that when you need to make a change, it's really clear where to make it, and there's low odds of you affecting something else accidentally. The complexity has been pushed into the wiring. A bargain with the Devil, maybe. What I have found, while debugging my own problems with the excellently written and documented Zend Framework and Doctrine projects, is that eventually something does the actual work. In the case of form code, my problem is almost always something to do with validation. Eventually I find the actual call to the actual validator with the actual logic and I can see what's going wrong. With PHPStorm and Xdebug, you've got two good tools there. Make heavy use of the "trigger after this breakpoint" feature and the conditional breakpoints. So, yeah, OO code execution is laborious to follow, but you'll get better at it. 
You joke, but when adobe took over CQ they overhauled the docs and made them usable. 
What other interaction with Adobe have you had on the web?
I'd disagree with the guy below. AEM is supremely flexible. The clunkiness comes from people that don't understand how things like supertypes or how SLING function. It's honestly really easy to do a site in AEM well. Consequently it is also really easy to pay someone to deliver you an absolutely shit site on top of AEM.
And nothing of value was lost...
Aem and joomla aren’t exactly in the same consideration set. Thanks though, I guess.
It still creates a brand new array of the same length as the original, just to get one value from it. Simply put, there isn't any alternative to these new functions that can match them in performance and memory efficiency. And I *have* been in situations where this amount of efficiency really matters, where it adds up to a difference of *seconds* in a request. The normal solution is to redesign how the data is structured and passed around, which often makes the code harder to read and more prone to mistakes. I'm thrilled to finally get an efficient solution in the form of these new functions.
Can you give an example of a tight loop where you're getting the first or last value of an array and `reset` or `end` are unacceptable?
Magento is, and has for years been, the most popular Java ecommerce solution written in PHP.
More Flash installs with the Ask toolbar!
Actually, being overly nit-picky, it's part of the Experience Cloud (which was formerly the Marketing Cloud before it was renamed a year or so ago). The [Experience Cloud](https://www.adobe.com/experience-cloud/overview.html) is made up of Advertising Cloud, Analytics Cloud, Marketing Cloud and apparently now the Magento Commerce Cloud. Really Experience Cloud is just a catch all for a bunch of web services Adobe's acquired over the years. Somewhat amusingly, Adobe Analytics is under the Marketing Cloud and not Analytics Cloud. In case anyone was confused.
Posted this on-list just now, chiming in here too. ----- I propose 2 functions *only* which I believe covers the use-cases that all 4 of these do and more, with shorter names, and the ability to discern whether the call succeeded or not. list($key, $value) = array_first($input); // $key will be null if the call failed list($key, $value) = array_last($input); // $key will be null if the call failed I have tested it with user-land functions and seems to work as intended in all success and failure conditions. Verification that it works as intended with internal functions is necessary but this seems a much better proposal to me.
Can confirm, went to cancel subscription and they instantly offered me it for $30/month instead of $59 or whatever it was. 
...go on.
Bob Weinand showed this example too: if ([$key, $value] = array_$first($input)) { // `$key` and `$value` are good to go } else { // handle the error case }
I laughed way harder than I should 
People need to realise they did not brought the software, Adobe is more than capable of writing something that can compete with Magento. Adobe brought the username, the market share , the expertise and the brand.
Really? I just know that in my experience Asove basically relies on the users to provide documentation. So many hidden functions and features you have to find for yourself or from other users. Coldfusion is a big example of this. 
I really hope they just kill it or completely replace it with something actually good. 
Just out super 984910
Oh yea. When CQ was just CQ 5.5, the only documentation that I could find was some sparse stuff from the original company and a few articles written in Dutch. Now Adobe has it muuuuuuch more fleshed out. It is probably because it is the center of their marketing cloud solution though. 
I don't envy you
I avoid Magento like the plague, I understand how it works but i simply haven't buildrnought of an experience and never whish to. For me the main turn of for the plataform is the fact that sometimes it just implodes, I remember a few years back I was still a young developer wishing to work with e-commerce and I was just installing some random plugin for a client - and kaboom , the plugin made both the front and the backed crash, and not even unistalling it helped, after some research i had to update something on the database and clean the cache. Now I understand someone more experiencdd could have known what happened more easily , but are hosts selling Magento ready shared hosting, that's a recipe for disaster.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Don’t know anything about the other two, but yeah, give Joomla a wide berth.
You also have to log in to read forum answers. WTH? 
Just write a class. Usually they are called Collections. https://www.sitepoint.com/collection-classes-in-php/
Been itching to make a preprocessor for this. There was a more modern implementation of the user-land code, floating around Twitter, which I plan to use...
&gt; autocomplete happier. only if you knew few characters of method name or object has not so many methods (not the case for scalars). So I don't really see how this is different from just calling function (assuming that all this prefix stuff are in namespaces, and you type just `map` instead of `array_map`). &gt; my code cleaner You already have few options to do the same. use function \{array_map as map, array_reduce as reduce}; $_ = [1, 2, 3]; $_ = map(function ($x) { return $x ** 2; }, $_); return reduce($_, function ($acc, $x) { return $acc + $x; }); Basically this is what method chaining does for you. It allows you to write function calls in same order as it will be executed which reduces cognitive load. I doesn't require all of that to be implemented as methods. Even more, by doing so, you will have much more problems in future.
Can someone explain to me why preprocessing is considered that evil in PHP? I understand that it will break static analysis, probably lead to confusing error messages and might become a mess when having multiple per-processors due to dependencies. But behind that I always found things like macros super convenient in other languages.
Can anyone explain to me how this compares to swoole? What I can see they do the same thing? But 1 is go the other an c extension?
&gt; I understand that it will break static analysis, probably lead to confusing error messages and might become a mess when having multiple per-processors due to dependencies. That's not enough? :P
You'd be surprised how understandable the error messages can be, if the generated code isn't garbage. One of the goals, of the preprocessor I work on, is to generate the simplest syntactically valid PHP 7 code I can, which is PSR-2/12 formatted. Then, when there's an error it's not horrible looking through the generated code to find the line where the error is happening. 99% of the time, the error is in using syntax now supported by the preprocessor macro/compiler, or it's directly visible in the superset syntax.
That's the best comment I'll read on Reddit today. 
Is that because it's so complicated? Sorry, my programming knowledge is limited. 
Huh, smart.
I never understood why PHP "needs" generics as long as the type system is as loose as it is. I understand the meaning behind, for example: `std::map&lt;string, int&gt;` in C++, because you can't just fill a `std::map` with random values, but in PHP there's nothing preventing you from doing `$foo = ["bar" =&gt; true, "baz" =&gt; "quux"];`. If you have a Collection class of sorts, I can see how you'd like to tell the language which type of objects you're putting in it, for various reasons (static analysis fx.), but since PHP doesn't _care_ what you put into an array (which is usually the underlying storage in a collection class), what is the actual point? Is it because we _want_ to have PHP move towards a more strong type system?
## TL;DR TL;DR: don't use this
&gt; Adobe sells a proprietary UI that sits on top of the open source libraries / frameworks Why are you emphasizing that the libraries are open source? That is a good thing, isn't it?
&gt; Is it because we want to have PHP move towards a more strong type system? Yes. Now that we're writing bigger and bigger programs in PHP, it turns out dynamic and weak typing cause more problems than they solve.
The question then remains, if PHP _should_ move in that direction, or if there are other already strongly typed languages better suited for larger applications.
More like over-engineered 
Yes, in an ideal world we would just switch to a more suitable language. In practice however, careers and business are built on PHP. You can't expect an entire ecosystem to make the switch to a new platform. So in practice, gradually changing PHP is the way to go.
That's the best README ever!
Recently. I remember seeing an email. Looks like it was around 05/15 
&gt; Magento, an Adobe company, is now part of Adobe Experience Cloud, bringing together digital commerce, order management, and predictive intelligence into a unified experience platform. And it’s the only commerce platform to integrate both B2B and B2C experiences. Now the entire journey — from content creation and analytics to marketing and commerce — is integrated into one cloud platform.
Same thing AB InBev did when they bought a Homebrew shop. They could have easily started their own, but instead purchased it through their disruptive arm, ZX Ventures. They just wanted the data, the customer base, and the name. 
No its just laravel is a extremely slow framework. Its a joy to code but its dog slow. This was an independent benchmark. **Codeigniter 3:** 2,245 requests per second, .38M memory. **Laravel** **5.3:** 331 requests per second, 1.53M memory [https://medium.com/@asked\_io/php-mvc-framework-showdown-7-1-performance-2da52ac9fcba](https://medium.com/@asked_io/php-mvc-framework-showdown-7-1-performance-2da52ac9fcba)
What does this mean for "the rest of us"? Customers don't know technology, customers know "BIG NAMES". What when they start to say: Why we don't have magento for our ecommerce? And.. But magento have... magento does...
The "problem" about this approach imo is that the error message is pointing at the correct line.
The issues I personally have with preprocessors (in both JS and PHP) are: - it might make assumptions about how future versions of the language are going to behave and pick the "incorrect" behavior ending up with weird inconsistencies - It adds another level of complexity both because of the compilation / generation step as well as in foreign syntax specific to the preprocessor used - No matter how clear the error messages are it adds more complexity debugging regardless. Not only because you have to correlate erroring lines in generated code, but also because you have to translate the possible fix to the pre processed code. 
calm down edgelord
You can go even further and make a whole namespace of functions that can assert your params: [https://3v4l.org/jdjtH](https://3v4l.org/jdjtH) Then all you do is call: `arrayof/int($ints);` at the beginning of the function block. Also check my ***evil eval*** for `arrayof/object()`
I am running multiple projects with such an integration. I'm using Yii 2 as the general backend / server / API framework and I integrate Yii into WordPress to access data models + render specific pages. It's working almost flawlessly, had some minor issues with yii taking over error handling during the WordPress run but truth is I never took the time to thoroughly solve it, it's probably fixable. Post back if you need help on how to do that exactly.
I know some people out there writing improper code without knowing just because it returns 0 and 0 is one of the acceptable results *"Oh it's OK, if something goes wrong it'll be 0 anyway"*. It shouldn't return 0 if it's wrong, should return the correct result/type or an error.
Yip, those are all good things to think about.
Capistrano is okay, but you'll end up writing everything in Ruby. If you're not competent in Ruby then don't choose this tool. Deployer is fine. A big bonus is that it's written in PHP, meaning your learning curve is smaller. Ansible is also fine. It's could be a bit hardcore though depending on how complicated your build process is. If you're just running `git pull &amp;&amp; composer install` then go with Deployer. If you have dozens of steps in your build process go with Ansible. If you love Ruby then go with Capistrano.
Magento CC
FV68s, thank you for your reply Will Deployer work with shared hostings? Or would we need to have dedicated host?
Not a comment on your library, but a comment on the Couchbase article you linked. What the fuck. It starts by defining a problem (distributed transactions) that is solved by two phase commit. Then upon realising that their DB doesn't support 2PC they completely mis-define what 2PC is in order to make it sound useless for the very thing it's designed too do, so that they can then claim that the fact they don't support it is an advantage because webscale. So instead you get their solution whereby dirty reads (ability to see data from transactions that have not yet committed - and may never do so) are the norm, and specific rollback code has to be written for each process and event to undo changes in the case of failure. With 2PC, all transactions are isolated until every service has successfully completed. Then the orchestrator just needs to publish a `commit prepared` message (or `rollback prepared` if any one of the services reported failure) to complete the distributed transaction. No dirty reads, no rollback code. Not to say 2PC is magic - clearly if you've interfaced with a 3rd party service then you can't expect to just send them a `rollback prepared` and instead would have to take a specific rollback action. But why do that for all of your internal services too? Or more to the point, why does the article claim that _you have to_ do that?
I can't see PHP enforcing strict typing any time soon, though. It seems that most languages that are used for web-development (save for .NET and Java) are loosely typed (Ruby+Rails, PHP, Python, JS (Node). Does it makes sense for scripting languages to be mandatory strongly typed? Personally, I don't think it does - it makes sense to provide types, but to not enforce the use. Using types makes tools like `phpstan` work (better), but I think that one of the strong selling points of PHP is that you can do this: &lt;?php $o = json_decode($str); print_r($o["haha"][0]["attrs"]); With strongly typed languages, you wouldn't necessarily be able to _unmarshal_ JSON data without having structures that define the schema strictly.
I've had issues with Deployer working correctly on shared hosting because of how it uses symlinks for the current deployment location, my host had restrictions around serving a symlinked directory. I ended up with a solution by moving and renaming directories but I wouldn't recommend this approach. If you find your host is the same and you come up with a nice solution, feel free to send me a message. 
Clarify please. Are you referring to the linked implementation or to your comment?
[https://github.com/ircmaxell/PhpGenerics#tldr](https://github.com/ircmaxell/PhpGenerics#tldr)
It doesn't say anything about performance optimizations for each framework. If your website has 100 requests per second, well done.
I use this stack. It's great!
&gt; since PHP doesn't care what you put into an array But my application care, and I'd like an option in my language of choice, to help me elegantly and efficiently enforce that need.
Deployer looks amazingly simple. I like. Question: so Deployer is basically running a bash script that will execute commands on a remote host? It reminds me of Phing but I've used neither yet.
Python actually has strong typing, and you can in fact do what you did in your example. Even statically compiled languages like can deal with arbitrary JSON without needing schema definitions. I recently used some [JSON in a D](https://dlang.org/phobos/std_json.html) program and it was perfectly pleasant.
That is a very nice selection of bookmarks you have
I'm sure we could create something like TypeScript that simply transpiles to JavaScript for PHP - TypePHP? I mean, that seems to be the _defacto_ standard these days to make loosely typed scripting languages strongly/strictly typed. If you can control everything about your application and have proper tests, wouldn't you be able to ensure that a, say, `ProductCollection` container would never contain anything but instances of a `Product` class? I think it would be _great_ to have a way in PHP to specify that an array is of a certain type, like: `array&lt;int, \Vendor\Class&gt;` which would restrict the array to integer keys with objects of `\Vendor\Class`, but in my opinion it just doesn't suit PHP unless it's optional, and this problem could easily be solved with a container that implements an `add()` method that checks for validity/type of item that you put into it.
I didn't know that Python has strong types. Golang, for example, requires (to my knowledge) that you create `struct`s with the format of the JSON string, containing the fields you want to extract. I don't know `D`, though.
&gt;3 year old repost
Nah, that's really not mandatory at all. It's an optional feature to offer a way to define schema definitions, say for a strictly defined protocol, but any sane JSON implementation should (and in my experiences does) offer a way to just parse the JSON dynamically into something like a nested dictionary. Regarding Python, it's dynamically typed (although there are optional type annotations), but yet it's strongly typed. It doesn't allow all those type coercions PHP allows.
For a while now. I remember a coworker of mine getting excited over it becoming free a week or two ago
Why are you not putting a unique key constraint on `uuid`?
Because he likes to "break" things.
 $uuid = (string) Uuid::uuid4(); foreach(range(1, 5) as $i) { dispatch(new CreateProductJob($uuid)); } hmm
Because UUID already stands for Universally **unique** identifier DUHHHH ^^/s
Yes, generics could be partly solved by writing a brand new class for every possible array impl you needed. Especially if you want the only way you can adhere to an interface to be by extending those infinitely possible classes. Suddenly it seems like we need some built in way to deal with that complexity. Something that could make our classes more generic.
Could you phrase that question in the form of a small wrapper library?
&gt; If you can control everything about your application In case of libraries, I would like to control the input received from a library user. &gt; unless it's optional Of course - type enforcing should be optional. &gt; this problem could easily be solved with a container that implements an add() method that checks for validity/type of item that you put into it Typed collections are easy to implement. There are far more use cases for generics. I'd rather focus on actual problem solving in my code then enforcing proper input types. Also, I hope that the language would do it more efficiently. But, PHP is Open Source - I can't demand anything from anyone about it.
Just a note on wording &gt; After the data import was done we had way too many rows in the database. In this blogpost I'd like to explain why that happened. The first sentence makes it sound like you had a space issue which might imply that the rest of the article is about storage methods to alleviate this. I think a better wording would be &gt; After the data import was done we had way more rows than we should have. Or similar.
I currently use [Magallanes](https://www.magephp.com/) for deploying to servers at work. It's nice and simple, offers the features I need, and is pretty straight forward to extend.
&gt; probably lead to confusing error messages `gpp` will be *so* jealous!
Sorry...the new reddit design has no opportunity for me to submit a text WTF? And edit didn't work either. I needed to switch to the old design...
Sounds reasonable enough. I don't think having generics and an optional strong type system would be a bad thing, to be honest. It could easily be implemented such that a `declare` statement would turn strong typing on, and require types on everything - it would make a lot of things better/easier.
7. Adobe cancels the product making everybody’s investment useless. ??
You can use [https://docs.gitlab.com/ee/ci/examples/sast.html](https://docs.gitlab.com/ee/ci/examples/sast.html). This job will basically create a container on which you mount your code and it will run the static analysis on there and later on create an artifact that will then automatically show all vulnerabilities on your merge request No need to install a phar or use composer, since the container you mount your code on does all the work. The only addition I would suggest is adding the following flag \`--env SEARCH\_MAX\_DEPTH=100\` (number can be lower) because by default it will only check 2 levels deep, meaning something like a symfony application will probably not have everything checked due to the files being located deeper in your folder structure.
CI is mostly meant to check for errors or codestyle issues. So commiting/pushing things is a bit harder to do. I would recommend to keep it that way. Use dry-run and diff to get some nice error output and do the fixes locally. You could also add a pre-commit hook to git that performs the codestyle fixing automatically.
Have you seen [Using PHP CS Fixer on CI](https://github.com/FriendsOfPHP/PHP-CS-Fixer#using-php-cs-fixer-on-ci)?
A unique constraint will, however, still prevent persistence of records with the same UUID. 
Note the `/s` at the end of my comment.
Why not use composer dev for it? `composer require friendsofphp/php-cs-fixer --dev` and then run `vendor/bin/php-cs-fixer fix index.php` What I do is in my composer.json I have a fix script and a test script. My fix script is being run everytime I commit files via git (via `.git/hooks`) And my test script is being run at CI This means by composer.json file looks like this "scripts": { "fix": [ "composer validate --strict", "./vendor/bin/phpunit --coverage-html=.build --coverage-text --colors=never", "./vendor/bin/ecs check -q src --level psr12 --fix", "./vendor/bin/ecs check -q tests --level psr12 --fix", "./vendor/bin/phpstan analyze src --level 7 --no-progress" ], "test": [ "composer validate --strict", "./vendor/bin/phpunit --coverage-clover=coverage.xml", "./vendor/bin/ecs check src --level psr12", "./vendor/bin/ecs check tests --level psr12", "./vendor/bin/phpstan analyze src --level 7 --no-progress" ] } The scripts almost like the same, but with that difference, that the fix, will actually change the files, and the test will only check files. Im not interested in a CI should actually fix any files, only check them.
Analytics are way more useful to Marketing than anyone who does actual work.
&gt;Breaking laravel Doesn't take much.
&gt; That's not enough? :P I really like to create messed up Frankenstein software. 
Ha, sorry - missed it. 
&gt; You can't expect an entire ecosystem to make the switch to a new platform. This. So much this. I don't really care about the language I use these days. But having to write something in a language that you don't use frequently leads to even a bigger (sometimes slower) mess. Much of the libraries you are used to in PHP are just non-existant in other languages or have gotchas or are incredibly over-engineered for the problem at hand. The PHP world has spawned tons of helpful **good** software. We went from re-inventing the wheel with homebrew frameworks moving past fully modular frameworks to frameworks that abstract this modularity and make the best coupling possible so you'd type 10 lines of code and you'll have fully operational spaceship that somewhat scales. I dig that.
https://i.redditmedia.com/6e276gbCi7rxcFFnS2inYUIXITcuPCorSDR4bGtH2Gk.png?w=879&amp;s=313e6f0ff52ea17be31cd0d1dd95a870
You can think of it like this. Digging through source, I think it’s all PHP native and doesn’t exit out to the shell, though. Deployer can be as complex as you make it, after all, it’s just PHP. I have it cloning to another directory, compiling assets, running tests, rsyncing, etc. And, FWIW, I love it. It worked really well for me out of the box, and I’ve slowly added tasks and configuration over time. I’m not on shared hosting, so no insight there.
I would go for ansible with ansistrano. Ansible allows you to specify much more than just deploy an app, it is easy to setup all environment with co figs for php, nginx, db of your choice etc. I use it for simple projects and more complicated and it works really well. I also set up gitlab ci to deploy app using ansible.
Thank you for fighting the good fight. The REST fad needs to die.
I've never used it on a shared host, so I can't comment I'm afraid. As a side note, I would consider moving away from shared hosting to a VPS. Your will get better performance and more control. As you progress you'll find you bump into less obstacles if you control the environment.
&gt; Can someone explain to me why preprocessing is considered that evil in PHP? Two words: ignorance. With a PHP processor I can use a nice, clean syntax for my PHP projects, something like: #define SWITCH switch( #define IN ){ #define ENDSW } #define FOR for( #define WHILE while( #define DO ){ #define ANDF &amp;&amp; ... &lt;?php BEGIN REAL A,B,C,D' READ D' FOR A:= 0.0 STEP D UNTIL 6.3 DO BEGIN PRINT PUNCH(3),??' B := SIN(A)' C := COS(A)' PRINT PUNCH(3),SAMELINE,ALIGNED(1,6),A,B,C' END' END' ?&gt;
First learn about security and password-hashing and preventing database injections, and user authentication. Then pick a project and get started. THEN learn by doing a project. Take it slowly. Learn as you go. Whatever you need to do, there will almost certainly be a PHP function for, so go find it. But only when you need it. You don't need to understand everything before you start, except the stuff I mentioned earlier. If you don't understand those, then I guarantee that everything you write will have major problems. (If you weren't a CS student I'd also have said you need to learn about design, architecture, documentation, specs, schemas and so on. But I'm assuming you know those). As for your choice of framework, I reckon that your first project shouldn't use one. Best to learn plain PHP.
This is to demo the `firstOrCreate` method, passing the same uuid multiple times was intended.
you are **creating** several things with the same id.... how does this make any sense.
Facade plz.
Ha, you're right! I just read the notice at the top when I sign in. I never realize they rebranded it because the URL is still marketing.adobe.com. Ahhh adobe.
"I like the idea of a dynamically-interpreted language, because it's easier as a developer. But what if we could add a compilation step? So long as we're not doing _linking_, then I'm still happy!"
Haha, you welcome! Cheers :-)
This is brilliant!
&gt; So in practice, gradually changing PHP is the way to go. Not. It's a way to go, which is not necessary in any context.
I consider type hinting very useful in interpreted languages. Especially when an application increases in complexity. 
It looks like the executable is a shell script. Run it directly, not with PHP: ./vendor/bin/phpmetrics --report-html=myreport.html
it's dispatching a job with the name "CreateProductJob" multiple times. That job then runs firstOrCreate
So then jobs where you call firstOrCreate after it has been created just error instead of getting first? This is the exact kind of response that shows how broken Laravel is right now. Their response to everything broken is "I've never run into this while programming my single page blog, you should hold it different". After heavily using Laravel for the past year, it's very obvious Laravel is years away from anything "enterprise ready".
Second this. php-cs-fixer fix --dry-run will exit with a non-zero status, so most CI stacks will catch that as a fail. Then it would be up to the developer to fix the failed build and recommit. There's also this little bash magic that will only run the cs check on changed files in the commit. https://github.com/FriendsOfPHP/PHP-CS-Fixer#using-php-cs-fixer-on-ci
then make an RFC for Generics? Or use an editor with inspection?
In pretty sure there is already an RFC.
You should enlighten us about these obvious problems.
You should be using locks to ensure that two jobs aren’t running their transactions at the same time. Unique constraints are only moving the error from the database to the application.
whats the difference ? its still trying to create same thing over and over with the same id 
Because it's just a demo showing how a certain method performs in an async context. The entire blog post is about it.
Why you don't just add it via composer to all your projects in dev dependencies?... It kind of work... 
firstOrCreate should return the record if it already exists instead of trying to create it
Thanks.
Thank you, that make sense. I wonder why the official documentation is wrong :\
Sure, I can come up with a small list pretty easily. Most of my complaints come from Eloquent and trying to work with large data sets. Forced to do disgusting hacks and plenty of DB::raw() to build queries because functionality like having a subquery in your from isn't implemented. I've seen queries that luckily work despite mergeBindings doesn't work correctly with subqueries. Pluck is the only way to build a query from a model without it creating an instance of every single record. Pluck then only allows 1 column. If you need to get an array of 2+ columns from a large data set, you will very easily run out of memory. Maybe I'm missing something, but I don't understand why eloquent timestamps are implemented in the models instead of just in SQL. Gets really annoying if you have multiple applications hitting the same table. Have to instead manually set up the default/on update timestamps. I also wish there was integration with cache or even redis directly, with eloquent.
Found the "enterprise developer" 
Make your life easier and look into something like laragon, docker or vagrant for your dev environment. 
solid dig. Maybe I was in too salty of a mood during my previous comment, but Laravel does have issues with things like even semi-large data sets.
&gt; If it takes you longer than you thought it would after reading the spec of what I asked for that's your problem, need to learn how to estimate times better. lol
Download and setup a custom stack based on your needs. Create different .bat files that start a whole stack based on whatever environment you'd like. Have multiple php-cgi pools depending on the chosen PHP version. Having multiple startup scripts (and a global shutdown script) allows for easy adding of extra services. Doing all of this allows you to learn how to actual tools work and how they are configured and maintained.
This does look cool but the pre-processor stuff, i'm not a big fan of it. we have it in JS, do we really need it in PHP?
To be fair I think the use of uuid adds some unnecessary confusion to the example. This would not have happened (or been a very edge case scenario) if a new uuid had been created for each record. For the purpose of the example I think using an arbitrary I'd like "42" for all records would have been clearer, as the use of a uuid generator can give the impression that we're generating unique IDs at first glance.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The problem in your exemple is not end() or reset() but using array_keys(). It copies the original array keys in a new array.
&gt; I'm thrilled to finally get an efficient solution in the form of these new functions. still curious for a tight-loop situation where `reset` or `end` wouldn't work
Yes but his concern is about the usage of array_keys() here not reset() and end()