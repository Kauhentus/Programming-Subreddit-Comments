is this echo chamber? Honest question. 
A text editor is usually just that - it allows you to edit text. Generally most useful text editors, either full applications or run on the command line, will give you code highlighting and good find/replace options, but not a lot more usually. The line between a text editor and IDE is blurred sometimes; generally vim is considered a text editor but it has functions for bracket completion, etc that might be considered IDE-like. A full IDE to me includes things like code completion, syntax checking, warnings about uninitialized variables, code formatting functions, and so on. Generally, a more extensive tool set. I personally use NetBeans but people have very strongly held opinions about the pros and cons of each. NetBeans has the advantage of being free &lt;troll&gt;and that it's not Eclipse&lt;/troll&gt;.
You may want to look into php Codesniffer to check your styling. Also, I hear good things about [php Mess Detector](http://phpmd.org/).
WHAT IS THAT I DON'T EVEN
iive been reading the documentation on how to make them, but its a bit confusing lol.
Good in terms of what? Employability and potential earnings? or just for interests sake? I'm going to assume you want to remain a web developer and are not looking at moving into authoring native apps for phones and the like. If it is employability and potential earnings you are looking for, take a look at job listings in your prefered area of employment. If it is just for interests sake there are plenty of languages around at the moment which are the "new hotness". From where I stand I think JavaScript is a good choice. I lead a small team of developers and finding and employing _good_ JavaScript developers is not easy. There is also a lot going on in the JavaScript world at the moment and coming to grips with it wouldn't be a waste of time. I have a personal mission to see what all the Ruby fuss is about next year - I have been putting off my Ruby learnings for a long long time...but it is hard to look past how much good Ruby devs can command in the job market. Beyond that, Python is quite nice. There are also a bunch of other technologies out there that are worth learning if only to be able to know what is being talked about should you run into them. CSS preprocessors (which are rediculously useful), CoffeeScript and TypeScript (which are worth at least knowing about). Hope that helps. 
Damn, I wish my framework got at lest 10% of that
Depends what do you want it for. Also, we don't know which languages do you already know. I suppose you know HTML and CSS by now. Then JavaScript is logical choice as it's closely connected to web development. (+ jQuery and AJAX). 
There is a very important reason that wireframes are made intentionally primitive. Without the visual clues of the hand-sketched look, your client may not be able to recognize what it is that they are being presented with. If your wireframe is too crisp, your client may view them as design specifications... no matter how many times you tell them otherwise. Having a hand drawn look helps the client to realize that this is a mock up used for refining user interface and the placement of page elements. The industry standards are Omnigraffle and Axure. http://www.omnigroup.com/omnigraffle http://www.axure.com/ For Free Open Source, see Pencil: http://pencil.evolus.vn/
Thank you very much, I'll have a look at ruby and phyton. 
So it's safe to say it will be around for awhile? 
&gt; table view is it 1999 again?
If there was any doubt about that: Yes, it's a pretty safe bet that Symfony will be around for the foreseeable future. Even without this funding, I would've been convinced of that. 
Not for page layout. Some data actually needs to be in tables, you know.
Any thoughts on how they will make money?
forms dont belong in to table (with some edge use cases they do, but javascript is way better there)
Hi, I wrote [PuPHPet](https://puphpet.com) to ... solve this problem. Using *AMP is not a proper solution because your development environment will never be close to your production environment, leading to "It works on my machine" excuses. You don't need to know Puppet to use PuPHPet, unless you require things that it does not support yet.
According to who? If semantically it's data that would be shown in a table, why is it bad to input the data in the same manner? I need to input data like this: Assistant 1 Hours: Date, Time In, Time Out 12/1, 8:00, 12:00 12/2, 9:00, 1:00 12/3, 8:15, 1:00 12/4, 8:45, 12:00, ... ... with an unlimited number of rows (added by javascript) for each assistant. I'm not just doing Field Name: Input Field Name: Input ... and just formatting it in a table.
You still shouldn't be using LIKE in this case. If you only care about things that start with "zen", use [SUBSTRING](http://technet.microsoft.com/en-us/library/ms187748.aspx). It'll grab the first 3 characters and compare them against your equals statement. You would only want to ever use a LIKE statement when you need to find an item with data in an unknown location in the middle of other data.
&gt; I’ve been thinking about what heuristic or rule-of-thumb one could use to easily tell which is which. So far I’ve been leaning in the direction of: “Can you create new instances without defining a service?” If you can, it’s a Dependency Injection container; otherwise, it’s a Service Locator. There are several variations on that prhasing: &gt; &gt; If you can create a new instance of a class without having to define a service, it’s a Dependency Injection container. &gt; &gt; If you have to define a service in order to get an object out of the container, it’s a Service Locator. &gt; &gt; If you cannot create a new instance of a class without defining it as a service, it’s a Service Locator. &gt; &gt; By this I mean that you should be able to repeatedly create new, discrete, independent instances of a class, without having to define it as a service in the container. &gt; &gt; ... &gt; &gt; I had a quick look at some containers in PHP land to see how well they fulfill the above heuristic; my assessment is as follows: &gt; &gt; - Aura.Di: DI Container &gt; - Laravel Container: Service Locator &gt; - Pimple (used by Silex etc): Service Locator &gt; - Slim (via $app): Service Locator &gt; - Symfony DependencyInjection component: Service Locator (?!) &gt; - Zend Di: DI Container
Laravel uses Symfony components, so if symfony dies there would have to be big changes to Laravel.
Laravel will also be around for the foreseeable future, if you ask me. It _might_ be a bit overhyped at the moment, but there's good reason for that. I think (and I'm just guessing here) some of the hype will die down, and Laravel will remain a solid framework with a big userbase. Laravel also happens to use a lot of symfony components, so the two can co-exist just fine. 
Np, but if you're serious about database driven webapps, check out cakephp
But that forces him to continually drink, even if he isn't thirsty anymore, and it forces him to use a coffee machine. 
Yes, I'm presenting data entered by the user (or pulled from a DB) in input fields. From the [W3C](http://www.w3.org/TR/html401/struct/tables.html#h-11.1): &gt; The HTML table model allows authors to arrange data -- text, preformatted text, images, links, forms, **form fields**, other tables, etc. -- into rows and columns of cells.
I use vagrant and still use my "proprietary" IDE/debugger just fine. In fact, I can use a ton of other tools as well that wouldn't necessarily be available on my host platform, all without installing a bunch of crap I only need for one project. Vagrant ftw.
Having read your proposal, it literally sounds like you're rewriting vagrant in a very weird way. You're going to find when dealing with the multitude of configurations that, maybe just maybe putting it all in a VM is not such a bad idea. install.sh = Vagrantfile Why reinvent this?
Thanks, I'll look at using SUBSTRING. .
if you only read my second post...
What is vagrant DNS? I looked it up but I'm not sure if I understand. I usually edit my hosts file so that I can access the vm. Does this allow me to skip that step? 
I wanted to try out **Axure**, but their site doesn't work, I can't click on any of the links. That doesn't give me a good impression of their product. **Omnigraffel** was nice when it came free with new macs, but now it is a bit out of my price range. Pencil seems to be really lacking in features. And rather difficult to use. What about the web-apps out there ? 
Huh? 
Awesome video! One question though: why does she use dependancy injection for the $pdo instance when she could just use $container['pdo']?
Probably enterprise support. That's usually how OS projects make money. The software is free, but big companies are happy to pay lots to get their questions answered nearly instantly and get their bugs resolved. It's often cheaper to pay the guys that make the software to figure out the issue, than it is to pay your own developers to stumble around and try to fix it.
http://stackoverflow.com/questions/3403644/what-is-the-purpose-of-xsd-files This post may prove useful to you. I think that you may have to go about generating this XML yourself, basing it on the XSD, I don't think any amount of Googling will truly help you actually create that XML. Unless you don't know how to create XML from PHP. In any case, good luck.
The mug is fun, and you should be rewarded.
Try LINES TERMINATED BY '\r\n' Or whatever escaped version you are using.
Is it just me or is the audio very low and bad? :/ Oh god... you are using the depreceated mysql_ extension... hoooray! another tutorial on this great API...
This is why god invented downvotes.
yes the XSD is meant for validation but, hey guess what? When the schema is complex (and in real life this is a reality, usually beyond your say), we could use it to produce a set of classes that represent the structure and data types of the XML. With these classes we could instantiate objects, populate them with the data in a structure that **actually validates the schema!** Then simply serialize the objects and voila!! Others have implemented such approaches: * [Post A](http://stackoverflow.com/questions/6013561/how-to-serialize-a-class-generated-from-xsd-to-xml) * [Post B](http://stackoverflow.com/questions/8308500/programatically-serialize-class-to-xsd) * [Post C](http://forums.asp.net/t/1424663.aspx) I was googling because I fail to acknowledge that at the end of 2013, PHP does not cover this :-( Thanks for wishing me good luck. I think that I am going to need it.
Thanks? I'm just making sure that a few moments after I send it that I don't realize I've fucked up the code somehow.
You had this account for 4 months and this is the first time you've used it?
Having both `or die` and `goto` makes up for those flaws.
The `or die` simply catches if the coffee machine couldn't refill the mug. The `goto` doesn't solve the fact that he'll be forced to "sipFrom" the cup until it's empty, regardless of thirst status.
While Faker is excellent and should be recommended, I see a slight difference here: Faker gives you completely random data, while this creates a whole user to pretend is real. The female users have female faces for their profile pic, etc. That is kinda cool, but certainly something you could do yourself with arrays of predefined data.
Why would you pick something like that curl package when there are considerably more robust options around? * No unit tests * 242 installs to date * No stable. Latest version is v0.2.0 Or you could use something like [Guzzle](https://packagist.org/packages/guzzle/guzzle): * Has plenty of unit tests * 771,631 installs * Current stable: v3.8.0 That said, for the usage you have shown you could have simply used file_get_contents() just as easily. Everyone that writes a tutorial for PHP has a responsibility to recommend quality tools, with tests and proven stable versions. Recommending people use unknown, untested code when something else does the job perfectly is just reckless and unnecessary. 
Do you even inject bro?
I don't understand the relevance of this question.
Try Prototyper http://www.justinmind.com/prototyper/download
What if you compare to CodeIgniter though?
Thank you so much for your thoughts. The part about including the shy ones, as well as the bit about people talking about their work, no matter hows small, are two things I hadn't thought much about. I wonder about the 5 min. talks though. In my opinion, one could benefit more from listening to a longer, more in-depth talk. I mean, what can you possibly explain in 5 minutes?
Thats true, however even though i havent looked into those scripts in depth I would assume they depend on the user computer time to make the calculation, which means if their clock is off, the information on your website would be off, and thats not always desireable. Performance is subjective too depending on your cache policy and so on, so I guess each has its use cases and pros and cons as with everything else :)
Try removing the first comma as well as the last.
That's an interesting thing to consider. CodeIgniter, backed by the ExpressionEngine folks, had great backing, until it didn't. I suppose that might be possible here too. The more relevant comparison might be to Zend Framework, which also depends on a company backed by venture capital.
My understanding of the difference has always been: * Service Locator: You ask for something to fulfill a need. * Dependency Injection: You declare what you need, and someone gives you something to fulfill it. The difference in practice would look something like: &gt; [The dependent object describes what software component it depends on to do its work. The injector decides what concrete classes satisfy the requirements of the dependent object, and provides them to the dependent.](http://en.wikipedia.org/wiki/Dependency_injection) class A { public function dependsOn(\InterfB $b, \InterfC $c) { $this-&gt;_b = $b; $this-&gt;_c = $c; } public function doStuff() { $this-&gt;_b-&gt;doStuff(); $this-&gt;_c-&gt;doStuff(); } } versus &gt; [The service locator pattern [...] uses a central registry known as the "service locator" which on request returns the information necessary to perform a certain task](http://en.wikipedia.org/wiki/Service_locator_pattern) class A { public function doStuff() { $b = \Service::get('InterfB'); $c = \Service::get('InterfC'); $b-&gt;doStuff(); $c-&gt;doStuff(); } } In my mind, the heuristic would boil down to a single point: * Does the created class have to call into the initializer (SL/DIC) to retrieve its dependencies, or does the initializer provide the dependencies to the created class? If I can remove the initializer from the codebase and instead provide the dependencies directly to a class for testing, it's Dependency Injection. Otherwise, it's just a service locator on some level or another since the created class is using your initializer to locate concrete implementations, already-initialized implementations, and whatever else.
When I worked at Zend they would talk about the fact that you don't want to be valued as a services company. To get a good valuation you want to be valued as a product company. So I would guess that must have some money making ideas for products. I was wondering if anyone has any theories on what product that involves Symfony so deeply that will make money.
Sorry bro.
Yeah, I don't see that ever really changing. Frameworks or third party libraries may provide this kind of functionality, but PHP always has been a blank slate at its heart. Maybe you'll end up being the one to create such a library in the end.
So essentially your creating an abstraction like Activerecord, only for the entire stack: the database, the web server, the application server and OS file/software management. I think it could work and it could be very useful. Just make sure we can drop down and override the settings when need be. It makes it easier to test things.
Nice lib ill add it to the post! Are you the author?
Site's getting hammered a bit so here's the quote from Rasmus today: &gt; Well, there were other factors in play there. htmlspecialchars was a very early function. Back when PHP had less than 100 functions and the function hashing mechanism was strlen(). In order to get a nice hash distribution of function names across the various function name lengths names were picked specifically to make them fit into a specific length bucket. This was circa late 1994 when PHP was a tool just for my own personal use and I wasn't too worried about not being able to remember the few function names. Clearly in retrospect seems like a poor decision, but it really does help explain a lot of the odd function names that PHP gets criticized so heavily for!
Sometimes Imgur is slow, down, or overly complex (and lets not even talk about the comments there). So, I built a clone of what Imgur started out as. It's a Symfony2 app, took about 2 total days to write, uses Redis for caching, Postgres for long term storage, and Resque for image manipulation. If it goes absolutely nowhere, I'll open source it so others can learn or suggest improvements. What are your thoughts? Thanks!
Well that's nice and all but you're just showing us an app that was built in PHP, but other than that has nothing to do with PHP. Please repost once you open source, or if you write a blog post detailing challenges or process while you were building your app.
Cool, sounds good. 
"the very thing that keeps PHP stable is the fact that it does move slowly" &lt;-- That is the very thing that is killing php now. "Facebook did not implement hhvm for the good of everyone else, they did not do it to solve your problems or even to solve the problems of PHP, but to solve problems they have, and pretty much only them" &lt;-- they pushed php beyond its limits, php crumbled. unlike twitter(moved to scala) they improvised php runtime. "he put forward the hypothesis that forking PHP would be destructive act;" &lt;-- i would say that the php core team (except sara.. + few others) has done enough to put php in this (current) state. "Jump into the chasm, if you wish, I'll keep my feet firmly on the ground" &lt;-- i am jumping !!! The current php implementation is fast than ruby /python (they do have unicode support and php dont(i believe)) The main reasons why i will support hiphop *HHVM because of all the new features and the leadership *I'm sick and tired of internals and Zend engine moving so slowly *At last there is a solid alternative, and yay we get optional strict typing and collections! for the performance issue , most of the php apps that everyone design are basically CURD apps (so the only issue will be with db interaction ) if you try to do something other than that your app wont perform fast enough. 
Cheers. Nope not the author. 
plz advise on advising advice.
it's so easy to camouflage plagiarism though in scripting. how do these sites actually work? to make a regular expression snippets inclusive enough to account for little variations would require tons of memory, wouldn't it?
People complain about PHP functions all the time and they want the PHP developers to fix it, but why not take the opportunity to develop wrapper classes that actually do the job of normalizing the parameters and adding functionality all at the same time? Frameworks have done some of this job, but I can easily see someone releasing a "utils" namespace that contains every imaginable fix for these pain points. Something like this would be similar to Java's StringBuilder class, which adds functionality to the existing String methods.
If somebody wants to disguise code they can do it well enough that it can't be detected. I'm mainly just trying to prevent blatant copy/paste or copy/paste/change variable names. 
read before posting
I agree with a lot of what you're saying. It is very important to reproduce a consistent environment for testing/staging/production. Reproducing the full-stack (incl. the MySQL &amp; PHP runtimes) is great for consistency and predictability. And vagrant is a great tool that removes a lot of the hassles related to PHP development in OSX. Personally, I spent 4-5 years working in Debian VMs on OSX because it seemed easier and more reliable than the fooAMP stuff. But it would be untenable to say [warning: straw-man], "We should put all the energy for build-management into Vagrantfiles" or "We should put it all into puppet scripts." As a simple example, I've wanted to prepare Vagrant boxes for my own development tasks, but I've held off because... I couldn't use it on my own servers! (We've outsourced our sysadmin work to a group that uses a different virtualization stack.) It would take some gall to encourage other developers to retool their processes when I can't do that myself. More generally, I think it's a basic characteristic of open-source communities that many people want to choose their own mix of tools and processes. (This is a distinct contrast from commercial and in-house projects where one can centrally dictate the tools and processes.) Let me try to phrase the problem in a different way. I need to write some scripts for setting up demo-sites and integration-tests with different configurations -- scripts that check out code, create databases, enable web-sites, and create config files (in various combinations). I want to be able to share the scripts with other people in my community (so that they can quick-start dev; can run integration-tests in diff configurations; can prepare patches against current code; can deploy/test in new environments). Based on experiences talking to other people in my community (at conferences, hackathons, trainings, forums, etc), I suspect that likely collaborators break down into three groups -- ~1/3 would be game for Vagrant; ~1/3 could do with some prodding/persuasion; and ~1/3 would have some significant issue. That's OK but not great. The solution is *loose coupling*. I want to code to the least-common-denominator (bash, Apache config, nginx config) because that's ample for the problem, and it would be easy to share and adapt the resulting scripts -- except that a few technical details change everywhere (ie the location of Apache config files, the permissions of the www service principal, and the URLs). It feels like extraneous coupling to say "You can't run this script unless you've built the *entire*stack* according to *my* standards." Creating loosely-coupled scripts doesn't preclude writing a Vagrantfile -- in fact, it's easier to write a Vagrantfile (or puppet-class or chef-recipe or whatever) when the application vendor gives you loosely-coupled building-blocks. And writing that Vagrantfile will still be quite valuable for the reasons you describe -- but I just don't want it to be mandatory.
No need to waste your time creating a wrapper, go to Python, you will save some kittens.
I'd love to have an option like `set_string_handler` (for strings, arrays, integers, etc.) that would turn every string into an instance of the chosen object. For example: namespace MyScalars; set_string_handler('MyScalars\\String'); class String { protected $value; public function __construct($value) { $this-&gt;value = $value; } public function getLength() { return strlen($this-&gt;value); } public function __toString() { return $this-&gt;value; } } Instead of changing ALL my code to this: $username = new String("celtric");
great, now i have to fix the language myself while working on what im working on this is not how programming languages are supposed to work 
-1 for using procedural methods instead of the DateTime object. $today = new DateTime(); $next_week = $today-&gt;add(new DateInterval('P1W')); echo $next_week-&gt;format('m/d/Y'); // echos ---&gt; 12/24/2013
You can produce a solution by yourself by creating a XSD parser with [Dissect](https://github.com/jakubledl/dissect), for example, or even [JMS Serializer](https://github.com/schmittjoh/serializer) and then create the XML file based on the definition you parsed, using the [Faker](https://github.com/fzaninotto/faker) library while waliking the structure of the schema. I know some old XSD parsers exists in PHP but I don't know where to find them.
Just change type: 'GET' to type: 'POST'. Your rewrite rule will handle routes with post data just fine. 
http://www.youtube.com/playlist?list=PL2407F4EE0530B251 - Php Security playlist, very good stuff.
I thought about doing this so many times over the years, but then I kept thinking "Wouldn't it make more sense for them to just fix then language itself?"
This kills the programmer
For the deployment teams, it's critical that their testing/staging/production environments be aligned. However, when doing core work in a big open-source ecosystem, the goal of aligning all the development environments with all the production environments would be... difficult? daunting? impossible? a fool's errand? Since it's not feasible to dictate every aspect of the stack, the next best thing is to make it easy to *validate* the stack by running a comprehensive test-suite. Therein lies my area of concern. As part of the testing/development process, I want an ability to spin-up more DBs and virtualhosts (without coupling the tests to a particular virtualization container -- and without the accompanying overhead). PuPHPet's GUI looks like a nice way to define combinations of Apache/MySQL/PHP. Nicer than learning puppet. I could definitely see myself using it as a starting point in building a Vagrant box (and showing it to others so that they can update/roll their own). But for my use-case, there's a fair amount of work beyond that. I don't think the amp and PuPHPet approaches are mutually exclusive. When a developer downloads some PHP code, he might have a personal policy of always adding a new vhost to his MAMP. Or he might have a policy of launching a Vagrant box based on PuPHPet and sharing the source tree (~/src/new-app =&gt; /var/www). In either case, he currently needs to make a number of choices and take steps to make this personal policy happen -- he needs to choose a DB name, DB password, URL, etc. My point is that those steps should be abstracted. For one developer, "amp create" means "update MAMP's configuration"; in another case, it means "tweak the PuPHPet configuration". From my perspective, it shouldn't really matter. The end result is that 1+ DB's are created and 1+ virtualhosts are created, and the rest is administrativa.
Python is even worse
Of course. 148 names in the standard namespace, that is just horrible. Most of these names are Exceptions, but anyway. Or did you mean "Significant whitespace makes python totally unusable and it should die in a fire!"?
Poor practice. Should be using the DateTime class. $d = new DateTime('now - 2 years', new DateTimeZone('europe/london')); echo $d-&gt;format('Y-m-d'); And so on.
you should look into some of the admin themes. [this](http://processwire.com/talk/topic/537-release-moderna-admin-template/) is the one i use. as far as the page layout view goes they claim its to give a good visual representation of structure while being scaleable for larger sites. i will admit it could look better visually but nothing i couldn't do myself. I haven't gotten into the custom modules quite yet, to be honest i don't really need them. the website i am using this for is fairly simple with some basic blogging. i was surprised how easy it is to template things. for example, my blog template that shows all the blog posts on one page looks like this.. &lt;?php include("header.php"); ?&gt; &lt;? foreach($page-&gt;children as $post): ?&gt; &lt;div id="BlogBlock"&gt; &lt;h3 id="SmallTitle"&gt;&lt;a href="&lt;?=$post-&gt;url?&gt;"&gt;&lt;?=$post-&gt;title?&gt;&lt;/a&gt;&lt;/h3&gt; &lt;span id="meta"&gt;Posted on &lt;?=gmdate("M/d/Y", $page-&gt;created)?&gt; - &lt;a href="&lt;?=$post-&gt;url?&gt;"&gt;View Single Post&lt;/a&gt;&lt;/span&gt; &lt;?=$post-&gt;body?&gt; &lt;/div&gt; &lt;? endforeach; ?&gt; &lt;?php include("footer.php"); ?&gt; and that's it. cant get much simpler i say. no convoluted templating logic or any of that, just straight php short tags. im just blown away how easy it is to just dive right into without researching for hours on how to develop in it, which is what turned me away from most other systems. not to mention the control over what page does what is fairly granular. if i want a single page to have a completely different layout from the rest of the site, i can with absolutely zero effort.
I did read and I saw only dummy posts from you. &gt;Table is for presenting data What type of data ? Data can have many forms. (*see my previous post for hint*) &gt;forms dont belong in to table (with some edge use cases they do, but javascript is way better there) In your opinion, maybe, according to the specs however, a form can be a child of a table and the result will validate. You tried to be interesting and look smart. Maybe next time will work.
SensioLabs Insight?
it's awesome for those using Symfony and for the ones that uses Drupal too...
The next version will feature a new default admin theme. I think it looks way better than the old one and it has alot of usefull features like "quick add" or a fast navigation to fields/templates. 
still you cant read. &gt; In your opinion, maybe, according to the specs however, a form can be a child of a table and the result will validate never said it isnt valid, lol
Really basic overview here, but you lay out what you expect from your models/controllers then code to make it happen. Say you want to create a users model and each user must be assigned a fruit, you would write a test checking whether each created user has a fruit assigned, then write the code to make it happen. As long as the test passes when you've finished coding then you can be assured each user will have a fruit in future. This also has the added benefit of you change your model later which breaks this behaviour, the test will fail. As long as the test continues to pass you can be assured the user will always be assigned a fruit.
/r/london_forhire/ Post as [recruiter]
No patch update, once again...
Using bitwise operations, you can enable/disable certain parts of your code. These are often used in permission systems such as explained [here](http://blog.code-head.com/how-to-write-a-permission-system-using-bits-and-bitwise-operations-in-php). Something like this should work (not tested): &lt;?php $flags = ['foo' =&gt; 1, 'bar' =&gt; 2, 'baz' =&gt; 4]; function foo() { echo 'Foo!'; } function bar() { echo 'Bar!'; } function baz() { echo 'Baz!'; } $enable = $flags['foo'] | $flags['bar']; if ($enable &amp; $flags['foo']) foo(); if ($enable &amp; $flags['bar']) bar(); if ($enable &amp; $flags['baz']) baz(); # Should print: 'Foo!Bar!' Edit: I think you'll always need a few if statements. Maybe there are fancy shenanigans to accomplish it in an other fashion. 
[SPL](http://php.net/spl). I particularly like [SplFileObject](http://php.net/manual/en/class.splfileobject.php).
This is actually a common reaction I see to test driven development. Some people like and some don't. I happen to like it. I'll attempt to sum it up. First benefit: Basically the normal development method is design-&gt;development-&gt;testing. However in real life, what happens? Testing usually always gets short changed. You can imagine the impact this has down the road. Test driven development is an agile method that takes the testing part and incorporates it into the development cycle. Besides the fact that it makes your code better and considerably less buggy, it also helps you forget about code after you're finished with it, as you have hundreds of tests showing passed that proves your code does what it does what you say it does. This is also helpful from a business perspective as a product owner can see that the program works and run the test cases themselves. Second benefit: Finding errors. When you add on to an existing code base or make a change, it was a pain to make sure your change didn't break something down the line that you didn't anticipate (unless you just don't care and made changes regardless). However, if the developer already made tests, you can just run them to see if everything works, and then if there is an error, you can see where the problem is coming from. This helps immensely as perhaps there is a bug that would have taken you a week to find you can now find in a matter of minutes. A 'seasoned' test driven development will write a test case (to fail) before they even start coding, but since you're starting out and I don't want to overwhelm you, I recommend writing the test cases after you develop a feature until you get the hang of it. The crux of test driven development is how you write your test cases. You don't want to create brittle test cases because they are all but useless. I can into this in more detail if you're interested. 
Where can I find a preview?
Being primarily a Zend Framework developer I use the [event manager](http://framework.zend.com/manual/2.2/en/modules/zend.event-manager.event-manager.html) for this purpose. Instead of embedding the new code directly at the integration point I trigger a named event on the event manager. Next, from the appropriate module bootstrap, I create an event listener (class or closure, pick your poison) with the code I wish to execute and attach it to that named event. The listener attachment is wrapped in a if statement that checks the module configuration to see if the feature should be enabled. I don't have one of my own examples readily at hand, but for illustrative purposes take a look at the [ZfcUser\Service\User::changePassword method from the ZfcUser module](https://github.com/ZF-Commons/ZfcUser/blob/master/src/ZfcUser/Service/User.php#L129). The action of changing a user's password is surrounded by calls to the event manager, which allows us to hook into that workflow either before ('changePassword' event) or after ('changePassword.post' event) the user's password is actually changed. Say, for example, I wanted to augment ZfcUser to send an email to the user when their password is changed. In a separate ZF2 module I would attach an event listener to that changePassword.post event in the ZfcUser\Service\User class: // This code lives in the onBootstrap method of your module's Module class $config = $e-&gt;getApplication()-&gt;getServiceManager()-&gt;get('Config'); $isFeaturedEnabled = isset($config['my-module']['feature-name']['enabled']) &amp;&amp; $config['my-module']['feature-name']['enabled'] == true; if ( $isFeatureEnabled ) { $events = $e-&gt;getApplication()-&gt;getEventManager()-&gt;getSharedEventManager(); $events-&gt;attach('ZfcUser\Service\User', 'changePassword.post', function($e) { $userService = $e-&gt;getTarget(); $userObject = $e-&gt;getParam('user'); // Code for sending the email goes here }); } To enable it the module's module.config.php file would look like this: &lt;?php return array( 'my-module' =&gt; array( 'feature-name' =&gt; array( 'enabled' =&gt; true, ), ), ); Two caveats: * This method works for me and my architectural style, but obviously YMMV * The code snippets above weren't pulled directly from a working application and so may not work if you just copy-and-paste it. This example is rather ZF2-specific, but there are [plenty](http://auraphp.com/packages/Aura.Signal/1.0.2/) [of](http://symfony.com/doc/current/components/event_dispatcher/introduction.html) [other](https://github.com/gplanchat/php-event-manager) [event](https://github.com/fruux/sabre-event) [libraries](https://github.com/igorw/evenement) out there
You first want to make a test to fail to prove that your test fails. We're all human and sometimes we can make tests that always pass -.-
Yeah, I know. I mean I wrote modules for bulk page editing based on the selector API (edit field x &amp; y for all pages with template=z), setup modules (doing all kinds of I-do-this-for-every-website-tasks), mailing engines, …
There is a thread here :http://processwire.com/talk/topic/4650-new-processwire-admin-theme-on-dev-branch/ You can simply go to the github repo and choose the dev branch. 
For testing PHP I like Behat. You basically define methods in a english like language called 'Gherkin' (named after the pickle, because your test cases should end up being green). An easy example from their website is: Scenario: List 2 files in a directory Given I am in a directory "test" And I have a file named "foo" And I have a file named "bar" When I run "ls" Then I should get: """ bar foo """ Consider 'Given' to be an if statement with 'And' a continuation of it, the code makes sense. What's great with Behat if you run this code it will give you errors because you never defined these methods, so it will create a PHP function for you that you can fill in. http://docs.behat.org/quick_intro.html 
Probably more like "I am a fan of PHP therefore everything else sucks"
Having a bad design at first of bad function names is totally understandable, what I don’t understand is why it hasn’t been fixed. When PHP5 when out, they could have normalize all functions, create aliases or wrappers around old ones and deprecate them. Then, eventually, they would get removed. It can’t be that hard to do!
&gt; I want to code to the least-common-denominator (bash, Apache config, nginx config) because that's ample for the problem, and it would be easy to share and adapt the resulting scripts -- except that a few technical details change everywhere (ie the location of Apache config files, the permissions of the www service principal, and the URLs). I think that's a laudable goal, but one reason we have a multitude of provisioning tools (puppet/chef/ansible) is that bash scripts and simple tools like that (of which I'm a big fan) don't cut it when you need to handle details like where the apache config file lives, and what its called on this distro, etc... To me, it seems your reinventing a wheel here. 
First: if (!isset($_COOKIE['ooo_baby_cookie'])) { header('Location: http://www.example.com/'); exit; } else { $cookieValue = $_COOKIE['ooo_baby_cookie']; if ($cookieValue == 1) { header('Location: http://www.example.com/1'); exit; } elseif ($cookieValue == 2) { header('Location: http://www.example.com/2'); exit; } elseif ($cookieValue == 3) { header('Location: http://www.example.com/3'); exit; } } Second: setcookie("ooo_baby_cookie", "1", time()+3600);
Yes, you need to change it to post. The script won't have the query string. GET was the wrong method to use anyway, use POST if you're changing something permanently, that is, storing it in the database. See this answer for a good explanation: http://stackoverflow.com/questions/46585/when-do-you-use-post-and-when-do-you-use-get
PHPCD = PHP Copy/Paste Detector
 &lt;?php session_start(); switch ($_COOKIE['page']) { case 1: $page = 'page1.php'; break; case 2: $page = 'page2.php'; break; case 3: $page = 'page3.php'; break; default: $page = 'splash.php'; break; } header('Location: ' . $_SERVER['DOCUMENT_ROOT'] . '/' . $page); --- &lt;?php session_start(); setcookie('page', '1'); //Will expire at the end of session setcookie('page', '2', strtotime('+30 days')); //Will expire in 30 days 
Awesome, thanks!
Cheers, looks better yes. Still could use some proper information architecture but I get why they went with the folding approach; it's the most scalable.
Are you also looking for remote developers, or do they have to be on-site?
Ever found yourself working on a client specification for a feature, everything works well, client is happy, you start developing the next feature then the next feature and so on... After 2 - 3 months the client asks that feature1 should be modified to cope with the new specification. You make the necessary modifications ship it and you're happy, but after a couple of days the client comes back with a bug you introduced to a seemingly totally separate feature. You wake up at 02:00 AM to quickly fix the bug, after you're done and about to ship it in production you realize that there are 2 more bugs in the original feature1. You fix those too and finally you're happy. Now the client wants 5 more additional features and the whole story becomes even darker, the development fails to meet the deadline, because of the seemingly unrelated bugs that keep popping up in various places. TDD when implemented correctly along with integration tests, helps to solve this problem and meet deadlines. TDD is not just about how are you writing the code, it's more about how you change your thinking when you put tests first before code. The tests shape the code and your thinking of how you write that code, because if you can't test it, you're doing it wrong.
There may be a way to do that using these functions but I'm not sure and it's likely you'd end up against a brick wall trying to redefine a native type. http://no2.php.net/runkit_function_redefine http://www.php.net/manual/en/function.override-function.php
I would upvote this twice if it would be possible.
The end result of writing your code first and then tests later, and practicing TDD, *should* be the same. This requires some discipline, however. How do you ensure that the code you are writing right now is testable? * You're disciplined enough to know what makes code testable or not, and write it testable the first time, even if you don't write tests at that exact moment * You write tests for it as you write the code. If you're not 100% disciplined enough (and even if you are) you will most likely write some code that will require refactoring later on when you write your tests. Writing your tests up front minimizes this need for refactoring existing code, since you're refactoring at the time of code creation. To look at it another way - if you need to refactor untested code to make it testable, by definition you're changing its behavior around (even if the end result is the same), potentially introducing new bugs into your codebase as you write tests. Yo dawg I heard you like to write tests so I put bugs in your code while you test your code so you can write more tests later? As you write your tests you may very well stumble upon some bug you didn't realize existed when you wrote the code. You write a test and fix the code, but now methods that depend on that bug's results fail - but they don't have tests either! TDD is to prevent turtling all the way down.
\DateTime ;)
People who used PHP several years ago still don't know about Composer, namespaces, user-land efforts to bring us all inline with a common style guide.
I'll go with a rarely-used one: [__halt_compiler()](http://www.php.net/manual/en/function.halt-compiler.php). It does as it says, and so you can place non-PHP code after it with no ill side-effects; one way I've seen this used is to bundle installation data inside an installation file.
IMO that's way too wordy for a mug, either the letters are going to be too small to read, or they're going to wrap all the way around the cup and you'll have to continually twist the mug to read it. I'm pretty sure you could get the same point across with much less code, or even pseudocode. I know I've seen several mugs like this already (ThinkGeek?), and they're all basically 3-5 lines max, with just a few words per line. Currently you're somewhere around a _[Seasoned Professional](http://www.ariel.com.au/jokes/The_Evolution_of_a_Programmer.html)_ (maybe even _Master Programmer_), though I'd suggest something closer to _Experienced Hacker_.
Because as your project grows, the complexity increases. You will not always know how a change in one corner of your code will effect another corner. You might thoroughly test the bits you change, but do you want to manually test the entirety of the project each time you make a change? Quite soon you will find yourself afraid of making to bold of changes because you know it will effect too many existing bits of your code. With tests, you can be as bold as you want to be and immediately know the impact. Also, test driven design enforces good coding practices. Code that is easy to test must be highly decoupled from it's environment. Decoupled code is good code. 
Because that worked out so marvelously for Python...
Fair enough. I will do in the future. 
Definitely Composer if we talking about ecosystem.
[Filter](http://php.net/filter). I'm constantly surprised how many people I still see using GET and POST superglobals. 
Well, I was looking more for feedback than anything...
I was looking for feedback, your thoughts, if there is something I could improve on, etc. Never said it was newsworthy, this is not a news sub or did I miss something? Edit: Well, I guess the title does say "latest news" but the sub has a lot of request for help/feedback, not just news.
Having tests are cool. Using our good-old-friend php-simple-html-dom-parser with composer is also good. congratulations for your good work.
I have been developing in a complete 'bubble' for like 8 years. Went to PHPTEK last year and got introduced to Composer and tons of other awesome tools. I feel like I'm a brand new developer!
Ugh, I switched back to Python 2.7 all because of this.
Doesn't this seem a little extravagant? You need an external fake mail server so you can test whether you sent an email? It's got its own API? Your tests are now dependent on another daemon running? You need dependency injection. class Controller_Email Controller_Email(modelfactory, emailer): this.modelfactory = modelfactory this.emailer = emailer action_sendemail(view, request): this.emailer.send({ to: request.get("to"), from: request.get("from"), subject: request.get("subject"), body: request.get("body") }) view.redirect('/') In your test you just subclass the `emailer` and assert that `send` was called with the right parameters. In production you use an actual emailer. Author says "It is much simpler to test emails this way, then to dig into internals of your email sending library and defining mocks," but this is clearly false to me. How is this hard? $mockEmailer = $this-&gt;getMock('Emailer', array('send'))-&gt;expects($this-&gt;once())-&gt;method('send') -&gt;with(array('to' =&gt; "...", 'from' =&gt; "...")); It's two lines of code rather than setting up a daemon and so on? Further, it'll be a *lot* faster. Sometimes it's even easier, for example if your emailer is a client to a queue system, when you often do have, for example, an offline queue that you can concretely instantiate, so that you aren't actually ever mocking anything: function test_POSTing_an_email_queues_an_email a_message = new Email('to' =&gt; 'xyz', ...) request = new httprequest('email' =&gt; a_message) offlinequeue = new OfflineQueue(); emailer = new Emailer(offlinequeue) controller = new Controller_Email(null, emailer) controller.action_sendmail(null, request) assert offlinequeue.pop() === a_message Unit tests offer a much higher information value than tests like author's. If the test fails, was it because your daemon was down or that your app was misconfigured or that there is a bug in the daemon or because your app has a bug? It's not readily apparent. On the other hand, if an email doesn't get sent after this controller's action, you know the problem is there, and not in the emailer because you'll have unit tests that the emailer pushes out to an offline queue, or you'll use the prior test that mocks the emailer. 
Yes it has a very neat OO architechture. It's not ideal though, since because of that fact it uses quite a bit of memory so if the files that you are uploading are HUGE you might be better off looking at other alternatives.
What are some of the other awesome tools?
[__autoload](http://www.php.net/manual/en/function.autoload.php)
Is there an issue # on github I can watch?
You should create the vendor folder. It will be created by composer once you run composer install. What you choose as a namespace is completely up to you, as long as it does not collide with any namespaces that others might have taken in a composer project which they have published to the packagist repository. This could cause unforeseen problems since you cannot map a single namespace to multiple different directories. When working on my personal projects, I use my initials as a root namespace and choose a more fitting namespace for everything beyond that. 
Why is having a static call to an ORM better than using dependency injection? 
[Streams](http://www.php.net/streams)
I'm interested. Can you link to an example? 
This is a little off topic, but what OS is everyone using PHP Storm in? I'm on Windows and new to Php Storm and I'm thinking of changing to a *nix OS to avoid any potential problems gettting PHPUnit, Composer etc working in Storm in Windows. 
separate boards for users that have not identified as human; default view settings that hide potential bot posts from humans. 
Couldn't they just create additional pointers to the same functions? 
I like dota 2 and this seems like a fun thing to put some time into. If you'd like, when I have some time this weekend I can fork it give some contribution. 
I'd love that! I'm going to implement automated server status checking by looking at the Dota 2 Player Count and Steamstat.us' GC status. I [previously](https://github.com/bearlikelion/dotabot/blob/7fc3f5bba99c4d4a6b208f45991fb4c8ad37a080/bot.php) did all the reddit interaction using a function with cURL, but I had trouble sending the reddit_session cookie in my requests with the CURLOPT_COOKIES.
When you're plugging your work, I think it'd be a good idea to put more effort into the post itself. If you can't be bothered to capitalize or check your spelling, that doesn't reflect positively on the quality of the code you write. 
I haven't read through all your code, but one thing that stood out for me in a negative way was the static method autoload in the Controller. Why would you put an autoload function in the Controller class? That's not something a Controller is responsible for.
Can you tell me what you think is too complex? I worked with a lot of frameworks and i tried to keep everything as simple as possible
Here's what happens when I give it two lines of input: Input: Hello Goodbye Output: Hello sh: line 1: Goodbye: command not found
You are correct, i will seperate the framework config from the controller in one oft the next commits. Thanks a lot for your feedback!
You can pass both GET and POST data at the same time. What you're doing here will be (assuming &lt;ID&gt; is your journal id): * sending a POST HTTP request to "/comment/add/&lt;ID&gt;/" * Your mod_rewrite (apache or htaccess config) will change this to comment.php?comment_action=add&amp;journal_ID=&lt;ID&gt; * Your comment.php file will be called and both GET and POST data will be sent to it Your $_GET array will be: array( 'comment_action' =&gt; 'add', 'journal_ID' =&gt; &lt;ID&gt; ); And your $_POST array will contain all your serialized form data.
This isn't helpful to your specific problem but please please don't pass $_POST data directly to shell_exec. This is a horrendously terrible idea from a security perspective. You'll want to look into escapeshellarg() and escapeshellcmd().
There were at least two alternatives then: PHPExcel and PHP Excel Reader.
A few things to think about here: * Do you know anything about PCI compliance? If not, you probably don't want to! Just know this, don't let the CC numbers touch your server at all. Otherwise you open yourself up to lots of liability issues. Several payment processors offer javascript APIs that send the CC info directly to their servers. Here's [one](http://www.simplify.com) and here's [another](http://stripe.com). * SSL. Does your site have an SSL certificate? It needs one to handle CC data. This will let you use https instead of http to encrypt CC data. * Assuming you're continuing on after the above two, what format does your API expect? XML? JSON? That's what you should send it. Read the docs. TL;DR Seriously, be careful if you don't have much experience and you're collecting CC numbers. 
Here's deploying JSON appended to your PHP source, though you could just as easily use zip, tar, etc. &lt;?php $data = file_get_contents(__FILE__, false, null, __COMPILER_HALT_OFFSET__); $config = json_decode(trim($data)); var_dump($config); __halt_compiler(); { "foo": "bar" }
I found these issues on a quick skim of the code: * Non-class code in a class file is not good. You should create a bootstrap file for all that. * What's going on with your autoloading? Register that in your bootstrap file or index.php not inside a class. And then redbean is not autoloaded? Why? * Using the global $_ROUTES and then sprinkling that into your routing functions. Why do it this way? Don't use globals at all. * Why is there html in your index.php? 
I guess, but it's a question of cost benefit and finite resource allocation. How frequently will you have a queue that pops its pushed objects, an emailer that properly pushes to a queue, a controller that properly dispatches on an emailer, but somehow when you hook them up all together it doesn't work? I'd guess it's pretty rare. Moreover, behavior testing like Selenium is flaky. When a selenium test fails, it won't immediately tell you whether it was because the daemon was down, because the web server was slow to respond, or whether you actually have a bug in your code. It's nice to have behavior tests like Selenium and it's nice to have different types of tests, yes, but the brunt of your effort, I would argue, should be spent on unit tests. Consider the prompt you started with: &gt; How would you verify that email message is formatted and delivered correctly, without actually sending them to your clients? If we know that the email service properly pops from the queue service, and we know that the email queue client pushes to the queue service, and we know that the controller pushes to the email client, then we are pretty confident that when we hook it up in production together that it'll work. 
Are you doing this for good or evil?
Gave it a read! The only immediate distinction I came up with between my assessment and your new post is my assumption that a DIC itself injects the dependencies into the created classes, essentially having the DIC double as a generalized factory. Your analysis makes the factories explicit and distinct and, in doing so, makes some of the distinctions (and lack thereof!) a little more clear, as well as some of the conclusions that naturally follow. You gave me something to think about and expanded my understanding - thanks! It's nice to get out of my bubble once in a while.
Definitely for good
This is a terrible idea, but I'm going to assume you're just messing around. Do not actually do this. But even if you don't do this to execute bash commands, you'll run into this textarea/newline problem in other capacities, so I'll go ahead and answer it. What you probably want to do is explode by newline, something like: &lt;?php $input = $_POST['textarea']; $lines = explode(PHP_EOL, $input); // or explode("\n", $input); foreach ($lines as $line) { echo shell_exec("./script.sh $line 2&gt;&amp;1"); } Of course you'll want to escape those arguments to make sure nobody's doing anything malicious, but again, I would never actually do this to execute shell commands.
So, I'm going to guess that you've got A Very Good Reason for passing raw user input straight into the shell. Since this is A Very Very Bad Idea. What are you working on that is So Important you need to pass commands to the shell?
Thanks I'll play around with this. Thanks for the warnings and providing context as well. 
If I've got code in my `error_handler` that does something when I get a `Your code is fucked` error, that ain't going to trigger any more on the exception.
Try using double quotes for queries, then you can avoid escaping all those single quotes. You should not be escaping the \n. You may need to try other line endings such as '\r\n'. $sql = "LOAD DATA LOCAL INFILE '".$file_location."' INTO TABLE p4p.users_csv_import". " FIELDS TERMINATED BY ','". " LINES TERMINATED BY '\n'". " IGNORE 1 LINES;"; or $sql = "LOAD DATA LOCAL INFILE '".$file_location."' INTO TABLE p4p.users_csv_import". " FIELDS TERMINATED BY ','". " LINES TERMINATED BY '\r\n'". " IGNORE 1 LINES;";
What I was told was that the bank site would handle all of that information and I would have to send them the amount, tax, itemized list, our id and password, etc. Their instruction site says they accept both JSON and XML.
You can do it that way, but filter_input_array() allows you to do something like this: $input = filter_input_array(INPUT_POST, array("a" =&gt; FILTER_VALIDATE_INT)); Put that at the top of your script, and it's very easy to tell exactly what args you're taking. If you want a specific var, you can use filter_input(): $var = filter_input(INPUT_POST, "a", FILTER_VALIDATE_INT); It takes some discipline at first, but I've reached the point now where I only use a superglobal for some weird condition that filter can't handle.
Really? I found the examples they provide covering everything that i need...
This really is not a beginners project. Be careful. If you aren't using a javascript direct-to-processor system, you'll need to submit the form to your server (over https) then process the form data using php (or whatever server side language) and send it to the bank (over https) via something like CURL. You are legally liable for how you handle the data in this case so be very sure you're using secure methods. You can't send it directly to the bank with javascript from a browser because you'd have to put your UN/PW in the script and reveal it to the world. 
nice vonnegut reference 
I don't dispute that this is valid. But why do you want the form handler to deal with this? It really doesn't seem like the form handler's job. 
Junk blog spam.
Well my thinking is you feed the form handler the fields and their parameters, it would output the HTML, then on submission it would validate the inputs, mark any invalid fields as such with a css class. [PFBC](http://www.imavex.com/pfbc3.x-php5/) is what I wanted to use, except it only allows 1 view for the entire form. I need to intermix these tabled inputs with normal label/inputs. Does that make sense?
So it goes. 
Oof. I don't envy the sort of codebase you have to deal with, yikes. What you're looking at is an assignment by reference. Effectively, $parser and $this-&gt;parsers[$fn] are pointing at the same memory space. Anything you do to $parser will magically have the same effect on $this-&gt;parsers[$fn]. I don't know what the Python equivalent is, but if you really have to, you could just replace all references to $parser with $this-&gt;parsers[$fn] - it's more verbose, but it dispenses with memory mapping tricks.
I always just used ODBC. http://code.goingasplannedby.us/2013/06/14/php-excel-with-odbc/ 
You don't always have a choice, for example writing plugins for the most popular CMS's, since the cores of these systems are all based on procedural coding.
Soooo - this looks super nice, and worth using. How much of the standard PHP library and different modules does HHVM support? Would it be worth just switching over to HHVM istead of the Zend Engine completely?
The thing is, most programmers are self taught. If they know something can be done and have a vague idea how they will just search online till they work it out. So really talks should be about introducing people to new ideas and new concepts - I tried to blog about it here: http://blog.opentechcalendar.co.uk/2013/01/02/technical-talks-should-introduce-concepts/ Many times I think it is possible to introduce a concept in 5 mins. But mainly 5 min talks are great for starting conversation, and great for encouraging people who haven't talked before and may be scared. Maybe they will progress from doing a 5 min talk to doing a longer one? 
IIRC Zend Server use it so you may look at its conf if needed.
You seem to interchange "Dependency Injection" and "Dependency Injection Container" quite a bit. Is that deliberate? I get that a Service Locator is a pattern. But Dependency Injection to me has always been a _concept_ - a fancy name for "I am going to pass instances of objects to which this object depends as parameters on the constructor (or as properties or what have you)", whereas a DIC is a pattern for implementing the concept. I see it as entirely acceptable and possible to practice DI, without needing a DIC or any form of IoC Container. Of course for anything with more than a trivial level of complexity, injecting without a container is going to be a pain but surely DI and DIC are not actually the same thing?
Any reason why you are not using a python pdf library? eg. pyPdf, PDFMiner https://github.com/mstamy2/PyPDF2
ah, ok, i get it. thanks.
&gt; h of the standard PHP library and different modules does HHVM support? PHP Extensions that are baked into HHVM can be seen here https://github.com/facebook/hhvm/wiki/Extensions they are probably focusing on those used by facebook itself, however they do provide documentation on writing extensions here https://github.com/facebook/hhvm/wiki/Extension-API &gt; Would it be worth just switching over to HHVM istead of the Zend Engine completely? Given its current support of PHP, the answer is it depends on your application and if your application can run under HHVM given its current still limited support of certain PHP functions. They appear to be aiming to have full support, and at least pass unit tests of popular frameworks such as laravel and platforms such as wordpress as shown by this article published in September http://www.hhvm.com/blog/875/wow-hhvm-is-fast-too-bad-it-doesnt-run-my-code 
Eiugh, I just found out about composer when I tried out laravel, and I absolutely love it. I just know that our senior dev here at work will never touch it because it isn't homemade. This guy has something against anything he hasn't made himself. He even dislikes phpmyadmin because he can't know what kinds of sql-statements are executed behind the curtains....
It would be good if you add an option to load the source from an external web site
PhpStorm is written in Java. It means it should run perfectly at least in the three major OS. I run it perfectly on windows
Why? As in, for what purpose? You're own mobile app, a JS SPA, or just for "the public" to send data? If the latter, again why? Will you let people create and alter tables, truncate, drop? Just why?
Me too. My question is, have you had any trouble getting things like composer, PHPUnit etc working in Php storm in Windows? 
Are you saying that you want to grant everybody full control over your server? I cant see why SQL injection would be a concern, if that's the case. 
It's probably easier to publish the root private key instead.
Zend Server uses it with LightHTTPd for their management interface, not the main server which generally is Apache and mod_php.
Yeah, I'm not sure I'd take a job where I'd be writing WordPress plugins exclusively.
Yes the POST/GETS go through PHP for sanitization
The app will teach SQL through letting users run commands on a database
Honestly, if you're looking at benchmarks comparing PDO with pgsql functions, then you're trying to optimize the wrong stuff like echo vs print or singly vs doubly quoted strings. PDO does have some additional overhead since it's an encapsulation, but standard opcode caching mitigates the differences. Your bottlenecks should be elsewhere with a php application like in your db queries or network api calls. If everything is cached and you still have performance issues causing page runtimes longer than a second, then that's usually a sign that something's wrong with your application which requires refactoring. Optimize macroscopically with php, not microscopically. Also, a probable reason for your difficulty in finding enough good information for the built-in pgsql functions is because non-pdo functions like those are informally deprecated in near universal preference for PDO, but are still maintained and supported for legacy reasons.
Allowing users to run SQL, filtered or not, against a database is a bad idea. Think about what could happen if someone did get access and could run something with things like "SELECT INTO OUTFILE..." or overwriting a stored procedure you happened to have in another db because the same MySQL user has access. It wouldn't take too many SQL commands for a potential attacker to get everything they need, especially if it lives on a shared server.
I don't know what set up you are planning on using, but you should be able to give the web app read only access to the database. You could at least help people learn how to do basic selects, join tables, etc. However, they would still probably be able to crush your DB with inefficient selects.
Ok do you think it would be ok if the database were on a different user account on a different (private) server?
There probably would be lots of inefficient queries. I was thinking more toward read and write access for users so that they could, for example, insert and drop databases.
In that case I would worry about it less. That's pretty much how any RESTful API functions. A request is sent to a script (or url) which connects to a database with a locked down user to manipulate data. You could use a caching layer like memcache and replicate the memcache changes to the database. That would at least remove direct database access and its pretty easy to set up.
I need to think about the DB setup - as long as you have a good naming convention and don't plan on a ton of tables, you should be ok. You can definitely get the users info. are you using IIS or apache for the webserver? 
Here's the problem though, if the credit card information EVER touches your server - even through a POST request - that is the moment you are required to (assuming you are subject to) comply with PCI standards. An easy way around this is to use a service such as Stripe which uses their own proprietary JavaScript to submit the credit card information to Stripe securely and returns a token to your server which you then use to process the rest of the order. Unless you're submitting the information directly to the bank and they're returning payment information back to you, you're going to have to address this information.
Thanks that's a really good idea to use memcache! Thanks! 
They weren't always the same, though. $vareable6 in one file might be different from $vareable6 in another file... It just depended on whether or not the correlating files were sharing the same dozens of includes or not.
If there was nothing else on there...maybe. But keep in mind, sometimes a server is exploited just so it can be used in an attack on something else. If they can somehow write a PHP file to a web accessible directory that makes an exec() call to curl over a PHP command shell script, that could be bad news.
Use a single database with a table for the site and for the users, then put a foreign key on the users table relating it to a site.
I'm curious exactly what kind of "templating" is going on, when there are clear `include()` calls. Shorthand PHP != templating, and I don't want to use include calls in my templates if I don't have to. Thanks for sharing, though. :) I'll be taking a look sometime.
Sorry, guess we weren't on the same page. Aware of how Bootstrap/Foundation handle the the pictures. This is similar to Wordpress in the sense it would make 4 (or more) sized images and then you are requesting which one displays based on the device loading the page. But it seemed to be doing it when client loads the page and not when the photo was uploaded. Which at 1000 hits (although picture should not be recreated) would just be extra ajax calls etc for no reason. If your web design includes a 900 x 200 image and you have not "redirected" a client to the mobile version you should still show the 900 x 200 version in my opinion (which bootstrap will lower with javascript to fit) Also a 400 x 400 image would be "more efficient" if it was bumped to 420x420 for display then say a 700 x 700 (next break point) lowered down to 420 x 420 etc. There are many variations, but I would leave the definition to the Design of the web page in my opinion. 
Have a single db for users. Have an api that sits on this db and you have yourself a central location to auth from. Once auth is successful pass along anything that would be useful for the application requesting auth e.g. Users role, access level, permissions etc. You mention auth using active directory, this will save you even having your user db as you can auth straight to that. A quick google of 'php ad auth' produced a bunch of results on how to do it
We're using Apache web server on a linux box. There arn't that many tables. I just imagine more web applications being used so I was thinking of creating one database with all the users that i can use again and again. If there is a way to use windows logins that would be a huge bonus, thanks!
Are you recommending using a user table for each site (3 sites = 3 user tables?) 
Very disappointed that `nikic` voted no, but it's looking good so far. I see no reason not to push this through, I for one would love the `**` operator, and this doesn't appear to break BC.
Multi tables usually comes up if this is for a Client, and the client has potential of asking for backup of db, the db can be moved to host of their choice etc. If this is for your sites only, your world, then a single point of entry and table can allow you to share. Ie what Google does for all their apps. 
I wonder where this idea that "fewer lines of code is better" comes from for some PHP developers. There are a few main benefits for frameworks including: * a common point of reference for how to do things for all developers * abstracting away common tasks so developers can focus on project specific logic A "tiny" framework pretty much accomplishes neither of these things. Where's the benefit to this? 
now rewrite it without any statics, using classes for objects rather than namespacing functions. I think you'd learn a lot.
Well, I want to be able to do PDF manipulation on a web server. I have a document that I need to add text to, but I can't seem to find any free Python libraries that have that capability, while FPDF and FPDI has that feature.
No, use a single user table and a site table. Something like this http://pastebin.com/rpv1Bwk6
My experience with the ZCPE exam (wrote it about a month ago) was that there is a heavy emphasis on core PHP and it's quirks, just like previous versions of the exam. My version of the exam had hardly any questions specific to &gt;= 5.3, but lots of the tricksy type questions like bitwise operators, operator precedence, language quirks, auto-typecast implications, etc. Having written both the ZCE 5.0 and ZCPE exams I think that Lorna Jane's ZCE Questions Pack (http://www.lornajane.net/project/zend-certification-questions-pack) is a very good representation of the types of questions most likely to be asked on the ZCPE exam. IIRC, the questions are randomly pulled from a pool, so your experience will vary. 
May not be what you're looking for, but my solution would be to build a simple federated authentication/SSO application with an API. This would allow you to scale the login system to as many apps as needed in the future, and allow you to keep the schema and auth details out of each app. Helpful if you ever need to move apps to new servers or update how you store user passwords. 
This is unnecessary if he/she is integrated with Active Directory. AD is effectively the SSO.
You've never used exponents before? I can't tell if you're being sarcastic or not.
Please stop what you're doing. Do not encrypt your users' passwords, you need to hash them. Encrypting means it's possible to decrypt, as you want. The proper way to store passwords is via one-way hashing algorithms. What you want to do is create the user but keep the unhashed password in memory, then email that (although that's still kind of no-no but depends on your specific use-case). After the initial hashing you won't be able to reverse the process and figure out the password from the hash.
Yes he's being sarcastic.
Many languages rely on standard libraries for operators like this. I fail to see the beneficial ROI of adding this to the parser. Just because it can be a tad quicker than a function invocation? Then maybe the function invocation should be optimized and inlined or something. Where does it stop? Hey, let's add # to be count().
/u/nikic has proven themselves a very thoughtful and pragmatic dev to me, and so I'm reserving judgement until I can find (or they chime in with) their motivations. Either way I'm pretty indifferent though, I don't really think it's going to make much of an impact on PHP. If you're doing so much work with exponents that the current implementation is cumbersome, then perhaps you're using the wrong tool for the job.
What I would like to do is use a two way hashing algorithm. Fill an array with hashes, insert them into the database and then email the user the decrypted version of the password. I think its ok that we are using 2-way as we are using salts?
Just use `password_hash()`, it's in core for a reason: http://php.net/manual/en/function.password-hash.php
Thanks for input. Maybe I email the user the plaintext password and then hash it?
We have about 100,000 users currently but we have scalability on the mind. 
You really don't want to be e-mailing out passwords in plaintext. What you should do is create the accounts without a password, then use your forgot PW feature (You do have one, right? :) on each user, sending them an email to set/re-set their password.
If you store encrypted passwords and not hashed passwords, then I don't wanna be one of those 100,000 users... There is no reason to store encrypted passwords. Most of all, when users get to know that their passwords can be read by others by simply decrypting them, they would distrust the whole website. At least, I would. If you have a reason why you would rather encrypt than hash passwords, let me know.
Why create passwords in the first place? Send emails with unique links, where users can complete their account by setting a password. and save hashes and salts. so those hackers that steal your database dont get your poor users clear passwords. i prefer [hmac](http://www.php.net/manual/en/function.hash-hmac.php) for hashes. $salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM)) works fine too.
it's useful for the same reason + is a lot nicer than being forced to use an add() function? why we can use == for strings instead of needing to use strcmp? it's also a pretty standard notation that'd be nice to use, such as finally being able to use the array shorthand instead of array(array(array()))s edit: i guess it's not actually that common a notation, it just comes to mind because of python/ruby... ^ is already taken as a bitwise so it makes sense (to me) as **. well i still hold my opinion it's pretty handy as an operator
It is incredibly easy to sniff email traffic. You will basically be broadcasting the user's password to the entire world. 
That is not a zero-sum game :)
This is a case where I would push back. If management refuses to budge, make sure you have it record warning them of possible security issues of having passwords sitting around in email folders and traveling the internet in plaintext free to be sniffed. Then do like the above suggestion and email out the plaintext before hashing into the DB.
"I hate to say it but the company's security is rather lacking and they will be happy with this solution." -- this does not solve security, as many have pointed out. You should not be able to retrieve passwords in any way, shape or form. They need to reset if they lose it etc. 
I'm compiling this right now for Arch Linux to use with my nginx stack. Fingers crossed!
"Where does it stop?" I don't believe this is prevalent enough in code to make it worth it as opposed to addition or array creation. The line has to be drawn somewhere, and I propose drawing it at the benefit/usefulness line. Do you support my new hash sigil (#) for count()?
It also has a userland version that works in PHP &gt; 5.3.7 so there is no excuse not to use it! https://github.com/ircmaxell/password_compat
The whole point of a password is that the only person who has the password is the user. No-one else. Not other users, not their mothers, and **not you**. No. One. Else. If they forget their password, it *is gone forever*, and this is good and necessary. This logically precludes the possibility of emailing them their password. Don't store it, don't email it. Store a salt and a cryptographic hash, and nothing else. If you don't stand up to management on this, you are not doing your job properly. Point them to everyone's responses on this page if they complain.
When their site is hacked, you will be blamed. Even if they made this decision. Refuse to build insecure systems.
You are breaking two of the most fundamental rules of user account security. a)sending plain text passwords b)storing passwords in the db in a manner that allows them to be read and converted.
http://snipplr.com/view/758/ eh. unless i'm working with exploitable input, what is wrong with using === or even ==?
&gt; Reason is very simple: pow() is a very rarely used function That's what I figured, and has [been my experience](http://www.reddit.com/r/PHP/comments/1t68e9/php_rfcpowoperator_voting_begins/ce4sb7l) as well. I'm all for new features and progressing the language, but this one just didn't make any sense for probably 99.9% of users.
He is being sarcastic - he's parodying some of the responses that the actual PHP core developers give when voting 'no' on features they don't like/will never use.
If it's two-way, it's not a hash function. 
SHA512 **SALTED** is the way to go. I create the hash with a random salt and go from there. Then you do hash match to figure out if the password is correct. There is a big security issue in storing decryptable passwords and even worse sending plain text. I hope you find the right way.
Tell them you are obliged by [the ethics rules of your professional organisation]( http://www.acm.org/about/se-code) to do this correctly. Because you are. 
as /u/BucketHarmony said, you will be blamed. They clearly don't have a clue on what the hell they want or need. It's your job to let them know they are compromising the whole system by doing that. It's a 100,000 users at risk. 10/10 would not build.
soo... other than it being difficult to detect, any word on how to detect it, beyond traditional measures?
Don't use sha512 for password hashing. It is too computationally inexpensive to be effective.
&gt; Where does it stop? Perl never could grasp this question. "Add another operator? Sure!"
:/ I'm not having a good Internet day today.
I wish they would consider adding an operator for something that I **would** use all the time: `preg_match()` as opposed to pow() which doesn't get used that much. I do support the pow() operator, but there should be OTHER operators also. Things that get used more often.
I agree... Things that DO get used all the time and should be considered for operators: preg_match, preg_split, default variable assignment, logical or.
I *thought* it was pretty obvious, but... :)
Keep in mind that anyone who has taken the test already has signed a non-disclosure agreement which forbids them from speaking about the contents of the test.
Is that benchmark code supposed to be some kind of troll, or are you trying to point out that you don't actually know anything about PHP operators? $results = strcmp('string' + $i, 'string' + $i); Do you even know what this line of code **does**, specifically: 'string' + $i `$i` is an integer. So when you try and add it to a string, the string is coerced to an integer. The literal "*string*" cannot be converted to an integer, so it becomes 0, to which `$i` is added, yielding an integer which is equal to `$i`, which is then passed to `strcmp`, which takes strings, so it's converted **back** to a string. No wonder this is so slow compared to: $results = ('string' + $i) === ('string' + $i); Where the same thing happens -- a string plus an integer coerces to an integer plus an integer, which is just an integer. So the benchmark that's supposed to demonstrate the superiority of `===` in terms of speed **actually** demonstrates that comparing two integers is faster than comparing two strings, with a bit of type conversion/coercion thrown in just to muddy the waters even further. Well duh. Everyone knows that comparing integers is fast and comparing strings is slow. I'm not debating that `strcmp` is slower than `===`, but if you're going to try and illustrate a point with a benchmark, make sure you're actually demonstrating the **correct** point. In fact, my point was not even about speed, but was rather about the fact that just because the underlying bytes of two strings aren't the same, doesn't mean the strings themselves should be treated as being different. The proper way to compare two strings is: Normalizer::normalize($a)===Normalizer::normalize($b)
That's great! I'll search around to see how this proposal was received in the internals
hmmm, i am quite disapointed... i've just hacked hhvm in my nginx php-fpm mysql stack, doing some basic benchmarking, like stringoperation in a loop, or Fibonacci. testing these against execution time and hhvm is at best slightly slower then fpm, running Fibonacci 100,000,000 times takes 13 secs on my fairly old webserver. on the same hardware with the same script it takes 46 secs for hhvm to process it. maybe it scales better with concurrent request, i'm not testing it today, have to get up in 7 hours, but i've had more hope in single request performance :(
&gt;while i can understand the use of heavy oop and attempts at type casting, i prefer how concise php can be when used properly. if i really wanted to write code like that, i would write in c# I don't understand this paragraph. My objection to `==` and `===` on strings isn't anything stylistic, but rather that using these operators may yield wildly unexpected and unpredictable results. Consider this snippet: 'façade'==='façade' What does this statement evaluate to? `true` or `false`? It doesn't matter which you answered. **Both are correct sometimes**, and it's impossible from mere inspection of the appearance of the code to determine which one is correct. You'd have to examine the underlying code point representation of the strings in the source code file to determine which answer is correct, since there are two different representations of these equivalent strings: U+0066 ==&gt; LATIN SMALL LETTER F U+0061 ==&gt; LATIN SMALL LETTER A U+00E7 ==&gt; LATIN SMALL LETTER C WITH CEDILLA U+0061 ==&gt; LATIN SMALL LETTER A U+0064 ==&gt; LATIN SMALL LETTER D U+0065 ==&gt; LATIN SMALL LETTER E U+0066 ==&gt; LATIN SMALL LETTER F U+0061 ==&gt; LATIN SMALL LETTER A U+0063 ==&gt; LATIN SMALL LETTER C U+0327 ==&gt; COMBINING CEDILLA U+0061 ==&gt; LATIN SMALL LETTER A U+0064 ==&gt; LATIN SMALL LETTER D U+0065 ==&gt; LATIN SMALL LETTER E If you call `Normalizer::normalize` on both strings, however, they'll be converted to Normal Form Canonical Composition (i.e. the first option), and **then** compared bytewise, which will yield the correct answer that they are, indeed, the same string.
this is useful to know, thank you. i haven't yet needed to compare unicode strings, but thanks for your information because now i know how to.
print_r($GLOBALS); ? 
"They" is whoever produces the RFC. Find somebody interested, or have a go yourself. The guy who wanted a pow operator is obviously more interested in a pow operator than regex syntax. :)
To play devils advocate... there are a lot of languages that have an operator for this. From the RFC: &gt; Languages with left associative exponential operator &gt; &gt; VB (not by choice imho) &gt; Basic &gt; Octave &gt; Matlab &gt; D &gt; ColdFusion &gt; &gt; Languages with right associative exponential operator &gt; &gt; Haskell &gt; R &gt; F# &gt; Ruby &gt; Perl &gt; Python &gt; Mathematica &gt; Freemat &gt; Scilab &gt; Tcl (changed from left associative!) &gt; Cobol &gt; Fortran &gt; Sage &gt; Bash &gt; &gt; Languages with non associative exponential operator &gt; &gt; Ada 
Like others said, I think one DB for all of it, then use keys to connect the tables. If you are using the AD/LDAP stuff, do you still need a users table? If you have LDAP enabled in PHP and you're passing the NTLM in the browser (I think there's an Apache module involved), you can get it with: $_SERVER['AUTH_USER'] which will include the domain. If you want to remove the domain, I use this (with "DOMAIN" as the example domain): ltrim($_SERVER['AUTH_USER'], 'DOMAIN\\') Pretty sure the AUTH_USER is always case-sensitive, so account for the browser passing the info or the user inputting it manually - I sometimes convert it all to lowercase, then trim it.
Not sure what you have in mind exactly but you could also consider just making the entire thing a VM image, with the ability for users to save their profile / progress to your system or something like that. That way, worst case a user screws up their VM, not everybody's VM.
I threw together a quick class diagram of the related objects. It is here http://oi43.tinypic.com/289jtz8.jpg
Registration and invoicing systems can get complex. I'm in the middle of replacing a convention management system at work that includes a lot of the same logic. Are you using an ORM? What framework? Both of those will be essential if you want to put together a workable system. Imagine your company expands and suddenly you have 20 courses. It makes no sense to make a new class for each course. It sounds to me like you need to have just two classes: Course_Live and Course_Online. Then the different registration rules would be properties of one or the other of those two objects (days to access, time to pay, returning discount, etc). Those rules should be stored in a database rather than hardcoded in (sounds like that's what's happening now, maybe I'm wrong). I would assume students are linked to the courses via a pivot table (many to many relationship), so determining whether to give a student a discount would just be a matter of searching the pivot table for a record of completing the relevant course(s). 
I'd imagine that there has got to be some kind of common data packets you could sniff for. Or suspend all other network usage, then see what's communicating
I'd set it up more like this http://imgur.com/ELl38i4
No ORM or framework right now. This is a legacy application that I am maintaining built on top of a custom CMS. It is a pain in the rear to put it nicely. So you'd have only two classes. How would you setup the rules that govern things like discounts? Like, if you take CourseB you get CourseA for a discount. Or, and the reason that prompted this thread, if you buy CourseALive and CourseAOnline at the same time, you get a package deal.
You're not going to be able to do this just by editing common.yaml. That file is a set of instructions for the puppet manifests used by PuPHPet, but it's limited by the manifests that are provided. If you write your own puppet scripts, or add on to those provided by PuPHPet, then you can absolutely compile php from whatever source you want.
Sounds like you're looking for xDebug. Use it with an IDE with a solid client like phpStorm and you'll be able to see exactly what you're looking for and be able to do it at any given point in your code's execution.
I'd get an ORM right away. You could install that on top of your existing CMS and make use of Composer and it's autoloader. That will help you keep your objects organized and easy to access in a consistent way. The discounts could be done a number of ways. For example, if you always give a discount when signing up for a class when you've completed the pre-req, give your course object a parent_courses property where you hold an array of courses that would give a discount to the current. Or you could keep a separate pivot table for that info w/ the amount of discount for each course-course linkage. Then when a user is registering you can do a quick search for of that array or table to see if the user gets a discount. 
No. Bcrypt is the way to go, currently. If you insist on using sha512, use the crypt variant. However, that's still weak compared to bcrypt. And hey, bcrypt is baked in to PHP, via password_hash() in 5.5+ or crypt() in earlier versions. Hashes like the SHA family are designed to authenticate messages as quickly as possible. These are for situations like verifying your hundreds of files haven't been altered without your knowledge. When dealing with passwords, you want a function designed to be relatively slow (a user won't notice half a second logging in, but somebody trying to force your passwords sure will). 
You got +1s from me.
Not entirely. You need a lot of procedural functions to register as callbacks from the wordpress core. It is even worse for Drupal because the module functionality is hooked into the drupal core via each functions name.
Littlesnitch would be good: http://www.obdev.at/products/littlesnitch/index.html
Far from bulletproof, but a much simpler solution that giving you an entire crash course on the language... Haaaave you tried grep?
&gt; Also - Is there a way to use each users Windows domain login? I'm assuming you mean Active Directory. If so then YES! There is! * See here: http://www.php.net/manual/en/ref.ldap.php * And a zend ldap class with instructions on how to use with windows active directory: http://framework.zend.com/manual/2.2/en/modules/zend.ldap.introduction.html 
They could be "included" ...like.... Include('variables.php') These variables you speak of don't happen to start with an underscore do they?
If they're not defined in an included or required file then they may be getting passed to your script via [register globals](http://www.php.net/manual/en/security.globals.php). Which version of PHP are you using?
Best alternative language to host a website about PHP.
Keep in mind the JIT needs to be "warmed" like a cache. Did you try several requests, or just one?
i've let the most tests rum about 100 to 1000 times, the result every time was a very slow first run and a bit slower than in fpm for all the others. only the 100,00,00 Fibonacci, this one only got 10 hits from me, since it takes 10 minutes :)
Great news for laravel!
Since the post-mortem hasn't been released yet, there's no way to tell what the attack vector for this breach was. It's highly possible there was no PHP code / exploit involved at all. Every language / stack has exploits and vulnerabilities, and you can write highly insecure code in any language. What you should be doing is teaching yourself about the attack vectors that attackers use and writing code that follows recommended best practices so that you know when unexpected events happen on your sites. Some resources to get you started: * http://phptherightway.com * https://www.owasp.org/
mysql_query... extract...
Composer + Packagist
That is odd, from benchmarks that I have seen run it should show some improvement. Possibly some configuration or resource issue?
Don't mind the haters. I think it's perfectly fine to post about releases of your projects/libraries/packages in this subreddit.
http://phpmentoring.org/
I'll help you out man. Love to contribute to people who are actually willing to learn. Message me your skype username.
I tried that a few days ago. The Download of the box took forever and failed somewhere at 60%. I then downloaded the box manually and added it manually to vagrant. After that was done, vagrant wasnt able to mount the local project folder as shared folder. Thats where I gave up because I had work to do. Am I just missing the point or is vagrant too damn complicated to configure? Looking at those Vagrant files feeks like looking at a httpd.conf or just rocketscience. PuPHPet had a nice config interface but failed for me as well, since it didnt gave me a working vagrant setup in the end. I would love to use vagrant since i really like the idea, but since it looks like I have to put at least a whole day into getting started with it means I won't be able to use it for the next half year or so until I have enough time available to spend on it. Thats sad. :(
Turn around and take it then! (Congratulations!)
Alright, didn't thought about the use of different computers and session ids at all... thanks!
I understand, I have had similar problems before but I now have a set of chef cookbooks for the various things I do and projects I work on. Vagrantfiles by default look a little insane, maybe because the comments make it real long, my basic one looks like this (without a provisioner) Vagrant.configure("2") do |config| config.vm.box = "raring64" config.vm.network "private_network", ip: "192.168.56.122" config.vm.network "forwarded_port", guest: 80, host: 8085 config.vm.synced_folder "./data", "/var/www", id: "vagrant-root", :nfs =&gt; true config.vm.provider :virtualbox do |virtualbox| virtualbox.customize ["modifyvm", :id, "--natdnshostresolver1", "on"] end end 
Pity that you failed English, though...
Are you actually mistaking Reddit for Twitter? Or do people now believe hashtags go in any textbox on the web?
Weird, for me it has always been "vagrant up" -&gt; it works (Ubuntu, OS X, not Windows though). You should give it another go.
Ahhh, well then, add: print_r(get_declared_interfaces()); print_r(get_declared_classes()); print_r(get_defined_functions()); 
OP, you better hope it's not register globals.
Searched reddit and haven't found any mention of this tool. On Ubuntu, it made it stupid easy to install multiple versions of PHP, as well as extensions for each version. The only catch is that you need to a) set up your shell to use it, b) install the dependencies for PHP and extensions, and install a system wide version of PHP to actually run phpbrew (which is actually a phar). Fortunately, this is easy on Ubuntu: sudo apt-get install build-dep php5 sudo apt-get install php5-dev sudo apt-get install php5-cli That should get you started on installing any version of PHP 5.3 and greater.
Thanks for the help. It is on my list of goals for 2014 to migrate this system to Laravel 4 and Eloquent. Refactoring all of the related pieces to use an ORM at this point is more than I can tackle right now.
Try it with sudo? Long shot maybe, but when I was having issues with **vagrant up**, I prepended it with **sudo** and everything worked fine.
Done. I added guzzle as a package dependency and now you can use loadFromUrl($url) to load and parse the html at the given url.
Covers v2 of Capistrano which is not the current stable, but still pretty useful.
Sorry about the download speeds! It was originally on S3 but I got a scary bill so a buddy donated bandwidth. I finally moved them downloads over to his proper CDN and now download speeds are at around 6MB/s! Please try again :) If shared folder fails, try without NFS.
Why not use Docker?
For smaller projects, I would actually say using git for deploy is easy and fast enough. Larger projects are where you want a proper deploy strategy. For smaller projects, Capistrano fails the [Is It Worth the Time](http://xkcd.com/1205/) test, imho, because git takes less than 10 seconds to do, which Capistrano would save ... 8? 7? seconds, plus initial setup.
Vagrant and Puppet are great tools but I didn't find PuPHPet to be helpful at all. What it generated didn't work for me and looking through the code to figure things out wasn't very enlightening. The Vagrant book is decent at explaining why and how everything works but the syntax for all of the examples is out of date. Seems like the best way to really learn Vagrant and Puppet is trial and error. Which is sad because once everything is working they're awesome.
Hey, thanks for the r/phpstorm mention. I'm the guy that tries to keep everyone up to date on what's going on with PHPStorm. =) I just really wanted to say thank you for mentioning it. It's just nice to see the bit of effort appreciated.
I think setting up Capistrano is like 1 minute thing for something simple as you can see from the article but it gives you much much greater flexibility in terms of how you deploy and peace of mind in the future, so lets say you decide to add a staging environment or deploy from a certain branch and so on, those changes will require seconds, while if you are doing it with plain git you have to write the bash script to do the job and then modify for each environment and so on. In general I think its well worth it. I also tend to have at least 2 environments for most projects I work on even if they are tiny.
This is fantastic! Exactly what i was looking for. Cheers!
I agree with you on Capistrano being a fast time saver. I created this capistrano template I use on projects based on resources I collected from around the interwebs: https://github.com/uberamd/capistrano-php-template It handles my staging &amp; production environments, checks out code based on branch used (staging branch goes on staging server, master branch on production), and will run SQL migrations as well which are useful if your database changes between environments. I do everything key based with no sudo required because passwords are a pain in the ass and having an account for deployments is slick.
I like Chef better than Puppet, personally. [Check out this repository](https://github.com/haydenk/vagrant-chef) I have been putting together to built a LAMP environment with Chef. I still have some things to work on but it works at the moment.
PuPHPet isn't the proper tool for learning Puppet. Its purpose is to abstract away the implementation details and just let you use it, as you would any other tool. Once you want to figure out how it works, then it requires you to learn Vagrant and Puppet's details.
My quicky solution to count weekdays between two ranges is: $date1 = strtotime('2012-03-22 11:29:16'); $date2 = strtotime('2012-06-24 03:58:58'); $days = work_days($date1,$date2); print "WorkDays: $days\n"; function work_days($start,$end) { $ret = 0; while ($start &lt; $end) { $weekday = date("N",$start); if ($weekday != 6 &amp;&amp; $weekday != 7) { $ret++; //print date('c',$start) . " is a weekday\n"; } $start += 86400; // Add one days worth of seconds } return $ret; }
Ideally we'd be able to overload operators and define our own at runtime.
Use Git.
SVN still has many valid use cases, and great front-end tools like TortoiseSVN for those on other platforms. "Use git" as a blanket statement is asinine.
**Always take advantage of pre- and post-commit hooks when possible.** I have pre-commit hooks that use "php -l" to check syntax and will not allow commits of .php files that fail. I also use xmlstarlet to similarly check for well-formedness of XML documents. I have post-commit hooks that prepare a simple report about what was changed and email it (with the commit comment) out to the appropriate mail list so people are notified.
It'd be better if it were more polished, saved details, etc.
Thank you, I believe that these two steps could really help streamline pushing dev to production or simply updating production files and will remove issues with conflicted files and whatnot. I'm going to dig into this and find some concrete examples. Appreciate your feedback!
Indeed. PHP's own documentation project still uses Subversion. Not because we're behind the times (we've intentionally not migrated to git), but rather because it offers some features that are infeasible in git, and virtually impossible on GitHub. The most substantial feature is externals, which allows us to organize the various components of the project and keep them in sync. It also makes it substantially easier to keep track of which translation branches need to be updated to reflect changes in the mainline English branch.
Suggestion for readability: $start += 24 * 60 * 60;
We don't use pre or post commit hooks that much. TTB folder structure, yes, immovable tags yes of course. We live and die by our ticketing system, which we upgraded recently from Trac to Redmine. Redmine rocks, really All out our repos are mapped to projects inside Redmine and also our auth, you commit or not based on the privileges you're assigned, it's beautiful. We installed a cool plugin called Code Review which allows to create issues to review your coworker's code, and we do that regularly. SVN by itself is great, but paired with a workgroup / ticketing system it's where everything gets done. 
I don't know how you got downvoted, as these are some good suggestions. I'm not super familiar with tags yet, though I do use branch/merge a lot. 
"SaraG had a beard in spirit" Sara is awesome. If you don't know, she's also a core contributor to PHP itself as well as HHVM.
Yeah I know you served the files from donated bandwidth :) Idk why the vagrant client failed downloading that box file - I just downloaded the file manually, that worked fine. About the shared folder: I am on a windows machine. According to the vagrant docs, the NFS flag is simply ignored, since not supported. But to be sure, I disabled it. Made no difference. I will try again soon and post the log message from vagrant here if thats okay.
In Subversion, tags and branches are conventions. This is confusing, but allows for flexibility. OTOH, I think the lack of enforcement gives subversion and the old difficulties in merging give subversion its bad reputation, mostly from people who've never worked with CVS. OTOH, it allows you do have separate release and feature branches, if you really need them. So creating a tag is exactly like creating a branch; you just have to be disciplined not to do any work there. So basically you already are super familiar with tags. :) I forgot to mention that you merge bug fixes from release branches back into trunk.
I would have done so on my linux host, but there is no sudo on windows :)
It doesn't do anything that shell won't do since ultimately it executes shell commands. What it does though is create a nice and uniform wrapper around those so that everything is clear and concise, written in simple ruby config files. Having multiple shell scripts flying around and updating them constantly can very quickly become very messy and lead to issues. So ultimately it boils down to cleanness and ease of use.
Seems awesome, but I have a couple of questions for you guys: * Do you get rid of apache/nginx/whatever http server you have to use HHVM? * Does anybody here use it in production (or know of someone using it in production), thoughts? * Do you think it's worth the "hassle" to migrate to HHVM instead of a traditionnal apache/nginx stack?
/u/reinink Answered your questions, but I'd also like to say here that I have my development environment running PuPHPet, and will soon be adding it to the public gui so others can easily set up their own stacks.
Sounds pretty neat, but I wonder what the real world speed/throughput improvements will be? I have no idea what the performance graph on that page means because the axises aren't labeled, but in any case I'm not sure how much of an overall speed improvement will be for most web pages since so much of the delay is database/disk access, not CPU computation. Thoughts?
Legendary. Thanks for keeping PuPHPet current Juan!
Is WordPress missing for a reason? To date they seemed interested in getting WordPress running: - [Getting WordPress running on HHVM](http://www.hhvm.com/blog/113/getting-wordpress-running-on-hhvm) - [WordPress 3.4.2 running on HHVM](http://www.hhvm.com/blog/29/wordpress-3-4-2-running-on-hiphop-hhvm) - [FasterCGI with HHVM](http://www.hhvm.com/blog/1817/fastercgi-with-hhvm) Heck, even the HHVM website is running on WordPress!
"Wordpress' unit test suite was just too gnarly to get running with our test harness. Send us a pull request if you can get it working." https://news.ycombinator.com/item?id=6937415
Just don't fucking do it. I spent two years in a company with 40ish developers who were all using feature branches with SVN and it was just a mess. A story: I work on something and send it off to merge, but have to merge whatever John was doing this morning before it can be peer reviewed. I look at the revision numbers and merge his commit. Then I try again and there is a conflict. I need to go and talk to John about the best way to fix the conflict. By the time that is done, somebody else has been peer reviewed so I need to update again. Oh look, another conflict. Finally I have that conflict merged and I scream across the room that if anybody else merges anything before mine I will cut them. They agree, so I'm next. Excellent. But, just as that is about to happen one of the QA team notice that there is a bug and John decides to pull it. Now I have to go and revert that commit, or merge the main revert. What. The. Fuck. Conflicts can happen on any system, but smart merging is possible with more modern systems so you dont have to update your branch before bringing it in to the master/trunk. Another benefit with Git is that I don't have to keep track on a little piece of paper what merges have gone in and out. Merging PRs used to be such a big job we'd have one dev on PR duties all day, and they'd get sod all else done. Using Git or Hg is insanely simple by comparison. Using anything like Git or Hg would have absolutely solved every problem we had at that company. 
Now as soon as I can install this painlessly on CentOS 6.5 and AMI Linux we're in business!
I think it is good. Congratulations!
I've been using simplexlsx to read XLSX files. Although I had to modify it so empty cells are not skipped when reading: https://github.com/raulferras/simplexlsx
I use it in production. It works great, as I host many WordPress blogs I've been seeing significantly lower CPU usage and way faster load times.
The last post showed a 40x speed increase running WordPress compared to a stock PHP-FPM install. I personally see a 15x speed increase on average running a variety of WordPress sites.
Also that FastCGI support will soon extend to sockets as well (currently it's just over TCP) - which is nicer when Nginx/HTTP server is on the same machine as HHVM.
&gt; what are your use-cases In-house development on web apps, scripts, and configuration management. It makes sense to keep things centralized and under strict ACL control in our case, which doesn't mesh as well with the Git way of decentralizing things.
Ahh, I see. Right now, we have a setup with an automatically-deployed production branch, a staging branch, and a testing branch where commits from local working copies are made. We merge test -&gt; stage -&gt; prod after the required testing is completed. They're basically permanent branches that will exist even once a merge is done. I dunno how well it'll work long term but it seems okay so far.
Is Wordpress a framework?
Your number of hours worked on the first and last day does not take into consideration the start and end hours of that work day. As is, you're adding the hours between the start time and midnight of the following day, and similar for the end time. I tested by specifying the start time at 10am, and the end time at 4pm of the same day. It calculated 30 hours (hah). A good start, but requires a lot more attention to start and end times to be as precise as possible.
Not really, it's a CMS. Similar to Joomla and Drupal, which were included in the testing.
I really dont think "fewer lines are always better" . but i was done and thought, hey, lets see how much i wrote. And i really did not want to copy anything. There are already simfonys and silexes and i just did something for my needs. But thank you for your feedback
Can't be a mentor but if you're looking for something to study over break: http://www.phptherightway.com/
I am very familiar with oop and do also know the techniques of modern software architecture. But as i said, i do not want to recode silex or any other existing framework, there is no need, it exists. I wanted to try another approach, and it worked really well for me.
You can roll out something like gitlab in your organisation which gives you "in house github".. stick it inside your network so it requires VPN access to get into. That'll give you a "central" location with reasonable control over who can do what. Of course you can't stop someone cloning the repo on a virtual hard drive and walking out the door with it, but really that is a problem regardless of your version control system of choice. The benefits of frictionless branching and clever merge strategies make me wonder how I ever worked with SVN to be honest. Oh and bisect.. if ever you wanted just one reason to switch to git it would be bisect. essentially you can "centralize" your git if you want. You can even use the exact workflow you use for SVN with git (everyone pushes to master...). You just get a bunch of great extras which help with developer productivity and quality :) 
I appreciate all of the feedback and conversation regarding different ways to manage code. I have a lot to read and research. Thank you all.
"explain"=="excuse" is false.
http://www.docker.io/gettingstarted/ try it out, if you treat the container as a single piece of deployable software and not like a virtual machine it might make more sense.
Wow this is a great achievement. Congratulations guys!
I don't think it needs to. Having two implementations is fine, so long as they are compatible. The RFC process is defining the language much more clearly. Having ten different implementations is fine: look at C. Pick the compiler or interpreter that best fits your specific need: from a router or tiny embedded device, through a single, low volume server, up to a heavy server cluster.
The situation I face is that we have a lot of contributors who need to be able to commit to the canonical version of the code, but only in a few subtrees. There needs to be one master repository to rule them all, I think. Maybe that could be accomplished by your "centralized" git idea, though. Either way, it works well, is pretty close to frictionless, and unless there was some real value in switching, I don't see the point. Did I mention that 90% of the users of this repo are on Windows and have very limited skillsets?
When I say "replace" I mean the engine that the community is pushed towards. It's fine to have two implementations, but one would be the default download, and one wouldn't.
Now i've got some encoding issues. When i'm using your library to parse a page with cyrillic letters (with charset=windows-1251) and print the content in the console, i'm getting weird diamond-like ��� characters. Example code: http://pastebin.com/8h4MrZdx I don't have that problem when i'm using sunra/php-simple-html-dom-parser. I tried some ways to convert the encoding of the content but didn't succeed.
It straddles the line between being a CMS and a framework - it's pretty much a "build your ideal CMS construction kit." It's incredibly easy to develop with - create {your_custom_field}, and call it from a template.
Drupal is a framework that has a CMS included.
If EE's price is too much you might check out Processwire. Craft is an emerging CMS that uses Twig. It's awesome. Free with some paid modules.
That would be so great!!! Thank you so much for responding! my skype username is: jordan.isidoro
but we all know this is a windows problem ;)
I'm curious why they would need this calculation. Generally, employees are only paid hourly or salary. If it's salary, it's a flat rate for showing up, 40/hours/week. If it's hourly, you should be getting paid for actual hours worked, whether it's a weekend or not.
I tossed my hat into the ring: http://stackoverflow.com/a/20696453/580587
Is phpMyAdmin?
And of course I break it myself right after posting. (╯°□°）╯︵ ┻━┻
It wants to be, what with the ever-growing number of action and filter hooks it presents to plugins. It has some serious legacy architecture issues which won't be fully solved unless they break backwards compatibility at some point, which they seem about as loathe to do as the PHP language designers, but if you set yourself up right, it's far from being the worst environment I've worked in.
Write your shell script to take the input from stdin and use proc_open() to pipe your data to it.
&gt; The most substantial feature is remotes, which allows us to organize &gt;the various components of the project and keep them in sync. It also makes it substantially easier to keep track of which translation branches need to be updated to reflect changes in the mainline English branch How is this impossible with a DVCS?
That's what I thougt too, but: https://twitter.com/HipHopVM/status/413368254631907328
i'll give it a try with a wordpress installation and a joomla-instalation in the next days to try something complex. configuration was as simple as hhvm -m server the box its runnin on isn't the fastes but it's not a raspberry pi ore something else, 2 xeon (p4 aera) meaning 3,2 ghz both with ht and 8bg ram, 4gb was compleetly free before the test. both tests, fpm and hhvm was running on this box
I'd say: go for Bolt! I'm obviously biased though, because I'm one of the developers. &gt; Also, for #3, my fear is that I may end up using a CMS with a smaller community and it might be difficult getting support for it. Future-proofing it may also be a problem. That's a valid concern, and something that we're aware of. We realised that doing "Open Source" is more than just putting your code on Github and calling it a day. To make a project grow, you need a community. And to get a community you need good documentation, support and the like. That's why we're constantly expanding the documentation and putting in the extra effort to help people with issues. So far we've seen a steady month-over-month climb in the number of contributors and 'stars' on our [Github repo](https://github.com/bolt/bolt), which is nice. 
Does this work without Laravel?
Yes, it was originally built for Laravel but was adapted to be framework agnostic. 
I have seen two developers working with svn shout each other over their cubicles asking the other not to work in a certain file because they are working in it. Also, how do you define atomic commits? Why do you think it wont have to touch enough files to create a conflict? What if two devs have to keep working in a same file, but on different parts? Doesn't svn update merge files, leaving you with nothing in case the merge goes wrong. With Mercurial, all my work is safe in the commit I made just before merging.
Lazy loading its the name of the game. Your code seems to take that to extreme (you only get the IDs first and load anything else on the first call). The performance gains might be minimal; instead of getting 15 complete entities with one query that may use lots of memory you may end up with 20 queries for something as simple as displaying a list of articles with title, author, publishing date, content etc. Another problem is that your models are not actually models until you get all the necessary data (whatever that might be). It would be very hard to validate them. How would something $entity-&gt;isValid() work if you only have the ID? Is the `title` attribute not set or not loaded? You might do some optimization like $collectionOfEntities-&gt;load('title', 'content', 'publish_date') to alleviate the pain but you still have the previously mentioned failure points.
last time i checked a year or two ago, the internal wordpress code was a bunch of spagehtti code :\
nope :)
I'm going to go for some feedback on your options here. &gt; Completely native PHP - Already know it, but writing some of the authentication, routing, purification, etc is a bit of a hassle. Obviously 100% customizable. valid. Totally customisable, but nothing much else going for it. You won't really learn much doing it, and what you learn will probably be kind of... bad. Sorry. No offense intended. &gt; Use just a framework + templating system, maybe something like Laravel. I've never used frameworks before, but it could be a good option. I'm still reinventing the wheel, though. I advocate frameworks enthusiastically, to the point that I think if you don't use them you're probably... I'm not sure how to put this... you're not providing the optimum value-add to exceed stakeholder requirements. Aka you're possibly shit at your job. Frameworks are hard. Because you know straight PHP it feels a bit like putting on new shoes. Everything just rubs you the wrong way and hurts, and you know if you just put the old shoes back on they'd be all comfy. But once you wear them in, you'll wonder how you ever did without. It's an investment in time, but it's an investment in yourself and your own skill base. &gt; Some kind of lightweight 3rd party CMS (anchor, bolt, etc) I don't really know these, so I can't speak for them. Your concern about having a smaller community seems valid to me, and you may find (depending on the software) that the level of customisability or flexibility doesn't quite match the requirements. &gt; A heavier weight CMS that's better supported (wordpress, etc). This will start fights, but to me, Wordpress is **not** a CMS. Sure, it's a system that manages content, in the sense that blog posts are content, but... it's just a blog. It's a CMS in the same way that a Nike shoe outlet is a sporting goods store. Technically... I suppose... but... not really... Regardless of the technical debate here, I would argue that Wordpress is horrible, and should never be used by anyone. If you have a blog... fair enough. But the further you swim from blogtown the less you'll want to have Wordpress around your neck. &gt; What's your preference for launching some fairly quick-and-dirty database driven content sites that are mostly simple but need some flexibility? Laravel. Absolutely. I can build them now in just a few minutes with the Way Generators and a little experience.
Also agreed. SVN was the best option a few years ago, and was certainly better than no version control at all. But if you're jumping into it, especially if you're teaching people, and even more especially if you're part of a largish team, something distributed is the way to go. My recommendation would be Git, largely because of its ubiquity, but also because I'm too lazy to look into Mercurial.
I would go with Laravel. It's really easy to use, has a great documentation, it's MVC designed and a great growing community. I worked with Zend, Symfony and Laravel framworks and I found Laravel to be the easiest. With each of these frameworks you are not re-inventig the wheel. You can use a package you used in a previous project in a next one. Also if you want to become a better developer maybe this post will help you http://www.andreiboar.com/career/on-being-a-better-developer/ There are my plans to become a better developer. So please go with Laravel, I promise you won't regret making this choice :)
My experience is that svn people less likely use feature branches because it's such a pain to use it. In hindsight my work in svn never feels save, just having to update my branch to "see" incoming stuff can create headaches. Not so with fetching/pulling (git/mercurial)
Days don't always have 86,400 seconds, i'd suggest $start = strtotime('+1 day', $start);
What is this?
&gt; I have seen two developers working with svn shout each other over their cubicles asking the other not to work in a certain file because they are working in it. Why? They're making local changes, when either of them finish their change they just need to do an svn up then commit if there are no conflicts. &gt; Also, how do you define atomic commits? Why do you think it wont have to touch enough files to create a conflict? What if two devs have to keep working in a same file, but on different parts? You shouldn't get conflicts if you're working on the same file but on different parts. &gt; Doesn't svn update merge files, leaving you with nothing in case the merge goes wrong. It merges the changes. If there is a conflict, it's probably because the incoming changes has changed some part in the code you're also working on so this would need to be resolved manually. I don't see how git would get around this same issue.
I wonder what nginx+fastcgi vs haproxy splitting Php to hhvm server mode and everything else to nginx would be like. Maybe I'll test that. 
[PyroCMS](https://www.pyrocms.com/) ... its really easy to get a site going within couple of hours. I use it for all the work ... check out couple of demos on my [blog](http://www.mypad.in/blog)
Amazing stuff, thanks for sharing!
&gt; This will start fights, but to me, Wordpress is not a CMS. I got your back bro. It's a blog-engine that is slowly being wrenched into a CMS-like shape because that's what a lot of users belatedly expect it to be.
Tell them to install SmartGit, and they can durp-click their way to a solution. I've had technically inept people using Git with no issues. There is always way repository to rule them all. Their local repo is exactly the same as a "working copy" just without the bullshit of having to instantly commit all code in one go and be online to do it. I do not see any benefits to using SVN in this use case, only misunderstandings about Git and the available applications. 
&gt; I do not see any benefits to using SVN in this use case So you don't consider the fact that something is set up, working reliably, the users are trained, and the procedures are documented as a "benefit"? Not to mention that the SVN server is provided by our research computing group and has a lot of tweaks to integrate it with our authorization and authentication systems? Switching for the sake of switching is an expensive move, friend, so what you're switching to has to be a true, clear benefit to make it worthwhile. I don't think you've shown me that git would actually provide anything I could use that I don't already have.
Did you see [this](http://community.office365.com/en-us/blogs/office_365_community_blog/archive/2013/05/06/are-you-a-developer-looking-for-office-365-directory-apis.aspx)?
&gt;In hindsight my work in svn never feels save, just having to update my branch to "see" incoming stuff can create headaches. Not so with fetching/pulling (git/mercurial) Why does svn up create headaches, but git pull does not? Honestly curious
The easiest way to do that would probably to use JSON: get the content from the Bolt-backend as JSON, and display it. You can use either javascript or PHP to do this, but the latter would be preferred, so it isn't dependent on the user being able to use javascript. 
HTML5 geolocation library is also available. The browser will ask the user if they accept the website viewing that information. If you're trying to determine region without their interaction, this wont work. Your page will also have to have already responded to the initial HTTP request. So if you're wanting your landing page to be region specific, this wouldn't work unless you were doing client side rendering (with like Angular/Ember or whatever) http://diveintohtml5.info/geolocation.html
When we check out a specific translation, it comes as a "module". This module includes the translation source tree, and the build tools for the entire project. When we make a modification to both the translation and the build tools (e.g. adding a new global entity), this is committed as a single changeset that applies to both components in the project. In git, this would require the contributor to make three separate commits. One commit to the build tools, one commit to the translation, one commit to the module to update the submodule refs.
My concern is the inverse. What happens when you use scalar typehints provided by HHVM...you have now succumbed to vendor lock-in. Maybe it will push the "reference" impl at Zend to make some ehnancements
I'm running it on windows as well, I don't know if it helps but I always open my CMD window by right clicking the CMD shortcut and "Run as Admin".
I don't think you've used subversion. It attempts to merge files, but in case of a conflict it has the conflicted file, the remote file, and your file. Any decent diff tool can resolve them easily. It's the same process that works when you try to unstash changes in Git.
And part of why I like subversion when dealing with junior devs is that I see those commits before the feature branch goes way off base and I have to correct them after they've done a ton of work on what should have been a simple change.
&lt;yoda&gt; ...and consistent in application, they are not.
I stopped reading at "gem install ...". I have never seen an easy install process that starts like that. I could be jaded from past installs, but honestly just have no desire to learn the intricacies of getting that to work.
If you're using apache, maxmind products mod_geoip, which does lookups based off a local file. When we did some research of the options a few months ago, it was the most performant.
Sounds great. I was just thinking about something like this for a project I was working on, which would make my life a lot easier when it comes to update queries. The last slide of the presentation says it requires quite a few hacks into the core to get the driver running... is this actually the case?
&gt;If you are using a dvcs, then you can go back to the exact state before you even attempted to merge, just by a single command. Technically you can do this, but generally, if I do an svn up, I would want the merge to continue and either edit the file to resolve the conflict during the merge, or postpone it to resolve it later. Then commit when you've resolved the conflict. In this scenario you're not going back to the exact state before, but I don't see many cases where I would want to do that. If I'm ready to commit something, and a conflict comes up, I would want to resolve it immediately and finish the commit. Now, if you are worried about conflicts and don't want to affect your local changes from a bad merge you can always do a dry run `svn merge –dry-run -r BASE:HEAD`. This will give you a preview and if everything is good, you can do the real thing. 
Yes, lets have more narrow-focus, fixed-language, non-intuitive, non-relational, impossible to generate statistics or data mining with, under-tested database systems. That sounds great. Alternative databases are for chodes who can't handle a straightforward logic-based language like SQL. And douchebags who think they're cool for using hip, immature, bleeding edge technology in production environments. Source: spent a year wanting to shoot MongoDB in the head every time I ran into something it *literally could not actually possibly do at all*... that I can do in my sleep in six lines of DDL SQL.
I wouldn't mind a more intelligent logical or operator: $foo || $foo = "bar"; or even better: $foo ||= "bar";
Go with [ProcessWire](http://processwire.com/). It's a CMS/CMF (Content Management Framework) with a beautiful simple [API](http://cheatsheet.processwire.com/) and can easily be bootstrapped into any PHP script you want. Templates are straight PHP and content from the page object is accessed in a simple semantic manner (Example: get the title with **echo $page-&gt;title**). Add to the that **all** template and fields are custom (you can even easily add custom field to the user template) and the fact that is super lightweight and blazing fast and I think it's got everything you need. Simply put, when I started using ProcessWire I stopped using every other CMS I had every bothered with, I have built tiny 8 page sites with it, massive 2000+ pages sites, internal web apps, client portals and more. It's easy and flexible and if I keep babbling about it this is going to start sounding like a commercial. 
Hang on. I didn't suggest you should switch. I said that SVN has no benefits over Git in that scenario. Git has a few advantages too. I was debunking your argument as an argument for picking SVN over Git, as to me they were not valid reasons. If you have a solution already set up, for free, and it works then wonderful. That doesn't make it the best choice, but if you don't care enough about switching then keep on trucking - I don't care. :)
Good point. Hopefully both teams will borrow from each other liberally.
It would be interesting to see what improvements Lars Bak could make on HHVM if he had the opportunity/desire to do so. 
In my opinion, allowing userland operator overloading and re-defining could be really interesting. E.g: $Cart = new Cart(); $Cart += new Article("Socks"); $Cart += new Article("Dogfood"); $Cart-&gt;getSummary(); // will list your cart with two articles. And you could have a syntax in the classes itself like this: public operator +($arg) { if ($arg instanceof Article) { $this-&gt;add($arg); } // ... }
I've used http://pear.php.net/package/Spreadsheet_Excel_Writer/ in many projects, including an in-house payroll application. At the time, PHPExcel didn't exist yet. So, although it is no longer maintained, I can vouch for it working quite well. I have used PHPWord in projects, and it too works well. So, if the same creators also made PHPExcel, I'm sure it's probably the way to go these days. Don't fully discount the older PEAR library though. It worked great for me!
I don't get it.
Stripe is nice and easy, as well as being incredibly useful.
I'm not that well versed on PHP. I do code on it sometimes but its not my go to. However if you were to duplicate/use bcrypt in other languages, say C#, how would you? SHA512 Salted is relatively secure, I would say.
Dropbox API is fun to play around with, and Google Drive, too. Both super useful as well.
The reddit API is fun. You'll get your hands dirty parsing through json data to get at the data you want.
Relative to clear text, sure. Bcrypt is a standard portable modular hash. There are libraries and bindings available for every language I've looked into so far, including C#.
Not a /real/ answer, sorry - but once you've gotten confident with APIs, try writing one :-) Something simple like a CMS you only talk to using JSON. It gives you a new set of challenges and issues, and another POV.
I haven't had any security issues with SHA512 Salted yet, but I will look into Bcrypt. Thanks. 
Wait, so you already have a database of your visitors' addresses? You're just asking how to do a trivial database query using the user id?
 $foo = @$foo ?: 'bar'; tada
I first started a small tool for Twitter and the API is quite good and easy to understand. 
Range operator for substring $a = "qwerty"; echo $a[0, 2];
I think the thing that you want to start with is a framework, not an API, but I guess it couldn't hurt. Starting with a good framework will teach you good habits before you start coming up with bad ones on your own.
I've used http://freegeoip.net/ in the past and had good luck with it. Though only to get zip code and feed appropriate "local" content. basic usage is like this function location_by_ip () { $user_location_json = fetchUrl('http://freegeoip.net/json/' . $_SERVER['REMOTE_ADDR']); $user_location = json_decode($user_location_json); if (!isset($user_location-&gt;region_code)) { $user_location = 'false'; } return $user_location; //echo '&lt;pre&gt;' . print_r($user_location, false) . '&lt;/pre&gt;'; //debug - outputs the $user_location object in a readable format } 
It's always easiest to learn when you're building something you'll actually use. I worked a lot with the Amazon API and a movie database API when I was starting out, because I had ideas for handy utilities there. What interests you?
I recommend this as well. I started with the Zend framework, although there are many. Symfony is also pretty good, as well as Cake. 
I love Symfony, but it is a **steep** learning curve. I've heard that CakePHP and Codeigniter are great places to start. I had a good experience with cakePHP, but that was years ago. I know a lot has changed since then.
Huge +1 to this. It's one of my favourite features of Ruby. I'd also like to be able to overload assignment.
I'll catch a lot of flack for this, but CakePHP is still pretty good. I've been writing a CakeAdvent series in /r/cakephp if anyone is interested. CodeIgniter is a dead framework. Many of it's more public developers have gone on to FuelPHP and now Laravel, and EllisLabs is giving it up to a new owner (http://ellislab.com/blog/entry/ellislab-seeking-new-owner-for-codeigniter). Symfony is less of a framework now, and more of a dispatch handler. It's very at odds with how a framework like CakePHP works, but both are good. Keep that in mind if you hate one and would like a different option :)
Do mean something like this? class cart { private $articles = array(); public function add($arg) { if($arg instanceof Article) { $this-&gt;articles[] = $arg; } } public function getSummary() { return $this-&gt;articles; } } class Article { public $article; public function __construct($val) { $this-&gt;article = $val; return $this; } } $Cart = new Cart(); $Cart-&gt;add(new Article("Socks")); $Cart-&gt;add(new Article("Dogfood")); print_r($Cart-&gt;getSummary());
* "¬" split the following value at the preceding one * "±" either add or subtract at the server's whim * "¢" center the variable * "§" spin around * "¯" turn upside down * "≮" slash if less than * "≺" poke into array * "∓" negative or positive at whim * "⊌" get upside down and look sideways * "⊼" precariously balance the totals * "⊰" sidewayly moustache the associative array's keys.
Facebook api is pretty rewarding
I'd love an "in" operator. For example: if('test' in ['foo','bar','baz','test']){ //do something } Would eliminate lots of code repetition in cases where the "in" array only contain a few values. There would also be a not in version: if('test' !in ['foo','bar','baz','test']){ //do something }
This is what he's talking about, but his syntax is much more intuitive in showing that you're adding elements to a collection than the unwieldy add function featured in your code. This comment is not an attack on your code, it's the way you have to do it and it works completely fine, but operating overloading is a powerful feature that every modern language should implement. I love C++'s operating overloading features because they make things so powerful.
You can check out mashape.com, a very useful site that is all about API's.
I would recommend giving laravel a go. Brilliant framework. The community is amazing. Also r/laravel
I agree, maybe have a look at laravel as a framework - the learning curve isn't too steep, it uses modern php, so you shouldn't pick up too many bad habits from it, and it is also very well documented.
Yes, except many think $Cart += new Article("Socks"); looks a little more pleasing than $Cart-&gt;add(new Article("Socks"));
The manual doesn't go into any detail on PHP's semantics for objects. Following on from [this excellent recent post on how PHP manages variables](http://webandphp.com/how-php-manages-variables), this comment in the manual provides a plausible semantics for assignment and reference assignment when dealing with objects. **Can anyone in the know vouch for the correctness of the model that is presented here?** It seems to rather conflict with the model presented in "How PHP manages variables", which basically says "objects are just arrays", and which has diagrams that omit any kind of "handle" object. If there are these "handlers" that point to objects, are these the *only* things that point to objects? Or can they be accessed more directly in other ways? Related to this, can someone explain to me how classes, subclassing, and dynamic dispatch can be incorporated into these models? It's not obvious to me how it works.
I was pondering something for a better for nested if-then-else where the else is the same process. Much of the time, I end up writing statements like this... if (isset($accountNumber) &amp;&amp; strlen($accountNumber)==6) { $result = $db-&gt;query("SELECT * FROM customers WHERE account_number = $accountNumber"); if ($result-&gt;NumRows==1) { // account found and we process ... } else { // error displayErrorMessage(); } } else { // error displayErrorMessage(); } It seems to me, there's a better way to do this.
I think I'll go with that! Expect a raw dump of it on my GitHub sometime soon. (Same name) Edit: Crap someone already took that. I'm going to go with AllForm. I'll try and upload a version Monday to GitHub https://github.com/ericbdev/all-form
DeathByFunc and WhatAreClasses made me laugh... And are ironically true. My Form confuses everyone else in my team (and me when I don't use it for a while). I also want to rewrite it as a class at some point too. 
But it does not solve anything. Problem is that I want to save my work right now and svn wont let you do that unless you solve the conflicts first.
Which movie database API?
CakePHP is probably good if you know CakePHP. If you're learning something new, the current version of Cake kind of ignores all the good shit that's happening in PHP at the moment. Composer, PSR, namespaces, etc. If you're learning a framework, CakePHP is not where I'd be starting right now.
&gt; I'm still fairly new to PHP, I've made really simple apps with MySQL queries and logins. You'll probably find, if you're new to PHP, that you're actually kinda doing this... a bit wrong. Since this is the bread and butter of PHP apps, you might well get a lot of benefit posting how you're currently working, and people can help you improve on that. Other than that, no APIs aren't really that big a deal. Probably you want to start messing with Frameworks.
I'm fairly experienced in PHP but looking at starting to use frameworks, would you recommend Symfony over say laravel?
You can use composer just fine at the moment - and in fact I do so on several projects. Of note, the Composer\Installers project (https://packagist.org/packages/composer/installers) came from a CakePHP core developer, who decided that we shouldn't be the only ones with easy access to installing packages however the framework decides. While CakePHP does have it's own autoloader, you can chain multiple autoloaders just fine and add a PSR compliant one if you so chose. Namespaces are the same. I am able to use my own projects that do implement namespaces - one of which is a queuing library for rabbitmq - within CakePHP just fine without it blowing up at all. I think that most people who lambast it actually haven't used CakePHP in a few years, and thus think that it is incapable of being a perfectly adequate framework. I'm happy to be proven wrong though.
I was making sure that was the outcome that was expected.
I'm primarily a SQL developer and I can tell you there are certain things that relational databases can't handle well, especially at scale. That's the reason that these alternative databases are coming out; they solve problems that RDBMSs can't. Granted, the projects are still young and people are using them to try to be cutting edge. However, you just sound ignorant to say there is no place for them, especially when companies like Google, Facebook, and Twitter are having to develop them in order to keep up with demand.
in would be nice but at least for now we have [in_array()](http://php.net/in_array) 
&gt; "&gt;&gt;&gt;&gt;": [1,2,3] &gt;&gt;&gt;&gt; $this-&gt;doSomething() == $this-&gt;doSomething(1,2,3) You might be interested in these two RFC's: * https://wiki.php.net/rfc/argument_unpacking * https://wiki.php.net/rfc/variadics 
Nice, thanks for sharing.
If you are an experienced enough programmer to know what dependency injection is, I would go with Symfony. [If you read about it and it is clear to you](http://www.phptherightway.com/#dependency_injection), that's probably good enough too. Otherwise, I would go with something that takes less effort to learn. My first day with CakePHP, I was making useful apps. It took me a week to really start harnessing the power that Symfony has to offer. Now that I know my way around, I won't go back. Other frameworks made me a faster programmer. Symfony made me a better programmer.
It's actually really simple: All PHP objects are passed by reference, and changing the value of a variable that references an object to a primitive value does not overwrite the object if another variable contains a reference to it. **It is only when no more variables point to an object that it is deleted or overwritten with a primitive value.** $a = new stdClass; $b = $a; var_dump($a, $b); //object, object $a = 1; //$a no longer refers to object, but does not change object to int 1 var_dump($a, $b); //int 1, object $b = 2; //$b no longer refers to object, and object is now available for //garbage collection because no variables reference it var_dump($a, $b); //int 1, int 2 Now, if variable $b was assigned by reference variable $a, than modifying variable $a would immediately overwrite variable $b as well, because it references $a, and the object would immediately be available for garbage collection since no variables would reference it anymore. $a = new stdClass; $b =&amp; $a; var_dump($a, $b); //object, object $a = 1; //$a no longer refers to object, and $b immediately reflects $a var_dump($a, $b); //int 1, int 1 $b = 2; //$b also modifies $a because it is a reference of $a var_dump($a, $b); //int 2, int 2
You can almost always get rid of nesting by either abstracting the handling of the result or by re-thinking how you do your checks. Example of rethinking the if-else logic: $result = null; if (isset($accountNumber) &amp;&amp; strlen($accountNumber) == 6) { $result = $db-&gt;query("..."); } if (!$result || ($result &amp;&amp; $result-&gt;numRows === 0)) { displayErrorMessage(); return; } // account found and we process 
oof... using @ is almost always a bad idea...
A regexp operator to go with those would be awesome.
They use a lot of buzz words that sound nice. I can't think of a use case I'd prefer this over SQL or one of the big NoSQL providers available. The OOP stuff is not a feature unless it actually makes something faster. I have ORMs for that in the cases I actually need them.
I'm not saying you can't use these things. I'm saying they're not fundamental to the entire core of the framework like they are with something like Laravel. That you can add support for them yourself is hardly the point.
Suggesting to learn a framework is horrible advice. First learn the language then a framework. Frameworks are not important anyways...
In my opinion, start with public APIs, just to get the feel of it. Instagram's public api is pretty cool- http://instagram.com/developer/endpoints/tags/ And then move onto bigger things with actual authorization. You could stick with instagram and try facebook, it has decent documentation.
Yes, the post is correct. Objects in PHP are represented using an "object value", which consists of an "object handle" and a pointer to a number of "object handlers". The "object handle" is an index into the "objects store", which stores the actual data of the object (usually an extension of a "zend object") as well as various storage handlers, GC information (including a refcount), validity info and other information. The "object handlers" define the behavior of the object. It contains handlers for everything from fetching properties, offsets and methods to overloading operators and GC semantics. If you want to find out the object handle of an object, just use `var_dump()`. You'll get something like `object(...)#123 (...) { ... }`, where `123` is the object handle. The "objects are just arrays" description has a core of truth, but is a major simplification. For a user point of view one can well describe an object as "an array of properties and methods". Internally, methods belong to the class entry and properties are stored in the "zend object" mentioned previously (and usually without use of an array, see https://gist.github.com/nikic/5015323). For a detailed description of PHP's object model, see http://www.phpinternalsbook.com/classes_objects.html. That particular resource assumes existing knowledge of PHP internals though, so it may not be much help to you.
Thank you for that :-)
I strongly suggest watching a video called "Teach a dog how to REST". Give it a search on YouTube. I learned so much from it, you won't regret watching it.
Dammit, I went with an el cheapo hoster for my personal projects; they use PHP 5.2.17, no current self-respecting framework runs under 5.3, most of them need 5.3.2 or 5.3.3.
Could you expand on your criticism and perhaps explain what you would do instead?
I know what you're getting at. Let's put it this way, if you did a dry run, your work is already saved and svn isn't preventing you from doing anything because you're not doing a merge nor are you committing with a dry run. What you are not doing, which you can with git, is committing your changes to your local repo. You can still do this with svn if you have your own branch. A conflict on trunk won't prevent you from committing changes to your own branch. If the conflict comes up while doing an svn merge \^/trunk, you can just revert that merge and your local changes won't be lost. Personally I don't have a need for this kind of flexibility, which i know comes out of the box with git and is faster because your own branch is local and not on some remote server 
I made the move away from CakePHP earlier this year. It works just fine as a framework, but it is really showing its age. In the end I decided I couldn't wait for CakePHP 3 and shifted to Laravel. 6 months being productive with Laravel and looking back and some CakePHP codebases I have, CakePHP seems incredibly verbose. Perfectly good framework it is, but there are far better options out there.
Thanks! That's exactly the type of response I needed. I woke up yesterday with severe code-writer's block and couldn't think it thru. I have a feeling I should be posting more questions here for guidance, I work alone in a remote area with no local resources. A second pair of eyes is some times the best programming tool available. 
* "€" selectively munch diacritics if locale not Windows-1252 * "£" diagonally skew integer
Interesting! Does somebody know what's the difference between this and how other popular languages work? Languages like JavaScript (* note at the end of comment), Python, C#, etc. Anyway, if anyone wants to run the example but don't want to do it in their machine you can go to http://writecodeonline.com/php/ and paste this: Class Object{ public $foo="bar"; }; echo "&lt;h2&gt;Before changing the state&lt;/h2&gt;"; $objectVar = new Object(); $reference =&amp; $objectVar; $assignment = $objectVar; echo "Object&lt;br /&gt;"; var_dump($objectVar); echo "&lt;br /&gt;&lt;br /&gt;-------&lt;br /&gt;"; echo "Reference&lt;br /&gt;"; var_dump($reference); echo "&lt;br /&gt;&lt;br /&gt;--------&lt;br /&gt;"; echo "Assignment&lt;br /&gt;"; var_dump($assignment); echo "&lt;h2&gt;After changing the state&lt;/h2&gt;"; $objectVar-&gt;foo = "qux"; echo "Object&lt;br /&gt;"; var_dump($objectVar); echo "&lt;br /&gt;&lt;br /&gt;-------&lt;br /&gt;"; echo "Reference&lt;br /&gt;"; var_dump($reference); echo "&lt;br /&gt;&lt;br /&gt;--------&lt;br /&gt;"; echo "Assignment&lt;br /&gt;"; var_dump($assignment); echo "&lt;h2&gt;Changing the state in \$assignment&lt;/h2&gt;"; $assignment-&gt;foo = "wat"; echo "Object&lt;br /&gt;"; var_dump($objectVar); echo "&lt;br /&gt;&lt;br /&gt;-------&lt;br /&gt;"; echo "Reference&lt;br /&gt;"; var_dump($reference); echo "&lt;br /&gt;&lt;br /&gt;--------&lt;br /&gt;"; echo "Assignment&lt;br /&gt;"; var_dump($assignment); echo "&lt;h2&gt;After setting \$objectVar to NULL&lt;/h2&gt;"; $objectVar = NULL; echo "Object&lt;br /&gt;"; var_dump($objectVar); echo "&lt;br /&gt;&lt;br /&gt;-------&lt;br /&gt;"; echo "Reference&lt;br /&gt;"; var_dump($reference); echo "&lt;br /&gt;&lt;br /&gt;--------&lt;br /&gt;"; echo "Assignment&lt;br /&gt;"; var_dump($assignment); (*) I just tried something similar with JavaScript. In JavaScript you don't pass variables as references explicitly. But it turns out if you create an object, then assign that object to other variable, changes in the original object OR in said variable will affect both. This happens both when using plain objects, i.e. var myObj = { a: 'z' }; var otherObj = myObj; and when using the constructor pattern, i.e. function someConstructorFunction(){ this.a = 'z'; return this; } var myObj = new someConstructorFunction(); var otherObj = myObj;
He said he already learned the language.
This is even better, as it splits apart the "get account" and "display error" functionality, making the code clearer, and allowing you to display an error in a different way, or handle the situation in another way, if you need to: function getAccount($db, $id) { if (!isset($accountNumber) || strlen($accountNumber) != 6) { return null; } $result = $db-&gt;query(...) if ($result-&gt;NumRows != 1) { return null; } return $result-&gt;Rows[0]; } function requireAccount($db, $id) { $account = getAccount($db, $id); if (!$account) { displayErrorMessage(...); } return $account; }
cake is only good if you are from 2005
Objects are assigned as references, and primitive types are assigned by coping the actual value. It's pretty much the same in all the languages you mentioned.
I would go with [Silex](http://silex.sensiolabs.org). It has the better of Symfony without being so big, using what you need (monolog, dbal, twig ... all are optionals) IMHO Silex is a better Slim, and Laravel 4 has become too big.
Try to fix a problem of your own. In my case I had problems with managing my personal finances. Because I wanted to learn Laravel I said "Hey, let's build a simple managing app using Laravel". So I created http://www.moneytablet.com/. 
Agreed! Kept it simple for example's sake, but you would absolutely abstract more out. As a general rule of thumb, if you have two levels of nested statements, you can probably do better.
Plenty of rest apis use basic auth. Even some that handles payments.
I have a pair of functions to clean up my code for this: v_check($foo, 'bar'); (or in 'safe' version of function, $foo = v_check($foo, 'bar'); Excuse the long docblock, I just wanted the functionality as clear as possible... /** * Extended isset() / is_*(). Shortcut/"clean code" function. * Returns variable value or a default value based on isset() and optional specified function. * * Example use-cases: * if (v_check($_GET['hurdles']) &gt; 5) * replaces: if ((isset($_GET['hurdles'])) and ($_GET['hurdles'] &gt; 5)) * if (v_check($_GET['hurdles'], false, 'is_numeric') &gt; 5) * replaces: if ((isset($_GET['hurdles'])) and (is_numeric($_GET['hurdles'])) and ($_GET['hurdles'] &gt; 5)) * $name = v_check($_GET['name'], 'Smith', 'empty'); * replaces: if (empty($_GET['name'])) { $name = 'Smith'; } else { $name = $_GET['name']; } * also replaces: $name = (empty($_GET['name'])) ? 'Smith' : $_GET['name']; * * Also makes for great shortcut code for quickly sanitizing a bunch of * GET/POST variables and setting default values in a single line. * Many of my non-framework projects will check every value with this method. * $hurdles = v_check($_GET['hurdles'], 7); // Return value or 7 if empty. * $hurdles = v_check($_GET['hurdles'], 7, 'is_numeric'); // Return value or 7 if empty or is_numeric() fails. * Obviously useful for more than just user-submitted data. Shorter and cleaner at any time than many different statements. * I use a second version of this (v_default(), which is identical except $var isn't passed by reference) * to echo database values for display and for inputs: &lt;?= v_default($strata-&gt;units, '(unknown)'); ?&gt; * v_default() is required because you can't pass magic object variables (like many ORM records) * by reference, so you get an "Indirect modification has no effect" error. * * $var can be any value, even a variable that isn't set. It is passed by reference to allow * unset values to pass without error like native functions, but no changes are made UNLESS * you uncomment the two lines in the function, which sets $var to $defaultValue if it fails the test. * (So v_check($x, 5) becomes equal to $x = v_check($x, 5)). * * $function can be the name of any function which returns true/false (common uses are 'empty', 'is_numeric', * 'is_date' (a custom function),...), or it can be a custom inline function: * v_check($why, null, function($var) { $do_something = totally_custom('and'); return (true or false); }); * * @param $var Variable to test * @param $function Function or string with function name to test variable with * @param $defaultValue Value to return if $var is not set or fails $function test * @return mixed * * Yes this could be shorter without braces or using ternary statements, but it becomes unreadable. */ function v_check(&amp;$var, $defaultValue = false, $function = null) { if (isset($var)) { if (is_callable($function)) { if ($function($var)) { return $var; } else { return $defaultValue; // return $var = $defaultValue; } } else { return $var; } } else { return $defaultValue; // return $var = $defaultValue; } } 
This is super outdated. What host is that? 
thanks
for now, employer is looking for a free service, but if all goes well we definitely will look at digitalenvoy if it more accurate, thanks.
Its a great alternative, but for now I'll work with no interaction options, thanks for the info on the hmlt5 tho, never heard of that one.
I'm not sure why you went with Go for this as apposed to making a worker in Php. Suppose go would be faster. 
I just chose a language that wasn't PHP. Taylor Otwell asked if anyone had written Laravel message consumers in other languages the other day on twitter. Additionally, PHP isn't fantastic at dealing with long running processes.
Yeah that would be a good place to start.
Google CSE would do that. I think you would have to stick to their formatting though, although I haven't used it extensively myself.
Yeah, It's definitely better than it was. There are languages that are better at long running processes than others.
I am using respect/validation and have come upon the need of writing custom validators to use with it. Pretty easy, you just need a simple validator class and an exception. The namespace must match the namespace of the other validators, so that it can be automatically called by respect/validation. What I cannot seem to understand is how to extend it in such a way that my custom validators don't reside in the same directory or even better the same namespace. For now I have (only for this purpose - but might come in handy for other similar cases) tweaked my autoloader to look for the class in the "vendor_overlay" (better name suggestions are welcome) directory, before looking in "vendor". It's inelegant, but I cannot think of anything else. Any ideas?
Hey there, the solution I am going to provide needs more documentation but it is **very** straightforward solution using [PHP's class_alias() function](http://php.net/class_alias). &lt;?php // On your `bootstrap.php` file class_alias('My\\Namespace\\Validation\\Rules', 'Respect\\Validation\\Rules'); Now you should be able to use the rules you create on *your namespace* on Respect/Validation. 
You're right about adding instances to a previously created validator. This works: $myRule = new My\\Rules\\FortyTwo; $validator = v::numeric(); $validator-&gt;appendRule($myRule); $validator-&gt;validate(42); // should be true The "v::something($params)" call is nothing but a fluent form of a Builder so all the validation tree can be composed in a single expression. 
I have something similar that I use for giving variables a default variable if they're not set. $name = var_set($_GET['name'],'Default); function var_set(&amp;$value, $default = null) { if (isset($value)) { return $value; } else { return $default; } } I have to do this so much, I'm surprised it's not in core PHP as an operator/function.
Well I'm not really having any issues, if anything it makes things a bit easier than what I'm used to doing. As you can see in the example, there's a cache layer in the middle that accepts an array of IDs and processes the ones not found in cache, so it's good to throw a bunch of IDs at once to it. I wanted to see if this had been done before in this format and if those examples perform it more logically.
Relevant: * https://bitbucket.org/mkjpryor/async * http://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html
Awesome! If you ran on any problems (or doubts) don't hesitate on creating an issue, please! ;)
This is great. Thanks!
Will do. The documentation is very well written and helped a lot. 
This is great, thanks! And the PHP internals book is a great resource. I've come to the conclusion that reading about "internals", like [the guide in the manual](http://www.php.net/manual/en/internals2.php), is probably one of the best resources for PHP semantics. I have half a mind to embark on a project to come up with a semi-formal semantics for PHP, since none really exists.
When you say the manual doesn't go into detail, do you mean the [Objects and References](http://www.php.net/manual/en/language.oop5.references.php) page? I had been a little naive about PHP's references until I finally stumbled upon that page, but reading it really cleared things up for me.
Also, if you're not using PHP 5.5, PHP generators are just shortcut for creating Iterator objects, which you can do in older versions of PHP for the same effect.
Wow, thanks for the Gold. That's really awesome! I wasn't expecting that at all. You're very welcome, and thank you for all the hard work keeping us updated. There's always great info there, I just wish I had the time to read/watch it all.
it's a Dutch hoster, not a big well known one. It's the kind where you can't call them on the phone for tech support; that's ok because I like to think I don't need any. You just order a hosting package and one second later all sorts of shell scripts kick in and you're ready to go. 18 euros a year and you've got a domain name, a bunch of mailboxes, more than enough disk space and like 5 MySQL databases. On one hand, that's just how I like it, on the other: well 5.2.
Sphinx Search will build an index based on a SQL query. Probably a better option is Elastic Search, though I haven't used it myself. If your site is fully public and easily indexed by a search engine, then Google Custom Search would probably work just fine.
Hey! We've been around for years =) Anyway, "The most awesome..." is just a headline. It made sense back in 2010 when only Zend, Symfony and Hamcrest were available. I could highlight a few points though: - The chain is not a simple chain (it is not just linear), it is a fluent builder for a composite structure. You can write almost any validation rule for any data structure and group it in a single object: v::key("name", v::string()-&gt;length(1, 32)) -&gt;key("birth", v::date('Y-m-d')-&gt;minimumAge(18)) -&gt;assert($someArrayWithData); - You can nest as many validators as you want. - Each validator is an instance that you can reuse (even for composing new, more complex instances). - Three kinds of validation reports (validate() returns true/false, check() stops on first error, assert() collect all errors). - Nested reports implement RecursiveIteratorIterator AND RecursiveTreeIterator (that's where the ASCII tree report came from!) - A selector API for finding messages in complex nested reports (findMessages(["user.address.street.length"])). - Reports are only generated when needed (true/false validation doesn't even touch the reporting system). - Really easy to extend (most rules have a single method). - Really easy to make inline rules: v::callback(function ($input) { return $input == 42; }); - Logic operations on any validator: v::allOf(v::numeric(), v::hexa(), v::min(1)); // numeric, hexadecimal and at least 1 v::oneOf(v::nullValue(), v::numeric()); // null or numeric - Integrates with ZF1, ZF2 and Symfony2 validators if needed. Dependency is optional. - A full concrete API (not relying on magic methods or chains) that can be built using dependency injection. - Straightforward to use on unit tests instead of the PHPUnit assertion library. 
Maybe try this for a cheap server unless you're a masochist https://www.digitalocean.com/
Perhaps the DocumentUp version would be better for reading: http://documentup.com/Respect/Validation/
You are welcome! Please!! Let us know of any thoughts you may have about it. :D
Do it yourself?
I fell in love with the dreaded goto recently when handling nested verifications. This solution is particulary good to deal with multiple error messages: if (!isset($accountNumber) || strlen($accountNumber)!=6) { $error = 'Invalid account number'; goto error; } $result = $db-&gt;query("SELECT * FROM customers WHERE account_number = $accountNumber"); if ($result-&gt;NumRows!=1) { $error = 'Account not found'; goto error; } // account found and we process return ... error: { displayErrorMessage($error); return; }
Except in this case.
i dont get it. Can u post some code to visualize?
It only deletes the backups when you mark the conflict as resolved. So it's not possible to check in a conflicted file and lose your backups unless you don't resolve the conflict and check in broken code. If you're asking what do you do if you integrate them and your tests fail, well, you fix it. Same thing you do when unstashing changes in git. But I've never really had that happen. And that's why you test before committing.
^__[Verified]__: ^/u/braaaiins ^-&gt; ^/u/topfpflanze __^Ð10.000000 ^Dogecoin(s)__ ^[[help]](http://www.reddit.com/r/mysubreddit/wiki/index)
It does seem to say that it does in the post you replied to. 
You are comparing the sublime to the ridiculous. People are asking for a balance. 
That's not true. The usage that is described in igorw's links is not replicable in PHP 5.4. It has fairly little to do with iterators and a lot with interruptible control flow. This particular pattern for handling async operations just wasn't previously possible ;)
Thanks for that!
Ah cool. Yeah I see it now! Didn't properly read that comment because I tried using respect last week and couldn't see it in the docs. Lesson: RTFM
The only real use I can see for generators is cases where you want to return a lot of user defined objects from a method. With out generators you would have to stuff all of them into an array and return the array. With generator, you can create and yield them one by one. I can't think of a case where you want to do multitasking in php though. I saw the web server example, but who is going to do a web server in php.
You'd be surprised. It doesn't sounds like PHP could handle it, but I've seen high-performance webservers written in PHP (not open-source though). And by high-performance I mean faster than node.js :)
Seems handy too. I can see applications that could need both approaches. I wonder if you can mix the two into a tree-like structure of validation rules? So each item may have a number of chained validation rules, any of which failing would halt further checking on *that* item, but then move on to the next item, i.e. not halt the whole process? I actually need to know this, as I have a pull request on my SagePay payment gateway which introduces *respect* as a validation engine. It looks good, but I need to study it a little more before accepting the pull request.
This keeps getting brought up and I'm still confused because both Laravel's IoC and Symfony's DI container look like Service Locators to me, yet their documentation constantly refers to them as either Inversion of Control (in the case of L4) or DI container (S2). I haven't spent that much time with Laravel, but Symfony definitely uses the Service Locator pattern (or, of course, I don't understand the difference between DI container and Service Locator)
I know that Symfony's [controllers can be used as services](http://symfony.com/doc/current/cookbook/controller/service.html) so I guess that is how the container would become a DI container, in regular controllers it's just a Service Locator, right? But what about Laravel? 
Hi all Made this out of frustration of having to make scripts to test magento methods in various servers/environments. Couldn't find other options that were polished / felt production ready and used Boris REPL. I was inspired by the tinker REPL in Laravel 4.1. Since it uses Boris it's really easy to fork my project and change Mage-REPL.php to bootstrap your custom or other frameworks before initializing Boris. Happy to answer integration questions and welcome any feedback!
It's exactly the same concept really, you can set up your controllers as services and define them in the container
Most of Symfony's documentation say to use the DI container as a Service Locator. The base controller class has the `get` method, which is not DI, but the Service Locator pattern. So that *is* confusing. But it has been brought up many times, and they have to find a compromise between "you have to understand the whole concept and do proper DI to use Symfony" and "I'm a noob, I want just to write a damn controller leave me alone". That's why you have the choice to define controllers as services (DI), or use the base controller class (SL).
I see that you have the IPv4, what if you also included IPv6. v::endsWith could it take in array values, as in to check if it matches the filetypes accepted like gif|jpg|png
&gt; Most of Symfony's documentation say to use the DI container as a Service Locator. The base controller class has the get method, which is not DI, but the Service Locator pattern. Okay, then I understood it correctly all this time; at this point I'm not sure why are they referring to it as a DI container when it's clearly not (because in most cases you extend the base controller, so in most cases you have a Service Locator) Thanks though, I will have to try defining controllers as services to understand the difference entirely. 
Great, thanks!
That would be useful definitely. Not sure myself, but I'm sure the creator would confirm
You could use the logical OR validator (oneOf) to achieve that. v::oneOf( v::numeric()-&gt;primeNumber(), v::nullValue(), v::string() ); Since v::oneOf already expects just one of the passed validators to be true, it ain't gonna check the remaining. If the rule for the prime number passes it won't touch the nullValue and string rules.
And it has allOf() and noneOf() too. Yes, this is in the awesome league. And thanks for the notes on my payment gateway - double-awesome :-)
My understanding is that this feature is only enabled so long as you're using the MySQL native driver (mysqlnd) and have emulated prepares enabled. I don't think there's any way to disable it directly as a feature, but if you use libmysql or disable emulated prepares, it should break the feature.
Also, look into Amazon EC2 free tier. You can get a free low powered server for a year with root access. It's great for the underfunded :)
FWIW that same server is also faster than standard php web SAPIs (apache/nginx/etc) even when those servers have opcode caching enabled. It would be very difficult to do this without generators.
Badly written (numerous spelling / grammar mistakes just at a glance), out of date and numerous cases of bad advice / out of date practices combined with a serious lack of depth. I won't be recommending this to anyone.
A good initiative to be sure. Why can't strcmp and friends be made constant time though? Wouldn't that be preferable?
You really don't want constant time comparison if there is no need, as it would waste cycles and instructions for no good reason.
I wrote Picto last week as an Imgur replacement. Chances are it's not going to replace Imgur, but it does provide a pretty good learning environment for Symfony. Some things you can learn: * Vagrant for development * Capistrano for deployments * How to integrate Resque for background processing * The Symfony service container for (faster) testing * Testing within Symfony * Data fixtures for testing in Symfony * Custom Symfony validators and constraints * Basic Symfony forms * Integration with Redis Check it out, let me know your thoughts. Thanks!
It's unclear (to me) what you're trying to do. If you're talking about some kind of batch processing, maybe one problem is that your queries aren't written efficiently or you don't have good index coverage. If you're talking about displaying records 100 at a time, and your query is so slow that it doesn't work for some or all sets of 100, then (A) see above, and (B) consider a separate table that contains references to the items to be displayed, or a full de-normalized set, or so. Really depends a lot on the details, which are very much missing here. &gt; The database engine we are using is MySQL. Should I try to move it over to a different engine? That's unlikely to solve anything. I expect the same problems would occur with any relational database.
For pagination, instead of using php to make groups of records, use MySQL limit and offset. For reporting, you may consider a second summary table that is updated via triggers or nightly / hourly crons. We might be able to help more if you share more details. Maybe even a schema of the table. 
Not sure what your budget is or anything like that, but we use this and the queries from millions and even billions of rows are FAST: http://www-01.ibm.com/software/data/netezza/ granted its pretty damn expensive... 
All true. Also make sure you have appropriate indexes defined. That can make an enormous difference. You probably need to learn about [EXPLAIN](http://dev.mysql.com/doc/refman/5.1/en/explain.html) to see what's really going on. And ... don't forget that when you have ORDER BY &lt;something&gt; LIMIT 100 then it probably* needs to do the whole query (or at least get all the ids), sort in the correct order and then return just the rows you want so indexes related to the order can make an enormous difference there too. \* "Probably" because the query engine will take shortcuts if and when it can.
Also strcmp has horrible semantics if you only need a true/false decision, too many people don't realize that the function returns 0 if the two strings are equal.
Wow, nice work guys. This is definitely something I'll be installing and testing.
php has a time out set in the ini file. This can be extended by set_time_limit(). This can be done every time you start a loop.
Perfect timing! I loved the old PyroCMS with Codeigniter, and I really missed it when switching to Laravel. Aside from the (great) functionality, it was such a pro-looking CMS... which counts a lot to the clients. Thanks Phil, to you and your team, for the hard work. I look forward to diving in.
It's a comparison function, not an equality test function. The people who are confused should be writing `$a == $b` instead of using strcmp. People should think of strcmp as a difference function, not an equality function. If the function were called streq instead of strcmp, then you'd have a good point. But in PHP, when comparing two values, you see this pattern recurring and it makes perfect sense. It made sense in the C days, and it makes sense now. You want to know how one string compares to the other, then strcmp can tell you, there's nothing wrong with its semantics IMO.
I am planning on taking a look at this when I get home from work today. I've started working with Symfony over the last month and I'm really liking it. Thanks for sharing! 
+1 for using symfony and vagrant. The only thing I would change, personally, is how huge the ImageController#uploadAction() is. I feel that the controller is in charge of doing too much work. Perhaps refactoring some of that functionality into services would be helpful. Overall I think this codebase would be a very useful learning tool for newer developers.
Symfony is one of the coolest frameworks I've come across. It's very extensible once you learn all its secrets.
Absolutely. And the way it's put together really advocates good design practices. 
You're welcome. Would love your feedback when you have a moment to take a look.
Yeah, it's doing too much now with it handling both URL and image uploads. PRs welcome, naturally.
You may have more success if you ask this in #symfony or #propel on Freenode.
Gotta say that your source code is very easy to read.
My problem with it is that it has what feels like "secrets". All in all, though, fairly positive experiences with it.
Thanks! :-) I try to keep the codebase readable.
Of course! The data structure is not so different so the trickiest part will be updating custom modules which utilize core module models and libraries.
A few things... * RuleSets seem like filler to me. If a single Validator instance is supposed to be able to validate data against multiple RuleSets, then why use constructor injection? Simply make it a parameter for `validate()`. Then I'm not stuck making `setRuleSet()` between my `validate()` calls. * The static-methods-that-return-callables for Constraints rub me the wrong way. Constraints should be classes that conform to a common interface. The static methods should then be factory functions for them (e.g. `Constraints::notBlank()` should return a new instance of a `NotBlankConstraint` or similar). This would allow for much more intuitive extension. * Rule messages need variable interpolation in all but the simplest of validation scenarios. As-is, your Rule messages must be maintained manually and you'll end up defining things twice (potentially resulting in out-of-sync messages). For example, if I define a rule that "Foo must be less than 10", and later I decide to change that to 5 and forget to change the message, I'll have a problem. See Symfony2 Validation for a good example of message interpolation.
LIMIT/OFFSET are your friend here. http://dev.mysql.com/doc/refman/5.0/en/select.html Also be sure to set indexes appropriately and look into using views as well, since this might help with speed depending on the situation.
If your agency isn't willing to take risks in the web development business, I feel like it wont make it very far. Aside from purposely being specialized in a certain area, you're just stagnating your progress in a world that is literally changing on a daily basis. EDIT: Happy cake day!
There are plenty of pagination scripts/classes out there, should be easy to implement. I would highly recommend converting the sql queries to views or procedures depending on the logic. I would make sure the queries are also well written, to make sure they have the fields selected, and where'd in the correct order. Good luck mate.
I understand what you're saying, I'm just saying you can't expand your toolset unless you expand your toolset. We have many Wordpress sites for the same reason. It's easy to develop on without much working knowledge of good code, and it's easy to use for the client. But it has it's limits. We've recently taken the plunge and started using ExpressionEngine on bigger sites. At first, it didn't go very smooth. But the third time was the charm, and now we're following best practices and building larger sites with ExpressionEngine and smaller, more user friendly (backend) with Wordpress. It's more about using the right tool for the right job, and knowing how to use your tools. Which takes practice. I kind of forgot where I was going with this, so I'll just leave this here.
&gt; The people who are confused should be writing $a == $b instead of using strcmp $a === $b. $a == $b between two strings isn't necessarily a string comparison.
The team worked super hard on all of this, the thanks goes to the lot of them :)
For a much better site search than Google's, take a look at [Swiftype](https://swiftype.com/). It's awesome.
... or you could just use APCu: https://github.com/krakjoe/apcu
Sure, but that's more yak shaving. I just needed something up and running, and I didn't want to deal with the module.
His comment would make sense by itself if he started off with &gt; return $_SERVER['HTTP_X_FORWARDED']; &gt; &gt;Do not do this. ↑ HTTP_X_FORWARDED is really only useful if you are behind a load balancer that is forwarding traffic to your web server, since in that case REMOTE_ADDR would be the address of the load balancer and not the client. Or if you have a reverse proxy or something setup infront of your web server.
I guess... I just don't see why you'd ever want to actually use apc_add/fetch with a file-system... it kind of defeats the point of being a fast accessed key-store.
Well, for one, it took 15 minutes to throw this together. Two, tmpfs can exist in memory. Three, this is only for development purposes to cache user-defined data. It isn't used in production, where APC does work correctly.
Shouldn't HHVM be pushing to get Doctrine supported, not the other way around? I like the idea of HHVM, as long as it keeps trying to maintain parity with PHP. I'd hate to see future code with a bunch of exceptions made for HHVM.
We're talking about two strings, and we're talking about equality, not identity. Can you think of a case where two strings `$a` and `$b` are not equal and `$a == $b` yields true, or of a case where two strings `$a` and `$b` are equal and `$a == $b` yields false? *Edit: /u/pilif set me straight:* `$a='00'; $b='0';`
I think it's going both ways. Doctrine is going to be important for HHVM's parity goals since a few frameworks use it for data storage. The post indicates Doctrine authors are also submitting patches to HHVM, so there's that as well. 
Ah, OK. I misread this as Doctrine developers are going to start working on changing Doctrine to support HHVM. 
Thanks a lot for sharing. I always wanted to find a good way to organise my code with symfony 2 projects your app seems to be agood starting point.
Sigh... [alot](http://4.bp.blogspot.com/_D_Z-D2tzi14/S8TRIo4br3I/AAAAAAAACv4/Zh7_GcMlRKo/s400/ALOT.png).
This, but also there really should be some configuration and logic to accept X-FORWARDED-FOR as the remote IP *only* if REMOTE_ADDR matches a known load balancer IP or network range.
Nice work phil and rest of the team
I agree?? I have no formal training. It was my first language and I still have no clue what I'm doing with it (Almost 9 months into serious coding 4-7 hours a week). Perhaps that's why professionals see a bunch of crazies like me wandering the country side duct taping code chunks together?? Though Javascript seems to be far more "wild wild west" than php. 
I just tried it and it did nothing but print out the same sequence of hex code. I think this is because it doesn't have `&lt;?php` anywhere? Not sure... but it'd need to be decoded to even run. Maybe it was just setting up for later use so they could upload images via a script which only checks the extension is correct and run them.
I think OP is playing the wrong game by trying sell it as being better than Silex. Maybe try letting it stand on its own; without comparison, and people will decide if it's better than anything else
First of all I am not so familiar with Silex apart from playing with it. So apologies if Silex have one. One of the good thing I would like to point is the Aura.Web_Project is the dispatching capability. Aura web project internally uses Aura.Dispatcher. The Dispatcher is recursive. Dispatcher after dispatching to the first object, if that object returns a dispatchable object, the Dispatcher will re-dispatch to that object. ( https://github.com/auraphp/Aura.Dispatcher/#recursion-and-lazy-loading ) The ability to recursively dispatch things help you with "Refactoring To Architecture Changes" https://github.com/auraphp/Aura.Dispatcher/#refactoring-to-architecture-changes One of the problem I noticed in reddit or any where is ( even me ) will directly jump and answer what we know or what we love. Probably a better undertsanding of the whole system is needed to make a good comparison. Back to aura project, some of the interesting articles you can have a look are "A Peek At Aura v2 -- Aura.Dispatcher" ( http://auraphp.com/blog/2013/11/04/aura-v2-dispatcher/ ) , the comments that made to the post "Using Aura Dispatcher in Silex" http://harikt.com/blog/2013/11/06/using-aura-dispatcher-in-silex/ ( that post is made by me, so blame me ) Happy PhPing!
Maybe the file was a test to ensure the attacker can upload files at some later moment.
Tell that to the Silex guys :-)
Fun thing about JPG files is that you can append a bit of garbage data (as far as the image decompression algorithm is concerned), and it will still render. At the very end of the hex data, there's this: &lt;?php @eval($_POST['cmd']);?&gt; So it displays the crappy JPG to the browser, but also executes whatever was posted in.
Hey man, I hear you -- the Silex folks (see the original article linked in my post) picked those criteria, and then other folks asked about it. If they want to pick different criteria we can have a different conversation.
Fuck. How did I miss that. Thanks. For those that care, hex to string does output this: &lt;?php ?@eval($_POST['cm?d']);?&gt; Fuckers.
Awesome, please let me know what you think. Picto is simple enough that you can understand the entire app easily, but complex enough that you can learn a good deal from it, I think.
If you can set disable_functions via php.ini you can prevent all sorts of unsavory things from being executed.
I can't, shared hosting...blah blah. I'm almost happy in a way - we've been pushing the client towards something that we can control properly (and at the same time rebuild the horrible system they have running there). For now I've dropped permissions to FA and am keeping a closer eye. Thanks!
This is an important less in dependency management, ala a generic `Cache` Interface that you can replace later on.
The .htaccess addition is often associated with FCKeditor as it allows images uploaded to actually contain PHP and get executed. Check your logs for suspicious POST requests.
Are you on a windows machine? If so, check hard for viruses, that's probably how that "hacked" it. Either way, change your root login.
Thanks, .htaccess is *nix only though! Root changed of course :)
$a='1foo'; $b='1';
It's Actually "Apache" only. Yes, there are some other apps that will interpret them (Lighttpd) but it was made for Apache.
This is a great argument against the use of htaccess files. If only it weren't for the prevalence of shared hosting...
Tried hitting the page without Javascript? I just checked without it (yay home office) and it looks like the flash is added by JS after page load, so you're not going to be able to find the element. Maybe figure out what the JS is loading from?
You're suppressing the loadhtml with @. If you take that off do you get an error? Is that the only HTML in the document? If so try adding full HTML document tags like &lt;html&gt; &lt;head&gt; and &lt;body&gt;
I'd be interested to find how they created a .htaccess file... Let us now when you find out! 
What are you using for monitoring? I'm starting to think I should be more paranoid
"Permission Denied" ... "Oh, just give it all the permissions" / "chmod 777"
That's about the extent of my Unix configuration ability... I should read up on that probably... 
You're correct on both counts.
Not *simply*. You need to google "headless browser" there are bunches, it's going to be slow, use a lot of resources... basically you need a "real" browser. That is: something that can load the HTML, create a DOM, invoke a JS engine, and run the JS correctly on the DOM, etc.
@ could just aswell be replaced by a try/catch statement. So in this case I would say your argument is invalid. However, the @ is not a good practice no, so I do agree with it being better left out of PHP all together.
If this shit is for your development purposes only, then why the hell are you sharing it on /r/php. You think we can't fucking write this shit ourselves? 
This also works with PNG files. It handles the image data as raw output, but still executes the code on the tail end. It's usually used in conjunction with local file inclusion exploits. Upload an avatar, find the 'real path' to that avatar, execute the file on the server (avatar in this case, or any user data saved to files really) - this is of course assuming they *haven't* added handlers. No LFI is needed if jpeg is straight executable. Bad news. If you found this on your server OP, I would patch everything and do a full code audit. There's almost certainly backdoors hidden in your code. What I've seen in the wild is picking random files, any file really, and sticking things like if($_GET['s']=='v'){eval($_GET['d']); exit();} Or include in place of eval. EDIT: OP says they're on shared hosting, welp. Might report this intrusion to the host itself as it could be a vulnerability on every one of their client sites. I've heard of entire dedis (all shared sites on dedi or VPSes) or entire datacenters being worked over.
If the load balancer is in your setup your web server will normally be configured to set REMOTE_ADDR correctly. If it comes from the user (say an ISP proxy) then I can pass the X-Forwarded-For header myself. I can essentially tell you I'm connecting from any random IP and you will just blindly believe it. REMOTE_ADDR will always be the IP that you return data to so it's the only validated IP you will ever have. 
There are certain ares where you'll have to use it to avoid warnings being generated for code where you actually handle the issue. Example, is_dir-guarding: if (is_dir($dir) || @mkdir($dir, 0775, true) || is_dir($dir)) .. which will attempt to create the directory only if it doesn't exist, and will handle a race condition where the directory is created between the is_dir check and the call to mkdir. mkdir will generate an E_WARNING if the directory already exists. If you want to remove @, you'll have to modify the internal functions that rely on it being there for certain errors. So .. the energy spent on arguing pros/cons are probably better spent on abstracting away the need for @, instead of breaking the underlying BC.
What kind of monitoring do you run?
If you read the code, you'll see that it only uses REMOTE_ADDR if none of the other stuff (X-Forwarded-For, etc.) was found. This is bad logic. If you want a useful log, you have to **always** log REMOTE_ADDR and then you can also add a synthesized addendum for X-Forwarded-For and other possible proxy headers, e.g: 172.16.243.89 (X-Forwarded-For: 192.168.95.107) Obviously if you are behind a reverse proxy or similar, then your situation is different.
I can't help thinking a trivial flow change would make that entirely redundant. I'm not generally for long chains of conditionals, but just for this kind of edge case it seems pretty hard to justify.
Congrats to Phil &amp; Co, nice milestone. When I'm finished a front end EmberJS project I'll give it a spin
jeffbridges-dude-yourenotwrong.jpg
&gt; You need to practice and debug and solve the problems. Thanks for the useful information.
Wow.... Just, wow.
Did your DirectoryIndex directive get appended by any chance?
Because this subreddit is for sharing PHP-related content. If you believe it doesn't belong here, downvote it and move along.
Not meaning to be difficult but installing apcu is a 90 second task. 
You have an interesting point, but due to the nature of APC being a Zend extension, this is either not possible, or probably unwise. Zend OPcache should really have a user data-store, but that's what APCu is for. I suppose that's the real way to have a cache "interface" when it comes to extensions. On the other hand, the way frameworks abstract cache management systems is good. Just call Cache::store(), and it'll point it to memcache, apc, or whatever you want.
I agree - my opinion is that no one is forcing you to use @, so what is the harm in it being there? If you are forced to work with a developer that uses it too much, then be mad at the developer for not finding a more elegant solution, rather than mad at the language for its versatility. People complain that PHP "encourages poor coding practices," but that is not the case. Just because you *can* write poor code and still have it execute is not a fault of the language - if anything it adds versatility and proliferance (more people can use it) to the language. Look at HTML. It will try its damnedest to render your absolute garbage code, and few are complaining about that.
I manage a few servers at work and we have been using webtatic lately with great success
wouldn't one know if they were behind a proxy? this seems like something that is impossible to do correctly without some foreknowledge of the physical layer.
Petition? Open an RFC! https://wiki.php.net/rfc#request_for_comments Really? Downvoted? This is the official way to get ideas and suggestions into the PHP language. Maybe my response was too terse - I didn't intend to come across as an ass. Really, this is a genuine response. If you want to change something in PHP, this is how!
Given the right conditions, this can easily end up being not as much of an edge case as you think it is. And because most error handlers (rightfully) cause an E_WARNING to terminate the script, you absolutely have to do *something* about it.
This is cool, lots of things to learn from if you're just starting with SF2. The only thing that "upset" me was the tests relying on external services (Redis and Doctrine). 
Please note that although regex are handy for some situations, they are not suited nor intended [to deal with HTML or XHTML](http://stackoverflow.com/q/1732348).
Right? One would expect more professionalism from doctrine
Okay, thanks to your suggestion that it's javascript I found the &lt;script&gt; tag on the page where the flashvars are stored prior to embedding the swfobject. Does loadHTMLFile() ignore/remove &lt;script&gt; tags? It doesn't seem to find any elements named "script".
Been wanting to check this out. Thanks for the update.
The original Silex post quoted in my article does in fact "engage in these silly benchmarking discussions," seeing as my post is in response to theirs.
I have written on the differences in "functionality and approach" in other articles. You may wish to scan through the post listings at http://auraphp.com/blog for more.
I would consider this more of a 'database class' or 'querybuilder' than a full fledged framework. Regardless, congrats on the release! 
Even the phrase "decide if it's better" involves a comparison. ;-)
Coming from perl, regex in php made it possible for me to easily convert. When I see people playing with strstr and str_replace, I think to myself... Script kiddie! Regexes are teh real shitz.
&gt; A simple example of such regex is `/[o-9]+/`: instructions to find numeric occurrences in a string. Yeah, that's probably not going to do what you think it does, Matthias.
Obligatory classic there.
&gt; The Installation is simple and fast, as promised. &gt;Start off by extracting the downloaded .zip folder to your web root. Aaaand I'm out. Edit: Holy shit. I've just looked at the source. I wanted to see if it was namespaced. Usually a good guide to whether there will be dragons. It's a mess of global functions. This is not OOP in any way. I don't know whether I'm out of line but in my opinion if you're not doing an application OO, you're almost certainly doing it wrong. I wouldn't touch this with a sturdy stick.
For actually parsing html the Symfony DomCrawler is amazing. [Link]( http://symfony.com/doc/current/components/dom_crawler.html) 
They all have their place.
Uhh..? .htaccess files are perfectly fine, so long as they can't be written to by the user running httpd.
PHP on shared hosting..... More than likely a Linux server. Actually I would put money on it. Who runs a "large" website on PHP and windows.
Well... Check yo self http://www.youtube.com/watch?v=5aAbOgdbTbM
http://www.reddit.com/r/PHP/wiki/index#wiki_frequently_asked_questions
&gt; Tmux tutorial ----------- &gt; /r/PHP 
That looks useful, but it doesn't really answer my question. I need suggestions on learning php from nothing as opposed to the tips and sample codes in the FAQ. 
Just start writing. Yeah, that's a little tongue in cheek and assuming... I will hope that you are familiar with programming in general. Even better, programming in C. PHP is very C-like in its layout and syntax. Until you get to the nitty gritty that is. Think of a little project. A web page or utility that you like like to work on. Get yourself a programming environment set up. The easiest is just a local server and IDE. I recommend (if you are on a Windows or Linux box) getting NetBeans (v 7.4) and a server stack such as XAMPP. WAMP, or LAMP. NetBeans is a great IDE for PHP, t works well with the debugger and most browsers. Special stuff for Firefox and Chrome. 
Except that a strstr() / str_replace() call will run rings around a preg_replace() call so far as CPU cycles if your replacement requirement is simple string/character matches. 
Do you use windows with a terminal emulator. A lot of people do. That is what I was referring to. When you ssh some people manually enter credentials.
He once ate twelve hit dogs in one sitting!
Serious question: what benefit does small size get you? Do you have a super conservative web host?
They actively slow down the performance of your application because Apache has to search every single directory looking for them during every single request.
Native esxaping functions have flaws. Look up how many times mysql_real_real_escape_string has been compromised. And what do yoy mean by "do it right" ? Youre just calling a single method. Its not like there is some strategy involved. 
Nice work. One minor point, instead of the logic in `Utility::getRandomString` you might want to look at http://php.net/openssl-random-pseudo-bytes, or just use the symfony utilities http://symfony.com/doc/master/book/security.html#utilities
How so?
You wrote the letter o instead of the digit zero.
right. Make it $a='00'; $b='0';
WHAT IS THIS SORCERY
$Harley_davidson-&gt;wheels_num should work just fine. Have you tried it? Does it give some errors?
I thought that would be all I had to do as well, but nothing. I tried on my server and here: http://writecodeonline.com/php/
fixed, I'm an idiot, I wrote contruct instead of construct. thanks anyway dude!
Ever heard of google? There are millions of php or jquery scripta out there, plus reviews, just search.
Ah, I see now: it's because both strings are numeric. Thanks for pointing this out to me.
Yes i copied it from some where in the google.
This code is pretty dreadful...and hardly "advanced"
 &lt;?php $connection = mysql_connect('localhost','phpgang','********') or die(mysql_error()); $database = mysql_select_db('phpgang') or die(mysql_error()); ?&gt; Use of this is so bad that you forfeit any right to instruct. It's proof positive that you *don't know what you are doing*. People repeatedly writing articles like this is why people keep writing articles like this. By perpetuating it you are **actively hurting the language**. I recommend actually learning the language before having the presumption to instruct on it. 
Thanks for this wonderful comment I am still learning and your ideas boost me to do things like this.
Do them quietly and learn. Posting stuff like this just makes you look foolish. At best you could post something like "Hey, guys, I'm new. How's this?" instead of writing something you think is great and trying to get communities like Reddit to promote you. 
BUT ITS NOT AS LIGHTWEIGHT AS AURA, AMIRITE GUYS?!
jquery itself isn't the problem in this instance. The PHP is atrocious.. and passing off rudimentary ajax pagination as somehow advanced is laughable. 
Not true. I've known several incompetent idiots who made a big deal about file size. :)
I doubt any article from the last 3 years that still uses `mysql_*` functions...
There is so much wrong with that link. You Googled this and posted it (at least I think that's what you meant), well here's my two cents. This is going to sound harsh, and if indeed you did not write this article, then just learn and absorb what you can. No PHP guru was born a PHP guru. The `mysql_*` functions are deprecated. Learn other ways! I personally like the PDO object but maybe the `mysqli_*` fuctions are easier, never tried those. They're not explaining that you need to protect your database from [SQL injection](http://www.php.net/manual/en/security.database.sql-injection.php). They escape their queries, but manage to hide it very well. Learn how to use your database systems safely. I'm not saying for this for your sake, but for that of the poor saps whose data can be stolen if you don't. If I'm wrong and you made this link instead of somebody else, **please stop teaching people PHP** because what you're doing is downright dangerous. The first line of this JavaScript code is unnecessary, also they forgot the alt attribute: $(".flash").show(); $(".flash").fadeIn(400).html ('Loading &lt;img src="ajax-loader.gif" /&gt;'); In loadData.php starting on line 4: $query="select id from pagination order by id asc"; $res=mysql_query($query); $count=mysql_num_rows($res); They make MySQL retrieve every article, then they make MySQL sort all of those articles, and the only thing they do with it is get the total number of rows. Here's how this should be done (but again, the `mysql_` functions are deprecated so you really shouldn't be using them): $query = "SELECT COUNT(*) FROM pagination"; $res = mysql_query($query); $count = mysql_result($res, 0); The difference is that it's much easier for MySQL to count the number of rows than it is to list all the row ID's. They can't spell their own name: &lt;title&gt;How to create pagination in PHP and MySQL with AJAX | PGPGang.com&lt;/title&gt; They have an XHTML doctype, and use links with `target="_blank"` but those aren't allowed in XHTML. I'm sure there are quite a few that I've missed.
https://www.google.co.in/search?q=zend+lucene+tutorial for pure php solution. Otherwise Sphinx. MySQL 5.6.x has InnoDB FTS but it is supposed to be slow. MyISAM has FTS but MyISAM is only good for read-only tables as the entire table is locked for an insert or update. MySQL has a Sphinx plugin IIRC - https://www.google.co.in/search?q=Mysql+sphinx+plugin 
http://cheatsheet.processwire.com/ Looks *good*. thanks for the info. 
It's certainly useful beyond password hashes, but that's the most approachable use case. It'd be good to add other use cases to the documentation after it's - hopefully - merged. Any specific suggestions?
There are a lot of things that I would recommend doing differently (i.e. using prepared/parameterized statements), but from a casual glance, it seems $name is never validated. It's escaped so there's no SQL injection vulnerability, but it gets stored and displayed as-is without any escaping, which opens the site to a persistent XSS. Another site can POST to the login form to activate the stored XSS since there is no measure to defeat CSRF.
There are a couple of things you're doing wrong. - Use prepared statements for the database queries. - Do not use md5. It's almost like you're storing the password in plaintext. Use a stronger algorythm.
If you're not using a framework, you will fuck up your forms, I guarantee it. Login and sign up forms are no joke. Do not use this, or reference this. Use a framework.
Apparently it's not even his own code. [He stole it from some other site](http://www.reddit.com/r/PHP/comments/1to4dq/how_to_create_advance_pagination_in_php_mysql/ce9uau4).
Well, he didn't steal, he just... used. But he's perpetuating the cycle of shit code on google.
http://www.php-fig.org/ + http://www.phptherightway.com/ should get you started :)
http://shop.oreilly.com/product/9780596007126.do is an easily digested book on design patterns (note that the code given is Java). I suggest that you are wary of design patterns, though. It's easy to over engineer solutions (this, at least, was my experience). That said, it's good to know what Factories, Singletons, Observers, etc., are. Good luck to you.
Here are some books I recommend on design patterns: [Design Patterns](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_3?ie=UTF8&amp;qid=1388006559&amp;sr=8-3&amp;keywords=gang+of+four) [Test Driven Development](http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530/ref=sr_1_1?ie=UTF8&amp;qid=1388006575&amp;sr=8-1&amp;keywords=test+driven+development) [Refactoring](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1388006592&amp;sr=8-1&amp;keywords=refactoring) [Dependency Injection in .NET](http://www.manning.com/seemann/) [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=la_B000APG87E_1_1?s=books&amp;ie=UTF8&amp;qid=1388006695&amp;sr=1-1) None of these books are PHP specific which is fine. It seems like you already know about the different PHP tools and just have to spend time using them. However, learning proper design patterns and writing quality code is where most programmers fail. Even if you learn all those tools you may not write great code. The books I listed above have helped me a lot and they may help you too.
I was in the same boat as you. I started by learning a real easy to use framework I used Code igniter. It was easy to get setup and easy to learn as its amazingly well documented. Once I had a good grasp on CI I tried my hand at laravel. Its still not as well documented as CI but it is getting there and it introduces you to composer as well. That's how I did it and its working pretty well for me.
After you got a grip on Laravel I recommend checking out Symfony2, it's a bit "better" designed - at the expense of development speed. But you gain infinite testability and flexibility.
I used to use SVN (and CVS occasionally). Now I use Git. They're all pain in the ass, but different kinds of pain in the ass. And yet you can't live without (one of) them.
Update scripts. You said it. Alter tables and eventually converts/migrate data. 
Old-school dev here. I've been working in the industry since the dawn of time (1997). I've watched the industry transition from CVS, to SVN, to git/mercurial and let me just tell you: git is the absolute tits. I want to have its babies. It is *not* a pain in the ass. Try to do "git stash" with svn? Thats right you cant. 
The simplest approach is just to maintain update scripts. Name them something sensible (probably with a date-stamp of some kind), and only update databases (even in development) by writing an update file, and piping it into mysql. If you're disciplined about it, you have perfectly repeatable schema/data changes. If you want to get fancier, you can use a migration framework. I use Doctrine for several projects, and their migration framework works well enough. If you don't need the bloat, you might try a standalone migration framework, like [Phinx](http://phinx.org/). I haven't played with it, but skimming the docs, it looks reasonable. The chief benefit of using a framework is that it keeps track of what migrations have or haven't been run, so you won't accidentally run the same operations twice.
You are exactly right my friend. They're all a pain in the ass. We really need something better.
Oh yes, that's the time I stepped into web development! Before that I was still struggling with Oracle back when it had no concept of an autoincrement field and you had to use a trigger to update your id field. I know git is better than what we ever had and you're right, it **is** a lot better. But I still think it could be way more intelligent.
 Basically always when client provided data is compared (as is) against a secret. Ie. auth tokens, HMACs etc.
Right, but looking at the length the documentation for a PHP function usually has, I can hardly explain all of that. Maybe I'll use CSRF tokens, might be the next most approachable thing.
Currently I'm picking up phpstorm (used sublime text 2/3 for the last 18 months or so). If anybody has any suggested resources for phpstorm workflow let me know!
Been transitioning to symfony2 as my framework of choice lately and I found these resources extremely helpful for me: [Easy, step by step walkthrough for making a basic app](http://www.sitepoint.com/building-a-web-app-with-symfony-2-bootstrapping/) [Symfony Book \(Coined Symfony Bible by the symfony dev team\)](http://symfony.com/doc/current/book/index.html) [Open source web app submitted here a few days ago. Been referencing it a lot.](https://github.com/brightmarch/picto)
His composer tutorial was the best intro I found on the web also.
Hashing is not encrypting! If you make a tutorial about a login with PHP you should at least know that.
Well I've been constantly coming back to your app as a reference for the last few days and found it extremely helpful. Thanks for sharing! I might even come back with a few specific questions as I get deeper into it if that's not a bother.
The term you are looking for is migrations. &gt;I've previously seen "update scripts" that are written per release and just keeps handwritten SQL statements that are eventually run on next release, but that seems like too much effort on a constant rolling release. That's exactly what you have to do, there is no magical solution. Even more, you will also have to write the inverse part of the migration too, otherwise you will not able to switch between branches, or go back to older revisions, because your database will be in a different state than what your code expects. A migration library will give you a framework, that will keep track of what migration scripts have already been ran, what migrations need to be run, and allow you to apply some/all of the necessary migrations. I'm using [doctrine migrations](http://docs.doctrine-project.org/projects/doctrine-migrations/en/latest/toc.html), I believe it's still beta, but it works well. I have heard good things of Phinx too, I'd suggest the latter, unless you are also using some other doctrine library, like the DBAL, and/or the ORM.
I was steeled for an absolutely terrible benchmark, but that was pretty good. Self-admittedly simplistic, but presented in straight-forward terms with data and a clear statement of where it can be misleading (it's a primarily a computational test). Nice.
If you like clean code, fully decoupled libraries, and truly independent packages, then the Aura project is for you. You can download a single package and start using it in your project today, with no added dependencies. http://auraphp.com
for git, I would suggested adding this to your post. http://git-scm.com/book it's was a GOD SEND for me. Now I consider myself git sem-pro.
That's really awesome, I love hearing that. I'm in the process of adding a small admin panel which will use the Symfony security component extensively. If you have any questions, feel free to ask or open a PR if you have new feature requests/bug fixes (being tracked on GitHub).
Here is a free git book. It is amazing. http://git-scm.com/book
I use the Symfony components pretty heavily (via Silex). You made a good choice! it's a great framework and set of libraries to learn. Fabien Potencier's "Create Your Own Framework" series is a really good tour of the the main components. http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1
Ahem, rebase. ;) 
Stop wasting your time using bloated PHP frameworks. Write good, reusable OO methods.
Well look at that. Thanks!
Laravel is just as testable as Symfony.
Well laravel's orm is an active record, but it's also significantly easier to use. 
Please correct me if I am wrong, but isn't using the command line and using design patterns the epitome of an old-school developer, and/or just a skilled developer? Both came out of the 1970's. And Symfony is older than CI...
I was in your boat *three weeks ago* here is what I did: - install ubuntu next to lame ol' 7 - google "ubuntu install LAMP" or "install apache/php/mysql/etc". Do whatever you are told. - wow this is easy! why did I ever fear this? - install nano - why can't I edit my www directory? - sudo? oh, I get it. - "look at me, I am making php stuff in nano on my local server! 1 hour in! I am a server goo-roo!" - ok, lets install laravel - apparently I meant "ok, lets install composer" - ok! now laravel! - something is wrong - "I am doing what the laravel docs say..." - find this tutorial: http://www.dev-metal.com/install-laravel-4-ubuntu-12-04-lts/ - "I don't actually feel very smart anymore. Well it **IS** working..." - Laravel Hello World! Ok, Now I am actually a god! Now on to that Laravel tutorial - HOLY FUCKING SHIT, WHAT HAVE I BEEN DOING WITH MY LIFE?!? THIS IS AWESOME! Also: supposedly git.
Care to expand? Git is far easier and much less a pain than Svn ( and for sure cvs). I'm assuming that if you think git is a pain you have never done serious branching and merging and are probably working with a small team where everyone is committing to *trunk* (shudder). When you start to really use your VCS then you will start to appreciate Git. Don't just say "it's a pain" without giving any reasons, that doesn't help anyone. 
Oracle still doesn't do ai right?
*SVN* is a pain in the ass. You just have Stockholm Syndrome. Git is amazingly easy by comparison.
The one thing to keep in mind is that you, as an old-school developer, probably have a way better understanding of programming than many of the people who praise design patterns and frameworks all day long. If you understand and use OOP the right way, you will not have a hard time learning Symfony or Laravel (which is based on several Symfony components, among other things). These Frameworks make a heavy use of design patterns internally, but that doesn't mean you HAVE TO do it in your code. I would advise you to focus on a perfect OOP knowledge, and then to pick a modern framework (Symfony is very well thought, but Laravel really rocks and I advise to pick it). Read the whole docs a couple times, build a few simple apps, interact with the community...
That's why he said "came out of the 70's"; or in other words, "originated out of the 70's", as per that link you just provided.
A quick break down. &gt; I'm also clueless about Laravel, command lines, composer, Symfony – all this modern stuff. Laravel is just a Framework. No different from CI except it's a little more modern and flexible. Symfony is also a framework. But it's very well built. So much so that Laravel (and many other projects) rely on it heavily. With Symfony everything is very loosely coupled. Which makes it easy to reuse them as libraries outside of the framework. The command line. CLIs are less user friendly as they are a lower level of abstraction. However, that also makes interoperability and automation easier. Don't be scared of it, as long as you have a decent terminal emulator then it's as simple as learning a few basic commands. Also note that the *nix eco system is far better at this than Windows. Composer is just a single command line application. It's very simple to use once you have it installed. So much so that seeing the getting stared guide should get you on your way.
This is my plan :) happy to read that it worked out for you! 
Hi /r/PHP: I recently published my first book on deploying PHP applications! I'm in the process of writing a book on Symfony, and I found that as a result I had a good smaller book contained within that was just about deploying PHP applications. I packaged those chapters up as a standalone book and stripped out the Symfony specific writing. *Expert PHP Deployments* was born. If you have any questions, please let me know. Use coupon code **reddit** for $2 off. $7.99 for a book that will teach you everything you wanted to know about deploying PHP applications is a steal! Check it out and let me know what you think. Thanks!
&gt; originated as an *architectural* concept (my emphasis) As in buildings, not software.
Got it, look forward to reading it. 
When I listen to Eminem, I don't hear lyrics anymore, just a lot of git commands
Thanks! I'm really interested in your thoughts, both good and bad. Leave them here, email them to me. Thanks again for your purchase.
Hi there. I'm thinking about reading this but it seems like most of the book is focused on configuration of the server rather than PHP itself. Am I wrong? Also, why do you recommend compiling the software instead of just using the precompiled binaries usually offered by the package manager? I feel like this is more server management work than anything else. Anyways, thanks! I might read this later on. 
git's problem is that it's TOO intelligent. I use it and love it, but there's SO much power packed into each command, you almost have to keep a cheat-sheet handy for any non-standard operation. If you were to tell me you know without looking what all the variations on 'git reset' do (like *all* of them, not just one or two), I would call you a liar.
I don't think it's the distributedness of it that makes it hard for SVN/CSV users, it's the non-linearity of it. Branching and merging is TERRIFYING to SVN users. And rightly so; until recently SVN did a straight-up tragic job of it. So when you tell them branch-and-merge is central to a git workflow, their blood runs cold. And they hesitantly, skeptically take on using git, and start to appreciate it. And then their first merge that doesn't complete automatically, they throw their hands up in the air and call it a failure. I implemented git in my development department (which means I'm the tech support on it for life :\ ) and I've seen people completely lose their minds about a manual merge operation. And it's all based on the fear that SVN instilled in them.
&gt; it seems like most of the book is focused on configuration of the server rather than PHP itself That makes sense to me for a book on deploying PHP. Unless you want to write a PHP application for deploying other PHP applications (and then have the book be about the first application mentioned), then I don't see much need for discussing the PHP itself in this kind of book.
Ehh I see what you mean. I guess I was being a bit dim-witted there. Sorry about that. How good of a scaling are we talking about for this then? Does it consider load balancing? How about master-slave relations for databases? Most of my scaling work has been with MySQL so the book focusing on PostgreSQL interests me a bit. 
Thanks for your questions. Yes, there is a lot of sysadmin work in this book because deploying your application requires knowledge of how a server works. Ironically, most of the tools (aside from Phing) discussed in the book are written in non-PHP languages, but I'm showing you how you can use those for your PHP application. See my response here for why I recommend compiling packages rather than using the package manager version: http://www.reddit.com/r/PHP/comments/1tqec4/i_wrote_a_book_on_deploying_php_applications/ceagwpr Please let me know if you have any other questions. Thanks!
Hi, I don't discuss scaling, load balancing, or replicated databases in this book as there are so many different ways to skin those cats. Maybe in a future book.
Install the Key Promoter plugin. Anytime you perform an action with your mouse that has a keyboard shortcut, the plugin will tell you what that shortcut is. Anytime you do something with your mouse a few times that *doesn't* have a keyboard shortcut, it'll ask you if you want to add a shortcut for that action.
you are probably right - however DVCS will inevitably lead to more branches (which is a good thing. Feature branches all the way I say!) - and therefore more merges. There is a level of complexity which comes with doing this. When you have a team of 5 developers all working independently in their own local copies of the repo. Merges are going to happen. That isn't to say that the SVN way of "avoid branches at all costs" isn't a pile of shit. It is. But it is much simpler to wrap your brain around. Anything in Trunk = the latest. When I finish my work I commit to trunk. If there are conflicts I resolve them . If I wait 3 weeks to commit to Trunk I'm an idiot who gets everything I deserve. Git throws that completely on its ear. Commit locally. Run 3 open feature branches simultaneously and switch between them at will. Stash your changes to work on a hotfix for that thing over there.. and have all your colleagues doing the exact same thing. It is harder to understand. That doesn't make it bad. That you can do all of that in git with a handful of commands or a good GUI tool is astonishingly good for productivity and code quality. The sophisticated workflows you can build up allowing gate keeping of code changes against master (how I love gitflow) are something I wonder how I ever did without.... But I think it is a stretch to say "git is far easier and much less pain than Svn". Much less pain once you understand what is going on. Much easier to do your work once you understand what is going on. But much harder to understand in the first place. 
 git sit --me here --next-to "Britney Spears"
Sure. I certainly wouldn't say git is easier than SVN. FAR more power comes with SOME more work. The amount of pain has a lot to do with what you bring on yourself.
I purchased your book a few hours ago using the coupon code from PHPWeekly and have been charged but haven't received an email yet. Do you know of anything that might be holding it up? Congrats on the book however, look forward to reading it when I can get my hands on it!
You've gotta make it not sound like an advert.
&gt; you use parameter escaping instead of prepared queries and parameter binding. PDO emulates prepared statements unless explicitly instructed otherwise. This means that PDO's prepared statements are identical to using `quote()` in its default configuration both in terms of performance and what actually happens. [The PDO documentation](http://www.php.net/manual/en/pdo.setattribute.php) shows how to disable emulated prepares (which this lib does not do, which is fine).
Purchased :-) edit: too bad I couldn't redeem the coupon code when purchasing via paypal
Thanks for all the suggestions, I ended up going with the following solution which works well: &lt;?php $input = $_POST[textarea]; $lines = explode(PHP_EOL, $input); $data = implode("\n", $lines); echo shell_exec("./script.sh '$data' 2&gt;&amp;1"); ?&gt;
Oops
Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems. - Jamie Zawinski
Hello, Thanks for the purchase! I apologize for the error. I have sent an email to all customers with a copy of the PDF. Please let me know if you do (or do not) get it.
Thanks for the purchase! If there's enough PayPal interest I'll hook up a full shopping cart. I hope you like it. Thanks!
Yup. Doctrine Migrations is the way to go if you are using a Doctrine product already. If you are using Symfony, you can get the DoctrineMigrationBundle thru composer.
I've experienced much more "Pain" with svn. $ svn commit No. server is down talk to an admin $svn commit permissions are no good, talk to sys admin $svn commit Data base is corrupt , good luck with that! Never had any of those issues with git. What about accidentally committing a file? SVN, you're out of luck! I don't see what is so hard to get your head around for basic use. Stage the changes you want and then commit. Svn doesn't have the stage, but is that really such a hard concept to grasp ? You want to share ? Push to your centralized repo. SVN doesn't give you the choice, if you want the benefits of revision control, then you must do it publicly. Why would you call SVN simpler? Managing a remote server is simpler ? 
Using/altering other peoples code is really something I need to get used to. I write pretty much all code myself and its just not efficient enough to be competitive. I know my next step is Laravel/composer..just need the time to play around and read up on it! Any good book or youtube-clip is apprisiated :)
You're more or less looking at an example of the harm case in this thread here. More often than not @ is used in injection attacks to suppress reporting and hide the malicious code.
&gt; I'm still fairly new to PHP i don't think that counts as "learned the language" i've been working for 3 years with PHP and i don't think i've learned the language
I had a project that was about to start phase two at work and decided at that point we would switch frameworks. So I took our existing application which was in Code Igniter and rewrote it all using Laravel. I just read their documentation and had to Google a few things. I'm not a huge book or video person so I can't give good recommendations for those as I learn by doing.
Forget about making your previous high-level marketing salary for several years. As a junior developer, depending where you are located, you can expect somewhere in the range of $25/hour up to $50k/year. Add 50% if in the bay area. For now you need to read, read, read: * http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117 * http://www.amazon.com/Head-First-MySQL-Lynn-Beighley/dp/0596006306 * http://masteringobjectorientedphp.com/ * http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X Trawl craigslist for shitty, quick gigs to gain experience. Work with as many technologies as you can to understand the range of quality between pre-existing libraries (Wordpress, Drupal, Joomla, etc). Don't worry about a good framework right now, you need to get a solid grasp on the basics first. Ditch Notepad++, switch to a proper IDE or at least Sublime Text.
PhpStorm is a decent IDE (as are Webstorm and Aptana). Adding on to forgetting about forgetting his previous high-level marketing salary - I started making $26k a year with basic PHP and HTML knowledge.
That's mostly true in practice but it's possible you'll sometimes reach a scale where it does indeed matter.
One comes with benefits like vacation, and the other doesn't.
I'm not jtreminio also I'm not really into PHP but wanted to give you an overall idea: * Beginner: Who can put together a simple website, can use the basics of the language for the purpose, have a harder time figuring out new things, reading other people's code, probably can reproduce what he/she learned via tutorials only. **Example:** A static portfolio website. * Intermediate: Who can put together a more complex website or service/api, understands what he/she does and why, and will learn new things easier, have easier time to work with other people's code. **Example:** A portal type of site with modules (like blog, e-commerce, forum, etc) * Professional: Who can work with the language on a level that he/she will figure out what needs to be done in order to achieve the desired behavior, also probably specialized in a field where he/she keeps him-/herself up to date with the latest technologies and solutions. Picks up new things really fast when put in a new position (new project, etc). **Example:** Same as intermediate, just with a cleaner, more optimized code with scalability. 
Thanks - especially for the recommended reading. I'm expecting to take a pay cut, but consider this a worthwhile sacrifice if it means I get to do a job I don't hate every day, and I can develop skills that I can use for my own side projects. I'm in London, UK - I see a lot of php jobs advertised here, but salaries vary from £25k to £90k.
why are the results so different on ec2 vs i7? for instance, symfony2 seems to perform much better.
Many thanks to /u/HenkPoley for pointing this out. I've done tons of benchmarking in the past, to the enjoyment of some and the chagrin of many: &lt;http://paul-m-jones.com/archives/category/programming/benchmarks&gt; The TechEmpower project looks like it shares a similar approach and goals. I'll be happy to retire my own work at &lt;https://github.com/pmjones/php-framework-benchmarks&gt; in favor of theirs, since they are doing so much more than I'd be able to do on my own. Again, thanks for bringing this up!
My humble suggestion is to also learn another language/scripting language besides PHP as time permits. C/Python/Java/anything else to get a feel of programming languages, in general. It helps tremendously on several fronts including dealing with clients/legacy applications etc. Most professional PHP deployments are going to be on non-Windows environment so best to also get a handle on *NIX OS. Forget GUI - try command line tools for pretty much everything. Just saw an excellent book in this subreddit on PHP deployments - I think it is less than $10 - grab it - looks very well wriitten. 
You can get a job with your current level of experience, just be prepared to be low-man on the totem pole for a while. Best thing you could do at this point is find a job working with people who know way more than you and be willing and eager to learn from them. This might be awkward simply because there will be an age difference. Don't worry about it, just learn as much as you can. I'd suggest you learn composer and Git pretty quick on your own as those are standard fare. If you don't know anything about databases, I'd highly suggest picking up a book on MySQL or other open source relational database as these are fairly commonly used in conjunction with PHP. Since you have no pro experience, people will care far more about your willingness to learn and how quick you are for the kind of entry-level positions you will be interviewing for. Focus on finding an entry-level position where you can hone your skills under people who know what they are doing. 
The point he was trying to make was that if your software architecture was well designed, losing APC wouldn't have mattered (and you wouldn't have to stub the APC functions) as you could of simply switched your CacheImplementation. Peppering your code with hard dependencies such as APC is usually a bad idea.
http://lifehacker.com/mount-a-raspberry-pi-powered-google-calendar-on-your-wa-1484219113
Xdebug is love.
You can forget 90k to start with - even in London. I'm in the UK too, and having looked at hundreds of different roles in varying places around the UK, a junior developer (which until you've got notches on your CV related to programming is pretty much all your ever going to get right off the bat) should be looking for around 20-24k, and a little more in London, up to the 30k mark. That's a rough guide, though, and some companies might shell out a lot more for a developer they can build within the company. That said, there are companies paying a lot less, too. I've seen roles offering 15k for a junior developer role. And at that price you might as well be working full time doing, well, anything else. No one alive today can tell you what's expected of a developer at each level because every company out there will expect something different. For example, where I work, the structure is relatively flat and the pace is very quick. You'd be well placed somewhere like that, because it'll get you up to speed so quickly and you really are in at the deep end. The key is to get some experience under your belt that you can put onto a CV. A year or two of good experience and you'll be an intermediate developer I would imagine. If you're already onto OOP then you're well on the way. Frameworks aren't important if you're working for a company because most companies have their preferred framework or, equally as likely, their own. What is useful, though, is having a knowledge of MVC and how frameworks in general are put together. Anyway, if you've been in the same industry for four decades, you know yourself that there's no substitute for getting your hands dirty and getting experience, so it's just a matter of time and dedication. That said, good luck! 
Experience is key in your situation. Without much experience, you're fighting an uphill battle (at this point.) One thing that is often overlooked (especially when it comes to the computer science'ish fields) is fundamentals. Study up on things like data types, structures, etc. This stuff is extremely important. PHP is a wonderful tool when used for the right job. However, you'll need to know when it's not appropriate for the job. Learning the fundamentals, as well as learning other languages will help you determine which tool is most appropriate for the job. With that said -- the value of a good programmer, architect or engineer comes from their ability to say "I don't know." Real value is in their Google-fu (bash me all you want!) Don't be afraid to admit if you don't know something. Learn to Google, and learn it well. This coupled experience and your ability to determine which tool is the right one for the job will get you very far in your career. Lastly, embrace what others have done. We are professionals -- so make sure you act like one. Use industry standard stuff whenever possible. Ian
For the price of Sublime Text, you may as well just go all the way and get PHPStorm. In my opinion, Sublime is overpriced for what it does. 
Go for nodejs, php is old and not cool
Is 2080 work hours per year normal in the US? Factoring in leave/vacation and public holidays on a 8:30AM-5PM M-F job, I will work 1748 hours in 2014 or the equivalent of 230 work days. This is in Australia. Do you not get leave in the US?
That's still at least one time that it was useful.
This guy is wrong, there are plenty of contracting/freelance PHP jobs that will pay over 100k a year in London. But they will require that you know more than a couple of languages. You're going to need to be an expert in the full stack, together with experience in managing development, business processes, an interest in bleeding edge tech and so forth. The best thing to do is get involved with a company who is willing to give you room to learn. Then you will have to invest a huge amount of time and effort to learn. It's not easy. Don't worry about the small stuff. Your text editor doesn't matter. As long as you can get around vi when nothing else works. You'll end up switching editors every year or so just like everybody else. It's what you type that matters...
Hi, May I ask you why did you chose those libraries? (not in the "X is better than Y" kind of way, but having a strong background with the Symfony2 components I'm interested about the Routing or Events lib you chose may bring to the table) Also, why did you make your controllers use static methods and global variables? Thanks you!
Sublime is free to test (just the reminder every once in a while), you can use it for free and make your mind about it as long as you want. (Of course if you like it consider paying for it, because it's awesome!)
As a junior dev I get 1 week paid vacation. It can go up to 3 weeks where I work, with seniority. Factoring in holidays/personal days (both unpaid), probably 1-2 weeks on top of that. So yeah, you're probably right. Every time I see this come up, the other country is astounded at how much we have to work. Also I'm not counting the weeks where we work over 40 hours since they are irrelevant on salary pay, but those weeks are very frequent as a software dev.
I'd have to disagree. I'm very much right. No junior Dev is going to get 100k and contracting is vastly different to working for a company permanently. Sure, there's £500 per day contracting gigs in London, but only exceptionally strong, experienced developers are going to land those. I've worked in the industry for near half a decade - not long really - and I'd never get £500 a day. Moreover, I got the feeling from the OP that he's looking for a steady job as opposed to continuous contracting, though I may be wrong. As a junior developer you've got to start at the bottom - as in most industries - and gain that valuable experience that gives you a shot at career progression. Even then, experience doesn't guarantee progress - you've got to keep looking for a chance to take that next step and grab it when it comes along. 100k plus is a little optimistic for at least 5 years for the OP I would suggest, and I've yet to see a PHP Dev role offering more than 80k, so I'm not sure where you've seen them over the 100 mark, but in fairness I've looked mostly at levels I expect to be able to achieve. Don't forget, also, that the OP doesn't have a degree in this field. Say what you like, but that adds years onto the 'minimum experience' level in a lot of cases - rightly or wrongly. I don't mean to sound unduly negative, but it is what it is. You may fall lucky, of course, and London is filled with a whole lot more opportunities than elsewhere in the country - especially in this industry - so I expect you'll do better than I will in a few years simply because of that (I work in the North). But yeah, based on what the OP said, I think I'm spot on. My source being my own experience of the sector we're in, and having graduated from uni with friends who all have similar experiences (though we all said that whilst a degree got us into the interview room, it was still experience outside of uni that got us the better roles). One other thing that I'd say, though, is never to undervalue yourself. Freelancing I'll never work for less than £25 an hour, even if I don't get that in my regular employment, because the rate I charge is representative of my experience and level of skill. Clients take you more seriously when you show that you're a talented professional, and your rate is supposed to be an indication of the quality and standard of work you will produce. 
&gt; What kind of skills will be essential if I want employers to take a chance on somebody my age who wants to change careers? I hire php programmers fairly often, provided the have the following qualifications: * Social skills: Can work with and around other human beings in the same physical space * Verbal skills: Can convey ideas in clear and articulated form. Has good orthography, can speak as a grown up. * Personal skills: Shows up to work always on time, clean and properly groomed, cuts fingernails and cleans and trims head and/or beard. Dental hygiene is a must. * Team skills: Knows how to be a part of a team. Can raise his/her hand to ask questions, answers questions posed by others. Has genuine interest of what others do and shows initiative when confronted by problems. Knows and values the immense value of constant and efficient communication. * Organization skills: Can plan and execute discrete amounts of work. Uses any kind of ticketing system (Redmine in our case). Has a clear vision of what a day's work entails and uses every working hour to it's fullest. Leaves for home on time and rarely, if any, needs to stay in late. Technical skills: * Can install and use a modern PHP IDE (Eclipse in our case) * Is moderately fluent in regular expressions, can propose efficient data structures. * Can do MVC properly, figures out what goes in which layer and keeps a strong separation of concerns on each. * Has strong SQL skills (in our dialect, which is PostgreSQL) * Produces code that runs reasonably fast in a very limited VM. * Strong javascript skills, jQuery, CSS2 and 3, Html5. * Strong version control skills (SVN) This are mostly my job posting requirements. Hope it helps.
How much do you make?
I'm using doctrine migrations for a side project, but am hesitant to use it in a production environment. Wouldn't you be required to give your application database user full create/drop/alter permissions? Does the bundle allow for a different user to be used for the migrations than the app itself? Ideally, I'd like my migrations to happen on a completely different server that connects to the database. This is only for my apps that require this heightened level of security, but I don't recall something like it being possible. I'd like to prevent my elevated users from being used on my public web servers via Postgres permissions.
Gotta love Europe... I'm in France and work 35h/w with 5 weeks paid holidays...
Sure, I can agree with that. This snippet wasn't meant to trigger an architecture discussion, however, which would not be productive in this case anyway. The other point to consider is that someone would need to write the abstracted cache implementation and the calls to various APIs, whether they use the file system, APC, memcache, or anything else. With that in mind, my snippet could be considered a very basic file system cache implementation. In a way, it's the same thing, but procedural rather than OOP.
This approach has been gaining good ground in the node.js community as well. Great focus on using modules that do 1 thing well, then mixing/matching them all to create your app.
Thank you for your answers. I'll address what bothers me first: So why don't you instantiate the controller after you pass the classname as the first argument, and get rid of the static methods? Twig and Doctrine are not at all bootstrapped as global variables, it's just an exemple as how to use it in a project without a framework but never they use it as globals. That being said, I like your approach and will look further at your take on those components.
Alright, you are right about controllers. Got rid of the static methods https://github.com/sinergi/sinergi/commit/6c487f595f123ade4705213f5398e44ea7e7620f As for the global variables, as I said, it is to keep this as simple as possible. So I use the exact code from the getting started examples of Twig and Doctrine and is up to the user to change. Unless you have a better idea?
Vagrant probably isn't really a requirement. &gt; It also serves as a proof of concept that the future of PHP development will revolve around packages instead of frameworks. This is exactly what most modern frameworks currently do. They use packages and a sample application, which ties them together. This group of packages/components is called a framework, because we call everything a framework wether it is or not, then make other things which arent frameworks then argue about wether that is better or not, even though they probably are because everything is a framework, but... oh fuck it.
I don't like the idea of a Dependency Injection Container. It adds "magic" to a framework and makes it harder to develop using an IDE. Its also a part of what is making me move away from Laravel. I think there is a better approach and I agree its not global variables.
I don't know if you know this so I'll just write it anyway because someone might learn something, and that's always good: You have to extract the $twig variable and not make it a global. It should be a property that you inject in the controller : &lt;?php class HomeController { protected $twig; public function __construct($twig) { $this-&gt;twig = $twig; } public function index() { $user = (new User)-&gt;setName('Johnny'); echo $this-&gt;twig-&gt;render('home.twig', ['user' =&gt; $user]); } } The goal here is to make your class independent of the twig instance. You can pass whatever you want in the constructor as the twig instance (I could have called it $templateEngine, and/or type-hinted it with an interface) when you make a new controller. The best way to do that is with a Dependency Injection Container, but just the fact that you decoupled your objects is a good start.
Pro is simply getting paid for your work. When I felt my chops were good enough I started charging for small sites, after a few one client asked me to come on board full time. Haven't looked back since. Before you pick up a framework, I'd recommend picking up theming and plugin development for a popular CMS like WordPress. It'll give you an idea how frameworks work, and are a much more popular requirement in job ads. As someone who has hired developers, more than complete knowledge of any specific technology, I look for enthusiasm for technology and coding. I know that Google and StackOverflow will fill in the rest. I want to work with someone who will know what's happening in the field, has an opinion about it, loves the work, and will be bringing in new ways to try things. Before buying any books, to get started, I'd look at a few job descriptions, see what you're missing. You can fill in from there. Also start coding, if you can't get someone to pay you yet, build something for yourself. Get a plugin or theme in a repo, set up a github account and post some of your work. In a month, you'll be embarrassed by your work, but then again, we all are. Just keep your work updated. Finally, network like crazy. I've gotten most of my jobs through people I know, I've met, at various places. Good luck!
&gt; Do you not get leave in the US? Not by law, though most employers give some leave, typically between one and three weeks except for senior staff or generous employers.
Well I like this approach better than using a library to do this. 
&gt; Dental hygiene is a must. What ghastly hiring experience have you had, that makes this one of your top priorities?
Ok. I understand your point (even if I disagree), but the fact that you should let your user use whatever they want is still valid I think, and you should for example pass the twig instance in the constructor (and instantiate it yourself if it is null if you want to ease your user's life). That being said I don't think a DIC is magic, all IDE's are able to understand docblocks and if you tell them the type of your variables they will do the autocomplete stuff, and it's awesome to use any lib you want instead of the built-in ones
I'm glad you like it, as I said you don't have to use a Dependy Injection Container to do this, but it's still better as a decoupling approach
50k, capitol region NY. I'm just starting my career though so I'm very happy with it. In about 6 months that should increase though.
NetBeans is good too. I use PhpStorm for PHP projects, IntelliJ for Scala projects, Eclipse for Java projects. Still haven't found a good IDE for C, so that's all done on nano and GCC. Life :/ 
There's a distinct possibility the DOM hasn't fully loaded yet. Are you doing this on page load or an event? As an experiment, bind it to a button click and see what happens.
As a 40 year junior developer you are going to struggle, however if you can leverage your marketing knowledge and position yourself as a marketing person who knows how to code you can probably position yourself in a reasonably well paid niche. You can then use this to build up your coding experience.
How would I do that? I didn't think you could execute JS from PHP? Edit: Also it works fine for finding the &lt;meta&gt; elements also within &lt;head&gt;, just not &lt;script&gt;.
I have impeccable teeth. Will you hire me please?
I started a year ago at 21, no CS degree or anything like that. Found a gig on Craigslist for 50k. Do side business stuff as well that seems to be doing well. As long as you can use the tools you've picked up well and solve problems, you'll get far in no time.
Nah, I totally misread the question. Loading the HTML file should be a synchronous event. If you gave it a bad url or the server was down or something, that would have an impact...but the DOM not being fully loaded should not be an issue.
You should look into companies that are hiring junior/entry level developers that create B2C (business to consumer) web sites for small/local businesses. I did something like this at a previous company I worked for and I was similar to you. As far as skill level goes, I'd say I am intermediate though. With companies like this, they usually use something like Wordpress for most sites and magento for e-commerce. Creating and setting up those web sites aren't terribly difficult, but the challenge and learning experience you'll get is when the client requests some sort of custom functionality. A lot of times these can be done with plugins, but every now and then you will have to dive into the code to modify something. This gets you experience with the language as well as reading others' code. On top of that, your marketing skills will come in handy. A lot of the times where I previously worked, I could do any coding assignment, no problem. But every now and then the team was asked about certain marketing ideas and SEO stuff and that's an area I had no clue about. I think a company that makes these kinds of web sites will appreciate that extra domain knowledge from someone like you.
I think you picked the wrong subreddit for this comment ;p
It is dude... We live to work over here. It's no wonder why half the country is on Prozac. To top it off when your wife has a baby, there is no paid leave and you have to pay about $4000 to the hospital (if you have insurance). Without it... you're pretty much bankrupt. 
You are wrong. Here is a quote from the docs It will always fall back to emulating the prepared statement **if the driver cannot successfully prepare the current query** Since mysql can prepare just fine, pdo will not emulate anytthing
Honestly, I would prefer Notepad++ over Sublime just because I disdain the latter's autocomplete. Telling the man to get a full-blown IDE at this stage in his career is a bit of overload, esp. since he hasn't done much in the way of OOP. Once he starts writing and extending his own classes, then he should go for something like Eclipse and just skip over Sublime.
Holy guacamole! I've been searching in the wrong place all this time. I'm currently looking for a position in the US. Now I know where I should start searching 
I don't understand why people think everything needs to be compatible with Javascript. Because Python does? So why does everything need to be like Python? If you want something to be like Javascript, use Javascript instead. If you want something to be like Python, use Python instead. Eventually we will end up with one ugly grey goo language, and it will suck. Besides, there is already http://www.php.net/manual/en/function.json-decode.php .
I would say either: The html file has validation errors (stopping DOMDocument from loading the page) Or the script tags are added after the page is loaded. Or maybe there is a PHP config option stopping the URL being loaded
/r/frontend
Yeah, that's what I thought...
&gt;For a "dead" framework Nobody said it was dead, only that the company who is maintaining it has given up doing so. Generally when this sort of thing happens either someone picks up the torch or it fades in to obscurity. Likely the people contributing to it still have legacy projects running in CI. I will take a while for it to go away as people make smarter choices moving forward.
I disagree. HTML is pretty simple to learn, as is CSS. Javascript will take some time, but Jquery and other libraries make it incredibly simple to work with. It's certainly feasible to know and study all of them; you need to use all of them in concert to get the best effects/benefits. Focusing on just one limits your expertise and flexibility. Being even mediocre at all of them at least ensures that you have a basic know-how and can improve in specific fields as needed.
Yes, the user needs create/drop/alter table permissions, and yes, you can specify a different user. Part of the configuration of migrations is passing it a Doctrine DBAL instance, you can setup that in any way you want. You can also ask migrations to generate the SQL diff for you, instead of actually executing it, and do something with that.
i am just stating a fact how it is done in professional/enterprise environments in germany. html/css/js is one job, one "career" php the other, php devs here need to understand css/html but they rarely write a single line of css or html. the default smallest possible IT team in nearly any company i know is 1 designer 1 frontend (html/css/js) 2 php/backend devs of course there are "web-developers" which say they can do php/html/css/js but usually they lack in some of the areas compared to the ones who focus and thus - here in germany - it is frowned upon.
If you're not looking to go into the whole web design thing but rather just looking for a way to produce reasonable looking pages quickly and easily, check out [bootstrap](http://getbootstrap.com/).
I can appreciate how things are done in the professional world, but things are done that way because it's easier to focus on a single thing so a person can maximize the effect of that one job. It works well in business (where you can afford to hire a bunch of people to focus on one thing each), but not so well for someone who's looking to be a jack of all trades, freelancing, or just plain educating themselves and hobbying. By the time they get to focusing on the last thing, the first thing they've learned is out of date and the process starts anew. IMO it's important to have at least passing familiarity with all of them and be able to research and learn at a moment's notice. Flexibility and adaptability -- even in the workplace -- is valuable. A person who can wear many hats is a strong asset to a team.
http://www.google.ch/trends/explore#q=Laravel%2C%20codeigniter&amp;cmpt=q Codeigniter is falling, Laravel is going up. And when you look where the search queries come from you will see that many for Codeigniter come from Bangladesh (nothing against Bangladesh, but there are many "devs" that hack something together).
in USA there is alot full-stack developers, that is good enough at both, facebook hires only full stack developers. In my country (Russia) there is no distinction most of the time If it is a "team" it's designer and bunch of full stack developers. So it depends on location. I can charge from clients much more as full stack developer, because there is no problems in communication of front-end and back-end.
Hi Acorah. I was hoping more that people who would have considered buying it anyway would be happy to provide feedback in return for 90% off. £35 is of course a lot of money if you have no plan of actually using it, but on the other hand if you're about to start a reasonably priced ecommerce development for a client, £35 becomes a bargain :-)
Stop writing any form of Front-End in PHP. Don't stop writing PHP. Use PHP to build RESTful JSON APIs. Once the API is done, code a front end in pure Javascript/HTML/CSS, preferably using a framework like Ember or Angular. Completely separate the two and you'll be a better, more learned person. And don't use server side asset pipelines, use Javascript. Stick to tools written in the language you're using them for (Grunt, Bower, NPM, etc.)
Questions: 1. Where would you have your header() call? In the routes? It has to either be the routes.php file or the Controller. 2. Where would you instanciate your controllers if not the by the routes? Keep in mind I want to keep the project magic less and simple as possible and that means no IoC container.
If you've ever had to pair program with someone who has halitosis you'd understand :) 
You should checkout the project, may be it sounds a bit like ad, but is a real work by one of the good developers in the php community.
hah agreed entirely, i was just trying to be silly. mr jones' work looks pretty darn fine to me.
/u/gavrocheBxN you may wish to take a look at http://auraphp.com -- it uses a lot of these concepts already.
You may want to read more carefully. The PDO driver emulates by default. For proof, use your own database credentials and try the following code: // throws exceptions on errors $DBH = new PDO("mysql:host=$host;dbname=$dbname", $user, $pass); $DBH-&gt;setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION ); // no error because its not a real prepared statement, and its not sent to the server try { $STH = $DBH-&gt;prepare('THIS IS NOT VALID SQL'); echo "First prepare was successful!\n\n"; } catch(Exception $e) { // this won't run because there won't be an error echo "The first prepare caused an error!"; } // this will cause an error because a real prepared statement gets sent to the server try { $DBH-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false); $STH = $DBH-&gt;prepare('THIS IS NOT VALID SQL'); } catch(Exception $e) { echo "There was an excpetion on the 2nd one because real prepared\n"; echo "statements are sent to the server and processed\n\n"; } The first query will not cause an error because its not a real prepared statement and PDO can't check it for correctness. When you execute on the statement handle, it will cause the error because that sends the query to the server. In the second query, with real prepared statements enabled, an exception will be thrown because the prepared statement is sent to the server first - this is how real prepared statements work. 
It's powerful, just so damned ugly my opinion. The working with the GUI to make views. Ugh. Perl is good for what it's does yet it's becoming more and more of a very specific niche which nowadays is pretty much server administration. Hell, in the past year my company moved everything away from perl due to new hires being harder to find and maintain. That and speed, we're more barebones on the parts that need to be fast, and then switched to Symfomy2 for our clients dashboard which has worked quite well for us.
Well to answer your question, there are composer libraries for most of this stuff so, yes.
Also, keeping them separate libraries is a good thing as you can choose which one you use and contribute to it more easily. So, in short, this "no-framework" is as powerful but more customizable than a traditional framework.
Hey since we're sort of on the subject... I have wondered about this before. How well does communication work when there are many international devs working together? Does everyone try to learn German?
PHP devs seem to be highly resistant to this suggestion, but it seems inescapable to me that this is the way development is going. Backend code used to create restful APIs, connected to a frontend done in a JS framework. I'm learning Ember (with some difficulty) right now for exactly this reason. There's absolutely still a place for PHP developed web apps using various MVC frameworks, but I think any PHP dev who doesn't know how to use a frontend framework (such as Angular or Ember) is selling themselves short.
Most of this is good advice. &gt; Before you pick up a framework, I'd recommend picking up theming and plugin development for a popular CMS like WordPress. It'll give you an idea how frameworks work, and are a much more popular requirement in job ads. WordPress will not teach you **jack shit** except how to do things in WordPress. You will not learn anything except how to be a terrible developer. There IS money in it, and there ARE jobs for it, but it should be considered something you have to do for the money even though you don't want to. WordPress is the "I did a little porn when I was young and needed the money" of the IT world. If you want to learn a framework, learn a framework. WordPress is arguably not even a CMS, but it's sure as goddamn hell not a framework.
That's a valid point. You can't write a class in Sublime. The editor will be overloaded and just crash because of the raw Object Oriented power.
You could say the same for Java for Android - you either work with the GUI to make views, or you dive into XML hell. Same with Qt - you use the GUI for views, or you dive into List/Table/Tree column-row hell. Yeah Perl is pretty good and damn powerful, and I think it is worth at least having cursory knowledge of its basics. I do have to agree that it is being relegated to a very specific niche and finding mid-senior level devs is like pulling teeth. Then again, many languages/platforms are like that as well - especially the newer languages (Scala/Rust/Golang) that have yet to be picked up by the masses. For example on that last bit, here where I work all of our dev teams are being encouraged to pick up Scala rather than hiring Scala-specific developers. 
Firstly, I think it's awesome anyone someone has the motivation to pick up a new career basically from scratch. Props! Relevant credentials: I've been writing PHP since 2007. I have a BS in computer science. Here's what I would recommend to you... One of the best ways to demonstrate you have ability is to start doing things that you can show to people. 1. Get a Github.com account if you don't already have one! Then start making repositories for things that you're proud of that you've learned. As you start making things, you'll start using other people's libraries/frameworks. IF you find something wrong with those things, make a pull request with the fix to the repository owner! They can accept or deny the pull request but the point is that you're participating in helping make their code better. That counts for a lot out there! 2. Finding beginner gigs can be really hard. Start going to meetups (meetups.com) and networking and getting to know people. It sounds like with your current skill level you might be able to help people already. Start out just trying to help people and from there the gigs will start to come. Becoming a developer is almost like joining a big support group. Essentially, we're all trying to help each other solve problems and build things. Message me if you want and we can talk more if you want! 
Agreed. Look into ~~Code Igniter...~~ a MVC framework for PHP. 
i live in Mexico and basically the idea of every employer is that if you are a IT professional you can do everything, literally everything. In my current job, we are a team of 10 developers. And we take care of Front-End, Back-End, Design, DBA, sometimes we even have to take care of our network structure. I hope my boss could fully understand how important it is to not have us do everything, because how can we focus on one specific layer, if we have to look out for the database, if we have to design a new UI. But the worst thing of all is that they never respect our design plan, if we end up having a project with N-weeks to finish, they will always cut our times in half, saying that its to much time for so many of us. And of course we never deliver, because it is practically impossible, thus they are always bitching about the Dev-Team I also remember this one time, someone in the company ask me if I could take a look at his car, because someone told him that the car computer was damage or something, his exact words were: *"You work with computers right?"*
I'd link you to stuff I've done, but I'm honestly not sure at the moment whether or not it has descended into suckiness at this point. :-/ You can impose order and standards on WordPress development. One of my biggest wants now is a decent way to use Composer for WordPress plugin development. In fact, I've got a stackoverflow question about it with an open bounty right now! http://stackoverflow.com/questions/20736520/install-composer-dependancies-from-php-script &lt;/shameless-plug&gt;
Feel free to explain further.
I'm sure you can impose standards on wordpress, and all that.. but wordpress will fight you every step of the way. And in the end (in my experience) it always ends up being crap. Sometimes the crap stinks a little bit less, but it is still just crap. WordPress is vile. That you can make money off it doesn't make it less vile. And those who are willing to continue supporting the eco system by writing stuff for it are keeping the vile rotting corpse of WordPress alive. You are dead right, newbies should stay the hell away from it. Too many of them learn a bit about WordPress and stop there. But I really wish more experienced hands would stay away from it too so that it can finally just die.
What do you mean by "traditional framework"? can you provide examples of a few? Cos from where I'm sitting modern frameworks all do this - a collection of components and some glue to bind those components together. You can add new packages to it, you can replace packages with others, you can remove parts you don't use... you can contribute to individual pieces that make up the framework... 
No I'm pretty sure "look at one of the more modern PHP MVC frameworks" summed it up nicely :)
The thing is we should be more idealistic. We do have the power. We don't have to work on garbage. Sure, if you have some legacy WordPress stuff out there, work on it and maintain it. But as a community we need to stop offering it as a solution to things. Or at the very least stop offering anything but the vanilla install of the thing. Trying to decouple WordPress and try to make it anything less than a turd is just polishing said turd. Telling people who are asking how to become a professional that there is a gold mine in learning how to customize WordPress does you a disservice in the long run because that is N more WordPress installs that contribute to it not dying. Idealism should fit into the equation. I'm all for a sprinkling of pragmatism but surely we need to be idealistic about our craft.... and stop using the wrong tools for the wrong jobs. anyway .. this is probably getting way off topic now. I still would love to see an example of some "good" code written for wordpress... Edit: also the only reason people use WordPress is because a developer somewhere put it forward as a solution to a particular problem for them. 
&gt; But as a community we need to stop offering it as some absurdly flexible solution to every problem, even ones it's poorly suited to, because we're too shitty to come up with a better solution and wordpress is "cheap" for us to develop. FTFY.
Codeigniter has only been releasing bug fixes for 18+ months. It's time to start suggesting Laravel.
Thank you for the further explanation =)
Ha! I haven't used Xcode, but a quick Google images search does reveal a very horrid UI. I quite like what JetBrains have done with the IntelliJ family of IDEs UI - and holy crap the settings...oh the settings. I've gotten lost in the settings for hours just messing around with the configurations XD Java on Android isn't that bad. If you're going for Scala - you can code Scala for Android (since Scala compiles down to Java bytecode and fully interfaces with Java libraries). 
Not really, but thanks for the attempt I suppose.
I've been using Sublime for a while and really like it. I'm using Sublime Text 3 for a while, but it's still in beta and has some warts. It's long overdue for release, IMO, and they need to get their shit together and AT LEAST be more active communicating with potential customers. A lot of people advocate PHP Storm, but to me I just didn't see the benefit over an editor. I'm learning EmberJS. It's weird, and the documentation is fucking woeful. But I think that single page apps in a JS framework connecting to an API in PHP are going to be the default paradigm. I've been using Laravel for a while. It's the absolute tits. Highly recommended. Was the first time frameworks really clicked for me. If you have a Mac, do get Alfred. It's surprisingly useful. Lots of nice productivity things, like the ability to create/run macros, command line scripts, open programs, etc. For example, if I go "option+space" and then type "site [oneofmysites]" it will open a command line and browse to that project and run 'git status' just so I know, load the project in a browser, open sequel pro, open sublime and load that project. It basically sets up the environment ready to go.
As previously stated, migrations are the way to go. They're usually built into a framework or ORM. If you're not using an ORM a) you should be and b) there are some standalone options. I really like Laravel/Eloquent's migration system. It's quite impressive and very easy to use. Update scripts are probably a baseline option, though.
CodeIgniter is old. It is no longer supported by EllisLab. It doesn't support composer. Last time I checked it didn't have an out of the box option for an ORM. It isn't coded to modern standards. There hasn't been a major release in an age. It has been stuck in a quagmire of backwards compatibility hell. Mostly it is just old. It was good once upon a time, and it did it's job. But it needs to be sent off to the glue factory with the other old horses. Pretty much *anything* that is being actively developed these days is a better bet. Laravel is in many ways it's "spiritual successor". Symfony is also nice.
Code Igniter is woefully out of date and missing a lot of utility offered by the current batch of frameworks. Any developer starting with frameworks right now should frankly skip Code Igniter and move on to something like Symfony or Laravel. There's nothing to see here.
1. Use Symfony's Request class and HttpKernel interface 2. Wrap it in a closure or use a router that doesn't require you to instantiate controllers unnecesarily
Inversion of control isn't just for the controller. When you define your own service you can use IoC for that service. If you choose to pass in the entire container ([like in this SO answer](http://stackoverflow.com/a/12057057/138106)) you can access other services in your class: class MyService { function __construct(Container $container){ $this-&gt;container = $container } function mailSomething($thing){ $this-&gt;container-&gt;get('mailer')-&gt;sendMail($thing); } } This is *service location* (the container is locating the service for MyService), and considered less-than-great practice. This is what the standard Symfony controller does (with a convenience method for get()). On the other hand, if you configure symfony to pass in individual services into your class ([as the Symfony DI docs show](http://symfony.com/doc/current/components/dependency_injection/types.html)) then you pass in only those services that your class/service needs: class MyService { function __construct(MailerServiceInterface $mailer_service){ $this-&gt;mailer = $mailer_service } function mailSomething($thing){ $this-&gt;mailer-&gt;sendMail($thing); } } This is *dependency injection* (the mailer service is injected into MyService) and considered better practice. It takes a little more time to setup as you need to inject each dependency (as opposed to passing in the whole container), but it's (generally considered to be) worth it.
Of course, Notepad++ has the same problem writing classes, as well. :P
at least in younger companies or the startup scene the whole team usually just switches to english - only in big / oldschool companies german is mandatory ... in all companies i work for we encourage &amp; help with learning german (by paying courses etc) but we still pretty much work english, all tickets / backlog tasks etc are in english too. most coders "think" english most of the time anyway dont they? at least i do as all the documentation i read and all the commands that are used are english too
https://packagist.org/search/?q=mustache
Yea, I found that promptly afterwards, thanks!
Very interesting insight, thanks for that. I've always been interested in Germany.
@Lancey - Cheers for posting this as I am in the same shoes leaving the video games industry and going head first into learning PHP coding (with no prior coding knowledge) to get into web development. Lots of gems in the responses and incredibly helpful!!!
You have my sword!
I'm on it!
** mysql_real_escape_string($_GET['user_id'])
Downvoted. I'd rather not see humor on /r/php.
&gt; ** mysqli_real_escape_string($_GET['user_id']) 
sounds interesting :)
I always like to learn new things, within my admittedly small potential with PHP (that is, procedural MySQLi, using NetBeans as an IDE editing raw code without frameworks, etc.) versus my professional programmer friends. I'm always bookmarking pages and implementing things on my site that I think are cool. I'll subscribe and hope to learn a thing or two. 
I'm in! I wake up every morning at 5:45 to do php coding for /r/gameofbands for an hour before work, so the idea of learning in small chunks is perfect for me. Plus, I love the idea of learning more in a group setting.
hahaha that is awesome and made my day. /u/champaign6cf0 is a debby downer. 
Guys, guys... PDO
Developer Here. I just finished the online GUI. I hope its relatively bug free. I'd love to hear your feedback and any issues you experience. Everything is open source: https://github.com/protobox 
If you don't mind me asking, what's the benefit of using protobox over puphpet? 
That is so true. We recently let go of a junior developer where I work at who, before he came to us only had experience with WordPress theming (not even plugin development), spent most of his time complaining our web app written in ZF2 was too convoluted and not Internet standards enough because it wasn't WordPressy enough. The problem with WordPress or Drupal or Joomla or any other CMS/framework is that junior developers get locked into that CMS/framework's way of doing things and thinks all of its architectural problems are features and that if no other CMS/framework has those "features" then they're wrong -- just like our former junior developer who was stuck "in the WordPress world" (a phrase he would constantly utter in meeting to get our web app migrated to WordPress so that he could have his crutch to lean on). Greener developers need exposure to a variety of frameworks and an understanding of design choices; otherwise, they get stuck thinking development begins and ends with something like WordPress and will never grow out of that situation.
&gt; If I may coin a new golden rule for WordPress, it would be this: Make WordPress good, don't let WordPress make you suck. Because it will if you're not prepared for it. The problem is that less experienced developers won't know the difference and can't be expected to be prepared for WordPress's suckiness -- they'll get sucked into the WordPress way of thinking and may never break out of it. 
&gt; the code is actually all procedural so it's really easy to follow This scares me. Shouldn't we be developing these systems with OOP code in 2013/2014? We don't need another procedural mess like WP or Magento. I'd love to see an object oriented, MVC, well coded eCommerce project with the attributes that you describe. 
Most companies that I have worked for that have separated responsibilities like that tend to go with Java on the backend as Java will run closer to the CPU than PHP will. Most places that run PHP out here (in Southern California) have their devs closer to the frontend and tend to be fairly fluent in Javascript. Developers that are strictly backend are more than likely Java developers.
I havent read the article yet, but i created a ~~PDF copy of the google cache~~ I will get in touch with that guy and let you know if everything works properly again edit: it's back up
Any sarcastic joke posted in a programming subreddit is bound to get downvoted.
Count me in as well. This sounds great.
Reminds me of when my friend Googled [ "chrome tubes"](https://www.google.com/search?q=chrome+tubes&amp;safe=off&amp;espv=210&amp;es_sm=122&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=Rxq-UrPOIubgsAT40IGQDQ&amp;ved=0CAkQ_AUoAQ&amp;biw=1600&amp;bih=778) after I told him about the **about:internets** Easter egg in Chrome. His exact response was "I don't know what I expected."
To cut a long story short, it's a procedural development for two reasons - firstly I've been a coder for 18 years so procedural is my comfort zone even today, but secondly, and more importantly, a lot of procedural coders find OOP difficult to understand while OOP developers can work quite easily with procedural code. I wanted a framework everybody could use, so went the procedural route. That said, it's actually very alike to OOP anyway. It follows an MVC concept and most of the requests pass through a single engine file (but without the complications of having a 'loop' like Wordpress).
Wait, I thought we were into Laravel. $axe = Weapons::where('type', '=', 'axe')-&gt;get();
Wow, this is great. I haven't had a great experience with PuPHPet and was playing with Protobox last weekend trying to get my app up and running (still relatively new to this Vagrant stuff). I look forward to giving it more of a go this weekend!
That sounds great! #protobox on freenode if you need any help. 
Scopes bro. $axe = Weapons::type('axe')-&gt;get();
Thanks! Great explanation. Reading it gave me an idea for an additional feature. If the front end dev had some difficulty changing the yaml file, why not also build in a feature where a user can upload their yaml file, use the gui to edit it and redownload it.(similar to the feature you have right now for explore boxes ).
You can drag and drop to upload your existing yaml file. So they do this now by dragging it from the folder, making changes, and re-installing it or downloading it to replace the file. Can also click the raw button if you want to copy and paste the contents. The explore edit button is essentially a way to fork a base box. 
Since its open source, are there any specific features that you were looking to add or would like help with implementing?
Its pretty much hidden until you drag something over the site. I'd like to get some more documentation in place at some point. Another undocumented feature is "ruby protobox switch [configname]" so you store your configs in ./data/config/* and easily switch between them before "vagrant up". 
If anyone is interested, I think just any software / tools that you use on a daily basis or would like to see but are missing. This typically would involve a few ansible roles (example: https://github.com/protobox/protobox/blob/master/ansible/roles/apache/tasks/main.yml) to add the functionality. Ansible is also yaml based so its pretty easy to get the hang of. If you just have ideas, opening a github issue with what you would like to see is a huge help as well. I am a PHP Dev so I am not familiar with a lot of the tools that ruby, node, or others use on a daily basis. Even in the PHP world, I wasn't familiar with drush and some drupal specific tools until someone suggested it. As I write this, we have some requests for, phalcon framework, solr, elastic search, apc, some drupal enhancements.
We use a mix of sucuri and some other things, am out of the office until the 6th but will reply properly when i'm back.
We use a mix of sucuri and some other things, am out of the office until the 6th but will reply properly when i'm back.
I haven't tried it yet, but a lot of text and form controls seems directly lifted from puphpet, kind of weird.
Please see this comment: http://www.reddit.com/r/PHP/comments/1tu6ws/protobox_online_gui_for_vagrant/cebjgk9 tldr; project is inspired by puphpet, puphpet is open source MIT license, chatted with the author, parts were credited to original author when used
&gt; kind of weird I'm not saying that it isn't fine. I am saying that, to me, it's kind of weird to see places with text/controls nearly copy and pasted. Take care. 
I hated puppet so I built http://getprotobox.com to bring puphpet over to the ansible world. Give it a shot sometime if your interested.
You may also enjoy http://getprotobox.com. Inspired by puphpet it is written in ansible instead of puppet which makes it easier to use. No CentOS support yet though. But it does have hhvm. 
Fair enough. I am happy to remove some of the weirdness if you have any suggestions on what could be changed. 
Implicit and explicit operator keywords on class methods ala C#
I wrote a bunch, but i'll just send a PR later today when i finish lunch. Take care
The first thing I notice is a lack of enterprise distros. Ubuntu is great and all and I'm using it for a media server at home and I know a lot of people who use it on their PC's. I've never seen it used in production though in any shop. Web applications almost always use CentOS or RedHat; I'd love to use this but in order for it to be feasible I need to be able to replicate my production environment and that's just not going to be possible for a lot of people if there isn't an option for CentOS.
Sorry I might be missing something, what is this exactly? Is ita pre-compiled server distor?
Puphpet supports centos so I can't imagine adapting a config file from there would be particularly difficult.
Congratulations on your release!
You are lucky. I sometimes work the the Gnu Image Manipulation Program. There was this time that I wanted to figure out how alpha selections, called "masks" work...
I handle this with DBDeploy, it's a tool for DB migrations built into the Phing build / deployment tool (which is good in itself), migrations are handled via a series of SQL files stored in a specified directory, as they're applied during deployment they're recorded in a changelog table. It also has the ability to build undo scripts which can be useful too. Getting started guide here (not my link): http://davedevelopment.co.uk/2008/04/14/how-to-simple-database-migrations-with-phing-and-dbdeploy.html 
Why yaml? Dumbest format ever
I disagree
Wrap it up in a cold-ass lil closure or bust a router dat don't require you ta instantiate controllaz unnecesarily
Any way of adding 32 bit virtual machines? My virtual support on my HP is flaky at best. This is also a question for /u/jtreminio the auther of puPHPet.
I have never used Vagrant, Is it a more for industry use? Im comparing it to xampp and the like, unless Im misreading its purpose? 
I think what you are asking can be done via google calendar. Invite your friends to your calendar, then they sign up and they can access it, make changes and what not. Another option is programming one from scratch using FullCalendar (http://arshaw.com/fullcalendar/), but that would require a database and a bunch of code to get working. Its the option I chose, only because the people I work with didn't all have google accounts.
It ensures a baseline server config for your project. It can be very annoying trouble shooting everyone's server issues on different xamp / wamp / mamp setups. 
Actually, it's worse.
Ansible uses YAML so having everything YAML based is a big plus. YAML is also pretty easy to learn to on-board new folks. 
Very true. This is the first iteration of the project and adding more distros is key. It's a fairly easy undertaking to add another box and some conditionals in YAML to support different paths for PHP for example. It's something that is on the todo list.
Since protobox is YAML powered, once you generate some YAML from the site, you can change the box_url to anything including 32 bit. I have only tested it with the two boxes on the site at the moment. Then just vagrant up and it will use your new box. Feel free to report any issues you run into it. 
Depending on the client I sometimes work alone or in teams. Even when working alone not having to juggle xampp / wamp / mamp is a huge win. Having a disposable development environment and to be able to provision an environment with anything I need in it, is huge. I used to spend days messing with configurations try to switch between php versions, nginx / apache, etc. Now I can match the production server for every single project.
This is a layer on top of Vagrant to provision development environments. You can edit YAML to tell Vagrant what you want included in the box, for example: wordpress + mysql + nginx + php 5.5, or apache + mongodb + nodejs. You also choose the base server distribution you want it to build on (right now only Ubuntu supported). 