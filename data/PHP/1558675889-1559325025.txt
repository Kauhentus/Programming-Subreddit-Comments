This was the answer I was hoping for. Thank you very much.
Thanks guru
Yes, like you, I am often surprised that not everyone in the world knows every single thing off the top of their head.
&gt; I'd argue it's more hippie-like to suggest that there is something inherently wrong with letting a for-profit company have something for free that you're otherwise fine giving away to others for free. The basic leader of FOSS is a full-on hippy that eats his own toenails in public. Making entities with large sums of cash (compared to private people) pay for what they are using is called capitalism. Fair capitalism.
This looks decent :) Thanks!
The codebase at my company actually has been using this for at least 5 years now. Serious question. Is there any harm in using it this way? If yes then what is an alternative?
[Yep](https://www.php.net/manual/en/function.round.php)
I just found about this yesterday too after taking that PHP test on LinkedIn
Wouldn’t that break if the status code goes over 450 because it’s rounding? Not that I think there’s very many status codes over 450…
&gt;I’m curious about the “ridiculous complexity” of phpunit I am interested to know the OPs views on this as well, looking at the code examples I don't even see how this is is "less complex". This libary: `$sido-&gt;should(is_array($array), "Be an array");` PHPUnit `$this-&gt;assertIsArray($array);` I think PHPUnit is *less complex* and easier to read.
This is very creative but I would never use it myself, it obfuscates the intent too much.
I agree. Something like `$code &gt;= 400 &amp;&amp; $code &lt; 500` is far more readable
&gt; Is there any harm in using it this way? Definitely not, it's a completely intended feature
Didnt know this. Never to old to learn something new.
If I'm getting this right, this isn't about sponsoring projects but rather sponsoring people. I personally would've preferred if you could actually support a project and your money gets distributed among maintainers/contributers according to some metric. Although that would open up its own can of worms (denying PRs and making changes themselves to hog donations). Eitherways great initiative, but the post title is misleading.
I love software development. There’s always something to learn, even in languages you thought you knew inside out.
There's only one status code which goes over 449; `451 Unavailable For Legal Reasons`, which I'm quite happy being classed as a 500. I think this is a bit more readable, but it would be even nicer if a request object had a `is400TypeStatus()` kind of method
Very good.
https://curl.haxx.se/docs/http-cookies.html
You will need to figure out how "authentication" is done. Perhaps images are served by some kind of script that validates if user is logged in or not. But more details are required...
So again. Blogspam from India features "How to introduce an SQL injection in your code". In a way. it's a good thing. Seeing such a code quality, nobody in their right mind would outsource even a homepage to such a company. On the other hand, an unsuspecting Google user could come across their company having no expertize to smell their bullshit. So the sooner this link will be deleted the better.
&gt;"How to introduce an SQL injection in your code". Came to point this out, "are they really just dumping $\_POST\['comments'\] right into the DB?" Apparently yes, yes they are.
No.
I would skip the auth part and simply export the cookie file from the browser (after loging in) and use that in curl.
Such control is probably easier to do with regex.
regular functions ?
Regular expressions. https://www.php.net/manual/en/function.preg-match.php is the php fuction to perform the test and https://regex101.com/ is a great site to test and build your regex.
http://lmgtfy.com/?q=regular+expressions+php
Ty bro .
Very well done IMHO. Checked the PDF / Slides, very good intro. Not a symfony dev but have been a primary dev for a internal GraphQL API of a SaaS product. All those yaml files with this weird Syntax to auto-generate the actual classes feels weird. Graphql has its own DSL hasn't it? which can be used to express the type system and bind resolvers etc., e.g. how https://github.com/nuwave/lighthouse does it; this is more familiar with some having experience in graphql in other languages. But i get it, symfony seems all about the yaml rage. Anyway, nothing against symfony ;) Great framework / components. Thanks for your efforts!
&gt; The basic leader of FOSS is a full-on hippy who eats his own toenails in public. That is not meant to be an attack, that is just the reality. My previous comment describes how the concept of FOSS can and does become popular even despite the fact that a lot of people don't care at all about that one guy you chose to build your strawman around. &gt; Making entities with large sums of cash (compared to private people) pay for what they are using is called capitalism. Fair capitalism, at that. It's the opposite of capitalism. *Making* any sort of pricing that *you* consider "fair" occur is the opposite of capitalism.
&gt; My previous comment describes how the concept of FOSS can and does become popular even despite the fact that a lot of people don't care at all about that one guy you chose to build your strawman around. Your concept comes from him. Really. It would be avoiding Marxism without talking about Karl Marx. Also, it wasn't an argument it's a simple statement of fact. I didn't even need to name the gentleman and you knew who I was talking about. And the concept you defined as you defined it, is some hippy stuff. Which is ok if you want to be a hippy but most people want paid, including all the open source developers crying about not getting paid for the code they release for free. &gt; It's the opposite of capitalism. Making any sort of pricing that you consider "fair" occur is the opposite of capitalism. Capitalism is letting people choose what they want to charge even if you think their choice is "unfair". To be fair, what is capitalism and what is not capitalism is out of scope. But you've defined one version of something of which there are many. Most will agree capitalism is all about making as much money as possible. Capitalism has resulted in companies having the majority of the money, therefore to charge the companies while allowing people to learn the skills for free and increase adoption (widely used technique by capitalist companies). The entire idea to charge people who have money to fund those who don't is called, welfare capitalism, no?
&gt; Working with multidimensional arrays without having to the "if x is not set, set, if y is not set, set, now set z" dance, actually can simplify code significantly. We can't do this in many languages, but PHP is dynamic, so why not take advantage of this? or just take advantage of array_merge_recursive() $foo = []; ... $foo = array_merge_recursive($foo, [x =&gt; [y =&gt; [z =&gt; 10]]]);
Neat, but... Is "advantage" the right word here :P? Cause I see only disadvantages.
Generally this wouldn't work for long as most websites will only allow a session to last for so long before expiring. That will work in the short term, though.
Could accept an unsigned integer for precision instead. Not sure why you find that so puzzling.
&gt; sometimes I'm working in python which requires tabs. No it doesn't. Python requires one of: * Two spaces * Four spaces * A tab I've written Django applications, and I've consistently used four spaces. I just set Vim to insert four spaces when I hit Tab.
Again, why would you do that? Perhaps it's just my heavy math background. But there seems no real advantage to me to limiting round to positive precision.
Wow. Great to know. :) thanks for sharing.
Slight performance improvement with uint. Supporting negative integers would mostly be used for obfuscation, so is mostly unnecessary.
Please stop writing facades: I'm not that fast at eliminating them and making them clear injected dependencies.
Looks decent but with all the CMS and online things like square space etc i'm not sure its practical. For a very basic website this looks pretty decent to use but anything beyond that doesn't seem practical. However, I love to see people build stuff and attempt to make a product. You become a better developer for doing so. Best of luck!
I totally agree with you. I don’t use Laravel’s facade patterns, except for in views. I think perhaps you didn’t read the whole articule :) Facades work as an elegant way to use a class inside a view. The facade does not have logic. So you absolutely can inject your dependencies in the facade provider.
&gt; No - I do not ask for a framework. If I was asking for a framework, I would have stated such I mean this as helpful advice - this sounds hostile, even if that was not your intention, and may be the reason you are receiving downvotes.
Symfony and Lumen are both good, but API Platform offers a lot more on top - you can build REST and GraphQL models and administrate them using a React-powered browser UI.
Dear mods, /u/Daleeburg, /u/HattoriHanzo, /u/frozenfire, /u/jtreminio, /u/the-pixel-developer Endtest is spamming up tech subs, including yours, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus) (same person I imagine) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion.) Banning the above users is a start, but given that if you ban this user he will just create another account I recommend the following options: Use Automoderator on your sub, and use the following rules: #This will automatically remove posts to endtest domain: - endtest.io action: remove action_reason: "Banned domain" --- #Cover comments too body (includes): ["endtest.io"] action: remove action_reason: "Banned Domain" --- # this will remove posts to endtests youtube account domain: - youtube.com - youtu.be media_author: ["Endtest"] action: remove action_reason: "Banned youtube account" Users like this also link to blogs like medium/dev.to that promote their site, more could be done to combat this. This is also not the only spam on tech subs. If you need help irradiating this please contact me, thank you.
What do you mean, "deal with"?
Set it to UTC so by default you're working with UTC times. Then convert to users local time if you need to by storing the users lcoal timezone with their user in the database.
&gt; Your concept comes from him. Really. RMS is one guy with an opinion and while I acknowledge I have physically listened to him and thought about his ideas, my concept doesn't. Most people are individuals with the ability to form their own positions. This is probably why he didn't point to an RMS diatribe, even if you think he summarized what you got out of RMS lectures. Saying someone has the same opinion as someone else is irrelevant. &gt; the concept you defined as you defined it, is some hippy stuff. Working with the argument presented is much stronger, but then you have devolved to "some hippy stuff" which erodes your own point which I'm still trying to grasp. &gt; most people want &lt;to be&gt; paid As I understand it, you would like the money makers to be the money payers, even if it results in closed source implementations. Change my mind on this. I would like lots of things, but that's not possible with closed source implementations, excepting when they "accidentally" have to pay for OSS code mistakenly integrated into their products from time to time. That's the current state and the status quo is not moving to the desired state.
- Check that server is in UTC. - Check that `date_timezone` in php.ini is set to UTC (or not set, defaulting to server UTC - Set these if needed.
Easy. Search for timezones numberphile in YouTube. Pro tip: grab some Strong beverage beforehand
You use an universal time format, like RFC3339 with timezone, when storing datetimes. Then let the client-side handle the display of said datetime based on it's timezone.
I have wondered this as well. Frameworks like Django, Laravel, and others make the back end pretty easy once you understand them. I have never had more than 20 or so database tables. Why in the world would you need that many? Is it just the sheer amount of data makes you break up the content?
[http://www.typescriptlang.org/](http://www.typescriptlang.org/) &amp;#x200B; I used to be a PHP dev. Now my APIs are made with TypeScript and running on Node. TypeScript has everything you've asked for. &amp;#x200B; I'm not sure what you mean by "proper scoping" but I think that "let" and "const" in vanilla JavaScript fixed this.
If you're a front end developer who only knows javascript you can now do backend stuff as well. And with Typscript you get that stuff.
add "imo" before that, it's very subjective. &amp;#x200B; \- testing facilties should speak for itself and not require you to have the manual bookmarked \- way too much magic by convention \- testsuite is WAY too tightly coupled to codeception \- if youre already using symfony/laravel there is really no point, since they both offer easy bdd/functional testing libs.
Even with systems that aren't user-facing, I've encountered daylight-savings-time-based issues when importing data from external sources if the server is in anything but UTC.
There are frameworks for Node.js that make it easier.
&gt;I have never had more than 20 or so database tables. Why in the world would you need that many? Is it just the sheer amount of data makes you break up the content? More likely to be the breadth of functionality
It's new and popular.
&gt; I have never had more than 20 or so database tables. Why in the world would you need that many? Is it just the sheer amount of data makes you break up the content? I worked a long time for a newspaper company. They had so much data and entities ;) thats why we needed so much tables. Epaper, News, Comments, Internal stuff, Customer-Data, Positional-Layout-Tables, Checkout-Tables, Ressorts and much much more...
Why are you asking in /r/PHP ?
Those fundamental OOp tools are not as fundamental as you think. There are different kinds of OOP. You are used to class oriented OOP while JavaSceript is prototype oriented OOP language ([https://en.wikipedia.org/wiki/Prototype-based\_programming](https://en.wikipedia.org/wiki/Prototype-based_programming) ). It is different approach with it's own benefits and drawbacks.
I am not a fan of fixing the language in the userland. When I have to deal with JS I always use TypeScript but it just fakes OOP. Best part are the visible modifiers private public. The var ist still accessable type-script just puts an "_" in the name. In my latest projects when I need to deal with js I use Dart instead (https://dart.dev/) and then I use: https://dart.dev/tools/dart2js. This feels better but still the same problem and the end you get normal js. But at least the language itself is not broken.
javascript has private fields now via the # marker
For one, JavaScript had been OOP from it's inception. It uses prototype delegation instead of classes. As such, the lack of classes in JavaScript has nothing to do with OOP nor are classes fundamental to OOP. For another, due to the above, JavaScript doesn't rely on type information. In JavaScript all you have is objects, only objects and nothing but objects. In JavaScript, you have objects filling in for classes, abstract classes, traits... I'm unsure how you've arrived at the conclusion that JavaScript doesn't have proper scoping since it's basically on par with PHP and even offers more granular control with `let` and `var`. `let` will scope the variable as you'd expect and `var` persists the value for ,
I think that the whole JS thing is mass lunacy. There are many historic reasons we came to this point but I hope it will change. JS cannot be the language we leave to our children.
Web apps are easier to write with all JS. So lets say you've got a cool interactive 2 or 3 page app. It does all kind of cool interactive shit when users interact with each of the elements . You can write the whole thing in react and it's much easier conceptually vs writing a very responsive front-end and tying it to a back-end. This is the reason Facebook moved away from PHP and created React. It takes a lot of front-end javascript to do anything moderately complex like dynamically updating graphs showing data from a backend API. It's not necessarily less code to do it in React but its a lot easier to conceptualize it using the reactor pattern. Easier to write means easier to debug and easier to modify later.
&gt; but I think that "let" and "const" in vanilla JavaScript fixed this. Neither of those work the way I expect them to, although they're certainly both improvements over `var` (or undeclared variables). Typescript is a delightful improvement over straight JS where you're forced to use JS. I'd never willingly pick it for backend services. If there was a variant that didn't have to inherit and work around all of JS's quirks, I'd consider changing that opinion.
Because then your front-end and back-end can share code.
Delegation is not inheritance.
I first learned PHP and have moved to Node as my daily language of choice. To handle something that large we utilize lots of different micro-services as API's rather than having a monolithic application, even though Symfony is an amazing framework and I still love working in it when I can. The variety of micro-services allows for rapid iterations to be done and easily tested. It's easy to swap out pieces without breaking other pieces. We can also scale the pieces as we need to rather than scaling up everything. PHP also can't compete with Node on speed purposes from the PHP bootstrapping alone. Specifically, Node uses an event-driven non blocking I/O execution model where PHP uses multi-threaded blocking I/O. Personally, I find Nodes runtime to be a lot easier and simpler to work with from a devops perspective as well. My Node containers are nice and easy, where PHP containers tend to need a lot more help from server extensions.
&gt; I have never had more than 20 or so database tables. Why in the world would you need that many? Normalization. Well-structured databases contain one table for each entity class to maintain the 3rd/4th normal form. It would be fairly easy to develop a database with over 20 entity classes if you work with a large enough system.
I don’t think the case that OOP has to be used is a good one any more. Not when you have the wealth or npm at hand which makes composer and packigist pale in comparison
and another great feature is async execution which php terribly lacks.
Inheritance is what you do with classes. As I said, JavaScript doesn't use them. As such JavaScript doesn't have inheritance. That said, prototype delegation enables a similar effect and often (not always) the distinction is moot.
It's doable with promises. It's really just syntactic sugar for them. But yeah.. agree PITA
Don't get me wrong TypeScript does an awesome job but some things are not just only a different style. It is just faked that it feels like Class-Based-OOP. For example types are checked on compile-time and not at runtime. Ist this still right? Anyway TypeScript is good but it would be better if JavaScript would be just like TypeScript.
&gt; For small services or cli's I don't see any problems with node. That's a bingo. Large companies are moving away from monoliths, and building applications comprised of microservices. In other words, they're generally not building their entire back-end on Node, they're adding it as a tool. When you're building a worker that has one duty to perform, node is more efficient and lightweight. To that end, they're also generally building the rest of their back-end on Python, Go and Java, as PHP lacks much of the strict tools those languages provide.
Ok I understand that but why are they so loud that this is better than PHP and only old ppl. work with PHP. I mean it's not like that they are just happy that they can work in the backend now. They are as well very vocal about that this is the new better thing and all ppl. are idiots if they continue to use PHP.
Might want to ask in r/JavaScript - although there have been some excellent answers (typescript + ES6 + event driven). It is a very different ecosystem from PHP and so its approach is distinctive and needs a somewhat different mindset, but it is not inferior. Also, functional paradigms are also popular in JS and provide alternatives to the OOP approach, much harder to implement in PHP.
This is very ironic. You do realise that that is exactly how other people speak of PHP? I know I know, they are wrong, you are right. Or maybe both are sterile judgements out of kilter with reality?
Might want to ask in r/JavaScript - although there have been some excellent answers (typescript + ES6 + event driven). It is a very different ecosystem from PHP and so its approach is distinctive and needs a somewhat different mindset, but it is not inferior. Also, functional paradigms are also popular in JS and provide alternatives to the OOP approach, much harder to implement in PHP.
Every language fakes OOP.
This is enough today in our world? Just be cool and new? *sigh...
PHP is fine. You can do most stuff with it. The issue is when it comes to writing reactive applications, client side delight, etc. That has to come from JavaScript. So from a business perspective if I can have my team working on one language it makes it easier for my employees to hop around, translates well to mongo, etc. Really efficient to make scalable web apps with limited human capital. Beyond that, php while being fine is also not fine. Just like how there are shitty npm packages if you don't know what you're doing, there are terrible wordpress and Drupal devs that give php a bad name. It's a wide net and a lot of the web runs on it. For better or worse.
Because Typescript (often used with Node) is easy to get into and allows for rapid prototyping. That being said, I'd slap anyone that would try to use it for a large enterprise application and ask them if they've lost their mind, because I'll help them find it. Kind of like Laravel is nice for smaller scope applications and prototypes, but try to use it for large applications that actually require a fair amount of business related logic and complex systems such proper ERP and CRM capabilities and it starts tumbling down into a Facade hell. It's all really about scope and the right tool for the job.
That's all just window dressing. It's cooperative multitasking that makes me wonder why any takes it seriously for backend work, ever. You can do a lot of hand-waiving around everything else, but that one feature rolls back 30 years in processor and operating system design for ... what? lpad as a service?
Maybe related to the question: [https://codeblog.jonskeet.uk/2019/03/27/storing-utc-is-not-a-silver-bullet/](https://codeblog.jonskeet.uk/2019/03/27/storing-utc-is-not-a-silver-bullet/)
Under rated comment. You can use interfaces to enforce consistency end to end.
wtf? your comment does not make any sense. react is purely frontend ui framework and has nothing to do with php or backend. it moved to react, because it is data driven instead of dom driven. facebook still use a lot of php, they even wrote their own JIT compiler- hhvm.
&gt; Ok I understand that but why are they so loud that this is better than PHP and only old ppl. work with PHP? Because to young outgoing vocal sorts, all that matters is Current Trend #487, and anything else must be Old News and Thoroughly Defunct. The ones spouting stuff like this are simply young and naive. They also tend to care a lot about their status in various social media platforms, the dynamics and "selection pressures", if you will, of which also conspire to push them toward being more vocal and more abrasive with such declarations of New Thing being so much more important than Old Thing. Echo chambers, in other words. PHP still powers ~80% of the web. It's fine. Node, as much as I despise the concept of backend JS, also does have its uses and for thin APIs it's far quicker than PHP in my experience. It's all swings and roundabouts, and about ignoring the idiots.
Oh that's easy. Because they're assholes. Same with the Python people who think PHP is just for Wordpress but don't realize PHP is faster than Python. I am sure there are some PHP buttholes too, but being in the PHP crowd I don't have as good a perspective on that. Many people think Javascript is asynchronous. It's not. The Javascript IO is asynchronous, but not javascript itself. I think some people think this makes it better. But PHP is usually going to have multiple threads for web connections instead of everyone running on a single thread like node. Each has it's pros and cons, but I have yet to see anything that makes node or python overall better for web development.
I agree that my brain works class-based-orientated but when you have a new style like prototype oriented then you still have the same logicial issues. I mean your task/app does not change only the language. What I want to say is: You need a basic amount of tools to get your job done. If you take too much away the quality is reduced. I imagine this like a contruction-worker if you take something of his tools away then you can't say it's just a different style. You come to a point where he/she just can't do his/her work anymore bnecause you took his/her sledge away. And it not like that javascript takes something away and gives you something else. It's more like javascript takes two things away and gives you one for that.
I guess because we’re all a bunch of idiots?
Probably trolling.
&gt; Delegation is not inheritance. https://en.wikipedia.org/wiki/Composition_over_inheritance
&gt; I just wonder how node devs manage a big code base with a big business logic part without classes, interfaces, namespaces and so on. I just want to know. These are crucial tools for me to structure an application. https://en.wikipedia.org/wiki/Microservices
**Microservices** Microservices are a software development technique—a variant of the service-oriented architecture (SOA) architectural style that structures an application as a collection of loosely coupled services. In a microservices architecture, services are fine-grained and the protocols are lightweight. The benefit of decomposing an application into different smaller services is that it improves modularity. This makes the application easier to understand, develop, test, and become more resilient to architecture erosion. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Exactly this. It’s also a lot cleaner if you separate things out properly. Sure, you can cram everything into as few tables as possible but then you end up with a mess of a system with a database that’s very difficult to understand and pull data efficiently from.
&gt; Normalization. &gt; ... large enough system. The system was so large that we in fact de-normalized it (not tables only foreignkeys at least) because of performance. If mysql need to join over 22 tables it can be expensive. At Importime we build a shortcut for some tables by duplicating keys. But don't tell anybody! https://en.wikipedia.org/wiki/Denormalization &gt; Denormalization is a strategy used on a previously-normalized database to increase performance.
&gt; PHP also can't compete with Node on speed purposes from the PHP bootstrapping alone. It can and it does, I don't understand where this is coming from. While Node is indeed better suited to handle more requests out of the box, PHP is built to be fast when it comes to more computationally intensive workloads. This is why you have huge CMSes and E-commerce platforms written in PHP which run absolutely fine, while such systems are lacking in the Node landscape (it's not the definitive reason, but it's ne of them). And if you want to handle a lot of requests in PHP you should check out Swoole. Last I checked PHP with Swoole outperformed Node in sheer handled reqs/sec. To conclude, I think you're underestimating what PHP can do.
Hoping for an echo chamber
Netflix used to have their backend in Java and front end in Java Script. They decided to migrate their backend to Java script in order to: 1 Have all their devs working with one language. 2 have their entire platform working with the same language end to end, which allows code reusability among other things. I remember watching this keynote on YouTube, aws reinvent I guess, someone from Netflix presenting their case, but all I remember is it was a lady and it was about 4 maybe 5 years ago. Since Netflix is such a big client for aws there are dozens of Netflix keynotes for aws events on YouTube, and I couldn't find the right one. Buuuhh me.
&gt; When you're building a worker that has one duty to perform, node is more efficient and lightweight. That depends on the workload. If that worker has a computationally intensive task to do, Node is a poor choice. And what are thesw 'strict tools' you're referring to exactly?
But all tools you described are just style specific tools of class oriented programing. It's like saing that you was used to build wood houses by using screws to connect things and when you got brick house construction site there are no screw parts of the house together. &amp;#x200B; You do not need (bastract) classes or interfaces - because you work with prototypes. You do not need namespaces because there is no global space of class names. &amp;#x200B; Vanilla JavaScript is dynamic language without object types but there are higher level languages like TypeScript to solve that if you want to use types. &amp;#x200B; Overall structure of application and dependencies management is different. For example in class based language there is no way to use two conflicting versions of same dependency because class names would be in conflict. In JavaScript world it is no-brainer - you just use different prototypes in different parts of app it is it. &amp;#x200B; I think that problem is that you are simply tring to use JavaScript same way you was used to in PHP but in fact you need to learn new paradigm first. I was in same situation few years back, fighting with thinks that does not makes sense at first sight, but after reading theory behind prototype oriented OOP and how it structures it's code it starts to make sense.
I understand that and I like to hear every word from a real world node dev. But I have some questions/statements I want to throw in. Why not just making the microservices with PHP? For exmaple with Slim/Lumen whatever? Then you still have microservices and a more feature-rich-language. &gt; moved to Node as my daily language of choice https://media.giphy.com/media/3o6Ztrb6SWTLzPYI0w/giphy.gif &gt; To handle something that large we utilize lots of different micro-services as API's rather than having a monolithic application. But sometimes you can't split things up and is tighly wired. &gt; The variety of micro-services allows for rapid iterations to be done and easily tested. It's easy to swap out pieces without breaking other pieces. We can also scale the pieces as we need to rather than scaling up everything. Thats nice if the task/app allows it. &gt; PHP also can't compete with Node on speed purposes from the PHP bootstrapping alone. Specifically, Node uses an event-driven non blocking I/O execution model where PHP uses multi-threaded blocking I/O. This is not true PHP is faster than node and what hinders you to use https://github.com/php-pm/php-pm or https://appserver.io/# then you have as well the event-loop and only one bootstrapping-proccess. &gt; where PHP uses multi-threaded blocking I/O. But this can have advantages as well, just a tiny side note. &gt; My Node containers are nice and easy, where PHP containers You talk about docker-containers? Or what containers you mean?
JavaScript is half functional, half protorype-bases. OOP isn't always the way to go, even if you have learned so.
Prototypes &gt; Classes, change my mind
Yes I learned it so thats true my brain works like this. I dont want to say that OOP/Classed-based-OOP is the only right way to go. But when a language "says" here is something different then I have the expection that the language has something else for me or a different approach to solve a certain problem but in javascript it's more like that you don't have this and you don't have that. What do you get else? Nothing. Just use prototype. If you need more the answer is always TypeScript. But is TypeScript not the confession that you always come to a point where you need OOP and JS ist missing it?
Thx for the Link. We use that technique in our company but with PHP/Slim/Lumen. Then we have Microservices and a feature-rich language.
Because it's not PHP.
Node.js has been around for a decade...
Oh man you opened up a can of worms and took a large step to becoming a sr. Developer/architect at the Enterprise level. Remember the “teach everyone to code movement”? That was a ploy by large tech organizations to lower the pay of developers. Do you see that anymore? Since that didn’t work how about having full stack development be one language? Do you get where I’m going? Since you’ve followed me this long I’ve just started to answer you’re question. There’s this thing called open source that makes no one money unless you’re at the top. Instead of giving back someone reinvents the wheel. Their wheel solves their problem until they are obligated for everything that has to do with that wheel. Fight me but node became popular because Twitter talked shit about Ruby on Rails. The does it scale bullshit from Twitter is why Rails popularity declined. Node has nothing to do with the best tool for the job it’s there for one language across the stack to pay you less, to answer the false Rails doesn’t scale and is the poster child for shiny new thing so that the open source maintainers can make money. Node is popular because technologies that are hard to work with will help the developer earn more money down the road. Smart devs know if you create a demand where the technology can only be fixed or maintained by you is a lifetime of income. Those developers spread the hype to where we think this thing is popular. Once popular the real business people agree that the developer is right in using that technology. The shiny new thing syndrome in development is always going to be a thing. Too bad Node is the shiny new thing that became popular.
To echo the top poster, those "fundamental OOP tools" are not the only path to writing good software. You say you need classes, entities, interfaces, traits and types to organize and structure your app...but is that really true? And even if it is, do you think you cannot use those similar patterns in Node? 1. Classes - In PHP you have class definitions, but you typically interact with them as instances. Javascript just closes that gap - you define a template/prototype object and name it - the syntax is different from PHP, but the functionality is the same - you end up with something you can create instances of and work with. 2. Entities - I'm assuming you're referring to Entities as an ORM would define them? JS has ORM tools as well, otherwise see the above response 3. Interfaces - got me here, although I can't remember the last time I wished I had one when writing javascript. 4. Traits - I'm surprised to see you mention this one, as traits are a very "javascripty" way of thinking. Mixins, dynamically adding properties, or using .call and .apply solve this problem in an arguably more elegant way than PHP's trait definitions All in all, Node/JS is just as possible to be written elegantly and just as insanely as PHP. No language tooling will ever trump good development practices.
Who cares? Use something else for your projects.
t's like saing that you was used to build wood houses by using screws to connect things and when you got to brick house construction site there are no screw to connect parts of the house together. In this example you get stone instead of wood or cement instead of screws. In Javascript you nothing in return it just takes tools it gives you no replacements. &gt; You do not need namespaces because there is no global space of class names. Even in JavaScript there is a global var scope and there your objects live. Or what do you mean? &gt; Vanilla JavaScript is dynamic language without object types but there are higher level languages like TypeScript to solve that if you want to use types. Fixing a language in the userland just shows how much problems plain js/node has. It's not a feature. It's a rescue that the language not feels that broken anymore. &gt; I think that problem is that you are simply tring to use JavaScript same way you was used to in PHP Nope! In JS I code prototype based and make use of it's nature. &gt; but in fact you need to learn new paradigm first. I think I am very experienced with javascript and it's underlying mechanics. It's not the case that I dont understand the concept of JS it's more that I understand the concept of JS and just disagree with it and don't like it. It's like Windows or Mac you can be good at both systems but still have a pference because it fits more your taste.
&gt; I have never had more than 20 or so database tables I guess you've never had to work with large projects with a complex domain logic. The one I'm currently working on has somewhere around 280 tables and it's perfectly reasonable given the size and complexity of the project.
I preffer class oriented approach too. I just can see that for some other people prototype oriented approach seems better. I would not call JS broken, it is just different. Same thing is with dynamically/ statically typed languages and weak/strong types. Different approaches fir differebt tastes. If you know how prototype oriented paradigm should work what usage would be for classes? Namespaces in class oriented languages are just way to fix problem that two independent libraries cannot use same class name (because class nane space is global). It is good example of not very nice fix to problem that does not exists in prorotype oriented languages.
It is good practice run your server at UTC time. I recommend dealing with your logic / db as unix timestamp integers with a timezone field specified in the appropriate table, or in the UI if localisation is more related to browser location.
We work with 1200 tables for a single project...
Nice post, let's discuss :D &gt; but is that really true? I think yes because it gives you on language-level more tools to structure your app. Why I would not want that? Of course you ca mimick the style in the userland but on language-level it feels better. &gt; do you think you cannot use those similar patterns in Node? I can but it feels so hacky and not integrated into the lang... &gt; the syntax is different from PHP, but the functionality is the same But extends and co. &gt; Entities - I'm assuming you're referring to Entities as an ORM Where did I wrote Entities? But yes if I talk about Entities I mean Entities as an ORM. But it's not in the title. &gt; Traits - I'm surprised to see you mention this one, as traits are a very "javascripty" way of thinking Thats true but they have their usecase if I dont have a same line of inheritance or/and it makes no sense to introduce a base-class then traits are the right way. For example a "observable" trait everything can be observable it would be ridiculous to cramp classes together into a same inheritance line if they have nothing to do with each other just to get "observable". That's why I would always put a observable function in a trait to have it flexible.
I do both PHP and Javascript since about two years. Here are my two main reasons why I often prefer to do things in JS: 1) Anonymous functions and closures are soooo much better in JS! I often rapid prototype a bunch of code and then start giving it a better structure by using a few anonymous functions. I try to do the same thing in PHP but my co-workers think that anonymous functions are not PHP-y enough and I am kind of forbidden to use them 2) JS is just nicer to type! It's 2019, why do I still have to type that fucking $ in front of variables??? Shouldn't be PHP clever enough nowadays to figure out if it is a variable? I use PhPStorm most of the time so I get around the $ by using auto complete a lot but everytime I have to do PHP in a normal editor I get annoyed by the $! Over the last 20 years I did mostly C/C++, Matlab, Python, JS and PHP and from those languages PHP is by far the most annoying to write code. JS (and Python) somehow feel nicer when I have to write a lot of code.
1. If you know JS, and you don't know a "normal" backend language, using Node is attractive 2. Node gets a lot of hype 3. Node is actually a decent choice for a few types of projects. 4. Most of the features you mentioned are not all that "fundamental", or are available in Node. Your feature list: * classes: Not needed for OOP, Node has them if you want (via ES6 syntax), and JS offers an alternative technique (prototypes) which is roughly equivalent * abstract-classes: Not needed for OOP, and lots of people avoid them in languages which have them. * traits: Not needed for OOP, lots of people avoid them in PHP, and you can get extremely similar behaviour in JS easily (mixins, etc.) * interfaces: Not needed for OOP, lots of people don't use them * types/type-hinting/return-types: Absolutely not needed for OOP, lots of people avoid them in PHP, and Node has them if you want via TypeScript * proper scoping: Not quite sure what you mean here * visibility: Not needed for OOP, some other languages don't have it (eg, Python), not everyone uses it languages that do have it Like, I *personally* like SOLID, types, interfaces, etc., and I certainly agree that JS is a bit annoying to work with there but 1) you can still do it fine and 2) plenty of people like dynamic languages. Python and Ruby exist and are pretty popular! And tons of PHP code eschews everything on your list. &gt; All these OOP tools help me to strcuture an app if you dont't have them how a node dev does strcuture their app? 1. They have more of them than you think 2. There are a lot of ways to structure an app. I do *prefer* well written PHP code to well written Node code, but the difference is fairly minor.
&gt; What I want to say is: You need a basic amount of tools to get your job done. And that's my main beef with PHP (perhaps not PHP itself but the mindset of the average PHP programmer): Everything is forced into classes! Yes, there is some support for anonymous functions and closures and other things but when it comes to reality 99% of the code is forced into classes because that's the way a lot of PHP programmers like it. I worked with a bunch of other languages before I learned PHP and I often feel limited by PHP because other languages give me more freedom and more tools. When I did a lot of Python I only used classes when I had to gather a bunch of data and some helper functions into a single data structure. The rest of the code was just normal functions which are grouped into modules. If it made sense to create a class I created a class. If it made sense to just write a bunch of functions and out them into a module I did just that. But in PHP the answer to everything is: classes! No matter what you want to do you kinda have to press it into a class because that's the PHP way.
lol, which language is not lunacy? In a perfect world we would just kill C/C++/PHP/JS/... and replace it with something more sane. I recently dabbled into Rust and that's the first language which feels a bit more sane than basically all other "old" languages.
This may not be the reason developers choose JS, but, if you need I/O async on the backend, Node make it really easy. Do you need to scrape websites or do stuffs like coordinating queue actions?, Node is a good election
Because you don’t need OOP to build web applications.
&gt; For example types are checked on compile-time and not at runtime. This is about the only valid criticism you've made of js+ts over php in terms of lacking features. I agree, I wish we could get runtime type checking too. &gt; Anyway TypeScript is good but it would be better if JavaScript would be just like TypeScript. Agree 100%. At the end of the day, it's just a preference. There's no point trying to argue something like this as if there's an objective answer as to what is "better" for all projects. I did nothing but PHP for 19 years, and it served me well. And I still know PHP far better than I know JS/TS. But I switched to node/js/ts about 2 years ago, and I prefer TS for all of my larger projects now though.
Because they're not worried about 6 months from now
To be honest I think that it mainly comes from inexperience and hype. It’s very short sighted to choose Node without knowing the full implications. Small problems become exponentially larger down the road as your codebase matures. There is very few good established patterns since they are very hard to engineer correctly due to the lack of fundamental OOP components that you mentioned. Coming back to PHP 7 was delightful after struggling to establish somewhat sane practices on the node side. Now I only use Node to develop client side JS mainly for bundling/transpiling/pre-processing.
It's fascinating to me that you're essentially comparing php and js... I've worked with both in the backend and just like with python I can only advise against it other than for really small PoCs The issue here isn't the absence of object orientedness or the likes - functional programming has its rightful place in backend - it's the performance and lack of strict compiletime checks I know some people consider it harder to write but from my experience - in what is now quite a variety of companies - people tend to spend hours tediously debugging their interpreted non-type-checked code to find issues that would be solved at compile time with the likes of Go or Java
But having is better than needing but not having. If you don't need OOP in PHP then just dont use it. But if you need it it's there...
The reason isn’t JavaScript the language so much as mode. Nodes async is event driven model is wayyyyy more performance that something like Apache with mod php. Furthermore it allows them to turn front end devs into back end devs with little effort as they don’t have to learn another language.
Apache + php do we have 2010 again? Php is faster than js. Js is only faster if you run php not in a event loop. See php-pm yes pm not fpm or appserver.io then you have an event loop as well like in js.
I unironically still make lamp stack apps with codeigniter and server side templating
This is a really clueless comment. Have you ever seen PHP code from years ago? It’s exactly like you describe for Python. And guess what... you can still write code like that. I’d never want to work with you, but you’re welcome to do it.
Facade hell sounds like a problem people run into when they’re unfamiliar with good programming practices. I won’t pretend AR is the way to go, but realistically Laravel is a thin wrapper around symfony. If your goal isn’t to turn out as many half assed spatie plug-ins as you can then you shouldn’t be using them in the first place.
&gt;These are crucial tools for me There's your answer. They're crucial tools to *you*. Other languages and ecosystems have other paradigms. There are even better languages than PHP or EMCAScript that don't have OOP at all because it's not the only type of programming that exists.
1. Seriously??? I’ve never seen $that = $this in php. 2. Seriously? You have a problem with $ but not with having to use var or let ?
Stick with Python.
Because morons have big heads and think they're oh so senior when they can't even code themselves out of a bag! I had an interviewee today tell me he was a 13 year PHP senior. First red flag: He had worked at the SAME PLACE for 12 years, straight out of college. The idiot didn't know what composer was (OK, no one at this entire office knew when I came on in February!), had never heard of automated tests, had NO IDEA what an abstract class was. He also had no clue what design patterns were. It was, frankly, pathetic. I asked him at the end if he still thought of himself as a "senior PHP programmer" and he said "Of course I am. All you asked me were head knowledge, I can make ANYTHING." and I said I didn't doubt that. I doubted that he could make MAINTAINABLE code. I asked him if he knew what cyclomatic or cognitive complexity were, and just got a blank stare. So I wrote down what separates mid-levels from *low* level pros: 1. Intimate knowledge of design patterns, particularly abstract factory, command/strategy, proxy/adaptor. 2. How to write automated tests, both functional, integrative and unit, via both PHPUnit and either Behat (ugh) or Codeception (yay!) 3. An understanding and frequent use of static analyzers (like vimeo/psalm and phpstan). 4. What is composition? And why should it be used versus inheritance the vast majority of the time? At that point, he asked me what inheritance was, and I said "You know! When you extend a class!" and he looked at me dumbly and I said, "Son, if you don't know what inheritance is, then you might want to take the rest of the day off and really start learning your profession." I know, I try really hard not to be antagonistic during interviews, but it's like the guy who last week told me he was a "10 out of 10!" python developer and couldn't even tell me how to write a class in Python.
amphp begs to differ.
Is that typed array config collection native to how you work in laravel? Also, i would highly recommend using a petri net over this. For symfony users this means [https://symfony.com/doc/current/workflow/introduction.html](https://symfony.com/doc/current/workflow/introduction.html)
&gt; In this example you get stone instead of wood or cement instead of screws. In Javascript you nothing in return it just takes tools it gives you no replacements. Just a tip on your discussion style, if I may. You seem to be vehemently arguing against the points being made in the post you're replying to. If the metaphor doesn't make sense to you, that's fine - communication is messy at the best of times, and what makes sense to someone might not make sense to everyone. If you disagree, then maybe it'd be more constructive to seek a better metaphor. &gt; It's not the case that I dont understand the concept of JS it's more that I understand the concept of JS and just disagree with it and don't like it. The fact remains that many people _do_ very successfully use JS (and a wide variety of other languages that lack the features you mention) to create large applications. But if you come at it with this attitude, you'll probably never understand how. That's fine - but since you specifically asked, I assume you _do_ want to understand how! Out of curiosity, what other languages do you know outside PHP and JS?
1) I never had an issue with 'var _this = this', you get used to it after a few days 2) It's way easier to type 'var' than to hit 'shift + 4'
&gt; I think yes because it gives you on language-level more tools to structure your app. Why I would not want that? Of course you ca mimick the style in the userland but on language-level it feels better. This begs the question: why are you using PHP and not Java, C++ or Haskell? They offer more language-level features (better type systems) to structure your code, and why would you not want that? Everything is about tradeoffs and mental models. You like PHP's particular language-level features and capabilities, and that's fine. I don't - and that's fine!
&gt; If Class-Based Object Oriented Programming was Object Oriented Programming it wouldn't have the Class-Based wart in front of it. It's all a matter of perspective ;)
No, luckily I haven't seen really bad old PHP code bases but I have seen enough modern code bases were everything is forced into classed enven though it is not necessary. I think that classes in modern PHP serve 2 different purposes: 1) normal classes 2) a poor mans excuse for modules because there is no nice way to bundle functions into a small/module lib Yes, you can do 2) in PHP but in other languages (like Python) this process is much easier to work with
 Not sure what makes 2 easier in Python as I haven’t written enough to know. You’re welcome to write functional and procedural PHP though, and despite what you may think, many people do, for specific purposes. I’d never choose to write an entire app that way though. Personally I’m a huge fan of immutable classes and DI for PHP. If I wanted to write an app functionally, or had different requirements, I’d use another language where the syntax is more suited. There is a reason people are writing PHP the way they are though, it improves stability and maintainability. Every language has its quirks, strengths, weaknesses and syntax, and despite what you may think, those end up influencing the way people structure and build things with that language.
&gt; and despite what you may think, those end up influencing the way people structure and build things with that language Yes, this is exactly what I mean: The best way to do things in current PHP (from a Syntax/grammar point of view) are classes. Of course you can do in different ways but they are more clunky and that's why people prefer using classes for everything. And my wish for PHP is that in the future there is more support for other programming styles other than 'everything must be pressed into a class'
This seems unreal. Quick question, what is the biggest difference between a junior and senior?
Why do we use PHP and not Java? After all, Java has a lot of language features like generics and other goodies that PHP doesn't. All comes to preference, ecosystem and tools.
I disagree. I don't want a big bloat language that tries to do everything. PHP will never be a great functional language. There are far too many restrictions on the parser from a syntax perspective. Have a look at the RFC for arrow functions if you want to get an understanding on some of the challenges. Just use another language that's more suited. I don't see what the issue is with that.
`$` happens every time you use a variable. `let` happens once when you declare it (which, by the way, makes it very nice and clear when and where something is declared), and not even once if the variable in question is a function parameter, destructured object member, etc.
We don't do OOP even in PHP for the most part. Instead what most people refer as OOP PHP is actually procedural code with some OOP "trappings" like classes. Let me give you a clear example. The core tenant of OOP is that your code is consisted of software entities which bundle data and behavior. We learned against it usage. We separate dumb data objects from service objects. Data is just data and services are stateless. We split those services into classes to make it more modular and with DI we connect the services to build procedural pipelines we run our entities (Data) through. That's procedural programming. Once you realize that you're not doing OOP and a lot of people refer to OOP simply as modular and reusable composable code you realize that it never was so important to begin with. Although some concepts are very useful.
Where did you get the idea that PHP is faster than Python? In all the benchmarks I've seen Python was significantly faster.
Why don’t you try avored e commerce build with best php framework https://github.com/avored/laravel-ecommerce
Sorry, but there are was to bundle functions in bundle. I personally don't like it, but the ways are there...
Typescript
 [https://www.techempower.com/benchmarks/](https://www.techempower.com/benchmarks/)
Should be `self::assertIsArray($array);`.
Thanks /u/o5s5s. &amp;#x200B; We've been getting reports about end test a lot recently. I'll add the auto-moderator rules so we can keep them off the PHP sub.
Did you forget Reddit is based in San Francisco?
Was the the sole developer at his previous job? That might explain a lot of why he doesn't know anything about how to write maintainable code &amp;mdash; because he's never had to work as part of a team. For a long time I would have considered myself a senior PHP dev just like that guy, while admitting there was a ton I didn't know because the only time I learned something new was in the course of directly trying to solve a problem. When you have deadlines to meet and a boss who doesn't know anything about programming, then you don't want to spend time doing anything that isn't directly solving a problem, and your boss sure isn't going to understand or appreciate it if you do. Granted, I wouldn't work for someone like that nowadays. But from having been there, I can totally see where your interviewee was coming from.
I'd say the actual reason some people choose JS, is simply to be able to use the same language on the back and the front (and if needs be for mobile). When is comes to concurrency Node isn't actually that nice, I mean some PHP guy who doesn't know any different thinks Node is "great" for concurrency, but the reality is Scala, Golang, Elixir/Erlang, etc all do it far better and Nod/JS is pretty horrible in comparison.
Sees lots of new-fangled concepts ← *sweats nervously* ←
 [https://discord.gg/bhSwuDS](https://discord.gg/bhSwuDS)
 [https://discord.gg/bhSwuDS](https://discord.gg/bhSwuDS)
I studied generics back in university, I have honestly no idea how I could grasp that concept so well to a point I managed to top my class for that. Now I'm just drawing blank stares when people are asking about it — which, in my opinion, by now is as basic an information as the various *dim*, *$\_* and *let*/*var* language declarations —, so I am actually reading up on you people's comments so that I learn more — and catch up on things that are new to me (design patterns is one I had forgot due to natural rot).
I always say pick the right tool for the job. In this micro services world, you can spend a lot of time making API calls to other services. JavaScript has the absolutely best asynchronous design pattern then any other language, it absolutely excels at doing many simultaneous tasks with long IO blocking - like making client API calls. Which makes sense because it was born in the client browser. It works the same for DB queries- make all your queries at once using async instead of slowly chaining then together. You might as well ask why people keep using all these scripting languages without true threading support and why not use a language with support for that like Java, C#, or Go. Hey, guess what runs in AWS’s lambda? Here is a hint, not PHP. Anyways instead of shouting why X is better then Z, learn the pros and cons and pick the right tool for the job. JavaScript has some very useful design patterns depending on your use case.
I'm a senior PHP developer. Have worked at the same company since college. I'm familiar with everything you've listed. We implement design patterns, test with PHPUnit/Codeception, composition vs inheritance is required knowledge to join our team. Point is, please don't generalize us. Sure there are terrible examples such as you've pointed out, but that's not all of us.
The lack of generics in PHP is tremendous and leads to tons of duplicated code, if you want to ensure type safety. Simple example, you want a list of exactly one type of object/interface. That's basically doable if you have the need for only one. But if you need several ones you have to copy the code and adjust the type hints over and over again. That's a mess which you might be used to if you were only working PHP. But having worked with languages providing generics you know there would be a better approach it's killing you step by step. Tbh it's one thing that's driving me crazy about the PHP Community process. They discuss mostly useless features like JIT compiler or syntax sugar like fat arrow functions, the latter not being implemented properly. But miss those features which would really help to write better code. Thankfully PHP 7.4 introduces typed properties stopping the getter/setter mess just for type safety. But also here why only for properties and not local variables and parameter? It just makes no sense.
I really don't think that this is how the majority of php installations work. PHP lacks ootb support of async i/o. Therefore these systems have to implement it on their own. So no PDO, no mysqli no simple file_get_contents. It's basically learning a new language and i see no point why not to use e.g. Golang then, which runs way faster than PHP without the need of a fat runtime to be installed.
Look into TypeScript :)
May I ask why that is so? In PHPUnit, tests are run in an instance of the test case, so `$this-&gt;` is correct (and works for me). Do you declare your tests static?
Time
It's always nice to see new ideas popping up in the testing space. However, some points of feedback: * Your initial docs dismisses PHPUnit as ridiculous, which is probably overblown. Remember that your potential userbase probably use PHPUnit already, and it is ideal if you can respect people's software choices * If you want to see your test system go into use, then you'll need to create a comprehensive unit/integration test suite - and right now I don't think you have any tests. PHPUnit has a fairly substantial set of tests, and I expect Codeception does too.
Javascript uses prototypal inheritance, 'nuff said On a serious note, I'm quite used to languages like C++/PHP with "complete" OOP features but when I use JS I don't usually miss them, mostly because I don't need them or there's another way to do it.
&gt; The fact remains that many people do very successfully use JS People use wordpress as well very successfully and it's very bad coded. Functions just only live in the global scope. &gt; Out of curiosity, what other languages do you know outside PHP and JS? Dart, C# and Bash
&gt; I would not call JS broken, it is just different. In my books this is broken (just one of 50 things): ``` $var = null; if (typeof $var == 'object') { console.log('NULL is an object in JS'); } ``` &gt; If you know how prototype oriented paradigm should work what usage would be here for classes then other than making it look similar to what you was used to? Thats true but an other concept should not introduce new problems. Class based should be standard if a other concept comes around the corner then it should have some nice new behaviors to solve common problems. &gt; It is good example of not very nice fix to problem that does not exists in prototype oriented languages. Even in JS you have a global scope and it can only hold one Library.
&gt; Why do we use PHP and not Java? After all, Java has a lot of language features like generics and other goodies that PHP doesn't. Very good point! I refused Java in the web because it felt not home there. But `Generics` are a huge plus! My second most used lagnuage is Dart. I hope it will evolve into the backend some day. But back to Java. If you want to get a Java web app running then you need a lot of tools and a big server with performance. That is the reason why I dont like Java in the web. But thats just preference!
&gt; they discuss mostly useless features like JIT compiler or syntax sugar like fat arrow functions, the latter not being implemented properly. But miss those features which would really help to write better code. I can only upvote you one time!
TypeScript has nothing to do with OOP, and JS isn't "missing" anything as it pertains to OOP. The root of your problem is really simple: you haven't yet learned that class-based OOP is not what OOP is. It's one (of many) forms that happens to be the most common/popular. So, since your brain is stuck on "class-based OOP is the only OOP", you are looking at JS, which is decidedly **not** class-based and think it is missing things, when in fact, what's actually missing things is your grasp of OOP. Sorry to be blunt, but you seem quite adamant arguing about this topic with other people here, but seem very ignorant about it, which is a dangerous combination.
&gt; So, since your brain is stuck on "class-based OOP is the only OOP", you are looking at JS, which is decidedly &gt; not &gt; class-based and think it is missing things, when in fact, what's actually missing things is your grasp of OOP. Not true. The language `go` is as well not class based but gives you other tools to manage your code. I don't see that in node/js.
Agreed that he likely wasn't a senior dev, but couldn't disagree more with your take on what separates an intermediate/senior, or your hostile/immature interviewing style. #3 doesn't belong on the list at all. Knowing or not knowing about static analysis is completely orthogonal to dev experience (as are any other code quality tools/practices). A solid "nice to have" at any level, though. #2 is undebatably intermediate knowledge. Any mid-level dev who doesn't know how to write a test and still got hired by you got away with murder. That said, I don't expect mid-level devs to fully understand how to write particularly testable code and factor that into their designs - that's senior knowledge. #1 is nice, but not necessary. Design patterns exist to give names to the things we already do. I wouldn't fault a senior dev for not knowing arbitrary specific patterns by name, though I would expect to see a variety of useful patterns in code they write, whether they knew it or not. One interesting thing also, is that I see lots of mid-level devs who use patterns just to use patterns. So you could say ability to discern when patterns are useful and when they aren't is a good senior indicator. #4 is a bad rule of thumb. Composition and inheritance should both be used where they're right for the job. I don't think it's fair to say that composition should be chosen "a vast majority of the time", because it depends entirely on the code you're writing. As far as knowing what composition _is_, well that's solid mid-level knowledge, and same with knowing what inheritance is. Knowing when to use either and why would be a good upper-mid to senior indicator, though. As far as your interviewing style goes, you'll want to handle those situations with more professionalism.
 **https://terryl.in**
There are also plenty of people who use languages that are oop capable that use it in a procedural way. I personally like oop programming but having come from VB6 I see the procedural method as functional as well. Much of my code is mixed.
 Why? If you have no intention of using it, it’s not useful to have around. OOP doesn’t work well with parallel systems; even in languages that support OOP fulling you’re seeing people use more data driven approaches because they are thread safe, and parallelize better. If you want a server that can be scaled easier and run cheaper, node has the tools you need, and less of the ones you don’t. Pair that wth being able to share code with the front end, and you’ve got a great combination.
time is not a reliable metric, the one i asked just used that as an example, a guy that was 13years in the company, that didn't learn anything.
&gt; I'll be happy to eat crow
Your points are generally true, though the php-fpm pattern offers a few additional benefits: &amp;#x200B; 1. Easier for front facing http tier to segment traffic. Right now you route all requests to the same monolith, which is fine. Some day you may decide certain machine types are more effective for certain endpoints (eg. highmem for image processing, preempt-able for certain batch jobs) 2. Similarly, allows for better scaling of actual application tiers. http using too many tcp sockets, but bw, cpu, and mem are fine? Possibly switch them out for a greater number of smaller instances without impacting worker machines. Understanding the exact system impact that a service has is much easier when they are on different processes, or even better if in different containers/vms/whatever. 3. System upgrades become potentially less fragile. It is easier to isolate an nginx or apache upgrade without changing php versions, or upgrade php without making other changes. Yes, you could absolutely roll your own packages or pin absolute versions in a full on monolith, but it is just easier to think about one thing at a time. &amp;#x200B; If you followed the pattern of LB --&gt; http server --&gt; php server, it would allow you to quickly and easily scale any given layer without much additional complexity. And nginx doesn't exactly have high requirements, so you could easily have two very small instances at that layer and have a good first step in decreasing risk of outages.
&gt; There should be a 1:1 ratio between an apache request and a PHP request. I.e. if an individual server processes 100 requests a second, then there needs to be 100 PHP processes available to serve those That's assuming that your requests take 1 second each. Don't forget that each helper is in its own process, so there is also a tradeoff here, where there is a point where your CPU can no longer do all the helpers at the same time and more helpers is going to just be higher load and worse performance. That's one practical tip I learned the hard way.
They are declared static.
Yeah it’s quite funny isn’t it? There are such developers who think PHP is a terrible language and their alternative is Node, such hypocrites if you ask me.
I don't know if it will matter much. You can read all the articles out there but it seems like fpm is trending these days. You might wanna switch to Nginx too, it's more lightweight. Regardless, db calls are usually the bottleneck.
You don't see it because you're looking for very specific things (like interfaces) that are not compatible with the language at a fundamental level.
Stop using facades. Fuck stop using laravel. I mean I appreciate the framework but WAY WAY TO MUCH MAGIC
One morw benefit with php-fpm is buffering of request/response. With mod-php whole php process is blocked while large req/resp are send between server and client. With php-fpm php process is used only while actual php works is done and apache lightweight processes can take care of transmission. It does not have much benefit for usual small api calls but if you serve large datasets too it can help.
The documentation is so lacking that I'm not sure what this is supposed to do.
Well done! Personally, though, I remember when I first learned abstraction it was very difficult for me to understand it with relatively abstract examples. I’m bot going to create shapes all day, personally I would prefer something closer to day-to-day, but otherwise good job explaining everything.
Thanks, that was my assumption and good to confirm. Data sizes are not too large but the API serves a lot of slow clients that can take a long time to upload data and receive responses. It sounds like this could be a big benefit moving to PHP fpm.
First of all thank you. In my opinion abstraction is not the type of thing you should use every day. You should know real world examples and you will remember when you need it. But I'll keep in mind your suggestion to come up to examples which are more useful.
If you’re already behind a load balancer, try adding one PHP-FPM server to the mix and compare it against the other servers.
Apache is too if you don't load every module into it. There's a 1-2 ms difference with static files in Nginx vs Apache + Event MPM. When an API takes 50x longer than that to serve a request, go with whichever frontend server you're comfortable with and know how to configure correctly.
The main drawback to php-fpm in your scenario is that - with Apache + modPHP the apache process contains and holds the PHP process as a child; with php-fpm it’s a separate configurable process with its own pool, so it’s more flexible. Basically all you’re using the web server for is a proxy to the php process, so every apache process that starts up has a lot of useless functionality wasting memory. If you switch to nginx &amp; php-fpm performance will go up and/or resource utilization will go down - in general, just because nginx is much less of a resource hog. If you split web and php onto separate machines, as others have said, it will give you more scalability options. As someone who was in your shoes a few years ago, I was super nervous to try something other than apache - but once I got an nginx- phpfpm rig going I never looked back and wondered how I ever got along with apache. Another option is lighttpd.
The philosophy page of the docs for this says "[Do not communicate by sharing memory; instead, share memory by communicating.](https://www.php.net/manual/en/philosophy.parallel.php)", and that as communication between threads takes the form of passing by value, "It means the programmer does not need to consider that threads may be manipulating data concurrently, because that is not possible. " But I'm not sure what happens if a reference to an object is passed between threads, or if it's even possible to send a reference. Send is documented as public parallel\Channel::send ( mixed $value ) : void which would suggest we can send references. Having sent a reference to an object through a channel, wouldn't both threads be able to concurrently manipulate the data of that object, and anything reachable from it?
Also do you thought about using nginx instead of apache? Ye got abot 30% performance boost from switch to nginx.
In JavaScript, types usually solve nothing. The idea is it reduces bugs but in fact it won't until you have bad developers who actually rely 100% on types.
That's definitely something I'm looking at longer term also, just wanting to minimise the amount of changes at the same time.
Have you tried visiting https://github.com/localheinz/composer-normalize? Perhaps I should copy some of the documentation from there.
&gt; This begs the question: why are you using PHP and not Java, C++ or Haskell? Just my opinion: Java: Not that good suitable for the web. You need Tomcat and a server which can handle it for you. The Libraries for the web are very limited in Java, too small comunity when it comes to web. C++: Too low level to be productive. Haskell: It is missing too much features.
For me new PHP stuff became just too overwhelming. Because for last 6-7 years I am mostly frontend developer, but for all of my personal or freelance project I was telling on PHP. So I had to learn best of both PHP and JS worlds. Both changing so rapidly that I decided to switch to node/typescript/express in the end. And concentrate just on one language. I know that putting all eggs in one basket is bad, but, with JS I can do desktop apps, mobile apps, frontend, backend and language is continuing to progress and improve because of high usage in the world.
 When I read that, I naturally assumed it must be because you managed to find an SQL vulnerability somewhere, and destroyed the online demo or similar. Doesn't seem like it though...
STACKOVERFLOW.COM
I don't know much about FETCH CLASS but cellPhone is camel case, might have something to do with it? Try changing to lower case. Also, in your code sample getUsername() is returning the email property, that might be confusing some of your results.
 &gt;Also, in your code sample getUsername() is returning the email property, that might be confusing some of your results. Hah thanks. That was just an error with typing.
Would suggest to try Kotlin and Vert.x or Ktor. It's pretty easy to get going and Kotlin is a beautiful language natively supported with IntelliJ.
You should also look into Kotlin. It's magnificent.
The only real answer to this question is ... _it depends._ And while it's an unsatisfactory answer, it's also the only real answer we can give you without knowing a little more about your current implementation. For example: - The API, is it static or dynamic? - Is it dependent on a database that PHP talks to? - Is there any authentication that needs to be done before serving data? I was in a similar position back in the days, where I had a Laravel-driven website that also served a JSON API, and I spent a long time trying to optimize the response time for the API. After a while of testing various things, I realized that since the API was rather static (same url =&gt; same response), I was able to cache a great deal of my responses, which eventually led me to a solution where I used Nginx as the server, had a php_fpm serving the data and storing everything in a memcache server for 8 hours to lessen the PHP and database load.
You say you don’t have any static assets for caching. Your responses are static assets. I’m not entirely sure how your api works, but implementing a caching solution for your request responses could reduce load quite a lot. I know varnish can do this as well
Possibly it's something with the case. Try making your `cellPhone` property `cell_phone` instead, and do the same in the database, then try and see if it fetches it correctly.
Not sure but it could be because username and cellPhone are private?
Sorry didn't read that username dumps a value. My bad
Nani the fuck.
PHP works with established web servers like Nginx also as most languages used these days mainly for web dev, it also has a built-in server. If you want to build a web server with GHC Ehich will use PHP FPM than that is indeed a pretty futile exercise. Unless you use microservers or binding different libraries in a huge app I don't see a good reason to try to mix those languages together.
Love it :)
This was it. No freaking clue why. I even have other attributes that are camel case and they are returning, and some are still null that are all lower case. The ones I need are working now though. What a bizarre situation. Thanks for the idea
So strange this subject is coming up as I just had to deal some weird ephemeral port issues on a Windows server I'm forced to use to host Apache/PHP (was running it with php-fpm - still using a similar setup but a different approach). Everything after that last statement gets more and more irrelevant to this question. Just thought the subject coming up was a weird coincidence.
Those benchmarks you see with Apache vs nginx are pretty much obsolete these days. Apache's prefork and worker MPMs are apples to oranges with nginx. However, of you configure Apache with Event MPM, that is a similar setup with Nginx and you won't see any different noteworthy.
With Apache and mod-php (which uses prefork), your server has to spawn a process for each request. With Mom event + php-fpm, you already have a pool of PHP processes, and each request will be a thread handed over to a php-fpm process. You can configure php-fpm to kill the process after a certain amount of requests are served, and there are various aspects available to tune it up. If you have 100 concurrent requests, with mod-php, it's guaranteed to have at least 100 Apache processes (each which carry the whole php interpreter). With event + php-fpm, you have a pool of Apache processes, and a pool of php-fpm processes, all of which use threads to spread the load over.
&gt;cyclomatic or cognitive complexity ouch. i'd give a blank stare too. were you trying to put him in his place because the guy was pompous, or do you actually think all senior programmers should be deeply familiar with recent code metric trends? because i'm thinking a lot of really good developers out there - especially web/mvc/api developers - don't run analysis.
&gt;cyclomatic or cognitive complexity ouch. i'd give a blank stare too. were you trying to put him in his place because the guy was pompous, or do you actually think all senior programmers should be deeply familiar with recent code metric trends? because i'm thinking a lot of really good developers out there - especially web/mvc/api developers - don't run analysis.
Yes, it is a multi-step form. The data itself I suppose is not that large, just strings of text or float types for currency and integers for other fields that require only numeric values. It will vary how large the storage will be depending on if the user is posting only 2 lines vs. preparing hundreds before posting to the database. I likely will put a cap and require a text file upload down the road for larger entries and to remove user burden. The indexeddb approach sounds interesting (mentioned my another user), but may not be necessary. Currently I am smart coding the key fields, but my I initial hope was to use arrays. Session storage in JavaScript only supports string values from what I can tell. When I say smart coding, I mean leading all fields for a specific record with a matching numeric character followed by a 3 alpha character string within the string to signify the field. For example (e.g., 1acc, and 1amt for record 1 account and record 1 amount respectively). This smart coding approach seems to work, but seems unnecessarily messy.
Thank you for the indexeddb suggestion! It seems like it may be more burden than benefit for me after doing some research, but I will keep this approach in mind.
Even if every request is a php request, without static assets, you could still benefit from an Nginx proxy in front of PHP-FPM. Utilizing micro caching will reduce the need to run PHP at all if the request answer is already known, saving both compute and memory. Apache with mod-php is going load a PHP library (read: more memory) for every request, even if you get microcaching setup. &gt; with Mod PHP the apache process still has PHP loaded in memory, doing nothing until it's ready to serve the request which is a bit wasteful Not necessarily. Whatever is answering your requests, you want active workers on standby. It takes time to start them up in order to answer a request. You won't notice it with low traffic, but you will at scale. &gt; especially with slow clients that take a long time to post data Ideally, post data should be routed to servers/services dedicated to that operation. That way, a surge of uploaders doesn't interrupt get requests, and you can scale more efficiently. If you're on AWS, create a target group and route to those servers. &gt; if apache waits for a process to become available, the client just sees the server slow down which is a lot better. Your ability to answer requests is based on your resources. In general terms, when your CPU is maxed and but you have memory left, your customers wait. When you're out of memory, and therefore the ability to fire up new workers, you can't return a request at all, regardless of the configuration.
It just can't be. You probably had a typo of some sort, that you inadvertently fixed when mingled with your code. Here is how such questions have to be asked: [How to create MCVE for a PDO related problem](https://phpdelusions.net/pdo/mcve). A Minimal, Complete and Verifiable Example is essential for this kind of programming questions in general, and luckily we have an example specifically for PDO. So let me do it for you. $pdo-&gt;query("CREATE temporary TABLE players_mcve (id int, cellPhone varchar(255))"); $pdo-&gt;query("INSERT INTO players_mcve (id, cellPhone) VALUES (1,'foo')"); class Player{ private $cellPhone; public function getCellPhone(){ return $this-&gt;cellPhone; } } $id =1; $query = "SELECT * FROM players_mcve WHERE id = :id"; $stmt = $pdo-&gt;prepare($query); $stmt-&gt;bindParam(":id", $id); $stmt-&gt;execute(); $stmt-&gt;setFetchMode(PDO::FETCH_CLASS, 'Player'); $object = $stmt-&gt;fetch(); var_dump($object, $object-&gt;getCellPhone()); For me it returns object(Player)#3 (2) { ["cellPhone":"Player":private]=&gt; string(3) "foo" ["id"]=&gt; int(1) } string(3) "foo" which is quite expected. So as you can see, there is not a single problem with camel case, which means your problem is elsewhere.
&gt; I've having a tough issue to debug. The most interesting part about creating an MCVE, it helps with debugging **enormously*, thanks for "M". Removing all noise from the example is essential. Your goal is to prove the hypothesis (some properties return null instead of a value) - so you deliberately cut off all other possible issues, leaving only the character case.
What does "greater than" mean?
BTW, you can reduce your PDO code by two lines $query = "SELECT * FROM players_mcve WHERE id = :id"; $stmt = $this-&gt;dbConn-&gt;prepare($query); $stmt-&gt;execute([":id" =&gt; $id]); $object = $stmt-&gt;fetchObject('Player'); also, as I always recommend it, creating a helper function to perform a prepared query with PDO will help to remove all the unnecessary repetitions, now making your code *three times shorter*. $query = "SELECT * FROM players_mcve WHERE id = :id"; return $this-&gt;dbConn-&gt;run($query,[":id" =&gt; $id])-&gt;fetchObject('Player');
&gt; not compatible with the language at a fundamental level. That's incorrect. You mean there's no keywords or AST interpretation to enable it. Could be added, but typescript did it instead as a metalanguage. Totally compatible.
We benchmarked small projects in PHP and Python to support the idea that there's a right tool for the job idea. After a year of effort, php consistently took up more memory and was faster. Feel free to write something non-trivial (over 1000 lines of logic) and test yourself. There's probably rare cases where Python outperforms, but I have never seen it in the wild.
"the way to go" should be defined here. Easiest to write? Easiest to maintain? Cheapest to hire for? Lowest cognitive effort? Throwing out a claim is aggravatingly avoiding the underlying question, what does that mean?
This sounds impossible and I would recommend not to shrug off the issue just because some fields you need to work on right now get fixed. Can we ask you to create an MCVE? Here is [How to create MCVE for a PDO related problem](https://phpdelusions.net/pdo/mcve). Say if you create a code like this, would it still reproduce the problem? $pdo-&gt;query("CREATE temporary TABLE players_mcve (id int, cellPhone varchar(255))"); $pdo-&gt;query("INSERT INTO players_mcve (id, cellPhone) VALUES (1,'foo')"); class Player{ private $cellPhone; public function getCellPhone(){ return $this-&gt;cellPhone; } } $id =1; $query = "SELECT * FROM players_mcve WHERE id = :id"; $stmt = $pdo-&gt;prepare($query); $stmt-&gt;bindParam(":id", $id); $stmt-&gt;execute(); $stmt-&gt;setFetchMode(PDO::FETCH_CLASS, 'Player'); $object = $stmt-&gt;fetch(); var_dump($object, $object-&gt;getCellPhone());
Javascript has a superior async model, which has niche utility. Javascript code can be duplicated across front and backend, which has niche utility. Hiring developers with multiple skills results in an imbalanced/inconsistent distribution of skills and costs, outside the typical team lead - team member merit hierarchy. Hiring developers with 1 skillset is easier, cheaper, and more reliable labor. That's why. There was a small effort to track language design decisions in [Quorum](https://quorumlanguage.com/). Sadly, it was never properly pursued or appreciated. Everyone rather argue about things other than advancing the science.
References are severed by copy-by-value semantics.
A namespace is an abstract container providing context for items it holds, ensuring uniqueness of items having the same name. &gt; no way to use two conflicting versions of same dependency because class names would be in conflict. Calling the same dependency something else, or assigning a different namespace to each, would be sufficient. The differences in Prototype vs Classical OOP are not so evident that anyone could create a trivial case against either. The preferences are a result of seeing the differences at larger scales. Maintenance of prototypical chains at scale is harder because tracking things without names gets tricky (everyone seems to default to using the filesystem or ad-hoc labels) and the inconsistency between implementation of scoping (re lua's [diverse ways](http://lua-users.org/wiki/ObjectOrientedProgramming) of dealing with scoping), but that's something that nobody has bothered to prove yet.
Thanks for your feedback. You’re right, another proactive can be to inject an instance of AssetManager to the controller, then simple pass this instance to the view as a variable. My perspective has changed.
no there are multiple async php libs which do work exactly like node does it internally...
Thank you, Pol!
wow. \&gt; many dependencies and ridiculous complexity. In the first lines of your example youre configuring a fucking discord bot communication channel and youre talking about zero dependencies and no complexity because its all in one package? LULz I want my testing framework without a discord bot interface kekedikek. No star for you.
toString is not obsolete and is an important feature of many programming languages. Why shouldnt you want to throw a exception there?
If your toString methods reuses the "normal" Code of your application you are going to throw exceptions fast inside this methods. The rfc does explain this very well. I bet there are a ton of real world examples out there. Just search for php and toString on github.
No, this is not impossible - [https://dev.mysql.com/doc/refman/5.5/en/identifier-case-sensitivity.html](https://dev.mysql.com/doc/refman/5.5/en/identifier-case-sensitivity.html)
The best with the gerkin syntax is that you can outsource the tests to a non developer. Thats the big benefit of BDD. Behat will do that without any problems and its really easy to use/extend.
Behat + Gehrkin + Mink and youre ready to test. No codeception integration needed. Just tests.
The easiest way to make sure it is added is to add it yourself :) Hash functions are pretty self-contained, you basically just need to find a (fast) implementation of blake2b and wire it up inside https://github.com/php/php-src/tree/master/ext/hash, following any other the other hashes as an example.
What do you want to sanitize when you going to have raw shell access? Nothing... you want to do all the crazy things....
And this shit "go write unit test" talk... Omg. What do you want to test here? Whether the exec is working correctly? That would be a integration test as well. People have to understand what they are doing and dont work for no benefit at all.
You didn't understand my suggestion and commented with a pointless link. Looks like PHP for you is a voodoo where all you can do is "try" something, just in case. Grow up and learn what a *knowledge* is.
There are a ton of free webspaces without ssh. But exec will always work. After you installed this console there you can work your way up the privilege ladder. Why do the people expect a hacking tool to secure the server? Lol its basicly made for opening a hole to work with. The people here arent thinking a lot before looking on the source code....
😂
After a lot of work and reading , I very managed to create a lots of great email templates! Thanks 😊
This may be supported via OpenSSL or libsodium extensions already.
It is not just the language, it is also the tools. 2-3 years ago, at PHP conference in Serbia, I asked Rasmus about generics. Answer was that it is too complicated and we won't get them soon. OK, I understand. So I decided to try Java or Typescript. The problem; neither of them has a framework that is even remotely close to Symfony. I mean.... docs just for symfony/forms is bigger than docs for entire Spring/NestJs. And I stayed; it is a small price to pay and use @return and @var annotations compared to tons of code I would have to write in Java. It is a bit annoying, but I can live with that. &amp;#x200B; But to be honest, /u/nikic working full time on PHP really brought us some goodies recently; typed properties, arrow functions... I fucking **love** them! I wouldn't be surprised if we get typed arrays soon (like for variadics), they would make lots of us happy.
openssl does not support it in a satisfactory way, you can't use openssl\_digest() on bigger files because all the data to hash must be in memory (in a php string - lest you want to exploit a length extension attack, but blake2b isn't vulnerable to that in the first place), but if hash() supported it then so would hash\_file() - .. and while it seems i could use a fread()+sodium\_crypto\_generichash\_update() -loop, .. hmm, just being able to \`hash\_file("blake2b","file")\` would be much easier, and probably faster (as the loop would be in C, not userland-php)
Huh, wasn't aware of [localheinz/composer-normalize](https://packagist.org/packages/localheinz/composer-normalize) package previously. This comes at an opportune time, as I was just agonizing a bit over composer.json normalization in one project. Let's see if I can implement this in couple build systems. Don't be surprised if there is a bit of an uptick in daily download counts for the package.
It was intended as a provocative personal opinion. I think prototypes are better than classes
what does runtime type checking have to do with OOP? I want runtime type checking, but that's a totally separate thing.
❤️
Why do you use php while there are other other oop langages who had interfaces, namespaces and annotations for much longer ?
Ok, so it does a deep clone of the object? Do you know if that's documented anywhere?
&gt; what does runtime type checking have to do with OOP? Then call it lagnuage features...
there's nothing inherent to OOP about that.
Ah, right - why is that? I am curious. The [docs recommend test classes are instances](https://phpunit.readthedocs.io/en/8.1/writing-tests-for-phpunit.html).
Use Typescript on top of Node (and maybe Nest.js), problem solved.
The sodium extension already has support for BLAKE2b: [https://paragonie.com/book/pecl-libsodium/read/06-hashing.md#crypto-generichash](https://paragonie.com/book/pecl-libsodium/read/06-hashing.md#crypto-generichash) [https://download.libsodium.org/doc/hashing/generic\_hashing](https://download.libsodium.org/doc/hashing/generic_hashing) &amp;#x200B; Generally ext-sodium should be available (or at least easy to install) with php7.2. [https://pecl.php.net/package/libsodium](https://pecl.php.net/package/libsodium) &lt;-- its also available from PECL for PHP 7.0.\* and 7.1.\* &amp;#x200B; Enjoy!
Whats up devvittors, &amp;#x200B; I was asked for a job, which mostly requires the usage of PHP, Laravel and E-Commerce related. I have some experience, but I'm definitly not an expert. Currently, most projects required Java, C# or Python. My assumption is that most people on here may have quite extensive knowledge on this subject. My question to you all: \-What kind of resources do think is is the best for learning php ? \-Any books you highly recommend? \-Any Websites you highly recommend? ( I've looked at treehouse, but it's a bit hit or miss in my opnion) \-Any subject matters you can advise me to look into? ( Design philosphies / principles, Development process, libraries / frameworks etc) &amp;#x200B; I've googled around, but the subject matter is quite dated. Hope y'all can help me out :)
Don't really see the point when the actual code is under 200 lines and only really consists of a fairly simple wrapper over Php League's CSV package. Might as well just write it yourself tbh.
Whats up devvittors, &amp;#x200B; I was asked for a job, which mostly requires the usage of PHP, Laravel and E-Commerce related. I have some experience, but I'm definitly not an expert. Currently, most projects required Java, C# or Python. My assumption is that most people on here may have quite extensive knowledge on this subject. My question to you all: \-What kind of resources do think is is the best for learning php ? \-Any books you highly recommend? \-Any Websites you highly recommend? ( I've looked at treehouse, but it's a bit hit or miss in my opnion) \-Any subject matters you can advise me to look into? ( Design philosphies / principles, Development process, libraries / frameworks etc) &amp;#x200B; I've googled around, but the subject matter is quite dated. Hope y'all can help me out :)
https://phptherightway.com/ This is one of the best resources you can look at.
Version control of IntelliJ IDEs is just simply top of the line, no text editor with any extension can do as well as them. You are also free of mind of thinking about doing install plugins from time to time as they come out of the box for most of the requirements.
Sublime for speed coding, PHPStorm for full project development. I think you don't need anything in the middle.
&gt; JavaScript has the absolutely best asynchronous design pattern then any other language LOL, maybe if you come from languages where concurrency has been bolted on like PHP, Python, etc, but when you are used to Golang, Elixir/Erlang, etc JS is a poor second.
You're lucky they're willing to take on such a greenfield person. Definitely don't go in with a cocky attitude.
(How to articulate the difference between asynchronous and parallel programming?)[https://stackoverflow.com/questions/6133574/how-to-articulate-the-difference-between-asynchronous-and-parallel-programming#6133756]
Better how?
Problem solved on compile time. Not problem solved on runtime.
Yes I know then call it language features/tools...
If you're doing e-commerce then do not do any credit card stuff on server, not even in memory. Move user to payment provider with templates or via popovers like Strip. Taking credit cards even if just in memory to hit payment provider API will make you more of a target. Let your payment provider handle all the PCI compliance. Most payment providers give several ways of handling things.
Clout. His name takes up half the headline.
Thanks for the prebuilt docker image!
So... where's the todo list?
You need to prepare an RFC and not a big report.
The laughter has nothing to do with parallel programming. Concurrency (or asynchronous as you want to call it) is a far more pleasant well designed experience in those languages than it is in JS. To take one example, that the JS concurrency model is bad for things like CPU intensive tasks is down to its limited design, a combination of it using cooperative scheduling, being single core, etc. Where as with something like Erlang for example it uses pre-emptive scheduling, scales to multiple cores, etc, so it is actually less work, less complexity to handle a CPU intensive task alongside your non-blocking IO tasks in Erlang than it is in Node/JS, and for added fun, also does it in a more fault tolerant way. Concurrency in JS might look nice from PHP, Python, etc, (and even then that is mostly about having the whole ecosystem based on it, rather than being bolted on), but coming from Erlang, Elixir, Scala, Golang, Clojure, etc it is a poor second. Also in regard to things like shared memory, safe data structures, etc, those are more reasons why some of those languages are so good for concurrency (and parallel programming), because of things like being a language based on immutable state or having isolated processes ("green threads") that so not share memory (handle their own GC), but only communicate through message passing (the Actor model).
the bugtracker also has a "feature request" option, see [https://i.imgur.com/DbGdUtx.png](https://i.imgur.com/DbGdUtx.png)
Let me reword it: there’s a very slim chance of getting anything into core without RFC :)
Because that is where it belongs. It should be seen as userland extensions, and used as such.
The link above is no longer valid the new one: [https://symplely.github.io/coroutine/](https://symplely.github.io/coroutine/) now at version 1.0.8
It's just another shit tutorial. Point in fact, SQLite would be a much better tool for this solution.
`$db = $m-&gt;$dbname;` should be just `$db = $m-&gt;dbname;`?
You should start a discussion on the [internals mailing list](https://www.php.net/mailing-lists.php#internals) rather than diving straight into an RFC. As well as gauging how likely an RFC is to succeed, it'll tell you what questions it'll need to answer. Internals is also readable / searchable on [externals.io](https://externals.io/) - you might want to see if you can find previous discussions on hashing algorithms to see what came up and preempt those queries. See also: [PHP Wiki: How to create an RFC](https://wiki.php.net/rfc/howto) (where step #1 is to discuss the proposal on internals first)
I was wondering the approach taken by a project as big as symfony on tests management and didn't see any code coverage metrics used. [Here's Fabien reasons why](https://github.com/symfony/symfony/issues/19957#issuecomment-247785753) I then wonder what's the actual code coverage and results surprised me.
Teaching to use abstract classes for modern day php developers is like teaching to use jQuery to modern day front-end developers.
In my experience, untested code is buggy code. Code coverage _might_ be a vanity metric, but to me it says that there's _at least_ one scenario where things go as planned. If something's not covered by tests, I simply don't have that guarantee.
Respectfully, at the point I'm going to that much effort with a query builder, why wouldn't I just use Doctrine?
Looks interesting, though I wonder if there are a number of libraries that do this already. The best feature here is arguably the fluent interface, but the docs don't make use of this in the examples - I wonder if this could be rectified? If this were to be used by folks in production, they would probably want to see unit tests. You could certainly add them, if you were up for a challenge, but do have a look to see if someone has solved this problem well already. Finally, I agree that SQL formatting is often not ideal. It is not well known that SQL can be prettified very easily in PHP: ``` $sql = " SELECT * FROM `product` p WHERE (p.product_id &gt; 1) AND (p.category_id &gt; 3) ORDER BY p.product_id LIMIT 10, 5 "; ``` This adds a bunch of whitespace into a query, but the SQL engine will ignore that very happily.
Doctrine is great. This query builder is for PHP beginners or people who fear third party libraries. I use Doctrine all the time.
It says [on the main site page](https://blake2.net/) that it is extremely fast. Why is it thought to be more secure if it is fast? I thought that the reason why SHA1 and MD5 are thought to be broken is that they can be computed too quickly.
There are other open source libraries that do way much more than what I have shared. It's a very simple solution for people who want to to try something easy but better. I have used the code in a few of my projects and I believe anyone can edit and use it too. I haven't done any unit tests and I think that would be so much for this. At least for now. And personally I don't think formatting is an issue for me. The SELECT, FROM, INNER JOIN, ORDER BY just make your code look crazy. It's complex to understand what you were even doing if you go through the query
I had the concept that anything that is not written by me, is a third-party lib, no matter how big it is. Also, I would say that it's better for beginners to know how to write a prepared statement from scratch than using a third-party code. Even though, it's nice to have something to show on your GitHub and you should not feel discouraged to maintain or evolve this project with new features. You should consider removing constant as a requirement since I couldn't use it for different databases at the same time. Also, I didn't see a single test. How am I suppose to trust a third-party code just by the developers words that it works? I would be even further and update the code using PHP 7.x features like type-hint and return types. Otherwise it will really seems like something that works with PHP 5.x is trying to show off.
What does this query builder have over Zend? I really like the Zend 2 QB. I hate ORMs, I’d much rather explictly write it out. No black magic, no n+1 gotchas, you know the drill.
I didn't see how you do OR clauses? Also, if it only supports MySQL maybe rename it to MySQLQuery?
So you made a third party library about it?
I thought md5 and sha1 is thought to be broken since there are algorithms found to quickly generate colliding hash-inputs. The study for sha1 is called [Shattered](https://shattered.io/).
Maybe not for beginners, Intermediate I would say. Beginners don't even know what a class and method is. We've all been there. There are also better advanced query builders. The whole point was to help out anyone who faces issues in writing long SQL queries. The table prefix can be left empty if you don't use one. I did no tests that are available for the public. The builder is a few lines of code and anyone can tweak it and test it however they want. If the builder was complex then I would have uploaded the tests too. Thanks anyways
* I have no feeling about either tabs or spacing. I haven't played around with VS Code setting. * You might be right about requirements, but one might not know what's actually not working under them if only. * I'm quite aware of PHPunit 8.0, tests are done under 7.0, 7.1, 7.2, 7.3. and 7.0, have built issues, \`void\`. * Yes, this will pollute the global namespace, it suppose to, this should be used as missing PHP functions/features. I guess you haven't run any of them examples.
I believe that is true, but aren't they also broken because modern CPUs can generate rainbow tables very easily merely with brute force? If that is the case, then I am curious to know why this does not apply to Blake2.
Sorry for that and thanks for noting that.
Is there a `Dockerfile` in that repo? I could not find one. I have a colleague who pointed me to a Laravel Docker project (it may even be the same as yours). He runs his with various changes based on his changing needs ("just tweak this, comment that bit, etc") and the result strikes me as not producing a reproducible environment at all.
Heredoc is an alternative to this, which minimizes the amount of whitespace, at the cost of indentation. It's preference of course. I preferto avoid multiline strings and use heredoc when i must (like SQL queries, etc.).
I don't see a purpose in those 50% solutions. They seem simple and small but the actual added value is lower than that. If I cannot **fully** utilize static analysis to validate the correctness of my SQL query I don't use it at all. The reason being that I would just create handwritten SQL in HeidiSQL and replace literals with parameters for prepared statements. Then copy-paste that into a string literal, ideally `&lt;&lt;&lt;SQL` heredoc. PhpStorm will even show errors in there. The only added value from query builders would be if `php -l` would be sufficient to tell whether my query is (syntactically) correct. That is only possible if it represented the whole SQL grammer in classes and methods. Comparable to what the [Symfony Config](https://symfony.com/doc/current/components/config.html) component accomplishes for PHP arrays and and by extension YAML config files. That would be an outrageous complex task and probably not worth it or at least as a developer you would have wished to use a more expressive language like Haskell or Rust in the end. Doctrine DBAL isn't even close to what I imagine right now and by itself wouldn't provide a lot of added value either. But Eloquent and and Doctrine ORM do even if by other means. So in the real world I end up using either one in 80% of the cases and the remaining 20% with just PDO which is honestly good enough.
By doing side by side testing. PHP was clear winner.
Also, I suspect the benchmarks you may have looked at are from old versions of PHP. Something very common in the Python community. But when you look at PHP 7.2+ it blows most things out of the water. The speed difference is going to vary based on the type of work being done, but in pretty much every case PHP comes out faster and in most by more than double.
Probably a stupid suggestion, but take "let i = 0" outside of the loop, and make it ++i. So: let i = 0; for (i; i &lt; len; ++i) { ... }
no such thing as stupid - because I can't tell you how that affects execution. I'll update code, and actually post time results
Also test it with let i = 0 in the for statement, since thats about scope.
It does almost nothing. It is literally a query builder, or, rather, formatter. It doesn't execute queries, doesn't support parameters, doesn't return the database result. So in the real life you will have to do all this stuff manually and honestly, it means thee is not so much point in using this SQL formatter.
I'd suggest deleting almost all usages of words like *simple*, *easy*, and *straight forward* from the docs. Whether or or not things are genuinely easy and straight forward, these words don't add anything useful, and setting up that expectation make things less pleasant to use if they aren't as easy as you'd like them to be. If something is really simple, you can show that by writing simple instructions for it. You don't need to add the word simple. https://pasteboard.co/Igz2BKZ.png shows all the usages of these words.
actually, taking the `let i = 0` out of the for loop messed up the sorting algorithm :/ sorry, should've tested it first before reporting times
Yeah, after my comment I realized the error of my JS ways.
I think where this makes the most sense is if you need something more malleable for pragmatic table queries. For complex queries I think most people would duck out of this sort of library to spot engineer a solution.
I wrote something very, very similar to this just last week for a project I am working on that is not using any framework. I based mine on my experience with CodeIgniter &amp; Active Record. Kind of fun to see that the design patter of your library resembles mine so closely. We do thing a bit different, but not that different.
Question: does the NodeJS time include startup? In real-life applications the Node process would already be running, so it might not be a fair comparison in that case. I wouldn't be surprised if PHP is faster in this application. NodeJS really shines when it comes concurrent requests and thread blocking I/O operations, database calls, or API calls. It's strong suit definitely isn't raw speed.
That is great
After looking at your class file it looks incomplete? I return a ODBC handle so all the normal ODBC functions can be used. Also missing update, delete, grouping options etc. Is this supposed to be complete or just a start?
The title states selects and joins only. I have a complete version. Visit my github account (link available on my website) under PHP Rest api where I use it
what other languages are you referring? It seems you didn't read the introduction in the [readme.md](https://symplely.github.io/coroutine/), which lays out a few things, and compare packages out there, nor the references. But the end result is not the language but the developer, who bends it to his/her well.
Yeah, your units are all mixed up. In PHP you're erroneously treating `0.000123` as `123` in your reporting, and in JS you're... well, I'm not entirely sure. Just never ever use the non-number format of any timer function. I swapped PHP's `hrtime` and corrected the units, and got ~140µs in PHP and ~60µs in node, fairly consistently. On your machine the numbers will vary. ``` $myArray = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]; $start = hrtime(true); bubbleSort($myArray); $end = hrtime(true); $etNS = $end - $start; echo 'execution time: '. ($etNS). 'ns'; ``` ``` const startTime = process.hrtime.bigint(); bubbleSort(myArray); const endTime = process.hrtime.bigint(); const dur = endTime - startTime; console.log(dur, "ns") ``` It's also kind of dumb to run a sorting benchmark over a list of size twelve, but that's beside the point.
By design pattern you mean a query builder?
Yes - the class I wrote is based on the Active Record pattern. https://en.wikipedia.org/wiki/Active_record_pattern
There's two lines of thought developing in my head right now. 1. if you really want to learn how code might be structured without class-based OOP features, you should go out of your way to learn a language like Clojure, Haskell, Go or even C, and if possible, to build a significant project with it! 2. the wordpress example is a good one, because it demonstrates that however much you or I might not _like_ certain things, success is possible independent of specific language features. Language features can help or hinder, but good development practises (code review, testing, conventions, etc etc...) can make up for having to use even the most feature-poor language.
How would you expect `let` to work? I assume you would expect `const` to be used for actually-immutable data?
Sorry, you made me more confused. I thought Query builder and Active record are different design patterns. And you also said that that you wrote something similar to the OP, but as far as I can see, there is no Active record in their class.
Heredoc is definitely a better option than multiline strings. Also, keeping SQL in a separate file can be useful for IDEs like PHPStorm for code syntax.
I would say there is no difference between heredoc and a quoted string for SQL. Also, PHPStorm highlights SQL in any file.
&gt; quoted string for SQL Honestly, I couldn't remember but I just prefer heredoc over multiline strings. &gt; PHPStorm highlights SQL in any file. Yeah, I am aware of this. Personally, I don't like having mixed syntax, PHP and SQL, in one file if there is large blocks of SQL or a lot of queries. If it's just one or two small queries, I will not bother with the separate file.
 &gt;&gt; I would take the time to go back and fix that. That one thing would make this "framework" 100 times better. Ok, done, and internal autoloader gone. Honestly, not really sure how that much much of a difference, but according to you, it's now 100 times better. Good deal for me! I threw up a packagelist as well, so I guess it cuts out one line during install, and now it's just: composer create-project envrin/apex DRINAME Removed the /lib/ and /tmp/ directories, and renamed /data/ to /storage/. That's as clean and straight forward as I can make the directory structure. The only actual beef I've now heard from this thread (aside from "you're a big dumb stupid head") is using too many static methods, but I'm fine with that. For example, there will never be a request where you need more than one instance of say the template, registry, or message classes, so static methods just makes things cleaner and easier. Of course though, I use standard objects where appropriate, such as managing a user account or transaction.
Yes, "I simply prefer" is the correct wording, as opposed to "definitely a better option".
Thank you for your feedback but, sorry I do not agree. Abstract classes are not legacy. There are several important differences between abstract classes and interfaces and BTW My next video will be on interfaces.
First, thanks for looking over my code, I thought something was wrong and just wanted a second set of eyes. Much appreciated. Second, people are pointing to this blog where some guy uses a horribly implemented bubble-sort to benchmark PHP, Node, and Go, and claim PHP is the slowest language. His array has 12 elements and PHP takes 4 seconds to run, Node and Go are under 2 seconds. I was unsure whether to use PHP's `hrtime` so, I stuck with the `microtime` method. I wanted to get tests in X seconds Y milliseconds, but in PHP I was getting 0 milliseconds everytime, which is why I changed to microseconds.
No, I start the time (on both programs) after methods have been defined and variables set. I was trying to make it as apples to apples as possible to compare raw speed
So, I'm getting PHP to be faster than Node every time...which is what I'm finding interesting. I've updated my code to be exactly what you posted, and these were my results PHP 108,808 ns NJS 381,849 ns
Were you last looking at benchmarks more than 5 years ago? PHP performance has soundly thumped Python since PHP7 which was released 5 years ago. By a large margin.
It could be fifty different things, from hardware to OS to language versions and settings. I don’t know much about Node’s settings, but PHP has stuff like opcode caches and debuggers that could swing the duration by easily an order of magnitude in either direction, not to mention the performance differences between versions. Realistically, anything being timed that’s in the sub-millisecond range is probably too small of a benchmark to be meaningful, even with the high-resolution timers.
12 elements is...well...lame. Try 12 million elements.
&gt; Realistically, anything being timed that’s in the sub-millisecond range is probably too small of a benchmark to be meaningful, even with the high-resolution timers. This. You're just measuring noise at this point. Measure how long it takes to run the function a million times or something. One call will vary too much. You might now be running the tests at different processor throttle states/speeds for all you know.
I'm a bit confused, it's documented on the page you quoted ...
PHP is much faster than node IIRC. The work they've done on php7+ is phenomenal.
PHP is much faster than node IIRC. The work they've done on php7+ is phenomenal.
Well PHP 7.3 is supposed to be one of the fastest scripting languages around, so it makes sense that it could be faster than Nodejs. Now I think we're used to seeing NodeJS above PHP in most benchmarks because in a typical web server scenario without I/O limitation (like a page serving a "hello world" or the results of a simple benchmark like this one) NodeJS will be faster because it's a long running process, so it doesn't need to load and bootstrap everything each and everytime a user asks for a page, it already has the code in memory and will just run the relevant bit. In that regard NodeJS should probably be compared to something like Swoole or php-pm.
Maybe I am saying it wrong. Active Record is a design pattern. It is implemented in the CodeIgniter framework which is where I have used it, I think that it is more or less a ORM but to me it is just a query builder. I based my design (calling it a query builder) around what I was used to in CodeIgniter because the project I am working on at the office does not use any frameworks at all (very old school). I implemented the same functions, select, where, join, orderBy and get (select), update, delete etc. I built my solution around ODBC instead of PDO as the main data source I was querying did not like PDO's prepared statements.
They are solving bootstraping issue in 7.4.
Php is generally faster than V8 js. V8 out runs php only in specific scenarios, when JIT has room to optimize for repeating iterations. That optimization however is mostly irrelevant for I/O bound operations as it never have the chance to ramp up.
I thought they were solving pre-loading, so more like cache warming for PHP. Did you mean that by bootstrapping? Or is there something else in the pipeline?
Why would you care about classes and the likes at runtime?
What you have in mind here is the use of (raw) sha1/md5 for *password* hashing, which has entirely different security constraints than the use of hashes for digital signatures. sha3 or blake2b are just as inappropriate to use as (raw!) password hashes as sha1/md5 are, they need to be combined with an appropriate construction (such as PBKDF2) before they may be used in such a context.
In this case you don't need an RFC. Just an implementation PR is sufficient. There's not a lot of design space when it comes to exposing new hash functions.
You uber-programmers! I'm just happy when something actually works.
You'd need to ahve the Node code run a few times so V8 has the chance to properly optimize the hot paths.
Aha, that is the answer I am seeking - thank you!
True, good point. As you say, heredoc has traditionally ruined indentation, but I think that problem was solved in 7.3 or 7.4, with a new heredoc syntax? I wonder if that was just a proposal...
&gt; You're just measuring noise at this point. In the context of meaningfulness, my lab sometimes uses the phrase, "decimal dust."
I guess I've seen the stats from the Python community like you've said. That's good to know!
While I don’t consider them legacy, they can be fully emulated with an interface and a trait. And I keep finding myself using this approach very often lately. It gives you the flexibility to choose just the interface, or one of few possible traits that implement it partially or fully.
Given there are plenty of orms , I don't see the need for this
I have to agree that abstract classes can be replaced with traits and interfaces. But this does not mean that abstract classes will disappear. Both of the ways have their usage and probably their pros and cons also. BTW my next two video will be on Interfaces and traits and they will be much longer than abstract classes.
Which versions of PHP &amp; Node are you using?
Agree. Php 7 especially will optimise after a certain amount of iterations as will go. So a larger test is always more accurate. Although 4 seconds to iterate 12 elements seems like a lot.
Why do you ask?
I know it can be run from the console, haven't seen anything that can be utilized from it though.
Because today, and overall in people mind, PHP remains for the web ! (For batches, for instance, they will be writing then in Python, or whatever, but rarely in PHP...
they just don't know what they're missing :D
See Symfony console, which you've definitely used if you've ever played with Laravel.
Yes, I agree...
I guess most non-web scripts in PHP is cron scripts to maintain a website or doing batch jobs for a webbased system.
Can you drive a nail with a shoe? Sure you can, but why not use a hammer?
What is "batches"?
Yes. That's why there is no command line version.
Don't even need Symfony
It can by quite handy dor cli scripting of your script works with db
Unless you really are profiling at the moment, this data is usually not necessary every time and as you said, it is hard to relate the test duration to the actual duration of code in your production environment. Even if you have the test duration over a long period of time, changes in the duration of a test don't have any direct relationship to production. &amp;#x200B; I would recommend to monitor endpoint performance in production over a long period of time, and based on this data decide which endpoints you need to profile, because they are slower than you would expect or want them to be. Lets say some endpoint changes from 200ms to 500ms over a few weeks, that is certainly cause for concern, but you wouldn't know from profiling the tests. &amp;#x200B; Then if you have identified an endpoint, you can run its controller or main service logic in a test and start a Profiler if that test method is invoked. But even then its probably better to just run the Profiler on the actual endpoint. &amp;#x200B; Benchmarks and PRofiling in tests makes only sense in my opinion for CPU-bound code that is very performance sensitive. Like a complex algorithm. But PHPBench is probably the better solution for this than phpunit: [https://github.com/phpbench/phpbench](https://github.com/phpbench/phpbench)
TypeScript is a different language from JS, and has the benefit of not needing to care about what happens at runtime, because it's a purely transpiled language. So, no - I legitimately meant that it's fundamentally incompatible with JS. In order for JS to have meaningful and useful interfaces, a great deal about the language would need to change first.
There is a command line version.
Or well, not a special command line version, but packages to install it as a command line utility. PHP itself works the same if executed from command line or web.
I haven't considered PHP a "web language" for a long time. Is its primary use case for web applications? Sure, but that's certainly not all it's useful for. I regularly use it for shell scripts. While I can and do use Bash script for many scripts, more complex scripts, particularly if I want to do things such as use a database or use image libraries, are (in my opinion) simpler in PHP. While they're part of web-based systems, I also use PHP for long running (queue-based) workers as well as crons and command line developer tools. I think there will always be things it's not (or less) suited for - I can't see myself ever writing graphical applications with it for example (because, even with its speed increases, the library and community / documentation support just isn't there and probably never will be). Even with its advances, don't just use PHP. Go out and learn other languages and (possibly more significantly) paradigms. Learn Go, Python and server-side JS. But also learn Haskell and Erlang. Even if you don't use them in your day-to-day job, you'll learn alternative ways of doing things you can take back / adapt to your day-to-day development.
People absolutely measure things computers do in micro-seconds `us` and nano-seconds. It's not the majority of computer science, but it happens.
Not sure what you mean
Yeah I would mainly like a performance view into the tests when running with PHPUnit, to see if there are any test cases that could be optimized to run faster in terms of adjusting how the test case is written. Getting some insights into the actual code performance behind the test would be nice as well, but not crucial. PHPBench looks quite useful, will check it out. Thanks! :)
PHP has a built in CLI
Gotcha, yes it does, and it comes with some basic IO stuff too. I actually use it all the time because my PHP is stronger than my bash so, unpopular as it sounds, I'm often more productive haha
Thanks for the reminder. I'm actually extremely humbled that they would offer me a position in the first place, so I think that will be the least of my worries. It's basically a support role, but I don't mind it at all :)
Thanks so much, only took a quick glance for now, but it is looking really good!
Thanks for the heads-up. I'll look into it. From what I've understood, they use(d) Magento a lot.
I'd say that the core difference is: A junior developer can solve problems with help. A middle developer can solve problems independently. A senior developer can solve problems independently and optimally (knows the best solution to a problem). Of course, there are other notable differences as well. I think code quality increases a lot between junior and middle, but architectural skills develop properly during senior years (it's at that time you can truly say that you deeply understand the systems you work with).
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
They won't disappear for B.C. reasons, but no one said they'll disappear. Their use cases have just dangerously dwindled thanks to traits. Say, give me an example where abstract class is the right solution, and interface + trait would be the wrong one.
I think you forgot a `/s`
Coverage is no indication of how well the tests have been written. If you run all the code with minimal assertions or don't test the same code with multiple scenarios it's a weak test suite. Also testing the same function or method within a class is not represented in coverage.
I've been working for years with CLI scripts that run for a few hours process GB of xml files and generate video files... So yeah, it's definitely not only a web language.
While quickly clicking through the results, it seems like you've had a number of skipped tests due to missing dependencies (memcached, libsodium, ...). This will have some impact on code coverage results.
Clickbait title referring to typed properties. There is still a lot of use for getters and setters.
Great insight, seems a good approach. Thanks
I'm not sure which part of the page you mean. I see it it says that " When parallel passes a variable from one thread to another ... it is passed by value", but that doesn't make it clear to me that objects will be deep cloned. As I understand it all function calls are pass by value in PHP, unless there is an `&amp;` before the parameter name on the receiving side. But since PHP 5 that value can still be a reference to an object, or as the PHP docs term it an [object identifier](https://www.php.net/manual/en/language.oop5.references.php). If you pass an object identifier foo to an object bar which assigns it to one of its fields then you end up sharing a reference to foo with bar.
You're right indeed, that's important to notice. &amp;#x200B; Although, I'm not the one providing these results, [@jpauli](https://twitter.com/julienpauli) is.
Before you add a profiler, --log-junit /tmp/foo.xml output already contains the time each suite and test ran in total. So that is more than enough to optimize individual test runs.
The "Global name collisions" is a bit of a stretch.
Node is 11.12.0 PHP 7.3.3
A batch script is a postponed or scheduled job that the system does in the background without under interaction. Often also referred to as night jobs, when they are scheduled for the night hours to have data processed or updated before the next working day.
The rest of that paragraph, which I won't quote here ... but it explains pretty precisely how buffering works.
I do all of my CLI scripting in PHP. Including interactive scripts that ask questions along the way, etc. It's the best.
PHP would be one of the best hammers for a nail.
Either missing /s or not aware that PHP IS a CLI program.
&gt;What is "batches"? I assume he's referring to batch scripts in a Windows environment, basically BASH for anyone in the UNIX world.
Yes, PHP is a great hammer, but you don't use it to nail screws. Also: Name checks out.
Why?
It also is a great screw driver for screws. Clearly you don't know anything about PHP. If only people would educate themselves better.
They probably also won't mention that Python 3 is slower than Python 2. Of course speed is not everything and it's not a big deal that it's slower. No amount of speed makes up for the Machine Learning libraries available for Python that PHP completely lacks. But I had a Python user try to tell me that PHP is only for Wordpress recently. I have nothing against Python, just getting fed up with so much PHP misinformation coming from that community.
Thank you. For some reason we call it cron jobs. I don't see what is specific about such "batch jobs". If I can write it in bash, I would rather write in bash. If I need some more advanced scripting, I would use PHP. If someone knows Python, I don't see why should they prefer PHP. So I still don't get the point. I can't imagine a use case when someone having some PHP knowledge and knowing no other languages, would decide to learn Python just to write a console utility. Is it really a case?
Yes, I might be a little jonnyclueless about PHP.
Well, if the system itself is built in PHP, you can apply the same business rules code/classes as in the web page by just include that code and run it.
Why does this segfault and not run out of memory first?
And by extension, cron scripts and queue workers managed by supervisord.
``` $&gt; php test.php Segmentation fault (core dumped) ``` WHY?!
Just run this to get a nice segfault: ``` &lt;?php $boop = array(); while ( 42 != null ) { $boop = array($boop, $boop); } ```
So, I've updated (and pushed to gitHub) the code so the arrays now contain 1002 elements, with duplicates. It was pointed out that the V8 engine will optimize some hot paths, and I think I'm seeing this now PHP is taking 220-227 ms to sort the array and the V8 Engine taking 5ms to sort - which is pretty amazing Thanks for all the suggestions and tips - this has been a fairly interesting exercise.
&gt;Although 4 seconds to iterate 12 elements seems like a lot. Agree.
Because practically no-one uses *actual* global variables in that way. It's just not the done thing. Global variables tend to be accessed via a singleton or a static method, both of which are namespaced.
Have you heard of WordPress? Because Wordpress 😄
Why I voted this down: I believe that builders like that are a bad practice because you limit yourself too much. If you know SQL, this is *way* to limited (e.g. you can't even use a derived table). If you don't know SQL (or only the basics), this will only delay you further from learning SQL. If you write an important query with this builder and later needs to add something that isn't possible with the builder, you also have to re-write the entire thing.
I wish I was this naive. I wish I thought this kindly of other developers.
RIP underwear... the first time they see legacy, have to work with and shit their pants.
Oh sure. Use the best example of terrible PHP :|
As I said, it was just a matter of bundling PHP with the Swoole extension. https://github.com/nanovms/ops-examples/tree/master/php/03-http-swoole
&gt; composer create-project envrin/apex DRINAME It really should be: `composer create-project apex DRINAME` &gt; The only actual beef I've now heard from this thread (aside from "you're a big dumb stupid head") is using too many static methods, but I'm fine with that There is a reason that static methods are not liked, look at how laravel facades are treated. You need to look into dependency injection and use that. If you switch from static methods to DI, you will have a better time in this community and your project will do a lot better, especially if you have a robust, secure, good DI system in place. Injecting is better then `Class::staticCallHere()` &gt; For example, there will never be a request where you need more than one instance of say the template, registry, or message classes, so static methods just makes things cleaner and easier. Having those injected into the controller action or what ever you use would be better then me having to call or instantiate them. &gt; I use standard objects where appropriate, such as managing a user account or transaction You should read up on what Object Oriented Programming is. You should also read up on Dependency Injection and use it as opposed to static classes. At the end of the day, you are a junior programmer, not some 15 year bitcoin master programmer of all security and all languages, stop kidding your self - and lying to us. It's becoming more and more obvious which each post and the constant seeking validation from us. You have made some good progress into moving your code from 1999 to 2019 and you have a long ways to go. My advice for you is stop acting like your gods gift (look at your past posts on this framework, people have linked to them) and start acting like some one who wants to learn and better them selves.
Don't compare apples with oranges. Usually it's hard to get really high (&gt;80%) test coverage for frameworks, as you don't want to test PHP's internal functions, or can't easily mock them. For applications, you want to go for 100% line coverage (so every branch is hit at least once), and use mutations to test with unexpected data.
Here's Sebastian's statement about this: [https://github.com/sebastianbergmann/phpunit/issues/1914#issuecomment-148407321](https://github.com/sebastianbergmann/phpunit/issues/1914#issuecomment-148407321)
Unpopular opinion: I wish people would show some more respect for hacky PHP and WordPress. Yeah you're not going to program a self-landing rocket with it, but it's the reason why an enormous population of people are able to be creative and build things online who really don't need to figure out how to use AbstractSingletonFactoryInjectorPattern first There's always going to be a place for chaotic creativity, your mission-critical highly-scalable test-driven business application might not be one of them but that doesn't mean it has no legitimate place We shit on the patterns in WordPress as "terrible" yet nothing else has been more effective at making building dynamic websites accessible to the masses. Yes I know it's not proper PHP and it gives PHP a bad image to the proper lads and ladies, but it's successful and it's effective and I wish we'd lend a little energy to building on that success IN ADDITION to building PHPs capacity for precision systems. We can support both worlds
How would PHP7 optimize? Pretty sure that's only going to come with the JIT and is not implemented yet.
Fair enough, I didn't know it was under discussion `:=)`. A poster above says that he/she declares their tests as static as well. For me, I often use `setUp()` to create values at a test instance level, so they are available for all tests. If the tests are static, one cannot do this.
For anyone who's wondering, jasper is just a library that really shine at creating complex pdf reports and fast. I used mostly for labeling (track&amp;trace stuff) but also for product catalog generation. There's a pretty decent editor (jasper studio). I believe some libraries already exists, but this one avoid system-calls in favor of a bridge approach between java and php environments. I must admit it's not the most WOW library and there's some drawbacks, but it's very useful for a certain type of tasks or projects. Not perfect, but complex pdf from PHP or either chrome/webkit... sometimes just feel wrong to me.
Please try to remain civil here. You don't have to like code offered, but there is no value in you trying to land an emotional injury on other participants.
Correct. Bootstrapping is still on the TODO list, but it's honestly a bit low since preload for code plus apcu for data gets pretty close to first class bootstrapping anyway.
There's no point in publishing if you don't write documentation because no one will use it if you don't.
 &gt;&gt; It really should be: composer create-project apex DRINAME Can't, as packagist requires packages to be in the format "author/package". You're the expert, you should know this. :-) &gt;&gt; You need to look into dependency injection and use that. I know what it is, but will look into it more as obviously I'm missing something here. Will do when I have some time. &gt;&gt; especially if you have a robust, secure, good DI system in place. That I do have, or at least I think so. Definitely a cleaner and more organized dir structure than some of the crap I see out there. &gt;&gt; Having those injected into the controller action or what ever you use would be better then me having to call or instantiate them. Point taken. So instead of having so many "use" statements in every file, have everything necessary sitting in a registry object, which gets passed around to the different classes / methods, correct? &gt;&gt; You should read up on what Object Oriented Programming is. I know what OOP is. If wanted, do a quick install of Apex, then install the users and transaction packages, take a look at the lib files in /src/users/ and /src/transaction/, and you'll find your OOP. &gt;&gt; the constant seeking validation from us. I'm not seeking validation per-se, but looking for feedback and also hopes to gain some interest in the project. It's a little difficult to not take this all with a grain of salt while listening to responses that basically say, "you moronic dipshit, how are you not laying dead in a sewer right now?". Plus things like getting my code slammed and told it's shit because I missed one asterik in one comment block. Don't tell me I haven't learned. Just take a look at it now versus when I started. It's a totally different beast now, and I'm absolutely certain it will continue to quickly evolve. It's just somewhat difficult to get decent feedback when there's so much vitrolic, hate filled monkey poop being thrown around this place, but I guess it is Reddit, so to be expected. &gt;&gt; You have made some good progress into moving your code from 1999 to 2019 Whoa, whoa, back up there. Be careful, that was getting awful close to a compliment. This is Reddit, watch your language dammit! :-)
I might be more interested in sharing ideas than promoting. Maybe others too, at least keep that possibility open ;)
Because code needs to die or throw an error if something wrong happens. If I order an int but I get a string then something is wrong better my code halts. Thats why types important...
Yes! I didn't know about jasper but this looks like a sane way to manage reports. Please doc it :)
That's kinda like saying we should continue to support ye olden sewer systems... which basically equated to flushing your shit out of your latrine window onto the street below. Times have moved on, we have proper sewer systems now, so the shit flows where we want it to. Tyrion would be proud.
&gt;Looks decent but with all the CMS and online things like square space etc i'm not sure its practical. For a very basic website this looks pretty decent to use but anything beyond that doesn't seem practical. However, I love to see people build stuff and attempt to make a product. You become a better developer for doing so. Best of luck! Thanks.
&gt; One of the main reason for its popularity is Eloquent ORM (Object-relational mapping), which is quicker than the other PHP Frameworks. lol wat? Quicker how? In what way?
http://jasperstarter.cenote.de/ Im satisfied with this.
&gt; Can't, as packagist requires packages to be in the format "author/package". You're the expert, you should know this. :-) Hmmm, I was thinking of laravel or even rails, but after looking at how they do it, you're correct. &gt; That I do have, or at least I think so. Definitely a cleaner and more organized dir structure than some of the crap I see out there. You know what it is then you know whats out there is not crap, Look at symfony or other frameworks. It's an essential part where I can just hook into your DI and add my own classes. &gt; Point taken. So instead of having so many "use" statements in every file, have everything necessary sitting in a registry object, which gets passed around to the different classes / methods, correct? Unfortunately you still need the use statements, but the auto injection helps with me not having to do `$someClass = new SomeClass()` &gt; I know what OOP is. If wanted, do a quick install of Apex, then install the users and transaction packages, take a look at the lib files in /src/users/ and /src/transaction/, and you'll find your OOP. While I appreciate your uses of packages to modularize your application, my question is: Why? This type of stuff should be default. When I boot up the framework I should be able to do something like `php apex create:auth` or something and it will create the login page, view, controller actions and everything for me. I don't so much as mind if it's like "we must install apex/auth" or what ever, but there should be some "auto wiring" Unless I am missing something. &gt; I'm not seeking validation per-se, but looking for feedback and also hopes to gain some interest in the project. It's a little difficult to not take this all with a grain of salt while listening to responses that basically say, "you moronic dipshit, how are you not laying dead in a sewer right now?". Plus things like getting my code slammed and told it's shit because I missed one asterik in one comment block. It's not so much that your code is shit, it's that you dont seem to follow community standards for open source PHP porojects. We have some core principles such as proper name spacing, using appropriate PSR's, Testing, Ease of use, Well documented and well structured code. Security concerns. Yes you are re-inventing the wheel and trying to do two things at once, you seem to be trying to create a CMS and a Framework at the same time. Don't do that. Create one or the other. People don't like re-inventing the wheel, you should in theory be using symfony packages as your base and writing glue and wrappers to hook them up. You'll get a lot more respect that way. &gt; Don't tell me I haven't learned. Just take a look at it now versus when I started. It's a totally different beast now, and I'm absolutely certain it will continue to quickly evolve. It's just somewhat difficult to get decent feedback when there's so much vitrolic, hate filled monkey poop being thrown around this place, but I guess it is Reddit, so to be expected. It's not reddit, it's the PHP reddit. And we have high expectations of solid, DRY, clean, well tested, well trusted code. You're "mess" doesn't really meet that so ya we are a bit more harsh, we are not here to hold your hand and be your best friend, we are here to push you, critique you and make you a better developer as we all are doing the same to each-other. A senior programmer knows what to use, what security implications there are to doing things a specific way and can offer a better explanation then "Because I don't like whats out there :)". And you kind of have that "I don't like whats out there So I dont care" attitude, which doesn't fly around here. If you had more well thought out reasons and better explanations and could back up with well tested, clean, modulare code then we wouldn't be on you like a fly swatter on a fly. But you don't seem to care about some of the feedback and thats why your stuff is getting downvoted, why you are being treated the way you are. Sure some feedback might not fit your situation and thats ok, but things like security, testing, clean code, PSR implementations and standards - they have to be followed to a T. &gt; Whoa, whoa, back up there. Be careful, that was getting awful close to a compliment. This is Reddit, watch your language dammit! :-) It's true. You have. Your code is on the right track with a few minor changes you have made. Now its time to look into making more changes to fully stabilize and clean up the API. I would separate out what the framework is from what the CMS is. maybe build the framework, then as a "This is what it can do" build a CMS on top of it. That would let us see what this Apex thing can do.
Good to know. I saw a difference with my attempt (let's call it an attempt ;) is that I tried to bypass the need of a system call using a bridge with the JVM. That way is pretty flexible (you directly use the jasper API instead of feeding args) and fast (no cli/jvm startup time). But comes with a drawback, the need to run a bridge server (docker...). So I'm not yet happy with this neither ;). I'll wait a bit for other comments, so I get some bigger picture. But thank you for the comment.
Yes, php needs some visual report builder. The best thing I found is Jasper and OpenTBS https://www.tinybutstrong.com/opentbs.php?doc I'm still searching for better solution - easier to design as Jasper Studio it's slow for me.
Useful !
CodeIgniter? 2019? Is that joke?
I used Jasper some ~12 years ago with PHP, and there were no libraries back then - I think I had to make some SOAP calls or something to generate reports! The editor and the reporting server were very good, so I imagine they'd be even better now. If there is no good PHP library doing this already - and do check! - then go for it.
it's not a joke, it's called a blogspam. There must be an article somewhere written in Hindi telling something like 'Write an article titled Top 5 PHP Frameworks for Web Development in date("y") with random choice of frameworks each with an arbitrary list of common features. It is good for your corporate's site promotion.'
It’s faster at publishing blogspam
More documentation is always nice, what is there already seems useable as a starting point.
 &gt;&gt; You know what it is then you know whats out there is not crap, Look at symfony or other frameworks. It's an essential part I said SOME not ALL. A couple that come to mind are CakePHP and CodeIgnighter. I'm sorry, but I tried both of those, and it didn't take much to turn me off. &gt;&gt; but the auto injection helps with me not having to do $someClass = new SomeClass() I know, hence the reason for the static methods, but apparently that angers alot of you, so will change it when I find the time to proper di. While I appreciate your uses of packages to modularize your application, my question is: Why? &gt;&gt; When I boot up the framework I should be able to do something like php apex create:auth &gt;&gt; or something and it will create the login page, view, controller actions and everything for me. &gt;&gt; I don't so much as mind if it's like "we must install apex/auth" or what ever, but there should be some "auto wiring" Unless I am missing something. One of us is definitely missing something, and I'm not sure who. :-) What you said above is exactly how it works though. Give it a try -- do a base install of Apex, then look around in the /src/ and /views/ directories, check the menus in the admin panel, etc. Then do a "php apex.php install users", and voila, all your views, libraries, controllers, new menus and everything is there and ready to go 100%. Same as if you need transaction and payment processing, it's just "php apex.php install transaction", and everything is there, including even default e-mail notifications. Then as time profresses there will be more and more packages available. For example, one I need to do is the standard register via Google / Facebook, so if you need that you would just do "php apex.php install users_register_social" or something, and done. The registration page on the public web site will now show the "Login with Google / Facebook" buttons with no work on your end. Am I missing something? As for why packages, because I've learned from experience that it's VERY easy to bloat a software system to the point you can no longer sell it, because it becomes a bloated piece of junk with so many features that nobody wants to use it. For example, take a look at https://envrin.com/cryptosuite and you will see how broken down the packages are. This is done to ensure every client gets the exact system they want, without a bunch of additional functionality that only serves to confuse and aggravate them. &gt;&gt; you seem to be trying to create a CMS and a Framework at the same time. Don't do that. Create one or the other. I have no idea what I'm creating. I flipped the description to "Platform", and see how that goes. I approached this more from a business perspective versus a technical one. I took the requirements and expectations I know my clients have, and came up with this. Basically, what I was aiming for is Wordpress, but not a pile of shit, and something that can be used for actual business operations. Wordpress is great for its intended design -- a blogging platform, but fails miserably at actual business operations. All the while, I constantly see tons of small businesses launching actual businesses with WP, and it makes me shake my head. Who puts say 300,000 users into a WP install, type of thing. &gt;&gt; you should in theory be using symfony packages as your base and writing glue and wrappers to hook them up. Not a chance. You have no idea the hell I've been through during the course of this project, so there's no chance in hell I'm dropping it. From going blind, getting deported from Asia, dogs got sold for food, heart broken, screwed out of $20k, lots of fighting amongst family and friends, even homeless for a while, etc. It just now feels like it's starting to get to the point where people are actually looking at it, and keeping an eye on it while improvements are being made. After all the shit I've already been through, I'm staying the course, and will continue to improve this as necessary. Plus I'm finally starting to bring in some clients with this thing. &gt;&gt; we are here to push you, critique you and make you a better developer as we all are doing the same to each-other. Sounds good. What I can say is, thank you for being more cordial than before. Trust me, I do actually listen, although it may not seem like that at times. However, if I listened to everything you guys said, it would have never gotten to the point it is now, or where it will be in 6 months from now. Will get to work on that dependency injection...
Hey, Envrin, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Wow! Sign an NDA with the company I currently work for! My first day on the job, I found so many `global $var1, $var` with over TWO HUNDRED variables on the line, scattered several dozen times in various functions around the app. It's still very real. What really shocked me was that 100% of this code was written after 1 January 2016... I *legitly* thought it was ported over 20 year-old PHP4 code...
That is SHOCKINGLY low!! Man. I don't consider my stuff worth publishing with under 90%.
The future is here.
Depending on your host, its probably baked in or is an option you can set. Most companies are gonna give you access to WHM or c-panel or both depending on the configuration, and you can set your default PHP handler and version from there.
Thank you so much!! Anywhere I can read or learn how to set this up?
I didn't forget it. I just overestimated the intelligence of the /r/php community.
One easy tip is to look into WP Super Cache or similar caching plugins. This helps my sites quite a bit.
No special coding?
No, the plugin does all the work.
Ok, I was looking for some special code that could get me below one second load time.
Hehe.
Stop using wordpress.
What host are you gonna go with?
&gt; I said SOME not ALL. A couple that come to mind are CakePHP and CodeIgnighter. I'm sorry, but I tried both of those, and it didn't take much to turn me off. Symfony is the best one IMO. &gt; As for why packages, because I've learned from experience that it's VERY easy to bloat a software system to the point you can no longer sell it, because it becomes a bloated piece of junk with so many features that nobody wants to use it. This is a good way to think about the application. I would tie in basic log in and authentication to the "framework" or what ever this is. &gt; I have no idea what I'm creating. I flipped the description to "Platform", and see how that goes. I approached this more from a business perspective versus a technical one. I took the requirements and expectations I know my clients have, and came up with this. "This" is a mess of "my clients wanted this" and not so much of a "I am trying to solve X based on Y clients needing this and the community has not created this before" - which with what I have seen of your code base, the community has created 90% or more of what you are trying to do. Why are you re-inventing the wheel? &gt; ot a chance. You have no idea the hell I've been through during the course of this project, so there's no chance in hell I'm dropping it. From going blind, getting deported from Asia, dogs got sold for food, heart broken, screwed out of $20k, lots of fighting amongst family and friends, even homeless for a while, etc. Maybe this isn't the project for you? If it's creating such havoc and mental stress. Maybe you should focus on taking care of your self and your health and such?? No one said dropping the project, but you can start integrating Symfony components through out. It's rather easy too. &gt; Plus I'm finally starting to bring in some clients with this thing. At the current state it's in? I fear for their data. I would spend the time on improving features, cleaning things up - removing static classes and putting in more time learning and growing as a developer. This is a great start but I fear you have a lot more to do if you really want the community or clients to take it seriously, now clients wont care, but you should.
Depending on how deep access you have, it's worth taking a look at the database. There are scripts that can help you fine tune it. Also, it might be worth enabling the slow query log for a couple of days and go through it. Sometimes a key in a couple of queries speeds up Wordpress significantly.
Concatenate and minify all your assets. You'd be surprised how long it takes to load 27 .js files and another 36 .CSS files. Individual file requests will kill your times. That will be the single most impactful thing you can do at the moment, then optimize from there.
How can I do all this?
Well, that kind of depends. Esp. with the full-page cache. On Apache, it'll rewrite your .htaccess and you pretty much get full benefits. On Nginx you need to do your own server-level tweaking to bypass PHP and MySQL and get the full benefit of the full-page cache.
What version of PHP are you using? If it's below 7 then upgrading to 7 will double the speed. Especially 7.2+.
WP optimization starts with the server it runs on, if you don't have access to manage the server then there's not much you can do: * disable/remove all unnecessary plugins * disable/remove any unused themes * if you use Jetpack, disable everything except the Analytics, everything else drags your site to a crawl * install WP Super Cache or WP Total Cache (much more configurable) * consider using a caching CDN in front of your site (like Cloudflare) &amp;#x200B; If you do have access to the server: * Upgrade to the latest version of PHP * Reconfigure the server to use Nginx and PHP-FPM if possible * Install Memcached and required PHP plugin * Install WP Total Cache in Wordpress and configure it to use memcached caching where appropriate
And get https and http/2 running.
I am not understanding your question. What are you doing? Can you send and example of what does not work in pdo but work with mysqli??? 😅 😅 😅 I don't see any relation between empty and mysqli/pdo...
Thanks for all your time and input, appreciate it. One quick question, and I will leave you alone. Well, for now until I get the next major update done to Apex.... :) Would you recommend using the php-di extension, or should I be looking elsewhere? Thanks.
Fun fact: There are OOP frameworks that make it insanely hard or impossible to propagate information to the proper place, using good old globals is absolutely legitimate.
&gt;also it denies or my "preg_match()" command doesn't run in PDO That sounds pretty bad, you should get in touch with Bill Gates. He runs the internet.
Guess nobody can help you without showing some code. There's basically zero difference between pdo and mysqli effectively, pdo just has the imho saner Syntax.
Hey man, you leave my Wordpress Rocket as a Service ideas alone!
Some information to help you ask the proper question (in /r/phphelp by the way) - **PDO is not a database** - PDO is a PHP database **driver**, frankly, a set of functions to send queries to the database and get the results. It can be connected to many different types of database. - Mysqli is not a database. - Mysqli is a database driver as well. Only connects to a mysql database. The rest of your question is indeed gibberish and it's hard to answer.
Please post some code.
in /r/phphelp you *surely* meant?
I'm not even sure if this belongs in /r/phphelp, it's impossible to understand.
Almost like a bot has created this post after scanning /r/phphelp.
There are entire ecosystems built on top of programming languages that don't have one or more of the things you mentioned. Don't assume that what you know and learned so far is "the one true way" of doing your job, there are many more! Maybe try exploring other languages like Python, Ruby, or Go to gain a broader perspective on how the same problems you solved so far can be approached with a completely different set of basic tenets and idioms. You will start embracing the differences and the lack of some features in favour of new things.
You can test the online demo: [https://terryl.in](https://terryl.in) Just refresh many times you will temporarily get banned. Solving Captcha to continue browsing.
Good work !
Interesting. Do you have an example? I would avoid this kind of framework to be honest. If you can.
You have to refresh how many times to be banned ?! After how much time the ban is lifted ?! Does it ban you on ip or class of ip ? Also if you create a scrape a page once in a week, it will bypass the library, as it is not repetitive and it will mimic a user entering the website. &amp;#x200B; Thank you, Cristian
Banned by IP. You can block all class IP by IP component [https://shield-on-php.github.io/component/ip.html#setdeniedlist](https://shield-on-php.github.io/component/ip.html#setdeniedlist) for example: [100.100.100.0/24](https://100.100.100.0/24) (block C class)
I had to solve the captcha on my first visit. Is it intended ?
I see, nice class, I will use it for sure in future projects. Bookmarked :)
Did you try [https://github.com/strawbrary/php-blake2](https://github.com/strawbrary/php-blake2) that you can compile and install?
Seems to be pretty aggressive right now - went to click on each of your navigator links at a very average pace and on my second click in was prompted with a captcha. Is there much configuration available to alter what is considered an anomalous request?
In [`src/Shieldon/IpTrait.php`](https://github.com/terrylinooo/shieldon/blob/master/src/Shieldon/IpTrait.php), I would advise using the IANA list of reserved private addresses, along with localhost: 10.0.0.0/8 172.16.0.0/16 192.168.0.0/16
Who is guessing? Wouldn't you have designed it?
It took literally two clicks, lol.
There's a tool called [https://bitninja.io/](https://bitninja.io/) that watches your whole traffic.
Why would I guess it having powerfull ORMs?
How does it keep track of migrations?
That's why you use mutation testing as well!
Are you a full-time troll?
Also generics, proper variance, immutability, value types, scalar objects, etc, etc...
It doesn't track migrations. It track whole structure of database. For example, you call "save" function and get directory containing all database structure. Then you change some table (ALTER TABLE ... ADD COLUMN ...) and call "verify" function that will display information about changes in this table. The same will happen if you change the trigger, function, view, etc. Also, after calling "save", you can open a file with source code of stored procedure and make changes. If you call "verify" after that, you will see info about changes, but if you call "deploy" SchemaKeeper will deploy changes in this stored procedure to database. If you call "verify" after "deploy" you will see no changes, because they ware already deployed. "Deploy" function works only with stored procedures. I hope I answered your question.
Rust, Swift, Go, Elixir, Kotlin, Clojure, Racket are all great languages with different trade-offs and design choices. And those are just ones I've personally used.
&gt; If you want a server that can be scaled easier and run cheaper, node has the tools you need Maybe. I mean, if you consider launching N web browser engines as "scaling" and "cheap", then sure...
It's also a pain in the ass to work with and is slow in performance.
damn, they run faster than I do. I just grasped S4
I do love that upgrades are getting easier. 2.1 -&gt; 2.7 was a massive pain, 2.8 -&gt; 3.\* was so much easier, and 3.3 -&gt; 4 is a "walk in the park". I remember doing a 2.1 to 2.7 upgrade that took around 7 months. In comparison, I did a 3.3 -&gt; 4.3 upgrade recently in about 4 hours.
Today I learned about how [Symfony's LTS versions] (https://symfony.com/doc/current/contributing/community/releases.html#maintenance) work
In case you forgotten, you asked the OP to post some code. I don't see how posting a code doesn't fit for /r/phphelp
Can't wait to get my hands on it. Honestly, symfony has the best DX that i have ever seen (when you are behind the initial learning curve) :dancing_hamster:
Great news about Symfony - I don't particularly like it, but there's plenty of people who do and its components helped so many other projects live - great work and excellent news about the new upcoming version. &amp;#x200B; Slightly offtopic.. am I the only one who mistakenly reads Fabien's nickname as FAP BOT?
[Make it minutes](https://www.tomasvotruba.cz/blog/2019/02/28/how-to-upgrade-symfony-2-8-to-3-4/) :)
Freudian slip ? Do you need some time alone to yourself ? Can't unsee, tho
Don't worry, you're not alone...
What? Symfony can get even better?! Sheesh.
More like "internet broke me" and "I was broken to begin with" but yea - can't unsee it :)
&gt; 3.3 -&gt; 4 is a "walk in the park" Well, no, I mean, it depends.
It's funny how counterproductive this will be. Pretty much since tabbed browsing was invented I've regularly started to middle click a lot of links on a site at once, then read each tab one by one. This type of a UX punishes that habit. It's an additional barrier for entry for a website and wouldn't be something I'd be willing to overcome.
&gt;3.3 -&gt; 4 is a "walk in the park" they changed directory structure, they introduced .env building instead of parameters.yaml, they diminished the role of bundles. Having moved one project from 3.3 to 4 I can say that it was not hard, but definitely not "walk in the park"
Truly awful. This is a huge deterrent for real traffic.
I meant in comparison to previous upgrades. Obviously not trivial ;)
That's Symfony Flex, not Symfony 4. You're not forced to change those to upgrade to 4.
I'm not saying this is wrong but the after seems to actually do use the facade pattern correctly? https://en.wikipedia.org/wiki/Facade_pattern#PHP
Please, please tell me that this will still work with archivers!
See? I started to do this, several times, on this 150k Laravel project my team created from the ground up from 2016-2018, but I always stopped. It always seemed so ... not worthwhile. Once you realize what Laravel Facades actually do, how they work, and how you can easily override them when testing, they never seemed like a big deal to me.
So, this is like the project I created way way way back in 2008 to do the same thing w/ MySQL. The entire programming industry has since viewed this as a terrible antipattern, usable only by the most out-of-sync dev shops. Migrations are the way to go in 2019.
We've always used DI over the Laravel Facades for consistency. &amp;#x200B; Keeping business logic decoupled from the framework makes good sense so it always followed to just use DI across the codebases. And when you hire a non Laravel dev, they aren't asking why you've got static methods all over the place.
A web browser engine? I think you might misunderstand what node is.
This complete noob in no way understood your answer! /u/xlimy: PDO and mysqli are COMPLETELY DIFFERENT THINGS. The statement "there's basically zero difference between pdo and mysqli" is categorically false. It sounds like you're really struggling with understanding what class methods are. If the method isn't listed on php.net/pdo, it won't work with the PDO object.
I know: Dart, Go, C# and Bash. I know how to solve task in other languages and how you should code there. But nevertheless I disagree with some concepts. It's nothing wrong that I prefer class based languages with tons of features. If other ppl. dont like that it's ok but for my part I like to have tools on language level to structure my code. I dont say you cant code for example with go because they have no classes. They have a different concept I uderstand that but I still dont like it. This seems just preference :D
How does this deal with good bots? I don't want to blackhole the google indexer
If your website was fast you wouldn't need this and you wouldn't care about scrapers.
Click a button? Where? PHP usually outputs HTML that creates a button. But you could of course build a javascript that clicks a button
You'll get a better answer in /r/phphelp \- this subreddit isn't for questions. It's not directly possible, since PHP is executed serverside and buttons are on the client. You may have to trigger an AJAX event when the button is clicked, letting you execute something on the server and then returning it back to the client. &lt;button id="btn"&gt;Click me&lt;/button&gt; &lt;script&gt; const btn = document.getElementById('btn') btn.addEventListener('click', function() { fetch('https://url/to/php/file.php') .then(function(response) { // Do something with the response on the client }) }) &lt;/script&gt;
I was being hyperbolic. But Node is V8, which is not a small runtime last I checked.
Well, _it is_ just preference, that's my point. ;) So, if you come and ask "why people use X, while I like Y more", I guess the answer can be easily reduced to "because they feel like it". :-P
SchemaKeeper is not migrations replacement. All changes in database structure, except changes in stored procedure, must transfer via migration files. Suppose, you have project that uses PostgreSQL. First of all, you call SchemaKeeper's "save" function and commit structure of your database to git (or other VCS). Then you create migration files, apply them and call "save" again. You can see in git changes that your migrations provoked. Commit them. Now, you have proper database structure saved in git, so you can verify result of your deploy to production database. "verify" function will compare your production database structure with saved in git one. If there are differences - deploy failed. Besides, SchemaKeeper provides function "deploy" that transfer to databases changes in stored procedures, because transfer changes in stored procedures via migrations files is pain. You can change stored source code directly in SchemaKeeper's dump files, then call "deploy" to transfer changes to database.
Well done!
Damn, I just started learning Symfony 4
Is there a list of changes or features introduced in symfony 5?
Yup, V8 is doing some magic there :) Compared using native provided sorting methods of both languages, and got the following results: PHP using asort (low to high): `[PHP] array contains 4001 elements, execution time: 0.49901008605957 ms` Node using `myArray.sort((a, b) =&gt; a - b)`: `[V8] array contains 4001 elements, execution time: 6.845959 ms` Looking forward to when the JIT arrives :)
It a bit problematic to optimize for I/O bound operations. The performance of JIT is back-loaded. That means the processes needs to actually run for a few iterations for it to be a candidate for optimizations. I/O bounds prevents this from taking place as the process is dropped. Meaning if you're application doesn't hold much iterative process logic and is more of a crud application, JIT doesn't add anything, and smart caching is a lot more preformant. That's why PHP 7.2 outpreforms Facebook's Hack which diverged from PHP and uses JIT compiler, while PHP uses op code cache for example. It's no surprise that PHP actually is faster in execution than javascript. However, what javascript has over PHP is that PHP stands idle a lot more due to synchronous nature while javascript uses it's time more effectively due to libuv event loop. JIT is coming to PHP in version 8. I'm not sure how it will work in tandem with OP cache, but I'm sure it will be interesting. However, what would make me even more excited is built in concurrency for php, probably using scheduler (something more similar to Go) rather than event loop and promises in js.
Going off previous experience I would expect a significant part of this is deprecation cleanup. As far as new features, the only one I know off the top of my head is that there will be a new mail system ([symfony/mailer](https://symfony.com/doc/master/components/mailer.html)).
What is the idea? Some clickbait spam website? Maybe the best answer is NO!
&amp;#x200B; Anyone here have experience with Google Translate API? How accurate is it? Has technology progressed to the point where we can just auto translate software into multiple languages via an API such as that, or are we still in the manual translation days?
A team of developers can change structure of the database. Even parallel. Specially, if your project has a lot of business logic inside stored procedures. Without strict tracking system a lot of guessing may appear. If you inject SchemaKeeper to your CI process, you will get functions to maintain strict consistency between databases (local, production, stage, etc). Comfort review of database changes also becomes possible, because database structure is divided by separate files and saved to git .
&gt;am I the only one who mistakenly reads Fabien's nickname as FAP BOT? I do it every time, man. Every single time
I would normally say StackOverflow.com, but I'm pretty positively sure that they'd close this so fast as TOO_VAGUE.
I am creating my first PHP project with an MySQL DB. The project is to allow users to sign up for notification in an automated scheduling platform. I have a basic form that accepts the information and validates it. I have tested this against my data source and have working results. &amp;#x200B; `&lt;!DOCTYPE HTML&gt;` `&lt;html&gt;` `&lt;head&gt;` `&lt;style&gt;` `.error {color: #FF0000;}` `&lt;/style&gt;` `&lt;/head&gt;` `&lt;body&gt;` &amp;#x200B; `&lt;?php` `// define variables and set to empty values` `$firstnameErr =` `$lastnameErr =` `$emailErr = "";` `$_firstname =` `$_lastname =` `$_email = "";` &amp;#x200B; `if ($_SERVER["REQUEST_METHOD"] == "POST") {` `if (empty($_POST["_firstname"])) {` `$firstnameErr = "First Name is required";` `} else {` `$_firstname = test_input($_POST["_firstname"]);` `// check if name only contains letters and whitespace` `if (!preg_match("/^[a-zA-Z. ]*$/",$_firstname)) {` `$firstnameErr = "Only letters, periods and white space allowed";` `}` `}` `if (empty($_POST["_lastname"])) {` `$lastnameErr = "Last Name is required";` `} else {` `$_lastname = test_input($_POST["_lastname"]);` `// check if name only contains letters and whitespace` `if (!preg_match("/^[a-zA-Z. ]*$/",$_lastname)) {` `$lastnameErr = "Only letters, periods and white space allowed";` `}` `}` `if (empty($_POST["_email"])) {` `$emailErr = "Email is required";` `} else {` `$_email = test_input($_POST["_email"]);` `// check if e-mail address is well-formed` `if (!filter_var($_email, FILTER_VALIDATE_EMAIL)) {` `$emailErr = "Invalid email format";` `}` `}` `}` &amp;#x200B; `function test_input($data) {` `$data = trim($data);` `$data = stripslashes($data);` `$data = htmlspecialchars($data);` `return $data;` `}` `?&gt;` &amp;#x200B; `&lt;h2&gt;PHP Form Validation Example&lt;/h2&gt;` `&lt;p&gt;&lt;span class="error"&gt;* required field&lt;/span&gt;&lt;/p&gt;` `&lt;form method="post" action="&lt;?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?&gt;"&gt;` `First Name: &lt;input type="text" name="_firstname"&gt;` `&lt;span class="error"&gt;* &lt;?php echo $firstnameErr;?&gt;&lt;/span&gt;` `&lt;br&gt;&lt;br&gt;` `Last Name: &lt;input type="text" name="_lastname"&gt;` `&lt;span class="error"&gt;* &lt;?php echo $lastnameErr;?&gt;&lt;/span&gt;` `&lt;br&gt;&lt;br&gt;` `E-mail: &lt;input type="text" name="_email"&gt;` `&lt;span class="error"&gt;* &lt;?php echo $emailErr;?&gt;&lt;/span&gt;` `&lt;br&gt;&lt;br&gt;` `&lt;input type="submit" name="submit" value="Submit"&gt;` `&lt;/form&gt;` &amp;#x200B; `&lt;?php` `echo "&lt;h2&gt;Your Input:&lt;/h2&gt;";` `echo $_firstname;` `echo "&lt;br&gt;";` `echo $_lastname;` `echo "&lt;br&gt;";` `echo $_email;` `?&gt;` &amp;#x200B; `&lt;/body&gt;` `&lt;/html&gt;` &amp;#x200B; As I stated this does work but it doesn't create a good user experience. I would like to accomplish the following two things: &amp;#x200B; 1. Validate the fields in real time using javascript or Ajax. 2. Deactivate the "Submit Info" button until all of the required fields have the required information entered. &amp;#x200B; Can someone help me with this code?
No somthing for school.
Great job! My 2 cents of [automated refactoring](https://www.tomasvotruba.cz/blog/2019/03/04/how-to-turn-laravel-from-static-to-dependency-injection-in-one-day/)
Your code is very difficult to read, but you should definitely die something with Post/Redirect/Get request. https://en.wikipedia.org/wiki/Post/Redirect/Get
Have you ever found any exceptions to this? Personally I've found a bug/ oversight in the Router that means some calls are only proxied correctly when using facades. E.g. `Route::prefix('admin')` is not the same as `$route-&gt;prefix('admin')`. There is a work around, but it's pretty ugly: `$route-&gt;__call('prefix', ['admin'])`.
That is the old way to write php code, you should separate the view from the logic doing MVC with any framework. The framework can help you sanitize input, connect to the db, prepare html or json if you want to use SSR page or API.
So all employees of company {whatever} are insta-banned whenever your website becomes popular? Same IP !== same user (I know, bots will abuse this by rotating UA's)
Quit reading books from 2005.
You want /r/phphelp \- you wont get as many flippant troll criticisms. However, this is reddit. Second, this isn't /r/javascript , but your remaining issues will likely require javascript. For example, set disabled on the submit button. Then set set up listeners for onChange for the active fields. Fun a function that checks the values of each field (you can get the values by id or querying the DOM) to make sure they are acceptable, then enable the submit button.
Why don't you like Symfony?
symfony is generally developed in such a way that upgrading major versions is only fixing the deprecation warnings in your app. Of course, if new patterns are introduced, they will likely be optional until another major version (not necessarily the next one)
date('H:i:s Y-m-d',$funnytimestamp);
the web script file that I’m trying to modify shows this: &amp;#x200B; $get\_videos = $db-&gt;rawQuery("SELECT DISTINCT([v.id](https://v.id)), v.\* FROM u\_paid\_videos AS upv LEFT JOIN " . T\_VIDEOS . " AS v ON (upv.id\_video = [v.id](https://v.id)) WHERE upv.id\_user = {$user-&gt;id} AND upv.time\_date ORDER BY [upv.id](https://upv.id) DESC"); &amp;#x200B; It appears that my 'time\_date' value, in my '$get\_videos' line, is coming from the 'videos' db table, but I'd like it to come from the 'u\_paid\_videos' db table. Any additional guidance is appreciated.
r/learnphp Though, really the issue lies in SQL.
Thanks for your comment, but I don't understand your reply
Rather than criticise the code, I’m going to ask you the kind of questions I would ask to junior employees when they first started out: What happens if the first name of your form enterer is not using the Latin alphabet? What happens if they have spaces in their name, or a hyphen, or an apostrophe? Could the testinput function be made more concise? What if you wanted to reuse the validation code elsewhere, or the form elsewhere? Why did you choose to put underscores in your form input names? If you’re using camel case for firstnameErr, should it be firstNameErr? What if you didn’t want the error line to appear unless there were actual errors, rather than always displaying the asterisk?
It really depends on where you are getting your datetime stamp from and how you want it displayed
People will understand the general gist, but it won’t read as native language. Kind of like I wrote this comment as: &gt; The population are understanding the highest meaning, however the words are not from here.
Thanks for your comment. The html page does display a date on the 'purchases' page, next to each 'purchase', but it matches the date/time that the video was added(uploaded), not the date it was 'purchased'. Purchases are stored in 'u_paid_videos' table
What base software are you using?
php
The only difference between Symfony 5.0 and 4.4 is the removal of depreciated functionality. Otherwise, they should be pretty much identical. Refer to Symfony's [Living on the Edge](https://symfony.com/blog/category/living-on-the-edge/4.3) blog posts to see what is being introduced. Lots of refinements as well as some new stuff.
I was referring to something like WordPress, Drupal, etc...
neither
LTS can be a bad thing depending on perspective. It can give people a good reason not to upgrade.
Look at your query, you are only selecting from the videos table. Best advice I can give is be specific about what you are selecting. Avoid `select *` whenever you can
Using facades takes 10-15% more execution time. I do not recommend filling your webapp with facades , should only be used when necessarry.
How did you find out that number?
Fapien Botancier ^^
Cloudflare does this better and more intelligently... and it’s also free ;) I don’t see a reason to put a typical load balancing / WAF layer into an application.
I can't say for sure, but I think they're different types of facades. Or maybe someone might argue that Controllers and Facades are distinctly different in their intention, even if they look similar. Further, I think the issue people take with Laravel is related to the 'magic' that the Facades all bring to the table. Also the files Laravel calls Facade's don't look like those ones. They usually are just a single method that returns the contract. https://github.com/laravel/framework/blob/5.8/src/Illuminate/Support/Facades/Artisan.php
&gt; One of the things that that facades have going for them, is that they are elegant to look at it. But in my view, they hide the core logic, and make it difficult to understand how exactly a class works Hiding complexity and NOT leaking knowledge is the whole point of facade in the first place. It's like saying I don't like to use chair, I like to put it together everytime I want to sit on it, so I can understand how it's made. &gt; Replacing Your Facades With Dependency Injection: Before and After "Replacing your chairs with yoga training, before and after" What a nonsense article.
It seems like Laravel just usurped the term Facade for their own creation.
Ugh. Don't do this. Lambda isn't intended for this sort of application. If you want to use symfony components to handle a single request or functionality then fine but don't try and run a full web site off a single lambda function. The most I could see allowing for multiple requests is to handle multiple request methods (GET, POST, PUT, PATCH, DELETE) for a single endpoint.
I feel sorry for all your users behind CGNAT https://en.m.wikipedia.org/wiki/Carrier-grade_NAT
Even if you've got a point (that facades vs DI is not a quite fair comparison, since both are just fundamentally different), the way you present it makes you look hostile and does not really encourage to discuss the topic any further with you.
Why don't you like Symfony?
That are pretty heavy facades. If they were just some function calls they wont cost much.
Do you have any argument to back this up? This sounds like FUD, I know several websites running like this (examples I know about: my own blog, a Laravel SaaS webapp, or even a website with 40M requests a day, etc.).
In this case, the combo of not-so-long LTS periods, well-implemented deprecation warnings and BC promise on Symfony's side is a pretty good deal.
My 2 cents: - The post [Moving away from magic — or: why I don’t want to use Laravel anymore](https://www.freecodecamp.org/news/moving-away-from-magic-or-why-i-dont-want-to-use-laravel-anymore-2ce098c979bd/) **explains why** - The post [How to turn Laravel from Static to Dependency Injection in one Day](https://www.tomasvotruba.cz/blog/2019/03/04/how-to-turn-laravel-from-static-to-dependency-injection-in-one-day/) **shows how**
Why? Reasons are purely personal and subjective, I'll list a few - these are by no means "Symfony is bad because of this" - no, Symfony isn't bad at all, quite the contrary. It's related to my mental model. There are other tools that I find play better with the way I perceive problems and solve them. I don't like Symfony's documentation. Compare it to, say, Lumen's documentation. While you can find everything you want to know at Symfony's docs page, it's full of additional content that I'm not interested in when trying to find info on a particular feature. I don't like Symfony's routing. You can choose between 4 ways of defining routes. That immediately means that you'll be reading 4 different styles of code if you work in a team (I work in a team). Yes, you can mitigate that, but why would you mitigate anything when using a tool that's supposed to increase productivity? I don't like Symfony's configuration. This time you choose between 3 different ways of specifying config. Why not 1 way? Again, I'll mention Lumen - you return a simple key:value array. Yes, you can - again, mitigate this by choosing and sticking to one way of working with configuration and get the same easy ke:value array being used. Those are the reasons. They're not grand reasons, they're details but they matter to me when starting out anew. If given the opportunity, I'll try and use Lumen (not Laravel). Any well structured code is readable, Symfony helps with that for sure so the above is not a criticism of Symfony.
The facade example is so much tidier/easier to read. Yes, the “static globals” is something you need to learn when you enter Laravel, but it’s hardly a hard concept to get your head around.
I see little point in not using Facades in the controller and other files that are fundementally tied to the framework. Sure, don't use them in your classes that contain business logic, but your controllers shouldn't be full of business logic. At some points, you just start needlessly fighting against the framework.
Just personal experiences and [lambda best practices](https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html), I’m afraid. Packing the entire app into one single lambda is antithetical to what serverless/lambda is about. Lambda is for single, simple, get in and get out functionality.
The fact that some people use FaaS services to serve an entire application on a single function does not mean that the vendors intend for those services to be used that way, nor that it is the best way of doing things. I would personally agree with /u/NullSignificance that FaaS is not intended to be used this way. I would go further and say that using FaaS like this means you will miss out on a lot of the operational benefits which FaaS provide. Here are some examples: 1. You can't leverage other features of the cloud, e.g. function configuration, metrics, logs and messaging services to name four of probably a dozen categories, which are all designed around an assumption that distinct services are implemented as distinct functions. For example, you can't say "notify me when error rate for endpoint X exceeds Y" when every service is behind the same function. You can't easily see "what is the average runtime for endpoint Z." 2. You can't use cheap, low powered VMs (e.g. 400mhz/256mb) for endpoints which are not performing CPU intensive tasks. Instead, you have to ask "what is the smallest VM which will be able to handle _any_ request in my application?," which is probably four or eight times the size (and cost), and then use that for all requests, which is an incredibly expensive way of doing FaaS for busy websites. 3. Part of the benefit of FaaS is that it enables you to deploy different parts of your application independently, with different teams working more independently, innovating faster by quickly deploying experiments and features. If you continue to build and deploy a monolith then you lose that benefit.
Hi, use case is a payroll company that wants to upload all their payslips to a remote server via ftp and then send them out to intended recipients. each file name has an identifier for each employee so their file would be sent to them on discovery in the server
You can set up watchers in \*nix systems that then call a script, might work? IT's a bit of a pain to manage, as it's both code and sysops, but so long as future maintainers know it exists, it can work
Can you run cron to check files updated then send email?
thank you I'll have info on their servers this afternoon and look into that. do you by chance have a link to any tuts regarding the sending of mail based on filename?
Hi, yes I would be able to but having trouble with the idea of sending a file to a specific recipient based on their filename. Would you happen to know of any resources that have done something similar?
&gt;I don't like Symfony's routing. You can choose between 4 ways of defining routes. That immediately means that you'll be reading 4 different styles of code if you work in a team (I work in a team). &gt; I don't like Symfony's configuration. This time you choose between 3 different ways of specifying config. Why not 1 way? I think Symfony does itself a disservice by trying to support all of these different configuration standards, especially when the vast majority of the community is going to gravitate towards the same thing anyway (which seems to be annotations for a few things like entity mapping and routing, and YAML config files for everything else). It'd be a lot easier for everyone involved if they simply declared _one_ opinionated Right Way to do things, and either dropped support for the others altogether, or at least made it clear that you shouldn't use any of the alternate methods unless you know _exactly_ why you're doing it. That being said, I haven't seen this actually cause problems in practice (i.e. working on a team). We've been writing Symfony code at my company for a year or two now, and not once in that time have I seen someone, say, try to define routes with something other than annotations, or randomly start writing XML configuration when everything else is in YAML.
``` $email_address = null; if ($file_name = '9545.pdf') { $email_address = 'bob@company.com'; } else if ($file_name = '3456.pdf') { $email_address = 'jane@company.com; } ``` and so on
That would not be fun to maintain that cron script. I would have each employee code and corresponding email address in a db table.
You can use `inotify` on Linux in a bash script to watch the directories. Also make sure that the connection is encrypted if you use FTP (use sFTP, a ssh tunnel, VPN or similar).
The WordPress installation instructions are pretty terrible. Hacking index.php is a bad idea. There are hooks that run early enough during execution to write this as a plugin.
Thanks bud, I'll have a go with this, only 80 or so employees so will be fine. thanks again
Why do you looking a script for that ? I think you can make it your own script in a minute. Make simple script that checks number of files and if there is new file, it should send an email and increase current file numbers in record. Then make a cron job and run this script frequently
Accepted answer starts with: &gt; That's a good question because these lines are mostly wrong or useless. Good ol' SO.
This is not a strong solution, as you'd have to modify the script every time the employee list changed. Would be much more solid to use a reference file or dB like someone else mentioned.
I don't use Symfony, but it seems like a no-brainer that the project should have config drivers instead of pulling from all the different possible types at runtime. Why can you not tell it that you want to use YAML config, and it would then just ignore any other type of config? Pulling from any supported source at any time for any component clearly seems like the worst possible way to do configuration. But, as I said, I don't use Symfony, so maybe I've fundamentally misunderstood this whole issue.
You need our help forming a Reddit post?
Well you’re not going to get it with a post like this.
Can you give as an example filename? Is there a pattern or something? Like 4321_2019-123_2019-05-29.pdf EmployeeNumber_InvoiceNumber_Date.pdf then you could make a table in an database where the employeenumber and the name and email adress of the employee is inserted. Or solve it with an array. Then you could use explode on the filename to get the number and from the number the email adress where the file should be sent.
Hi r/PHP, I need your help with this peace of code. I need to show a product on my single product page using its own ID (product\_id) from my index.php to single\_product.php. When I manually try to code from its ID it works, but when I want to show it as a dynamically generated ID it doesn't work. I pasted the code bellow so you can see what I am working with. Sorry for English and if the code is a little bit spaghetti. &amp;#x200B; &lt;? php if(isset( $\_GET\['product\_id'\])) $product\_id = $\_GET\['product\_id'\]; $res=mysqli\_query($link,"SELECT \* FROM products WHERE product\_id='$product\_id' "); while($row=mysqli\_fetch\_array($res)) ?&gt; thanks in advance!
The only major problem we had was the caching repository. We use Redis which allows a prefix, but file, memcache etc. apparently don't. So we had to explicitly inject a Redis object, the bugger being if you're working locally and haven't installed redis, but you want caching on, so we then had to make a caching wrapper to detect redis or not, and then decide to add a prefix or just concat one.
Hi r/PHP, I need your help with this peace of code. I need to show a product on my single product page using its own ID (product\_id) from my index.php to single\_product.php. When I manually try to code from its ID it works, but when I want to show it as a dynamically generated ID it doesn't work. I pasted the code bellow so you can see what I am working with. Sorry for English and if the code is a little bit spaghetti. &amp;#x200B; &amp;#x200B; &amp;#x200B; &lt;? php if(isset( $\\\_GET\\\['product\\\_id'\\\])) $product\\\_id = $\\\_GET\\\['product\\\_id'\\\]; $res=mysqli\\\_query($link,"SELECT \\\* FROM products WHERE product\\\_id='$product\\\_id' "); while($row=mysqli\\\_fetch\\\_array($res)) ?&gt; &amp;#x200B; thanks in advance!
From the sidebar: &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required).
&gt;Getters and Setters are part of control. Their purpose is (or rather was) very clear: only allow a certain type of variable to be set inside the Class, and retrieve something the developer (safely) expects. I do not agree, a getter without setter also permit immutability of value objects. PHP 7.4 does not solve this (there's a RFC somewhere for immutable/readonly properties as well).
Can I mark properties as `readonly` or `private set`? No? Then getters and setters are not dead yet.
You actually can restrict the type of config files. There is a loader section that you can tweak if you really felt the need to to eliminate say xml files then you could.
I was surprised It did not start with a comment about a really specific niche ORM and how they are idiots for not using it.
Let me decipher that bad title for you: "We don't need getters and setters, because we have typed properties". This is unfortunately B.S. because: - Setters can be used to enforce conditions on input beyond type. For example "set a number between 1 and 100", "set a name matching this regex" etc. - Setters can be used to pre-calculate or alter other state in the object based on the value being set. - Getters can be virtual (i.e. the property doesn't exist, it's computed on the fly). The classic example of this is something like `$cicle-&gt;circumference` while only internally keeping `$circle-&gt;radius`. And so on and so on. Getters and setters are part of control, but "control" is not just about the variable *type*. And getters and setters are part also of the logic and internal behavior of the object, and you have no substitute for this in type.
&gt;YAML config files for everything else Don't be too sure about this. Doctrine 3 will not support yaml files out of the box though I suspect someone will quickly release a plugin which does so. There are quite a few xml fans simply because you can get error checking as you type. In fact, xml is the standard for plugin modules (aka Symfony bundles). Personally I don't have much trouble with config files and errors. I find the readability of yaml trumps the robustness of xml for configuration.
Maybe he never heard of encapsulation.
If died means I still have to use getters/setters, sure they died - a long time ago.
Well it's true
It's worth adding to your first bullet that setters have the added benefit of allowing you to add or remove validation later and not change the public API of the class. If you use properties and decide to add a setter later, it's a breaking change for everyone using your library.
thanks, i'll look into this
This. That's not what getters and setters are for in OOP. You can write `get()` and `set()` without type hints. The RFC for the feature explains it much better, and the reasoning becomes clear: &gt; However, it is currently not possible to declare types for class properties, forcing developers to instead use getter and setter methods to enforce type contracts. So basically it just introduces the ability to set types on class properties. ``` class User { /** @var int $id */ private $id; public function __construct(int $id) { $this-&gt;id = $id; } public function getId(): int { return $this-&gt;id; } public function setId(int $id): void { $this-&gt;id = $id; } } ``` now becomes: ``` class User { public int $id; public function __construct(int $id) { $this-&gt;id = $id; } } ```
Agreed, need a short term solve for the meantime si can refine later.
hi, yes this was my thinking exactly. the file names have their ID number followed by -payslip.pdf
it's the classic "well I wouldn't start from here." I think the best way to answer a question like that is to answer the question directly in good faith and _then_ point to the question behind the question. ie "here is what they mean, here is how you find out, and here is how I would do it better"
Then use this function to get the ID number: https://www.php.net/manual/de/function.explode.php Explode the filename by the - This gives you an array with the ID number as first item and payslip.pdf as second item.
nice one, much appreciated.
I like Beachcasts https://www.youtube.com/channel/UCsOSGYawy8MG9Mh8NKgRHZQ
imho DI gives you more independent (ironicly) classes. You may inject any object implementing the interface. I sometimes need to refactor my code for other frameworks or other versions of the same framework. It happans that I don't need to touch the main class, all I do is injecting services.
I walk with my guts in the open, cause the worst that can happen in a crowded bus is I swap my liver with another liver. Still a liver!
No. If you want to manipulate object state, use a public method. Object state is an implementation detail, and must not get manipulated from outside. Also, properties can not be declared in interfaces, for exact the same reason.
Thank you for the response!
Obviously lol, thanks for the advice
I can see that, gonna learn how to tho! Thanks
Actually no. Leaving aside the fact that this sort of thing is rarely encountered, you can actually unset a property in the constructor. If you then do $someObject-&gt;someProperty = $value, \_\_set will be called. You can then add your additional code there. It may sound a bit strange but Doctrine 2 uses this approach for it's proxy entities demonstrating that it works well in practice.
I blogged about this topic two years ago, and have been invested in it still. The post deserved an update so I did just that. Here's the TL;DR - Use proper fonts - Use code folding - Reduce documentation and comments - Use descriptive names, even if they are longer - Use a light colour scheme Feel free to disagree, but be sure to read the post to know my arguments for each point.
famous last words. &amp;#x200B; The effort required to do it the correct way now is barely more than the hacky solution. do it right the first time. you will be thankful later
Fair enough, learning on the case so I don't have a yardstick for length of dev here. Noted
&gt; Feel free to disagree, I do. With 4 of your 5 points.
I don't disagree, I just see those point in a different perspective - Documentation and comments can also be folded, you can leave theme there and fold them. - Instead of a light color scheme, you can use a dark color scheme as long as the background is not totally black because it will cause some "glow" with a really bright text color (i've seen a video and read something in regards of dark/light CS battle, will update if I remember which video). I'll add my things too. I would have specified to: - use bigger fonts (many times the default size on most IDEs is too small) - use a bigger line height, empty spaces matter p.s. the font in the second screen is Ubuntu Mono?
Care to elaborate why?
I think you could cobble something using this: [https://packagist.org/packages/henrikbjorn/lurker](https://packagist.org/packages/henrikbjorn/lurker)
Thanks for the input! It's Ubuntu Mono indeed
[Symfony](https://github.com/symfony/symfony) Lots of open issues, gearing up for symfony 5.0. If you have time to lend support.. that would be a great place to do it. I have a few projects that are based on Symfony. So anything that solidifies the framework helps us all.
I have a project that manages LXD servers which might be interesting [here on github](https://github.com/turtle0x1/LxdMosaic), it doesn't use super modern practises (should have used symfony RIP me), but maybe you can implement the move to the symfony router (everything is POST which is annoying) let me know if your interested
Our code is in a private repo, but I can explain our workflow. Hopefully it will help you. We work out of github. We have a github organization set up, and each of the devs on our team uses their private github account which has been granted access to the org. Each of our projects has a separate repo. So, our website has one, our store has one, our deployment system has one, etc. Within that repo, we have the master branch flagged as protected. You can't push code directly to it, ever. It's a setting on the repository. It's called a protected branch. Part of that setting is that we require at least 1 passing code review by another team member for all code that would be submitted to master. When a dev starts a task, they pull down master to their local box, then create a feature branch with `git checkout -b "EC-1234/some-feature-name"` The first part is the ticket number in our tracking system, the rest is a basic description of what the new code does. Development will be done on that branch, with small commits explaining what each change is. "EC-1234: Add purchases to logs" "EC-1234: Fix typo in somefile.php" "EC-1234: Purchase log JS validation", etc. Once the feature is complete, the dev will then either rebase their branch onto master or merge the master branch back into their feature branch. They will then push it to a branch on the remote (usually named whatever their local branch was called). They will then create a pull request for their branch to master. Once the pull request is created, they can assign another org member to it to code review it. The code review is done inside github. If the code review passes, the reviewer will approve the code and merge it to master. if the review fails, needs minor changes, or can't be auto-merged by github, it will go back to the dev who will fix whatever the issue is, then push to the remote branch again. Once the code is merged to master, one of the senior devs on the team will trigger a deployment and release that feature to production. We release every feature branch individually. Nobody every pushes code to master, and in fact, it's not allowed. We haven't had a history overwrite or anything like that in years. Not a single one since we've started following this workflow. Very soon, we're going to set up jenkins to monitor our master branch and kick off the deployment automatically upon successful merge to master. For our flow, master is sacred and nobody ever touches it directly.
This is not what you asked for but Symfony is one of the larger open source projects around. Lots and lots of contributors who follow a [well documented process](https://symfony.com/doc/current/contributing/code/index.html).
Well BitBucket as a doc about different strategies : https://confluence.atlassian.com/bitbucketserver/workflow-strategies-in-bitbucket-server-776639944.html But yeah putting everything in master even if you're alone seems prone to stupid mistakes being done in a professional setting.
Or better yet, create FTP accounts to specific dirrectories on the server and have the directories coded by employee code. That way the filenames can be arbitrary and you won't have to do weird filtering on the filename.
Apparently, this is how every single developer has to start - with naive ideas that turn out to be very bad. Please have a look at https://phptherightway.com/ - also read the answers in stackoverflow. They are correct.
Different preferences on code folding, code documentation/comments, function/variable name lengths, and color scheme.
The most popular git workflow is usually [referenced as Feature branches](https://nvie.com/posts/a-successful-git-branching-model/) \- every new feature, bugfix or similar starts as its own branch from master (or your common development branch if you have multiple levels of branching - in your case I'd recommend master for this for now). This allows development to happen separate from all the other moving parts of the repository, and maintains isolation of the new code to its own location. It also allow cooperation as necessary on those branches between developers, and code isn't suddenly force pushed into master. The second part is what's usually [known as the Github flow](https://guides.github.com/introduction/flow/). After each branch reaches maturity and the changes should be integrated into master as "this is ready for production", a pull request is made. This gives the team a natural place to discuss the changes and to do any necessary code reviews - in most cases it's just to get someone else that's intimately familiar with the touched code to say "Let's get this merged". The changes are then merged into master and the pull request is closed. If any changes are required as part of the discussion that happens on the pull request, the branch is updated and new changes are pushed to the branch - the pull request is automagically updated with the new content and discussion can continue. This is how most of the teams I've been part of (and have helped) handle the issues you're mentioning in your post. As always this requires discipline inside your development teams, but that's part of the craft. No changes goes directly to master, they always start out as a branch and ends up in master as part of a merge. If there's a merge conflict, that conflict has to be solved. Depending on how you're running your git repository (i.e. where it's hosted, if it's self hosted, etc.) you can apply configuration that refuses any pushes directly to master, and only allow certain people to perform these merges (and if necessary, require that existing and new tests pass before being allowed to merge). As always the amount of strictness will depend on what kind of software you're developing, the dynamic and skill of your team and many other factors.
Here's a basic site for currency exchange rates. built in PHP + SQLite. Repo: [https://github.com/attogram/currency-exchange-rates](https://github.com/attogram/currency-exchange-rates) TODO List: [https://github.com/attogram/currency-exchange-rates/blob/master/TODO.md](https://github.com/attogram/currency-exchange-rates/blob/master/TODO.md)
I'm interested to read why specifically — if you've got the time
https://github.com/slimphp/slim always looking for volunteers
You can have a look at [https://github.com/elabftw/elabftw](https://github.com/elabftw/elabftw) &amp;#x200B; Master branch is always the latest stable release, next branch is the latest unstable release (or latest stable if no alpha or beta is out), and hypernext is the dev branch. Contributors must do a PR on the hypernext branch.
In terms of locking down your code to stop devs forcing commits into master or whatever the bit you are missing is that other contributes will fork your repo. You don't give them access, they fork, make the changes to their repo (since it's theirs they can do what they like with it) and then make a pull request to you where you then approve the change and merge to one of your branches. Of course your also entitled to politely decline their changes.
You might be interested in Git Flow or GitLab Flow: 1. [https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow) 2. [https://docs.gitlab.com/ee/workflow/gitlab\_flow.html](https://docs.gitlab.com/ee/workflow/gitlab_flow.html) Also: 1. [https://semver.org/](https://semver.org/) 2. [https://www.conventionalcommits.org](https://www.conventionalcommits.org) &amp;#x200B; I have very good experiences with these.
They even have a specific label, [good first issue](https://github.com/symfony/symfony/labels/good%20first%20issue) which marks not so complex issues just to get into the process, with help from the staff.
How do you do static analysis?
Controllers being tightly bound to the framework is more a side effect of Laravel's design. There's nothing inherently forcing them to be coupled.
But "flex" structure (and envs, and not-bundles etc) was not required to upgrade to 4.\*. It was something you decided to do. I have two large projects that I successfully upgraded to 4.\* just by fixing deprecations but I decided not to upgrade to "flex" way of things.
[https://github.com/Cromian/typetote](https://github.com/Cromian/typetote) is a flat file CMS I do on the side. Always looking at ways to improve it.
The branch was just started because 4.3 is coming to stable release. And 4.4 LTS == 5.0 without deprecations. But probably 5.0 will have some new features as 4.0 had. Check the roadmap: [https://symfony.com/roadmap#checker](https://symfony.com/roadmap#checker)
Oooh ... I love Slim (and have written a ton of open source middleware for it). I should look in to volunteering.
What's a "DX"?
While I value contributing a technique to the thread, why do you have to contract the parent, I don't know? Yes, sometimes you can do that (I've done it myself), but as a B.C. technique it's problematic, because if someone assigns by reference, you're effed. You're also significantly changing the performance profile of your object. Setting a property is fastest of them all. Calling a method is very slightly slower. A `__set` handler is about 20 times slower (still fast in the big picture, but still...).
This is a very detailed response, but it is also mostly organization specific as most do not create the branch as the ticket name as the leading prefix. Git flow standard is: * `feature/TICKET-1234-minor-desc` (branched from development branch) * `hotfix/TICKET-1235-issue-desc` (branched from master, merged into development after deploying)
We don't have a development branch. We pull from and merge back to master, so the distinction between a feature and a hotfix is meaningless to us. They're all just feature branches. We prefix it with the ticket number, 1 to make it the first thing you see when you see the branch or commit name, and 2 because our ticket tracking system monitors our git repos and automatically attaches commits, branches, and PRs to the tickets. So from the ticket, you can click a link and be taken directly to the PR or whatever.
Developer eXperience
This is really not true. In 90% of cases you don't want to change all of the values - sometimes they are just defined once and never change. So why bother having ability to set them? If we would also have readonly - i would agree with this.
&gt; Use proper fonts Agreed. I like Fira Code, without the ligatures, size 14, line spacing 1.1. &gt; Use code folding Not a fan unless I'm forced to work on a small (&lt;24") screen. Which almost never happens. &gt; Reduce documentation and comments Yup, I love deleting PhpDoc and replacing it with proper type declarations. I only use Docblocks for class properties, `@throws`, `@property` and the occasional static analysis hint. &gt; Use descriptive names, even if they are longer Agreed. &gt; Use a light colour scheme Never! I love my Darcula.
Interesting! Unfortunately, all of the "good first issue" issues are simple language translations in XML files. Know of any other repos with the "good first issue" tag?
Have a look at [https://www.codetriage.com/](https://www.codetriage.com/) People can put their projects up asking for help, and the triage site sends you issues that match your interests. &amp;#x200B; Regarding your method of code management, it's extremely outdated and more suited to Subversion where branching is expensive and rarely done. It is also, as you have found to yours and your junior's disadvantage, not without risk. Git allows for cheap branching (SVN creates a copy of your entire code for each branch plus changes, git creates a pointer plus changes that lets you merge in). What you should be considering instead, and I don't want to crap all over your 4 years of pushing straight to master, is keeping your work in development discrete from your master or production code (that has been tested, approved and made it to a live environment). There is no reason not to create many many branches when working with Git, and you really should consider it, even as a sole developer, because it means you can have multiple new features or changes in process at once, and you can still chop back to the 'live' version of the code to apply a production fix, without accidentally promoting half baked code that could cause even more problems. Pull requests, along with a restricted primary branch or branches, give you the ability to farm work out to junior members of staff (or the general public in the case of Open Source projects), and still get to review it yourself as a maintainer before you click the 'merge' button. The power of Git, and the reason you rarely come across other VCS systems now, is branching and merging, keeping the history of the project is just a nice bonus.
Just write a generic \_\_get function and declare the property protected.
I don't have an example to hand....but have encountered then. Imagine you're trying to investigate a bug, in some code where all data is passed as events/messages. You can see that one of them being generated 'here' is not being processed correctly 'there'. Figuring out how the data is propagated from there to there would be days of work, but you can work around it by setting a global debug flag in the calling code: global $DEBUG_THIS_ONE; $DEBUG_THIS_ONE = true; foo($message); $DEBUG_THIS_ONE = false; and then in code that does the processing, check $DEBUG_THIS_ONE. And yes, I'd prefer to not do that. And I'd definitely not want to have to do that for stuff that's going to stay present in production code, but large code bases can reach a state where it is 'uneconomic' to write good quality code. This is a very bad state for a codebase to be in - but it does happen.
You know what? It's been a while since I did PHP full time that I forgot about magic methods.
I'm really not sure about putting this functionality in the web application itself. There are always other layers sitting in front of the web app, at an absolute minimum a web server, and this approach means that those layers will continue to receive traffic from banned IP addresses. It's probably better to rely on a reverse proxy like Cloudflare to do this for you rather than try to handle it in the application layer.
This.
Understood, I was rushing my comment because I was headed to a meeting.
This is the best response &amp; links to the information that pretty much cover the industry standard for branching strategies.
More or less this. We also have autoversioning from Jenkins with custom software. Our commit messages have a specific prefix (e.x. `[minor]`) and based on git history a new version number will be generated.
I started back when you did (roughly, 1998) &amp; have been exposed to a lot of stuff as I've gone along the way. I've had a few jobs since 2012 when I was first introduced to Git Flow, but almost of those positions have used it mostly the same. Git Flow is a "branching strategy" &amp; just a set of guidelines for projects with many developers. For a single developer, it's mostly overkill, but still useful. All the links/info is basically based on what [Max-\_-Power](https://www.reddit.com/user/Max-_-Power/) linked. My overview of Git Flow based on the Atlassian model is thus: * You need 2 trunk branches: * `master` (stable) * `develop` (cutting edge) * Any new features are forked from `develop` and labeled as `feature/some-feature-name`. * A code review is completed before allowing it into `develop` and if it passes, it's merged/rebased. * A pull (aka merge) request is created to go from `feature` to `develop` &amp; deployed to your development environment * When all your feature development is complete &amp; you are ready to release it, you create a short lived `release` branch off of `develop` * This branch name is labeled release/1.0.0-major-feature ([Semantic Versioning!](https://semver.org/)) * This branch allows development on `develop` to continue &amp; allows any issues found in testing to stay focused on the release changeset. * Deploy this branch to your QA/Stage environment * Any bugs found by QA/testing is fixed on the `release` branch while any other development continues on the `develop` branch * Once QA/Product Owners/Stake Holders/etc approve of the release, create a new pull request for `release` into `master` * Tag `master` with your new version when it is merged/approved * Once it is deployed and all is well, merge `develop` into `master` to get any fixes/changes from `release` branch. * If there is an issue with production, create a new branch from `master` labeled `hotfix/1.0.1-issue-desc` * Doing this keeps any untested development changes out of prod &amp; keeps the changeset minimal * Deploy `hotfix` branch to stage, test, test, test * Once fixed &amp; approved, a new merge request for `hotfix` to `master` * Once merged, another merge request for `master` back to `develop` to get those changes back (forgetting to do this creates regression bugs!) Hopefully this makes sense. It seems like a lot, but really you're only dealing with one section at a time depending on your release cycle. For 2 week sprints, you're working on feature branches most of the time. As you finish, you're creating a merge request for code review &amp; then moving on to the next feature. At the end of the sprint, you'll be focusing on any fixes QA finds &amp; then the release portion. It will be more natural after 2-3 releases.
At the moment i have only this tutorial in english [https://zawiszaty.github.io/symfony-prooph-example/#/](https://zawiszaty.github.io/symfony-prooph-example/#/) but maybe you can view this repository [https://github.com/zawiszaty/symfony\_simple\_crud\_example](https://github.com/zawiszaty/symfony_simple_crud_example) I am creator of this stuff and I will be glad of your opinion about the stuff ;)
I think this is an underestimated topic and salute you for this post, even though I couldn't help myself but notice that the serif font this article uses is not ideal itself. I am red-green deficient and spent at least hours if not days on configuring my IDE to get the best results concerning general readability and warnings, patterns and folding rules in order to get the best experience. These settings are an enormous factor for my productivity and I sometimes wonder how some people put so little emphasis on such settings in general.
I’ve recently forked the openapi generator to create an extended version of their Laravel server generator. It was fairly painless and may be something to look into. The symfony and slim generators they have can be used as fairly robust examples to get you started. The one I’m using now includes validation request classes, controllers, route files, serializable response objects that represent the schema components, validation for those response objects, and interfaces for the application to fetch the necessary data. This is all generated from the openapi spec and only took a few days to do. You should be able to create something similar that is framework agnostic in a short time.
Maybe if we get C# style properties to replace getters and setters and initializer syntax to replace fluent setters. But not yet.
If the rules say "no posting code here" then that would make sense. Asking for clarity in a question about API consistency, is an interesting topic to some. It's unfortunate that you are a perennial bad-faith wart on the subreddit.
\*\*tl;dr;\*\* I reply only to your title, because according to comments the body is about some git flow questions? &amp;#x200B; So if you want to help in short tem with open-source code, I have 3 options where I can share my tips in code-reviews: &amp;#x200B; We have Czech PHP community open-sourced: [https://pehapkari.cz/](https://pehapkari.cz/) \- here [https://github.com/pehapkari/pehapkari.cz](https://github.com/pehapkari/pehapkari.cz) Deploy happens \~5-10 mins to Digital Ocean via SSH (I think, my friends, is the dev-ops guy:)) after each merge, due to static control and other checks) &amp;#x200B; My personal blog website is smaller and easier to work with; static website + PHP [https://www.tomasvotruba.cz/](https://www.tomasvotruba.cz/) \- [https://github.com/tomasVotruba/tomasvotruba.cz/](https://github.com/tomasVotruba/tomasvotruba.cz/) Deploy is right to Github Pages free hosting, usually 3-4 mins after merge (again static control) &amp;#x200B; If you're into AST, instant upgrades, being lazy, migrate frameworks in a day (my favorite) and want to learn about it - come here [https://github.com/rectorphp/rector](https://github.com/rectorphp/rector) &amp;#x200B; If I miss-understood your question, I'm sorry and please ignore this. &amp;#x200B; But if I got it right :) and you want to help/learn , ping me there with what you want,
On GitHub, you can search for `label: good first issue language: php` to get a whole list of em.
Large-scope project with dedicated internal &amp; external maintainers &amp; gatekeepers, but feel free to check out [the Magento 2 repo](https://github.com/magento/magento2) for some idea of organizing &amp; working with a large group of contributors.
A good example that nothing is set in stone... if you work with legacy projects, which is often the case, it will be difficult to avoid using globalw. As always, "it depends". Still, I would set a strategy to refactor step by step this kind of project, if possible. Thanks for your example!
Nope. Controllers in Laravel are not required to extend any framework classes and you can type-hint a PSR-7 request in your constructor or methods and have it automatically injected.
Was about to post the same link to the gitlab flow. What OP says... We (team of 4 devs) have been using this for +1yr, and everything works very smooth. . TL;DR (skipping lots of info that you can read on the [gitlab-flow](https://docs.gitlab.com/ee/workflow/gitlab_flow.html) page): 1) create issue 2) create branch of issue 3) solve issue in branch 4) merge in master (issue gets status "solved" automatically) 5) merge to the "production" branch 6) use CI/CD pipelines for deployment of that production branch to all the production servers . For us "master" is the latest code that _should_ work and can be tested by everyone. Branch "production" is the code that actually goes to production. So a merge to production is a deploy to the production servers.
Sweet, thanks!!
Some good resources on design patterns: [https://designpatternsphp.readthedocs.io/en/latest/](https://designpatternsphp.readthedocs.io/en/latest/) [https://refactoring.guru/design-patterns/php](https://refactoring.guru/design-patterns/php)
Your ability to understand the course of the comments thread is just unsurpassable.
I've checked only those mostly misuderstood ones (as usual), and second link is probably best resource on design patterns I've encountered on the internet.
&gt;Use a light colour scheme Nope!! Use a dark color scheme when working indoors, switch to a light color scheme when working outside (sun makes a dark scheme non-readable) But use whatever works best for your eyes! (My left eye almost popped out in an accident, and has been VERY light sensitive since then)
Is this Jira you’re using for tickets?
We use this method as well, but we let QA at the branch before it gets to code review. On the odd case where code review requires significant changes, we send it back for a quick QA to confirm nothing broke.
Well yes, but actually no. I did see [Nikita Popov's slides from PHPRussia2019](https://twitter.com/nikita_ppv/status/1130188147940352000) on Twitter where they talked about property accessors (21). Now that's exciting to think about instead. Actually, quite a few exciting "potentially, maybe, future" things are talked about in those slides. I suppose you're right when talking about simple DTOs that don't need any validation or special handling, though. Anything more complex than that...
How do i subtract claps from an article?
Yup
&gt; That being said, I haven't seen this actually cause problems in practice (i.e. working on a team). We've been writing Symfony code at my company for a year or two now, and not once in that time have I seen someone, say, try to define routes with something other than annotations, or randomly start writing XML configuration when everything else is in YAML. The reality is no one agrees on which way is best there. The community is quite fragmented in that regard and not all formats provide the same features either (e.g. you have finer control on the routes ordering with XML/YAML rather than annotations).
please do! We're getting close to launch v4!
This is good as well because well established open source repos like symfony will likely be more willing to lend a hand and help you contribute to their product.
Instead of docblocks, use PHP. Much better than useless comment folding :)
This is what reduced my cognitive overload a lot: [https://laracasts.com/series/how-to-be-awesome-in-phpstorm](https://laracasts.com/series/how-to-be-awesome-in-phpstorm) &amp;#x200B; Jeffrey killed it in this series!
So basically diffing a mysql schema dump?
Hi Everyone ! &amp;#x200B; I've made a small package to handle Wordpress ajax in a more object oriented way, any feedback on it ? I also wrote an article explaining how to use it, I'm sorry in advance for my poor english ! (tell me if you spot any mistake) &amp;#x200B; I'd love any feedback ! :D &amp;#x200B; Thanks !
Interesting advice. I tend to use dark themes as dark as they come, and super compact fonts, small letters and line height both. I just might try the alternative if there's supposed to be a noticeable difference.
&gt; everyone couldn't handle checking code into master directly You should have told them to stop checking code into master directly.
I use larastan? I'm not sure how they do it :-/
It'd love to see this flow but as just git commands...
If you don't know what cyclomatic complexity is, you need to check your assertion that you're a senior programmer, of any language.
You're out of luck: The guiding knowledge is that composition is almost always preferential to inheritance.
Then ipso facto, I'm the only senior on my team. I have to spend 33-66% of my time hand holding these guys through code reviews, etc. :-/
That is stupid. The average number of years of experience on my team is 12.5 years. None of them knew what composer was, had never used it, had no idea how it worked. 90% of them did not know what autoloading was and for the last 7 years had relied upon a myriad of `require_once`s, like it was 2005. 1 of them tried to create an autoloader back in the day, but failed. I added an autoloader (via composer) and he literally quit the next day, after yelling that he had 20+ years experience and I responded "Well, I do, too, buddy!" since I started PHP @ 16 in 1998. I would say that the average actual level of knowledge of this team is about 2-3 years of self-taught skill. I got them to each, individually, sit in the interviews for the new Senior devs. I ask the same basic questions: 1. "Do you know what composer is?" 2. "Have you ever used feature branches?" [no one in the office had ever done them] 3. "Do you know what Slack is?" [no one in the office had ever heard of it!] 4. "DO you know how to write PHPUnit tests?" So many of the interviewees were like "Why do you ask me these basic questions for a senior position?" and then I launch into the main ones, right? But the existing devs @ this company, they've become very ... quiet. Two of them came to me independently and asked me if I thought the Junior dev should be elevated to a Senior sicne in the last 3 months, he's learned all these concepts and more (he studies so much what I give him at night) and I say, Hell yes. That he's going to have a review in 3 more months just for that. Anyway, I think they're having their humble moment. They asked the CTO for hours a day to catch up and he laughed and said, "You should fix your educational deficiencies at home on your own time."
Hi, check out Padma Unlimited theme, it's a WordPress framework (PHP, jQuery, js, CSS, etc) maybe you can help with some code https://github.com/PadmaUnlimited/padma-theme
You're totally wrong about the name lengths.
Serverless is for fucks who never bothered to learn Linux and/or Docker.
Looks fantastic! Will definitely give it a try next time I have to do a WordPress site. I’ve managed to find OOP ways of doing a lot of things in WordPress but Ajax is still ugly.
Have devs make branches. And then submit a PR (pull request) into master. Either give only you the ability to approve and merge code, or just tell them, no one else can do the approval/merging
that code folding by default seems like a cool tip i’m excited to try out. my index finder gets fatigued from scrolling, then i end up using page up and down but it’s not terribly precise. are you saying that we need to adjust brightness when using a light theme? seems kind of like maybe find a happy medium between light and dark? i find the font does make a pretty big difference. this kind of article usually gets pretty heated so thanks for taking the risk of writing and sharing. even one tip that improves someone’s coding life is worth it!
I am triying to make a regular for groups of words in the following form &lt;some text &gt;&lt;some text &gt;&lt;aome text&gt; and so an indefinite number of times but the regular expression (&lt;\[a-zA-Z0-9 \]+&gt;)+ does'nt matches the entries so I would like to know which regular expression should I use for this purpose. I am using CakePHP if that affects in something
If you could help me figure out how to Docker compose or make a unit test for Laconia, that would be awesome. https://github.com/taniarascia/laconia Laconia is an MVC framework made from scratch h in vanilla PHP 7.2 with no dependencies.
Serverless is a word that somehow manages to be more nebulous in meaning than 'cloud'.
Very interesting, so the premise here is someone is willing to pay someone else to do some work? I'm sure the PHP community will be amazed by this news.
Have you checked out the WP REST API?
SchemaKeeper works only with PostgreSQL. If someone wants to add MySQL support, welcome to contributors. As far as I know, `mysqldump` saves all database structure in single .sql file. SchemaKeeper divides database structure to separate files (every table has own file, every function has own file, etc), groups all files into directories (all tables in directory "tables", all functions in directory "functions", etc). See example here [https://github.com/dmytro-demchyna/schema-keeper#save](https://github.com/dmytro-demchyna/schema-keeper#save) . Such approach improves comfort of code review and minimizes possibility of VCS conflicts. `mysqldump` also hasn't function to compare saved dump with actual database structure. SchemaKeeper has function "verify" for that. Besides functional for saving and verifying database structure, SchemaKeeper provides function "deploy" that works only with stored procedures. "deploy" was designed to rid of the need include source code of stored procedures into migration files. See description here [https://github.com/dmytro-demchyna/schema-keeper#deploy](https://github.com/dmytro-demchyna/schema-keeper#deploy)
Leading a team of juniors remotely will be a fun experience.
I bet this will run your app on a amazon server and not a desktop.
lol no. My setters know how yo setUp things and the getters know what to return. Variables dont know that.
I'ts a first step, but as you say, we now need mutability definitions
A better list of new features in Symfony 4.3 can be found here: * https://symfony.com/blog/symfony-4-3-curated-new-features The blog post is automated, so doesn't have much information really.
(psst... your code formatting is broken - indent with 4 spaces for code blocks.)
Looks like that was just announced with 4.3
Thanks! Great response!
Instant upgrades for Symfony 4.3 in Rector: [https://github.com/rectorphp/rector/blob/master/config/level/symfony/symfony43.yaml](https://github.com/rectorphp/rector/blob/master/config/level/symfony/symfony43.yaml)
Good tip!
I do so love Rector.
&gt; You're out of luck: The guiding knowledge is that composition is almost always preferential to inheritance. The guiding knowledge is that you should use the correct practice for the code that you're writing. Composition is not an "almost always" solution in general. &gt; And, if a guy has been coding for the last 10 years and Does Not Know about design patterns, it means they are so out of touch with good dev practices that there is something terribly, horribly wrong. [...] And I have NEVER EVER seen anyone independently invent and implement an abstract factory. Many developers lack formal education these days, and it's very common to not know about design patterns. Luckily, it is also common for those of a senior level to have arrived at many design patterns independently, some more unsurprising than others. Adapter, for example, is near ubiquitous, whether you've ever heard of design patterns or not. As is Factory Method, and to a lesser extent, Builder. Abstract Factory, which you singled out, is probably not as common as others, but it wouldn't surprise me, as the concept is simple enough. I think you're assigning too much weight to patterns in general, though. A senior dev can pick up and become adept at most patterns in an afternoon. If you would turn away a candidate for not knowing what Abstract Factory was, you would almost assuredly be shooting yourself in the foot. All of my best developers have had gaps in their knowledge that were as varied as the people themselves. What makes a senior dev a senior dev are the intangibles, but those are much harder to gauge in the interview process, so we tend to hyper-focus on the tangibles, to our detriment. You should be hiring excellent problem solvers and leaders/mentors with natural curiosity. Those are things a developer can't just pick up in an afternoon spent on Google. Abstract Factory shouldn't even register on your hiring radar, really. &gt; Same goes for devs w/ 15 years experience who only know mysqli_functions() and have no idea what composer is. Yes, that's most of the people I work with right now, who proudly proclaim 12+ years experience and seniority level "skills". There is nothing wrong with `mysqli` itself. What I would be more concerned with is whether they use abstractions for it, or whether they don't know of any (or shun them) in favor of using `mysqli` directly. The same would go for `PDO`, mind you. But if it's just down to what they prefer to stuff into their repositories, then it's all the same to me. Not knowing what Composer is would be a red flag, however. Not because it couldn't easily be taught, but because it's been ubiquitous for quite a long time now, and ignorance of it demonstrates that the dev isn't following the industry at all. That said, I would still look to see whether the problem solving and leadership qualities were present.
&gt; It'd be a lot easier for everyone involved if they simply declared one opinionated Right Way to do things This would be a huge mistake, especially if you consider how rapidly things can change in the dev world. If you want a real example, Symfony always supported propel/doctrine1/doctrine2, they let the community eventually decide which was the best option. On the other hand, Laravel has no support for anything but Eloquent out of the box, and as a result there are a bunch of Laravellers busy rediscovering why the Mapper is so much better than AR, and reinventing it in some scary ways.
&amp;#x200B; I'm just curious, and throwing this out there.... &amp;#x200B; If some total unknown stranger showed up on Reddit today, and said, "here, I got this really cool and new CMS, check it out", then proceeded to show you the base Wordpress install, what would you say? &amp;#x200B; I'm honestly curious, if Wordpress was completely unknown at the moment, and it was just some random stranger pitching it, how would you critique it? How well would it be received within this PHP reddit community?
PS. Not that this will ever get read by the appropriate people, but /r/php mods, just a heads up that the post contents box when making a new post can't be found by blind people using a screen reader. I can find the buttons as to whether it's a post, link, image, video and image, etc.... but clicking on that "post" button doesn't change the visible form elements for me. That's why for /r/php only, I have to make a blank post, then my actual post as a comment. The rest of the sub-reddits are find in manner, and I can find the message contents box nnp. Just fyi...
&gt;I don't like Symfony's routing. You can choose between 4 ways of defining routes. They're all quite similar, it's not difficult to understand each when reading code, and there is the debug command. I think much worse is that annotations are the accepted way to do routing as it keeps the route next to the code it points to, however there is no longer any support for that in Laraland as the lib has been abandoned (correct me if wrong). I totally get that multiple ways to do things is a pain, and sure the docs get a bit bloated, but supporting them all and letting the community decide what works and what doesn't is worth it. E.g. annotations suck for everything except routing and orm, but for those two they are magic ... who could have predicted that?
&gt;I've checked only those mostly misuderstood ones (as usual), and second link is probably best resource on design patterns I've encountered on the internet. I have another bookmark somewhere to a (long) Github gist that was very extensive with examples and explanations but I just can't find the link. So if anyone can recall what I'm talking about feel free to drop the link in here.
It's because it isn't there at all, regardless of sightedness - text posts on the new Reddit layout have been specifically set (in /r/PHP) to not have a text body.
Ok, well I guess that explains why I couldn't find the textarea box. It's not there! So where do people put the contents of their messages then? Or is this a video / image only sub-reddit?
I'd probably use every negative word that exists, if I look at it from engineering / architectural point of view. However, that's shortsighted. Wordpress is something that evolved through more than a decade, it was conceived at the time when there were no frameworks - in 2003. When we had no autoloaders, no composer, no good practices, no php-fpm, no scaling options, no redis, no memcached etc. Given the limitations mentioned above, it still managed to evolve into something that people use to provide extensions for - and that's what makes it great, conceptually. &amp;#x200B; But from engineering POV: \- no framework used. That means one has to navigate the code without guidance or reference \- no clear structure. That means anyone can extend it with code and create total cabbage-code garbage \- database operations are done manually, not via an ORM (falls under no-framework point) \- no structure means no central place to collect and handle errors. An error can pop up anywhere \- upload mechanism assumes underlying OS's file system for storage, there's no virtual file system like with Laravel. This is important for scaling when one machine isn't enough to satisfy the concurrency/performance. No virtual file system means that the machine processing request refers to its own file system which ultimately leads to myriad of errors \- depends on records in database to provide current URL for code to work - this makes it difficult to move the database around and switch domain names (such as [test.wordpressinstance.com](https://test.wordpressinstance.com), [uat.wordpressinstance.com](https://uat.wordpressinstance.com) etc.). While adding additional subdomains and moving the db around, you also have to update the database with correct hostname or it won't work. \- no prior (programming) knowledge required in order to create a plugin - there's no interface that one must extend, thus there's no "contract" and no mechanism that can "cold-start" a plugin to check if it's working or not, if it's malicious or not. Basically, you blindly trust that the plugin is going to be just fine &amp;#x200B; Good parts: \- plugin system. That's the best feature WP has \- backend UI \- theming &amp;#x200B; &amp;#x200B; Wordpress is a code-soup that non-technical people can fiddle with. That's what makes it great and awful at the same time. If we had no WP today and someone created it, then asked to critique it on reddit - I'd probably rate it 2/10 from every possible angle. &amp;#x200B; However, it's not the best engineered product that provides value. It's the most useful one that does so. And while WP is not the best product from engineering POV, it is something that helped millions of people to create value and gain value. That's why Wordpress is amazing and that proves that even though computer-stuff is 0 or 1, humans aren't.
Did not know about this, thanks. It will be added in my list of tool. My day only start, and you already made it successful
video/image/link generally, supposedly to persuade people not to ask for help... not a choice I'd make, but then I'm not an admin :)
Is there a specific reason not to use `declare(strict_types=1);`? [https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict](https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict)
&gt; We shouldn't overdo it though: docblocks and comments often state the obvious things, which are already known by reading the code. &gt; &gt; After several years of programming, I can safely say that about 80-90% of comments are redundant. Completely agree with this part. So much that I started with a tool called [php-doc-check](https://github.com/NielsdeBlaauw/php-doc-check) this year (shameless plug). Documenting the obvious not only increases cognitive load, but also creates overhead (and is often forgotten) when the code actually updates.
While I agree with everything exposed. I have to say that people evolves products that resists to change through libraries. Take a notable mention of [https://github.com/corcel/corcel](https://github.com/corcel/corcel) library that allows you to decouple the Wordpress Backend with the Wordpress frontend.
Is this because of the criticism your own platform received? WP already gets a lot of shit anyway (and rightly so engineering wise) but it definitely has merit as a platform just due to the fact that at the time of its inception there wasn’t much similar and it’s allowed people to get up and running very quickly who may not otherwise be interested in seriously coding an application. But contextually speaking if someone made WP now and asked for critique it would probably get destroyed.
You can care about scrappers for other reasons than performance. You may not want competitors to have a database of everything you're selling on your website for example
I like the less line spacing more for some reason. The blocks of code seem more obvious. My biggest problem is finding the right font. I stick with either consolas, monaco or courier new, have tried source code pro (/&gt; looks weird with this font), anonymous pro (kinda like it) and a myriad of others. Would love to find new ones. Some look great in samples but look weird or different in Atom.
Humans.
(I think I might create a new user called "releasebot" or something, given my recent posts...)
Being an open source, its components are free to use and distribute. It is developed and updated by a broad community of developers around the world, making it free for those who want to develop their websites using it. Open source has rich features and features, which makes it very beneficial for any website. You can find a PHP developer to make your website one of the most useful and dynamic of all time.
Huh? It all depends on what your PHP script is doing. Best answer that can be provided to this poorly worded question is "never trust user input". Make sure you sanitise every bit of input to your script/app.
We can see what shitcode a Web Development Service would prodice in this very sub. Every single damned day such services post blogspam articles full with sql injections, unmaintainable code, errors and vulnerabilities of all sorts. So thank you, begone.
Yeah and just configure it to post only about minor releases, leaving bugfixes alone. There are maillists if you are in charge of security.
Thank you to all contributers!
Thanks! :) I'm happy! Few minutes ago I've added 50 more cases that were changed in Symfony 4.3 + tagged https://mobile.twitter.com/rectorphp/status/1134047863363837952
Awesome :) if you have any troubles, just create an issue
WordPress doesn't have any centralised dependency management, which makes using Composer like this problematic if you are planning on distributing the plugin/ theme out to environments where you don't completely control the ecosystem. There's a few [articles](https://wptavern.com/a-narrative-of-using-composer-in-a-wordpress-plugin) on it if you google WordPress and Composer; Also it's WordPress with a capital P.
This is the worst answer actually. On many levels. A few for starter - nobody on the Earth knows what does the freckin' "sanitize" mean. It's easy to claim but hard to implement. To give you a real life analogy, if I sanitize my money with antibacterial gel, would it make it safe from theft? - PHP once actually followed this advise, trying to arbitrary "sanitise every bit of input", with a feature called "magic quotes". You may find it interesting to learn its fate.
If you showed me the software in action I'd be like "this is good". It's not popular for no reason after all. If you asked me to critique the code, I would be like "this is bad".
I have been programming a long time and do remember the magic quotes days. That particular "solution" created more problems than it solved. It also encouraged sloppy programming where inputs were not checked. This is why it is no longer a thing. Your analogy sucks and just shows you are overthinking it. There is no one single magic solution to protecting any script. Making sure all input is checked and handled appropriately is a good place to start.
&gt; - no framework used. That means one has to navigate the code without guidance or reference WordPress is essentially its own framework. It provides a number of utilities and abstraction layers over pure php. There's a database class and globally available instance, routing, template loading and helpers, response helpers (e.g. `wp_send_json`, and various querying classes (eg. `WP_Query`, `WP_Term_Query`, etc). &gt; - no clear structure. That means anyone can extend it with code and create total cabbage-code garbage Themes have a structure. You could argue that the bare minimum is `style.css` and `index.php` and you can go wild from there, and that is true. But realistically most theme authors will use the template loading structure and helper methods. Plugins also as a bare minimum just require a single PHP file with a docblock. But again there are a lot of utility methods in WordPress to avoid writing terrible code. For example in both WordPress and Laravel you could DIY an ajax call by directly POSTing to `wp-content/plugins/my-plugin/my-plugin.php` or `public/my-plugin.php` respectively. But that would be foolish in both cases. In WordPress you can register ajax calls with admin ajax and in Laravel you should write a route, controller, etc instead of slapping random files in the public directory. &gt; - database operations are done manually, not via an ORM (falls under no-framework point) WordPress has a bunch of actually quite powerful querying classes. `WP_Query`, `WP_Term_Query`, `WP_Comment_Query`, etc that abstract away from the database and mean you can query database content without writing SQL. There are also model-like classes such as `WP_Post` and `WP_Comment` that allow you to retrieve, create, and update resources without resorting to manually querying the database.
&gt; There is no one single magic solution to protecting any script. That's why telling someone to "sanitise every bit of input" is a dick move because you cannot actually tell what and how needs to be "sanitized".
So sorry that I am not writing your code for you and that you might have to think for a bit.
You'll read better and your eyes will not be too stressed (they sure will, but I noticed I was less tired after a day of work) . This was my main reason for switching to bigger fonts and line height. But with better readability, you'll understand better what's written too.
&gt; Use code folding I agree on most points, but personally instead of code folding, I prefer using an IDE's structure view. (Actually, I don't know whether other IDEs have this feature, but PhpStorm does.) It lets you see the same details as with code folding, but also lets you jump around the code more quickly and re-order things if you like.
Maybe it's time to start learn something new... ;)
I hope this version is much easier to use!
Nobody asked you to write anything. I can quite realize *what* you can write, so thank you but no. You were only asked not to give out pointless suggestions. &gt; Use the right filter functions which is designed to filter the input you are accepting. Okay, I am accepting a string. According to your suggestion, I should use filter_var($str, FILTER_SANITIZE_STRING); will it make the input safe to prevent SQL injection? Local File inclusion? XSS through a JavaScript variable or a query string parameter?
Honestly, I do half of it through PHPStorm's git module, so I don't actually know the commands. Yes, I'm a heretic gui git user.
Honestly, once I started I doubt I could stop. Off the top of my head: * Doesn't use Composer (unless you use something like Bedrock) * Doesn't use PSR2 as the coding standard * Doesn't use the modern password hashing API, so passwords aren't strong enough unless you install a plugin to use Bcrypt * Not namespaced * Most of the code base is procedural, which is difficult for something that size * Lacks a proper templating system, making it too easy for developers to put application logic in theme templates * Rubbish database interface - a proper ORM would help a lot * Uses globals far too much
If you have to distribute it via The normal WP theme/plugin ecosystem you just commit the dependencies to the repo. Personally I use [Bedrock](https://roots.io/bedrock/), which makes WordPress itself a Composer dependency for your project.
Doing that will cause fatal errors if another plugin tries to load the same dependencies.
But it still works, and quite well. &gt; Packing the entire app into one single lambda is antithetical to what serverless/lambda is about. I am afraid you are taking things to the letter. A Symfony app doesn't have to be this use blob of a legacy codebase that does too many things.
If it works then go with it. I wouldn't do it. I added an edit, I think if you really wanted to have it serverless, you could package it up in a docker image and deploy it to a Fargate task. You could still have the API Gateway setup like you do but it would load the Fargate task instead of the Lambda.
Yep. Lots of WP plugins don’t play well together Composer or no. But if you’re in the business of building WP tools as Composer packages, your target audience is probably PHP devs who can figure this out and not hobbyists who depend on plug and play solutions from the plugin marketplace.
Easier to use than what? This is just a bugfix release.
Hi, thanks, I forgot to put it :) It's been added !
Hi, I'm happy that you can find value in it ! :)
I pretty much agree with this, though I use injection personally. If I'm writing a service class or something that I want to be more framework agnostic then 100% of the time I'm injecting. But controllers? Eh. The only thing I'd say is using injection can make it more obvious when it's getting to the point of refactoring from doing a bunch of stuff in a controller to rolling that up as a job or a service class or whatever.
Someone should let them know over at /Drupal
yeah but a captcha you need to enter once is not going to prevent that at all. I write scrapers all the time and it's trivial to bypass almost any protection.
&gt; WordPress is essentially its own framework. It provides a number of utilities and abstraction layers over pure php. You can say that for almost anything written in PHP. Even the sites created in 1999 contained functions that are essentially abstraction layers. Wordpress is a framework as much as Laravel, Lumen, Symfony, Silex, ZF, CodeIgniter, Phalcon, Kohana are content management systems. &amp;#x200B; &gt; Themes have a structure Themes aren't what processes and deals with HTTP request and services (MySQL, Redis etc) that are require to make Wordpress tick. You can stick any file anywhere within WP's filesystem, you can include whatever file you want in that file and something might or might not happen. There's virtually no control of HTTP request in the same way you have it in Symfony/Laravel. You can basically do whatever wherever whenever. &amp;#x200B; &gt; WordPress has a bunch of actually quite powerful querying classes. Are they powerful? What if I add an additional table? Will I, by taking a look at the file structure, have any idea what tables my WP plays with? How about how those tables are structured? Can I open some file that'll tell me what relations are, what columns there are, what table engine is being used and so on? I won't. &amp;#x200B; Let me finish off with a simple example: if I were to hand you a project written in Symfony or Laravel and if I told you "It doesn't work" (yes, ambiguous as that) and if I did the same with a Wordpress site - what do you think, would it be easier for you to deal with Symfony/Laravel based project or a Wordpress one? Let's assume you never used Wordpress or Symfony/Laravel, you just know PHP. What's easier to navigate and get info on? A framework with clearly defined structure/interfaces/features or Wordpress, a CMS where anything goes? &amp;#x200B; A disciplined person CAN use Wordpress as if it's a framework. I'm not saying it's impossible, but it's impractical. It's an excellent tool that has its target audience and it solves one particular problem, but I wouldn't use WP to construct a websocket or gaming server. On the other hand, if I were to use Swoole + Lumen, I can basically make any crazy thing work, I can maintain a logical structure, my code can be self-documenting just through careful naming and you'd be able to find out what SQL tables I use, if any at all, where the config is, what services are bootstrapped and so on.
Probably, but I don't think this article is quite at that level. If you're still at the point of putting functions in the global namespace then referencing them in actions using strings, then I don't think it's a good idea to jump on composer without first knowing some of the pitfalls it has with WordPress.
&gt; You can say that for almost anything written in PHP. Even the sites created in 1999 contained functions that are essentially abstraction layers. &gt; Wordpress is a framework as much as Laravel, Lumen, Symfony, Silex, ZF, CodeIgniter, Phalcon, Kohana are content management systems. WordPress is not a general purpose framework, it's a CMS that has utilities for doing CMS stuff. But those utilities, such as `WP_Query` are pretty good so long as you don't look too deeply at some of the internals. &gt;You can stick any file anywhere within WP's filesystem, you can include whatever file you want in that file and something might or might not happen. You can do the same thing with Laravel, Lumen, etc &gt;There's virtually no control of HTTP request in the same way you have it in Symfony/Laravel. You can basically do whatever wherever whenever. Unforunately WordPress predates abstracting the HTTP layer like this by like a decade. I think that ship has probably sailed for WordPress and retrofitting it into the core is impossible at this point. From experience, PrestaShop has tried to fuse Symfony components into an otherwise bespoke codebase and it's not pretty. &gt;&gt; WordPress has a bunch of actually quite powerful querying classes. &gt; &gt; Are they powerful? What if I add an additional table? Will I, by taking a look at the file structure, have any idea what tables my WP plays with? How about how those tables are structured? Can I open some file that'll tell me what relations are, what columns there are, what table engine is being used and so on? &gt; &gt; I won't. Yes, play around with `WP_Meta_Query` and some of the resulting queries you can produce using post metadata. It has the problems assiocated with key value tables, but for small to medium size sites you can store arbitrary data easily and run custom queries against it easily without needing to put any thought into bespoke tables or writing SQL. Once you do start needing custom tables, you are pretty much on your own. There are hooks to fuse the query classes into custom tables if you want, but those have limited use depending on your use case.
It was difficult for me to figure out what the problem was!
It was very difficult for me to figure out the problem!
Good point there.
Hi, thanks for your feedback ! I have read this article, thanks for sharing, I didn't think about that but since this package is quite small and aimed to theme developers (even though I think you could make it work inside plugins) this ain't big of a deal to me. Also, as the author of the article says, you can change namespaces to make it work or even just download the files and add them in your theme (since it's just 2 files) which wouldn't take long. I believe this is not big of a deal if you are used to work with WordPress themes development \^\^ &amp;#x200B; Thanks for your comment !
Hi, not really, I still manage my ajax this way, I hadn't much time to look really into how works WP REST API, maybe you could give me hint how you would refactor this package using the REST API ? &amp;#x200B; Thanks !
&gt;You can do the same thing with Laravel, Lumen, etc See, that's not really true. With WP, you create files, those files are what you can execute if you place the name in the URL. With frameworks, you resort to defining routes -&gt; controllers. Wordpress web root is the actual root of the files. Laravel's web root is laravel\_files/public -&gt; that's quite a difference. &amp;#x200B; I can understand all of your points, but the fact that we're having this discussion where you quote me and then say "but you can do Y if you X" is what de-facto proves that WP is not a framework. Since it's not a framework, it hasn't got a **clear, set in-stone structure**. I never stated it has **no** structure. &amp;#x200B; Ultimately, if you're capable of finding your way around it, that's great. I, on the other hand, will do everything in my power to avoid having to work with it.
&gt; Doesn't use Composer (unless you use something like Bedrock) &gt; Doesn't use PSR2 as the coding standard &gt; Not namespaced Eehhhh these are just because it's an old project though. (other points are valid!)
You can write bad code with any framework or CMS. I've seen a Laravel application where someone had used echoed out json in a controller method and then killed the application with `die();`. Another where someone had slapped a PDO instantiation in a the AppServiceProvider with hardcoded credentials and was using that instead of the query builder or Eloquent. It's quite possible to write good websites build on top of WordPress with modern architecture and design. Equally it's possible to stick your entire application inside Laravel's index.php file.
Api-platform.com is fantastic
Woo, looking forward to playing with mailer.
The main problem is that in order to defend against the entire world, you have to know the entire world plus their tools.
Wow I didn't know this tool existed, amazing work man! Looks super awesome. Definitely going to give it a try :)
Nice PHParty.
Why do I find this cringy??? Why do the employees have military titles??? But the announcers voice is amazing, I want him at our company to announce our product launches :D
[https://www.wireshark.org/](https://www.wireshark.org/)
Windows user exiting `vi`?
&gt; sanitise Sanitising means removing “bad” things. This is the wrong approach. Validate if necessary and escape as appropriate. Don't mangle user input.
Are you looking into building something for - [`friendsofphp/php-cs-fixer`](https://github.com/FriendsOfPHP/PHP-CS-Fixer) - [`squizlabs/php_codesniffer`](https://github.com/squizlabs/PHP_CodeSniffer) ?
I'm looking into something that generates statistics, but thanks for these links. I'll look at these and see if I can figure out how they're handling it.
https://github.com/nikic/PHP-Parser may do the trick for you.
It definitely sounds like this is a job for `php-parser`, and it's a nice library to use. Getting a regular representation of a statement that can then be matched to a pattern shouldn't be too difficult.
How about something like https://github.com/facebook/pfff/wiki/Sgrep?
It has frequent security vulnerabilities and they are caused by its horrible codebase.
Thanks! I was just too lazy to upgrade all the PHP code in the world manually (or imagine every programmer would have to do it) :)
Amazing performance. Had no idea people felt this strongly about the language.
Because Serbia
&gt;Why do I find this cringy??? Maybe the youth choir rendition 'We Will Rock You' complete with foot-stomps, all for the benefit of some PHP developers?
Perhaps a bit too much excitement... Don't get me wrong, I think PHP is a powerful tool, but I've never once wanted to sing and dance for it. I'm sure they had fun though.
Other conferences have had PHP songs: https://www.youtube.com/watch?v=vOgVft2HQ8k PHP songs aren't at all common at conferences but they're also not without precedent. Although having a full youth choir is... new lol
What, like a PHP port of libpcap or something?
Workerman [GitHub](https://github.com/walkor/workerman) [Homepage](https://www.workerman.net/) [Docs](http://doc.workerman.net/) is pretty nice. Its main downside is that its primarily written in a non-english language which can be annoying having to translate things but its a very nice library. Heres some libraries built on top of it or for use with it for additional functionality. [BrowserQuest WorkerMan version](https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.com&amp;sl=auto&amp;sp=nmt4&amp;tl=en&amp;u=http://demos.workerman.net/browserquest/&amp;xid=17259,15700022,15700186,15700191,15700256,15700259&amp;usg=ALkJrhhlWXA6AJqyY5OyxQ58vnHwHS3k8w) BrowserQuest is a 2D graphics MMO (Massive Multiplayer Online) game released by Mozilla. Players can chat, blame, upgrade, treasure hunt and gain achievements. Here, based on the WorkerMan framework, the nodejs part of the BrowserQuest server is rewritten. The browser and the backend are also based on the websocket protocol communication. [PHPSocket.IO](https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.com&amp;sl=auto&amp;sp=nmt4&amp;tl=en&amp;u=https://www.workerman.net/phpsocket_io&amp;xid=17259,15700022,15700186,15700191,15700256,15700259&amp;usg=ALkJrhguf9kJOX2_4oFcl6zArTWu44Xy-Q) PHPSocket.IO is the PHP server version of Socket.IO. The PHP version of socket.io can be used to replace the traditional nodejs version of the socket.io server, and the interface is consistent with it, which can be used to develop cross-browser or mobile instant messaging applications such as Android and iOS. [Phptty](https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.com&amp;sl=auto&amp;sp=nmt4&amp;tl=en&amp;u=https://github.com/walkor/phptty&amp;xid=17259,15700022,15700186,15700191,15700256,15700259&amp;usg=ALkJrhidlJWn0ZYOyXUKocWYk8p-76nP7g) Phptty is a browser-based Linux terminal emulator that controls Linux terminal programs in the browser. The server is based on workerman development. Phptty can implement a lot of interesting features, such as using the htop command to view server load, tail -f real-time server error log, and more. [Web VMStat monitoring](https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.com&amp;sl=auto&amp;sp=nmt4&amp;tl=en&amp;u=http://demos.workerman.net/vmstat/&amp;xid=17259,15700022,15700186,15700191,15700256,15700259&amp;usg=ALkJrhjtpYTHSFS3NSnedICXjFwRqaJ3uw) A tool for viewing vmstat commands through a browser to display server cpu, memory, IO, etc. in a more user-friendly manner [Camera video stream real-time transmission](https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.com&amp;sl=auto&amp;sp=nmt4&amp;tl=en&amp;u=https://www.workerman.net/camera&amp;xid=17259,15700022,15700186,15700191,15700256,15700259&amp;usg=ALkJrhhISKjv-Y-qFvG3zTV2XcCUmHeHFQ) The webpage HTML5 calls the camera, uses websocket to transmit the camera video stream to the workerman in real time, and forwards it to other browsers in real time. [Flappy bird game multiplayer online](https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.com&amp;sl=auto&amp;sp=nmt4&amp;tl=en&amp;u=https://www.workerman.net/workerman-flappybird&amp;xid=17259,15700022,15700186,15700191,15700256,15700259&amp;usg=ALkJrhjPjcH2m8bYXmAhx3AzNl8oCT2aFA) Multiplayer online version of flappy bird, you can see countless players at the same time control the birds to go forward and send forward to death (funny) scene. [Thrift RPC Remote Call Framework](https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.com&amp;sl=auto&amp;sp=nmt4&amp;tl=en&amp;u=https://www.workerman.net/workerman-thrift&amp;xid=17259,15700022,15700186,15700191,15700256,15700259&amp;usg=ALkJrhitHY4ULjiAdciH04eVOqNMmwha4w) The combination of Workerman and the Thrift framework is designed to solve the problem of heterogeneous systems communicating with PHP, making your service more easily called by other languages. [Json RPC remote call framework](https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.com&amp;sl=auto&amp;sp=nmt4&amp;tl=en&amp;u=https://www.workerman.net/workerman-jsonrpc&amp;xid=17259,15700022,15700186,15700191,15700256,15700259&amp;usg=ALkJrhhoc2AMxipTlZ-Tu5jCmWq2EpLDsg) The remote calling system using json data format communication, the communication format is simple and clear, convenient for other language calls, and integrated monitoring module. [Distributed statistical system](https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.com&amp;sl=auto&amp;sp=nmt4&amp;tl=en&amp;u=https://www.workerman.net/workerman-statistics&amp;xid=17259,15700022,15700186,15700191,15700256,15700259&amp;usg=ALkJrhgooN6qO7cVNp_-21ZioViANpYhUA) A distributed statistical monitoring system based on php socket development, udp data reporting, distributed statistics, and automatic summary display of results. Pure PHP development, no need to install Mysql, Nginx, Apache and other software. [GatewayWorker framework](https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.com&amp;sl=auto&amp;sp=nmt4&amp;tl=en&amp;u=http://www.workerman.net/gatewaydoc/&amp;xid=17259,15700022,15700186,15700191,15700256,15700259&amp;usg=ALkJrhixjSs6hW1oP32iAf763Usfp28L0g) GatewayWorker is a TCP long connection framework based on Workerman's distributed deployment. It is designed to quickly develop TCP long connection applications, such as app push server, instant IM server, game server, internet of things, smart home, etc. [Distributed variable sharing component GlobalData](https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.com&amp;sl=auto&amp;sp=nmt4&amp;tl=en&amp;u=https://github.com/walkor/GlobalData&amp;xid=17259,15700022,15700186,15700191,15700256,15700259&amp;usg=ALkJrhgd6ilXR1otTQ0-_U0Z7HZ-uONbMw) Interprocess data sharing component for distributed data sharing. The server is based on Workerman. The client can be used with any PHP project.
Larry Wall's Three Great Virtues of a Programmer still stand: laziness, impatience, and hubris.
( Detailed Question ) Number of files in CMS like WP / Frameworks like Laravel run in thousands. That takes up a lot of the inode count on the server. **I can build on Laravel and Wordpress - I am looking for something basic, small and fast.** &amp;#x200B; I have to create a lot of small websites for small businesses. Is there a PHP framework (preferred) or CMS you can suggest for simple websites - pages, blog posts, image upload, photo gallery etc.
http://www.slimframework.com/
Depends what you're trying to do. Some tiny website that you know isn't going to blow up in traffic? I'd personally go with OctoberCMS.
Which problems?
I don’t believe you should worry about inside counts. Servers and space are so cheap. Could you provide more about your concerns?
Codeigniter version 3. &amp;#x200B; \- Very popular framework. \- Core framework files takes 2MB. \- Easy to learn and work with.
But...OctoberCMS is built on Laravel.
Sorry I meant GravCMS.. [https://getgrav.org/](https://getgrav.org/)
Grav cms www.getgrav.org. Nice, simple, and blazingly fast.
Have you ever actually run into a problem of running out of inodes? I've never seen that on filesystems with many millions of files, let alone something like a wordpress server. Making your CMS decision over something like this seems like odd priorities, that you'll probably regret in the future. You're going to have to work with this software for the life of all these projects. Wouldn't you want to just pick what's best for your workflow / projects? Reminds me a little bit of all the n00b questions in the linux subs asking which desktop environment they should pick for performance on their i7 + 16gb RAM + SSD system. Why make yourself suffer over something that will probably never be a problem? Just pick whatever suits you the most. Even if you really ran out of inodes, that seems like something fairly easily solvable by spending a few more $ on hosting, rather than possibly compromising on the most suitable functionality. But if you really want to prioritise saving inodes/performance... you could use phalcon, which is a compiled PHP module, so it doesn't even really use any files, aside from one binary module for the whole server. Although it's a framework, not a full CMS. &gt; I have to create a lot of small websites for small businesses. How many do you mean by "lots" ?
I had the issue often using Wordpress on shared hosting and then on VPS. &amp;#x200B; Note - These are not for Big projects or projects that can scale in future. I use other frameworks for that. This is for **developing countries market** so I end up hosting many sites on the same VPS server. **The RAM and CPU usage is almost never an issue** only limit is the inode count. &amp;#x200B; Most of these sites **barely get a few hundred visitors** a month. But the clients like the idea that they can change content ( they almost never do ). So I thought why not look for alternatives. Laravel/Wordpress is on overkill for sites like these. &amp;#x200B; Note - Writing in bold so someone glancing over the post can get the requirement.
Provided more details - Please see [this.](https://www.reddit.com/r/PHP/comments/bv3roz/suggest_a_small_php_framework_or_cms_with_less/epl44m8?utm_source=share&amp;utm_medium=web2x)
Reg Traffic - Please see [this.](https://www.reddit.com/r/PHP/comments/bv3roz/suggest_a_small_php_framework_or_cms_with_less/epl44m8?utm_source=share&amp;utm_medium=web2x)
I have been researching Grav. It looks very interesting. Does the flat file ever become an issue ? Say someone uploads a few 100 images or writes a 100 blog posts. ( Very unlikely scenario for my requirement ) OR if I have to implement text search for blog posts / pages. Is it an issue if there are say a 100 pages ? It will be of great help if you can suggest scenarios where you felt limited by Grav for a normal business website. ( Not looking at using it for complex apps).
I have been researching Grav. It looks very interesting. Does the flat file ever become an issue ? Say someone uploads a few 100 images or writes a 100 blog posts. ( Very unlikely scenario for my requirement ) OR if I have to implement text search for blog posts / pages. Is it an issue if there are say a 100 pages ? It will be of great help if you can suggest scenarios where you felt limited by Grav for a normal business website. ( Not looking at using it for complex apps).
In that case I'd go with grav and symlink the files.
I've got along with FatFree in the past. It's small and simple while maintaining a usable level of functionality. I think the core and routing engine come in one file. https://fatfreeframework.com/3.6/home
Thanks. I have used CI 3. I am just looking for lighter alternatives - not by file size but number of files. I have explained the requirements in detail - Please see [this.](https://www.reddit.com/r/PHP/comments/bv3roz/suggest_a_small_php_framework_or_cms_with_less/epl44m8?utm_source=share&amp;utm_medium=web2x)
&gt; had the issue often using Wordpress on shared hosting and then on VPS. Interesting, I'm curious about what error message you saw, and where? Also still wondering how many sites you're talking about with lots/many?
I don't feel qualified enough to comment on it to be honest.
Experimental documentation I made using syntax diagrams for explaining PCRE. For some constructs, I feel like it works really well. Source available on Github https://github.com/Theriault/pcre-syntax
Well, I remember an issue on github asking about 30.000 pages..and that was not a problem, just a bit slower.. See: https://github.com/getgrav/grav/issues/1099#issuecomment-253055260 So 100 images or 100 blog posts shouldn't be a problem at all (currently rebuilding a WordPress website with about 150 blogposts, rebuilding it it Grav). I've been using grav for a few years now, and haven't found any real limits yet. I've build simple one page websites, blogsites and also moderately complex e-learning systems. When there is something I can't figure out, I ask in the Discord channel (they had Slack, but quickly outgrew it). Not only the devs are in there, but also a whole lot of other friendly, helpful people. Within hours I always get help and get my problem figured out. A case where I could feel Grav is limited: Letting clients admin the site after me building it. Wordpress is just so foolproof..Grav doesn't match that level of ease yet. However, Grav is made for developers serving clients, not for the clients themselves. AND the limit is more my own, since there have been a few developers that made their own custom adminpanels in order for their clients to admin the sites themselves..Grav provides plenty of options to create your own Admin environment. But you will need a bit more skills as a developer. What I love most about Grav is that it made me feel smart. :P You dive into the code to change / fix everything, but it is all so logical and consistent that it makes sense. Even for someone like me who mostly cut and pasted everything together in Wordpress. Grav gives me so much more options and opportunity to fine tune and change everything about it, without breaking stuff. And it is incredibly lightweight and fast. also updating the website is really just uploading a bunch of new files on ftp..I edit everything on vs code, then ftp it with cyberDuck..and in mere seconds the page is exactly as I wanted..no hassle with wysiwyg online, drag-and-drop editors that are slow and inconsistent.. My advice: download one of the skeletons,https://getgrav.org/downloads/skeletons, play around with it..and never look back ;)
Wow ... Never heard of it! This is the kind of stuff I wanted to find out about through this post! I will research this further. &amp;#x200B; Have you used this in any projects ?
That's a great tip. Thanks!
If it's possible, it doesn't mean it's probable. Out of 100 WP projects and 100 Laravel projects, what do you think - which would produce more projects that are readable, maintainable and scalable? Wordpress or Laravel? &amp;#x200B; Sticking your entire logic in Laravel's index.php takes effort. Sticking your entire logic in a .php file that you can upload anywhere in Wordpress is encouraged. &amp;#x200B; That's a huge difference. I'll assume you're a WP user, probably advanced at that - yes, it's more than possible for a disciplined programmer to use any tool without making a mess. But not everyone are like that.
So iNodes are problem? Strange... [r0ck0](https://www.reddit.com/user/r0ck0/) gave a good reply.
About 3 years back. Say 20-30 websites on a VPS. I was using so called managed VPS back then like Hostgator. So I would get email alerts for inode counts. And at times the server would become unstable ( artifical inode limits ? ) they had to manually increase the inode counts. &amp;#x200B; I have since moved over to Digital Ocean. I don't think I will be able to handle complex hosting issues on my own so I want to avoid them. I am happy building apps on laravel and company websites on wordpress. But I get quite a few requirements for small websites where they barely have a budget. I would pass them on earlier, now I thought why not just set up something which is easy to manage. &amp;#x200B; Since I am entering this basic market after a long time. I though I would be prepared for the issue by taking a different approach and in the process learn something new. Grav seems interesting and discovered FatFree through this post.
Not for a while, I was working for a company who used it a lot a few years back. I built a CMS system using it, and a couple of REST APIs. It was great for the REST stuff. It worked for the CMS as well, though I did need to build around it quite a bit to get the functionality needed. As in said, the router is pretty good, simple but effective. The ORM included is also fairly simple, but flexible enough to do some fairly complex selects. Complex updates and inserts were a bit trickier I think, but can be done. I haven't used it in a few years but it's still on the same major release that I used to use so it probably hasn't changed much. The docs are great, if only cause there isn't much to document so what there is they can do well!
Please don't use CodeIgniter for any new project. It's an outdated mess of terrible code and bad practices.
I have used Klein framework in the past. Does the job for quick projects. https://github.com/klein/klein.php
 You should check out Laravel Nova.
This is awesome
Depends on the use-case. In a lot of cases, you just want a simple value, how to set and get that is trivial. &amp;#x200B; But even if you have more complex data types, there's nothing preventing you from still allowing the proper format to be written directly and use a setter for different input formats. The same is true for getters. If you know the type and you want just that, referencing the variable directly will work, just like using a getter that converts it to any format you want. &amp;#x200B; They do not work mutually exclusive, you can mix them as you like which only increases the options you have, giving you more freedom as a developer. &amp;#x200B; But I would agree that "the death of getters and setters" is more clickbait than accurate. &amp;#x200B; OOP was "the death" of procedural. functional was "the death" of OOP. Now "procedural is back" ... I read that shit all the time... None of them went anywhere.
I think you’re optimising for the wrong problem. The amount of computational time spent editing is relatively small compared to the delivery of the content. IMHO you should be optimising for low latency, concurrent reads. Maybe throwing varnish in front of the applications, or a CDN and sending through correct cache control headers. That way all of the processing time on the servers is spent creating articles (which is a very low number of concurrent queries) as opposed to rendering and delivering the blog posts.
Hah, that was funny. I think that's more performance parody than the other stuff though. Laughing with, rather than at, as it were.
I came across this article recently, it might be a little barebones compared to what you want, but worth considering: [https://www.reddit.com/r/PHP/comments/bftad6/automatic\_api\_for\_slimphp\_3/](https://www.reddit.com/r/PHP/comments/bftad6/automatic_api_for_slimphp_3/)
You're trying to save one cent on a ten cent scam.
I've found the PHP ecosystem very weak for network and system level utilities. Python is very much better supported in that way - and for working with pcaps and low-level networking in general, [Scapy](https://scapy.net/) is pretty incredible. What exactly is it you want to do, out of curiosity?
You're talking to a bot.
FYI, if you want to check how many inodes are available, you can use the command: df -i
https://github.com/Luracast/Restler
How do you know _I_ am not a bot? ;-)
Show your composer.json. Probably, your PSR-4 autoloading setting is incorrect.
&gt; composer.json { "name": "laravel/laravel", "type": "project", "description": "The Laravel Framework.", "keywords": [ "framework", "laravel" ], "license": "MIT", "require": { "php": "^7.1.3", "fideloper/proxy": "^4.0", "laravel/framework": "5.8.*", "laravel/passport": "^7.2", "laravel/tinker": "^1.0" }, "require-dev": { "beyondcode/laravel-dump-server": "^1.0", "filp/whoops": "^2.0", "fzaninotto/faker": "^1.4", "mockery/mockery": "^1.0", "nunomaduro/collision": "^3.0", "phpunit/phpunit": "^7.5" }, "config": { "optimize-autoloader": true, "preferred-install": "dist", "sort-packages": true }, "extra": { "laravel": { "dont-discover": [] } }, "autoload": { "psr-4": { "App\\": "app/" }, "classmap": [ "database/seeds", "database/factories" ] }, "autoload-dev": { "psr-4": { "Tests\\": "tests/" } }, "minimum-stability": "dev", "prefer-stable": true, "scripts": { "post-autoload-dump": [ "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump", "@php artisan package:discover --ansi" ], "post-root-package-install": [ "@php -r \"file_exists('.env') || copy('.env.example', '.env');\"" ], "post-create-project-cmd": [ "@php artisan key:generate --ansi" ] } }
There is spaghetti code. It's bad practice. Don't write code based on this sample.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/phphelp] [\[PHP\]\[LARAVEL\] "Class 'App\\User' not found" but there is clearly 'use App\\User;' in the code. What to do](https://www.reddit.com/r/PHPhelp/comments/bv5vd6/phplaravel_class_appuser_not_found_but_there_is/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
that's right. It looks like a code snippet from 90'
can you give me a link where you have written good code?
can you give me a link where you have written good code?
I don’t want to capture data, I was to process pcap files.
For anyone reading this, don't use the page linked. It's riddled with code duplication and other spaghetti. If you need effective pagination, I'd recommend the [PagerFanta package](https://github.com/whiteoctober/Pagerfanta). Also, for the love of god, when working with SQL, **USE PREPARED STATEMENTS!**
It is a requirement at my office, importing a bunch of pcap data.
Really nice, congrats
You say there is App/User in the code, that’s true, but is there also a model sitting in the project files in app/User.php? That’s the important bit you may be missing. Maybe you relocated the model?
Is the namespace setup and correct in the App\\User class.
Don't this one, seems random. - Without impatience I'd do it manually, it's very hard to do it right. - With hubris it would be stuck with locked mind, unable to developer based on people's feedback. Rector is result of community voices and needs. Personally I'd go with Pragmatic programmer: - always look for a way, moreover where all peole say it's not possible - trust your intuition and verify it - have fun, because without fun code sucks :)
well, writting my own pagination script is like reinventing the wheel. In web development you need to know, how to use plugins, packages and other reusable components, because there's no time to write everything by yourself (unless you wanna learn how). Here's some example of pagination [https://github.com/jasongrimes/php-paginator](https://github.com/jasongrimes/php-paginator)
Don't... what with this one? :) Don't agree? I agree with pragmatism as well! But I think Larry Wall's 3 virtues are fairly accurate - laziness, because you want to automate things; impatience, because you want it done quickly; and hubris, because you take pride in your work. Pragmatism is definitely to be valued though, I very much agree. Although fun isn't much to do with it, hah.
Dear lord.
how do I check that?
that's the User.app namespace App; use Illuminate\Notifications\Notifiable; use Illuminate\Contracts\Auth\MustVerifyEmail; use Illuminate\Foundation\Auth\User as Authenticatable; class User extends Authenticatable { use Notifiable; //public $timestamps = false; /** * The attributes that are mass assignable. * * @var array */ protected $fillable = [ 'name', 'email', 'password', ]; /** * The attributes that should be hidden for arrays. * * @var array */ protected $hidden = [ 'password', 'remember_token', ]; /** * The attributes that should be cast to native types. * * @var array */ protected $casts = [ 'email_verified_at' =&gt; 'datetime', ]; protected $dateFormat = 'Y-m-d H:i:s'; }
Have you tried restarting apache/nginx? Had a similar issue and it resolved it.
&gt; app/User.php that file exists and it's in the correct path
I'll try, thanks
You already posted a guide how to introduce an SQL injection in your code, https://www.reddit.com/r/PHP/comments/bsg99z/nested_comment_system_in_php_mysql_and_ajax_roy/ And now you are doing that again. I wonder if mods are ever doing any action. What about banning the domain?
This article is a smelly piece of shit. A "pagination" script that selects ALL records every time a page is shown. $result = dbQuery($sql); $pagingLink = ''; $totalResults = dbNumRows($result); $totalPages = ceil($totalResults / $itemPerPage); The last time the OP posted a guide how to introduce an SQL injection in your code, https://www.reddit.com/r/PHP/comments/bsg99z/nested_comment_system_in_php_mysql_and_ajax_roy/ With a sole reason to promote their page for SEO and selling ads. And now he is doing that again. I wonder if mods are ever doing any action. What about banning the domain?
 function getPagingQuery($sql, $itemPerPage = 10) { if (isset($_GET['page']) &amp;&amp; (int) $_GET['page'] &gt; 0) { $page = (int) $_GET['page']; } else { $page = 1; } // start fetching from this row number $offset = ($page - 1) * $itemPerPage; return $sql . " LIMIT $offset, $itemPerPage"; } it doesn't matter what code anyone else on this thread wrote. It doesn't even matter that you wrote the function above. Although if I paid you for safe and secure software, and you produced the above, I'd be more than a little upset. What matters is that you published this code in a tutorial. This code is extremely dangerous and by publishing it as a tutorial for people to learn php, you are being dangerous. Get it?
Not sure but should the project name perhaps be changed to \`json-to-sqli\` instead as it seems like there is random API data being dumped straight into raw SQL queries?
SO BRAVE! On a more serious note, this is what modmail is for. Just send a message to the mods of this sub to direct your complaints, no need for public shaming
Complaining about post standards while ignoring the complaint standards, classic.
Partially I agree. I am not very good with reddit and modmail doesn't immediately jump to my mind. On the other hand, I am showering moderators with reports for all the spam posted here (I happen to read /r/php by new), with the response is either slow or none at all. And I doubt writing a modmail would improve the moderation at whole. Well I could try to write a modmail every time a blatant harmful spam is posted. We'll see how it works. Probably will just get me banned as a nuisance.
What a fucking moron!
I am not a Laravel guy, but your user class should contain at the top namespace App; And the User.php should be in the app folder.
Maybe you have to do composer dump-autoload from your project folder.
.. well I know one website that is doing this right now
Can you please explain why it is really dangerous? I mean, I guess "$itemPerPage" could be anything. But if he typecasts it to an (int) like he did $offset, isn't it relatively safe?
It's just an opening ceremony? This is a pretty big event and obviously these are just hired performers, not developers who are 'singing to PHP'.
Like i said in my other comment - these are just hired performers and this is an opening ceremony, i don't understand why are you guys under the impression that it's the PHP developers and conference visitors who are singing and feeling 'this strong' about the language itself.
Came to say that. From the description I thought there is likely another kind of injection, through field names, but it turned out a silly Bobby Tables case.
there is, It's just pasted it wrong here on reddit. Corrected, thanks.
&gt;scam What's the scam ? People in my country approach me for a website for a low cost. Instead of turning them away I want to give them a decent solution. I can make 15 times more money catering to only USA and UK clients.
*moderators. This pun was never intended.
Somebody should make a list of all the stuff wrong with this code!
It seems unnecessary but I guess it *could* have a use case. I feel like the main thing would be mapping the keys to mysql fields. I would look into modernizing the library. * We don't prepend "classes" or append "classes" to the filename anymore. The filename should match the class name inside the file to help with autoloading. * Look into using namespaces as well, this will help with the autoloading as well as eliminating the `if ( ! class_exists( 'ClassUrl' ) )` * Look into decoupling the database connection. A developer should be able to take this library and use PDO or MySQLi with it. ** which then means you do not need the `inc/config.inc.php`
This is not effective, it's terrible. Please don't use this.
Thanks! IIRC I used the one from this answer. It helps sort inodes by folder. In case of malware or spam ( I don't host email any more ) you can find which folder is responsible. [https://unix.stackexchange.com/questions/117093/find-where-inodes-are-being-used](https://unix.stackexchange.com/questions/117093/find-where-inodes-are-being-used)
but well played.
I don't think shaming people like this is a good way to go. Leave a comment on the article, leave a comment on the reddit post, report the post, move on.
Thanks! Great answer, cleared my hesitation towards investing time in learning Grav. &gt;also updating the website is really just uploading a bunch of new files on ftp..I edit everything on vs code, then ftp it with cyberDuck..and in mere seconds the page is exactly as I wanted..no hassle with wysiwyg online, drag-and-drop editors that are slow and inconsistent.. Wow ... Didn't think about this. So we can create multiple repositories of a skeleton/theme and deploy them to the client folder from bitbucket/Github. If we are reusing the same themes / settings that can make it a few minutes job. &gt; A case where I could feel Grav is limited: Letting clients admin the site after me building it. Wordpress is just so foolproof..Grav doesn't match that level of ease yet. However, Grav is made for developers serving clients, not for the clients themselves. This works for me. Most of these clients really don't end up managing their website on their own anyways. &gt;What I love most about Grav is that it made me feel smart. :P You dive into the code to change / fix everything, but it is all so logical and consistent that it makes sense. Even for someone like me who mostly cut and pasted everything together in Wordpress. Grav gives me so much more options and opportunity to fine tune and change everything about it, without breaking stuff. And it is incredibly lightweight and fast. I am inspired! Started experimenting. Will join the discord too. Thanks a lot! Hopefully will discuss some Grav related questions with you soon ;)
Thanks! Tried it a while back and loved it. Was just looking for other options along with Slim.
This is not a valid retort. They are not the ones promoting their code, you are.
You’re right, I should’ve looked at it more closely. It was a knee-jerk reaction to seeing concatenated SQL. The explicit casting would make injection difficult, but I would never trust it personally. It also might give beginners the wrong idea
Fixed right after you read it and start typing :D I was going from the plane. I don't want to do it quickly, I want to do it effectively as human kind. What does mean "take pride in my work"? "Although fun isn't much to do with it, hah." For me fun is the base of all things. Without joy, it can never last as long as with it :) I take joy in my work
You left out a backslash: ``` "autoload": { "psr-4": { "App\\": "app/" } } ``` Then run composer dump-autoload Don't understand how that could happen if you were using the standard laravel install. If this still does not fix it then start a new project, add just the User code and see what happens. I't also possible that the code you are looking at is not the code that you are actually running. Happens more often then you might think. And just to confirm, your directory structure should be: ``` myproject composer.json app User.php vendor ```
there is already in the composer.json, maybe it got deleted when I copied it to Notepad++
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&amp;#x200B; &gt;As in said, the router is pretty good, simple but effective. The ORM included is also fairly simple, but flexible enough to do some fairly complex selects. Complex updates and inserts were a bit trickier I think, but can be done. Thanks! Searched a bit after reading your comment, seems like there are issues with joins. I need this for pretty basic stuff so hopefully that won't be an issue.
There are some premises with some of which I don't agree - *People*. This is actually a [spam factory](https://www.reddit.com/user/soumitraroy) which sole purpose is a massive seo spam (at the obvious cost of quality). - *Comments*. Again, for a honest individual trying to share the knowledge, I would leave a comment, as I always do. Here, comments don't work. They are either ignored or you get just a shitty excuse in response. - *Move on*. Here we just disagree. Your attitude is to hold your nose and move on. I am, however, concerned about my habitat and trying to do something about it.
&gt; *Fixed right after you read it and start typing :D* Hah, right, you don't even have the edited `*`. :) Hubris is generally considered a negative trait, but for programmers it can result in better code, because they don't want others to say anything bad about it. "You take pride in your work" just means that producing great quality code is important to you (even if only so others are less likely to criticise it). And the comment about fun was only directed towards pragmatism specifically: pragmatism itself doesn't have a lot to do with fun. But coding definitely does! (Or at least, it should.) By the way, this comment: * *trust your intuition and verify it* Is spot on!
Isn't it better to test than to doubt?
I don't necessarily disagree with your point, but publicly insulting someone who has zero actual obligation to listen to what you have to say is possibly _the_ worst way to get them to do what you want. Regardless of how active or inactive the mod team is, writing a polite modmail expressing your concerns is infinitely more likely to lead to positive results than this. Airing the dirty laundry like this should only be done as a last resort, and even if it gets to that point, it'd be prudent to be reasonable about your concerns instead of insulting the people you're trying to reach.
&gt; Do something. Ban the domain. Or move your lazy asses faster. Or do whatever you want but please keep /r/php to some standards. A pet peeve of mine is working hard and receiving this sort of commanding language as thanks. I understand that you're frustrated but the least you can do is show a little fucking respect.
Thought you might say that. Go ahead and confirm that you have \`\`\` 'App\\\\' =&gt; array($baseDir . '/app'), \`\`\` In vendor/composer/autoload\_psr4.php And verify your that all your directories and filenames have the proper case i.e. user.php instead of User.php will not work well. The error message is a standard autoload message.
Awe, look at you - all but hurt and cry cry. \&gt; For how long [/r/php](https://www.reddit.com/r/php/) will be treated as a showcase for the shitcode and a supply for reasons to ridicule php? So if the whole point of banning him is because of "shit code" - then all of us should be banned because at one time or another we have shared shit code in this subreddit. Now he might just be a she who is actually a bot - don't assume identities in this political climate now little Johny! Thats triggering!!!!!! (LOL) On a serious note, r/php has been a shit storm of cluster fakery, fake wanna be programmers, ideologies that are far out there and ways to program that don't make sense for 90% of your work. It is also full of great blog posts and content for those of all skill levels. Its call: "weeding through the bullshit"
Are you sure that the file is called User.php with a capital U? And that inside of that file you have a `namespace App` and `class User`?
&gt; So if the whole point of banning him Not "him" but the domain. The site is an apparent seo spam farm, and I am sure Reddit has an option of banning a domain, if it proven to be the source of spam.
Mea culpa. Here I can but totally agree. I am quick tempered and just discovered that a post, which I considered removed long time ago, is alive and prospering. So it was literally like "WTF". But after cooling down a bit I find this language as inappropriate as you do.
Wow... He should have called his site "Needful things"
Don't understand why you are under the impression that I would assume that those where the conference participants and not hired people who performed. You need to think about it differently. Like who planned the conference and who hired the performers? It's the host and planner that have a great realtionship with the language and community who decided to pay homage with an amazing intro to the conference.
Well, after cooling down a bit, I tend to agree with you. This was sort of cumulative effect, I am watching the mods activity for quite a long time and the outcome is more emotional than conscious.
yes: [test@localhost laravel_project]$ ls -l app/ totale 8 drwxrwxr-x 2 comparatore comparatore 24 28 mag 11.29 Console drwxrwxr-x 2 comparatore comparatore 25 28 mag 11.29 Exceptions drwxrwxr-x 4 comparatore comparatore 61 28 mag 11.29 Http drwxrwxr-x 2 comparatore comparatore 167 28 mag 11.29 Providers -rw-rw-r-- 1 comparatore comparatore 808 31 mag 12.08 User.php
I can see this: 'App\\' =&gt; array($baseDir . '/app'),
How are you interacting with api.php?
&gt;bitbucket/Github. If we are reusing the same themes / settings that can make it a few minutes j Jup.. I also have 1 website hosted via Fortrabbit. Which works exactly like this. I push to their repository and from there the site is build on an aws instance. It's like magic!
Can you do us a favor and not talk like a sarcastic weeb neckbeard bssement warrior teenager, and instead behave like an adult? I know it's asking a lot from you, and you probably just got out of school for the summer, but this is a professional community and we have standards in how we communicate around here.
Try running \`composer dump-autoload\` it will refresh your namespaces
Awe are you but hurt?
Trying to do something about it is good, but doing it this way will discourage a lot of people from posting.
Grow up or leave.
I think it's awesome! Especially if they're also PHP devs! How do I sign up?!
Man, I'm a PHP developer and I'd fly around the world to be part of such a troupe!
looks hella complicated
Again, it is not about "people". It is about spam. Honest people with at least plausible content always get a good reception (well not 100% always but this is Reddit, you never know). When the content is good in general but there are minor issues, *people* receive both encouragement and suggestions for improvement. From the recent examples, /u/arboshiki with his series of videos on PHP OOP. So there is no lack in encouragement for the good content. A semi-automated spam factory is another matter. I'll do my best to *discourage* this kind of activity on Reddit.
Why is this better than using the Json column type?
No. \&gt; But even if you have more complex data types, there's nothing preventing you from still allowing the proper format to be written directly and use a setter for different input formats. What is the proper format? Does every dev know the format? Do you know what a public api contract (a pubic method) should enforce? Yes the proper format \&gt; The same is true for getters. If you know the type and you want just that, referencing the variable directly will work, just like using a getter that converts it to any format you want. "You" know whats inside. Yes youre the author of that class. Nobody else know how to use your class...
Why do you use a white theme in IDE? It's hard on the eyes
What? I'm using this.
I am used to it for a long time. But I'll keep in mind that some people does not like it.
Having walked into an ISV's ERP app originally authored with Symfony, I can 100% confirm this. The app contained every possible way to define a route, every possible way to define config, etc.. You never knew where to look for things. It was awful.
I see :) It's mostly the same meanings for different words. I prefer "kaizen" od "ikigai"-related dictionaries. For me "fun" = "pragma". This definition describes it nicely: &gt; Pragma derives from a Greek term, meaning "businesslike". Lee defines pragma as the most practical type of love, not necessarily derived out of true romantic love. **Rather, pragma is a convenient type of love.** [Ref Wiki](https://en.wikipedia.org/wiki/Color_wheel_theory_of_love#Pragma)
Oh, nice! I didn't realise that. For me, pragmatic is "sensible". Definition from Google: &gt; *adjective* &gt; dealing with things sensibly and realistically in a way that is based on practical rather than theoretical considerations. But yeah I think we're basically in agreement. :)
I remembered a mem =) [https://www.reddit.com/r/ProgrammerHumor/comments/8exci9/he\_doesnt\_antialias\_either/](https://www.reddit.com/r/ProgrammerHumor/comments/8exci9/he_doesnt_antialias_either/)
Looks interesting, good work! I particularly like that how your diagrams show the different variants of the same type (e.g. the capture by name variants). And, I actually learned something from your docs; you can negate a posix character class with \[:\^class:\].
I can understand and appreciate the need for meticulous and sometimes dizzying documentation for some things (the [W3C HTML Specification](https://www.w3.org/TR/html52/) comes to mind), but there are times when I look at such products and go "this wasn't designed for humans to read". To be fair, the PCRE diagrams are at least somewhat human-friendly compared to [this](https://www.w3.org/TR/html52/dom.html). But they're still intimidating.
1) The proper format is defined, just like the proper format for your getter. You'll get a changed value on success in both cases and an error if it is the wrong one in both. And usually, if you work together with people you write documentation of the classes, or at least the Interface it uses to communicate. If you refuse to do that, doesn't really matter if it's a variable or a getter, people will have to read your code and figure it out on their own... The Method used doesn't change that.
Why not setup a single network site in WP. Single install so saves on inodes. Downside is coupling of sites. Are you sure it wasn’t the Linux headers clogging up inodes? We’ve had over 100 sites on a single fairly small 4GB / 80GB disk instance.
How do people manage relationships sanely without ORMs?