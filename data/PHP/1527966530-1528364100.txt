My opinion is Laravel. It has become a standard for PHP development for a lot of companies. Code igniter is good but there is less of a market for CI dev than there is Laravel.
thanks
What about empty(), surely that‚Äôs used often?
Good human
Check out https://laracasts.com if you go this route
$a = 1; $a = $a ++-++ $a; $a = $a ++-++ $a; echo $a; 
Every half way good IDE can to this. Even vim is capable of doing this (with the right plugins). This is no argument in forcing a dev to use a specific IDE.
Excellent tips 
That's not what she said. Of course package size can matter, specially if the whole thing is loaded into memory and you use maybe 2 things from it...
WordPress should not just refactor, they really need to start from scratch.
I'm going to save this link for future reference. 
Slightly off\-topic, but that's a really nice\-looking website.
No, not really. I have never seen or heard of that.
Laravel is much more modern and has a bigger community. CI is nice too but I say Laravel.
"array, echo, print, empty, isset and other language constructs were not counted as functions in this ranking. They are probably trusting the first ranks anyway."
Aww! Then i am a good designer ^_^ Btw, thanks!
Yes, I do agree with you. I would do that soon :) 
Thanks for your kind reply, yes thats the point! This is small and dependency free and consumes less memory. :) 
Another one? You must really think your audience is a bunch of morons 
Printf("myvar:[%s]\n", print_r($myvar,true));
üì¢ If you are interested about this project and want to know further progress and development, tests (both unit and e2e) .. please "Watch" the (repo)[https://github.com/rakibtg/SleekDB] and vote too :D Also i will tweet about further development at (@rakibtg)[https://twitter.com/rakibtg] you can follow me there too :) Feel free to post your thoughts here, which will help me to note what to do next, thanks for your time. Have a great day :)
`strpos()` doesn't have many good uses.
No, it is not. You do not have cleartext passwords so changing a password hash requires you to change it when people login. So you need to add a column describing the type of hashing used and then dynamically generate the new hash after verifying the password with the old one on login.
Yes it's worth, but finding a job, not sure. When I check freelance it's full of PHP developers.
It's common now. Sometimes different teams are required to use different IDEs as mandated by the team lead (VScode vs Webstorm). Any large company will only provide a few tools that you can use for security reasons (typical refrain). Sometimes there's a technical reason. e.g. Projects that contain IDE specific artifacts or require IDE/plugin specific functionality for a buildchain and the company doesn't want to support others. 
Yes. Obviously there are other options for websites, but a lot of sites use php, and it never hurts to learn as much as you can. A lot of people want to rag on php because it isn‚Äôt new wave, but if you have the time learn it, and then learn everything else too. 
Well, considering how quickly GPUs can generate collisions for MD5, if the database is sufficiently small, you could hypothetically do it.
well, there's also stripos, and mb\_strpos and mb\_stripos and also grapheme\_strpos and grapheme\_stripos, so I'm assuming that if you counted all of these together, they would be higher. At least I hope so. English developers DO understand unicode, the difference between code units, code points and grapheme clusters and use it in their programs... right?
Are you active on Discord
IMO print_r should be #1 lol!
To the unexperienced that could look like genius level code! Good chance the person who wrote such code in the first place thinks it's brilliant too :) Hence the down votes (I guess?).
I was so confused why empty() wasn‚Äôt there until I read further down and saw it was not included. I use it at least 4x in every function!
I‚Äôm surprised that array_map, array_filter nor array_reduce are not in the top 100 :(
Printf("myvar:[%s]\n", print_r($myvar,true)); ... I kind of dislike var_dump() as its html formatted and not good for capturing output into variables for logging 
Yeah, the place I worked standardized on empty(), where I like my own _isset() which does much of the same thing... but I dislike functions which imho, return the opposite value than they should do my it's not... if !empty()
You don't want to create a md5 collision though, you want to convert the user's current password to use a different hash with the same original password. Hypothetically impossible without the user entering their password again.
Not really. You do not need an arbitrary value that matches the hash, you need the specific password, or at least a value that generates the same output for both MD5 and the new password hashing algorithm, which hopefully is a bit harder to brute force.
The reason empty() seems "backwards" is because it's good standard to return out of a function earlier rather than later. Say you wanted to only perform an action if an element isn't empty, if you check for empty of line 2 of your method and return on line 3 it's much easier to read.
Yea, I've been down the "return early" path with other devs. I totally agree in parameter validation at the beginning of the function. However, there is often a need to perform validation on data obtained in queries and other functions. IMHO, using return()s outside of the first set of validations makes for hunt-for-the-return issues in the code and I don't believe it makes for clean code.
Of course it doesn't magically retroactively fix your old hashes - I never stated that and certainly didn't intend to imply it. But the code change _is_ easy. this: return your_old_algorithm($dbHash, $password); becomes this: if (password_verify($password, $dbHash)) { if (password_needs_rehash($dbHash, PASSWORD_DEFAULT)) { $rehash = password_hash($password, PASSWORD_DEFAULT); // UPDATE hash in db } return true; } // after some point, delete from here if (your_old_algorithm($password, $dbHash)) { $rehash = password_hash($password, PASSWORD_DEFAULT); // UPDATE hash in db return true; } // to here return false; This change takes literally a few minutes if you're on a modern version of PHP. There's no need to add additional metadata or columns - `password_hash` encodes enough information (the leading `$2y$nn$`) to put this check in front of any existing password storage scheme and have it work. You just need to make sure the hash doesn't get truncated when you store it (i.e. the field length is &gt;= 60 bytes).
Whilst I agree with what you say a lot of the time it can lead to much less if else nesting and keep methods down to just one best block. All depends on preference I suppose.
No that‚Äôs not normal
I agree completely with the ‚Äúbest block‚Äù methodology. It has worked great for me for years and keeps my code squeaky clean.
there is no any file locking, this thing will fail under low server load
That's why there is var_export.
This. I've seen cases where there is a strong recommendation (with documentation &amp; support) to use a specific ide. Luckily it's Phpstorm so it can only help not hurt. People can choose what they want of course, but what I've seen is that they just struggle without it. If you're going to roll your own environment you should be prepared to be a superb expert in your field.
... I did not know that exists. Thanks. 
Not much substance in this article..
Ooof
We strongly recommend everyone use phpstorm, the company pays for it, and the ide was chosen by majority decision. But a developer can use what they want.. They just want have it paid for or get any help
The way you worded that suggests keywords can't be operators. Operators aren't always symbols, especially in computer science. For example: Binary operators: and, xor, or, instanceof Unary operators: new, typeof (not PHP), (int), (string), ... Ternary operators: BETWEEN in SQL Really, 'keyword' is just one of many classifications of the actual tokens that make up a programming language, and keywords may end up being: control structures (if for ...), operators (and or ...), statements (return break ...), values (true false..), etc.
I'm interested to know why. You can evaluate code while on a breakpoint with xdebug.
Just make all the users change their passwords Problem solved. I have a CC that makes me change my password every month before I can log in and pay it. What a giant PITA that is...
&gt; My opinion is Laravel. It has become a standard for PHP development for a lot of companies. I'm not saying you're wrong, you're not wrong, but I still a chill down my spine every time I see someone say that.
It's actually been pretty standard practice everywhere I've worked to have all of the full-time devs using the same tools and dev environments based on their skill set. Like my back-end/full stack devs use Visual Studio and my front-end devs generally use Atom now. I totally get why your tech leads wouldn't want to "support" multiple IDEs. Like if you have 7 Front-end devs and 5 are on Atom while 2 are still using Sublime text (because like, let's just say they're hipsters) and your team lead has to make sure everybody has the latest add-ons and stuff to support your workflow. On the other hand, I don't care what tools my freelancers, contractors and vendors use so long as they can get the job done. Because I expect that they won't need my help as much.
What I like about both is that they are really easy to pick up. What I dislike about both is ActiveRecord pattern.
I learned something about empty() recently when trying to check the value of a private property of an object. Because the value is resolved by the __get() magic method it counts as an expression, and expressions in empty() always evaluate true regardless of the return value. Always helps to read the manual properly! Empty is just one of those ones I learned about early on and never took too much notice of the minutia about it on php.net
One of IMO the most underrated language constructs is compact(). I use it with PDOStatement::execute() all the time cause it works so well with named parameters in pdo queries. Also really handy with var_dump for dumping a load of variables and their names quickly. My only qualm is that intellisense doesn't do much with it in IDEs
:grimace:
If your loading it all in to memory or whatever has no relation to file size. That's just shoddy programming if that's your problem. 
[no.gif](https://2.bp.blogspot.com/-Y_ODcECzxGQ/T4sMKffGa8I/AAAAAAAAA88/LnQ8Dvynqbg/s1600/michael-scott-no.gif)
Well, a shotgun is also easy to pick, and the natural direction is kind of pointing towards your foot.
So I noticed you were using Product Sans... yeah, um: https://fonts.google.com/license/productsans
&gt;Composer doesn‚Äôt recommend adding the vendor folder to git, but I figured that‚Äôs the easiest way to keep deployments the same. I've been doing this for years, worked very well so far. My experience: Pros: * all files always present, nothing special do to for deployment * no dependency on the network \(or packagist\); should there be a region\-specific connection problem or packagist be down, it would not hinder the deployment * developers can't forget to run the composer, it's always up2date To consider: * Making PRs contains the vendor files too which can make PRs un\-review\-able. The solution * Make `feature-vendor` branch with only the vendor files * Make your `feature` branch and make the PR against `feature-vendor` * The PR will only show your `feature`\-branch files üëç Cons: * architecture specific files can be a problem if your arch is different from dev/stage/env =\&gt; never ran into this TBH
&gt;Vendor updates are a pain Any experience with that? I've been vendor\-committing since ever and I don't remember any problems. I run update depending on my time for it, which is weekly or daily. Conflicts within vendor don't exist in practice, unless multiple people update at different time the same packages to different versions =\&gt; never seen this in reality. The only conflicts I remember is in `composer.lock` when in fact two branches install \(also different\) packages =\&gt; but this has nothing to do with commiting vendor. &gt;Lots of third\-party code in your repo Never understood this argument. You *need* that code anyway, your software doesn't work without it. The same argument about size. In this day and age, I can't fathom this being an issue \(unless in extreme cases?\). &gt;Temptation to "fix" third\-party code locally I argue it's even better to have this files versioned because then you see if you \(inadvertently?\) changed them and can easy revert/not forget them to change them back In fact, at times for debugging I *had* to modify vendor files temporarily. Thanks to them being versioned, I could not forget to revert the change üëç &gt;But a significantly higher chance of forgetting to actually check in your vendor updates Don't get this argument either. It's the same chance you forget to commit your own changes ü§î I don't know a git tool which does *not* show you your uncommited files which is like hiding in plain sight: no chance to miss it. FTR: I am not evangelizing it. I am totally with your, everyone has to make it's own decision and e.g. I would never publish a public/OSS project with vendor files. But I've years of experience doing it that way has shown me ‚Ä¶ no problems in my day to day work
I'm not saying I'm particularly recommending it for some reason, but [Laravels background job worker](https://github.com/laravel/framework/blob/5.6/src/Illuminate/Queue/Worker.php) are essentially daemons and deal with a lot of the stuff you're concerned with \(especially since background jobs are supposed to run a variety of different and possible changing code over time\). Only a quick off\-the\-top\-of\-my\-head stuff: * Do proper signal handling and you want PHP \&gt;= 7.1 for handling them async * Most daemons I've seen have some kind of "loop". You can "fight" memory leaks by checking the memory every iteration against a threshold and let the service die \(and be it automatically restarted with something like \`supervisord\`/\`systemd\`\). But of course this is not a real fix. If you're mindful about your resources and don't have a strange bug in an extension, I think memory leaks aren't a problem per se * If your requirements are fine to do your task in a single thread, vanilla PHP is fine. If you need concurrency, you may need to look into event\-based PHP frameworks 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [laravel/framework/.../**Worker.php** (5.6 ‚Üí 908135e)](https://github.com/laravel/framework/blob/908135ec5aa5628fbecd01d9b0e23f9a84df16d0/src/Illuminate/Queue/Worker.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e0136sp.)
Notices should be treated as hard errors; it's a bug in your code, nothing less. Any proper framework has an exception handling which simply turns them into hard exceptions any way.
PHP is no easier than Java. Both are worth learning; both will let you find a decent job. Freelancing is hard (with either) but people do it.
When work has been fun I've never had the need for side projects, but when it's dull I tend to pick up something on the side. It's also helped when I've had a specific project to tackle, not just for fun or learning but an actual desire for some software that doesn't exist yet.
"only thing still using PHP is WordPress" is just factually incorrect. If you're going to argue against PHP at least come up with a decent argument.
You can also do that with PsySh, and it's less grief to set up.
It's never happened to me, though I can see why this could be done. The only caveat being, it has to be a good and advanced IDE (so basically only phpStorm for PHP).
The problem is that people *very often* misjudge whether security matters in a given context. "Security" just means that it reliably works the way it's intended to. md5 is intended to be collision-resistant, but it isn't. And that makes it a bad choice for things like cache keys, checksums, etc., where you want your hashing algorithm to be collision-resistant. Is an attacker able to exploit the fact that part of your infrastructure doesn't reliably work the way it's intended? You should always assume the answer to that question is "yes". SHA-256 may be slower than MD5, but we're talking about a difference of probably less than 0.001 ms. If you **really** need to save 0.001 ms, I'm certain there are lots of better ways to do it that don't involve using a broken algorithm.
What substance would you expect?
You can also do that with PsySh, and the setup is less grief. It also offers tab completion.
Name a modern web app sitting on php
That's not how it works. empty($a-&gt;b) is `!isset($a-&gt;b) || !$a-&gt;b` which is `!$a-&gt;__isset('b') || !$a-&gt;__get('b')`. Most likely you have a broken (or missing) __isset implementation.
If they are namespaced (and they should be) then they should go into the appropriate namespace root directory for the autoloader to find. These traits aren't namespaced (but they should be).
`array_map` is on 23s place. but yes, `array_reduce` is not in the list. And also `array_column` which is not in the list. What I find strange is that only `ksort` is in list. Anyway I don't see any value from this blogpost. Just another marketing top list of stuff. I think that 
No it's not normal, but playing devil's advocate.. I've *supported* developers before. It literally meant I had to install the IDE for people because the developers didn't know how to do it themselves. So guess what I did? I said "management, tell me what to roll out, because I'm not dealing with more than one product".
Stack traces are not debugging. For something to be debugging, it needs to involve a debugger.
I'm not sure I'd say it's standard, but there are definitely reasons an employer might want to do this. One example would be in a large company or an organisation such as a university where very few users are granted admin rights, machines are imaged and the IT department want to be able to thoroughly test (Windows) updates before they're rolled out. Another reason would be to be able to easily specify / synchronize settings such as code style and code analysis (ala PHPStorm's Inspections) - you might want to do this if you have a high proportion of junior developers and want these enforced at all levels. Or you want to make it easier to teach incoming (junior) developers things like version control. To be honest, if they're sane, every PHP developer worth their salt should be using PHPStorm anyway - I don't think there's any other IDE that comes close at the moment.
PhpStorm is not that different than Zend studio.
Where I work, I'm usually the one that supports the dev loop / dev experience in a bunch of projects. I can understand the need for making it easy for everyone to work on something and to run the tools that they need to in a repeatable way. When you open up a project, you want to just be able to start coding as soon as possible. You shouldn't have to figure out how to build your code, what flags to pass to your test runner, etc. We have a very different approach. We don't focus on IDEs \(anyone can use whatever they want\), we focus on CLI tools. When you clone a project there's a handful of commands that will let you do what you need. All of this is documented in the project's readme. We don't have a ton of custom CLI code tho. We reuse the tools that are available in the community and we write aliases to make things easy \(composer / yarn scripts\). As long as you have a terminal you can work. The only constraint that we have is that we don't support windows \(the company will buy you a mac if you want one\). I expect everyone to have a sane posix shell with the common gnu utils. This has a few advantages: - Everything that a dev does can also be done by the CI - Everyone can get started on projects quickly - You don't 
Well, I'm pretty much doing that for the field name... the iterator is coming from a for loop. I found in testing that for some reason it was filling in :dropdownfieldname10 with :dropdownfieldname1 and then appending a 0 onto the end. That sound super ripe for sql injection but I was just using standard pdo named params with $stmt-&gt;bindValue() Not sure why that would be allowed to happen.
Sorry I didn't actually show any code to say what I'm doing for dropdownfieldname it looks like this if (!(empty($parametersFromForm['fieldName'])) { $queryParams[] = ':fieldName'.md5($counter); } Something like this is what I'm doing. So no user input gets used to create a param name and the $counter comes from a for loop through the array of values in $parametersFromForm['fieldName'] I think that's all on the up and up... anyone see any reason why not?
Slack
When you just need to get something working fast...
Or make a billion dollar company like Facebook 
I see you have very complex feelings about it.
I never use it, so I guess this poll was based on... hmm, I always wondered how did that hole in the wall behind me appear last time I came back from vacation.
`call_user_func` can be replaced by variadics as well (eg. `test($param1, $param2, ...$array);`. What I'm curious about is what operator could be used to replace `chr()`.
&gt; currently i am thinking of doing side project just for fun Start with Trello. You can always upgrade to something else if the side project turns into more.
PornHub, MailChimp
I don't get it. Why would Google have a license note "we're not offering this font".
I saw what you're doing, it has its uses. But the fact is... you can significantly improve the performance *and* functionality of your NoSQL database by using... SQLite. As many say, SQLite should be thought of not only as an SQL database, but as a higher-level structured file access library.
`array_column` is probably one of the most underrated or miss-understood function. I've seen code iterating over large arrays needed to extract a column becoming slower as the array grows. That function solves that in a snap. Granted, I don't need it often. But when I do‚Ä¶
An experience I had a few months ago: some code was merging big results (from an API call) into an existing array =&gt; continuously, as the API calls where paginated. We're talking about literally thousands of elements. At some point a bottleneck appeared, the function slowed down on every growing results. The details elude me, but the fix was too simply iterate over each page results and append with `$array[] = ‚Ä¶` instead of the array_merge call. That brought down the operation from &gt;30s (only for all these merging operations) to a few seconds. Who knew ü§∑‚Äç‚ôÄÔ∏è
Isn't NoSQL not a synonym for NoACID?
`file_put_contents()` is not atomically safe and I don't see any handling of this. You should use locking or writing data in an other file and rename it after closing \(which is safe\). This is fine for single process console application or an application where is minimum number of writes \(few times an hour, at best\), but I would definitelly avoid it otherwise.
This isn't about ACID, this is more about data corruption when two threads write in the same file.
The I in ACID would prevent that.
Worst examples ever
Some of the busiest websites in the world are bad examples. Got it. Go away, troll.
Big thanks for the idea, I am working on this :) 
Take a look at [nette/safe\-stream](https://github.com/nette/safe-stream), which handles this pretty well.
They're saying "don't use our internal font".
In the same way that a cat is not that different from a cow.
Ah I see. They're just using it for Google Maps etc. Thanks.
Thanks, I do agree with you. I basically wanted a pure PHP based database where i can query for data without any dependency. Use case would be a simple company page, where the list of employee page is dynamic, using mysql to do that is a overkill .. or maybe a blog, where read operation is more important. For example, if my blog has 10,000 blog posts, with cache enabled sleekdb would require only one time read operation for frequent queries, it will not go through all the data and we dont have to manage the cache it will be handled by sleekdb automatically while inserting or updating data into the db. I think I will implement the file locking mechanism as /u/adawolfa mentioned in this thread. Sorry for highlighting 30KB too much :D and thank you for sharing your thoughts :) 
Atomicity in terms of NoSQL is more about transaction support, I think. You're not going to end up with corrupted/unreadable document \- you just can't lock a document and perform multiple related operations in atomic\-safe manner. That's currently the issue of this library, which, once two threads write in the same file, corrupts a document entirely \- that's what should be prevented using a lock or atomic\-safe operations, like writing in a temporary file and renaming it to desired name later.
I do not force my small team of developers to use a certain IDE but I am going to require one going forward. Far too many "refactorings" have broken things in production because they didn't use a smart enough tool to do it; in all of the recent cases PhpStorm would have caught these issues. It's also my experience that people who aren't using PhpStorm aren't doing interactive debugging; it's not that it's impossible to do in other editors/IDEs they just don't. These two things are enough for me to require it. Again, it's not that other tools *can't* do these things, it's just that our experience has been that they *don't* if they use some other tool.
Just a quick note: SQLite, unlike MySQL is not a hassle. It works directly with files (no connections, no users, no passwords), it comes bundled with pretty much every PHP install so you can hardly consider it an additional dependency. Just saying this so you can make your informed decisions. Good luck!
&gt; I will implement the file locking mechanism as /u/adawolfa mentioned in this thread. I will implement the file locking mechanism as /u/adawolfa mentioned in this thread. Feel free to let me know anything else you want to highlight. Thanks for your review :) 
I still prefer `array_push` if: * I'm using the array for stack behavior. * I'm pushing more than 1 argument at once.
So.............a little bit of a rant I need to get off my chest. People who don't use PhpStorm - you have no idea how fucking slow you are at doing basic shit. I'm a senior dev at my company, which means I quite often need to help other developers with their problems. A common thing that happens is that I'll be helping them, and I'll ask them to go to a particular class or particular config file in the project. For me - either of these things takes approximately 2 seconds as I hit either command+o for classes, or shift+command+o for files. For the junior devs......it takes longer. A lot longer. WAAAAAY TOO FUCKING LONG. Instead of being able to navigate directly to files, they stare at their screen for a few seconds, before scrolling randomly in the files listed in the project. AND THEN ALMOST INEVITABLY THEY ASK ME WHERE THE COCKING FILE IS. It really makes me wonder how much of their day is spent just trying to find files in the project. TL:DR - everyone on my team has to use PhpStorm, at least when they ask me to come help them with something.
ACID isn't the only idea of how to maintain data consistency. NoSQL can mean basically anything. It might have consistency better than ACID, like ACID, or worse than ACID, or a different solution than ACID. But a writable database which provides no consistency/durability guarantees of any kind of be basically worthless for storing domain data, and maybe only good for volatile caches or such.
There is no specific instructions or license for the product sans font, but it seems to be open-source too! However, i think its better not to use the font. Any font recommendations that is similar to product sans?
Lol
Yes that seems to be a nice solution to the problem, many thanks.
Thanks for the reference 
This is what my team does, we have a documented ‚Äústandard‚Äù and as long as you‚Äôre using it, most of the team can help with issues. If you want to use something else, you can, but be prepared to support yourself. 
well `sprintf()` with `%c` does the same thing. But that is just a different way of converting a number into an character and I would guess this is not better than `chr()`
If you're using an autoloader, only the classes you explicitly reference are being loaded into memory, and even then, 100KB of PHP source files gets turned into...what, 10KB of cached opcodes? That's barely a microoptimization nowadays.
That's not the case at all. It's proprietary and only meant for internal Google use. See the link above, which comes from Google themselves. In other words, it's illegal... Maybe Pier?
Wat is this
Yes, but the same proviso applies to all languages: not everyone can do freelance. Be cautious here, especially if you are at the start of a software engineering career. Some general thoughts: * Go freelance when you're experienced enough to know what you don't know * Put together some non-trivial websites and get some practice * Pay special attention to learning about security * Work within a team first if you can, to learn from good people * Work in several teams/firms, so any bad habits you pick up can be ironed out * If and when you do go freelance, consider getting public liability insurance for your business (aside from all the usual things like an accountant and an accounting system etc). 
A screenshot, as far as I can tell.
I think it's related to https://www.reddit.com/r/PHP/comments/8o0tt0/hackerbase_pgp_for_hackers/, but I really don't know.
Dude's relax, Its a screenshot of what I have been busy for awhile. A community project for my usual friends, Who are into Cryptography. :\)
Its related to it, But. I cant somehow post some photos on the thread so I made another one, Sorry. Hehe
Right not much substance. But to be honest, the main message is right: there is not "the best" framework. Choose the one that fits best (performance, knowledge of the devs, lines of code/configuration, and much more) All have its advantages and disadvantages.
This. If your IDE can't quickly open files by name, go to functions/methods in other files with a click, run xdebug, has amazing autocomplete and linting on save, I'm not going to let you use it where I work.
Plus PHPStorm does so many other things. I've rejected simple PR's from devs because their formatting is different from the rest of the code base, if your "IDE" doesn't have linting on save or you can't turn it on, you shouldn't be using it. And jumping to a function/method, I've seen so many people ctrl+f and search throughout the project for the function name, scroll through all the results of places it has been called before they even get to the actual definition. Please don't waste my time doing that.
/r/PHPhelp 
Sorry didnt investigate further....thought this was the right spot.
I can literally make Zend studio behave like phpstorm I can do the same with Eclipse DO you know why? They have the same freaking core. A java applet. 
You and I both know about autoloading, but there are probably going to be people or projects that are doing it like 1999. Of course we probably wouldnt download a 100Mb library either just for two pieces of functionality.
Try StackOverflow
Pier looks good, i think i would use "Varela Round" 
UnQLite looks promising: https://github.com/symisc/unqlite
This isn't even a php question
Mouse scroll wheel click on a function to go to the definition is a god send and I regularly pray to the PHPStorm gods for that QOL feature.
Maybe I'm full of shit, but on first (cynical) read, this sounds like "the low write performance of SQLite with the lack of features of Mongo". SQLite is quite free-form when it comes to schemas itself. So I wonder what tricks could UnQLite do that SQLite can't do with little SQL code.
http://wordpress.stackexchange.com
Erh.. that's patently untrue; PGP isn't even a "*crypto algo*". Take GnuPGP for instance (which has interopterability with PGP via OpenPGP/[https://tools.ietf.org/html/rfc4880](RFC4880)) - and consider the [number of different algorithms available](https://en.wikipedia.org/wiki/GNU_Privacy_Guard#Overview). There are reasons you may not wish to use PGP but they generally relate to usability, visibility, metadata etc - i.e transport characteristics **not** cryptographic strength. With proper key length, private key management and decent passphrase discipline PGP is a pretty solid option.
What about lack of PFS
Hi everyone, A new php-spx profiling extension version (0.3) is available here: https://github.com/NoiseByNorthwest/php-spx List of changes here: https://github.com/NoiseByNorthwest/php-spx/releases/tag/v0.3.0 TLDR The web UI is still improving, less bugs, more efficient, more ergonomic. [Click here for a live demo](https://noisebynorthwest.github.io/php-spx/demo/report.html?key=spx-full-20180603_211110-dev-3540-294703905) Thanks to [Owen Smith](https://github.com/orls) it is now possible to define a custom color scheme to colorize function related blocks according to a set of user defined (and stored locally) categories (name, color, list of regexps). On profiler side: 7 additional metrics, and more Zend Engine internal feature traced (compilation, request shutdown). This is still experimental (until 1.0) and not enough mature / reviewed for production. I hope it will help some of you !
&gt; So, I recently reviewed Keybase, They have a Nice Community, for Devs and other Hacker stuff, Anyways. I don't know if it may sound wise, If I create another version of it, Explicitly for Hackers, and of course Dev Ops. I guess the real answer is *why* you'd recreate Keybase; it's largely DevOps, Developers and Infosecurity bods on it at the moment anyway. It would be difficult to rival just how decent Keybase's offering is. &gt; Made especially for Ethical Hackers only, and do not accept members without any School Affiliation. That would lose you an immense number of potential users. I think it would prevent most people I've worked with in tech (specifically Dev, DevOps, and Infosec/Pen testing). Most of which have either (a) studied something completely non-technical, or (b) have learnt "*on the job*" - often via first line IT support or junior dev positions.
Hi everyone, A new php-spx profiling extension version (0.3) is available here: https://github.com/NoiseByNorthwest/php-spx List of changes here: https://github.com/NoiseByNorthwest/php-spx/releases/tag/v0.3.0 TLDR The web UI is still improving, less bugs, more efficient, more ergonomic. [Click here for a live demo](https://noisebynorthwest.github.io/php-spx/demo/report.html?key=spx-full-20180603_211110-dev-3540-294703905) Thanks to [Owen Smith](https://github.com/orls) it is now possible to define a custom color scheme to colorize function related blocks according to a set of user defined (and stored locally) categories (name, color, list of regexps). On profiler side: 7 additional metrics, and more Zend Engine internal feature traced (compilation, request shutdown). This is still experimental (until 1.0) and not enough mature / reviewed for production. I hope it will help some of you !
You've said it's a "*weak crypto algo*"; forward secrecy is about preventing attacks against the keys (i.e after future compromise of keys *in-storage*), and has little to do about the actual cipher in use.
Came here to suggest `systemd` - it's the simplest way of running deamons IMO, and provides options like watchdogs, process monitoring, logging, inter-process dependencies etc.
No need to nit pick how I said it. I am simply saying pgp is weak.
Exactly! It aims on the people who still think about the one framework. But it shall allso proclaim human over code. In the end it's all about community around the framework, second about the code itself. Hostile community with the best code won't be as successful as friendly community with good code.
It‚Äôs about consistency and provisioning. Policies may vary. 
Any sources for PhpStorm having **any** shared code with Eclipse? Because that's just blatantly wrong.
No.. As /u/Jake_Jeremy points out, there shouldn't be any shared code. Zend Studio was a souped up version of Eclipse with the PHP Development Toolkit AFAIK. PHPStorm - like most (all) of JetBrains' offering - is based upon [IntelliJ IDEA](https://en.wikipedia.org/wiki/IntelliJ_IDEA). A versatile, if slightly bloated, IDE. Both Java, but completely different IDEs.
&gt; People who don't use PhpStorm - you have no idea how fucking slow you are at doing basic shit. This is a massive generalization. I've worked with numerous people that are incredibly productive when using the likes of VS Code - or even heavily configured `vim` installs. Personally I think I'd be slower going back to PHPStorm now. PHPStorm is a simple way to get quickly productive quickly, but I wouldn't dismiss the productivity of those who are competent with a less intrusive editor.
I've worked in environments where you've had to request authorization to use any non-standard software - generally for licensing or security audits. Similarly, there's been other places where you've been *recommended* or *expected* to use a specific editor; most often PHPStorm. I've never worked in an environment where these decisions were dictated or governed in any way though. I would definitely be quite reluctant to work in such an environment too: I know what I'm comfortable working with, allow me to maximise my productivity by giving me the choice of tools. More recently, I've even worked in environments that have relaxed OS environments: where it's permitted to install a Linux distribution of choice if you're not happy with Windows or macOS. In my opinion this is how it should be, especially if you've got some experience under your belt. After all, only *you* know what *you* feel comfortable with, and what *you* are most productive with. 
It's not nitpicking, apologies if it came across that way - but it's an important distinction. I appreciate the concern about forward secrecy, but in any half decent threat model something has already gone wrong by the time that comes in to play: i.e your credentials have been compromised in one shape or form. It's a decent topic, but is a bit more nuanced than saying "*PGP is weak*".
I see your considern and will adjust next time
It literally does not take few minutes unless you copy paste this and send it straight to production. 
That's very cool.
No, PHP is bad. If PHP is ‚Äúnot bad‚Äù then no programming language is bad. PHP is worse as a language than any of its successful competitors. Its main advantage is ubiquity. Beyond that, it‚Äôs just not as good as other languages. Is PHP so bad that you can‚Äôt use it? No. But if it were that bad, it wouldn‚Äôt be popular, so that‚Äôs not a fair standard. The question is how bad is it compared to other widely used languages. And the answer is it‚Äôs bad. 
I see. :\) Thanks! Guess I'd have to remove unless they wanna be a Paid User or stuff, But for the Membership only. I saw a website, Which is actually for real Hackers called HTB. :\) HackTheBox, It might be better if I actually created a Invitation Generator instead of the usual, Submit the ID verification thing.
Also, I didn't mean to recreate the wheel, just because. I saw a PGP\-really based website with the functions I need. I mean, Cryptography might really be difficult to a Dev / Programmer with little experience to the extent that they might not finish the by\-product without a Team. Which in fact is my side of the story, But. If ever, I'm gonna make a product, It usually takes time. Not to be finished until a new idea pops out. Which is the Technology time\-span. :\)
Looks promising!
I consider it bad practice to have functions that return multiple types.
My first impression: truly impressive! Especially considering that the slow\-down is quite "low" compared to other tools. Unfortunately I don't have a proper web UI use\-case at the moment \(maybe later\) so I ran our big bad phpunit test suite and the slowdown was only a factor of 2 \(it usually runs slightly above 3 minutes\): ............................................................. 2928 / 2934 ( 99%) ...... 2934 / 2934 (100%) Time: 6.45 minutes, Memory: 354.41MB OK, but incomplete, skipped, or risky tests! Tests: 2934, Assertions: 144489, Skipped: 1. *** SPX Report *** Global stats: Called functions : 159.1M Distinct functions : 14.1K Wall Time : 294.24s ZE memory : 338.0MB Flat profile: Wall Time | ZE memory | Inc. | *Exc. | Inc. | Exc. | Called | Function ----------+----------+----------+----------+----------+---------- 4.29s | 4.29s | -3.6MB | -3.6MB | 7.9K | Illuminate\Database\Connection::setPdo 4.02s | 4.00s | 69.6KB | -8.0KB | 1 | SomeProject\Tests\Providers\EventServiceProviderTest::testExpiredJwtTokenReturnsProperJsonapiResponse 35.70s | 1.66s | 69.5MB | -16.4MB | 2.6K | SomeProject\Http\Middleware\JsonapiReponseSchemaValidation::handle 1.13s | 1.01s | -2.7MB | 184B | 1 | SomeProject\Tests\Handlers\PostsHandler\PostsHandlerTest::testReplacedToken 1.02s | 1.00s | 75.2KB | 184B | 1 | SomeProject\Tests\Handlers\TemplatesHandlerTest::testReplacedToken 1.10s | 608.5ms | -37.8MB | 30.1MB | 68.2K | Sentry\SentryLaravel\SentryLaravelEventHandler::queryExecutedHandler 605.0ms | 605.0ms | 12.5MB | 12.5MB | 304.0K | class_basename 573.1ms | 573.1ms | -214.3KB | -214.3KB | 4.4K | Doctrine\DBAL\Driver\PDOConnection::exec 717.6ms | 552.6ms | 631.5MB | 631.5MB | 1.8M | Illuminate\Database\Eloquent\Model::getCasts 495.0ms | 495.0ms | -22.8MB | -22.8MB | 176.9K | JsonSchema\RefResolver::resolveRefSegment This test is useless actually \(the slowest non\-framework methods from the tests use \`sleep\(\)\` ü§∑‚Äç‚ôÄÔ∏è\). But as I said, the speed and also it could handle the suite, impressed me \(I say this because I occasionally try different kind of tools on our project which causes many to fail for misc reasons :\-\) \)
Heh, just noticed this: `1.10s | 608.5ms | \-37.8MB | 30.1MB | 68.2K | Sentry\\SentryLaravel\\SentryLaravelEventHandler::queryExecutedHandler` Sentry isn't enabled for tests so this shouldn't be called, need to investigate ü§î
That's very uncommon and actually I have never seen it. If your employer wants you to only use a specific IDE you should askel him why, request a very good reason from him or may think about change the company. I only saw, that a company recommend a software because of license reason or help from colleagues. If you choose another IDE you're more or less on your own. But no force. And if you need so much internal technical support, maybe your company or department has other issues to solve (Knowledge, helping eachother ...) And the documentation of the software must not be bound to the IDE, they must be independent.
Oh man. PHP is not "bad" and my comment was not about PHP being "not bad". Learn PHP. Learn to read.
var_dump is not HTML formatted and the world better than print_r for debugging providing the variable type. compare print_r(false) with var_dump(false) and quit this ridiculous claim. for the logging var_export() is better than print_r as well. 
Then your design is wrong. There *could* be some undefined outside variables in the script, but not in the every function for sure. Do you really understand [this function's purpose](https://phpdelusions.net/articles/empty)? 
JFYI: you don't need empty() to validate a parameter at the beginning of the function.
You should notify gitlab of this tool, they're generally pretty positive about stuff like this!
The critical part with that incrementValue example is the "no plans to evolve from that". The typical case will be that there will be a use case at some point to evolve from that, so centralizing the business logic allows centralizing changes to implement those use cases, even if in the short term it leads to a lot of seemingly superfluous methods on those classes.
How could you possibly know my design is wrong? You have zero context to base what I‚Äôm using empty() for. Are you saying that nobody should ever use empty()?
Asana is a good product to try to clone to learn PWA.
It‚Äôs not ‚Äútypical‚Äù at all. Say, this example is in itself absurd, you‚Äôd never ‚Äúincrement‚Äù a stock. That‚Äôs not how stock trade works. So this is why one has to model their domain carefully and not run forward with their eyes closed based on fuzzy feelings. 
I don't know when I was browsing through settings of PhpStorm it looked JUST LIKE Eclipse. I'm fairly certain eclipse plugins would've worked over whatever JetBrains have souped up. 
Nope. I am saying what I am exactly said in my previous comment. You may want to re-read it. Either your application is using too much undefined variables, which is a textbook example of a bad design, or you are just misusing this operator.
I don‚Äôt need to re-read it as it‚Äôs garbage. There are infinite cases where a likely scenario is an empty variable. I‚Äôm guessing you‚Äôre one of these lazy devs who overly rely on throwing exceptions rather than gracefully dealing with silent failures.
I got you. You just cannot tell an empty variable from an undefined variable. Learn PHP.
It makes zero difference IN SOME CASES and in cases where it does YOU MAKE ADDITIONAL CHECKS OR USE DIFFERENT FUNCTIONS. Jesus Christ, people like you are truly infuriating.
That's just BS. Use whatever you want. At least share your code formatting style, for interoperability.
In some cases it does. However, such cases are scarce. And you stated that you are using this operator way too often which means it is misused in your code. By misusing this function you are robbing yourself of the useful possible error message and also effectively obfuscating your own code, changing its meaning (to test whether a variable is set and not empty is not equal to testing whether a variable is empty). This is the exact definition of a bad design. 
Are you hosting your sites on [wordpress.com](https://wordpress.com) or are you running your own copies of the code on your own server? If you're doing the former, which I suspect you are, try the latter. You can then make it do whatever you want.
Developers are generally very wedded to a particular IDE, and any manager who forces a dev to use a different one is mad. As long as everyone feeds code into the same build/VCS system then everything should be fine. Or if it's not, you need to make it so. 
Personally, none of those. We don't use a framework at all. We wrote all our own code. Which is why our service runs on about 10k lines of code instead of 200k. Which makes me happy. Go to Envato and buy a nice HTML template to handle the UI. Wrap it in some PHP to populate the template from a database in order to create pages and to handle authentication. And you're done. Choosing a framework should be a last resort. Not a starting point. Remember Smarty? Laravel is the next Smarty. It'll go the same way.
`print_r` is #100
Many solutions have this feature. It's called a FormBuilder.
I love the array* functions in general. I just wish they would work with iterators.
array_reduce is #473
Well, PHPStorm is not really resources\-savy but it is a company job to keep hardware up to date
I'm just curious, but assuming your project is on a Web host that provides both PHP &amp; MySQL, is there any tangible benefit to using SQLite? I used to use the latter only in because a full DB server was overkill, but I can't think of any other reason to use it.
Well I saw a while ago an article about someone reimplementing those function to be memory ungreedy (using generators). The github repo: https://github.com/MarkBaker/GeneratorFunctionExamples/blob/master/Generator_Functions.md The blog post: https://www.google.com/amp/s/markbakeruk.net/2016/01/19/a-functional-guide-to-cat-herding-with-php-generators/amp/ 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [MarkBaker/GeneratorFunctionExamples/.../**Generator_Functions.md** (master ‚Üí cdbb072)](https://github.com/MarkBaker/GeneratorFunctionExamples/blob/cdbb072a1d8e83fee52956aa4408d86469ab4b49/Generator_Functions.md) ---- 
array_column is #285 sort is #165, asort is #225, rsort is #473. I wish this list will help reduce usage of bad functions, like addslashes(#73), or phpinfo (#518), and make more 'lesser used functions' emerge. 
Good bot
Always avoid array_merge in loops : http://exakat.readthedocs.io/en/latest/Rules.html#no-array-merge-in-loops actually, also avoid concatenation in loops too... (but less).
Well, as I noted, SQLite is an embedded library for operating on files. And MySQL is a resident server you connect to via pipes and sockets. SQLite's footprint is absolutely negligible, there's zero set-up and it produces files in known locations that you can upload, download, move, back-up and so on. SQLite also rivals MySQL in read performance, because PHP process itself is reading the data from the file-system, instead of PHP getting it from another process (MySQL) that then sends it to the PHP process. So I don't know what an "overkill" means to you, but there are lots of scenarios where SQLite is a better fit. Oh, also, because it's in-process, you can filter and process content through user-supplied PHP functions (which you can call from SQL code directly). MySQL can't do this kind of stuff.
JFYI, this function cannot solve anything "ina snap". Under the hood does exactly the same o(n) as your explicit loop and its call will become slower as the array grows as well.
Wrong. You don't need a debugger to participate in debugging. https://en.wikipedia.org/wiki/Debugging &gt; Debugging is the process of finding and resolving defects or problems within a computer program that prevent correct operation of computer software or a system. What I showed above is an example of debugging. It is not a debugger though. 
Just about every CMS except WordPress has custom fields out-of-the-box. WordPress is the odd one out for requiring a plugin. 
Not disagreeing with you, but that laptop works just fine for code and deployment. It was top of the liner in its time so it's not some trash tier celeron-based office pc. It does have juice. And PhpStorm hogs it on a larger codebase. It also hogs down a MacBook Air from 3 years ago (a collegue's PC) when they open the largest of projects around here. 
You work exactly the same way I did in 2002.
I agree with everything you said, but like I said in my comment, the assumption is that MySQL was already spun up by the web host. That last bit about passing PHP functions to SQLite sounds like a very useful feature though; thanks for sharing.
He said when a function has arguments that can be multiple types.
&gt; Go to Envato and buy a nice HTML template to handle the UI. Wrap it in some PHP to populate the template from a database in order to create pages and to handle authentication. And you're done. Some sites might be a tad more complicated than this. &gt; Remember Smarty? Yes, in fact they are active and releasing a [new version every few weeks](https://github.com/smarty-php/smarty/releases) &gt; Laravel is the next Smarty. It'll go the same way. Maybe don‚Äôt pick Laravel then, but some other framework with proven track record and over 10 years as one of the top options on the market? In all fairness to Smarty, there weren‚Äôt much alternatives back in the day. 
I've heard of it in large corporate companies, generally where individuals do not have the ability to install stuff on their own machines without a business case. Beyond that, it's generally a free\-for\-all for developers to work in whatever way they feel most comfortable. "Supporting" the developers with the IDE should never be a reason to lock in a specific choice of IDE, the main requirement should be that they are developing in an as\-close\-to\-live\-like environment as possible to pick up things like version or OS discrepancies. If you have to support a developer with their chosen IDE, then you probably shouldn't be paying them as a developer...
In what way python would be better choice? \(Serious question\)
It may be spun up, but thing is... - Most hosts have MySQL. - Some don't have MySQL, some have PostgreSQL. - Some have neither. - **ALL** have SQLite (because it comes with PHP). Also MySQL requires set-up, the user has to open a file and enter host/post, user/password, at the very minimum. Which means they need to create those in their host settings or dig through panels and emails to find them. SQLite requires zero set-up. If you can write files (shared hosts are typically using 755 permissions by default, so you can), you can use SQLite.
[The community is already made its choice](https://i.imgur.com/KsfdVjP.png) Personally, I am expecting fullscreen ads, constant interface changes and all other stuff that made Skype totally unusable.
CraftCMS is basically ACF on speed.
It's sad to see such a great service and establishment "drop the soap in the shower".
First and foremost, I think everyone should calm down and stop hyperventilating. This means absolutely nothing about GitHub in the short term, as a user of it. In the mid-term it means we'll see a half-assed rebranding effort and you'll be seeing the Microsoft logo somewhere in the footer maybe. In long-term, it's a coin toss. You'll have plenty of time to move *if you would ever need to*, as a lot of what GitHub does is a commodity (issue tracking, Git server, static web pages, etc.).
Please don't make generalizations about "the community". If GitLab's numbers were impressive, they'd have said "in 24 hours we saw N new repositories open". When a start-up says "10 times more new repositories" it's a spin. Maybe GitLab sees 100 new repositories a day, and now for a couple of days they'll see 1000 new repositories a day as the... how can I say... our less rationally endowed friends make knee-jerk moves. Big whoop. Everyone else is still at GitHub. 
Since it's natively supported and PHP isn't?
Not much change in terms of usability including the interface. Borrowing a leaf from their acquisition of LinkedIn, I expect a high degree of independence but with deep\-layer/background integration with their core development tools and cloud\-hosting
Thanks for your hard work
Guess what, when a startup offers free things through which to grow a "community", 9 times out of 10, their plan from the very start was to be acquired by one of the giants.
Are you so dense you can't see Microsoft's track record? Or are you going to trust them this time?
If you don't pay for the product, you are the product.
I had the same problem a few weeks ago, and as I couldn't find a half\-decent library that streams JSON, I wrote one: [https://github.com/umulmrum/json\-parser](https://github.com/umulmrum/json-parser) It's beta yet but has an extensive unit test suite, so you might try if it suits your needs \(see also the notes on performance in the README\).
SilverStripe gives you form scaffolding for custom forms or Userforms for user editable forms. If you are using ACF for data gathering then SilverStripes dataobjects with front end forms are super powers. 
What is their track record, enlighten me. And try to stick to facts from this century.
Directus is an interesting one to check out as well.
I have several private repos that I pay for. That's why I thought I contributed to the well being of the product. Apparently not.
&gt;And try to stick to facts from this century. So your argument is 'they were once bad, but now they're good'?
I am hoping Microsoft could realize that GitHub is part of the Office and include a Pro\-licence in the Office 365 package...
I asked you to enlighten me about their track record. I didn't ask you to infantilize the discussion by talking about a company of 150,000 professionals with primitive childish categories like "bad" and "good". I'm also typing this on Windows, woooo, scary! /s
Reminds me of amazon purchasing twitch. I think that was a smart decsision. On their part but lately as you can see these kind of small companies that are populair are just getting bought.
Have you heard about PR? I think you may have fallen victim to it
The idea for ACF came from [ExpressionEngine's](https://expressionengine.com/) built-in channels &amp; fields with [Matrix plugin](https://eeharbor.com/matrix). ACF is not an original idea. It's a great implementation, but it's _not_ the original source. That came from ExpressionEngine. Ask Elliot when/where/how he came up with the idea ;) 
For one we have MSN that was about to go down the drain and then they acquired Skype to keep in the business. Skype has suffered so much poor decisions since then and today it's only living by a thread (in fact, I can't remember the last time I heard someone used Skype, or even their business platform Lync). Have you ever visited their support forums or tech related topics? It's a huge mess. It's so bad that people actively turn to other communities for help rather than the official. Microsoft is also so deeply covered by Indian outsourcing that you're lucky if the person replying to your question actually comprehended the topic. (Not racist, it's simply fact). I once called support (from Sweden) and I could barely understand a single friggin word even though I have many years of experience speaking with people from all over the world. Remember Windows? Yeah, I do too. I enjoy playing a game every now and then, which isn't compatible with Linux which is what I use 90% of the time, but when I want to relax and play a game with friends, I used to like booting up Windows. Now it's a giant mess, drivers gets automatically installed with endless control panels and services that they think I need. They advertise shitty fucking "windows store apps" in the "start menu" (which by the way isn't a startmenu anymore), it's a list of shortcuts. Ohh, and if you disable cortana and uninstall all xbox related bloat (like i do), the new "start menu" doesn't even work. How about a free "developers update" that literally rebooted my PC in the middle of a game, and took over 30 minutes to complete, lol. And then we have services they just try to maintain without actually actively developing or expanding such as LinkedIn. Microsoft likes to mess with things, and they never manage to do anything good lately.
PoV, assed, toss? What's with the sex references?
&gt; For one we have MSN that was about to go down the drain and then they acquired Skype to keep in the business. Skype has suffered so much poor decisions since then and today it's only living by a thread (in fact, I can't remember the last time I heard someone used Skype, or even their business platform Lync). "A product they manage is not popular" is not a sin. Skype still works fine. Messaging app userbase is fickle. Remember when ICQ was huge? If you're talking about the fact Skype shows banners from time to time, guess what, Skype's exit strategy was always to sell to a big company. It's either this, or charge for Skype, or show ads. they sold to Microsoft. Which is now also left with two choices - show ads, or charge. So they show ads. You think Google, say, wouldn't show ads if they bought Skype? Funny. &gt; Have you ever visited their support forums or tech related topics? You're not saying anything coherent here that applies to GitHub you're just ranting that this and that is not as good as it can be. &gt; Remember Windows? Yeah I remember it. I'm typing this on it. Outside your microscopic "Linux on the desktop" bubble, it's full of Windows and Mac machines all over the world (mostly Windows though) and that never changed. And once again... what... the sin is "oh Windows is not popular in my circles!". That's the problem?! 
So I asked you to describe relevant facts from Microsoft's "track record" that you imply you know a lot about. After a few comments, let's sum up what you're giving me so far: - "You're dumb" - "You're a victim of PR" - Relevant facts about "track record": 0 It was nice talking to you. Go troll someone else.
I ain't trolling, I'm simply pointing out your ignorance. You believe a company with a proven track record of shady business practices is somehow all of a sudden completely moral? You know the real reason they purchased Github? Information. The same reason Windows 10 is free. Information. It's the new gold.
https://monitor.gitlab.net/dashboard/db/github-importer?orgId=1 It's a pretty significant spike - but that was expected. Github has always been a darling of the open source community and a good number of them have no trust in Microsoft. The EEE days still feel fresh for many people and MS must have known it was going to take a *long* time to shake that stink off. I actually don't think it's a big deal that so many are shifting across though, Gitlab is a good product and is even ahead of Github in some ways, chances are that a lot of people were toying with the idea of moving anyway any this was just a convenient catalyst. So they're not going to lose out. MS didn't buy Github because they thought it was going to make them billions of $$$ every year so they won't be concerned either. FWIW, I doubt very much that MS will mess with Gitlab or attempt to monetize it more than it is already. It's a strategic acquisition, not commercial.
I for one welcome our new billionaire overlords 
Yeah, I'm sure GitHub was not collecting any information until this point. They'll only start doing it now, bud.
What about LinkedIn, minecraft, or xamarin?
&gt; You're not saying anything coherent here that applies to GitHub you're just ranting that this and that is not as good as it can be. No, I'm saying Microsoft has a track record of not doing well. Which is what you were asking for, not me. &gt; Yeah I remember it. I'm typing this on it. Outside your microscopic "Linux on the desktop" bubble, it's full of Windows and Mac machines all over the world (mostly Windows though) and that never changed. Yep, and that's unfortunately due to virtual monopoly. Everyone hated on Windows 8, I don't know how many times I had to visit senior relatives and helping them just to turn the PC off. Guess what, people still bought it because they simply don't know better. The product surely wasn't GOOD, which is what we're talking about. There's unfortunately a big difference between a good product, and usage share in this scenario. &gt; And once again... what... the sin is "oh Windows is not popular in my circles!". That's the problem?! What, I never said that. In fact, I think all of my friends use Windows. The problem is the product, and how a good concept turns to crap. I value GitHub. Booo fucking hoo. GitHub is a community, and a network. It doesn't take much to unbalance it, and rebuilding something like that isn't done over night.
I prefer this. GitHub as a company is rather stupid. Microsoft, I'm hoping, won't stand for that.
Well, every MS hater and every privacy [alu foil-head](https://media.istockphoto.com/photos/tinfoil-hat-against-mass-media-picture-id491246605) will get crazy about this. My favourite comment is: &gt; Monday morning: misteriously Linux repo on Github is gone IMHO: If Microsoft does everything correct, this will heavly influence Windows development in a good way. Inb4 Git native support on Windows (Windows 11) plattforms, native service implementation on every possible area mostlikely in Visual Studio environments. In best case scenario, MS will include "cheap" subscription services to use many MS tools like VS, Office etc. with one one payment. I would love paying 5-10‚Ç¨ and get everything.. Office (Word, Excel, Outlook would be enough for me), Visual Studio (C#, C++ and a few other would be enough) and also Git support for all these things. Also a business subscription where you can get the high end tools like every Office tool (like Project and wtf else existing that I never use), additional VS languages inlcuding advanced team-project possibilities. I think that's it.. there shouldn't be much more influence. Even what I wrote is "utopic" since they already could do everything I mentioned.. Just used the Github news as another "reason" to do all things :-) So they don't need to split every tool they have, but combine them on one area.. like Adobe does. 
&gt; It's a pretty significant spike - but that was expected. Imported repos jumped from 0 to 6000 for two days. GitHub, as I noted above, has 57 million repos. It's a significant spike for GitLab imports (which... again, are apparently around 0 on a usual day), but it's not a significant loss for GitHub. The migrations will have to continue at this rate for **10 years** for GitHub to lose **one third** its userbase. &gt; FWIW, I doubt very much that MS will mess with Gitlab or attempt to monetize it more than it is already. It's a strategic acquisition, not commercial. Yup.
Better Microsoft than Apple. If Apple bought GitHub they would be "brave" and remove most of the important features and make iPad version of it.
&gt; No, I'm saying Microsoft has a track record of not doing well. Which is what you were asking for, not me. From my PoV, Microsoft has a track record of delivering an excellent set of platforms, the best developer experience in the industry, and I'm heavily using their top two products: Windows and Office. You're clearly in a bubble enough to tell me "do you remember Windows" with a straight face and expect me not to laugh. The market share of Windows on PCs **88.5 fucking percent**. Enough said about that. &gt; Yep, and that's unfortunately due to virtual monopoly. Everyone hated on Windows 8 Bud, it's 2018. We loved Windows 7, we hated Windows 8, and now we love Windows 10. Your argument is way past its expiration date. 
it's true, they haven't ruined linkedin.
&gt; and now we love Windows 10. Your argument is way past its expiration date. I'd say that's because contrast differences from Windows 8. Windows 10 is still not a good replacement for Windows 7, but it's better than 8. Main reason for the vast majority of upgrades would be the limited SLA/Support, and for gamers it would be due to the fact that newer DirectX versions isn't backwards compatible. Like I said, it's not a good product just because people are forced into it.
Oops - I obv meant they won't mess with Git**hub**. Corrected in the original.
tbf that is better than "they once were bad and they because of this they must still be bad". after all it's a totally new generation of people at the top now. (fwiw they are still bad! just in different ways now)
Yeah, I even read it as "Github" without noticing ;-) Brains, man. They're weird.
You were asked time and time again to provide proof, or at least something other than "lol can't you see you're being brainwashed" in terms of how Microsoft's track record is garbage. You provided that statement so the onus is on you to follow through with that. &gt; You know the real reason they purchased Github? Probably to make money from enterprise agreements, ties in well with how Microsoft makes a lot of their money as is 
_then why didn't you just say that_ this "oh so you're stupid because you don't know a thing", "what thing" "well no point telling you if you weren't stupid you'd already know"... 
damn \- I'm going DOWN!
horn dog!
counterpoint: skype has always been bad
&gt; counterpoint: skype has always been bad I fail to agree. In any case, you surely can't disagree with the fact that it's been turning worse.
Honestly, my first thought was congrats to Zach Holman, assuming he retained a chunk of equity. Guy worked his butt of for it.
\&gt; Not much change in terms of usability including the interface. Yeah... so I think it's too soon to judge their design changes, maybe give it a couple of days
if I can get it to connect, I'll let you know ;)
This! That would be nice since our org already pays for O365. 
Microsoft likes stealing data so I will refuse to use one of the best communities in the world.
Yet
&gt;If GitLab's numbers were impressive, they'd have said "in 24 hours we saw N more repositories open". If you actually looked at the HN post you're talking about, you would see it is not an article but a link to a dashboard where you can monitor GitLab activity. https://monitor.gitlab.net/dashboard/db/github-importer?orgId=1 (down right now, presumably due to insane traffic) According to the data, which is valid, the rate that people are importing repositories averages 3147/hour over the past 14 hours, which translates to about 75530 repositories per day. The rate is only going up, it will be even higher soon. Yes, people are migrating en masse to GitLab. We're not "less rationally endowed", either. Source for calculations: https://pastebin.com/qBzzpRBn
they haven't shit on a turd
&gt; GitHub as a company is rather stupid why? and how are they not a company anymore?
meh, if it goes south, there are enough alternatives.
+1 Insightful 
https://www.reddit.com/r/PHP/comments/8og7cg/whats_your_opinion_on_microsoft_allegedly/
oh boy \- here we go again... #notEnoughPoints
Thanks, I made just do that. I've noted it on a relevant feature request ticket, and I announced it on the forum. However the forum is not particularly busy with helpers or employees, as far as I can tell, so it may have slipped under their radar. 
Did you know, that since November 2016 Microsoft is a [member of Linux Foundation](https://www.linuxfoundation.org/membership/members/)? And Platinum one, that means they pay good money for it. And did you know, that Microsoft is [contributing into Linux kernel](https://lwn.net/Articles/451243/)? Probably not..
&gt;Imported repos jumped from 0 to 6000 for two days. 6000 is the hourly rate. That is 144000 repositories daily.
I honestly don't think Microsoft would effect any negative changes on GitHub. But who cares? Git Lab is better anyway.
&gt; so I'd say we cancel the apocalypse party for now A "Cancel the apocalypse" party, you say? I'm all for it. Too bad the second movie sucked.
I was looking at the same dashboard. You caught a mistake I made, I thought that's the daily rate, but it's the hourly rate. That results in a healthier pace of migrations naturally. So, thanks for the correction, cheers. Few remarks, though: 1. You said the "rate is going up" and it's clearly going *down* right now, both at the current hour (because it's early in the US I suppose), but much more importantly also **day over day** the rate is decrease, so I wouldn't get overly dramatic about making projections and prophesizing it'll be "even higher soon". 2. It'll take for GitHub users **two years** at this rate to migrate. So I wouldn't use phrases like "migrating en masse" ("en masse" means all at once). This is a small minority of users migrating as of right now. 3. So far nobody can offer a rational reason for the migrations, it's all knee-jerking and border-line religious anti-Microsoft attitudes that drive this migration. So until someone gives me a rational reason, I will continue to consider those people "less rationally endowed".
strpos use cases are a subset of preg_match use cases.
I don‚Äôt pay to breathe air. Now what 
I think it's awesome. MS has been knocking it out of the park recently. If anything, it strengthens GitHub's lasting power being tied to such a huge business. MS isn't stupid, they know developers drive the ship, and if they want in bed with developers they just bought the whole whorehouse. They also know if they fuck it up we will just move. 
Let's be honest, skype was a piece of shit even before, it was just popular. People are moving away simply because there are better options now.
Aye, thanks, made edits up the chain. Another user also pointed out. However 6,000 is the peak rate, average is around 4,000, so daily is around 80,000.
FYI, it's official: https://news.microsoft.com/2018/06/04/microsoft-to-acquire-github-for-7-5-billion/
thats_the_joke.gif
[thats_the_joke.gif](http://gfycat.com/GlassAmusingBeardedcollie) --- ^(*Feedback welcome at /r/image_linker_bot* | )[^(Disable)](https://www.reddit.com/message/compose/?to=image_linker_bot&amp;subject=Ignore%20request&amp;message=ignore%20me)^( with "ignore me" via reply or PM) 
&gt;1‚Äã. You said the "rate is going up" and it's clearly going down right now, both at the current hour (because it's early in the US I suppose), but much more importantly also day over day the rate is decreasing, so I wouldn't get overly dramatic about making projections and prophesizing it'll be "even higher soon". Wrong, people have only been migrating for about 17 hours so far. I suspect the decrease will continue to happen around this time every day. I am reasonably certain daily repository migration rate rate will continue to increase. You'd have to be a pretty delusional fanboy to think otherwise. &gt;2‚Äã. It'll take for GitHub users two years at this rate to migrate. As I explained, the rate will continue to increase. It has been less than 24 hours since the news broke that the deal will go through, people are still picking up on it for the first time. &gt;3‚Äã. So far nobody can offer a rational reason for the migrations Don't dismiss the reasons you've been given or ask for reasons like you weren't given any. If you don't understand by now, then I doubt you will. Again, stop insulting us.
Okay, What the actual twat. That's a nice news bro :\)
!RemindMe 1 week "I am reasonably certain daily repository migration rate rate will continue to increase. You'd have to be a pretty delusional fanboy to think otherwise."
I will be messaging you on [**2018-06-11 13:37:57 UTC**](http://www.wolframalpha.com/input/?i=2018-06-11 13:37:57 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/PHP/comments/8og7cg/whats_your_opinion_on_microsoft_allegedly/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/PHP/comments/8og7cg/whats_your_opinion_on_microsoft_allegedly/]%0A%0ARemindMe! 1 week ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
&gt; Don't dismiss the reasons you've been given or ask for reasons like you weren't given any. If you don't understand by now, then I doubt you will. Again, stop insulting us. Everyone is beating around the bush like you are in the quote above. "But Microsoft's track record". I ask for specifics, nothing. I ask every time for specifics, and because I've asked like 5-6 times, I should "understand by now" despite no one says anything except some vague fear of Microsoft. Sorry, but that's irrational. I'm not calling you names, I'm qualifying the reaction. It's purely emotional. Rational reasons can be defined and supported. Stuff like "how come you don't get it" isn't a definition of a rational reason.
Github's lasting power was in question?
Kind of like saying, the hulk got stronger, doesn't mean he wasn't strong before. 
NO. Even then NoACID does not mean lack of any failure recovery mechanism ;\) PS NoSQL either means literally no SQL interpreter or non relational model for holding and/or querying data.
I've already cancelled my paid subscription and have begun the move to Gitlab. I'm not going to have what I consider 'my space' be invaded by a company I purposely purged from my life.
IMHO, if you do "something like Jira" you should have lots of API's (including for insertion, deletion, modification of data) for developers to integrate with. Make it a core/backend that developers could integrate with anything (including Excel -- not my choice, but apparently a lot of project managers still use it). I think Jira used to have a lot of API's but I think that they cut back.
Thanks. I did a search on GitHub on this sub, that post somehow doen not show up ...
My shop standardized on IntelliJ because we were already using it for Java when we picked up PHP, so we already had people who were very familiar with the features. I think it's a good idea for a serious production shop to standardize on an IDE because overall you want to standardize on everything you can. When you start getting into stuff like debugging with Xdebug, codesniffing, etc... it's easy to document how to get set up for the one IDE or to even preconfigure it all for new developers. A lot of shops have VERY complex environments when you start getting into stuff like virtualization, scripting, etc... IMO, it's a good idea to reduce the possible anomalies as much as possible. That's not to say that you can't or shouldn't use other tools, I think it's great if people want to do that some.
[Voyager for Laravel](https://laravelvoyager.com/) is a CMS/Admin with a lot of features like ACF. It is easy to use.
&gt; Did you know, that since November 2016 Microsoft is a member of Linux Foundation? And Platinum one, that means they pay good money for it. And did you know, that Microsoft is contributing into Linux kernel? Probably not.. Uhm, ok, why does that matter? You do know how the process on development works right? This isn't about being part of, or helping out, with open source communities, being part of foundations or even if they "include the ubuntu kernel in windows" (or even just using GitHub). Without ownership they cannot dictate anything. That's the problem we're discussing (everything Microsoft decides over turns to shit), which seems to have jumped right over your head. It doesn't matter if they help out with stuff they don't own. The reason for this is that there are more eyes watching them, and they cannot just dictate that "now we need this feature" or "now we'll ditch this software" or even "we fixed this, accept our pull request". A lot of people will do code review, organizations will decide TOGETHER if something is implemented or removed. That's how open source works. Let me ask you this, did you ever submit a PR? Did you ever submit an issue or bug report? Have you been through the process? Microsoft have a track record of messing shit up, badly. This is the discussion. That's what this discussion is about. Your comment implies that you totally missed the point of this.
Probably. It works for me. I guess I'm lucky.
I'd say that at least a part of the strategy is fueling artificial intelligence. If you want AI that can write code, you need lots and lots of code to learn from. There's no better place for that than github. 
I'd have upvoted you if it wasn't for these follow up comments taunting people to downvote you lol
Microsoft = agenda = CIA. Or those backdoors in Windows just got therw by themselves and stayed there. As paranoid as Microsoft is with their source code. And some of t hese posters here seem a little too pro M$ if you know what I mean. I like Bitbucket.
Exactly!
I think you're confusing PHPStorm / IDEA with (Aptana Studio)[http://www.aptana.com/products/studio3.html], which is based on Eclipse. Eclipse and IDEA/PHPStorm are worlds apart in performance, usability and ease of use. Give it a try.
Name checks out.
well, you're stuck down here in this hole with me now :D
Well you could use PostgreSQL to store NoSQL-style JSON data (and simply not use ans SQL features if you don't want to... but you could) and get ACID for free...
One reason Github is huge is it's community and it's website has a great search where you can find new things quite easily. I don't see anything similar with Gitlab except for an /explore and Groups page which isn't even polished enough to show you popular things instead opting for "last updated" which is literally anything from a giant repository to a student's homework. Unless your project has lots of clout and you can afford to bring your community with you I suspect that this will make it harder to make a project visible.
While I agree we should hold off on mass panic I think this does open up concerns about the censorship side of open source projects. Github hosts a wide array of projects, some grey hat, some black hat and some things that are a direct detriment to Microsoft as a company. E.G. hacking tools, reverse engineering MS products, breaking MS products etc. All of these projects deserve an open source, accessable home and I would be very catious about MS deciding what we can and can't clone from github. It would be a real shame to have to decentralise such a great community and resource like github for a range of programming topics. I hope none of this comes true, of course.
The amount of marketing nonsense in that announcement was impressive.
&gt; Which is why our service runs on about 10k lines of code instead of 200k. What does lines of code have to do with anything? The number of lines doesn't make it fast or slow. I can write something in 100 lines that's slower than something written in 100k lines. Also, is your code fully test covered, stress tested, peer reviewed and fully documented? Is anyone that is going to start working with you instantly going to be familiar with the router, db abstraction, view rendering, dependency injection container, service registration, session integration and form handler? I'm guessing no, and that's reason enough to use a framework. When you start a new project do you have all those features completed by just pressing enter because you used a framework? You spent weeks writing all this code where you could have just got code that was written by people so much smarter than you that is totally tested and used by thousands of other sites. Not sure why you reinvented a crappier version of the wheel.
absolutely not. my last job offered phpstorm licenses, and we all preferred it. but we were all free to choose whatever ide we wanted
A lot of it seems ideological to be honest. People hate Microsoft and for good reason but having been forced to use the Microsoft stack for the last 5 years, a lot of it is pretty damn good. SQL server is amazing, .NET is really good, .NET core is better, C# is becoming my favourite language. At this point the only two bits I hate are Azure and Windows itself but it's not like everything they touch turns to shit like I used to believe. Except Skype. Skype needs to die.
For all the projects that leave Github over this, there will probably be an older and bigger company newly opened to the idea of finally migrating to Git\+Github from Team Foundation Server or whatever other terrible concoction they've been holding onto.
So you say that is\_array is so more important than is\_bool? Interesting ranking
There aren't that many Dx 12 titles out yet. Why? I don't know. Developers stick to Dx 11. Might have to do with people usually running garbage hardware. I do my fair share of gaming on Win10. And also develop on it. In fact. Personal opinion. Windows 10 + WSL = best thing since sliced bread. 
Did you also know that Microsoft is the biggest contributor at github? 
The test compares PHP 7.0 not PHP 7.2. So the tests are not for the latest version in neither case.
Sorry to say it but it's not production ready.
My opinion is that everyone is over\-reacting. Ive had multiple friends start moving their stuff too Gitlab the moment the news hit, meanwhile I remember leaving Gitlab due to constant issues in accessing my data and weekly downtime. 
&gt; They also know if they fuck it up we will just move. SourceForge learnt that the hard way.
I see that MS is already doing damage control judging by the downvotes and comments in here.
&gt; these kind of small companies that are populair are just getting bought I wouldn't call neither Twitch or GitHub small companies. They are not gigantic like the microsoft or Amazon can be, but having nearly a thousand employees make of you a rather big company already. 
Two notices for the price of one, unless you have an isset\(\) before that first \($\_REQUEST...\) As said, init your variables, there's a reason why its flagged as an error in most IDEs.
leave r/php
&gt; All of these projects deserve an open source, accessable home and I would be very catious about MS deciding what we can and can't clone from github. GitHub wasn't open source, and GitHub already had full control over what they wanted or not on their platform. Now they just gave the very same power to Microsoft.
Microsoft owns gitlab as it‚Äôs made by github
amen
Is this coming from personal experience or is that you‚Äôre stupidity and jealousy showing?
Never ask the idiots to explain them selves
That's a bit harsh, don't you think?
Oh look it's the guy who lives on r/PHP posting on r/PHP.
I worked on legacy project (PHP 5.3, it started as PHP 3), 4/5 millions lines of code and 30k+ files. The root dir have 15k+ php files. The application is a standard php forms calling DAO's. The past few years, had many improvements, adding classes (models) to work with business logic. So, the first thing we tried to do was migrate to newest version of PHP: PHP 5.6 (in that time php 7.0 was recently released). To do that, we add a `.htaccess` file and create an FrontController to handle all request to the application, this implied in changing all path's usage inside code (basically 100+ files), fixing relative and absolute path's. We couldn't migrate all code to PHP 5.6 (register_globas, magic_quotes), so we create a package which emulates it: https://github.com/DBSeller/legacy With this, we were able to add composer packages on the application, and started to add new patterns inside the application together with PSR's. After that, we create docker images to run the app both in PHP 5.3 and PHP 5.6 started to deploy gradually in customers. Later, we started to map breaking changes in PHP7. Started CI/CD... The application are not ready to run in PHP7 but maybe in a year or two we can. This whole process are running since 2016 and are not completed yet :/ Hope it helps.
Source ?
&gt; Unfortunatelly, Gutenberg will really ruin the way people use these sites. I know you can disable it but it seems that WordPress is trying to become more like Wix which is unfeasable for corporate CMS (yes, I see the irony). I'm just following here. What do you mean?
I'm hoping this will make it easier to code in MS Word /sarcasm
I meant only GitHub obviously.
`man 7zip` would be a good place to get started.
I can see Microsoft putting their enterprise expertise into github's on premise offering. They do see to do right by developers these days. And if they fuck it up? I've got "backups" of my code on every machine I develop on.
exec() executes a system binary and doesn't care if you call `zip` or `7z`.
HackTheBox is a really good example actually; the membership creation script is *really* nice - and goes beyond the usual JS hardcoded password. That's the kind of model I'd probably opt for to be honest. I *think* they have a way you can be affiliated to a school; but there's a lot of independent learners on there. If you have a challenge to gain membership you're likely to get better users than just requiring school affiliation - it's a good idea!
No worries; without people recreating the wheel there wouldn't be any competition out there! As for cryptography, it *is* misunderstood by a lot of developers - and increasing understanding is a really noble idea. I think [CryptoPals](https://cryptopals.com/) is a brilliant resource; something similar with unit tests bundled in (a bit like how [Exercism](http://exercism.io/) would be awesome IMO.
I agree; one of the reasons I rarely use PHPStorm is because there's lightweight alternatives there. If I need to do some heavy refactoring or some debugging - be it for Go, NodeJS or PHP - I fire up VSCode now; even though it's an Electron app, it feels more responsive in my experience. Similarly, for day to day editing, I opt for vim - it's not everyones cup of tea, but there's no distractions and it gets the job done. Companies may have the responsibility to keep hardware up to date, but it's up to me to decide how I use those resources effectively. If I have multiple virtual machines and docker containers running different services, I'm going to be very careful about what other applications I have running. I'm not saying PHPStorm is as bad as Eclipse at all, but there's definitely alternatives that are less resource intensive.
Thanks for your feedback :\) Indeed overhead &amp; accuracy are a serious concern for me [https://github.com/NoiseByNorthwest/php\-spx#notes\-on\-accuracy](https://github.com/NoiseByNorthwest/php-spx#notes-on-accuracy) Your test suite is impressive, 150M function calls, far too big for the web UI at full resolution!
Android Studio *is* IntelliJ IDEA based, they used to maintain a collection of Eclipse plugins IIRC - but now it's an IDEA derivative. I agree about VSCode though - despite being Electron based, with the correct plugins it's a *really nice* solution.
Thank you for feedback. So I added new examples: 1\) for detect categories of photos \(1k categories\) 2\) waifu2x implementation for scaling up images without quality loss
Lol I think these are his expectations. 
Currently most CRM like sites have TinyMCE editor and bunch of meta boxes with custom fields for additional information. Its not very inspiring but it's great for corporate users when you just want admin to enter information into form fields and then generate uniform pages based on information provided. Gutenberg will be like a page builder sort of like Wix or similar where people can build pages from content blocks. Its great for bloggers and designers but for corporate users its absolute disaster. These people usually have very low IT skills or just don't care in general so expecting them to build pages from content blocks is absolute non-starter 
Regardless, I'm interested in seeing Node 10 results.
Here's my take on Microsoft acquiring Skype: \- Dev is tired of Skype being buggy \- Dev comes up with a plan to get rid of Skype \- Plan consists of a roadmap \(what to do with Skype if his pitch is successful\) \- Dev makes pitch \- Execs love it \- Microsoft buys Skype \- Dev is in charge of product development \- Dev runs Skype into the ground where it belongs \- Dev 1:0 Everyone who liked Skype
Get out of my property! /s
I would be very careful before moving away from WP just for this one thing. As you said - you can very easy to disable it. It's less than an hour of work and you're done. I don't see how completely rebuilding in another CMS is better. Another thing, you should really try to build something in another CMS before you move there. All the other "it's not WordPress" CMSs are built by developers to solve developer problems - not User problems. You may find yourself in a situation where you and/or your Users have to do more work to accomplish the same thing. Another alternative would be to leverage to the REST API that is part of WP now. You could write a pretty straight forward page that just has the fields you want and POST that jazz to the API where it makes a Page or Post for you. A more risky approach is to wait a bit. You're not the only one that's having concerns over this. I would imagine very quickly there will be ways of limiting Gutenberg to not much more than what the rich text editor is now. 
No no I dont
&gt;&gt; Remember Windows? &gt; Yeah I remember it. I'm typing this on it. Damn man, I thought you were cool.
Aw, shit, dawg. Imma install Linux so I can be cool again. Wait, I have it on a USB stick, bootable and everything! There it‚Äôs booting. I‚Äôm cool, man. That really hurt me. 
You're cool now bro, we chill. 
What OS are you running? can you not just spin up a local instance? If you are on a windows box the new linux subsystems work great for this. I personally don't use editors / IDE's to manage git, I do everything command line, I just prefer the control that it gives. As for linting / inspections You could always try looking at something like expandrive, which lets you map a drive over SFTP. I personally haven't used it since version 2, but it worked well for me back then. You could also set up a VPN to your instance so you are on the same network and map a drive directly. Another option would be something like sublime text with the SFTP plugin, it allows you to have a local working directory that can then push to the server on save (Not sure how that will work in a multi dev environment, since you'd have to pull down every time you pulled from git)
Yes. They were taking on pretty heavy losses. If Microsoft didn't buy then someone else would have needed to. 
Make a local dev environment close enough to production, make a local working copy, and initially test from there. I'd stay away from remote editing, especially since you have version control. It's an easy way to introduce bugs without a way of replicating them. A shared testing environment is fine. 
Sincere question: knocking it out of the park how? I mostly work in web or iot/mobile but I never seem to even see MS tech mentioned. They seem pretty relegated to stodgy enterprises that are addicted to Office.
I don't think anyone *liked* Skype. It was just the best available at the time.
Don't do remote... Create a local env. You will see how all works way better either for you and your coworkers.
C# is an excellent language. Don't forget to mention LINQ, which is what I miss most from my windows development days. 
no it won't help because with higher load you'll need to rename two files. so for a workaround you will be renaming three, then four, then five, ... etc files :) use proper file locking. you can use LOCK_EX but it will only works for file_put_contents. you need to drop usage of file_get_contents and file_put_contents completely and simply use flock, fopen, fwrite and fclose
to be fair, Apple have been strong privacy advocates. I would take that over MS with their telemetry and routing what was peer-to-peer skype through MS servers
* VS Studio Code * Azure not a complete piece of shit * Linux Subsystem in windows * Microsoft Teams - slack alternative * Outlook Web/Android isn't a piece of shit * Microsoft's Android apps are steller With the notable exception of edge being a still being a wet fart, it's not bad. 
I can't help but wonder if there's a future anti-trust violation looking to happen here. GitHub is a service, with pretty much all of it's development efforts devoted to the service of hosting public and private code repositories. Microsoft is arguably one of the largest software development companies on earth. They have product lines that are in virtually every major sector of the computer industry. This puts them in the unique position of having the largest number of competitors of any company out there. How many of those competitors, present and future, have private repositories on GitHub? Even if they delete their accounts, Microsoft will also be purchasing backups as well. There is potentially a wealth of information not only in the code, but on the issue tracking, wikis, and other tools GitHub hosts that were not meant to be shared with other software development companies. Just seems like a huge conflict of interest having the largest software development company purchase the largest development hosting company.
I just want to say your project is more cache class than NoSQL database, check out PSR-6 and implementations. Also check real NoSQL databases and theirs functionality. It's really much more than serializing object under given key (which is a cache)
Here is what I am looking forward to: * A new private messaging system for recruiters to spam me * Lots of "Sponsored" email spam * My personal information being sold to the highest bidder * Skype integration * Mandatory Office365 subscription \(sarcasm, obviously\) I will be slowly moving all of my packagist stuff over to GitLab this week and shutting down my github account in the coming month, I have 3\-4 projects moved already. Microsoft has shown time and time again that their first interest is to their shareholders and that they cannot be trusted with personal private information. Although the end user experience likely wont change much, I choose to vote with my wallet and take my business elsewhere.
If you really need to work remotely, you can try mounting the remote folder locally via SSHFS. Everything will work as if it were local.
Wunderlist. Nokia. LinkedIn. Skype. Honestly, it‚Äôs not a good track record. But I like to believe that MS is a different company now that Satya Nadella is leading it.
You also don't use commas, evidently ;)
Have you tried to use the new linux subsystems? Do you install PHPStorm on the actual subsystem or on the Windows machine itself? We have some libraries that only work on Linux and we all run windows, which is why we had everything remotely in the first place.
Xbox. Though linked in was always shit.
As long as you are talking about the fluent api then I agree!
I just hope they don‚Äôt buy slack to morph it to MS Teams
The Anti-Microsoft trend has made a real comeback in the last couple of years. Their actions with Windows 8/10 burnt a lot of goodwill, souring people on the company as a whole (even though they do huge amounts of stuff unrelated to Windows that's going just fine)
Are you sure you want to use exec for this job? Don't know the exact environment but it's asking for a command injection if you ask me :-) 
GitHub has already, and will keep on, censoring perfectly fine stuff. A readme somewhere contained a sentence in the form of, "let's keep it simple so any retard can understand it", and GitHub wiped the repo, because they didn't agree with the language. Not to mention all the SJW bullshit going on there. Their own code of conduct said they refused to act on "reverse-ism"s for a while. Ie., reverse racism. There's no such thing, because it's racism either and any way, but they defined it anyway [Source 1](https://www.techdirt.com/articles/20150802/20330431831/github-nukes-repository-over-use-word-retard.shtml) [Source 2](https://archive.is/2L0KC) 
I can't find another way to be honest. I just installed 7zip on my Ubuntu VPS and by running a couple of PHP lines I can make a 230MB backup file in 2.6 seconds. The same file in ZIP format (which is the common way via PHP) takes 370MB and 9 seconds to create the file. Both the ZIP and 7Z files were created adding the same folder and using the same compression level ("archive", the lowest). Well... ZIP doesn't even allow to set any compression anyway. If I choose to compress level 3 (out of 10) the 240MB files shrinks to 195MB which is nice but the 7ZIP process requires 38 seconds. 
You would install phpStorm (or whatever IDE you use) on your local windows box. I haven't had any issues getting anything to run as "native linux" using this method. And it is all stored in a local directory on your system so you have direct access to the files if needed. Most of my projects are in cakephp so when I run a webserver I'm not using apache, but the built in server that comes with cakephp. I also have used it with NodeJS and running applications that way. I would say try it out and see if it does what you need, should be able to set up and configure everything within 1-2 hours if your setup isn't horribly complex. Honestly not knowing what libraries you need, I can't say 100% if it will work for you, but it's done wonders for my setup. I used to have a separate onsite dev server that I used, now I don't even need that. I would recommend following these instructions for installing the subsystem, It requires a powershell command then you install the linux flavor via the windows appstore. https://docs.microsoft.com/en-us/windows/wsl/install-win10 You can access the subsystem file system in a path similar to this: %userprofile%\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState Also you can access your local drive (usually C:) from the command line anyway (in /mnt) 
no ... no I don't
I love how a huge percentage of you are freaking out. What do you really expect to happen? I assume nothing. I mean MS uses Github. So whats the issue? Oh wait, I forgot, people love to complain about nothing and create fear mongering issues out of nothing. We should think of this as a good thing. It's as many others who have sensible thinking minds about this have said, Changes wont affect you. I can't see Microsoft changing anything. 
Only real concern is around the future of Atom, as it's a direct competitor to a Microsoft product (VS Code). Everything else should be fine.
As a hate M$ first, ask questions later kind of guy for the last 15 years I think M$ really deserves a second chance. They are doing good things with VScode and OSS in general. I don't think we will ever see a difference in GitHub because of M$ in the future. Maybe some deeper integration with Azure and that is it. 
Huge fan of SQL Server and SQL Server Management Studio. I'm running a slightly bastard stack internally (SQL Server + Apache + Redis + MySQL + PHP 5.2 and PHP 7.0.3).
I did. It was pretty good back in like, 2013, wasn't it?
I've heard a lot about the great Source Forge migration, but I don't know what actually happened?
The exec\(\) function just executes a command on the local system. So you could have your backup script call whatever compression programs you want, as long as it is installed locally. If you want to use 7zip, try looking for or installing "p7zip" on your host. 
They started bundling releases of projects in an exe that also had sponsored programs.
Ah ok, so do you just point to the file path when creating a project in PhpStorm? It's interesting because PhpStorm does not let you use the php executable or any debug stuff from the subsystem because its not a windows binary.. so I have to seemingly install xampp on windows and use that?
Regardless of the impact, small or large, long-term or short-term, I refuse as a matter of principal to trust a company which would create software that **forces** itself into people's lives regardless of consequence. A company like that doesn't have people's interests in mind and I don't trust them with my code. Public or private. Simple as that.
Skype is good, it‚Äôs just an issue if you want to look at old chats. The app needs to be re organized but it‚Äôs good overall 
Linked in was never that good, I wouldn‚Äôt call it bad though. Honestly part of the problem is they just needed to make the platform reasonably profitable, you can‚Äôt hark on them too much for that imo
Use Docker https://hub.docker.com/_/php/ &gt; More commonly, you will probably want to run PHP in conjunction with Apache httpd. Conveniently, there's a version of the PHP container that's packaged with the Apache web server.
It's a slow and buggy UWP app with ads embedded into it. What's there not to love?
If you put more than one film on a page and at the same time those two fields you are assuming that a group might visit different films at once. I think it is safe to say this will never happen and if yes, the booking person has to run the form twice, no big deal. I would clearly have one page where you select them film and the date and only then on the next page the tickets. One might also like to select sears?
Everything starts with data, you need to know exactly what your data is and how it is organised and related, once you know that you can start thinking about you basic sections of the form, which should be fairly obvious by that point. 
\&gt; Where do I even start? I would suggest you start by spending some time trying to understand why your boss writes code the way that he does. He may understand something you do not.
Yeah I would love that but it is a requirement that everything has to be in one form.
Why not first rename the old folder and create a new one with the old name so new uploads get separated and then take all your time to zip stuff?
I‚Äôd invest some money on courses with high ratings on uDemy and/or books. Look for object oriented and/or PHP7. This looks quite promising: https://www.udemy.com/php-for-complete-beginners-includes-msql-object-oriented/ You could also check out frameworks/CMSs like Laravel and CraftCMS and their docs (and codebase). Test yourself at working with Googles APIs with PHP. Find an interesting open source PHP project and contribute. You could also look into learning more vanilla JS in addition to React and Vue. The most important thing is that you start to build your own things and spend some time reading or watching videos.
That's a very good point. Fell off a cliff after their bundling snafu. 
You sound quite resentful of your current boss but he is within his right to ask you to write code in language that he knows. Especially if he's more senior than you. Regardless get a good book about OOP in PHP. Whatever you do it will probably revolve about using classes or having to design ones. 
Good. GitHub has been sorely lacking good management, and Satya Nadella‚Äôs Microsoft has been pretty good to the open source community.
I'm working on a private PHP project and wonder how can I sync my files for working on 2 computers. At the moment I use my hosting space and upload files from my private computer to test them live. When I arrive at work I first download all items from the hosting space to be up to date. Because the project is still small, it's not more than 10-15 files. Now I would like to start using Laravel, which means I have to install a local Apache (for example XAMPP). How can I sync my files on 2 computers efficiently? I'm using Atom as editor and also have a GitHub account but didn't understand yet how to use it. In my understanding, if I use Laravel, the number of files will increase a lot, do I need to upload them all to my server/GitHub every time? Is there any other way?
You could associate the film row with the movie id. In the HTML you can give names as movies[0][children], and PHP will receive it as an array. 
and they're now one of the biggest open source contributors and have opened many of their tools and software and hugely invested in the space. Im not saying they're all golden, but theyre doing great work and thankfully right at this moment in time we seem to have similarly aligned goals. 
Pure, unadulterated PHP can be challenging. Search for how to structure a proper Composer library. By any chance, are you using version control? If you wrote a program to make template apps, you can go a mile further by making your own framework. 
Not resentful at all. I don't mind doing it in PHP either, it's comfortable, I just want to do it the right way. 
Because that's the way he learned it so that's the way he's doing it. Of course I have learned a lot of things from him. It's super inefficient though, and I'd like to bring us up to more modern practices like object oriented programming and model view controller design. 
Thanks, I do think it might be a good idea to pick up a course that's geared for newbies because then I can focus less on how to write the code and more on why I should do it a certain way. 
I will look up composer library structure ASAP. We aren't doing anything for version control, it hasn't been a problem ever so we haven't addressed it. It's always in the back of my mind though, since I want to learn it for future jobs. I hesitate to make my own framework if there is one already that I could learn and use that might also be used if I got another job in the future. 
But then MS buying them basically guarantees there are changes to come. MS isn‚Äôt going to pay this much for a service that will be taking a loss indefinitely.
When everything is going fine, version control seems innocuous, even an obstacle to speed. When something goes bunkers (and trust me, it's going to happen sooner or later), version control is a lifesaver sent from $DEITY. It's not just disaster recovery, it keeps the history of the code, and you can use it to understand why some code is like that. Making your own framework can help you understand the decisions others made in their frameworks. It will even demystify frameworks for you. And besides, you can learn another framework alongside your own. 
I‚Äôd ask your boss if he would considering taking a look at Laravel. Having a weak programmer writing vanilla PHP until the end of time is a horrifying concept of ya for anything other than one-off internal scripts. Honestly, it would do you both a world of good to get exposure to an established framework. You save SOOOO much time on boilerplate, configuration, and most importantly, documentation and fixes.
&gt;biggest open source contributors OK, but open source is valueless unless it solves problems I have. So that claim is pointless. If all their OSS is Windows only (I looked, it isn't all), it does nothing for me. As Bill Gates (almost) said, measuring Open Source contributions by lines of code is like measuring airplane construction progress by weight. I just don't seem to travel in their gravitation field at all (which is kind of on purpose given their behavior in the 90s)
I didn't say by lines of code. They're a huge investor too in the Linux foundation both with code and with money. Open sourcing framework and tools that may have produced other services you use. 
&gt; Wunderlist. What do you mean by this? They've done nothing to Wunderlist. 
Atom + Nuclide. Works like a charm. 
i heard that MS was going to rebuild their operating system for github using a C# implementation on a raspberry pie? sounds awesome sort of ....lololololololol
Proud of myself for knowing what every function on that list does aside from `chr` and `ord` :'). Man, maybe it's time to branch into some other languages.
Lando makes this easier. 
I would have the tables structured roughly this way, assuming that you may have several movies running at the same time in different screening rooms (eg Avengers in theater 1, Deadpool in theater 2, etc. Table 1: movies k_movies moviename Table 2: screentimes k_screentimes datescreen (date) timebegin timeend fk_screenroom fk_movie Table 3: screenroom k_screenroom roomname wheelchair_slots seats Table 4: bookings k_bookings bookdate fk_screentimes Table 5: bookdetails k_bookdetails fk_booking qty (quantity of seats) type (seat / wheelchair slot) agegroup (adult, children) If you must have all of the form on a single page, I would go with Ajax calls, so that once I select a movie (eg Deadpool), the next field to get populated is the date selection (pulled from screentimes), and then the time slots available. On your ajax calls, you can check at each step whether the theater is filled to capacity or not by joining tables 3,4, and 5. Finally, as you are showing all of the form in one go, I would have all fields but the first one ‚Äúdisabled‚Äù until the previous step is selected. For example, you my not choose a screening time if you do not have a datebset, etc. You should also define what steps necessarily come in sequence. For example, do you require your users to first select a movie, or can they start with a date, which will show what movies are available on that date. Without knowing more about your situation and from my experience as a movie goer, this would be my first attempt at the data structure. 
Heaven forbid someone embellish on the internet!
Now Msft has access to all your code.
There is no such thing as the "right way". Just trade\-offs.
Not a fan of sql server, but the bastard stack sounds familiar. PHP 5.6 + MySQL + SQL Server + IIS. And developing on a Mac. Thankfully SQL Server is finally available on Mac (docker) and the codebase is getting very close to PHP7 compatible
\&gt; It's super inefficient though, and I'd like to bring us up to more modern practices What is inefficient about it? Why is this inefficiency a problem? What does that problem actually cost? How does your solution eliminate the problem and what is its associated cost? I'm not actually asking you these questions, but merely suggesting that this is probably what will be going on in your bosses head when you come to him about how to improve things, so it's something you'll want to think about ahead of time before presenting your ideas. Don't talk about "modern practices", "doing things the right way" or any of that nonsense. None of that matters, anyway and will likely only reinforce the "junior" aspect of your relationship with him. Focus on the real problems and you may be able to convince people to slowly change their ways.
Why do the petty ass PHP programmers of reddit always downvote text posts? The sub needs content, let people ask any kind of questions they want.
Are you using Skype or Skype for Business? One comes bundled with Windows and IMO sucks.
They‚Äôre stopped development on Wunderlist to focus on a replacement todo list manager. They could have built out an already successful product. My personal observation is that Wunderlist has become less stable since Microsoft took over. 
Have you seen [these](http://php.net/manual/en/refs.compression.php)? I have a VPS too, and installed the pecl library for RAR and it was pretty easy to use.
In addition to the reproducibility aspect, a local environment is often a *lot* easier to interactively debug. As a general rule, anything which tightens your change-and-test feedback loop is good.
plug the numbers in to a raspberry pie, and give the whole family a slice
&gt; Our company bought PHPStorm but it's sitting idle because it doesn't work with remote git repos. As much as I love Jetbrains products, I find having a terminal window for command-line `git` usage always feels like a better idea than almost any GUI... at least when making changes and not simply inspecting history.
Or if you'd rather see "under the hood" and do it yourself, here's a lightweight skeleton/example for command-line/unit-testing: https://github.com/DHager/docker-php-library-demo/
What?!? You don't know about antitrust issues from the 90s?!?!? Or Windows 10?! Or Windows 8!????? How dare you make it seem like Microsoft isn't our evil overlord. IT'S HAPPENING AGAIN SHEEPLE! OUR MICROSOFT OVERLORDS WILL RUIN LINUX!!!
Welcome to the future, 5.2 php is not a thing anymore. Try starting with https://getcomposer.org/ and after that go check latest php, it‚Äôs a different language. 
Nice work putting yourself out there and building something from start to finish. This feedback is by no means exhaustive, but from randomly looking at a couple files, I have some suggestions that are worth looking into. * Mentioned OOP - but there's an opportunity to encapsulate more of your code in classes. For example the ajax_ files. * A lot of this code produces side-effects, which is considered bad practice. I.e. including a file should not cause output. Encapsulating in classes would help that. * It's good practice to separate construction and use. I noticed some constructors will automatically write to the filesystem for example. * For PHP OOP, I recommend looking into PHP's autoloader. And the PSR standards that go with it are widely supported. * Small tip - you can use the shorthand array syntax - instead of array() you can use []. * PHP has a version_compare function instead of manually comparing * There's a comment format called PHPDocBlocks that is a common practice (for your fields, methods, etc) * Recommend always using brackets in control statements (if statements, etc) even if the body has one line. * Recommend indenting either 1 tab or 4 spaces inside of class, method, and control statement bodies. 
I think the big issue isn't so much that it's Microsoft in particular that's buying Github, but rather that Github sold out. We all put it on a pedestal of flossy goodness, and they ended up taking the money. That said, Microsoft obviously has plenty of money already and doesn't need my $7/mo anymore to have a few private repos, so I'll take those and move along now thanks.
Why are you changing files on remote? Change it locally and let PHPStorm sync it to your dev env. I have a remote dev env. I tell PHPStorm to sync files from local to this dev env. If I change branches locally this new state is uploaded to the dev env. I never work with git on the dev server. I've been using this setup for over 2 years and never had any issues. The only thing to be aware of is if you change files outside of PHPStorm you need to focus on the PHPStorm window for it to kick off the sync. During normal usage files are synced by the time I hit refresh info the browser. 
&gt; We aren't doing anything for version control, it hasn't been a problem ever so we haven't addressed it I would find a new job. Seriously. Any chance you work in Irvine, CA? Because I've been exposed to places like that in the area.
Hey, thank you! I really appreciate you putting your time into looking at all that. I definitely need to look at the autoloader again. I didn't really understand it. Then I opted out of it for some reason, which I hope was not just laziness, looking back now. When you say ajax_ files, do you mean like creating an ajax class that can be instantiated and then handles each specific call? Thank you for the heads up on PHPDocBlocks! Anyways, I am very grateful to you! OOP has been a challenge for me and this got me a little further along. Your feedback helps too.
Awesome. :\) Thanks for the Opinion. Hahaha
I am behind, I know! Alas, time refuses to pause when I want it to... But I figured I wasn't the only one and that this project might be useful while I tried to catch up to you guys in the future. 
Thanks man, I'll follow you later on Reddit, I'll just make sure to finish all the school errands I have to finish. :\)
Well the first step is to learn to how to properly leverage PHP's features/tooling that aids in building decoupled, testable, modular code (i.e. code that is going to be easy to maintain in the long run, if done correctly). The most powerful tools/features for doing that are Composer, PSR-4 autoloading, and namespaces with a convention of one class or interface per file. Strongly recommend reading http://phptherightway.com and the book Modern PHP to get up to speed with these fundamentals. Of course, it's likely you're building web applications with PHP, which means you're likely going to be serving up an HTML user interface of some kind. The old way to do this would be to have several different entry points to your application: `user.php`, `account.php`, `cart.php` etc. Each with their own HTML and PHP scrambled together. The modern way to do this is via the front controller pattern with a router. The webserver is configured to forward all traffic to `index.php`, and then a router intercepts the request and decides which route handler (often called a *controller*) to invoke. The purpose of this so that bootstrapping code (config, initializing a session, reading cookies, database connections etc) only has to be defined in a *single* place at the beginning of `index.php`, rather than at the begging of several different entry scripts like `user.php`, `cart.php` etc... The third fundamental aspect to learn is separating business logic from view logic. If your boss is the type that is mashing together a big block of HTML with a big block of PHP in one more php files, then you definitely don't want to be using that as your learning reference. An HTML template should include only absolutely minimal PHP - only the PHP needed to echo data. A couple foreach loops and very simple conditionals to show or hide different HTML is fine. Actual logic is not. *A template should not do work*. This pattern emerges quite naturally if you start using the front controller/router pattern. If you want to get your feet wet, then a simple micro-framework like [SlimPHP](https://www.slimframework.com/) is a good way to start. It's VERY simple and straight-forward, and the documentation is clear and concise. Once you become familiar with this style of structuring your applications, then diving into other frameworks like Laravel, Symfony, or Cake will be easy (as they all follow this same pattern and approach). Not only that, but you'll find this same pattern/approach in the web application frameworks of other languages as well: Elixir, Ruby, Python, Go, Java, JavaScript/node, C# etc. This is how you will make your skills portable, so that you're career is not limited to doing legacy PHP work. Now, all that stuff I mentioned is really just some foundational code organizational stuff. What you will need to constantly work on is good programming practices: unit testing, decoupling, choosing the right abstractions etc. None of that is really PHP specific. There are lots and lots and lots of books on the subject and I strongly recommend you invest a lot of time in learning fundamental programming principles across different paradigms.
Tend to agree. This sub is kind of toxic sometimes.
Start with object oriented and then look at autoloading classes. That'll get you a good bit along the road. At that point, you'll also be able to use a lot of code that's already available to avoid having to re-create everything. It'll save you a bunch of work.
You can definitely point your phpstorm working directory to the path on the linux subsystem, or you could store it somewhere else in windows and point your subsystem apache web root to that location. I would just play around with it and see what works best for you. I can't really speak on phpstorms capability of debugging with the subsystem executable since I do not use phpstorm.
Buying Nokia and burying it, Vista, "iPhones are a fad", the 10 or so privacy related checkboxes you probably should to uncheck while installing Windows 10, and IE's dominance yet total lack of innovation for a few years until Firefox started to gain traction. Those are just the obvious ones off the top of my head, and they all happened this side of 2000, and you asked for 'not 90's. Some of it's laughable incompetence by management as opposed to some er, 'evil' mastermind, but it should make anyone wary of anything the company does because that kind of culture takes a long time to disappear. Especially when the founder is so celebrated. I certainly would not like a return to MS browser dominance for example, of course, one cannot understate just how utterly unlikely such an event is for a multitude of obvious reasons... but among them is some people don't forget.
You are with the city, check if your library has access to lynda.com - there are video training resources for several languages. PHP may be available.
I wouldn't be so harsh to judge. We started the same way. Coding by the seat of our pants. We were forced into version control for non tech reasons. After that, I can't start any project without version control. 
[removed]
 require 'vendor/autoload.php'; use Illuminate\Database\Capsule\Manager as Capsule; $capsule = new Capsule; $capsule-&gt;addConnection([ 'driver' =&gt; 'mysql', 'host' =&gt; '192.168.0.245', 'database' =&gt; 'zx', 'username' =&gt; 'root', 'password' =&gt; '', 'charset' =&gt; 'utf8', 'collation' =&gt; 'utf8_unicode_ci', 'prefix' =&gt; '', ]); $capsule-&gt;setAsGlobal(); $users = Capsule::table('mb_user')-&gt;where('id', '&lt;', 7000)-&gt;orderBy('id', 'asc')-&gt;first(); dump($users); $results = Capsule::selectOne('select * from mb_user where id = ? and phone = ?', [34389, 18883987586]); dump($results); so i tested these code and then i think it's pretty cool. i wonder if i'm able to do the same thing to other objects? 
Even if they did screw up github, we do have gitlab, bitbucket, sourceforge, launchpad and a ton others. Honestly, I feel it was a mistake in the first part to hand all power to github in the first place. Decentralization and fragmentation should be the theme of the open source community, after all that's what helped linux survive (too many distros like ubuntu, debian, suse, etc. were hard to kill at once than a single point of failure). Similarly, why not self-host github for a change? Or if you are tight on resources, just fire up an instance of bugzilla which is pretty cheap to host. Coupled with http file browsing of the source-code repo, that should suffice most needs.
I'm not going to trust Microsoft until they open source windows and office first.
You need to do something other than just set user_id and username in the cookies to track authentication, anyone can create cookies with those details and get full access at the moment. You need to use something like a unique access token stored against the users record.
We only use command line for git to be honest. It seems like PHPStorm wouldn't update the branch when it was updated via command line. Another issue was even with remote sync, the file issue would still be there. It just didn't mesh well with branches for some reason..
Please explain. I can understand that most PHP users do not realize what empty is for and misuse it. But why nobody wants to learn it even if told how to use it properly?
Nice Idea, man. :\) Good Job. Haha, Keep up!
They started bundling malware to Windows EXE builds of various projects, sometimes even without their consent. In some cases (such as FileZilla project), they even made shady arrangements with devs so that the devs got compensated for each malware inclusive build they released. As if this were not enough, they also started taking over old projects which were no longer maintained by the developers as they switched to some other repo (such as GIMP), and started bundling malware to their builds too! This was I think what made everyone say enough was enough! Most devs soon started an exodus from sourceforge in fears that their projects won't be taken over too.
Everything old is new again. What you have there is "Singleton 2.0". *Can* you do this? Yes, you definitely can, all you need is Laravel's signature move known as "abuse of `__callStatic`". *Should* you do this? Some people prefer to learn from mistakes made by others. If you prefer to learn from your own mistakes, sure, go ahead and rediscover all the warts of using singletons.
If anything, this kerfuffle has revealed that *a lot* of developers don't know what the hell they're talking about in the open source space.
Well, PHP is on the decline, so quality PHP jobs are hard to find. What you mostly get is the same jobs you did get back in 2003. Building websites with WordPress or any other PHP based CMS. If your into software development and best practices look elsewhere.
I'm not a die-hard anti-MS person, but the company's history is chock full of examples of bad behavior if you'd bother to look. There's a small list in [this article](https://jacquesmattheij.com/what-is-wrong-with-microsoft-buying-github) with links in case you'd like to learn more.
The company literally said white women are a problem and removes entire repos even private ones if they contain content they disagree with. Not even illegal content, just content they don't like. Microsoft is a mature company run by real people. I expect their culture to subsume GitHub's.
I was laughing my ass off at some of the comments in /r/linux. One guy was like "Whew I'm so glad I signed for GitLab yesterday instead of GitHub dodged a bullet there (referencing his need for a repo to push his dotfiles)", as if anything is going to happen in the next 6 months and as if adding another repository to your project is more then 0.5 seconds of effort.
Incremental changes. One thing at a time. Since you're doing government work, look into modern PHP security practices. Are you plugging user queries directly into your DB? That's a no-no that'll let SQL injection right in. Look up how prepared queries work and sell your boss on upgrading to that. Losing a whole city's info is scary. Find some process that's slow and busted, find out why, and find out what modern solutions will fix that problem. Then, talk to your boss about it and how you can make this one thing better. Then, suggest doing the new (best-practice) thing all the time. Now you're learning, he's learning, and the code's getting better. What's more, talk to him about documentation. If you guys go out to dinner and get [hit by a bus](https://en.wikipedia.org/wiki/Bus_factor), all your work is space magic to the new guy who the city hires. Maybe write out some of that stuff for them. And when that seems daunting, look at automated documentation generation. A new tool! A new modern part of programming that you can both learn!
**Bus factor** The bus factor is a measurement of the risk resulting from information and capabilities not being shared among team members, from the phrase "in case they get hit by a bus". It is also known as the lottery factor, truck factor, bus/truck number, or lorry factor. The concept is similar to the much older idea of key person risk, but considers the consequences of losing key technical experts, versus financial or managerial executives (who are theoretically replaceable at an insurable cost). Personnel must be both key and irreplaceable to contribute to the bus factor; losing a replaceable or non-key person would not result in a bus-factor effect. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
https://www.justice.gov/atr/us-v-microsoft-proposed-findings-fact &gt;91.3.2. Paul Maritz also explained to Intel representatives that Microsoft's response to the browser threat was to "embrace, extend, extinguish"; in other words, Microsoft planned to "embrace" existing Internet standards, "extend" them in incompatible ways, and thereby "extinguish" competitors. McGeady testified that Maritz told Intel that Microsoft's strategy was to "embrace, extend, extinguish." McGeady, 11/9/98pm, at 53:17 - 54:8; McGeady, 11/10/98 am, at 21:22 - 23:19; GX 564. McGeady testified that Microsoft was going to take Internet standards, like HTML, "and extend it to the point where it was incompatible with the Netscape browser and encourage people to develop to their version of HTML so that pages couldn't be read with Netscape's browser." McGeady, 11/9/98pm, at 55:7-14. Russell Barck, an Intel executive, testified at his deposition that "in relation to Netscape, . . . Maritz . . . said the term 'embrace and smother' with respect to a strategy with respect to Netscape." Maritz, 1/26/99 am, 55:19 - 57:1. Rob Sullivan testified at his deposition that Maritz said the phrase "embrace and smother." Maritz, 1/26/9am, 57:2-11. When asked about his understanding of the meaning of the embrace and smother concept, Sullivan testified that he "understood that concept to mean that Microsoft intended to deprive Netscape of revenue and viability." Microsoft would achieve this "by giving away their products, by embracing the Internet standards and extending them in a way that favored the Windows platform." Maritz, 1/26/99am, 58:16 - 59:8.
You can, but there are lots of \(already written about and documented\) reasons why you shouldnt do this
One of the first things I noticed was the `@ statement` parts in the app loader, I'd recommend just showing errors if something goes wrong. If you really don't want to show them use something like this: http://php.net/manual/en/function.set-error-handler.php To hide (and log) them instead.
I like badwords.txt
Man that's horrifying to look at.
I use this exact setup myself for many years.
I always seem to answer with this but: https://laracasts.com/ Laracasts is one of the best learning resources for PHP. The Laravel Framework is a very good introduction to modern PHP programming practices. I recommend you go there. You can learn straight PHP stuff here: https://laracasts.com/skills/php And Laravel specific stuff here: https://laracasts.com/skills/laravel
October CMS, which is built on top of Laravel. 
source?
Hey! Thank you for the suggestion. But I think you may be overstating it a bit, right? On an https connection not anybody can just take and clone your cookies. They need your device to get them. I just hope your comment doesn't make someone think the system is inordinately insecure, when it should be fine for https and users who don't lose their devices. (Users who do lose a device can change their passwords to unset all other devices - someone else won't know their password, though the cookie-cloner could indeed wreak havoc on their comment history until the password was changed).
Thanks! 
Okay, cool. I definitely need to work through my whole concept of error handling and I think I did some of it rather poorly in this project. But one thing I've always wondered is whether it was really so bad to use the @ statement. For example, if I'm testing for a session variable to be equal to something else, is it really so bad to plug in the @ and not have to use isset()? It's probably a can of worms that doesn't need to be opened, because I'm sure everyone has their own opinion, but it just seems to me there are times when @ is handy, especially for readability, if you can keep important comparisons on the same line. Anyways, I'm rambling... Thank you! I still have to get my head fully around try / catch and when to show errors and how.
Don't we all! (I just figured some people might want that option.)
&gt;Uhm, ok, why does that matter? It means that they are trying to change from the Microsoft\-hating\-Linux\-and\-messing\-shit\-up to Microsoft\-acknowledging\-existence\-of\-another\-OSes\-and\-trying\-to\-create\-working\-stuff. But I get your point now, you just hate them based on things they messed up in past, and there is nothing which could make you change your view. Yes, you are right \- they messed up many things, but that doesn't mean that they messed up everything. &gt;Let me ask you this, did you ever submit a PR? Did you ever submit an issue or bug report? Have you been through the process? Yes, yes and yes. Pff, we are discussing in r/PHP subreddit, but still thanks for asking. &gt;I will put my word up on the line saying that if Microsoft take over GitHub, the community will split up. GitHub will get a "facelift" within a few years making it terrible with ads everywhere. ToS will change and bigger projects will move away to other platforms. &gt; &gt;Just you watch. Yes, I will, because I think nothing significant happens. Some people jump ship, some will be crying about "good 'ol times", but after all Github will stay Github. And there will not be ads, you've mistaken them with someone else. We will see tighter connection to Azure, Visual Studio, hopefully native Git in Windows. But only time proves which of us is wrong.
I don‚Äôt _need_ to clone a cookie if I just need username and id. I haven‚Äôt looked, but I‚Äôm betting user ids aren‚Äôt secret and are in the JSON or HTML somewhere? I can set a cookie in my browser and suddenly I‚Äôm logged in as whoever I want. Re-evaluate what the person above told you - your system *is* inordinately insecure at present. 
You‚Äôve written your own password hashing function? Don‚Äôt do that. There‚Äôs a built-in function called `password_hash` and its counterpart `password_verify`.
RemindMe! 3 years "Check on Github apocalypse"
In terms of consistence, it will help. Locking will prevent two threads writing in the same file, while renaming won't block other threads and the latest is a winner \(which is, by the way, how most NoSQL databases work, afaik\). I don't think you really underestand what is the renaming about, or I don't underestand why 5 temporary files \(each handled by its own thread\) would be an issue. From a perspective of a programmer, renaming is also way easier than dealing with locks.
&gt; Why not first rename the old folder and create a new one with the old name so new uploads get separated and then take all your time to zip stuff? That wouldn't change much, would it? I'd still have my VPS working on the compression for 40 seconds. What's the benefit of making a copy of the folder and compress it instead of compressing the original? &gt; I would really really check names and content.. not allow uploads of zipfiles, it could be a zip bomb.. Yes, users can upload PDF/JPG/PNG files only.
&gt; If you want to use 7zip, try looking for or installing "p7zip" on your host. That's what I did, yes. I am not a Linux user but knowing my VPS uses Ubuntu it was a matter of using a couple of commands to install 7Zip on the machine. And now I can compress everything as much as I want/like. I love it, the new compressed file take 50% less space on the disk (compared to the default non-compressed ZIP files). That's HUUUUGE.
You show me exactly what I do not like about "the Laravel eco system"... it just allows devs to call everything from anywhere and while that might look useful it will probably lead to poor code which is very hard to test.
Can we please have this? I'll even take a performance hit for this. Performance is something that can still be fixed later on and the features are opt\-in anyway. PHP simply needs some proper tooling so we can avoid the millions of libraries that try to recreate them in user\-land.
Storing those in the *session* would be secure in the way that you describe it. Storing them in cookies isn't, because it allows you to trivially impersonate any user as long as you know their ID. 
Your ideas are quite common yet essentially wrong. You are taking an error message as a *nuisance* that better to be got rid of. Of course this notion is wrong. An error message is your *best friend* actually, and you always eager to see it. Of course, to make errors helpful, your code shouldn't generate errors when it runs properly. And an undefined variable is an error. Therefore, in your code you shouldn't try to get a value of an undefined variable. In some cases, you could use isset() or empty() language constructs to deal with potentially undefined variables. As of the error handling I've got an article, [PHP Error reporting basics](https://phpdelusions.net/articles/error_reporting), that can help you to get it straight.
See you at the restaurant at the end of the universe...
RemindMe! 3 years "GitHub deaded yet?"
/r/phphelp
Do you use Linux? If yes, then enjoy it. Microsoft devs actually patch the linux kernel. 
&gt; With the notable exception of edge being a still being a wet fart, it's not bad. I like the speed, but the UI and the dev tools (which one might argue is an UI issue as well) are really off-putting.
Hey man, I hear what you're saying. It's just, I've been writing PHP code now for approaching six years, and I've not once encountered a scenario where all the hand wringing about static access and global state and tightly coupled architecture made any sense to me. I've yet to be backed into a corner by this stuff, so it's just getting increasingly hard to take any of it seriously. But perhaps the nature of the projects we've worked on simply differs, in which case, I think it's probably a case of different strokes for different folks.
Do yourself a favour and look into PSR for code readability.
I'm running VSCode on the Windows machine and I've set it up to use the bash terminal whenever I'm using terminal. I have an sFTP plugin and it works flawlessly. 
Side projects like these are perfect opportunities to catch up though. I highly suggest bumping your requisite to php7.2 and going from there. 
No. Not every company Microsoft buys is embrace extend extinguish. You have no idea what you‚Äôre talking about. 
Yeah. It‚Äôs outright delusional. 
&gt; if ( !defined('RLC_PATH') ) define('RLC_PATH', dirname(__DIR__)); if ( !defined('RLC_SECRET_PATH') ) define('RLC_SECRET_PATH', RLC_PATH); Oh man, that's a code I haven't seen in awhile. Wordpress background maybe? http://www.phptherightway.com/ - is your friend https://laracasts.com/ - will get you up to shape in no time https://www.php-fig.org/psr/ - the php standards org. These include stuff like code writing guide, as in, how to format your code, to code abstractions used by the biggest and meanest projects/frameworks. 
Not only the warts of using singletons, but the weirdness that happens with `_callStatic` in general, especially when you are using inheritance. Hoo boy that can be a fun bag of nuts......
&gt; Just seems like a huge conflict of interest having the largest software development company purchase the largest development hosting company. Not really. If they bought out GitHub and whatever comes second or third, then we're talking. Antitrust violations usually go against monopolies that abuse their privilege, like was the case in the early 2000s Microsoft. They were also denied purchase of Yahoo because that would've made them a search engine monopoly. I highly doubt that but US legislative deemed it so. So Bing didn't buyout Yahoo and now it's complete garbage while google is an absolute monopoly. But nobody bats an eye.
I'm more worried about how they are going to deal with the SJW hipsters currently working over at Github :D 
Move your code to another platform: ie. gitlab or bitbucket
&gt;only a factor of 2 \(it usually runs slightly above 3 minutes\): Oh boy, was I wrong :\-\) I think there was almost no performance penalty. My "takes 3 minute"\-assumption on this project was outdated, the runtime is almost 6 minutes so I'd say, the slow\-down is only in the range of a 1 minute which is 20&amp;#37; maybe. Woha!
How could it be less stable if they've stopped development?
It sounds to me like: 1. Edit files 1. Bidirectional sync (non-git) directory against remote machine for testing 1. Git commit files when happy 1. Git checkout {other_branch} 1. Edit different files 1. Bidirectional sync (non-git) directory against remote machine for testing 1. Frustration that sync brought back files from remote machine from testing other branch
No bugfixes. No updates of the app as the underlying OS gets updated.
You can run the code in Node 10 and share the results with us. \(I'm curious too\) The article mentions the nginx config, node config and node source code.
Welcome to the world of PHP, please don't be discouraged at the seemingly insurmountable pile of feedback everyone has given you so far :) You've done a great job by committing yourself to doing something from start to finish, putting thought into how the entire thing works and even providing a way for people to use your system easily - the thought that went into it is more than I've seen with some "senior" developers I've interviewed. With successfully completing a project like this, you've gained several valuable skills. Once you've taken a breather (that is mandatory, people get burned out way too easily), I'd suggest thinking about the following things: - If you were to add a new feature, how would you do it? How would you account for extensibility, theming, things that a certain business may require but that you want to keep out of your main code base...? - With the knowledge you've gained by writing this code, what are some things you'd go back and change right now without having to consult anyone else? - If you were a malicious user attempting to exploit this app, how would you do it? What decisions have you made while writing this code that allowed it? *(Look up solutions to these problems on Google afterwards and read the [Paragon Initiative guide for securing your code](https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software))* Once you've reflected on what you've created, I suggest you follow through this tutorial, which will provide some insight on current PHP practices and standards, that will point out some things you've done in your code and how to do them better: https://symfony.com/doc/4.1/create_framework/index.html Don't forget to keep experimenting and having fun! There's no point in doing this job unless you're having fun :) Good luck!
Yeah but if I can't replicate his environment 100% that means I'd have to setup all his tests and run them for a different comparison on different hardware. It's not a big deal. I was mostly curious to see how big of a difference it made.
Just be aware that a non-offensive word can contain "bad" substrings. Names like "Cassie" or "Peacock" would be not be allowed as far as I can tell.
I can say a lot about all those remarks, but I don't want us to get side-tracked. The high-level point is, every company had its ups and downs. Google is also mocked for all its failed and discontinued products, but I seriously doubt if they bought GitHub we'd be seeing anything even close to this amount of whining from everyone. Also, looking back IE is one of the best things that happened to the web. Yes they didn't develop it very actively, but the IE devs were pulled to work on Vista's set of technologies, which you know, was quite the monster project at the time. And IE gave us AJAX which still shapes the web. That's literally Microsoft's invention. I'm happy IE6 fell down eventually, *of course*, but let's not be so biased. And Nokia, as you yourself note, that wasn't an intentional failure, they just make a shot for the moon with Windows 8 / RT and failed. People were fired, others promoted... And the wheel keeps turning.
Ruby 2.6 introduces an initial implementation of JIT \(Just\-in\-time\) compiler according to: [https://www.ruby\-lang.org/en/news/2018/05/31/ruby\-2\-6\-0\-preview2\-released/](https://www.ruby-lang.org/en/news/2018/05/31/ruby-2-6-0-preview2-released/) Don't you think it's time for PHP to add JIT support?
the only place i use @ is within template files, but even then its better to do `echo $uncertainVar ?? 'default';` isset is true for vars that are set to null. its an important destinction which @ would hide. regardless of anyones opinion of @, i think everyone agrees that it should be generally avoided.
There are plans for a JIT, Rasmus talks about it here: https://www.youtube.com/watch?v=rKXFgWP-2xQ
&gt; isset is true for vars that are set to null. so what? &gt; its an important distinction which @ would hide care to provide an example of such a case that can demonstrate such an "important distinction"?
[http://www.phptherightway.com/](http://www.phptherightway.com/)
&gt; Has there ever been a discussion about adding some of those features syntactically, but ignoring them during runtime? Yes there has: https://externals.io/message/101477#101592 It's a good idea, but takes a lot of time. I also blogged about it a while back, explaining why it isn't as trivial as it seems. I'm a proponent for adding syntax that doesn't do anything at runtime, but will allow static type checkers to do their thing (built-into the core, preferably): https://www.stitcher.io/blog/what-php-can-be
I know it is a terrible idea. It doesn't do anything if the PHP install is &gt;5.5. It's only there for other previous versions of PHP and the top of the file says "Just upgrade PHP if you can! But if you can't, these'll hopefully be enough."
In fact and indeed those beautiful IDs which you so cavalierly insulted **are hashed** with password_hash(). The hash is then stored in a file in a folder with 0700 permissions. Even if an attacker somehow managed to get the JSON file, the ID hashes would be useless for impersonating another user. Come at me, bro! Just kidding - I'm a novice here and I know I've made mistakes. Hopefully my banter doesn't go too far. I'm actually very grateful for all the help.
You can't get their ID unless you have access to their device. Only an irreversible hash of the ID is stored on the server. 
There's a project called [password_compat](https://github.com/ircmaxell/password_compat) that provides compatibility for older versions of PHP. Realistically, you shouldn't be targeting any versions before 5.6 as they're at [end of life](http://php.net/supported-versions.php). 
Hey! Thank you so much! I read some of the WordPress code and actually just got passed over for a job with WordPress (alas!) but I'm interested in it. I was just trying for a straightforward approach. I'm really appreciative for all the links! I'll be snooping around on them when I can. 
Thank you very much! That was really insightful. I'm looking forward to reading through that article.
Interesting video. I hope JIT will be added with PHP 7.3
Oh, good point! Thank you for mentioning that. I'm going to have to think about that now... 
Okay, cool. I'm actually really grateful resource suggestions.
Okay, thank you! I'll have to get the code more up to date then. Unfortunately I know someone - a person quite close to me actually, indeed quite close, ahem - who is still using PHP 5.3. Thank you for the link to that project!
Yeah, I think the general consensus here is that I need to get up to date. I'm on it! Thank you.
The time for adding JIT has long come, but here's the thing: it's like saying "do you think it's time to cure cancer?" Doing JIT properly is hard. As in, it takes a team of rocket scientists and brain surgeons hard. And I don't mean the basic idea of JIT, that's not hard. What's hard is making it really count through hundreds of under-the-hood features that analyze code behavior on the fly and can do incredibly smart optimizations that result in truly faster code. As it is, just having a basic JIT isn't helping. I mean look at Facebook's HHVM, they have JIT and they're **slower** than PHP 7. That's gotta hurt. So, don't expect it any time soon because we simply don't have the kind of team of volunteers, nor sponsors to pull that off. It took Google lots of poaching of experts, years of effort and many many millions of dollars to get where their JIT JavaScript engine (V8) is right now.
I _highly_ doubt that it will be this soon. The last time I checked the earliest release with JIT was supposed to be PHP 8.0.
PHP doesn't have MVC though. Javascript does, but not PHP. 
Best of luck, there's plenty of resources that can help you get up to speed. http://www.phptherightway.com/ is a great resource as well. There's little pointing in requiring a version that was released 12 years ago and hasn't been supported in 7.
You are, but good luck convincing good developers to work for your company that way ;\)
Hey thank you so much for your thoughtful comment! I will definitely come back to my answers when I've had a breather. But for now, (a) I would add a private message and mail alert feature. This would require working with the website hosts/ server side clients to make sure it was implemented correctly. Otherwise private messages could end up in the wrong place. (There might be a really cool possible way to do it with a Diffie-Hellman exchange between users but that is above my level for now - but the thought of that is interesting!) (b) Unfortunately I've already gotten feedback from everyone else here, so my answer is tainted. Nonetheless if I could go back and get the file locks working how I wanted them to originally work (on object instantiation and destruction) I think that would be a lot more elegant. I would also go back and encapsulate more code in classes, as suggested by u/beefquest (and I'd look into the autoloader thing again). (c) To keep the site secure the JSON stores only irreversible hashes of passwords and IDs. Even if an attacker got those file they would be useless. But they are in folders set with chmod to 0700 so no one but the site owner can look at them. The default moderator name, if left unchanged, won't be signed up, so no one can just look at the source code and try to sneak in that way. Hmm... if I were an attacker, I would... try simple passwords - there's no minimum password character limit. That's probably something I should fix. Thanks again for your comment! And thank you for the links! I'll check them out when I can. ps. And one more thing! The system might get messed up if the site owner accidentally deletes a file - I need to go back and look at how resilient it is to user error...
It's good that your commenter_id is hashed, but if I fake a cookie with your username, I get a bunch of edit/ban/delete options on-screen (sure, they don't work but it's very leaky).
Thanks, these 3 links are like bible, helping me to improve the PHP coding.
Still.. we have one of the biggest community.
We have a huge community over half of which don't even know how to call an SQL database without opening themselves to hackers. Sorry, but size is not the same as quality (no offence to beginners and hobbyists, but it's true).
I love seeing someone finish something from start to finish like this. Great work. There are always going to be areas for improvement but I can't add anything new that others haven't said, I just wanted to say I really respect your programming ethics.
For me the best practice is to use ***session*** for all login data, storing ***cookies*** in the client side is vulnerable.
But what if I want to talk about the beautiful Lincolnshire village of Scunthorpe?
&gt; Wrong, people have only been migrating for about 17 hours so far. I suspect the decrease will continue to happen around this time every day. I am reasonably certain daily repository migration rate rate will continue to increase. You'd have to be a pretty delusional fanboy to think otherwise. You seem to be correct, same story today it seems accordingly to those stats.
Hey again! Thank you for trying that! Seriously. I'd be very open to knowing the security flaws and the leakiness. I tried the same thing too and noticed how goofy it looked. It's definitely something I should fix. But I can be kind of a perfectionist, at times, and I figured since it was at least secure in that regard, that I should get other feedback first - in case there was some other glaringly obvious security flaw that I had completely overlooked! Also, I hope you won't take my disagreement above as a lack of appreciation (I realize I forgot to say thank you up there) because I'm so grateful that you looked at the code. I think it's extremely generous when someone on the internet actually looks at something you've done. So, thanks! And lastly... I think it was a very good suggestion! Tokens are something I'm currently trying to learn more about.
But if you only use sessions your users have to sign in every time they come to the site?
Cracked me up!
Hey, wow! Thank you for that!
It takes a lot of time to add a switch that turns off runtime type checks?
So using sessions is also vulnerable as sessions use cookies. 
A JIT compiler is not a magical bullet. Some languages fare better without one. It really depends on who makes it. 
&gt; As it is, just having a basic JIT isn't helping. I mean look at Facebook's HHVM, they have JIT and they're slower than PHP 7. That's gotta hurt. Careful with that assertion. PHP 7 is faster in certain situations. 
&gt; I still have to get my head fully around try / catch indeed. I don't really get why you are using it at all. Why you're writing try { if ( file_exists(RLC_SECRET_PATH."/commenters/". strtolower($username).".txt") ) { throw new \Exception('Username already exists.'); } } catch (\Exception $e) { echo 'Error: ', $e-&gt;getMessage(); return FALSE; } instead of just if ( file_exists(RLC_SECRET_PATH."/commenters/". strtolower($username).".txt") ) { echo 'Error: ', $e-&gt;getMessage(); return FALSE; } what's the point in using exceptions in this example?
performance of git operations on a sshfs mount will drive you up the walls.
The performance improvements in 7.0 came from an attempt to introduce a JIT that revealed the lower hanging fruits in term of optimization.
Correct solution is to improve phpdoc, and that is a PHP-FIG process, which ought to be easier than changing the language, plus it has the benefits to support every version of PHP. Unfortunately PSR-5 is marked as abandoned at https://www.php-fig.org/psr/ Jolly good! However, my personal opinion is that you is should be possible to annotate every aspect of the language, i.e. it ought to be possible to define a class with all it's methods with just phpdoc annotations, today that is not possible. If we could do this, you could start stubbing &amp; defining apis manually or autogenerated without any code, and IDEs could just pick them up. Standardization could just be a set of annotations for instance, that means that you are less dependent on PHP-version. There are many times I wanted something like this, just a simple example of marking a class *final* without doing it code (you can't mock final class).
*Nobody* should be using PHP 5.3. We are approaching 4 years since it was retired. There‚Äôs simply no excuse for using such a heinously out-of-date version. 
Technically you're right. But in practice PHP 7 tends to be faster with real-world applications, and HHVM tends to be faster in synthetic microbenchmarks. Since most of us are in the business of real-world applications, I feel comfortable enough saying PHP 7 "is faster" as an overall conclusion.
This. Also, keep the downvotes coming microshills and microbots 
Hello gents! I was always passive part of the community but today I I would like to get some opinions of a small project of mine. It is a php7 microframework which is utilizing swoole library \(library that enables high\-performance, scalable, concurrent TCP, http services in php language\). Questions/suggestions/criticism are welcome. Thanks in advance.
(to clear up some possible confusion: it looks like a scam, but it isn't. Intel, a big reputable company, wouldn't allow this scam on 1 of their subdomains. this is to celebrate the 8086 cpu and x86 architecture's 40th birthday. )
The usual practice is to store these details in a session, then just store the session ID in a cookie. PHP can do most of that work for you. Why is it better? Session IDs are transient, they only work for a while and they can be revoked. If you rely on something fixed like a user id hash, your attacker only needs to find these data once, and they can thereafter just manually set their own cookies to those values and gain access from anywhere. 
that sure helped Python a lot, because [Python is faster than PHP](https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/php.html) ^^^^/s
Thanks for sharing your view. I think the post could be extended with framework and non-framework with result: use whatever works for you the best. Would you recommend such approach to some kind of projects? If so, what should they look like
Intel hired a PR company, PR company hired a Professional PHP Development Company from Bangalore, India, Professional PHP Development Company from Bangalore, India hired a professional developer, professional developer created a Wordpress site. Not a big deal
And what product of Microsoft does compete with GitHub which would benefit from an "extinguish GitHub"?
well, i recall 5x partial reimplementations in .NET, JVM, and Parrot, but none that ever took off
Uhh‚Ä¶ you're storing password hashes _inside_ the web root, with permissions for the directory set to `0700`? That means that unless you're running PHP as a different user to your HTTPd (possible with PHP-FPM, for example), then all your secret data is happily readable, publicly. A few pointers you might like to take on board: You're blindly accessing `$_POST["username"]` and similar, which emits an [E_NOTICE](http://php.net/manual/en/function.error-reporting.php). You ought to check that the key exists. In old versions of PHP, you can use `isset($_POST["username"])`, but since PHP 7.0 you can just use `$username = $_POST["username"] ?? "default value"`, which is nice. Instead of having loads of files, have a single entrypoint that figures out what the user wants, commonly referred to as "routing". As I alluded to above, only those files that need to be sent to a user should be inside the web root that your HTTP server is pointed at. A more "secure" set up would be to have all your source code and data files somewhere else: ``` . ‚îú‚îÄ‚îÄ src ‚îÇ ‚îú‚îÄ‚îÄ 01-your.php ‚îÇ ‚îú‚îÄ‚îÄ 02-files.php ‚îÇ ‚îî‚îÄ‚îÄ 03-here.php ‚îî‚îÄ‚îÄ web ‚îú‚îÄ‚îÄ css ‚îú‚îÄ‚îÄ index.php ‚îî‚îÄ‚îÄ js ``` Your code is incredibly hard to read, and developers spend a _lot_ of time reading code. You'll thank yourself if you make that job easier on yourself. Following standard formatting guidelines such as [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) will get you used to them, and mean when you read someone _else's_ code, you're more likely to feel comfortable. I've gone to the effort of standardising one of your methods in my next point. Think hard about what your function needs to do, and what it should return. Your `Commenter-&gt;passwords_match()` function for example is _bonkers!_ Using exceptions for standard code flow is really weird and not recommended. The name gives a clue ‚Äì they should be used for exceptional circumstances, not normal program flow. See the [updated version I made](https://gist.github.com/Drarok/8184d5f7d165a4d4ef359d6e59a4d1ab). The above being said, the `passwords_match` function doesn't need to exist at all! If it were more complex than `$s1 === $s2` then it would make sense as a function. As it is, you're echoing out data to the browser as a side-effect of checking two strings are the same. A function [shouldn't have any unexpected side-effects](https://en.wikipedia.org/wiki/Principle_of_least_astonishment). You should probably look into a framework like Laravel, Symfony, or similar. They help you structure your code, give you standard components for doing things (like accessing a database) so that you can concentrate on writing _your_ code, nor boring boilerplate to handle HTTP request/response stuff. And finally(!)‚Ä¶ IMO your "banter" is going a bit far, people are giving you advice for free to help you learn and improve, and you're coming across as a bit of a jerk.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [php-fig/fig-standards/.../**PSR-2-coding-style-guide.md** (master ‚Üí 4af55ad)](https://github.com/php-fig/fig-standards/blob/4af55ad2989ff47fb37b5012d61a81c6adca1bfb/accepted/PSR-2-coding-style-guide.md) ---- 
what do you mean it doesn't have? I'm still new at programming but our professor is teaching us PHP with a MCV way without objects.
i know one of intel's php devs and he's a pro could be found via linkedin
I like how your username counteracts your arguments, while you're mostly correct. Kind of gave me a chuckle.
Intel marketing is using Wordpress. ü§∑üèº‚Äç‚ôÇÔ∏è
Hi I am building something like this for my company as well \(swoole \+ zend expressive\), and I love to see that someone has the same thoughts as us. What do you mean by "concurrent TCP" here?
You think what I say is not objective :) ?
I feel like this project can do with some love for security. By quickly looking at it it seems vulnerable to csrf, xss, authentication theft, poor password salt generation, remote file execution and most likely some more funky stuff going on.
Hello, thanks for taking interest in my little library. "Concurrent TCP" is part of the slogan taken from swoole webpage, more or less it means that multiple clients can interact with tcp server simultaneously. In my case scenario I am using mostly http part from swoole library but there is a plan to support web sockets.
I've always heard PHP can be used for web sites, glad to see rumors check out, thanks OP.
It's fine to reference code from other projects while learning, but be sure to consider the source when you do. WordPress has always been pretty terrible code, and now it's thoroughly obsolete.
No no I definitely think you're right, it's just that the percentages don't seem very \_objective\_ if you catch my drift. :D
Ah the percentages. Aight, I have to take that criticism.
Thanks for your reply, yes you can say its an JSON reader and writer too :) However, the point here to serve the need of a PHP based database that works. Though still its a proof of concept and there will be progress made gradually :)
Lots of companies contribute to linux - and other stuff. Libdispatch, launchd, C closures, objective C and objective C++ in gcc (along with various bug fixes), LLVM/CLANG. My production servers all run on Amazon Linux. Color me unconvinced. I'm still never ever ever going to do business with Microsoft. Sorry. I'm pragmatic, I'll use stuff they open source if it turns out to be useful. But I'm never going to do things that puts money into their bank account.
Try to go to [game.intel.com](https://game.intel.com) . lol
Perhaps it's not extinguish Github as much as extinguish particular projects they don't agree with. This is a very short sided question.
Microsoft has followed this practice in varying degrees for 30 years. What evidence do you have to suggest they won't continue?
Embrace/extend/extinguish regards proprietary extensions to competitor or open standards, it doesn't apply to companies Microsoft buys. When you buy a company it stops being a competitor, it becomes your subsidiary that you paid hundreds of millions of dollars for (in some cases). It makes no sense to **buy** a company and then **extinguish** it. I don't need evidence to point out you're not making a link of sense, and that, as I said, you have no idea what you're talking about.
Because it's a Wordpress site
Do you have any real world benchmarks which require socket connections to external services such as a database?
Basically the problem is where to store type information. It will require some changes in zval structure. But I don't know why we even need this switch. We could just have syntax for needed stuff without any way to validate types in runtime. The only problem with that is inconsistence (some types will be checked in runtime and some of them not). But this is php, anyway)
&gt; which ought to be easier than changing the language Could you point of any discussion for generics (`@template` php doc), or ability to express covariant types (which is currently impossible with typehints), typehints which describes generator return types, `@typedef` and how it should behave.... I doubt that php-fig will discuss this kind of issues any time soon. Some work is going in phan/psalm repositories. But tools like phpstorm will not support this kind of type annotations (since it not standard nor recommendation).
No, a session lasts as long as you want it to last. The session ID is also a cookie, after all.
It doesn't require a significant change to zvals. The common cases can still be a bitmap of enumerated values on the zval, and extended information that's not needed at runtime can be elsewhere. Many languages do such optimizations. &gt; The only problem with that is inconsistence (some types will be checked in runtime and some of them not). But this is php, anyway) Frankly I wouldn't mind a switch to completely disable typechecking for typehints at runtime. It's not as useful as some people think. We can call this switch: iDontKnowHowToDoIntegrationsAndTestingOrHaveExtremelySensitiveApplicationAndImParanoidAboutIt = On / Off
Ok, i understand your choice for 7z. I assume you do this via a cronjob, right? Why do this with PHP? I'd use bash for a job like this. 
Well, how else do you test in production?
errorlogs
Please checkout ProcessWire, where everything is a custom field. It's very lean and flexible that just gives you the tools to do anything you might want without dictating how you should do it. In its core is a powerful jquery inspired API that allows you to access your data that's unlike any CMS out there. I can't describe it any better that the website right now, but the forum is full of the most friendly and helpful people I've ever seen on the internet. Hit me up with a pm if you're interested. :)
Almost every microsite ive worked on is in WP. Why the fuck would you use anything else? Seriously? Are you spool up a laravel just to do text and images with dynamic stuff sprinkled in randomly and easy to mass install plugins on a multisite that can run thousands of microsites from one central site whole running one of the most supported and adopted CMS on the market? Let's hear your solution?
&gt; I need a regular backup of the entire "/uploads" folder every hour A cronjob is more suited to do what you want, without any PHP involved.
they're using https so it's ok
&gt; It's not as useful as some people think. Agree.
I heard PHP is dead and sucks, at least that's what all the unemployed developers keep telling me
Right now I've got a cronjob that executes the php page and creates a 7z file every hour. That file gets copied on a remote server for safety reasons. The file is named weekday-hour.7z and I keep a maximum of 1 week files.
I use PHP because I know it. I know the basics to work on Linux, nothing else. I also need to compress specific folders, rename some stuff, dump the mysql database and run the cronjob from 7 to 19 every day except the weekends. I did that in a minute via pho, I don't know how to do that via bash.
Thanks.
I heard there are only 4 or 5 php based Websites left out in the deep space of webdev.. I get the feeling, that i need to hang myself, cause im not developing node.js apps for the bakery client Markus Baker
Turns out we do have a [lynda.com](https://lynda.com) subscription. I will look there, thanks!
In many cases that's exactly what happens...
So you don't feel that writing vanilla PHP without any frameworks or OOP with mashing up HTML and PHP all together in files will have an impact on my future employability? If not, then ok I'll keep going with this, but I was worried I would try and move on to a bigger and better job and not have the skillset to do it.
I would have thought us PHP programmers would band together strongly since there is so much negativity thrown at us from the outside anyway, haha. 
This
That.
Thank you. This addresses my situation perfectly. I really appreciate your advice. I have forgotten so much about good programming practices I learned in school since I don't use them here and my boss is against the "school way" of doing things. Again, thank you so much. 
If my boss got hit by a bus we'd be in trouble. He does things very strangely and doesn't explain the who, what, where, when, why, and how of it. Thanks for your advice. 
I don't understand, why not call 7z directly, without the roundtrip to PHP?
[https://github.com/aaron5m/rlc/blob/master/rlc\_system/bad\_words.txt#L55](https://github.com/aaron5m/rlc/blob/master/rlc_system/bad_words.txt#L55) omg
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [aaron5m/rlc/.../**bad_words.txt#L55** (master ‚Üí 0dbaca6)](https://github.com/aaron5m/rlc/blob/0dbaca6c556be31e2cc140e5d5658a2076febe96/rlc_system/bad_words.txt#L55) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e05ketm.)
People keep saying this. People also keep saying that it's on the rise and experiencing a renaissance. Without some good data in hand, it's hard to say beyond anything anecdotal. The ecosystem appears to be thriving and the language is rapidly improving. The whole development experience is certainly much more pleasant than it had been in years past. It could be because I've been at this for a while and have good experience on my resume, but the job market feels fairly stable. That said, I get approached about a ton of JavaScript roles by recruiters. Each person's mileage will likely vary.
&gt;There's zero overlap between this strategy and Microsoft buying GitHub, unless you think they're gonna start extending the Git protocol in a proprietary manner (hint: it won't happen) in order to fight some third competitor. There's no such competitor, GitHub is the name of the game, everything else is tiny. So basically y'all full of shit. If this is the basis of your argument, I'm afraid you'll have to do better.
Yeah, I kind of meant it as it's pretty typical for marketing to use Wordpress. It's common enough and easy enough for everyone to use.
All for the low price of $100,000.00. $99,000 went to the PR company, $1000.00 went to the dev found on Upwork. 
You should always turn off error reporting in production. If you have to test production do something like // Check if it's from corporate network for testing if ($_SERVER['REMOTE_ADDR']; === "5.6.7.8.") { error_reporting(E_ALL); // Enable ALl errors }
Come on, man. Was a joke.....
Because I need to do the following and knowing PHP that was a natural choice: Compress some selected folders Exclude specific files Dump mysql and add it to the 7z file Run the script from 7am to 7pm Exclude weekends Exclude specific holidays Exclude august Keep the 7z files for maximum 7 days Send a mail every day with a report Delete 7z files in some specific situations ... I need 5 minutes to do it via PHP. I wouldn't know how to do that in another way...
Just a word of caution, writing academically correct code for the sake of it does not guarantee results. Always, always, always be pragmatic and simple first. Academic code principles are meant to make code easier to maintain and reason about *in the right situations*, but that requires knowing when that kind of design is warranted and when it isn't. It's *very* easy to over-complicate code by applying patterns and principles for the sake of "correctness", but that's a quick way to accomplish the opposite of the intent behind those principles. Patterns and principles are tools, and like all tools, but used correctly and for the right job. Sometimes that means not being used at all. It could be that what your boss is doing is the pragmatic thing for the situation. It could also be he's writing procedural spaghetti code without *any* thoughtful design behind it. I can't say, since I haven't seen his code. Just want to throw caution against over-designing code. It's a special kind of hell.
I think in general the PHP community is too concerned with 'gotta go fast!' Plenty of systems that are not the fastest do well - python is a slug compared to many other languages, and yet it's going strong. Why? Because the ability to execute simple python code quickly isn't all that important when most everyone using python finds the bottlenecks being either raw math (which can be outsourced to optimized fortran/C/C++ libs through numpy and the like) or handling a bunch of IO tasks (which mostly comes down to an event loop implementation that, again, is ultimately outsourcing the hard stuff to optimized C and allowing [this](https://github.com/magicstack/asyncpg) to exist.) PHP is fairly quick at executing raw PHP code, but that's not really what most people care too much about - how many times have you actually heard: 'my company rewrote/chose PHP because python/ruby are just too slow!' Probably not that commonly - most businesses large enough to feel bottlenecked by python or ruby would be better off doing a rewrite or initially choosing languages that still beat PHP in speed metrics like Java, C, Go, etc. I've pretty much never heard anybody say they chose PHP - or other languages for that matter - without saying at least one of: * The team already knows it * We want to use framework/library/platform/whatever XYZ which locks our language choice 
I remember when Ruby on Rails was the new hotness and every RoR dev looked down on PHP devs.
PHP may have a ‚Äùbetter‚Äù dev exp as it had in 2003, but its still mediocre at best. Most jobs evolve around websites, if you want to build ‚Äùreal‚Äù applications PHP is not the first pick for many companies is 2018. That said, the language still suffers from beeing a bog mess, you CAN build apps, but its usually a major pain.
&gt; Recommend always using brackets in control statements (if statements, etc) even if the body has one line. &gt; Recommend indenting either 1 tab or 4 spaces inside of class, method, and control statement bodies. I would recommend simply using [PSR-2](https://www.php-fig.org/psr/psr-2/) as the coding style.
I agree with most everything said, but I would also recommend taking a look at [PHP The Right Way](http://www.phptherightway.com/)
Didn't bother reading the article, but Intel seem to have connections to PHP. [https://software.intel.com/en\-us/blogs/2015/10/27/high\-performance\-php\-7](https://software.intel.com/en-us/blogs/2015/10/27/high-performance-php-7)
Swoole is a reactor [https://en.wikipedia.org/wiki/Reactor\_pattern](https://en.wikipedia.org/wiki/Reactor_pattern). So concurrency yes, but cooperative concurrency, on a single thread. That means a long synchronous processing block other requests waiting for their processing. That's why "php examples/build\_in\_server\_example.php" is not suitable for a production with reasonable traffic. It does not scale up alone, it needs a layer of process management.
UK governments websites use ROR.. probably why they're always fucking broken
Hah. Who the heck you think you are, buddy :) I explained what your quoted strategy is about. If it doesn‚Äôt click for you why it **clearly** doesn‚Äôt apply here, its not my problem. 
They still look down on PHP because delusions are never disturbed by facts. 
`mail('joe.bloggs@acmecorp.co.uk, 'debug', print_r($whatever, true));` is how a developer at a place I used to work at debugged in prod and in general...
Yeah, as somebody who works with it on a daily basis it's not a pain. And yes, I have built and worked with "real" applications. And yes, I have also looked around at several other languages, so I do have a reference point to base that statement off of.
PHP devs talking shit on ROR is the same as ROR devs talking shit on PHP. Pointless. 
**Come on,** a tutorial featuring an SQL injection and general 1990-ish style? Seriously?
Thank you for your comment. There are few things I would like to clarify: \- swoole is using multiple threads \- swoole does support C1000K \- my examples are just examples not production ready code 
Okay, here are some things for you to learn: - [How to prevent SQL injections in mysqli?](https://phpdelusions.net/mysqli) - [Should your code ever die on error?] (https://phpdelusions.net/articles/error_reporting) - [Do you really need to check for both isset() and empty() at the same time?](https://phpdelusions.net/articles/empty)
Between WordPress's commitment to backwards compatibility, concerns like the ones you're expressing, and given the pressure to release Gutenberg despite it not being ready - I really doubt the old editor will go away any time soon. You are likely throwing the baby out with the bathwater if you want to ditch WordPress for this reason alone. Disabling Gutenberg is a single line of code you can put into a MU plugin if you wish.
It is wordpress also.
I was always passive part of the community but today I I would like to get some opinions on a small project of mine. It is a php7 microframework I am using swoole for one project that handles more than 400k request per minute :\) 
What kinda esoteric network are you running where dotted-quad has a trailing period?
So he would get like 10000 emails in 1 minute with production traffic? Lol
\&gt; \- swoole is using multiple threads Yes, my apologies, I've missed that point. However is Swoole considered as production ready ? \&gt; \- swoole does support C1000K A single event loop can be C1000K \(which not means it handle 1000K requests within a given SLA\), it is more a matter of memory footprint per request &amp; available descriptors.
The kind where I make up bogus examples on the fly and don't proofread close enough :) 
You joke... but I have a dev that does this exact thing :) Small shop, one guy so he does all his testing on production. 
&gt; Node.js is running single thread with event loop and I have seen people setting up servers intended to handle reasonable traffic. With a layer of process management/LB I hope, at least for HA &amp; responsiveness...
You laugh, but we had error reporting like that in places. There were a few instances where a memcached server would fall over and cause the application to send out something like 250k emails in a few hours to the entire development team. 
Including a file should not cause an output? Can you elaborate on that? 
Yup swoole is production ready, alibaba and baidu are using it. 
Who hurt you?
That's one way to get spam blocked by mail servers.
PHP is fine. Developers are not... There I said it.
Ah alright. In a minute is a figure of speech right? ;-) Will take me a lot longer! Good luck! 
&gt; In a minute is a figure of speech right? ;-) Let's say a couple of minutes if we include the small debug session. It's a 40-line piece of code after all, I've spent more time googling around to understand Linux commands :-P
Don't forget to cater for HTTP_X_FORWARDED_FOR
Intel [is using wordpress](https://builtwith.com/game.intel.com).
I can only speak for myself, but I came from a design/animation background and was self-taught in PHP. I still do things in vanilla PHP and over time have just built up my own sort of framework. It seems logical to me and everything just works. As another person mentioned in this thread, the costs and time it would take to change everything up just for change-sake and be 'right' isn't worth it (for me). Is it elegant and 'right?' Probably not. But it gets the jobs done, clients are happy and keep returning, and work hasn't slowed down thankfully for the past 17+ years (6 as freelance dev). That being said, if you have the opportunity to learn new ways of doing things and getting your own skills upgraded, it's only going to help you in the long-term. Especially if you are looking for different jobs with larger teams. No one asks Toyota to see the schematics on how your car works or if they used Philips or flat head screws, they just want it to get them to their destination reliably. Little tip: I've found the biggest enjoyment of coding isn't the minutia of what framework to use, if I'm using the latest and greatest plugin, OOP, etc. It's that I've created a solution to the client's problem. It might not even be one they anticipated. If you can put your client at ease with solid results, you're a superhero in their eyes. 
mmmhmmm, https://i.imgur.com/y7Hm9.jpg
Laravel had a form builder built into it, probably about the time that you were looking. This has since been split off into a separate package. Personally, I feel a lot better about building forms without a form builder getting in the way, but was not always of this opinion.
Nice! 
&gt; blog.~~ostrainer~~spam.com ftfy
Thats it? What about PSR-9000?
Then they hire a really skilled American and pay him/her $75-100/hour to salvage their systems after the Indians have made a waste of them, mostly through Drupal travesties and Doctrine crimes against humanity. I did that from 2012-2017 in what I call "Reverse Offshoring". Hell, I ended up in India for 20 months (2016-2017) training those devs how to not be crap.
Hello, thanks for your valuable comment. Sorry I do not support yamaha synthesizers in this framework version. 
A big company here hired an indian team for a big and important database migration, needless to say they wasted 2 years and more than a million $. They had to start all over with a local company afterwards.
We build large web API domains for tcp with raspberry pie, a dusting of bash, and FORTRAN. tastes so good if you put whip cream on it, you'll have a raspberry cloud
To me, part of the point of a framework is to be opinionated, and not leave it up to a developer on how they feel like (at the moment) on building a form. I guess it's not a big deal for solo devs, but it matters when working with teams, or when maintainability is a concern as the app passes through future developers.
To be more technically correct, only a single file should do all of the output. But yes, if including different files causes output, that is a clear sign of bad design.
It's an insider Symfony joke. Don't worry about it.
why do people act surprised that they use wordpress, guess what if you want a CMS thats very quick to setup and use nothing beats wordpress still. Hell there are MS sites that use wordpress, who cares
Was thinking about the exact same thing some days ago. I came across https://www.easyswoole.com/ but I haven't took the time to translate it all. But thanks a lot for sharing. I might use this.
\&gt; Personally, none of those. We don't use a framework at all. We wrote all our own code. Which is why our service runs on about 10k lines of code instead of 200k. Which makes me happy. Projects like yours normally survive on the backs of overpaid old fogies, house\-trained junior coders and Indian or Pakistani developers, or no other developers at all even. They charge premium for something that can be scaffolded in weeks and get away with it, because client for was stupid enough to afford it. BTW, 10k lines of code is pretty much nothing for a monolith codebase. What is it for? Ordering pizza?
It works for you, thats good. Im just pointing out what i have seen in the last 10 years of software dev. I have too used PHP for years, and have since moved on to other saner langs. All jobs i see around software dev are very seldom seeking PHP devs. 
&gt;So you don't feel that writing vanilla PHP without any frameworks or OOP with mashing up HTML and PHP all together in files will have an impact on my future employability? No, that's not what I meant. Even though your current experience will absolutely help you in future jobs, you still want to learn as much as possible. :\) Sorry if I gave you the wrong impression. I'll try to clarify. Based on your comments, you seem to have this perception that OOP and an MVC\-based design is the "right way" to write code. It's one way, but it's not the only way, and it's not always the "right" choice for a given project. You can write "spaghetti code" or "clean code" in any language, with or without frameworks, in any style. There is no silver bullet, just choices that have both upsides and downsides. That being said, your ability to obtain \(and maintain\) employment has nothing to do with these low\-level technical choices. It has everything to do with your ability to solve real world problems using computer science in a cost\-effective manner, and your ability to sell yourself to employers. And this is where learning as much as possible comes into play. If all you know is procedural PHP\-based web applications, then you will only be able to work on those types of projects. But if you also know how to apply an MVC\-based design to a procedural code base with libraries written in C, a user interface written in PHP, and web services written in Ruby, you now have many more employment options. So absolutely, learn OO, learn what MVC means, learn when these things are a benefit and when they are a hindrance, etc. It will only help you grow your skills so you can get that "bigger and better job" in the future. Just don't expect your employer to change how they do business to satisfy your own career advancement. That's great when it works out for everyone, but it usually doesn't happen. If you feel strongly about your boss' current programming practices, see my previous comment on what he may be thinking if you come to him about your ideas. Depending on how you approach him and the reasons he has for writing code the way he does, you may be able to convince him to give a new approach a try on the next project. 
How can people work on such a low price? One cannot deliver good service at a bargain rate. BTW I can totally agree with bad job by the outsourced company. BTW I am an Indian. Who is working on building a Web Design, Development company with focus on High quality solutions rather than low cost one's. If you have any questions, suggestions DM me ‚ò∫Ô∏è.
That's a good suggestion!
More like a promotional page template since game.intel.com is just the 2017 or 2018 theme home page. Maybe they are running a separate instance in that specific subdirectory. Or that whole landing page is hardcoded into a page template which seems like a waste. Meh.. not my problem
I didn't like your post at first, because it seemed to be reinforcing the "right" vs "wrong" way to build software. But I am glad I kept reading. Lots of good practical advice. Especially the last few paragraphs at the end. Well said.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
It's a sysadmin mistake.
Mediawiki &amp; WordPress both find PHP7 faster
I've worked on a system once that sent an email to the entire development team the instant a certain type of security\-related incident occurred. Sounds reasonable enough on the surface I suppose, everybody needs to know asap if someone is attacking your system. The problem is that that very same system was run through automated vulnerability scanning every weekend, in production, and the notifications were sent out on a per\-event basis. So a port scan would fire off a separate notification essentially per port being scanned, or an XSS check would fire off a notification per form being tested, etc. Every Monday the entire development team would come into the office and be greeted with \~10k emails that were all ridiculously alarming in nature. It was the software equivalent of the boy who cried wolf. Every single developer of course had an email filter which filtered those messages out. So if anybody ever actually attacked that system, nobody would likely ever notice, especially if they did so over the weekend. 
UPDATE: https://github.com/stechstudio/backoff is the new replacement solution. It's a nice library, even contributed 2 PR's, one to improve test reliability and the other to simplify the `run` command. Always better to run someone else code to solve problems, even when replacing others code.
I can't believe what I am seeing with my eyes on [Intel.com](https://Intel.com) domain... [https://imgur.com/p9CpIhD](https://imgur.com/p9CpIhD)
I just switched from suPHP to PHP\-FPM on CentOS 7 with Apache \+ PHP 7.1 and now I can't use HTTP authentication anymore in phpMyAdmin. It always throws back the "Access denied" error. I think something must be configured in order to pass authentication variables to PHP\-FPM. Any idea?
this
Thanks!
Read up on how to use GIT. Plenty of info out there.
We‚Äôve got a contractor that management keep around for some reason that, despite us having an unlimited Bugsnag account, still sets up (synchronous, unqueued) mail-on-exception handlers. We come in some mornings to 500 duplicate emails because his shitty fucking code threw a fit in the night. 
PHP has been on the decline for 20 of you listen to the internet. But as long as more then half of said internet runs on it, it'll be relevant. 
No xdebug plugin?
This is very interesting and I couldn't find that mentioned anywhere in the docs. Do you have a source for that?
I have a question about swoole: is that working like reactphp/amp/php-pm? If not, what is different? The main problem I have with these solutions is that a single process handles many HTTP requests. It's very good in theory, except most PHP libraries and apps are not designed for that (memory leaks, etc.).
"Show me on the doll where WordPress touched you."
`mysql_connect(‚Ä¶) || die();` Duh!
Too real....
&gt;I have a question about swoole: is that working like reactphp/amp/php\-pm? If not, what is different? Libraries which you have mentioned are using reactor pattern and are single threaded and entirely writen in PHP (some of them are using libevent for better performance). Swoole on the otherhand is entirely written in C as php extension and does support multithreading. &gt;The main problem I have with these solutions is that a single process handles many HTTP requests. It's very good in theory, except most PHP libraries and apps are not designed for that (memory leaks, etc.). Memory leaks are developers fault and its impossible to solve in the library itself, if library/application you intend to use is crappy nothing will help here. Entire advantage (and disadvantage at the same time) of using PHP is the fact that PHP application lives only during the request cycle and once response is served application state is cleared that's why most of the libraries are not ready for this kind of solutions \- simply because developers are relying on well known PHP lifecycle. If you are searching for solutions... lets say from java/go/crystal/python or node.js world it is for sure worth for checking out.
[https://translate.google.pl/translate?hl=en&amp;sl=zh\-CN&amp;tl=en&amp;u=https&amp;#37;3A&amp;#37;2F&amp;#37;2Fwiki.swoole.com&amp;#37;2Fwiki&amp;#37;2Fpage&amp;#37;2Fp\-baidu.html](https://translate.google.pl/translate?hl=en&amp;sl=zh-CN&amp;tl=en&amp;u=https%3A%2F%2Fwiki.swoole.com%2Fwiki%2Fpage%2Fp-baidu.html)
Also please checkout case section here: [https://www.swoole.com/index.en.html](https://www.swoole.com/index.en.html)
ikr?
$1000? You must be joking... More like $300.
Hey there, This is nice. Test coverage should be a bit higher, but I really love seeing these kinds of projects popping up. You deserve a star and I'll definitely keep an eye on the project!
There is an alternative by creating fast communication bus between app server and multiple php workers. This way it is possible to run each process in isolation, get massive win by single bootload but still use load balancing and concurrent requests at top of it.
So your problem is with php-fig and not my correct proposal of doing it with annotaions? If php-fig can't get their act together, we need to change that.
Intel works with many Open Source projects to benchmark their CPUs on real world code. That includes PHP, HHVM, Wordpress, Wikimedia, and I have no doubt MANY MANY MANY more.
Tests I have done and looked at, an ORM has significant performance hit https://github.com/Big-Shark/forked-php-orm-benchmark Sure, you still need the permission checks, but you don't need to calculate the result if you already done it. And you don't need to send it either, that is a gain for the server. Usually the problem with etags and such is that if you have not planned for it beforehand, it can be hard to add it later. 
https://game.intel.com/wp-login.php yep, that's what you get when you outsource to India... 
[static\_generator](https://github.com/edwrodrig/static_generator) As the name suggests, it is yet another static site generator for PHP. The alternatives are more focused in integrating trendy file formats(markdown, twig, etc) than the actual programming. Why I need new template engines if PHP is a template engine itself? So I focused on a simple static site generator that allows me to keep programming as vanilla as possible without learning new stuff. My main use cases are: \- Easy migration from old php sites. \- Handle site translations easily. Here some sites that I have done with my library: [http://en.imo\-chile.cl/](http://en.imo-chile.cl/) [http://www.a\-prendechile.cl/](http://www.a-prendechile.cl/) [http://www.edwin.cl/](http://www.edwin.cl/) [http://www.amandamorales.cl/](http://www.amandamorales.cl/) [http://en.ofmc.cl/](http://en.ofmc.cl/) PS: I apologize about my english, I'm not a native speaker, but i try my best :). 
Please add PSR-8. 
Somewhere some guy is going to copy and paste that to use on a server somewhere
Gitlab CE or EE? Or gitlab.com?
Meh, who needs that. Just var_dump() it like in good ol' times.
If leaving github, what are my options aside from Atlassian?
Strange, the function name doesn't (hint) tell me anything.
&gt; I didn't like your post at first, because it seemed to be reinforcing the "right" vs "wrong" way to build software To be fair, I am indeed advocating for a specific way to structure web applications. I do fundamentally believe that the front controller pattern w/routing and separate templates/business logic is *the* correct, pragmatic way to structure a web application, no matter how simple or complex it is. The benefits are *immediately* realized even in the most basic of applications, save for maybe a pure HTML site with a single contact form. But beyond that very high level structure, then the more granular architecture should be based on common sense; favoring the simple, pragmatic solution and keeping the higher level of goals of maintainability, testability, and flexibility in mind, using various patterns and principles as tools to aid in those goals, not as goals in and of themselves.
Still supported by some distribution vendors. Red Hat, in particular, may be supporting those who pay for it until 2024. (Speaking with 7+ in all our production environments. Only waiting on QA)
Well to be fair, if I was hired to do a site for intel i would expected their budget to be much higher than 100k.
I'd say don't stop at "close enough." You should be developing with dev/prod parity. I know some people will disagree with this, but I even prefer to have my team run their local VMs with APC and other caching strategies turned on. The down side is once in a while you have to recycle Apache, the up side is you're always testing an apples to apples scenario.
My opinion is that it's not alleged.
I agree. But sometimes close enough is a good stepping stone. 
One isn't about to be gutted by Microsoft.
PHP is fine. WordPress is not... There I said it.
$990 to Upwork $10 to the dev who later had his account closed by Upwork
Bad touch 
No usually it's an old version with many know vulnerabilities. This one is newest https://game.intel.com/wp-admin/load-styles.php?c=1&amp;amp;dir=ltr&amp;amp;load%5B%5D=dashicons,buttons,forms,l10n,login&amp;amp;ver=4.9.6
Github is a very popular site for hosting git repos. Their codebase is closed source, and they have recently been purchased by Microsoft. Public repos are free, private repos cost money. You can also pay them a pretty high amount of money (~$250/user/year) to run it on your own server. Gitlab is slightly less popular site for hosting git repos. Their core product is open source, although some features are closed source. Pricing is complicated, but generally cheaper than Github, plus you can always run the core (Gitlab CE) on your own servers for free. &gt; What's the big differences? Github is more popular, and is being bought by Microsoft. Gitlab is much more open source, usually cheaper, but often lags a little on features (at least in the CE version).
What's your biggest issue with WP?
Care to explain why is this a WP issue?
Have you ever worked on a legacy codebase and wondered "Where the hell is this variable $fromDate coming from?" Only to find out later there's a series of file includes, one of which runs some code like extract($_POST); and then you end up with code that is literally built around side effects. Snippet from Wiki: &gt; ... a function or expression is said to have a side effect if it modifies some state outside its scope or has an observable interaction with its calling functions or the outside world besides returning a value. For example, a particular function might modify a global variable or static variable ... write data to a display or file, ... (etc) Side effects in PHP are important to avoid when including a file for the purposes of referencing a class or even just methods it contains. Interestingly, PSR-1 standards explain that a file should either declare symbols, or produce side effects (i.e. a view that generates output), but not both. Depending on intent, there are reasonable times when a side effect (such as generating output) is desired. In my experience it's seldom necessary. Reasons to I like to avoid side-effects: They make code harder to reason about, troubleshoot, and less testable.
WordPress is poorly architected, but powerful and has a large ecosystem. It's filter/action system engourages globals. Further it's PHP5.2 compatibility discourages namespacing. Conflicts abound, and building testable code is difficult. Legacy compatibility is both it's biggest strength and weakness. Guaranteed that if the main devs were given a do over that magically remade all of the plugins and themes to work, they would design it completely and fundamentally different. But all of that is irrelevant in the end. The frameworks that constantly perfect stuff at the expense of legacy compatibility never reach the size of WordPress. They might give devs wet dreams, but the ecosystem almost always lacks.
I know a bunch of them. All working with WordPress nowadays.
Some Americans are useless too. The whole industry is littered with morons 
Sorry man, the pinheads in this sub downvote everything that doesn't interest them.
Thank you. I promise test coverage will be better soon :)
\-\&gt;hug()
When you read the description on https://www.techempower.com/benchmarks/#section=test&amp;runid=aad43f39-48a2-460c-a363-99cd543a772a&amp;hw=ph&amp;test=plaintext&amp;l=hr9zpb The benchmark of peachpie say's is raw php compiled on something with raw conections to mysql, but raw php is using a full ORM. Of course peachpie it's gonna win :/ Probably I didn't read the site as intended, but if wat I said is true, well, peachpie isn't showing nothing new. Also, php alone is php 7?, why is php 7 slower than php 5? All benchmarks show php 7 to be at least 50% faster than php5
Putting aside the absolutes, I agree with you. I have actually found those patterns to be the most effective way to scale *most* applications. In addition to web apps, those ideas have worked well for me in desktop apps, command line apps, and even most apis (especially web services). There are a few times I felt neither of these things was useful or even appropriate. I have done a few drivers, plugins, and libraries where these patterns just didn't provide enough (if any) benefit. But those projects have been in the minority by far.
Thanks, that's more than enough, and the perfect interpretation what I feel every day. I was just curious if only me.
[removed]
I'd say that GitHub is actually the one lagging on features. Gitlab has a lot more to offer, but it's a little slower and not as popular.
I'd take bitbucket over gitlab.
Well yeah, but those are not web applications. The typical Composer library structure is very different from an actual web application. You wouldn't want to structure one like the other.
Thanks for the first link, and yep it seems I missed that on the home page ^^ That's very impressive.
**DO. NOT. FOLLOW. THIS.**
&gt; Entire advantage (and disadvantage at the same time) I agree with you :) (it's an advantage and disadvantage at the same time). So to sum up what I understand: do you confirm that a library with memory leaks (that will not work well with react/amp/php-pm) will also not work well with Swoole?
Nah you put it behind a condition for your user. Or a query string of your name
eh? I never said the error was because they were using Wordpress... just pointing out that it's a wordpress site and that's why they were using PHP
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Laravel is lean? What?! 
Laravel is lean? What?! 
oh god. because the indians don't know what the fuck they're doing and makes a big mess, right?
TIL Intel uses fucking Wordpress (at least for their game subdomain). God.. Which framework fucked up their main page (subdomain-less)?! I guess "pHp iS A bAd lAnGUaGe"
You *might* not forward HTTP AUTH header to PHP-FPM. https://stackoverflow.com/questions/17018586/apache-2-4-php-fpm-and-authorization-headers
‚ÄúHe touched us here, here and here, in the bumhole‚Äù
To be fair, as a beginners tutorial \- this is the sort of thing I started writing as a beginner (except, in my very first attempt \- I had a new db connection for every query, and closed it after getting the results). But, I worry that someone might pick this up, as a beginner, and try to use it without learning a bit more about OOP principles or even basic security. I feel anything labelling itself as a tutorial, yes, it needs to be basic, but it also needs to be spot on in terms of good practice, otherwise we're sending new developers into the world without the proper grounding.
I worked on WordPress sites as a freelancer a few years ago and stopped until last year, when I began focusing on solidifying the basics (HTML/CSS/JS) with an eye toward making a career in building "hand coded" websites. I then landed my first Upwork gig building a script connecting two APIs... Because my client was running WordPress, I wrote it in PHP. I landed another gig, again in WordPress. Plugin modification. More PHP. Tweeted regularly about what I was doing, and a friend DMed me asking if I wanted some WordPress work. To build my portfolio, I volunteered to make a simple website for my friend. I tried so hard to find an excuse to make a sexy non-WP site using one of the cool JS frameworks that I'm interested in and can easily use to find a day job working with. But the fact is, they will want to regularly update it and I've got no desire to be on call manually changing the code for them every couple of days. I even looked for a good Node-based CMS, but everything I found was either lacking in features or no longer actively supported. Which led me back to WordPress and PHP. So yes, there's plenty of PHP work still available. Much of it is in WordPress. If nothing else, I'd say it's at least a good jumping-off point, because it's free and widely adopted and fairly easy to Google for answers to even the most obscure questions you'll inevitably have. I'm not a PHP expert and I don't really love the language, honestly. But if you're trying to find work as a developer, my experience is that there's absolutely still a substantial market for that particular skill. 
They do the same sort of thing, in slightly different ways, I like GitLab because I can run it on our own server for cost, rather than paying for the licence \- it still allows you to manage your users and merge requests, and set up CI pipelines as required. I've not used GitLab's own servers before, and they did have that data loss a couple of years ago \- so I'm glad I don't. For personal projects, unless I want to share them with the world, I keep them in an AWS CodeCommit repo, because its free and private and not in the house, so it also gets used as an off\-site backup at times. If I want to share something of my own with the world \- GitHub makes the most sense, as it has the widest audience, and public repos are free. For work purposes, depending on the size of your team, running a small GitLab server of your own is much more cost effective than running private repos with GitHub, and there are several pre\-built AMI's on the AWS Marketplace to run them.
wordpress essentially does `foreach($_POST as &amp;$tmp){$tmp=addslashes($tmp);}` manually since PHP removed support for `magic quotes`, and why? to protect against SQL injection.... [i am not joking.](https://github.com/WordPress/WordPress/blob/9a8f48c9bc37601c9e37fb0bcbaa7ed0c0a62498/wp-includes/load.php#L720)
How unprofessional... they should've written it in C ;)
i sometimes does the same, but with header(), and a function that encrypts and base64 encodes the data, and var_dump instead of print_r.. sigh
ip whitelists are not alien to me at all..
What are you using it for? Are they brochure sites or blogs or are you using it for some sort of enterprise process (in which case a CMS is maybe not the most appropriate tool anyway).
The comments below seem to miss out the major features of Gitlab that put it light years ahead of Github. * The main reason to use Gitlab is it had CI/CD pipelines built in for free, Github you have to pay for an integrate somehow an external service (more cost and more points of failure). This feature is almost unmeasurable in how much money and time it will save you/your team. Other key differences no one else has mentioned. * Hosted Docker repository integrated into each repo to store your Docker images, perfect for releasing/CI/CD and keeping copies for local development your team can use. * Built in support for deploying (CD) to multiple Kubernetes clusters (I can't even explain how amazing this feature is). It also comes with Kubernetes monitoring tools bultin at no cost. * Server monitoring built in (I think it's using Prometheus under the hood) for free. * Unlimited private repos for free! * Built in web IDE for quick changes (all tracked under GIT still) * Built in time tracking so you can see how much time you need to bill a client or how long your team has spent on a feature. * Milestones to group tickets into measurable goals, good if you do sprints in your team. * Multiple Kanban boards per project, I think Github introduced this last year? Either way years behind Gitlab. These are just some of the things I use daily on the FREE version, I can only imagine the feature set of the paid version. Add to all this it's free and the features listed above are open source Gitlab simply blows Github out of the water. The only thing Github has is user base and nothing else, it's less superior to Gitlab in every way apart from maybe UI? People are split on Gitlab's UI probably because there's so many features it can be overwhelming at first.
My company is organizing a conference in Porto (Portugal) next week and I would like to invite all you guys to come. This is a not for profit event and all tickets money will revert to charity. If you guys need more information please feel free to ask :)
My company is organizing a conference in Porto (Portugal) next week and I would like to invite all you guys to come. This is a not for profit event and all tickets money will revert to charity. If you guys need more information please feel free to ask :) [https://techinporto.com/](https://techinporto.com/)
Plus you can host Gitlab yourself should it be required.
I've been really impressed that each repository in cloud GitLab has 10G worth of storage that can be used for the Docker registry - as far as I can tell no other provider is offering such a thing in the free tier, and I'm surprised GitLab do not shout about it more. 
Good point - if people are reassessing GitHub after the MS acquisition, one should really look at BitBucket. 
Alright, steady on. There's good and bad developers out there of all nationalities. Let's not tar "all Indians" with the one brush. 
It's just a blank page for me?
And they use wordpress ü§î
I have seen this in the past and it's always caused trouble. It's always best to let developers configure their own working environment in whichever way they find it more comfortable and makes them productive.
Gitlab is very nice, but it's lately being a victim of its own success. They haven't been scaling correctly their shared infrastructure and currently their hosted CI/CD system is next to useless due to massive lead times on build steps - sometimes they're queued over 40 minutes before they actually start, and the compute size given to them is very small so they also take ages. We're paying customers. Feature-wise though it's really nice indeed.
Recently we have moved our BitBucket repositories to our own servers, since BitBucket is awfully slow, just like other Atlassian products. Push takes tens of seconds (just about a second on network repository or GitHub), web interface is unusable (loading for 5 seconds at least for every click). And same story about Jira. I wonder if that's somehow related to my location, because I've tried it using 4 different connection providers and didn't help. Otherwise BitBucket is fine, I was pretty comfortable with it a year or two ago.
(PSR-9000 &gt; 9000) = false
Please compare your peachpie with swoole. [https://github.com/swoole/swoole\-src](https://github.com/swoole/swoole-src) And after crying you can tell us which is faster.
Put a space before and after each word to ensure it grabs isolated words only
The blog post was talking about an e\-commerce shop, not stock trading. 
This is simply not true. London, where I work, has a very healthy PHP jobs market that pay very well indeed, most of which are not Wordpress gigs.
It's worth noting that if you look at the HTML code this comment is right at the top. &gt; &lt;!-- This site is optimized with the Yoast SEO plugin v7.5.1 - https://yoast.com/wordpress/plugins/seo/ --&gt; 
Thats nice! Were im from all/most PHP jobs are website building using some cms, and usually pays less. Software dev gigs usually have some other langs, depending on the app.
I apologize, my critique is invalid in that case. One thing that the article, I think, is a bit unclear about is whether "decrementStock()" **replaces** the setter, or is in addition to it. Because if we leave the setter there, then we didn't manage to encapsulate the behavior, as people can incorrectly use the setter to decrement still. 
you might need a "/s" before getting down voted
That does look dodgy, to be sure, but is that code called? WP powers some ~20% of the web, and if the latest version were vulnerable, all of those sites would have taken down. I use WP myself and have a high degree of confidence in it - my view is the sec problems come from poor quality themes, poor quality plugins, and WP installations that are not regularly updated. 
Gah! What's wrong with `file_put_contents('/tmp/errs.log', $whatever, FILE_APPEND)`? `:=)` 
Where ya went wrong is allowing dodgy code to get through code review all the way to CD `;-)` 
OP - have you reported this to Intel? If you can ask them to send your note to the dev team or the security team, they will appreciate it. 
&gt; What's the big differences? I think they were after hard data, not a personal opinion.
 &gt;Forcing any developer on a certain IDE is counter productive. If he is using vim and is good with it, let him do it. If you are not familiar with the IDE he is using, he can't be a 100% productive. There is some truth here. Everyone where I work is using (and liking) PHPstorm, but I found it utterly alien, complex, annoying and otherwise unsuitable for me. Probably because I‚Äôve been using Emacs full time for 25 years.
I should have written that more clearly. I agree, the setter should definitely be removed. I'm sure there are also better examples to convery the idea, but it's always hard to come up with a decent realistic example when I am writing blogposts. :(
What about this, when using the head() function: &lt;? function head($items) { return $items[0]; } $array = [ 'a' =&gt; 'first', 'b' =&gt; 'second', ]; $array[] = 'third'; $array[] = 'final'; var_dump(head($array)) ?&gt; it outputs: string(5) "third" 
 function chunk($items, $size) { return array_chunk($items, $size); } Is this function available on Packagist so I can use it in all of my projects?
Fuck bitbucket. Atlassian developers are morons. They don't allow me to have a single SSH in multiple accounts. Like... they expect me to generate at least X keys, for **ONE** freaking computer, if I use X accounts. The real use case here is that I have a private account, and one for my company. I have 2 laptops, a private one, and one from my company. I don't want to generate 2 ssh keys per machine, because that would break any security concept. If any of those laptops is stolen, I now have **twice the trouble**. Not to mention their confluence search is the most awful search I've ever seen. So yeah, fuck Atlassian.
[deepFlatten](https://github.com/appzcoder/30-seconds-of-php-code#deepflatten) could also be rewritten like this function deepFlatten(array $items) : array { $result = []; array_walk_recursive($items, function ($value, $key) use (&amp;$result) { $result[] = $key; }); return $result; } No, I'm not trying to be a smartass, I honestly find this easier to read.
I did wonder about this one.. WTF is wrong with writing **array\_**??
I wanted to write something of the sort of my own. I wanted to have various functions either renamed or functions that I found myself using more often than not. [Here](https://github.com/JunkyPic/arr/blob/master/src/Arr.php). I never made it into a gist mostly because I don't feel people should be using my stuff, not because I'm against open source, I mean it's on git, mostly because I feel like they're poorly written. Currently it's a class rather than independent functions, but I mean heck, I could split it. Doubt anybody will use it tho lol.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [JunkyPic/arr/.../**Arr.php** (master ‚Üí b7b1af3)](https://github.com/JunkyPic/arr/blob/b7b1af31074e7bdd1ce2db7c19b8b8a46ef02279/src/Arr.php) ---- 
Syntactic sugar I guess.
Is Upwork that bad? I'm not even joking I've never used it.
I'd say prefixing the array functions with **array\_** sugars my syntax more than arbitrary names such as **chunk** which could do anything?
Thanks /u/OverallEfficiency for the concern I'll fix it.
Have they fixed the web UI from being slow as fuck? I used GitLab a few years ago and had to make the switch to GitHub even though I had to pay up just because navigating GitLab's UI was incredibly slow.
Thanks /u/SmartAssUsername for the concern. You're always welcome to make a PR or I will update it soon :)
I've got you man, check this out: function array_chunk($items, $size) { return array_chunk($items, $size); } Now you have the function prefixed with `array_` so you know exactly what it does. ---- On a more serious note, I assume some people would still use it. Me being of them. If you'd typehint the function any decent IDE would tell you what to put in there. 
last i checked, yes, it is called, always, and the core devs claim they have no choice because this protects a shitton of badly-coded plugins out there which would be wide open to SQL injection if they removed it =/
I would but to be fair your version while a little bit longer is also more friendlier for new comers. I've rarely seen `array_walk_recursive` used, it may throw people off.
I won't be using github anymore.
Not sure I like emojis in commit messages.
The all function would be a lot simpler like this: function all($items, $func) { return count(array_filter($items, $func)) === count($items); } The any function would be better like this: function any($items, $func) { return count(array_filter($items, $func)) &gt; 0; } Then you only have to iterate over the array once, rather than twice.
That's what that button is for.
Shame I am too far away to go, but good luck with it guys. 
Better?
Yeah, that was also my concern thats why I didn't used tricky :)
Hey, don't worry here i suggest one **Free Online Learning Platform** from where you can **Learn PHP Easily** with **Hands\-On\-Experience &amp; Instant Feedback**. This platform known as **"SkillWhizz"** which is helps all **IT peoples** to become an **Industry Ready Developer**. **Resource:** [https://skillwhizz.academy](https://skillwhizz.academy/) Hope you can **learn easily &amp; practically** from "SkillWhizz". All the best.
Hey! That's definitely one of the links here mentioned that I have to spend some time on. There's a bunch of others, too - lots to learn.
Ha ha! I know it's ridiculous. I think I found that list somewhere online that said - it's free, do what you want with it. And I didn't want to go through the hassle of making my own list, so I just used it. I figured if it was important to someone they'd work through their own list. But omg! I can't believe it!
Exactly. I wanted to point that out without sounding like a jerk. 
That's what everybody says, but don't like heaps of people use WordPress? One and the other are not the same, I'm sure - just because heaps of people use it doesn't mean it's beautiful - but still at least to my limited learning I think, "Well, they must be doing something right." Then again, I have been dead wrong about a number of things.
Hey! Thank you for such a thoughtful response and for even writing those snippets of code. That was cool of you! Also, I'm very sorry for being a jerk. I think, in all honesty, I was a bit upset. My bad. I totally agree that some of the code is bonkers - and that's unacceptable. My only caveat is something I said in a different response, which was, if I sat there trying to make everything perfect according to what I thought it should be, then I'd never maybe hear what was *actually* wrong with the code. I realized the try/catch stuff was idiotic even as I was finishing (I had never used try/catch before this project, I don't think). It doesn't make sense. I need to fix it. Thank you for pointing it out. Also, I have to admit I don't understand what you wrote me about the files above root. I don't really understand file permissions, in general. These things are all above my head for now but I'm working on them. Thank you again for your help! Come at me bro? (hugs, hugs)
Yeah, I've never found anything in Confluence. It wasn't a language related fulltext issue, even simple words with no accents didn't lead to anything useful...
I think that what you're saying and what I was saying is only semantically different, but not very different at all if you look at the substance underneath. But you're right about the session IDs being typically more transient than other "cookies". 
There's no point. That particular part is really ridiculous, and all I can do is blush. That was one of the first things I worked on when I started the project and I had never used try/catch before. I knew it was important but I didn't really understand it. I probably still don't. But I think I have a slightly better grasp. My goal was to try to make something somebody could use, and learn as much as possible along the way. That mistake has to be chalked up to sheer idiocy on my part. But one more thing - thank you very much for actually looking at the code! I think that's so generous of you. 
Some of these seem pointless. The last() method is just an alias of end(), head() is just an alias of reset()... I don't think I really understand?
Just navigate to http://your_site/rlc_system/commenters/aaron.txt and see. It's a real fault. As of the permissions, they have absolutely nothing to do with the security of a web-site. Any time you mention permissions as a defence, you're fucked. 
Hi, I'm having difficulty initiating the class for this Tidal music api. Unfortunately there's no autoload file. I've required the path to Tidal.php, but $tidal = new Tidal(); results in an error of the class not being found. Any suggestions would be greatly appreciated. [https://github.com/teamreflex/TidalPHP](https://github.com/teamreflex/TidalPHP)
No.
Hi, I'm having difficulty initiating the class for this Tidal music api. Unfortunately there's no autoload file. I've required the path to Tidal.php, but $tidal = new Tidal(); results in an error of the class not being found. Any suggestions would be greatly appreciated. [https://github.com/teamreflex/TidalPHP](https://github.com/teamreflex/TidalPHP)
I think aliasing will help people to understand use of the function just in a second :) If you have any better idea please feel free to share or make PR.
Everyone has the personal preference. Okay I will use less then :)
&gt;pluck &gt;Retrieves all of the values for a given key Someone needs to tell him about array_column.
&gt;pluck &gt; &gt;Retrieves all of the values for a given key: Someone needs to tell him about array_column.
Both original and your version of any call $func for every item, even if truthy value was already encountered. This might or might not be a desired behavior, but I think it is safe to assume that $func generally should not produce side effects, and we can stop checking additional items after first truthy result. So, foreach might be a better thing here from performance POV.
Interesting, I didn't know php did iot. The article shows how to use php-gpio to turn an led on and off, as well as the whole setup. 
First, your character id's should be a simple auto\-incrementing integer. If you want a random code to use against a cookie, this is a session id and is separate from the row id. If you don't already have both, you need them.
"Scrambles" means random assignment in your case? Why wont you just randomly pick a and b for each player, and if one list is longer just reassign "surpluss" to correct table.
Someone says PHP is ugly. Your response is that it's like a natural language, and then you talk about "goti". How is your comment not about how PHP is not bad? The analogy doesn't work in any event. In the case of natural languages, learning a new one is hard, takes at least a few years, and if you're over 10 you will never be able to shake your foreign accent. Programming languages have basically nothing in common with natural languages on that front. If you know PHP today, you can switch to Node Express and be fluent in about a month. There is no reason not to use a programming language with the equivalent of a phonetic spelling system.
`function bikeshed() {` `return "I'm helping.";` `}`
You beat me to the "any" refactor. Always return early! O(n) should be the worst case complexity of an "any" implementation, not the reality of every single time you call it no matter what the input is.
You got a few ways of doing it, some that I can suggest is using a GET request so when you navigate to a page for example, you could use index.php?run=script1 and then detect this in your PHP. Or a better way is to use a POST request, where the browser will send a request using POST in order to communicate with the server side. Take a look at this example I have done for you: https://codeclippet.com/b39pdOwn
Hey, If you want to **Learn PHP Practically** from scratch i recommend **"SKillWhizz".** **"SkillWhizz"** is a **Free Online Practical Learning Platform** which is helps to become an **Industry Ready Developer**. Also SkillWhizz provide's, **Online course material** **Questions/tasks for hands\-on experience** **Instant feedback to re\-evaluate and improvise**. Hope you can **learn easily &amp; practically** from **"SkillWhizz"**. All the best.
What is `: array` on that first line? Haven't seen that PHP syntax before
https://wiki.php.net/rfc/compact
Just something out of the ol' trick box for you: function set($value) { return $value; } Use it like $foo = set('bar');
I have a "count" that is the primary key and it auto increments. Thank you!
It's a fairly common sight. Some orgs even use specific emojis in commit hooks to specify what kind of a commit it is
[Return type declarations](http://php.net/manual/ro/migration70.new-features.php#migration70.new-features.return-type-declarations) as of PHP 7.0. 
Analogy is perfect. English is as ugly as PHP. But nobody says that PHP or English are bad. Ugly != bad. As long as they make the job done, they are good, no if someone feels insulted *looking* at them :)
Perhaps this is merely vocabulary confusion. Most of the time a "user ID" is a fixed value that can always be used to identify a specific user. That value can be a simple INT in an auto_increment database column, or it could be something more complex like a hash. But in either case, once it's assigned to the user, it never changes, it is thenceforth that user's fixed identifier. So, once you create your user ID hash, does that hash always identify that user? If so, then your approach is insecure, and the approaches are not merely "semantically different." If not, then "user ID" is not the best term to use for this hash, as it creates confusion.
Is any programming language in wide use bad in your opinion? If a language gets used is that just proof that it must not be bad?
Your best bet is to check php/webserver logs on the server, there could be a number of things that can stop this from working, it would be extremely difficult to guess how is your server configuration different then your local evn.
hmm might not be GPL
Your logic is impressive. Making statements like "Humans drink water, toads drink water, so humans are toads" won't win you a lot of attention, I am afraid. 
Remember though, you might want to think about security aspects of this as well if that is important to you...
&gt; Anyone have any clue to why this is *Obviously*, nobody have. Given this code works, it's no use to go through it, and we have no means to get any extra information. You are the only person who can sort it out. [PHP error reporting basics](https://phpdelusions.net/articles/error_reporting). Make sure you have proper error reporting set for PHP and mysqli and have access to server error_log. 
Very cool, thanks.
https://imgs.xkcd.com/comics/random_number.png
Noted. 
https://i.imgur.com/DK1ckG8.png
Yes agree with this. If the point of a function is to abstract details, you don't need to add further abstractions inside the function. Standard for loop is better here. Btw instead of `call_user_func` you can simply do `$func($item)`. And the same implementation can be used for `all()` but checking for negativity instead, ie as soon as you find a false value, they can't all be true so return early. 
Me too, do you have available live streams?
I'm still a complete newbie with PHP and MySQL, can you help with what is wrong with my attempt to put data from database to an array? if ($result-&gt;num_rows &gt; 0) { while($row = $result-&gt;fetch_assoc()) { echo "ID: " .$row["id"] ; $listAll = array("","","","",""); for ($x = 0; x &lt; 4; $x++) { $listAll['$x'] = $row["p" ."$x+1"]; } } } else { echo "0 results"; }
Agree re all, it is pretty symmetrical to any. Re using call_user_func, this is just a personal preference: I want to explicitly specify that I'm call a dynamic function reference, and also if I need to search my code for such dynamic calls, I can look for "call_user_" instead of rather complex regex that would include $f(...), $o-&gt;$f(...), etc. Also, in PHP 7.1+ call_user_func($func, ...) seems to be like 50% faster than $func(...): http://php.net/manual/en/function.call-user-func.php
Both are true at once. Wordpress is coded really strangely, and uses forms that are pretty dated. Everyone and their dog uses Wordpress.
In voting phase right now.
It‚Äôs an honest question that I would like to know your answer to. 
&gt; Github you have to pay for an integrate somehow an external service Not sure what you mean by CD but presuming by CI you mean Continuous Integration, that's free on GitHub. 
Goodie. I wonder how many vulnerabilities are in that version of Yoast.
Let me try again. Your argument, as well as I can reconstruct it, is that PHP/English may be subjectively "ugly" but they "get the job done" and so are "not bad". I disagree with this on two levels. In terms of computer/programming languages, I disagree because to stop using English, I would have to leave the US and move somewhere else (which I already did for two years in Japan but I got lonely) or convince a bunch of people to change languages with me, which is basically impossible. By contrast, at this very moment when I'm not procrastinating on Reddit I am rewriting some old PHP code at work into Go. It's not especially hard, so I'm procrastinating out of boredom. So, putting up with ugly natural languages is just life. Putting up with an ugly programming language is completely different. Yes, sometimes you have a large old codebase that you don't want to throw out, but not always, and sometimes throwing out an old codebase actually is the best way to move forward. I helped replace PHP with Django at job five years ago and it went great and the results were much better than when we were stuck on PHP. Second of all, I disagree that popularity/getting things done make a language "not bad". Being bad is about how easy to use the language is, how consistent it is, how easy it is to add dependencies, how easy it is to avoid security holes, etc., etc. There are a lot of ways that a language can be good enough to get a job done but still be bad. PHP is bad because (to name only some reasons), it's inconsistent, in PHP \&lt;5 it can't decide if it wants to be Java or not, it had terrible security practices for a long time, it defaults to doing worst practices like tying URLs to file locations and you have to work hard to make it actually use MVC (at which point its one benefit, which is ease of starting, is now gone)‚Ä¶ I could go on, but that's the core of my argument.
lol no one cares about nette
Tupac cares, if don't nobody else care.
Not quite what you're asking for, but may do the job \- end your mysql (assumption, other DBs are available) query with 'ORDER BY RAND()' then split them into two groups from there. Pre\-scrambled for the processing. array\_slice() may help with that?
I'd rather be able to do this: $users = ["Tom", "Dick", "Harry"]; $userPages = $users-&gt;chunk(2);
you really are stupid arn't you?
Apparently everyone is stupid, aren‚Äôt they?
Unfortunately no but later they will publish all the talks to Youtube. 
Django is not a language. You could have replaced whatever stuff you have a liberty to call "PHP" with Symfony with no less success. So lat's agree that you personally dislike PHP and can devise an infinity number of arguments based on more or less flawed logic to defend your position. You have the full right to do so and I am in no position to argue that. 
No, Just you.
No I mean you literally spend half your time calling people stupid.
What should I do when I need to pluck an array of objects in PHP5?
that's because they are stupid ...
Off\-topic question... but how is everyone putting emojis in their commit messages? Are y'all typing out unicode bytes in your terminal???
Got it, thanks.
Using reset() in this way is going to perform a full copy of the array. I'd recommend using foreach instead. function head($items) { foreach ($items as $item) { return $item; } // return or throw }
&gt; Once you install it, you'll notice that the php binary isn't in your path That seems odd since this is done automatically when you install it via webtatic repo. I'd be interested in a bit more detail on why this is the "correct" way to do it
&gt; I think aliasing will help people to understand use of the function just in a second ... And then they run into code in the wild, and they have no idea about what's going on. Or worse, they start adding this stuff to projects so that regular people have no idea what's going on. üòâ
From a modern design principles standpoint, WordPress in fact basically does nothing right. If compared to automobiles, WordPress is like an Audi. It seems like a perfectly fine car if you're just driving it, but working on one is basically a nightmare; and if you've never designed a car before and use an Audi for your sole inspiration, you'll end up with a strange and shitty car indeed.
Article can be summed up as: Found 6,220 errors. Won't fix. &gt; Otherwise, there‚Äôs always Haskell. With all due respect if you're gonna post an article about PHP in /r/php don't be trashing the language in the post itself. We all know Wordpress sucks.
No just emoji code is enough for that. This might help you https://gitmoji.carloscuesta.me/
The reason I consider it the "correct" way to do it, is because it is the package provided and supported by the operating system you are using. I specifically have to use them because I am do work for the DoD and they don't allow us to use third party repositories for security and stability reasons.
Thanks mate :fire: :fire: :fire:
Example: CentOS/RHEL use Python 2.7 extensively and by installing Python 3.5 **instead of** Python 2.7, you can expect things to be pretty severely broken. (*I know* the binaries are python2 and python3 because of the big changes. This is just an example.) Now pertaining to PHP, SCL allows for multiple versions to be installed and operate independently. For instance, running a legacy PHP application on one VHost while running a modern, PHP7 application on another VHost. With SCL installations of PHP, you'll have completely different paths and installations that can run simultaneously (CGI mode) while the other repos like webtatic, iUS, EPEL, etc. aren't going to allow for this. I hope this helps you better understand the *why*.
Not quite: Psalm found 934 issues that I think are worth fixing, and a large chunk of those are just docblock improvements. Those can be fixed pretty easily in less than a day‚Äôs work, but I wanted to focus not on the fixes but on the process whereby those issues could be identified in the first place. And the Haskell thing is clearly a joke. 
Continuous deployment + continuous integration, and github has no CI, it just pairs easily with Travis and other 3rd party providers.
phpdelusions.net
If you didn't want your database to be handling the logic of scrambling, you could always use array_shuffle once you've gotten the data from the database. 
Code review? At the company I work at? Hah, good one! No in all seriousness it‚Äôs something we‚Äôre pushing for, but our the manager is not a developer in any sense of the word and is of the strict opinion that no-one does anything unless someone is paying for it. It also means we sometimes spot a bug before a client does but aren‚Äôt allowed to go and fix it unless they have a support agreement with us. It‚Äôs kind of embarrassing and reflects really poorly on the company in the long run. 
This would be nice. Like JavaScript.
Does it offend you so much?
... what?
This comment seems unpopular. What else do you think the button could be used for?
one possible use would be to prevent PHP Notice when calling `end()` or `reset()` on a non-variable end(explode('|', $string)); //PHP Notice: Only variables should be passed by reference last(explode('|', $string)); //no complains
You upgrade?
Yeah, of course I'm using the PHP7 but that is not the point. I did the method so no one can get confused with the php versioning and know how the thing is going on.
Updated. Thanks for the noticing :)
Updated. Thanks for the noticing :)
Checkout docker. It's the best way to run PHP nowadays. All these problems go away.
This is one of the flaws I see in Laravel. There's nothing wrong with an opinionated framework with helpers in principle but Laravel has so many helper methods and wrappers that it's basically a DSL on top of PHP.
I think this was posted already. However, this time, the title doesn't make me cringe.
debian on a centos box. ;)
if you don't need multiple versions we've been using the IUS epos with great success: https://ius.io
I went with shuffle ($array); Then I put 5 first columns to a new array and 5 after that to a second array Thanks for everyone for help!
hahaha
Very useful, thanks.
Not the platform itself, but the code and conventions do, big time. Also, everything in one table with JSON blobs. _Everything_ is a ‚Äûpost‚Äú.
I am missing the @compact() which doesn't notice, minor change for a developer who uses it also with undefined variables
Laravel has a really nice collection class that you can pull in without pulling the whole framework in (just need to `composer require illuminate/support` I think. https://laravel.com/docs/5.6/collections
You do your style, dude! Use emojis if you like, but maybe look to the other comment in this chain for inspiration on *when* and *how* to use emojis.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Not only I need to learn PHP gotchas, now I need to learn some 3rd party mapping onto these gotchas. I think if people used native language features world would be nicer. Can't see this helping, but thanks for sharing.
Meh, sounds like you need an `&lt;internet-hug&gt;` - there you go! I use and like BitBucket. I haven't bumped into the problem you have had, and indeed, I hope they fix your problem at some point. But, I expect Atlassian developers are not only not stupid, I imagine there is a fair bit of competition to work there. So, they're probably quiet smart individuals. It's worth noting that product development is _really_ hard - indeed, you probably know that very well from being a software engineer yourself. The key to product ownership is to satisfy enough of the customer base, enough of the time, in a fashion that keeps the lights on and the income stream stable. A few customers will be disappointed, some will walk away in disgust when they find their needs will not be met, and some will even shout about their poor experience on the internet. That's fair enough - if they tried to satisfy everyone, they'd be spending excessive time on things only a few people would need, and the required cash burn rate would be more likely to make them go bust. 
That's a terrible workaround. Use `array_array_chunk`
We are using the SCL to install newer versions of PHP on CentOS 7 and I was pleasantly surprised by how easy it was to manage multiple versions this way. If you wish to run PHP from SCL as an Apache module without also installing Apache from SCL, you'll need to do the following as well. cp /opt/rh/httpd24/root/etc/httpd/conf.d/rh-php71-php.conf /etc/httpd/conf.d/ cp /opt/rh/httpd24/root/etc/httpd/conf.modules.d/15-rh-php71-php.conf /etc/httpd/conf.modules.d/ ln -s /opt/rh/httpd24/root/etc/httpd/modules/librh-php71-php7.so /etc/httpd/modules/librh-php71-php7.so They really ought to have shipped with PHP 7.0 and made the PHP 5.4 users install from SCL.
Answer: No. Source: [https://benchmarksgame\-team.pages.debian.net/benchmarksgame/faster/php\-yarv.html](https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/php-yarv.html)
You mean `array_real_chunk` ?
I wish composer had a way to do this without having me edit the main composer.json file because I end up with a few lines that are only relevant to my local dev environment that I don't want to be in source control for the rest of the company. As it is right now I'm stashing my composer.json temporarily every time I want to resync my branch with the main develop branch.
Oh dear. Well, there's a BC break I wouldn't mind seeing. `:-)` 
I completely understand what you said but it's a disaster. Scenario where you can read a database state 5 writes/commits behind is just bad very bad... 
Gitlab.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This. I work with some brilliant devs from India. I think they all just get a bad name since there are so many more that are lacking the fundamentals, over complicate way too quickly, or both. 
 class JSON { public static $inputStream = 'php://input'; // this is a setting so that unit tests can provide a fake stream :) public static function getRequestData($subkey = false) { if (!$requestText = file_get_contents(static::$inputStream)) { return false; } $data = json_decode($requestText, true); return $subkey ? $data[$subkey] : $data; } then in your controller: static::prepareResponseModeJSON(['POST','PUT']); public static function prepareResponseModeJSON($methods = []) { if (static::$responseMode == 'json' &amp;&amp; in_array($_SERVER['REQUEST_METHOD'], $methods)) { $JSONData = JSON::getRequestData(); if (is_array($JSONData)) { $_REQUEST = $JSONData; } } } You should be using json_decode to convert the JSON from the input stream into a basic PHP array. Then you can just treat the data as you would normally since you're setting $_REQUEST yourself. $_REQUEST is the combination of GET and POST.
Thanks. This would work assuming that you're not getting multipart data. I am receiving multiple files AND JSON data in the same request. What I have to use is a heavily modified gist: https://gist.github.com/jas-/5c3fdc26fedd11cb9fb5 I have to split parts of the stream and put them in the appropriate variables. Since I posted this, I read quite a bit about PUT/POST difference and it seems that the mobile app (written by other company) is basically not adhering to standards and not using PUT correctly, since the URI does not specify the resource, and it's sending multipart data including files. Am I right in thinking that this is wrong, and that resource that will be created/updated should be specified in the URI??
The moment this becomes a disaster is when someone uses such database for application where this matters, I guess? But seriously (no offense nor flame here \- I just want to figure this out) \- let's compare those two methods. Page counter is obviously wrong idea anyway, since we need real transactions for that. Can you think of a scenario where locks would be better? Please, correct me if I'm wrong \- but doesn't the locking just move the synchronization issue to application level? Without locks, obsolete data can be read on frequently written document. With locks, since we don't manage all connections to database (and therefore we can't effectively queue exclusive locks ahead of shared locks, just like MongoDB does), we indeed always read latest version stored, but there are writes in other threads waiting for an exclusive lock. Aren't those the same *uncomitted* changes, just like in the solution without locks? Once a document is read, it's immediately replaced, it can even be replaced 5 times in a row (pending writes). So what's the difference?
Yeah but some of those array and string helpers are amazing and I genuinely wished PHP would have some of them (such as `array_first`).
PUT is really designed for binary streams but I think it was originally designed as a way to do FTP over HTTP as-in one file per PUT. Of course since it's binary data you can do anything you want. If the binary is part of the JSON as a child member you might be able to rip it out first then run a normal JSON Decode. If it's some random binary and then some json I'd try to cut out the binary first and then try to decode the JSON. Without knowing more about the exact format they are using it's difficult for me to suggest fixes. Generally speaking though protocols at the TCP level usually provide a Content-length so you can know 100% when a file is done in the binary stream. If they are just putting in random binary and then a bunch of JSON without providing a content-length on the initial binary they are doing it wrong and wasting lots of money making you do weird shit to find the start of the JSON. You should not need to do any regular expressions. Once you know something is raw JSON just pass it to json_decode.
You have some methods where its `function methodName($func, $items)` and some where it's `function methodName($items, $func)` I would love to see consistency in variable orders.
It can be pretty bad.
Hey; thanks a lot for the link to that site. I've never heard of it before.
It's worse. 
yep that was it. thank you!
array_column was available in 5.5 If you're using anything older than that, you have bigger fish to fry.
But does it work on Windows XP?
Sounds like a job for .git/info/exclude
Is it web scale?
Okay noted
I used this in Photoshop all the time with folder colors, but for Jetbrains' suite I use Cmd+Shift+O for everything.
I meant array_column doesn't work with an array of objects in PHP5 Did you ever try this in PHP5? array_column([ (object) ['product_id' =&gt; 'prod-100', 'name' =&gt; 'Desk'], (object) ['product_id' =&gt; 'prod-200', 'name' =&gt; 'Chair'], ], 'name');
Git is what you are looking for, Git is fast and only needs to sync the changes. You can edit the top of a file on one computer, the bottom of the file on another computer, and your co-worker can edit the middle of the same file without any conflict. Also, Atom will automatically color the filenames green/brown for you if it's working in a Git repo, so you know if they're committed to git of not.
Maybe [composer-merge-plugin] (https://github.com/wikimedia/composer-merge-plugin) will do the job.
For most of this I prefer to use https://github.com/lstrojny/functional-php
What an analogy! I'll be following the links everyone's shared with me here for better examples. Feel free to recommend anything else.
Do you think there's an opportunity there? Some newer better thing that could get a hold in the market? I think I read like 1 of 5 sites on the internet use WordPress. I imagine if you could snag some percentage of that it might be a fun and profitable endeavor. Just thinking out loud.
Hey! Hmm... So, the user ID is stored in the cookie and the ID hash is stored in the user's file. One without the other doesn't do anything. The ID does pertain to a single user. However, the ID is not an eternal identifier either. If the user signs out and signs in again they have a different ID, same for when when they change their password. For an earlier project I also had code that changed a user's ID for them if it was more than 3 days old. That way, if somebody did sneak a look at their device and go off impersonating them, they'd be locked out of their own account within 3 days (when their current ID expired). They would have to sign in (since only they would know their own password), the other ID would be unset, and they'd have a new ID. I'm not sure how well I just explained that, but it's probably a sturdier solution than the one currently in the RLC system. Then again, maybe it's just best to go with tokens. I held off on them since I'm not as familiar with them.
When I navigate to https://paaronmitchell.com/rlc/rlc_system/commenters/aaron.txt I get a 403 error Forbidden. I guess there are ways around that? I had an inkling permissions were not a reliable defense, which was why passwords and IDs were hashed. So, if an attacker gets my file, he sees a bunch of public info (my comments) and the hashes of my secure info. Now, that's definitely not as good as him having none of that. But the ID is 20 characters long, so as long as the password is strong, too, then cracking the hashes is not a very promising attack. Part of my goal was to make something that even a beginning PHP user could plug into their code and feel pretty confident about using. If the user took the time to put the secret folder above root then all the better. (That was my thinking, at least.)
Maybe try [rewriting PUT to POST before it hits PHP](https://stackoverflow.com/a/15362262/170403). Remember to use some HTTP header to tell what was the original method. 
Sounds like a decent change.
I knew about scopes, but I never took the time to set them up. With the reminder that they color all kinds of places, including tabs, I just might have to set them up in a project or two!
This blog will help you understand php framework better and get all the knowlegde how to basically use it and folows; [http://blog.ostrainer.com/2018/05/24/why\-to\-use\-framework\-in\-php/](http://blog.ostrainer.com/2018/05/24/why-to-use-framework-in-php/)
Not only will it help with structuring and finding files, it will correctly index your entire project.
This is still helpful if you have a base CENTOS box you want to base your own image on.
Is this possible in VSCode?
As an example, I have an endpoint /api/employee/personal-info. Notice that id is not specified in the URI and this is a PUT endpoint. A json and 2 files are sent in the same request on that endpoint, not just JSON. What I get is a multipart raw input stream that I have to manually decode, as PHP has no native support. So what I have to do is use regex to extract the boundary string and then split the raw input onto blocks using that boundary string. Then I need to look at each of the blocks and decide whether it's a file or data. Each block has Cobtent-disposition, data has Content-type but file blocks don't have Content-type, just content disposition which only specifies file name. I have to use regex on Cobtent-disposition to extract the file extension, then strip those from the blocks and process the data, having to construct $_FILES array manually. Same with JSON block, I have to strip the header part and what's left is JSON. I'm starting to think that multipart PUT is something that should not be done in PHP. Please correct me if I'm wrong.
Scope colours are also shown there üòâ
Not that I know of. It's tens, maybe hundreds, of these little features that make me favour an IDE above an editor.
I rarely have the file tree open. Just bound ALT+0 to open quick nav and alt-n to search files Don't forget the search if fuzzy and you can type for example R/V/h and it will know that you want to open Resources/Views/Home.blade.php
I just started using phpstan on my project and up to level 2 95% of errors were just docblock. The rest is phpstan doesn't like doctrine architecture very much ahahah. I'm looking forward to level 7. What makes wordpress wordpress is not the core, it's the trizillion of plugins and companies who maintain these third party extensions and plugins.
The colours also show up in the quick nav üòâ
It's a primitive test which sends one Content-Type header and prints the text Hello World; php5 + opcache may very well be quicker than php7 for that one unrealistic scenario.
This might be fine and even okay in hobby projects. But if you're selling that, i'd be furious as a customer. Use well established tooling. Your code might be useless in a new iteration of PHP. Symfony won't be gone tomorrow.
Yeah me too. I used to do this in Atom, where I also gave the tabs a color.
Why not just delete the vendor directory then clone out the repo in the vendor directory? No composer.json changes necessary while you're developing. Then just delete the directory and run composer up when you're done
This is a funny error, caused by a server misconfiguration (if you read it thoroughly). I don't know if there is a way around this particular issue, but surely you cannot rely on a *misconfigured* server. But anyway, if you are using not the same id in a cookie as in json, technically it should be safe enough. Though it's better not to expose a database. As a side note, you could have used like 5 times less code if used a database instead of json files. Given your goal is portability, sqlite could do. 
[https://www.copernica.com/en/blog/post/php\-and\-model\-view\-controller\-impossible](https://www.copernica.com/en/blog/post/php-and-model-view-controller-impossible)
&gt; They really ought to have shipped with PHP 7.0 and made the PHP 5.4 users install from SCL But CentOS 7 was released before even php 5.6 was released; how could they have shipped with 7?
It's not a joke, just read what MVC does. If you understand what MVC does, you know it's impossible with PHP, because of the request/response limitation. Once the view is created, there's no way of updating it from the model, nor can the view update the model. You're basically looking at a text file made pretty by your browser, not something interactive.
[Why not look at their repo?](https://github.com/php/php-gtk-src)
Maybe because the latest activity was 3 years ago?
Well there's your answer.
I don't think so. Here are two alternatives: * https://github.com/krakjoe/ui * https://github.com/gabrielrcouto/php-gui
How often will you work with files in different scopes at the same time? I only see benefits to distinguish between configuration and code.
Code coverage right now is above 80&amp;#37; :)
I'd like to interject for a moment. The IDE you refer to in the article as *PHPStorm*, and in the title of this Reddit post as *phpstorm*, is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future. 
I'd like to interject for a moment. The IDE you refer to in the article as PHPStorm, and in the title of this Reddit post as phpstorm, is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
According to [this page](https://github.com/fab2s/call_user_func/blob/master/README.md) linked from there, `call_user_func` is still slower. 