as the discussion points out, this article is pretty weak. i found this line somewhat amusing: &gt; let's say that they set $_GET['file'] to be something like '/etc/passwd'. They could have that easily obtained and possibly cracked into your account from the UNIX 'passwd' file here's my /etc/passwd: ## # User Database # # Note that this file is consulted directly only when the system is running # in single-user mode. At other times this information is provided by # Open Directory. # # This file will not be consulted for authentication unless the BSD local node # is enabled via /Applications/Utilities/Directory Utility.app # # See the DirectoryService(8) man page for additional information about # Open Directory. ## nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false root:*:0:0:System Administrator:/var/root:/bin/sh daemon:*:1:1:System Services:/var/root:/usr/bin/false _uucp:*:4:4:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico _lp:*:26:26:Printing Services:/var/spool/cups:/usr/bin/false _postfix:*:27:27:Postfix Mail Server:/var/spool/postfix:/usr/bin/false _mcxalr:*:54:54:MCX AppLaunch:/var/empty:/usr/bin/false _pcastagent:*:55:55:Podcast Producer Agent:/var/pcast/agent:/usr/bin/false _pcastserver:*:56:56:Podcast Producer Server:/var/pcast/server:/usr/bin/false _serialnumberd:*:58:58:Serial Number Daemon:/var/empty:/usr/bin/false _devdocs:*:59:59:Developer Documentation:/var/empty:/usr/bin/false _sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false _mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false _ard:*:67:67:Apple Remote Desktop:/var/empty:/usr/bin/false _www:*:70:70:World Wide Web Server:/Library/WebServer:/usr/bin/false _eppc:*:71:71:Apple Events User:/var/empty:/usr/bin/false _cvs:*:72:72:CVS Server:/var/empty:/usr/bin/false _svn:*:73:73:SVN Server:/var/empty:/usr/bin/false _mysql:*:74:74:MySQL Server:/var/empty:/usr/bin/false _sshd:*:75:75:sshd Privilege separation:/var/empty:/usr/bin/false _qtss:*:76:76:QuickTime Streaming Server:/var/empty:/usr/bin/false _cyrus:*:77:6:Cyrus Administrator:/var/imap:/usr/bin/false _mailman:*:78:78:Mailman List Server:/var/empty:/usr/bin/false _appserver:*:79:79:Application Server:/var/empty:/usr/bin/false _clamav:*:82:82:ClamAV Daemon:/var/virusmails:/usr/bin/false _amavisd:*:83:83:AMaViS Daemon:/var/virusmails:/usr/bin/false _jabber:*:84:84:Jabber XMPP Server:/var/empty:/usr/bin/false _xgridcontroller:*:85:85:Xgrid Controller:/var/xgrid/controller:/usr/bin/false _xgridagent:*:86:86:Xgrid Agent:/var/xgrid/agent:/usr/bin/false _appowner:*:87:87:Application Owner:/var/empty:/usr/bin/false _windowserver:*:88:88:WindowServer:/var/empty:/usr/bin/false _spotlight:*:89:89:Spotlight:/var/empty:/usr/bin/false _tokend:*:91:91:Token Daemon:/var/empty:/usr/bin/false _securityagent:*:92:92:SecurityAgent:/var/empty:/usr/bin/false _calendar:*:93:93:Calendar:/var/empty:/usr/bin/false _teamsserver:*:94:94:TeamsServer:/var/teamsserver:/usr/bin/false _update_sharing:*:95:-2:Update Sharing:/var/empty:/usr/bin/false _installer:*:96:-2:Installer:/var/empty:/usr/bin/false _atsserver:*:97:97:ATS Server:/var/empty:/usr/bin/false _unknown:*:99:99:Unknown User:/var/empty:/usr/bin/false Please proceed to crack into my account
It's not useful on today boxes, but it's a symbol of fucking up security. Give me your .ssh/id_rsa. /etc/shadow would do too. 
neither of those are world readable. you don't have php running as root, do you? my snarky point above was that the article was about security, but the author seems to be unaware of how passwords are stored in any modern UNIX or Linux.
here is a more accurate graph. http://www.google.com/trends?q=ubuntu%2C+vista%2C+mac
If I write procedurally and never object oriented code, is there any reason to care about Zend Framework? 
So the author has made some .NET-like wrapper functions, and created web controls instead of using Smarty templates. It's a bit ugly with the mix of PHP and XHTML/HTML. The framework brags about being thin, but unfortunately for my tastes it's a bit too thin. The data validator is a classic example of that. I think most of us seasoned guys have already built our own frameworks like this, and often a bit richer than this, which we then connect to Smarty and run with it. And if we want anything richer, then we go look for stuff on FreshMeat and SourceForge like chart generators, report generators, mailers, web commerce, CMS, forum apps, etc., and glue it to our existing work.
What was your CTR, or was it all impressions? The way I thought AdSense worked was only through clicks, not impressions, and that they just give you impressions to let you know those. So, if you had 1000 visitors, and if 1000 clicked, and received $1.50 USD, then you must have had clicks worth .0015 cents. But more than likely you had 1000 impressions and perhaps just 20% of them clicking, and the clicks were worth more. I don't have a calculator handy, but I would reason to bet that meant the clicks were worth more than a penny.
Take a look here: http://webmasters.ucdavis.edu/resources/web_security.html#php
It's pretty similar to any other language... It almost all comes down to never trusting users, any data that is generated by a user must be treated as if it's malicious. Here's a pretty good three part series on it, but almost all of his points go back to not trusting your users. The techniques shown are just different ways to accomplish that based on what data you're dealing with. http://www.ilovejackdaniels.com/php/writing-secure-php-3/ Oh and the hex thing to show PHP source doesn't exist. It just doesn't make sense. You can make a .phps file and then you'll see the full source (highlighted even), but at that point it's not executable.
Secure in what sense? Do you use $_POST[var] or $_GET[var] ? With form always use $_POST[var]. The PHP code is interpreted by the server and it cannot be seen by your users unless your SCRIPT is a plain text file. More info - [http://www.php.net/manual/en/security.php](http://www.php.net/manual/en/security.php)
POST and GET have the same security, you should use whatever suits your use case. You should use POST anytime the request has side effects (such as an order form). GET is acceptable for anything else (such as a search) and has some real advantages for those operations.
I typically use GET behind the scenes to do URL routing. mod_rewrite allows the urls to look decent and GET makes it easy to have a dispatcher handle everything and automatically load up controllers and templates. GET is usually good for pages with SELECT statements, but you want POST when dealing with INSERT, UPDATE or DELETE. Though in my scenario both are used, GET to decide what files get loaded and POST for the data said files need.
use mod_security to filter out &lt;html tags&gt;, ' and " from GET and POST. also safe_mode = On register_globals = Off display_errors = Off if you are running apache you should probably chroot httpd. 
&gt; use mod_security to filter out &lt;html tags&gt;, ' and " from GET and POST. Misguided, false sense of security. http://ha.ckers.org/xss.html Besides, some people have names like "O'Hara" or [Bobby Tables](http://xkcd.com/327/). Application should store them and display them char-by-char without getting confused and deforming data. `magic_quotes` saga should have been a lesson that crippling input only causes problems for developers, not hackers. Rest sounds ok. I'll add: * Use prepared statements (`PDO::prepare`) for all queries that have any variable input. * Use templating engine for all output and make sure it doesn't require you to remember about escaping (because you'll certainly forget it or miss some case). [PHPTAL](http://phptal.sf.net) is closest to bulletproof that I know of. * use `json_encode()` for outputting variables in JS (`addslashes` is not enough to construct safe JS string). * Think twice before putting any varialbes in any file paths (for `inclue`s, `readfile`, `fopen` or anything related). There are soooo many horrible exploits there with `NUL` chars, directory traversal, file wrappers, etc. Being paranoid is neccessary here. If you have old application you need to secure, slap Web Application Firewall in front of it. It won't really secure it, but will warn you when script kiddies start tearing it apart.
Interesting. Always nice to see my favourite xkcd toon too.
Read up on community sites. All the information is already out there, you just need to find it. http://devzone.zend.com/article/3467-PHP-Community-on-Twitter Ilia Alshanetsky: http://ilia.ws Chris Shiflett: http://shiflett.org Zak Greant: http://zak.greant.com Marcus Boerger: http://www.marcus-boerger.de Sebastian Bergmann: http://sebastian-bergmann.de John Coggeshall: http://www.coggeshall.org Derick Rethans: http://www.derickrethans.nl Stefan Priebsch: http://inside.e-novative.de Eli White: http://eliw.com Jay Pipes: http://jpipes.com Lukas Smith: http://pooteeweet.org Stoyan Stefanov: http://www.phpied.com David Sklar: http://www.sklar.com Jeff griffiths: http://www.openkomodo.com/blogs/jeffg 
This is a very cold and lonely place.
huh? php has a future... ok someone had to say it
&gt; "the get_magic_quotes_gpc() function will no longer be available" As a general rule, anytime your function name has the word "magic" in it, you might want to consider another approach. Then again, this is PHP we're talking about... 
&gt; also safe_mode = On Nah, safe_mode is stupid and is even deprecated come PHP 6. It cripples all file handling functions for next to no reason other than to close holes that bad developers have created. Why should my environment be crippled because of that? It shouldn't. I also don't understand why so many hosts have it turned on, if their web server is set up properly then you can easily sandbox the user that runs PHP. I mean christ, it even disables set_time_limit. Where's the reasoning behind that?
So, does declaring a namespace mean that you cannot access functions in the global namespace?
&gt;Features that will be removed from the PHP version include: &gt; &gt;`magic_quotes` &gt; &gt;`register_globals` &gt; &gt;`register_long_arrays` &gt; &gt;`safe_mode` Yes. Good.
No. From [the readme][1]: &gt; 4) inside namespace, calls to unqualified functions that are not defined in current namespace are resolved at run-time. The call to function foo() inside namespace (A::B) first tries to find and call function from current namespace A::B::foo() and if it doesn't exist PHP tries to call internal function foo(). Note that using foo() inside namespace you can call only internal PHP functions, however using ::foo() you are able to call any function from the global namespace. [1]: http://cvs.php.net/viewvc.cgi/php-src/README.namespaces?view=markup
I hear that CodeIgniter is working on a 2.0 that will use jQuery. Also, there's a huge uptick right now of interest in CodeIgniter, so they must be on to something good here. In fact, I now see more projects with interest in CI than in ZF (Zend Framework).
No.
Yes.
When you become a PHP freelancer, and every day you get up out of bed is a competition between you and guys who about 4 months ago were begging for food in the street, you need to optimize. And so you learn the tricks of the trade that help you speed up your work output, such as Blueprint CSS, jQuery, various scaffolding generators, and, if not an MVC framework (which I despise), then a really great set of toolbox classes that help you get common stuff done that doesn't come by default in PHP. Say, I'm on the lookout for non-MVC frameworks for PHP that basically give someone a great set of toolbox classes. If anyone knows of some of these, please reply to this comment. Thanks.
I've been learning ZF. Not my cup of tea. Anyone out there know of some great non-MVC frameworks for PHP that basically just give me a great set of toolbox classes to accomplish common tasks? 
PEAR
When you learn Smarty, after a couple months you realize that you can do the same thing with PHP. In Smarty, you have your business logic pages, you create your Smarty variables, and you load your Smarty template page that will automatically insert those variables. Okay, duh. You can do the same thing in PHP. You can have your business logic pages, you create your PHP variables (and can even call them something special so it's clear these are meant for the presentation layer), then require_once() your XHTML page that's got parameterized PHP inside with &lt;?= $sVar ?&gt;. Sure, your XHTML could get hairy in your template pages, but then again so could your Smarty. When you begin to think about this, there are lots of advantages of going the PHP route over Smarty. PHP *is already* a templating language.
Mostly to keep the designers out of PHP. It makes for a lot prettier template code too, which is a plus even if you don't have a design team working in the templates. Update: another good reason is you can turn on auto-escaping which can really save your ass. Doubly useful when used with designers who are probably more likely to let out unescaped content in the first place. 
i agree with jonknee. it also make it easy to build an MVC app in PHP. its not necessary, but convenient. I also think Smarty's tags are less intrusive than PHP's. YMMV. 
Chalk another one up for keeping designers out of code. I find explaining a {section} is much easier than explaining a 'for' loop. 90% of designers I've worked with have no coding experience outside the 'source' tab in dreamweaver (and barely any then either!) -- so introducing them to smarty is a much less daunting task than introducing them to PHP.
The &lt;?= shorthand isn't available on all systems and is discouraged.
No, it doesn't. Its annoyingly hard to get escaping right everyehere - this exposes sites to XSS attacks. You have to repeat conditions on opening *and* closing tag when tag is optional. Syntax is ugly. Smarty sucks too. http://phptal.sf.net
I keep hearing that, but because of convenience, I highly doubt that most web hosting providers will disable that. Even if in PHP6 it is proposed to turn that off, most web hosting providers will be flipping that back on again through the INI file. I mean, it just makes good business sense to include it and not block those users out. I mean, the alternative has far more characters out there, such as: &lt;?php echo $sVar; ?&gt; vs. &lt;?= $sVar ?&gt;
Yes, but what if you the only thing you allowed in your PHP templates was: &lt;?= $sVar ?&gt; And no loops, if/then's, and no functions? Wouldn't it be very clean then, and easily explainable to the guys using Dreamweaver? I would think so. I mean, even in Smarty, once a page start to go down the path of loops, if/thens, and functions, it's already breaking the rule of view versus model/controller.
How would you limit it? If you allow PHP you allow everything. And FWIW the &lt;?= syntax is evil and should be avoided. It conflicts with XML and as such isn't activated on a lot of servers. Templates still need logic, even in MVC.
&gt; MVT? Model View Template? Are you fucking stupid???? Yes! You are! A view IS a template (if you're doing it right). It's MVC, for Model View Controller (which should technically be MCV). Model View Template is what Django uses.
PEAR looks abandoned. Look up "credit" for validating credit card numbers. Now this sort of class needs to be updated at least every year or it gets out of date. But it appears the last update to it hasn't occurred since 2005.
How do you not use loops in templates? Comments, blogs, private messages ... there are a ton of things that need to be looped, but also have some HTML and or CSS applied to them (thus the designers need access). IMHO -- as stated above -- Smarty is the wall that separates designers from code and if that's it's only advantage it has I think it's still worth it.
Credit card numbers are validated using the Luhn algorithm which hasn't changed since 1954. Once it's functional and tested it shouldn't ever have to change. The only time it would is if a new card launched with a different number of digits.
you should be doing `&lt;?= htmlspecialchars($sVar);?&gt;` most of the time anyway (there's no `magic_entities` in PHP ...yet? :)
That's to be done in the app logic through a class among other things like XSS and SQL Injection fixes too, or URL encoding when sending down a URL.
Do the loops and if/then logic as simplified XHTML inside the app logic, then send it down to the template in a single var that gets pushed to the screen.
I've gotten away from partial templates and views. I want something that my designer can pull entirely back into Dreamweaver, make a fix, and push it right back out again with my &lt;?= $sVar ?&gt; stuff still intact. 
That's a terrible idea. If you need to change the HTML you should have to do so in the template. Breaking it up in both the controller and template defeats the purpose of having either.
What if the tiny bit of HTML in the app logic page is simplistic, such as a TABLE or DIV or series of DIVs with id and class points at each level? It's not perfect, but at least the templates don't look like hell. Take for instance in Smarty. I have some Smarty templates that look like hell right now because I had several if/then and loops in there. It quickly got out of hand.
Still a terrible idea. All HTML should be in the template. Display logic belongs there anyways.
In MVC/Model2, details of output encoding belong to the templates (view), not the app logic (controller/model). Note that `&amp;amp;` is not part of the URL and is not related to its validity. It's just requiret to represent URL in HTML unambiguously (say, you want query string arguments with names like `nbsp` or `reg`). 
i tried webgrind this morning, but if i turn on profiling (running on the same server, different vhost), i get all of my webgrind instances in as well. its kind of silly to profile my profiler ;) any hints? 
Probably the easiest way is to trigger profiling only when you need it, rather than switching to be "always on" - i.e. from http://xdebug.org/docs/profiler xdebug.profiler_enable = 0 xdebug.profiler_enable_trigger = 1 Now it will only profile when a variable called "XDEBUG\_PROFILE" exists in the GET or POST parameters e.g. just add ?XDEBUG\_PROFILE to the URL when you want profiling 
ah, yeah, good call (slipped my mind). thanks for the tip!
you could consider Drupal to be a framework *itself*... the API for drupal is pretty awesome... 
its not exactly "framework" per se, more of a cms with a powerful API - drupal. http://www.drupal.org 
+1 Yeah, the Smarty templates can *still* look like junk when not groomed properly.
One problem I found on ZF was that the framework can guide you to put your stuff in a view, but nothing guides you from letting your controller code get way out of hand, where you finally realize that much of the controller code you've been doing should be stuck in helpers or model logic. Also, nothing stops you from making one long a-- controller, like extending index for eons, rather than implementing controllers for each piece of logic. Zend_Layout -- used that. Yep, it works. Too bad the rest of ZF is what I would call beta and that Zend Forms is a piece of trash, rather limited, with its head stuck in the 1990's. Nowadays, with these new web 2.0 apps, if you're not using jQuery in your forms to dress them up, then your forms look like they were built in the 1990's. Thanks for calling me a moron. That really made my day. You seem pretty hard to work with too. We would probably clash and I would be secretly trying to get you either kicked off the contract or fired, yourself.
PHPTal is very nice. I'm using it for a largish project I'm doing that the moment. It keeps the templates nice and neat, and the i18n features are nice. However it would be nice if the integration with PHP was a little tighter. I sometimes find myself writing weird constructs to get something to work the way I want. Other times I'll just give up and directly access the $ctx object from PHP :)
I take the following approach. * Accept all data from the user. Assume any data you have is tainted. * Apply any pre-conditions you need (e.g. check that session ID is valid, POST parameters are present, etc.) * When sending data to your database escape it at the last moment using appropriate functions (or better yet, use a library like PDO that will do that for you). * When writing to the page escape all data using htmlspecialchars or strip_tags. Don't try and sanitize some data in one layers and other data in another layers (e.g mixing variables together with names like $safePost vs. $_POST). You'll end up confusing yourself. Just assume all data is tainted. You need to realise that you can't approach security in an ad-hoc fashion. You need to consider it from the beginning. Having only one script vulnerable to SQL injection is not much better than having your entire site vlnerable. Here's a summary of XSS, DB and server security for PHP developers: http://joshduck.com/blog/2008/04/05/securing-your-php-code-xss/
My perspective's from a developers side of things, so my opinion will be pretty skewed that way. Agile to me is about closing the gap between the business user and the tech users. When business users have an idea, they could spend a great deal of time building specs for it. But the reality is that they often only have an idea of what they really want most of the time. And without input from someone who will actually be implementing the code, they may not even know what to ask for, or what is and is not possible. It could be something like your example where they want a payments screen. Granted, that description falls short, but it's a starting point. With that request you could create a mock-up using a graphics program, or (preferably) some sort of interface that although doesn't look pretty or work. As soon as you have something basic, give it to them right away to look at. There's almost no chance that this will be what they want. You need to give it to them knowing that. If you spend a bare minimum amount of time getting it going, you'll not be as likely to hold on to what you've worked on. Rails scaffolding is a good example on how to get some forms built quickly with minimal effort. Once the business user has something they can play with, then they can start to make changes to the design, add missing pieces etc. By working with them during the process of building the project, you'll not spend a lot of time working on code that isn't what they want. You won't have the business users wondering what's happening, because they'll be a part of the process, and therefore just as informed as you are about progress. The finished product will be either exactly what the user wants, or close enough that you won't have to scrap the whole feature. As for stand up scrums. I agree. They don't work (imho). It was even worse trying to make them work when there was multiple offices in the company. As for the post-it notes on white board. That worked, but not as well as a decent ticketing system. We do have a daily (sit down) meeting with a single representative from each current project that gives a summary of what's going on. We keep it pretty technical free, and when things start going that way, we stop it and discuss after the meeting, when it's only 2 or 3 people instead of 10 or so. The most important piece I think to take from the agile process is to take what works for you and your company, and ditch the rest. And continue to re-evaluate what is and isn't working.
I'm still at University, yet to enter the development world. I've just completed a unit on Software Engineering in which Agile was briefly discussed. It was stated that Agile doesn't scale well to large projects - to what extent have people found this to be true?
Gaaah, you're a completely fucked up individual. You probably NEVER get projects completed. You're probably also much younger than me. I'm in my late 40's and I can call bullshit when I see it. This is bullshit.
I'm not much for buzzwords and the 'hot new development methodologies', but some agile principles make a lot of sense to me and I basically follow these rules: * DRY - Don't Repeat Yourself (except in tests) * YAGNI - You Aint Gonna Need It. Don't build something until you actually need it, and stop with the simplest implementation that serves your current needs. * Unit Testing - If you want an agile codebase that still works after you refactor, you need tests. See Refactoring by Fowler. I make heavy use of Mocks/Stubs because they give my tests longer life. When you only have one Class Under Test at a time, you are less likely to need to throw out that test as your codebase changes. * Iterative Development - Rather than having a lot of design up front, design a minimal prototype, build it, test it, refine it and repeat. Rapid prototyping means you get feedback sooner and your final product will match more closely with the needs of your client.
At this writing I'm a "recreational programmer", a shop of one. Whatever I write is because there is no open-source, free software that does what I want it to. After a long career in software development, I've created a development process based on some methods acquired from former work environments and some agile techniques. The synthesis of the various methods have given me a good process and related development environment that works for me. The primary agile methods that I use are based on the idea that as a shop of one anything more than a short script as a single file that fits on a screen or two in an editor window becomes a project. Each project is subdivided into features to implement is an "as needed" or prioritized to follow main core features. Each feature is developed, tested, integrated, "released" in sequence dictated by the subdivided feature list. With each feature complete, I refactor, review and revise the plan as necessary before picking up the next feature. Basically, it is stepwise refinement. Other important things to consider are that just because it is recreational programming and that I am a shop of one does not mean that a rigorous process is unnecessary. I use Joel Spolsky's "12 Steps" http://www.joelonsoftware.com/articles/fog0000000043.html with Flyspray as the bug tracker and Git as source control. I consider a bug tracker and source control the minimum tool set required for any controllable process. To keep each project from becoming my life's work, I minimize the "paperwork" for each project depending on project size. Thinking about this topic more, I say that there are a lot of things to my development process and environment that I haven't said here that are important to any software development effort, but articulating them here would take a long time. The above summary hits the major points. 
Use templating when you need to give (limited) possibility of styling the output and layout to people who you don't trust (visitors customizing their pages, etc), and full-featured php scripting would be insecure. Apart from that, there's generally no need to employ external templating solutions, and clean pure-PHP output templates would be more clear and maintainable. 
I know I am a bit late in responding, but why are you after a non MVC framework? CodeIgniter lets you use whatever approach you want, MVC or not.
you're just getting hung up on terms. Just because they have confusing names for the components doesn't mean it isn't MVC.
I've been using PHP for over a year now, but I'm self-taught, so I'm sure there are things that I could be doing more efficiently. I've always just integrated PHP in with my HTML. I've written a few functions for things that I use a lot, in accordance with the "DRY" rule (don't repeat yourself). But I've never really found a use for classes. When and how do you use classes in your projects?
Everywhere! PHP classes make a great substitution for namespaces for versions of PHP that lack them (aka all of them). Throwing public static methods in a class can help keep things organized and keep functions with similar characteristics in the same place. Anywhere you're using an associative array. I prefer classes to associative arrays because the structure is pre-defined, and PHP will provide warnings if fields are accessed when before being set. I have an application which uses the MVC design pattern to serve dynamic pages. All of the controllers are classes and the page logic is stored in methods. The views (Smarty Templates) are stored outside of the class. Because of the limited resources and quick turn around that a PHP request may require, I've found a lot of use for singletons in PHP. Database managers, web service clients, cache managers all can typically be singletons. Classes are a great way to abstract ORM as well. *edit* that last sentence was poorly worded. what i meant to say was: Classes are useful in the implementation of ORM. This could be done procedurally with arrays and functions, an OO solution is much more elegant.
Use classes all the time. check out cakephp.org 
Everyone is going to chime in with their preferred framework (I've worked with many of them), but I am truly passionate about codeigniter. Their documentation alone is a tremendous benefit, and it also allows you to code in your own style, following MVC or your own methods. Check out their tutorials, you can make something in a matter of minutes. But by using a framework you can see and follow along with applicable uses for classes. 
Then people ar going to reply with their recommendations of non-PHP frameworks.
Those people will be ignored since this is the PHP subreddit. Edit: I was wrong, they found us and they are attacking.
Check out the PDO and the SDO. You can make prototypes quickly. Also check out Akelos. Not bad for ...
I don't use object-oriented programming. I do it old schools and make things as fast and tight as possible. Then again, I'm not paid by the hour. I am paid to get things done. 
Whenever you have a set of functions and variables that, when bundled together, serve the purpose of "doing" something easily identified. Classes will help enforce the separation between the external interactions of other pieces of code and the internal legwork, giving you a public-facing interface that generally shouldn't change much, even if the inner workings of the class are redone entirely. DB abstraction is a fine example of one of the most common places a class is used. Considering the variables and functions involved in DB connections, queries, record retrieval and traversal, etc. it becomes very easy to identify a core set of things that you would want to "do" with a DB. By separating the specific functions that depend on a certain type of DB from the actions themselves, you can easily swap out the DB without changing much (if any) of the stuff calling the abstraction layer. As many are quick to point out, classes are just for you, and not your end user. Users will never notice or even detect the use of classes versus global-level functions and variables, so mostly it has the purpose of helping you structure and organize your code in a way that makes it easier to manage and improve.
Only after you understand what OOP involves. Encapsulation, polymorphism, inheritance etc are all very useful tools once you understand them. On the other hand if all you do is write one pagers with very little logic there is no point. And as for frameworks - cakephp.org
you also get type hinting with objects, which doesn't work with arrays. use arrays for what their for: data collections. use classes for what they are for: abstraction. i've found that most of the array methods that would make a difference for objects have analagous object methods. feel free to contradict.
There's nothing wrong with procedural code. Placing static functions in a class help overcome one of PHP's biggest weaknesses: global namespace polution. Its overcoming a limitation of the language using the provided tools. you're right, my choice of words "classes are a great way to abstract ORM" was very poorly worded. the OP asked where do you use classes, my point was: for ORM. I was using abstract as a verb, not an adjective. While I would typically agree with your analysis on singletons, and we all love to bash PHP developers, PHP and C++ are typically used in very different applications. PHP applications are extremely shortly lived and (should) have tight memory and performance characteristics. Just because singleton is overused doesn't mean that there are no valid uses for it. I would actually be surprised if *most* PHP developers knew what singletons were. &gt; because they don't come from real development like c++ or another ECMA standardized OOP language. There is no [ECMA standard](http://www.ecma-international.org/publications/standards/Standard.htm) for C++ (I wouldn't count C++/CLI, or other MS abominations). Even if there was, ECMA is hardly the authority on OOP. The organization has no vested interest in programing paradigms. So unless you're a .NET developer, or a Ada, Eiffel, or JavaScript programmer, you're not programming in an ECMA standardized OO language either ;)
 class Woman { // See, they are objects. } 
Why downmodded? 
Again, someone downmodded for claiming cakephp is good. 
I lawled at that.
&gt; I'm not sure I understand how type hinting relates to associative arrays. You can't (easily) require an array which is passed to your function as a parameter to have certain keys. You can, however, require an object to be of a certain type. I'm finding "magical associative arrays" which get passed around everywhere to be rather annoying when reading someone elses code.
I wrote a CMS that uses classes for each "module". It inherits from an abstract base class with base functionality for each module. I then have a static class to manage the modules and globals. Aside from the cms, I have my own library of code that uses classes to replace namespaces. Since I use this code with other peoples code, I don't want conflicts with function names. I generalyl use arrays to pass collections of data, unless this data has functions specific to it, then I'll have it as a class that implements an array Interface. I come from a primarily C# background, and was surprized at how similar php's class/interface structure is to it. Felt right at home. Only shortcomming is the fact that if you have an abstract base class with an abstract static function. There is no way to call that function from within the class.
i think the big one is [get\_object\_vars](http://us2.php.net/get_object_vars) which allows you to enumerate through an objects public members is useful. functions like `array_map`, `array_filter`, and their ilk still work with arrays of objects. and if you want the dynamism of associative arrays, you can dynamically add fields to PHP classes (though I don't believe there is a way to dynamically add methods). `property_exists` (or even `isset`) works like `array_key_exists`. The other array functions are nice for collections and dictionaries. I generally find classes are more self documenting then dictionaries, but dictionaries have their place as well. (I would have preferred, however, that PHP separated arrays and dictionaries into separate primitive types.) *edit* apparently you can't have a backticked code section inside of a link, or wrap a link in a code section with markdown.
i could be wrong, but it appears that Java/C++/C# trolls are out and about because they don't think PHP is a proper OO language. I would agree with them, but neither are Java and C++, so their hypocrisy is just ruining the discussion. On top of that, the OP's questions was, where do you use classes, not what is OO programming. Apparently the trolls don't know that you can have either without the other.
Personally, I use them everywhere. With tools like MVC and Unit Testing OOP has some real advantages, and for large projects it makes things much more maintainable. That said, if you are just doing some quickie one-page forms or whatnot, then go procedural. If that project grows, then probably best to refactor to classes, otherwise you are likely to end up with spaghetti-code.
Not yet. `$woman = new Woman();` now it's an object.
&gt; Only shortcomming is the fact that if you have an abstract base class with an abstract static function. There is no way to call that function from within the class. That's a major pain. PHP 6 is introducing (reusing) the `static` keyword, which allows you to do what you are talking about.
I wanted named arguements but they decided against it for php6 as it's not simple or clean in their eyes. This is ridiculous because the only way to achieve this right now is passing assoc arrays to functions/methods, which is ugly and sloppy.
I use some OOP libraries, but I program procedurally in PHP. (Although, I'm new to OOP, so that may be why.)
There is no appreciable performance difference between using OO and procedural, especially when you start taking into consideration how long database queries take. Some of the most useful aspects of OOP have to do with maintenance. Creating centralized code that is the only segment of code responsible for a specific task allows code to be updated more easily and bugs fixed more quickly. In the end you will probably find that OOP allows you to get stuff done faster, especially after initial development.
There is a whole discussion going about this that you can read at http://aspn.activestate.com/ASPN/Mail/Message/php-dev/3640369
I actually really love doing this when mixing php and html. It makes everything a little more readable.
Very nice. The language has gotten a lot better and recent years and looks to be continuing the trend.
Wow! I writing a bit of code last night and had a bit of a "rrrrr why the fuck doesn't this shitty language have closures?!" moment, and I wake up to this? Hurray!
There is a little write up about this at http://phpimpact.wordpress.com/2008/07/19/using-annotations-in-php/
The shortcoming you mention is called late static binding, and it's being fixed in PHP 5.3
Wow. Piece by piece php becomes Java. 
for printing each line, wouldn't it be easier to use the [file](http://us3.php.net/manual/en/function.file.php) function? `&lt;?php` `$lines = file('script.php');` `foreach ($lines as $line) {` ` echo $line;` `}` `?&gt;`
$women-&gt;clothed = false; hehehe
It's improving in this area. What doesn't work for you?
I'm interested in the stats if you can recall where you found this information of speed improvements of using classes over procedural methods. You see, I prefer to stick reusable code into classes with static methods, thus I call everything without object instantiation like `Web::ReadCookie('test')`. I also don't use $this and let the web object reference itself by doing `Web::_private_method_goes_here` inside a public or private method that needs self-reference. However, when I was on a project recently, the senior dev complained and called my strategy "stupid". He said that I should have just named it `web_read_cookie()` and stuck it in a file as an ordinary function/procedure, then included it. To me, his strategy fails, right? I mean, I thought that doing includes of functions loads those into the global namespace, occupying RAM. But loading classes consumes less RAM until those class methods are called. Don't know if I'm right or not, however. It just seemed also that doing things the procedural way could lead to a lot of abuse by other developers. I mean, what if someone wants to call it `Web_&lt;function name&gt;` instead of `web_&lt;function name&gt;`? Or what if someone gets a wild hair and calls it `webs_&lt;function name&gt;`? By creating a class file, we ensure that everything related to that class will be stuck in there and there won't be this kind of abuse during development. However, if I could get your stats that you say you found, then I could say, "See? Not only does it make more sense to use static method OOP over procedures -- it's faster too!"
People *learn* PHP?
They should.. *sigh*
Thank you Captain Obvious, you have now broadened the range of people on reddit who will understand simple sarcasm!
I've been messing around with zend framework. It's much better than the spaghetti code I used to do.
It's not very different from standard DOM methods, and `foreach($xpath-&gt;query('//div[@class="bla"]') as $node)` isn't that much more verbose. 
Cake is good. It's just a *wee bit* bloated.
Line 3 on that first sample is incorrect. It should be: foreach ($html-&gt;find('a') as $element) // note the closing parenthesis
I've noticed that the PHP subreddit has been slow. Just doing my part to help make it active. As a side note, I hope someone finds this class useful. It was built by me after hours of frustration with an old system I was working on where all the data validation was messy and re written each time needed. This class probably saved me a good month of development time. If anyone has suggestions I would really love to hear them.
I'm confused. If they are on 5.2 (5.3 alpha) why is it news that 4.4.9 is released? Do they not release them in order these days? *SIGH - My work has 4.2 or so installed, and has NO plans to upgrade. This makes my OOP style of programing much more difficult, not to mention any XML work. 
The proggit subreddit has the story, along with 100 comments of bullshit PHP bashing.
You've answered your own question. They kept updating PHP 4 branch because many hosts (including your company) failed to upgrade to version 5. With version 6 on its way it's reasonable to drop upgrading PHP 4 anyway. I can see a storm of posts coming: "PHP team is responsible for hosts not upgrading to version 5 because of failing to keep backwards compatibility". That's another story, though.
+1 on your criticism of bullshit PHP bashing.
Actually, it's neat that F/OSS developers work in this manner, still supporting backports while working on the new versions. Don't you wish Microsoft would do that? I mean, take for instance the glaring bug in IE6 where you can't place a DIV on top of a SELECT without the SELECT field wanting to be the topmost object. This is fixed in IE7. But wouldn't it be great if Microsoft created a backport patch for IE6 with stuff they discovered on IE7? Yeah, but then people might be less inclined (aka "forced") to want to upgrade, so the greedy fuckers in Redmond don't do that and consider such a move as beneath them. This is one more reason why Microsoft SUCKS.
Zend Framework can be used as you describe. Just dont use the controllers / bootstrap. Grab the libraries you want and just include them in your pages. Easy 
The expected response after reading that and the 2 linked not-bugs: &gt; Thank you for taking the time to write to us, but this is not bullshit. Please double-check the documentation available at http://www.php.net/manual/ and the instructions on how to report bullshit at http://bugs.php.net/how-to-report.php 
The libraries suck. Check out the Cookie library and the lousy docs on that. Check out the lack of an encryption library. The forms library is antiquated and makes your forms look like they were built in the 1990's, where not even CSS styling can help you. And the Zend Library is actually so thin in my opinion, with the regular PHP library and code snippet stuff on the web so rich, that you might as well stick with those.
It's not a bug. The documentation clearly states that the earliest valid date is in 1901. From the docs: "Note: The valid range of a timestamp is typically from Fri, 13 Dec 1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT" Therefor would return a negative timestamp (since it's before the epoch). Expected behavior is not a bug. Note, it also depends on platform.
What happens on other platforms? If it isn't a bug should it not always return the same number?
So you think date() returning November 30, -0001 is okay?
The date is not before the epoch, it is invalid. There is no year zero.
More weirdness: var_dump(strtotime("00-01-01")); int(946681200) Correct, January 1st 2000. var_dump(strtotime("0000-01-01")); bool(false) Correct, no year zero. var_dump(strtotime("00-00-00")); int(943916400) Correct (if that's what they wanted), November 30th 1999. var_dump(strtotime("0000-00-00")); int(943916400) WTF? It is even visible where the bug is: if you specify zeroth month, PHP returns the last month of the previous year; and if you specify zeroth day, PHP returns the last day of the previous month. Not sure if that's what it should do, but anyway that code branch doesn't have the same behavior WRT the year as the branch that works with normal dates.
I guess it depends on what you what you want to use it for. I recently used it for a multilingual website and I found the following library classes perfect for the job Zend_Currency Zend_Date Zend_Locale &gt;&gt; check out the Cookie library and the lousy &gt;&gt; docs on that. Check out the lack of an &gt;&gt; encryption library yea I'm with you - very poor 
A few questions. 1. Where are they? 2. Is it this hard to hire for other languages, or is it notoriously hard to find good PHP developers? I am trying to hire a new PHP developer for my web development business. I've hired people that have shown excellent sites, have even done okay in smaller jobs for my company, but when I advance them to a medium sized job, it's like they've entered a foreign world. I have posted the job on the typical sites, but I get flooded with applicants that turn out to be sub-par or from other countries. I've had too many bad experiences with non-English speaking developers to consider them anymore. Where are you guys hiding? note: I am not targeting the PHP language, I am a PHP developer myself. When I see a developer doing things like relying solely on magic quotes being turned on to prevent SQL injection on a client's site, I begin to question their credentials. EDIT: I should clarify. What my company does is write forms, customize e-commerce shopping carts, install and edit blogging software. build dynamic but not complicated sites, and such. None of these things are truly advanced, so I don't really need a $50k/year developer (which is probably what many might consider 'good'). Our target market are the small to medium-sized local businesses that want to create or expand their online presence. I should probably have titled the post 'where are all of the half-decent PHP developers', since I can't even find that. 
Many good developers simply don't publish their code. Oh and personal experience: I've hired from Argentina, and Spain. Both programmers were bi-lingual even if English wasn't their first language. It takes about 4-6 weeks to break in a new developer, especially one whose previous work experience is different from what your site is using. So don't worry if they need a little training in the beginning.... as long as they're smart, they'll become a good developer under your mentorship. Edit: I've also hired and fired a Canadian who only spoke english. He claimed to be a PHP developer, but really was more of a web-designer than anything else. 
Thanks for the reply. I've dealt with quite a few that claimed to be a PHP developer, then turn out to be better with design. 4-6 weeks seems like a long time for a developer to come up to par. If you don't mind sharing, where do you place your advertisements, and which locations seems to be the most effective?
Kirupa.com, many good PHP guys hang out there.
I placed mine on Sitepoint, and the webpage for project I was working on. The Sitepoint responses all seemed to come from people with scripts claiming expertise in everythign from PHP to C to Haskel to Project Management. I didn't hire them. The other load of responses came from companies trying to outsource. I didn't agree to that either. In the end, I was picky and required telephone interviews before I hired anyone. I also required them to show me some of their old code and complete a test case. That quickly weeded out a lot of people before I hired. The guys I hired were good but not perfect. One had come from a C background before PHP, and was far more comfortable writing procedural code than OO. That's where the 4-6 weeks comes in. You need that much time to train and find where a person best fits in with a team. 
Most of the good PHP developers I know have a case of expertise syndrome, and already have good jobs. The problem with PHP is that everyone and their mothers claim to know it. There's a lot of PHP developers out there, but there's few skilled ones. You need to be really competitive to snag the good developers, ie big salaries, advantages, paid relocation if they have to, all of that. The good thing about being a skilled developer (which I humbly assume to be) is that you can hunt a job solely based on those criterias. My best advice is to offer them a competitive reason to work for you, and a good ol' challenge.
That's pure bullshit. Most hang at forums.devnetwork.net. It's the one that comes up highest in search when you type in "php forum".
Because your site comes up first in a Google search, his site is "pure bullshit"? Get off your high horse, there can be more than one place that good developers hang out at.
*raises hand* Right here! I don't like to really say this, but I think I'm a good, no great PHP developer. Recently at the company I work for, we've been in a development crisis. I'm the last php developer actively working on the many projects we've had and so far I've been able to keep up with the greatly increased load. I will admit though, there is a serious lack of good php developers. Most of the ones I have seen or worked with simply don't "get it". Some other can't write valid html, which scares me that they can't learn such a simple standard. Of course their code looks just as bad as their html. I've considered getting a job with another company, but I love the company I work for now. I have the most flexible hours you can ask for, I work out of my house, and the end products are being used by millions of people. I don't think I could handle working for a company that treats developers as code writing slaves.
I like Kirupa, but there's also a lot of PHP noobs there. 
Oh Please! Have you even visited the link he suggested and compared it to other PHP forums out there? It's pathetic!
I love coding in php and think I am fairly good at it - however it has just so worked out that I get paid to write ColdFusion, Java and C# apps more often. When it is my choice to develop something I will start with php, but usually something that has already been coded has been done in another language. I can say the same for mysql; I love it - but SQLServer and Oracle are what seems to be deployed.
Let us know when you learn about SEO and internet marketing, we'll be here waiting in the dark, unpopular places.
They are out there. They're just not applying to the crappy $15/hour jobs posted on Craigslist, but they're out there. I'm not sure if your question is rhetorical or begging for a geographical answer. If it's the latter, then I really can't give an answer. I live in NYC and I know from anecdotal evidence and experience that good developers of any kind are quite hard to find here. I started working as a consultant in 2005 and I've been quite happy every since. I charge a hefty hourly fee for my services and find that a lot of the other really good developers out there do the same thing. Why? Because it's more flexible than the 40 hour grind and we know that demand for our services is outstripping the supply so why would we take a dull 40 hour a week job for less pay? So far I've only been tempted by job offers from one company, and the reason was two-fold. First, they were offering great wages. And second, it was one of the few times where I felt like the CTO actually knew more about development then I did.
PHP is a language that is easy to be below average at. I am a web developer who finds that you can do a lot of decent sized projects without really becoming a better programmer.
Problem with PHP is it's so ubiquitous that most people applying either have no grasp on programming itself or designers who think that because they can follow a Wordpress template tutorial they can develop PHP applications.
Instead of hiring for a *PHP-programmer*, maybe you should hire a *programmer* and then let her work with PHP. I recently applied for a position as Python programmer, even though I'm mostly proficient with PHP. I don't have much experience with Python, but frankly I don't think that would matter much. I can pick up a new languages fairly quick - as can any good programmer - it's learning to program, and knowledge of the domain that takes time. In your case, domain probably means web-applications. Of course, if you hire people on a freelance basis, you don't have the luxury to invest time in training them; You need an expert from day one. In that case, I think your problem is that most people with those skills already have a fulltime job, and thus aren't freelancing, or they run their own business.
In addition to that, make sure that *magic-quotes* are off. Lots of people still have it on, even though it has been deprecated for a while and is scheduled for removing in php6.
A lot of web application security boils down to one rule; Whenever you embed a string into some code, that is being evaluated in some other context, make sure to escape it. For example, it's common practise to create SQL-queries in PHP, using string-concatenation. If you aren't careful to escape variables in this process, you are vulnerable to SQL-injections. Another common use-case, is embedding strings in HTML code (Eg. echo'ing variables). If you don't escape variables here, you make yourself prone to XSS. The fallacy of magic-quotes and the like, is that they try to "sanitise" data, when there is no such thing as dirty or clean data. If you simply escape data properly each time you embed it in a string, you're safe.
&gt;I don't really need a $50k/year developer... If you're offering less than $50k/year it's no surprise you can't find people!
Tell Batman I said hi.
We are all old and tired of coding, so we are looking for management positions.
I think it's more than that. A lot of the really good PHP developers are interested in writing `$crappy_webapp` for your company. The probably know several languages and would be much happier hacking in Python than PHP. The primary reason I'm still hacking on PHP at my current job is that I my replacement isn't a good enough programmer yet and I don't want to leave the people at my job helpless.
Here is a directory of all ZCEs by location: http://www.zend.com/en/yellow-pages
Good coders only like to work on challenging projects with problems to be solved, not grudge work projects that just need to get done.
Good PHP developers often work unrelated jobs because firms offer $15/hour for developing web sites in PHP. I have a couple of serious projects done in PHP. I'm also a ZCE. However when it came to finding a decent-paying job I went for a senior technical writer position because the PHP jobs I inquired about locally didn't really pay enough to live comfortably on.
Ever since people started criticizing his voice, he doesn't talk much. But I'll let him know.
Nice site, except for the seriously annoying implementation. Images are huge and resized in the browser, making them ugly and slow loading even on my 20 Mbit connection, and javascript is used for navigation, breaking the back-button, as well as bookmarking and other browser-features.
I had a bit of trouble locating a link to the actual site of the open source php projects. 
Dont like the ajax paging? I love it. So easy to go through the entire gallery. Just open projects in new tabs and you can cycle through the projects ridiculously fast. Another tip, try using left / right arrow keys on your keyboard. They can be used to cycle pages. But if it really bothers you, I can go ahead and turn off as a user preference. It's really only a matter of the ajax=true parameter is set.
&gt; Just open projects in new tabs and you can cycle through the projects ridiculously fast. If the page didn't load so darned slow, it would be fast enough without javascript trickery. Not including huge images would be a good start. As it is now, I don't even know if the next page is loading, when I click a link. Anyway, it's not as much the practical issues as it is the principle of it. It's arrogant to think that you can provide a better navigation, than my browser can.
I had no idea what this was about, then I read this: http://interfacelab.com/metadataattributes-in-php/ and now it makes sense...
Nice site, would be good to have an area where you could recruit people to help solve problems in my GPL project. Freelance PHP coders who are happy to help out open source projects.
here: http://www.nabble.com/Zend-Framework-Community-f16154.html
An object is data + functions that act on that data. It makes sense to keep the two together. So if you have data (e.g. a user) and functions (log in, log out, is admin) you put the two together into a class.
&lt;?php SELECT n.title, n.body, n.created FROM node n WHERE n.uid = $uid LIMIT 0, 10; ?&gt; Erm, no. Close, but no cookie.
Probably they have some documentation macro for PHP code which adds the &lt;?php ?&gt; tags itself, which breaks down when you've got PHP fragments like, in this case, the contents of a string.
Interesting to hear what he had to say about Frameworks. I haven't got to the point in PHP coding that I use them, but I hear very mixed reports about most of them. CodeIgnitor is one that consistently seems to get mentioned though as a good one to pick up...
&gt; During our various migration projects, I have regularly encountered code that uses this annoying pattern. Such constructs are not yet explicitly handled by our type inference algorithm and so we end up with Java variables of java.lang.Object type. While I mostly agree with the main point of the article, it's hardly a good argument, that the code isn't easily ported to Java?!?
HTTP error 500 on the first file tried.
Do you know what will be included in the new PHP 5.3?
Python
Namespaces, lambdas and closures, a new import mechanism ("use Foo::Bar"), class constants, late static binding, a new PHP-native MySQL library and a new E_DEPRECATED error level. Most of this can be gleamed from www.php.net without even leaving the front page.
class constants came in 5.0
wait? a new mysql lib? i just finished switching to mysqli :| the lambda functions are cool though
A replacement for libmysql, not for the mysql(i) extensions. Details: http://forge.mysql.com/wiki/PHP_MYSQLND
whew. had me sweating for a bit.
What is this mad obsession with python coders to attack php at every turn? php and python both have their ups and downs, live with it.
So adorable.
I take it you need a PHP developer? Try Sitepoint, Craigslist, and Gumtree, simultaneously. Place your need there -- don't just look.
I've had excellent results with rentacoder. 
I was a PHP developer for years, I'm not your average condescending Python geek. I've built large CMS systems and blogs with PHP. Now that I use Python, I absolutely hate using PHP. Most of us aren't know-it-alls, we just found a better way to do things.
What do you need?
http://www.no-spec.com/ speaks for itself 
I too have created large systems with PHP.. (phpneoform.com) it's more than 60,000 lines of non repetitive code. I've been learning python for about 6 months now, I think it's cool and I like that I don't have to worry about references or memory, but the truth is, Python is a cgi language and php is a web programming language. PHP is specialized and only focuses on web whereas python does everything. I prefer using a specialized tool for the job. That said, it's possibly in the future I'll be using python, but that will definitely not be before v3.
That's what specialized frameworks are for, like Django. I can use my little functions and classes in Django and then turn around and use the same code for cross platform applications with PyQt. I just find that it opens so many other doors and I feel that there should not be specialized languages for certain uses. The homogeneous-ness of python only seems right.
But django is a framework, I like using my own toolbox, not someone else's.
&gt; I was a PHP developer for years, I'm not your average condescending Python geek What kind of argument is that?
http://www.nexen.net/elephpant.php
Why are we all getting downmodded? Maybe we all need some clarification here?
Unless you fabricated all the tools, your still using somebodies tools. Oh and Dewalt probably makes better cordless drills than you.
A framework is different. It really doesn't get more high level than a framework. I like libraries, but one when I can grab small portions, not be forced to use the whole thing. had Django not included stuff like user management and focused only on making python ready for web, then i'd be on board, but they've turned it into a zend framework competitor for some reason.
You can chose to not use the user framework, you know that right? I'm not saying you have to use Django by any means, there are more lightweight frameworks out there. The reason Django has turning into a Zend competitor is because there is a need for it. If people can use it, whats wrong with it? As for libraries, that's basically the whole premise around python. There are TONS of libraries to handle all the little things you might want to do. You can use them on their own, or use them in a framework situation like Django if you want. I'm not trying to troll you, but it's turning out that way. Python has matured and it is better at this point in my eyes, you may feel different, but that's your opinion. 
Yes. This is an ElePHPant.
Thanks!
PHP Developer Best Practices: switch to Python. :)
http://images.google.com/images?q=feed+troll
It's just a joke. ;-)
One problem with that approach that I can see straight away, is that the DOM driving-code is written to match a specific template structure. Being able to replace the template with something structured *very* differently, and without having to change the driving PHP, is one of the big advantages of having a templating system. In other words: the binding between the PHP and the template is a little too tight for my liking, though I am sure there are ways of getting around it, perhaps by generating XML in the first layer, and transforming it to XHTML (or something). I'm sure it will find its niche and be successful. Any system that does not have XHTML pages chopped in half using header.tpl and footer.tpl is a step above Smarty IMO.
several years ago, I realized that PHP\_SELF is rarely what I wanted. I am generally interested in the local path to the script itself, which is always available in `__FILE__`. PHP\_SELF fails if you're using mod_rewrite, so `$_SERVER['REQUEST_URI']` is typically the only safe way to determine what the client requested. Whether using that or PHP\_SELF, either way, you'll probably want to HTML/XML or URL encode the variable before displaying it back to the user. That's not just PHP_SELF, that's anything that comes from any source that you don't directly control (or trust). *edit:* forgot that markdown uses \_ for italics
`echo filter_var(…)` is wrong approach. String is not dangerous because it contains some characters. String is dangerous, because you're not outputting these characters with required encoding. `echo htmlspecialchars(…)` protects against this type of XSS and doesn't destroy any data. 
a few years ago i looked into the Zend framework, and it reminded me of some convoluted Java framework where every class is so abstract you forget what you were trying to do in the first place. For a compiled language that can work (though Java class library is overkill, imho), because you have an initial startup cost to load all of those objects and libraries, but you only execute the code related to your request once you've started up. This can be (and is) very fast and efficient. PHP requires that startup cost during every request. Plugins like APC help to circumvent that, but when its all said and done, when the request is initiated, its tabula rasa, and when the request is finished, everything is torn down again. Any objects you want to cache have to be serialized and unserialized between page requests. APC helps, but without a mechanism to communicate with other servers in a cluster. I've felt that a lot of the PEAR classes/libraries are similar to the Zend framework. The have a lot of great functionality, but their performance is typically not the greatest.
Yeah, it's slow. But you can buy a quad core, dual processor server with 10 gig of ram for under a grand. The framework makes coding easier.
Fantastic presentation. Plenty of tricks that are really lesser know, but still very scary.
&gt; replacing objects with arrays when possible makes things a little better, the most performance friendly approach involves appending strings. WAT
Frameworks make me hurl. Most bloat.
I'd also strongly object against the use of sanitizing functions. There is very rarely a need to try to scribble the "useful" bits out of input instead of presenting the error message. If "1t5" is entered in number field, it's much more reasonable to complain about the input, not try to silently (!) change it to 1 or 15, or something.
It's true: everything a developer needs is generally *just there*. No other web language I've used has every worked first time without me having to download libraries and tools, or configure paths and servers, or read pages of documentation just to work out how to install an application.
I didn't realize that until reading this. It really does everything and then some that you would need for any average website. And Installing extensions through pecl is even easier.
&gt; Google any question you can imagine and you come up with a million answers because the community is huge. That's a biggie. On the odd occasion when I have had to put some VBScript/ASP stuff together, finding practical help on the web is painful. I've never worked out why, because it is just as easy to put help up for other platforms than PHP on the Internet, but it seems that 90% of any help available *is* just for PHP.
True and that help is duplicated. It seems everyone someone passes a milestone in PHP, they publish a tutorial about what they've learned. With a language like Lisp, I feel I'd have to lurk in a mailing list or IRC room to get any help. I did that with Smalltalk---but I'd already fallen in love with the langauge, and decided to drink the kool-aid deeply. 
Interesting point. It seems that the same pattern happens with HTML/CSS and Javascript. There may be a combination of factors that drive this; One of them being that there are a lot of people who have no formal education and for whom it is the first experience with programming.
I like PHP, but hate what people do with it. This article has a good point or two, but some very bad points and examples. Never trust user input is the best part of this article. ####PHP_SELF I'll agree with most of this except for the filtering part. As pointed out by prnl, htmlspecialchars is a much better alternative. ####Email Header Injection I don't work with email at all, so I can't really say too much on this subject. The author needs to test his examples though. The string $email_to doesn't even have quotes around it. ####Including files There's no excuse for including a file with user data in the name, ever. Use a switch or if block. Also, his example &gt;`if(strpos($_GET['filename', '..')` Wouldn't work because he's missing a "]" and a ")", and because if strpos returned 0 the statement would equate to false. A working line would be &gt;`if (strpos($_GET['filename'], '..') !== false)` But this still doesn't fix anything if filename is a url, or doesn't use .. to traverse the directory structure. ####Error Reporting Instead of returning nothing and leaving the user scratching their head, return a custom error with sensitive information stripped out using the set\_error\_handler function. Edit: Hooray for fixing markdown, and hooray for not proofreading.
Whew! The sleepy-blue theme for that site has the ugliest broken rendering in Firefox that I've seen in a while. Maybe he should apply some of that fine PHP skill he brags about to fixing the CSS for that dingleberry. 
Looks just fine here in FF3. And how would PHP skills be used in fixing CSS..?
I'm sure it's not just because cakephp is "good" but more that cake, like other frameworks just train people to cut corners. Why? Frameworks have their limits, then you start writing your own functions to compliment whatever framework you choose, and eventually you have your own framework running alongside a framework from elsewhere. The times I've looked around for PHP code for any number of things and ended up writing it by myself far surpasses the number of times I've found code online of any use (even in frameworks such as cake). Coding something by hand leads you to continually improve your own work, and when you next need something you have the knowledge and experience to make it happen. For frameworks with their own learning curve you may as well invest some time and learn something for yourself instead of relying on someone else to write your code for you. Experience leads you to develop faster, gives you a wealth of your own code that can be easily read and adapted for future projects, using someone else's code doesn't, especially when you're not adapting it, but merely including a few classes and relying on them to do your job. 
woah! 2 months late!
oops! My bad.
Well nice comment anyways. In my experience, since a client's needs varies incredibly, i find using a sturdy framework with great community support (like cakephp or Joomla) gets the job done better than my lame-ass attempts at creating my own CMS/Framework. However, if you have a team at hand, creating your own code is better in the long run.
Agreed. Needs from client to client vary, I've had jobs where a community supported CMS did the job, but others where the CMS started off as a good idea, but then rapidly became tired as the client outgrew the CMS and I started from scratch. (Personally I hate how massive nearly every CMS/framework is, most of which is 30-40 lines of license details at the top of every file, along with inconsistent code formatting, and incredibly overzealous commenting) Writing from scratch has it's benefits in the long run, but sucks if you're either a) On a fixed price contract or b) Working on more than one project at once. The benefits more than make up for it though, since the code is purpose built it's (generally) more secure, better tailored for the target environment, and easier to change when those all too frequent design change requests come in.
The author didn't make the theme, which isn't broken BTW.
I think I've seen this before...on thedailywtf.com.
It's crazy overengineering. In PHP 5.3: $spec = function(Person $p) {return $p-&gt;id &gt;= 1 &amp;&amp; $p-&gt;age &lt; 35 &amp;&amp; $p-&gt;last_name == "Johnson";} if ($spec($someperson)) {…} 
I'm not sufficiently qualified to be sure. But it certainly seemed to me that this approach just makes the code horrendously complex for anyone who has to come in and maintain it. As you say, simple if-thens, even if you get an ugly block of them, should do the job. Unless there's some huge performance advantage I'm missing? 
Ok, that's cool. But their [homepage](http://www.projectzero.org/) reminds me of [Duh Corp](http://www.duhcorp.com/). I mean, seriously: &gt;We're building an agile development environment leveraging scripting runtimes such as Groovy and PHP, and optimized for producing REST-style services, integration, mash-ups, and rich Web interfaces. What does it even mean?
It means: whooooooooo! Look - coool! Or something like that. It could do with a paragraph for each term in that sentance though, to explain it. Or even, a picture. "We are building a development environment that is quick and easy to develop in, and that supports scripting languages people are already familiar with, such as PHP and 'Groovy'. The environment will be ideal for integrating systems, pulling together information from disparate systems and producing modern web interfaces (with all that cool AJAX stuff). Web services are top of the agenda, and use an architecture known as REST, which is far tool complicated to explain here."
I'd rather see PHP on parrot, imagine using CPAN from PHP --- ooooh. Is there a port of Perl that'll work on the jvm?
Caucho Quercus allows you to do that already in opensource environment. Project Zero is IBM-project, not open source.
PHP In Action is the best book I've read however it would be helpful to read a general PHP book first. PHP In Action however introduces some very sound programming techniques. I would in fact recommend it to anybody in any language who is interested in moving their OOP skills from good to great. 
[php.net](http://php.net) is THE book. This is one of the best programming references and guides ever.
This is no comparison... Lisp is a beast. Just because something isn't "popular" doesn't mean much. There are plenty of languages like SmallTalk, OCaml, Haskell, etc. that exist in the background yet are fundamentally better languages than the mainstream languages that overshadow them. A lot of it has to do with learning curves as well as an appearance that they are designed for University CompSci freaks who are producing high level math and science application. I know in the case of LISP it is certainly capable of more as well as the rest of them I named. 
From the sounds of it, you don't already know procedural PHP, so I would recommend you learn that first, then OOP. I don't think there is one single book that will cover all you need to know. Your first best reference is the [PHP.net manual](http://us2.php.net/manual/en/). Here are a few books I have read and recommend. For Procedural PHP: * [Learning PHP 5](http://www.amazon.com/Learning-PHP-5-David-Sklar/dp/0596005601/ref=pd_bbs_6?ie=UTF8&amp;s=books&amp;qid=1222962728&amp;sr=8-6) * [Beginning PHP and MySQL: From Novice to Professional, Third Edition](http://www.amazon.com/Beginning-PHP-MySQL-Novice-Professional/dp/1590598628/ref=pd_bbs_3?ie=UTF8&amp;s=books&amp;qid=1222962728&amp;sr=8-3) For OOPHP: * [PHP Objects, Patterns, and Practice, Second Edition](http://www.amazon.com/PHP-Objects-Patterns-Practice-Second/dp/1590599098/ref=pd_bbs_9?ie=UTF8&amp;s=books&amp;qid=1222962728&amp;sr=8-9) * [Object-Oriented PHP: Concepts, Techniques, and Code](http://www.amazon.com/Object-Oriented-PHP-Concepts-Techniques-Code/dp/1593270771/ref=sr_1_38?ie=UTF8&amp;s=books&amp;qid=1222962916&amp;sr=8-38) I also suggest you get the [PHP Cookbook](http://www.amazon.com/Cookbook-Cookbooks-OReilly-Adam-Trachtenberg/dp/0596101015/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1222963220&amp;sr=8-1) as it has several great examples that take it beyond being just a paid clone of the official PHP.net manual and there are many good books on PHP security. More than what anyone can say is a good book, I would say go to a book store and read Chapters 2 and 3 (Chapter 1 is almost always a history of PHP) of a few books and see which you think fit your learning method best.
The new edition of [PHP and MySQL Web Development](http://www.amazon.com/PHP-MySQL-Development-Developers-Library/dp/0672329166/) is due out in a few days. There can't be many PHP 5.2 books around.
"Becoming a Kick-ass PHP ninja" (yahaay!) *vs* "Tips for Becoming a Better PHP Coder" (zzzzZZZZ)
One of these: http://ftp.build.bg/Books_and_Help/Books/_programming/
Funny, when I first read about this technique and bitwise comparison, I just assumed that all programmers used these methods to save prefs and the like.
http://docs.php.net
I know people that do OOP but don't use the MVC framework, I highly recommend using it. If you aren't aware of what it is, it is Model-View-Controller, and I think some of the books listed below discuss it (also Wikipedia has a nice article on it). 
I'm on chapter 5 or so of that book. I can already code OOP, but reading this shows me how bad my code is and how much I can improve. Great book, highly recommended, at least so far. (All my code is for myself for learning at the moment, so don't think I was hired and did bad code.)
i wrote this for a game im working on. an open protocol for clients to talk to my server
literally, but mainly for looking up a function. whats an editor with php intellisense?
leet do. i found this out when i was first messing with the half life engine. a lost ninja
learn procedural, then learn OOP. no book will teach you PHP. it'll teach you the basics, but the rest is up to you to tinker with and figure out. there are MANY coding styles, and MANY ways to accomplish the same thing. do what works for you.
What OS?
does it matter. does eclipse have php binding?
Perhaps Komodo Edit and Komodo IDE will do the trick.
dling now thxbye
The way I learned the OOP stuff was to mess around with Zend Framework.
In the section about protecting against Cross-Site Request Forgeries (CSRF attacks) the article suggests using POST for any pages that process something. This isn't enough, because someone could easily convince you to visit a webpage that uses javascript to post a form. One solution is to have a code on every form that is unique to the visitor - such as a hash of their IP address. [This article](http://www.codinghorror.com/blog/archives/001171.html) sums the problem up nicely. 
uh, down-modded why? It isn't like I expressed a controversial opinion or something. 
Hellz yeah, "PHP3 Frequently Asked Questions" and "PHP3 Manual"! That should about do it.
So essentially, don't trust user input. I think this goes with every language out there. On a side note, I think that serving file downloads should be id based and checked against a database. This allows you to set permissions on a per file bases, and removed the worry about someone trying to view a file they shouldn't.
Yes, and it's so much fun having to edit them by hand!
I like it, but your code is vulnerable to SQL-injection. In this piece: &gt; $w = "WHERE `".$path[1]."` = '".$arguments[0]."'"; you should really '[escape](http://php.net/mysql_real_escape_string)' the variables. I don't know about the rest of the code, but I suspect [this PHP reddit article](http://www.reddit.com/r/PHP/comments/74v5q/seven_habits_for_writing_secure_php_applications/) might help you grasp basic PHP security.
I've used the Zend IDE (the pre-Ecplise version) for a while. It has a stack of problems, *but* it's intellisense is really good. It will pick up all the inbuilt functions, but also reads your PHPDoc comments, so you can add `@returns MyObject` annotations and it will understand those. If you type `$myobj-&gt;getSomething()-&gt;getSomethingElse()-&gt;...` then you'll be prompted with all possible methods and members. It's commercial, but if you are working in an IDE all day then it's worth paying for one that saves you time.
I was going to say that's a bad idea, but you are right in some respects. I've seen lots of people rewrite core functions over and over (and also done this myself). Reading over the function list doesn't really take that long, and could save you much time more in the long run.
I use them occasionally but I've found a few people who've been tripped up by them; they're not exactly intuitive. If you are not aware of bitwise operations then they're a complete mystery. I've never been in a situation where I've needed to store multiple values in a single byte.
Sure, but "documents/mydoc/foo.doc" could also be an ID, and does not necessarily mirror the physical file structure.
I constantly ask myself, how can I impose arbitrary limits on myself, make maintenance and debugging more difficult and over engineer even the simplest of things like boolean fields!
There really is no "BEST" book to pick up. [php.net](http://php.net) is the first place you should start along with [PHPDeveloper.org](http://phpdeveloper.org) to keep an eye on community programming articles, etc. You can read up in the PHP manual on [OOP in PHP5](http://php.net/oop). The best thing I can recommend to keep aware when doing PHP5 'right' is scope properly (public, private, protected), use the SPL whenever possible (e.g. the [DirectoryIterator](http://www.jellyandcustard.com/2006/05/18/using-directoryiterator-to-list-files-in-php/)), use [PDO](http://php.net/PDO) or any other [good ORM](http://www.doctrine-project.org/). If you want Real World Examples, the Zend Framework really takes advantage of PHP5's new object model. If you insist on a book, maybe try [Pro PHP: Patterns, Frameworks, Testing, and More](http://www.amazon.com/Pro-PHP-Patterns-Frameworks-Testing/dp/1590598199/) to get your feet wet. My only problem is while the author of that book does a good job introducing SPL, he loves to turn his books into advertisements for the Zend Framework...
try and exploit that right now?. you cant. look at the code.
Like I said, I honestly think that book will step any oop programmers game up. I would suggest looking at Manning Press' whole catalog. They have an impressive set of books. I'm waiting for the Algorithms of the Intelligent Web to be finalized... sounds quite interesting. 
BN actually has a PHP6 book on the shelf here. 
We are sorry, but GwtPHP is not yet available to public.
theorem: security and PHP are orhogonal. proof: empirical.
By orthogonal, you mean they don't conflict with each other and you can have the maximum of each? There are some minor tradeoffs, but other than that I agree.
I don't see *any* mention of how it handles stale servers. Have fun when a user changes something, and finds it's mysteriously been undone on the next request, and then redone the request after that, because the servers aren't all in sync. At Newzbin, we maintain a session counter to checkpoint the database at critical modification points; this basically means incrementing a number on the master, and saving the number in the user's session. Next request, our SQL code ensures that the server we're running queries on has replicated to at least that value before using it for that user. Critical queries that always need to be consistant are sent to the master only; obviously that would include things like loading session data to get at said counter. You can't really just send all reads to the slaves and expect everything to Just Work. We also dispatch different queries to different servers to improve caching effeciency, which gets quite important when your database is many times the size of the memory you can reasonably fit in one system.
I'm all for helping spread the world as long as the product is actually available to check out and use... which it is not, in this case.
blog spam much? http://www.gwtphp.com/
Probably because you used MVC in a specific form. MVC is a pattern, that has many implementations. Apart from that, it *is* in fact quite controversial. The concept has been misinterpreted to such a degree, that it has lost most meaning.
PHP has an extraordinary community. Use it. Pick a forum, and start asking (well founded) questions, as you learn. Nothing beats getting things explained.
I'm not quite sure what you asking for, but it sounds like a job for regular expressions.
Yeah, you are right. I think he is trying to extract a URL from a string.
Regexp ftw. Match anything like this: whitespace + http:// + somethinghere (the url) + whitespace
That's what I'm trying to do, yes.
&lt;?php $text = "Hello, http://www.google.com"; $new = preg_replace("/(http:\/\/[^\s]+)/", "&lt;a href=\"$1\"&gt;$1&lt;/a&gt;", $test); print $new; /* will display $text with link to http://google.com/... */ ?&gt;
Thank you. :)
You can try something like this: define('REGEX_URL','/http\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(\/\S*)?/'); $input = "Hello http://google.com/some/directory.htm?foo=bar&amp;baz=123 Good bye"; if(preg_match(REGEX_URL, $input, $url)) { echo "&lt;a href=\"{$url[0]}\"&gt;{$url[0]}&lt;/a&gt;"; } else { echo "&lt;p&gt;No Match Found&lt;/p&gt;"; } There might be better regular expressions out there for this. I just did a really quick search to find one that would work. Note that the preg_match returns (basically) true or false if it found a match, and the actual url is stored in $url, which is an array with one element. Grrr Markdown put the &lt; and &gt; around the test URL, those shouldn't be there.
Well your regex is going to depend on the context of where the string is, what you are trying to extract it from, and how much of the URL you want.
Wouldn't then http://&lt;script&gt;alert('hello');&lt;/script&gt; create an XSS? You need to do match first, then get the URL value, then do htmlspecialchars to escape things, and only after that form a link. Maybe you should also do urlencode for href value.
Good point I was trying to point in the general direction with a snippet. Also, since the user could possibly be trusted (we aren't given a lot of data here) it could be acceptable.
It's irrelevant to the problem. You just need to "neutralize" input with `htmlspecialchars()`.
I apologize for not giving enough information, but I figured shameless advertising is frowned upon. I'll still be a little vague, but here's what I was trying to accomplish: I want the user to submit some string of content. If I can find a URL in their submitted string, I wanted to "extract" it and make a tinyurl for it. Here's the final outcome: http://sirlame.com/post/1907 I haven't tried it with javascript yet, though. Shouldn't tinyurl protect against that?
are fucking serious? consider switching to the sales department
Here's my final solution: I can make tinyurls from any input. preg_match_all('`((?:http)://\S+[[:alnum:]]/?)`si',$content,$out); $i = 0; while($i &lt;= count($out)) { $convert = $out['0'][$i]; $tinyopen = fopen("http://tinyurl.com/api-create.php?url=$convert",'r'); $tinyurl = fread($tinyopen,9001); fclose($tinyopen); if($tinyurl != "Error") $tinystring = "&lt;a href=\"$tinyurl\" rel=\"nofollow\"&gt;$tinyurl&lt;/a&gt;"; $content = str_replace($convert, $tinystring, $content); unset($tinystring); unset($tinyurl); unset($convert); $i++; } edit: please note that reddit formatting removed the backticks, and that there should be a backtick in front of and behind the preg match identifier field. http://sirlame.com/tinyurl.phps
That's a poor regex. I won't match "http://www.spain.info/" but it will match things like the period in "I like http://google.com/." I made one for my [markup library](https://launchpad.net/remark) that is much more robust. It will work for both of those cases. The code is from `php/remark/transform.php` in the [trunk](http://bazaar.launchpad.net/~trick/remark/trunk/files)) $SCHEMES = array('http', 'https', 'ftp', 'mailto', 'news', 'gopher', 'nntp', 'telnet', 'wais', 'prospero', 'aim', 'webcal'); // Note: fragment id is uchar | reserved, see rfc 1738 page 19 // %% for % because of string formating // puncuation = ? , ; . : ! // if punctuation is at the end, then don't include it $URL_FORMAT = '~(?&lt;!\w)((?:'.implode('|', $SCHEMES).'):' # protocol + : . '/*(?!/)(?:' # get any starting /'s . '[\w$\+\*@&amp;=\-/]' # reserved | unreserved . '|%%[a-fA-F0-9]{2}' # escape . '|[\?\.:\(\),;!\'](?!(?:\s|$))' # punctuation . '|(?:(?&lt;=[^/:]{2})#)' # fragment id . '){2,}' # at least two characters in the main url part . ')~'; then use it later as: preg_match($URL_FORMAT, $text, $matches, PREG_SPLIT_DELIM_CAPTURE); 
Yea I expected there to be a much better regular expression out there. I just found it somewhere on Google within about two minutes. Now that you remind me I also meant to modify it so that it could handle longer letter TLDs. It looks like yours is a much more complete solution though.
First language? BASIC This is my path (and worked for me pretty well): BASIC (C64) -&gt; GFA Basic (Amiga) -&gt; Turbo Pascal -&gt; AMOS (Amiga) -&gt; C -&gt; Tcl -&gt; Java -&gt; C++ -&gt; VB -&gt; PHP -&gt; Jolt -&gt; Pepsi -&gt; Python -&gt; OCaml -(future)-&gt; Scheme -&gt; Prolog I first learned simple things like print, input in BASIC, which allowed me to do very simple programs that worked. Later I learned about gosub command, which taught me structural programming. GFA offered much more instructions, and had procedures and functions. Functions were especially interesting because they were more like mathematical functions (similar (but less powerful) than in OCaml). Turbo Pascal didn't bring anything new to the table (for me), and AMOS was first language that I used which made all graphic, music programming extremely easy. Once I reached limits of GFA and AMOS I started exploring systems calls. Using C libraries from BASIC was much harder than from C, so once I started learning C the pointers were very natural and obvious thing. Maybe the key of learning how to program well is to start with a very restrictive and limited language and trying to squeeze as much as you can from it.
I'm not sure what you mean about using it in specific form, but, yes, I am aware of it being an architecture pattern. Saying it is controversial either shows your age, or your lack of formal education. I only have 3 years professional experience with php, but as soon to be graduate in computer science I can tell you quite authoritatively that there is no controversy, at least in the professional world (of programmers) or in the academic world, as they pretty much teach it par for course. Now if you mean "It is controversial" in a sense that it is in your own head, I'll give you that. Like a silly creationist that strongly feels evolution is still "just a theory" there is no arguing with your type. 
&gt; Now if you mean "It is controversial" in a sense that it is in your own head, I'll give you that. Like a silly creationist that strongly feels evolution is still "just a theory" there is no arguing with your type. What?
This blog is great...for me to poop on
The way this person uses variables confuses me.
smart
Here you go: [Get Links With DOM](http://www.phpro.org/examples/Get-Links-With-DOM.html) This looks MUCH more efficient than regexing.
&gt; I chose to ignore IE since few PHP developers will miss it. Nice. Seeing as how I develop for my clients and users, and not for my own gratification, I'll choose to ignore this project.
Yeah, you found an oddity in PHP. Congratulations.
I'm not trying to hate, I use PHP every day. I do believe it is important, however, that people are aware of these behaviors.
no, you cant. unless you have full root. you are at the mercy of your admins
This is a good method, but it breaks if the html is malformed.
Update multiple mysql *rows* (or *records*), not 'fields'.
&gt; PHP’s implementation has a small flaw, though. Sometimes you may want to have an optional parameter which requires a specific class or interface, but you can’t use type hinting as there is no applicable “none” type that would be allowed with the hint. If you pass a null, you will get an error that the parameter is not of the correct type. Not if you define a default value of `null`. function myfunc(MyClass $param = null) { var_dump($param); } myfunc(new MyClass()); myfunc(null); myfunc();
That seems overly complicated. I've got Fink, and `./configure &amp;&amp; make` seemed to work for me. The only trick was setting `/sw` prefix for MySQL, etc.
Get a load of the Ts&amp;Cs! In a word: Draconian. No thanks. 
I am a die hard codeigniter fan and this comparison is excellent if you consider the ease of use and flexibility codeigniter offers. A tad slower than Yii, but the documentation, community base, and flexibility more than make up for that.
&gt; You will grant The Web Freaks an irrevocable, exclusive, perpetual, world-wide, royalty free license to use the content you post. This means you are not allowed to, without the written consent of an administrator, to publish the tutorials elsewhere. How the hell does it benefit us give them an EXCLUSIVE licence?
I'm appaled by the poor performance of ZF. 
I too love how close CI comes to Yii. I use CI both personally and professionally and love it. I wonder though, is Yii php 5 only? The company I work for uses php 4.6, which is pretty much the reason we use CodeIgniter. 
Very, very useful!
Yeah, the performance of ZF is surprisingly poor. It is also interesting to see that when APC is enabled ZF got even lower RPS number. 
Very nice!
Alright, that's pretty damned cool.
I'll try to simulate a StringBuilder in PHP. This is just a fairly simple example on how to create a StringBuilder.
Hey, sweet! Straight to the point. Now I get how I can actually put my years of PHP know-how into making real OS based apps. Thanks.
PHP developers who don't use a debugger are failing in so many ways. This project deserves so much love. I recommend getting zend framework, setting up a project (e.g a blog + MySQL etc) then step through every line of code to see how it works. Your debugger becomes an invaluable teaching tool.
ZF is great to use, but sloooooooow to run :-)
Wow, that "let's put a huge grey bar and big gashes of whitespace" web design style SUCKS.
Hmm, not being a framework developer I can't say I get why it matters. I don't understand how the underbelly of PHP works, and I don't care. I call a function, I get a result. I know the input and I can read the output, sometimes even doing a test isn't needed. Same with codeigniter, I know what I am writing, and I can see my result. Like magic. Just like basic PHP. What does it matter? 
I was just going to recommend the same thing. lighttpd lets you set a download speed too. Unfortunately I couldn't find a way to conditionally allow resuming. Nginx has similar methods for sending files. 
print "and this is how you print stuff"; Amazing!
There are PHP-based FTP clients around that use this method. Essentially a remote PHP script performs the function of your client, and can connect to any server from there. You use it through your browser. Here are some examples, some of which have been around for at least six years: * http://inebria.com/phpftp/ * http://www.net2ftp.com/homepage/installation.html * http://www.raditha.com/php/ftp/ This is the level at which it *does* start to get interesting.
I didn't realise zend used the 'chaining' method that jQuery uses (object-&gt;method-&gt;method-&gt;method-&gt;etc). That's a handy technique, but I do wonder about how heavy that becomes on the server. Does each link result in the creation of a new object, or is it the same object passed down the chain by reference?
Now this is starting to get silly. The entire page just says: *To get the size of an image, use the getimagesize() function.*
It should be noted that Google has a limit on the number of maps that can be retrieved in any 24-hour period, so be careful not to exceed that (i.e. cache your results). The limit applies to the client doing the retrieving, so I assume a server will count as a single client (you will probably need to set the referrer in any GET request made, to match the maps API key). If you are just embedding a URL into your page, then your visitors are unlikely to hit this limit.
Unfortunately for PHP community, there is not much of a culture of unit testing. Other languages used on the web such as Ruby and Python seem to have communities that promote it much more. Here is a quick rundown of why unit testing is important. Unit testing is an essential aspect of development when dealing with code that must be modified or enhanced in the future. Without unit tests, refactoring is likely to introduce bugs in code that worked before. Unit tests allow a developer to quickly verify that functionality that worked before works even after code changes have been made. With most frameworks development is continual, new features are being added and existing code is being reworked. Unit tests help to give a sense to developers using the framework that correctness of the framework is considered important and that in general new releases won't reintroduce old bugs or break functionality that was fine before. From your perspective as a developer using CodeIgnitor, unit tests are good because you can be sure that CI is going to do what the documentation claims. Another point made in the article was about the facilities built into frameworks for you to write unit tests for your code. If frameworks do provide unit test functionality (and it is easy to use), developers will be more likely to use it, and thus site and application will be easier to maintain and improve.
Introducing (drum-roll) ... [mod_autoindex](http://httpd.apache.org/docs/2.0/mod/mod_autoindex.html) tish-boom!
I know CI does what the documentation claims because I test my code. When I change the code, for example, that utilizes the Google Calendar API, I go to that respective page after the change and then see if it works. If it doesn't, I troubleshoot and figure out what is causing the problem. All developers I know write debug code in with their code. This "checking their work" seems no different than your description of unit testing. Sufficient documentation and following an agreed upon standard of programming also severely mitigates the problems of future modification or re-factoring. I'm new to frameworks though, so I am far from saying you are wrong, I just don't see any difference, so it must be subtle or unique to using frameworks. I have no problem updating or modifying my CI code though, even without this apparently necessary feature. 
This article is an example of why PHP developers get a bad reputation. "Sessions must be enabled in order to use them effectively" - does that mean if I disable sessions I can use them ineffectively?
Personally I use sessions, cookies and a databased-backed validation of those cookies and sessions. **Also on shared hosting environments make sure you set your session data to record in something other than the default directory. 
The phrase "sessions *or* cookies" always has me confused. I generally use cookies to identify sessions - there is no 'or'.
&gt; If a user happens across a Web application that uses cookies and their browse is set to reject them, the application will not work properly In that case, sessions won't work either, unless you want an ugly &amp;PHPSESSID=Some-Abnoxious-Hash added to the end of every link. Aside from looking downright ugly, by default the html is invalid as the ampersand isn't encoded as &amp;amp; and you have also to be very careful not to get PHPSESSID links crawled by Google - a cookie-based SessionId doesn't work on the very first time you visit a website because the cookie isn't set yet. Google doesn't return cookie data AFAIK, so it often gets these PHPSESSIDs in URLS and you have to hope that Google is able to realize it's an unnecessary parameter. All in all, it's a complete pain. Unless you're a die-hard anti-cookie person it's easiest just to set session.use\_only\_cookie, and then you might as well just use cookies because they're much cleaner and can persist after your browser closes if needed. Either can be roughly as secure as the other, if you do it right though - to prevent someone stealing your PHPSESSID, store the user's IP address in the session. Similarly, with cookies, create a validation hash of the cookie contents that includes the user's IP address - if the cookie is stolen the hash will not match the attacker's IP address and therefore can be rejected by the server. Obviously, make sure any passwords in the cookie are already hashed. This has the drawback that if your IP address changes often your cookie/session data will be lost each time. If you're just storing a font-size preference, obviously, don't bother tying the cookie to an IP address.
Correct, the alternative is propagating the session id in the URL which is even /less/ safe.
Silly article, IMO. I'm not sure what the author was using cookies for.. &gt; (Session) Files are instead stored on the actual server Yes, and every other PHP page on the same server can read those files, too, by default. Not entirely secure, either. Just use one cookie to store the session id, and store your session data in a table under that id.
The Yii docs say it requires PHP5.1.0 and above. I think ZF has a similar requirement, though I've never used CodeIgniter
neither &lt;?php system('/usr/bin/php file.php'); ?&gt; I tried with -q, with !#/usr/bin/php etc... anyone can help?
I've used psuedo-binding of PHP variables through [ADOdb](http://adodb.sourceforge.net/) for years. It certainly helps protect against injection attacks. So now I can switch to real binding by just changing a few lines in the core of the ADOdb engine. Nice.
Because that's not how it works? Seriously, why would you do that? Include the file.
to create a different process!
You can do that through a HTTP call: curl('http://example.com/file.php');
*At the very least* use the sprite method, so you only need a single image to manage and download.
But then you'd get the overhead of Apache (or whatever webserver you're using). He might want to try this instead: http://immike.net/blog/2007/04/08/fork-php-and-speed-up-your-scripts/ It gives you what's as close to controlled forking and threading as PHP is going to get.
Hmm, good to see numbers, 20% is a pretty significant improvement. I always use prepared statements, but this is probably due to my Java background combined with a predominance of Oracle usage. Unfortunately my employer's policies frown on MySQL and are not allowed, even for small projects. 
I can see this being very useful, and after looking at the code I just had a "duh" moment.
The usual mistakes that never seem to be touched on in a multitude of download scripts I have seen, are here (i.e. the stuff that bitter experience estows a developer with): &gt;print(fread($file, filesize($my_path)); That will read the whole file in memory and *then* write out to the client. Try streaming a 20Mbyte file with 10Mbyte of memory allocated to your process. Best to do the file in chunks, like this (let the loop go over the chunks): &gt;$chunk = 1024*1024; // 1Mbyte &gt;... &gt;print(fread($file, $chunk); Why not just use passthru()? So you can bandwidth limit with the correct use of usleep() calls. Related to this: turn off output caching. If necessary, put this script into a folder it its own and use a server directive (htaccess) to turn off all output caching for that folder. The downside is that you don't get compression (though maybe you can still apply it in chunks? Never tried), but again you don't hit memory problems with large files. Whether the 'flush()' works or not, depends on where the output is being buffered, i.e. whether it is being done in an Apache module or from within PHP. The caching stuff is good though.
I wrote about that here: http://dawnerd.com/php/2008/05/07/basic-traffic-shaping-in-php/ 
The far, far, far better way is to use mod_xsendfile. You get download resumption (for "free"), Apache's native speed at sending the file, the correct content type and cache headers, mmap for large files, and you still get all the benefits of access control with PHP, Ruby or whatever your favorite scripting language is. Details and PHP example code [here](http://tn123.ath.cx/mod_xsendfile/). It also works with lighttpd, right out of the box.
open flash chart got last place in the charts section. Bah!! I wish Adobe would LGPL the player then people would start to love flash again ;-)
Check out codeigniter it is faster than zend and will improve your coding skills immensely. 
Yet another person that doesn't understand the difference between Errors and Exceptions.
The nesting could be zapped instantly using 'elseif ...' instead of 'else { if ...}'. I do find, practically, then whenever I do this kind of short-cut exiting from functions, I often need to change it back to single exit points to make adding debug statements easier. i.e. one exit point means only one place to log the exit state. I won't say that is an absolute rule though, because *that* would start a flame war ;-)
&gt; exit('it got this far!');
Any framework, in any language, is hard to use for a beginner. And it's a very bad idea to start learning a language by using a framework. Learn the basics of the language, then move to frameworks.
What is this doing here? Surely if we hit this problem, we will search for a solution, and if we don't hit this problem, we don't care?
ZF is written by Zend, you know, the people who write the language. Guess which one is going to be supported the longest ;-) Both will teach you how to code better.
I was a looking for a free, city-level ip geolocation database, but couldn't find any. A hundred thank yous!
One query down, another 129 to go.
&lt;?php echo pi(); ?&gt; 
just kidding, dig this: http://mgccl.com/2007/02/02/new-version-of-pi-calculator-break-the-speed-bound
Knock yourself out: http://mathworld.wolfram.com/PiFormulas.html How many digits do you want your program to go to? How accurate does it have to be? 
Um. Where's the article? Great, you use Vim. What else?
`&lt;?php system('echo "scale=9; 104348 / 33215" | bc');` Just kidding.
Wow, I was just thinking this 5 minutes ago. I noticed a while back that gst was posting some great ruby/rails links - making the ruby subreddit quite a good way to keep up on news. But, it seems lots of old links are being posted in many subreddits. It could be just what I choose to display, but there are times where more than half the links on a page are from gst.
I have wondered this, but it could be a kid who just googled "PHP" one day and goes through page for page posting whatever links come up. Every day he posts a google search page worth of links, then the next day he goes on to the next page and repeats. That would explain why they are getting older and the quality is less and less as the weeks pass.
gst *is* the php/webdesign subreddits. His (its?) submission page is a trove of decent links on topics I enjoy. Unlikely a bot (mostly custom titles on posts), probably just a prolific poster using the toolbar.
It is a bot. It scrapes a couple of different feeds.
GST is a bot that re-posts stories from http://delicious.com/gerd.storm/
Interesting, certainly appears so based on some of the other posts. If it's still useful, is this a good thing or a bad thing?
I would say a good thing. I can't stand delicious.com, lol
not everyone knows regex jackass
Thank you.
Thanks, I want it to be as accurate as possible within the general 30 second limit of processing.
Isn't that what most frameworks do?
Neat!
It is what you would hope most frameworks do, but often they don't. I don't know of any others that can take a data model and give you admin screens in one step. Of course, this one may still not be that, but I'm going to take it for a test run just in case.
*cough*Django*cough*
but you should faggot! also, who mentioned regex? this can be done without them (everything can be done without them if you're willing to fuck yourself to the point of nothingness) you sir, are not worthy even for the sales department 8¬/ now go and make coffee!
coughphpredditcough
I wish I could upvote you twice. What a gem!
The author should replace all the $misses if statements with a switch statement that falls through.
or in .htaccess, if available: php\_value magic\_quotes\_gpc "Off"
None of those. PHP5 has this ability by default.
I was just using regex as an example of one of those specialized skills that not every programmer has by default. Why do you sneer at sales anyway? You must be awful jealous of those sales people with all those social skills.
Thanks a lot! You just made me calculate pi to the infinityith digit, and it filled up *everything*.
How many digits do you get in 30 seconds?
indeed...
Eclipse does tend to be painfully slow. Anyone who uses it to edit JSP pages will know what I mean there. It seems that 10 years ago (when I had a Mac) I was using an editor called BBEdit that was far better as an editor than anything I've used since. It lived up to its own slogan ("it doesn't suck"). To this day I can't understand why the standard, barebones Eclipse doesn't support word wrap (it's almost 2009, guys). The piece's author should also try out PHPEd by Nusphere, it's the one I've settled on for my own PHP coding needs.
I find it hard to take an article seriously when the author uses "it's" for "its" and "loose" for "lose", but it may be worth a read for anyone else in the same situation as him.
i wouold like to see this work.
Accurate to five decimal places, however there are about 355,000 iterations...
Did they honestly need screenshots for phpmyadmin?
how's your swedish?
Jeez. "Evil" software such as Zend Encoder is the only option to sell my commercial PHP software without distributing the source code. I don't want to distribute my source code because I took a huge risk (no income) and a lot of time (up to a year) to develop it. Now what do I do?
Use a license that works. You may as well do a duel license GPL/LGPL and a commercial one... And just cos this is now a web service doesn't mean decoding PHP encrypted files was impossible before.
WOW!! When I can do this: http://code.google.com/p/ofcgwt/ &amp;&amp; http://ofcgwt.googlecode.com/svn/demo/test.html I'll be happy
 &lt;?php $nextMonth = (date('n') + 1) % 12; if ($nextMonth == 0) $nextMonth += 12; $year = $nextMonth == 1 ? date('Y') + 1 : date('Y'); $firstDayOfNextMonth = date('N', mktime(0, 0, 0, $nextMonth, 1, $year)); $firstFriday = 6 - $firstDayOfNextMonth; if ($firstFriday &lt;= 0) $firstFriday += 7; echo "First Friday falls on day $firstFriday\n";
What a better, more elegant solution. WTG.
You're right. A couple of grammatical errors totally negates the content. See, the thing about the Internet is that while we don't have a human population-sized staff of editors on hand, you do have access to good information in a timely fashion. If trivial errors like that are so disruptive for you, stop reading the Internet and stick with books. *&lt;sigh&gt; Sorry. End of rant.*
Thanks. I'm going to look at PHPEd now.
I don't think I want to open source my code. I mean, it's my company's foundation - and I'm not giving it away for free. My previous employer had a different strategy: tell the customer that he had bought the right to use the software, but that he hadn't bought the right to adjust/modify/extend the software. An additional (big) fee was required to obtain that right. Surprisingly, most customers didn't mind - even though it technically didn't buy them anything (just legally). Perhaps that's the way to go. PS: Sorry open source guys - I didn't quit my job to live on welfare :)
BTW, can someone tell me which is better? `A. require_once()` `B. require()` `C. include_once()` `D. include()`
It's according to what you want to do. They all do different things. a) only load this file if it already hasn't been loaded. die if failure. b) load file unconditionally. die if failure. c) only load this file if it hasn't already been loaded. warning/nothing if failure. d) load file unconditionally. warning/nothing if failure.
Well, it's not a question of when, but "why ?". I think this article explains it fairly well, PDT hasn't gone mainstream because Zend is afraid to lose customers if the free version of PDT becomes too popular, at least this is the only way I can explain it. PHP support has gone mainstream even in Netbeans, and they're not even working on it for such a long time.
Using the fact that mktime is clever enough for date manipulations, the first four lines can be condensed into $firstDayOfNextMonth = date('N', mktime(0, 0, 0, date('n') + 1, 1, date('Y'))); yielding even less wordy solution.
I wish it talked about validating form input against things like XSS and SQL Injection.
It does work, I sent 6 files to them 2 weeks ago and they sent me back the files as a normal PHP file. 2 of the files were jibberish and the other 4 files were all Chineese looking characters.
I like how Joomla is "eval"ing itself into some sort of black hole. At one point the place I worked for considered using it for a CMS... total crap. I like how you can read Drupal on one page.
it's not mktime doing any clever manipulation there, the date('n') + 1 and date('Y') is evaluated before it goes to mktime. And how does mktime deal with a month of 13 (12 + 1) - does it automatically "wrap" and call it January? Also, if current month is 12, then the year you should pass to mktime() should be date('Y') + 1. I wasn't aiming to minimize lines, I just saw the original code and thought that was a crazy amount of code to achieve what should be a relatively trivial thing. Clarity is also important though if you are trying to show someone a better way of doing something, and so condensing the whole thing to a single line is probably possible but not helpful.
Ban for being an Advertisement/Not helpful in educating the community. If you can find a book review of this, that would work.
I have to admit, CodeIgniter is one well build framework.
You may have a point. I should leave the internet for a while.
I'd much prefer anti-aliased charts to 'aliased' (I've raised a FR for that). It's a very nice rendering engine, but I think it needs a higher-level wrapper around it to appeal to the masses. The wrapper would provide a gallery of out-of-the-box charts to use. That's not a criticism in any way, just where I think the project needs to look next.
http://teethgrinder.co.uk/open-flash-chart-2/ Flash charts, minimal charts, explore data using tooltips.
It's worth knowing that there's a small overhead in using _once. I'd only use it if you absolutely have to.
The difference between the two are negligible I have observed. I can almost 100% guarantee you that using the *_once functions will not be the bottleneck in your PHP app. If you're trying to optimize your app for that much speed, PHP probably wasn't the best choice to start with in the first place, Amdahl's Law and whatnot.
Of course, but every little helps. :)
I believe the accepted form is to capitalize the "I" in "Internet."
The initial "I" in "Internet" is typically capitalized. *(heh heh, couldn't resist.)*
Having built 4 full blown CMSs I can tell you that it really is not that hard in PHP. It takes a lot of planing, a lot of testing, and a lot of time.
I'm not a fan of MVC, but if I were forced to use an MVC solution, this would be the one I'd use. It's short, sweet, and to the point.
Writing minimilistic code does not mean leaving out the {curly brackets} to save a few lines. Knowing that people are going to be copying this code and trying it out, the author has laid quite a few traps there for the unwary experimenter.
*sigh*... Is it really so hard when you are writing a coding tutorial to take the time to indent your code so that it is actually readable?
Sphider is nice, and fills a niche that no other simple PHP script I have found fills (and does it really well). What it really needs now is an API, separating the back end from the front end, because the search and indexing engine is just *too good* to go to waste.
If only people would stop saying MVC, when they mean front controller.
[Along with every other story in PHP is submitted by gst.](http://i428.photobucket.com/albums/qq8/bugmenotcom/gstphp2.png)
We have the same Karma! 19 Karma is clearly the perfect amount of karma to have.
I'll tell you what's wrong. You haven't unsubscribed from the main reddit.
What? The fact that you showed that you have a link to The Pirate Bay?
...you're using vista?
What Firefox theme is that?
I don't mind as long as they are good stories, but he/she/bot has been submitting some stale items the past few weeks.
[http://www.reddit.com/comments/6wnmb/save_me_from_gst/](http://www.reddit.com/comments/6wnmb/save_me_from_gst/)
If i gave you mod powers on the php reddit what would you do?
Ugh, can't believe they changed the form validation layout. To go through and change everything will take some work. 
 $off_play_choice = $_GET['oselect']; $def_play_choice = $_GET['oselect_def']; Can we please get some validation going? I know this is only the first part, but new php developers will assume that it's ok to trust user data. At least do this: $off_play_choice = intval($_GET['oselect']); $def_play_choice = intval($_GET['oselect_def']); 
Yeah, proper programming practices should be taught from the beginning, there are way too many supposed experts online giving lessons and taking shortcuts. 
Yes, the wrapping of mktime is what I wanted to emphasize. You can safely do mktime(... month + 1) and it will nicely do all the wrappings of days/months/years for you. And, your code example is very nice just as it is.
Annonymous functions in PHP are so cumbersome. The function body has to be in a string, ugh.
Yup, create_function is pretty much just a wrapper around eval(). It doesn't even make an anonymous function, it makes a normal function with a randomized name, every time it's called. PHP 5.3 finally has proper, if slightly odd, [closures](http://wiki.php.net/rfc/closures).
Valid dates - The built in strtotime() works for most. Zend's Date library takes into account locales and date formats. Much nicer than this ugly regex. Valid IP - ip2long will return false if it's not valid Valid Credit Card - He's forgetting to try and create an account on his favorite porn site Removing Swears - He's not checking word boundries, so your list might cut out a substring of a word containing on of the "swears". He's not running the variable text he's inserting through preg_quote(). I'll give him the benifit of the doubt and assume he has strlen overloaded in his .ini to correctly work with multibyte strings such as utf8. Stripping out JS &amp; bad html - DO NOT USE strip_tags(). &lt;div&gt;text&lt;/div&gt;&lt;div&gt;will get concatinated&lt;/div&gt; 
&gt; First thing I do, obviously, is visit PHP.net to check for the prefix of the functions that I need for Oracle. *Obviously?* I just look at what format connection string I need to use in my database access library. MySQL database functions? Haven't got a clue what they are - they are a layer lower than I ever deal with. Personally speaking, that is.
&gt; These functions are special because it doesn’t have a name. Actually, they do. They are given a unique name on-the-fly. You can see it easily: $myfunc = create_function(...); echo "Function name = " . $myfunc; echo "Function result = " . $$myfunc(); It also pays to assign it to a variable when using it in a loop, otherwise you just create a new function for each loop iteraction. Better to create it once, and use it many times. 
 [url=http://example.com" onclick="eatChildren();"&gt;[b]]borked[/url][/b] Oops, did I break your BBcode and cleanTags functions? Yeah, guess this whole "pattern match everything that might possibly be evil" approach might not be a winner, huh?
I've got to say -- this is not accurate at all. At my job, I use PHP &amp; Oracle every day, and it's as quick if not quicker than any other database. We are using CodeIgniter as the PHP framework, and there are no restrictions on NEEDING to use PL/SQL. You can run standard SQL against Oracle with no issues, but you have the ability to run PL/SQL as well. You should look into using CodeIgniter against Oracle, and I think you might have a different opinion.
&gt;He's not checking word boundries, so your list might cut out a substring of a word containing on of the "swears" A clbuttic mistake.
...and now you have ten problems.
Or, in this case, just cla**ic.
Additionally the regex for 'Replacing Static Links with Hyperlinks in HTML' is rather poor. It fails to match the fragment id (bit after `#`) and will also match things like the period in things like `"this is http://reddit.com/r/PHP."` I have a much better one in a [previous comment](http://www.reddit.com/r/PHP/comments/75dzi/how_do_i_find_a_url_in_a_string_of_input_using/c05q1so). And to make matters worse, it contains an XSS exploit. Consider the URL `example.org/'onclick='eviljavascript` which would become `"&lt;a href='example.org/'onclick='eviljavascript'&gt;example.org/'onclick='eviljavascript&lt;/a&gt;"`. (Note: assume there is an `http://` before `example.org`. Reddit's markup does magical things to things it thinks are urls)
I wrote a class for this a while back. I don't know, maybe it will be useful (open source): http://dawnerd.com/php/2008/08/07/open-source-php-data-validation-class/ Although the class is useful in the sense that is automatically escapes all post and get data.
Thank you! I'm glad I'm not the only one.
I think it's pretty tedious and non-elegant writting all those if(!empty($..Id)) {...} else if(.... ... Btw .. wtf does the func emptyempty() comes from ?
Are you serious? This is why PHP is regarded as a newb, junk language. Honestly after using Python and Java much more, I rarely even want to develop in PHP.. this coming from someone that built a business around PHP apps, and has been actively coding in it since PHP3
Just taking a quick glance at this... The regex on line 17 is not going to catch tags which don't have quotes around attributes. While not valid, browsers will accept it in some circumstances... You could still easily &lt;script src=mysite.com/script.js&gt;&lt;/script&gt; or whatever for your XSS. Stuff like this is hard. REALLY hard.
I don't think that anyone outside of the PHP team *isn't* disappointed by this decision, actually.
I don't care. I don't understand why people care. It's just syntax!
People can use this class on their own sites (and many others) where they know that standard is respected &amp; only VALID syntax is used. I've seen many word filters in PHP that didn't even check any HTML tags from the string. This class is GOOD ENOUGH.
I see your point, but it becomes an issue when you have to write that syntax every day of your work life...
Syntax is not something to be taken lightly. Good syntax is good, bad syntax is bad. This is clearly in the latter group. Of all possible symbols, backslash is perhaps the worst choice. It specifically has the meaning of escape character in lots of places. This means that you'll run into all sorts of trouble, trying to parse it.
Meh. You can do that with CSS.
http://teethgrinder.co.uk/perm.php?a=Zend-Framework-MySQL-DB-Pagination-Tutorial This is built into Zend Framework. I think you need to model the database (ORM) better. Can you count JOINs and GROUPs?
Hi. I'm a PHP developer! Still not an issue...
duh. PHP is designed for quick processing of many requests, not the other way around. 
Terrorists use PHP.
I've never learned PHP. I've skirted around the edges of it, and even bought a book on it, but never had a need to really work in the language. Given this whole thing, I'm just going to skip right on to Python. Yay Django and Drupy. 
They weren't.
Does anyone remember if the tilde is used for anything in PHP. If not, why didn't they consider that. Foo~Bar~Baz() seems a lot easier to look at than Foo\Bar\Baz(). At least in that it doesn't make me feel like I'm back using Windows again.
Holding shift down doesn't seem like that big of a deal. We do that all of the time when creating blocks with "{" and "}". I'm sure that gets done a lot more than using namespaces will be. Oh Well...
Yes, it is the bit negation operator.
Yes, but put yourself in the shoes of the PHP development team: pressing an extra key is the biggest deal ever. Muppets.
Ahh, yes. thank you.
On most European keyboard layouts, typing \ requires you to hold down Alt-Gr.
Basically String.Format replaces an item with this format {x} (where X's an int) by its correspondent argument, you can do much more, such as format the item, for example format currency, decimal, dates, etc.
What's wrong with plain old string interpolation or [sprintf](http://au2.php.net/manual/en/function.sprintf.php)?
How does this function allow you to "format" things better than sprintf combined with eg. date(), number\_format() &amp; money\_format() ?
PHP is an interpreted language. Might be useful if PHP was compiled.
&gt;if(!$count){ instead of &gt;if(!isset($count)) { I guess I just do things differently.
I wonder how good the performance improvement on Zend_Loader is... that's turned a lot of people onto ZF's alternatives (esp. Cake and CodeIgniter).
Turning to Cake for performance... That's rich!
A few people published benchmarks of the major PHP frameworks a few months ago and Zend Framework was inevitably dead last by a good margin. Quite a few developers subsequently identified Zend_Loader as being the bottleneck.
The ones I've seen have placed CakePHP well below ZF, though both are nothing to be proud of. Cake got a speed boost in the latest RC, but it's still a hot mess. I just got a new contract for a project that has to be in PHP so I went framework shopping... Settled on CodeIgniter. 
Yes, all the studies so far show that CodeIgniter is significantly more responsive than the rest of the field.
is this OAuth vs OpenID?
OO Really?
Those fold markers are _ugly_. As is their method naming (lowerCamelCaseIsUsuallyUsed()).
Decent IDE's allow you to fold without clogging up your code. Those ugly markers makes it hard to read. See the examples below... Sure alot of formatting is personal taste... but have a look below and see which is easier to follow. * class OAuthSignatureMethod_HMAC_SHA1 extends OAuthSignatureMethod {/*{{{*/ * function get_name() {/*{{{*/ * return "HMAC-SHA1"; * }/*}}}*/ vs * class OAuthSignatureMethod_HMAC_SHA1 extends OAuthSignatureMethod * { * function get_name() * { * return "HMAC-SHA1"; * } I cant do indenting in here, line breaks were hard enough... !
If you start the line with a bunch of spaces (four?), reddit will start thinking you're writing a code, and the result will be like this: class OAuthSignatureMethodHMACSHA1 extends OAuthSignatureMethod { function get_name() { return "HMAC-SHA1"; } } While using vim (or emacs) generally means that the person knows what he's doing, and his code tends to be above average, I wholeheartedly agree on the markers — they make even such short code hard to read.
Are you kidding? This code has static members, public as well as private instance variables and uses the error-suppressor. It's well above standard, but beautiful? C'mon!
ok - so what's the point?
6. Listening to all these "experts" tell you how to code. Learn it yourself, it's the only way to remember and apply it knowingly and correctly.
Is it just me, or does anyone simply not read any IBM articles because of the nasty dark layout?
I'm fairly certain the site is mostly light. It's all black text on white background.
These are good practices for ALL programming really. 
I wish he made it clearer how to join the community...
You want a guide for how to make friends? You *must* be a programmer ;) Seriously speaking though - In case you actually meant that as a question - Forums are a big part of the PHP community. I would recommend [devnetworks](http://www.devnetwork.net) and [sitepoint](http://www.sitepoint.com/forums/forumdisplay.php?f=34), but there are many more. There are also a great deal of local user groups. If there's one close to you, you should consider dropping by.
I use Smarty at work and the only code shown is the stuff that takes just as long as PHP. I don't think template engines are right for everything, but Smarty makes it extremely easy to do things like dropdowns for dates or having a certain radio button, check mark, select in a dropdown, etc selected by default. Just saying.
You could do that just as quickly with one of the 100's of PHP libraries around. echo drop_down_list($items, $selected_item); etc..
I agree. Check out [my article on CCAPS](http://en.wikibooks.org/wiki/CCAPS). Why build a templating engine on top of an existing templating engine? And with CCAPS, you can make a Smarty-like class and use methods like: Template::Assign() and Template::Display() to assign vars and display your content, rather than $smarty-&gt;Assign() and $smarty-&gt;Display(). 
Well... Smarty is a PHP library, isn't it?
Yes, and if every library re-invented its own scripting language no-one would get anything done.
you're talking like if that language is complicated and hard to learn. I think the real power of Smarty are things like functions, modifiers, resources, cache etc. Sure you can do that in just php (Smarty is written in PHP anyway), but Smarty makes it easier and faster.
Exactly. Today most new template engines gets it right, by escaping strings by default. That's reason enough to use one.
Even the simplest language introduces complications. You must consider debugging tools, compilers/interpreters and the bugs they may have, development tools, developer availability (i.e. how many developers can you find that can maintain your scripting language) etc., PHP also has functions, modifiers, resources and caches and there are many libraries around that make using this stuff exceptionally easy. Im sure there are things that are easier done in smarty but does it need to the complication of its own scripting language? 
http://smarty-php.googlecode.com/svn/trunk/libs/plugins/modifier.truncate.php FYI, both solutions fail with Unicode strings.
Errr... preg_match('#^(.{1,15})(\s|$)#', 'this is a very long sentence', $matches); print $matches[1]; Output "this is a very"
I've updated the post to use a bit of the code from the Smarty plugin and eliminated the loop based on a comment in the blog itself.
That is close but it needs to be 15 characters total including the ellipsis if the string exceeds 15 characters. That code also fails (returns an empty string) if there are no spaces found under the limit.
In your blog the spec was; &gt; The code truncates on the nearest word boundary if the text is longer than the requested maximum length. The regex above does this (although it's definition of word boundary does not include punctuation). Your extended spec now includes cutting a word which is longer than 15 characters and adding ellipsis. Most of which could be done with a single regex but there's an even easier way - use http://www.php.net/wordwrap ; $lines = explode("\n", wordwrap("this is a very long sentence", 15, "...\n", True)); print $lines[0]; 
Uh-huh - extending the functionality of PHP by writing code in comments. There is something to be said for that - Vanilla Forums uses a similar technique to store metadata of plugin extensions, but I'm not so sure in this case. I think I would rather just label up the code as 'routeable' and put the routes themselves somewhere else, perhaps in a central store where they can be changed later as an application grows. But it's interesting.
I like having routing separate from methods for a few reasons, but one good one is that it's much easier for distributable apps. The URL structure may have to change between sites, but the functionality stays the same. Tying the URLs to the methods means you need fresh (modified) copies of all your methods for each instance of the app. I love Django's routing. It's a bit more setup than some frameworks (Rails), but it's really powerful. Very easy to make portable apps too.
Annotations will feel a bit unnatural at first. Especially if you've never used them in another language like Java. Once their presence is more comfortable I hope you'll find they're a very powerful way for expressing 'intent' inline with the code it affects. The downside to separating routing information to a central place away from your controllers is that now when you make a change to your controller you must remember to make an update somewhere else in your code.
I can see there are pros and cons either way, and appreciate that, so I'm not saying it is wrong in any way. I guess what I am feeling less comfortable with, is having to change code to change the routing, and not just change data. I've spent years working on CMSs where the routing is effectively hard-coded into the PHP, and am desparate to get away from that. This is a stepping stone, but I think I would want to take it further.
Good points Jon. Creating an app that is portable in Recess is fairly straightforward so long as you use 'relative' routes. Using relative routes makes it easy to take an app, plop it down in another Recess environment, change the route prefix for the app and be set. Ensuring links in views will work once routing has changed is another challenge when creating 'portable apps'. For this purpose, within views in Recess there is a function that takes the name of a controller method and will return the URL to it. This helps to ensure application portability.
Yes - this is spot-on my reason too. It probably does not make any difference to back-end administration screens, where users get what they get and learn how to use it. It does make a difference to front-end web sites where you may have any particular piece of functionality available at any particular URL location, and yes - it would change from site-to-site. This approach obviously does support that, but I do feel it adds an extra burden on rolling out any changes. There is also the problem of clashes. While the URL route being define close to the function binds them together nicely, it takes your eye away from the bigger picture where everything has to fit together seemlessly and without clashing. I'll bookmark this and see how it pans out. It's still always good to see a new approach to anything.
It would be nice if you could have the route prefix somehow be in another file. That way if you have a portable app that gets updated you can do a simple svn update and grab the latest and not have to worry about redoing your prefix. Kudos on being able to reverse routes, that's one of my favorite features of the Django routing system.
how is the speed for parsing through every controller upon request or are those routes cached somewhere? I feel this would only fly when you use memcache or something similar but still, i don't exactly see the point. But since you're using smarty for templates i guess performance is none of recess!'s design goals
Performance is a top goal, actually. If you skip to minute 9:00 or scroll down in the blog post performance is discussed. In production mode Recess builds a routing tree that is serialized and cached either to disk or memory depending on what's available. Matching against that routing tree is an O(log n) operation. As for smarty, it's optional and off by default but easy to use for folks who prefer it. Thanks for the input.
hey, i didn't mean to flame but please excuse my ignorance: i closed the tab after a minute of the vid. Anyway, i *am* very excited for recess! and would really like to see a genuine fresh take on php frameworks. But i'm all for performance and this is why i am stuck with a slightly customized CI at the moment which delivers very nice but somehow feels like there is something missing
No worries - I know 10 minute screencasts aren't for everyone :) Recess incorporates a number of very interesting techniques which focus on performance. The goal has been to build a framework that raises the level of abstraction (like Rails/Cake) without compromising on performance. So far, so good. Glad you're interested!
So basically we route everything through index.php through an .htaccess rewrite, and then let index.php route traffic out from there. But then it appears then that all the pages would end up in the same directory. On a very large project with like 50 to 75 pages, this makes it very hard to edit and manage.
So can you tell me again why I need a Singleton?
shame there isn't more real world examples. The logging one is kinda kool.
I wouldn't call them oversights, but using a database layer is really helpful. However, I feel that all php developers should learn how to directly work with the mysql functions. You can get pretty lazy working with a DAL that you can forget the basics. Really depends on the project though.
Meh. This guy reinvented [PDO](http://php.net/pdo).
Sounds interesting, I love taking advantage of the power lighttpd bolsters. 
I don't think wordpress is incredibly bloated. It's fast, relatively compact, and has just enough features.
The average wordpress blog makes at least 17 and in some cases that I've seen, more than 150 sql queries per page view - that is unacceptable by my standards. A functional blogging system could quite easily get by with less than 5 queries for the majority of pages.
While I agree that they need to do some serious optimization, the overall system is not bad. The latest versions are tons more stable compared to other open source blogging systems.
You're right. It's bloated. You could build a thinner system, and it would run faster. For now, though, I use it because it's already built. Let me know when you finish yours. I'd love to download and try it out. 
I heard 1.2 isn't backwards compatible with 1.1. Are the screencasts on the website for 1.1 or 1.2? There's no date attached to the list on http://cakephp.org/screencasts
1.2 has changed a lot since 1.1. The docs are great though and should be more than plenty to get going.
&gt; After exactly 2 yrs from the first development release, we can happily say we have the most stable and powerful web framework available. What a nice way to start off a release note. Hubris is not a feature.
I love CakePHP, is easy, mature and powerful.
I'm really bemoaning the lack of PHP links lately, and I'm probably not alone. Hoping that gst-bot or others might step up and give us PHPers something to enjoy during the holidays. Lots of good karma up for grabs, so submit away!
guess it says something about PHP in general these days.
I don't understand. If you are getting a 404, then you are looking for something that isn't there and you should change the reference to something that is there. Am I missing something?
The idea is when the request comes you don't know if the resource is there or not. If it is, then the webserver finds it and the ErrorHandler is never invoked, if not then: use the ErrorHandler to fetch it, store it in the cache and serve it.
You use the 404 as an exception trigger, rather than just treat it as an error. To your application it means "this page is not cached yet" rather than "this page does not exist". The main problem I would see with this technique is that pages are often a mix of pretty static content (e.g. a news article) and very dynamic content (e.g. latest news links and advertising banners). Some way to cache the page *and* inject some dynamic code would be nice, so the final solution is probably something more complicated than this example.
beside the smarty plugin not working, I've not seen a single change compared to 1.0. Aside of the really excellent auto completion, PDT is bloated, overly complex to configure and maintain and quite slow too. Still. The great auto completion is what makes me continue to use it. I don't see an immediate need to upgrade though.
Here's a better one: global $myObject; if (!isset($myObject)) { $myObject = new MyObject(); } 
You could place the static content in a known place and give that a different ErrorDocument (A real one). Or you could generate the entire site offline (But then I guess it can't be called Funky caching anymore)
Can anyone explain how this would compare to more established frameworks? Especially Zend Framework. Since ZF is loosely coupled, you can grab just the pieces you need and integrate them into your existing solution, or build a complete web solution using only ZF. Then there are PHP Frameworks like Cake, Symfony, CodeIgniter, etc... Where exactly does eZ Components fit in and why should I use it instead of one of the more established frameworks?
You must not have read **Reason 1**.
it reminds me of the @ operator from old .batch DOS files… enough reason to avoid it.
PEAR and ZF both have better ways of doing this. Don't re-invent the wheel, but it was a nice article. (PEAR::DB is amazing, i wish ZF would take a look at it.......)
I used to use it for java dev, but decided to go with Zend for PHP as the path of least resistance. I'm really thinking of switching back now as I think that I've outgrown it.
Yes. I like emacs as an editor, so I use it for everything.
Nope. I use gedit on my Ubuntu. Did you know they have extra plugins in the apt sources so that you can turn on a project explorer on the left and other kinds of perks? I don't get intellisource or whatever that annoying popdown feature is while you type, but I don't care.
Notepad++
Micah Carrick has an [interesting article](http://www.micahcarrick.com/09-29-2007/gedit-html-editor.html) on using Gedit as a web developer's IDE. Definitely a good read.
This is a PHP 5 library I've been developing over the past year and a half. It's not an MVC framework, but rather a modular collection of classes to help with common PHP usage patterns and security. More like the Zend Framework than something like Cake, but at the same time simpler and lighter-weight than Zend. I've spent a good amount of time on documentation and trying to make the code and the site as usable as possible. I'm looking forward to getting some feedback!
Hm... looks pretty foxy. When I use Code Igniter I notice I'm missing a lot of these toolsets. Looks like two great tastes that could go great together.
Clearly a website created by a developer... (hey, I am one, I'm not chiming in just to be negative). I'd sure be interested in a concise overview of what, specifically, this provides for me as a developer without having to read the documentation of each function... The bullet points on the main page just say, basically, "it's a library, it's compatible with this stuff." Review: The first thing the page tells me about it is that it's licensed under the MIT license. Ok, so? Then it tells me there's tons of documentation. Cool! (Honestly, that's good) Then it tells me what it's compatible with (ok, good to know) Lists what databases it supports.. cool... ... and more... sweet. But um... in 2-3 paragraphs, what sorts of sweet shortcuts does this provide me? It's not clear from the main page of the site, or even the main page under the "documentation" section of the site. It would be really helpful, and probably increase the number of users interested in your code library, if you posted a few paragraphs front and center that explain in plain English: What does this do and why do I want it? What's a real world example of something I'd use it for? Kudos to you for sharing this with the community... I may sound negative but I'm honestly just trying to give you some constructive feedback on the website... I definitely support the work that you and others like you are doing... Edit: Translate THIS into a few paragraphs that give a brand new visitor to your site an overview, and you've got it: http://flourishlib.com/docs/HowDoI ... I didn't find that until after a decent bit of looking around.
Very interesting. I have to look into it a bit longer, but I already get the feeling that I'll use this in one of my projects (a CMS).
I don't think you are being critical at all, and that's just the kind of feedback I'm looking for. After you spend so much time working on something it can be hard to have an objective view of it. I have been trying to figure out the best way to expose a visitor to what makes Flourish different. In one sense it is all about compatibility and security, but the code tends to flow really well once you start writing it, as opposed to having awkward APIs and stuff. I've been considering doing some simple screencasts to show the flow of coding. Anyway, thanks for the feedback! I'll see what I can do about making the How Do I page a little more prominent.
Screencasts would definitely be a cool intro... I'd make my top priority a quick 2-3 paragraphs on the main page of what it can do, though. Imagine you're speaking to someone who knows PHP, but has never used a framework or a code library to jumpstart what they're doing. Yeah, the first paragraph will be "wasted" on explaining what that is if the reader is someone who already gets it -- but people interested in a library who've used other ones will probably gloss over that and dig straight into the reference documentation to see if it has stuff they want.
Can you give some code examples, how to do something, or why I might want to look at or use this?
I've actually used Flourish on a couple projects, but I'll step back and look at the site with fresh eyes. Following @honestbleeps constructive criticism, my thoughts are... * Right from the homepage, it would be nice to see example code - Maybe the source that's used to render the homepage itself; maybe a simple example that shows the implementation of fTemplating and fetching users from a database. I see a link to the Blog post about a demo site. Unfortunately, on the blog I can't any Flouish code without downloading the demo zip. I find this page on Cake's site really helpful in giving me a quick understanding of what I'd be dealing with: http://book.cakephp.org/view/326/the-cake-blog-tutorial (It shows user-created classes, templating, database interaction, etc.) Looking at the Flourish homepage, right off the bat I get the feeling that: * It's well documented * It's made by a developer for developers (To me, Flourish's site speaks better to its audience than Cake's) * It's active and up to date (the blog, twitter, etc...) As a brand new user, however I'm still not compelled to actually read through the documentation or download the demo site until I can see some code examples. Finally, the buttons for "How Do I..." might need more of a description. Maybe the "How Do I..." button is followed by some text highlighting the most important "tasks at hand" on that page.
While we're being contructive (and while I have the developer's ear), I also found the "How Do I" page really helpful. I second the opinion that it should go on the front page. Overall, very nice lightweight framework/library... Certainly appears useful and I'll give it a go with a future project. 
Thanks for your suggestions Dave! I added a few little code examples to the home page along with some content that @honestbleeps suggested. Perhaps tomorrow I can spend a little time and pull some code out of the demo site onto the actual blog page itself. Downloading and extracting the zip is the most complete view of the code, but I agree it is probably a big hurdle for most people.
Thank you for pushing back about the intro paragraphs. After adding that and some code examples per suggestion by @davetufts, I think the page is definitely more useful. I also moved the licensing info to the bottom of the features list so that everything flows better. I appreciate you taking the time to give your feedback!
It's not that much to ask. At least they outlined all the changes you needed to make. It's mostly find and replace, and more than most frameworks provide.
What would you say are the main reasons for wanting to use this over, say, the Zend Framework? I'll certainly be looking at your SQL parser, as I have been looking for a way to deconstruct SQL in order to inject additional clauses for a while (though the regexes do look a bit frightening - I guess I have been hoping for a token-based SQL parser that does expressions hierarchically).
No problem at all. Just checking back in to say that the homepage is MUCH better now!
Re: Zend Well, there are quite a number of differences between Zend and Flourish, and hopefully I can provide some useful information. At the core, Zend is a very large "enterprise" framework in the sense that everything is abstracted quite "properly" with interfaces and factories and all that good OO stuff. This is certainly beneficial depending on what kind of project you are working on. Flourish tries to be much simpler and more straight-forward. I've opted to code the classes in a way that they are useful without the developer having to learn multiple interfaces before using an API. Again, in some situations you may want the robust OO hierarchy, whereas in other situations and well-focused, easy to understand API is more useful. Also, the ZF 1.7.2 (minimal) download I grabbed contained over 1800 files in almost 300 folders, while Flourish has 60 files in one folder. Obviously there is some difference in functionality, but if you need to understand what is happening, it will probably be easier with Flourish since there is less going on. When it comes to functionality, from what I can tell, Flourish is more focused on compatibility. A standard install of PHP 5.1+ will have the functionality needed for every class in Flourish, with the exception of some cryptography and image manipulation stuff. For instance, you need the openssl and mcrypt extensions for S/MIME email and fCryptography encryption functionality, and either the GD extension or the commandline ImageMagick program for image manipulation. For any other extensions, Flourish provides a native PHP implementation to allow for the greatest compatibility. This may not seem like a big deal, until you understand some of the functionality Flourish gives you. Flourish includes arbitrary precision math which normally requires the bcmath extension, JSON which is only included in 5.2+, UTF-8 string function which normally requires the mbstring extension, HTTPOnly cookies which are normally only available in 5.2+, server-side MIME type detection without the fileinfo extension, or relying on a commandline program or magic file, and more. Beyond this, the database class, fDatabase supports all php extension for connecting to MySQL, PostgreSQL, SQLite and SQL Server, and it will automatically figure out which you have. There is a SQL translation layer so you don't need to write database specific SQL to support multiple database engines. There are obviously more differences, but those are some that I've noticed. Anyone who is more familiar with Zend, please correct any facts I may have wrong. Re: SQL Parser Yes, some of the regular expressions that I use for parsing and splitting SQL are kind of lengthy. Unfortunately I never written a parser that could handle something as complex as SQL, but I was familiar enough with regex to accomplish what I needed.
That is really interesting. Most libraries try to do everything, and (IMHO) tend to get in the way, make you write more code, instead of less. I am going to try this out for my home projects. Oracle support would be nice. :)
I am actually planning on adding support for Oracle (and possibly DB2) in the future. At this point I'd like to do it after I have more unit tests written for the fDatabase class. Thanks for checking it out!
You can go one step further and use the Luhn Algorithm to check for typos: http://en.wikipedia.org/wiki/Luhn_algorithm
It also totally fails to validate the checksum (modulus 10, used to detect transposed digits) of the cards. Even then, it detects whether the card is a particular type, then fails to tell the calling application what type it was (necessary because your payment gateway may not accept all card types). In fact, why didn't they just publish the regular expressions and ditch the 'PHP' pretence?
Any class where only one should be active. ;)
The mod 10 checksum IS the Luhn Algorithm.
Very useful list indeed.
This looks interesting: http://dwoo.org/ I am building something like it for work. I think everyone is stealing from Django's templates.
No [Kohana](http://kohanaphp.com/) love under the frameworks? :(
never heard of webgrind bofore. sounds interesting...
"Redirect loop" gtfo
Minify is great, I use it on some of my websites. It also gzips CSS and JS, which is convenient for people who are on shared hosting that normally could not change their server settings to support gzipping files. If you make a change to your css file, minify detects this the next time the site is visited by someone and it re-minifies, gzips, and caches the new file. It's a great program.
An important note for using this program: Correct me if I'm wrong, but I believe you have to set groups if you want your gzipped/minified code to be cached by the visitor. Here are the directions for serving files as a group: http://mrclay.org/index.php/2008/09/19/minify-21-on-mrclayorg/
They should do themselves a favor and just use Django. I'm so happy since I switched.
Cool - I was about to set out writing one of these for a CMS. It does everything I wanted to implement, so will save me a lot of time.
Anyone know of a content filter for Wordpress that would automatically create the file groups?
We thought about it but I still think its risky to run Django on high traffic sites. With one PHP process per request you don't have to think about memory usage/leaks for better or worse. It would be nice though...
I used to have alot of problems with memory leaks, but since switching to WSGI, they seemed to go away without me having to track them down.
phpclasses.org
Why on Earth would you even use Quercus to begin with?
I wanted to test its power. They claim to get 4 times faster than the normal php
Whats is your comparison? 
That's a completely inaccurate title. Downmodded.
Show the code that you are using and what is the configuration of your appserver / jvm.
correct link is here http://www.webdigi.co.uk/blog/2009/how-to-detect-if-your-webserver-is-hacked-and-get-alerted/
IIS? Well, there's your problem right there.
thats right! :) useful article for those unfortunate enough to use IIS.
First of all, never enable error reporting on a public-facing system, especially a production public-facing system. Second, if possible (and practical) use Linux and Apache with PHP, its a more robust platform that this specific language. Alternatively, use ASP.Net (C#) with IIS. Third, enabling logging, and get SSH access to the server (NOT RDP). A GUI will just get in your way.
How about writing secure code to begin with instead of coming up with solutions to be notified? If you have the ability to know when you've been hacked through some form of code, then you should know where the problem is. My question is, why didn't you fix it first?
So scripting errors result in "500 Internal server error" rather than a scripting error? That's handy.
Now do one about using the xdebug profiler for PHP with kcachegrind. :)
what if yo have a shared host?
Well, you need to have Xdebug installed at the host. But if you're asking how to debug a remote server, you can open an [ssh tunnel](http://code.google.com/p/spectator/wiki/Installing).
The first beta released of PHP 5.3 was packaged today. It includes new features such as late static binding, closures (minus OOP closure support), namespaces, the ?: operator, and __callStatic().
And with this release, this will probably be the end of my PHP coding. I can't stand the namespace convention.
The worst thing about PHP's namespace syntax is all the people whining about it. `::` has ambiguous corner cases and requires more expensive runtime namespace resolution. `\` is shorter, analogous to path names on Windows, not used outside strings... It is ugly, but that's nothing new in PHP world. Just don't use namespaces or use unprefixed ones. 
&gt;Just don't use namespaces or use unprefixed ones. Yeah, that's a great idea, or I could just stop using PHP as I'm planning to do. PHP is going to become the next Perl.
PHP didn't have namespaces for so long and apparently it didn't stop you from using it. Sure, use something else. It's just that choice of character for namespace operator sounds like a poor reason (PHP fails in other areas that are harder to avoid and cause problems beyond aesthetics) 
PHP has many faults and I've dealt with them because: A) There were not many viable alternatives to PHP B) I hoped future versions would actually improve PHP. Since neither of those is true any more, I can now stop taking an interest in PHP's future. 
Whew ... it's a good thing everybody stopped using Perl then.
Yeah, pretty much.
So the moral of a story is.. don't call functions in one language while assuming that they will work exactly the same was as they do in another. The Web is a cesspool of idiot programmers. 
&gt; Python has join and split, C# has join and split, Javascript has join and split, and Java has a split ... and Perl has split() that works with regex delimiters. Where did the author get the idea that this is some sort of "standard naming convention"? If you can't be bothered to read the documentation, you should "beware" all functions.
You're still in school, aren't you...
Nope. Everyone I know that uses perl is well over 45 though.
Perl's split works both ways and more closely resembles preg_split than PHP's split. Perhaps "standard" is the wrong word, but certainly a common naming convention based on previous experience with other languages. Of course you're right, you should always read the documentation. But there is a subtle difference in the way the split and explode work (but not join and implode) which might mean that you don't initially notice the difference.
What are you using then ?
I'm sorry, but that's just retarded. There is no reason to assume that just because a function shares a name with one in another language, that it's going to work the same.
It's hideous alright, but don't you think it's a bit extreme to abandon the language for that alone? Personally, I'm more appalled by the `__callStatic` hook, since that would further promote the use of global symbols in php.
This was more like the straw that broke the camel's back for me. There are already a number of things that annoy me about php.. no multiple inheritance, complete lack of useful "magic functions", you can't terminate the output buffer without terminating the script (have fun making a chron job system in php), there's no way to assign your own super global variables (this one really bugs me), and many more..
There's plenty of things wrong with PHP, but those are some odd objections you mention there. Single inheritance has its benefits in terms of complexity. I'm not sure I take that as an argument. It's subjective at least. I'm not sure I understand the thing about output buffers. If you mean that a php script is constrained to the runtime of a http-request, then I would argue that is a feature - not a bug. Use the cli version, if you want to write daemons/cronjobs. As for global symbols, PHP have them all over the place. I'm actually quite happy that they limited just a bit.
You can't turn the output buffer off, which is something you should be able to do. What if you want to do post output processing? You can't. Yes, these are very specific problems, but they're big annoyances when you're trying to get something done and the language keeps throwing up road blocks (seemingly consistently too). When a programming language is getting in your way, that's a bad thing.
&gt; You can't turn the output buffer off, which is something you should be able to do. Still not sure I understand what you're talking about, but is [flush](http://www.php.net/manual/en/function.flush.php) what you're looking for?
no. Turn OFF the output buffer, not flush it, this means complete the user's request and have his browser stop loading. There is no way to do that in php without stopping the script, if you think there is, you are mistaken.
OK, but I fail to see why you would need this. If you want to do background processing tasks, it would be a much better idea to set up a cronjob or a daemon to do the job.
Why would it be a better idea? Do you never see the need to do post request processing? If you're using PHP, "too bad" is what you get.
Actually I don't. What would you typically be doing after the request has ended?
Anything that has nothing to do with output. Tracking for example.
$cachefile = 'albumpic.php?ag='.$image.'&amp;al='.$dir; $cachetime = 5 * 60; $arrStr = explode("/", $_SERVER['SCRIPT_FILENAME'] ); $arrStr = array_reverse($arrStr ); $fileName = $arrStr[0]; $strippedName = preg_replace('/\d*(\..+)?/', '', $fileName); // Serve from the cache if it is younger than $cachetime if (file_exists($cachefile) &amp;&amp; time() - $cachetime &lt; filemtime($cachefile)) { include($cachefile); echo "&lt;!-- Cached copy, generated ".date('H:i', filemtime($cachefile))." --&gt;\n"; exit; } ob_start(); // Start the output buffer /* The code to dynamically generate the page goes here */ // Cache the output to a file /* $fp = fopen($cachefile, 'w'); fwrite($fp, ob_get_contents()); fclose($fp); ob_end_flush(); // Send the output to the browser
I now hate self.reddit.
Escape your \_'s with a '\\' backslash
You mean as a way to optimise the application, you defer operations that doesn't generate output until after the script has ended? Or rather, you'd want to. That's an interesting idea.
Yes, and it's also not possible with php.
Quite misnamed title («proper memcache locking» would be more appropriate, or something), yet the article is very useful. At least for me, as I've recently guilted myself with writing exactly the same broken memcache locking.
If you have that requirement, then your requirements are flawed.
Xdebug has changed my life. I use webgrind (http://code.google.com/p/webgrind/) for simple profiling I also use MacGDBp (http://www.bluestatic.org/software/macgdbp/) for step by step debugging. Great tools
Is this the ability to put functions within functions, giving the inner function the scope of its outer function, like Pascal?
This is possible, but it's more similar to functions inside of objects. However, one thing the article doesn't mention is that create_function comes with a huge performance hit, and should only be used when necessary.
Especially dangerous to use inside loops, since a new function will be created each time it's called. Even with proper anonymous functions support (Which is coming in 5.3), I still would be cautious to write pure functional programming style. Partial applications come with the overhead of an extra dispatch for each wrapped function. I think the main usecase for lambdas are going to be a replacement for ugly loop constructs (Eg. `map`, `find` and `reduce` operations).
I'd like to see more submissions about Yii, since a Reddit search for the topic yields dismal results. :)
Nice work, thats neat. 
What do you suppose to reasoning was for using PHP with Mumbles and DBus, specifically what is the purpose of using PHP on desktop software rather than web software? Would it be easier or better to use Python or Perl since most people would have this installed by default?
The idea is mainly for developers like myself to say send error messages or unit test results to Growl/Mumbles. Since I'm working with the site as a local copy on my dev machine, it's easy to get notifications from the PHP app on my desktop. The best use case I can think of is there are pages that don't ever display, they do a bit of processing then redirect to another page, so you never see any output. Rather than checking the error log to see any errors that happened on that page (and every other page), I can write an error handler to send the error to growl so I see it real time.
I thought about that same thing, but then I hoped that there would be a greater purpose like making it easier for us to send our own messages when something happened (ie "You have a new email" from Evolution, "John Doe has logged on" from Pidgin, or "A hacker has been detected by LIDS").
You could of course do stuff like that. There's a Network Protocol for Growl that I link to on my blog post if you want a server to send a message to a computer(s). However you might find just writing a plugin for Mumbles in Python to be an easier bet if you're monitoring a network. Evolution and Pidgin plugins actually already exist, check the Mumbles page.
The library wraps create_function so it'll only be created once, since it memoizes it.
It does come with a hit, but that doesn't mean it's not useful. There are tradeoffs for every solution to a problem. 
Kind of a stupid question as the answer is probably obvious but the way PHP handles the 0 character in strings seems a little odd. I'm writing a simple defunge interpreter (for fun, did brainfuck on saturday) so I take a character at a time and then parse it. I've tried is_numeric to check for numbers but then 0 is missed. I also tried $char == 0; $char == '0'; $char ===0; ereg('0', $char); (int)$char == 0 all with no luck. Surely I must be missing something?
I'm not quite sure I understand your question. Are you checking for an occurrence in a string or checking for a one character string of '0'? 
A one character string of '0'. I can't seem to find a way to test it.
Try `$char === '0';` This strictly checks to see if the variable is a single zero character. If that doesn't work we might need to find something more freakish.
Thank you very much, that did it. Part of the problem was that I was running the test in a switch statement and for whatever reason doing something like case (is_numeric($char) || $char === '0'): //snip fails so I had to change it to case '0': case is_numeric($char): //snip Outside of a switch statement $char === '0' is what you need to use.
preg_match (string pattern, string subject [, array groups]) returns TRUE if the regular expression pattern matches the subject string or part of the subject string if(preg_match('/0/',$yourstring)) //do something
The regex works, but the overhead is a bit high. I would do something simple like if(strpos('0',$yourstring) == 0). However, it occurs to me that you could have a string that starts with 0, but contains more after it... In such event, a preg_match wouldn't be so bad, provided your regex is '/^0$/'. That said, the strict boolean check above (===) looks nicer and is more understandable and approachable, and is probably the quickest / lightest answer.
http://php.net/manual/en/language.operators.comparison.php for more info.
You're probably right about the overhead, but I figured the 0 could be anywhere, so regex was probably best. Sorry about the improper use of code, I'm not adept at regex and I didn't want to figure it out at the moment (lazy and busy doing other programming). He could do a loop as well: function findChar($str,$char){ for($i=0; $i&lt;count($str); $i++){ if($str{$i} === $char) return true; } return false; } search time is O(count($str))
You can use strpos and just test for the negative condition too. function findChar($str, $char) { return strpos($str, $char) !== false; } I don't know for sure, but strpos might be faster than having to run through a loop. (Might be implemented in C instead of PHP)
Anyone who does should be shot.
Do you have a legacy PHP4 project? Which PHP4 bugs/issues are causing you trouble?
Look behind the people holding up COBOL and MUMPS, there might be a few there interested in such a venture.
The lack of all the PHP5 features.
And the reason you don't upgrade to PHP5 is?
I did. I'm wondering why the OP doesn't though.
Not an easy task if the project is a bit bigger than the simple examples in migration tutorials. There are several old projects I have to maintain. Not developed by me. Removing all warnings with E_ALL would cost me much time. Finding every little copy (and with PHP5 a reference) of objects is impossible in one lifetime. No unit tests. 
You've had 7? years to do that? Don't be a wuss. It's doable. I've done it with a few large projects. Usually you don't even need to change all object uses. Go once over all code and change it as you go. Test it, fix remaining bugs and you're mostly done. You don't need to fix all notices. If you get so many of them, PHP4 code probably triggered them too. 
&gt; You've had 7? years to do that? No. As I said: "Not developed by me." &gt; Usually you don't even need to change all object uses. Usually. Sure. You haven't seen the code. Object spaghetti at its finest. I can't be sure if something deep down changes some value without triggering an error or warning. No DRY.
Do you need to migrate all of it to PHP5? Is there any way you could add new features using 5 and communicate with the old stuff running on 4?
I don't want to use any PHP5 on a server together with these PHP4 projects. Last time I installed PHP5 parallel to PHP4: http://marc.info/?l=php-install&amp;m=120272240323007&amp;w=2
PHP is quite easy to learn. It's a C-style language, so for syntax etc. HTML won't help you. But PHP is designed to generate HTML, so you'd have to learn it anyway. There are lots of resources online for learning, php.net is a good start. Pay _very close_ attention to security. PHP makes it way too easy to code an easily breakable web app. It takes some effort to write secure code, make sure you understand how things like XSS, CSRF, SQL injection and such work and how you can counter them before you publish an app. Test your app against any security holes you know of. If you can, have someone else try to break your app. Read /netsec/, /php/ and a couple of php/net sec mailing lists to learn of new attack vectors, bugs,... 
Also, feel free to ask for help in /php/. We're bored as hell in there. And freenode's ##php is a good place to lurk if you're into IRC.
Help is good, doing a proper self.reddit post is better :) Get on ##php, read some tutorials, start following http://phpdeveloper.org/.
Very much so good starts.
I post a lot of questions on [php freaks](http://www.phpfreaks.com). It is a helpful and knowledgeable community.
Having never used wordpress, what makes it so attractive to people?
Could be interesting but for anyone looking for a developed PHP framework you'd probably want to go with Codeigniter or CakePHP. Also, they need more info on their website.
All the best! There are lot of people learning PHP like you. If you want to go all the way to the top, start by looking into MVC frameworks like Zend Framework. But obviously you dont need to if you are starting.
Recess appears to put heavy emphasis on REST services and raw HTTP manipulation. That's about as much as I could glean. There's no code samples anywhere. I agree, they need more useful info on their site. For example, why would I use Recess instead of {X}?
Thanks for the suggestions. We are in the process of getting better documentation and comparisons out. For comparisons sake it's full-stack with an ORM, like Cake, but lightweight with performance like CI. Unlike either it supports multiple applications within a single framework install (like Django) and uses annotations to allow meta-programming used in the ORM and Routing (http://www.recessframework.org/page/routing-in-recess-screencast) 
I heard that frameworks working slower then actual code. is that true? And some people complaining on frameworks. Need 2 know your opinion.
Frameworks add overhead but are useful in speeding up your development and adding consistency. I would recommend learning the basics of PHP well before hoping into a framework. It will make your life that much easier.
I would never even consider starting with a framework because you're comfortable with plain php. My advice is to read online or through a book until you are comfortable with the basics (if/else statements, for/while/foreach loops, arrays, etc) Then how I did it is just think of things that would be fun to code but that are just above your level. As you try to do it you'll be forced to learn more. php.net is your friend for this. I've found that if I don't have a goal in mind for what I want to make, it's very hard to just sit down and memorize function after function. You'll memorize them just by being forced to use them.
Hey perfect timing for this project I'm rebuilding. I've had my eye on your framework for sometime Kris, and very interested in checking out this latest release. Thanks for the quality work, ignore all the misinformed skeptics, I see your vision, and I'm all about it.
PHP is designed to generate HTML? It can output markup to a page but it still treats it as plain text. Any language with a HTTP library can do that.
CI allows multiple applications to run off the same core files "system", if that is what you were talking about.
Thanks! Stay in touch as you're rebuilding, especially if you run into difficulties. Enjoy.
Methinks is troll. 
The PHP Community is fantastic. I know it sounds like a boring RTFM solution, but honestly, my first port of call would be the PHP getting started tutorial at: http://php.net/getting-started And reading the documentation - it is very good and contains lots of examples. If you read the online documentation, the comments section normally contains lots of interesting ways people have implemented the funtion you're reading about; you will learn a lot. Best of luck!
Sure, but it's the typical use case. For example, PHPs page controller design, makes it very easy to do a seamless transition from html to php+html.
[SitePoint forums](http://www.sitepoint.com/forums/forumdisplay.php?f=34) are quite a good place for getting help on PHP.
How about [Textpattern](http://textpattern.com/)?
Perhaps you should describe what features you're looking for in an IDE. It'll make it easier to suggest software that you'll (most likely) like.
With serials.ws, ZDE becomes free.
I've come to really like Netbeans recently, it's not perfect but it's pretty good. 
Errr wouldn't that be http://www.eclipse.org/pdt ?
Purely subjective opinion but think the biggest problem is the lack of eating of dogfood - there's a deb team employed soley to develop the framework... 
I use ZDE at work and Aptana at home. The idea behind Aptana is great, it's got all the features i'd need, plus support for jquery, which is rare in an IDE. The problem, though, is that Aptana is the buggiest, worst, piece of shit, program I've ever used. Whoever wrote this pile of garbage probably never even opened it on their computer and used it. I'm waiting for them to update it, because it's just barely usable right now, the ideas behind the features are great, but apparently they got a retarded monkey to write it.
netbeans is pretty good, really good if you have php installed on your computer. It falls short, however, if you're developing on a remote server. It's stable and predictable which is really desirable in an IDE, so if they ever get a worthwhile ftp feature, they'd win hands down.
God, does anyone else hate passing in arrays of parameters to every method call? PHP needs to get optional &amp; named parameters.
Optional parameters have always been there, but strict order is still enforced, limiting it somewhat. function myfunc(p1, p2=NULL) {}; myfunc(1, 2); myfunc(3); myfunc(NULL, 4); // Ugh
Aaand probably comes with a virus/trojan/worm/spyware. Enjoy! Ok, skeptics, from siteadvisor: http://www.siteadvisor.com/sites/serials.ws/summary/ yes, you have to download something. If you are smart and aware you are probably going to be fine. Somebody you "advise" to go here isn't guarantted to be as educated or wary. 
When you download ZDE from the developers site, and grab simply a serial (no keygen or crack) from serials.ws, where does the virus/trojan/worm/spyware come from?
You can put viruses in text strings now? SWEET!
Well, I like everything about Aptana, so I tried Eclipse's Zend Framework plugin, but it turned out to be a trial (bastards). I suppose the features don't matter, so long as I can get a feel for it.
Aptana only crashes on me when I try to open a file through it. If I drag files into it, it works perfectly. I love it. ;)
I never really got that working on Ubuntu. Windows worked but it was a hassle to set up and proved a bulky installation for just writing PHP (IMO). Don't get me wrong, Eclipse is good, but I personally had troubles and got tired of it. You could try Quantas Plus (Windows/Linux) or Bluefish.
download the all-in-one from here: http://www.eclipse.org/pdt/downloads/ Uncompress into a folder and run. No installation needed. Doing it through the repositories is tricky as Ubuntu's eclipse is outdated.
Does it work with 64bit AMD yet? I think that was my problem last time (architecture wrong).
It never crashes on me, the issues i have are when I open something it doesn't show up in the editor window, it'll either be solid black, or the code from the previous tab will be in it. If i click the "firefox" tab at the bottom, then back to the code, everything is fine. Also, when I highlight text it goes all crazy and unpredictable. Sometimes I can't make a character return... don't know, it just won't let me.
Yeah, lack of named parameters really does nothing good for php. Just a bit of syntactic sugar would do.
This is correct -- trying to get it running on Ubuntu's version of Eclipse is a nightmare. The all-in-one works like a charm out of the gate.
We don't all use Internet Explorer.
X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H* save that as .txt http://en.wikipedia.org/wiki/Eicar
http://i41.tinypic.com/nx466h.png Didn't work ^_^
More people use IE than don't. Don't assume all redditors are like you. That would be ignorant. 
I know, just removing the word 'array' and doing it like Python: $arr = [] or: my_function(['stuff'=&gt;1,'other'=&gt;2]); 
Or simply: my_function('stuff' =&gt; 1, 'other' =&gt; 2); But yes, all we need is an alternative syntax for function calls. I think it has been discussed a few times on php-internals.
IIRC, most redditors don't use IE (someone posted stats about a year ago). It doesn't matter though, I was just making a lame joke at your comment. I didn't downmod you btw. More seriously, I've noticed that anti-virus software and things of that ilk will often flag perfectly legitimate cracking software, so I'm rather skeptical about their 'findings'.
&gt; Given the press coverage the framework has received, I think the framework could’ve done better. It has a sloppy quickstart Oh, that it does. I went through it last week and had to send Zend an email listing things that were wrong with it and fixes for the same (I am a technical writer and a ZCE); I have not received a response...
Yawn. PHP still is and will always be open source, thus freely available. You don't have to buy those Zend products. Nobody forces you. But if a commercial outfit invests money into developing something, they will be charging money for it. Try seeing it the other way around. The commercial products allow Zend to invest into PHP and the community. It allows Zend to promote PHP in the Enterprise world.
Yeah, like Zend doesn't get any e-mails and is just waiting for yours.
Indeed. Granted I think a lot of their stuff is silly and worthless, far be it from me to stop Zend from selling to corporate suckers. I do have to point out that when it comes to international PHP conferences, in my experience ZendCon has been the cheapest to attend. And grats to them for pushing certs, and keeping them cheap. $150? Not bad, not bad at all.
goto? Ha, ha, ha. I know this is the php reddit (from which I'm now unsubscribing) but ...
I have never found myself writing some PHP code and thinking "you know what, a goto statement would be nice!"
Every new release I secretly hope to read "...oh, btw, we fixed all those stupid inconsistencies with function names and arguments . Sorry for taking so long."
I think it's been requested since the dawn of PHP. Many other scripting languages have "goto" in some form or another. I've lost count how many times I've seen people come from other languages and ask how to do "goto" in PHP, only for people to respond, "you don't".
I spent more time looking at his over-designed blog interface than I did reading the post.
Why would you **secretly** hope for that?
&gt;One possible use case for gotos is for breaking out of deeply nested loops and if statements. FYI break (with a numeric argument) already does this, although not for IF statements.
 &gt; One possible use case for gotos is for breaking out of deeply nested loops and if statements. This will make the code much clearer to read. Really‽ gotos? easier to read? WHAT Isn't that like saying "You know what will make this broken leg better? Plaid Spandex Pants!"
Because it's absurd to think that something like that could happen. It seems they are much more focused in more important and popular things, like GOTO.
This is what i love about PHP, tons of great stuff built right in. I've thought about changing programming languages but Python and Ruby lack descriptive functions like: xsl\_xsltprocessor\_transform\_to\_xml() 
... don't touch that computer keyboard?
Because you're already using PDO in your project, and rather than going through and replacing all your existing code you can just replace a single line. I'm interested in details about ADODB's logging support though. Have you got a link?
[No, it's not](http://kerneltrap.org/node/553/2131).
I did. I even looked in the ADODB manual. I can't find anything about ADODB support for query logging or profiling. That's why I asked for a link.
Believe the primary reason for goto in PHP is for parsing, in particular generated parsers. goto will make is possible to jump from one section of a loop to another, avoiding the need for function calls, which are expensive by comparison.
Thanks for the link. There seems to be some really useful functionality there. It's quite different from what the LoggedPDO class is trying to achieve though.
You're right, I haven't done much development in C, but why is this needed in PHP? I have done a lot of development in other languages and never once come across a situation where a goto was the best answer, except maybe basic. Then again I don't do much low-level programming, I can imagine it's useful in situations like that... which I would hope no one ever does in PHP.
 $ grep -r 'eval(' codeigniter/ | wc -l 20 Version 1.7.1. From the changelog: *Fixed an arbitrary script execution security flaw* Well, who would have expected that? EDIT: Changed pattern from "eval" to "eval(". (24 -&gt; 20 hits)
24 isn't as many as I might have guessed. Still ... call-user-func (s/-/_/g) is almost always preferable if you need to do metaprogramming.
Though if you look at the hits, it includes stuff in comments, inside function names like serializ**eval**() and Javascript. By my count there are two actual eval() calls and they are on opposite sides of an if/else and each has no variables to exploit: if ( ! class_exists('CI_DB')) { eval('class CI_DB extends CI_DB_active_record { }'); } 
good method but use only when you **really** need to check if the mailbox exists. This is not a substitute to regex email validation.
A stupid idea that you should never use, because big mail services count incomplete sessions per IP and adjust the netblock reputation accordingly. Moreover, for the servers that are *not* configured to validate the recipient (for example, the recipient isn't local, or the receiving server is a proxy), this check will consistently return false positives. In other words: if you use this, you get nothing but they ban your IPs.
That's verification, not validation. http://www.hm2k.com/posts/what-is-a-valid-email-address
This is a truly stupid way to check to see if an email address exists. It assumes it is talking directly to the primary MTA. A domain can have multiple MX records. If the primary MTA is down for whatever reason, the secondary could be queuing up emails - and not doing a email address validation.
Perhaps your tone could've been better (i.e. not starting out with "this is stupid..."), but you and MikeSeth should not be getting downmodded. There are many reasons that this sort of thing won't work, and is bad for the internet. Heck, a common antispam practice is (or at least used to be - I'm not as up on it as I once was) to not allow remote "checking" of the existence of a given address@domain...
Many mail servers also don't allow SMTP e-mail validation. This same technique is used by spammers to try to identify valid e-mail addresses at a specific domain. 
Agreed. It's a plain bad idea. A better way is to require e-mail verification and if that isn't completed in a specific time frame, delete the original user record automatically. 
Or better yet, changing the ownership of the script files so that even if the web process is compromised, it cannot modify scripts. It's amazing how many elaborate systems are being proposed to compensate for crappy program design. 
upvoted just for the rebuttal comments.
I can't figure out if you're being ironic here? But just in case you aren't, [here's the regex to validate an email address](http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html).
I already reinvented the wheel with my own table editing and listing tool. Now, I'm checking out phpMyEdit and it looks pretty versatile, although I think it currently lacks the ability to upload files/images. What are you using to automate the administration areas of your PHP websites?
Roll your own... PHP is mad simple. * [mysql_connect](http://php.net/mysql_connect) * [mysql_query](http://php.net/mysql_query) * [mysql_fetch_array](http://php.net/mysql_fetch_array)
ssh, bash, vi
Microsoft Visual SourceSafe and Visual Studio 2008.
mysql -l root -p 
Your mad right bro, PHP is EZ. Thanks 4 the functions!!111
Looks like its geared towards users, you can set it up so that your content editors can edit a particular table.
Re-writing code instead of reusing is teh evil
Right on, man. We don't need all these keystrokes and their carbon footprint ruining the environment. 
I rolled my own and have been continuing to develop it. Works well, does images/files, lets you edit multiple records at once, re-order records, and has built-in relational table support so, for example, products can be put into one or more categories.
Ouch. Seems the PHP reddit has a sarcasm threshold of 0.
I can only imagine what constitutes "reusing" for you.
My company uses a custom framework that we continually add features to. The admin is built-in and integrates well with the rest of the system. The advantages of the integration are huge. For example, both the front-end and admin go through the same data validation code so they're guaranteed consistent. For CMS sites the admin can view a preview version of the front-end. Etc. And since it's custom we know it inside and out and customize per client if needed.
Navicat
sequelPro for mac is amazing for visual administration of sql databases.
Symfony's admin generator
xampp control panel and ssh/ftp if necessary.
I use this on my computer all the time. My only complaint is that, at least with the HTML version, there is no stylesheet.
you can set a url to the manual (i think it's in php.ini), so when you get an error in your code, the error text can link to your local copy rather than the online version
I don't believe that let's you do things like localhost/mysql_connect which would rewrite to the mysql_connect function page. By mirroring, you get all the functionality of the actual php.net manual.
If you're a commandline junkie, see also : [PHP Manual CLI style 2.0](http://www.sitepoint.com/blogs/2007/11/28/php-manual-cli-style-20/)
pacman -S php-docs ;D
anyone use it before? might take it for a spin later tonight
I've used it extensively and really like it a lot. Everything seems well thought out and elegant -- sometimes rare in PHP! The coolest parts are the routing and models in my opinion. The primary drawback is that it is still young and missing some convenient but non-essential features.
cool man, been using cakephp for a bit, got no complaints w/ it, but might as well 'shop' around at the different open source frameworks 
I downloaded the file, changed the reces-config.php file to match my local database and when I fire it up I get this error: Fatal error: Uncaught exception 'DataSourceCouldNotConnectException' with message 'could not find driver' in /Users/josh/Sites/recess-v0.11.1/recess/lib/recess/database/pdo/PdoDataSource.class.php:51 Stack trace: #0 /Users/josh/Sites/recess-v0.11.1/bootstrap.php(105): PdoDataSource::__construct(Array) #1 /Users/josh/Sites/recess-v0.11.1/bootstrap.php(13): RecessConf::init() #2 {main} thrown in /Users/josh/Sites/recess-v0.11.1/recess/lib/recess/database/pdo/PdoDataSource.class.php on line 51
Have you used CodeIgniter? If so, how does it compare?
Josh, it looks like you don't have a PDO driver installed for Sqlite or Mysql. You can check this with &lt;?php phpinfo(); ?&gt; Sounds like you're using MySql. The installation of PDO varies based on operating system but the official docs have some information http://us2.php.net/manual/en/pdo.installation.php Be encouraged to drop in the Recess IRC channel or e-mail me directly at kris@recessframework.org 
You've done a great job on this framework, I've got one question though: How much overhead is generated through the use of Annotations for routing and tagging?
In development mode there is a lot of overhead, as you can imagine. The annotations are parsed every run. In production mode, though, the data-structures which the annotations build up (like the Routing Tree from controllers) are cached after the first run so that subsequent runs avoid the overhead. This is how Recess is able to outperform other PHP frameworks.
Definitely the most fun I've had working with any PHP framework :)
I've known [Propel](http://propel.phpdb.org/trac/) and [Doctrine](http://www.doctrine-project.org/), can't recommend any because never really used them long enough as to have a solid opinion. in any case I liked more Doctrine than Propel, since seemed to be a bit more flexibe/scalable but both were quite green at the time I tried them, some bugs here and there, the usual. and no, it wasn't via [Symfony](http://www.symfony-project.org/) it was a standalone implementation.
For a stand-alone ORM I would say you are best off with Doctrine. It's very well designed and feature-rich. 
I wrote one from scratch as part of the "Proton" MVC framework at Simplified.org (a previous employer). The ORM can easily be copied from the rest of the framework and used by itself. It's really just a few class files (Table.php, Record.php, Recordset.php, et al). Now as for "solid". Heh...no. They didn't pay me enough for solid. Edit: Direct link: http://www.simplified.org/trac/browser/proton/trunk/extension/Proton
o/ Doctrine FTW 
I've used Doctrine and loved it, read Propel was a lot more difficult to use.
ORMs are horrible because (1) SQL is not difficult, (2) not everything needs to be object-oriented, and (3) adding a new layer of abstraction where it's not necessary and appropriate is one of those things that developers like to do in the midpoint of their career, before they've reached the level of wisdom and judgment that simplicity is almost always better than overengineering.
Parsing an INI file isn't difficult either, but people wrap that code in classes all the time. It's not horrible, and its not over-engineering. It's a fucking library, and libraries are not over-engineering. If you think they are, you are not old and wise, you're an elderly, delusional fool suffering from Alzheimer's. Don't repeat yourself. Don't mix languages. Don't mix abstraction levels.
I use Doctrine exclusively at work but I've run across many things that should be fixed/could be better but thankfully Jonathan Wage is quite open to community feedback.
If you're looking for a heavy duty solution, I'd go with Doctrine (or Propel) as suggested already. However, if your use is light to modest, I'd *highly* suggest http://code.google.com/p/datasourceorm/ Code is beautiful: $macBookAir = new Product; $macBookAir-&gt;setName('MacBook Air'); $macBookAir-&gt;setManufacturer('Apple'); $macBookAir-&gt;setColour('white'); $macBookAir-&gt;setType('subnotebook'); $macBookAir-&gt;save(); // this is committed using an INSERT query ... and works right out of the box (recognizes your schema automagically).
Aren't any of these ORM's using PDO? I use MySQL, Oracle and Postgre on daily basis, and really hate it when I can't use the same methods on anything else than MySQL. Common writers! It's 2009, FCOL!
PDO-based framework? Could it be? I'm still looking for something that I can apply to Oracle, PostgreSQL and MySQL... I'm going to take it for a spin.
Here's a good comparison between Propel, Doctrine and sfPropelFinder: http://redotheweb.com/2008/07/08/comparing-propel-doctrine-and-sfpropelfinder/ 
http://www.doctrine-project.org/documentation/manual/1_0/en/introduction-to-connections doctrine supports plenty of rdbs
I still don't get it. Why would I let my end users go to a Settings link in my PHP website and let them override the DSN? Not only is that a security risk, but it's a great way for the end user to break their experience with my website. Why would they even understand how to do this? Or does he mean the hosting administrators?
I meant the user installing the (distributable) PHP application. I thought I made this clear by listing an example, and by suggesting the configuration be entered into the `php.ini` file directly by "the user". PHP applications you write for your own use on your own servers aren't relevant. Once you distribute for others to install and use, they become relevant.
I'm sorry I didn't explain it well enough for you to understand the problem. I thought PHP was very good, and directly pointed to it in describing web progress. The problem affecting me here isn't a technical problem, it's a social problem. PHP developers who distribute PHP applications go through unnecessary contortions because the PHP function library, and the PHP documentation suggest that these contortions are somehow *better* than the simpler method that serves everyone. How exactly do you make PHP developers use the *good* operations (like `mysql_connect()` with no arguments) and not the *bad* operations (like making a wizard that asks for the database username, password, and server name) without also making good uses of the bad operations (like PHPmyAdmin) impossible?
I think I understand what you want from the comments that you left here (not really from the blog post), which is that devs should have an option to use the INI-supplied parameters instead of requiring them to be entered into some .php in the application. That title is way to harsh and not realistic though. Nobody likes a PHP developer because of some niche preference, which I have never seen mentioned before? You're just being incendiary. 
public static function get_files($directory = ".", $extensions = false) { $files = array(); if (is_dir($directory) &amp;&amp; $handle = opendir($directory)) { while (($file = readdir($handle)) !== false) { if ($file != "." &amp;&amp; $file != "..") { // Skip the reference to current and parent directory $info = pathinfo($directory . "/" . $file); if (!$extensions || in_array(strtolower($info["extension"]), $extensions)) { $files[] = $info; } } } closedir($handle); } return $files; }
Stack Overflow [just did this](http://stackoverflow.com/questions/624120/is-it-possible-to-speed-up-a-recursive-file-scan-in-php/624188)
The new __invoke() method is definately FTW IMHO. PHP is all about teh win.
So, instead of traits we get \bunch\of\hacks?
5.3 was too large already, sorry. next stop is 6.0, hopefully, and it will have traits 5.3 is about: closures, namespaces, mysqlnd, speed and stability
new static stuff is also great
SPL gives us DirectoryIterator and RecursiveDirectoryIterator.
Great stuff. I'll be installing this soon. I kinda hate stepping through debug backtraces with macgdbp
I can't decide what's worst. Being enthusiastic about PHP, using "FTW", misspelling "definitely", using "teh", or using "win" a second time. In aggregate, these should be punishable by death.
I accidentally in your base
Been there, tried that - problem is runkit is too unstable - expect segfaults
not so sure i agree with returning actual code in the response and then executing it on the client side. he doesn't use "eval" (though he mentions using it) but does create a function directly from the response code. it's not a good idea to rely on directly execute code from responses.
Agreed - This sounds like a recipe for some serious mess. Separation of model and presentation is a good principle to follow.
No, it's not XML parser. It's *bunch-o-stuff-between-brackets* parser. XML parser needs to support comments, CDATA sections (possibly with tag-like constructs in them), entities, processing instructions, and attributes containing apostrophes. And that's even before enforcing well-formedness...
Here's one I wrote, but it requires somewhat simplistic XML. Your mileage may vary. public static function XML2Array($s) { preg_match_all("/(&lt;([\w]+)[^&gt;]*&gt;)(.*)(&lt;\/\\2&gt;)/", $s, $asMatches, PREG_SET_ORDER); $asItems = array(); foreach ($asMatches as $sVal) { $oItem = (object) array(); $oItem-&gt;Full = $sVal[0]; $oItem-&gt;Before = $sVal[1]; $oItem-&gt;Tag = $sVal[2]; $oItem-&gt;Value = $sVal[3]; $oItem-&gt;After = $sVal[4]; array_push($asItems, (array) $oItem); } return $asItems; }
I always like to see new frameworks for php, but i must say - i have found cakePHP and am totally used to it. developing apps in it is very comfortable and second nature in it. The question is: what does Recess offer compared to a framework like cakePHP that is well established and growing?
pfft! *If it walks like a duck and quacks like a duck, I would call it... a dynamic language* :/
How can this article hover on the front page for 18 hours, without a single comment? What's it about, anyway? Edit: okay, and overview of what an application in the cloud would look like. Why do I get the feeling that anything lost in "the cloud" will be lost forever? Maybe one day in the future, archaeological teams will run around the cloud and dig out old pictures and applications that the owners had lost track of. That is, if those items don't cluster together and become sentient first.
Even better, there doesn't even _have_ to be an MX record. In which case, mail should be delivered to the A record. Why do people always make that mistake? It's clearly in the RFCs.
that's a lot of choices. anyone have a favorite?
Where is [Kohana](http://kohanaphp.com/) :(
I haven't really spent much time with many of those frameworks except for CakePHP, which I rather like.
[agavi](http://www.agavi.org) The kind of stuff I do is impossible with conventional frameworks (and I have ranted extensively about their poor implementation of MVC as architectural design pattern).
I'm a huge fan of [CodeIgniter](http://codeigniter.com). Easy to extend and not too much magic going on. It's slim.
I used to be as well, but now that I know more about MVC, I'm not too happy about how it implements activerecord. Then again, for high traffic sites, you probably want to do prepared SQL statements I'd guess.
CakePHP really made my work a lot of fun. Great powerful framework. The only disadvantage is, it takes time to learn, and it's development goes very fast so the documentation (other than API) quickly becomes outdated.
then Agavi is right for you :P
I've actually given up on PHP for the time being and moved onto Python (django) :P
Skip the bull and go straight to Clojure.
I actually like Python. I'm not a computer scientist, but rather an engineer. I prefer number of available libraries over 'theoretical correctness'. Not saying one is better than the other, but I just prefer the former.
Python is awesome, no question about that, but it too has quirks. I couldn't bring myself to learn it.
I'm slightly biased, since I wrote it, but I still think [Konstrukt](http://www.konstrukt.dk) is superior to the so-called-mvc-frameworks around. Then, I'm mostly writing web applications, rather than cms-systems, which probably changes the game a bit.
did you see simplexml? http://docs.php.net/simplexml
First: You can't use regular expressions to parse an irregular language. Try stuffing this to your "parser": var_dump(xml2array("&lt;xml foo='O\\'Reilly' /&gt;")); Not what you'd expect, is it? Second: There may be few lines, but it's slow. The built-in parsers, based on xmllib are magnitudes faster, being implemented in C. Just for the sake of it, I benchmarked this function against SimpleXml (One of the default included parsers with PHP). I made 1000 runs, parsing the first result[1] I got when googling for *sample xml*. The results were 9.6 vs. 0.5 - That's a factor of 19. Plus it works. [1] http://msdn.microsoft.com/en-us/library/ms762271(VS.85).aspx
seems a bit basic but kudos anyways.
I'm going to end up interviewing some people for a few php development positions, but I'm coming up short on good interview questions that will let me know if the person knows their stuff or just lied furiously on their resume but knows some basics. Anyone have some good experience with this? Any help is greatly appreciated! Related questions dealing with MySQL, JS, CSS, XML, etc are fine too. **UPDATE** Here is what I have put together so far. Keep in mind that the interview is a phone interview and they will work remotely. The job was posted on craigslist, so the quality of applicant is all over the place. These questions I think give me an idea of where the applicant's strengths lie - they are not intended to be asked as is, but are just a reminder of topics to ask about. I don't expect them to answer all of them correctly of course. I also stayed away from OO questions because just about every code monkey can give the basic answers for that these days. Let me know if you think any are flawed and why... -------------------- **Language Related** 1.How do you think PHP compares to other similar languages? 2.Describe a PHP project you have worked on recently, and what you learned. 3.Explain what magic quotes are, and if you think it was a good idea or not. 4.What's the difference between == (two equals) and === (three equals)? 5.What PHP functions you use the most, and what do you use them for? 6.What is the difference between require_once(), require(), and include()? 7.What is the effect of prefixing a function with an @ symbol (e.g. unlink() and @unlink())? 8.What is the difference in using single quotes or double quotes for a string? 9.What is the “try” command used for, and how is it limited in PHP? 10.What is inheritance and can you give an example of when it could be used? 11.What is php “safe mode” used for, what are it's pros and cons? 12.Why can PHP not set headers after using echo? **Security Related** 1.What is password salting, when should it be used? 2.What is the md5() function good for? How can you undo what it does? 3.What is XSS? How can you safeguard your code from XSS attacks? 4.What is SQL injection? How would you protect against it? 5.What is PHP Remote-file-inclusion? **Database Related** 1.What databases have you used, and what are your opinions of them? 2.What are indexes used for? When should you use them? 3.What does it mean to normalize a database? Why is it important? 4.What is a JOIN and what kinds are there? 5.What is a transaction, and when would it be useful? 6.What is database abstraction, and have you used any specific libraries for this? **Web Related** 1.Explain why CSS is important. 2.How would you make the website get data from the database without reloading the page? 3.What is jQuery and what types of things would you use it for? 4.What is the difference between HTTP and HTTPS, when should the latter be used? 5.What is the difference between server side and client side? **General Programming Related** 1.What is a code repository used for, and which ones have you used? 2.What OS do you program on? What IDE or text editor do you use for PHP? 3.What are design patterns and which ones have you used if any? 
"Show me how you'd use PHP to prevent Cross Site Scripting (XSS) on a comment form." XSS is a serious problem on the web, and this is a practical question that shows a general level of savvy, plus requires some knowledge of practical PHP.
* What does it mean to normalize a database? * What is SQL injection These two questions should tell you if the person is experienced at all in PHP/Security issues. They are things you can probably teach in a day though, so I wouldn't say "anyone who answers these wrong" is off the list.
I posted the pre-interview questionnaire I give when I do interviews on scribd [here](http://www.scribd.com/doc/14197117/Interview-Questions-for-a-PHP-Developer). I use the above test more as a gauge as to where they are in terms of knowledge of web development. A lot of my PHP questions are shady, and some of them depend more on how up to date you keep on news than what you've actually programmed. As far as non programming questions go I would ask about community involvement, what frameworks they've used, what other programming languages they've used as well. For purely PHP questions I used to ask: * What is the major difference(s) between PHP 4.x and PHP 5.x? * Name a language feature being introduced in PHP 5.3 * What is the difference between require_once(), require(), and include()? * What function would you use to redirect the browser to a new page? a. redir() b. header() c. location() d. redirect() * What is the LITERAL output of the following script? &gt; //returns string 'true' when $bool is true, 'false' when not &gt; &gt; function tf( $bool ) { return $bool == true ? 'true' : 'false'; } &gt; &gt; $a = "5"; &gt; $b = 5; &gt; &gt; echo 'Line 1: ' . tf($a == $b) . "\n"; &gt; echo "Line 2: " . tf($a === $b) . '\n'; * What is the effect of prefixing a function with an @ symbol (e.g. unlink() and @unlink())? * What is the security flaw in the following line of code and how would you fix it? Use the back of the page if necessary. &gt; $sql = "UPDATE products SET `name` = '" . $_GET[‘name’] . "', `price` = '" . $_GET[‘price’] . "' WHERE id = " . $_GET[‘id’] . ";";
Q: When working with strings, which is more efficient single quotes (') or double quotes (")? Why? Q: When working with forms, which variable is better to use: $_GET and $_POST or $_REQUEST Why? Q: Correct all the mistakes in this code according to PHP5 specifications, make sure it properly outputs the word "hello": class { $my_variable; function __construct($str) { $my_variable = $str; } } $object_variable = new simple_class("hello"); echo $object_variable=&gt;$my_variable; Q: Correct any/all mistakes in this query: SELECT username, email WHERE id = "1341" FROM users ORDER BY username ASCENDING LIMIT 1; Q: What is the md5() function good for? Name a few uses. Q: What is password salting, when should it be used? Q: If I have a string that has line breaks (\n) in it, and I want to convert the string to html with proper line breaks (&lt;br /&gt;), what would be the simplest way to do this? Q: When should print_r() be used? Q: What's the difference between == (two equals) and === (three equals)? Q: What is XSS? How can you safeguard your code from XSS attacks? Q: What's wrong with this code? $users = mysql_query("SELECT username FROM users WHERE id = '".$_GET[id]."'"); Q: Give an example of when to use references in a function. Q: If I want to declare a constant variable, what function should I use? What can constants variables be used for? Q: What are indexes used for in mysql? When should you use them? Q: Create a function that will covert the timestamp "1101166483" into the formatted date "January 3nd, 2008 4:34pm" (date and time will not be the same). Q: What's the easiest way to read the contents of a file into a variable? What if the file is very big (more than 100mb)? Q: How can I check if a variable exists? Q: A user loads myscript.php, I want the user's browser to be redirected to myotherscript.php, how can I do that? 
IMO any questions about specific language features or syntax are not worth asking - anyone who can program can get the basic syntax right, and any half-decent programmers will check the syntax before doing anything complicated. Asking questions about specific versions or functions is also a waste of time - that's the sort of stuff that good programmers don't bother keeping in their head because it's dead easy to look up. Instead, they keep a sense of what's available in the PHP libraries and look up the details when necessary. If I were interviewing for a PHP position, I would ask the candidate to describe a PHP project that they had worked on, briefly, what they learned from it both in terms of the language and the art of programming - any programmer who is halfway engaged and interested in what they do will be able to relate a few convincing anecdotes that show you that they really do know their stuff. I would also be far more interested in picking someone who is obviously smart and hard-working than someone who knows the language - PHP is rarely used for anything that is a real programming challenge, and it's easy enough to learn for anyone who's worked with any sort of block-structured language before.
&gt; Q: If I want to declare a constant variable, what function should I use? What can constants variables be used for? "constant variable" is an oxymoron. Unless you're planning this as a trick question and/or give bonus points for candidates pointing this out. In which case, carry on.
I should change that, it should read "declare a constant". I do that because people sometimes get confused as to what I mean..
Do not ask syntax/API related question. Ask questions like: * What do you like about PHP? * What don't you like about PHP? * What Language features do you miss in PHP, compared to other languages? Go into details and don't be satisfied with simple awnsers. 
Q: Do you like to cut yourself?
No demo page? Also, it looks like your site's tabs hover in mid-air in firefox/linux. 
As a future applicant, can we have the answers to these posted questions as well?
Most of these questions are spot on and should definitely be answerable by most candidates, especially the security ones; if they don't know about simple SQL injection (Q10) or how to sanitize properly (*cough* twitter *cough*) then they're probably bedroom coders and not worth hiring. However, I don't believe asking individuals to remember exact syntax (Q3) is that beneficial; although if you feel you have to, at least give access to the PHP docs/Google - any decent programmer will look up exact syntax before they code anyway, especially if they're used to working with/know different languages.
Couldn't agree more, pretty much said the same thing above (in reply to neoform) and now feel like a copying fool :p
If that is your attitude now then you may as well not bother tbh. Look them up yourself and you'll learn 10x more and feel more confident to do the same in the future when you inevitably come across a problem you cannot immediately solve. 'Remembering' and 'knowing' the answers are two very different things imo.
Knowing basic class syntax is pretty important in my opinion, since class based php programming is important. That example I wrote has 4 errors, all of which will report either notices or errors in php. Proper coding means 0 errors/warnings/notices.
&gt; .. questions that will let me know if the person knows their stuff or just lied furiously on their resume but knows some basics. Maybe I'm blissfully ignorant, but is it really necessary to do that sort of filtering? Wouldn't it show up very soon, if they lied?
ack. i've been a professional php developer for more than 10 years now and still have to look up lots of syntax. it's really not that important to remember all the details, you got php.net for that. basic knowledge about xss, sql-injection and basic sql syntax is a must, though.
I think he's joking.
&gt; Q: When working with strings, which is more efficient single quotes (') or double quotes (")? Why? The difference is much less significant than it used to be. On top of that, there's only a difference at compile time: that is, either produces the exact same opcodes (so, the compile time difference is mitigated by using an opcode cache that compiles once for multiple requests). Any developer that worries about there still being a difference is guilty of premature optimization.
They will work remotely, it will be a phone interview, and the positions were advertised on craigslist. Need I say more? 
that's still minor, the developer will figure that out very quickly and probably not do those mistakes again. Theory behind programming is much more important. If someone doesn't know why x works, other than 'I copy+pasted some code' then they are not worth the job.
Actually I would be interested in seeing what the interviewer would consider ideal answers to a number of these. I can pretty easily answer them all, but it would be nice to see what is considered an acceptable level of detail.
The answers just need to be enough that you know what I'm talking about... If I mention database normalization, don't start talking about making text in a table be formatted a normal way for instance. The questions are designed for me to gauge a person's level of knowledge and their ability to figure things out. Unfortunately for me, it will be phone interview only, so I have to test the former more than the latter. EDIT: On the other hand... I guess I could ask a really hard question and tell them to google the answer as quickly as possible to see how well they can find answers on their own... do you think that is fair or ridiculous? 
True enough, but the parent didn't say whether he was hiring a newbie programmer or someone who's supposed to know/understand php. A seasoned PHP programmer should not be making such mistakes.
Speed aside, they're treated differently. In python " and ' are identical, in PHP they aren't. In general I wrote that quiz to see if an applicant knows/understands PHP.. the more correct answers they can provide, the better.
A: Now, would I use PHP if I didn't?
Interesting... But it needs a better documentation, examples like liquidpele said.
Upvoted for "ack".
Thanks for the suggestions. I am working on adding some more examples and a "quick start" in addition to the API reference.
Exactly, I'd hire the developer who rewrote a big for () { for () {} } into a 1 level for () {} or better. Over some one who swapped "" for '' to save 1 cycle.
Ah, er, in fact, that is the the way it is supposed to look. :)
I honestly don't agree. Writing out code by hand is a worlds difference away from typing with a keyboard. There's stuff that I do instinctively on a keyboard that I would probably forget on paper (such as closing lines with a semi colon, automatically closing braces etc). It's like remembering my passwords, give me a keyboard and I can rattle out a 10 char random pass, give me a piece of paper and tell me to write it quickly - can I fuck.
ah.
If someone shows you bad code, you shouldn't need a keyboard to spot the errors.. you should be able to see it without a computer at all. The example given was 7 lines long..
I would stand up and leave immediately after hearing the 1st question. 
`s/sanitize/escape/`
 &gt; Q: Create a function that will covert the timestamp "1101166483" into the formatted date "January 3nd, 2008 4:34pm" (date and time will not be the same). That's a crap question, who remembers the whole list of formatting options you can give to date()? I certainly can't - I wouldn't have a need to when the manual page is always there.
When I give this test, I let people use a computer/internet. Yes, people can look up the answer.. but, isn't that the point? Programmers are always able to look-up/research something they don't know, it shows their ability to find the needed info. FYI, I have most of them memorized.
Hey, I was able to mentally answer all but one of the questions, and correctly too. I won't bore you with my answers though... A question along the lines of "What is Output Buffering" would be good too. Maybe something about XML parsing or cURL?
I have the basic ones memorized, but I generally refer to the manual for anything beyond days, months, and seconds.
Heh, output buffering is my biggest turn off in PHP. I hate that you can't turn off the OB without killing the script.
&gt; Explain what magic quotes are, and if you think it was a good idea or not. The proper way to handle servers with magic quotes: if( get\_magic\_quotes_gpc() ) { header("HTTP/1.1 301 Moved Permanently"); header("Location: http://www.youtube.com/watch?v=oHg5SJYRHA0"); exit; } &gt; What's the difference between == (two equals) and === (three equals)? The latter is "more equal" than the prior. &gt; What is a transaction, and when would it be useful? Sending me money after I do your coding work... &gt; Explain why CSS is important You've got to make Microsoft look bad somehow!
What do you mean?
Say I want the script to continue running after I'm finished sending output to the browser.. You can't do that. The output buffer stays active until the script has completed. Which means the user continues to see the "loading" icon spinning in his browser.
I'm gonna stick to my own form-builder framework... 
Yes sorry, I was mostly talking about writing things out from scratch rather than spotting and correcting errors in already written code.
Thank you for elaborating. I'm not sure whether this is a PHP problem or a server issue. Can you do this from mod_perl/python/ruby? I'm assuming mod_php since (f)CGI can't possible support this.
It's a PHP flaw (feature?) You can obviously do it with Python and Perl, not sure about Ruby.. Using different mods for php wont change that this can't be done.
"magic constants" which behave differently depending on where they're used? sounds more like an oxymoron to me.
 ob_end_clean(); header("Connection: close"); ob_start(); echo 'Hello world!'; $size=ob_get_length(); header("Content-Length: $size"); ob_end_flush(); flush(); sleep(10); $f = fopen('test.txt', 'w'); fclose($f);
Yes, that's the only possible way to do it. But manually running the buffer is slower and very annoying. php should not limit your ability to shutdown the OB without having to run it manually.
That is hardly a regular expression match - it is just an initial-characters string match.
The point is being able to define your URLs rather than /class/method like most PHP frameworks use/have.
"Phorms", really? In light of the whole "Phorm" thing [(http://en.wikipedia.org/wiki/Phorm)](http://en.wikipedia.org/wiki/Phorm), this is a seriously bad choice of name...
That's probably one of the worst ideas I've heard in a while! Total release / upgrade management fail.
Please for the love of dog don't. Just DONT.
cant upvote MikeSeth and evertrooftop enough thats just a bad idea ... plus if you wanted to do it should have used reflection instead of preg_match to get functions and so on
$showRightColumn &amp;= JRequest::getCmd('layout') != 'form'; $showRightColumn &amp;= JRequest::getCmd('task') != 'edit'; I'm not sure if the behavior of the function matters, but I basically want to know what the &amp;= operator is doing. Anyone have any idea?
It's "bitwise and" + assignment. The expression on the right is evaluated first. So it goes like this: Is JRequest::getCmd('layout') != 'form'? TRUE or FALSE now AND that with the previous value of $showRightColumn, and assign the result to $showRightColumn 
You are thinking of '=&amp;', not '&amp;='. jellicle was correct about the bitwise-and.
My mistake, I deleted my reply so that he would not be led astray. 
That seems pretty elegant, if slightly obscure. 
Wow, that's pretty amazing. I had no idea that nifty bugger was available! So, basically, it's a horizontally cleaner way of saying: $var = (this() &amp;&amp; that() &amp;&amp; the_other()); Instead I could say: $var = this(); $var &amp;= that(); $var &amp;= the_other(); (Obviously this example isn't as elegant as it could be, but is this the gist?)
Appreciated. That's what I was confused about too. I knew that references were always put after the equals sign, but I still couldn't wrap my head around how those could possibly be references. Crazy that I've never known about this!
Not quite - you are confusing the bitwise operator `&amp;` with the logical operator `&amp;&amp;`. The latter operates on booleans and will thus convert its arguments into booleans beforehand. The former first converts its operands into ints. Consider the difference: $a = 12 &amp; 7; $b = 12 &amp;&amp; 7; var_dump($a, $b); yields: int(4) bool(true) (Note that `$a` is `0x1100 &amp; 0x0111 = 0x0100`.) But by luck, your example would work, as `0x0000 &amp; $x` is always **`0x0000`** and `false &amp;&amp; $x` is always **`false`**, and `(bool)0x000 == false`. Functionally, the only difference would be that $var would be a `bool` in the first case and an `int` in the second. And please, if you are ever tempted to use that latter example in practice, use temporary variables instead. **Edit:** I retract my claim that your example would work. Consider this counter-example: $var = this(); // this() is int(1), $var is int(1) $var &amp;= that(); // that() is int(2), $var is int(0) $var &amp;= the_other(); // the_other() is int(2), $var is int(0) Note that `0x0001 &amp; 0x0010 == 0x0000` and `0x0000 &amp; 0x0010 == 0x0000`. 
You just completely blew my mind. haha. I think that I need to study up on binary arithmetic before I even attempt to understand how this works. As of now, I can't think of a practical example of where I would use this, but I think that's just because I don't fully understand. **EDIT** - Okay, so I think I'm catching on a bit. 0x1100 = 12 because 8 + 4 = 12. So 0x1100 &amp; 0x0111 compares each bit and returns the values where both are true. Conversely, 0x1100 | 0x0111 would return 0x1111 (15) because the values exist in one or the other. Is this correct?
Oh, no worries :) Check out this table from the [php manual](http://us.php.net/language.operators.bitwise): --------- --------- -- --------- result value op test --------- --------- -- --------- Bitwise AND ( 0 = 0000) = ( 0 = 0000) &amp; ( 5 = 0101) ( 1 = 0001) = ( 1 = 0001) &amp; ( 5 = 0101) ( 0 = 0000) = ( 2 = 0010) &amp; ( 5 = 0101) ( 4 = 0100) = ( 4 = 0100) &amp; ( 5 = 0101) ( 0 = 0000) = ( 8 = 1000) &amp; ( 5 = 0101) Bitwise Inclusive OR ( 5 = 0101) = ( 0 = 0000) | ( 5 = 0101) ( 5 = 0101) = ( 1 = 0001) | ( 5 = 0101) ( 7 = 0111) = ( 2 = 0010) | ( 5 = 0101) ( 5 = 0101) = ( 4 = 0100) | ( 5 = 0101) (13 = 1101) = ( 8 = 1000) | ( 5 = 0101) Bitwise Exclusive OR (XOR) ( 5 = 0101) = ( 0 = 0000) ^ ( 5 = 0101) ( 4 = 0100) = ( 1 = 0001) ^ ( 5 = 0101) ( 7 = 0111) = ( 2 = 0010) ^ ( 5 = 0101) ( 1 = 0001) = ( 4 = 0100) ^ ( 5 = 0101) (13 = 1101) = ( 8 = 1000) ^ ( 5 = 0101)
Okay, I think I get it now. Just trying to wrap my head around a practical example... =) Although, it looks like the code in my original example was kind of being used as a relational comparison: $showRightColumn = $this-&gt;countModules('right'); $showRightColumn &amp;= JRequest::getCmd('layout') != 'form'; $showRightColumn &amp;= JRequest::getCmd('task') != 'edit'; Since each line is returning a single bit (0 or 1), it's using this to its advantage to determine if all of the results were true. Is this correct or am I misinterpreting again? **EDIT** - Upon further investigation, I've concluded that this code serves absolutely no purpose. See the full example below: $showRightColumn = $this-&gt;countModules('right'); $showRightColumn &amp;= JRequest::getCmd('layout') != 'form'; $showRightColumn &amp;= JRequest::getCmd('task') != 'edit'; if( ($this-&gt;countModules('right') &gt; 0 ) &amp;&amp; ( JRequest::getCmd('layout') != 'form' ) &amp;&amp; ( JRequest::getCmd('task') != 'edit' ) ) { $showRightColumn = true; } else { $showRightColumn = false; } So apparently after confusing the crap out of me with those first three lines, they proceed to overwrite the contents of the variable using standard logical syntax. Grr! I can't see any reason for the first three lines of code. Maybe I'm completely overlooking something, but it seems like it does nothing of value. 
What it gains in cleverness, it loses in intuitiveness and readability.