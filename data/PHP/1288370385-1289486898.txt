Komodo is looking good. I ignored commercial IDEs in my search. Being a "real start-up"* sucks in terms of money. But I'll check it out. * 3 years ago I worked for a spin-off company part of a large multi-national conglomerate that considered itself a start-up at 200 employees. So I guess the definition of start-up is quite elastic... My experience as a start-up is working in pajamas with my girlfriend 80 hours weeks with barely any money coming in. Not quite the same experience.
Yeah the CPU bug is really bad. I found that it is generally a problem with the application cache in ~/ZDE/config_5.5. Generally it's necessary to recreate a project to make the problem go away. I've rarely seen it go above 1GB memory although, even though it has room for more (8GB total). It's still a lot, but eating memory is almost SOP for a large Java application as far as I have seen. Maybe I should try to remember to close ZS when I'm not using it though!
Ah I guess they simplified the Linux install process then. I remember looking previously and reading on the Aptana website that the install process is a bit of a pain. I think I will try right now...
God dammit, some of the coolest stuff in this post are 5.3 additions... I really wish I could upgrade from 5.2
Do you have a link to documentation on it? I can't find anything on google, just a ton of .NET junk. I found a class called PHPExcel, but the syntax is completely different from the example code in the slides.
Snarky response: the Linux kernel 2.6.36 has 82134 GOTO calls in it.
That would be better if the text were smaller, I can almost read it.
I don't hate too many people just for being bad at their jobs.
Oh cool, thanks for replying. If you provide excellent documentation and tutorials, you'll be able to pull a lot of users from both frameworks. I know the hardest part of getting into Kohana was finding a "getting started" tutorial (both for HMVC and Kohana in general). If you can provide a nice tutorial for user management/authorization, I would definitely consider switching.
Yes but I wasn't talking about the Linux kernel, I meant how it was useful in any way in PHP.
The same way, goto error conditions if you're not into the whole exception thing, I guess.
If you want to try it before you buy it (or just want a free version) then you can go with Komodo Edit, which is a free "community" version.
[php-excel](http://code.google.com/p/php-excel/) != [PHPExcel](http://phpexcel.codeplex.com/)... and hilariously, neither seem to be the code in the slides.
You are a shoddy developer if you use PHP and don't also realize and understand PHP's flaws. That doesn't mean that it doesn't have good parts, it just means that it's a flawed and bizarrely designed language. If you think PHP is the bee's knees, then you need more programming experience in other languages. I am a full-time PHP developer, and I hate PHP.
PHP is not an *interpreted* language. It's built on top of a virtual machine, just like most other modern scripting languages, and just like C# and Java. 
PHPExcel is great. I've used it several times for both reading and writing spreadsheets. It's also under active development.
shouldn't it be 'reinventing the wheel'? reimplementing the wheel makes me think of getting a new set of tires.
a function definition isn't a [control structure](http://php.net/manual/en/language.control-structures.php).
first off, a function definition isn't a [control structure](http://php.net/manual/en/language.control-structures.php). secondly, parenthesis are *happy* with only a single space neighbor. they get claustrophobic when surrounded by characters, and they get lonely when surrounded by spaces. and i thought this was common knowledge.
Why can't you? It doesn't break backwards compatibility by any serious amount.
Except for when it does. A couple of our clients' sites are full of unquoted string literals (thinks like `$ar[blah]` instead of `$ar['blah']`), all code from another developer. 5.3 no longer supports it, and it's easier for us to just stay on 5.2 then to spend the time to review all the code and fix it. Our two main servers are starting to get kinda full, so I'm hoping to convince my boss to get a new one with 5.3 on it.
`__DIR__` is basically a shorthand for `basedir(__FILE__)`, so you can get the same functionality in PHP 5.2. `__DIR__` and `__FILE__` are really useful stuff, especially if you use relatively linked includes.
To be fair, you're actually referring to "bad developers" rather than "php developers". I've seen all of the above traits in programmers from all languages.
You work with shitty coders =/ Most of those things mentioned are just plain ol' programming no-noes, which I could say about the Fortranosaurus programmers before me. I do disagree with the use of an IDE, but only out of personal preference. It's the difference between a slingshot and a Cadillac when knocking bottles off of a fence. You can knock down the bottle with the Cadillac, but you should first get insurance, then a license, then put your seat belts on, then obey all the rules, then {...}. Or - slingshot one-shot, done. This is providing, of course, you don't NEED a little hand-holding. For Java, I need hand-holding == I use Eclipse. For PHP, it's closer to my native perl, so using a big licensed beast of software to "help" me with it is overkill. To each his own I suppose. Everything else, /thumbsup
b/c all the cool kids use ruby: http://www.youtube.com/watch?v=5GpOfwbFRcs&amp;feature=related
PHPExcel is great if you dont use shared hosting and the excel files are small.
Thanks! Will do.
I'd like to learn these things, particularly 1,5, better understand 7 and how it would fit in my projects, get a good checklist for 9, and learn how to avoid 11. Where do I go? What do I do? I have no mentors where I am. 
This is false. 
Ok, then explain to me why 5.3 refused to run the code even when error reporting was turned off?
I know this doesn't help you now (although it might make cleaning up easier), but that is a good argument for having all development done with error reporting set to E_ALL | E_STRICT. I can't tell you how many headaches it saves.
Actually he's right- &gt;Oneiroi:temp tedivm$ cat test.php &gt;&lt;?php &gt;$array = array('apples' =&gt; 13); &gt;echo $array[apples] . PHP_EOL; &gt;?&gt; &gt;Oneiroi:temp tedivm$ php test.php &gt;PHP Notice: Use of undefined constant apples - assumed 'apples' in /Users/tedivm/temp/test.php on line 3 &gt; &gt;Notice: Use of undefined constant apples - assumed 'apples' in /Users/tedivm/temp/test.php on line 3 &gt;13 &gt;Oneiroi:temp tedivm$ php -d error_reporting=0 test.php &gt;13 &gt;Oneiroi:temp tedivm$ php --version &gt;PHP 5.3.2 (cli) (built: Aug 7 2010 00:04:41) &gt;Copyright (c) 1997-2010 The PHP Group &gt;Zend Engine v2.3.0, Copyright (c) 1998-2010 Zend Technologies 
Well, I guess we'll have to go back and re-evaluate, it has been a couple years since we had this problem. Of course, even if it does work that doesn't mean the company will upgrade :/
It couldn't have been more than 16 months, but if it was that long than I imagine you could easily have encountered problems. 5.3.1 came out in November of 2009 and had over 100 bug fixes, and 5.3.2 came out in March. Whatever stopped your programs from running before very likely have been corrected.
&gt; (worse!) Know how and don't want to! Mostly, I just don't have any need. I sincerely wonder what you're doing in PHP that makes breakpoints and such more than occasionally useful? (Not to mention _why_.) &gt; Don't use an IDE, prefering dumb editors (w/o autocomplete, syntax error checking, etc. etc.) There's rather a lot that lives in the gulf between "IDE" and "dumb editor".
&gt; Why does PHP get so much negative feedback? a) Because it's deserved. The language has problems and most of the people writing it are incompetent. b) The Internet loves a good dogpile.
&gt;You work with shitty coders =/ i.e. 99% of PHP developers.
&gt;I've seen all of the above traits in programmers from all languages. Yeah, there's just a brutally high proportion on bad PHP developers.
&gt;so you can get the same functionality in PHP 5.2. \_\_DIR\_\_ works in PHP 5.2 as well..
i.e. 99% of all coders, which was the point of my response. Alot of the Java programmers I know are lazy asshats, but I don't hold it against *every* Java programmer or the language itself - because that's *irrational*. /stare
break 2; ?
These assumptions are stupid an irrational. I really wonder if one sucks at PHP, would the same person be better off with another language?
Arguably this is because this is much higher number of new-to-programming developers coding PHP than other languages.
I believe that would just exit the switch and the containing block and continue executing the next block, and wouldn't actually execute the block (and the switch) again.
this is the _only_ way to develop in PHP. i rage when i see code that generates tons of notices with E_ALL | E_STRICT.
Ah, you didn't say you wanted to jump to the beginning of the upper block.
I'm in 100% agreement with you on that one. As I said, it saves so many headaches- I honestly don't see why anyone wouldn't do it.
You're right, I wouldn't disagree with that point at all, [the problem is that when developers mature; they tend to leave.](http://www.reddit.com/r/PHP/comments/duyaz/hate_php_all_you_want_but_the_fact_of_the_matter/c136b9v).
&gt;because that's irrational. You talk about me being irrational yet you turned my statement about developers into a statement against the language itself, though I do have a lot of problems with PHP, I think the development behind it is behind the times and not forward-thinking enough, almost scared to push the boundaries as it were. Another illogical thing you imply is in the anecdote you offer about Java developers, even if Java developers are lazy, does that automatically let all of the PHP developers off the hook, or is that an extremely lazy way of looking at things? "I know X is shit, but Y is shit too, let's all stay shit". I've worked on well over 100 PHP projects, from small to large in my career, the PHP projects are invariably terrible, I'd say 9 out of 10. Of the Ruby projects, 9 out of 10 are expertly architected, well thought out and worked on by intelligent people. Maybe its just a coincidence?
I've used several IDE's and frankly, I prefer a simple text editor. My personal flavor is EditPlus, just because it's the first one I downloaded and didn't see any reason to keep looking. IDE's tend to slow me down, they are too bloated with unnecessary functions. I type 120WPM, I don't need an IDE to predict what I'm going to type. In the time it takes me to break hand position and arrow down to the correct function, I could have already typed it and moved on.
They asked the same question to Ilya Alshanetsky today in his talk at the PHP Conference in Barcelona. For example, error management. GOTO is an internal opcode in PHP. It's always been there, just not exposed to the user. It seems to be much faster than Exception handling. Also, it's useful to get rid of the ugly "while" loops when you need to code some sort of parser or state-based application.
It's easier to tell people to set error_reporting to -1, because this also means all errors. Unlike 0, which shows none. 
Fair enough, brother. Karma for tenacity.
These are NOT hidden features. They're very well documented features if you actually read the docs. A hidden feature would be accessing private properties of a class outside the class by casting it to an array and accessing the array as [(NULL byte) + classname + (NULL byte) + propertyname]. But even that isn't hidden, it's in the docs http://www.php.net/manual/en/language.types.array.php#language.types.array.casting
OpenX is pretty much all there is for PHP-based ad systems and it's downright awful. We suffered with it for a while before we went with [Google DFP for Small Business](http://www.google.com/intl/en/dfp/info/sb/). It's free and they have an API now so you can rig it up to just about anything. 
cool I'm going to check this out to see how it works
&gt; CodeIgniter is Either 0 or 100% of Revenue My thoughts: treat it like 100% of your revenue and figure out how to take all the best ideas (e.g. Kohana) out there and incorporate them into making the other products rock.
Thumbs up for PHPExcel.
google has been my best mentor
It's due to the human condition. We are used to x being greater than y for some reason and irrationally fail to objectively evaluate the situation. For example, someone who runs 100m in 10 seconds is better than someone who runs 100m in 11 seconds, we tend evaluate things in a binary way. The problem is that the situation is not as simple as this. You have to consider what makes a good language. Sure, one of the criteria will be how 'natural' and consistent it is to write with. But there are more important factors to consider, such as market penetration, availability of resources and existing libraries. If the sole condition of evaluation is consistency then PHP fails spectacularly. However if your goal is to write software for the web, the only real rival is ASP.NET. Sure, you can achieve the same with other languages, but none of them come remotely close in terms of the speed (dev/test/deploy cycle) and availability of resources (people with the knowledge and existing libraries) of PHP. Yes, PHP has issues (it's not perfect - and nothing is) but it's the best tool for building a website. [EDIT] I really need to learn to not after drinking. So much time lost fixing and re-fixing typos!
Facebook notifications are a lot more complex on the backend than they appear. But basically, each user has an "inbox" of sorts, probably implemented using a Message Queue which is probably a combination of Cassandra, Memcached, and possibly Tornado.. I'm not quite sure what my point was, I'm thinking more of the FriendFeed than the notifications.. but anyway, the infrastructure you use will probably depend on your requirements and how much you want to scale it. Is this for a smaller or larger sized project?
It was added in PHP 5.3: &gt;\_\_DIR\_\_ ` ` The directory of the file. If used inside an include, the directory of the included file is returned. This is equivalent to dirname(\_\_FILE\_\_). This directory name does not have a trailing slash unless it is the root directory. **(Added in PHP 5.3.0.)** [Source](http://php.net/manual/en/language.constants.predefined.php).
&gt;Leslie Camacho (President of EllisLab) [President Camacho?](http://imgur.com/BDcfk.jpg)
I've been involved with CI for around a year or so now, and it's been awesome to work with, so haters or not, direct revenue or not, I very much appreciate the time and effort put into the gift that is CI.
I'm round about the same. The gift is great and many really, really don't want to see CI atrophy again for 14 months. I think much of the recent brüha has made that clear to EllisLab. I eagerly await to see what direction they go.
I think the documentation is a bit strange on this one, because it has been definitely around before 5.3. Or my long term memory could be playing mind-fuck-games with me :)
Code Igniter is excellent, but I firmly believe that clinging to PHP 4 is a major detriment to its present and future. At this point in my work, PHP 5.2 requires a few nasty workarounds, so 5.3 is my preference. PHP 4 isn't on my radar and is one reason why I don't use CI anymore. I do respect and appreciate everything that CI brought to the table. I loathe frameworks like Symfony and CakePHP. Hopefully CI will see a PHP 5.3+ update sometime.
Try Kohana. It's a fork of CodeIgniter without the PHP 4.
&gt;My understanding is that Rails &amp; Python are the officially sanctioned divine languages. The rest of us are stuck with PHP. Let’s all just be thankful we’re not cursed with .NET. Poke, poke, proggit.
Still waiting for him to solve the burrito covering shortage.
This is for a small personal project. I'm not really concerned with scaling at all right now, really just getting things up and running. Seems like it'd be easiest to just write my own to suit my needs without too much extra bloat.
Why not? It's easy and satisfying!
You're confused, I was agreeing with phillipoison. I understand my script works as intended, that's what I was trying to demonstrate to ChiperSoft.
Been using it since it was released. While it does have some issues, it's a pretty rock solid framework that is very simple to use. I love it.
Yeah I agree, sorry I don't know of any existing libraries you could use, but I think it would be largely dependant on your existing database structure and stuff like that anyway so you're probably better off writing your own.
It's just a relic from the past... a feature that some might use but that is discouraged for the most part due to poor code readability. 
Agreed. When I'm writing code, I just want everything to keep out of my way.
Ever tried writing a parser for a binary format (e.g. zip extractor)?
Yes it is, there is no such thing as a PHP virtual machine. PHP is compiled to bytecode which is subsequently _interpreted_.
what exactly is the difference to http://php.net/manual/en/function.htmlentities.php here?
CodeIgniter _was_ excellent, but it's so far behind it's a curse to use now. Not having auto-loading and loading all your classes with $this-&gt;load is ridiculous. 
I believe CodeIgniter 2 is PHP5 only.
Here's some background on this link: I had already submitted a link to this project [a couple of weeks ago](http://www.reddit.com/r/PHP/comments/ds1cd/patchwork_monkey_patching_for_php_a_pure_userland/). However, a lot has changed since then. For the 1.0.0 tag, I've limited its scope as much as possible, leaving only the basic facilities for redefining functions (hence the title). It's become quite a different project, so I've decided to resubmit this, albeit pointing to the new tag. It would be really nice if anyone here actually tried this thing out, especially since I haven't had the chance to test it on anything except Windows myself. I don't feel like this is enough because of a little undocumented feature of PHP I'm relying on. It's a flag for `StreamWrapper::stream_open` (0x80), which seems to be set each time when a file is about to be opened for inclusion. I wouldn't be so surprised if it turned out to be a Windows-only thing. Oh, and feel free to ask me anything if you run into any problems, or even if you don't. I'm the only developer on this project, so I'll try to answer anything related to it.
Why not use a library. Why would you do this in PHP?
Explain the newer, better alternative please.
For an overview: [http://php.net/manual/en/language.oop5.autoload.php](http://php.net/manual/en/language.oop5.autoload.php). You'll want to use [spl_autoload_register](http://php.net/manual/en/function.spl-autoload-register.php) when you have multiple loaders to deal with.
i know you pretty much just said no to doctrine, but i think its really great. i've been using it on some pretty big sites/databases without any issues. 1) its limited in functionality? how so? i've never had this issue. 2) it seems really odd that pdo is not installed. i think you should go ahead and install it... solves that problem.
I found the documentation to be quite poor. I did have a look into the code, but it wasn't clear. Take [createTable](http://www.doctrine-project.org/projects/orm/1.2/docs/manual/migrations/en#writing-migration-classes:available-operations:create-table), where are available options defined? This is for the old version too, I can't find a migrations chapter in the [2.0](http://www.doctrine-project.org/projects/orm/2.0/docs/reference/en) reference. Has the migrations feature been dropped? Missing or undocumented features I'd prefer: database tagging and loading data from a file. About PDO, I've never had the need to compile it in with PHP and it would be a bit much just to enable it for migrating. I guess if I found some software I really liked that needed it, then I'd make a compromise.
hi, i am not trying to give negative feedback here, but i am sure its going to come off as such. 1) you submitted this like two weeks ago and i think i remember you got pretty upset that people weren't commenting on it. it seems like you are submitting it again because you want more comments. you shouldn't be shocked that people aren't using this. it takes a long time for these frameworks/ideas to become popular. 2) most php devs have no idea what monkey patching is. you can't just publish some code and expect people to use it. write a few blog posts/articles explaining what monkey patching is, pros/cons, and how users can take advantage of it. your README already does some of this, but make it into a blog post that is easy to read and provides lots of really basic examples. 3) monkey patching isn't really a good thing (of course this is imo). its not a main stream idea and most programmers have no desire to use it. most of the time 'best coding practices' eliminate the need for any sort of monkey patching. 4) your code would be scary to run in anyones production environment based on your comment. Tested on windows only, undocumented php calls, and one developer. You need to expand on all these items before people really start to adapt this.
ok, i see your point on the documentation. do you have a solid understand of sql/mysql? there really aren't too many options that you cannot intuitively figure when creating a table (or doing some other create, add, drop, rename, etc). doctrine has good support too. mailing lists, irc, and tons of info from doing a google search. if you do get stuck on something - someone out there will be able to help you. also, migrations are really simple... think of them as really simple operations to your database, you shouldn't really be doing anything complex with them. which leads to my next point... you dont want to get in the habit of doing data migrations with table migrations. keep your data loading separate. i realize the two go hand-in-hand for drastic database changes... and this is exactly what makes migrations/database version control one of the hardest problems to solve today. your life will become a lot easier if your keep data migrations separate from schema migrations. ruckusing looks pretty decent. is there any reason you are looking for a new tool? oh ya, happy cake day!
oh yah and for doctrine2 the migrations are in the dbal not the orm. see: http://www.doctrine-project.org/projects/dbal/2.0/docs/reference/en
To be frank: yes, it's pretty silly. Choose a framework based on what's important to your project, be it performance/stability/documentation/support/etc. As an end user, you technically don't _have to_ follow conventions if you don't want to, particularly since all of the conventions outlined in those links relate to naming and syntax and have no impact on your final application. But personally, I'd recommend following them anyway. As a developer, you're going to have to get used to following someone else's conventions, unless you plan on managing _all_ of the projects you work on. EDIT: And to answer your question, if I were to choose one of those, I'd go with Kohana 3 since it's the only one with native HMVC (helps hugely with code separation and UI design when used right).
Why don't you just use Zend if that's what you're comfortable with? Programmers are more expensive than hardware. I doubt what you're doing would be noticeably slower.
Since you are rewriting a CMS (for the future) it might be a good idea to look at PHP 5.3 frameworks such as [Alloy](http://alloyframework.org/). They use namespaces which will soon become the new standard (rather than Zend_Style_Class_Names). Also keep an eye on [Zend Framework 2](http://github.com/zendframework/zf2) and [Symfony2](http://symfony-reloaded.org)
Well, first of all, thanks. I certainly admit that I overreacted in the previous post, and I'm definitely sorry for that. The thing is that I was (and still am) new to this site, and after seeing a bunch of posts on /r/PHP asking for feedback (and actually receiving a lot of it) on various projects (mainly MVC frameworks) created by the posters themselves, I had raised my hopes way too high. But I won't deny that I do want comments. Seriously, who doesn't? But by "comments", I mean actual feedback, not just a higher number of responses blindly praising the project (or bashing on it). This project is of very, _very_ experimental nature (experimental as in "experimental", not as in "unstable", although the latter is most likely true as well), and without some feedback, I'd never get to know if this kind of experiment deserves any further development at all. Seeing the previous submission receive little more than the silent treatment, I came to believe that there aren't many of those who actually understand what this project is for. So I took that as a problem and tried to solve it. I simplified the project as much as possible. Not the code. Not the API. The project itself. All that "call filtering" stuff is now gone. All these "predefined filters" are gone too, along with the function stubbing DSL they were meant to compose. Stack frames are not abstracted as objects anymore. Now I want the project to be nothing more than a simple tool for redefining functions. That's why I'm resubmitting this. It's kind of a response to the silent "feedback" to my previous entry. If this time you decide that it doesn't deserve a chance, well, let it be so. And yes, I do agree that monkey patching has absolutely no place in production code. I've mentioned that in the readme, but I probably haven't stressed that enough. Actually, it's not a good thing in test code either. But again, as the readme says, its primary target is untestable code. Patchwork is simply meant to help the tester deal with poorly designed code when refactoring is not an option. As for the fourth point, that's exactly why I'm turning to the internet again. Yes, I am certainly going to test this thing on Linux soon, but there may also be someone here who will point out a bug that I would never be able to discover on my own. That's why I'm asking people to try the project out, not to use it and praise it. Also, I surely am the only developer. I don't see how's that bad in itself, but how would it be possible to find more contributors without trying to attract some interest from the community? Isn't this what open source is all about?
Every [Zend Engine tutorial](http://php.find-info.ru/php/016/ch20lev1sec1.html) I've seen calls it a virtual machine. Considering the way it behaves, it seems quite like a virtual machine to me.
I have personally never used it, but I did hire twice a guy to do this sort of job and he was using [Taled Open Studio](http://www.talend.com/index.php).
i'd like to see a php.ini option along the lines of E_NOTICE causes E_FATAL.. that way I can set the dev environment up that way, and it'd be the interpreted equivalent of strict compiler errors. anyone seen anything like this?
I am the creator of Ruckusing Migrations. Its core development was done about 2 years ago and since then minor updates have been released. However, I just started using it again at DailyBooth and have realized that more changes are needed. We're eating our own dog food, so to speak. Lately I've come across some of its weaknesses, for instance there was no clear way to have a non-auto incrementing primary key. I've implemented the above and some other features and plan to release these changes very soon, possibly this coming week. If there are other features you require then maybe we can work to get them implemented. 
Why are you writing your own ecommerce cms? Is there one that's does what you need?
I would look at [Propel](http://www.propelorm.org/) as an ORM layer. It's fast, simple, and actively-developed.
At work we use Cent OS and we automated PHP application deployment using RPMs, so we can hand off the actual rollout to system engineering. We're using dbdeploy (the Java version). I've also done setups with phing, which comes with the PHP version of dbdeploy. I haven't used ruckusing yet, but that looks like it might be a step up, actually.
i agree with everything you wrote. i've been in your shoes before. i wrote a di framework once that didn't get any feedback. i soon realized its because not many people in the php world knew what di was. i then took some time to write a long blog post about what di is, how to use it, when its good/bad, and if it even has a place in php. i now get a ton of comments/emails/questions about di and my framework. i think you should do that with monkey patching. try to become the php monkey patching expert, because its something everyone should know about, wether they use it or not. writing blog posts sucks compared to writing code, but its one way to get coders to understand the concept and trying out the project. this is especially true with php programmers (i do not mean that in a negative way, its just they generally do not know anything about these concepts)
If you really want nice collaboration, I suggest you put your project on github instead of google code. It really encourages collaboration, and uses a *cough* better scm too! :) I'm in the same boat the OP is, and at my job, we have ruckusing on your list to use when we get some time to implement it.
Not looking for an ORM layer. I did find some information on propel migrations, but it looks like you need to use their modelling system. Thanks. Btw. I recognise you from A Small Orange / Neowin ;-)
Yeah I do want to move to GitHub. Moving the codebase would be pretty trivial - the most time consuming would be rewriting all the documentation from Google's custom markup to Markdown...ugh
I assume you meant extensions, as libraries are written in PHP. If you have code you need to redistribute, you can't just use extensions. In addition, if you're reading a custom binary format, there won't be extensions written already to read it.
Can I redefine echo to append the eyes of disapproval on the end of every call?
The schools of thought are: 1. version every database schema completely. This is usually done in tandem with a data-only sql file of inserts for static data. This means you may have up to 3 files to version - config for the database, the schema, the data. 2. version incremental changes. The initial few changes will be large with tables being defined. The incrementals can include altering, adding or deleting of previously added data/structure. I have seen BOTH work on large projects. Either one requires additional tools or user written scripts to clear existing structure/data and do consumption of the new schema. For #2 ordinal filenames &lt;int&gt;.sql or more granularly &lt;int&gt;.&lt;tablename&gt;.sql and some convention for synchronizing access to these files may also be required, depending on the size of your team. However, incremental tools can negate the need to drop entire databases in theory. Just run migrate.php &lt;int&gt; to go up (or even down if you require &lt;int&gt;.&lt;Tablename&gt;.&lt;up|down&gt;.sql) to that version or to consume that version.sql. In practice, these tools are usually written by project participants and are far from perfect. Full runs of the entire migration series should be done from time to time and in the case of #1, it always is. While Doctrine is my ORM of choice, how someone would rely on doctrine for database schema versioning, is not clear to me. 
&gt; &gt; It's very flexible and extensible. &gt; That's exactly why it's bloated. Any 'framework' that does everything and anything you might need, means it's got a whole bunch of features you aren't going to use, and it will do all kinds of validation and processing that has no use to you. You misunderstood the sense of that. It's flexible and extensible in the sense that it's loosely coupled and you only include and use the classes that you need. So it's exactly what you described when you say a "simpler more customized set of classes." Zend avoids the fad of convention-over-configuration and doesn't introduce any enforced structure or "magic" behavior.
&gt; PDO (not installed on production) Fuck that noise. PDO is the way forward. Get it installed on production.
It would be really cool if one could redefine built-in functions to bring some consistency to the needle/haystack mess. Just wishing.
An additional fact to consider: for 99% of websites the database is the bottleneck, not the PHP framework. Maybe the Zend Framework really is best fit for your project.
It is possible to *alias* functions however.. but doing so definitely brings some overhead, I have some miscellaneous PHP "hacks" that might be of interest on [Github](http://github.com/ZaneA/Misc-Hacks/blob/master/phphacks/aliases.php)
From my experience with it recently I'd say [Symfony2](http://www.symfony-reloaded.org) is the single best option. It's still in alpha but much of the API is stable. They use the Zend coding standard and really promote TDD. Check out the [github page](http://github.com/symfony/symfony) for an idea of how active the community is.
I'm going to go out on a limb and say, no, you're not being silly for caring about the coding conventions. If you're going to be writing a framework from scratch that your company is going to rely on being comfortable in the code is paramount I think. So often we developers *have* to use someone else's code utilizing someone else's conventions and style that when we're finally given a chance to be creative and stretch our own mental muscles we should absolutely take it. That said though, know what you're getting into when using coding conventions to judge your options. It's usually an either/or game where you have to choose between something else in exchange. 
I disagree with you on this; I think it's a good idea to take coding conventions into account when choosing a framework to work with. I don't think it should be the *only* thing taken into account but I do think it's an important point to consider.
I'm not entirely sure what you're asking for so I'll give you my best generic answer. If you want to exclude records from a table, say, "Table A" that have a corresponding record in "Table B" and do so using a join then you'd do it like so: SELECT Table_A.* FROM Table_A LEFT JOIN Table_B ON Table_A.PrimaryKey = Table_B.ForeignKey WHERE Table_B.ForeignKey IS NULL Substitute PrimaryKey and ForeignKey with whatever the unique identifying and referencing columns you have in your tables. 
Have you ever looked at the code in zend? Every function always does double checks on everything, making sure that if it was an int or array or string passed, then does something based on the input, instead of just expect 1 kind of input...... This is just the kind of bloat zend has....
Yup, that is the ticket. Simply join the "bad" table and only select the rows that do not match anything in it (NULL)
It's not. Support is depreciated but for now the CI core still works.
This is the kind of misguided thinking that burns gaping holes in project budgets. 1) A custom replacement will cost you developer time. 2) A custom replacement will not necessarily be as efficient and if it is add to #1. 3) A custom replacement will not necessarily be properly unit tested and if it is add to #1. 4) A custom replacement will likely not be as flexible and adapt to changes in application logic and if it is add to #1. 5) You'll spend all this time to make a valid replacement only to gain a theoretical maximum of a few milliseconds. 6) Money shifted from development hours into finding better caching methods or better hardware will see more effective gains. Please reconsider spreading this popular misconception on what "bloated" means.
Thanks — is this doable for someone who does not meet the requirements, but has basic skills just to just listen in? I understand loops… or their idea… but not their applications. Basically I am a person who guesses and checks with his php but knows his html all too well and his css.
Yes! Definitely. This course is for everyone. I've had experience with PHP, but I am still enrolled. This course will take place from the beginning. Even if you want to just audit the course, feel free! I highly recommend asking questions and someone will help you out.
Just for completeness, I'll add another way of doing this that probably isn't actually recommended due to MySQL's crappy subquery handling: SELECT * FROM Table_A A WHERE A.PrimaryKey NOT IN (SELECT ForeignKey FROM Table_B) (Actually, I think MySQL's bad subquery handling wouldn't be an issue with this *particular* query, since it needs to do a full table scan on Table_B anyway.)
[You can](http://php.net/manual/en/book.runkit.php). But you shouldn't.
I would probably just have a table of products, colours and sizes and then create a product option table for valid products. E.g. *products* id name *sizes* id name *colours* id name *product_options* product_id colour_id size_id stock You wouldn't bother storing a option that doesn't exist. You could find all options for a product using something like: SELECT p.name, s.name, c.name FROM products as p INNER JOIN product_options as po ON p.id = po.product_id INNER JOIN sizes as s ON po.size_id = s.id INNER JOIN colours AS c ON po.colour_id = c.id WHERE p.id = YOURPRODUCTID
Thanks. I thought about adding this for completeness, as well as a WHERE EXISTS version but I wasn't sure if it would confuse him if I put it in the same post. I'm not sure how MySQL would handle the first one versus this one. You'd hope that both queries would compile the same. Unfortunately I haven't spent much time with MySQL and I don't even know if it comes with a profiler or any profiling syntax.
I wrote my own migration script that simply feeds an up.sql or a down.sql to the servers. Afterwards a schema dump is saved. The current db schema version is tracked in a table.
Me (and Dan I expect) will both be recording screen-cast tutorials and there will be some slick documentation too.
Thanks this sounds like it might work. What if I wanted to have a wild card value in table B that would match any option? 
Did you make it a proxy? My university is blocking ureddit.com for being a Proxy/Anonymizer (we use openDNS for blocking pages). Just thought I should let you know.
Ok, a few things.. I don't disagree with the concept of 'not reinventing the wheel'. The problem is, that sort of mentality causes people to start thinking "well, why make a custom site, lets just use wordpress and tweak it"... So anyway: &gt;1) A custom replacement will cost you developer time. As does any programming.. &gt;2) A custom replacement will not necessarily be as efficient and if it is add to #1. It's really easy to make code more efficient than zend. Everything in zend is an object, instantiating hundreds of objects for every little thing under the sun is quite costly. They don't use enough primitive types, and do excessive validation (because each component is completely segregated, and as a result, no input can ever be trusted). &gt;3) A custom replacement will not necessarily be properly unit tested and if it is add to #1. Zend is by no means bugless... not only that, but due to its common use, that makes you an easier target. Ya ya, obscurity isn't 'security', but obscurity does make it a lot harder for hackers. &gt;4) A custom replacement will likely not be as flexible and adapt to changes in application logic and if it is add to #1. That depends entirely, a well planned out project will be flexible too... &gt;5) You'll spend all this time to make a valid replacement only to gain a theoretical maximum of a few milliseconds. millisecond here, millisecond there... &gt;6) Money shifted from development hours into finding better caching methods or better hardware will see more effective gains. This is the most valid point you've made. But, it's all about balance.
&gt; What else do you suggest I read in addition to the manual? If you think prepared statements are basically "queries made safe", you're in for a surprise. They're actually pre-compiled on the server's side. I suggest you read about prepared statements in general. It might help you with a few questions or problems you may encounter in the future.
tats cool info :)
Ah, I'm not having this issue. Sorry to hear about that. That's a bummer.
The wildcard functionality you want is doable but it would increase the complexity. But let's ignore that for now. After reading your edit, I now have a better understanding of what you're trying to do and now I think you may want to clear up some things before moving forward. Different situations call for different strategies. So before I would tackle this problem I might ask the client a few questions, such as "Do you forsee the number of sizes, backings, or colors to grow in the future? If so, by how much?", "Do you want to have the ability to add new sizes, backings, and colors yourself? Do you want the ability to blacklist certain combinations yourself?". You may want to go over his pricing strategy as well. Is pricing tied to any of the three attributes? What is the reasoning behind excluding certain combinations? Are there any special business rules you should know about? I really wouldn't begin planning out a database design until I at least knew the answers to those questions. If you happen to know the answers then tell me and I'd be happy to guide you further.
The customer should be able to change all these values. I was thinking of storing them in separate tables. The size table will also store the price. The color table will store a hexadecimal color, string of the color, and a picture of them in that color. The I have a do not allow table - with wildcards.
Don't use this, it fails on many valid cases... if you want a real RFC compliant function then use: http://dominicsayers.com/isemail/ Check out the tests.. it gets 100% where this php function gets 69% caveat, though: I discovered the limit of 64 chars before the @ sign is dangerous because even though it's technically correct based on the spec, in the real world longer addresses will work - for example facebook connect proxy email addresses are huge and have something like 70 chars before the @ so watch out for these edge cases. Either use this function with some small modifications such as mentioned above is necessary, or just use something *very* basic (this is the only time you can use a regex.. basically match \*@\*.\* and be done with it if you're not going to do it properly... email addresses are too complex to be validated to correctly identify valid and invalid so don't bother trying. Otherwise you're going to end up telling people that their perfectly valid email address isn't acceptable... and that is worse than not checking it at all. Honestly the best way to check for a valid address is to send an email to it. If you want to stop users making a mistake on the field then checking for an @ is all you generally need to do. If someone wants to give you a fake address then gdsgsdgsd@gsdfgsdg.com will do just fine and there's nothing your function can do about it.
and yet then everyone decries the bad php developer for being self-taught. 
I've been keeping an eye on Lithium and it seems to have what you want, though I don't think they're production ready yet.
I remember seeing this a few weeks back and thinking that it looked like a good idea, and possibly well implemented, but something I didn't have an immediate need for. If you want traction you should do as Ryan suggests and write some blog posts demonstrating its use cases.
The documentation can stay as inaccurate as it wants, we run the latest 5.2 and __DIR__ works just fine.
Find a way to relate programming concepts to real world concepts. This is a great way to understand their application.
in my opinion this sort of thing belongs on the application anyway, but I know a lot of people would disagree with that. that said, the places that generally make heavy use of functions provided by the dbms have no intention of moving away from them. (users of db2, oracle, and so forth) portability and performance aren't always easy to balance.. 
Assuming that's all the information you have to go on then storing the size, backing, color in separate tables is a good start. You'll want to create a view that will pull every permutation of values from those tables. CREATE VIEW AllCombinations AS SELECT Sizes.SizeID, Backings.BackingID, Colors.ColorID FROM Sizes, Backings, Colors Your exclusion table will have at least three fields corresponding to each primary key of each table. If you want a catch-all "wildcard" then there are a few ways to go about it. Unfortunately most ways will end up sacrificing normal form. But I'll assume you aren't too interested in the normality of your database. Let's assume that in each of your attribute tables (size, backing, color) you store the primary key as a smallint, and you use 0 to designate wildcard. So for example your Colors table might look like this: 0 - All Colors, 1 - Blue, 2 - Green, 3 - Red, etc. Here's one way you might do the join: CREATE VIEW ValidCombinations AS SELECT A.* FROM AllCombinations A LEFT JOIN ExclusionTable E ON ( (E.SizeID = A.SizeID OR E.SizeID = 0) AND (E.BackingID = A.BackingID OR E.BackingID = 0) AND (E.ColorID = A.ColorID OR E.ColorID = 0) ) WHERE E.SizeID IS NULL AND E.BackingID IS NULL AND E.ColorID IS NULL Hope this helps. P.S. That'll be 50 dollars.
There is nothing stopping you from calling those routines via PDO. It would only matter if you were also intending to switch away from MySQL after switching to PDO. That being said, yeah, you should do this in the application instead of the database anyway. [mcrypt](http://php.net/manual/en/book.mcrypt.php) should do the trick.
Haha I'm 19, I'm not making a ton of money. I'll give you something when I get paid though. I didn't know what views were. Does this need to be run on each iteration of the script or can I save it? Thanks a lot. I can't wait to test this.
Use the encrypt and decrypt options on the client box. It'll scale better as you won't have one box performing all the work. For the webscale.
I was joking. You don't owe me money. Views are stored queries. They're optimized by the db engine. Your script would simply query the view: SELECT * FROM ValidCombinations The db engine should cache it as long as you use persistent connections.
I'm doing something similar. I store the files outside of the db and use php to encrypt them. I store them in a memdisk and have an encryption queue so that it won't weigh down the transaction much. As for info in the database...I'm encrypting it in the PHP application, as I didn't want to have two ways of encrypting data (one for files, one for data) and to allow us to move to different algorithms and dbs. FWIW, how are you storing keys? I'm storing them in memcache and then deleting them once the session is over. I have no swap space, so they should be in memory always and never cached. EDIT: I've found mcrypt to be pretty speedy also. The other issue I have with mysql AES functions are that there is no IV and it doesn't specify the mode used. http://dev.mysql.com/doc/refman/5.1/en/encryption-functions.html#function_aes-encrypt
What 'encrypt and decrypt options on the client box'?
You could use javascript implementation of AES, but that should not be used unless you want to impress your customers that you never see their key or data in unencrypted form.
I was under the impression that js couldn't see file contents or access a local cs random number generator. Also how does one store the key securely w/o being sent to the server (cookie).
To be honest, I don't know details of implementation, apart from fact that it is possible and is being used by [Clipperz](http://www.clipperz.com/) for example. 
Key management is a tough one, and one that I only have a small influence on. As it stands right now our webservers have a script that builds a ram disk (not tmpfs), retrieves the key from a remote machine and writes it to a text file into the ram disk. This method has it's ups and downs but the ultimate goal was to separate the key from the encrypted content and allowing for an easy way to update the key without touching every webserver.
It does kind of make sense to take the strain off of the database servers. It is a lot easier to scale web servers than database servers. I wrote out a place holder using mcrypt while waiting on an answer in this thread, I'm going to solidify that now that it seems to be the consensus. Thanks :)
this is a very good article about maintaining the proper method scope and something i have encountered myself when using the decorator pattern for a custom event model. Ultimately I ended up pre-registering all events to ensure if conventional method scope is broken it is only in case of pre-defined events and therefore doesn't allow invocation of any non-event private/protected methods
For me each doc has a key. Each person with access has a copy which is encrypted with their personal key. Their personal key is encrypted with their plain text password which is stored in memcache. Is tmpfs not a RAMdisk?
It isn't so much of a switch away from mysql as the original library code was a quickly written tech-demo that is now being reimplemented. While the requirements state that we only need to support MySQL if I can make the code easily portable to another DBMS without sacrificing anything then I mind as well.
That's not generally a good idea if you are receiving data from users unless you do not need to ever do anything with it, and even then it's more of a parlour trick. The client consumers of this particular library are not necessarily web browsers (It's an API) and not controlled or written by us. Allowing clients to manipulate the encryption (and forcing them to implement it) would mean that we implicitly trust everyone of our users to *actually* encrypt the data *and* do it in a sane way.
tmpfs is a form of RAMdisk but one that can get swapped out and is dynamically sized based on what you put in it. A ramdisk on the other hand never gets swapped out and is a fixed size, there is also a limit on the max size set by the kernel at boot (I believe the default is 16Mb) but that isn't an issue for a small key :) The nature of the database contents don't lend themselves well to public/private key encryption. On top of adding more overhead for a more processor intensive encryption, the webserver is the only 'client' per-se that ever manipulates the content which means it would need to have both an unencrypted copy of the private key and the public key in run-time memory which sort of defeats the added security benefits.
I'll check that out. Lots of good info there
zeroes
I've disabled swap:) It's something to look into though. I won't be the production admin, so here's to them knowing better:) I'm using symetric (sp, on phone) keys. If the key never touches the disk, and the cache dæmon and tmpfs are not accessable from the outside as well as short inactive session lifetimes, then I reasoned that I should have reasonable protection from hardware theft. I'm not sure how to deal with a rouge root or physical access to the box while running. My best solution was secure hosting platforms (secure physical access I mean).
&gt; Many Python users don't feel the need for private variables, though. The slogan "We're all consenting adults here" is used to describe this attitude. [Source](http://en.wikipedia.org/wiki/Python_syntax_and_semantics#Objects) This is the mindset I adopt when working with PHP. We're all professionals here, right?
Ahhh alright, when you said: &gt;Each person with access has a copy which is encrypted with their personal key. My mind immediately went to GPG keys. Physical access is hard to protect against and frankly thats not the job of the developers. I do my best to make the code as hard and lean as it can be. When I think there might be a better way I ask the the Internet :)
Ditto :) I'm acting more as developer and consultant on this particular project, so I'm supposes to give input on how best to protect the hardware as well.
&gt; this is a very good article thankyou :) &gt; I ended up pre-registering all events to ensure if conventional method scope is broken it is only in case of pre-defined events Yes. I should have added a section on "how to achieve this kind of thing without breaking PHP". I'll try to add something tonight after work. edit: see the comment on reflection, or in short: $rm = new ReflectionMethod(__CLASS__, $func); if ($rm-&gt;isPublic()) return call_user_func_array(array($this, $func), $args);
You can scale your webserver by adding a load balancer and more webheads, but scaling MySQL is not that simple. Therefore move CPU intensive stuff away from the database to the webheads.
I misread that as you would have certified in php 5 twelve years ago.
Yep I chose to go with the web heavy for that very [reason](http://www.reddit.com/r/PHP/comments/dz9gs/best_practice_for_using_database_field_encryption/c142u36)
You are really big into the "hate" thing. In fact, it's the first word that I associate when I see your name in r/PHP. Every now and then I find you to make valuable comments, but those are rare among the piles of worthless (and often baseless) insults and general douche-baggery that you post.
well the problem is that in school we primarily did c++ and a bit of java, then in the last semester they said "here's php, its kind of like c. have fun." I didn't even know php was object oriented until about a year and a half after I started using it. Even at my practicum they didn't actually work with us on anything, just said "we have this idea for a site. make it". I did a bit of contract work with another developer for a bit and same thing there. All of their projects just used inline php, no frameworks, no objects, no MVC model or anything. So I hate bad php developers just as much because they taught me to be a bad developer.
1. The ad server is down, so apparently the page can't finish loading. Great design there. 2. http://www.chive-project.com/ The best phpMyAdmin replacement I've seen.
I've found that Kohana's documentation is awful. I tried to move from Symfony to Kohana and I had trouble because the tutorial didn't mesh with the latest version.
&gt; As does any programming.. Except when using an existing solution rather than programming your own. &gt; It's really easy to make code more efficient than zend. Everything in zend is an object, instantiating hundreds of objects for every little thing under the sun is quite costly. They don't use enough primitive types, and do excessive validation (because each component is completely segregated, and as a result, no input can ever be trusted). I'm not sure you understand where the bottlenecks are. I would have to get some numbers to prove you wrong so we'll just agree to disagree there. I do know that at best you would only be saving a few milliseconds of processing and at worst your code would execute slower. It's just not worth it. &gt; Zend is by no means bugless... not only that, but due to its common use, that makes you an easier target. Ya ya, obscurity isn't 'security', but obscurity does make it a lot harder for hackers. I've heard the "open source is insecure" argument before. It doesn't work that way. My point was there is an existing solution that is being unit tested. We all know that in the real world sometimes we have to cut corners for the sake of deadlines and that means if you're rolling your own rather than using an existing implementation you might end up with a library that is not properly tested. This is obviously very circumstantial which is why I said if the library is properly tested you have to add that time to development which furthers my argument. &gt; millisecond here, millisecond there... Equals a few milliseconds total. Most of the time this is negligible. If you use profiling and caching you'll discover your bottlenecks are not where you thought they were. I can guarantee you won't spend the time replacing an object oriented solution into a procedural short hand version when you profile your code. There will be obvious, glaring places where your actual approach to the solution can be optimized taking 1000 lines of code down to 20. My point is Zend is not a good example of "bloated" code. There are *definitely* areas for improvement (Zend v2 is looking to fix some of that) but overall it is a loosely coupled component library and not a typical framework. If you want to use Zend ACL and only Zend ACL you can. If you want to use Zend Filter and only Zend Filter you can. If using Zend ACL required you to use Zend Application, Controller, Bootstrap, View, Form, etc. then I would agree with you. This is clearly not the case. If you do benchmarks on the single components you're looking to use (such as Zend ACL) you'll realize it's actually quite efficient and versatile.
Heh, Sorry I meant client like the client web server.
But you have access to the source anyway, it's not like the object with private scoped vars and methods is something you can't gain access to/change anyway. Even if the code was obfuscated you could serialize it and read everything. 
Imagine if the $func variable would be un-sanitized user input (e.g. $_GET['action']).. Anyway, the OP should use [reflection](http://php.net/reflectionmethod.ispublic) instead of method_exists.
Why would anyone do that though? They wouldn't, I hope. 
Reflection is great, but slower than method\_exists: php &gt; class Foo { public function bar() { } } php &gt; $f = new Foo(); $start = microtime(true); for($i = 0; $i &lt; 1000000; $i++) { method_exists($f, 'bar'); } printf("Time spent: %3.5f\n", microtime(true) - $start); Time spent: 0.35810 php &gt; $f = new Foo(); $start = microtime(true); for($i = 0; $i &lt; 1000000; $i++) { $rc = new ReflectionClass($f); $rc-&gt;hasMethod('bar'); } printf("Time spent: %3.5f\n", microtime(true) - $start); Time spent: 1.37982 One second of overhead per million calls. Not a lot, but it can add up if you're doing something pathologically bizarre. Fun fact I discovered while making typos: It takes method\_exists ~10% longer to find a method that does not exist. It takes ReflectionClass::hasMethod() ~10% longer to find a method that DOES exist.
If you're using an unfiltered value for `$func`, this method visibility workaround is the least of your worries.
A common, simple solution to this is to prefix all of your `protected` and `private` member variables and methods with an underscore, then test for the presence of an underscore at the beginning of the name passed to `__call()`. public function __call($func, $args) { if ('_' === $func{0}) { throw new BadMethodCallException("Invalid method called: {$func}"); } // .. continue on } This same issue applies to other magic methods as well, including `__get()`, `__isset()`, `__set()`, `__unset()`, and `__callStatic()`.
I use them more for myself than to prevent other developers from using my methods or variables. If I see a private or protected method, I know what was going through the developer's mind when s/he wrote it ("this shouldn't be called outside the class, please")
This is the correct answer. Storing "ghost records" of products that can't exist seems unwieldy.
&gt;Equals a few milliseconds total. Most of the time this is negligible. http://www.rankroll.com Here's a site I'm working on right now. The core of my MVC can generate a page (view/template included) in 0.0006 seconds under heavy load. My friend made an identical page using zend, he couldn't get his below 0.008seconds. I consider that to be significant. Sure it took me a few months to build the initial framework, but now that it's done.. i don't have to do it again, and it does everything I want. I'm happy with that.
Barcode fonts, you can use them like you would create an image with any text on it.
Agree. Plus with Reflection you can [convert any private or protected method to public](http://us2.php.net/manual/en/reflectionmethod.setaccessible.php) so it's not a big deal. The accessors are more for describing intent. If you find yourself circumventing the intent of the original author either you or the original author have done something wrong.
&gt; We're all professionals here, right? You can't assume that. Also, if I release some library to do some task, and it has this problem, and people start using the private methods, then I'm stuck having to keep the private API consistent when I ship a new version. The point is: if I define a public API and PHP throws an error when people try to use my object incorrectly then they either have to learn how to use it properly or fork my code. If they learn how to use it properly then I only need to worry about keeping the public API consistent between versions. If they fork my code then they're on their own. But if my code allows people to mess with things that I hadn't anticipated they'd be able to mess with, then if I change those things (which I may do - after all, they're private and so I'm the only one using them, right?) then I'll break their code.
Sure, just like you can edit all kinds of internal stuff that jQuery uses. But you don't. If jQuery exposed internal methods and people started using it incorrectly, that would be bad for future compatibility. Likewise if I publish some PHP object and people start poking at the private stuff, that's bad. If they hack the actual code and make things public then they get what's coming to them when I change the internal workings in a later version. But if my code allows people to use it incorrectly then that's something I'm going to be stuck with forever.
http://framework.zend.com/manual/en/zend.barcode.creation.html
Does it really matter? I haven't used it, but [ReflectionMethod::setAccessible](http://au2.php.net/manual/en/reflectionmethod.setaccessible.php) looks like it does the same from any scope. In fact, it's probably better that client code *can* do this, for those edge cases where a library can't be edited.
If you consider a 0.0074 second gain worth several months of development then we are operating on different planes of existence. Explaining to a client that spending $30k+ to shave 0.0074 processing time off each page load is equivalent to explaining to a client how they can go fuck themselves and take their business elsewhere. Of course nobody would ever explain it to this way even though these are the precise metrics that matter to a client. If you do proper optimization you'll find an application built on Zend (or any other framework) to perform well enough for any volume of traffic. You will optimize your images and other asset files before you roll your own. You will hire a professional to look at your server software and hardware before you roll your own. You will use CDN's and cloud servers before you roll your own. You will completely rethink your application logic before you roll your own. You will consider switching away from PHP before rolling your own. That is, if you actually care about your client. If you're wanting to be proud of your own coding ability, lock the client into your services, increase the cost of support and development for your client then by all means. This was my mentality several years ago. I obsessed over optimization and used every other library as a point of reference for my own custom solution. I had a lot of great unique ideas of my own. I had a lot of fun and did a lot of great work. The problem is when you actually start thinking about problems from a client perspective or start working on large collaborative projects. You'll end up seeing the error in your thinking and for what? 0.0074 seconds on a page load.
But if you're passing the function name straight through to `call_user_func()` then that's unecessary, as the `__call` magic method will *only* be called for protected or private method names.
&gt;If you consider a 0.0074 second gain worth several months of development then we are operating on different planes of existence. A) I said a 'few', as in 2 to 3 months. B) I never have to make another MVC again. Don't twist my words. Also, I don't do contract work. And if you don't see the value in speeding up your code base by an entire order of magnitude, you really are on a different plane of existence... If I can load 10 pages in the time it takes for you to load 1.. yeah, it's definitely worth it.
If you just need QR Codes, then the Google Chart API is pretty failproof - http://code.google.com/apis/chart/docs/gallery/qr_codes.html
I would never recommend Zend, the library adds a 28MB footprint which is a tad on the hefty side.
I just used a Linux program "barcode" and shelled out to it. Supports every format I needed, dumps back a PNG. A little slow, though. http://packages.debian.org/lenny/barcode 
I prefer to give developers the choice to: 1. Use the documented API 2. Use internal methods **at your own risk**
I'm not trying to twist your words. Apologies if I have done that. In practice, a Zend component is not where optimization begins and you'll find more impressive gains elsewhere on top of retaining a flexible, versatile implementation that is familiar to other developers. On top of that you won't have to bring the maintenance of the library in-house just as you don't have to for Apache, MySQL, jQuery, CKEditor or any vendor package. It's funny that the site you posted actually has a performance report at the bottom of the page which directly contradicts the gains you seem to think you've achieved. Here are my results: * Page generated in 0.0100 seconds using 878.57 KB of memory * Page generated in 0.0118 seconds using 879.98 KB of memory * Page generated in 0.0084 seconds using 879.98 KB of memory * Page generated in 0.0238 seconds using 879.98 KB of memory * Page generated in 0.0081 seconds using 880.59 KB of memory * Page generated in 0.0085 seconds using 880.59 KB of memory * Page generated in 0.0084 seconds using 880.59 KB of memory * Page generated in 0.0083 seconds using 880.59 KB of memory * Page generated in 0.0085 seconds using 880.59 KB of memory * Page generated in 0.0090 seconds using 880.59 KB of memory Best: 0.0081 Worst: 0.0238 These results are comparable to any other site using WordPress, Drupal, Symfony, Zend, CakePHP or any other framework. The difference, which is crucial, is that you have: * A custom solution you've had to devote developer hours and client budget to on top of the actual application logic. * A system that does not benefit from the shared knowledge or security patches discovered by outside collaborators. * A system that requires custom documentation or developer orientation for new hires to explain the framework on top of the existing requirement to explain the application logic. * A system that is likely not as flexible or versatile because those were not requirements of development like you have with an abstracted component library. I understand that my results from your performance text may vary greatly but this is all sidestepping my main point which I've tried to get across here which is that if you roll your own you're stuck with the same exact problems while throwing away all the benefits and at best you'll shave off a few milliseconds which is negligible. If, instead, you invest your time and money into optimizing elsewhere such as caching and profiling for bottlenecks you'll discover your optimization woes are not coming from where you think they are. I mean no insults by any of this. If the code you created works for the problem you were trying to solve then kudos but you can't publicly deride the usage of well-built libraries and promote custom solutions without someone like me pointing out that it's this misguided kind of thinking that leads to a waste of a tremendous amount of money and time for very little gain. EDIT-formatting
Dude, the site is under development. I've got every debugging feature turned on and have no finished implementing memcache on most of the pages. It's likely that you're hitting pages that pull at least 3 mysql queries (when i'm done there wont be any sql anywhere and it will always be hitting cache). Not to mention each page read writes to 3 files (for logging during testing). Also, I'm running 20 other websites on that server. The server has mysql, postgresql, memcache and bit torrent all running. So golly, yeah, it's not showing you the best possible numbers, the server load is also running at load average: 2.50, 2.37, 2.36... My speed tests were done under proper ab environment testing....
Good luck.
Thanks?
http://www.barcodephp.com/
Well, consider this: your non pdo objects that don't need pdo shouldn't be spawning objects at all. Anythin your object needs should be passed in through it's constructor. This lends itself well to unit testing that shouldn't need an actual database to execute. And if you're using the singleton pattern it would look like class PDOObject{ private static $instance=null; private function __construct(){ //no news for you } public static function getInstance(){ if(PDOObject::$instance==null){ PDOObject::$instance=new PDOObject(); } return PDOObject::$instance; } } class MyObject{ private $pdo=null; private $obj1=null; public function __construct(PDOObject $pdo, OBJ1 $obj1){ $this-&gt;pdo=$pdo; $this-&gt;obj1=$obj1 } } $object=new MyObject(PDOObject::getInstance(), new OBJ1());
I wrote [PDFB](http://chir.ag/projects/pdfb/) a while ago and still use it all the time. It handles most common barcode types without any problem.
To be honest, the Singleton PDO connection trick really is just a global var in disguise, with more overhead. You're basically trying to get a PDO connection for your code in the most optimal way without having to re-establish it all the time. To be painfully honest, a global var would do the trick, and uses the least amount of system resources actually. It's just that it's not "cool" in the eyes of OOP enthusiasts or anal-retentive refactor purists. But who cares? I don't -- I use the global var. It's simple, it's easy, it uses the least CPU time, it gets the job done without fuss. However, it is the ONLY case where I would use a global var in my PHP code.
I agree with you. If you're making a site that isn't likely to become huge anytime soon (e.g. local mom &amp; pop store), you don't have to worry about most of these little rules. Sure, if 12 developers are going to be working on your code 6 years in the future, follow all the patterns and guidelines etc. If you're just making a simple site and want to get work done fast/simple, go ahead and declare a global or Singleton. I prefer to use Singleton's personally for DB so I don't have to keep doing global $db in functions. DB::query("blah") works. It's fast, clean, and straight-forward.
&gt; the Singleton PDO connection trick really is just a global var in disguise, with more overhead. **All** Singletons are globals in disguise with more overhead.
To me, I count the number of characters: global $PDO; vs. $PDO = PDO::getPDO(); The global line is less chars. Then, the global line also uses less system overhead, but only very slightly. On a team of other devs, however, I'd probably get smacked around. It would be SCANDALOUS! How dare I come up with something that has less typing and less system overhead? How dare I introduce a global -- why, that would introduce the camel's nose under the tent for more of those globals to start coming in, and then we'd have a tent full of camels! So, yeah, I'd use a Singleton in that case just to get these guys off my back.
i agree with wikipedia 100% here, **"Some consider [singleton] an anti-pattern, judging that it is overused, introduces unnecessary limitations in situations where a sole instance of a class is not actually required, and introduces global state into an application."** so you have to ask yourself, do i really need a singleton? the answer is generally no - therein my suggestion to you is re-think your pdo object implementation. try to think of the database in it's most abstract sense. typically a database class encapsulates a connection string, a connection link, and a platform constant. the platform may and often does vary, whether it's PDO, MySQL, Postgres, SQLite, nosql, etc. in order to ensure flexibility and long-term value, don't bake-in PDO functionality as there could very well come a day where you decide to use another database. Instead, [loosely couple](http://en.wikipedia.org/wiki/Loose_coupling) your database abstraction layer to your database drivers and avoid the spaghetti headache and tedious chicken waving.
I use my own DB Singleton class that performs login/logging/PDO-operations (prepare/execute etc). So I don't actually use PDO directly ever. It's always DB::operation(params) no matter which part of the code. 
why pass a singleton through a constructor's arguments exactly? dependency injection is used precisely to decouple components - but using a singleton at all in this context is contradictory to that end. if you really need to reference the singleton, you could just as easily invoke getInstance *inside* the MyObject constructor without the argument.
One thing comes to mind: You can unset a global variable anywhere in the code and attach a new connection to it (or do whatever the hell you want with it), but you can only do specifically allowed things to a singleton object.
For making mock objects in unit tests. class MockPDOObect extends PDOObject{ //@Overrides public function getRow(){ return array('expectedTestKey'=&gt;'expectedTestValue'); } } During runtime you want to make sure only one instance exists (hence the singleton pattern), but for testing you want something to return consisten data based on the inerface.
I'm trying to keep it loosely coupled, but if I do it too much, I can't do things like joins or whatever and it becomes too generic :S Like I'm keeping it loosely coupled through mappers, but if you abstract stuff too much, you can't actually take advantage of SQL.
You can use many parts, including this one, as separate libraries. There are a lot of ways to speed up the library as a whole.
Your code is exactly what I'm trying to avoid. I don't want my models to be coupled to a specific option like a PDO. I want my PDO to be ONLY passed around at the database abstraction/mapping layer, however how then do I have my controller make a PDO, then attach it to a mapper which makes a mapper(good) which returns a nice object. Then if I want that object to create a mapper, the PDO needs to pass through it somewhere, and suddently my objects are fucking around with PDO. Argh!
The extra overhead is ridiculous to even consider- you're talking about a huge micro optimization that won't save anything at all. Typing is also a joke- most IDE's have class and function completion, and most programmers know how to type pretty well. With a global you also introduce more points of failure- if the database dies and the code doesn't handle it properly the next piece to use it will fail miserably, while someone who used their getPDO() function to add some error handling would be in better shape. Don't get me wrong, using a global isn't the biggest deal. You're just right (or maybe just "not that wrong") for the wrong reasons.
You really just need a factory method to create the connection, not necessarily a singleton. From the outside they look the same, just a static function that returns a PDO- DbManager::getConnection('connectionName'). What makes it a singleton or not is whether the PDO object you return is a the same one (typically stored in a protected static variable) or a new connection each time. Typically speaking, Singletons are a bad idea. As you've probably heard by now they are essentially just globals in disguise and that can lead to all sorts of issues. It makes software harder to follow and debug, make extending the functionality (or reusing it in outside code) more difficult, and is just a bad practice. However, there are cases where bad practices can in fact be the right choice. Because of how much overhead is involved with a database connection- typically a whole tcp/ip connection, authentication, and so on with a server- you don't want to constantly open new connections for each query. You also want to make sure you explicitly close() your database connections, as some (mysql) will just leave the connection hanging open and even hit those max_client numbers because of it. In this case using a singleton makes complete sense, as you avoid significant overhead and have easy access to perform cleanup operations as needed.
&gt; gnostic I'm don't think that means what you think it means. The gnostics were a 2nd century version of Mensa on religious steroids. In English, gnostic is not (quite) the opposite of agnostic. Here's what I think you meant "I like PDO, but I don't want to be tethered to it".
See my other reply, this is meant to allow the PDOObject to be mocked out. I think you and I are on the same page. Think about it and come back tomrrow if you still need some hints.
Hey, take it easy, man. I get your points. They are valid. I will be thinking of them on my next project. Thanks for making the case for singletons.
A singleton serves precisely the same purpose as globals, only it's OOP. It has all the problems of globals. The only difference is that it's less obvious what's happening. That's why they call it a design pattern (I'm being a bit sarcastic, but it's kind of true). The problem with globals is that they make it difficult (strictly speaking impossible) to do unit testing. In order to test, you have to change the global (in this case the singleton class) and this can be difficult on the fly. Right now I think I'm a fan of the passing around the database method. It's super obvious, easy to test, and doesn't depend on any global state.
Aye, pretty much.
I like to use a db function, like this: function db() { static $db=false; if(!$db) { $db=connect_to_db(); } return $db; } Then you can go db()-&gt;query(whatever) and not worry about object twiddling. As a bonus, you can drop queries in everywhere. If you create your own pdo wrapper class you can have nested transactions, too, like db()-&gt;beginTransaction(), db()-&gt;commit() and db()-&gt;rollback(), but PHP [doesn't do those natively.](http://www.kennynet.co.uk/2008/12/02/php-pdo-nested-transactions/) Edit: not how you set up a static.
Have you seen Krumo for printing out arrays and objects? It puts everything into a tidy accordion tree http://krumo.sourceforge.net/
use a dependency injection framework. it will solve this problem. stay away from singletons that control access (like your pdo wrapper) and/or global/statics that control access.
This. Using global variables make them modifiable by some evil code in some evil module. Using singleton allows you to protect it however you see fit and also give you code-completion in most IDEs, which global variable just won't do.
tldr: include_once/require_once isn't any slower than include/require. 
abstracting out and implementing the *many* tricky characteristics of a database abstraction layer may seem like an insurmountable task, especially for a small team or one person. web developers usually lack the competence and/or patience to do so even remotely well, instead resorting to hacky shortcuts, code duplication, and anti-patterns to push features upstream prematurely. typically i try to implement components as generically as possible, often using interfaces and subclassing the really useful stuff later on. this approach has a number of benefits - not the least of which are code re-usability and inherit decoupling. a lot of the libraries illustrate a poor understanding of database fundamentals on part of their developers. this lack of understanding generally translates to *BIG F'CKING HEADACHE* for anyone else trying to use or modify said libraries. database abstraction layers are a dime-a-dozen, but good ones are few and far between precisely for this reason.
I've been thinking about &gt; I sincerely wonder what you're doing in PHP that makes breakpoints and such more than occasionally useful? (Not to mention why.) and I think it comes down to websites and web-applications. I've always been invloved with using PHP to make large, complex systems with thousands of objects, very complex business rules and options. Using print_r() is laughable. But when using PHP to hook a DB up to a simple database for a little shopping website or a blog, well, print_r() is fine. When the PHP code is 100, or 1,000 times larger than the HTML templates, then you start to need some help debugging. Also, if you are diving around in the ZF it is useful to step into all the classes and see how they interact. Putting a breakpoint on the first line of the bootstrap and following every single method call is interesting. It gives you a lot of insight into patterns and stuff.
That looks interesting. My custom function is a big enhancement from var_dump, but it doesn't collapse the branches. If you have xdebug installed you get improved error messages and colorized var_dump.
I have xdebug but it doesn't color my var_dumps. I don't know if it's netbeans or xdebug but the breakpoints are completely ignored, making it largely useless.
&gt; The extra overhead is ridiculous to even consider- you're talking about a huge micro optimization that won't save anything at all. It can if you also use lazy database connection. On pages that can fetch everything from caches or otherwise don't need to talk to the database, this way you never have to waste time talking to MySQL at all.
Be more specific. I'm trying to write my framework along the ideas of dependency injection.
It sounds like xdebug isn't setup correctly. There should be an xdebug section in phpinfo(). If not, make sure you add the zend_extension line in php.ini. You also need to make sure it listens for the Netbeans connection. Your whole xdebug configuration in php.ini should look something like this: zend_extension=/path/to/xdebug.so xdebug.remote_enable=1 xdebug.remote_handler=dbgp xdebug.remote_mode=req xdebug.remote_host=127.0.0.1 xdebug.remote_port=9000
Okay, so I'm using the idea of each class having a mapper that is PDO aware. Ideally, all a mapper should do is take information and make it a class, but it seemed like a good place to acquire said information, too. http://github.com/radiosilence/trouble/blob/master/trouble/kill.php Here's a typical example. The kill object has several foreign keys that I want to be replaced with objects - the SQL way to do this is with joins. How would I abstract this out? Do I need to abstract this out? How would I generic-ify the JOIN SQL without having O(n) SQL statements? Should I specify an interface for each object? A storage class? Here is the thread that serves as "precursor" to this one: http://www.reddit.com/r/PHP/comments/dtvb1/optimising_objects_that_load_from_the_database/
Run PHP applications within any J2EE server or servlet engine and/or connect script engines like PHP with Java back ends efficiently. 
I would go even further. Never ever use SQL in your program at all. Use something you can manipulate with PHP (like an object representation of your SQL query or your database objects) and not juggle with string concatenation. That way you also have to worry less about SQL injections and related horrors.
Slides are from Fabien Potencier's workshop presentation at ZendCon: http://joind.in/talk/view/2225
Although this is obviously a spammer, the subject material is valid. Anyone got any useful (and reputable) links to Java/PHP stuff?
It is, I can step through the code line by line, only breakpoints don't work.
This is not true process communication, you are simply calling the Python interpreter from your PHP interpreter which is incredibly slow due to the context switch involved from switching processes.
If you need to call to Python from PHP repeatedly, install [Celery](http://celeryq.org/) and send your messages via [php-amqp](http://code.google.com/p/php-amqp/). This is faster by orders of magnitude and more fun too.
What's wrong with doing something sane and efficient, like reading/writing a FIFO or socket?
Is there any particular reason you're looking for a partner? Why not release it, the community will build upon it, just give credit where credit is due. :-) Furthermore, give it a name, and a website, and you'll be pretty well off.
It has an internal name already but this is open to discussion. Building a website is out of the question at this stage (of couse it will be done later on). Who I am looking for is somebody who will use it in some real projects (other than mine) so that the shortcomings are revealed.
Ahh, that makes sense. Do you have a more extensive overview of its features and functionality? Does it have a caching mechanism? Are there any other library dependencies other than PHP 5.3? I'd be interested in taking a look at it, as I'm continually working on a couple new projects per month, and although I have rolled my own framework, a majority of the projects are for clients that I do not release my framework to. Also, I'm not quite happy with the current frameworks out there, for one reason or another.
Here is a list of features: * Automated conversions of variables into different forms. * File-based variable caching in five scopes: Request &lt; Window &lt; Session &lt; Database &lt; Application. * ORM based on classes and meta-data, with Lazy evaluation and caching. * MVC based on controls with data-binding. * Infrastructure for multilingual interface and data. * Database upgrade mechanism. * LINQ-style iterators. Thanks for your interest. :-) Edit: Oh, and there are no dependencies other that prototype.js, which is also under question. 
Fishing for partners out of the blue isn't easy. I recommend you set it up as a google code or (preferably) github project. * Give it a name, even temporarily, if it doesn't already have one. * Decide the license this is released under (BSD, MIT, GPL, etc). For a framework, I don't recommend using GPL. * Provide some examples of how the components can be used. While some developers may read through the source code to figure out how it works, more direct marketing is much more efficient. As a developer I want to quickly get an idea of what this thing does for me. In most cases that means that I want to see how it simply plugs into my project and quickly solves that problem that otherwise requires additional development time. * Wait a while. In fact, don't sweat it if people don't beat down your door with ideas the first few days. You may build it and they will never come. Something might be missing. Post here for feedback. People have all kinds of opinions; too big, too slow, don't like the API, don't like the naming conventions, want to work with arrays instead of objects (or vice versa), too tightly coupled, etc. Could be anything. If it's worth it to you to do remediation work, have at it. Otherwise just selectively ignore criticism. After all you're steering the project. Just continue to use it as you do anyway. * Get ready for bug submissions and feature requests. I don't have numbers on the ratio but lots of folks just want to take a component and run off. Or they "complain" that something is broken or missing. It usually takes a little encouragement to convince people to contribute to a project. Be inviting. * If you use git, you may receive pull requests and can easily integrate someone else's work, svn isn't all too graceful about that sort of thing. * Grow a thick skin, too. You'll hear all kinds of non-sense about how you're doing it wrong. It may take some effort to separate a very opinionated rant from any substance it may have. Some comments you'll want to dismiss in their entirety, others may reveal a great idea once stripped of their subjectivity. * You (or the project) can't be everything to everyone. You may need to potentially disappoint or turn people away. Some of this was probably unnecessary to point out, but still, maintaining a project for a few folks at different companies on a professional level can be quite a different experience from unleashing it into the wild. In any case, I'd say let the project grow more or less organically. Small steps, release early and often. Just publish it and see what happens. 
Make sure you're using zend_extension and not extension when you load xdebug. The problem you're describing is exactly what happens when you don't use zend_extension.
Thanks for your insight. :-)
Thanks, but I need to generate code 39 or 128 format.
What the fuck is this and why is it on my frontpage?
I don't think I'll ever understand what drives people to create classes with no public properties and getters &amp; setters for every one of those... with the getters and setters doing no validation and containing no special logic. What's the advantage? It's just a bunch of useless code that serves no purpose other than creating a timesink. Nor do I think I'll ever understand why people are still using the ancient mysql extension for new code in 2010.
you are writing a di framework? go take a look at a bunch of already existing php ones. they should be really easy to follow since di is very simple. 
This is one of the oldest PHP performance myths. include_once/require_once were very much slower than include/require in PHP4. They've been fine since PHP5.
I personally prefer [Gearman](http://gearman.org/) for my cross-language remote procedure calls / distributed task queue / message passing thingie. Thingie is the technical term.
Actually, *all static* variables are globals in disguise. Yet, they don't litter the global namespace, they can be private or protected, they can be code-completed by any descent IDE etc. So, yes, I don't mind the overhead.
No further links, but have an anecdote. For a while, we used [Avalara's Avatax](http://www.avalara.com/), a sales tax service. It worked pretty decently. While it is a web service, their preferred solution is a Java class. They originally advertised a PHP adapter as well, but that turned out to be the Java class and [the PHP/Java bridge](http://php-java-bridge.sourceforge.net/pjb/). While it *worked*, it was problematic. We use Apache and mod_php. The PHP/Java bridge works by creating a Java process as a child of the PHP interpreter. When the Apache child exited, there was only about a 75% chance of the Java process exiting successfully. Frequently it would stick around as a zombie, sucking up memory and doing little else. We ended up writing a cron script to kill all of the open Java processes, just to keep the server from running out of memory. This made me rather unhappy. Perhaps they've fixed this problem since then. Things also might not be as bad under PHP 5.3 and FastCGI.
This sounds like a good way to do it, but I haven't find any free barcode fonts (for commercial use). 
This sounds interesting. I can do that. But what exactly is phpexperts.pro? Do you have a website?
I think the rationale being: "If I write a lot of code which accesses members of my classes and I later need validation on some members (which at this time I don't) I would have to revisit every bit of code which calls my class. Gee, better write setters and getters everywhere." On the other hand, smells like [cargo cult](http://en.wikipedia.org/wiki/Cargo_cult_programming) to me.
To be clear I was speaking about the difference between using a global variable and a singleton, not about whether the connection should be shared or global. In fact, in my other [comment](http://www.reddit.com/r/PHP/comments/dzt7v/is_singleton_ok_for_database/c146efn) on this subject I actual argue for the use of a singleton in order to avoid connecting to the database too many times. Also, in my own projects I tend to do exactly what you're talking about. I actually built a nice little caching library, so most of my applications can avoid connecting to mysql at all for the average user.
I am sorry but this doesn't seem to work.
No cake for you.
If you write your validation based on regular expressions, you can pretty easily write them in one place and have them used in both the server/client side contexts.
I realize that, unfortunately that is not feasible when you start including more complex business rules.
This seems overly complicated to me. Why not just use (with Zend Framework) an instance of Zend_Db_Table_Rowset in the view, loop through it and add the logic in with the view? With that object you already have the magic method __get so you can just get the row values directly. Example of a controller action: $users = new Model_DbTable_Users(); // extends Zend_Db_Table_Abstract $this-&gt;view-&gt;users = $users-&gt;fetchAll(); // returns a Zend_Db_Table_Rowset object And the view: &lt;?php foreach($this-&gt;users as $i =&gt; $user): ?&gt; &lt;?php if($i == 0): ?&gt; &lt;?=$user-&gt;avatar?&gt; &lt;?php endif; ?&gt; &lt;?=$user-&gt;username?&gt; &lt;?php endforeach; ?&gt; 
if(this.parent.comment==negative cake comment){ die(crying); }
Create a server-side validation infrastructure on the server. When you want to add client-side validation, expose a validation service. So you're actually doing server-side validation, but in an AJAXy way, that feels like client-side to the user (they find out they can't type before they hit submit). This strategy works well until you have so much user activity that the server load becomes an issue. At that point, you're probably justified in writing custom client-side code to mitigate that load.
Sorry, should have known. This is much shorter: !cake
I used to be big on client side validation, but it's so easily defeated that it's almost not worth it. Sure, it saves a roundtrip to your server for basic validations, but you're probably best just submitting the form and letting your back end code handle it. My backend code uses my framework Jolt - http://github.com/leftnode/Jolt/tree/master/Jolt/Form/ (see the \Jolt\Form\Validator stuff, docs soon)
I wrote my own custom validator. 2 years ago, when I wrote it, I was proud of it. Now, not so much. But maybe it will help you. It uses css classes on the form fields to determine what validation mechanism to use. For example, &lt;input type="text" class="required minimum_10"&gt; Would be a required field, that had to have at least 10 characters in it. Look at the big `switch` statement that starts on line 46. It's not complete by any means, but worked well enough for us. [Here's the script](http://pastebin.com/6iWUkdKG)
This. Basically, all the logic is handled by server side scripts. Your JS just makes an ajax request behind the scenes. Also, you use basic javascript frameworks to handle common tasks like required fields and what not.
I think the idea of client side validation is so the user gets feedback on the spot, rather than having to submit the form.
What noise?
Then I'd only do trivial things like checking valid fields, wouldn't do anything more than that.
I really think that [http://haxe.org/](haxe) could be a solution here, with some care you could write a validation library that would be directly useful to php and to js. 
Figure of speech. PDO is an extension, it can be installed. There is no reason for it not to be installed on production.
I've been messing with this, and it looks like it's going to be the way we will go. Thanks for the reply, and thanks for writing the script!
I write them both on the server and the client side, there is no other real way to make it run fast and be secure too.
Nice to see varnish getting more love. We're currently using varnish and ESIs to implement multi-source, distributed search aggregation. Works like a charm.
Valid fields as in...?
Correct. I should say that this is mostly used when you're going to be manipulating the value of `$func` within the `__call()` method itself, so the `if ('_' === $func{0})` usually occurs later.
Sorry, I meant required fields. Just use some JS to make sure fields that are required have at least some value in them. Then let the backend code do the in depth validation.
This again. Don't actually do any data validation in your JS. Make AJAX request to your server-side validation class or function set. Use this same code upon form submission to handle your form submissions.
&gt;This strategy works well until you have so much user activity that the server load becomes an issue. At that point, you're probably justified in writing custom client-side code to mitigate that load. perhaps you could make your validation service generate validating javascript logic on page load instead of using ajax?
Yes. This is what I do (more or less). I usually skip all javascript trickery until the form works with server side validation only. Then I can add js niceties for the user. 
I found the documentation for the new migrations now. Wasn't in DBAL like you said: Here we go: [Migrations 2.0](http://www.doctrine-project.org/projects/migrations/2.0/docs/reference/en)
I've only started to use, learn how to use and learn how to write regex (after 7-8 years of programming).
Not yet in practice, but HTML5 provides for form input pattern= regular expressions. Those can be used as-is client and server-side. With minimal jQuery logic for old/current browsers and some visual feedback. Avoiding complex form field dependencies and requirements helps usability.
I made a form DOM parser so I instead of generating forms with php, grab the validation from forms written in html. E.g. &lt;input minlength="4"&gt; Then use a DOM parser to validate server-side: $form = new Form("formfile.phtml"); if ( $form-&gt;validate( $_POST)) // do something.. else echo $form-&gt;__toString(); // obviously goes in your view, error messages have been set Custom server-side validation can be done before/after validate() or by adding callbacks. A quick JS library can handle validation of the html5 or custom data- attributes.
There are between 100 and 200 frameworks for PHP in existence. While there are differences in scope and size, there isn't much uniqueness. Particularily OOP, ORM and XML are very common buzzwords. And without looking I'm somewhat certain that it also doesn't follow the real MVC pattern, but is more or less PMVC or MVP. While the type system sounds at least interesting, does it bring anything else than just another API? Code reuse, compatibility to anything?
Thankyou, what a great idea. Feels like one of those things thats probably almost an industry standard that just never occurred to me :(
OMG! Evil code, evil code, evil code all the way! All the time I though I could just eval() user input, but today I learned that this could unset one of my global variables. Ouch.
That sounds like code triplication to me. Php validation, js validation AND a php code to spit out js validation code. Not that it's a bad idea, but static js is going to beat out php in terms of server resource usage.
A more OTT solution: public function __call($func,$args) { $reflectionMethod = new reflectionMethod($this,$func); if ($reflectionMethod-&gt;isPublic() === false) { throw new BadMethodCallException("Invalid method called: {$func}"); } // .. continue on }
Client side validation is a user convenience. Server side is your security. Code around that and you'll be fine.
What's PMVC / MVP?
How about using AJAX to submit the form? If it works, it shoves you at the next page, if it fails, it throws up a box going ohfuck.
Sounds like the opposite. Write your validation code once, run it through the convertor, and you're done. There's extra code, but you're not writing it directly.
burn it with fire!!!!!!
Note that thanks to facebook it can now be a compiled language (http://developers.facebook.com/blog/post/358)
The level of expertise and bar of entry to php is much lower -- you can sorta hack away at PHP and get it to work whilst doing the same in Ruby or Python can be a bit more painful (especially sense you have to research debug components to use (if you're not using the each languages respective web frameworks)
it would not be hard at all to write a regexp that runs in notepad++ that goes through your app and looks for \$([\w])\[(\w) and replaces $2 with '$2'
I wish php was a bit stronger with Binary then stuff like this would be easier for people to understand -- the bitwise operators are almost orphaned children in normal php use...
Stronger how?
I actually have a regex for TextMate that does exactly that, but arrays aren't the only places he used it at. The site is pretty busy and we don't have the resources to test all the code to make sure we didn't miss anything. It's one of those scenarios where it's more expensive to fix it then to just not upgrade, and the people paying for it don't see a reason to spend that money because the site works just fine as it is. I'm not too worried about it tho, the owner of the site has hinted that they're going to be moving it to another host (we can't guarantee the uptime they require) and has apparently hired another developer to continue working on it.
It's just the hipsters of the programming world -- I see PHP as an art and I love doing it for a living.
It's because rails is the new buzz word with investment groups... It's so annoying to pitch stuff to them only to hear them request information about a bunch of nonsensical buzz words that have no real effect on the outcome of the project (Casandra, Rails, bla bla) as a developer you pick the tools as you need them if you don't need them you don't sit around figuring out a way to jam it into your project to make investors feel better about their lack of understanding.
Than you were doing the consulting part wrong
better support for dealing with binary data (i have nightmares about binary socket support)
I just meant what kind of features do you think php is missing- ie, how would you make it stronger. It's not that I'm disagreeing with you, I'm just curious how you'd fix it.
I won't even bring up that one time when evil code killed my grandma and took my cat as a hostage.
neat idea, but it might be difficult for some who require xhtml strict 
No doubt. :-) Retail wasn't too bad though. The drone feedback loop took a while to take a hold on me and it was a hell of a lot of fun for a time. Although, "Penny Arcade's take on [Black Friday](http://www.penny-arcade.com/comic/2009/11/25/) is almost entirely accurate.
I had a homegrown framework a few years ago in Perl that did this - you store your validation rules in the model as a regex, then a simple method call can either validate your input or return javascript code to embed in the document. Most MVC frameworks pretty much do this now - at least storing the rules in the model - that I've seen.
A long time ago I used a library that does both automatically. My friend told me that jquery can do that too. I haven't been able to verify his claims and now i've forgot the library's name :(. I found [VDaemon](http://www.x-code.com/vdaemon_web_form_validation.php) just now using google. Seems simple enough, input rules and tell where in html to enter scripts and error messages. Check out the [sample](http://www.x-code.com/vdaemon/samples/registration_f.php) with and without javascript. Can anyone name other **simple** libraries?
And one of the best ways to garner interest is to ask specific questions. Instead of "Here's my great big framework, what do you think?", ask "Here's a cool little feature in a small part of this, would you have a look?" or "In this part of my framework, I'm not sure if I want to do things this way or this way, what do you think?" People need a thing small enough to latch onto.
I've done it once with CodeIgniter/jQuery. It would read CI form validation rules and return generated javascript for jQuery validation plugin, no advanced stuff, just required, numeric, alpha, email, etc. 
&gt; Cloud computing underwhelms a PHP developer FTFY
The type system sounds interesting but the rest of the framework sounds like it's pretty standard stuff. You might do well to just contribute to an already existing framework that would benefit. In my opinion there are already too many frameworks and not enough contributors. You could be a more valuable asset to them.
&gt; Afterward, developers gave cloud computing mixed reviews. Maybe we're underwhelmed because we recognize that cloud computing is a concept, not a product, and that most of us simply don't have a need for it.
Need more info... What are you exporting from? If it's a database what database is it? Anyway I'm currently using this library to interact with excel files. You might find it useful too. [phpExcel](http://phpexcel.codeplex.com/)
MySQL database. Info from about four tables to collate down to one excel file. Would be helpful if I could password-protect the output file as well, but not familiar enough with Excel to know if that's a possibility. Taking a look at phpExcel. Thanks!
There's the PHP Excel extension: http://ilia.ws/archives/222-PHP-Excel-Extension.html
Ramen!
From [**Cloud computing *can* save money: by eliminating U.S. jobs.**](http://www.infoworld.com/d/cloud-computing/unisys-official-says-cloud-computing-can-save-money-eliminating-us-jobs-635) &gt; Marcello said Unisys has deployed a private cloud internally and cut provisioning times from 10 days of manual provisioning time down to five minutes. &gt; "We were able to eliminate a whole bunch of actually U.S.-based jobs and kind of replace them with two folks out of India to serve a 1,200-person engineering organization," Marcello said.
Also: [**California government website crashed because "the cloud blew up"**](http://latimesblogs.latimes.com/california-politics/2010/11/secretary-of-state-blames-cloud-computing-for-crash-of-voter-result-system.html) &gt; The state [of California] was using a "cloud computing" system in which at least 50 servers outside the Secretary of State’s office were being used to manage the heavy traffic. &gt; "The traffic to the website has been exponentially higher than what was even projected" by the state’s IT experts, she said. **"The traffic basically blew up the cloud."** She said web traffic at the Secretary of State’s site was **higher than experienced during the last presidential election.**
this is why you will see the word "enterprise" dominate the cloud discussion. It really doesn't apply to individual developers. Although, a good example is Imgur; one or two guys built the site, it got so huge so fast that they had to upgrade to a cloud solution. Resource scalability/extensibility can make or break some sites.
Wow. WTF
I've tried a fair number of php excel implementations and have found a much simpler solution that works across excel versions without a need for any custom code. Output an HTML table and give the file an .xls extension and excel will parse it correctly (Even unicode friendly provided you output the correct html header). The only drawback you get is a warning message from excel when you load the file telling you that the contents of the file does not match the file extension.
Spend two hours debugging new code. Finally realize this function is haystack, needle.
Oh dear FSM I hate that!
If you can't figure out references in PHP, you should probably stay away from any language that supports any sort of references or pointers. PHP's references are stupidly simple to comprehend, even moreso after they deprecated pass-by-reference. Not to mention, there isn't really a good reason to use references anyway, as passing anything but objects by reference in an OO context is just begging for problems (I bet at least 75% of PHP "programmers" have no idea what a reference is).
*must ... resist ... urge ... to ... POP THOSE PIMPLES* **POP POP POP POP POP**
I'm guessing that they reached their server instance limit and/or were sending more traffic to each instance than they were configured to handle. I also wouldn't be surprised to find it was horribly designed, and they decided to just throw more (virtual) hardware at it rather than fix the underlying efficiency issues.
There's also [Spreadsheet_Excel_Writer](http://pear.php.net/package/Spreadsheet_Excel_Writer).
Would have happened if they were off of the cloud.
I have used that method, too. One drawback was Excel's insistence to interpret some field contents as dates or numbers (and rounding them), while I needed to display them as strings.
&gt;(I bet at least 75% of PHP "programmers" have no idea what a reference is) I'd say that's a good thing if they're sticking to OOP.
I have done this on a recent project. I have taken the basics from it and hosted the code for you. You should be able to understand what's going on, if not let me know. http://alexcrooks.me/xls/index.php.txt http://alexcrooks.me/xls/excel.php.txt
&gt; PHP's references are stupidly simple to comprehend, even moreso after they deprecated pass-by-reference. I prefer pass-by-reference. Is there a reason to avoid using it? I feel like it is kind of weird to have the callee define what the caller passes, but maybe the costs of that outweigh the benefits.
If you give a header of: `Content-Type: application/vnd.ms-excel` and make a csv (commas between each result from a field field, line between each tuple) The browser will then download it as a "spreadsheet", and open it in excel (with no formatting).
Sooner, too.
This is the correct answer. Very simple and very straightforward.
Well, the whole concept of having a public interface is so that people using that interface don't need to know the implementation details behind it. If you have a function like this: function do_something_to_a_string($string) { $string = explode('-', $string); return implode('/', $string); } Clearly this function isn't designed to take a reference... and if you don't know the implementation of the function, you have no idea what will happen if you do pass the string as a reference (in this case, it'll end up exploding the string, but not gluing it back together). Functions that are designed to take reference arguments should always specify in documentation what happens to the references you pass in. This is always a lot safer. Let's say someone comes along a year from now and re-implements the above function as such: function do_something_to_a_string($string) { return implode('/', explode('-', $string)); } The function now behaves differently with referential arguments (no longer explodes _or_ implodes them), but there's no way for the new developer to know that this breaks the previous behavior-- because there's no indication that this function should ever be taking a reference in the first place.
1) Do not use globals 2) Do not use functions that rely on globals, use singletons instead 3) Do not use XHTML, it's deprecated You should write a small database class that takes the PDO object as a parameter and write your convenience methods there, but not a function because that will need to rely on globals.
A set of wrapper functions (or better, a class with wrapper methods) is not a bad way to go. It'll allow you to easily add query logging in just one place, common error reporting functions, etc. It would also make it easier to switch databases, but I think that idea is a bit overblown (how often do people *really* do it?) The template code... I'm not a fan of mixing PHP and HTML. But if it's to be done, I'd prefer something more like: &lt;?php foreach( array( 'leftContent', 'rightContent', 'bottomContent', 'topContent' ) as $s ) { if( !isset( $GLOBALS['TEMPLATE'][$s] ) ) { $GLOBALS['TEMPLATE'][$s] = ''; } } ?&gt; and then you can simply have &lt;?php echo $GLOBALS['TEMPLATE']['bottomContent']; ?&gt; later in the file, instead of having to use if in every bit of the code.
&gt; 3) Do not use XHTML, it's deprecated No it's not.
Export the Excel to CSV. I'm sure there is a way to automate exporting if the number is too large to export manually. It's possible in some cases to import to a database from CSV, it's just a matter of assigning correct column names to the columns I think.
When done right developers don't even need to be aware of clouds. This is like saying "Orange juice drinkers underwhelmed by orange trees."
3\. Ragequit PHP forever.
Is "*boosting performance by 35%*" really the same as "*lowering the memory footprint by 35%*"? They aren't quite the same thing. Lower memory usage is great don't get me wrong, but when I see "*boosted performance*" I generally think of **speed** rather than memory usage :\
If you can be replaced by what amounts to the server admin equivalent of a shell script maybe you need to upgrade your skills.
Exactly what I was going to say. Title is misleading.
[Read these](http://lwn.net/Articles/250967/)
&gt; 2) Do not use functions that rely on globals, use singletons instead A singleton is a global... A nicer way to do this is to use a registry so that if you load a class already loaded it will fetch it from the registry. Effectively still a singleton but quite easy to override and your class no longer has to know whether it's instantiated or not.
&gt; Well, the whole concept of having a public interface is so that people using that interface don't need to know the implementation details behind it. I agree that's the idea behind having a public interface, but I don't necessarily agree that you have to reveal implementation details to ask that someone pass in a reference instead of a copy of a variable. That seems more like "usage notes" than implementation details, akin to a C programmer knowing whether a call takes a pointer or an integer or whatever. If you had a library with these functions: function do_something(&amp;$bar) { $bar .= " something"; // Do something with this $bar value } function do_something_else($bar) { $bar .= " something else"; // Do something else with this local $bar value } and a front-end script: $foo = "frank"; do_something ($foo); do_something_else ($foo); ignoring the fact that this contrived example is awful, if you read this front-end script it wouldn't be obvious that $foo could be modified by do_something but not by do_something_else. However, if the code was: $foo = "frank"; do_something (&amp;$foo); do_something_else ($foo); it would be immediately obvious that do_something has access to the caller's reference to $foo. Granted, you should know what's going on in the library before making calls to it, but the latter is more "clear" to me. This is coming from a guy with a C and perl background, though.
Seriously, this seems a "how to use bitwise operations to hinder the readability of the code". There are valid uses for using bitwise operations -- testing for flags when that's the way you receive data, reading or writing binary data from files or sockets, etc. This article doesn't show any.
Then be laughed at by people with actual editors that integrate the PHP documentation. Seriously, if this is an issue you're doing it way, way wrong.
&gt; it would be immediately obvious that do_something has access to the caller's reference to $foo While it may be obvious at first glance, you still don't know for sure. You'd need to look at the function signature for a concrete answer. That was the major problem with call-time pass-by-reference: the fact that you could pass references to functions that _weren't_ designed to accept them. In C, you can't pass a pointer to a function that's not expecting one, nor can you pass a concrete object to a function that's expecting a pointer (at least, not if you want it to behave correctly). The change to PHP made its behavior much more akin to C. I still like to avoid references in PHP, since (to my knowledge) there is no way to prevent a pointer from being automatically dereferenced when it is used. Also, there is no performance benefit, since arguments are are all passed as copy-on-change by default.
I wrote a quick tutorial on [using bitwise operations as configuration flags](http://www.reddit.com/r/PHP/comments/dxw9q/account_permissions_bitfields_mind_mildly_blown/c13rx5o).
Well, perhaps he's a *technologyjournalist* in some of the lower level classes and hasn't gotten to the class where you actually have to have your facts straight. Oh wait, that's a typical journalist.
I know what memory is and the speed impacts of having it reduced, but I still think the title is misleading. Unless benchmarks actually show a *speed* increase of around 35% then I don't think it's fair to be touting a 35% performance boost.
Man, as much as I think Ulrich Drepper is one of the biggest trolls out there, he really does put in a lot of effort into a lot of projects. Smart, productive people with shitty personalities frustrate the crap out of me.
So back to 5.2.x levels
For templates, something like [Twig](http://www.twig-project.org/), I've found is optimal. You can have [base templates](http://pastebin.com/GGtZj46m) and [templates that derive from that](http://pastebin.com/mhBjbuf4), etc. 
^ best solution
I remember also having this issue but forget what I did to get around it (it was a loooong time ago) I moved to linux so I can't test it but doesn't it work if you wrap the string? eg: &lt;td&gt;"string"&lt;/td&gt;
This smells like spam.
The reason you see the word "enterprise" dominate it is because that word is a warning label for poorly-defined value propositions that are surrounded more by buzzwords and hype than real-world success stories. Things that we might group under cloud computing certainly have their uses, but in general when I see that term I can be pretty confident someone is trying to sell me something I don't need. The organizations that are actually selling something of value (eg Amazon) focus on the specific value.
Ditto. It's pretty rare for a PHP app to be memory bound.
I think I tested all possibilities like quotes and apostrophes, but in the end I settled with an invisible HTML character like \&amp;zwnj; or \&amp;lrm; at the start of each field.
You can also use tabs instead of commas, so you don't have to deal with commas in fields (which would require quotes, which would require quoting any quotes in the fields).
&gt; 1) Do not use globals That's why I wasn't sure what to think when he sent it, was he being serious or not? He seems to be quite set on the use of global's a fair bit. Even with the disadvantages that go with them. 
Ah awesome. I'll keep that in mind.
Very interesting! Is there a list of other debunked PHP myths somewhere? (yeah, I should google sometime)
XHTML 2.0 was abandoned. It's gone, very few developers produced actually compliant XHTML 1.x anyway. XHTML5 is just a HTML5+draconian error handling, which means it will be just like HTML5(and not like the old abandoned XHTML) but less flexible. Flexibility is what you need in the web sphere badly, you can't even embed a youtube video without failing at validation.
Maybe he wants to make his code unreadable for others. In that case he's still doing it wrong, Zend Encoder does that a million times better.
Actually http://en.wikipedia.org/wiki/Model_View_Presenter . But it likewise just amounts to having a more heavyweight Controller/Presenter than in real MVC (for GUIs).
Boring. Also it's not open source if you have license descriptions like "Free To Use But Restricted" and alike. It would be helpful not to degrade it with a Facebook UI if the main site contains actually useful contents.
[Stack Overflow](http://stackoverflow.com/) FTW!
&gt; I know it is my project, but I don't want to turn off anyone who is willing to assist. That's like agreeing to be in a relationship with someone you don't get along with just because you don't want to be alone. It won't work. Not everyone with have the same ideals, and in most cases people can't be converted to think like you want them to. Sometimes you just need to turn people away, otherwise you'll end up managing a circus act. Unless a significantly portion of code has already been written by yourself (code that paves the way for a coding convention that should be followed for further development) I recommend you start using a framework (any framework) and follow its coding standards to help developers find common ground. That "template system", for instance, is a train wreck. Both in terms of usage of globals and semantics. Take a look at [Zend_View](http://framework.zend.com/manual/en/zend.view.introduction.html). You still have the power of raw PHP, but the convention and developer discipline to keep it simple and using View Helpers whenever appropriate should reduce clutter. Same with the database connection issue. Most frameworks already have a convention for [specifying a database adapter](http://framework.zend.com/manual/en/zend.db.table.html#zend.db.table.constructing.adapter).
The first problem with "references" is that they're not references, they're actually aliases. The only variables that are actually references are objects in PHP 5 (and resources), which have another level of indirection. I can't blame most PHP programmers for not understanding them. The problem is not just the name. What should be just an implementation detail (the no-copy is_ref flag that's called "references" in PHP) for implementing the loosely related pass-by-reference, return-by-reference (which by way, is actually done without "references" for internal functions) and variable aliasing is lumped together in the manual under he same section. The result is that people neither understand the abstract concepts of pass-by-reference, return-by-reference, etc., nor do they actually understand the underlying implementation mechanism, because it's not explained there -- you should see the [reference counting basics](http://php.net/manual/en/features.gc.refcounting-basics.php) instead.
Sounds to me like someone just commented out a bullshit malloc that they put in for exactly this reason ;-)
Their grasp of the English language is comparable to their grasp of PHP5. In their [code example page](http://obullo.com/code_examples/start.html) there is one glaring thing they keep using: `this()`. What is `this()`? It's a function call, and it seems to be using `globals` (what else would `this()` do?) and it's code smell. Their enthusiasm about PHP5 seems dubious at best ('skin-deep' so to speak). The [show-case page](http://obullo.com/mvc2/start.html) seems to be a silly attempt at elevating themselves above other frameworks using silly imagery. A title on the page exemplifies their attempt to elevate themselves above others: "A Different MVC Structure with Extend Switch" -- what does this even mean? I wouldn't recommend using their framework for personal reasons (namely my distaste for their tag-line, "Less Coding, Less Memory"). It seems simplistic and there are no code-examples of database access.
I do agree his English isn't the best. this(): Tip: this() = ob::instance() , you can use this() function in view files if you don't want use ob::instance() , this() function is just alias of ob::instance(). I believe he's trying to say that "MVC2" is simply giving your applications a default parent view (header/footer) and then having the controllers calling both the controller-specific view, and the parent view. I do think he should call it something else. I'm fairly sure every other framework does this. And I'm fine with doing my own database code (don't know if that's a majority or minority opinion). I already found a few bugs, and if I don't like how it works in bigger applications, I'll simply start looking again, I guess! LightVC and Konstruct seem interesting.
I would stay away from that framework, if you want to learn basics and have great documentation, go for [Codeigniter](http://codeigniter.com/), forums are active and newcomer friendly. Obullo doesn't look good. Landing page gives bad impression: "Why Obullo Fast", "Why Obullo Simple", I'm not native speaker, but I'm pretty sure it's not correct English. "[...] put all codes into [...]" screams "give me teh codes" meme. They promise "minimum code" but boilerplate you have to write for each controller is rather fat. "most readable php framework" is a bad joke. Fast glance at code examples forces gives convulsion. PHP5 framework and no autoloading? No separation for view and controller ($this-&gt;title)? Global functions? Directory structure is convulted too. Helpers, libraries, scripts, wth? Obullo won't live long. There is nothing new that this framework is bringing to table, code is ugly and crappy. No sane developer will pick up this fw to work with, sooner or later it will be abandoned by it's creator, no upgrades, no security paths. Time lost. If you wan't top notch, lightweight framework, try [Kohana 3](http://kohanaframework.org/). Feature list is long, HMVC, cascading filesystem, autoloading, high flexibility to name few. Main argument against it is poor documentation (it's not that poor and main focus of the community now), but that shouldn't stop you. Give it a day to play with it, read docs, peek under a hood, it will pay off itself very quickly. There are brilliant minds behind Kohana, project is very active and adopted by many professional developers, this guarantees that Kohana will live long and be constantly developed. If somehow it will be still difficult to grasp (it shouldn't), try Codeigniter, learn ideas and then come back to Kohana, structurally they're fairly similar.
Why is this not in /r/programming or /r/web_design? This is clearly not a PHP specific topic. Why don't you guys post this stuff where the rest of the community can see it?
Wow. Downvotes? Interesting.
I wanted to do this project for the following reasons: * To gain experience doing a project with other people. * See how hard it is to build something from the ground up of this complexity. Although this may get me to reconsider using a framework at least. The person I mentioned was willing to help, and is most likely will be the only person, since the project is rather specific. So it's almost an arranged relationship :/. Perhaps it is doomed to fail... The only framework I have use is Codeignitor, I found it ok, but wan't too happy with it when using it to create a multi-user system (Or am missing something with it), which this will be. But I thank you for reminding me of Zend. I have failed to look at it before hand, better late than never, no?
&gt; The reason you see the word "enterprise" dominate it is because that word is a warning label for poorly-defined value propositions that are surrounded more by buzzwords and hype than real-world success stories. I would say the word "enterprise" means "larger scale than guys like you"
You make me smile =)
I've always used [these](http://css.dzone.com/news/css-message-boxes-different-me) and yours look awfully similar.
Red is not good (on that icon) for a warning message. Use the same color as the background.
I probably got them from there. I've been using them for over a year now so I'm not too sure. Although I've obviously changed the CSS as I like to order elements in alphabetical order.
To be honest, I try not use the warning message at all.
I can't really speak to CodeIgniter. I've had to use ExpressionEngine for a project before and I found it less than desirable. That said, there are a bunch of people who swear by CI and Kohana they might be able to help you with that. ZF does a lot of stuff right. Especially when it comes to separation of concerns and coding conventions. You can use the [quick start](http://framework.zend.com/manual/en/learning.quickstart.html) to get a new project set up. If you're using subversion, and you get to the section about [creating your project](http://framework.zend.com/manual/en/learning.quickstart.create-project.html), you can wire up Zend (and ZendX, if you use that) to be in the library via [svn:externals](http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externals): svn pe svn:externals library and paste in: Zend http://framework.zend.com/svn/framework/standard/tags/release-1.11.0/library/Zend ZendX http://framework.zend.com/svn/framework/standard/tags/release-1.11.0/extras/library/ZendX Makes upgrading easy, just edit the external property.
Good for you. After awhile, you'll wonder how you ever got anything done without them.
I know it's pretty trivial and some of the more senior web developers on here are a few seconds away from going "DAAAAAAWWW", but you'd be surprised how many good PHP developers out there feel helpless when it comes to design. 
However, using XHTML is slightly retarted if you don't plan on embedding any other XMLNS or to use the proper MIME type. Else it's just interpreted as HTML with trailing garbage. Also throwing in target="_blank" anyway is common among XHTML-Strict syntax users.
That template looks a bit painful and the global references make me cringe a bit. We use a dirt simple template handler for setting content and our templates look like this: &gt;&lt;div id="content"&gt;&lt;?php echo $this-&gt;get('content'); ?&gt;&lt;/div&gt;
I like this style of icon for warning. (doesn't match your icon set, just for reference) http://imgur.com/gj8Vc.gif
This framework is based on CodeIgnitor's codebase. Personally, I'd take a look at CodeIgniter or one of the other major frameworks out there (I use Zend). There are a series of webcast videos for getting started in Zend I know for sure and I'm guessing similar information is available for the other major frameworks.
I've been using something very similar with CakePHP for years, minus the icons.
It may be a bit overkill, but it looks safe. I'm curious, what is the reason for doing it this way? Would allowedFiles be populated through some other means? Why have it as a file? eg: ?blah=facts where you check if facts is in the array, then append inc may be better, or even ?blah=caseA, where caseA matches facts.inc eg: $aFiles = array('caseA' =&gt; 'facts.inc', 'caseB' =&gt; 'face.inc'); $file = $aFiles[$_GET['blah']]; include($file); it's short, and there's no open window into what the files are named, or anything like that 
DAAAAAAWWW
&gt; $filtered_string = filter_var($string, FILTER_SANITIZE_STRING); You don't need to filter the file name after you've verified what it is. My bigger concern would be naming your PHP files with an .inc extension. If a client knows the location to that file, then your server would serve the sources to them.
That depends on if you've set how the server should interpret inc files. If you have them running as PHP, (eg: in .htaccess) they wont be viewed as the source
Nice....
This is the same thing I did for .net webforms and coldfusion. Works like a charm.
Color blind people will have a really hard time reading that text.
Nah, as long as that's the only way you use it there's no need. If you're logging it or anything though you might.
this is why instead of posting something to a specific subreddit, it should be able to have labels so the same post and comments will be seen in multiple sub reddits
to me, the idea of "cloud computing" is just web based apps that do more complex things than older web based apps. the kind of things most php developers do normally.
sometimes simple things make all the difference.. kudos to you for sharing this
I concur, that sign style is much more fitting.
You should make sure that $aFiles[$_GET['blah']] is correct before trying to include it.
What if $_GET['blah'] doesn't correspond to a key in the array?
The `.inc` extension is a holdover from PHP3. Please give your include files real extensions, for your own sanity.
"is correct" means run `isset` or `array_key_exists` first.
I'm sure the image you posted could be scaled down.
DAAAAAAWWW. Does this mean that I am now a senior web developer? If so that shit is so going on my resume. :)
I'd go with both. $aFiles = array('caseA' =&gt; 'facts.inc', 'caseB' =&gt; 'face.inc'); if( isset($_GET['blah']) &amp;&amp; array_key_exists($_GET['blah'],$aFiles ) ){ $file = $aFiles[$_GET['blah']]; include($file); } else{ //awh hell naw } 
Colorblind person here. I can read the text fine; colorblind people generally can see lighter/darker values of the same color but can't differentiate between colors. This is where the clear icons come in handy for telling whether something is an alert, info or warning.
DAAAAAAWWWW! no but seriously, good UI design is an area where even a lot of the most experienced developers fall down. Hell, I'd even go as far to say it's possibly one of the biggest reasons for a software project failing. It's certainly one of the main reasons that both Apple and Microsoft make so much money, whatever you think of them. So, thanks.
It's sad to see a great application get ignored because the programmer decided that all of his buttons should have drop shadows.
or use plain php
 &lt;!DOCTYPE html&gt; is all you need Only write wrappers around PDO if you find yourself repeating code a lot class MyPdo extends PDO { function myfunction() { //repeated code here } } using $GLOBALS like that makes me cringe. How you do your templates depends on your mvc implementation. I like the way kohana does it [http://docs.kohanaphp.com/general/views](http://docs.kohanaphp.com/general/views) 
Nice. Nearly identical to what I use, except my icons are a bit smaller (16x16)
What does this mean?
Ah, thanks for correcting me then!
Very nice, thanks for this! I was just printing out green/red text for success/error messages but this is definitely an improvement. Think I'll round the corners on the boxes as well with a bit of CSS3. Think a yellow warning icon might work a bit better too, but I'd hardly use it. Your text looks a lot sharper than those linked by madk.
just to add, i would do this case-insensitive. less error-prone. $aFiles = array('case_a' =&gt; 'facts.inc.php', //... ); $file = $aFiles[strtolower($_GET['blah'])]; include($file);
Then good, either there's a bug (page including something it shouldn't, or someone is trying to get in
Why not make an "allowed files" directory, and use scandir to populate $allowedFiles. That way you don't have to keep adding items to that array whenever you add a new file. Either this way or just check with file_exists() in that directory.
Sad, definitely. But completely deserved.. :)
I like it, reminds me of happier times.
Among open source CMS, PHP based CMS is quite more in number. Each one is competing with Drupal and Joomala.
Me too, along with: http://www.fatcow.com/free-icons/ ColorZilla (Ugh, no u, I always type ColourZilla) http://www.colorzilla.com/firefox/ is really good for grabbing a dark colour in the icon to for the div border and a lighter colour for the bg
It's a response made after [this comment](http://www.reddit.com/r/PHP/comments/e1a6u/thought_id_care_and_share/c14hh70) - by this post's OP. 
But I read those comments and it still doesn't make sense. Is it similar to DUH as in 'of course everyone knows that'?
Xoops? Php nuke? What is this, some sort of joke?
Did you experience "the slap of understanding"?
three men walk into a bar, the barman says "is this some kind of joke?" the men reply, "no, it's a robbery" and shoot the barman. crime is not funny.
Oh god this stupid blog just reminded me of postnuke. Now that's a fucking crime.
silverstripe takes the cake, the rest of them.. irritate me
I found I struggled with what should actually be a class.
The fatcow icons were/are my savior!
You can, but it's a lot easier to separate business logic, etc. with some sort of templating engine besides PHP itself, which allows for more business logic. Plus, usually it's a lot cleaner. 
It does. Congratulations.
blogspam 100%
GetSimple - lean, easy to use, and easy to extend. [http://get-simple.info/](http://get-simple.info/)
i disagree on all things plus it creates overhead and you have to learn a new language
Good UI design is not Pretty UI design. some of the most useable tools I've ever seen ahve been fugly. I am useless at pretty, I am good at usable. unfortunately, people like pretty.
it's like "awww, how sweet."
[the last stable release was released 17 months ago](http://en.wikipedia.org/wiki/PHP-Nuke). I'm sure some people are still supporting legacy apps with it, and creating new ones because it's all they know, but I don't think it's getting many new adopters. 
Does software expire? This software is best if used by ##/##/##.
What a flashback...This was my first CMS, about ten years ago.
my point was that it doesn't seem to be a very active project, and there are many viable alternatives. but no, software doesn't normally expire.
Creating overhead is inherent in an abstraction. The languages usually aren't hard to learn (I learned Twig in a few minutes, finer details in like an hour). Is PHP really cleaner?: &lt;input type="text" name="field" value="&lt;?php echo $Form["field"]["value"]; ?&gt;" /&gt; &lt;input type="text" name="field" value="{{ Form.field.value }}" /&gt;
Er.. mmm actually... I need to port an old site made with this. Is there a phpnuke 6 - Vbulletin converter?
Anyone comments on [Lithium](http://lithify.me) framework?
Mine too. PHPNuke -&gt; PostNuke -&gt; Xaraya, in that order. Now every project seems to need something different.
All frameworks claim to suck less than the other frameworks. It looks pretty similar to Symphony.
You are porting a CMS to a forum? Why not port it to Joomla or Drupal?
I'd argue that Good UI design should be pretty, but pretty UI design isn't always good.. People like pretty, which makes them want to use the software, which is half the battle.. Also, being developers, we're not best placed to judge usability - we will glady struggly on with fugly tools way past the point where 90% of people will have gone "yuck, I give up".
God... when I discovered Mambo which later became Joomla I never looked back. What a piece of crap PHP Nuke was (and probably still is).
Well, for the purpose of building new sites with them, yes they do. The expiration date is shortly after a critical security bug is found. If somebody fixes it, the expiration date is extended until the next big hole is found, and so on. I doubt that a legacy app written in PHP can go 17 months without somebody finding yet another SQL injection vuln.
Do people still use Joomla/Drupal? Seriously, do they? =D
I'm currently going through Yii. I tried Kohana - seriously I did. I read the 9 step guide but even after that I'm still a little lost. Yii seems to have excellent documentation. There's even a real book for it that I just purchased and am going through. I may stick with Yii. If not, Lithium is up next!
a template engine on top of a template engine
That isn't an argument. PHP is not just a templating engine - it's a programming language. 
They have written dependency injections in a different way than symphony( although I don't really understand what DI is). 
I really don't get why people choose to use Drupal in this day and age. Usually the same people that will make a [table out of div's](http://bonrouge.com/~div-table "Prototype example") because "tables are bad" and then go and serialize half of the page template and dump it in the database... There are a few things that Drupal does exceedingly well... and it pisses all over them with just about every other line of procedural, disorganised code.&lt;/rant&gt; *EDIT: Spelung
PHPNuke has always been a running joke among the PHP community, even 10 years ago. The joke still exists, but less people get it.
I wrote a free message board system in high school (10+ years ago) in perl using a flat-file for a database... there's still people using it today! I was still getting support e-mails for it just a few years ago until I finally took down the website for it.
It clearly says on the website that it's the future of the web. Maybe people are just not using it **yet**.
don't forget the fork, PostNuke.
&gt;I doubt that a legacy app written in PHP can go 17 months without somebody finding yet another SQL injection vuln. This comment reeks of troll.
I probably should have put that as the headline, ha ha.
&gt; $allowedFiles = array('facts.inc','face.inc'); &gt; &gt; if(in\_array($\_GET['filename'],$allowedFiles)) include($\_GET['filename']); That's good enough right there. If it's in your array of approved files, run it. There's no point to cast $_GET to string - its values will always be a string, or if undefined will be NULL.
&gt;We don't use mySQL to store our information, but instead depend the simplicity of XML. By utilizing XML, we are able stay away from introducing an extra layer of slowness and complexity associated with connecting to a mySQL database. Give me a break. XML may be slightly more simple (filesystem permissions, anyone?) but it's certainly not faster.
What was it called?
 &lt;?php $databaseConnection = $di-&gt;get('database.connection'); That's DI, completely in a nutshell. Rather than statically creating your DB connection in a class (thereby making your class dependent on a specific set of DB classes/objects), you request that the DI container give you the database connection. This way when you're unit testing you can do a quick $di-&gt;replace('database.connection')-&gt;with($mockDatabaseConnection); and test your code above with the mock database connection. Also it benefits you in that all your DI setup is in a single-ish location (in the case of Symfony's DI a bunch of XML files) so you can easily have per-server/location configuration without rewriting your actual classes. Obviously this extends to things like getting your twitter API interface, logging classes. Really anything that isn't a method in the current class (or parent classes) should be DI. Hence the name "Dependency Injection", a database connection is a *dependency*, and with your $di-&gt;get(...); you're *injecting* said dependency into your code as opposed to statically linking. Things like Symfony's DI container do some extra niceties like being able to define your dependencies in XML rather than code, that way your dependencies aren't actually created until they are requested. But you shouldn't confuse the extra niceties with the core of DI. I could create a class with a bunch of get/set methods that manually assemble the dependencies in pure code, and that would technically be dependency injection as long as I used said class to obtain my dependencies.
I want to port the forum to vBulletin, because I think it's the best forum software, and custom build everything else.
Probably - yes. Others have moved on. Do you care? Downvote as required, I'm in my "why was this question asked exactly?" mood today.
A fine selection from view source: &lt;body bgcolor="#ffffff" text="#000000" link="#363636" vlink="#363636" alink="#d5ae83"&gt; &lt;br&gt; &lt;table border="0" bgcolor="#ffffff" width="100%"&gt;&lt;tr&gt; ... All sorts of awesome!
I've used it a lot, it's great.
I would argue that performance encompasses all aspects of the software including speed, memory usage etc. For instance, a monster of a program that takes all available CPU, Ram and disk space may run fantastically but I wouldn't exactly say it's got good performance.
Just wait till you look past Joomla, you'll look back at Joomla the same way you look back at PHP Nuke now!
I cannot upboat you enough. :(
I'm pretty sure managing content is one of the things drupal does do well...
I haven't found a CMS out there that is as well-coded as Drupal... look at the source of any of the other leading cms's and I want to puke... Yes they need to include more OO and possibly move MVC but out of the most common cms' out there - drupal wins my vote.
And the fork of that, Xaraya.
PHPNuke is best if used by never
IF YOU GOT SOME SERIOUS YAHOO BOOTERS PM ME... 
Who's that?
because you've moved on to a new more hip CMS that wil be dated in the next couple of years doesn't mean all the older CMS projects ought to just end.
I hope so, because then it will be bloody kick ass!
&gt;“NOW YOU CAN SELL YOUR OWN MODULES, THEMES, TEMPLATES, BLOCKS, AND SO ON, THROUGH PHPNUKE STORE” CONTACT US IN SALESPHPNUKE@GMAIL.COM” Because every good business knows saying everything in capital letters makes it stand out and not look like spam.
To each his own I guess, in that case I might say it's got great performance, but appalling resource usage :)
[modx](http://modxcms.com/)
everyone knows that style is so unreliable
It's the future of the web, in the sense that it has a half-life of several decades.
At least they got the curly quotes right.
fuck, better start stocking up on toilet paper and powdered milk
[Totally off topic] Well, sometimes some little known, [obscure software products](http://www.microsoft.com/uk/publicsector/government/licensing/psa09-factfinder/packages/windows-xp-end-of-life.aspx) actually *do* expire
Drupal just won in on Google summer of code.
This sounds like a job for CURL. Read through these and you should get what you want. I think there are good full examples on the curl_exec page http://php.net/manual/en/ref.curl.php also googled and found this which may be helpful. http://davidwalsh.name/execute-http-post-php-curl
if you do a: &lt;? foreach ($_POST as $key =&gt; $value): ?&gt; &lt;input type="hidden" name="&lt;?= $key ?&gt;" value="&lt;?= $value ?&gt;"&gt; &lt;? endforeach ?&gt; Inside the form tag on each page it should work if im understanding what you are looking for correctly. If you have multi-dimensional arrays its a little more complicated but essentially the same.
Found it myself. http://cgi.ebay.com/furry-PHP-mascot-elephpant-elephant-blue-NEW-/120640137953?pt=LH_DefaultDomain_3&amp;hash=item1c16b66ae1#ht_500wt_977
Tried using cURL and it doesn't look like my hosting provider doesn't support it, or I'm missing something. Thanks anyways...I look into this some more and see if I can get this working or see if I can figure out something.
Yeah I've thought about this too, is it a practical way of doing this? Also is it "standard" or is against unwritten web design rules (e.x. its unwritten to use tables for layouts is a no-no).
You can check if it supports curl in phpinfo() output. Without it you might be able to do this: http://www.jonasjohn.de/snippets/php/post-request.htm Not sure if your hosting will support that either though.
hmm it says it supports cURL support enabled cURL Information libcurl/7.18.2 OpenSSL/0.9.8g zlib/1.2.3.3 libidn/1.8 libssh2/0.18 I must be missing something is there a simple example like: echo "Hello World"; but for cURL?
There are no design rules against this. Why would there be? Design is visual and hidden fields are invisible. But if you use his code verbatim you're going to be vulnerable to a whole array of injection attacks. htmlspecialchars() and strip_tags() are your friend. 
Well yeah I was thinking more security and thank you :)
..Throws shoulder out congratulating self on in-skull awesomness... 
Just 28 more years until my y2k bunker becomes a sound investment.
I wrote a simple script to show you how it works. It sends a curl request to itself and outputs the $_POST variable data. &lt;?php /* function to abstract all of the curl stuff */ function send_curl_request($site, $data){ /* create curl handle */ $curl = curl_init(); /* set curl options - http://www.php.net/manual/en/function.curl-setopt.php */ curl_setopt($curl, CURLOPT_URL, $site); # page to send request to curl_setopt($curl, CURLOPT_POST, 1); # tell it to use POST curl_setopt($curl, CURLOPT_POSTFIELDS, $data); # attach POST data curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); # tell it to return data from page to variable on curl_exec() call /* execute */ $response = curl_exec($curl); /* close curl handle */ curl_close($curl); return $response; } /* process POST data recieved from curl request and die() */ if( $_SERVER['REQUEST_METHOD'] === 'POST' ) { // do your POST data processing here // would be on the page you are sending the request to echo print_r($_POST, true); die(); #necessary here to avoid a loop, not needed if on a different page } /* site to send curl request to - in this case it is itself */ $site = 'http://' . $_SERVER["SERVER_NAME"] . $_SERVER["REQUEST_URI"]; /* data to post */ $data = array( 'foo' =&gt; 'poo', 'bar' =&gt; 'car' ); /* build GET query string - also used as format for POST requests */ $data = http_build_query($data); /* call curl function */ $response = send_curl_request($site, $data); if ( $response ) { echo $response; } else { echo 'Failed'; } ?&gt; If you use this, you can just call that function `send_curl_request()` with the same post data on the different urls you want to send the data to. For instance, get your post data on form submit, sanitize it and format it to how you want the other pages to get it and call `send_curl_request()` to each of the urls you'd like to send it to.
You can use Text4FreeOnline. One of their plans has an API option. They do both [Free SMS](http://text4freeonline.com), where you need to know the receivers carrier or [Premium SMS](http://text4freeonline.com/en/plans) where you have to pay for each SMS you send but they get routed over SMPP to an SMSC. API is RESTful and easy to use,and fully integrates with the cool AJAX web 2.0 front end
You can also go to the PHPTek conference. That's where I got mine.
Off the top of my head this might work.... Drupal + Syntax Highlighter module + token module (modify pathauto in the token module) + CCK + allow anonymous users to post a custom content type.
Hmm ok. Another thing I considered was trying to hack Wordpress to handle it, but I've never heard of a "random url" sort of thing.
Yep, wordpress works too. A quick [search](http://wordpress.org/extend/plugins/search.php?q=syntax+highlighter&amp;sort=) shows there are a quite a few syntax highlighter plugins and [Link Shortcut](http://wordpress.org/extend/plugins/link-shortcut/) should work for random link generation. All that's left is to properly configure permissions. Almost any CMS can do at least this much, so use whatever you are comfortable with.
Thanks again. I have written a little one-page Javascript editor app that helps to construct a certain kind of text structure as a JSON object. So I'm trying to figure out the absolute simplest way for people to save what these structures that they build, and share them with other people. If I do go down the Wordpress route, I think I'd need to figure out how to create a custom event that maps to the structure of my object. It seems tricky because the object has nesting. Here's the sort of thing my app is designed to build: { "metadata": { "language": "Indonesian", "author": "Sneddon", "date" : "1996", "page" : "237" }, "sentence": "Mereka di Jakarta sekarang.", "translation": "They are in Jakarta now.", "igl": [ { "word": "mereka", "gloss": "they" }, { "word": "di", "gloss": "in" }, { "word": "jakarta", "gloss": "Jakarta" }, { "word": "sekarang", "gloss": "now" } ] } I really just want some sort of PHP front end to some kind of a JSON store. The bottom line is that I find user administration stuff boring and I want to find something that is already written :)
That looks amazing. I was wondering what is cutting edge now days.
If you are making a web application go with either code igniter or kohana. In fact someone already did something similar with CI [here](http://codeigniter.com/forums/viewthread/69660/).
So DI is like keeping a Registry class which holds other objects and from which you take whatever objects you want?
Mostly, a registry class is just the most popular way to implement DI. DI is just not hardcoding a "new Object();" in your methods, instead obtaining it through some override-able method. Take the following example: &lt;?php class ThisObjectHasDI { protected $object; public function foo() { //THIS LINE BELOW: $this-&gt;getObject()-&gt;bar(); } public function setObject(Object $object) { $this-&gt;object = $object; return $this; } public function getObject() { return $this-&gt;object; } } Notice rather than doing "new Object();" in the area marked "THIS LINE BELOW" I instead obtain my object through the "getObject()" method which I can override with "setObject()" at any time *outside* my ThisObjectHasDI. Technically this process of being able to insert and override my dependency on Object through the "setObject()" method is Dependency Injection. If I want to provide CustomObject and use it in ThisObjectHasDI::foo, I don't have to alter my code, I just setObject(new CustomObject()). Or, if I'm unit testing this class I can give it a mock Object. Etc. Etc. A registry type class like all the DI libraries use is much more portable than the above solution. Rather than rewriting get/setObject in all my classes that require Object (and simultaneously having to inject manually each time), I just use a central registry class to store my common Object (or a factory to build Object).
what do you use now in replace of it?
&gt;I had no idea the summer of code was a competition between projects. Neither did I?? But to be fair a lot of projects see it as a great opportunity and some kind of recognition to be in GSC. I don't know there is competition between different frameworks or if any other framework sought to get in but I'm sure it must feel like a competition for projects who did.
Why can't you use a cookie? That's not server-side at all. I can understand problems with sessions, but cookies are barely handled by PHP at all.
I mean I can but cookies are easy to spoof and change, I'm just looking for some alternatives.
I'm English and I assure you, it doesn't make any sense.
 &gt; look at the source of any of the other leading cms's and I want to puke... Funny, that's how I feel about Drupal.
rafb.net/paste an old pasting site has their code available for free
Ok it printed the array so I'm going to assume that it's working. Thanks all I'll have to learn how to use cURL, should be interesting. Thanks again though.
yeah, just copy that function in there and get your post data and then use that function to send the post data to the different pages. Pretty sure you'll have to use full urls not relative ones. it would look like in the page listed in your form's action="page"... if( $_SERVER['REQUEST_METHOD'] === 'POST' ) { send_curl_request('http://www.example.com/1stpage', $_POST); send_curl_request('http://www.example.com/2ndpage', $_POST); send_curl_request('http://www.example.com/3rdpage', $_POST); } And then you can spread your data across several pages.Assuming that the page receiving the form data isn't one of the pages you want, otherwise do what you need with the post and then send it to the other two pages. If you need confirmation from the other pages do $result = send_curl_request('http://www.example.com', $_POST); Then check for output in `$result` , but you'll have to set up www.example.com to output something after processing the post data.
I was going to post this. I helped with the project back then. Even provided the domain for a bit and bought back one they lost. Good times. 
Forget the elephant, where can I get myself one of [*these*](http://db.rambleschmack.net/images/posts/language_of_the_lost/php_squad.jpg)?
What you're describing are sessions, unfortunately. But what about rolling your own with a database instead of built-in sessions?
I think you're being to critical on a silly submission such as this. For the most part, it was just a joke. I didn't move to a more "hip" CMS. I didn't move to any CMS at all. I posted this because I first used this about 8 years ago when I was first learning PHP (where I would use it to manage clan websites for games). I recently visited the site and *nothing* has changed about the CMS at all.
Yeah sessions are what I need but they are so unreliable from what I've worked with that they aren't worth the trouble. What do you mean by rolling a database? Do you mean just storing the info in a database?
Yep. Generate a random hash, store that in a cookie, then pull from the DB when that hash comes through via $_COOKIE. [Here's the one](https://github.com/timdorr/colony/blob/master/lib/Bee/Session/Db.php) I wrote for my own framework.
The php elePHPant is from http://www.nexen.net/elephpant.php EDIT: Typo
serialize(); You can serialize any data type this way. PHP converts it to a string that you can later run unserialize() against to get the data back out. This will let you create a single hidden input on each page that you can use to store and forward data to the next page without using sessions. Example: &gt;$cereal = serialize($\_POST['foo']); // You can serialize anything, an array or object if you'd like and it doesn't have to come from post. Later in your HTML for the same page, in your form somewhere: &gt;&lt;input type="hidden" name="cereal" value="&lt;?php echo htmlspecialchars($cereal); ?&gt;"&gt; Now when your form is submitted, you can get the original value of cereal back with &gt;$cereal = unserialize($_POST['cereal']); // Somewhere at the top of your script so you can do useful things with your cereal. Remember that anything you put in POST can be viewed and modified, so don't rely on it for any data that must stay secure.
The Zend framework is probably the best most well-known PHP framework out there. If you learn Zend, you will have no problem with the rest of them. &gt;I've googled some frameworks and they're not making much sense to me because I feel like I haven't had enough experience reading PHP code This is probably why your professor is currently avoiding the topic of frameworks. Have you experience in OO programming? You're probably better off mastering the core language first. Do you understand the principles of MVC?
What about a *switch* statement? It's cleaner, doesn't pass the userinput on to *include()*, and extending it with more files should be pretty straightforward: &lt;?php switch ($_GET['filename']) { case 'facts': include('facts.php'); break; case 'face': include('face.php'); break; default: header('HTTP/1.1 403 Forbidden'); die('not allowed'); } EDIT: also this way you don't put the filenames directly in your URLs. Seeing an URL like *blabla.com/index.php?filename=pages/home.inc.php* telle me that *index.php?pagename=/etc/password* probably works aswell.
&gt;I'm interested in a CMS, e-commerce, and even anything else that's a framework of PHP. It sounds like you've not even understood the concept of a framework yet. Is PHP your first language? You say you've only been learning for 2-3 months. It doesn't sound to me like you're ready to take on a framework. Learning to develop software is a long process, and it can be tempting to try and jump ahead, especially if you're pretty bright. In the long run, you are only going to be sabotaging yourself by developing bad habits and a poor understanding of your own code if you don't make sure you have a rock-solid understanding of the fundamentals first. I'd suggest if you're a new programmer, you don't look into frameworks for quite a while yet, but if you absolutely must, then I think CodeIgniter is the easiest one to understand and get into for a beginner. Zend is the most well-known, and a very common framework, but it also has a much higher learning curve.
Honestly, MVC at the basic level makes sense to me but I still feel like I can't go ahead and work with it and so this past week, I've gone back to read the notes I have, check out some tutorials/guides online and also just whatever else resource I can get a hold of to make sure that I'm not thinking on a different level than people I'll be working or collaborating with. Any suggestions on that? BTW: I actually had not heard of the Zend framework, I will definitely start with that. Thank you!
Without a solid understanding of OOP, you'll struggle trying to figure out a modern framework. Once you understand OOP then check out the Yii framework, I've been using it for two years and really enjoy the overall structure and logic behind it. 
PHP is my first language, it's the only language I have taken a class on and so currently I have the syntax and some basic concepts down. Still haven't gotten to OOP or anything like that. And I usually code stuff for homework and try to learn itty-bitty snippets of code here and there. So I seriously haven't worked with a lot of big chunks of code so you are right. I'm just very excited to learn. Would you say there's a way I can assess myself on my readiness? Like a test, code challenge or something? I always feel like once I learn something I want to use it as much as I can so I get it through my head and also just use it in many different scenarios. (Thanks for the help btw!)
The current textbook I have for class doesn't explain or get into OOP with PHP and I've heard that it's not natively supported. Would you have any good guides or suggestions on how to go about this?
PHP does natively support OO, not in the same way Java, Python or JavaScript do but it does.
You could probably do that in a day or so in any framework. 
That makes so much more sense now, for the past few months I've just thought "oh I'll wait 'til after I learn PHP's basics to look into working with OO PHP" because a few people have just avoided telling me anything about it...and for some reason it never occurred to me that I should've just googled it. Thank you soo much!
Definitely recommend [Zend Framework](http://framework.zend.com/). I'd consider it the "purest" one from an academic point of view. Very clean architecture, loosely coupled, very extensible, and it uses coding conventions that at least I find to be very intuitive. It's actually a pleasure to read the source for the majority of the components, which I recommend. It's always good to know what's happening under the hood. As it's been mentioned, your professor is probably avoiding frameworks so you master the code language first. That said, my opinion on that is that you shouldn't necessarily struggle doing everything by hand and having to figure out how to approach a problem on your own. Look through frameworks and see what they do. If you'd not _allowed_ to use a framework, re-implement (don't copy and paste) similar logic yourself. And once you're no longer held back by classroom requirements, use an established framework, but never treat it like a black box. Always know what the actual code underneath looks like and how it's approaching the problem.
[PHP is object capable](http://michaelkimsal.com/blog/php-is-not-object-oriented/).
I like zend framework a bunch, I learned it by doing the quick start guide http://framework.zend.com/manual/en/learning.quickstart.intro.html which explains everything pretty well, or at least it did back when I picked it up around version 1.4
You'll need to learn the basics of the language first, you'll bang your head against the wall by trying to jump into OOP without some familiarity in PHP. Here are a few guides for PHP OOP (YMMV depending on PHP skills) * [PHPRO.ORG](http://www.phpro.org/tutorials/Object-Oriented-Programming-with-PHP.html) * [nettuts](http://net.tutsplus.com/tutorials/php/oop-in-php/) If it feels frustrating at first or you're struggling, just focus on the language itself and revisit the OOP stuff later. Once you "get it" then you'll really enjoy the power that OOP gives you over procedural programming and then you'll really be able to make your framework sing.
I have used http://www.mribti.com/barcode/home.php in the past. It was super quick to set up and get running. Lost of different barcode options are available too
awesome, thanks, found the code here: http://code.google.com/p/rafb-nopaste 
Maybe _you_ could, but I'm not you :)
**Do not, under any circumstances, provide serialized data to the end user.** The process of unserializing data can instantiate attacker-defined classes and call methods on them. [Here's a presentation on the problem](http://docs.google.com/viewer?a=v&amp;q=cache:GCDLZiHH2hsJ:www.suspekt.org/downloads/POC2009-ShockingNewsInPHPExploitation.pdf+php+serialize+vulnerability&amp;hl=en&amp;gl=us&amp;pid=bl&amp;srcid=ADGEESguQ5cvFvjVbxs1vekNJgqAgC5a2t4jhNP41mtk9RmeIMIdc-fwg5NaMfZU2jE1T43HOVlElJpL4u-nWvVjdsu8y7W9AT_KVQbGpp8MwPYzjJ4EglJjLfF2Z9dsci0Zdwj59ROQ&amp;sig=AHIEtbRrJ0fxXLa8CQSwen8uQPkfgRV7nQ), PDF via Google Docs. The interesting bits start on slide 27.
Zend is a really good framework but last I checked their documentation was a little lacking for those just beginning (unless they have upgraded it). There are some others that you could look into (sorry I don't have their urls as I am typing on my iPad). Cake PHP, Seagull Framework and Code Igniter are some other ones to look at.
The documentation isn't _too_ bad anymore. It doesn't provide tons of examples for every scenario, but generally there is an introduction to a component, a simple use case, a more advanced use case, and some blurb about miscellaneous features it provides. To get the most out of it, reading the source code is recommend. Thankfully, the source is easy on the eyes. Newcomers to the framework can use the quickstart to get up and running.
[CodeIgniter](http://www.codeigniter.com) helped me to wrap my head around OOP and MVC, as well as think about writing code in smarter ways - I also learned a lot about classes and functions by working with [MooTools](http://www.mootools.net) (javascript framework) - Between the two, I'd say I'm a better developer today because of them. Here are two excellent books on them: [Mootools Essentials](http://www.amazon.com/MooTools-Essentials-JavaScript-Development-Firstpress/dp/1430209836) &gt; *This is an excellent book, even though some of the details have changed since the recent release of [MooTools 1.3](http://www.mootools.net/blog), the basics are still very much the same, and the differences aren't difficult to get used to, as this book does an excellent job of explaining the structures and concepts of the framework.* [CodeIgniter 1.7 - Professional Development](http://www.amazon.com/CodeIgniter-professional-development-Adam-Griffith/dp/1849510903/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1289086733&amp;sr=1-3) &gt; *I actually own a prior book, but this one is up to date on the most recent release* 
I can tell you now, OOP is your next step. If you are not fully comfortable with OOP then you are not ready for frameworks, I promise you. It's great to see such enthusiasm, and with that enthusiasm I'm sure you want to push ahead as fast as you can, but... OOP introduces a whole new way of thinking about code, and it can take a while to get your head around. First you need to understand "thinking in objects" (OOP), then design patterns (such as MVC), and then you will be ready for frameworks. A PHP framework can be thought of as a ready made set of objects (tools) for your project, and also as a scaffolding (plan) for your other objects (hence the name framework). Until you get used to the idea of designing with objects and design patterns you are not going to be able to make use of any of the benefits of a framework, and it would likely hold you back/become confusing. I know from experience that if you push ahead with this stuff too soon that it can feel like you're progressing a lot faster, but you could easily be setting yourself up to have to "un-learn" a lot of bad habits in the future.. this is perhaps why PHP has a bad reputation amongst programmers sometimes - because it is easy for a beginner to develop bad habits. I realise this has gotten a little lengthy, so feel free to PM me if you have any more questions or would like any more clarification or advice, I am only too happy to help.
Also, most of the jobs I see posted in the php world have the word "zend" in it somewhere. Ton your second point, +1 to everyone who says slow down, learn mvc, and don't jump into frameworks too soon. They will handicap you in the future. Make sure that you are able to solve problems without them before you use them-they are a speed tool, not a thinking tool. Also, shameless plug, but http://tweetphp.com is a podcast I recently started to help teach php. Our next series is on object oriented php. Check it out if you like.
nostalgia?
THANKS so much!! I'm glad someone cleared it all up, because I usually just have people or blogs saying "Go ahead and try some frameworks!" or something like that. I will start to get comfortable with OOP, first thing! I will be sure to message you with any other questions :)
Thanks for the links! And the pre-cautions. 
Wow, that's profound. So maybe there is a benefit to being a Python dev ;)
Honestly if you're a new programmer you should not be worrying about using a framework, you should be worrying about learning the language, and building from scratch as much as possible. I've only recently started using Frameworks on my projects after writing in PHP for a good 5+ years now. tl;dr Learn the language before you start using the shortcuts. 
Thanks, will do!
Code igniter is excellent and well documented. A lot of people hate it, and if it isn't your thing, try out Kohana witch is basically CI done "right".
Have a look at [Joomla](http://www.joomla.org). Some people will argue that it is a CMS and not a framework, but really it is both, and a good one too.
Zero points for usability... Why don't you suggest typo3 while you are at it :P
Do some reading on [web application frameworks](http://en.wikipedia.org/wiki/Web_application_framework) and take a look at the "Get started" section on the Zend website. There's a lot of documentation and tutorials available, so I don't know why you'd need a $1000 training.
Take a look at [Zend Casts](http://www.zendcasts.com/category/screencasts/), they have lots and lots of screencasts of almost all aspects of Zend Framework. Easy to follow and nice.
I'm definitely considering using it for my pet project. Can anyone here reassure me this framework is pretty sharp and solid at this point? (pet project with 10k+ users)
So is this something I can use with an application like dream weaver or bluefish?
Those are just editors, you can use any code with them. A framework is really just PHP code, nothing more and nothing less. The benefit a framework brings is that it forces you to use a set of standards across your application as well as gives you generic code to handle a lot of situations. You basically save the trouble of writing the database class, the user management, the rss generator etc. This means you can focus work on your actual application instead of all the fluff that goes with most websites.
And... what's wrong with Pear Mail_Mime?
Please be careful when throwing around the word "Zend." [Zend](http://www.zend.com/en/) is the name of a company founded by [Zeev](http://en.wikipedia.org/wiki/Zeev_Suraski) and [Andi](http://en.wikipedia.org/wiki/Andi_Gutmans), two of the three original people behind PHP. ([Rasmus](http://en.wikipedia.org/wiki/Rasmus_Lerdorf) is the third. Er, first.) Zend has a number of commercial products, including Zend Server, a web server and PHP implementation, and Zend Studio, an IDE. The [Zend Framework](http://framework.zend.com/) is not a Zend product, though they do sponsor it. Please be sure to refer to Zend Framework as that, not just Zend. "ZF" works just as well.
It depends on pear libraries its not standalone
nothing's wrong, this is a different one, not like it's a controversial subject or anything like that
Swiftmailer is great but it would be nice if this kind of thing was integrated right into PHP. The mail() function is almost unusable for any sort of serious mailing tasks.
So... what's the advantage of this over [PHPMailer](http://phpmailer.worxware.com/) (aside from a better website)?
Have you used it? I have it setup for several clients and it works great. You just have to get accustomed to their system
agree on that one. and exec('mailx -x $1 $2 a@b.com') is completely out of the question
This is somewhat ironic. I was looking at CMS's and of course everyone's heard of wordpress but then I started looking at Joomla and Drupal. I decided I was going to learn more about Drupal and not much about Joomla, but I have no idea about their difficulty or setups.
So zend for sure! 
I checked out Kohana, and while I thought it was a different approach that could be interesting, it looked abandoned, and I didn't see a lot of documentation, which is why I didn't pick it up and run with it.
SwiftMailer is a beautiful specimen of OOP with PHP. PHPMailer is not.
cron
I love swiftmailer we use it with the Kohana framework to handle emails. A perfect example of how to make sending emails easy.
Exactly! I do not want to train my clients on how each CMS works, it should be intuitive...
egg timer
To elaborate a bit, if you need to have it only execute once on that particular time, just add some code to your script to check the current time and if it's valid to run it. Like so: // Use strtotime( date() ) to round to the nearest minute if( strtotime( 'November 8, 2010 7:00pm' ) != strtotime( date('m/d/y h:ia') ) ) exit(); You can probably do that with a range as well, but I figured that strtotime() makes things more readable. And you have to account for the variance in cron starting up your script. It's not guaranteed to be accurate to the second if the machine is bogged down.
cron.
you could set the check to use a timestamp with a +/- of a minute or so to overcome that issue
Sorry, what I meant by "get accustomed to their system" was for developing on it, for plugins, elements, etc. Works much better IMO than Drupal, etc. I converted one client to modx from Drupal and they're much happier. To each their own :)
Code Ignitier is what you need http://codeigniter.com/ the best framwork for beginners
Awesome! Congrats on the release!
cron..
http://framework.zend.com/manual/en/learning.quickstart.html
This really looks like a snazzy framework (what little I know of them at this point). I think as soon as more tutorials/examples go up, I'd probably dive right into it.
Because I hadn't heard of that program until now :)
I've worked with CakePHP, Lithium and Symfony. So far, Lithium has been my favorite in terms of speed, stability and architecture. (Disclosure: I have done a few commits to Lithium core.)
cron, to be exact.
[Mail_Mime](http://pear.php.net/package/Mail_Mime) does not require any additional PEAR modules. That being said, it's also PHP4-era. e: PHP4-era and pretty horribly documented. Compare the Mail_Mime docs to the [Swiftmailer](http://swiftmailer.org/docs/introduction) docs, yikes.
I've got to say, this past month I've been trying to break into frameworks and have been avoiding the "monolithic" ones in favor of smaller, more easier to jump into (or so I thought) frameworks, and I believe I should have started with Zend Framework from the very beginning. The documentation is clear, concise, and has a little bit of humor thrown into it. Plus, you most definitely can't beat the easy integration of the framework, the server and the IDE.
I guess the question then is, why would someone who is already familiar with Mail_Mime (as most people are) choose to use this instead? What's the sales pitch?
Under **NO** circumstances should you **ever** use cron... Oh wait... Yeah, cron.
Settings &gt;&gt; Control Panel &gt;&gt; Scheduled Tasks
ok, if you have to use iis like we do
&gt;Do not, under any circumstances, provide serialized data to the end user. Yikes. That was a pretty interesting and informative read. Fortunately, we don't have any classes that use \_\_wakeup() or \_\_destruct() but that doesn't mean we always will. Thanks for the tip, I'll start avoiding the use of unserialize() on user supplied data.
PHP4-era... okay, sure, whatever that's supposed to mean. Poor documentation? I must admit it was originally difficult to find documentation for Mail_Mime, but once I did, I had no trouble. In fact, Swiftmailer's documentation and structure looks a lot like Mail_Mime.
unicron
cron
My apologies, because PEAR is so full of incestual modules I just naturally assume that anything there requires at least 12 other PEAR modules before they'll actually do something.
narwhalcron
PHP4 reached end of life years ago. There's no excuse to be using a library written for PHP4 in this day and age, especially when petty much [every](http://codeigniter.com/user_guide/libraries/email.html) [modern](http://framework.zend.com/manual/en/zend.mail.html) ([and not-so-modern](http://api13.cakephp.org/class/email-component)) [framework](http://www.symfony-project.org/api/1_4/sfMailer) provides mail interfaces written in the modern era.
Well when I tried it on PHP5 a few months ago each time you try and send mail it errors out with over 50 strict error messages. Think it's been a bug for sometime but they've ignored fixing it. I tried Zend Mail and it works a lot better than the PEAR one. However I will give this Swift Mailer a try to see if it's easier &amp; faster to send.
Rob Allen does a good [Zend Framework tutorial](http://akrabat.com/zend-framework-tutorial/) that he keeps up to date with code examples.
 sleep(60*60*24*60); //wait 2 months execute_my_code();
Yea that would be ideal unfortunately using GoDaddy Hosting with Windows. I guess I could just switch it to linux but I'd rather not. 
necronomicron
For the sake of completeness: The [Zend Framework](http://framework.zend.com) is an object-oriented framework for writing PHP applications. It sits somewhere between very opinionated frameworks like [CakePHP](http://cakephp.org/) and [Symfony](http://symfony-project.org), and component libraries like [PEAR](http://pear.php.net). The framework was started by, and is supported by (to the tune of three full-time developers), the company called Zend, which has a bunch of other (commercial) PHP-related products. Unlike those commercial products, the Zend Framework is distributed under a liberal, open source [license](http://framework.zend.com/license) Like a component library, you can use as little of the Zend Framework as you like. For instance, you can use Zend_Cache to manage caching, or Zend_Mail to send email. However, the framework also provides a complete [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller) stack, as well as tooling to manage projects that use that stack (a command-line tool for doing various stuff to your project). Compared to Cake, Symfony, or others like them, ZF does a little less for you out-of-the-box (no autogenerated application scaffolding, no opinion about what your Model (the "M" in MVC) should look like, etc). The various components are designed to work well together, but be loosely coupled, and that is, IMO, what makes the framework so attractive. The documentation (both official, and what turns up googling for particular stuff) is pretty darned good (especially considering the fairly large size of the framework), as is the community. It's definitely worth checking and playing around with. Follow one of the tutorials (the official one, or Rob Allen's, for example), to get your head around the whole MVC stack. Then browse the official docs and learn about all the little components you can leverage in any project you want. 
at :)
I sometimes wrap things like `htmlspecialchars($text, ENT_COMPAT, 'UTF-8', true)` to save three dozen keystrokes. I also used to define functions such as `begins_with()` and `ends_with()` to make string comparisons easier, but I haven't done it in a while. But wrapping `is_numeric()` ? That belongs to [TDWTF](http://thedailywtf.com/). Edit: fixed wrong order of arguments.
ya, he's crazy
He's over-thinking the "changing the implementation" a bit _too_ much. Yes, he's nuts, but misunderstood.
Insanity. I'm sure the _f stands for " fucked up." Things like is_numeric are supposed to do exactly what they say: check if the argument is numeric. What possible thing could _f indicate beyond "I fucked this up?" I would utterly HATE having to go through this douche's code for EVERY FUNCTION to ensure he's not doing stupid shit hiddenly. Is he intentionally trying to make his work product as intentionally aggravating as possible? If he does special shit in more than 3 or 4 things the ability to understand it is *ad nauseum* because most humans will HAVE to have one window of his stupid I'm-so-fucking-special-libraries sitting on top of everything else they'll have to understand while they LINE BY LINE everything because in a mess of code, strpos_f and strpos may as well look exactly the same. It would be *marginally* more useful if he put f_strpos first, but ... christ alive. why?! And if that weren't possibly bad enough, what else could he *wrap* with things like strpos_f? It sounds like he doesn't know how to properly prepare his data for validation. I would guess he's creating orders of magnitude more security holes and work than there otherwise would be. And to answer your question, no, I haven't seen this elsewhere. If I did, I would leave. I don't know where this guy learned to program but I suggest for future programmers the Crackhead School is not the best approach to take.
He's got a point if he wants to make the native functions more object orientated. The majority of PHPs native functions aren't object orientated which is fucking annoying. Like you could create a class named File and write the methods to call the native functions. Then if he wants to change the behaviour, you could create adaptors and use interfaces. Although if he is just got a file full with something lik function is_numeric_f($s) { return is_numeric($s); } then he's either trying to bill up some extra hours or he's crazy.
It'd be heaps less effort to do a global find and replace (the once you'd ever need to) than to follow this methodology day in day out. What happens when he needs to share code? Teach everyone to use _f, just for his code?
The reason that this is a bad idea is that it will affect maintainability in roughly the opposite direction. The implementation of most of those functions is never going to change, but now the code is littered with boilerplate _and_ it's impossible to know without checking whether a given function call maps directly to the behavior of the builtin. Plus it introduces an entire layer of (probably globally-namespaced) dependencies to most every function you write. This is not, to put it mildly, a very good way to win the love and respect of whatever poor bastard gets to inherit your code. See also: osCommerce and `tep_*`.
Any ideas on what release they are planning model relationships for?
Lithium has a lot of promise, in terms of it's speed, build quality and flexibility. There are three things holding me back from using it for my personal site (currently based on CakePHP): 1. Lack of documentation, you mostly have to work from the API. [That said, the API does do a good job of it.](http://lithify.me/docs/lithium) 2. No model relationships. I think I saw a few commits relating to that a while ago but I I think it was entirely experimental and basically unusable. 3. Lack of ACL handler. I wouldn't mind so much if it was not for the previous point. Still, if it is even half as good as their Auth implementation, then I think it will be worth the wait.
Thanks, that was exactly what I wanted to hear ;-)
&gt; I sometimes wrap things like htmlspecialchars($text, true, 'UTF-8') … Oh, yeah. This function annoys me every time, too. PHP's main target are web pages! WTF? 
I also wrap htmlspecialchars to make it shorter as well as have starts_with and ends_with which returns false if it doesn't or the remaining string if it does.
&gt; See also: osCommerce and tep_*. Noooo!! Don't say those words!!! YOU BROUGHT BACK THE NIGHTMARES!!!!!
Absolutely, I also have my `h()` wrapper and `starts_with()` and `ends_with()` helpers, as well as lots of other functions to abstract away PHP's disorganized standard library. But wrapping every single function just adds another layer of ambiguity without giving you more flexibility.
He probably thinks hes some genius programmer. Maybe he doesn't understand the fundamentals of what he is doing. 
If OO for native functions is /that/ big a deal, someone could just use a different language. It bugs all of us, but we don't do reinventing the wheel for every function. All PHP developers have just learned to deal with the annoyances of the language. tl;dr I agree with you. :P
If he's going to that much trouble, why doesnt he just branch his own PHP build from source and write the wrappers in C? I say that half-rhetorically. Your friend is fighting the language. Maybe he should pick another one.
I lol'd. Also, I had the same nightmares.
Somehow I doubt this dude is unit testing.
We've defined a class at work that is used as a wrapper for functions implemented in PHP core. We use it for dependency injection to allow swapping out implementations when under test. For example, some of our low-level database code calls mysql_connect. instead of calling mysql_connect directly (and dealing with all of the implications of what that means when writing unit tests), we pass a Php_Core object into the class that calls mysql_connect, and then make the call via: $phpCore-&gt;mysql_connect(blah, blah, blah). The basic Php_Core class just provides __call, and hands off control to the actual native function. It's easy to build mocks and subclasses though that intercept behavior for testing purposes. This makes writing tests for failure of exceptional situations a lot easier.
Have you looked at PHPUnderControl or Zend Server?
I looked at it for a while. I think I'm to old school for this. I like the idea of easy rapid dev but if I migrate servers I have to have the Zend framework on all my servers. I've been going through documentation and reading up on a lot of Zend stuff and it's kind of off putting. I guess I am to old school for this. 
Just remember, you're not alone. We meet at First Unitarian on Tuesday nights in the basement. You don't have to talk your first time, but if you're feeling brave, you'll find kindred spirits who will listen.
So I have to install something at the server level to interpret the framework?
Thank you for pointing that out. 
&gt; I also have my h() wrapper Hey, you stole my function name! ;-) 
Ahhh wow why did you remind me? Just need to find a happy place...find a happy place..
::shudder:: my eyeball just started doing that twitchy thing....
You have to install PHP yes, otherwise it cannot run the PHP code. Other than that you just need the framework and then you need to code like the framework wants you to.
If he is not adding anything new it's pointless, but if he is adding something new, he should call it something else otherwise it's deceiving. He will be in trouble if a psychopath will debug his code. Because he may or may not added some extra functionality to those, and it needs to be checked, which makes the debugging process even more painful, because now you can't even assume that the basic functions work as expected.
When I was just learning PHP I wrote a function called js_escape() which was just a wrapper for addslashes(). Then one day I realized my whole site was XSS-exploitable because many JS strings that I generated, that came from the client side also needed to be htmlspecialchars()'ed. Added to my js_escape() that and voila, XSS vulnerability is gone. But honestly, that was the only case so far in many years that I changed the implementation of some low-level utility function. In some exceptional cases shortcuts may be fine, too, e.g. html() and sqlstr() (for mysql_real_escape_string()), but it may annoy someone reading your code.
True? It is best to use explicit flags (eg ENT_QUOTES), or you could be in for nasty surprises on new PHP versions.
And a layer of slowness.
Surely, there is something called too slow, even for programmers?
1. Email Facebook 2. Ask for source code 3. ???? 4. Profit. 
Stop it.
Okay I just emailed Facebook. But who should I ask for source code? There's no one here.
Think before you act! list and specify the features your application should have in detail. next, prioritize the functionalities and decide which ones are part of the core of your app. design a static system diagram and base your data model on that. Start programming, based on your static domain model and add operations that will eventually lead to your functionalities. work modular and keep extensibility en maintenance in mind. do not worry about UI design till most pc your operations are written and tested.
http://facebook.com Right click -&gt; view source (duh)
Always write code like the person who will have to maintain it is a homicidal maniac who knows where you live. How do you think he'll feel about it? :-)
you need two things, one calls your script every page request (you could do this via ajax) and when your script has run (the date and time are close enough) you delete/disable it. This depends on people browsing your site to run it so it is a little random. Or use http://www.setcronjob.com/
you owe me a new monitor, I read your comment with a mouthful of coffee and now it's all over my desk. :P
Oh you mean things like Thread1-&gt;getPosts() don't exist automatically? That's unfortunate.
How much experience does he have? If only a couple of years, likely he'll grow out of it as he learns more. If several years, well it's probably genetic stupidity.
Don't bother.
Yes, it’s slower — but PHP is slower than C or any other many programming languages in generally. What I want to say is that never mind things like these. Things make programs really slow are not thin wrappings like `h()`, but big algorithms and designs. In order to make programs fast, do profiling your programs first.
Sometimes I do `$h = 'htmlspecialchars';` then call it like `$h($some_string)`. Defining a function causes some namespace pollution in PHP before PHP 5.3 has namespaces.
Normally I would agree (focus on algorithms, not micro-optimizations), but if you are wrapping every single function, then you are adding drag that can have a significant multiplier effect.
I think you are saying the same thing as me, but that code looks alien to me (I'm a CakePHP, Kohana and CI developer) so for clarification: $post = new Post(); $post-&gt;Comment-&gt;find(); Doesn't exist. Probably because they seem to be developing for document oriented databases first (which do not utilize joins/relationships) and relational databases second. It will only let you do: $post = new Post(); $post-&gt;find(); I don't quite understand NoSQL well enough to understand how you would make up for a lack of relationships but apparently you don't normalize your data in the same way you do when using RDBMS so model relationships are not necessary. If anyone wishes to correct me or explain it to me, I would be very happy to hear it.
Yes that's what I was talking about.
as much as I myself would like to encapsulate the procedural hell that is PHP, objects simply don't perform well enough yet. fortunately the core developers have been addressing this problem with SPL by providing a procedural and object-oriented implementation(C-optimized) for a lot of the new functionality - now if they'd only do that retroactively.
Then discard everything because Facebook already exists.
There probably exists a GUI for [Phing](http://phing.info/trac/) somewhere. I personally use a few [Pake tasks](https://github.com/indeyets/pake/wiki/).
It will be for our university, restricted within campus. It is not going to be über super network. I have already done several minor projects with PHP, database design (MySQL, M Access), R, Minitab, MATLAB, SAS, SPSS (I'm not expert in programming but I'm expert in statistics). Mainly for statistical analyses. (duh) I was expecting something like; use this and that frameworks to shorten your job.
you are in wrong section use r/comedy
meh, i'll be every girl's first friend. there are tons of social networks there already. you are not aware of them. Everybody has a Facebook account. +social network for Austrian high school students (i don't remember its name) +social n. for turkish university students (hocam) +s.n. for bulgarian teenagers (sladur) +and so on +and we need a small network for our campus, we need it. we don't think; "ooh we think it we be cool". we already use DC++ for communication, and we have about 450 online users in the evenings. Totally 26 000 students, 15 000 of them are in the dormitories.
thank you
No seriously. There's a reason you have 8 downvotes and only 2 upvotes. There are a ton of social networks, even if you do manage to write one all by yourself you'd never get any one to use it. Social networks, as their name implies require a social aspect, and you'll never get that with players such as Facebook, Myspace etc already in the scene. If you absolutely must then use the Diaspora code. Not only do you already have the basic framework then but there'll also be sweet irony in you using the code of a semi-failed social network with millions in funding!
It's dumb as hell, but abstraction isn't innately bad. If he'd made classes out of suitable things it wouldn't be bad (as you said, creating a meaningful API). For instance, I have an [class](https://github.com/radiosilence/core/blob/master/core/types.php) that wraps most array functions in a sane way (a little pythonic - Arr::extend, Arr::append, etc - I derive most of my data-based objects from it too, which is neat.). Please post some of this guy's source code.
Ganna eat the down votes for this ones I love this question simply because of the irrelevant answers. Before Facebook started there was this thing called MySpace(Google It lol), and I'm sure that if Zuckerberg back then were to post he would have got the exact same answers - "Email Myspace - ask for source code - Profit." With that said, you are up against quire a bit trying to make a social network these days. This doesn't mean that it is impossible with the right idea and implementation. From your post it appears that your skill set it a bit lacking which is a huge problem. You may want to work on this first. If you want to code a social network I say have at it. Start with a niche social network (IDK... skateboarders or some crap) and go from there. Build functionality that would only be relevant to that sort of user. And please know that there is a 99.99999% chance you will not be a Facebook or even a MySpace for that matter. Don't let it discourage you. If you want to do it, do it and don't worry about the people that tell you not to.
This sounds a lot like a kind of noob uber-optmization "I'm in complete control of *everything*" power-trip deal.
I've seen examples of this in Zend Framework and I've never thought about using it ever since.
Well, if actually calling functions is what's slowing you down instead of DB or disk IO, then PHP really isn't the language you should use. (as in, function calls are slow *relative to running the code locally*, but they are orders of magnitude faster than the simplest of DB-queries)
OP is using Windows, this is the best solution.
PDO?
Building a page I might have 2 database queries and 300 function calls.
Um... that was a typo. I use ENT_COMPAT as the second argument. The "true" should actually be the fourth argument.
CROM! I mean... err.. cron.
I doubt he actually has used this in the way he wants to use it... Lets take is_numeric(), lets say he has to check some input to make sure it is numeric because it's supposed to be a numerical value... then later on the specs change and it allows for numbers and letters..... It sounds like he can do his trick and modify his wrapper function for is_numeric() right? Nope. is_numeric() is probably used in dozens of other places in which letters are still not allows in the variable. He'd have to make a new function called is_alphanumeric_f() and replace is_numeric_f() at all the right places. So yes, I think he is nuts... Also even if this did have a practical use.... There is such thing as a global search and replace... making it all a waste of time..... .. also if I wanted to search for uses of is_numeric() I would search for "is_numeric(" .. this search would no longer work since it would not be "is_numeric_f(" Wrapper functions do have some use, just not here.
I guarantee you that those 2 database calls, even one by one, will take a lot more ms that the overhead of 300 functions. There will be a zillion things going on behind the scenes, with - at the least - inter-process communication via pipes, or network calls, followed by disk io (unless your dataset is cached), with the added calls within php to invoke the drivers for the db you are using. Sure, you can go overboard with abstraction and whatnot, but unless you take it to Mt. Ridiculous and back, it won't be the cause of bad performance. What's being done here with the _f() is most certainly a *bad practice*, but it won't cause any significant performance impact. Edit: Okay, I've actually tried it out now. Doing a million wraps of str_replace is, as expected, slower than doing a million straight str_replace. When trying to compare 300 wrapped vs 300 straight, the values fluctuate too much to be of any use (as in, they vary from 0.0009 to 0.003 seconds, so it's less like hard data and more like statistical anomalies). Yes, it *is* slower, but if the slowness if affecting your performance negatively, you should probably not use PHP for it. PHP is for gluing together information from various sources (be it DBs or other things), not for crunching numbers.
&gt; If additional features are /that/ big a deal, someone could just use a different language. It bugs all of us, but we don't do reinventing the wheel for every function. All PHP developers have just learned to deal with the annoyances of the language. FTFY. Why bother with any new features? Get used to how it works. In fact why use PHP 5.3 and all the OO goodness it added? PHP4 should be good enough for everybody. Annoyances like the `global` keyword and `register_globals` and `$HORRIBLE_FEATURE` should be tolerated no matter what.
&gt; When I was just learning PHP I wrote a function called js_escape() That example actually has some contextual meaning. `is_numeric_f()` and `strlen_f()` does not and is just introducing un-necessary complexity.
I like the tep_** syntax around database. It's very quick to hijack certain types of queries for logging. Otherwise, it doesn't help the learning curve. For example, it's impossible to know if there is a related helper function for your problem without reading through every function definition. The saddest parts of osc-code that i've seen, are helper functions that are useful, but not used anywhere in the code :(
&gt; I like the tep_** syntax around database. It's very quick to hijack certain types of queries for logging To which I can only reply that everyone should really be using something that approximates a real database interface.
I'm not going to play with Facebook. The network will be within the campus. Users' posts will be anonymous, mostly. There will be sections according to the dormitories (based on the IP ranges). Sections according to students' departments. I have access to what student ID is a student in what department. They are not things that Facebook offers. Also, I would use Diaspora but I don't know rubby language. Also the installation process is horrible. + It is not centralized. Now I'm looking for a simple one (PHP).
Totally bonkers.
Well, yes. And I believe there are a few more implementations actually. Mine is: https://sourceforge.net/p/php7framework/wiki/input/ Source: https://sourceforge.net/p/php7framework/svn/59/tree/trunk/php7/input.php?force=True It's fascinating because it also allows **$_GET-&gt;int["id"]** which is a **function call with angle brackets** and thus allows easier transition. And one cool feature of PHP is that $\_GET["id"] still works despite $_GET being an object. Per default it would just use a "raw" filter, but this can be overriden per variable name. And it therefore allows making legacy code safer. See also PHP Inspekt 0.4.0, they don't usually override the superglobals, and the API is slightly less readable. But it comes down to the same concept.
Oh dear, disaster waiting for the merging of *your* two libraries...
Kohana is very active, check out their github [page](https://github.com/kohana). Better docs are coming soon, together with new website.
The use of the templating system is not forced, you can get yourselve to use raw php for templating and it's ok. It has indeed only one developer, but it's really solid and well tested/coded
Comming from python/django it felt really smooth to work with
I've run into and used this type of code in the wild, for example the [habari superglobal class](https://trac.habariproject.org/habari/browser/trunk/htdocs/system/classes/superglobal.php)
It's an interesting thought, but not one that I would entertain for very long for the sake of my poor coworkers. I think I would rather put all of your different handlers into a class (perhaps static, if globally-accessible is your objective) so that way any other modules of code I use can still access request variables in their native form.
It might be important to know what dirs you are trying to delete.
I also have similar functions in my toolbox, but I don't overwrite the superglobals. In my case it's a static method: Toolbox::get('id', 'int'); Somewhat less elegant, but it does the job. I usually remember to call these instead of directly accessing $\_GET, because I'm too lazy to hold the shift key while typing those superglobals. The method can also check a few other things. For example, it can check if an integer is positive, or if a string has less than X characters in it, or if a string is valid UTF-8, or if a string contains a valid e-mail address. The method also detects whether it's installed in some stupid shared hosting environment with (_shudder_) magic quotes enabled, and automatically turns it off so that I don't end up with unnecessary slashes in my data. But there's a caveat. You don't just want to sanitize your input. You want to detect when somebody deliberately passes invalid values to your script. When it happens, you should log the incident because it's a big red flag that somebody's poking around looking for vulnerabilities.
&gt;Of course, it'll be entirely open source under the GPL v3. Thanks, but no thanks. I'm more of a BSD / MIT / Apache kind of guy. The GPL's definition of "distribution" gets blurry very fast in terms of web apps, I just find it to be too restrictive for my tastes.
Well that is not what I said. If the PHP devs want to make objects for their native functions, I'd be the biggest cheerleader around. But adding a stupid layer of complexity like the OP outlined is totally different. Sure it's sometimes annoying how the native functions work, but we deal.
Take this with a grain of salt, and no disrespect is meant, but my immediate gut reaction (and I believe the reaction of most people, probably) is: Really? One guy is going to do better than Drupal by himself? Now, if you're trying to do something different than Drupal, like "drupal is overpowered for most needs, so Sankla focuses on XYZ".. okay cool. make that clear... because my first thought is "Drupal may have its problems, but it has a huge community behind it and no individual is going to be able to replicate a lot of that functionality by him/herself"... You may well have something great on your hands... I just think that people (myself included) are going to be immediately skeptical.
are you trying to read a directory that doesn't exist or has the wrong permissions or something?
Could it be that `!=` is supposed to be `!==` or is that allowed?
Holy shit... it's like someone told him about encapsulation and he was like "Holy shit, I should do this to everything!" before really considering it. 
It's just a cache directory, this is called at the end of my app's installer. I delete the cache directory contents so that it is fresh in case newly cacheable items were added during the install. 
No, it works the first time, and then stops working. The directory itself is never deleted, just the files and folders inside of it.
Ditch the silence operators, turn `error_reporting` all the way up, and perhaps your problem may be revealed. Consider re-arranging your order of operations so that you perform the directory read and close the handle *before* recursing.
I also wrap htmlspecialchars to always use UTF-8, and make it work on arrays: function htmlescape($str) { if (!is_array($str)) return htmlspecialchars($str, ENT_QUOTES, 'UTF-8'); $result = array(); foreach ($str as $key=&gt;$val) $result[$key] = htmlescape($val); return $result; }
If it's open source, why require registration to try it? I might have actually taken a look at your code, if there wasn't that big intimidating "Register Now" button standing between me and your code. Put the code up on GitHub or something similar. Many people these days won't even look at somebody else's code if they can't browse it online. Also, it seems you're focusing on blogs right now. If so, don't pitch Sankla as a full-blown CMS now. Advertise it as a secure and lightweight blogging software, for example. Put up a chart comparing WordPress, Habari, etc. and your Sankla. That would be a lot more specific than saying "CMS like Drupal", even if that is your ultimate goal.
We currently use ADO on the backend, and some people here have a huge case of NIH and are writing some stuff from scratch. Maybe the specific example was bad, but the point is that we use this sort of thing to facilitate testing.
&gt; Why Sankla? ...it's easy to pronounce. Maybe my tongue is screwed up, but Sankla is kind of rough to say, actually. The "nkl" portion cause your mouth to do some weird movements to get the sound out. :-) Good luck on the project. I've partaken in a project like this, and it's a rather large task for just one person. Oh, don't go GPL v3, aim at BSD/MIT/Apache-style licenses.
You are right to learn Drupal. It's as much of a framework as it is a CMS. More flexible than Joomla IMO
If you are using prepared statements it would be sensible to say so. No need to talk abstractly about "security" like it's a buzzword. Maybe you'll find more developers if you cut back on the in-your-face-OOP style. We all know \name\spaces are the new thing. But it adds no value whatsoever and just makes Jolt more unreadable. Oh, and the 10minutesmail I used for beta registration just expired. ;)
There isn't anything to see yet, the registration is to be notified when it's released/ready to test. Good idea! You're right, I should concentrate more on a Wordpress alternative.
I'll throw up a page with in depth features about what I'm doing and why. Namespaces are only unreadable if you don't alias them. &lt;?php use \Long\Path\Of\Namespaces\That\Could\Conflict; $conflict = new Conflict; Seems pretty clear. I like namespaces :)
I appreciate the skepticism, and it's healthy to have. They project may go nowhere. I'm going to do my best to make sure it doesn't, but I understand. If someone else were posting the same thing as I were, I'd probably approach the with same skepticism as you. Thanks!
NIH?
I was thinking it might have to do with the recursion, but it never even makes it to the recursion, It simply doesn't make it past the readdir call and the request. Also the fact that it works the first time after apache is restarted, but not subsequent times, leads me to believe it's a bug in php 5.3. The script doesn't even time out, the browser just sits there in a loading state forever. I also tried calling clearstatcache(); beforehand, but that did nothing.
Saves three lines: return array_map('htmlescape', $str);
I disagree. I am not attached to any particular framework so they tend to get in my way. I have not completed the learning curve on Drupal, so using it to create a simple application would be cumbersome. I like having ultra light weight options to use.
while this is a neat idea, overriding super globals sounds like a bad idea. What if you want to use a 3rd party script or if someone else works on the code? Also lets say you do $_GET-&gt;integer('id'); but 'id' is not an integer in the URL either because of a bug in creating the URL link or some other issue... How do you handle this? Simply typecasting it into an integer is not always a desired effect.. yes you'll have a valid integer that'll work with the page rather thing giving an error.... but, what if this is an id for someones account and you accidentally give someone the wrong account? If there's a problem in the id then you really just want to show a message saying "an error occured" rather than bring the user to someone elses account. If you typecast id directly into an integer before performing validity checks, you'll miss this very important difference.. TLDR: Sanitation != Validation.
Don't bother signing people up in advance. Just post again when there's something to see. Also, you should think seriously about the objections raised by @ninjaroach and @upKelsey. There's nothing inherently wrong with GPL (WordPress and Drupal are all GPL) but any license has pros and cons. Ask yourself why you prefer GPL to LGPL or BSD/MIT/Apache. Make an informed decision based on your political views as well as practicalities, and then clearly defend your choice. Consider dual licensing like jQuery if necessary.
Cookies aren't particularly any easier or harder to spoof/change than post variables. If you really want to solve your problem, figure out what's going on with sessions and use those. Otherwise the data is in your users' hands.
Cant you just implement ArrayAccess in the object your replacing your global with, then you can maintain backwards compatibility for scripts that cannot use the extra functionality for whatever reason (3rd party). $k = "number"; $_POST[$k] = 5; class Post implements ArrayAccess { function __construct() { $this-&gt;data = $_POST; } function int(key) { return (int)$this-&gt;data[key]; } // Assume all the required arrayaccess methods are added.. } $_POST = new Post(); echo $_POST[$k]; // 5 echo $_POST-&gt;int($k); // 5 
If aliasing makes it more readable, then well, why don't you use it? And is there a factual name clash you are working around?
If I include a 3rd party script, I adapt it to use the objects instead of the original arrays. I'd rather spend half an hour to change the 3rd party script than to leave possible holes open in my code. Just because I use $\_GET-&gt;integer('id') doesn't mean I don't validate. The integer() function performs basic validation checks, but I also check the value after that to see if it's a valid value for the context it's used in.
I don't override the superglobals, but I do abstract them behind an object that gets passed into controller level code. That way I can run tests on controller code etc without having to spoof the superglobals - which is lovely. I try not to access any variables directly from the 'parent' scope as much as possible, so I only use $\_GET, $\_POST etc from code not in a class or function.
AFAIK delete() isn't a function and this may be the problem. There is a manual entry for it, but it says that it is a dummy entry and has no mention of it being an alias or what PHP versions it's available in. [EDIT] Never mind, just a case of blind as a batus.
Good points. It's indeed insufficient to just sanitize input. And it's important to differentiate it from validation. And some processing can only ever be performed by application logic itself. Nevertheless a central filter system has its advantage. In particular you can implement a verification step right there. So instead of having the proofchecking scattered within the application flow, you can unify such an "error occoured" message within the sanitation logic - should the expected format differ. Overriding the superglobals however works quite fine. You can still use $\_GET["old"] access if implemented (via ArrayAccess). The only semantic downside is, that you'll need count($\_POST) tests then instead of a simple if($\_POST) check.
Yes, support for $\_GET['id'] is a good idea. I should implement the ArrayAccess, Countable, and ArrayIterator for my class as well. Would speed some things up. I just turn the superglobals in references to the actual objects ($IO-&gt;get and $IO-&gt;post objects). In the framework I use the object name, instead of the superglobals. The superglobals are mainly used as a shortcut to use in the actual site logic.
I think WordPress might do this. I don't know if it overwrites the globals themselves or not, but it definitely stores sanitized data in an object called $wp_query_vars or something of the sort.
I included this extra logic in the parent class for the get and post objects ($\_GET and $\_POST are references to those objects). For example, the parent object has logic to check if strings are ASCII or UTF-8. For cases where UTF-8 text is possible (received from browser), I use wrapper functions for the standard string functions that check the string for UTF-8 validity. If the string is ASCII, it calls the standard function, otherwise it calls the mb\_* version of that function (if mb\_* functions are not present, it uses php code to handle the utf-8 string). It also has a lot of functions for integer validation, email validation, html sanitization (with 3rd party library) as well as string encoding/decoding.
That's a very common approach. And if you still have 3rd party modules or legacy code, it's probably a better solution than rewriting it all. And it's also exactly what PHP Inspekt does, and I've also seen it here: http://stackoverflow.com/questions/3498207/is-using-superglobals-directly-good-or-bad-in-php Anyway, I'd like to see your implementation released. I've only assembled a few very generic filters/validation functions as of now.
The problem with sanitising in advance is that you don't know at the start what data types are needed for each input. You can look for some common XSS hacks, but that is usually about it.
Perhaps he is creating his own language within mutiple languages to make cross platform programming eaiser? /shrug 
There was a similar function that I've been using for year in the Xaraya CMS. Each validation type was a separate class that you could add to. The validation rules could also be chained together and take parameters, for example: xarVarFetch('id', 'int:1:1000', ...) // An integer 1 to 1000 xarVarFetch('ids', 'list:int:0', ...) // An array of positive integers (&gt;=0) xarVarFetch('myemail', 'email', ...) // An email address The validation could even modify the input if needed: xarVarFetch('usernames', 'strlist:,;:str:1:200:lower', ...) // A comma-separated or semi-colon separated list of non-empty strings up to // 200 characters long, and then mapped to lower case. Extra parameters determine whether to fetch from GET, or POST, or either, and how to handle invalid input. I just love the validation in that CMS and one day will get around to separating it out into standalone class.
Very true. Different kinds of sanitization are required when used in an SQL query, echoed as HTML body text, echoed as an HTML attribute, or stuffed into JSON. Input filtering cannot handle all these possibilities, so you need to escape the output too.
The zend framework is just PHP code. You don't need to install it on your server any more than you need to install your own code on the server. In fact, a very typical use-case for ZF has the hole library sitting in your project's library/ directory. What I like about ZF is that it's explicitly *not* tuned so much for "easy rapid dev" as it is tuned for "solving common problems in a robust yet flexible way". As I mentioned in my post, if you don't like the ZF MVC stack, you're welcome to use various components by themselves. Zend_Mail is a nice competitor to SwiftMailer, Zend_Cache is really quite awesome, Zend_Config is great for reading/writing config files, Zend_Log can be very handy all by its lonesome, etc.
I think anyone who was seriously interested in debugging this would start by, as McGlockenshire says, getting rid of the @'s. Those are nothing but trouble. Trap errors properly. Have you used xdebug or similar?
I have to agree here. If I have a choice between two open source projects that do the same thing, where one is GPL and the other is MIT, I'm gonna go with the MIT license. GPL feels like a monkey on my back.
Ha, `xarvarFetch` sounds like the name of some alien spaceship.
One should make a wrapper … 
There's free, and then there's free, and then of course there's free.. Not even the term 'libre' really differentiates between all the different shades of it. My feeling is that if you can't take a piece of software and do with it what you will, then it's not free. I appreciate all contributions to open source, but the releases that don't twist my arm (or more importantly: my employer's) through licensing regulations are the best type of free for me.
I only use @ in certain cases, I code in a way that if a function fails it returns false and sometimes logs where if it shouldn't happen, otherwise the app can choose how to manage the fail. Also I didn't need to remove the @'s to find out what was wrong because PHP was hanging, meaning it never finished executing the script, erroring out, or even timing out. I figured out the problem, it was a bug, only in a different part then I though.
Try reddit(); instead of readdir();
I'm assuming it's "Not Invented Here". Writing code because you'd rather have written it yourself than use most-likely-better native or third-party alternatives.
That's called marketing. You make a bloated product, then up-sell the client to a new "improved" system that is 10% faster with proven benchmarks. Then the next upgrade has cool new features (where the bugs are removed) and performance increase (code commented out) and you up-sell them again.
Completely insane. Also: pointless.
I just remove magic quotes and uregister globals if they are on and use $\_GET normally, I see no reason why a developer would be any less likely to forget to call $\_GET-&gt;integer('id'); vs intval($\_GET["id"]); and it just adds overhead and the possibility of being incompatible with other libraries.
Don't you keep your 3rd party scripts up to date? How do you apply an upstream patch to the script?
That's... exactly what I was saying. Well, at least we're on the same page :-)
Way to miss the joke. How many people have you seen accidentally append two periods to the name of a daemon?
Frameworks do that sort of thing all the time, and it generally makes life easier. Database classes are one of the big ones. Why mess around with the native functions to query a MySQL/PostgreSQL/etc DB when you could abstract all the annoying stuff into an engine-agnostic class?
`echo_f()`
Wrapping every function has to be a joke. I wrap some longer but common functions (ie. escape() = mysql_real_escape_string()), but basics? Never. This reminds me of a guy I used to work with that believed code readability was the most important thing ever. I agree with this, but I accomplish it by appropriately commenting my files. His solution? Rename the functions so anyone could understand them. If he wanted to do is_numeric() it would be renamed check_if_this_string_is_numeric() or my favorite (which I will never forget)... find_items_in_first_array_replace_with_items_in_second($needle, $haystack, $source) Not even kidding or exaggerating... made me //--
Create an 'API' for it. So you can have your other applications get posts/comments/page contents via xml/json. Also, have a feature where you can post posts via the API with authentication. It's a cool idea that has been revolving around my head for a while.
duh indeed. Don't they know everything is made of plain static html? bloody noobs.
this could help: http://stackoverflow.com/questions/28098/php-tostring-equivalent
Thank you. I found something that should get me started easily: http://www.survivethedeepend.com/zendframeworkbook/en/1.0/introduction At first it looked like I needed to install something. I guess I really am in the deep end right now. 
Noted! I appreciate the input. Do you like the way that Posterous/Tumblr work where you can just email them your post and it'll automatically create a new entry? There's a lot of security issues with that, but it's a neat idea.
$Paypal-&gt;getAPIResponse()-&gt;GetExpressCheckoutDetailsResponseDetails-&gt;PayerInfo-&gt;PayerName-&gt; FirstName
I haven't tried it yet, but I'm into it because they are built from the ground-up with PHP 5.3.
If using `mysql` extension, [`mysql_real_escape_string()`](http://php.net/mysql_real_escape_string). If using `mysqli` extension, [`mysqli::real_escape_string()`](http://php.net/mysqli.real-escape-string).
Thank you!
What FineWolf said. In the meantime, you can might want to take the site down temporarily, or at least block the IP address where the attack is coming from.
I do use mysql_real_escape_string to prepare user input into the database, such as my site search form. In the above query (the one for product.php) I don't because in that case I'm just looking up a sku number, I know that there aren't any special characters that need to be escaped. Would mysql_real_escape_string add some kind of sanitation or protection beyond its regular functionality that I'm not aware of?
Allow me to join the pile-on, though: ditch the @ operators anyway. The only time you should be using them is if you're silencing an I/O warning (yes, some of those functions are too chatty) which you're **explicitly** handling by checking the return value of the function, which you're not doing in any of those cases. There's a reason using @ is considered to be a bit of a code smell. :)
mysql_real_escape_string just escapes quotes, nulls, and some other characters. If you are expecting exactly a number you can do some simple validation using a regular expression or the is_numeric() call. Of course, PDO is recommended but preg_match or is_numeric are easier to figure out and implement if time is an issue. Here's a rough "quick fix": $matches = array( ); if( preg_match( '/^(\d+)/', $_REQUEST['sku'], $matches ) ) { $sku = $matches[1]; } else { die( 'in a fire' ); } This will copy only the leading digits from $_REQUEST['sku'] to $sku.
&gt;`Toolbox::get('id', 'int');` That's the way I'd do it too — as others have already noted in the comments, changing the meaning of a language feature just strikes me as being a bit unfriendly to fellow coders, and makes it harder to integrate third party code. It's really the same argument as [this thread from /r/PHP yesterday about whether wrapping functions is a good idea](http://www.reddit.com/r/PHP/comments/e2r1d/ive_met_a_php_programmer_who_creates_wrappers_for/), and I think the result's the same: it creates more headaches than it's worth, since you're brekaing expectations.
 $sku = (int) $_REQUEST['sku'];
I really don't use them often, my IO functions are pretty much the only place I do use them.
If you think there's nothing to be escaped, then there's no harm in escaping it anyway, because mysql\_real\_escape\_string() won't escape anything in that case. Unless you're using PDO and prepared statements, _everything_ that goes into a query must be escaped. The only exception is when you've just made sure that the variable contains an integer. But even in that case, there's no harm in escaping it. (For all you know, there might be a hole in your validation logic that allows non-integer values to slip through. Escaping will help you catch it.)
install modsecurity on your Apache and just run it with the default ruleset. Test afterwards, you can make exceptions for any rules that are erroneously triggered.
Yeah i gotcha, and then by escaping everything should be far harder to inject anything. Cheers man.
I considered that, but SKUs may not all fit within -2^31 to 2^31 (the range for 32-bit systems). For example, if the site is using UPCs for SKUs, the range is often 0 through 999999999999, or around 2^40.
I can tell you that I'd rather punch my dick than use Joomla for any period of time.
I'm not sure if you know this, but Webistrano is a front-end for Capistrano. I wrote a guide about [deploying PHP websites](http://mathew-davies.co.uk/2009/10/28/php-deployment.html) with Capistrano a while back. You might get a bit more flexibility by understanding the core software. &gt; One feature I would like that's not in Webistrano is the ability to restrict access to certain projects for certain users. Can you further explain? 
Exactly. Go through every php file on your site, look for every use of mysql_query, then sanitize *every single value* using mysql_real_escape_string(). I've had to do it as an intern on a good-sized site. It shouldn't take more than a couple hours to get everything. It's a pain if you have other work that needs to be done, but it's worth it to make your site safe from attacks. EDIT: Also, read up on [SQL injection](http://en.wikipedia.org/wiki/SQL_injection) to find out how and why injection attacks work, and how and why using mysql_real_escape_string prevents injection attacks.
This doesn't really fix the underlying problem, though. It's a great suggestion, would probably catch and prevent the SQL injection attempt, and should be implemented, but it's not really an alternative to proper coding and using mysql_real_escape_string(). 
I think it's a beautiful concept, especially if you allow legacy code to be safer that easily.
[metaWeblog](http://www.xmlrpc.com/metaWeblogApi) (a.k.a. BlogAPI) is more or less mandatory these days, because it's supported by Google Docs, Windows Live Writer, and a host of other third-party software. A lot of people prefer these tools to the blog's built-in editor. E-mail is also neat if you can get the security right. WordPress supports both methods. If you want to add something else like OAuth, that's also OK.
When you get through sanitizing everything would you mind sharing your site? I'm trying to re-learn php currently and would love to see more examples of what people come up with. It's one thing to look at a certain site and wonder how many people built it. It's another thing to learn and potentially be inspired by looking at the work of someone who couldn't even write html three years ago. If you don't want to share with all of reddit you could message me if that's ok with you. Don't worry, I don't know about sql injection aside from the basics I've only read about before.
ah. this makes a lot of sense now.
mysql_real_escape_string is always needed (technically not, but it's easier to say that it is.) The point of an injection attack is to take a query like this: SELECT * FROM products WHERE sku='$search_string' ...and to search for something like this (notice the use of single quotes): 123456'; DELETE FROM users WHERE 1='1 ...which gives a final query that looks like this: SELECT * FROM products WHERE sku='123456'; DELETE FROM users WHERE 1='1' What this injected query does is satisfy your initial query, so that the whole thing doesn't fail, then it deletes all of your users. Bummer. Using mysql_real_escape_string will change this to: SELECT * FROM products WHERE sku='123456\'; DELETE FROM products where 1=\'1' If you notice here, the single-quotes have been escaped. This keeps the injected code from running, and instead makes your original query run as a search for a product with the sku equal to "123456\'; DELETE FROM products where 1=\'1" which, of course, won't find any results, and may even result in a mysql error.
**ESCAPE EVERYTHING**...... Doesn't matter if you don't expect user input to have special characters, someone will find a way.
I hate to be the "well, give up and do something else" guy, but you should give some serious consideration to using someone else's Lucene implementation, like [Solr](http://lucene.apache.org/solr/) with a little configuration, or [ElasticSearch](http://www.elasticsearch.com/products/elasticsearch/) with no configuration needed. Also, use four spaces at the beginning of a line to trigger a block of preformatted text.
Thanks for the info. Funny you suggested SOLR. Was reading about it just now. I came across another post where someone was having the same issue, trying to query against two fields, and just gave up. No one ever provided a solution. Others came saying how they gave up on Lucene as well due to the same issue. Thanks!
Honestly, I'd look at ElasticSearch before looking at Solr, mainly because it does about 95% of the job without any sort of configuration needed. 
Someone definitely has a per-hour support contract.
Interesting to compare this side-by-side with [Silex](https://github.com/fabpot/Silex), which is a similar Sinatra proof-of-concept using Symfony2.
This is probably the only framework that has actually caught my eye, ever, and it's growing on me more and more every day
I would also rather punch your dick than use Joomla, or even Drupal.
mysql_query does not support multiple queries. As the attacker seems to know. Inadvertent updates, satisfying selects (pass) and retrieving secret info from the db (UNION SELECT) are more likely. 
Hello Mr O\'Reilly! And then there's $_REQUEST $_COOKIE $_SERVER $GLOBALS Single quoted attributes &lt;a href='/user/foo' title='Profile of Mr. O\'Reilly'&gt;O\'Reilly ran out of attribute value&lt;/a&gt; It is better to escape where needed for the _immediate_ target context.
In what way is Drupal (core, and core api) insecure? How would you prevent similar issues and deal with necessary trade-offs?
Definitely a script kiddie.
I have seen this before. I'ts definately not a scriptkiddie but a blind sql injection attack. Depending on the type of leak you have on your site, this type of attack could read your database schema and contents, grab passwords, on some machines even get the contents of files on the filesystem! Read more here. There's other frameworks outthere that make this as as easy as pie. PATCH YOUR SITE! http://code.google.com/p/bsqlhacker/ Update: Ah, found the other tool i mentioned, it's sqlmap. http://sqlmap.sourceforge.net/demo.html Any web programmer working with databases should watch all the videos there, better yet, try it yourself on your own stuff. It's both scary and extremely brilliant 
This is silly. 1. Why strip them at the db side? Plenty of valid reasons to store &lt;img&gt; 2. This belongs on the output side, similar as 1 3. This must be done with anything that's not a literal. It belongs next to the query, not tucked away in a function that does a bunch of stuff. Also, you should only be using mysql_ if you're working with legacy code (5+years old). 4. Again, this belongs on the output side (or validation perhaps, but not generic validation). (numbers are lines in the function)
Awesome, thanks for the link!
To be honest, I'm more familiar with Wordpress and Joomla's insecurity issues. Ensuring security is difficult and vague, I understand and agree. To begin, I'm using PDO with prepared statements, form tokens to prevent CSRF attacks, testing within the user agent to prevent MITM session attacks, and killing any potential HTML from the start for XSS attacks. After the initial release, I'll look into using a library or writing my own for better XSS sanitation.
True, preventive code against magic_quotes and register_globals is more important. However manual sanitization is really cumbersome, and therefore seldomly done. It's shorter to write $\_GET-&gt;sql["field"] than mysql_real_escape_string($\_GET["field"]); - and history shows people forget that too easily. (I'm personally using PDO anyway..) And an object-oriented $\_GET can give you an *E_WARNING wherever you access unsecured input*. The overhead is minuscle, especially if you would be using the less readable filter_var() API or sanitizing regexs throughout the application logic anyway. And validation should not occlude the application logic (separation of concerns), which is why all modern PHP frameworks use some form of helper module for that. Edit: I realize -&gt;sql is a bad example as it's basically just a secure magic quotes 2.0. However other shortcuts like -&gt;html() instead of htmlspecialchars($v,ENT_QUOTES,UTF-8,true) do contribute to less work in many contexts.
1. no it wasn't, the function is called "clean" not clean_some_specific_thing 2. the charset is not relevant here, you should use SET NAMES to make sure your DB knows what you will feed it 3. The replacement for mysql_ is mysqli_ (though I prefer PDO). The i stands for *improved*. I repeat, **improved**. It does not take a genius to spot this. 4. Why not? Capturing data is very different from displaying/processing/etc it. I'd have to look at the reddit source, but I would store the &lt;space&gt;&lt;space&gt; etc to make editing easy.
well. I have no idea what is share? If you want to use it and change it and then sell it, it must be your owns. I just want to share it. No matter if you like it. i like it. so i share it everywhere. And i believe that you will like it no matter you are a php beginner or a php developer.
Sorry, that wasn't my intention. 
If you are inserting an integer to the query, use (int) $variable, as in: '... something = ' . (int) $variable . ' and ...' Any string representing an integer will be turned in to an integer value. If a string does not represent any integer, it will be turned into 0. Complete data sanitation and no calls to unneeded functions.
If *you* are getting SQL errors through URLs that *someone else* is submitting to your site, then then really should stop pointing the "loser" finger in their direction. SQL errors is a serious problem, and it is *your* problem, and you need to fix it now.
&gt; I know that there aren't any special characters that need to be escaped I think your database and website would take exception to that comment. User input of any kind should not go anywhere near an SQL statement without cleaning up, validating, sanitizing and escaping.
Users have access to everything -- you can't restrict access to certain projects for certain users. If I'm hiring freelancers I'd like to have it so they can't see all of the projects in the system, or at the very least so they can't deploy on projects that they aren't supposed to be working on.
Why i prefer BSD licence to GPL, I guess if you want your software to be free you need to be free of ego as well
Lets be fair, whilst its up to the developer to secure their own website, this is only true because assholes like to attack them in the first place.
http://www.reddit.com/r/PHP/comments/e2zbx/anyone_ever_thought_about_overriding_the_super/
"Let's be fair, while it's up to the car maker to put in seatbelts, this is only true because assholes like to crash their cars in the first place."
Thanks! I take it you use it or have in the past? Fairly easy to blend into a Zend project?
Actually, assholes don't like to crash their cars...you know...they have *accidents*. I'd like to see someone accidentally inject SQL. The analogy is that assholes like to slash people's tires, so car makers should provide reinforced tires. Equally if someone broke into a local small business and stole all their stock you might criticize them for not having a better security system, but by and large we'd be critical of the person who broke into the shop, not the shop owner. The OP said they already sanitized the inputs where the user might be using characters such as ', but didn't apparently sanitize inputs where the user wouldn't normally be able to use such characters. Obviously we know for security they should all be sanitized, but the *only* reason for this is malicious hackers. Teach the OP how to stop assholes doing this, don't attack them because there are twats in the world who like to destroy other people's hard work.
&gt;However manual sanitization is really cumbersome, and therefore seldomly done. Perhaps most people are using data models that handle sanitation for them. I know that's certainly what I do. &gt;It's shorter to write $\_GET-\&gt;sql["field"] than mysql\_real\_escape\_string($_GET["field"]); - and history shows people forget that too easily. If someone writes mysql_real_escape_string for each field they touch, something's wrong. I made a simple global class for the few cases where I've used Mysql.. mysql::escape($_GET['whatever'],1) is really not too much to type.
The problem with this is a lot of times you are not just using $\_GET and $\_POST variables in your sql statements, so you end up with a mix of both methods anyways, and relying on $\_GET-&gt;sql["field"] makes it more likely you will forget to use mysql\_real\_escape\_string on a non request value. I also use an SQL library that takes care of escaping for me.
You missed the point of the information given. It's not about how successful the specific example will be, it's about the fact that unsanatized input is being directly passed to the sql server. You should never say: "SQL injection in this case will be hard to exploit, so I guess I'll leave it."
Something that I hate in most blogging systems. They do not support Markdown out of the box. That would be a nice feature. Also a clean api for extensibility would be nice. But no advanced management and such system is required.
&gt;I'd like to see someone accidentally inject SQL. Wendy's.
That's all Sankla supports is Markdown (and some HTML).
&gt; You should never say: "SQL injection in this case will be hard to exploit, so I guess I'll leave it." I did not say that. It is usually trivial to use UNION SELECTs and gain full control of a site (and sometimes server) when there's an injection vuln. However, nobody is served with bogus examples.
$pdo-&gt;prepare(); USE IT.
What kind of script are you using to notify you? Do you let it monitor a log? Thanks!
[here](http://feedgrids.com/originals/post/15_online_product_configurators_-_design_your_own_everything)'s a pretty good list. edit: ah.. I get it now. Didn't realize those were not 15 frameworks, just sites. Sorry for the unwarranted sarcasm :P. I am imagining there's not much out there like this due to the custom nature of what it's for.
I regret that I have but one upvote to give.
Don't reinvent the wheel. https://github.com/kijin/mysquirrel I believe there's quite a few of these sorts of things to make things easier on you.
use $sku = (float) $_REQUEST['sku']; then... or do (int) and if you're on a 64bit PHP system it will still use an Int if not it will be a float regardless.
I'm using it now at work. It took us about two hours to get it installed, pick whether or not we'd use HTTP requests directly or use a third party wrapper (we picked the wrapper), then make all of the objects that we needed searchable automatically insert themselves into the index on save. I'd consider that easy to blend, regardless of your framework.
It's not the proper way to do it, don't let them tell you otherwise -- sessions are the correct way to handle this. or cookies, if they are not working correctly find out why. Don't get in the habit of working around the symptoms of a problem you can fix.
I'd strongly discourage using floats for anything other than imprecise computations. It may work now, but some day you might try to do some apparently-simple operation (like a compare) and end up with bogus results. http://docs.sun.com/source/806-3568/ncg_goldberg.html
Additional info on SQL injections here: http://bobby-tables.com/ In your case, as mentioned above, mysql_real_escape_string() should be enough though.
I'm not ahuge fan either, however; I was just point out that if he's working on a 32bit system his ids are already floats (php does it in background) or strings and if he's on a 64bit os he's save to use unsigned ints on the mysql side sense they will not overflow on the php side into floats.
I just want to add... Don't forget to escape _COOKIE, _SESSION, and _FILE data (The filename, for instance).... Basically anything that anyone even has a remote change of affecting.
Here's are a few methods from my MySQL class, it should work out of the box - http://pastebin.com/uXMjvzaV $mysql-&gt;Connect(info); $mysql-&gt;Query("Query Goes Here %s %d", 'queryName', $stringVar, $decimalVar); More info on the query string format: http://us3.php.net/manual/en/function.sprintf.php If you want the full class send me a PM. Also I just want to thank you - I haven't looked at my MySQL class for ages, and noticed a bunch of things that bug me in it, that I need to fix.
Dry erase board. A large one.
&gt; Don't worry, I don't know about sql injection aside from the basics I've only read about before. That's exactly what someone who knows about SQL Injection would say!
heres my method: 1. brainstorm 2. draw GUI (a lot of times features pop up that i had not thought of) 3. brainstorm again with new ideas 4. prioritize features into a list. 5. update GUI (on paper) and set it as your goal (feature freeze). 5. db schema on paper (hopefully this goes well) 6. build db. 7. build backend. 8. build front end. finish and then move into you new features. I keep all my notes in folders pertaining to each stage of dev, from brainstorm to finish.
Very helpful, thanks! Typically I end with the GUI, but it makes so much more sense to start with that early since, as you mention, things pop up that you may want to change later that will affect your DB layout or functions. Thanks!
That's a good method. I would just suggest one additional point: 4.5 Cut feature list in half For me, at least, a project is much more likely to be completed if I cut the scope a lot.
Easy with the upvotes dude. You might end up being punched in the dick by strangers every time other strangers tell them to use Joomla.
I'd argue that's different though. When you call a framework's query function, you're generally not getting the raw result returned. It's parsed, modified, returned in a more usable fashion. Most classes also use functions that return a single value, or an associative array, or any number of things. It's adding value to the native PHP functions. What the OP was talking about doesn't do that, at least on a large scale. Sure he said he was modifying some functionality, and I'm all for that, but most of it was just returning the unchanged value of the original native function call.
&gt; 5. update GUI (on paper) and set it as your goal (feature freeze). About here, I normally try to get it a rough sketch on [Cacoo](http://cacoo.com/) - or you can maybe use Visio or something else. I'd then update it to "final" prior to "Step 9" (in your scheme).
&gt; 4.5 Cut feature list in half Part of "Prioritize Features" is coming up with "Version 1" and "Version 2" and "Everything Else." At the time of "Feature Freeze," the current version is locked (for new features) - that's not to say you can't lose features to Version 2, or update the feature list for future versions... you just *don't add anything else* to the current version's list.
the cutting was part of prioritizing, but your right feature creep and overload can kill a project real fast.
::bangs head:: If you used a PHP debugger, you would have found this trivially.
Maybe try out gomockingbird.com, I've been meaning to. 
This. Check out whiteyboards if you cant pull off a full one whiteboard
Aside from the actually conventions to help this (agile, scrum, MVC, frameworks, etc...) 1. Maintain a dev list, and keep it up to date 2. One thing at a time 3. Follow tf2ftw's list (its pretty standard) 4. Use a bug tracker, even if its just you 5. Whiteboard and a camera 6. Make sure to take time away from the computer to do a status update-whats done, whats left, how to finish
Definitely.
The above example doesn’t seem excellent, but I think overriding superglobals is a basically good idea. Sometimes I hope there’s a _really_ rich HTTP request object (like [Werkzeug’s][1] or [WebOb’s][2]) and superglobal `$_REQUEST` is replaced by it. Imagine the following code works: $acceptableTypes = array('text/html', 'text/xml', 'application/json'); $type = $_REQUEST-&gt;acceptMimeTypes-&gt;bestMatch($acceptableTypes); header("Content-Type: $type"); $template = getTemplateByType($type); [1]: http://werkzeug.pocoo.org/documentation/0.6.2/wrappers.html [2]: http://pythonpaste.org/webob/reference.html#id1
This is pretty much it. one thing I'd like to emphasize a bit though is workflow. Somewhere between #2 and #3. What happens when X button is clicked? What code will that necessitate, what consequences will that click have. Is it a needed click? If not, why is the button there, etc. But yeah, good stuff. :) 
Never heard of Cacoo before... looks very useful, though. Thanks for the tip!
Bug tracker's a good one. Usually I jot down notes on what's wrong on whatever paper I have handy... I think I'll have to come up with a better way of tracking bugs now, though. Thanks!
There seems to be a few like this floating about. I haven't heard of Silex but I'm using quite a popular one called [slim](https://github.com/codeguy/Slim) and the guy has been pretty active at releasing new versions. The other one I've heard of but not used is [limonade](https://github.com/sofadesign/limonade/) which isn't as well maintained.
my 3 tips for keeping organized: * Use a framework. I prefer something in the MVC vein. It'll help keep your code organized. * Use a bug control system. I use fogbugz, they have a student and start-up edition that's free. If nothing else, it's a more feature-rich to-do list. it also has a built in wiki for other documentation. * Use version control, from the start. This will help you keep track of changes, and rollback if you need to. commit early and often. Writing out a detailed task list will help you plan out exactly what needs to be done. once you do this, you can make moving through your project must more systematic: pick a task/bug, complete it, commit it, resolve task. rinse, lather repeat.
Cool, thanks for the tips. I don't want to start a flame war, but do you have any recommendations on version control systems? I just started looking at Git, but I honestly don't know if that would be the right way to go or not since I've never actually used a VCS before. I will likely be using Linux for my development environment, if that makes any sort of difference.
Git or SVN are good choices (the only ones I've used...so I may be biased?)
&gt; I am imagining there's not much out there like this due to the custom nature of what it's for. There's actually a surprisingly rich set of configurator *software* out there, but most of it is commercial, and very little is written in PHP. Most of them also suck in a few important ways. I couldn't possibly recommend one. My employer's products are driven by configurators. We recently made an exhaustive search of the marketplace to make sure that we weren't about to rewrite our own when we could instead customize something off the shelf. Most offerings fall into two categories. The first is little more than a selection of drop-down menus to select options, with maybe a little "if X is selected then Y is disabled" or "if Z is selected then show menu A" logic. The second category were the rule engine based ones, and those were the most horrible abominations of user interface design I've seen outside of your average large business ERP. This is one of those cases where you aren't likely to find something you can reuse that you'll probably be satisfied with, especially if you need something with a user interface that's anything other than a set of dropdowns.
[**EVERYTHING**](http://stackoverflow.com/questions/2302933/asp-net-vs-php-performance-future-proofing-ease-of-development/2303675#2303675)
It can make a difference. Git's windows support is less than stellar. I prefer distributed version control systems (Git, Mercurial, Bazaar) over non-distributed (cvs, svn). I personally use Mercurial. never really tried Git (except to checkout rails plugins), but I've heard nothing but good things about it (except the windows thing). 
What bug tracker do you tend to use? I've been using trac, but I'm getting a bit tired of it.
Yeah I think I'll pass after making a post about my sites security vulnerabilities nice try tho.
I haven't been watching core dev for a few months (busy with a new job, and a new life!), but if it doesn't make it in for 1.0 I will be very surprised. Hopefully development will be picking back up now that Summer is over and gwoo has settled in at his new job. edit: To expand, there has been a lot of discussion on the best way to do it in Lithium since 0.5 (maybe even earlier?) hit the scene. It's the last large chunk for data if my memory serves me right.
[k](http://php.net/http_negotiate_content_type). $acceptableTypes = array('text/html', 'text/xml', 'application/json'); $type = http_negotiate_content_type($acceptableTypes); header("Content-Type: $type"); $template = getTemplateByType($type);
Convert all PHP notices, warnings, and errors into Exceptions: set_error_handler('errorToExceptionHandler'); function errorToExceptionHandler($errNo, $errStr, $errFile, $errLine, $errContext) { if (error_reporting() == 0) return; throw new ErrorException($errStr, 0, $errNo, $errFile, $errLine); } My environment has been setup this way for years and I wouldn't work any other way.
My pleasure... I/we find it useful for collaborative design efforts ... pretty much one of the missing links in Google Docs (and not as expensive as collaborating via MS Office documents (in spaces that OpenOffice does not seem to fill too terribly well, at least)). Have fun! :-)
 function is_alphanumeric_f($text) { if (!is_string($text) AND !is_numeric($text)) {return false;} if (!preg_match("/[a-z0-9]+$/i", $text)) {return false;} if (!ctype_alnum($text)) {return false;} for ($i = 0; $i &lt; strlen($text); $i++) { if (!is_numeric($text[$i]) AND !is_string($text[$i]) AND !is_scalar($text[$i])) {return false;} if (gettype($text[$i]) !== "integer" AND gettype($text[$i]) !== "string") {return false;} } return true; } Am I doing it right..? Edit: crap, forgot to validate the input first. Added that check in line 2.
No worries, I'm honestly just curious. And I did mention you should show after sanitizing your site btw.....
I'm friending you for that.
If you're on a Mac try [OmniGraffle](http://www.omnigroup.com/products/omnigraffle/) for planning outlines. Aside from that I use a repository, wiki, and issue tracking. Check out: * [Codebase](http://www.codebasehq.com/) - Git, Mercurial, or Subversion repository, wiki (awesome), issue tracking, other great stuff * [Unfuddle](http://unfuddle.com/) - Git or Subversion repository, wiki (sorta), issue tracking * [GitHub](https://github.com/) - Git repository, wiki, issue tracking * [BitBucket](http://bitbucket.org/) - Mercurial repository, wiki, issue tracking Aside from that there's also Basecamp and other services by 37 Signals which are good for client-facing communication and file sharing. Also there's [Trac](http://trac.edgewall.org/) which I've never personally liked but some people swear by it and then there's [PBWiki](http://pbworks.com/) which is a great wiki. Get a feel for the tools and pick one that suits you. It doesn't matter if you aren't collaborating with others, these tools are there to organize project source, assets, issues, and roadmap.
I used Subversion (SVN) for a really long time then I started hearing a lot about Git and eventually checked it out. Takes some time to get used to it but it is amazing. So much better than SVN, imho. It does everything I used SVN for plus handles branching better and some unique features. I haven't tried Mercurial yet. I hear good things there too. btw, if you're FTP'ing code to the live (production) server definitely look into version control. The way my workflow works the code merged into my "master" branch has always been thoroughly tested and stable so I have my production server on a cron pulling down updates every night when there's low load. When I push my changes to "master", when I'm sleeping around 3:00am the production server is updated, and I wake up the next morning to see how things are going. Prior to this there is a "staging" branch and a staging server that I tested deployment on. If it worked smoothly for staging, I know it'll work for production because they're mirrored environments. That means I get to do all my development on my local machine and I never FTP anything. I test my code locally, test deployment on staging, push everything to master and call it a day.
Usually bugzilla. Trac bores me too- especially since I have wordpresses up all day
Content negotiation is a just example of things rich HTTP request object can do.
for($i=1; $i &lt;= 10; $i++) { echo "ditto what Ceolceol said"; }
The problem with Zend_Acl is you'll probably spend more time figuring it out and implementing it than you'd take just rolling your own simple solution. 
a rules engine is a good choice but may be overkill depending on how complex your configurator is... for a good product for rules engine / interactive ui check-out http://www.corticon.com/Products/Dialogs.php
Upvote for unfuddle
This git branching model is useful: http://nvie.com/posts/a-successful-git-branching-model/ MySQL workbench can be useful for managing your ER diagram. Unfuddle is nice with built in ticketing system etc.
I work for the company that makes Cacoo so if you need any help or have suggestions don't hesitate to contact me.
If you like Unfuddle try Codebase. Most (if not all) of my projects are in Unfuddle so I'm still tied to it, and it is an awesome service, but I tried out Codebase briefly for a project that fell apart and loved it. Hoping I'm able to bring it back in the future.
Where did you hear about these projects? I feel like I'm missing where all the new PHP news is being posted :( BTW Limonade looks very nice, but he uses odd indentation for some reason: dispatch('/writing/*/to/*', 'my_letter'); function my_letter() { # Matches /writing/an_email/to/joe $type = params(0); # "an_email" $name = params(1); # "joe" # ... } ?
I realise that, but the guy is a) a beginner and b) wants something quick and effective c) not asking to be a better programmer. Modsecurity will provide a lot of protection and in this instance is better advice than giving him one solution for one particular attack.
Way to miss the point.
Yes, actually, it is.
I've been fairly happy with [Trac](http://trac.edgewall.org/) &amp; [Redmine](http://redmine.org), but they're not PHP. 
1. **Jump In** 1. [Browse Delicious for Tutorials](http://www.delicious.com/search?p=php+tutorial) 1. **Jump In Some More** 1. Make Something Or at least thats how I sorta went about it. 
1. install xampp or lampp (whatever you prefer) 2. http://www.w3schools.com/php/default.asp 3. ??? 4. profit
This is extremely helpful, especially since I'm not as familiar with the branch/merge process and how it relates to feature freezes and the like, so thank you for the link!
php.net w3schools.com but I'd recommend buying one of the o'neill books to start.
In this order: 1. [PHP for the World Wide Web](http://www.amazon.com/PHP-World-Wide-Web-Third/dp/0321442490/) 2. [PHP 6 and MySQL 5](http://www.amazon.com/PHP-MySQL-Dynamic-Web-Sites/dp/032152599X/) 3. [PHP Objects, Patterns, and Practice](http://www.amazon.com/PHP-Objects-Patterns-Practice-Second/dp/1590599098/) and/or [PHP Object-Oriented Solutions](http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117/) 4. [High Performance MySQL: Optimization, Backups, Replication, and More](http://www.amazon.com/High-Performance-MySQL-Optimization-Replication/dp/0596101716/) 5. [Introduction to PHP PDO](http://www.phpro.org/tutorials/Introduction-to-PHP-PDO.html) 6. [Model-View-Controller MVC](http://phpro.org/tutorials/Model-View-Controller-MVC.html)
I teach PHP for free in #phpexperts on irc.freenode.net.
I can not recommend PHP Objects, Patterns, and Practice enough. It's a great book to get you started with OO PHP and design patterns.
It works fine under PHP5. I don't know what you are getting at.
My experience is different. I don't have this problem, error reporting is definitely at E_ALL. Weird...
I'm looking forward to Sebastians new PHP QA book.
I am as well. That's how I came across the list. Amazon has it listed coming out Jan 25, 2011.
On Windows, I believe `fopen` puts a lock on the file, so it _can't_ be deleted until the stream is closed (ie on `fclose()` or PHP script/process ends). On Unix, you can. I also believe `fwrite` doesn't care of the file exists or not. It'll try to write to the _stream_, and only let you know exactly how many bytes were written to the _stream_, not the actual file. As far as I know, the only time it gives an error is if the `$handle` parameter is not a valid file resource. But it is, because you `fopen`'d it. The file (or opened URL as the case may be) doesn't need to actually exist, only the stream does. Replace line 5 with: if (strlen($text) !== fwrite($fp, $text) || !file_exists('myfile.log')) Insert this above line 5: $text = "new line".PHP_EOL; // or whatever you want to append to the file Edit: Sorry, I'm more used to Windows. On Unix, I think this "lock" is nothing more than a suggestion to other processes, so anyone can come in and delete the file. You'll notice `fwrite` continues to return `strlen($text)` even though the file is gone. Your bytes are forever lost in a mysterious black hole. Throw in a `file_exists()` check in there along with the `fwrite` check. If `file_exists()` returns false, throw in another `fopen` to recreate it. Thanks for posting this. I would've otherwise been completely oblivious to this ghost file issue had I not tested this out myself.
I just edited my post. This solution doesn't work. I'm just going to use file_put_contents() and hope for the best.
Ive used ZS on and off for many years, but since v7 ive been hooked on ZendStudio + ZendDebugger (it supports xdebug as well). The integration with the debugger is far better than anything ive seen elsewhere., this includes nice profiling ui's and support. The toolbars for debugging are handy as well. Both debuggers in the end do roughly the same things though, it mostly depends on your IDE's preference i would say.
"unlink() deletes a name from the filesystem. If that name was the last link to a file and no processes have the file open the file is deleted and the space it was using is made available for reuse. If the name was the last link to a file but any processes still have the file open the file will remain in existence until the last file descriptor referring to it is closed." - http://linux.die.net/man/2/unlink
Yeah, I just found out myself that it wouldn't work. I just edited my comment for a fix. `file_put_contents()` should replace all that just fine.
hopefully it won't incur a noticable overhead.
PHP Object-Oriented Solutions is a great book and it has what was needed to make OOP 'click' in my head. I loved it.
You can always use http://php.net/flock
I already knew the basics of OOP before I started into the book and I still found it to be an remarkable read. The author is laid-back and even funny at times.
quick one: Parameterise your SQL from the start! Its a pain in the ass if you learn the other way to fix up pages of code with vulnerable sql.. Maybe check that your book tell you to do it that way before you fork out for a book from 2006 thats going to get you in trouble.
no I can't. this is a daemon that spawns children and the children log to the same file. So locking the file unfortunately is not an option.
This is the one. Just because you delete the filename in the directory listing (in Linux) it does not mean you have removed the actual file, ie. the inode. In linux, a file can exist without any name in any directory, so long as some process has it open still. That is just the way it works. At the other end of the scale, a single file can have lots of names in lots of directories. You delete one name, and the file can still be accessed through any of the remaining names. That kind of demonstrates how it works. Remember in linux, the filename you see and open is *not* the underlying file; it is just a pointer to where the file is. The file is just data and has a number (its inode) and not a name. Similarly, whole the process is writing to the file, you can rename the file and the process will keep writing to it, and you will see the file size growing under its new name. The moment the process closes the file and reopens it, the renamed version becomes a separate file and the process creates a new file under the original name. This is very different to Windows, where the filename and physical file are strongly linked, and so the OS needs to lock files to prevent them being pulled out from under a process while the process is writing to them.
Sorry, haven't had time to test this... Wondering if calling [clearstatcache](http://www.php.net/clearstatcache) in each loop fixes this. PHP tends to cache whether files exist or not. This function clears that cache. 
It appears to be O(1) in "normal" mode and O(N) in "recursive" mode, for counting elements in multidimensional arrays. See array.c:PHP\_FUNCTION(count) which in turn calls array.c:php\_count\_recursive which in turn calls zend_hash.c:zend\_hash\_num\_elements : [array.c](http://svn.php.net/viewvc/php/php-src/trunk/ext/standard/array.c?view=co&amp;revision=305011&amp;content-type=text%2Fplain) [zend_hash.c](http://svn.php.net/viewvc/php/php-src/trunk/Zend/zend_hash.c?view=co&amp;revision=303364&amp;content-type=text%2Fplain) (Disclosure: I'm actually pretty soft on the whole big-O notation stuff. But it appears to do what amounts to a simple return of a stored count (after a lot of PHP/Zend cruft)).
Stored routines won't work? I'm assuming there's a good reason for not concatenating on the fly.
You could use a view CREATE VIEW `new_table_name` AS SELECT color,fruit,concat(color,'_',fruit) as color_fruit FROM `your_existing_table`; That would work. Also, can we ask what you're trying to achieve with this? I think whatever you're trying to achieve probably could be better done with a clever select query. 
I'm going to be periodically exporting the data into a spreadsheet. The data will probably be changing as I do different updates but I want the field "color_fruit" to *always* equal "red_apple" if the first fields happen to equal "red" and "apple". If you look through that documentation I provided it looks like it'll pretty much do what I'm looking for but yeah, maybe something like you suggest would be simpler and work just as well.
In that case, don't use a view, or even a clever SELECT query, just straight up SELECT the table when you're exporting it into a spreadsheet, no point in using a view or triggers. &gt;SELECT table_name.* ,concat(color,'_',fruit) as color_fruit FROM table_name;
Yeah the thing is is that I think it's gonna get more complicated than that now but as far as this part is concerned, I think I'll just roll with your advice, cheers man. I still may end up needing those triggers tho.
Just to keep up to date on interesting PHP projects I tend to look at the [github PHP language](https://github.com/languages/PHP) page. The ones which are most watched or most forked that week tend to be pretty interesting. I think I heard about limonade from a post on here about the [idiorm ORM](https://github.com/j4mie/idiorm) for PHP - in the description of the the project it says about using it with a microframework like limonade.
I'm not sure how it's implemented under the hood, but it's not equal to a variable lookup (by a factor of 10 in this case) Output: string 'time to use a for with count loop: 0.33352994918823' (length=51) string 'time to use a for with variable loop: 0.032087087631226' (length=55) Code: $thing = array(); for($x=0; $x&lt;100000; $x++) { $thing[] = $x; } $t = microtime(true); for($x=0; $x&lt;count($thing); $x++) { } var_dump('time to use a for with count loop: '.(microtime(true) - $t)); $t = microtime(true); $count = count($thing); for($x=0; $x&lt;$count; $x++) { } var_dump('time to use a for with variable loop: '.(microtime(true) - $t));
It would be O(n) for bare-metal languages, but PHP stores the array length somewhere so it's O(1) in that case.
The difference here doesn't have anything to do with the implementation of count. The difference lies in that in the former code snippet you are requiring the for loop to execute a function before it is able to perform the test. This can be proven using a slight modification of your code above. Output: Time to use a for with countHolder loop: 0.57405185699463 Time to use a for with a variable loop: 0.13535809516907 Code: $numElements = 1000000; function countHolder() { global $numElements; return $numElements; } $thing = array(); for ($x = 0; $x &lt; $numElements; $x++) { $thing[] = $x; } $t = microtime(true); for ($x = 0; $x &lt; countHolder(); $x++) {} print("Time to use a for with countHolder loop: " . (microtime(true) - $t) . "\n"); $t = microtime(true); $count = countHolder(); for ($x = 0; $x &lt; $count; $x++) {} print("Time to use a for with a variable loop: " . (microtime(true) - $t) . "\n"); I believe that it is safe to say that my place holder count function is a O(1) operation :)