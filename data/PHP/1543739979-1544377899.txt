From what I can tell, it uses PHP as a backend for web-based UI, rather than something like binding PHP directly to GTK to draw windows. This is what PHP was designed for, it's just bundling the client browser and server together So no, I don't think there's any obvious "right tool for the job" violation, any more than using nodejs as a single-client http server in election apps is. PHP's primary use case is being a web request backend so if anything it's a bit more the "right tool" then node is in electron.
Does it support all PHP Extensions? Have some really old GD based sites that could be made into apps
Googleditmyself: https://www.reddit.com/r/Wordpress/comments/1m8f16/wordpress_and_session_fixation/ Five yr old question/answer but looks pretty thorough. Basically it says WP does not use session at all, but a series of authentication cookies. The series of cookie safety measures is interesting: WordPress sends different cookies for the "front-end" and the "admin" side of the interfaces. That is, the cookie used when viewing the site is a different cookie than when you use the stuff in the wp-admin directory. The front-end cookie provides only access to "who you are", basically, allowing the site to display information that you should have access to. But that same cookie will not allow you to actually "do things" via the wp-admin screens. For that, you need the wp-admin cookie, which is different and only sent to the wp-admin requests. All authentication cookies set by WordPress are marked for "httponly" delivery. Meaning that they are not accessible to client side systems like javascript on the page. Thus, a XSS exploit cannot retrieve your cookies (unless it is also exploiting a browser bug, which could happen in theory). WordPress supports SSL for the admin facing side in the form of two defines that can be added to the wp-config.php file: define('FORCE_SSL_LOGIN', true); define('FORCE_SSL_ADMIN', true); If these are defined, then the wp-login.php screen and the wp-admin screens will be forced to use https only. In such a case, the cookies are also set using the "secure" flag, meaning that they will also only be delivered only over SSL connections. This is desirable if you wish to prevent MITM attacks, but not all web servers have SSL by default, so it is not enabled by default. If your server does SSL, you should enable these. During initial installation, WordPress generates highly randomized keys for the various "secret keys" that are saved in the wp-config.php file. These random keys are used in the hashing process, making cookies very difficult to crack. This does not prevent their theft, however it does provide a way to invalidate all cookies immediately in the case of a suspected intrusion. Changing the secrets will invalidate all cookies for all users. The cookies are constructed such that they have a built-in timeout. They will not work forever. The default browser expiration is 2 days. If the "Remember me" checkbox is used, then that increases to 2 weeks. The cookie itself incorporates this expiration time, so the cookie will not work even if replayed again after that time has passed. Additionally, changing the user's password will immediately invalidate all their old cookies, as a few bytes from the password hash are incorporated into their construction. So if there is a suspected cookie hijack used for a breach, changing the password of a user will eliminate the breach immediately, unlike what could happen with a session fixation attack. 
You can include any PHP version you like in PHP Desktop. To build PHP from sources, download tarball from [php.net](https://php.net), extract it to \`build/\` directory and run the \`build-php.sh\` script. All default extensions are enabled. If you need more extensions then go to the \`build/php\*/\` directory and run \`configure --help\` command to see options. Edit \`build-php.sh\` script and pass any additional options to the \`configure\` command to enable more extensions.
Thanks! I'm glad it works for you.
When running index.php with phpinfo displayed it uses 47 MB of memory. See attached screenshot.
Added route parsing modes as you suggested: [https://github.com/AymDev/PPRR#no-need-for-regex--change-the-route-parsing-mode-](https://github.com/AymDev/PPRR#no-need-for-regex--change-the-route-parsing-mode-) As you said, RegEx are really more expensive than string functions... It may not be the most elegant way to use it but I'll improve the whole usage in the next major version.
See a list of things yet to be done in December for the basic functionality support: [https://github.com/cztomczak/phpdesktop/issues/221#issuecomment-443495103](https://github.com/cztomczak/phpdesktop/issues/221#issuecomment-443495103) There is one bug I've just discovered, the php-cgi process hangs after PHP script was served.
I am not that sure, I use PHP myself it pays the bills, I am quite productive with it. I like other languages much more but on the other hand I can do more in less time in PHP (probably because of my experience). Still hate lack of design, inconsistent function naming, arguments order etc. Most things I don't like about language are result of not thinking it through when it was just Personal Home Page project and then never fixing it because WordPress :S
I'm very concerned about the security of the site, you've already built quite a bit. Do you want photos to have multiple galleries or just one? When you click save you can get the photo variable and the variable of the gallery (and or template) and run a query that inserts it in the photos table. If you want a photo has many galleries you might have to add a third table: photos id url pivot table (gallery_photos) id photo_id gallery_id galleries id title description I hope this might be somewhat usefull. Btw, what's the domain?
JSON has always been about being simple. A simple format for simple data with simple parsers and encoders. The moment you break out of this box of simplicity, you run the risk of reinventing the wheel. In PHP you got XMLReader, which is already a stream parser. Naturally it doesn't work with JSON data, but it can work with very large files, while handling errors, reading sublevels, etc. Personally, I've never had the need to parse large JSON files. You might not have the option, but I'd start looking for other ways to store the data before resorting to large JSON files. At the very least, it can give you ideas on how to structure your API. 
Thanks. I try to make it as simple to use as possible. That is why it is based just on iteration, as if it would be a normal array. What ideas do you have in mind? 
More diffs coming then :) For me, it's the fastest way to learn I really enjoy. 10 lines tell me more than 2 minutes of reading.
&gt; PHP is very easy to pick up. As a result, thousands of people without any education consider themselves programers and start teaching others. (for example, only yesterday there was two links submitted to /r/PHP to articles that are literally shit). i fell like the same thing is happening in the node community as well now. Alot people new to programming picking it up and the internet is full of badly written insecure node.js and the amount of spaghetti express code i saw makes me feel like im back in the early days of php...
I don't really realize lol is it correct or too much ?
I think TraversyMedia on youtube has something related to this using codeigniter iirc. Derek Banas and Jose Annunziato are worth a check too.
?
It is a terrible framework built around the Singleton pattern, and promotes passing assoc arrays around rather than having domain models. This is my main reason for the hate, there are many more problems your can read about if you google the subject.
I've only used it and Laravel, Codeigniter wasn't terrible to work with as a developer though I definitely preferred Laravel, but with my CI experience was joining a team of one and maintaining an older project whereas my Laravel experience has been starting from scratch on personal projects, so it's naturally going to feel like different. I've heard Codeigniter has better performance. I'll look into the problems you mention, very much still learning over here.
I'm a PHP coder, and I love the language. It's modern, expressive and capable. But right now I'm maintaining some PHP written in the bad old days and I understand the hate. This is PHP 4 era stuff and it's... It's just ghastly. Logic and dB access and presentation all in one file. Inline CSS. Blech. 
If you need CMS systems, you are doing something wrong. Most of the time, you can write the functionality that you need very fast your self, without spending the time to learn another bloated CMS. And if you need some basic functions like routing, ... then simply go to one of the micro cms systems, that are a few files. And lets not mention Wordpress and PHP in the same sentence. Wordpress is a eco system on its own, written in old PHP 4 standard. Its never going to really change because they need to support the 1001 plugins. Its probably the number one reason why people complain about how bad PHP is, because it is based on very, very old ( and bad ) design practices. Wordpress development is where you send people who you really hate and you want them to suffer. :)
Deserved: Yes and No PHP in the past had issues. Default settings that simply are bad practices even then. But that has changed over the years, when PHP finally started breaking old websites to enforce better practices. The problem is, PHP because it is easy has attracted people with less experience programming. So you get people writing code that directly accesses the database. Say hello SQL injections! Its easiness makes its possible to write fast code, without knowing a lot of programming but also extreme unsecured and simply bad structured code. Javascript with NodeJS is also seeing the hate grow the more popular it gets. Frankly, every language has issues. You do not hear people complaining about C but you have the exact same issues. People new to C make mistakes and write bad code, just like people new to PHP. Mistakes that result in programs crashing. But because its not so public as a websites, less people "notice" the issues. Or they blame Windows for crashing or ... The reality is, the hated to PHP is a lot of people are hatters because they worked on things like Wordpress. And lets be honest, if you worked on Wordpress, you HATE your life and thus PHP very fast :)
Is it possible to use it in production ?
Is Symfony better in any way than Laravel? Bear in mind that Ive never 'seen' symfony code, but been developing in Laravel for the last year or so
Great use case: A lot of php that I build is reports generating. Most of the time it's on the web to allow universal access to the program. But there are cases where it doesn't *need* to be online, and subsequently upkept in monthly server fees. So building this for desktop deployments would be great sense. 
PHP Desktop for Windows is stable. On Linux this is an early release, there will be a stable release this month, presumably in a week or two.
If you can't tell the difference, then why does it matter that much to you? I'm not trying to be a dick, but saying "does it use too much memory? and what is too much?" just makes it seem like you're hopping on a bandwagon that you don't really understand.
Laravel === PHP But PHP !== Laravel
No, it runs a network scan as soon as it executes to determine if it's on a business network. If it's on a large network and the hostname doesn't end in "-dev", it self-destructs the entire PC and sends out a beacon for a homing missile to annihilate your whole building.
A malicious actor having direct physical or unrestricted remote access to a PC is considered game-over in all circumstances, except in the case of a physical machine being powered down and encrypted, and even then it's dodgy to enter your password once you have it back. &amp;#x200B;
I was going to bring up that it's been 18 yeats since PHP 4 was released and one would think they would have fixed these things. Like inconsistant naming would be easy to fix, add fuctions or classes that have uniformed naming and then depreciate the origial ones and then years later remoce the old ones.
I just think that it could be a valuable information someone could give before I try the tool. I just want to know if this tool worth giving a try but I am not sure I can evaluate that myself.
I was going to bring up that it's been 18 years since PHP 4 was released and one would think they would have fixed those kind of things.
Step 1: don't
I've never seen Laravel code, so no clue where the main differences are... Have been a Symfony dev for around 6-7 years now. Generally, Symfony focuses on on being a loosely-coupled collection of components which you can combine as needed to build anything from tiny cli commands to full-blown web applications. There is very little focus on being an MVC framework. Components focus on the HTTP specification and being a request / response framework. Integration of components is usually done with dependency injection, with a heavy focus on seperation of concerns. Bunch of concepts borrowed from Java, especially the Spring Framework.
Also found these, some good comparisons: [https://www.toptal.com/php/choosing-between-symfony-and-laravel-frameworks](https://www.toptal.com/php/choosing-between-symfony-and-laravel-frameworks) [https://www.valuecoders.com/blog/technology-and-apps/symfony-vs-laravel-php-framework-choose/](https://www.valuecoders.com/blog/technology-and-apps/symfony-vs-laravel-php-framework-choose/)
Almost any language is better designed than Javascript. This includes even PHP. Source: I am now writing ReactJs everyday :)
I think amphp is a server made with PHP. Check it out
The package requires laravel, the tutorial is basic enough that it doesn't have much to do with laravel
The package requires laravel, the tutorial is basic enough that it doesn't have much to do with laravel
Check this: [https://developer.mozilla.org/en-US/docs/Web/HTML/CORS\_settings\_attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) Or you can set up a small proxy.
That is a great way of going about it. Wish I had more interviews like that and less where they put you in the spot. Given a little time and access to my resources, I’m a decent programmer. With a sheet of paper and several people looking over my shoulder, I’m a terrible programmer. I’ve also been in a position to hire a few entry-level programmers, and my process was to question them about past experience, and if they had demonstrated an aptitude for it I would hire them on a test basis. The first week or two I would send them a couple of simple tasks to code, and if they managed that then I would ask them to make a simple functioning project of their own design in one week; anything they wanted, to show off what they can do. This allowed me to judge their skill level, but also their creativity, Helped me decide how to best use them afterwards. For example, on person created a plain but completely functional pos system, and I started giving him background functions to work on. Another person created a Zelda-ish game that was visually impressive, so I gave him more front-end work. Another person sent me a single page of non-working code and we had to let them go.
For laravel laracasts is good, but I like Udemy to get the foundation of laravel, I have started using laravel recently and these are my resources.
For development php has a built-in server. Just use `php -s localhost:8080`.
Thanks.
Thanks for the info.
Laracasts.
I see its time for this monthly thread, the mods should just consider adding this to a sticky. A few things: - Writing good software is hard. Really hard. - Learning PHP is easy compared to other languages. You have people gravitating to a widely used language that is comparatively easy to learn. Since its hard to write good code, you're going to get a lot of bad code. JavaScript is even easier to learn than PHP and their is ton of bad JS out there, yet it gets far less hate. There is an obvious bias against PHP, some legitimate, much not. The proliferation of threads like this will continue.
If you want to have something async as well try https://reactphp.org/ I’ve not used it personally but I am looking for an opportunity to do it some day. 
The Slim framework has a similar setup to Express and Flask. It will be very familiar to a developer who's used those other two. https://www.slimframework.com/
https://www.swoole.co.uk ? 
many govt websites in India still have this. gives me PTSD.
I don’t get it. Why not use this? https://github.com/jiahaog/nativefier The PHP Desktop doesn’t seem to make use of native OS APIs so why not just wrap your ‘native application’ in your own custom PHP scripts instead of using Codeigniter. I do see the mention of SQLite though, so if PHP Desktop can use SQLite locally then that is where it benefits and differentiates from nativefier. Both have their use cases I guess.
If you don't mind the 1 month trial, or the subscription cost. LinkedIn Learning has a lot of videos with exercises and files to practice your skills. They do have a full Developer Path of videos as well. Which is nice for a complete series that gets you ready for work, instead of 101 basics repeatedly. I'll try to get some links later for anyone interested. 
In PHP Desktop application PHP scripts have access to OS and filesystem. App can operate with no internet access. App can run on internal networks. Your data belongs really to you because it resides on your disk and not in some cloud. Etc. It provides a way to create a real desktop application. 
Lol I haven’t made it yet. I just want to learn.
Got it. Yeah that is very nice. Going to look into it
I did not have any particular ideas in mind. What I'd like out a parser would be schema validation, other than that the built in parser serves my needs. That isn't to say a stream parser isn't useful. I personally wrote one to handle gigabyte sized PDF documents without running out of memory. Because of that I can give you one idea. I'm not sure how practical it is in JSON files, but in my PDF parser I had "lazy" reads. That is to say the parser only fetched data when it was needed. That saved me a lot of disk access and memory, and sped up the solution. One problem is that for JSON you have to search through the whole file to build up an index, something you only have to do for the occasional PDF file because most of them are fitted with an index already. But if the JSON data you're reading is mostly static, you could have the library build up an index the first time it scans through the file. Next time, check the modified date and use the index if it hasn't changed. Then you jump directly to whatever object you want to read, using the index. 
Web applications are 95% of our needs nowadays, but there are still cases when you want a real desktop app. Also desktop app can integrate with other desktop applications running on your system and can access its data.
have you tried books
&gt; And lets not mention Wordpress and PHP in the same sentence. What are you doing? Are you trying to get us killed? 
Thanks.
Pretty cool! Thanks.
Thanks.
Didn’t follow the link but I wanted to chime in on the topic- About ~1.5 years ago I wrote some PHP CLI scripts to automate a lot of my job (think repetitive/paperwork tasks for a management job in retail/entertainment, the scripts would take some input and then generate and execute appropriate AutoHotkey scripts). A lot of fellow managers had heard about my “productivity” and kept requesting copies of my tools. But I didn’t feel like explaining terminal usage to other managers, so I looked for a quick way to develop a GUI. I settled on PHP Desktop as it seemed like it would be the quickest way to port everything. Brought the project to life in about 6 hours on a Saturday evening. It’s reduced 8hr shifts to 10min tasks, and ultimately saves the company over $1.5M in payroll annually. So thanks OP, it was fabulous to use and is a great project. (Eventually my project reached a point where I wanted to create a v2, and I considered doing a rewrite in JavaScript/Electron because I wanted more native system dialogues [particularly opening/saving files and menu bars]. I ultimately still haven’t started on v2 because I’m lazy 🤷‍♂️. There was also an issue with JavaScript alert()s displaying in a weird way, but who knows, that’s probably been fixed by now.)
God why
I'm glad it worked for you :) The PHP Desktop project is looking for companies that would like to sponsor further development efforts for phpdesktop. A big company logo would go on the project's main page along with many thanks. See the "Sponsors" and "Fundings" sections on the main page: [https://github.com/cztomczak/phpdesktop#sponsors](https://github.com/cztomczak/phpdesktop#sponsors)
Why not regular nginx and PHP-FPM?
&gt; 1) Assuming that an attacker gets direct access the user's PC and grabs the auto-login cookie (token), then obviously is able to log into the app via the token. Does this qualify as a vulnerability for the app? No. Physical access to the end user's computer is outside the scope of the server side of a client-server application. The client needs to be secure in order for the entire architecture to be secure. [Related](https://paragonie.com/blog/2016/03/client-authenticity-is-not-server-s-problem). &gt; 2) Same question as 1), but via session identifier - PHPSESSIONID, again stolen directly from user's PC The question here is, "**How** was it stolen?" Was it stolen because you didn't deploy HTTPS? If so, that's always a vulnerability. [Fix](https://letsencrypt.org) [that](https://istlsfastyet.com/) [first](http://www.httpvshttps.com/). &gt; I've been researching this and it seems there's no way to 100% protect a user against session fixation, in cases such as user's PC compromised. Correct. If this seems strange to anyone, welcome to [threat modeling](https://adamcaudill.com/2016/07/20/threat-modeling-for-applications/). &gt; Notes about what is already in: &gt; &gt; * ssl (obviously) &gt; * session is regenerated on each successful login &gt; * httponly and secure flags are set Make sure your session identifiers are generated by the kernel's CSPRNG. For older PHP versions, that means setting the entropy file to `/dev/urandom` and the entropy size to 32. For newer versions of PHP, this should already be taken care of without having to specify an entropy file (it uses `random_bytes()` internally these days). Set `use_strict_mode` to TRUE if you're worried about an erroneously or maliciously set cookie (i.e. the actual fixation attacks). &gt; * request header changes will logout the user and need re-login (such as accept-language changing in request) I don't see the value in this step. At best you'll catch the sloppiest of the sloppy attackers.
Thanks for all the good work Czarek! If my tiny company gets some traction I definitely want to sponsor some development!
I finished the Traversy media course you’re talking about. It’s a very good course, you just need to have some precious knowledge of php and oop. The course is just meant to teach you how to create a MVC nothing else
Thank you for your comments. See below: - We use 7.1, switching to 7.2 next. HTTPS is in obviously. - use_strict_mode is already in, we have fiddled each PHP setting carefully, especially session related. There is still stuff to be done in the app but overall we haven't been sloppy. Not taking security risks. &gt; Correct. If this seems strange to anyone, welcome to threat modeling Bookmarked for later, seems a good read. Is the article yours? &gt; I don't see the value in this step. At best you'll catch the sloppiest of the sloppy attackers. I agree, was aware from the beginning that it's quite crude. Funny, it is one of the measures recommended widely in this line. We have it in, well, it doesn't hurt to have it, right? I don't see any potential side effects if tuned correctly. One thing we have considered though, is using IP-based geolocation. For example if IP changes to a different geo, e.g a different city, then we force a re-login. This one isn't in yet, as it is kind of CPU intensive. What do you think about this one. It's not an 100% solution but definitely helpful. 
Sponsorships are very welcome.
Initially I'd recommend the free [Laravel from Scratch](https://laracasts.com/series/Laravel-from-Scratch-2018) video series, which goes through all of the basics of using Laravel. Additionally if you subscribe to Laracasts, there are a number of series that will give you a good overview of PHP fundamentals. I'd also highly recommend [Test Driven Laravel](https://course.testdrivenlaravel.com) which takes you through building an entire application using a TDD approach. Even if you don't intend to use TDD, it provides a solid grounding in testing practices in PHP.
Not to mention it kills your cat, gives you erectile dysfunction, and reverts all instances of PHP to version 3.
It's adding garbage for the sake of a small improvement. If you are so troubled by potentially seeing what should be really obvious but really want it looking pretty in diffs, why not just prefix with a comma instead, it would have the same effect. [ 'one' ,'two' ,'three' + ,'four' ] No need for an extraneous comma.
Apparently, some prefer to add an extraneous comma to lists: 1. So when running a diff, instead of 2 lines being marked as changed, they see 1 line marked as changed 2. In the anticipation that they might add a new item Really? is it that hard to add a comma when needed? Also, it's not like it is mind boggling to see that the previous line had a change of a comma added. I disagree with this and every time I work on a project that has this in the code, I strip it out. This is what makes me annoyed, because it's garbage. Although now I know why I saw it in code I've taken over, it still doesn't give it validity.
And which way did you go with it? Your user name has me believing you are a fan of commas...
Because it's ugly? Also, with trailing commas all lines are equal so you can duplicate any line (including the first and last) without having to bother about the comma. I am not saying you should use it, but I really like it and I am glad it is possible. And it really doesn't hurt anyone.
No dangling commas.
Any examples of a windows app I can install and try out?
Thanks for the explanation. I guess this is a coding style and opinion issue and not a standard. It would drive me crazy if required. 
I worked hiring codemonkeys, codechimps and some Jedis . I never cared about github. However, I care about proactivity so it could count as a plus. So, what it's the minimum?. Really, it's zero. But, it also depends. If you are a foreigners (if you want to land a job outside your country), then a couple of github will not do the cut, you will need a degree (at least!) and a couple of certification. However, about GitHub if you are copied a code (or a simple fork), and you are using it as your own work, then it shows that the candidate is dishonest. It is easy to know if the candidate was or not the author, if you are a novice, then it's understandable that you must commit mistakes. However, if you are a novice and your code is flawless (or it uses advanced features), then it raises my eyebrow. But, what it really counts is the experience. I only hired guys (and girls too) with more than 6 months of experience (6 months is nothing really, but a coder could learn a lot during this time). &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
PHP Desktop binaries is a portable zip with all dependencies included. Just run the executable and example scripts from the www/ directory will load. You can create an installer for your application using Inno Setup - there are many tutorials available on the internet. There is also this tutorial on PHP Desktop that you might find useful: [https://phpocean.com/tutorials/design-and-illustration/create-your-first-desktop-application-with-php-and-php-desktop/4](https://phpocean.com/tutorials/design-and-illustration/create-your-first-desktop-application-with-php-and-php-desktop/4)
Why a video for essentially 5 lines of code?
About 1), I miss peek and pokes (my machine was a atari 800xl) 
I knew it
Any plans for a Mac version friend
As long as they're well done, they're fine. It's worked for me.
Hey there fellow Redditers, I created this package mostly because I just had the right mindset and fun doing it just now. Conceptually, I discussed this with a friend who's into hosting and wanted to be able to perform any kind of operations and then rollback the whole chain of operations if one of them failed, for any reason. The package I created does just that. I don't pretend it's the first or only one of its kind, though. A sibling package will follow, implementing the operation interface for common filesystem operations, to be able to easily write something like a hosting package installation script. If you have (constructive) feedback, please let me know here. I'm also interested in ideas for other sibling packages, that would ease writing operations for another domain. Warm greetings, OP
You don't need a library to do MVC. MVC is a matter of discipline rather to a library. **Router:** router.php (it is the starting point of every controller) &lt;?php include "CustomerController.php"; include "Customer.php"; $controller=new CustomerController(); $controller-&gt;example(); **Model:** Customer.php (it only contains fields sans logic) &lt;?php class Customer { var $id; var $name; var $address; // you could add a constructor and setter/getter if you want it. } &gt; **Controller** Customercontroller.php (it glues everything) &lt;?php class CustomerController() { public function example() { // fetch, database connection and logic are done here. Service class are called here too!. $object=new Customer(); $object-&gt;name="John Doe"; $object-&gt;address="Sunset blv 2576"; include "/view/customer/example.php"; } } **View:** /view/customer/example.php (it is html without logic and basic php) &lt;html&gt; &lt;h1&gt;&lt;?=$object-&gt;name;?&gt;&lt;/h1&gt; &lt;/html&gt; 
That is your personal choice just like a more advanced developer would say the same for all frameworks since if you are really good at PHP you would build a custom one for each project that fits its specific needs. Hence, there are no better languages, or better frameworks or even better ways to code the same. There is just what works for you.
In my experience it has better performance.
Good job Jan! The package looks really good, and the way of declaring operations via functions is really intuitive, I will play with the package for a while, maybe I can come out with something 👍
It would be nice if you create a FAQ or docs that describe those things as I expect some people having the same questions. Their first choice now would be Electron but it has its issues, in terms of resources and complexity. Describing the benefits over Electron would help those people to pick PHP Desktop.
It is the reason why I stick with vanilla-php. My ten-pound gorilla project uses less than 20 libraries (in total), Test Unit uses 7, 1 database, 1 template, 1 file manager, 1 validation, 2 email, and a few other ones. So, the maintenance and CI are easy and trivial. While Symfony and Laravel start with +30 (and many files). 
Does Electron support PHP? If not then it's like comparing apples to oranges? I've seen some Electron apps and they seem to use twice much more memory than PHP Desktop, but I've never did any real testing by loading the same HTML5 app.
There is an ongoing funding for the Mac release, see: [https://github.com/cztomczak/phpdesktop#fundings-for-new-features](https://github.com/cztomczak/phpdesktop#fundings-for-new-features)
I would guess that's because there are quotas and duration requirements for monetization as YouTube partner.
Electron does use quite some memory, yes. About PHP, not out of the box but it can with some hacks around.
Very nice idea, will have a play.
Interesting but miss-named, your library does not add transactional behavior to anything. From user POV I can just define an OP and its undo/reverse counterpart, but nothing will be executed with an extra transactional net. My OP will be committed as soon as it is applied, except of course if the OP is itself backed by a transactional system. Transactional means applied from my POV but not visible by others (processes, requests, functions... according to the context) POV. Furthermore, in case of multi OP transaction you also expose partial state to others, and It could lead to state corruption in case of process crash for example. &amp;#x200B; I think you've just created some kind of support for reversible operation management and It looks interesting. Just choose a more appropriate name IMHO. &amp;#x200B;
So how would you approach the latter case then? Perform your business logic and fire events to deal with consequential actions? Examples being sending notifications over different channels (logs, slack, mail), updating statistics, writing stuff to the database, etc. None of it is crucial to accomplish the given request (for example, enable a service on a server), but it all still has to be done as part of the request for auditing purposes and whatnot. 
Snap, you're totally right about that. I'll have to thinking about a rename. Any suggestions are welcomed :)
Awesome! That's sounds like I what was lookin for. 
Session fixation describes the act of the bad guy creating a session (id) and giving this known secret to a targeted user. This way a bad guy can obtain i.e. a valid login. What you describe is simply stealing the session (id). Regenerating the session id on login is a valid fix for session fixation. Because the user gets a completely new/random id which is not known to others. Sessions rely on randomness and secrecy to be safe. Guessing the id should be extremely costly. Protecting against physical theft is a hard task and will likely come at a high cost of comfort. This would involve tracking known devices, IPs, clients, very low session lifetime (&lt;10min) and session deletion or account freezing on suspicious behaviour. What you also want to look into: * 2FA * CSRF * password walls for safe area edits (i.e. account) 
Op is woke, now wants to enlighten everyone
Hmm, that does make sense. Thanks for the input! 
Anyone know of an NLP library for PHP? Specifically one that can compare phrases with a degree of confidence on similarity.
If an object can't reasonably be used for any purpose without a given dependency, then it's a good candidate for constructor injection. If it can be used in a limited way without the dependency, but it can't do certain things without the dependency, then it's probably a candidate for method injection. And, as a general rule of thumb, if you find that your class has more than one or two method-injected dependencies, it's probably doing too much (violating SRP) and needs to be split into multiple classes.
Don't bother, the guy is critical for the sake of being critical. It's a great idea, and you've produced something valuable.
This is a prime example of terrible code to do a job terribly. &amp;#x200B; If anyone is reading/watching this who genuinly wants to know how to import CSV data into mysql. just run `LOAD DATA INFILE 'file.csv' INTO TABLE table_name;` &amp;#x200B; &amp;#x200B;
&gt; In what cases dynamically creation if images makes sense? Ease of use, when you prefer using the url as a replacement for another image tool. You can see Cimage (and equal tools) like a DIY imgix/cloudinary.
&gt;laravel’s own dd() and dump() functions no, they're symfony's own functions
You're right. I didn't look into it much. Just saw the dd() function in Illuminate/Support/helpers.php and the Illuminate/Support/Debug/Dumper.php. didnt dig any deeper than that. But I am counting on that cli/html Dumper.php strategy from laravel. So my thinking is that it's still a valid statement right? Even though that class uses the smfony classes
Please correct me if I'm wrong here, but after having looked into definitions of transactions in the computing world, I believe the way this package works fits the bill for a compensating transaction: https://en.wikipedia.org/wiki/Compensating_transaction
**Compensating transaction** The execution of a business process consists of one or more transactions. Each transaction may consist of several individual operations yet, as a whole, it moves the system between consistent states. There are two groups of systems where compensating transaction may be applied: 1. In the context of a database this is often easily achieved using transactions and the commit/rollback mechanism. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Can I have the rollback in a transaction - just in case it fails
Can you give a visual representation of what you’re trying to describe? It’s just difficult to work out what you mean
In theory you could put the rollback of an individual operation in a transaction, but in practice that would cost you a lot of maintainability, the way it's currently made. What you can do is catch the exception that is thrown when a rollback fails. It hold a method to get the operation that could not be rolled back, the exception that caused the rollback to fail, as well as a method to get all the operations that have successfully rolled back up to that point.
Get out as fast as you can 
Then why are you posting it as a “Payload to bypass simple email validation in PHP”
Warp Pipe was the cooler name. That's exactly what it is: A Pipeline.
I just started teaching myself PHP 3 weeks ago, and I find it's going really well. I had considered between PHP, Python, and Java. Can you tell me some of the reasons PHP was the wrong choice? Or are you just being facetious? 
This.
OT: Why can't I submit a longer post on /r/PHP ? On /r/Python when clicking "create post" button I can see an editor and I can type a long post. On /r/PHP on the other hand I am limited to 255 characters or so. Anyone knows? Thanks.
https://github.com/ziadoz/awesome-php Learn Go(lang) in parallel: many vacancies are PHP-&gt;Go migrations or monolith -&gt; micro-services, so it will be helpful.
Too busy focusing on if they could instead of if they should.
Thank you. This parser also lazy reads just as you iterate. When you stop iteration by `break` for example, no further reading happens. As for your note about indexing: It is not meant to be used as an array. It doesn't implement ArrayAccess. It is just Iterator (Generator to be precise). The most frequent use case would be scanning the whole thing and processing one item after another. If you needed some kind of indexing feature, you can build it on top of it.
This is a good resource by a really good instructor in regards to learning PHP. If you want to learn and learn well it will cost you some times. stoneriverelearning.com/p/learn-php-programming-from-scratch
PHP is a good place to start and get you’re foot in the door. You can always branch of into Python and Java professionally in the future. There is nothing wrong with PHP, just that to many ppl hate on it for no good reason. 
Thank you for the clarification.
Np. Yeah I’ve been learning PHP for a lil over a year now and more recently jump into Laravel and I’m loving it its pretty exciting to see how much I’ve learned as a developer. 
Oh cool, that's what I'm planning on moving into as well! I hear it's the choice back end framework right now.
* Use up-to-date resources. Start with [PHP: The Right Way](https://phptherightway.com/). It has a list of recommended resources at the end. * Use the most recent PHP version. At the moment it's 7.2, but 7.3 should be out in a couple of days (Dec 6th). * Read the migration guides for previous versions to understand how the language has changed over time. This will help with maintenance of legacy applications in case you ever have to work with one. 
&gt; Can you tell me some of the reasons PHP was the wrong choice? None, really. People will shit on you whether you choose Python, Java, or PHP. PHP is a popular choice, and humans hate the popular choice since humanity started. Just put your head down and keep learning.
Yeah, Laravel is a dream and w/ VueJs pretty sexy. 
Oh, I already knew that you didn't read beyond the part you iterated too. That's nice when you're fetching something early in a file, but it helps little for those times you need to fetch something form the end of the array. The big advantage to your approach is, as you note, that you don't need to keep all those 500 MB in memory at the same time. However, you noted in another comment that you want features like fetching a piece of data by supplying ""/libraries/*/books". That indicates that you want to use the JSON source file like a database. If you got a 500 MB file with user information, worst case have you reading the whole 500 MB file from the disk if all you want is the name of the last user. Iterating sublevels faces a similar problem. If you want to fetch "/libraries/*/books", you will still have to potentially read in a lot of data before you get to the book. Worst case, the whole file. Your library as it is, is fine. It lets you process large JSON arrays without running out of memory. I'm just skeptical of the utility of extending it beyond the current implementation. If the data for some reason have to be in JSON format, then that's how it is, but you might just end up implementing something that already exists, just not in the form of JSON. 
When you post a link to the final release, nobody would give a fuck as you already spammed everyone to death with pre-alpha release announces. 
You have not stated what you want to achieve. PHP, Python, Java have very varying usages, with some overlap. So tell us who do you want to be and where are you located first.
Very nice API: * just use foreach as before, no cumbersome callbacks as in XMLReader * if you want something specific provide Json Pointer Starred and will definitely give it a try when in need.
Not really NLP, but may be capable of such comparisons: https://github.com/php-ai/php-ml/ If you ask in the issues, they'll give you more info
Sometimes you are not in control of the JSON document in question, so the only option is to deal with it. So, if it's a really large document, this library can save your day just by changing one line of your code.
I thought you were some python bot when i saw your comment on my blog(sorry for that). Till this day i didnt know my blog was popular.
It had me going for a while thinking it was real. The I saw ‘benefits of a framework like Cake’. Oh the jig was up!
I got a diploma in IT - Networking / System Administration, however there is a very poor economy here, and there are 10 programming jobs for every other IT job combined available here, I want to develop an employable skill. I'm not just doing it for the career, I also enjoy programming and have dabbled in it my whole life.
I'm becoming really used to work with Laravel Homestead but after having a production ready project I always have the same question. Is there any way to set up a fast ready to use production environment with docker / vagrant / sh script? Do you know any project? &amp;#x200B; For development I know Homestead, Devilbox...
Other things you can do is: 1. Look carefully for evidence of sessions being used across devices (user agents, IP addresses, device fingerprints, etc.). Lots of scope for false positives here (user is logged in in their phone, and moves from wifi to mobile data; obviously their IP changes. Similarly if they sometimes use a VPN), but a session that was created on a phone in California and is now being used by a desktop in China is probably worth flagging. 2. Let the user see what sessions are logged into their account/what devices seem to be using their sessions 3. Alert them if an unusual device/IP is using a session ("someone using Chrome is logged into you account from IP a.b.c.d, is this you?") 4. Allow them to terminate other sessions 5. Require password confirmation (and ideally, 2FA) for changing passwords and emails. If somehow a session theft does occur, what you want is for them to say "wait, someone's connecting to my account from Russia? That's not right!", and be able to terminate the session, reset their password, and move on with their life. What you want to avoid at all costs is any way for the attacker, having obtained the session, to somehow lock the legitimate user out of their account. Finally, one avenue to look at in the context of your app, users, and threat model is whether to require 2FA, session lifetime, allowable idle time, etc. If you're protecting financial data, it might make sense to log people out after 15 minutes of inactivity, make them re-authenticate with a password every couple of hours, and re-authenticate with 2FA once per day per device/IP. If it's a gaming forum, you know...meh.
Good point. TBH I just copied the title from the authors tweet. The correct title should be: Interesting XSS payload that passes the email validation.
Correction. The project's never ceased to be great.
I understand the approach of this article: &gt; No time but eager to hear PHP news? PHP 7.3 is out in December 2018 and it brings 173 changes. Which are the most useful ones? But one must wonder what the real added value is here? Lot's of people reading this post probably think that PHP 7.3 is just these three features. What about - [Flexible Heredoc and Nowdoc Syntaxes](https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes) - [list() Reference Assignment](https://wiki.php.net/rfc/list_reference_assignment) - [Compact's behaviour for undefined references](https://wiki.php.net/rfc/compact) - [Case insensitive constants behaviour](https://wiki.php.net/rfc/case_insensitive_constant_deprecation) - [Same site cookie functionality](https://wiki.php.net/rfc/same-site-cookie) - [PCRE2 being used](https://wiki.php.net/rfc/pcre2-migration) - [Changes to MBString](https://github.com/php/php-src/blob/php-7.3.0RC6/UPGRADING#L186-L232) - [Several deprecations](https://wiki.php.net/rfc/deprecations_php_7_3) If the goals is to inform the community about PHP 7.3, I don't think you can cherry pick a few features and just be done with it. Once December 6th arrives, people will start updating and sometimes their code will break. It's important to know about what will be deprecated, removed or changed; and how to fix it when you encounter it. Like I said I get the point with the diffs in 30 seconds, but one should wonder if this actually adds value to the community, this close to PHP 7.3. 
I am just curious about the following points: - Why should I use this instead of Electronjs? - What's the advantage of using PHP in a desktop app - Why is PHP superior to JS in this scenario?
If you know PHP, then it's better than Electron :)
Not OP. I mean, I could write a long and detailed response to this, but since you are on /r/PHP, this question is equivalent to coming to an /r/Android thread about the new Samsung release and asking "Why should I buy this instead of the iPhone $num?" All in all you at least made me reply, so you get 4/10 on the bait. 
How the fuck can you compare a programming language to a framework, you expert.
Because Electron is fucking using JS, isn't it?
See my subjective opinions below: &gt;Why should I use this instead of Electronjs? Because after all PHP is a much better language than Javascript :) &gt;What's the advantage of using PHP in a desktop app If you have a big PHP code base it makes sense to reuse it rather than rewrite everything in Javascript. &gt;Why is PHP superior to JS in this scenario? In PHP Desktop you build app using both worlds: PHP and JS. You want to build the client interface with JS/HTML5 and PHP to do all the back-end stuff such as interacting with OS, filesystem and processing of your data. JS communicates with PHP similarly as in web app using asynchronous AJAX requests.
Thanks. We're already working on the geo-ip thing which is probably the best way to detect against unusual ip. Otherwise, we're going to implement all these measures next as they make a lot of sense.
what's the main benefits to this over Valet?
I actually just got a use case for this. Clients ask me for an easy way for them to manage their eCommerce inventory. I can use the local SQLite feature to store their API key and the rest of the application will be consumed via the REST API that eCommerce services provide. i.e. WooCommerce / Shopify REST API &amp;#x200B; Unfortunately, all my clients use Mac. I see you are looking to raise funds for the initial Mac release. Good luck!
Trucks use gas but that doesn’t mean it is comparable to a leaf blower, is it? 
From what I understand Valet is an environment to be used by developers on their machines. PHP Desktop on the other hand is a portable environment that you can distribute to your end users. PHP Desktop embeds all into a single application: a web browser, a multi-threaded web server and a PHP interpreter. It is a portable zip, a single folder, with no external dependencies, no system configuration, no services running. It just works out of the box. You can create an installer for your application if you want using tools such as Inno Setup installer.
Interesting! Thanks
Who..... are you replying to?
Click the "Watch" button on the project's Github page and select "Releases only" and you will be notified when there is a Mac release.
First of all thanks for your answer but I am a little disappointed here. None of my questions have been answered in my point of view. Don't get me wrong, I love PHP too but I don't think "Because after all PHP is a much better language than Javascript :)" is a valid argument and response to "Why should I use this instead of Electronjs?" With all respect, it sounds/looks like you don't know the advantages yourself - just my two cents. 
Don't waste your breath folks. From the other crosspost &gt; I'm a content writer at MassMedia Group. I'm just looking for some new ideas that I can write about. And I've just discovered that this topic is quite popular. What can you recommend? So it's going to be another shitty article "Getting started with PHP"
Even standards are optional. I've been coding for about 35 years, and have programmed in a variety of languages. Anytime braces were involved, I've always seen them at the end of the line, not at the start of the next line. PSR (PHP Standards Recommendation) has the opening brace on the next line. I refuse to do that, but much of the PSR already matches what I have been doing for years, so I'm incidentally inline with much of PSR outside of the braces. But again, PSR is a recommendation, not a requirement. You could just as well establish your own distinct standard that appeals to programmers that better match your own style. If I really cared, which I don't, I would establish my own standard just to garner support in the community and potentially affect future IDEs to include the standard as a style option.
You don't provide much of a context - your experience with languages, or desktop frameworks, whether you know Electron at all, what kind of application you want to create, et al.. And expect me to provide you with an elaborate answer. You can use what you like. Go and try both projects. PHP Desktop is as easy as copying your PHP scripts to the www/ directory. No configuration, no hassle, just run it in a minute and see it for yourself if it suits your needs.
Very interesting. Any demos of projects or companies using this? Would be nice to see a comparison vs. Electron.
Look. The point you're missing is that OP's asking me/you/us/companies to sponsor the software. It's fairly normal to ask questions about something you're considering an investment. 
Yeah, I saw no actual arguments aside from using this for an existing code base. That would make me very hesitant to even use it, let alone to sponsor it.
Let me rephrase my answer. It depends on what your needs are. It would help if you provided more information on what kind of application you want to create. Electron for sure has a bigger API, so if I were you I would go check both phpdesktop and Electron APIs to see which one suits your needs. For example Electron can better integrate with system tray icon, or can freely modify native mouse context menu, has built-in desktop notifications, built-in tools for packaging (creating installer). Electron supports various other desktop integrations such as desktop launcher/dock, native file drag and drop, taskbar integration. If it's about renderer functionality then PHP Desktop and Electron are very similar, both use Chromium engine underneath. Electron provides you with a way to compile your javascript to a bytecode. With PHP Desktop you can encode PHP scripts with many of the available PHP encoders, and if you put your javascript in these files then they should be secure. However if you put your JS files in the www/ directory then you can only protect them by obfuscating them with JS minifiers. Electron has a bigger community for sure and the project is supported by a big company with developers working on it full-time. With companies support PHP Desktop could do better. It all depends on your needs. If you want to reuse your PHP code and not rewrite things in Javascript, then that is a great advantage for using PHP Desktop. If you have a web application already written in PHP and want to provide your client with a desktop application with most of the functionality being similar then it makes sense to reuse all that PHP code, and with PHP Desktop it is possible. If you don't know anything about development of apps with Electron or desktop apps in general, but have a good knowledge of creating web apps in PHP then it will be easy for you to create a desktop app in no time, because PHP Desktop doesn't require you to learn any new frameworks or technologies. If you need one of the Electron desktop integration APIs I've mentioned which are missing in PHP Desktop, it is still achievable to do most of it in PHP Desktop, although it is not a built-in functionality. But still many things can be done using external tools/libraries, and these things can be integrated with phpdesktop. These are "desktop development" topics and I help people with these tasks on the PHP Desktop Forum. From my experience PHP Desktop uses less memory than Electron if that is what you care for then it would be a plus.
You have a point here. I just didn't feel like making a long post. I've provided you with another answer, in a thread just beneath your original question.
Typescript is just a better language compared to php. Don't get me wrong, php has become a nice language to use. Typescript is just **nicer**.
I don't see point in posting release announcements like this here. I could understand if it was a stable release or a release candidate, but this is pretty much useless to most of this sub's users.
See one of my other comments (a long one) where I did some comparison. I don't know any big companies using it. It's a convenient GUI tool that allows you to package your PHP web apps to desktop apps.
PHP Desktop is not a professional environment for creating desktop applications with PHP. This is not what PHP was built for. If you want to create professional desktop applications you develop them in C++ and that requires a lot of work and skills. PHP Desktop is to make it easy for you to create a desktop app when you have experience with PHP and don't know much about desktop development. PHP Desktop is a convenient GUI tool for packaging your PHP web apps into desktop apps with little effort.
&gt;Because after all PHP is a much better language than Javascript :) The things you can achieve using PHP vs JS are completely different. Please, guys, stop worrying about what language is better, any of you have done some comparative about each feature of each language, put a value to each of those and compared both languages using quantitative metrics? I assume you not. That kind of subjectivity only damages communities. &amp;#x200B; &gt;Why should I use this instead of Electronjs? I'm faster writing code in PHP than JS, so, if I need to do an mvp really fast, I would choose this instead of electronjs. &amp;#x200B; &gt;What's the advantage of using PHP in a desktop app There is a chance that, using the event-loop in the backend of a desktop app doesn't make too much sense, so, taking all the "event programming" from the backend would do it much easier to develop.
I've answered originall the way I did, because I never thought about comparig phpdesktop to Electron. I never saw phpdesktop as a replacement for that or any other professional tools. I see PHP Desktop as a convenient GUI tool for packaging your web apps into desktop apps. I hope that is clear now.
&gt; If you want to create professional desktop applications you develop them in C++ and that requires a lot of work and skills. C++ is *far* from the only language capable of creating cross-platform applications. IMO this is a lazy way out for unqualified devs to create a shippable product, even more than Electron.
Yep. I’ve only been coding for 12 years and my brace is at the end of the line. I don’t know why but putting it under really rubs me the wrong way. Thanks for the reply. 
When I was writing about "professional desktop application", I thought about creating a complex application such as Google Chrome browser. You can't develop a browser in Javascript, or can you? :)
C# Java Rust Erlang etc....
I don't understand the negativity in comments, "fucks", attempts to make me look like I am icompetent and don't know shit about desktop developmet. In the other thread about new PHP Desktop release, I saw a guy sayig that he saved company $1.5M annually by makig PHP CLI tools and wrapping them with PHP Desktop as a GUI. I saw many people saying they used the tool with success in their companies. The point of PHP Desktop is to convert your PHP web apps to desktop apps with little effort. And the point of this thread is to spend just the 0.01% of these millions your companies saved in costs by using PHP Desktop tool for supporting further development of the project. Thank you :) That's all I have to say. And have a great day!
1) 12 Years Hobby, 3 Years Professional 2) No, I was originally interested in desktop applications and system/network admin. I ended up getting this job after demonstrating a home project to my current employer. I jumped straight out of 7 years at McDonalds into my dev job. 3) Over the years I actually came to prefer web development, probably because it was quicker and easier to achieve results than it would be with desktop programming. Also there are much more "free" learning resources out there for web dev than there are for desktop apps. Whilst becoming more and more acquainted with web development, I absolutely love databases and reporting stats. 4) I would imagine that Graphics Rendering and Machine code are the most challenging fields of programming. - I would imagine that Machine Code/Bare Metal Programming requires a hell of a lot of patience.
Hey that comment wasn’t yours haha. We’re good, I get what you mean and want now :) 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; Transactional means applied from my POV but not visible by others I think OP is fine with their naming. You're mixing in ACID properties which OP never claimed to have. A transaction outside of ACID world might be visible to others but still be a transaction.
This submission has been randomly featured in /r/serendipity, a bot-driven subreddit discovery engine. More here: /r/Serendipity/comments/a2qkph/codeigniter_400alpha3_released_xpost_from_rphp/
How did you manage the lack of ability to write file? I'm trying to deploy a symfony app and being unable to do cache:clear/warmup during build makes it a no go for me. 
"make the project great again" I despise that this is being used in any serious way considering the damage this has done in the US.
We use Bitbucket pipelines to run our tests, build our images and push them to our staging and production env’s
CI4 is stepping up to be quite a nice framework, miles better than CI3 which I still hate having to maintain any existing project using it.
We use Laravel and have our own library based on the work of Shpasser that works out the kinks of no files for the framework, then not using files yourself elsewhere helps with good development practice. Can’t comment on Symphony as haven’t used it, but if you are just after caching, would memcache work instead of files? It’s available on the PHP5.5 runtime but still a WIP for the PHP7.2 runtime. That plus warmup requests should accomplish the same thing.
PhpCompatibility has been more than a wip for quite a while iirc. If you want proper backwards compatibility I’d recommend setting up different test pipelines. Most CI environments offer this and multiple CI environments are free for open source/personal projects.
If they hate then let 'em hate and watch the ~~money~~ comments pile up. Keep up the good work man :)
I am using Travis CI for linting, testing and building and Scrutinizer CI for code quality and finding c ontinuously analyze.
Thanks for suggestions and taking time to write this. I completely agree with you. Personally I didn't use any of them except one PCRE2 regression, so I don't know how the diff for them looks like. If you make a diff for them, we can update the post. What do you think?
As for breaking code, it's another topic. You don't need diffs for that = you don't need to learn that. There are instant upgrades now: https://github.com/rectorphp/rector/blob/master/config/level/php/php73.yml
I use GitLab CI tools for just about everything. I have a different pipeline for dev/prod, and if you can do something within a docker image you can do it via their CI tool.
Rector can also help you in a way.
This is ridiculous. What this has to do with Donald Trump? It wasn't even Trump that invented the slogan, Ronald Reagan and Bill Clinton used it before: [https://en.wikipedia.org/wiki/Make\_America\_Great\_Again](https://en.wikipedia.org/wiki/Make_America_Great_Again) &amp;#x200B;
**Make America Great Again** "Make America Great Again" (abbreviated as MAGA) is a campaign slogan used in American politics that was popularized by Donald Trump in his successful 2016 presidential campaign. Ronald Reagan used the similar slogan "Let's Make America Great Again" in his successful 1980 presidential campaign. Democratic pollster Douglas Schoen has called Trump's use of the phrase as "probably the most resonant campaign slogan in recent history," citing large majorities of Americans who believed the country was in decline. The slogan has become a pop culture phenomenon, seeing widespread use and spawning numerous variants in the arts, entertainment and politics. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I actually wish I had known about this project a couple of years ago when my entire job was writing PHP CLI tools lol. I’ll be giving it a shot over the holidays, thanks for all your work :)
The answer you're looking for is the same answer to any number of similar questions. 'Why would I use Python instead of Node.js?' 'Why would I use Ruby instead of PHP?' 'Why would I use React.js instead of Vue?' &amp;#x200B; Because you're more comfortable with it, because your stack already makes heavy use of it, because your city's post-secondary institution turns out graduates more familiar with it, because that one library that abstracts away a massively complex problem is in THAT language, because you're a Pisces, because a butterfly flapped its wings in China. Why do any of us use language X or framework Y? I guarantee that once you break through the justifications, the reason is 'because I like it more than the alternatives'.
Thanks! And good luck :)
Do you mean *CI tools* (packages) or *CI server* (hardware hostings)? I'll answer in combination: - Travis CI is all you need **for open-source** - tests - PHPUnit, Codeception, Behat... - static analysis - PHPStan - coding standadrs - EasyCodingStandard - automated BC control - Rector - Gitlab CI **for closed-source** with same tooling Both run on YAML config, so it's nice to move between them based on project's needs. 
I've looked at the project and only have a few points (opinions) that would make me really interested: &amp;#x200B; \- A single website where everything comes together. With a LOT more documentation and examples of how easy it is and how it works. Especially an easily navigateable documentation "hub". I'm also very interested in cross platform examples. Maybe even with examples of starting up applications using Laravel or Symfony or even Wordpress? \- Examples of how long running tasks can be executed while hooking them. Like CLI processes and threading and stuff. The docs say you can use any extension that PHP uses, but how does it actually work? Should I execute a script in the background and poll it using jQuery or something? Too many questions that I have to figure out myself. Not that I couldn't, but I don't have the time to do all that. It seems like the differences between a browser app and desktop one should be better documented. \- I have a feeling that most of this project should be about "the standard of the application", and not the application itself. Everything should be straightforward. I don't really care about "how" the project works. I just want to make sure I can easily incorporate it, and that everybody who talks about it isn't doing stupid stuff either. An example on Windows would be that most application data is stored in %APP\_DATA% and most programs are installed in "C:\\Program Files". Straightforward. But how does this project handle that stuff? How much of the stuff should I be changing in applications? What if users want to install it in Program Files? There's no often no write rights there. Not much I can easily read about it without "searching" for it... While I think this is some of the most important stuff when changing from the serverside to the desktop(client)side. \- Also, screenshots and images explaining stuff make it seem much more easy. &amp;#x200B; I'd love to have some answers for all of this. But answering this post directly isn't really what I'm looking for... It's just that the project raises questions and should answer them before I have them. It's just like handling support for software. If there's a question that keeps coming back, don't train more people to answer that question. Change stuff around so the question isn't there in the first place or answer the question before it's asked. (like for example a FAQ). &amp;#x200B; I hope this helps. It's just my 2c. But I think this information is worth more than funding the project with a few digits.
Thanks! :) I used to do lots of PHP programming in the past. I don't do any PHP programming anymore, but I still like to keep a touch with the community. I think the PHP Desktop project is a very nice and useful tool for PHP developers and it would be nice to make it even greater. Javascript developers have their Electron, and I don't think Javascript is so much greater than PHP. You can do fantastic things with PHP.
As a non-us person, were Ronald Reagan's Administration and Bill Clinton's Administration any better? Asking from a 'damage done to the US' stand point?
&gt; This is ridiculous. What this has to do with Donald Trump? Is your head in the sand?
Good points and nice ideas. That's the point of developing the project further, to make it integrating with desktop easy and to be able to accomplish desktop specific programming tasks with as little pain as possible. I have hundreds of ideas, for new features, PHP libraries, JS libraries to make desktop development easier with PHP. You have to put lots of resources, lots of work hours to accomplish this. I can't do this in my free time anymore, so that's the whole point. I think I've already provided people with great tool, so I think I've gained trust and proved that I can provide these things. I am not interested in convincing community and make any statements. If there is a company that uses the tool and sees the value in the project then I want to let them know that I am here available for hire to get even more things done. Any specific details on the work I will be discussing with the interested companies.
Go cry elsewhere. This discussion is about open source software and not about politics.
&gt; Go cry elsewhere. Did I get you get upset Mr Trump supporter?
Welcome to reddit! Keep up your great work! 
Very happy with Travis for tests. And for coding standards if I may plug in [prettyci.com](https://prettyci.com), that allows me to avoid hogging up Travis containers with PHP CodeSniffer (and it's much faster too).
MonologPHPMailer is a \[PHPMailer\]\[link-phpmailer\] handler for \[Monolog\]\[link-monolog\]. It enables you to send logs to emails with PHPMailer. &amp;#x200B; \&gt; This package can log email sent via PHPMailer using Monolog. &amp;#x200B; \&gt; It provides a logger handler class that can take a PHPMailer object already configured to send email messages. &amp;#x200B; \&gt; The handler class object can be passed to Monolog to define the way the information about the messages that are sent is used to generate the log output. &amp;#x200B; It is available on \[GitHub\]\[link-github\], \[Packagist\]\[link-packagist\] and \[PHP Classes\]\[link-phpclasses\]. &amp;#x200B; \[link-monolog\]: [https://github.com/Seldaek/monolog/](https://github.com/Seldaek/monolog/) \[link-phpmailer\]: [https://github.com/PHPMailer/PHPMailer/](https://github.com/PHPMailer/PHPMailer/) \[link-github\]: [https://github.com/filips123/MonologPHPMailer/](https://github.com/filips123/MonologPHPMailer/) \[link-packagist\]: [https://packagist.org/packages/filips123/monolog-phpmailer/](https://packagist.org/packages/filips123/monolog-phpmailer/) \[link-phpclasses\]: [https://www.phpclasses.org/package/10933-PHP-Log-email-sent-via-PHPMailer-using-Monolog.html](https://www.phpclasses.org/package/10933-PHP-Log-email-sent-via-PHPMailer-using-Monolog.html) &amp;#x200B;
This is the meme \[1\] I've created two weeks ago for the World Toilet Day \[2\] :) \[1\] [https://i.imgur.com/nGaPe3C.jpg](https://i.imgur.com/nGaPe3C.jpg) \[2\] [https://en.wikipedia.org/wiki/World\_Toilet\_Day](https://en.wikipedia.org/wiki/World_Toilet_Day) Can we please stop Trump discussions here :) &amp;#x200B;
We use a self hosted instance of Jenkins, with custom scripts per project.
Hello there :)
And please stop future comments saying that I am not serious about the project and it is not worth supporting it, because I've used the "great again" words in the title of this thread. This is ridiculous and out of context. This thread is about PHP Desktop project and has absolutely nothing to do with Trump. I can use whatever english words I like. This reminds me of recent events with programmers removing "slave" words from their source codes, because some other people started analyzing single words and ignored the computer context in which these words have a completely different meaning and have nothing to do with racism or slavery. Oh my god what a pile of bull\*\*\*\*.
Exactly my thought behind it.
Yes, that was the goal. Hope it helps. Any feedback is welcome if you use it.
lol "damage"
Sorry for not mentioning, here I'll try to clarify my question furthermore: So I'm currently using a custom Jenkins instance on AWS, but I'm looking forward for more advanced setups. Lately I've heard that CircleCI is also good for PHP projects (good wasn't elaborated). I'm going for flexibility, ease of use. Private repository.
One question: why do you prefer PHPStan over Phan? What are the benefits?
[https://github.com/gabrielrcouto/php-gui](https://github.com/gabrielrcouto/php-gui)
&gt; I believe the way this package works fits the bill for a compensating transaction Yes it does, but to be fair you should explicitly use "compensating transaction" in most part of your library including its documentation, and also highlight this: `Typically, this is only a workaround which has to be implemented manually and cannot guarantee that the system always ends in a consistent state. The system designer may need to consider what happens if the compensating transaction also fails.`
Do you by any chance use dockerized tools like Exakat for example?
Quoting Wikipedia &gt; Transactions ensure that data-oriented resources are not permanently updated unless all operations within the transactional unit complete successfully. I understand "permanently updated" as side effects applied, regardless of their reversibility. Put more simply, you cannot have a rollback triggered after a commit for the same transaction, in regular transaction processing. A transaction ends either with a commit or a rollback.
So when people worry about reducing the memory footprint of Electron apps, your first thought is that we should add a web server on top?
What damage? I haven’t notice anything actually change for the better or worse.
I've had excellent results with CircleCI. We used to be built on top of Travis but we had lots of reliability issues (no jobs being picked off the queue), speed issues and more annoyingly there would be no visibility of why it wasn't working. We've experienced greater flexibility (building off whatever docker image you want) and speed (although anecdotally I feel they've got slower lately) by moving to Circle. We also found for our use case that they ended up cheaper. Would very much recommend
Thanks, I was especially curious about opinions on CircleCI, I'll look into at in more details
Username checks out
Symfony 4. It's modular so you can pick only what you need and comes with a built in web server for development environment.
No we Run everything directly on the server, it can be a bit tricky with different versions of php, but our environments are similar enough that we don't need it.
one question: why?
Github CI
I really like the idea. Are you supposed to valid the architecture in an unit test ?
You are supposed to set this up as a part of your testsuite, yes. It helps you validate your architectural constraints. If say an intern now implements a feature in your business logic layer and depends on something from the IO layer directly - the CI environment will start ringing alarm bells
I'm attempting to use simpleSAMLphp for SSO service for a PHP back end. It works pretty well until I plug my vue back-end into it using axios, in which case it seems completely unable to establish sessions. I'm pretty new to SSO and PHP in general, does anyone have any idea what threads I might pursue here?
 CREATE #temptable; INSERT into #temptable; DROP #temptable; Does that create tables on-disk or in ram?
I see lots of old code in this repo, with little in terms of actual implementation or direction. Glad you're taking on an interesting project, but will not fund an idea. If you want to drum up some interest and get more involved, I'd suggest focusing on making a good proof of concept, putting together working code, have some screenshots, tutorials, articles and videos. Then your project might gain some interest enough to acquire funding.
i&lt;form action="mail.php"&gt; i mean if i type my website/mail.php so they code get executed how do i prevent all this so its cant spammed and secure it
Because WordPress.
Or maybe somewhere in line with static analysis tools, like phpcs, psalm, phan, mess detector, etc. 
I'd go here instead. [https://www.reddit.com/r/phphelp](https://www.reddit.com/r/phphelp). This subreddit is not for help.
I'll check it out, thanks.
This is a pretty cool idea. Thanks. Will check it out!
I think it's a matter of personal preference. I'm also a friend of Ondra, the PHPStan author, we're from the same city and PHP community, so it I hear more about it :). I also use php-parser, that PHPStan is based on and I also use PHPStan as partial type analyzer in Rector. Works quite good. If you want some objective reason, for me it's community of user testing: - https://packagist.org/packages/phpstan/phpstan - 2,3 mil downloads - https://packagist.org/packages/phan/phan - 200 k downloads
What do you mean? Wordpress is not supported at PHP 7.1?
This project initially was spun out of the codebase of mamuz/php-dependency-analysis (phpda for short) in which you can also setup rules similar to the ones in PHPArch. phpda will then generate a dependency graph and mark invalid / incorrect dependencies as red arrows. PHPArch is the same idea but in a more test-framework friendly way.
Wasn't aware of \`autoload-dev\` - I was even thinking \*"This feels wrong"\* when adding it to the autoloader. Thanks for showing me a better way.
So in other words nothing is worse since our president took office and you’re just delusional. Got it.
What article are you quoting in Wikipedia? Are you picking one specific transaction (i.e. definition which fits your argumentation? A transaction can be a process where "permanently updated" doesn't fit at all e.g. simply something in the real world (e.g. buying at a real shop). Rolling back such a transaction requires a compensation transaction. OP is really fine with their naming.
This looks very promising, thank you! I'm curious to see how your tool will develop alongside [deptrac](https://github.com/sensiolabs-de/deptrac) and how you will influence each other :)
ty &lt;3
I guess saying something this generalised is "better" in any language-specific sub is gunna get downvoted. But after doing PHP exclusively for 19 years (and being very happy with it), and finally learning JS+TS properly this year... I agree with you, at least in that I *prefer* it. I guess it's easier to argue what you prefer than what something empirically "is". 
Thanks for pointing deptrac out to me. For some reason this was not on my radar.
Good lord. I didn't realize modern politics co-opted the use of two words together, especially in a sub about **PHP.**
&gt; If say an intern now implements a feature in your business logic layer and depends on something from the IO layer directly - the CI environment will start ringing alarm bells I solve this problem by making sure the IO layer is not available at all in the business layer.
I probably wouldn't use this to convert web apps into desktop apps but it looks like an awesome way to collect and control my CLI scripts! Can't wait to see where this goes.
Might want to use arrays as include to prevent bugs attributable to mutability. This is at a macro level how configs work in many systems. file1.php &lt;?php return [ ‘foo’ =&gt; 123 ]; file2.php &lt;?php $data = include ‘file1.php’; echo $data[‘foo’]; 
Depends what you’re using it for. It’s not very dynamic, but it’s useful for things like shared settings.
No, it certainly is compatible with PHP 7+. WordPress just has a huge legacy customer base. You’re missing a large market share if you don’t support older versions of PHP as well.
https://github.com/sensiolabs-de/deptrac anybody? :D
You sure played with fire saying that on a PHP sub mate haha For the record I do agree with you, but it was sure to be a controversial thing over here.
Where should I prqctice php.Any links to good projects??
Is [https://www.phpdoc.org/](https://www.phpdoc.org/) what you're looking for? Not quite a wiki, but a static site generator.
Not a wiki, but there are several tools for generating websites from you docblocks. - [phpDox](http://phpdox.de/) - [ApiGen](https://github.com/apigen/apigen) - [phpDocumentor](https://phpdoc.org/) - [sami](https://github.com/FriendsOfPHP/Sami) - abandoned And non of them are _great_. You can find other software that isn't necessarily designed for PHP but can work with docblocks (such as [Doxygen](http://www.doxygen.nl/)). If you don't like any of those, search for [documentation site generator](https://duckduckgo.com/?q=documentation+site+generator) or similar queries. 
I would say that yes that is bad practice. If it is something stored forever like a config maybe its ok. But the data in your example does not appear to be config..... I would store it in a db or in a text file. I dont really see how security would be a problem...
Maybe try using a database that can store the data, if it doesn’t change frequently you could retrieve it and cache the results in a JSON file? If it never changes at all then who cares, retrieve it however you want. 
Yeah, explicitly returning data from the file rather than relying on variable scope leaking is a much better way to do this. 
To provide a counter point to some of the others; yes it can be advantageous: 1. I've found that, for configuration files for a PHP app, PHP as the config format is excellent. You can sometimes even go as far as using proper classes/instances and you'll get some nice IDE auto completion to boot. 2. I have _also_ used PHP for general data file serialization. The major downside to doing this is, of course, interoperability with other systems (as compared to something like JSON/YAML/etc). The reason I think there are reasons to consider it in **both** cases is that the PHP will get _opcached_. When you compare loading the data/config via opcache'd php code vs. file loaded and parsed json/yml/etc it's absolutely no contest. I've even written [an article and test script comparing various caching setups](https://jrm.cc/blog/caching-data-structures-in-php/).
yeah, don't do that. 
Interesting. Seems this would be much lighter since it doesn't need a Chrome webview.
The phrase existed before the current US administration. It's you turning it into a political statement.
It's OK if: * The data is only ever edited by hand by trusted administrator, and is **not** written by some other program or person. * You'll only use it in a few places and you'll know exactly what they are Assuming that those sound good, here are some possible improvements.... First off, I would change `myinfo.php` to remove (or at least minimize) the "side effects" it might have. A simple way to do this is to put everything into a function. &lt;?php function getMyInfo(){ return [ "name" =&gt; "John", "age" =&gt; 23, "city" =&gt; "perth" ]; } And &lt;?php require_once("data/myinfo.php"); $infodata = getMyInfo(); echo $infodata['name']; 
Go for it! Most people save settings like this but in arrays or constants. My first database was txt and I learned a lot. If you want real file based database use sqlite. By the way: If you do &lt;?php return \['bla' =&gt; 'bla'\]; ?&gt; you could include it like this: &lt;?php $blaArr = include 'bla.php'; ?&gt;
I think there are some issues here to think about. &amp;#x200B; **PWA Support in Windows 10** Windows 10 has added support for PWAs which is a big stab into traditional methods of using other languages to serve web UI as a desktop client. [https://developer.microsoft.com/en-us/windows/pwa](https://developer.microsoft.com/en-us/windows/pwa). With Apple also taking steps to making this work, and the fact every language has some type of transcompiler to JavaScript including PHP, its hard to reason that we should not use JavaScript. &amp;#x200B; **JPHP** [http://jphp.develnext.org/](http://jphp.develnext.org/) This has made a lot of progress. While you cannot use 100% PHP code, its very close. The only issue is that you cannot interact with the JVM directly and need extensions written. This is still MILES better than written c/c++ extensions for PHP, but still a bottleneck. You can write the web server, UI, even can use Lib-GDX to start a game in PHP. &amp;#x200B; **Transition To Desktop Is Hard** There are things beyond using PHP in a web app. Standard tooling like MySQL, Redis, Gearman, etc all get tacked onto what will need to be added to a desktop app. I started a project called "Relative Deployment" with a different, idea and what was I'd need a lot of different software besides PHP, and needed a way to run them packaged up and most importantly not use ports already taken. [https://github.com/joseph-montanez/Relative-Deployment](https://github.com/joseph-montanez/Relative-Deployment). However, it just wasn't worth it.
from the first challange which is dumb this suggestion exactly the opposite of the OP's request
Thanks for the input, I'll give PHPStan a try. It looks like it's worth it
You can actually just do &lt;?php return [ "age" =&gt; 23, ... ]; In the datafile and &lt;?php $data = require('datafile.php'); 
Building a website to display your projects should do the tricks. 60% of hiring managers are non technical guys.But if the hiring managers are technical guys then it will be nice to work them through your projects steps by steps.I am currently looking for jobs and after googling and researching I can see that hosting your own projects rocks.During the interview you can challenge people that ask you to write functions etc that real world projects is not two hours interview.Pointing them to your live projects will get you the job.This may sound crazy but it is one of the [keys.One](https://keys.One) company said that people that answered questions in stackoverflow will be considered for second interview and another company said that their "candidates" are real world apps or blogging is one ticket to get jobs with them. Hosting your website may cost you less them $100 while you can get six figure jobs.Cheers.
It's ok as long as you are not storing user input, or at least using something like var_export to generate the php file 
🤔 Do you mean [GitHub Actions](https://developer.github.com/actions/)?
https://en.wikipedia.org/wiki/Transaction_processing
I know, but I recommend against it. 1. You can still cause scope interference. 1. It puts up barriers to a "proper" autoading system
Thanks for your answer :). I'm not doing anything besides the things done by the framework : it's compiling the service container, compiling twig templates, etc. It's usually done in the cache:warmup command done after composer install. I faced an issue where during build in GAE the ENV variables are not available, so it was failing. Thanks for the pointer to the GaeSupport by shpasser, I'm seeing if I can adapt things from there. 
Thanks for sharing your ideas. I posted it here because the CI team needs a lot of help with bug fixing and errors reporting. That's the main reason why I shared the article here. It's true that it's not a stable release, but they need more contributors.
I use emacs tramp to edit file through SSH, it seems for FTP there is ange-ftp https://www.emacswiki.org/emacs/AngeFtp Needless to say if you could put an SSH you could use emacs tramps or use sshfs fuse and use any IDE of your liking.
ApiGen looks pretty dead. I remember me using it a few years back, was super simple and easy.
Anything "modern" is going to want to be able to do things like parse the entire directory structure to work out things like autocomplete and static analysis. You'd end up with a local copy anyway. Use an WinSCP editor with notepad++ set as the editor.
Tying login session to IP address is really not a good approach. Some users may have frequent IP changes - on some mobile networks they are often changing automatically, and some users moving around a lot. At the same time many users may have the same external IP address (office/school) and these are the places where gaining physical access to someones computer is most likely.
How does this differ from writing your own custom sniffs in phpstan to disallow Foo\ from accessing Bar\ ?
I personally use Eclipse, PHPStorm's still a good choice too, but it's not open source software and you have to pay, VSCode has a good PHP support, but I doubt it's feature-complete compared with the others (and in my opinion, VSCode is not an IDE, it's a very powerful editor).
PhpStorm all the way. Worth every cent you pay for it.
"Modern" and "remote editing" don't really go together. As /u/Sentient_Blade said, basically everything that makes a modern IDE a modern IDE relies on being able to work with local files. Can you imagine having your IDE constantly index an entire project over FTP? One of the projects I work on has a similar setup - What I suggest you do is use PhpStorm (or your preference, but it's generally considered the best PHP IDE these days), clone the project locally for editing (to enable the IDE to actually work properly), but also set your IDE to automatically upload your changes to the FTP server (`Tools &gt; Deployment` in PhpStorm). This enables you to work on the code locally with all the benefits of an IDE that can actually index the code you're editing, but (more-or-less) functions the same way it would as if you were directly working over FTP. 
I agree. I'm also an Eclipse user and it's very feature complete. Have you tried https://github.com/eclipselabs/lsp4e-php ?
In my experience, phpstorm sucks. No xdebug support and it's as slow a eclipse. 
PHPStorm has xdebug support
&gt;one question: why? He's already answered that in-depth further up
Goodluck making it work. They say they have xdebug support, but when you try to do it, it's not possible, and if contact support, they also say it's not supported. So, no, they don't have xdebug support 
&gt;CI4 is stepping up to be quite a nice framework, miles better than CI3 This I can agree with. Sadly it's 5years too late to the party.
&gt;We use Bitbucket pipelines to run our tests, build our images and push them to our staging and production env’s I never used Bitbucket before in that way, I'm not even sure it had those features when I switched to Gitlab. Do you have any insight into what it's doing? Is it spinning up VM's or Docker containers to run the tests for you? How is it pushing the code to the servers?
Disappointed, that this is not a tinder for PHP-Devs :(
&gt;No xdebug support and it's as slow a eclipse It has xdebug support. However, yes it's as slow as eclipse but its the same for all those Java-based IDE's, PHPStorm, Netbeans and Eclipse. All of them have suspiciously the same sort of memory usage.
You're doing something wrong. It works really well. I use phpstorm + xdebug pretty much constantly during a working day.
&gt;I would store it in a db That the correct answer in this case. It's simple user data you're holding and I can't see where there would be any advantage in hard-coding that into the code. By doing so you're also keeping those details (personal details in this case) unencrypted in your source control which could lead to GDPR violations and fines.
That’s correct. They only released pipelines a year or so ago and are still improving it every month. What you do with pipelines (perhaps it’s the same on other CI tools but I only know Pipelines) is that you define steps that run per branch/tag/pr. Each step a basically a docker container spinning up and running the commands that you tell it to so. Pipelines will monitor the output, mark the step as failed if there is a non-zero return code and collect test reports (junit in our case). In terms of deployment, this is slightly different per project. All projects run the standard test suites (unit &amp; integration), code style and security checks on all branches. The master branch (code can only go to master via a pr with at least x approvals) also runs the deployment steps. In some cases this means simply running a simple script that uploads the files to a production server, sometimes automated via a tool like Ansible or Laravel Envoyer. Our more special projects build a docker image, push that to our registry and use kubectl/rancher-cli to (roll) update the Kubernetes deployment to the newest version of the image. 
Comment of the week, at the very least.
* 1.8.0
I've never had issues making it work on any of my setups.
No, I'm still using PDT, but in nightly (for many years now). Going to LSP seems a future-proof thing to do, but I don't really have time to test new stuff right now, too much work to do :)
PHPStorm is the go-to PHP IDE. Nothing else really compares. 
Never takes me more than 3 minutes to get it working so I am pretty sure that you are doing something terribly wrong :D
I know you said "not talking about... other framework themed communities", but the folks on the Zend Framework slack are very up on PHP and other tech issues. There's a #random channel just for these sorts of discussions.
I thought I’m in a different universe. Thanks!
Changelog &gt; * Changed post-package-install / post-package-update event to be fired after the lock file has been updated as opposed to before &gt; * Added support for removing packages using a wildcard with the remove command, e.g. composer remove foo/* &gt; * Added chat to the list of support channels you can list in composer.json &gt; * Added signal handling on require command to restore the composer.json in case of abort &gt; * Added --ignore to outdated command to pass one or more packages that you do not want to be listed &gt; * Added --no-dev to check-platform-reqs command to skip dev requirements even if they are installed &gt; * Added support for running plugin commands from sub-directories within a project much like other Composer commands &gt; * Added support for running Composer via phpdbg &gt; * Added lib-imagick platform package &gt; * Fixed validate command always checking for disabled checks when used with --strict
Awesome, I figured it would be a combo of sorts
R/phphelp
Let me google that for you: google.com/search?q=server+requested+authentication+method+unknown+to+the+client 
I have googled it but the instructions were a bit too vague for me unfortunately. It says to change *caching_sha2_password to mysql_native_password but I can't work out how.
PHP currently doesn't support the newer auth method. If you have access to the mysql setup you can change it to the 'old' method. &amp;#x200B; [https://github.com/phpmyadmin/phpmyadmin/issues/14220#issuecomment-388174849](https://github.com/phpmyadmin/phpmyadmin/issues/14220#issuecomment-388174849)
Cheers! Disclaimer: I know fuck all about this stuff as I'm on a humanities conversion course so although I've done my research, the answers online make little sense to me. any chance of elaborating a tiny bit?
Sure, since you are using xampp 7.2.12 it has not been updated to the latest version. What are you trying to achieve with mysql? If the idea is just to connect a Mysql server up then I would suggest laracast (laravel) as a source.
1. since about 10.30, before that I was in a meeting &amp; then procrastinating 2. no, web apps didn't exist when i was a kid 3. it's mostly easy 4. I dunno, OS stuff.
We need to connect a products/services db from mysql using xampp onto a website we are doing for a fake company. Unfortunately I have no idea what laracast/laravel means...
TIL. I didn't know you could return data from an include/require, nice!
xdebug is definitely supported. You have to ensure your PHP is built with xdebug support. It works so well I can spin up a lock docker and debug inside the container. Killer feature for me.
Funny how you say *If you don't know what composer is then you probably don't need a library for architectural testing.* but on the other hand you don't even know about `autoload-dev`! Maybe think about those phrases next time ;-) No offense thought, I like that project. Keep up the good work.
Well... You have a point. I should turn down the snark in the readme file.
&gt; and if contact support, they also say it's not supported Yeah, that's a load of bullshit.
I use xdebug with phpstorm and had no issues what so ever.
&gt; Changed post-package-install / post-package-update event to be fired after the lock file has been updated as opposed to before Looks like a breaking change to me...
I've just updated the project's main page Introduction text to make it very clear of what PHP Desktop is and what it is not meant to be: [https://github.com/cztomczak/phpdesktop#introduction](https://github.com/cztomczak/phpdesktop#introduction) &amp;#x200B; And I've also replaced the "great again" sentence with "greater than it is today" just to make happy all those hating me for being Trump supporter!
PHPStorm is the best thing out there (I preffer VIM, but it's a personal choice. I used PHPStorm in the past for some months and have used some others IDE's, and the best experience I had was with PHPStorm)
And that's how you open hell's gate.
&gt; and if contact support, they also say it's not supported. So, I could almost understand you just making false statements like "PhpStorm doesn't have xdebug support" out of pure ignorance. But now you're just flat out lying. 
To be more precise it is more. It is JS + PHP!
&gt; "PHP 5.3.8 with APC 3.1.9" Please redo it with latest php 7.x and put a BIG disclaimer on top of your old article! 
I'm quite sure there is nothing that makes this specific to PHP or even relate to it. What is your reason for sharing this with us?
PSA: although the POST function is prefixed with async, there are awaits placed in the code, making it synchronous. Please don't use this code expecting it to perform synchronous HTTP requests 
What exactly does tool do? I didn't get it from the post. It's something like PHP CS Fixer just with different syntax? I ask, be because the `in_array` in README.md is already covered by coding standards. And they don't bother you, they fix it for you :)
Yes, they do. It doesn’t require anything more than a couple firing neurons to be able to use it. Guess that’s where the problem is.
Glad to help! There is small intro PHPStan I share with people: https://www.tomasvotruba.cz/blog/2017/01/28/why-I-switched-scrutinizer-for-phpstan-and-you-should-too/#2-add-phpstan-dependency
I see. That could be place for startup :)
The first gif explains 0 to me. It goes way too fast to see anything and I have no idea what I'm looking at. On top of that, what's the point of this tool? I don't get it.
Fun fact, PHP in webserver context does _not_ support MVC.
Curious why/how that would be a BC? I can't think of any reason it would be. Those events can't access/change the lock file anyways. So nothing changed, right? Looking for a bug/pr for this change and it looks like it actually fixes a problem. https://github.com/composer/composer/issues/7765 Also seems like anything that breaks is because it was accessing the lock file in an unsupported/unofficial way but is easy enough to fix by simply commiting the lock file manually with the same unsupported/unofficial way it was modified in the first place. I still can't think of any reason why an event would need to modify the lock file anyways. Especially a *post*-install type event.
Yeah you are true, But it really helps PHP developer to understand/learn how to use that new Javascript fetch api with PHP. Many PHP developers struggles to get this done. So i just tried to spread.
Yeah. You are True.
Funnily enough, this was one of the first posts I've read in the morning ;)
I'm not sure if this really helps a developer understand how to use fetch as it was intended, because you abstracted it away and made it synchronous, while fetch is using the asynchronous concept of promises. I also still wonder why you would target a PHP forum, instead of JavaScript or webdev. In web development, PHP is almost without exception (Titanium comes to mind) a backend language. If the goal is to quickly teach developers how to programmatically access their backend, I suggest writing up a tutorial using https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise as references. That is, if you think those references are too difficult to grok at-once.
It appears load code, if(match(pattern)) { echo 'message'; }
[removed]
I must've put a decimal point in the wrong place or something. ----, I always do that. I always mess up some mundane detail.
To be honest, I would almost always recommend that anyone looking to do any video editing uses the FFMPEG library through shell_exec, the performance / latency is going to be better, it's more extensible (you're not limited by the API) and it's free.
Wow, cool ;) 
Hi, what exactly do you want to do as a developer? You have many options. You probably are aware of **Symfony demo** - https://github.com/symfony/demo I work with Symfony with over 5 years, but I still learn something new in there. Javier is doing great job keeping it up to date. It's also one of best source, where you can **learn about Symfony bleeding edge fetures** first used in practical code. If you'd like to learn more about CLI and DependencyInjection, you can check my Symplify project: https://github.com/symplify/symplify - monorepo with 9 projects like EasyCodingStandard, Statie, ChangelogLinker or MonorepoBuilder Especially **Compiler Passes** in PackageBuilder: https://github.com/Symplify/Symplify/tree/master/packages/PackageBuilder
Easy, just install XDebug on that piece of paper. After that throw the piece of paper in the ^^^cgi\-bin amirite?
&gt; https://github.com/symplify/symplify thanks, thanks, you give me something to look into. I will look into the symplify repo . Thanks for sharing. 
Hey, do you maybe have links to API projects that are built with Symfony. My only resource is SymfonyCasts atm. 
They're like "oh just take this free download, we will talk money later." price can not be found and that is kinda important to me. Im assuming its way overpriced for them to be using this archaic tactic. &amp;#x200B; How much will this product cost please?
https://www.jetbrains.com/phpstorm/buy/#edition=personal
[Dude](https://www.jetbrains.com/phpstorm/buy/#edition=personal)
If you didn't want to click the link, it's $8.90 a month or $89 a year
Don’t know how you missed the massive “Buy” button but here you go: https://www.jetbrains.com/phpstorm/buy £149/user/year or £14.90/user/month *for commercial* £69/user/year or £6.90/user/month for personal use. If you’re not expecting to be reimbursed by your company for it, get this one. If they’re paying, get the other one.
Hmmm. None of this was on the product page from google search. Also another user just commebted with dude link and it says $89 for it. Another link in comment says $198 You are saying its an annual fee??? Ok ive seen enough. Im moving on. Thab3ks everyone
Just searched for Phan vs PHPStan :)
Hmmm. None of this was on the product page from google search. Also another user just commebted with dude link and it says $89 for it. Another link in comment says $198 You are saying its an annual fee??? Ok ive seen enough. Im moving on. Thanks everyone
Pay once or annually? Another link posted shows monthly and annual subscription prices.
An annual fee for updates. After your subscription expires you can still use phpstorm, but won’t receive updates. €89 per year, second year €71 and third year and onwards €53. That is not a whole lot of money if you are the least bit serious in your php development.
I see :) Btw, I also tried Psalm before: https://github.com/Symplify/Symplify/pull/573/files, but it was 95 % similar, so I removed it after ~4 months. 5 % was not worth the extra maintenance. If I were you, I'd install all 3 of them - just to one directory to check 20-30 files, use them for a week and then decide which to keep. That will give you far more informations then reading opinions.
Hey, I don't do API myself, but in Symfony circles, there is a very famous **API platform**: https://github.com/api-platform/api-platform It was created by Kévin Dunglas, I love reading his blog. Definitely check it → https://dunglas.fr/ 
Glad to help! Let me know if you need something more advanced. I have few more projects :)
Interesting idea. Do you have some open-source project on Github that has this in CI? I'd love to see some real example (that I'll understand :D)
Free for a year if you’re a student, or free for a limited time if you use the EAP edition. I used the EAP, then got a discount for the first year at the second year price.
Only with lunatic leftists.
We'll put the emphasis on the crazy part of it. I'm a pretty liberal guy myself, and I find this conflation completely ridiculous. 
Nothing is worse. At this same point in his presidency, Obama had greatly accelerated both the conflicts in Iraq and Afghanistan, had a fiscal collapse, and had almost doubled the national debt.
I know **first-hand** how extremely and exceptionally negative tons of people on /r/PHP can be. Don't let them get to you! If some of them stalk you around the entire internet and create tons of sock puppets that attack you here, just realize that the admins might ban you like they did others, but realize also that you're not alone and in good company!
That's neat!
To make PHP GUIs great again! 
There are "buy" links everywhere, first hit on Google when searching "PHPStorm pricing" or "Buy PHPStorm" gives you the result you need. I'm not sure what more you want. There are companies that really hide their pricing but JetBrains isn't one of them. You can also use the Early Access Program (EAP) version, which is free but comes at a risk of potential bugs/stability issues. I have a license but I've been using the EAP version without issues for a long time (years). If it even becomes unusable I can always fall back to the regular version. 
And totally worth $8.90 a month. Only thing that comes close is a VSCode with a bunch of plugins.
Yes, this is what I'm doing now (except Psalm is bugging). So far I still like Phan a bit more (faster), but PHPStan has a more convenient config, I'd say
worth it.
So, [this xkcd](https://xkcd.com/1172/) basically? I don't disagree, it sounds like a very weird hypothetical that is still plausible to wait for after the lock. After all, sounds like it was confirmed the lock is updated after each package install which means the only thing changing between lockfile update is information that should be available regardless. But it's still theoretically breaking a possible workflow somewhere...
Neat. I feel you already do my comments before I write them :D Let me know how did you decide in the end and why.
&gt; But it's still theoretically breaking a possible workflow somewhere... Indeed. Just got give it a while for that person to come forward so the XKCD can come into play.
Will keep you posted. I'll wait for the bug to be fixed in Psalm. Do you have any areas in which you're specifically interested?
Looks like he's just trying to find anything to complain about. The trial will prove its worth in time saved in producing a quality product.
For extra snark : http://lmgtfy.com/?q=server+requested+authentication+method+unknown+to+the+client
The question was about technical implementation. Trying to use the example details to derail into a conversation about data security is off topic.
It looks to me like you can put business rules / coding guidelines in something like PHP CS Fixer. For example, you could create a rule with something like "var\_dump is not allowed". If you put that in a pre-commit hook, you would never be allowed to commit code with var\_dump in it.
So, this is basically `find . -exec grep foo {} \; -print 2&gt;/dev/null`
When you completely (100÷) understand why you shouldn't do that, you can break that rule and use it. Because **then** you comprehend the weird edge-case when it's better to use $badPractice instead of $goodPractice. The fact that you ask this question, means you don't (yet), and should therefor stick to the $goodPractice. tl;dr Stick to "the rules". When you know enough about code (and business!), you can break those rules, because you are then fully aware of the consequences of breaking them.
Hey, beatniak, just a quick heads-up: **therefor** is actually spelled **therefore**. You can remember it by **ends with -fore**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
hEy, BeAtNiAk, JuSt a qUiCk hEaDs-uP: **tHeReFoR** Is aCtUaLlY SpElLeD **ThErEfOrE**. yOu cAn rEmEmBeR It bY **EnDs wItH -fOrE**. hAvE A NiCe dAy! ^^^^tHe ^^^^pArEnT ^^^^CoMmEnTeR ^^^^CaN ^^^^RePlY ^^^^WiTh ^^^^'DeLeTe' ^^^^To ^^^^dElEtE ^^^^ThIs ^^^^cOmMeNt.
Yes, you can certainly do it this way, in fact FFMPEG is a core component in the backend. What this API does is simplify the setup and development process and also provides the hosting and infrastructure so you can potentially create 1000s of videos concurrently. Like any SaaS offering you could build it yourself but need to balance the costs of building/maintaining vs renting.
I think I should learn it and start using it?
Two questions: 1. What role are you looking for exactly? You say you're an intermediate dev, but you mentioned junior roles. 2. Why Symfony specifically? You can learn from pretty much any project on GitHub that's popular and has good test coverage. It doesn't even have to be created with PHP.
&gt; PHPStorm pricing I searched for just PHPStorm and the first link had no pricing at all, and seems like the product page. I would tell everyone to calm down, except that has never worked in the history of telling people to calm down. :-)
https://github.com/reddit-archive/reddit/wiki/API#rules
Coda 2 for remote editing but you won't get any real IDE features like auto complete or error detection.
It is insane to try to manage a non-tiny project and dependencies without it. Plus, it has a nifty autoloader bundled with it.
Are you making [more than 60 requests per minute](https://github.com/reddit-archive/reddit/wiki/API#rules)? &amp;#x200B;
Usually APIs will return a specific error code when you exceed rate limits, log your response codes and error messages and there’s a good chance you’ll see the issue.
Search stack overflow
Are you using it somewhere? Could you share link on Github?
Just final summary and what were pain points. I try to solve them for my CLI apps
We've finally got a president who cares about the little guy with no money, and all everyone does is straw-man, caricature, and vilify him 24-hours-a-day, for what? For lowering our taxes, taking government fees away, and trying to save people's jobs? Yes, it does upset people when you attack him. It's ignorant and uneducated to expect otherwise. Questioning if you made someone upset seems condescending and belittling in my opinion. You aren't looking for intelligent discourse, you're looking for someone to insult.
I'm going to start using it to watch for debug code that I don't want in git. We'll see how it goes. Sorry, no public github.
I'll have to keep watching where this goes! I've been playing with Node on Windows and Mac for awhile but if I could use a PHP back-end on the app instead I'd be in Heaven. (I technically have a company but it only exists on payer right now and I keep it alive by feeding it from my paycheck working for other people, lol, someday though, someday)
bolt.cm if you are looking to take apart a CMS.
I see what your saying, thank you for your feedback. :)
thanks will look into it. 
Composer has basically changed the way we build things. Its a constant and necessary part of almost all modern PHP development. If you are not using it then your daily development experience is different from the vast majority of PHP programmers. That is a bad thing just for your own personal development.
**1)** 14 years professionally. 19 years including study. **2)** I wanted to build games like most kids who want to be programmers. As I got older I thought i'd work in defence or aerospace. But I just fell into webdev 14 years ago and still here. **3)** I like that everything has moved to the web. Now I can work in almost any field using web technologies. I can even work on embedded systems using nodejs. Web tech has just taken over. **4)** Most programming is easy, its the stuff around the programming that is hard ie managing teams, requirements, budget etc. The only truly hard programming is when you are inventing something new. I don't mean a new business model. When Zuckerberg "invented" facebook he didn't invent anything new. He just cobbled together existing components. But when you actually build something that you didn't even know for sure was possible, when you break new ground, that is hard. There is no StackOverflow to help you when nobody has done the thing before.
&gt; Curious why/how that would be a BC? I can't think of any reason it would be. Speculation: It could have an impact for rollback on failure.
I firmly believe that the JS community made a massive mistake by dumping Bower and using NPM for both client and server code. The problem is on the browser there is an imperative to have a smaller package size. Because the client has to download it, you don't want to include massive utility libraries when you only want a few functions. That's why NPM ends up with all of these little bullshit packages that do a single trivial thing. Meanwhile in Composer land, its only server side, so we don't care about the size of our utility libraries. No matter how big our source directory is the server will only run what it needs. Client and Server package management are vastly different things and having a single tool for both never made much sense to me. Just another example of why the Node communities "same code environment for client and server" mantra doesn't make sense in the real world. I have to admit though the trend towards "tree shaking" in JS has removed a lot of these issues. However there are still a multitude of micro packages that are going to remain legacy for a very long time.
So much for Superman 3…
PHPStorm is top notch.. been using it for years!!!
As a laravel developer this has been one of the biggest "missing features" in laravel. Almost every application I've developed recently has required a notifications functionality that requires websockets. I've been using pusher up until now but it has problems. One of which is a reliance on a third party service for something that really should be baked in. I was actually looking into creating separate [socket.io](https://socket.io) servers. This library would be a nice and quick alternative. However, I see this solution is based on Ratchet. What do we think of doing this in PHP with Ratchet? I always assumed the reason this wasn't already in laravel is that PHP just isn't good at long lasting processes. Is Ratchet ready for large production systems? If so I am very excited to try this out.
IMHO PHP is, like you said, simply not very good at long lasting processes. Don't get me wrong, I like the language, but these things always come off to me as shoehorning stuff in to fit the developer instead of the developer adapting and choosing the right tool for the job. My two cents.
PHP is just as capable of managing sockets as any other language. PHP developers not normally concerning themselves or being aware of how PHP uses/recovers memory is the only barrier to managing persistent threads. Wrapping ratchet in yet another framework is just layering dependencies, which is not for me.
Being just as valuable doesn't mean it's good at it. You can put screws in with a hammer if you like it, it's still not the right tool got the job. It can work for sure, but as a whole it's not a language that was particularly thought out to make your life easy in terms of memory management.
Just use a simple node.js socket.io server connected to redis, then php just adds to a list/publishes the notifications. Got some 10k concurrent connections to a setup like that for more than a year.
You cant use polling for notifications? Email has worked that way forever and its fine....
So it' still requires 4g+ memory and 20minutes+ when adding/updating a single library in an old symfony stack. :/
/r/phphelp
Oh, thank you. 
thank you is too much just delete your off topic post from this community
Relevant: https://media.giphy.com/media/9mWpvIW3nPR96/200.gif
To be fair javascript didn't use to be good at long lasting processes (or at anything beyond manipulating web pages in the browser), but now thanks to projects like Node.js you it's almost become standard practice to make long lasting processes with JS. In the PHP world we now have projects like Ratchet (used by this websocket server), ReactPHP or Swoole (the most promising IMHO) that aim for the same thing, and Rasmus Lerdorf said a few months ago that improving PHP in long lasting process scenarios would be one of the priorities for PHP 8, so I think now is really a good time to start tinkering with the idea. But I see what you mean. I believe PHP will get there some day, but If I was asked to build a websocket server today (and I was a few months ago) I'd use Node.js (and I did).
This isn't exactly the case. The function is still asynchronous, but it only resolves after the JSON data is parsed. It's as asynchronous as `await (await fetch(...)).json()`...
Look, I get it, programming is hard. All these characters and stuff. But maybe you should start thinking about a different career, before shitposting on reddit?
You're looking for /r/PHPhelp. Please see the sidebar -&gt;
Example where psalm is bugging?
I have been using polling in a chat application and no it doesn’t work well and requires much more resources than a websocket. 
company where i work has paying `$$$` for `PHPExeO*****` to bundle php application into single `.exe` so I'm glad you create this project 
I’m now setting this up. So much simpler and not dependent on a third party. 
I'm trying to get more up to code with PHP 7 and am looking for a really good break down on exactly what a namespace is and how to use it in PHP. every thing i've seen so far doesn't really explain it, they just show the code and expect me to fully understand it. I'm completely lost with how to call a function (if that's even what you do) that is used in a namespace. I need a idiots guide to them basically &amp;#x200B; edit: Sorry for the blank spot... trying new browser that apparently doesn't show the damn input
I didn't want to say your post was missing anything, I was just wondering about its value once we really start updating to PHP 7.3. Say I come across your post, I still only know about a subset of things that changed or were added. It might be personal preference, many people seem to like this style so that's good. I for one remember a lot of people panicing and being angry because their code stopped working in 7.2; they didn't know about the breaking changes. I guess I'm just wondering if this post will really help people make the transition to 7.3 or not.
This is nice :) the GUI is what makes it a bit different in my opinion. We’ve happily used https://github.com/tlaverdure/laravel-echo-server for ages which is Node based with socket.io which works a treat, so another alternative for consideration 
Sonata CMS and Api Platform will teach you a lot about low level Symfony features. Diving into popular bundles also like OneUpUploader, LiipImagineBundle, LexikJWT, FOSXBundle...
What’s your approach to supervising the process? Have a Ratchet server in production at work that I run as a daemon that the OS will take care of respawning in the event something causes it to terminate.
[here it is](https://github.com/vimeo/psalm/issues/1114)
PHP Desktop works a bit differently from a technical point than PHPExeO\*\*\*. They hook the PHP interpreter directly into the app and such solution has numerous drawbacks, like issues with multi threading (I've read they fixed that in recent versions), memory problems, issues with some features and extensions. PHP Desktop's goal is to keep things the same as when you run your PHP on web, so that things work as expected without problems. If your company successfully migrates to phpdesktop, tell them to contribute back to the project with the money they saved by not paying for ExeO\*\*\*!
Try googling your title: http://php.net/manual/en/language.namespaces.basics.php
It's not automatic, but for api documentation I really like Postman, you need something like it to exercise the api anyway, and it can create documents from your collections as you go
:)
I've read through that tutorial like 14 times and it just doesn't make sense to me. the [php.net](https://php.net) manual has never been something I can comprehend for whatever reason. 
Not so simple, you should generate unique identifiers for each connection, otherwise reconnection just inflate that matter and take up memory.
I didn't think of it when I posted my comment, but you should check out https://github.com/Sylius/Sylius. It's built with Symfony and is very well designed and tested. You definitely should be able to learn some new concepts from it.
Are you familiar with the Linux file system Virtual Suit?
Sort of, yes. I've done some light coding/modification and use Debian as my test server. Not as familar with it as i am windows but i know it enough.
That os really cool 
[https://stackoverflow.com/questions/3384204/what-are-namespaces](https://stackoverflow.com/questions/3384204/what-are-namespaces)
to think i just created a chat application last week with pusher .. ugh
This is such an interesting question! It does seem like a longer/weirder journey than it should be. For me, there were a few 'ah ha' moments. 1) Learning all about SOLID - All you need are Wikipedia and Bob Martin's "Agile Software Development" (where he hilariously hadn't yet realized the principles spelled "SOLID" so he listed them in "SOLDI" order!) 2) Reading Head First Design Patterns 3) Reading that you usually don't implement design patterns until a required change demands it! "Make the change easy to make, then make the easy change". 4) Reading that a modern OO design seems like there are all sorts of classes that don't seem to do anything - just passing the buck. This is the tradeoff for making changes easy, and making it easy to know where to change things. This "waste" drove me nuts at first. 5) Reading that the person who coined the term "Object Oriented Programming" wishes he had called it "Message Oriented Programming", because that's really what you're doing. 6) and related to the above, the aphorism "Tell, don't ask". Tell an object to do something, don't ask it for its data so that you can do it. &amp;#x200B; Does any of that help? &amp;#x200B;
I haven't used namespaces before here's just how I interpret it. Calling unqualified names is just calling the nearest function / method or static method. What they call qualified name seems to be like a relative folder path in Linux. The first example is in the Foo\Bar namespace (Folder). And it refers to a function and a static method in the sub folder/name space subnamespace. It seems like it's a way to group methods together, more than parent and child classes and their methods can do. The fully qualified name is just an absolute path, but in the same "Linux Folder Structure style". All this is assuming it's about grouping methods, maybe classes, and anything else accessible in regards to classes. The accessing global classes/functions and constants when you are within a namespace seems like and it looks like escaping. Hey script I know I relatively closer than the standard PHP functions have name a strlen() function. We go back through the script and hit that empty function first, but I want the global strlen() function that's build into the PHP language, that's what I want to access. So to do that we escape it \strlen() and the same with the constant and the exception. Escape it to skip over the closest methods that overwrites the methods thats build into the language and then it'll go back and use the functions we know in PHP. I haven't used namespaces as I mentioned and I haven't tested it but this is how I interpret it. I hope it helps, and that you can confirm it with some simple examples.
I perfectly understand that someone could just add additional PHP into a form field and the include statement would execute the injected code, or someone could access the php file directly on the server. My original intention was to store written tutorials inside of the PHP file and have it load through a host file. I couldn't use a database for them because they varied in content too much for it to be considered a feasible option. If the content on the site I'm creating was user generated, I would stay away from using this practise and go for something like XML.
https://twitter.com/boden_c/status/709894701479038977?s=19
Why would anyone sane want to write any new code on CakePHP?
Is there something similar for Symfony?
polling is not notifications though. 
This.
I understand your frustration. Manual are usually written by those who understand topic for months or years, so it's very difficult to imagine how another person would read that. --- I always think about that as a directory. If I put "some_function.php" to "/SomeNamespace" directory, I just add a namespace. namespace SomeNamespace; function some_function() { } Then use in another file: use function SomeNamespace\some_function; some_function(); Tell me, what exact spot makes you confusing and how do you understand this. I'll try to explain. 
My favorite operating system *ever* has been removed :( I actually made BeCalc back in the mid-90s. It was my first open-sourced C++ app and the Be, Inc., guys actually made it the de facto calculator app for the entire OS!
I've gone through this list in detail and make a PHP 7.3 instant upgrade Rector set for A → B changes: https://github.com/rectorphp/rector/blob/master/config/level/php/php73.yml If you find something new, just create an issues at Rector so we save time on studying it over and over again :)
Neat.
The post is about to grasp the inspiration of people to go into PHP 7.3 for something they might use. Other changes are not so "cool". The transition to PHP 7.3 is [automated process](https://github.com/rectorphp/rector/blob/master/config/level/php/php73.yml). Actually seeing all the changes you've mentioned would discourage me.
Nostalgic reasons?
Namespaces are like packages in Java or modules in Python, basically syntax to bundle code in an non-conflicting manner. Multiple namespaces can have the same class name whereas without namespaces the class names would conflict. A little more clear? 
I'll try to explain without resorting to code samples. Simply put, they are a way of grouping code, which serves many goals: avoiding collisions, having a clear architecture, etc. You basically use namespaces to group classes, interfaces, functions (and more) under a shared prefix. This can be useful if you want to publish a package and you want to make sure that your package does not cause any collision by using a class name that is already used in a another package. With namespaces you introduce the concept of fully-qualified class names (FQCN). A FQCN is the name of a class, plus its namespace as prefix. In any third-party package, the goal is to have the FQCN be as unique as possible. Before namespaces, this was achieved in other ways, for instance Symfony used to prefix all its classes using `sf`, whereas WordPress still uses the prefix `WP_` as it does not employ namespaces. In other languages they also conceptually serve different purposes (for instance in Java they're more tied to the concept of packages), but in PHP they are essentially a way of grouping code. A common thing nowadays in frameworks is to have controllers be put in the namespace `App\Controller` (or similar), which means that the general namespace is `App`, and then you have the sub-namespace `Controller`. This means that in order to refer to a class in that namespace, you will need to use its FQCN, for instance `App\Controller\BlogPostController`. In PHP this can be done either using the FQCN everywhere, or by "importing" a class through the `use` statement. I hope this was somewhat clear an introduction!
Wouldn't that itch be scratched a lot better by being tied up and spanked by a tall blond chick in spandex? 
Especially with the rise of Composer autoloading, you can, sort of, see it as "filepaths"? Namespaces are made to solve a problem. Here's an example: You and I are writing a library or a set of functions and both of us would end up having a method named "get()". When someone imports yours and my library, PHP will die in a fatal error saying that you can't redeclare function get(). There are 3 solutions. 1) Be extra careful and only include 1 library at a time, but that's not reliable and borderline insane, every now and then you'll need functionality from both and your literally fucked. 2) One of us changes the function name to getX() and all is good. 3) Put it in a namespace so then a developer would have to use ```ltsochev\package\function\get()``` rather than simply get() and to use your variant the said developer would have to write ```virtualsuit\package\get()``` and we'll never have name conflicts. Plus it's a nice way to wrap your whole library in a single package and you can use whatever name you wish without worrying that you'll strike on someone else's naming scheme. So yes, you can totally look at it as if it is filepaths on Windows. You can't have 2 files with the exact names in 1 folder, the same way you can't define 2 classes/functions with the same name. But instead of making folders, we make namespaces. It also segments your logic nicely. You can go as deep as you wish, it doesn't matter. Just keep it sane, after all, someone eventually will have to use it :D 
I mean, there's not much that beats that.
Agreed, Sylius is a very nice example of complex application done simply. It's an e-commerce project, but principles can be re-used.
then we can use php as template language and use the functions from a well structured language.... wow... speachless by the idea
Would have been better if the framework part does the same exercise in all of them, so people learn about the strenghts and weaknesses of each framework &amp;#x200B;
I'd like a better temlating engine than PHP.
Back when there were Frameworks like ZendFramework 1 and namespaces were not aviable, developers tried to bring some sort of structure and organisation into their code. Example class Zend_Framework_Really_Cool_And_Deep_File_Which_Does_Something { } Instead of extending liek `class SomethingElse extends Something`, which would force you to search whatever `Something` is, they used this very long class names so you know that `Zend_Framework_Really_Cool_And_Deep_File_Which_Does_Something` is within a folder `Zend`, there is another folder `Framework`, there is another folder .. , .. , ... there is another folder `Does` and there is the file `Something.class`. Depending on what you were using, this could be something that has the same name like something else.. ex. `..._Item_Price` or `.._Market_Price` (sorry had no better example, my head is already soaked of from work :D) So you know.. this ultra long filenames are not only terrible to read, but are also unnecessary amount of bytes you had to save and process in each process. I think Windows has even a bug where you get an error message if your file path is too long. `C:\xampp\hosts\zf1\vendor\Zend\Framework\Really\Cool\And\Deep\File\Which\Does\Zend_Framework_Really_Cool_And_Deep_File_Which_Does_Something.class` (I am not 100% anyore.. it's been years since I saw it and I immediately tried to forget what I saw. This was terrible). Namespaces will now help you AND the system to actually organize your overall structure. Let's take the bad example above again.. &lt;?php namespace Zend\Framework\Item; class Price {} Another file: &lt;?php namespace Zend\Framework\Market; class Price {} You know have two classes with the same class name. You want to use both of them, so you either take the FQCN `$price = new \Zend\Framework\Market\Price();` or you can add the namespace to you current scope like &lt;?php namespace Zend\Somewhere\Else; use Zend\Framework\Item\Price AS ItemPrice; use Zend\Framework\Market\Price AS MarketPrice; $itemPrice = new ItemPrice(); $marketPrice = new MarketPrice(); Don't get confused with autoloading! Your files won't automatically include the necessary files. `use ...;` doesn't replace `include('..');`. (Just use composer and add the source path of your app within the PSR-4 configuration so it will automatically include them via autoloader within the bootstrap.php file. You probally gonna read more about that topic and/or look at other projects. The most projects use composer and with the same setup). I personally would suggest you to get the newest Symfony (4) project and learn with that. In the composer.json there is following part: "autoload": { "psr-4": { "App\\": "src/" } }, This will automatically include every file you trying to use within your code from the `src` directory with `App` being the root of all namespaces. Directory structure with the bad example + bin + config + public + src + Command + Controller + Entity + Utils + Item - Price.php + Market - Price.php + data + tests .. Use that via &lt;?php namespace App\Command; use App\Utils\Item\Price AS ItemPrice; use App\Utils\Market\Price; use App\Entity\..\..; use App\.. class PriceCommand { public function test() { $itemPrice = new ItemPrice(); $marketPrice = new Price(); // note that we can only get one naming. We can use that since we named Item\Price to ItemPrice } } As you can see the `src` directory is mapped to the root namespace `App` and from that point it's literally the directory structure.
Someone shou have thought about this idea back in the mid 90s. 
You could, but looks like Symfony is more willing to bet on https://github.com/dunglas/mercure than WebSockets, which are deprecated (they don't work with HTTP2)
Actually, PHP was developed as templating language for C at first :) So, we are right back where we started from...
That's something you need to do for anything tho. To trace your logs and so on. Normally you would get some nginx reverse proxy to terminate the SSL and feed it to haproxy that splits the traffic to your nodes ( if your within the same network ). You run out TCP connections per IP before you run out of ram usually, depending how to make your app. We usually max the internal network bandwidth before we reach 4gb ram on the notification server.
Woosh
Thanks!
For such low-level programming I use wrappers like [Nette\Utils](https://doc.nette.org/en/2.4/json#toc-usage). They convert the errors to an exception, so you don't have to look blind in the fog.
Did you try to use var_dump on $temp defore pushing it to recipes?
I have echoed all the variables and it's all working just fine. I'm getting results and everything. It's just that it isn't encoding it to json array
Can you explain me how to use it? This was working fine just earlier and now it decided to stop after I made some changes in the database. I use sql and wamp
Are you sure? Because i tested it and its working just fine. https://i.gyazo.com/92951152a13436e7f4cccf545322ce04.png
It should! But for some reason on my computer it won't work. I need to test my mobile app but without results, I can't check next the stage and it's due tomorrow!
[removed]
&gt; But for some reason on my computer it won't work Do you have the json extension installed on your machine?
Try to do $stmt-&gt;bind_result after you do $stmt-&gt;execute() as showed here: https://dev.mysql.com/doc/apis-php/en/apis-php-mysqli-stmt.bind-result.html
My json_encode works for all my other functions like getIngredients. It's just this one that has an issue for some reason
No change. Besides, I know the code is working because in other functions I've done the same thing like in getIngredients and I get the echo in those functions
Meta!
Moving last three projects over to PHP 7.2, finally convinced the clients after a long struggle.
Is there any big impact if i don't make the move?
If you have some ISO standards for security, that need maintaining, I'm guessing your don't if you ask this question. Other impact is even if your sites are small and easy to maintain, if some hacker found an vulnerability it won't be patched and have to manually maintained the security fixes by you.
We moved everything in my company to 7.2 1 month ago, really nice new features we have now and managed to not have downtime on black friday this year.
We have been sending messages about it at work for the last 18 months. We have the 17th targeted as our date to remove 5.6 from all of our servers. &amp;#x200B; I'm expecting a lot of anger from our customer base. Nearly nobody has tested their stuff against 7x and most of them probably don't even realize just how broken all their sites will be. There are a lot of ancient sites on our server (some even still have \`.php4\` extensions FFS).
we are still having webapps that are php 5.3 compatible :((( I told my boss we need to refactor / or rewrite everything from scratch (which makes more sense in most of our poorly written stuff)... boss: "Customer doesn't pay for it" and as long our web hoster still provides even php 4 (!!!) we won't do anything.. just make the pile of shit bigger and bigger. :( 
Looks lightweight - will defo take a loog! Cheers!
You could probably offer them a service or a compatibility check to see what they need to upgrade. I'm guessing you are running a shared hosting server?
Yeah, this is a shared server with 5500+ sites. It is a legacy system we run at my company which nobody pays to use.
Have you tried executing **json\_last\_error()** to see if any errors are generated?
emotionally? sure!
Ye, that’s a huge problem globally. I know “coders” who still develop new websites in even older versions of php and hosting services that only support 5.x versions. My opinion - any action against php 5 is good. It’s at least a bit stricter, does not allow that much shit code. 
Well to be fair that is the state of most companies, they dont even know the diferences between 5 and 7, or that there are versions of PHP.
It is definitely light weight compared to other bulky admin panel packages. Thanks for checking it out.
I just moved one of my projects from 5.6 to 7.2 and got bit in the ass by a really subtle behavior change with foreach loops. Gonna be more careful next time around.
That would be a point where I'd consider switching jobs to a company that uses some common sense.
no lol. we're still using php 5.4 at work. been scrambling to upgrade a humongous codebase to 7 before corporate convention at the beginning of next year.
Yeah, in case someone finds a security vulnerability in PHP 5.6, your sites might be in danger since nobody is going to patch it. Besides that, PHP 7 offers way better performance and many new features. There's literally no good reason to stick with an EOL version.
It won't affect me as all my projects already run on PHP 7.2 and will soon be migrated to 7.3. I suspect that most people who are still on 5.6 either don't particularly care that it's going to be EOL, or simply don't have enough say in the matter.
Look at the Object Orientated Bootcamp series by Jeffery Way on Laracasts.
Customer either pays for it or has a date in the future when either: - The app stops working because you simply cannot have a server provisioned with that old of a version. - The app gets hacked and the customer's data spills all over the 'Net. This is OK if and only if the customer has actively chosen to milk the application while it lasts and then shut it down instead of continue to invest in it. Even before that happens, customer still pays for it in: - Slower development from a combination of demotivated developers, high turnover in developers, and additional time spent working through what is probably messy code. - Being unable to use a growing proportion of PHP packages, which means lots of reinventing the wheel. Save yourself. Leave now.
I feel you... My previous company (a big SaaS app) is still running on PHP 5.3. It's a big task, almost impossible task to check the entire codebase... Luckily, there are some tools available that make it a bit easier e.g. [https://github.com/sstalle/php7cc](https://github.com/sstalle/php7cc).
How can a foreach change behaviour?
A useful way to manage the shutdown of something like this with minimal (not unavoidable) surprise and anger from the customer base is to have a date until which you support the thing clearly posted well in advance for all to see, actually support the thing in question for some period of time after, but start periodically taking it down during that period of borrowed time. I say this because I guarantee that no amount of messaging will reach some folks, but shutting their server down will catch their notice. This at least gives them some time to react after getting the wake-up call.
I didn't move it completely, but tested a very big project 5.6/7.0 -&gt; 7.2, and mostly everything was fine. The only problems pop'd with 'count' in a few places (if you don't count curl not working - I included that php into WAMP without reinstalling).
Same. The "core" of our company is one big ass giant of glob of php5.3 And I'm talkin about almost all our business, accountancy, orders, warehousing almost every business process at our company goes through this piece of shit. And our boss is so resistant to our cries for upgrades / rewrites that he actually rather payed us to do custom backport updates to a custom php5. 3
We switched everyone to 7 by default and made them take the step of selecting 5.6 to make the point. I pushed to name it "I know this is going to break in December" but we called it "PHP 5.6 - Legacy" instead. That said, we will remove it on the 17th officially. Unofficially we are figuring enough people are going to make a big enough deal about it that our management will want us to re-enable it for a week or two. That's all built into the schedule. It is a hard no after the end of the year.
How will you handle the last few users that aren't logging in? Keep the legacy check in there? Maybe eventually force them to reset their password using their email?
Luckily I'm in a position to skip those tasks. I don't develop for anything that's unsupported.
oh no
BeOS dropped? Fuck!
Yup. The array was being modified *within* the very loop that was iterating on it. This doesn't work anymore so I had to find a workaround.
I thought i read that PHP 7.3 was going to have optional type definition for declared class variables. class Fruit { 
Still running zend1 5.6. :(
Typed properties are going to be added in PHP 7.4 - https://wiki.php.net/rfc/typed_properties_v2.
Is your app exposed to the internet? Do you have a plan if somebody has a 0day RCE exploit?
thanks
I just change the php version from 7.0 to 7.2. is it any benifitail?
5.4.6 on dev, 5.3.3 on prod. I would say not. Then again, we still have Red Hat 3.0 servers (up through 7.6). Dev is 7.5 I think, prod is 6.10. With RH8 coming (beta out) I may wait on upgrading the prod server.
The simplest work around is to foreach by reference. If you write `foreach ($arrays as &amp;$value)` (even if you don't modify `$value` itself), then any modifications to the array will also be seen by the foreach loop.
Yes
The best reply would include the words "security" and "supported software".
No reason *not* to leave the legacy check in there IMHO. You don't really have a choice.
My day job is for a WordPress plugin. I'll be supporting PHP 5.2 for a few more years as far as I can tell.
As part of my company's refactoring we have to replace the entire finance package, and apparently I'm the only person who checks the PHP schedule (and I've only been here a few months), so we'll probably be a month or two late on it. So excited to be running 7 at work though :)
If your sites allow direct access to PHP then something is seriously wrong. At worst a PHP vulnerability should get you local priv escalation, but that still requires you to get on the server first. There are 100 things just like it on the server. On top of that, with how prolifically 5.6 will be used after the "EOL" they will for sure backport major security issues. Someone will. I mean upgrade if you can, but the world will not come to an end if you need to squeeze another year or two out of some old codebase.
Nice.
Sure, require in composer: composer require nette/utils Then in PHP code: &lt;?php require __DIR__ . '/vendor/autoload.php'; use Nette\Utils\Json; try { $value = Json::decode($json); } catch (Nette\Utils\JsonException $e) { // Exception handling }
&gt;At worst a PHP vulnerability should get you local priv escalation In my opinion an extremely valuable asset in a web application is the database, so if any piece of the stack is vulnerable and give unprivileged access to it then it's already a disaster. 
For a real-word example, check the en-marche.fr repo on Github https://github.com/EnMarche/en-marche.fr It was the website for Macron's campaign in France in 2017 so it's battle tested in terms of traffic and security. Even though it's in Symfony 3.4, most/all of it works with Symfony 4. 
Why not refactor parts as you go? When a client request comes in, refactor the part of the code that you need to touch. 
Which version of 7? I found that upgrading to 7.0/7.1 was easy. 7.2 caused far more problems due to several functions now throwing warnings or notices due to incorrect types. 
That's a really interesting idea. I'm wondering - if s/he makes functions static methods, then aren't they pure (ie. there's no object, only a class, and no member vars)? I'm wondering if this might be confusing. 
We still have some applications using php5.6. But we have made docker(compose)files for all of them, so we can test them in every php version. This month (december) is planned as an "update month". So we don't have to deal with php&lt;7. I think it's a good thing we are all abandoning php&lt;7 
Auch! Good luck. Hope you find a better employer soon
Boyscout rule: &gt;Leave your code better than you found it. The Boy Scout Rule can be summarized as: Leave your code better than you found it. &gt;Boy Scouts have a rule regarding camping, that they should leave the campground cleaner than they found it.
Of course it will be confusing. But there’s a learning curve they need to go through.
If you haven't watched a presentation by Rob Allen, try to. He's amazing.
I do plan to upgrade but won't be able to make the deadline, I think I will need another year to upgrade my whole code base, there's conflicting opinions on the web about rushing an upgrade tho.
Beware though: do `unset($value)` after the loop to avoid having the reference linger.
I don't think there is any way other than keeping the legacy check in. The only time I can think of that it's safe to remove it, is when you can verify that all accounts have updated their passwords to the new method, either by a specific field for it on the user table, or by a updated_at field being after the deployment date of the new check. 
No it's not exposed, it's sitting behind ddos protection and DMZ'ed between servers LB and DB
I can't figure out what you are looking for, the server or the framework. You say you don't want to use Apache. But you also say you want something like Express or Flask. They are just frameworks. Not related to Apache. If you are looking for frameworks similar to Express and Flask but in PHP, there is Slim and Lumen. If you are looking for an application server then Apache and Nginx are the industry standards. You should probably pick one. If your kernel is preventing you then you should either update your kernel or install a more up to date distro. &gt; I'd prefer to avoid using Apache, since that would require some system configuration There is no solution that will not require "some system configuration". You shouldn't be afraid of configuring your own servers. Someone has to.
well to be fair, you need to tell them. and if you can't, that's understandable. but if you don't then you're a part of the statistics :P
It's a way of naming files so they don't conflict. Think of it like folders (directories) on a computer. You want to send `/VirtualSuit/Documents/sexy-pic-of-me-on-the-beach.png` to that girl, but you definitely don't want to send `/VirtualSuitsMom/Documents/sexy-pic-of-me-on-the-beach.png` to her. So the namespaces `VirtualSuit` and `VirtualSuitsMom` are vitally important to which file is used, especially considering `VirtualSuitsDad` owns the computer, so the default, un-namespaced file would be `/VirtualSuitsDad/Documents/sexy-pic-of-me-on-the-beach.png` It's just a fun way of allowing classes with the same name to be loaded at the same time, because the FQCN (Fully Qualified Class Name), i.e. filename with folder names, makes each filename unique by including directories (folders).
So my follow up (because you've done a good of explaining it) -- how exactly are they called? is it basically the same as a defined item? so VirutualSuit would be one defined object and then everything beneath that is also a defined object? 
Just finished migrating all our sites yesterday!
They're called whatever you want. You don't have to namespace classes either. Generally you would name a folder like `mynamespace`, and then tell the autoloader where the root is in composer.json, e.g. "autoload": { "classmap": [ "mynamespace/config.php", ] } and if your app is in /VirtualSuit/newApp, and the config.php is in `/VirtualSuit/newApp/mynamespace/config.php` it will load fine. So just think of it like folders on a PC. Say one directory is root, map that directory as a namespace, and each subdirectory is another sub-namespace. 
Just about, yep. Main app is all updated, tested, and ready to roll with 7.2; couple of small niche apps that just need TCPDF updated &amp; a few `catch (Exception)`s to rewrite to `catch (Throwable)`, but that's about it. To make it funner we're also updating our OS, Java, and PostgreSQL stack at the same time. Thought the `foreach()` changes were going to bite a bit, but upon further inspection, all of our usages either passed arrays of objects, object collection wrapper classes, or were read-only, so didn't have to do any extra work there.
The first thing I did when I came into a project over the summer was get us to refactor to PHP 7. Happy to say that we'll be looking into updating to 7.3 in January after compatibility testing.
You should empart to him that this issue isn't going away, and that refactoring twice in a decade at a moderate expense is better than refactoring once in a decade at a prohibitive expense on top of losing customers because you're non-operational.
What happened to migration tests?
One argument against it is that you need less server power. Our servers used 1/3 of the server resources. 
The biggest impact is that sooner or later you're going to have to switch. No matter your circumstance. Either because of security or any number of other reasons. Biggest thing to keep in mind is that switching now, is going to be cheaper than switching later. **Project Manager Friendly Cost Analysis Chart** |Version|Time|Cost| |:-:|:-:|---| |&gt;4|TTT|$$$| |5-5.6|TT|$$| |7+|T|$|
Forgot to post my state for php5.6. I'm working to get all Drupal sites10+ up and running w.o any deprecated notices on PHP 7.2, and same for a few symfony and wordpress projects. And every single site will be ready before christmas.
i have been using ratchet for almost a year now, with supervisor as daemon to run the PHP websocket server with 0 problems, it had 1 problem with PHP 7.3RC5 i think which segfualt and that has been fixed in PHP7.3RC6
&gt; I would expect that for applications actively maintained, that most if not all have been updated by now as PHP 5.5 came out in 2009! PHP 5.5 came out in 2013. PHP 5.3 came out in 2009.
sorry to come back to this 3 hours later -- So i'm still in the weeds with this. Do i still need to include the file? because I don't fucking understand this at all and it's actually frustrating me to no end. I'm trying to learn it but like -- trying every example here and on the site does not access the functions by doing the use function blah\\blah\\blah. I feel like i'm reading contradicting tutorials where some people are saying "Yeah! You don't need to use includes anymore!" but literally the next line is "So your file1.php is where the name space is then the next line you have to include it" Basically -- i'm having a stroke over this. 
Found out the hard way that the original developer placed critical code inside assert statements. Works before 7 because asserts weren't C-style so statements were always evaluated. After 7, not so much.
With polling you run into significant scaling issues. With many concurrent users and a short poll interval it can also create a lot of server load even with no activity. 
As already pointed out, I would also store a `password_updated_at` field, so sooner or later I'd have data to safely remove the old mechanism, or at least know which users have not yet updated their passwords. If the number is low enough, I'd feel comfortable removing the old hashing code and send out a "please reset password" email.
I'd rather he sold a PHPStorm plugin to be honest.
Read this: https://deliciousbrains.com/legacy-php-version-support/ You really don't need to support PHP 5.2
I'm not rewriting. I'm not upending everything and risking $50k per month and risking causing others millions of dollars in damages. 
All systems except one run 7.1. The last one is our ticketing system which still doesn't support anything better than 5.6. When they are going to support php7? The next major which comes out soon (tm).
At the company I work at, we try to stay as up-to-date as possible. Projects still in development will be bumped to 7.3 for the minimum requirement in a few weeks; older projects get updated over time. I believe most of our projects in production run on 7.2 and 7.1, some still on 7.0, and very very few on 5.6; but we don't add any new features to that last group. We also do quite a lot of open source, the minimum requirement of our new packages will be 7.3 or 7.2, depending on what the package exactly does. Old packages get bumped over time. I came to realise that this is not common practice for most companies, and I feel for developers stuck in those companies. My suggestion would be: if you're able, find a new job; it'll be a whole other experience, you'll be able to work with contemporary technologies, you'll love the performance and improved syntax of newer PHP versions. I think it's the best choice if you're a passionate developer: look for companies who invest small amounts of time in keeping their tech up-to-date, who invest in keeping their developer's knowledge relevant. This is the best business strategy in the long run, and it's too bad many companies are too short-sighted to see that.
I don't know. VS.Code is pretty damn fast and with the right plugins i don't really see a difference. Rather than the latter being free.
I don't, I'd rather have a SaaS version :)
Will never even bother to connect production pipeline to one-man-show kind of offering.
Why does it have to be part of a production pipeline? 
Where should this flaky pipeline end?
I don't understand the question. A production pipeline shouldn't be flaky, but there's no reason why PHPStan should be part of a production pipeline. It's a development tool and matters nothing to the end-user.
You won't run static analysis before pushing to staging?
No, that doesn't sound like something I would do. On my local machine, sure.
I'd rather not have a tool like PHPStan limited to a particular IDE
FWIW, I think you've got the free/paid split pretty much spot on - the 'Pro' features feel like enterprise addons rather than things that "should" be in the open version. Good work! The baseline filtering is of most interest to me, and I'll certainly be proposing it at work if it works well with our huge(ly legacy) projects. And I think it'll work out well for you too, because I feel like the sort of company with a large legacy codebase that needs such a feature is exactly the sort of company who would be happy to pay for tooling.
true - I am at that point already ;)
Sure, I appreciate the totality of your vision. If cover anything then at least 100% of it.
The article makes it clear that the "cloud" side of it is optional and all of the other features of the pro version are available on-premise.
...and your boss is 100% right. If the customer won't pay for it, why should your company foot the bill? Or to put it another way, would you be willing to do these rewrites in your own time, unpaid? Your customers need making aware of the implications (strongly) of not maintaining their software, but if they still won't pay then there's not much you can do. And even then a rewrite (rather than doing a mostly-automated compatibility-only update to be 7.3 compatible) is almost certainly the wrong approach. Unless you can convincingly show med/long term net profit due to doing the work, your company should just say "no". Sucks, but that's the difference between "work" and "hobby".
Um, what? I used to work a company that primarily just did contracts work for companies without full in-house dev teams. Big construction company wants their website redone? That was us. Horse company needs an offline-able website to enter data about horse inspections (this was before apps were popular in a place with bad cell service)? That’s was us. All of these projects had a start and end date for development and while we hosted the websites for them in most cases we weren’t paid or expected to do ongoing maintenance. Why would we put off paying clients work to do unpaid cleanup of an already-done job? Sorry but that’s not how business works, that’s how a charity works. If the client is paying for ongoing maintenance then it’s a slightly different story buts let’s not trivialize upgrading 5.X-&gt;7 or vilify the employers who won’t upgrade a client’s site for free.
For instance with Node.js or Python I can run the `node app.js` or `python app.py` and that's it, the app itself runs as a web server.
What do you mean?
https://www.php-fig.org/psr/psr-4/ If you register the namespace in composer.json, or you make files in an already registered namespace, the autoloader includes them for you--assuming you're using a framework or environment that is set up for auto loading. If you're having this much trouble, you may want to try installing a framework and follow their documentation, e.g. Laravel. From there you can start adding models, or controllers, etc., and get a feel for how files are namespaced. 
&gt; The app stops working because you simply cannot have a server provisioned with that old of a version The source can always be compiled, if you really wanted you can go back and compile php 4.0.0, its in the git repo. &gt;Save yourself. Leave now. And go where? As long as you have clients, or a product that isn't being funded indefinitely, you'll always have this. Dealing with legacy system is just part of being a developer.
Its got nothing to do with common sense. If anything they have more than you in this situation. Development costs money. If its going to cost more to upgrade to php 7 than you're going to make, then obviously you dont do it. Switching jobs because you're incapable of dealing with legacy platforms sounds more like a you issue than a company issue.
Disclaimer: I'm biased by knowing a lot about coding standard and static analysis tools :) I'm really curious what advantages such service brings over the local setup. The same case for StyleCI or similar. Could anyone using such CI service give me few advantages of paid service over local free setup?
It's in the article: &gt; All of these features are designed with composability in mind so you don’t have to use them all at once. For example running PHPStan in the cloud means that you will have to give the SaaS access to your source code. Not everyone is okay with that, but they can still take advantage of the rest of the features. Someone else might not need the baseline, but wants faster analysis. So you'll still be able to run PHPStan in your CI with the help of the API client, gaining faster analysis and baseline filtering features ;)
Definitely check post by Michal Špaček: https://www.michalspacek.com/upgrading-existing-password-hashes He's our local security expert who trolls for good :)
*Strongly* disagree. Sticking to EOL version is just one of the ways how to accrue technical debt and will cost more money in the long term. If a company can't communicate that with the customer, or simply doesn't care, then it's a sinking ship anyway and I want no part of it. I'm more than OK working with legacy applications, but I've never had a situation where people involved just decided "Oh, you know, why don't we stick to the old version? There's no way how that can bite us in the ass in the long run.". All my legacy projects run on the latest PHP version, and there has been zero issues explaining the customer why that's necessary.
&gt; Sorry but that’s not how business works, that’s how a charity works. There's nothing to do with charity. Technical debt is a thing. If my employer refuses to understand it and there's a slim or no chance to change that, I'd strongly consider leaving.
There is no need to rewrite your software all at once. You’d do it piece by piece. It’s the only safe way to do it
He tweets too often. Getting a handful of such writers in your feed will make it unredable. 
Uhm, you might want to google names before using them: [phparch.com](https://www.phparch.com/)
Fair enough. I use twitter to follow devs socially and rss feed reader to follow their technical content.
You're right that it would be silly to expect to never have to deal with a legacy system. There is, however, a point when the legacy simply becomes too old and too crufty to meaningfully support. That said, it's not the PHP version setting off alarm bells in my head, per se. It's that the manager doesn't recognize what hidden or delayed costs are involved here. My point with the earlier post is that the customer will pay one way or another, but nobody appears to be managing those costs. For context here, I once worked for a place that was running an old version of PHP and never made the jump to a newer version. I was OK with that decision and still am. The reason being that it simply made more financial sense for them to milk the product while it lasted and then shut it down than to pay off their accumulation of technical debt.
Yeah: the company should have factored this into support costs if it was going to provide ongoing hosting + support. If you can prove that not doing something will make the company look really negligent though there might be a case. eg I worked in a place where I found an obvious backdoor in their old software: I suggested fixing it (would have been easy and cheap), because it would destroy their reputation if exploited, but they didn't care.
&gt;All of these features are designed with composability in mind so you don’t have to use them all at once. For example running PHPStan in the cloud means that you will have to give the SaaS access to your source code. Not everyone is okay with that, but they can still take advantage of the rest of the features. Someone else might not need the baseline, but wants faster analysis. great! i was coming here saying the same as Tomas, if it already runs in my CI then i would like to keep it that way. So the SaaS can be the receiver of data similar to how coverrails works with coverage report data? In general the problem for me as business owner wanting to support Open Source is, that Patreon doesn't send good invoices and PayPal donations are impossible without a receipt from the right legal entity. so I can't support more than a few euros a month. The only thing that companies can easily do to fund open source is paying invoices for support contracts, issued from a valid company.
That would be a much greater undertaking - making PHPStan fast enough to run in an IDE, on top of PHPStorm's overhead. You're essentially firing up two resource-hungry static analysis tools at once.
I mean you couldn’t poll once every minute or two? Three? That takes more resources than a websocket? As far as downvotes, welcome to reddit where the content is made up and the points dont matter. 
&gt;1 Manually download the live DB and create dev DB stripping all customer/sales data Allow an specific user of DB to be able to remote-read so you can pull the live database from a custom made, simple script (for example). That script would ideally also "import" the dump into dev DB. Just a couple of arguments for your custom tool should do it. You can make this script to work from Windows and/or Linux, whatever your dev. env. is &gt;4 If tests pass deploy to live "Deploy to live" is more complicated when there are DB modifications that need to be put into production. As others have mentioned, Phinx is a good choice. I like it's framework agnostic (you can use it as a simple command-line tool), it is flexible enough to grab multiple db configs ("environments") from anything on your project / environment, it keeps version information using its own table 'phinxlog' for each database which is very convenient -so you don't depend on timestamps or anything written to filesystem which would play bad with git/svn-. Hope those hints help.
i will re-post the question here on this sub, with more details and visual representation :) thanks
Unfortunately for you, you can’t also run it on everyone else’s machine that contributes to your codebase. So, begrudgingly, you’ll move it to your pipeline where you can be more certain those types of things are happening. 
Hi Guys! I now that maybe this is not the right place, but I've just develop a simple tool to manage and schedule backup for any web app. Hope that it will be helpful for someone!
What's the difference between PhpStan and something like PHP Code Sniffer? 
Check out my article about the topic: [https://medium.com/@ondrejmirtes/three-pillars-of-static-analysis-in-php-f3f5d7bfd61b](https://medium.com/@ondrejmirtes/three-pillars-of-static-analysis-in-php-f3f5d7bfd61b)
Ah, thank you, that clears a lot of things up. I'm going to try this later today. 
Awesome! Did you chose to not create Models via this interface? Or do you plan to be able to create those via the web interface?
All of the models can be created via the CRUD generator. There is no UI for generating models, it is done with a config file. https://lap.kjjdion.com/docs/8/configuration
&gt; What has worked for you? Asking your current developer if they have any suggestions. It's worked out very well when used properly. They're most likely going to choose someone that is easy/good to work with, which in turn ensures you get a top quality product.
&gt; Asking your current developer if they have any suggestions. Unfortunately, I'm the current developer and I've been skating by on personal relationships for the last couple jobs. :-)
I'm running all these tools in CI already, private or public repositories it doesn't matter. As for "baseline" analysis, Scrutinizer and CodeClimate have such feature. It was "cool" from the start, but rather annoying in time and it slowed dev process down. That was the reason I left them for PHPStan actually, preferring setup &amp; forget automatization over reading reports. Yet, I imagine such features can be useful for people don't (want to) know anything about internals and want to just run CLI :)
As for invoices, David had to solve the invoice issue in Nette, so he made simple single site: https://nette.org/en/donate I think no Open Source developer would deny an email with request for an invoice to support him or her.
I'd be interested in hearing what was annoying about baseline sin those other tools. It might be that PHPStan will do it better :)
I know this is marketed as stable but is any of you going to use this production already or are you waiting for the first round of patches?
pretty sure some people started using it in production already with the release candidates... But I'm guessing most people will only start switching at the beginning of next year
I'm upgrading this weekend.
Same here, and when 7.4 stable realease will be out I will upgrade the second later!!
Push it through our CI before production. &amp;#x200B; Run tests, performance etc. in Staging. &amp;#x200B; This is where docker is really useful.
You're right. Well, time to upgrade all projects!
Psalm added this feature last month (thanks to [https://github.com/ErikBooijCB](https://github.com/ErikBooijCB)), and we use it at Vimeo. There was a lot of internal friction with the initial version which just checked for an expected number of issues per file, but more recent improvements check for specific snippets of code, and now it mostly just warns about bad *new* code. Our (very large) baseline file for Vimeo's main repo has thousands entries like this: &lt;file src="src/Vimeo/Foo.php"&gt; &lt;MissingParamType occurrences="1"&gt; &lt;code&gt;$file&lt;/code&gt; &lt;/MissingParamType&gt; &lt;MissingPropertyType occurrences="2"&gt; &lt;code&gt;$code_hash_file&lt;/code&gt; &lt;code&gt;$commit_hash&lt;/code&gt; &lt;/MissingPropertyType&gt; &lt;/file&gt; I still occasionally get questions from developers here, and it still occasionally stumbles, but in the last few weeks it's had a very positive impact on how we write code.
I’ll be upgrading my server soon from Ubuntu 16.04 to 18.04, so I’ll be using 7.2 lol
Just in time for [WordPress 5.0!](https://make.wordpress.org/core/2018/12/06/wordpress-5-0-release-day/#comment-34843)
This is an incredibly welcome change that'll increase PHP's type-safety for some heavily-used functions: Passing a non-string needle to string search functions is deprecated. In the future the needle will be interpreted as a string instead of an ASCII codepoint. Depending on the intended behavior, you should either explicitly cast the needle to string or perform an explicit call to chr(). The following functions are affected . strpos() . strrpos() . stripos() . strripos() . strstr() . strchr() . strrchr() . stristr()
I'm waiting for a stable Ubuntu release.
K?
Hi. &amp;#x200B; I'm having a bash script that accepts let's say two arguments, then it takes some time (around half an hour) to get the results stored into some files. So now I want to create a simple web interface where a user will provide these two arguments and the server will execute the script. Since the execution takes some time I was wondering how something like that could be implemented. One thing that I thought was to put all submissions into a queue executing one by one and create temporary links for each user to enter and display the status of his/her submission (pending/done). One possible disadvantage for such an approach could be the waiting time for the last users in the list. Then I thought to use aside with the waiting list something like thread spawning to execute more than one scripts at a time but I really don't know if such things are achievable using PHP and if that is the best way to approach it. &amp;#x200B; Any idea or hint is welcome.
Hi. For some reason, I couldn't add text to my post's body. &amp;#x200B; I'm having a bash script that accepts let's say two arguments, then it takes some time (around half an hour) to get the results stored into some files. So now I want to create a simple web interface where a user will provide these two arguments and the server will execute the script. Since the execution takes some time I was wondering how something like that could be implemented. &amp;#x200B; One thing that I thought was to put all submissions into a queue executing one by one and create temporary links for each user to enter and display the status of his/her submission (pending/done). One possible disadvantage for such an approach could be the waiting time for the last users in the list. &amp;#x200B; Then I thought to use aside with the waiting list something like thread spawning to execute more than one scripts at a time but I really don't know if such things are achievable using PHP and if that is the best way to approach it. &amp;#x200B; &amp;#x200B; &amp;#x200B; Any idea or hint is welcome.
We've been on 7.2 only for a while now, 7.1 before that. We'll probably move to 7.3 in early 2019. I honestly wouldn't take a job at any place that still uses 5.x.
But they still support PHP 5.4...
I wanted to share this, you're fast :) I think the table with red code shows this better: https://getpsalm.org It works with incomplete work, which is really hard with nikic/php-parser (compared to Microsoft/tolerant-parser that was made for IDE). So great job! 
When you hear the same error that has ho added value for your code, again again and unable to disable that rule. It enforces opinionated set on code the author never saw, Scrutinizer made this really painful. Still feel the pain :) Example from last week on Codeclimate: https://codeclimate.com/github/phpmyadmin/phpmyadmin/pull/14757 That's why I prefer local config and setup, where I have at least some control. Also I think it's design flaw to enforce sets as a whole. Imagine you'd have to PSR2 as whole. But there as 2 rules you just want to skip. I saw PHP teams not using codings standards at all, because it was too difficult to do that. That's why EasyCodingStandard has config option to exclude rules. This was impossible, or at least more difficult than necessary with Scrutinizer. Same is is with PHPStan - or is there option to exclude a rule or part of it? Remote CI server just adds extra complexity layer to these design flaws with less added value than taken.
Waiting until early January, but have been testing against it for a while now.
Nice to see this fixed: [Remove inconsitency of internal exceptions and user defined exceptions](https://bugs.php.net/bug.php?id=54043)
I've written 2 posts to sum up history of such tools and what to use when: - [Brief History of Tools Watching and Changing Your PHP Code](https://www.tomasvotruba.cz/blog/2018/10/22/brief-history-of-tools-watching-and-changing-your-php-code/) - [Why AST Fixes your Coding Standard Better than Tokens/](https://www.tomasvotruba.cz/blog/2018/10/25/why-ast-fixes-your-coding-standard-better-than-tokens/)
I'm starting to think there are different definitions for "pipeline". The pipelines we deal with, where we work, are used to deploy production code. We connect code quality tooling like this to our repositories, but they don't block merges. They're not part of the same process that deploys code to any of our environments. I get that it's useful to run this for the whole team, but I think it's a different discussion to a "production deployment pipeline". 
Yeah, that doesn’t sound like something PHPStan would suffer from, and it’s actually totally irrelevant to the baseline. 1) You will be able to configure PHPStan as you are today. 2) You will still be able to run it locally. 3) Baseline will allow you to check new code with higher level (of your choosing) than without it.
PHPStan is on the same level of importance as tests, it finds bugs for you.
I issue invoices for Paypal donations on demand, it’s in PHPStan’s README 😊
Not sure how big your company is, but type-inferring static analysis tools block deployment at pretty much every big one (regardless of language).
5.2.x as well 😮
Actually it does. I have to use level as whole
I'm waiting for XDebug compatibility.
Also, many rules are not configurable, which is must have- like this: https://github.com/Symplify/Symplify/blob/a310dcf216be6249fb827462d1e6b02d0ed8527c/ecs.yml#L32-L44
I hope Rector got this [covered](https://github.com/rectorphp/rector/blob/c7ecb423da516bc1783bc2afd497e9cd253875ca/config/level/php/php73.yml#L24) :) 
You mean `php -S`, the built-in web server? It should only be used for development. For production sites, use a real web server.
If you have to enable it, it'll be an option in cpanel I'd guess. But check if the extension is already available (`phpinfo()`).
I always hate new releases, they always break my programs
The biggest practical difference is that the built-in server is single threaded. This means that concurrency-related bugs may be harder to catch. Personally I enjoy not having to deal with an extra component (nginx/apache) so for development the tradeoff is worth it.
So can i install it right now?
(IHMO) The decline this year is mostly folks who just changed the response header. There wasn't another language getting a big bump of PHP people as far as I know.
[citation needed]
PHP 7 will probably be EOL by then /jk
I'm upgrading the last Friday before Christmas at 17.20 then turning my phone off.
Why are people changing their response header? Is there an article or something that suggests people do this?
Look at https://trends.builtwith.com/framework/PHP-7 I think what's happening is, as people upgrade from PHP 5 to PHP 7, someone has the bright idea of disabling `expose_php`. This might be because public shaming for running unsupported versions of PHP prompts some upgrades.
security. it won't help much against a targeted attack, but it's useful against automated scanners looking for vulnerable versions. 
Meetups.
I'm trying to validate a date from an input type="date" name="date" in d-m-Y. Here's my validation function: public static function validerDate($date){ $dateToday = date\_create('d-m-Y'); $datetime = date\_create($date); if(date\_diff($dateAujourdhui, $datetime)-&gt;format('%a') &lt; 0){ return false; } else{ return true; } } Can someone help me here? I want to block if the date is higher than today.
Dear Lord.
They shouldn't do major damage unless you're relying on features that were long deprecated. In which case you get like five years to prepare.
What do you want the citation for? He is claiming that it breaks HIS programs, not everyone's.
I guess typed properties are scheduled for 7.4 then?
I'm waiting for a stable Debian release.
Tell your employer to look on Crossover (dot) com. I work there, we are PHP developers working remotely.
Yep.
We just now switched to 7.1 and will probably start looking at 7.2 soon. We have some stuff still on 5.6. We have a massive codebase and wouldn't be smart to switch to a .0 release so soon after it comes out
Thanks on the down-vote asshole(s)
if it's from 15 years ago then it's probably deprecated to hell.
[removed]
i remembers a book 15 years ago remember books 15 years agobooks remember once 15 years ago i ready a book that was 15 years old about php 15 years ago with security pictures and 15 years of examples one time 15 years ago
Every commit in repository (from push or result of merge) must go through tests&amp;phpstan etc. Code that doesn’t pass is blocked from getting to production. When exactly are these checks runned is not important. 
Use something like [https://enqueue.forma-pro.com/](https://enqueue.forma-pro.com/) or [https://laravel.com/docs/5.7/queues](https://laravel.com/docs/5.7/queues)
How would it be limited just to PHPStorm? The cli version can always be available on any other IDE or text editor. A PHPStorm plugin would just be a convenience 
I don't accept this statement without data to back it up.
bUT pHP IS not MaDE fOr ThAt Well, fuck you, learn C then.
I'm waiting for brew and ubuntu 18 packages.
That I know of directly? Facebook, Microsoft, Google, Etsy. Would be really interested to know of large companies that don’t have some sort of static analysis gatekeeper.
input type=date always output Y-m-d date_create('d-m-Y') is wrong, should be just date_create() But more importantly you should have some way of executing your code so you can check it yourself. Setup xdebug to set breakpoints and step through the code. Or use the php CLI or a nice wrapper like the one in phpstorm. 
With the exception of Etsy, I wouldn't lump all of the development teams of those companies into a single bucket or process. They are full of varied teams with varied processed. I still don't see data... ;)
Can you explain? 
So Dec 2019?
I'm super lazy as fuck, I'll wait for 7.3 to get into Ubuntu 20.04 repositories and just run **sudo apt dist-upgrade**
&gt;The only thing I lacked in the end, what PHPStorm gives me but VSCode couldn't, was auto-completion for use-statements (e.g. you type a class, hit enter and it automatically adds the use-statement for it) But Netbeans can't do this either. I'm not fluent in English, but if I understand well what you say, You have to know that Netbeans do it. You need to use phpDocumentor. Write correctly the doc of your object and enjoy ;) `/** @var MyClass $fooObj This object do something so great */` 
tl;dr: `private string $foo` will become syntactically legal and enforced as you would generally expect. It will allow you to replace @var annotations with something that’s enforced at runtime (and should still be supported by IDEs and static analysis tools). Works with any scope and type (that’s supported in argument and return types), including nullables. There’s special handling for uninitiated not-nullable properties that doesn’t force you to do a ton of work in constructors. And if you don’t like it, it’s just as optional as any other type system requirements in PHP! So no BC issues. 
Say hello to [Netbeans 9](https://netbeans.apache.org/download/nb90/nb90.html) ;)
It is not exactly the truth. WP requires PHP 7.2, see https://wordpress.org/about/requirements/ It just can work on PHP 5.2. It is not officially supported but as accidentally it works, they are not going to purposely break it
Who said I planned on using it now? I merely want to know if anybody remembers.
PHP 7.0 yes, but not PHP 7.3+ :-) 
I upgrade on friday.
Hi! I already use NetBeans 9 on my other developing workstation, I don't like that it doesn't support PHP natively! Need to add NetBeans 8.2's plugins repo! I am waiting for the 10 version, it will have own PHP plugins.
Got you covered for brew, filed a pull request a couple hours ago. 
Don't forget the classic `php -l` There are scripts out there that allow you to run this recursively on a directory, as well as run multiple versions of it.
The methods used by these sites to detect usage are usually very crude and highly unreliable. In PHP's case, they often look for the X-Powered-By HTTP header, which only indicates that PHP is enabled on the server - it doesn't mean it's actually being used. People moving away from shared hosting (where PHP is usually always enabled, but often not used) to platforms like Wix for simpler sites will affect these figures. It also doesn't tell you anything about the degree of PHP usage - a simple static site that only uses PHP for the contact form counts the same as a complex web application that uses PHP for everything. As others have also mentioned, it's also fairly common to disable this header, so it's not present on sites that do use PHP. Increased usage of services like CloudFlare that sit between the real web server and the visitor can also affect these figures. To date I don't think I've ever seen any site or statistics that I believe can reliably indicate the (change in) usage of a language. All of the methods have fairly major flaws. Searches can be skewed by people going direct to documentation or using other search engines. Stats from sites like [GitHub Octoverse](https://octoverse.github.com/projects#languages) and the SO Developer Survey can be skewed by things like what people are taught in schools and universities or people using other platforms (eg. GitLab, BitBucket).
Any kind soul to translate this seemingly important information into plain English for someone who is completely out of the loop?
So, supported
The guy that made the PHP framework Laravel wants to play a virtual game of car-soccer (RocketLeague) with a friend against the current top-player (SqMu) of said car-soccer game, 2 against 1. They are either betting 1k or paying SqMu for the honor.
This has got nothing to do with PHP.
&gt; I'd rather he sold a PHPStorm plugin to be honest Why though? What's the point? A tool like this should really be part of your build pipeline not part of an IDE set-up, it would be a nightmare to maintain across teams using different versions and different IDE's.
Too bad your post body is deleted. You shouldn't have to justify your actions to people on the internet that only want you to acknowledge their superiority. 
&gt;I'm really curious what advantages such service brings over the local setup The exact same advantages that ANY SaaS platform offers you. You don't need them but they offer a time-saving shortcut and one less thing for you to maintain. SaaS is not for me in general and from your post it looks like you're in the same boat but I do see the appeal of them.
Thank you, it is much clearer now. 
Can't find any information on 7.4 release date, but if is so I am eager to wait for this amazing release! Just thinking of performance improvements and typed properties makes me so happy :)
Or... * Something that uses TypeError or Reflection expects 'integer' or 'boolean' instead of 'int' and 'bool' * If a heredoc had a certain string in it. * Number-like strings are used as integers with ArrayAccess * The same references is used in a single statement . * Traversable keys aren't strictly integers * `image/x-ms-bmp` was an expected type from `getimagesize()` * Fractional parts returned from the mysql timestamps/datetimes were not expected. * Math operations with SimpleXML objects can be coerced into floats instead of integers. There's probably more. These are all fair changes, but I don't think its fair to say these were all deprecated (or at least documented as such _deprecated_) before the release. IMHO, there should be a better way to migrations than just forcing everyone to update code. We wouldn't be here today if all of the foundations the computers are built on followed a similar philosophy.
As much as I like Laravel this has nothing to do with PHP and we don't need /r/php turning into Taylors tweet feed 
That is exactly the force of PHP ecosystem, to limit the breaking changes :) (yes Python, I am pointing at you)
While the full IP might change, generallt the first two octets won't change.
Very good points. I do however think that fingerprints for common software are also checked, Wordpress etc. Also, if you're looking at bigger applications, PHP could be only a part of much bigger stack. &amp;#x200B; &amp;#x200B;
Not everyone is diligent enough to run static analysers locally before \`git push\`. A lot of commits in our code base look like "PSR fix", "Psalm fix", "Keeping PHPStan quiet" etc.
&gt;Not everyone is diligent enough to run static analysers locally before \`git push\` Huh? What are you talking about? I said it should be in the build pipeline, not at a local developer level.
[removed]
That's OK, just hang in there. One day I'm sure you'll be able to read more than one sentence at a time.
It is interesting. Thank you for that. But for your database backup on the mysql part you should add/or pass (maybe with db\_config\['DB\_OPTIONS'\]) additional flags like \--routines (Stored procedures and such) \--hex-blob (better binary dumps) \--add-drop-table
Ah yes, 'Bebo', a name that evokes the pinnacle of good web design: https://www.dailyedge.ie/bebo-memories-1398015-Apr2014/
PSA: There is already a tagged XDebug release in PECL that is compatible with PHP 7.3: [**2.7.0beta1**](https://pecl.php.net/package/xdebug)
Sorry to say this, but you're wrong. At least here in Europe (lived in two countries) MOST providers I've worked with, actually use dynamic IP ranges where even the first octet changes (different A class). Some even use about 4 different A class IP ranges for the same connection. Making this assumption will result in a great annoyance for our users.
$alpha = range('a', 'z') + ['.', ' ']; Would be much shorter for your characters
thank you
Numbers of **real** jobs offered (in my small country but it is, in some extend, representative of the global reality) per language: * Java 829 * C# 566 * Javascript 410 * PHP 297 * Python 135 * Wordpress 89 * Laravel 54 (Some PHP jobs are Laravel in disguise) * Ruby 44 (lol) PHP it's in a really comfy 4th place (almost doubling Python). 
What is the point of this?
Maybe now that they've finished fucking around with that stupid new editor they'll focus on bringing their codebase into the 21st century. But I doubt it.
Some system uses email, so they will send you an email when the operation is done. Since your system doesn't have a high demand (such as 1000 calls per second), then you don't need an MQ (Message Queue) system. PHP lacks a schedule feature, however, you could use the CRON command of Linux (or schedule of windows) that call a PHP script every time. Why do you need a schedule job?. You will need it to check regularly if the pending job is finished or not. If the job finished then you could execute the next process in the queue. 
Thumb up, creating a PHP module is really a PAIN IN THE BUTT.
&gt; through extensive research we learned that CPUs prefer to be hot, so we’ve added more short codes to each page to ensure you never get below a 2 second render time, and your CPU never cools down
What advantage gives me 10 $ a month at https://styleci.io/ over `vendor/bin/php-cs-fixer fix src`?
It'd be a big step forward if they adopted something like Bedrock as their application structure, so you could manage plugins and themes with Composer by default, not to mention the fact that it'd make the whole thing more secure. But I don't see that happening any time soon either.
Just look at it.
I feel that WordPress is pretty negligent these days. There is no reason to justify still support PHP 5.x branch other than wanting to maintain their high level of adoption. They would rather put usage numbers above security concerns and developer happiness. 
the monkey shakespear thing
I also wait typed properties. And also null coalescing assignment operator could be really handy time to time. 7.3 didn't get any new fun stuff.
That won't work
It works dude.. Try it out before complaining
It wouldn't have 30% marketshare of ALL websites on the Internet if they would've made it harder to manage plugins. 
I bet that their bigger audience are not developers
Every time i hear or read Bebo I think of the Legends of Tomorrow now with [Beebo The God of War](https://imgur.com/a/cHArzz8)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/b6WcDz0.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ebaarv0) 
Hello, that's not what I meant. What I meant that in PHPStorm, when I type `new Comm` I get auto-completion (what Netbeans can do as well), but when I proceed to e.g. pick `Symfony\Component\Console\Command\Command`, it does not only auto-complete `Command` in place, but it also adds `use Symfony\Component\Console\Command\Command;` to the top of my file, neatly under my other use-statements. And that is a thing Netbeans doesn't do.
https://3v4l.org/2HBCa
Windows dev here. Right now, it is not compatible with sourceguardian. Sigh 
Lol
Accidental compatibility?. Sure :-3 Technically Wordpress acts differently, it works with 5.2 and it could supports 7.2
It's almost like developers aren't their biggest audience.
I just wondered if anybody remembered it because merely wanted to *mention* it in a StackOverflow comment. I've unsubscribed from this sub now, seems like a shitty community, within the last week I joined another programming sub and asked for some advice on how to get back up to speed, and it was highly upvoted and there were lots of great suggestions.
Don't think his point was to make it harder. With a composer like system in place, they could easily make the marketplace use compose under the hood instead of downloading it. With that, the composer.json would be updated. Win-win.
How to lure good programmers: indicate the salary. 
I'm so glad I got out of WP development earlier this year. If you've been following the progress to get to this point it's pretty clear this was a rushed release. Just a matter of time until this blows up in their faces.
That is pretty much my point... they are prioritising audience numbers over everything else
PHP was not designed to be concurrent, and the language itself does not allow the developer to write parallel algorithm/threads/etc... PHP has a long history, at the very beginning it was just a tiny, simple templating language for HTML.
And they’re the most-used CMS... 🤔
Exactly. The existing system makes it harder for developers, who for any non-trivial Wordpress site tend to be the ones who build and maintain it, but it wouldn't exactly be difficult to rebuild it to use Composer.
Meh, i don't see this coming - it could if guys from PHP had the balls to make some pretty awesome backward-incompatible changes and wanted to make PHP more of a serious programming language. But it seems like it won't come in any forseable future. Yeah, maybe in PHP12 - till then wordpress is pretty safe with their shitty codebase.
Still unreadable global scope functions running the entire platform? Yeah, I'll continue to pass.
21st century? Take a look: [https://github.com/WordPress/WordPress/blob/master/wp-includes/post.php](https://github.com/WordPress/WordPress/blob/master/wp-includes/post.php) almost 7k lines of array driven development (and that's just one file). I don't think they will ever bring their codebase to 21st century. Not to say it's impossible, but i doubt they have any plans it that regard.
I have not sorted in code in a decade. If your code requires to sort an information, then this information must be stored somewhere. And, this somewhere it is usually the database, and the database does a better job sorting information. 
Does Anyone Know A Website for Cool Bebo Profile Names? ^ the questions up there stupid
I understand the developer cannot do much with parallelism because of the constraints of the language (though libraries like pthreads do enable this). I mean why are the underlying implementations in the interpreter not written such that they are concurrent (e.g. PHP uses mergesort under the hood, but it's written to only use one thread).
While I agree most sorting would occur in a database, there are still use cases where array manipulation does occur in code.
Today is a great day to pick up accounts from sites like Upjerk, Freelancer and Guru. I bet there will be loads and loads of broke-ass websites. 
You also need to define keys that don't exist in first array or use `array_merge()` $alpha = range('a', 'z') + [26 =&gt; '.', 27 =&gt; ' ']; &amp;#x200B;
&gt; broke ass-websites *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
They won’t leave SVN to Github. There are issues over 6 years old. This year, they took 7 months to fix a single unsanitized input. 
mailparse is also not compatible for now.
That’s not what “required” means. And as others said, not breaking compatibility with 5.2 *is* supporting it. 
I dunno if this will help, but I'll take a shot. We have a system that processes "widgets". We have a web-based interface, accessible from anywhere inside the office, that is basically a form to select which widgets to process and what process to do on them. So, there's a couple form fields, and a bunch of buttons on the page, and some GIFs that flash red/green, etc and some &lt;SPAN&gt; elements that may have text in them to tell anyone looking at it what the system is doing at the time. This is all accomplished via AJAX calls to background scripts that give status updates; as I recall, the poll time on these is between 5-10 seconds depending on which it is. In your context, I suppose your users could each have their own instance, if your server would handle that. The user basically just leaves the window open and checks it once in a while to see if it's done, if they need to push another button for another operation, etc.
&gt; That's OK, just hang in there. One day I'm sure you'll be able to read more than one sentence at a time Thanks for the jabs and sarcasm. Running the static analysis tools in the build process rule out exactly the problem you described "Not everyone is diligent enough to run static analysers locally before \`git push\`" and you're right most devs won't. That is the very reason you have it in the build pipeline so nothing can go live without passing any analysers/tests you put in place. So again.... my original question...... Why have it in PHPStorm?
It looks like a poor man’s version of Ghost
[https://github.com/stackery/php-lambda-layer](https://github.com/stackery/php-lambda-layer)
Imagine a world when \`protected const string $LEVEL\_DEBUG = 'debug';\` is possible :)
First time a prod server gets pwned by this, I'mma be right over here with a big bowl of popcorn.
PHP is much more than WP. PHP 7.x is also benchmarked &gt;= Python 3.x as well as ruby 3.x. Out of the popular loosely typed languages, only node 10.x was faster. It has really legible OOP syntax (IMHO). And there are some quality libraries and frameworks out there. Symfony, Zend, Laravel, ReactPHP, Pthread, etc. WordPress might be ugly but it works. It came from &lt; PHP5 IIRC (idk specifically that was before my dev-time). It is what it is and a lot of non-tech people choose to use it. And a large percentage of enterprise blog website use it in some way. I’m glad I don’t have to deal with it anymore (thank you baby Jesus) but catering to your consumer is the most important aspect of software/web dev. They have done that well. 
 Just 'cause something isn't sexy doesn't mean it still isn't super important. Middle management and HR falls in love with sexy trendy stuff that comes and goes. 
I think "REEEEE" would have been a better name for it
Upgrading right now (building new containers) and if CI runs through, it will go into Production. =)
&gt; Is there a reason for not using concurrency? Concurrency is really hard. Avoiding a really hard problem is often better than trying to solve a hard problem. &gt; I mean that the c data structures and algorithms in the php interpreter source code aren't concurrent. You should look at what you would need to do to make that work. And then bear in mind it would have had to be done using C89 libraries. 
Hey! More than half of that is blank lines and comments! :)
I hope you don't get my feedback wrong, because I love PHPStan, the work you do and I'm also a supporter on Patreon. I can only say for me, I'd love to see further improvements in PHPStan itself - it runs on our CI servers and that's all we really need. I'm not a big fan of auto fixing, etc. It's too much magic going on and I rather prefer a developer looks over it, understands the problem (so he also hopefully learns something for the future) and then fixes it. Also I'd rather prefer to run everything on one CI service than splitting it into 20 different CI services - like 1 CI service PHPStan, one CI service for code style, one CI service for code coverage, one CI service for building a docker container, one CI service for ... Well, you get it. Not a huge fan of this. This is just my personal opinion - I hope it's useful for others though and you do good business with it. But for me, I don't see how it would be useful.
I think most people who can implement a programming language have done concurrency and data structures in their lifetime. PHP has been making impressive performance changes over the last few years using very complex algorithms. I don’t think they’d ignore making things concurrent without a better reason than it being difficult. Does c89 not have posix bindings for threads?
I think you overestimate the cost of array operations, and vastly underestimate the costs of working with threads. Any system that uses threads exclusively because it's hoping to achieve multi-core parallelism and have multiple CPUs running code (as opposed to something like Apache*) is a system that's taking on a lot of overhead in the hopes that the amount of time it takes to run the sum of the cost of the work and the cost of the overhead on a few CPUs still manages to be lower than the cost of the work alone on a single CPU. Basically threading (on CPU bound tasks) is only ever worth it if you're breaking down a big set of tasks that need &gt;100% of the CPU time to run into smaller chunks that lets you end up with fewer or no tasks that need more CPU time than they're able to get. In PHP what is it someone does that needs anywhere close to 100% of the CPU time? Hopefully nothing - the CPU bound tasks common in the PHP world are usually relatively small things. Resolving a template into an actual response, sorting reasonably sized arrays or scanning them, etc. should all take a tiny bit of CPU time compared to what the CPU has available. Things that are CPU bound and also 'big' tasks that need a lot of CPU time is generally better handled elsewhere by systems meant to do heavy data processing or the like that can make their own reasonable decision about how to implement the solution. *footnote: Apache is an example of using threads not *exclusively* in order to get multiple CPUs able to run code in parallel, it also uses threads because it allows a request's handler to be put to sleep and not need any CPU time when the request is waiting for the network to finish sending the request. Apache can be used on only a single CPU using this architecture and work just fine if you're talking about serving a website that doesn't get that many requests.** **footnote to the footnote: It's also true that Apache's threading model for handling requests isn't the most performant due to the cost of creating new threads regularly and the OS having to manage scheduling so many threads. Event loops combined with modern OS features like epoll/kqueue mean that you can get away with few to no threads and get great performance.
&gt; I think most people who can implement a programming language have done concurrency and data structures in their lifetime. There's a difference between learning about something and being able to implement it in a large project. &gt; PHP has been making impressive performance changes over the last few years using very complex algorithms. Most of the performance gains have come from making things simpler so that there is less copying of data around. &gt; I don’t think they’d ignore making things concurrent without a better reason than it being difficult. Okay then. &gt; You should look at what you would need to do to make that work, and what the effect would be on performance. And &gt; then bear in mind it would have had to be done using C89 libraries. Really, you should try implementing it. And then see how you feel about avoiding complexity.
Can you build full fledged websites with ghost these days? Or is it still very much blog exclusive? 
I'm not up to date with the rfcs for not nullable properties that don't have values at runtime- expecting that it's legal for them to be null until you try to assign a value to them or access them before they have a legal value ? What's the gist.
Depends upon your perspective and how much heavy lifting you're willing to do. You can theme Ghost such that it has the appearance of a business site; after all isn't this how WordPress began? A blog that folks realized could provide a more generalized framework and themes and plugins were built around this nucleus... then Bebo was released and all torn asunder. Maybe check its [Marketplace](https://marketplace.ghost.org/) or [ThemeForest](https://themeforest.net/category/blogging/ghost-themes) to get an idea of where current development is? I love its editor, although use it for blogging.
PHP has always been faster than Ruby and Python. That isn’t new.
What the actual fuck?
My food suddenly wants to become uneaten.
Why don't you compare it to statically typed languages? (There is only static and dynamic - loose/weak and strong aren't well-defined)
Yes but developers build websites for complete idiots to use and manage. And ruin.
Thank you very much. I did it with gearman. It seems very powerful. &amp;#x200B; Thanks again
I would assume that this would make most php applications less efficient because the majority of datasets are very small. 
WP does not require PHP 7.2; it is only recommended. WordPress' minimum requirement is PHP 5.2.4. It's been a month or two since I looked but WP doesn't use any features introduced by PHP 7. WordPress **doesn't even use namespaces.**
They never do manage them though. Most of the time the devs wind up doing that anyway, so best to optimise for the dev's workflow.
That’s not been my experience but then everyone has different kinds of clients.
I made some decent skins back in the day. 😂
What hilariously broken API are they going to release this time?
Forget Namespaces, it barely uses classes appropriately. They basically just jam a bunch of procedural crap into classes. They don't really seem to understand and/or care about object-oriented code at all.
I'm going from memory here, but basically this: ```php class Example { public string $foo; } $ex = new Example(); var_dump($ex-&gt;foo); // uninitialized(string) ```
Oh, I think the real question is, can you easily add a store, with payment options out of the box, to Ghost, etc? That's what's driving WP these days. I've often defaulted to WP for exactly this reason. Woocommerce is the super-plugin that gave WP its current market share.
1. Release some of your work as open source projects. 2. Wait for the contributors to start rolling in. 3. Hire contributors. 
Very true. WP doesn't even offer any kind of auto-loader feature for plugins or themes to use, even though it's been proposed (with patches!) multiple times over the last six+ years.
Awesome. 
&gt; The largest improvements in 7.3 include support for Foreign Function Interface (FFI), allowing programmers to write inline C code inside PHP scripts. Though this feature does not presently provide the same level of performance as native PHP code, it can under certain circumstances be used to reduce the memory footprint of a given task. PHP 7.3 does not have FFI support (or only via 3rd party extensions that already existed previously).
Wordpress is still a thing, we have to accept that. Since it's open source, when ever people complain about it, why not help clean it up? Submit PR's instead of complaining? I mean we are PHP developer, are we not?
But that's still awesome. Now I can muck with ACLs without forking setfacl every damn time or anything exec()'d a ton of times with a corresponding API.
PHP is much more than WP, on the other hand the "performance" of PHP relative to things like Python in benchmarks is basically irrelevant. It isn't faster to a high enough degree to make an impact in most types of project, and in the things where in theory it would matter like machine learning, data science, etc, then Python has a massive ecosystem of modules/libraries that use C, CYthon, JIT, etc to do the heavy lifting and are much more performant than anything PHP can offer.
Awesome thanks for the link
In which case would happen? I know that it is important for games or graphics process but PHP it's not the tools for those tasks and if it needs some sort, then the set of information usually is really small. Anyways, PHP can run multiple concurrencies, if you call a different thread. For example, it is possible to create a new thread using curl to call to himself. https://stackoverflow.com/questions/9308779/php-parallel-curl-requests 
[removed]
They're not still using MD5 for passwords are they? Please tell me they aren't...
You can use Psalm in your IDE now! Check out https://getpsalm.org/docs/language_server/ 
that is correct
$50 an install? https://github.com/WordPress/classic-editor
Brilliant! I absolutely love Psalm. Please implement generics :) or tell me how to do that.
Now this is putting this in context.
\&gt; Thanks for the jabs and sarcasm. I'm afraid you deserve it. But you sound like a decent guy so I'll try and make my comment even more explicit. It's of no value to anybody to have the PSR/Psalm/PHPStan patches in Git history. Especially on hot branches where a lot of people merge from.
This is neither the time or place to use Logic. Cant you see that the children are having fun? 
You’re suggesting that a business alienate its largest customer base?
There's 2 big points here: 1. Nowhere did you mention that it's [Puppeteer](https://github.com/GoogleChrome/puppeteer) that actually makes the screenshot. In all honestly you aren't using PHP. You're just calling the tool by using PHP. 2. 75% of your blogpost is a configuration file with way too many comments A little extra point is that you shouldn't tell your users to save the file and run it in the browser. You should let that open for interpretation. More professional developers will actually run it from the command line. I'd say something along the lines of: "after executing the following code the screenshot is created"
You mean like https://getpsalm.org/docs/supported_annotations/#template-and-template-typeof
1. It's way past the point where a simple cleanup would suffice. Even if it was possible to fix the mess WordPress is, it would almost certainly require backwards incompatible changes that WordPress is so strongly against. 2. Why would someone waste time on fixing the myriad of issues WordPress has, if the same time could be spent on a project with a modern architecture and without a mountain of technical debt?
Haven't been for a long time, but you can still generate one manually, put it in the db table, and it'll get converted when the user next logs in.
The description for [`wp_hash_password()`](https://codex.wordpress.org/Function_Reference/wp_hash_password) says: &gt; Creates a hash of a plain text password. Unless the global $wp_hasher is set, the default implementation uses PasswordHash, which adds salt to the password and hashes it with **8 passes of MD5. MD5 is used by default because it's supported on all platforms.** You can configure PasswordHash to use Blowfish or extended DES (if available) instead of MD5 with the $portable_hashes constructor argument or property (see examples). Unless this is outdated and they use a different hashing algorithm now?
Anyone here who has some experience based perspectives or recommendations from using Swoole?
Last code update was 2 years ago so feel free: [https://github.com/mescon/Muximux/pulls](https://github.com/mescon/Muximux/pulls)
Can someone explain the FFI/C integration a little? I mean, C is a compiled language so how can you inline C code in an interpreted language such as PHP? Secondly, I understand this isn't actually released yet (it's not in 7.3 despite what the article says) but what will be the security implications when it does come out? Is this something that will eventually be enabled by default in core?
I wouldn't touch desktop application development in Erlang with a ten foot pole. If there ever was a strictly server side language, Erlang is it.
Here's three good reasons I wouldn't touch PWAs: AFAIK PWAs in a Microsoft world requires Visual Studio and all though the Community Edition is free, it only free for: "students and other academics, individual developers, open-source projects, and small non-enterprise teams". If you have 6 developers using the Community Edition, more than 250 PCs in your business or more than $1m USDs in annual revenue, you are breaking the Community Edition licensing terms. Microsoft recommends that you use: "Windows tailoring. Using simple feature detection, you can progressively enhance your PWA for Windows 10...". To me at least, this smells horribly like Microsoft old "Embrace and extend (then extinguish)" strategy, which always has been detrimental to everything open source and led to the famous browser wars of the start of the century. Personally, I don't touch proprietary software if it is anti open source. You can easily find several actively developed high profile Node/Electron based Microsoft applications, Visual Studio Code probably being the most famous. OTOH where are all the high profile PWAs Microsoft? Ps. Relative Deployment looks quite interesting...
You can but remember you may have hundreds or thousands of users all polling at the same time. Those requests need to be processed. And the more users you have the worse it gets. Meanwhile a websocket connection with no activity is hardly using any load at all. You are just maintaining the connection instead of doing a query or hitting a cache for every single request.
"This year, they took 7 months to fix a single unsanitized input." This is why I refuse to let anyone install WP on my server, besides the amount of unnecessary room it takes.
&gt;AFAIK PWAs in a Microsoft world requires Visual Studio and all though the Community Edition is free, it only free for: "students and other academics, individual developers, open-source projects, and small non-enterprise teams". If you have 6 developers using the Community Edition, more than 250 PCs in your business or more than $1m USDs in annual revenue, you are breaking the Community Edition licensing terms. If you need access to WinRT API within your PWA, then you need to package your PWA to either be sideloaded to published to the Microsoft store. You don't NEED Visual Studio as you can run the packaging/signing commands without it: [https://docs.microsoft.com/en-us/windows/uwp/packaging/create-app-package-with-makeappx-tool](https://docs.microsoft.com/en-us/windows/uwp/packaging/create-app-package-with-makeappx-tool). By packaging, you can still leverage PWAs auto update / offline features so it's not like you need to keep submitting your app. The idea here is this provides a light shim, simply redirecting to your web application all the while giving your client-side JavaScript access to the WinRT api. &amp;#x200B; &gt;Microsoft recommends that you use: "Windows tailoring. Using simple feature detection, you can progressively enhance your PWA for Windows 10...". To me at least, this smells horribly like Microsoft old "Embrace and extend (then extinguish)" strategy, which always has been detrimental to everything open source and led to the famous browser wars of the start of the century. Personally, I don't touch proprietary software if it is anti open source. Tailoring is an iffy topic. It could be sometime simple, like providing a snazzy start window icon. I think that is harmless. However, if you need access to non-standard things like contacts then this becomes a problem. Sure you could pull their contacts from an Office 365 Outlook Contacts, or Google, Zoho, LinkedIn, etc and those don't require investing into a Windows-only experience. Providing features like biometry, importing media from connected devices like camera, then yes you have to invest into the WinRT API. If you need something more Windows proof then much of Cordova / PhoneGap has these APIs abstracted. &amp;#x200B; &gt;You can easily find several actively developed high profile Node/Electron based Microsoft applications, Visual Studio Code probably being the most famous. OTOH where are all the high profile PWAs Microsoft? PWA Support is new. At this time the most notable are Twitter and Uber. Those are PWAs on their own and if you happen to be on Windows 10, then you can get a better experience. However, PWAs is not specific to Microsoft. PWA is a set of open browser technologies, so it's not like Microsoft is dictating the development of those technologies, rather are implementing them. Google is the company really driving this technology forward and has a section dedicated to desktop PWAs [https://developers.google.com/web/progressive-web-apps/desktop](https://developers.google.com/web/progressive-web-apps/desktop) &amp;#x200B; Keep in mind Windows "S" will not run Win32 apps, so Node/Electron apps cannot run on that version of Windows. &amp;#x200B;
That genuinely made me sad. And enraged. They support 5.2 which had the last release ~8 years ago.
Is it still pre namespace PHP?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I really hope so. While we’re at it let’s add throw declarations too!
The explanation is broken af. 1. It's not inlining. The actual code being executed has to exist in an external, already compiled library. FFI just gives you support for mapping between PHP and C datatypes, and invoke exported functions from PHP. It's cool, but it's not "inline C" by any measure a programmer would apply the term. 2. The feature *if approved* will wind up in 7.4 at best. Not 7.3
I've spent some time looking at the WordPress codebase. It's very fixable, but it would take drastic coordinated action that at this point needs to come from the top (Automattic). Also [it bears being asked again](https://www.reddit.com/r/PHP/comments/8vt12q/i_have_no_idea_what_to_build_if_anything_at_all/e1q8b06/): [are you still a racist](https://voat.co/v/videos/2609398/13140780)? 
And wrt security and by default enabling. It's a MASSIVE security quagmire. Using FFI you can do *anything* to f*ck your system up that the process has OS permissions to do. IMO it should never ever be enabled on a production machine ever. It's like eval(), if eval could also bypass every safeguard normally presented to scripts. &gt; Will this ever be enabled by default? Over my dead body.
WordPress is still to this day, at its core, very much event-driven procedural. They have an unhealthy obsession for "backwards compatibility" (despite their changes breaking plugins left and right all the time) so they refuse to change the core API very drastically. Even their new Gutenberg editor can be disabled with a single add_filter('use_block_editor_for_post', '__return_false'); in the "functions.php", the file at the center of a theme that runs on every request. It's still a bunch of global functions. The template matching is partly based on file names. Btw I don't work with WordPress anymore, it killed my joy of coding. My old job was straying away from WordPress when we could (mostly using Craft if we needed an actual CMS or custom things in Node), but as a web agency, we faced the reality that some clients were literally requiring WordPress. Depending on the project I either loved or hated my job, and projects could span over months. Spending 4 months loathing your job every day is not fun.
&gt; these days 
Time for me to think about forking WordPress and rebuilding it. 
&gt;wonders \^This!
WordPress is for people who need to manage a site but aren't interested in doing it; it's for people whose real job is marketing, sales, or IT, and the website is just something they have to deal with to get their job done.
I disagree on 1. After fleshing out proper objects and associated methods, the icky global functions could be refactored to (likely inefficiently) defer to those objects and their methods. Themes and plugins could phase out their usage of those functions, now marked deprecated. Eventually you probably remove those methods entirely. Of course, some themes and plugins won't update but that's open source for you. On 2, it's not just about WP. It's about the entire ecosystem. You don't just have to build the CMS, but also a dependable eCommerce extension, membership extensions, event management extensions, directory extensions, etc etc etc.
Mullenweg has set the direction for WP up to this point and I don't believe he's an Automatic employee, right? They run .com I think but not .org.
Or spend that time on atomic PRs for the existing codebase
While I could, what I have in mind would break so much that it mat be better to fork and start as a new project 
You'll find that most changes to core are slow moving. For example, there's a long standing effort to move to PHP7 that will eventually end up released. Which is to say, you could find people on the core team who could point you in a good direction with what you want to do that is most likely to be accepted into the code base.
Even huge changes as replacing the template system and database structure? 
Database structure would be a long ways off, but template is something that, assuming your idea had merit and became the accepted path forward for templating, could be implemented while maintaining legacy support, so more likely to have legs. But you'll always have to consider that you're operating along with a ton of other people to decide on a vision. If you want full control on a platform you use, that's a lot of responsibility, but also 100% control. For me, delegating that and learning the quirks is a way better way of spending my time.
Not an employee? He founded it, didn't he? Where did you think the "matt" part in Automattic came from? Also, Automattic employs developers to work on WordPress, which ends up both in .com and .org.
Ho boy lemme just pull my head out of my ass here.
Why not find another CMS that more closely matches your idea of proper code, and start using and contributing to that? I've jumped ship to \[Bolt\](https://bolt.cm) years ago, and they're hardly the only game in town, especially if you look beyond the PHP-based projects. &amp;#x200B; Trying to fix WP seems like a fool's errand to me - either you succeed, leaving your new thing largely incompatible with WP, or you don't, in which case you're just pissing into the wind.
I sit corrected. Though it is adding salt and doing 8 passes, so standard rainbow tables won't help.
Phew. Thanks for the explanations. I was a bit surprised by what I was reading regarding FFI. I've done a little C coding (I know just barely enough to be dangerous) and I couldn't for the life of me, see how this could possibly be a good idea. 
What's the security concern behind compatible code with an older php version?
Implying those sites actually update their WordPress installs.
Because you made the mistake of creating a Reddit thread instead of submitting an RFC.
It can not be fixed because they require crazy BC
&gt; WordPress is for people who need to manage a site but aren't interested in doing it; And, subsequently, don't do it, and subsequently, get their shit exploited. WordPress is for people who shouldn't be *operating* a website at all. Create "content" for it, maybe, but nothing else.
It doesn't use security-related functionality that was added in newer versions. Also, it fosters the idea that running an ancient version of PHP, that hasn't seen security updates in forever, is a viable idea. That's apart from the code being archaic itself. There's best practices, which are best practices for a reason, and WP manages to avoid a lot of them.
have you seen `wkhtmltoimage` for `phantomjs` alternative? its distributed as single binary and doesn't depend to any native library
&gt;Also, it fosters the idea that running an ancient version of PHP, that hasn't seen security updates in forever, is a viable idea. Stretching it a bit aren't you? Being compatible doesn't mean they're making a political statement on not upgrading. Think you're reading way too much into it.
&gt; could technically go whatever route the community chose to. As far as the stewards of the community and the code are letting it. And since those stewards are Automattic, those roads wouldn't go too far. Not that *that* is a bad thing in itself. It's their project, of course they get to call the shots.
&gt; Themes and plugins could phase out their usage of those functions, now marked deprecated. Eventually you probably remove those methods entirely. Given the user's lack of willingness to upgrade, that would be somewhere around the year 2073.
But they are. They're saying "it's okay to still run 5.2, we'll keep supporting it 👌" 
I've started to browse /r/phphelp a while ago. I'm not able to solve all the questions that come up there, but just looking at the questions and trying to figure out if you can solve it, gives practice and occasionally, you're able to help someone who's not yet as far ahead as you are. &amp;#x200B; But in general, webdesign is quite a wide field by now. Think about the parts that you would like to be best at and focus on those. Just don't try to do everything at once or you will overwhelm yourself. 
Here's a sneak peek of /r/PHPhelp using the [top posts](https://np.reddit.com/r/PHPhelp/top/?sort=top&amp;t=year) of the year! \#1: [Please stop closing your PHP tags](https://np.reddit.com/r/PHPhelp/comments/8tq4h7/please_stop_closing_your_php_tags/) \#2: [Making /r/PHPHelp better, Pt 2.](https://np.reddit.com/r/PHPhelp/comments/8jejyf/making_rphphelp_better_pt_2/) \#3: [MVC](https://np.reddit.com/r/PHPhelp/comments/9t9jxw/mvc/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
&gt; why not help clean it up? Because they don’t want it to be cleaned up. Any attempts will just be rejected. 
Once again, because of history, PHP was not designed to be a server itself, but used as a CGI script instead, which means that the binary would do a single rendering and time. As of today, PHP-FPM does use multiple processes, but threads, not processes, PHP script memory is never shared. It's a design choice I guess.
Hahaha. Happened to me once but it turns out that count() was being used on strings that were always one char max so it looked like it worked but it really should have been strlen 
could also try [https://github.com/symfony/panther](https://github.com/symfony/panther)
Is there some migration guide or list of BC breaks?
I usually try to post this on release day, so apologies for being a little late with this. Please let me know if you have any corrections or suggested alternatives and I'll update the post!
For the number of attackers going after the ability to compromise \~30% of all sites, the core pretty rarely is the issue. Honestly, the only way I'd see attacks go down significantly would be to force limited login attempts or 2FA on all users. After that, maybe a way to differentiate which plugins have gone through testing and which haven't. As far as support PHP 5.x - while I'm sure that adds some risks, isn't that more the fault of the web host that's not keeping their servers up to date? WordPress could force that to happen with an update, but ultimately it's the web host's responsibility to make sure they're providing secure hosting.
[removed]
[removed]
I recently had to use a SOAP API for a crm. The built-in SOAP class that comes with php is what I used and didn't have any issues. http://php.net/manual/en/class.soapclient.php
DO I need to uninstall PHP 7.0 from my Ubuntu OS before upgrading to 7.3?
If you installed PHP 7.0 using Ondřej Surý's PPA then no, you can install both side-by-side with no problems!
Thank you. One more question is it okay to run this command to purge PHP: sudo apt-get purge php7.* or do i need to install "ppa-purge" and then run "ppa-purge ppa:ondrej/php-7.0"?
That first command should work just fine. I'm unfortunately not familiar with `ppa-purge`myself, so I can't really speak to that part.
Is there a server-noob way to use different php versions in different folders? With some sort of htaccess code I mean. Thx, a lot
I use this allot on my job. It works fine. 
Same here. Works well 
[removed]
Used that for a SOAP API in 2014 and it was absolutely fine for my needs.
I used the zend component to do soap last time. Worked great. 
I would say that it's a good thing in a world where software developers can be trusted to write solid, reliable, bug free code that's well understood. I think there are some larger shops that will choose to turn this on and they'll make excellent use out of it in ways that are only slightly risky, and those risks can be managed and mitigated. I also think it is anathema to any shared hosting environment of any kind. Bottom line; PHP already has more than enough loaded guns pre-aimed at feet. If we're going to include an atomic warhead, then I'd at least like it to not also come pre-armed.
OP could did it in npm. He didn't.
I saw in another thread that you aren’t a fan of this RFC. Do you have any links to discussion on it and the security implications? I had a look at the internals mailing list, but didn’t manage to find anything. 
Well you're quite right that it can create new possible scenarios for attacking servers, but first of all i'd need to expose that function for attacker, which basically implies remote code execution (well, assuming that you are no providing user to input anything to FFI without prior checks...) - but if you have remote code execution you have basically limitless pwning capabilities - so, what's the deal? Or maybe i'm missing something? I don't think that we should limit language because someone can do bad things with them, it's like forbidding usage of knives just because you could kill with them. But as a matter of facts - i don't think that this should be enabled by default, it's rarely needed feature but quite powerful in right hands.
The PHP team is working really hard on admin notices and education efforts to help people realize upgrading is important and who they need to contact to do so. And it isn't a lack of willingness, but rather a precedent that's been set by the WP team and their dogmatic attachment to BC. Something has to be compromised. Compared to how long we've had to teach people their cars need oil changes, WordPress is really fairly new..
It works fine for simple use-cases. If you need more complex API that utilizes MTOM support you'll have to extend the client and write it on your own. NuSoap it's kinda old and gives me creeps when I see one file with multiple classes. Though someone managed to refator that in a github repo, forgot the name.
with homebrew you can unlink/link versions of php to the binary alias.
https://github.com/phpro/soap-client
https://www.google.com/search?q=php+security+book 
Can't get it working. I am using brew under macOS Mojave. &amp;#x200B; $ sudo pecl install oci8 downloading oci8-2.1.8.tgz ... Starting to download oci8-2.1.8.tgz (194,154 bytes) .........................................done: 194,154 bytes Warning: "continue" targeting switch is equivalent to "break". Did you mean to use "continue 2"? in Validator.php on line 1933 Warning: "continue" targeting switch is equivalent to "break". Did you mean to use "continue 2"? in /usr/local/Cellar/php/7.3.0/share/php/pear/PEAR/PackageFile/v2/Validator.php on line 1933 11 source files, building running: phpize Configuring for: PHP Api Version: 20180731 Zend Module Api No: 20180731 Zend Extension Api No: 320180731 Please provide the path to the ORACLE_HOME directory. Use 'instantclient,/path/to/instant/client/lib' if you're compiling with Oracle Instant Client [autodetect] : instantclient,/opt/instantclient_12_2 building in /private/tmp/pear/temp/pear-build-rootmRar2F/oci8-2.1.8 running: /private/tmp/pear/temp/oci8/configure --with-php-config=/usr/local/opt/php/bin/php-config --with-oci8=instantclient,/opt/instantclient_12_2 checking for grep that handles long lines and -e... /usr/bin/grep checking for egrep... /usr/bin/grep -E checking for a sed that does not truncate output... /usr/bin/sed checking for cc... cc checking whether the C compiler works... yes checking for C compiler default output file name... a.out checking for suffix of executables... checking whether we are cross compiling... no checking for suffix of object files... o checking whether we are using the GNU C compiler... yes checking whether cc accepts -g... yes checking for cc option to accept ISO C89... none needed checking how to run the C preprocessor... cc -E checking for icc... no checking for suncc... no checking whether cc understands -c and -o together... yes checking for system library directory... lib checking if compiler supports -R... no checking if compiler supports -Wl,-rpath,... yes checking build system type... x86_64-apple-darwin18.2.0 checking host system type... x86_64-apple-darwin18.2.0 checking target system type... x86_64-apple-darwin18.2.0 checking for PHP prefix... /usr/local/Cellar/php/7.3.0 checking for PHP includes... -I/usr/local/Cellar/php/7.3.0/include/php -I/usr/local/Cellar/php/7.3.0/include/php/main -I/usr/local/Cellar/php/7.3.0/include/php/TSRM -I/usr/local/Cellar/php/7.3.0/include/php/Zend -I/usr/local/Cellar/php/7.3.0/include/php/ext -I/usr/local/Cellar/php/7.3.0/include/php/ext/date/lib checking for PHP extension directory... /usr/local/Cellar/php/7.3.0/pecl/20180731 checking for PHP installed headers prefix... /usr/local/Cellar/php/7.3.0/include/php checking if debug is enabled... no checking if zts is enabled... no checking for re2c... no configure: WARNING: You will need re2c 0.13.4 or later if you want to regenerate PHP parsers. checking for gawk... no checking for nawk... no checking for awk... awk checking if awk is broken... no checking for Oracle Database OCI8 support... yes, shared checking PHP version... 7.3.0, ok checking OCI8 DTrace support... no checking size of long int... 8 checking checking if we're on a 64-bit platform... yes checking Oracle Instant Client directory... /opt/instantclient_12_2 checking Oracle Instant Client SDK header directory... /opt/instantclient_12_2/sdk/include checking Oracle Instant Client library version compatibility... 12.1 checking for ld used by cc... /Library/Developer/CommandLineTools/usr/bin/ld checking if the linker (/Library/Developer/CommandLineTools/usr/bin/ld) is GNU ld... no checking for /Library/Developer/CommandLineTools/usr/bin/ld option to reload object files... -r checking for BSD-compatible nm... /usr/bin/nm -B checking whether ln -s works... yes checking how to recognize dependent libraries... pass_all checking dlfcn.h usability... yes checking dlfcn.h presence... yes checking for dlfcn.h... yes checking the maximum length of command line arguments... 196608 checking command to parse /usr/bin/nm -B output from cc object... ok checking for objdir... .libs checking for ar... ar checking for ranlib... ranlib checking for strip... strip checking for dsymutil... dsymutil checking for nmedit... nmedit checking for -single_module linker flag... yes checking for -exported_symbols_list linker flag... yes checking if cc supports -fno-rtti -fno-exceptions... yes checking for cc option to produce PIC... -fno-common checking if cc PIC flag -fno-common works... yes checking if cc static flag -static works... no checking if cc supports -c -o file.o... yes checking whether the cc linker (/Library/Developer/CommandLineTools/usr/bin/ld) supports shared libraries... yes checking dynamic linker characteristics... darwin18.2.0 dyld checking how to hardcode library paths into programs... immediate checking whether stripping libraries is possible... yes checking if libtool supports shared libraries... yes checking whether to build shared libraries... yes checking whether to build static libraries... no &amp;#x200B;
 creating libtool appending configuration tag "CXX" to libtool configure: creating ./config.status config.status: creating config.h running: make /bin/sh /private/tmp/pear/temp/pear-build-rootmRar2F/oci8-2.1.8/libtool --mode=compile cc -I. -I/private/tmp/pear/temp/oci8 -DPHP_ATOM_INC -I/private/tmp/pear/temp/pear-build-rootmRar2F/oci8-2.1.8/include -I/private/tmp/pear/temp/pear-build-rootmRar2F/oci8-2.1.8/main -I/private/tmp/pear/temp/oci8 -I/usr/local/Cellar/php/7.3.0/include/php -I/usr/local/Cellar/php/7.3.0/include/php/main -I/usr/local/Cellar/php/7.3.0/include/php/TSRM -I/usr/local/Cellar/php/7.3.0/include/php/Zend -I/usr/local/Cellar/php/7.3.0/include/php/ext -I/usr/local/Cellar/php/7.3.0/include/php/ext/date/lib -I/opt/instantclient_12_2/sdk/include -DHAVE_CONFIG_H -g -O2 -c /private/tmp/pear/temp/oci8/oci8.c -o oci8.lo mkdir .libs cc -I. -I/private/tmp/pear/temp/oci8 -DPHP_ATOM_INC -I/private/tmp/pear/temp/pear-build-rootmRar2F/oci8-2.1.8/include -I/private/tmp/pear/temp/pear-build-rootmRar2F/oci8-2.1.8/main -I/private/tmp/pear/temp/oci8 -I/usr/local/Cellar/php/7.3.0/include/php -I/usr/local/Cellar/php/7.3.0/include/php/main -I/usr/local/Cellar/php/7.3.0/include/php/TSRM -I/usr/local/Cellar/php/7.3.0/include/php/Zend -I/usr/local/Cellar/php/7.3.0/include/php/ext -I/usr/local/Cellar/php/7.3.0/include/php/ext/date/lib -I/opt/instantclient_12_2/sdk/include -DHAVE_CONFIG_H -g -O2 -c /private/tmp/pear/temp/oci8/oci8.c -fno-common -DPIC -o .libs/oci8.o /private/tmp/pear/temp/oci8/oci8.c:1459:31: error: expression is not assignable GC_REFCOUNT(column-&gt;descid)--; ~~~~~~~~~~~~~~~~~~~~~~~~~~~^ /private/tmp/pear/temp/oci8/oci8.c:1540:53: warning: data argument not used by format string [-Wformat-extra-args] php_error_docref(NULL, E_WARNING, "%s", errbuf, sizeof(errbuf)); ~~~~ ^ /private/tmp/pear/temp/oci8/oci8.c:1881:10: error: expression is not assignable ++GC_REFCOUNT(connection-&gt;id); ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~ /private/tmp/pear/temp/oci8/oci8.c:1891:10: error: expression is not assignable ++GC_REFCOUNT(connection-&gt;id); ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~ /private/tmp/pear/temp/oci8/oci8.c:1902:6: error: expression is not assignable ++GC_REFCOUNT(connection-&gt;id); ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~ /private/tmp/pear/temp/oci8/oci8.c:2054:4: error: expression is not assignable ++GC_REFCOUNT(connection-&gt;id); ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~ /private/tmp/pear/temp/oci8/oci8.c:2451:3: error: expression is not assignable ++GC_REFCOUNT(column-&gt;stmtid); ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~ /private/tmp/pear/temp/oci8/oci8.c:2460:76: warning: format specifies type 'int' but the argument has type 'zend_resource *' (aka 'struct _zend_resource *') [-Wformat] php_error_docref(NULL, E_WARNING, "Unable to find LOB descriptor #%d", column-&gt;descid); ~~ ^~~~~~~~~~~~~~ /private/tmp/pear/temp/oci8/oci8.c:2495:4: error: expression is not assignable ++GC_REFCOUNT(column-&gt;descid); ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~ 2 warnings and 7 errors generated. make: *** [oci8.lo] Error 1 ERROR: `make' failed
I've ran into different CORS problems with my usual React - Symfony (PHP) stack. First thing, you need to set the `Access-Control-Allow-Origin` header from php, I've never used simpleSAMLphp, but somehow you should be able to modify the response before it goes out. Second thing, set the `Access-Control-Allow-Credentials: true` so the browser will expose the auth variables in header (e.g. cookies ) to you and your js. Third, you should set the [request.credentials](https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials) variable of every request to your server to "include", so the cookies are sent back to the server. *Note: This last thing has some problems with the new "privacy policies" of the latest safari browser, to circumvent this I have had to save my auth tokens in localStorage and then add them as headers.* &amp;#x200B;
Looks like it doesn't support 7.3. [This is a great resource for support statuses](https://blog.remirepo.net/pages/PECL-extensions-RPM-status).
To be honest, it depends on how extensive will the SOAP integration be in your application. If it's only a few service calls, you'll be perfectly fine with the built-in SOAP client (you only have to install the extension). However, if your application heavily relies on SOAP, you'll probably want something that's more convenient to use. Recommendations by /u/PolarZoe and /u/Wesobi are fairly good choices. You can also create your own wrapper. I had to do something similar in my previous workplace, where the app was SOA based, and it automatically switched between the built-in SOAP client and nusoap depending on the necessity. Regarding nusoap - don't touch it with a 10ft pole, unless absolutely necessary (IIRC there were some differences in how they handled XML namespaces and attributes). If you also need MTOM, you're shit out of luck and will have to do it on your own since PHP SOAP implementation doesn't support it, but it's most likely be a huge pain in the ass.
The same with MacPorts.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The vulnerability vector isn't *just* allowing user input to the FFI interface itself, but also all the data that potentially flows into bound interfaces. Can a judicious application of defensive programming avoid the potential for RCE using FFI? Sure. That's why there's never ever been an exploit involving eval() or include/require.... Oh wait.... &gt; I don't think that we should limit language because someone can do bad things with them. Listen before speaking. I never once said that this RFC shouldn't go forward. I said that the extension should not be enabled by default. There's a MASSIVE gap between those states.
I have a question? My English is'nt very well, please understanding. :) * I have to programm a function for the login and manage the user rights. Only two user have more rights. How i can solve this? * Second, i should make a data import (User data) from an existing system. I want that all users get a standart password and after the first login the have to change the password. * Thirdly, i should programm a interface for a label maker. * Last, generate automatically order summaries and evaluate these Could anybody help me, which Frameworks or which technology should I use? &amp;#x200B; Thanks for help :)
&gt; I saw in another thread that you aren’t a fan of this RFC. No you didn't.
 docker pull phpexperts/laravel-quickstart docker-compose up -d Sets you up with a full LEMP (Linux, Nginx, MySQL/PostgreSQL, PHP) environment, with Laravel preinstalled and configured to immediately register + authenticate users.
We currently have a setup like this and it's get messy overtime. Especially when you want to start using bundling or linting tools for your JS. The best long-term solution is to expose those variables via an API endpoint.
PHP is getting JIT and FFI in upcoming releases. With `php-ext-wasm` and similar you can already get some of the benefits that FFI would offer. In terms of performance in general things like preload, Swoole, Amphp, ReactPHP, etc. have brought some neat things to PHP lately. It is true that the "general purpose programming" ecosystem is larger in Python and others, as PHP has been stuck in the web application world for so long. Can't wait to see PHP evolve during the next decade.
On which you wait on average about three months per patch.
Would it be smart to enable FFI only in non-web SAPIs? I think the pthreads extension works this way.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
From experience, I agree with this 100%. Expose the vars via json api. Or even inject them in the page code.
Thanks.
Thanks.
I'd have minimal reservations about that. The vulnerability profile of a cli script is nothing like that of a web request.
Finally ! [http://php.net/supported-versions.php](http://php.net/supported-versions.php)
Amazing! Honestly didn’t see that coming. I always wondered why they don’t just show big red warnings for people on older versions, to help them upgrade. 
All at once? You can have multiple versions of php-fpm running on different ports and set the vhosts up to proxy to the correct one. I don’t believe you can do it with mod-php though. It’s probably one of the few cases where I like docker - just set up an fpm container with your code and proxy requests to it
Remi if you're looking for a CentOS repository.
Yes, that's CentOS 7. Thank you.
&gt; Talked to the team and we could aim for PHP7.2.
`phpexperts/laravel-quickstart` isn't a publicly available image.
Never render js or css files with php, it's always a pain not worth the trouble. php to css : either load a different file based on a php variable, depend on a class on the body tag in your css via cascade, or use css variables inlined in the head tag. php to js : json api, or inline script tag with php json\_encoded, js JSON.parse data in your html attached to the window object.
7 will already be deprecated by then.
But it still requires that you write code like it's PHP 4.
Take a look at the WordPress codebase and that will answer all your questions.
Thank you Jesus
😂
Why not by the end of 2018? Which already is the end of PHP &lt;7...
Thanks.
If your hosting with WPEngine they do... 
7.0 is already end of life now. PHP users should be on or moving to 7.2 at this point.
Not sure why you were downvoted. The WP codebase is... special.
Special, as in short bus.
For a mass market product dropping that bombshell with 3 weeks notice is pretty irresponsible. Their plan gives time to plan and communicate.
She posted an update: &gt; Talked to the team and we could aim for PHP7.2.
What are you even attempting to propose here?
Not proposing much. Posted it for others opinions on the social networks. Also maybe build one of our own.
&gt; why they don’t just show big red warnings They do show big white screen warnings.
VPS for a social network with 100 000 users is 10$ on Digital ocean. Are you really that cool?
I never even hinted that I was cool. Are you that cool?
Actually it's EOL already.
This is nonsense.. i will stick around however, im interested to see what your alternative/adaption turns out like
All the cool kids ride the short bus
Sounds like the onion news
Why on earth will they keep supporting EOL php-versions for another year?
Although Facebook indeed sucks, discussing this fact it is rather off topic in this sub. You are welcome to discuss any technical details of your upcoming great social network though. However, I am afraid these details would be more suitable for /r/phphelp either.
Here's a sneak peek of /r/PHPhelp using the [top posts](https://np.reddit.com/r/PHPhelp/top/?sort=top&amp;t=year) of the year! \#1: [Please stop closing your PHP tags](https://np.reddit.com/r/PHPhelp/comments/8tq4h7/please_stop_closing_your_php_tags/) \#2: [Making /r/PHPHelp better, Pt 2.](https://np.reddit.com/r/PHPhelp/comments/8jejyf/making_rphphelp_better_pt_2/) \#3: [MVC](https://np.reddit.com/r/PHPhelp/comments/9t9jxw/mvc/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
I agree about the 3 weeks - this should have been made a definitive decision right at the moment when the EOL of PHP versions &lt;7 was known. The way it is right now is still light years away from sanity.
Took them long enough. Also, it'll probably be the same procedural spaghetti, so not much to be excited about. 
OK fair enough. I ran WP on an older PHP version for testing some stuff a while back and didn’t see any notice. Is it only on PHP 5.2? 
Well, your comment here on this RFC is clearly negative - so it's easy to assume that you're against.
What questions? WP’s shit code doesn’t mean they wouldn’t encourage people to upgrade. They recommend higher PHP versions and apparently they *do* have a warning for older versions after all. 
Does it matter? 7.0 is infinitely better than 5.2. Better to support a version that was EOL in the past few months than one EOL a decade ago. 
The code shows the Wordpress team is comfortable, very very comfortable dragging legacy concepts and architecture into the future, and so many years after they started, their codebase is still mostly based around PHP 4 concepts, with the odd sprinkle of a new idea here and there. Classes are used in only a few spots, and with bizarre naming conventions (and showing a complete misunderstanding of the idea of OOP), no namespaces, no Composer, even the use of *closures* going back to PHP 5.3 (as opposed to passing function names by string) for hooks is still a sparsely undocumented and rarely recommended thing in the community. The only reason they drop support for (really) old versions of PHP is for their own convenience and because they're being shamed into it by the PHP community. If Wordpress was thinking about being up-to-date and modern in their overall product execution and strategy, it'd show. You see the exact opposite start to end.
&gt; They only care about market share That clearly not true since they’re instantly shutting out 25% of their users by moving to 5.6 (and up to 60% by moving to 7.0). I agree with the rest though. 
There are ways, but it makes it a lot more complicated. &amp;#x200B; I'd go for static CSS, but switch classes with php and js. &amp;#x200B; When it comes to JS, the cleanest way is an API and AJAX, but I've also used hidden form-fields in smaller projects. Works quite well too.
&gt; no namespaces, no Composer, even the use of closures going back to PHP 5.3 WordPress up until now has supported PHP 5.2 which means no namespaces (although they do use prefixed class and function names), no composer, and no closures since they all require PHP 5.3 or higher. I think their support for legacy versions of PHP is misguided, but their backwards compatibility is not. I've worked on other platforms that break compatibility, and it doesn't improve legacy code. It just means you end up with multiple styles and eras of code in the same codebase. 
&gt; WordPress up until now has supported PHP 5.2 which means no namespaces (although they do use prefixed class and function names), no composer, and no closures since they all require PHP 5.3 or higher. They have added support for closures some time back (you can support closures and still support 5.2, by simply not *requiring* closures, but making them an option). The problem is they did it so halfheartedly and to this day most of the documentation does not even *mention* most of the places closures are supported - you need to try and guess. And closures are so f\*\*king better than plopping global functions all over the place and passing strings, it's ridiculous. &gt; I've worked on other platforms that break compatibility, and it doesn't improve legacy code. It just means you end up with multiple styles and eras of code in the same codebase. That's like saying "I went to gym couple of times, and I'm still not Arnold Schwarzenegger". Breaking B.C. doesn't improve code by itself. But when you have heaps of legacy B.S., you *need* to break B.C. to *allow* you to improve the code.
"WordPress will arrive in the year 2015 by the end of 2019"
it's overdue!
Thanks, it's very much appreciated.
So what exactly is your game? You describe yourself as a web guru, yet you propose something as ridiculous as this? You also State that you own to call centers make movie posters have worked with Eddie Murphy and you are also a health insurance agent? Web guru is a meaningless bullshit term and the rest of your post history makes me just want to call you a bullshitter
Wordpress. The reason why everyone thinks php is shit. 
I find it a good exploration of another way of doing something. I hate picking up someone else’s project and having to read/diff/sort/parse an entire php.ini just to see what settings are not default. If php.ini had inheritance it would help. This allows that. Could also be useful if you have many small php projects each needing their own dev/test/prod php.ini settings, but able to run using the same container which can be updated/maintained separately. 
I forgot to mention, if you need data from JS to php and back without re-loading the page, an API is your only really good solution. If you only need to get some data from PHP to js and nothing back, putting the values in the html works just fine. 
My wife runs a WordPress.com site. Think it'll be a seamless upgrade?
&gt; And closures are so f**king better than plopping global functions all over the place and passing strings, it's ridiculous. It's what we do with classes, except classes have `::class` and autoloading. We don't have namespace autoloading, nor function autoloading, nor a wa to refer to functions without using a string (technically, `::class`) is a string, but... The reason functions are more difficult to work with than classes is because of changes PHP made since Wordpress initially came out. Those same things could make functions much nicer to work with-- especially with namespaces.
&gt; It's what we do with classes, except classes have ::class and autoloading. It's absolutely not what we do with classes. Passing class names as strings around should be possibly your last resort in OOP design, you should rather accept an interface via a type hint and that's it. Also these little things you add as exceptions are quite serious. You see, "::class" is resilient to refactoring. And some string isn't. Your IDE doesn't know what that string is supposed to be. You rename the function, all string references break. Also there's the fact of namespaces... which are common with classes and not common with functions (one reason being how crippled the function resolution and aliasing algorithm is). &gt; The reason functions are more difficult to work with than classes is because of changes PHP made since Wordpress initially came out. Those same things could make functions much nicer to work with-- especially with namespaces. Since your entire premise is wrong (that we pass class names around by `::class` all the time), your conclusion here also doesn't quite line up. Closures are the right solution for hooks. Eventually interfaces. WordPress supports the former, but never encourages it, it's almost undocumented, all the examples use the legacy approach. And interfaces... pfft. WordPress has a long way to go until you can call it proper OOP.
Have you tried writing custom Gutenberg blocks?
It's very seamless...worst case you have a couple php 7 incompatibilities in an old plugin or your theme and they will need to be fixed but not hard.
WordPress.com is a fully hosted software as a service application. This change won't directly impact your wife's website. I don't know this for a fact, but I'd bet that many of the PHP parts of WordPress.com are already running some form of PHP 7.x.
If it's on [WordPress.com](https://WordPress.com) and not a self hosted version from [WordPress.org](https://WordPress.org) you won't need to do anything at all.
ELI5 what this is doing here?
My last memory of working with it was dealing with some wacky shit called 'the loop'? Made absolutely no sense.