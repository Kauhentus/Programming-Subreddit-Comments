I'd like to see your PHP code for this example. If you can show me your code is more streamlined, then I might change my mind.
Fair enough! I didn't mean to oppose. The terse-ness resulting from phone carried the wrong tone. 
Fair enough! I didn't mean to oppose. The terse-ness resulting from phone carried the wrong tone. However, all this considered.. If I were, for example, writing an IDE that disabled certain features based on a license key (otherwise, a "demo mode"), that concept is a part of the domain language of my software. The application (most all applications) have features that exist with variant behaviour based on session context. "An IDE with a demo mode while unregistered" May not be applicable to this particular issue but that's more what my suggestion above was targeted at. (Both response to you and other comment in thread) Headed home now. I'll post a gist when I get home that kinda outlines more. 
I'd be interested to see that. Link?
And parsers and anything function-call heavy.
I guess it is. Now...
twitter? really?
Related: http://philsturgeon.co.uk/blog/2013/09/t-paamayim-nekudotayim-v-sanity
You keep mentioning leaky abstractions, but using a framework doesn't mean there are leaky abstractions.
I was sad because I programmed in PHP until I met a man who programmed C#.NET.
Hey, I have written something over the past on Aura.Router at sitepoint . See http://www.sitepoint.com/web-routing-in-php-with-aura-router/ Now the Aura.Router has a v2 which is in beta1 and will be soon released. It has some more advanced features like REST route also. Checkout https://github.com/auraphp/Aura.Router/tree/develop-2#attaching-rest-resource-routes . And many projects are already using Aura.Router for the clean code. Thank you /u/cschorn for pointing to Aura.Router .
If they tell me that they hate PHP, I'll tell them that they probably don't hate it more than I do. If they tell me it's 2014, I'll tell them that it was 2004 when I learnt it. If they tell me it's outdated, I'll tell them that it is still the most used programming language for web development, so it's far from outdated. If they tell me it's a bad language compared to some language I know, I'll probably agree. If they tell me it's a bad language compared to something I don't know, I'll say that I wouldn't know and ask them how. If they tell me that it's a badly designed language, I tell them that I don't know much about language designs to know that. If they just say that PHP sucks, it's wise to ask why they think so, think through it and respond accordingly. You need to keep an open mind. PHP does suck compared to some other languages and frameworks for some specific needs and it might suck in new ways as technology moves forward. It's not that it will stay relevant forever. PHP's biggest strengths today are existing codebase and cheap hosting. Since VPS and application hosts for other platforms are getting cheaper, one of PHP's strengths is slipping away. Also, PHP is neither preferred by enterprises nor are available frameworks enterprise-friendly. And since it is not hip anymore, startups are not likely to use it. So, if PHP is all you know, it's time to diversify.
It's time for his project to die off.
That link shall remain blue.
If you want *really* simple, but want the power of regexes and layout files: &lt;?php if(isset($_SERVER['SCRIPT_URL'])) { $requestUrl = $_SERVER['SCRIPT_URL']; } elseif(isset($_SERVER['REDIRECT_URL'])) { $requestUrl = $_SERVER['REDIRECT_URL']; } else { $requestUrl = ''; } $urlRoutes = array( 'home' =&gt; array('^/|/home|/index$', 'home.php'), 'landing' =&gt; array('^/(?P&lt;subcity_slug&gt;[^/]+)/(?P&lt;state_slug&gt;[^/]+)/(?P&lt;country_slug&gt;[^/]+)/?$', 'landing.php'), 'ad-thanks' =&gt; array('^/ad-thanks$','ad-thanks.php'), ); $pageName = null; foreach($urlRoutes as $key =&gt; $route) { if(preg_match('~'.str_replace('~','\~',$route[0]).'~i',$requestUrl, $urlParams)) { $templateFile = $route[1]; if(!is_int($key)) $pageName = $key; break; } } if(!isset($templateFile)) { header('HTTP/1.0 404 Not Found'); $templateFile = '404.php'; } $urlParams = array_merge($urlParams, $_GET); $layoutFile = 'base.php'; ob_start(); include '../views/'.$templateFile; $pageContent = ob_get_clean(); include '../views/layouts/'.$layoutFile; Somewhere in your layout file you should put &lt;?= $pageContent ?&gt;
Serious question here, is this guy on the autistic spectrum? Have a think about it. I mean, I'm an irritable twat but even I'm disgusted by this guy's conduct. I'd expect it from a 16 year old but not a grown man.
&gt; You could always lead by example. I. Fucking. *HATE.* This mindset. It's just a different way to word, "I can't be arsed/don't know how, do my work for me."
lol..fact indeed hurt..
than y bother reply? trully idiot
See if you have xdebug configured to automatically connect to your localhost or another IP. I had a case where a staging server did this, and it was just because xdebug was trying to connect to a remote debugger and was timing out. 
I can't believe I got to the end of the comments without seeing any references to /u/philsturgeon saying "f*ck off"...
You're going to have to post your code I don't understand your problem.
&gt;PHP is used by 81.9% of all the websites whose server-side programming language we know. I've never been the type of person to say things like "_Look at all the people that love it, they can't be wrong!_" But the statistics of PHP speak for itself. Its major advantage is that it's not an exclusive web language. I have many console utilities written strictly in PHP that interface with both Windows and Linux machines to do meaningful operations. For the past 10 years, up until now whenever anyone has asked me which language they should learn, my answer was always PHP. Knowing, and understanding PHP will help you branch into more difficult languages.
There are a few: [Toro](https://github.com/anandkunal/ToroPHP) [Macaw](https://github.com/Codingbean/Macaw) [Pux](https://github.com/c9s/Pux) [Limonade](https://github.com/sofadesign/limonade) [Klein](https://github.com/chriso/klein.php)
My last two jobs have not been on codebases I'm allowed to share, but I can describe one of them. On request the system loaded a YAML config file which contained all route matches for the top level application. The patterns were paired to namespaced route objects. When a route match was made, the system loaded &amp; instantiated the matched object, which then constructed the page result. Sometimes these route objects were routers themselves which loaded other YAML files containing more object maps, for a recursive strategy. Sometimes the routes were to Layout files, YAML or JSON which defined component configurations for the page layout (all of our code was written as modular page components). The system was very complex, but extremely organized and highly maintainable. Before those jobs I was using [my own router](https://github.com/PrimalPHP/Routing) which mapped routes according to the names of the files in the routes folder. The readme gives you an example of how it is organized. The router scans the folder and then includes whichever file is the best match for the requested url. The mapping can be stored in memcache for faster load time. That system was fast, highly functional, extremely versatile, and had the benefit of not needing a gigantic list of routes to match against. However, it did not produce the kind of RESTful URLs that most sites have today. [I've also used Slim in the past](http://www.slimframework.com/), which takes a functional approach, binding objects and anonymous functions to route pattern matches. [This article has some examples of large site organization using slim](http://www.slimframework.com/news/how-to-organize-a-large-slim-framework-application). Sections of the site are broken into separate objects and then bound together as middleware. So for example you might have an object that handles all login related pages, an object for presenting articles, and object for handling comments, and an object for the front page. These objects each have separate functions for different routes within that section of the site. The objects are then added together in the main site file as middleware (individual units that process one after another). Systems like session loading and authentication validation also become middleware modules which get executed before the routes. This make the application highly testable and easier to break apart for scaling. Express.js for NodeJS takes the same approach, and its what I'm now using in my current job, which has me moving away from PHP and doing more JavaScript development. 
Not getting it. Is it some sort of entropy joke?
Of course, I meant "create thumb with watermark on request and save thumb on disk to handle other request without generating thumb". BTW dealing with race condition is fun. :)
check if you are using sleep() anywhere?
http://pastebin.com/GSRBTrpB so, on line 37, my understanding is that socket_select should modify $read if a socket is available for reading (reading wont cause a block). This is working as expected when client #1 connects. When client #2 connects, socket_select leaves $read empty (a read would cause a block). In my tests, i even set $socket to non-blocking, removed socket_select from the equation, but still I'm not able to socket_accept for client 2 (client 2 can never connect while client 1 is connected). Hopefully that helps to explain it
`bool aflip(array &amp;$array)` to flip it. `bool rflip(array &amp;$arr2flip)` to flip it backwards. `bool asflip_real(array &amp;$flippable)` to flip it sideways. The `asflip` function had limitations, but since people are already using it, it cannot be changed. Ever. `void uflip(callable $flipper, &amp;$flip_thing)` to flip all of its contents in custom direction(s). In addition to arrays, this can flip other things like strings or objects. If flipping fails, it will throw a `FlipFlappedException` (before PHP 5.5.λ it threw a `flap_flipped_exception` instead). If `$flipper` throws an exception, the runtime will convert it to a fatal error.
It will be
I just want to get it out there that I don't think that this witch hunt is any more flatering towards the rest of us than Daniel's comments are to him. He might live in his own little world where he is king, and be an arrogant dick. But that does not remove any responsibility from us not to part take in this form of online bullying. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Web desktop**](http://en.wikipedia.org/wiki/Web%20desktop): [](#sfw) --- &gt;A __web desktop__ or __webtop__ is a [desktop environment](http://en.wikipedia.org/wiki/Desktop_environment) embedded in a [web browser](http://en.wikipedia.org/wiki/Web_browser) or similar [client application](http://en.wikipedia.org/wiki/Client_(computing\)). A webtop integrates [web applications](http://en.wikipedia.org/wiki/Web_application), [web services](http://en.wikipedia.org/wiki/Web_service), [client–server applications](http://en.wikipedia.org/wiki/Client%E2%80%93server_model), [application servers](http://en.wikipedia.org/wiki/Application_server), and applications on the local client into a desktop environment using the [desktop metaphor](http://en.wikipedia.org/wiki/Desktop_metaphor). Web desktops provide an environment similar to that of [Windows](http://en.wikipedia.org/wiki/Microsoft_Windows), [Mac](http://en.wikipedia.org/wiki/Macintosh), or a [graphical user interface](http://en.wikipedia.org/wiki/Graphical_user_interface) on Unix and Linux systems. It is a virtual desktop running in a web browser. In a webtop the applications, data, files, configuration, settings, and access privileges reside remotely over the network. Much of the computing takes place remotely. The browser is primarily used for display and input purposes. &gt; --- ^Interesting: [^Symbiose ^\(web ^desktop)](http://en.wikipedia.org/wiki/Symbiose_\(web_desktop\)) ^| [^Windows ^Desktop ^Update](http://en.wikipedia.org/wiki/Windows_Desktop_Update) ^| [^EyeOS](http://en.wikipedia.org/wiki/EyeOS) ^| [^Web ^operating ^system](http://en.wikipedia.org/wiki/Web_operating_system) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgkkx0b) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgkkx0b)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
&gt; I may be wrong here, but isn't socket_select supposed to be called on connected sockets? If that is so, you need to use the connected sockets returned by the socket_accpet in the call to socket_select to monitor them for any activity. it's called on the listening socket, and the connected clients -- to determine which of them is ready to be read from and written to &gt; server creates a socket and waits for clients to connect using socket_accept. When client connects, socket_accpet will return a new connected socket, and the original socket go back to listening state, so that it can accept more connections. At this point you can fork your process to create a dedicated process for handling the client just connected. if you call socket_accept before a client is trying to connect, the "server" will come to a grinding halt because you just created a block. That's why you use socket_select so you know which socket is ready. I've narrowed the problem down to something with unix domain sockets. If i use AF_INET everything works fine, but AF_UNIX is only allowing 1 incoming connection
&gt; if you call socket_accept before a client is trying to connect, the "server" will come to a grinding halt.. Exactly, A server process some times has nothing to do except wait for new connections. Once the connection is established, the newly forked process will handle the connected client, while the server process goes back to listening state. I mentioned it because it was the only way I have done this. It seems that by using socket_select you can handle the server and client logic in the same process, right?
That's me. I'd just ask before judging me as lazy that you take a look through my GitHub history. I'm the founder of the OpenCart Community Edition fork. The goal of our project is to address the security issues and bugs that sometimes slip through the cracks in the official project. I've spent hundreds of hours pushing commits and doing all the research and testing to go with them. I'm also one of the moderators on the support forum where I answer user questions and do inglorious grunt work like cleaning up spam and approving new posts. Occasionally I submit pull requests to the OpenCart master when I think/have confirmed they'll be accepted. I do this all for free. Like many other open source enthusiasts it's a passion project and some days there's a lot less passion for it. It's not uncommon for someone to try to dictate work. But in a project where everyone is volunteers that can only be achieved through respect, respect that's earned by contributing. I've been with the project long enough to know it can take time to change minds on an issue. That's why some of the regular contributors to the project are "talking" so much about it. If Daniel says he's closing the issue then it's a waste of time for me to spend my Friday writing a pull request that will get rejected. I'd much rather spend the night out with friends. If someone wants to take a chance and try a pull request anyway I DID post code to get started. That's a big chunk of the work. The next step would be making the design decisions on how to expand the backward compatibility to the SHA1 system and make the password_hash() fallback better.
The assumption being not using the framework will avoid these problems. I actually approve of a slim framework layer but eventually you reach a point of diminishing returns. So moving from Symfony to Silex is a huge jump in terms of reducing complexity but moving from silex to nothing really just loses you routing and service management and you basically can't live without those as you're finding out. So my recommendation would be to forget your preconceptions about the word framework and look again at what's available to solve your problems.
I used to try and argue with people like that but how I can't really be bothered because they're usually not trying to educate themselves, they're trying to feel superior and it's a waste of time indulging them. You might be able to get some mileage out of asking them to describe the specific problems and if you're lucky they'll talk about things that are no longer true, but chances are they'll just link you to that stupid fractal of bad design article in lieu of actually having an opinion of their own.
Here's the source-code: https://github.com/formativ/talk-async-php Keen for feedback! :)
$this
Sure, go ahead :-) .. I came up with it, don't know if I'm the first one, though ;)
This. Most of these arguments boil down to "These are hard to understand so I want something simpler." Overhead is just a piss poor reason, leaky code / abstraction is just "Not invented here" (which itself is coupled to "This is hard to understand!") Trying to get people to understand that less code isn't automatically better and 30ms additional processing isn't always worse is hilariously difficult.
The link doesn't work anymore. But, basically we ported node.js to PHP (or vice versa)? It looks awesome, though. I'll definitely try it soon. Thanks for sharing!
I feel dumb - wrong link: https://speakerdeck.com/chrispitt/async-php
Somebody mentioned I didn't include Gearman, which should totally be part of the presentation.
"Yes it does." Every programming language sucks. If you don't know why a given language sucks, you don't know it. The trick is to use languages that suck the least in your given problem domain. PHP stands out a bit because it has a number of hilarious quirks brought on by its organic development and major decisions made years ago that nobody is willing to revisit. This is okay. I can admit something I use sucks. Just because it sucks doesn't mean it doesn't also have redeeming values. PHP serves several domains quite well despite its brain damage. Don't invest your ego or self-worth in that of your programming languages. Don't be a single language programmer. Relax and embrace that our tools are basically all shit. Expand your horizons. 
or http://php.net/Thread ...
Thanks, I'll add this as well!
Thanks, I forgot opcache in the list, sure I'm going to request it.
The company said that when we'll put up a server dedicated for mysql it will make sense to put 64 bit version to get the memory benefits. For a server that will be both web and database (it will have 4/5 Gb of RAM) it is best to leave it 32 bit. Is it bullshit? 
The server will be a VM with 4 / 5 Gb of RAM initially. Thanks for the repos information, I'm going to take a look on those.
Ohhhhh yeah dude. Elasticsearch will eat that easily. How big is it? You might want to cluster it. My biggest instance yet had 35gb of data, and elastic search returned searches and analytics under seconds. The best thing about it is that it's super easy to setup, and the default options are pretty good. Once you need fine tuning, the advanced options and scripting are very good too. 
&gt; What happened is a Trial by Crisis This is stupid and mean. People have variety of ways to deal with stress and with open-source projects they aren't even (typically) paid for the pleasure. Some kid whose parents never taught him how to deal with stress creates a somewhat successful opensource project in his own free time. For that reason we must subject him to abuse and if he reacts at all negatively he is therefore not worthy of writing software ever. Writing software is a peaceful activity. Why are we abusing people for engaging in a peaceful activity? Moreover, why do free programs typically garner so much more abuse than paid alternatives? You didn't even pay for the privilege of abusing this kid. 
Every issue on the repo is closed with reason: "waste of time" lol
try out it online http://server.payum.forma-dev.com/
Chris Boden (one of the two guys who created it) made it for use in product apps he had to write. I don't think it should be used as the whole stack, but it's pretty solid for non-critical, high-concurrency socket stuff...
No, but I didn't build anything I would consider complicated...mileage may vary.
union the results together in your query
Select * from table1, table2 Where Whatever = whatever
Slight thing, in terms of SEO, it really should throw a 404 if a route isn't found and you're gonna need regex. $r = $_GET['r']; if(!isset($routes[$r])) { foreach($routes as $regex =&gt; $route) { if(preg_match($regex, $r)) { // include appropriate file exit; } } // 404 exit; } else { // include appropriate file } 
Right on man :-) Let me know if you run into something that isn't covered in the book!
A leaky abstraction is a specific term that refers to the fact that an interface that is supposed to hide complexity fails to do so and you end up having to understand how the internals work. A real world example of a leaky abstraction is when the handle on your toilet disconnects from the flapper chain. Normally, you don't have to know any of the mechanics of the inside of the toilet tank. But when the chain unhooks, you have to take the top of the toilet tank off, figure out what went wrong "underneath the hood", and understand the mechanism inside your tank to fix it. Before it broke the flusher handle was all you needed to know to accomplish flushing. Now you have to understand ball valves, floats, flappers, and chains to accomplish flushing. So "small libraries" doesnt necessarily mean no leaky abstractions, and large libraries doesnt mean there *are* leaky abstractions. The problem you're suffering is that frameworks like laravel are like being handed an electricians toolkit - its full of really useful things, but you haven't been doing it long enough to know what they are all for or what problems they solve. You can see that its got wire nuts and crimpers and wire in there, but that still doesn't tell you how to wire up a house. But you'll get there. Nobody expects somebody with two years of school to walk into an interview and start detailing the nuances of dependency injection vs service locator. They just want to know if you're capable of learning. And compiling Java code is akin to learning to driving a stick. There's a crapton of bullshit that happens that doesnt seem to make any sense, and the whole process is laden with incomprehensible jargon, but as soon as you get it sorted out once, you can pretty much always do it. So keep at it. You'll be fine. 
First off, it's much easier to debug SQL queries not trough php. Check out mysql workbench. Secondly, you might want to avoid mysql_ because it's deprecated. The goto thing these days is PDO. Thirdly the way you're going about attaching the where clause; this is fine for learning, but always use parameterized queries. And finally, you can bring results from multiple tables through 3 ways I can think of. Select * from table1, table2; is probably the best solution for you. Select * from table1 join table2 on table2.foo = table1.bar; probably not what you're looking for. You can also do a union all, but those queries are very inefficient.
This is referred to as a join. There are a few different types you'll eventually want to become familiar with. Also, please please please don't use the mysql extension; use mysqli if you must, but pdo would be better. And we can't tell from that snippet, but I suspect you're putting user data directly into your SQL, thus opening yourself to SQL injection. Don't do that, either.
http://i.imgur.com/TiWRumG.jpg What is the specific error message you are getting?
It wasn't mentioned in the SO page but if you [create your own stub](http://www.php.net/manual/en/phar.fileformat.stub.php) for your Phar files, you will need to use this function to prevent the compiler from blowing up.
Use php -n (or whatever the switch is to specify no config file), then slowly add rules.
&gt; I mentioned it because it was the only way I have done this. It seems that by using socket_select you can handle the server and client logic in the same process, right? correct. Yeah, i'm just blocking on socket_select and not forking. I'm not sure if i can fork with what i'm trying to do. That's the next hurdle :)
That I don't give the slightest fuck about their opinion.
i finally figured it out, i updated the original post with the problem. Thanks for the help
Good point, although if you're able to upload files, you should still be able to upload a precompiled binary. We manage our own servers, so I sorta forget about shared hosting.
Turns out it was IMAP extension in my case, when disabled in the php.ini file, it all works fine
yes I'm looking for something like capybara in ruby, for acceptance tests. I wasn't sure if that is part of integration testing
Probably the closest you'll get is [Behat](http://behat.org/). There's also [Codeception](http://codeception.com/).
A good buddy of mine is a little snobby towards PHP (now that he's been free of it for ~5 years), but I recently showed him a little walk-through using Composer, Laravel + Artisan, and PhpStorm w/Xdebug, and he admitted to being "pretty fucking impressed". So I guess that's what I'd say: today's PHP is pretty fucking different, even compared to not-so-ancient lines, like 5.2. Not only that, it's been able to continue advancing with breaking BC. Just look at Python's 2/3 debacle (to be fair, the term "debacle" is perhaps a little dramatic).
&gt; I do not see why I get this error You get that error because prepare() fails due to your invalid query. You should split them up in to two steps instead of trying to use UNION.
What? I don't know what PHP you've been working with, but the one I know isn't strongly typed. The value comparison `"118" == 118` is `true` in every version of PHP I'm aware of. I'd say you might be right if the condition a type comparison like `"118" === 118`, but it's not.
[Behat](http://behat.org/) or [phpspec](http://www.phpspec.net/)?
Html files are not parsed server side on request like php files are, so if there was an html include tag ( there isn't btw ) then it would have to be interpreted by the client and a second request would be made. This is really inefficient. I would suggest renaming your .html file to .php and changing &lt;include 'displaylocations.php'; &gt; to &lt;?php include( ' displaylocations.php ' ); ?&gt; That way the include will happen server side and a single payload will be delivered to the client.
Like jhoff484 said, HTML isn't server-side parsing, you need to use a .php file with &lt;?php include(); ?&gt; or something similar. Alternatively, you could utilise something like AJAX, get Javascript to pull the php file from the server and display it.
Hmm. Ok. When you say it's not server-side parsing- You mean that html will only perform what's there, within my browser (in this context?). I had the idea the browser would start rendering the html, and when it saw the &lt; php include() &gt; it would stop, and then ask the server for what to display next. Is that wrong? It sounds like html just doesn't work that way, and as I'm finding out, it's not going to do anything with the include the way I have it.
Another route besides the already recommended renaming the file to .php is you could go the ajax route and pull the file contents in via an AJAX call and insert it into the document. It will add overhead though with an added call to the server from the client.
Are you accessing the page from your server or as a local file? Are you accessing it like this `http://localhost/myfile.php` ?
Hmm. Thanks. I'd prefer to keep it simple then rather than adding just an unnecessary component. Seems like the php thing will work if I can just get the formatting correct. Would you care to take a look at [the comment above](http://www.reddit.com/r/PHP/comments/22bc3c/i_want_to_call_a_php_file_from_within_an_html/cgl4x34) ? I tried the suggestion, but it's not working. Thanks.
If you access `http://localhost` in your browser you should see your `index.html`. If it's in the same dir then try `http://localhost/myotherfile.php`
Yeah you were, but it's not a stupid assumption! You just have to remember that HTML/CSS isn't really processing anything, it's more like rendering. Javascript is a client-side processor, PHP is a server-side processor. Your easiest bet is just to make your entire website .php files, don't use .html files again! (I haven't named a file .html in many, many, many years)
Viewing source on the client side will not show you any PHP commands, they are processed on the server side. It sounds like maybe it isn't getting the right path to the file? or some other issue. Also, long shot, make sure your server is set up to use php on .php files. :) Instead of starting with the include, to ensure that php is working properly, try putting ``` &lt;?php echo 'testing. This is your location'; ?&gt; ``` into the main file, to see if it is properly processing the PHP commands. If it works then, then you know the error is some other thing.. like it cant find the file you are including (either because it isn't in the directory that the main file is, or you spelled it wrong, or some other issue like that).
Ok, well cool. That's a start then. (Also, I'm doing this all within a sub-domain, if that matters?) When I go to `http://subdomain.localhost.com/displaylocations.php` in my browser, then I DO get my test message. "testing. This is your location" So I know the php is working. I just need to reference it properly. Hang on a sec... I think that inside the _outer_ php file (the one that's basically all html) I'm not closing tags properly. It goes like this: &lt;html&gt; &lt;head&gt; ... &lt;/head&gt; &lt;body&gt; ... ... ... &lt;span style="font-family:tahoma,geneva,sans-serif;"&gt;&lt;strong&gt; Your location: &lt;?php include( ' displaylocations.php ' ); ?&gt; &lt;/strong&gt;&lt;/span&gt; &lt;p&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; Should I close the &lt;/html&gt; tag on line 12 there just before I do the &lt;php&gt;?? Then open it up again for the next part? I'm going to try that. And thanks so much for your help. 
It looks fine. What happens if you go to: `http://subdomain.localhost.com/pagethatincludesdisplaylocations.php`
Yes, indeed. I've confirmed that the php file itself works. More details in the [comment thread below](http://www.reddit.com/r/PHP/comments/22bc3c/i_want_to_call_a_php_file_from_within_an_html/cgl5ota). And I'm pretty sure I'm addressing the php file just fine. I've actually been using php all this week to pass variables from an html form into a sql table. That's been working fine, and it's all in the same main directory. So, it's going to just be some stupid formatting mistake I'm making. I really appreciate the help here. I've been looking for source code and tutorials for over two hours. Everything I can find tells me how to do one or the other, but not how to integrate them. 
https://gist.github.com/anonymous/9c24c3022a87cd1dc694 I don't have time to fix the issues with yours would probably easier for you to just modify mine to fit your needs. I left the example I used as a base at the end as a comment.
So what I think you mean- I have my old html file called "going.html" in which I was putting the `&lt;?php include... `. Then, I changed the name to "going.php" (kept everything else the same). When I go to "going.php", the html all renders like it did before. It's as if the `displaylocations.php` is not being referenced at all.
You have an extra space in between the first single quote. Also, you don't need braces around includes. Finally, make sure your displaylocations.php file is in the same directory. Try this (after renaming your file from whatever.html to whatever.php): &lt;?php include 'displaylocations.php'; ?&gt; Note: Use /r/phphelp for questions like this.
Yes. I'm using exactly that format as my URL.
You could try swapping out the `include` with an `echo` to see if it's actually a problem with `include`. I think /u/dongilbert figured it out that your adding spaces into the filename in your `include` and so its looking for the wrong file.
Ya I didn't even notice that there was the spaces in there. Good to hear you got it working.
Can I just ask... why? Are you posting it as a newspaper classified and you pay by the word? Your requirements seem oddly specific, to the point of being actually destructive to a quality outcome. This means one of two things. Either you have very specific requirements for good and valid reasons that you haven't bothered sharing, or you have very specific requirements for really dumb reasons. I'd be interested to know which on it is.
Ahhh yes. 2006. I remember it well. Good times.
Your obsession with "streamlined" is making you a worse developer.
I couldn't agree more. Filling someone's arbitrary requirements purely on the basis that they have incorrect prejudices and preconceptions and are ignorant of modern development is frustrating. This whole post should have the entire community replying with "No. You're doing it wrong."
They do actually, and have done for some time. But they're not ranked as highly. 
Even a microframework if all you need is routing.
Thanks for the definition of "leaky abstraction". I had heard the term before but I think it's been used consistently wrong. It has a very specific (and often relevant) meaning, but it seems to be used to dismiss frameworks and other abstractions out of hand.
… all of them? Heroku's good at that, for example.
"pee eitch purn-el"
Look up Zend_Acl (ZF1) component here: http://framework.zend.com/manual/1.12/en/zend.acl.html
http://en.wikipedia.org/wiki/Linguistic_relativity#Programming_languages
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 18. [**Programming languages**](http://en.wikipedia.org/wiki/Linguistic_relativity#Programming_languages) of article [**Linguistic relativity**](http://en.wikipedia.org/wiki/Linguistic%20relativity): [](#sfw) --- &gt; &gt;[Kenneth E. Iverson](http://en.wikipedia.org/wiki/Kenneth_E._Iverson), the originator of the [APL programming language](http://en.wikipedia.org/wiki/APL_(programming_language\)), believed that the Sapir–Whorf hypothesis applied to computer languages (without actually mentioning the hypothesis by name). His [Turing award](http://en.wikipedia.org/wiki/Turing_award) lecture, "Notation as a tool of thought", was devoted to this theme, arguing that more powerful notations aided thinking about computer algorithms. &gt;The essays of [Paul Graham](http://en.wikipedia.org/wiki/Paul_Graham_(computer_programmer\)) explore similar themes, such as a conceptual hierarchy of computer languages, with more expressive and succinct languages at the top. Thus, the so-called *blub* paradox (after a hypothetical programming language of average complexity called *Blub*) says that anyone preferentially using some particular programming language will *know* that it is more powerful than some, but not that it is less powerful than others. The reason is that *writing* in some language means *thinking* in that language. Hence the paradox, because typically programmers are "satisfied with whatever language they happen to use, because it dictates the way they think about programs". &gt;In a 2003 presentation at an [open source](http://en.wikipedia.org/wiki/Open_source) convention, [Yukihiro Matsumoto](http://en.wikipedia.org/wiki/Yukihiro_Matsumoto), creator of the [programming language](http://en.wikipedia.org/wiki/Programming_language) [Ruby](http://en.wikipedia.org/wiki/Ruby_(programming_language\)), said that one of his inspirations for developing the language was the science fiction novel *[Babel-17](http://en.wikipedia.org/wiki/Babel-17)*, based on the Sapir–Whorf Hypothesis. &gt; --- ^Interesting: [^Linguistic ^relativity ^and ^the ^color ^naming ^debate](http://en.wikipedia.org/wiki/Linguistic_relativity_and_the_color_naming_debate) ^| [^Benjamin ^Lee ^Whorf](http://en.wikipedia.org/wiki/Benjamin_Lee_Whorf) ^| [^Linguistic ^determinism](http://en.wikipedia.org/wiki/Linguistic_determinism) ^| [^Edward ^Sapir](http://en.wikipedia.org/wiki/Edward_Sapir) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgla48t) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgla48t)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Nobody thought the world was flat. Nobody.
&gt; the whole language concept is stupid anyway. Lol. Strong no hire.
Omg people like you are so annoying. What language is perfect? The guy is simply making a statement about how popular WordPress is and that that alone is a good reason to work with PHP if you're looking for those kind of jobs. Stop trying to pick apart and over scrutinize a simple valid statement 
&gt; The downside is that you lose those htaccess files. Not a downside ;D As for DB, these days unless you're going to pay for the Percona support I'd pick Maria. They are doing some really amazing stuff over there and taking the DB beyond what Oracle is doing, and Percona is a bit hamstrung by basing their work on Oracle's.
At the company I work for we have try every ACL solution we could find (Zend, Symfony, …) but none of them solves a crucial problem: using the ACL system in your queries: sometimes, you don't want to fetch the 100,000 blog posts in memory and test with the ACL if the user can view them… You just want to *fetch all the posts the user can view* (or edit). We have been working on an ACL library internally for years, but very recently I refactored it properly to open sourced it. So here it is: [MyCLabs\ACL](https://github.com/myclabs/ACL). It's still not stable yet, but it will be in the next weeks. And it works perfectly, it has been used in production for years (before the refactoring). Just keep in mind that ACL library was made for complex needs and performance, it requires you to write a bit of code (it's more of an "architecture" than really a library). If you want something simple, Symfony or Zend ACL is probably enough.
All depends on what you put in them. Most applications are designed to be extremely small and agile on the front end, so installing and running it will only take a few megabytes. However, take Wikipedia for example, a website with a VERY small front end (&gt;30mb) can still occupy shitloads of space due to the 1 million+ articles available in 30+ languages and, not to mention, the photographs and other hard content data that is used on the site. Tldr: content can cause a small application to become large
Actually, I am more interested in knowing about the core application rather the content, how you are using it. So, Are these core applications considered medium or large sized project. For example. phpBB is a complete package and you rarely needs extensions for it. So, if say I am building a clone of phpBB from beginning with everything same without reusing any code, whill this be considered a medium sized or large sized project?
PhpBB has a lot of background stuff that you don't realize is even in the mix while it's running. The devs had had years of testing and thousands of testers to find and fix issues, which you won't have. So it will be a very large project if you hope to make it as good.
I'm sure that's up to interpretation of whomever is looking at the source. My breakdown would be something like 10k-100k lines=small,100k-1m lines=medium, &gt;1m=large, but I'm sure others have a different interpretations.
He has told you what his definitions are, go take a look at the source.
Fine, put whatever popular opinion that was wrong in the same place. The example used wasn't important.
I can't understand how people would prefer a whitespace sensitive syntax but there are thousands of Python advocates around.
Wow has any ever told you that you look exactly like Mister Spock?
You missed my entire point. Perhaps instead of criticizing other people, you should actually read what they say. &gt; that that alone is a good reason to work with PHP if you're looking for those kind of jobs No, it really isn't.
Wow from the looks of it this will be a really great tool if it works like it should. Would you deem it ready for production yet? What is missing what prevents it from production quality?
What about a product review and rating aggregation, pulling data from a few different sources and then finding a way to present it in a normalized fashion coming out of the data engine?
"Hey guys, lets just throw an old piece of code without any explanation whatsoever and call it a blog!" Really? O.o Edit: Typo
Our use a singleton trait
I would say it's not production ready because it hasn't run in production yet ;) Generally I feel confident to recommend a library of my company (or mine) when it runs in production on our side (just a question of feeling). Right now it's running perfectly though in our dev branch and integration servers. And regarding the API I'd say it's stable and will probably be fully compatible for 1.0. Anyway I'll post the link in Reddit once it's released. **Update**: the API is not stable yet, I have a lot of ideas to make it even simpler and more powerful. So wait for a 1.0 before using it.
Yes as I said it's mainly an "architecture" more than a library. So feel free to copy and reimplement yourself if you'd rather do that. The library/code per se exists to avoid re-implementing an already solved problem. I would love the website of the project to have 2 parts: 1. explaining how to do it (so that people can do it themselves) 2. explaining how to use the library if you don't want to reimplement it yourself That's a bit of work, but I'll try to do that.
I will recommend Zend Acl. I have worked with v1 and was successful in developing a db based role managed system. Now there are two and the names are bit changed to Zend\Permission\Acl and Zend\Permission\RBAC .
oh burn!
A long time ago since I switched to Phake. It's worth it to check out other mocking libraries too, like Mockery. They've got cleaner syntax, more usable APIs, more complete documentation, and actually make testing more fun. Plus, no more -&gt;at(call_order) debugging hell...
I've heard a lot of talk about folks using ES as their primary datastore. Evidently, it has many of Mongo's features as of the 1.0 release. Maybe you could create a poor man's splunk and have clients deliver log messages to Redis which are subsequently gathered and added to an ES cluster? Bonus if your logging data store understands more than just raw text. You could log in JSON or use REGEX's to pull out particular fields as new entries are added. Double bonus if you're able to load test your new creation and experiment with (1) optimizing your code (2) optimizing the configuration of your redis/ES instances (3) characterize the cost/benefit of running the server on larger hardware, (4) characterize the cost/benefit of scaling horizontally, (5) find the limits of horizontal scalability. 
ugh - i love php and have been writing it for 7 years now, but this shit confuses me. i'd love to know where to start, because my college cpp classes didn't teach me much
I really like where Codeception is heading. Someone just built a module for it for doing visual CSS change testing (similar to PhantomCSS) for example.
I know this may be a little basic for some of you here, but for the last 2 years I've been developing I've been using the most convoluted ways of making forms with select dropdowns that can be used for both creating and editing the same data. Everything from using 2 forms, to having 100 if/else statements throughout the html of the form, to condensing that into 100 ternary operators. I just thought of this yesterday, so hopefully at least one other person would find this useful. Any feedback is also appreciated.
&gt; Plus, no more -&gt;at(call_order) debugging hell I'm a big proponent of PHPUnit, but if any other library makes this shitastic part of testing easier/better/more enjoyable then I will switch in a minute.
My two cents: This script is vulnerable to XSS: http://en.wikipedia.org/wiki/Cross-site_scripting Use htmlspecialchars() when echoing out html: http://docs.php.net/manual/en/function.htmlspecialchars.php The usage of the function is pretty awkward, since there is a) no way of specifying the values themselves, each option will have the same displayed text and value. It would be better to accept an associative array, that would allow specifying values too. b) the first option is treated in a special way, since it is accepted as the second argument, so the first item in the $data array becomes the second in some cases. If you want to make a string parameter optional, it should default to null, instead of false. You should use triple === for checking equality. However, don't do this for line 30 if you decide to improve this function into some kind of library that also does validation, because values from html forms will always be strings, and that will throw a wrench into the validation logic. 
The project is to simplify PHP extension development. I think the docs are very readable and it looks like a breeze to use but there are some broken links (see "Why use PHP-CPP" #4 and the About Us header). So you may need to muck about sometimes.
So would I want to do something like this: echo htmlspecialchars(buildSelect($array)); or would I put that into the returned html? return htmlspecialchars($html);
I would separate the HTML from the list. Let this function be solely for creating a list and specifying which items are selected and another for outputting the list to HTML.
This function seems like and perhaps even should be limited to internal use only, so it wouldn't be accepting user input that hasn't already been sanitized. Also, the HTML portion of the function should be stripped out and let the output be in a view template.
Neither, you enclose the variables that you append to the constant html tag strings, in your case $first, and $option.
Even if the input is not user input, you still have to escape, otherwise "'/ and a lot of other characters will mess up your whole page.
&gt; 1. It's fast Cool, but not really something we consider when talking about PHP ... &gt; 2. It is shockingly simple It's only simple if you know what you are doing, a testament to that is the first reply to this thread, and common sense. The paragraph about anyone that can PHP can CPP is pure wishful thinking. &gt; 3. No Zend engine knowledge required I don't see how that is a benefit, if we are writing zend extensions ... at any rate, you will need the same knowledge, in nature and volume, that you always did, the syntax is the only thing that really changes. &gt; 4. Full documentation and annotated source That's good ... but I don't think its really required; if you are someone that is already fluent in C then reading source code _is_ like reading documentation, only better - it _cannot be wrong or out of date_. &gt; 5. Support for all the important PHP features Great ... although an absolute requirement if you're going to really consider using it ... so not really an advantage ... &gt; 6. You can't go faster than native I'm not sure that's a fact, and even if it were, it's not as if PHP is written in Python ;) &gt; 7. Proven technology You can replace C++ with C in this bit and it all still holds true, only C is even older ... &gt; 8. Access to an incredible amount of libraries &gt; 9. Working with C++ is fun Well I guess the last thing to say is that, this project didn't invent the idea of using C++ to write PHP extensions, you have always been able to do that. I'ts a cool project, but if you are not already a good C++ programmer, then realistically you cannot use it. With that in mind, it wouldn't really be sensible for anyone to advise someone to learn how to use this over learning zend in the first place ... I think I'd be more into it, if the author had pushed for this kind of api to be part of standard internals, the author mentions that a reason to avoid hhvm is that it's controlled by one company ... well, I don't see how this project is any different, and would appear to be in a worse position than facebook when it comes to convincing people of the staying power of their project ... Facebook have a virtually limitless supply of funding, the chances of facebook going out of business are infinitesimally small, the mortality of one individual is surely a more serious concern than the longevity of a corporation like facebook. I'm not sure I would consider either to be a factor, but surely human mortality before corporate longevity is logical. I think it's pretty scary that v1 includes both really basic stuff and pretty advanced (but still required) stuff ... I think if it were being developed by a few of us as part of PHP it would be in a much stronger position ... It is a cool project, as I read this back it seems negative, I'm just communicating facts, some of those appear negative ...
I was on a safari with Rasmus taking photos of wilderbeast and hippos. NOT EVEN A HUMBLE BRAG! But yeah, people who say stuff like the OP is quoting are either ignorant or living in the past. So much so, I blogged it: http://philsturgeon.co.uk/blog/2012/12/why-some-people-hate-php
There's really no reason not to though.
Haha, I know, I know, there's been like a million of these lately. I'd been working on this for a bit from a while ago, just thought I'd share.
I got my hands on a copy of one of the print issues at PHPUK this year. They're *really* nice
Thanks for the feedback! I've added another one of my utility functions to sanitize the data before anything happens to it, and revised my Gist.
Yeah, I guess we could change the name. I left out the &lt;select&gt; tags for brevity's sake, because then you'd have to pass in that many more variables for things like the name, id, data-attributes, etc. Good call, though.
How does it compare to writing extensions for HHVM (which are C++ too)? 
&gt; It's fast &gt; &gt; Cool, but not really something we consider when talking about PHP ... Uhm, what? Why would we *not* care about speed in PHP?
I wholeheartedly agree, this could be much more useful if it provided a decent structure for a template engine to transform into a list. 
I commit all package dependencies as part of my project. I just do a diff on the package directory. As for a changelog (why changes were made), you'll have to look at whatever the package maintainer provides (usually a git repo that will have something, if only commit logs).
tl;dr: la-la-la whatevaaa. Why put a negative slant on everything? It is not like you are saying there are some hurdles to get over, or it will be great for some niche applications. You just seem to hate everything about it and cannot see it being of any use to anyone.
I don't know what text you are reading, I opened with words like "great", "cool", "good" and "I'm not sure" ... I wasn't being patronising or condescending I was being serious, those things I said are cool _are cool_, that I even have to explain that is just ... I even went as far as finiding a way that someone like me; which is to say someone with all the required skills to actually use the thing, with a large portfolio of extensions that I actually have to maintain, would find it useful and could get on board .... Not much point ... 
&gt; how are we supposed to track version changes ? git pull? Like most people have been doing for years, yes. At least then you get changenotes.
&gt;In fact, the syntax of PHP and most PHP function names are directly derived from the C and C++ syntax. Moving from PHP to C++ is like coming home. We have missed you, you have been away for too long. That made me laugh
Yeah, but I didn't call it jQuery, did I? Calm down a bit.
encoders (ioncube and company) are the other use case, or the only other place I've seen it used ...
What's your intention when you just paste a code snippet without any description? Do you expect people to find your github repository and look through all your source code? Before asking for any feedback, you need to explain to people. You and your project are not famous. People have no idea. are there any advantages of using your form class than others? 
You practically did, actually. Zepto is another well-known library which is compatible with jQuery's API, but more geared towards mobile platforms. A website might utilize both jQuery and zepto, and switch between the two depending on what platform it encounters. So yeah, do some market research before naming things, would ya? 
Performance (speed and memory) compared to PhalconPHP or HHVM + Stupid PHP ?
Congrats on proving that you're a dumbass. Do a google research for "zepto", what will you find? Pages and pages of references to the javascript library. It's not a small-time library, it's brought to us by Thomas Fuchs, the same guy that made prototype and scriptaculous. 
Well, of course, Zepto's been around for ages, what else do you expect? And this isn't a Javascript library.
(I believe he is the 0.1% zepto user out in the wild. shhhhh you fool !)
I could have changed the post, I read it back and it does read negative, but don't think I'm accountable for the nature of the facts I am communicating, and attributed the readers of this subreddit with the same kind of reasoning skills that I have. My opinion of the thing is quite clearly that it's cool, I said the word cool so many times now it's lost it's meaning, but I do think it's cool, but that doesn't actually matter next to what are observable facts of the matter ... I clearly need to point out that I am not to blame for nature of those facts. I actually use the API's he is calling difficult and wants to avoid every single day, while I don't agree they are difficult or so difficult that it is worth _me_ putting in the the effort it has taken for him to avoid them, I can't deny that if there were a mature internals API comparable to this we would definitely benefit from that, I think it would have been better for his project and ideas to push for inclusion of his api in core, not to usurp the current API but to provide a higher level one just as it is doing now. But being in the core, and having a bunch of developers that know PHP inside out working on it and able to push patches and fix bugs in it, which they won't do to an external project, would then turn it into the kind of thing I could and would use, not for any of the reasons he has stated but for valid reasons that apply to lots of us, in the real world.
Me want bootstrap 3 :3 !!
To say php isn't required to write php extensions doesn't even make sense ;) It s a matter of fact that it's not required to have fully annotated and documented source code, every extension ever written was written for a PHP that is not annotated or properly documented. There is a tendency to mistake what we would like to be true for what is true; let us assume that the internals book is completed sometime before PHP.next, without funding for that project, real funding, how long will it be before that manual is suitable for PHP.next+1 !? In the real world, if that manual were complete today it would only be good for the next year or two, then we would have to wait several years (history tells us) before a useable manual existed. In the real world, the only way to get to know PHP is by reading it's source code and I don't see way to change that indefinitely, nor do I see that therre is a need, since we are all doing just fine. The best we can hope for the internals book is that it covers the kind of things that will always remain true so takes minimal updates once complete, and in those best of all circumstances it will still not be an exhaustive form of documentation, you will always end up in source code which isn't in my view a problem if you understand the language the code is written in; I personally prefer it, because like I said, it cannot be out of date, or badly described, or misinformed, if you are reading the code that you are executing. I've written and maintain a bunch of extensions both open and closed source, ranging from the very simple to probably one of the most complex in existence. Just the closed source ones keep me knee deep in internals every day, I don't find it to be as complicated or terrible as others appear to perceive it, I've no explanation for that, but am trying to provide my perspective ... I asked how many you had written because I was sure the answer was 0, since you questioned my grip on reality .... bizarrely ...
It is difficult to do much else - you've provided no context. Just looking over it, it would appear your intention is that this code be used somewhere like a controller - which would be inappropriate. It also isn't clear whether or not you can arbitrarily add or alter markup within the form (a feature common to most traditional form helpers which are simply a collection of functions that emit fragments of markup, as opposed to a fluent interface that emits an entire form).
I really don't feel like getting in internet arguments today.
You could fetch specific entities from Doctrine, and set the data on the collection field directly. I've given it a try and it works, although it requires a custom constraint to work safely. __Example Controller__ public function editTransactionsAction(Request $request){ $em = $this-&gt;getDoctrine()-&gt;getManager(); $transactions = $em-&gt;getRepository('AcmeDemoBundle:Transaction')-&gt;findAll(); $form = $this-&gt;createForm(new EditTransactionsType(), null, array( 'action' =&gt; $this-&gt;generateUrl('acmedemo_edit_transactions') )); // We set collection data to the array of entities we just fetched $form-&gt;get('transactions')-&gt;setData($transactions); if($request-&gt;isMethod('POST')){ $form-&gt;handleRequest($request); if($form-&gt;isValid()){ foreach($form-&gt;get('transactions')-&gt;getData() as $transaction){ $em-&gt;persist($transaction); } $em-&gt;flush(); // Add message to flashbag and redirect here (or just redirect // to a confirmation page) } } return $this-&gt;render('AcmeDemoBundle:Default:edit_transactions.html.twig', array( 'form' =&gt; $form-&gt;createView() )); } __EditTransactionsType.php__ This is the form containing the collection of transactions. The 'transactions' field is the one set by the controller above. public function buildForm(FormBuilderInterface $builder, array $options){ $builder-&gt;add('transactions', 'collection', array( 'allow_add' =&gt; false, 'allow_delete' =&gt; false, 'prototype' =&gt; false, 'type' =&gt; new TransactionType() )); $builder-&gt;add('submit', 'submit'); } __TransactionType.php__ This is the field for an individual transaction, and where things get complicated. When the form is submitted, Symfony assumes that the 'transactions' collection contains the exact same entities, in the same order. If a change is made to the database between the form creation, and form submission, data will be written back in the wrong place. To get round this, you could create a hash of the entity before saving new data over it. If the generated hash doesn't match the submitted hash, we know something has changed. The Callback constraint will add a violation, preventing the controller from persisting and flushing the entities. public function buildForm(FormBuilderInterface $builder, array $options){ // Add your fields as usual here // Check that the collection entry is still referring so the same entity $builder-&gt;addEventListener(FormEvents::PRE_SET_DATA, function(FormEvent $event){ $entity = $event-&gt;getData(); $entityHash = md5(serialize($entity)); $event-&gt;getForm()-&gt;add('entityHash', 'hidden', array( 'mapped' =&gt; false, 'data' =&gt; $entityHash, 'constraints' =&gt; array( // \Symfony\Component\Validator\Constraints\Callback new Callback(function($value, ExecutionContext $context) use ($entityHash){ if($value !== $entityHash){ $context-&gt;addViolation('Entity was modified before form submission'); } }) ) )); }); } This is quite difficult to explain in detail in one post. Let me know if you'd like me to explain specific parts in detail.
It also gets rid of Microsoft's "smart" quotes and punctuation, and replaces it with MySQL db safe strings.
PHP doesn't really have a concept of a string object that knows about encodings. A string is just a byte array. So if you get offsets back (from wherever) if a character takes up two bytes the offset will be adjusted accordingly. You can see this in action: &lt;?php $str = 'ø'; echo $str[0], PHP_EOL; $str_utf8 = mb_convert_encoding($str, 'UTF-8'); // php doesn't give a shit that this is a UTF8 string when you index it echo $str_utf8[0], PHP_EOL; You're probably better off to just use `preg_match` or `preg_match_all` with the [`u` flag](http://us2.php.net/manual/en/reference.pcre.pattern.modifiers.php). There would be no need for finding string offsets. &lt;?php $strings = array( "abc_o_pq XXXNoge{!n!} ad dio a", "abc_ø_pq XXXNoge{!n!} ad dio a", ); foreach ($strings as $str) { if (!preg_match_all('/XXX/u', $str, $matches)) { continue; } foreach ($matches as $match) { echo $match[0], PHP_EOL; // print XXX in both cases } } You can get offsets back from `preg_match_all` if you really need them: &lt;?php mb_internal_encoding('UTF-8'); $strings = array( "abc_o_pq XXXNoge{!n!} ad dio a", "abc_ø_pq XXXNoge{!n!} ad dio a", ); foreach ($strings as $str) { if (!preg_match_all('/XXX/u', $str, $matches, PREG_OFFSET_CAPTURE)) { continue; } foreach ($matches as $match) { list($substr, $offset) = $match[0]; // $offset is a byte count // this won't work because mb_substr is based on number of // characters as defined by the encoding. echo mb_substr($str, $offset), PHP_EOL; // but you can use plain old substr which doesn't give a shit // about encoding or character counts echo substr($str, $offset), PHP_EOL; } } **tl;dr** dealing with encodings with out a real string object makes me sad.
Thanks I'll probably go that route. But why do the mb\_ereg\_search\* functions not respect the encoding settings with mb\_internal\_encoding and mb\_regex\_encoding when I can do a mb\_strlen that is correct? This is clearly stated in the documentation but doesn't work as advertised (if at all). Is it a bug? Or are those functions just not ready yet or am I totally missing something? I mean they're supposed to work that way aren't they?
Yup, I think that's all the recent PHP buzzwords there.
I haven't looked at those in forever — what did they do **before** `__halt_compiler()` — do you know?
One option: 1. Create an environment for the demo server. 2. Create an [environment-specific start file](http://laravel.com/docs/lifecycle#start-files). 3. Place any filters / rules / code in this start file that pertain to your demo environment. You can use features such as `Route::when()` to target specific areas. This keeps your demo-specific code segmented without needing to do too much setup with your version control or your actual routes/filters/controllers.
I don't argue. I just smile and try to have a polite conversation about whatever product I'm building.
You could try and write something like Kibana/logstash.
&gt; there is composer.people not using it to distribute libraries are amateur PSR is a community standard (ie arbitrary). Each way has it's benefits and you should be intelligent enough to articulate both. You do not get changenotes with "composer" (I think you mean to say updated packages). There is no requirement to include them so they aren't usually pulled down unless they are committed (larger projects usually do include them). If you used composer, you would know that or you're just trolling, like it seems.
I found out that if you use a lot of primitives instead of objects, avoid circular references, and aggressively force garbage collecting creating long processes isn't the worst thing in the world. We use a little bit of PHP/Symfony2 at work for the reporting pages that our clients see, part of that involves then being able to export large amounts of raw data into CSV files and zipped. I was surprised to create a working daemon that has been stable and running for months now idling around 15mb peaking up to 500-1000mb at times. Granted it makes more sense to generally write daemons in a more appropriate language, yet keeping in PHP allowed me to use the same models and queries that the regular site works as well as deploy them together.
Millions.... and billions? 
My votes also go to Zend Framework 2 ACL. It doesn't do super complex ACL but suit the most common situation. It's also pretty easy to get up and running with. I'm actually using it in a Symfony 2 application at the moment. http://zf2.readthedocs.org/en/latest/modules/zend.permissions.acl.intro.html
I'm running long running PHP processes continuously and I haven't experienced any memory problems as of yet and I monitor memory closely. My processes are Symfony 2 commands functioning as a monitor and multiple workers tied together with RabbitMQ. One thing you need to keep an eye on is to "unset" anything that isn't used anymore.
Everyone has ideas. Ideas are cheap.
I assume exit/fread from offset, but don't actually know ...
Side point: I'm wondering how mb_ereg_search works, when ereg* are deprecated after 5.2.x
Good to note.
Yes, good question. Is there a roadmap somewhere?
Wouldn't you want to use Hack differently though? Like writing actual Hack and structuring your app the way that benefits Hack? Using Hack with any PHP framework seems counter intuitive to me.
Models that are application aware. No PSR-0 / PSR-4 compliance (and no composer.json for registering on packagist or even manually installing via composer). It's reasons like this that I get tired of seeing new frameworks. You might want to take a look at some of the other micro-frameworks around and see how they achieve things. I'm not saying to copy them, but certainly worth looking at. Also - what was your reason for creating the framework? Was there something that you found lacking in other frameworks or was it just a learning thing?
There is no need to get rid of those, and you don't have to sanitize your html output for your database.
"billljuions upon billljuions..."
http://www.devthought.com/2009/06/09/fix-ereg-is-deprecated-errors-in-php-53/ http://de2.php.net/manual/en/reference.pcre.pattern.posix.php http://de2.php.net/manual/en/function.ereg.php https://php.net/manual/en/migration53.deprecated.php ... most of what i could find. All seem useful. I think ereg* was replaced mainly because it is slow. http://stackoverflow.com/questions/1361591/php-ereg-vs-preg I guess the overall speed hit to apps is not so much in mb _* operations and so they have let ereg stay in the mb _* (or some other byte-level / unicode level technical detail)
A friend of mine put together a test of a whole bunch of email regex's, a long time ago: http://pgregg.com/projects/php/code/showvalidemail.php `arpad3` is the only regex that matches up to spec, and comes in at a mere 225 characters. Not bad.
That was to sanitize input for the database. All forms entries go through that. And the only reason that I got rid of the smart quotes and punctuation was because when it would go to display it would come out as something screwey, like this: Input: There was a "cat" at the door. Output There was a Â,catÏ¿½, at the door. Since I already had to validate everything else to sanitize it for the database, it was trivial to replace Microsoft's smart-quotes with regular quotes.
Don't forget that the + sign is an allowed character in an email address. So many websites do this incorrectly. For example: * bob@gmail.com * bob+spam@gmail.com Can be considered 2 different emails, even though GMail will send emails from bob+spam@gmail.com to bob@gmail.com.
If I had to validate input email addresses and couldn't use `filter_var()` I reckon I would do nothing more complicated than match against `/.+@[^.]+(?:\.[^.]+)?/`. I might not even do that, and I might not even use `filter_var()`. There are email providers that got (get?) the format wrong, and as a user, being told your email address is broken is a serious pain. I'm not convinced validating email addresses is worth the hassle, and I think if you need only valid addresses the only correct way is to send confirmation emails.
Couldn't agree more, you want to validate that email is actually an email - then send it a confirmation. Job done.
Do you want to get rants? Cause this is how you get rants. 
You can quickly stub out any intervening calls with: shouldReceive(array('method1'=&gt;1, 'method2'=&gt;2, ...)) But, no, you can't skip calls in Mockery. In a way, what you are looking for is something that test spies excel at. Mockery doesn't support Test Spies (yet) but it's being looked into: https://github.com/padraic/mockery/pull/283
phpBB is a large application. It has also had years of experience, it's made all the mistakes, and resolved them, that you can make. It's quite a complex application internally as well, due to the large amount of support for various configurations (PHP 4.3? MSSQL DB? Check and check.) IMO it's also one of the better coded. It has a very nice [coding standards](http://area51.phpbb.com/docs/30x/coding-guidelines.html) which might not be PSR compatible due to the standards being older than PSR, but they stick to the coding standards non the less. Disclosure: Was on the teams a few years ago (and lead the support team).
LOL, not particularly. I would prefer to get a good employee, but why would this get rants?
I want to go and build that myself now. I love that kind of challenge, but I think it will be too complicated and lengthy for the test.
Ssh, it's fun to use that to your advantage.
So if I want to test calls 1 and 4 i should do: // 1st call test $mock-&gt;shouldReceive('method')-&gt;with(...); // skip 2 $mock-&gt;shouldReceive(array('method' =&gt; 2)); // 4th call test $mock-&gt;shouldReceive('method')-&gt;with(...); ?
A general advice is to stay away from blog posts. They're often old and riddled with bad practices. Instead, I suggest you go ahead and refer to the [official source](http://www.php.net/manual/en/getting-started.php). You might also want to pick up a book or two if that's your cup of tea, but you should always refer back to the manual for current practices. 
I have found that long tasks in an interview are overkill. You can find out most of what you need by applying the FizzBuzz test. Modify it to apply your own terminology, and perhaps change the counting cycles. The rest is adaptability, and you won't find that out for about 90 days.
If you just want to see what they know we've used the SuxxStore to great success: https://github.com/thePHPcc/TheSuXXStore It's a little demo store that is intentionally written badly. Works nicely to check some things like "do they know how to navigate a codebase?", "where do they look first?", "can they follow an execution path just from looking at the source?", "do they know basic shit like SQL-Injections and best practices of security?" etc. etc. Just from "Where does he go first" you can learn a lot about their thinking process. You would be amazed at how many people we interviewed that went balls deep into the classes before even taking a look at the index.php
Am I reading the article wrong? It looks like it flat out rejects certain common Nordic characters (not sure if utf-8 only problem or also iso-8859-x)
Thanks! I think you just made our designer's day.
* If you required a code test, I'd find something to add on to the code test and watch them do that. * If you have lots of time, you can find some of the candidates code on GitHub and have them implement something new on to something in their code. * I had a code test where they had me work on issues from GitHub, I think I worked on some feature for phpUnit.
I concur with /u/pmjones that you don't actually want the applicants to spend much time "implementing", for various reasons that can put both the applicant (stress) and your company ("this is not how we would do it") at a disadvantage. There are a lot of situations where it will work out all right, but there are also false-negatives. If you want to ensure the applicant can do anything at all, nothing more complicated than FizzBuzz is necessary. If you feel you need stronger guarantees than this, /u/Ozymandias-X's approach can be sensible, but in this case I would only ask for an analysis, not (re-)implementation or bug fixing (if they identify SQL injection you can assume they also know how to avoid it).
Yes. You totally made my day- thanks :) Though, I'm just putting a pretty face on the great content provided by others in the community. At least I can contribute something to PHP :)
It seems that every time this sort of things comes up in this subreddit the mob of self entitled asshats comes out to play. It seems a lot of people these days feel that they should not be tested before being given a job and that doing so is an insult to their intelligence. When in fact all you are doing is finding out of they are full of shit or not, which sadly too many people in this industry are.
I'm going to take a stab, its a template class to assist logging in a user. I don't think this is the right place for your homework. Its a pretty simple template - if you don't understand, research OOP, properties, methods, and constructors.
Thanks. Looks interesting, but seems to be coded OK, except for security issues, which are of course important but not the full scope of what we would like to test.
Thanks, I agree. FizzBuzz looks good. Know of any similar tests? 
You should submit this to /r/phphelp
&gt;i know what what an if / if-else / case statement does. I guess the next step from there is to learn about "loops" and then functions. /u/Nicoon says avoid blog posts - and he's right for the most part, but for some of these really basic things I think blog posts should be fine. I think NetTuts has a solid free introduction to these basics. "PHP for beginners" or "PHP basics" or something like that. After that I'd go after classes - learn the difference between a class and an object. Learn the difference between properties and methods. Learn how inheritance works, and learn about "public" vs "protected" vs "private". After that, maybe start trying to crack MVC? I found the "[Symfony 2 vs flat PHP](http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html)" to be a real eye-opener. You don't have to learn the entire Symfony2 framework to get something out of that little walkthrough. Also, [PHP the right way](http://www.phptherightway.com/) is a pretty invaluable resource. But really for where you're at, the best resource I can point you toward is Google. Get good at looking up answers to your own questions and you'll become unstoppable.
I disagree with this article. Why spend all this time "validating" an email (and someone is going to have an email that breaks your validation) when you're just going to send them a confirmation email anyways? Check for an `@` before a `.` and send them an email. If they click it, verification done!
You could always allow the user to input whatever email they want, send the confirmation email and have a backend script that checks for bounce backs and mark accounts appropriately to let the user know you received an error sending email to that email address?
The whitespace sensitivity isn't that hard to get used to (coming from ruby) but that is not to say I prefer it.
For that to work properly, it'd have to be a real-time notification to let the user know before they navigate away. Unfortunately, some mail servers in a delivery chain may hold onto an email for days trying to deliver it before bouncing it back. I love the principle, but I don't think it's a viable solution.
If you wanted immediate feedback, that is true, it is not a viable solution. If it's a registration email and the person does not have access to the account to see any such messages, it doesn't directly help the user but it could help any support be able to see that there was a bounce back email recorded for that account. Also, if the user is granted access to the site/account, it may be delayed but it could alert the user on the site itself. Just some thoughts.
1. Read manuals, always. 2. Set a project for yourself, a small web application, just anything, and try to commit it. Good luck
The problem is how PHPUnit's at() looks at all method calls and not just what you're calling with(). So any more than 2 calls and it's a mess. Many hours wasted on fixing those tests.
I probably wouldn't go that route if you're making the user wait for the confirmation, since bounce-backs can take a little while. I've had to write email validation before. It sucks. The only reason anyone validates an email address is to confirm the user entered a valid email. IMHO, it's always better to do a very basic regex check of the email, and then rely on confirmation emails being confirmed. If someone wants to give you a fake email, they will find a way. 
One approach I've taken, when available, is to examine the candidate's prior work - either Github, provided samples, or even just their website - and then ask them questions about how they would modify/improve that work in some way that I've thought about myself (so I have an idea of some of the potential solutions). The 2 things I like about this is 1) it shows me how familiar the candidate is with their "prior work" and 2) it frames the test/question in a context that the candidate is familiar with and hopefully gives them the ability to come up with more complex ideas faster (unless they totally fail at part 1 - but that's part of the test). I had a candidate once who - when challenged about fixing a bug I had found on his own website - ended up admitting to me that he had copy/pasted his *extremely simple* website code from somewhere else, and didn't understand what it did at all.. 
You cant
I wasn't astroturfing, I was being reactive, which is also a bad thing.
Can you believe on my Uni course they referred us to w3schools?!
It shouldn't matter, because users will type both, which means your server should accept both and normalize them to the same thing.
Yeah this setup seems to be less about Hack and just about getting Nginx running with HHVM to serve up regular PHP... There's nothing really Laravel-specific about it other than some folders are named "laravel".
Zend_Acl is really nothing more than a proof of concept implementation. It's good if you want to write your own ACL routines and don't know where to start, but you can't just use it out of the box...
You can't. `~.bashrc` is for interactive console sessions only.
Wouldn't that be for consideration in checking if the email exists in the app/db already, not necessarily email validation?
I don't know of any that are generally compared to it, but if it's a similar scope it should be fine. The catch here is that "scope" can be very misleading. [Greatest Common Divisor](http://rosettacode.org/wiki/Greatest_common_divisor) can be implemented in a handful of lines but it is *far* outside the scope of FizzBuzz because it's testing something completely different (maths). 99 Bottles of Beer might be a decent substitute. Note that the point of FizzBuzz isn't to find good programmers but to eliminate non-programmers. If you want to find "good programmers" FizzBuzz isn't going to help much.
I'm so very sorry for you.
This is similar to Service Providers in Silex. Your `define` and `modify` methods match pretty well in purpose to Silex's `register` and `boot` methods. https://github.com/silexphp/Silex/blob/master/src/Silex/Provider/HttpCacheServiceProvider.php Also, why did you choose to make `Config` an abstract class with empty methods instead of an interface? https://github.com/auraphp/Aura.Di/blob/develop-2/src/Config.php
So what's the best way to inject custom environment variables into `$_ENV`?
Just to be certain -- are you talking about a commandline PHP program or a web application? (People are assuming you're talking about a web application, in which case they are right: you can't do what you're talking about because the two are unrelated.)
It is a webapp. As I asked someone else -- how do I add custom variables to `$_ENV`?
Spam.
Make it about your code, because that's all that matters. There are lots of tests out there that prove jack shit about peoples ability to solve the problems with your code base. Here's a problem we're having, how would you solve it? Not, implement the fibonacci sequence as a function on paper. Because, seriously, this is a stupid task that shows nothing about the abilities to deal with the issues you're hiring this person for.
It depends on the webserver and your server configuration. A typical setup is that the webserver runs as a particular user, something like wwwuser, and it is that account's environment that is is thus loaded. If you are running Lighttpd on *nix, you can get the name of the user by running the following from the commandline: ps aux |grep lighttpd In my case, it is www-data on one system and lighttpd on another (my desktop running Kubuntu, and a server running CentOS). It varies by server configuration, so there's not a single method, but if you know your operating system and server, that should give you a starting point. Of course, as you point out, there are also usually configuration options in the webserver itself (but you're asking not to use them, and again, that's server configuration dependent), and the PHP setenv() works (but only for that session).
Oh, and a big "oops", right after I posted the above. Easiest way to get the user that is running PHP is obviously to pull it right from the environment itself: &lt;?PHP echo $_ENV["USER"];
The absolute minimum.
Start with http://www.phptherightway.com/ People will tell you one thing or the other, but this is a good start. Also, I'd avoid getting too heavy into forums and reading pedantic arguments. There's so much circlejerking going on usually that it's mostly a waste of your time in many of them.
 die; First line, every time!
&gt; This is similar to Service Providers in Silex. Ah yes, it does look similar! I confess I didn't look at Silex when working this out. I guess that's confirmation that the approach is valid. My guess is that there are some differences in the intended uses between the two, but I'd need to look at the Silex stuff more deeply before I could say for sure. &gt; why did you choose to make Config an abstract class with empty methods The idea was that you could implement just define(), or just modify(), without having to implement the other if it wasn't needed. Perhaps that's inelegant. 
This seems a very reasonable way to handle it. 
Yes it would, it's 2 separate email addresses
So what's your opinion of a good language? 
Well, you could either include it when calling the script, i.e: $ MY_ENV=foo php index.php or you can make the webserver pass it to every request. Apache has `SetEnv`, i.e: SetEnv MY_ENV foo ... and nginx has `fastcgi_param`, i.e: fastcgi_param MY_ENV foo; 
It really depends on the task. There are plenty of good languages, PHP is one of them. But, just because something has high adoption does not mean that it's good.
&gt; In those situations, a "config" or "helper" or "builder" class couldn't help? Neat idea! I had not considered something like that, so my response here is entirely off-the-cuff. I can see where it would be helpful, if such was available, but some systems might not have that kind of thing available. For example, I don't think Monolog does (and that's not a shortcoming of Monolog at all) -- happy to be shown otherwise here. There's also the issue of authors having to provide the helper object in the first place, and then of translating the helper object into the "real" configuration. Overall it seems like "too much" added effort, instead of making the "real" object available to be modified as if it had been instantiated directly. ("Too much" is of course subject to whatever tradeoffs you feel are bearable.) Hope that all makes sense.
Even if the response is "stop spamming me"?
Gmail also ignores dots in the username. feketegy@gmail.com and feke.tegy@gmail.com have the same inbox.
That's why you rate-limit your emails. You *do* do that, don't you?
That's the point: you are constructing html strings, you must not validate/transform anything that makes it conform to your database. It has to confirm to html, and nothing else.
&gt; I guess that's confirmation that the approach is valid. Actually that's exactly what I thought as well. They are pretty convenient. &gt; The idea was that you could implement just define(), or just modify(), without having to implement the other if it wasn't needed. Well, with Silex's service providers, most of the time the `boot` method is not actually implemented, so it violates Interface Segregation Principle. While possibly "inelegant", I do see your approach as more convenient.
I am sorry I missed out the explanation, just added small piece of code here, though about to push couple of changes but you can have a look. Thanks for finding some time to give your suggestions and feedback.
 &lt;?php
That's a good point. You are correct. It would fail a !== test, but pass a != test. 
Not quite - * a company cannot reimburse the individual that purchased a Personal Edition license * a Personal Edition license is not version upgradeable * an Upgrades and Support subscription cannot be included with a Personal Edition license For $10 more, PHPStorm gives me a year full of upgrades and doesn't care if I'm re-imbursed by anybody.
I wouldn't recommend leaving JS to do all the work from a security point of view
&gt; Well, with Silex's service providers, most of the time the boot method is not actually implemented, so it violates Interface Segregation Principle. While possibly "inelegant", I do see your approach as more convenient. Yep, in Silex 2.0, there are plans for a separate BootableProviderInterface. 
Not a problem. Looking at your code base, it looks like you like to use singletons (including this form class). Do you have a valid reason? I don't see a need for a singleton pattern for your form class for starter. Not that a singleton should not be used, but I don't see a reason for this form class.
You might want to read their license, as it has the same type of restrictions. I quote: &gt; "If any third party pays the Software license fee or if Licensee expects or receives reimbursement for the Software license fee from any third party, this License shall be invalid and not in effect." Also not sure what you mean by "not quite", as it is "quite" literally $89 dollars. The fact that there are restrictions which essentially signify what "individual" means does not change that.
We're using Zend_Acl without any modifications in production environments without any troubles. If you're using the full framework (including the MVC stack), you can just implement a Controller Plugin to enforce access control.
This is funny, but its also right. Use a framework: it will have a bootstrap process and a main page that every request routes through - there shouldn't be anything you're including on every page.
as long as you're using a good authentication scheme, it shouldn't be a problem for most uses. If you're looking at some sort of marketplace, you'll want PHP for running your business logic, but even then you'll just throw JSON objects back and forth between client side JS and server side PHP instead of trying to get PHP to actually produce formatted and structured HTML.
Thanks. I made some wrong assumptions; I apologize.
No, singleton pattern not used here, object is dynamically accessed with Closure callback (type of Facade). For your reference - https://github.com/cygnite/framework/blob/master/src/Cygnite/FormBuilder/Form.php
Hey, less expensive then the student license !
Lol, keep in mind it's a limited time offer. If it's a success and we end up keeping it we will likely revise the student license.
This price change was definitely needed. I have bought both Komodo and PHPStorm for myself. I still highly prefer PHPStorm, but at least Komodo is now more competitive in price and might be the right choice for some people.
Interesting. I'm using the Gedmo SoftDeleteable extension in a current project, and it's working out well so far. Do you happen to know if it suffers from the same lack of maintenance? Is there something else you prefer? 
but thats not phpStorm..
Sorry for the stupid statement. Still, why do I want to use this Form class using a static method? Is there a valid reason for this? 
That's what I did for things that change on the order of once a year. For example, I had a payment methods XML file that was static with no PHP. I almost got fired for that because our CTO thinks every static page we send from HTML to XML to JavaScript must have at least one include file. I jokingly asked about adding includes to image files, and I regretted it because he said he would fire me if I couldn't figure-out how to add that. Fortunately he forgot, and I'm still working here.
Not so much. SoftDeletable is a lot simpler than Translatable, which has a lot of different use cases (and edge cases) and is (as far as I know) pretty bug free. Also, it appears that they have found new maintainers for the Gedmo extensions so it should be maintained for now at least. The biggest pain points with Gedmo are the Translatable extension and the Tree behaviour. Translatable is just poorly thought out, has lots of bugs and is a performance nightmare. And it's unfixable without a total rewrite. The entire setup of mapping entity columns to *rows* in a translation table doesn't scale. The Prezent Translatable and KNP Translatable both map translatable columns to *columns*, not rows. The Tree behaviour simply has a lot of outstanding bugs and suffers from an identity crisis. It tries to implement several tree algorithms at the same time. It looks like the new maintainers are working on a rewrite that should fix most issues though.
So, when you include a file, does the included file need an included file since the included file is technically a file you serve? 
Read the ["Clean Code" books.](https://sites.google.com/site/unclebobconsultingllc/books) Write a simple app, put the code on github and host it one digialOcean. For bonus points implement some continuous integration release extra fun. Make small tested modules other people can use available on composer. Apply for new jobs and smile when the interview offers come rolling in. Start work coding for some one ASAP. Real world experience is the best teacher.
ooh, how long is this going to run? I get paid next week. Have been using the free version of Komodo edit for years now and would love to get the the full version. Is there a limit to the number of machines I can install it on? I have two desktops at home and a desktop and laptop at work.
How does checking for a bounce work? Currently I just manually check for failed attempts.
I just did.
Also PHP is like $30 if you are a student Edit: I meant to say phpstorm not php 
Except even that isn't necessary, "john" is a valid email address depending on how your email server is configured, it's just quite unlikely to work unless your system has been setup just right. The only valid 'test' is to send a message and hope it's not rejected during the RCPT TO phase.
Like I said. It depends on your context. Is it worth it to spend time to develop a solution that sends a validation email for, maybe, potentially, somewhere, in the world, someone "crazy" enough to have that kind of email? Maybe for a huge application like Facebook... maybe. But, if you're going to write a validation email code anyway... why not. Depends on the context, you just need to think about it :)
Use a VM.
The website betterific.com might be helpful for sparking your idea nerves
1. Go-to-definition. I don't use syntax highlighting. 
This will be running long enough for you to get paid next week. You can install/run Komodo IDE and the license on as many machines as you want. 
StackOverflow has some ideas: http://stackoverflow.com/questions/3948818/tcpdf-custom-page-size
Yes, that validates it as a working e-mail. It exposes a separate problem(ensuring it isn't abused), but solves the one at hand. ".+@.+" is all the validation worth doing. If you're looking to detect typos, ask for the email address to be entered twice. Once that's done, dump the problem onto the software designed to deal with it and just send it an email. If the user gets the email and clicks the link, you know it's valid. If they don't, then you know there is some other problem. Virtually all code commonly used to test them is wrong in some way, missing a significant number of valid addresses. Meanwhile such tests fail to detect even the most basic intentionally fake email address. It doesn't prevent idiots from entering non-email addresses any better than a check for an @ sign, nor does it do anything to prevent malicious users from entering obviously fake emails. As tempting as it can be, all that work done trying to validate an email address prior to sending the email is an utter waste of time unless you're writing a mail server. 
&gt; Is it worth it to spend time to develop a solution that sends a validation email for, maybe, potentially, somewhere, in the world, someone "crazy" enough to have that kind of email? That begs the question of why you would try to solve this "problem" in the first place? If you're intentionally trying to do halfassed email validation, why even do it at all?
This shows a basic understanding of MVC and little else. It provides no means for making things like inversion of control easier. Doesn't do well on separation of concerns/decoupling when your data model holds a reference to your entire application. For configuration variable access? Things should configure your model; it shouldn't be allowed to configure itself. It even shoehorns you into following a specific routing paradigm, which means it isn't even that good to use as a router if you want to do anything out of the norm.
One forum &gt; YOU USE (x framework/templates/technique) WHAT A FUCKING JOKE, KILL YOURSELF Another forum &gt; YOU DON'T USE (x framework/templates/technique) WHAT A FUCKING JOKE, KILL YOURSELF
Something tells me that someone who is happy using notepad would shoot down any of the hundreds of reasons I could give you why Komodo (or any editor/IDE) is better than notepad.
Not sure I follow, what are you referring to? PHP doesn't cost anything ..
Well maybe it is time for you to become a good developer? In which case komodo would be a good choice.
You should check out [Aura for PHP](http://auraphp.com). If you like clean code, fully decoupled libraries, and truly independent packages, then the Aura project is for you. Download a single package and start using it in your project today, with no added dependencies. Not only that, Paul Jones (/u/pmjones) is a freaking genius. I know there's been a little overkill in this sub about Aura, but the guy writes pretty fine code, and has some great vision on refactoring ancient codebases.
Just curious, how are you implementing persistence for your roles and resources without extending the base classes? Everything in Zend_Acl is just based around arrays, if memory serves me correctly. There is no mechanism for persisting (and more importantly managing) your roles and resources. If you're storing them externally, don't you have to load in your whole permission tree each time? When we first tried to use Zend_Acl, we were defining our ACL rules in nested configuration arrays but that got super difficult to manage at scale (hundreds of resources, potentially dozens of roles, thousands of objects), so we eventually scrapped it and wrote a simple database-to-memcache-to-memory caching Actor/Resource/Object Acl system from scratch and used that instead, and saw immense performance gains. Our system is not as flexible as a general-purpose Acl, but for our needs (an MVC web application) it fit the bill, and it was much easier than trying to extend Zend_Acl or bolt in persistence, caching and efficient rule resolution/traversal. 
My bad. I meant to say phpstorm and I looked it up and it's $29 for students
A company cannot reimburse a person? Yeah, they can enforce that. Not. Not a single court on planet earth would even hear that case.
blah blah blah.
Ah gotcha. The student licensing will likely be updated if an when the personal license becomes permanent.
I'll take a look, thanks
I usually have them write a basic REST API with a GET and a POST method that will query/update a database based on the request. This is very flexible in that it's easy to integrate whatever framework you might use in real life into the test. It's not too complicated, but it has enough there to see if he/she knows enough about PHP and development in general.
Shouldn't this be... Doctrine Cheatsheet? There are dozens of ORMs.
I'm going to try to be gentle, but there are a lot of things wrong here. I highly suggest you read this: http://www.phptherightway.com/ - You should follow the PSRs from [PHP-FIG](http://www.php-fig.org/). The lack of namespaces (i.e. Common_master_controller) is insanity in modern PHP. - You need to use Composer, even if you don't have dependencies. It's the de facto standard. - There is no reason your demo data should be included in the framework. It's bloat for anyone that wants to use your framework. Make it a separate project. - No PHP file should end in ?&gt;. - It looks like all of your code is in the web root. You need much better structure. I suggest putting your web root in /web. - I don't understand the point of your helpers. They don't really add much to your framework and Date_Helper, for example, is code bloat. There's absolutely no reason to instantiate a Date_Helper class and call getCurrentDate() instead of calling date('Y-m-d'). - Database_Driver should be an interface, not an abstract class. - Get rid of die()s and throw exceptions instead. - The DB configs are hidden in a model class. Those should be moved to some config file that gets included somewhere. I wish I could be more specific on some of this stuff, but I really don't think there's great value in fixing this framework. There are many frameworks that do a passable job. Sorry to rip it so much. I think you should dedicate some time to studying "PHP, the Right Way" and learning to use an existing framework.
Check out [Codeacademy](http://www.codecademy.com/tracks/php).
It's good advice but it's aimed at experienced developers, not neophytes.
&gt; After a long period of consideration, research, and experiment, we have found a... really? To find this? This is nothing new. Is this how you impress guys like [this](http://www.reddit.com/r/PHP/comments/22hb5r/review_my_php_framework_miniaturemvc/cgmt6ig)?
You can not be reimbursed for a personal license with Jetbrains software. Such a restriction is the only reason some companies offer a cheaper personal edition
I'll say this again: Nice try pmjones! 
I would like to see this for Eloquent.
Looks like wkhtmltopdf can do it. Just create everything as HTML then feed it into wkhtmltopdf with the page size options.
And here I thought it would say "dont"
Honestly, most small companies could just pirate software if they wanted to. They don't.
If you've got some money to spare you can't beat pdflib. 
Funny! So many "my own frameworks" :) I too created one https://github.com/RodionGork/PhpLayout though I fear there are still many things wrong with it (lack of namespaces, not quite proper classloading, lack of integration with development tools) - to add to the fun note that **I am java programmer**, I am noob in PHP. However I want to mention goals achieved by my framework: - controllers should be thin, so they even are not classes, just plain scripts, which can address other layers via `$ctx` variable (context holder); - domain models are thin too (I know it is not often popular in PHP) - so they are `stdClass`-es - they are loaded and stored by dedicated `dao` layer, which is reachable from `service` layer; - service layer should incorporate "business-logic" - controllers call its methods - and services call daos in their turn (well, currently sometimes controllers go to daos directly, but it is not great violation while I do not use unit-testing). I've implemented simple CRUD DAO layer which provides a bunch of operations like `read(id)`, `find`, `findFirst`, `save`, `count` etc. - this is far from ideal but it still allows much work to be done. **In your case** I see the following: domain models not only are "active records" (it is considered normal in PHP, Python, Ruby etc.), but they incorporate some low-level database access, I even do not know for what reason since you have "helpers" and "drivers". The goal of existence of helpers and drivers is not quite obvious too... Their difference etc. At the same time I see that our implementation of "view" layer is quite similar - though I use `$model` variable to store the view data and it is an object rather than array, but this makes no big difference. I used url-rewriting bit differently, perhaps more clumsily - but it is also similar anyway. And here is one of two sites I used my framework for: http://www.codeabbey.com/
I wasn't implying that a language is good simply bc it's popular, just that it's good enough to commit to as there are plenty of jobs for it. Thankfully the community has really been pushing PHP a lot over the last several years. 
VCS integration, snippet/code generation, framework integration, macros, debugging tools, etc. It's an IDE, not a notepad replacement. 
This is totally not Paul M. Jones, lead developer of the [Aura for PHP project](https://github.com/auraphp) and author of the lean ebook, [*Modernizing Legacy Applications In PHP*](https://leanpub.com/mlaphp). I'm just a lowly punk who likes PHP &amp; Python, absolutely no relationship whatsoever.
"myFisrtClass"? "anumalName"? I wish I wasn't so distracted by typos… but they are typos that wouldn't make the code work, so I guess it's good as a programmer that my eyes see them right away.
Is that code for "handjobs in the men's room" or something? Cuz I'm totally down with that.
Love having to type 50+ lines of code for something that comes for free in other languages.
Your situation appears like an open-ended project like providing maintenance for an application and so would follow the same reasoning. Maintenance should be charged hourly if you're contracted, no exceptions. Require that everything be placed in a queue of some sort, usually an issue or bug tracker. When I say everything, I literally mean every single thing that is asked. Without this, they'll try to squeeze you for time, "it'll only be 5 minutes" they say, but that turns into 5 hours and a lost day. If they have a project manager for this, probably your contact person, have them prioritize your items according to the company's interests and possibly be the one to close items that require approval for being completed. Using something like this helps you keep organized, let's them see progress without annoying you every minute, and provides a history of what you've done. From here, just knock out the items as you can and work to provide as little friction as possible. Don't forget to communicate as best you can and as clearly you can during the entire process. Good luck.
What is the correct terminology? 
The correct terminology is [data transfer object](http://en.wikipedia.org/wiki/Data_transfer_object). [Data structures](http://en.wikipedia.org/wiki/Data_structure) are something else entirely. Also, the idea that DTOs can't contain any methods is wrong too. They *can* contain methods, but their logic should be simple and verifiable without the need to write tests to do so. 
Thanks. I'll just refer to them by this now. I think his point is more to simple objects vs. complex objects.
I like the idea, but I found that it was lacking a couple of features: * Support for multiple types (`array|null`). * Support for initial type, without having to set a value to have any validation. * Reflection about acceptable types. I added a single public method, `getPropertyType`. * Meaningful exceptions. Here is my take: https://github.com/lavoiesl/php-abstract-structure I also had some fun with https://scrutinizer-ci.com/, it’s nice !
Worse than typos. There are clear misspellings and grammatical errors throughout. I'm putting this one in my "other country blog spam" bucket.
What are you complaining about seriously…
Here are a few examples of simple methods which would be allowed inside of a DTO: public function getLastName() { return this.lastname; } public function getFullName() { return this.firstname . " " . this.lastname; } DTOs don't have any behaviour outside of accessing its own data, i.e. accessors and mutators. 
I still have no idea what you were linking to. Different people have different opinions. They may love, they may hate. If you love to see what others do, you can look the code. If you think there is something better than the one, you should provide some feedback to make it improve. ie what the culture of open-source I assume. Thank you.
Okay. That's a more specific constraint that makes sense.
I'm sorry, but I gave up after the first paragraph. It's just riddled with grammatical errors and reads like it was translated with Google Translate. English is not that hard (I speak it as a 3rd language); try to have at least the basics under control, because people will refuse to read your writing. &gt; Before going to explain OOP let me give you some real example like universe made of different objects like sun 
Is that where $this-&gt;enablePlugins('sfDoctrine2Plugin'); comes from? I'm not going anywhere near this. 
&gt; Nice try pmjones! I wonder why you all think it is only pmjones who love aura or do work in aura ? 
Why shouldn't PHP files end with ?&gt; ?
I wonder why you don't understand a joke O.o
/u/gvaldezsan I don't understand the joke in this. Probably I am from a different country / culture. If you can expand the joke, I will make sense next time.
Full name in some places is "FAMILYNAME, givenname".
Just that I thought it was a trivial thing to be found out "After a long period of consideration, research, and experiment..". Not to mention that the problem he is trying to solve only exists inside his head, made apparent by statements like.. &gt;The problem is that programmatic setup of foundational components can itself be a little clunky. Which does not says what the problem is exactly... &gt; static methods are a design approach that we consciously avoid... Why? There are reasons and situations where using static methods is bad design. But I am not sure setting up routes is one of them. &gt; However, that include-oriented approach never felt quite right. Here again, no reasons. Just he got some bad feeling about it, Why the heck should we care? And I am not sure I am able to make sense of his proposed 'solution'. Please tell me, what do you make of this section &gt;We then inject the decoded JSON data from the project-level composer.json along with the decoded JSON data from vendor/composer/installed.json into our Project service. And the comment I linked to is a guy saying that this dude, pmjones, "has some great vision on refactoring ancient codebases". So I was asking him if taking something trivial and projecting it as some grand vision is part of this trick to lure newbies into following him. 
And how are they going to police that?
Good job on the improvements. My goal was to keep it absolutely simple. If I needed to have the multiple types (in the current use-case it's going to hold request data so there's no need to edit past initialisation) then I would probably opt to do so with annotations...
You downvoted me over that? It's an example, get over it. 
No, _I_ didn't downvote you.
Depends what kind of applicant you are looking for. If your looking for someone who has the same reaction that you just had, then it is an excellent test.
I disagree with you on getFullName(). This is no longer an accessor as it contains a concatenation and would require a test. I also question the need for accessors like getLastName() or mutators of any kind as all you ever want out of a DTO is a class with public properties. A DTO should be a simple data sled. This minimizes impact as a dependency. If you need convenience methods, build them out as needed, close to where they are used.
I'm all for paying for software that is useful to me. However, that kind of restriction is simply stupid. A) If they pay themselves and are re-imbursed through an employer directly, how is that going to be checked against? B) Who cares where the money actually comes from? If it is one person getting it for themselves and their company pays for it, what does it really matter? Oh, you want the company to pay for the more costly version. Just like the ISP's we hate that charge companies 5 times the amount for half the resources a normal consumer gets.
I never started on Notepad...
I thought we stopped to write own frameworks about 5 years ago when Zend Framework gained popularity. Before ZF everyone tried to write their own framework.
Shall be giving this sort of thing a shot in my api. See if it makes sense...
I like to use this format: // php code here $v_color = "red"; $v_html_body_str = &lt;&lt;&lt; EOL &lt;body&gt; &lt;!-- we will assume you already output the head section --&gt; &lt;p&gt; html goes here &lt;/p&gt; &lt;p&gt; Can also embed values of PHP variables like the color: $v_color &lt;/p&gt; &lt;/body&gt; EOL; echo $v_html_body_str; Note the EOL must start at column 0 in your code and have no spaces or tabs after it. Also note a lot of time my back-end PHP does not output HTML, it outputs JSON formatted data either using the same method as above or using echo json_encode($data_array); 
thanks a lot for the tip, the version was indeed wrong, and I've already got some other helpful comments how it should look like, so i hope it will stand up for scrutiny now :)
see OP for clarification.
:) you are right, just now it is Doctrine Cheatsheet, but when I have little more time I will myself add Propel and Cake, and maybe Hibernate, so it will truly become ORM Cheatsheet. And if someone wants to contribute, any framework, link or parts of code that are useful for you (and you want to share them of course) are welcomed.
how would you output a select tag with option tags inside using twig?
By you being a professional and using software legally
This is terrible advice. Sure, twig is great. Should you always use it? No.
Good point except with the ?&gt; tag. I highly recommend the use of this tag, as long as developer is aware of what problems it might cause. I'm way too much OCD about my code structure to just remove the closing tag :)
Another option I have seen done - generate the document as a HTML/CSS page then use PhantomJS server side to produce a PDF. 
Are you looking for something like jekyll but PHP? Yesterday I was playing with Phrozn http://phrozn.info/en/ 
For the namespaces, I didn't think of them at all, I've never seen them used in PHP though I've slightly heard of them. The helpers and such are just examples of what someone could put there, they're not meant to be part of the framework. As for /web and and composer, note that the objective of this framework is to be the easiest possible to use for someone who doesn't know much about PHP. It's not going to be a commercial framework, don't you think those two things would add complexity for a beginner? I don't know much about composer, but I'm pretty sure it adds complexity. Same goes for putting the web root in /web, this means the user can't just paste the folder and start working, he needs to setup a virtual host and beginners generally don't know how or don't want to do that. I'd rather it be plug and play and easy to use than 100% proper. Also, could you elaborate on your last point?
Models contain the business logic of the application. The drivers only contain general methods to access the database.
&gt; I highly recommend the use of this tag Why? It serves no purpose in pure PHP files. As /u/okiipo commented, the PHP manual recommends you leave it off.
I will always favour a more complex solution that is correct, rather than a simplistic solution that cuts corners.
I appreciate the mention of [Aura](http://auraphp.com). Thanks! &gt; a freaking genius You're kind to say, even if it's not actually true. ;-)
that helped a lot. I managed to get it working. the documentation is a little lacking on precise detail, but there is a ton of examples. thanks
I stand corrected - [link](http://www.jetbrains.com/phpstorm/buy/license_personal.html) regarding reimbursement. Good thing I buy software personally. There is still the matter of upgrades within license period, however. If that is fixed and your pricing remains comparable in the future, I might take a shot when my PHPStorm license comes up for renewal.
&gt; the objective of this framework is to be the easiest possible to use for someone who doesn't know much about PHP. Total beginners shouldn't be using frameworks.
Sorry, this isn't exactly PHP. Maybe you want some other subs like /r/webdev?
Take a look at how a Laravel project gets started. 1. Install Laravel via composer * composer create-project laravel/laravel your-project-name --prefer-dist 2. Serve the site via PHP's built-in server * artisan serve You can now hit your site at http://localhost:8000. &gt; Also, could you elaborate on your last point? In a nutshell, this is how I'd describe how to change DB settings in your framework: Navigate three folders deep to classes/models/common and edit the fourth method in a model class. There is zero abstraction happening. Model classes are supposed to represent data structures and handle business logic, not initialize database connections. Typically, frameworks throw a config directory in the root. If you're dead set on creating your own framework, study how other frameworks accomplish what you're trying to do. You said one goal of your framework is to minimize complexity, but it seems like you're adding it. I think you're just misguided as to what is complex.
&gt;Don't listen to me No oigo no oigo, soy de palo, tengo orejas de pescado
If you're going to be OCD about structure (I am too, much to the chagrin of my colleagues), you should equally be concerned about not introducing code that could potentially break your site. It took me quite a while to get over it, but you have to force yourself to leave off the closing tag and make it your new obsession.
I dont have answers to those questions yet. This is from a ppt presentation that I got. They are gonna ask me like what plan do I have to met their schedule (that they havent provide me) for installation, migration, teaching. So.. its all in the air. I think they would want only Business Hours. There are known bugs, that im working on. But you know, every step could/would create new bugs. Something they may want is to force me to accept responsability for all bugs. So each payment they do for Adding more modules should reflect a guaranteee that there is no bugs, or if they appear that I would deal with them for free. (Charged on the price) They are looking for the cheapest way to make me their slave, but since I have "monopoly" on the application and they are in a hurry to fill a gap, they cant just move to another programmer or a company. 
Add a bug tracker. Duly Noted. Thanks!
Heavily restricted? It's an personal license, the main restriction is that you pay for it yourself, I'm sorry if that means you don't qualify for it but saying it is "heavily restricted" is not true. Also you say it is limited, which is absolutely 100% false. It is fully-featured, there is no difference in functionality whether you get a personal or enterprise license. I get that you may be experiencing frustration over this but it frustrates me far more that you are getting upvoted and your message is getting read by everyone when it holds false information. As for your last point, we know there are many factors involved and won't be looking at things quite so plainly. But again your comment about restrictions is just taking it way out of proportion. Our competition has the same restrictions, the only difference is we are making it more apparent during purchase.
A) Why bother paying for software if you're not going to abide by it's license? You're essentially making unlawful use of software. B) It matters in that companies can't just say "we'll just get the personal license for our 50 employees". It is not unusual for there to be a distinction in personal and enterprise pricing and services for a product. This personal license was heavily requested by our users and we listened.
I hear you, upgrades will hopefully become available in the near future but it is not something we can currently guarantee and so we have to say they are not available from a legal standpoint. It does not mean that they "won't" be available - they may be.
Excellent, glad that it helped.
[silex](http://silex.sensiolabs.org/) and [slim](http://www.slimframework.com/)
Thats another thing. The software doesnt exists legally speaking. Since I was not hired as developer, and since they didnt made me sign who was owner of the code.. Im not even sure the software is theirs or mine. Some friend said to me, to hurry and declare authorship on my country. I dont even know what that would acomplish.
I am not a lawyer, so you need to research this or speak with a lawyer yourself. Depending on your country's laws on IP, if you wanted to resell the software later, they *could* file suit against you unless you clearly have them agree that they do **not** own the software. However, unless this is explicitly written, it would go either way since they have been using it already. 
The word "rich" is nearly as big a joke word as "enterprise"... write a better tagline ffs!
Rich payments solution = lots of deep pocket customers?
I for one think we need less QQ in here and more pew pew. Komodo ftw. 
Approximately how many people are you broadcasting the message to and are the sites visible to the web?
I dont want a legal battle, and to add friction with the parent company, they already hate to have to use me. They think im like the other developer that worked on outside work on company time. I think my best bet is to create a new version of the software and sell that. But for now, im focusing on getting the most money I can from them. 
It sounds to me like you need something like mailchimp.com, not any type of custom job.
No way we could do that. These emails are confidential and outsourcing something like that would be a huge no-no. I think it would also be hitting a fly with a hammer to go that route.
OK, now I'm curious, seriously, what's your use case? My thinking is, if you don't want to ever send mail there, why bother checking the validity? If you do, you'll need to do mail sending anyway. Pretty much the only thing that comes to mind is some kind of ..data mining (yeah, let's call it that).
well, the # of people changes depending on which sites/how many are affected. Ideally, we're just getting the output from the form and then pasting into an outlook email, or the form causes outlook to open an email already populated. We don't have any need to tie this into actually sending the email, as we'd have to integrate it to our exchange server, and then this would become an official project instead of a small department tool (and it would require TONS of red tape and approvals to even begin moving) 
In fact this small library is just an adapter to DBAL to allow iterate over recordsets. Nothing that DBAL can't do.
Welp, don't use PHP then. Easy fix, right?
Looks awesome, will definitely consider it in the future!
Email is never secure
Depends on what the developer was trying to accomplish. On one hand, it seems like a great exercise in learning how to use interfaces, inheritance, etc. On the other hand, the whole sequences stuff appears as though the maintainer was unaware of hashes. I wouldn't use something like this in production. 
Good point. I would put it this way: rich = feature-rich = powerful = flexible :)
I always think of PHP going well with MySql. So you could do that. If you already know MySql, learn some JS/HTML/CSS. If you already know those, try combining everything to a website that has a back end!
I use PHP PHP for generating HTML on the back-end.
It sounds to me like you could easily do this with an Excel spreadsheet or an Access database. I can't see any reason to use PHP. It would be a waste of a web server, especially since you don't need the application to send the emails.
I could not have summed this up better, kudos to you!
Suppose you have a `$stuff` array with key/value-pairs, and you assign them to twig, in your render statement: echo $twig-&gt;render('template.twig', array('stuff' =&gt; $stuff)); In your twig, iterate over it, using a `{% for %}` statement: &lt;select&gt; {% for key, value in stuff %} &lt;option value='{{key}}'&gt;{{ value }}&lt;/option&gt; {% endif %} &lt;/select&gt; 
That's probably true, now that you mention it... but it's good to browse and at least familiarize yourself with the existence of the concepts.
We used the same approach a couple year ago in a project, but in later work we avoided using magic methods on DTOs and just use plain classes with public properties. Doing that you can take advantage of IDE autocompletion, which combined with strict docblocks can be very easy and fast to use. It depends on how you use DTOs in your application, but in our case, validation was generally moved to Zend_Form, so having double validation was like doing the same work twice and easily introduce bugs during code refactor
I would say Omnipay is a good library, that's why I would not reimplement any payments omnipay already supports. Payum differs in some ways from Omnipay that's why I work on it. First of all Payum does provide "nice api for all possible payments". Honestly saying I think there is no way to do such abstraction. Just to mention: Omnipay's Paypal gateway requires return url where Stripe one does not but needs credit card info. They are not polymorphic, other words you cannot change one gateway by another without adjusting the client code. [Payum](http://payum.forma-dev.com/ ) instead provide end payment specific solution. A developer can do whatever a payment gateway allows him to do. The abstraction can be built as a thin layer over Payum later. [Sylius](http://sylius.org/) is a good example here. From a client side perspective it looks like this: &lt;?php $payment-&gt;execute(new CaptureRequest($order)); You can change any payment by another and the code will still look like this. In Payum I tried to solve problems developer stacked with while integrating a gateway. For example storage i integrated right into the payment (via extension). Make sure sensitive values is not stored to any places. Not guessable payment url, make attacker live a bit harder :), and so on.
That's exactly what I meant: features
How would a hash solve the same problem as a sequence generator?
I don't know what to think about the lack of a ByteFormatterFactory class in that lib. Also, wtf at only 13 test cases ?!
Build something.
For the particular use case there is nothing important about the fact that megabytes comes after kilobytes and before gigabytes. Using a sequence here doesn't provide any value. The only important data here is that 1 megabyte = 1000000 bytes, and that 1 mebibyte = 1048576 bytes. Those values are never going to change, the sequence is never going to change. All of that sequence stuff is fluff that adds no value to the critical task, which is to determine which label to print. so instead of &gt;$this-&gt;getUnitSequence()-&gt;getSequenceIndex($scale); it could easily be &gt;$this-&gt;$base[$scale] where you have a simple hash of $BINARY = array('1048576' =&gt; mebibyte); etc.
Never stop learning, whatever you do.
That doesn't work. There is no imap extension to load. The file isn't there.
I'm really happy with my java IDE. I'd rather pay money for a known good product than fund a project that will maybe work. 
macGDBp is free, and I don't see any useful features codebug has over it.
As an Englishman, I guess I am completely missing the joke part of this question, as 11 people upvoted the "I use PHP to generate HTML on the back-end" which seems to me to be a non-answer. 
oh nice, the only thing i can see that its missing is the console and sublime text support 
&gt;I **will develop** multiplatform debugger written in fast, modern C++(11), which will work as client for Xdebug. It will be based on wxWidgets for GUI and boost for networking and stuff. How about you actually develop something then have people pay for it? This seems scammy to me. &gt;Target platforms are Linux (main) &amp; Windows (fully supported). **OS X should be easy to support too though** Oh yea, its so simple. 
When something is this low level, yet has this much abstraction, your staring into the gaping maw of an eventual performance problem. I can imagine that most of the time you would need to format the labels, you're going to need to do it a *lot* of times (perhaps you're using this to display a directory, or filesystem, or any list of files). Thats going to be a lot of function calls and class resolution, and all this abstraction doesnt necessarily give any value as far as maintainability, adding new features etc. Here's a 4 line script that only does one type of label, but could easily be expanded to handle all permutations and combinations: http://stackoverflow.com/a/8187127/429088
I honestly didn't know there was such a thing. Easy to use?
Why not under Linux? :)
PDO can make it easier (read: *can* not *will*) to migrate from one RDBMS to another; particularly during early stages of development, it is not uncommon to have a sudden change from e.g. MySQL to SQL Server. Also, PDO - with its prepared statements (which mysqli_* also provides, but for which PDO offers emulation if the underlying RDBMS should not support them), will help avoid SQL injections.
Should always PDO, helps eliminate sql injection. It is also less lines of code and the non-obsolete way of accessing the db
Thanks for your feedback. Sequences have been replaced with collections. Please review the changes if you have time.
With PDO you are not limited to using a MySQL database. PDO has drivers for PostgreSQL, SQLite and [more](http://www.php.net/manual/en/pdo.drivers.php). The added benefit of this is you can use one and if you decide you want to change to another database for a certain feature or one that scales better you could potentially switch without too much hassle. Assuming the queries you've written are compatible with the new database.
So, mysqli_ (with prepare statements) is not safety enough, comparing with PDO? I mean mysqli_ (with prepare statements) help to avoid SQL injections too, right? The main difference between both (mysqli and PDO) is "PDO has drivers for PostgreSQL, SQLite and others", right? 
There are only two reasons to use PDO over mysqli. Everyone has already detailed one of them - it's a common API used to talk to a multitude of databases. The other is that the way it does prepared statements is way, way, *way* more user friendly than mysqli. Binding doesn't happen by reference at call time, and you don't have to define the type of value being bound. This means that you can safely do binding in loops and perform other binding tricks that mysqli *literally can not do*. This comes at the cost of less flexibility for edge cases. They are otherwise generally equivalent in normal day-to-day operations. You should generally prefer using PDO.
Prepared statements w/ mysqli are just as fine as prepared statements w/ PDO when using MySQL. I merely said that PDO is a more flexible/portable solution. Also, PDO is strictly OOP which will probably lead to cleaner and more maintainable code. mysqli allows you to write procedural style code; which isn't a bad thing per se. 
Thank you very much for this answer. One more question: is it (PDO) slowly and use more processing time?
Like I said, it depends on your context. If you just want to check that the user entered their email address correctly (which will be used as a username) you could have 1 confirmation field. You could send a "validation email" (but that doesn't achieve the goal of what I was describing in the post, which is to validate the format, not the existence). And, some email will get lost in the junk mail, etc. And you'll have more code to do (or at least, use). Or you could just validate the format. Yes, the "format" validation is not always a 100% right, but it's close enough for the use cases I had in my 10+ years career. I never had anybody complain that they could not subscribe with their "I'm jim"@domain.com email address. I never received a complaint from support telling me that people entered a wrong email address and needed to change it. But again, those are for my use cases. For newsletters, I always use external services, so the activation emails are already handled there.
See the answer I just wrote up there. I was mostly thinking about emails as usernames. For newsletter stuff, I use external services. I would still validate the format of the email with filter_var method though (depending on the project, audience, etc).
I think ultimately it comes down to preference. I've been working for 18 years and I've never changed the database backend for an application. I prefer PDO's syntax over mySQLi. For example named binds: $STH = $this-&gt;db-&gt;prepare('SELECT * FROM y WHERE a = :thing AND b = :otherthing'); $STH-&gt;execute(['thing' =&gt; 'a value', 'otherthing' =&gt; 'b value']); I find it has more "nice" features in general, like populating objects straight from the database with or without running the constructors based on a setting.
Ah cool.. Smart to use the cachemanager to preload into memcache.. Sound like a good approach.. Thanks! 
&gt; actually don't just have time for that, I need to lay off work and for that I need some funding so replace my income What happens when the funding runs out? $2000 is nothing. I'd be very surprised if it even gives you enough time to build a half-functioning prototype, let alone all these claims about cross-platform and low memory footprint. 
That's a lot of words to not answer the question. What do you hope to accomplish with a comprehensive check of the email address that ".+@.+" combined with "enter your email twice" doesn't do better?
I think the point this gentleman is trying to make is that he estimates the task to be more complicated than you do, making its successful completion unlikely in his eyes. In order to address such criticism and demonstrate that you have indeed [done your due diligence](http://en.wikipedia.org/wiki/Literature_review), you might be wise to discuss [existing solutions](http://xdebug.org/docs/remote#clients) and your reasoning for starting from scratch.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Literature review**](http://en.wikipedia.org/wiki/Literature%20review): [](#sfw) --- &gt; &gt;A __literature review__ is a text written by someone to consider the critical points of current knowledge including substantive findings, as well as theoretical and methodological contributions to a particular topic. Literature reviews are [secondary sources](http://en.wikipedia.org/wiki/Secondary_sources), and as such, do not report any new or original experimental work. Also, a literature review can be interpreted as a review of an abstract accomplishment. &gt;Most often associated with academic-oriented literature, such as a [thesis](http://en.wikipedia.org/wiki/Thesis) or peer-reviewed article, a literature review usually precedes a research proposal and results section. Its main goals are to situate the current study within the body of literature and to provide context for the particular reader. Literature reviews are a staple for research in nearly every academic field. &gt;A [systematic review](http://en.wikipedia.org/wiki/Systematic_review) is a literature review focused on a research question, trying to identify, appraise, select and synthesize all high quality research evidence relevant to that question. A [meta analysis](http://en.wikipedia.org/wiki/Meta_analysis) is typically a systematic review using statistical methods to effectively combine the data used on all selected studies to produce a more reliable result. &gt; --- ^Interesting: [^Review](http://en.wikipedia.org/wiki/Review) ^| [^Review ^journal](http://en.wikipedia.org/wiki/Review_journal) ^| [^Systematic ^review](http://en.wikipedia.org/wiki/Systematic_review) ^| [^Bjork–Shiley ^valve](http://en.wikipedia.org/wiki/Bjork%E2%80%93Shiley_valve) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgnltwb) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgnltwb)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Thanks, good question! Well, that's not really that different, you're right! You could use that solution too. The difference would be that your users will have to fill 1 more field and maybe you'll have to write 2/3 lines of code to make the check.
Are you intentionally ignoring the question? You're using a complex and, by your own admission, wrong solution without being able to articulate any reason for doing so. You're also talking about having to "write 2/3 lines of code" ignoring the fact that the alternative is again, a complicated and known to be wrong validation process. WHY do you try to do the longer, more complicated, and incorrect validation? What do you gain by investing that extra effort?
I don't see how those 3 lines of code if (filter_var($email, FILTER_VALIDATE_EMAIL)) { return true; } is the "longer, more complicated, and incorrect validation" method? And how is this an "extra effort"? 
So basically you have no idea why you do it, you just do it?
I can't believe I'm still here answering your questions... Check out the different validation methods against different email addresses: http://mogosselin.com/email-validation/index.php I added the .+@.+ regexp. I don't like invalid emails like "john@-host.net" or "email@example@example.com" passing the test. But that's the beauty of coding, there's different ways of doing stuff. If you're not comfortable with that "long, more complicated, and incorrect" validation technique, then, for the love of god, use your own. And like it seems that you'll, again, answer with another question, I'll tell you right now that whatever you write next, you'll be right ;)
Not to quibble but you haven't answered the questions. You're hooked on the what, but ignoring the why. Since this isn't going anywhere I'll agree and it here, but on your own please consider the whys. (Not asking for a response to any of these anymore, just leaving them for you and any others to consider.) Why is "email@example@example.com" worse than "szdklfjhdskh@whitehouse.gov"? What are you trying to prevent people from entering? Will your method detect typos? Will it detect intentionally valid looking but invalid addresses? Will it detect any real world issue or merely spot intentionally contrived invalid addresses?
Exactly. It's a screening tool. Gives you an idea of the level a person is at. It is fun to talk through with people. Did the junior take advice well as you talked through it. Did the senior guy know of alternate methods. Were both willing to see it as more than a coding challenge?
It only mentions PayPal Pro, do you know if it covers Paypal Advanced too?
Oh well, I guess I'm giving up. Just a little parting advice.. think really well about what you're doing and why pretty much everybody here disagrees with that approach. You seem to be validating for validation itself, while simultaneously not achieving any real validation *and* disallowing perfectly valid (albeit rather uncommon) email addresses. Essentially, if you using that just for usernames, it's superflous, if your also sending them mail, it's both superfluous and insufficient. Just say no. On the other hand, thanks for the different perspective and your article is definitely enlightening in that I didn't know how bad filter_var was. 
Start on the smallest instance, and hit the site with something like [blitz.io](http://blitz.io). See what the results are like and scale up your instance as necessary.
Thanks for the advice. Digital Ocean has different sized instances that seem pretty straight forward. Rackspace seems a little more intuitive. Looking at the calculator here: http://www.rackspace.com/calculator/ I'd assume I'd start off with 1 server (1gb) which is $29.20/month, but would we need cloud databases too? Is there a difference between that and a "normal" database? thanks!
Use Digital Ocean, start small, test to scale and upgrade accordingly. But it sounds like you need a decent system admin.
I'll look into linode, but I don't think EC2 is right for us at this point, our needs are much more basic than what EC2 seems to be intended for. 
Why do you suggest digital ocean over say Rackspace (or Linode)? Also, why do you recommend a decent system admin? Or for what purposes would a decent system admin be useful for?
The only effective way to get people to stop using these tutorials is for Google to just stop returning pages that tell you to use the mysql_* functions. When you search for any of the mysql_* functions, it should do the "Did you mean ____?" thing (after showing the PHP docs for the function as the top result, of course).
It really depends on the nature of your app. You might be able to get away with hosting the web and database servers on the same instance with that same 1GB of RAM. You'd have to play with the numbers. Is it cheaper to add more RAM to the web server, or is it cheaper to keep the RAM lower on the web server, but spin up a separate dedicated MySQL instance?
Look, 98% of those tutorials *all* cover the *same* exact topics in the same horrifying way. **They should be pulled down, not updated.** Newbies would be much better served by having the community make it very, very clear that *any* site that has a tutorial that uses ext/mysql is not to be trusted.
Until the site is built, is there a way to estimate these things? And the nature of the app lends itself to minimal prolonged use, just checking it maybe 1x/week (as far as the DB- login, retrieve survey results to be displayed on his profile), no real user interaction. So with this minimal use, maybe the web server and db server could be done on one initially? Is there any detriment to that?
Been introduced to EC2 recently and am loving the versatility. Prob too complicated for OP like he said, but other devs should take note. 
Anyone else attending in-person? Would love to meet up and grab breakfast first!
Also, howdy Joshua! Looking forward to your talk tomorrow!
fetchObject() on result sets, I think: http://php.net/manual/en/pdostatement.fetchobject.php
You're just pedantically splitting hairs. While technically accurate, that use case is true for 1 in a million *applications* you might develop. For any consumer facing product that's simply not going to be the case and the `@` check + confirmation mail is pretty solid advice.
I'm so glad to see Facebook driving innovation in the PHP realm! You're really one of the only large companies actively pushing it forward. Can't wait to see what you have in store :-)
Looks like the OP wants strong static guarantees with a language that cannot provide.
I don't know what is the current situation with ZF2 but I stopped using ZF for same reasons. Back in days ZF tried to be Rails for php but workflow was way too complicated. There is better alternatives now and personally I prefer microframeworks like Slim +Twig for basic mvc job. 
&gt; And the comment I linked to is a guy saying that this dude, pmjones, "has some great vision on refactoring ancient codebases". So I was asking him if taking something trivial and projecting it as some grand vision is part of this trick to lure newbies into following him. /u/i_make_snow_flakes Probably we may have met in twitter or githib . I don't blame you for your complain aginst /u/pmjones . I will say it is for your ignorance knowing him and his involvement in the php community . Join php-fig you know the shepards there ;) . May be you are better than Paul. But I never met you in twitter or github ( may be, may be not ) . ( I know /u/mnapoli though we don't both work for aura ) . This is the joind.in profile of Paul if you care to look https://joind.in/user/view/250 &gt; Just that I thought it was a trivial thing to be found out "After a long period of consideration, research, and experiment..". Not to mention that the problem he is trying to solve only exists inside his head, made apparent by statements like.. May be the problem is because you didn't get the first para or you skipped it. Did you ? I am interested to know for we can improve the wordings in the future. &gt; static methods are a design approach that we consciously avoid... &gt;&gt; Why? There are reasons and situations where using static methods is bad design. But I am not sure setting up routes is one of them. Not sure what you do understand from the sentence "We want to keep good scope separation at all times, and make all dependencies explicit." which I have taken from the sentence following &gt; The solution I see most often for this is to use static methods on the target object; for example, Router::add() to map a new route. In Aura, static methods are a design approach that we consciously avoid. We want to keep good scope separation at all times, and make all dependencies explicit. Statics are not congruent with those goals. Please try to read fully before you end up in a wrong view. I am also a small contributor to aura and may be I know what he is meaning and what he is trying to solve and a fresh eyes doesn't feel or understand it . But I wonder how /u/mnapoli was able to figure out things and suggesting it. I do apologize if my words in love for /u/pmjones have made any wrong statements. Thank you.
/u/i_make_snow_flakes so what we are trying to solve here is building a framework on top of the components which are truly independent with the help of depenncy injection in the core. This is for the v2 which is having more improvements. We have some awesome contributors from the PHP. Have a look at http://auraphp.com/contributors/
&gt; . We want to keep good scope separation at all times, and make all dependencies explicit. Statics are not congruent with those goals. I did read that. But it still does not says why using Router:add() is bad. A dependency implies a dependent object right? He says about making dependencies explicit. Tell me something, when you call Router::add() from a Routes.php file where you define all the routes, where is the dependency created? What is the dependent object? Even if you have to test it adding Routes in this fashion does not prevent you from doing so. You can just include your routes.php and you will have a routing objects with all the routes set up. And you can do what ever tests that you want on that object. And let me ask something else, how often do you want to test your routers? 
It's not only tutorials, a lot of those people asking questions about mysql_* are in fact students whose teacher are still using php 4 or even php 3 source material for their course. The easiest solution would be to put a bullet in the neck of all those lazy people. But that's neither moral nor possible so we are stuck to answering the students with pointers to PDO. The fact mamp / easyphp should spit out errors about the non existence of mysql_* functions soon should help. Just hope the teachers don't start requiring old version of php like 90% of the industry.
I haven't seen one written in PHP yet but there is a simple python script that will also test. The original link disappeared but google has a cache of it. http://webcache.googleusercontent.com/search?q=cache:JNXilaDKzjIJ:s3.jspenguin.org/ssltest.py I've used it and it works. I couldn't get the Go version to work on ubuntu 12.04. 
Pretty good API. I dont' see why you could not extend it with; $mock-&gt;expectAt(0)-&gt;get(... $mock-&gt;replaceAt(2)-&gt;get I have a question: how well does it handle magic methods ?
I appreciate your feedback. As I have mentioned earlier Form builder is flexible enough to build inside your view page, it won't restrict you. Cygnite Framework has built in twig template support apart from using plain php view page. So only If you are using twig template for your view page then you need to build your form inside controller and pass it to twig template, as Symfony2 Form Builder does same way. Hope it helps, cheers. Thanks, Sanjoy
If we don't have HTTPS, does that mean we are still vulnerable?
No, the vulnerability is in OpenSSL only. It's been fixed in 1.0.1g (1.0.1e has been patch on CentOS 6.5)
Ironically the usual worst offender in these situations, w3schools, has actually converted their tutorial to mysqli a little while ago. Having said that their **[code is still dangerously insecure](http://www.w3schools.com/php/php_mysql_insert.asp)** and generally shit. I and many others have contacted them on numerous occasions to get them to improve their code (even just adding `mysqli_real_escape_string` would be fine), but they refuse to do so.
Do you have port 443 open? Some servers have a self signed certificate (which will cause name mismatch) but if SSL is active even with an invalid certificate, this could be an issue. Run the test on SSL Labs link above to check. Remember to click on "proceed with name mismatch" to continue tests.
Just a note: if you use mysqli you should use the OO style, not the procedural `mysqli_*` functions.
Good question, I don't know any. There are however millions(?) of un*x servers, each with it's own mail server and domain and tons of clueless users who will register any mail address they can. And there's definitely people using utf-8 addresses, IP addresses instead of domain names, etc.
To be fair to W3C, I think they're just trying to show basic MySQL usage without all the cruft that comes with validation. They do have, an admittedly poor, section on input validation, so they're not really trying to suggest you should just dump input straight into a query.
Couple of pointers: 1. I wouldn't serialize the roles using serialize(). Either use a JSON (json_array when using Doctrine) or, even better, use a integer column type and map the integer to the Role in your User class. This has the advantage that you can actually work with the type in queries. 2. Unless you need to store some additional attributes, it seems unnecessary to keep each type in their own table. You can actually reference another entry in the same table to get that connection. 3. In your example table for managers, it looks like manager_id is duplicating id. Don't do that, that will make it a pain to keep your data in sync. 
rackspace - great if you're corporate / budget not an issue. They provide a managed service that's among the best in the industry. Of course, you pay a premium for that privilege. digital ocean / linode ($5, $10 minimum plans respectively) - great if you aren't scared of ssh / command line, and the cost of managing that server in house is less than paying a bit more for someone else to do it as their job (ie, rackspace managed). A decent sys admin / managed provider will do things for you that you don't even realise (like keep you safe from heartbleed without you ever worrying about it, or perhaps raising a ticket to ask - and them saying its already proactively patched). Also, you need mysql, you log a ticket, it's done. You need postgres? Log a ticket, its done. If you go linode / dig ocean, you do that yourself, or you pay extra for them to manage it. If you're not technical, get a managed server. 
w3schools is **not** W3C, not even close. And my comment was more than fair. Not teaching users that the code they have on that page is dangerous is *blatantly irresponsible*. At a minimum, it would take *one sentence* to point out that the code is not totally secure and perhaps link to a longer article of SQL injection. Or, even simpler IMO, replace the code like this: &lt;?php $con=mysqli_connect("example.com","peter","abc123","my_db"); // Check connection if (mysqli_connect_errno()) { echo "Failed to connect to MySQL: " . mysqli_connect_error(); } // escape variables for security $firstname = mysqli_real_escape_string($_POST['firstname']); $lastname = mysqli_real_escape_string($_POST['lastname']); $age = mysqli_real_escape_string($_POST['age']); $sql="INSERT INTO Persons (FirstName, LastName, Age) VALUES ($firstname, $lastname, $age)"; if (!mysqli_query($con,$sql)) { die('Error: ' . mysqli_error($con)); } echo "1 record added"; mysqli_close($con); ?&gt; Edit: I just submitted this code to them via the contact form to prove how easy it is.
It's a good start, but just updating Apache is not enough to keep your server secure. Thomas Fuchs has written up an excellent checklist of what you need to do as a minimum, and upgrading OpenSSL is just step 1. Here's the full list: * Update OpenSSL to 1.0.1g. This is required before you do anything else. * Recompile anything that’s statically linked against OpenSSL. In many instances, web server software like Nginx is statically linked and must be recompiled. For example, if your Ruby is statically linked to OpenSSL, it’s recompile time! * Reboot the server. This must be done before issuing new certificates. * Create a new private key and CSR and get a new SSL certificate. You will need to revoke the old SSL certificate. (If you’re on Godaddy, use their “rekey” function. The old cert will be revoked automatically after 72 hours). Don’t forget to install your new cert. * Change any server passwords. These may have been read by an attacker as they are in server memory. It’s not a bad idea to issue new server SSH hostkeys as well. * Change any and all passwords and tokens of APIs you use. As server memory may have been compromised, an attacker could access the APIs as if they where you. Not good. * If you’re using cookie-based sessions in Rails (or similar environments) you must switch to a new encryption secret. Your current secret may have been compromised, allowing attackers to log in as anyone to your service. Unfortunately this means all your users will have to log in again. * Ask your users to change their passwords. As this security issue means that server memory may have been compromised as well as past traffic could be decrypted, passwords should be considered to be compromised. Source: https://mir.aculo.us/2014/04/08/heartbleed-exploit-tldr/ 
Have you considered using a service like [Wufoo](http://www.wufoo.com) or [SurveyMonkey](https://www.surveymonkey.com) to host your survey's?
I've looked into Slim, but from what I've seen, it isn't MVC. At least, from this link, it doesn't seem so : http://www.slimframework.com/news/how-to-organize-a-large-slim-framework-application 
Basic forms are easy to set up. The emails require some coding. Maybe a week or two for someone that knows javascript.
Take a look at OpenShift by Red Hat. 
Maybe if enough people contact them about this they'll actual do something about it? Naaahhhhhhh....... BTW, [is this you](http://stackexchange.com/users/17105/disgruntledgoat?tab=accounts)?
I find that for most applications, I really need another level of control. I want a "role" to be a collection of permissions. The actual access control then depends on those permissions. That's how Drupal and many other systems do it. Sales person, manager and product specialist would all be single roles which each define a collection of permissions but some of those permissions might be in common. It's not hard to build your own User Provider to do this. See the Symfony cookbook. Roles and permissions can be tables with a many to one relationship from permissions to roles. The naming gets a little confusing because what I provide to Symfony as "roles" with getRoles() are really what my database query returns as permissions based on what roles (my definition of role) the user has. 
Doesnt it also affect ssh?
Yeah, that guy!
because I only read reddit before posting this. mainly /r/talesfromtechsupport . but I needed account to post the link right? I would create it otherwise, had no use for account before
I'll go one-by-one: Dev-PHP (IDE: Windows) - IDE, windows only Eclipse plugin, which has been submitted as an enhancement for the PDT (IDE). - plugin for IDE, I do not want java IDE Emacs plugin (Editor Plugin). - I do not emacs, standalone thing would be better ActiveState's Komodo (IDE: Windows, Linux, Mac; Commercial). - IDE, AFAIK not opensource and definitely not free MacGDBP - Standalone Mac client. - max only NetBeans (IDE: Windows, Linux, Mac OS X and Solaris. - IDE, to heavy Notepad++ plugin (Editor: Windows). - notepad++'s windows only WaterProof's PHPEdit (IDE, from version 2.10: Windows; Commercial). - IDE, AFAIK not opensource and definitely not free Anchor System's Peggy (IDE: Windows, Japanese; Commercial). - IDE, AFAIK not opensource and definitely not free MP Software's phpDesigner (IDE: Windows, Commercial). - IDE, AFAIK not opensource and definitely not free PHPEclipse (Editor Plugin). - plugin for IDE JetBrain'sPhpStorm (IDE; Commercial). - IDE, AFAIK not opensource and definitely not free Protoeditor (Editor: Linux). - doesn't seem like active project anymore. latest news is from 17 Aug 2007. thats what, 9 years? there is still open bug from 2007-03-21. tsWebeditor (Editor: Windows). - windows only Xored's TrueStudio IDE (IDE; Commercial). - IDE, AFAIK not opensource and definitely not free VIM plugin (Tutorial) (Editor Plugin). - not everyone uses VIM, standalone thing would be better jcx software's VS.Php (MS Visual Studio Plugin; Commercial). - IDE, AFAIK not opensource and definitely not free. + something called "MS Visual Studio Plugin" probably is not on the linux XDebugClient - Standalone Windows client. - windows only I did my research. 
This is actually good content, unexpected for a post with such a title. I'm not sure about the semantic value of returning something after throwing an exception though...
Cool resource, by why are the default configs in XML? Who uses XML anymore other than Microsoft holdouts? For everything else, JSON is almost always a better choice. When it comes to these configs, YAML is clearly the better choice. What sane developer wants to type XML? 
1) it's 2000€, not $2000 2) in my country that's a lot. it'll give me about 3 - 4 months out of work, which I think will do
Can someone explain to me why upgrading with "apt-get upgrade openssl" still leaves me with version 1.0.1e ? I can't for the life of me get this thing to update. I've run apt-get update, apt-get upgrade, and it even ran through a process that said it was fixing ssl issues... but every single time I run "openssl version", it gives me the same result: 1.0.1e. What am I missing?
I attend 12-15 conferences a year, all over the world (I'm a speaker and developer advocate). php[tek] is one of the community highlights of the year. It's not the *biggest* conference (that goes to DrupalCon, or for straight PHP, ZendCon, Dutch PHP Conference, or PHP UK). php[tek] is great because it's unlike ZendCon it's not *too* corporate. It's got a great community vibe, amazing content, and there are people who attend year after year after year. I've been to all but 3 of them since they started in 2006. Alternatively, my **favorite** conference, is [Lone Star PHP](http://lonestarphp.com) which is coming up towards the end of this month. It's the only conference with a Foundations track (geared towards complete newbies... which I'm running this year), alongside other great talks, and the *best* social events — board games, cornhole, consoles on the projectors... good stuff. If you want more corporate, ZendCon is October is the one to go to. If you have any questions, feel free to ask :)
There's also [gtk-xdebug-client](https://code.google.com/p/gtk-xdebug-client/) implemented in PHP+GTK, though it's minimal and hasn't had an update in over 4 years, so it's likely dead.
Agreed. MySQL is very important for so many web applications. What I would suggest is install PHPMyAdmin on your computer (if you have access to all that) as you can create a simple database and table, very easily. Then use your newly learned php coding skills to do some simple queries to the database. Note, you don't need phpmyadmin. You can create databases and tables from the commandline which works too. But PHPMyAdmin makes it easy to view, edit, add, delete etc. But as a previous poster said, just build something. Build a website to catalogue your books, MP3s, food... something like that. 
Like the poster above me said, you don't need PHPMyAdmin, but my goodness it sure does make managing your database hassle free.
The new one may not have been rolled out to your repositories yet. Most distros released a backport that disables heartbeat. You can check if this is the case by downloading [heartbleeder](https://github.com/titanous/heartbleeder) (a command line utility). You can download a precompiled version there as well. If you have the disabled heartbeat version installed, you should see something like this: $ ./heartbleeder example.com:443 SECURE - example.com:443 has the heartbeat extension enabled, but timed out after a malformed heartbeat (this likely means that it is not vulnerable) (Edit: formatting fix) 
Ahhh... okay, that makes sense. It also explains the ssl security program they ran. Thank you, that's relieving to hear.
Thanks for the info! How focused is ZendCon on Zend Framework &amp; other Zend related offerings? I like how php[tek] &amp; Lone Star PHP offer a multitude of topics not tied to one specific area. Also, php[tek] seems pretty pricey compared to Lone Star PHP. Is it worth the $700-$950 in your opinion? 
I want also mention [PayumServer](https://github.com/Payum/PayumServer). Using this server you can add payment support to any of your site in few minutes. This is just a prove of concept and I'd really appreciate any feedback about it. Here you could try it the server [online](http://server.payum.forma-dev.com/).
why does it matter what language it's written in
Hey, I see Fabien Potencier on the front row!
Thanks! I've patched my stuff up, but the site you suggested for double checking is pretty neat.
I haven't been to tek, but I've always heard really good things about it — people seem to both enjoy and learn lots there. I don't think you'd go wrong with it, assuming the price is OK for you (or you can get your employer to pay for you to go). As for attending: I'm going for the first time this year, since they were foolish enough to let me speak. Very excited.
&gt; Assuming the queries you've written are compatible with the new database. Yeah, if you're queries are making use of any sort of optimizations, it won't be compatible. I'd say the point of PDO is not to be able to switch DB's on the fly, as much as to have a common interface so when you use SQLLite with it, you know the commands just as you would with MSSQL. No learning curve.
&gt; w3schools is not W3C Quite right, but it's easy for that 'C' to follow once you start typing W3... 
We have looked into those services, but our needs are a bit different than what those sites are intended for. 
Its not dead, its just pining for the fjords. According to the article, the github repo is being turned over to a Community team.
I think adding their managed service is an additional $100 on the monthly cost. It says "Let us create, install, patch, monitor, troubleshoot..." Realistically, are those things that an early-stage app will be needing (and our developer is setting up out hosting environment initially) right from the get go? So, bottom line, no, I am not technical in that I won't be going into command line, but are these things necessary from day 1 once the developer is done and has finished a 100% working site?
I was having the same issue on my Debian server: #openssl version -a OpenSSL 1.0.1e 11 Feb 2013 built on: Tue Apr 8 10:05:11 UTC 2014 But then someone told me about the apt-cache command: #apt-cache policy openssl openssl: Installed: 1.0.1e-2+deb7u6 Candidate: 1.0.1e-2+deb7u6 Version table: *** 1.0.1e-2+deb7u6 0 500 http://security.debian.org/ wheezy/updates/main i386 Packages 100 /var/lib/dpkg/status 1.0.1e-2+deb7u4 0 500 http://ftp.us.debian.org/debian/ wheezy/main i386 Packages Which verified I was running the latest. Might help ya
I attended php[tek] last year and it was pretty much the best thing I've ever done. I learned so much from all the awesome presenters. The social aspect of the conference was great. Everyone was awesome! I pretty much figured out from that conference that i've doing everything wrong! It made a bunch more work for me in the short term. In the long run I am so much better at my job now. I learned all the really cool things that I SHOULD be doing. PHP[TEK] is SOOOOOOOO worth it! 
What does "following CI footsteps" mean? Did the CI team throw in the towel as well??
http://ellislab.com/blog/entry/ellislab-seeking-new-owner-for-codeigniter
I guess I would think it was weird, honestly. That said, I've known of Zepto, I wasn't aware of anyone who used it. Clearly I was wrong in that assumption.
I kind of have my hands full with phpixie )
I was a little worried until I read this, quite a key part missing from the title/body
I have abandoned all of these bloated frameworks and fell in love at first sight: http://fatfreeframework.com/
I have been using MPDF and its amazing: http://www.mpdf1.com/mpdf/index.php ob_start(); require('template.html.php'); $html = ob_get_contents(); ob_end_clean(); $header='My Custom Report PDF File'; $footer='Printed {DATE Y-m-d h:ia} || Page: {PAGENO} of {nbpg}'; $mpdf=new \mPDF('utf-8','Letter-L'); $mpdf-&gt;SetDisplayMode('fullpage'); $mpdf-&gt;SetHeader($header); $mpdf-&gt;SetFooter($footer); $mpdf-&gt;WriteHTML($html); $out = $mpdf-&gt;Output('mpdf.pdf','S'); $mpdf-&gt;close(); header('Content-Type: application/pdf'); header('Content-Disposition: attachment; filename="MyCustomReport.pdf"'); die($out); Set the page style in the object creation, and use HTML to make it sexy. Party! Party!
It affects every web server that uses OpenSSL not just Apache/Nginx.
There are role specific details, yes. I just didn't include them here to save space.
Everyone probably left because shadowhand is a dick and his lackeys aren't any better. I ended up leaving a long time ago because I got tired of their bullshit.
Was, but it hasn't had any real amount of CI code in years. 
:^) http://phalconphp.com/en/
Yep. Free tier, scalable, git-based deployment, runs on AWS and has a solid community. 
I don't think Shadowhand was a dick, he was blunt with his opinions and didn't have time for stupid people. A lot of developers turn this way when you have to answer the same thing over and over ... 
When you say it runs on AWS, would I need to register for AWS too, or just them, and everything is done via their service?
Kohana *was* a great framework in its day. CodeIgniter was far too simplistic, had globals, no native auto-loading and lacked other features that Kohana solved; Then it didn't *really* progress after that. The Kohana developers wanted the core to be light, but I think as a framework you have to remember to build out features that users don't want to look for as a 3rd party plugin or develop themselves (Automatic security, easier debugging, etc ...) For me ... Symfony 2 hits all the points of a modern framework. 
No need to register for AWS - just that OpenShift Online uses AWS infrastructure. 
Of course this has happened. Every project has a timespan, from small beginnings, to prosperous growth, to eventual stagnation/demise/pretending its not dying/dumping onto somebody else. Good on them for finding a team of community maintainers to look after patching and security updates and whatnot. But, the guy that is working on a 1:1 Kohana clone is not really the guy that should be posting about this. It looks like a shitty childish gloat-fest which nobody needs. Nobody is impressed with PHPixie just because you havent quit tet, especially when you are basically the only person using it. CodeIgniter and Kohana both changed the PHP framework landscape for the better in their time. I really could not ever say the same for PHPixie, and doubt I will ever change my mind no matter how much work you put into it. I do however wish you the best with your venture.
That statement is fairly invalid. Ubuntu is a fork of Debian. Are they the same thing?
PhpStorm is freakin' awesome.
[Pot calling the kettle black, much?](https://pay.reddit.com/r/PHP/comments/22mjnm/kohana_being_discontinued_following_codeigniter/cgog25m?context=1) *edit*: I agree with the first half of your comment, but the second half is just as childish as you claim OP is.
For users of Amazon Linux AMI after running sudo yum update openssl It will say 1.0.1e, but it will be patched against the vulnerability (after you reboot). This may be true with other distros too.
&gt; first PHP framework I ever tried Wtf when did I get old?
At the core of it, yeah. **EDIT** Ubuntu is the retarded cousin of Debian, IMO. ;)
&gt; had globals, no native auto-loading wat?? seriously?
Ok, so what is the advantage of your thing over the symfony 2 form builder? why would I use yours and not it? 
Have they found a new home? That post is from July 2013
The problem isn't frameworks, it's a young company trying to build their web app quickly and cheaply, often with cheap developers, because that's all they can afford to do. You can build a scalable app on any framework or do it yourself, but the issues you'll face are the same either way.
So, ZendCon doesn't have a major focus on ZF2, there is a separate track for IBM iSeries, the only conference I've seen with this. [Here is a wayback look at the schedule](https://web.archive.org/web/20130805190620/http://zendcon.com/index.php/sessions/session-list) (it's very broken, but search for "Zend Framework" :) It's a very good balance between Zend and non-Zend in my opinion. If I had to choose between ZendCon and php[tek], well it depends what you want: more corporate with the best Zend content alongside other great content, more community with still great content — more fun to be had (and cheaper, I'm pretty sure).
I used FFF pretty heavily for a while and it's pretty sparse, as is its documentation. What you call bloat, I call less code I have to write. 
You will not regret moving to Laravel, on phone or I could give you dozens of reasons why. 
Seems like your hands are full with posting about phpixie on reddit also! (Also I didn't down vote you)
I fell in love with Kohana 2 after a short time with CodeIgniter 1.x. When 3 rolled around I had already left it. Sad to see it go but it's way past it's prime. 
Agreed. Started a fresh project in February using Laravel, and have not looked back. The ability to easily write CLI commands and migrations have been a life saver, and oh so much fun. The first 3 days will be frustrating but after that you should be wizzing around. 
Yes. Symfony still sees them as "roles" but I think of them as permissions and they come from my table called permissions which I admin with entities called permissions. Then I have something called a role which is a collection of those permissions. Symfony doesn't get to directly know about what I call roles.
It doesn't.
Because your column names have spaces, you probably need to use backticks. $sql = "INSERT INTO 'Students' (\`Id\`, \`First Name\`, \`Last Name\`, \`Phone Number\`, \`Major\`) VALUES ('$index', '$first', '$last', '$phone', '$major')";
`Id` is probably an integer, so there is no need to have it in quotes. And while you're at it, this layout will help you see your variables in most editors: $sql = "INSERT INTO Students (`Id`, `First Name`, `Last Name`, `Phone Number`, `Major`) VALUES (" &amp; $index &amp; ", '" &amp; $first &amp; "', '" &amp; $last &amp; "', '" &amp; $phone &amp; "', '" &amp; $major &amp; "');";
When working with a small team or a shoestring budget, frameworks serve a very important role by allowing you to benefit from the works of many others. So yeah I agree with you. Make it work, make it right, make it fast. Frameworks help you get to step 2 faster.
Bring crippled by performance isn't an effect of the framework, but more likely it's the need to get things done fast that is never revisited or refactored. Ripping out a framework can also be premature optimization. Especially if replaced by something the team is unfamiliar with. There is a lot of power derived from the conventions that frameworks provide. I don't know the nature of your fixes so I assume that they were necessary, but most companies will never be large enough to benefit from such a refractor. The frameworks generally have ways to achieve performance. 
Laravel is amazing. You won't regret it.
If I have to pick a framework it's Codeigniter for sure. I totally agree with Rasmus Lerdorf and his famous comment that he liked it because it was the least like a framework. Here is high level summary of what I end up using more often than not (bare in mind that there is a great deal of variability in all of this depending on business need ie. content-rich, if they are running web crawlers and performing heavy analysis etc In some cases we leverage Python) We use a custom PHP layer with a barebones model pattern (it's really just a handful of Wrapper-Objects that load through dependency injection as needed ... NO ORM unless they demand it in which case we have an elegant interpretation of the ROR active record pattern), redis for storing user/authentication data that is constantly used, memcached for name-value pairs following a domain naming pattern (namespace.domain.name = value and this can go as deep as you like),file based caching for content-rich sites (heavy on the articles so maybe we generate static XHTML pages). For the heavy lifting like data mining C++. Finally I recommend a graph database like neo4J. The harsh reality here is that despite the best intentions in using a framework like Cake, Zend or Symfony rarely do I see them turn into anything but a model of unnecessary complexity. I have worked with "Agile" teams that have turned into cults in the way they adhere to the rules of the framework and they are spending millions every year on hosting via AWS, Rackspace and even their own managed farms.
It really depends on your current level of knowledge. I went the last few years on my employers dime, but I wouldn't pay for it myself. If I was under 2-3 years Language exposure then maybe. I have been working in php since '99 though, which makes it tough to locate genuinely useful tutorials. I ended up attending the more fringe sessions like writing c extensions for php. Food stinks too, especially if you're veg/vegan. The sf2 conference in Portland last year was great though, and I don't even really use it. 
You've spammed about it everywhere every chance you've got. Not only on reddit, but all around the web in similar discussions with various handles. How do I know? There seem to be almost no developers than yourself... your own blog has almost zero comments, the Wikipedia article has been written by yourself and Wikipedia says that your article looks like an advertisement... but everywhere else on the internet, random "people" seem to like PHPIxie.
Yes
It looks good generally, but I do have a few suggestions: \* Instead of taking string arguments like this: -&gt;is('NotEmpty') -&gt;is('String') -&gt;is('LengthMin', ['length' =&gt; 5]) -&gt;is('LengthMax', ['length' =&gt; 20]); it would be better to have actual methods: -&gt;isNotEmpty() -&gt;isString() // or isScalarType(Types::TYPE_STRING) -&gt;hasMinLength(5) -&gt;hasMaxLength(20) \* Logically, assertion should be the last step when testing the input. So, instead of this: $test -&gt;assert('foo_bar') -&gt;is('NotEmpty'); You could do this: $input = $_GET['foo_bar']; // Or whatever $test -&gt;input($input) // A validator should not deal with superglobals, so pass a variable instead -&gt;isNotEmpty() -&gt;assert(); // Returns bool \* Finally, if you rewrite a library and break API *3 times in 4 months*, no one will (or even can) use it in production. I recommend smaller, incremental steps :)
In your example, why would I want to build separate validators for firstname and lastname, when both of them are validating the exact same thing. Even if they are not using the exact same thing, I would like to reuse a previously built validator object and add more validators on top of it. I also agree with the suggestion of /u/callcifier regarding using actual methods.
That's a good point. Re-usable validation collection is one of the things that I had to compromise in the implementation to allow condition specific error messages. Theoretically, there is nothing to stop from allowing (theoretical example): $test = new \Gajus\Vlad\Test(); $assertion = new Assertion () $assertion-&gt;is('NotEmpty'); $assertion-&gt;is('LengthMin', ['length' =&gt; 2]); $test -&gt;assert('user[first_name]') -&gt;is($assertion); $test -&gt;assert('user[last_name]') -&gt;is($assertion); $test-&gt;assess(['user' =&gt; ['first_name' =&gt; 'Foo', 'last_name' =&gt; 'Bar']]); However, then you would not be able to have condition specific error messages like this: $test = new \Gajus\Vlad\Test(); $test -&gt;assert('user[first_name]') -&gt;is('NotEmpty', null, ['message' =&gt; 'First name just cannot be left empty!']); $test -&gt;assert('user[last_name]') -&gt;is('NotEmpty', null, ['message' =&gt; 'We are not going to be able to email you without the last name.']); $test-&gt;assess(['user' =&gt; ['first_name' =&gt; 'Foo', 'last_name' =&gt; 'Bar']]); Of course, you can still translate the general error message using the Translator interface, https://github.com/gajus/vlad#multilingual. But often enough condition specific error is needed. I would appreciate if you'd raise an issue on Github with your suggestion. Passable assertion collection can be added as a feature.
&gt; Therefore, input cannot come at the beginning of the test. &gt; The reason for the is() syntax (using string to provide the validator name) is explained in the custom validator example, https://github.com/gajus/vlad#writing-a-custom-validator[1] . It allows you to add your own validator to the test script. Well, you can still support `is()` for custom validators, and have methods like `isEmpty()` for everything else. &gt; The underlying implementation might need work, but otherwise, I doubt if the exposed API will need changing. This is certainly your call, but you really should provide methods for common operations and move the `assert()` call to the end of the call chain. Again, this looks a like a good library. I just think there is room for improvement :)
Thank you! I have copied over your comments to my notepad and will consider them when planning the next update. If you'd like to own either of these issues, please open an issue ticket on github &amp; will close it as soon as the solution is in place.
That is easy to solve. Have the final assertion accept a filed name, which all of the validators up the chain use to to create their error messages. &gt;I would appreciate if you'd raise an issue on Github with your suggestion. Passable assertion collection can be added as a feature. I don't think so, as I am not a user of this library. Want to show some activity on github eh?
I've actually started learning CodeIgniter recently for work. The tutorials should have Benny Hill music playing in the background.
Would YOU want it? :|
It's better to say: no you're still not safe (do not protect your users, do not guarantee absence of MITM) if you don't use https.
It also makes sense to reissue certificates, as there is a good chance those could have leaked
Its not 1:1 clone, its not a clone at all really, they are pretty different.
I think you misunderstand the issue. The problems are on users side (as in case of compromised certificate they will be vulnerable to data theft or impersonation of your server). So, unused https is not a problem as… well… it doesn't have users
I have opened an issue with an enchantment tag, https://github.com/gajus/vlad/issues/4. You do not need to use the library to participate in the discussion.
It's sad to hear this news, but I think it has been a long time coming. I had noticed over the last year or more how the project stalled since Shadowhand took personal leave from the project for a month or so and some of core developers started tweeting more and more about Ruby. Kohana was the first PHP framework I got my head around and for that I'll always be thankful to Shadowhand and the rest of the team/contributors involved in it's development and progression. For the past few months I've been looking into Laravel and Symfony, but I'm not so sure which to sit with. Laravel feels easier to get going with, but seems akin to Kohana in that it's Taylor's offering and without him will wither and die.
Absolutely wrong. Even an unused HTTPS endpoint can leak highly sensitive stuff through RAM. 
That'd introduce ambiguity with the namespaces. You "Test\Foo" would be no different from "TestFoo", which would make it impossible to work with PSR-0/4 autoloader.
Kohana was a fantastic framework when it was relevant. Sadly, they put off a lot of developers, newbies and seasoned pros alike, by essentially giving up on documentation[1] and the core developers being quite an insular and unfriendly bunch. I just hope we won't see the same mistakes repeated in their new Ohanzee project. [1] No, "read the source code" is *not* an acceptable substitute
Good point, I'm not typing the code that much anymore, I use ORM Designer to do the work for me, so I probably kept XML first from nostalgia reasons. It can be easily changed. Anyone else would prefer YAML to be the first tab? Or maybe annotations like the official Doctrine documentations use? Let me know your opinions. 
&gt;&gt;&gt;What can we, the PHP community, do to change this situation? Write LOTS of better tutorials, post and link liberally, drive the old stuff down the search engine rankings so that newbies are more likely to encounter the good stuff when they're searching for answers. Personally, I learned PHP last year, having very little prior coding experience. PDO was by far the most difficult concept to get my head around - the tutorials I found mostly seem to teach from the perspective of somebody who already had a good understanding of PHP and OOP. In the end I managed to get my head around it by first learning how to do things the older, easier way, and then figuring out how to take what I had built with mysql_ and convert it to PDO. 
Yeah. A shitty web dev team would be pretty crap at basic stuff like caching, so anyways... It's not the language - it's just the lead devs. This sort of crap happens framework or not, so your point is moot.
I've never heard of a company failing due to picking a certain framework. It's theoretically possible, but I've never seen it. What I have seen, however, are teams failing to deliver because they keep switching frameworks or switching away from frameworks. Its almost guaranteed if you do that.
None have been announced.
Oh no, I wasn't being childish by calling shadowhand was a dick. That guy really was a massive douchebag in 90% of interactions I witnessed. 
Kohana had a good run! I've never felt that I've had to work _against_ the framework. It's unfortunate that over the past few years it's fallen behind. There's definitely far better, more modern, alternatives out there now. It looks like I've been added as a community contributor, so I'll do my best to support Kohana while I'm still actively developing a project using Kohana that I'm contracted for.
More like TOC review.
More like a short press release
I think you're missing the point. I'm saying you're being a dick, because you're being short with OP. This really has nothing to do with shadowhand, except the fact that you called him a dick, whilst being a dick yourself. &gt;But, the guy that is working on a 1:1 Kohana clone is not really the guy that should be posting about this. It looks like a shitty childish gloat-fest which nobody needs. **Nobody is impressed with PHPixie** just because you havent quit tet, especially when **you are basically the only person using it**. &gt;**CodeIgniter and Kohana both changed the PHP framework landscape for the better** in their time. **I really could not ever say the same for PHPixie**, and **doubt I will ever change my mind no matter how much work you put into it**. I do however wish you the best with your venture. The emphasis is to point out the tone of the hate and vitriol that seeps from your words... aka, you're being a dick to OP. C'mon dude, you being an ex-contributor to CI, and being paid to contribute to the project, even... Nah, you're not biased at all... ;) How about instead of ripping OP a new asshole, you instead show some fucking professionalism, and at least not shit all over OP's desire to foster innovation. Yeah, man... that's pretty childish, in my opinion. And you can't just ream someone and then at the end be like, "but good luck in your venture!"... That makes you look like a fucking asshole. *edit* Be above it, show some respect, even if you believe it's undue.
Your work is asking you to learn an all but dead framework?
UK dev here. I get plenty of recruiter emails asking for codeigniter experience. Haven't touched it for years myself but it's still out there.
&gt; None have been announced. That sounds like you have inside info. Care to share? 
1) Consider that there's no emphasis / emotion on the original text. The only emphasis is placed there by your mind. I've read a lot of Phil's posts (here, his blog and elsewhere) and regularly listen to PHPTownHall, and I don't think any real malice is actually there. 2) dracony does have a tendency to pipe on about PHPixie just a little too often and loudly for my liking too. The original post is a prime example, with there really being no need to mention it at all.
I understand this, but to have someone actively learn it, rather than use someone who already knows it seems a bit redundant. Obviously I don't know what resources are available to his company though.
Yeah, your post was pretty hard to read. Better to link to a [Gist](http://gist.github.com) or pastebin somewhere. Namespaces have often caused me problems with XPath. A lot depends on how the library you use handles them.
The issue is that it can leak everything in the process. So, with Apache with SSL enabled, even if nobody's using it, it can leak all information that goes through Apache's memory, including anything that goes through its HTTP port. Certificates aren't the only things that can be stolen through this bug; any passwords or private information in memory might, as well.
Note that if you use a distribution, don't compile shit unless you've compiled it manually before. Your distribution should do this for you so you can update from the repository, restart Apache, and everything should be safe.
I just started there, and it's what they use. In theory I'm going to be leading the team. I'm fascinated at the moment with the point at which "established knowledge" becomes a liability, rather than an asset. I want to learn it partially to help out with legacy systems, but also to help them transition to Laravel. I figure being able to say "This works a lot like x in CodeIgniter."
These guys are actively using it to develop new stuff, as far as I can tell. I just started this week and everything I've done so far has been in Silverstripe.
This is not a bad thing for your current company. If you are able to open source it you can continue to improve it after you leave. I have no idea what your code is about but imagine it is unlikely they would be able to sell it as most of the PHP ecosystem they would be competing with is open source anyway.
I have never started an open-source framework. 
Sadly not. I meant to say that while EllisLab may no more, I've not heard any rumors or anything.
That's fair enough. I have my opinions and you have yours. &gt; The emphasis is to point out the tone of the hate and vitriol that seeps from your words... aka, you're being a dick to OP. No hate or vitriol. I got to a bunch of conferences, meetups, talk to a lot of people. That is not a brag, I am just trying to give this next bit context: nobody I know, or have met online or offline has ever used it, or even considered using it. That is not proof that nobody uses the framework, but it's pretty close in my eyes. &gt; C'mon dude, you being an ex-contributor to CI, and being paid to contribute to the project, even... Nah, you're not biased at all... ;) I was definitely never paid to contribute, and I am definitely not biased towards CodeIgniter or against any other framework. I am open and logical with all my for and against points for any framework. http://philsturgeon.co.uk/blog/2012/12/5-things-codeigniter-cannot-do-without-a-rewrite It's not like I'm sitting around crying because people don't say amazing things about CodeIgniter. I've not used it in years, for some very valid reasons. Kohana was great. Their community was mostly great. They had some REAL assholes on their core team (not many would argue that, and it's not unique to Kohana) and it spawned a lot of clones, or forks, or inspired various aspects. Its legacy can be seen living on in FuelPHP and Laravel, as well as PHPixie. I think you think I am angrier than I am. I'm sat in Cape Town with a beer and I'm looking out over the mountains. I'm good. Really. But PHPixie is still incredibly poor, **in my opinion**. I am not obliged to pretend otherwise to avoid hurting somebodies feelings.
Totally with you here: you are giving them a service if you continue to use it or work on it even after leaving. That's cool!
Too many levels of nested quotes, you should look into using `sprintf` instead.
What are we supposed to learn in this article? I mean there is **no** content at all.
Yeah, I didn't realize that if a default namespace was given, then it needed to be defined for xpath. I've dealt with them in the past where there were multiple namespaces, and that made sense, but a default one, I just assumed xpath would also assume the default namespace given. lol pretty much killed an entire day on one line of code.
Thank you, that was stupid of me :)
Dude, youporn runs on symfony2. Your argument is invalid.
Nope
&gt; "I only use best practices and this is how it's done. If it doesn't work that's because of your old stupid code." I've hired a couple of devs that have this attitude. Unfortunately a lot of our existing devs have the attitude of "This is how we've done it for 10 years, it's made us money and the app works. We're not changing" Balancing those two attitudes can be tricking at times. 
Canada?
Almost... Olympic Mtns, Washington State
Consider looking into a template system instead of echoing HTML. Learning to use one now will make it easier to build large projects in the future. If you're going to do it this way, use `urlencode($row["name"])` unless you can guarantee the name will never have anything but letters and numbers. Otherwise you might end up with a link that doesn't go where you think it goes eg `trackInfo.php?name=cookies&amp;cream`
thanks for your prompt reply, its much appreciated! So it is possible! What is a good implementation for this? Rails?
&gt; node.js + socket.io As i listed bellow... you can integrate this into your PHP application. 
Damn, not far off. Beautiful. Enjoy! [This is my view](http://d.pr/i/Pkhr). 
Keep in mind, if you roll your own or go with something you host yourself, you'll have to deal with the PCI Compliance drama (and yes, it is drama). We have a free ebook about PCI Compliance (13 minute read) which should help you understand what's involved: http://www.foxycart.com/new My personal (as the creator of FoxyCart, biased) opinion is you shouldn't be handling payment stuff yourself. With today's security concerns, no one wants to be the next security joke like Target. Let payment security experts focus on the things they do best. That frees you up to focus on integrating the best tools for the job and building things which directly relate to your client's unique business advantage.
That means your offset (99) is too large. If the offset is larger than the length of the string ($metaDesc), it will throw that error. See this note on the PHP manual: http://www.php.net/manual/en/function.strpos.php#93816
The funny thing is: I would say that my company is on the bleeding edge of php development. We are not shy implementing new concepts. While at the same time we carry around a horrible 10 year old legacy system that we still have to support. So you could say we have a bit of both worlds. 
You can use multiple lines within PHP, even if the HTML around it should be one line :) Or just echo out the whole meta tag if that's easier? &lt;?php if(preg_match('/^.{1,99}\b/s', $metaDesc, $match)) { $metaDesc=$match[0]; } echo '&lt;meta name="description" content="'.$metaDesc.'" /&gt;'; ?&gt; In theory, that should shorten it to 99 characters taking words into account. This is completely untested! Uses code from accepted answer on http://stackoverflow.com/questions/1233290/making-sure-php-substr-finishes-on-a-word-not-a-character
Or alternatively: http://socketo.me/ if you want to keep everything in PHP (you mentioned Ratchet briefly but I don't think OP is aware what it is). There's a good tutorial in their docs for push notifications without making huge changes to your existing code using ZMQ and sockets; sounds exactly what OP is after: http://socketo.me/docs/push
 $pos = strlen($haystack) &lt; strlen($needle) ? false : strpos($haystack, $needle); // or just put a silent operator $pos = @strpos($haystack, $needle);
Wow, thanks! When it comes right down to it, that may be one of our defining characteristics. We actually give a damn about making eCommerce suck less.
PHP is rich on memory leaks, so do not forget to restart your socket server (often) ;)
this is priceless, hilarious :)
Nope, just curious if there'd been any movement.
As a founder I thank you for this confession bear, if ever one of my employees suggests open sourcing our code I will think of it. Also, do you mind me asking what company you work for?
here's you're answer: &lt;?php echo substr($metaDesc, 0, strpos($metaDesc.' ', ' ',min(array(strlen($metaDesc),99)))); ?&gt; Also don't forget in php you can do this: instead of &lt;?php echo 'my text'; ?&gt; use &lt;?='my text'; ?&gt; Notice that in the strpos() function I concatenated a ' ' on the end of the metaDesc, this is so that the strpos will find a space at the end of the string to return the correct last char number. Also, you can do it this way: &lt;?php echo (strlen($metaDesc) &gt; 100?substr($metaDesc, 0, strpos($metaDesc.' ', ' ',99)):$metaDesc); ?&gt; Thats just a simple short santax if statment
Google drive is your friend.
Bummer. I was hoping you'd have some juicy details. :-)
Good Riddance.
I understand you (I gave you a +1 for being honest) but you have to consider what kind of code you're outsourcing. If it's something that is reusable across multiple projects you might benefit from other people working on it. Also, think about how many open-source stuff you are using; my guess is you're in debt :)
&gt; I understand you Great thanks!
for a pure PHP implementation, look into Websockets? Wouldn't node.js also be using websockets?
IMO there are 2 kind of code a company produces: the one that makes money, and the rest. Any code that is not what the company sells (like code libraries, deployment tools, things to manage servers, even in-house chats, etc...) doesn't hurt the company if that's open sourced. However it can help the community, and it can also help your company if you get feedback and contributions on this code. Have a look at everything we open sourced in my company: https://github.com/myclabs. All that is a lot of work, which means company money. But this is not what we sell. But we have had people implementing features and fixing bug for us, for free. That's also a way to pay back for, you know, Linux, Apache, PHP, ZF, Symfony, Doctrine, … That's a win-win, nothing less.
You could use ReactPHP http://reactphp.org/ for the real time stuff and your framework of choice for everything else. That way you can reuse code and everything else. ReactPHP is pretty much a node.js port to PHP. 
not familiar with node.js, do you know of any "how to node.js" documentation, link? Everyone seems to suggest this. I need to implement this too, so help with an introduction would be absolutely amazing! 
just google 'node chat tutorial'. That'll give you plenty of tuts and ideas
Oh and you forgot to mention 5.3 compatible :-) .
Jumping in-- I'm the one who had to eat GF at tek last year. I'm sorry you had a bad experience, recycledheart. I have a lot of empathy for people with special dietary needs, since that's also my state of existence. However, I had a really great experience at tek. I let the organizers know ahead of time, and I felt SO taken care during the event. Eli emailed back and forth with me beforehand and figured out what my restrictions were. The waitstaff was aware before I arrived, and the chef prepared completely separate GF dishes for me. One was a really delicious baby green salad with walnuts, strawberries, chicken, &amp; feta. For the pizza dinner, they made me a chicken breast with julienne herbed veggies. I honestly got the impression that the chef was enjoying the chance to play around with new dishes. If that wasn't true.. they did a great job faking it. :P The only non GF meals were breakfast (pastries galore), but I talked with the organizers beforehand and expected this (continental breakfast is hard to do GF; I gave them a pass and brought my own). tek was my first non-community conference, and it was an excellent dang experience. If you can swing it (especially if your employer will pay for it), I recommend going. You will meet some really wonderful people.
That used to be more correct, but AFAIK, PHP 5.3 or 5.4 made improvements to long running PHP processes.
If you want to get a solution integrated quickly and reliably, I would look into using a service such as [Pusher](http://pusher.com/). If you need to implement this system immediately for 10,000+ users then it might be expensive. I would also have to agree with node.js and socket.io. Do not use Ratchet (the pure PHP implementation). With a large number of active connections this will cause you more headaches than learning node.js. Even though PHP has fixed a lot of leaks in long running processes, I would not trust it with a large userbase.
That would be like the biggest change
http://arshaw.com/fullcalendar/ Use with backend of your choice.
You and Paul are starting to get annoying with this shit.
This is pretty cool for many tenant servers. 
can laravel be installed on a shared hosting server? it seems that you need root access to install, is this right? i'm on CI and I've been thinking about moving over, but lots of my clients have shared hosting
like many many things, yup except sex and food prolly
Fullcalender is the best! I've used it for many years
You open to development in New Zealand? We specialise in large custom developed LAMP systems.
You could contact the company that built the website, it's listed in the footer.
For large data sets an orm is pain in the ass. It consumes more resources, especially on hydrating objects. For small data sets it is very very nice, i cant imagine doing stuff without it. I used eloquent, redbean and doctrine, where i find that eloquent has the best balance between ease of use and options. 
RabbitMQ using socket.io (in fact, look at Primus instead of socket.io)
This is the company behind most of the famous porn tubes [mindgeek](http://en.wikipedia.org/wiki/MindGeek), also check it out this of one of their devs about the structure behind youporn, [link](http://highscalability.com/blog/2012/4/2/youporn-targeting-200-million-views-a-day-and-beyond.html)
I came from CI originally as well. Not sure about shared hosting, but I imagine it works all the same. One thing to note is you will need to install composer in order to use Laravel. Not sure if you can do that shared host. You can also just fire up a AWS Micro Instance as well, and then have full control ;)
LOL ... I can't stop laughing. They did a complete rewrite and it made the app "10%" faster. LOL .. Dude thanks for that.
Thankyou for the advice! So will just node.js give me what I need or would I need Pusher aswell?
Hi, as a co-organizer for Lone Star PHP, I would like to challenge /u/EliCrossbow to a duel for besmirching the good name of Lone Star PHP. Sunday, April 27th, at dawn, in the field across from the Addison Convention Center. Ceremonial duel pistols will be provided, shots at 10 paces.
Good question. I won't say current version has better feature than Symfony2, but I would rather say, in the case of Symfony for an simple form you need to do more. For example- You need to create entity class, set properties and then using that class you can build a form where as with Cygnite Form Builder makes it so simple and easy, just add elements and render it. The main aim of Cygnite is to make developer job simple and easy. If you have any suggestion or idea to improve Cygnite form builder we appreciate you. Thanks 
I would like to point out that Lone Star PHP still has tickets available, the near-by hotels are cheap (we're talking 70-80/night), and DFW airport is a cheap SuperShuttle trip away. However as a Lone Star PHP co-organizer I'm kind of biased in pushing you this direction. To be honest, almost ANY conference you choose to attend will be a boon to you if you take the time to be sociable, befriend the speakers (they're humans too, I swear), and generally let yourself have fun. I've spoken and attended both ZendCon and tek, ZendCon tends to be primarily focused on large-scale corporate types. It's not 100% Zend offerings, it has a good mix, but it's kind of 2 parallel conferences in one, there's the PHP track and then there's the sub-conference for IBM i Series people (as that's Zend's largest demographic really). I don't want it to sound like I'm ripping on ZendCon, it's just the reality of being the largest PHP conference anywhere. tek will feel more PHP and developer oriented (not to say ZendCon isn't). It's pricey yes and as much as I would prefer you to come to my conference over /u/EliCrossbow's it really is one of those you need to attend and experience once at least. And Lone Star PHP will have good solid Texas BBQ during one of the lunches, WHO CAN SAY NO TO THAT?
Pusher would just eliminate a lot of work by outsourcing it to a third party service. Basically, with node.js, you'd write some kind of web service (or use a messaging queue like RabbitMQ) which takes messages, and dispatch them to all connected WebSocket clients. Your PHP script would then call this web service or messaging queue to dispatch these messages. With pusher, your PHP app would just have to call a web service at pusher, and their servers would dispatch the message to all connected clients. A lot of times a service like pusher may be preferable. You may quickly realize that you don't have the resources to handle a lot of connections, depending on your setting. And writing a scalable node.js app isn't impossible, but it does definitely add a little complexity to the project.
Any chance for someone starting out as a freelancer?
Yeah, I used eloquent on my last project. I ended up getting annoyed with it. I think the thing that really sent me over the edge was that if you have a model that use soft deletes and you query with `orWhere` it builds the querying in way that the soft delete is ignored. I wish this was at least stated in the docs. It basically generates `FROM table WHERE deleted_at is NULL OR cond1 = ?`. edit: Changed "incorrectly" to "in a way that" --- less of a negative slant.
If you aren't hitting tables with millions of rows use an orm. 
I am using Doctrine's DBAL on a project, and it's alright. It abstracts some of the minutia without requiring full on object mapping. I think if i had it to do over, I'd probably not even mess with PDO and go straight for pgsql. Too far down the path for me now, maybe for v2.0 or something.
 &gt; , do you add table prefixing to prevent collision issues when converting the data to associative array? You are asking about column aliasing. Right? Yes, if you are using direct access then aliasing column names will be necessary, if you are fetching directly into associative arrays. If you are using PDO, you can actually access all the columns in the result set even if they have same column names. &gt; Now that I'm modifying the query, I'd want to know what other places in my code I just affected. May be I am missing something, but how does adding an extra column going to affect anywhere else. if you are dealing with associative arrays, then you are not (usually) depending on the count of columns or their order anywhere in code. 
Just because you're not using a orm doesn't mean you're not using a active record pattern: f3 uses a active record pattern: http://fatfreeframework.com/home and has a orm as a optional plugin
Your ORM likely has the ability to run raw sql queries and get you back raw data (as an array, not a bunch of objects) which gets you a long way to better performance when it matters. If not, there is no law against a model running a raw sql query. Or calling a stored procedure. Almost every app I do avoids an ORM at some point, because scaling aside sometimes it's easier and faster to just run a query. 
It's not the row count that matters, it's query complexity. How the hell do you do a "row_number() over (order by insert_date desc)" function in an ORM? ORMs are for blogs and todo lists, plan and simple.
You can try Yii. It's releasing beta 2.0 this weekend. PHP 5.4+ and all the modern stuff inside while public API is fairly simple. Also it's fullstack that is becoming kinda rare these days.
Sorry for the confusion. My question was, I wrote my query specifically to fetch this exact data set, in my example this was usernames by id. Now that I've modified my query, I should figure where else in the code this query was used. If I had a `UserRepo`, it would have the method `getUsernameyById`. So now that I've modified the result of this method, I have unexpected results in other functions.We could assume that getUsernameById returned just the username, with this update it could return an associative array `['username' =&gt; 'baileylo', 'img' =&gt; 'gravatar.com/asdf']`. I imagine that you would, in the case of changing the return result from a string to array, actually add a another method. Though now that I think about it, I guess you would have something like `UserRepository::getById($id, array $columns)`. Which would prevent this issue I was thinking of.
Yeah, I hear a lot of people sing the praises of PDO because it supports multiple RDBMS. But when I looked at PG the syntax seemed different enough from MySQL that you couldn't just say "Look we used PDO everything works!"
&gt; How does one not use an ORM? http://www.php.net/manual/en/book.pdo.php
That your DB contains thousands or millions of rows, I don't see the point: you are not going to load every row in memory right?
Sent you a PM with some contact information as I just happen to own one such firm.
So you don't use objects, just arrays? And since you're using `PDO::FETCH_ASSOC` you don't do joins --- or worry about columns overwriting each other?
is this inherently bad in a small project? I find most ORMs to be lacking, either in documentation or features, and as such I tend to just take this approach whenever I'm writing in PHP
&gt; I'm just curious how people are implementing non-orm based solutions to data access from a SQL datastore. You may wish to look at [Aura.Marshal](http://auraphp.com/blog/2014/02/17/aura-marshal/): &gt; It’s probably not correct to call Aura.Marshal an object-relational manager. With ORMs proper like Doctrine and Propel, the ORM issues queries for you using an embedded or preferred database library. &gt; &gt; With Aura.Marshal, you use the data retrieval tools of your choice and write your own queries to retrieve data from a data source. You then load the result data into an entity type object, and the marshal automatically wires up entity and collection objects for you based on a relationship scheme you define for it. &gt; &gt; The great benefit of this approach is that it completely decouples the in-memory object wiring from the act of doing the queries in the first place. The Marshal knows how to build and interrelate the objects, but it has no idea how to get the data for those objects in the first place. Without the query-building stuff, the Marshal package turns out to be pretty light, comparatively speaking (only about 900 non-comment lines of source code, plus about 1300 lines of tests). (I am the lead on [Aura](http://auraphp.com).)
My main reason for not using an ORM is joins plain and simple. I want to get only the forum topics a user is allowed to read? I need to join the permissions table. But then if I update the topic model those rows are set and it gets confused (in terms of eloquent). But if I only include them for the where but specifically don't select them, then I also need to a second select to get the permissions. Or I could some fancy wherein statement which won't be very well optimised. I wouldn't mind if I could get a query and turn it into objects myself but that's not a pattern things like eloquent seem to handle 
You might be an asshole. 
An ORM is more or less just a query-building abstraction layer coupled with domain object hydration. So, you would "not use an ORM" simply by writing your own queries and populating your own domain objects with the resulting data.
http://www.epam.com
But a correct one.
PDO provides a consistent interface for use with multiple databases. You use the same methods: $dbh = new \PDO(/* ... */); $stm = $dbh-&gt;query(/* ... */); while ($row = $stm-&gt;fetch()) { // ... } $dbh-&gt;beginTransaction(); try { $stm = $dbh-&gt;prepare('INSERT INTO x (y) values (?)'); $stm-&gt;execute([1]); $dbh-&gt;commit(); } catch (\PDOException $e) { $dbh-&gt;rollBack(); throw $e; } // etc All those method calls look the same for whatever RDMS. The SQL, because each database has their own dialect or specifics beyond the standard, may look different. PDO's purpose isn't to abstract away the SQL, but to provide a good level of abstraction for (without getting in the way of) common database interactions. You're still writing SQL, so you're still tied to a database. That's one of the selling points for an ORM, "We use an ORM, so we can switch to a new database whenever!" In practice, switching a huge part of your tech stack doesn't happen that often. You get around that lock in to a database by [writing a data mapper](http://en.wikipedia.org/wiki/Data_mapper_pattern) or [repository](http://martinfowler.com/eaaCatalog/repository.html) pattern.
&gt; How does one not use an ORM? The same way you use an ORM. Abstract away common patterns of accessing your data behind an interface. If you were using an ORM, you'd use the entity manager or whatever to fetch things inside that abstraction. If it's just PDO or a [nice DBAL](http://www.doctrine-project.org/projects/dbal.html), then your storage implementations will contain SQL instead of using an entity manager's query builder or fluent API. &lt;?php interface PostStorage { public function find($primaryKey); } class PdoMysqlPostStorage implements PostStorage { const TABLE = 'posts'; private $dbh; public function __construct(\PDO $dbh) { $this-&gt;dbh = $dbh; } public function find($primaryKey) { // I have no idea if this works, I usually use doctrine's DBAL library $stm = $this-&gt;dbh-&gt;prepare( 'SELECT id, title, content FROM ' . static::TABLE . ' WHERE id = :id LIMIT 1' ); $stm-&gt;bindValue(':id', $primaryKey, \PDO::PARAM_INT); $stm-&gt;setFetchMode(\PDO::FETCH_CLASS, 'Acme\Example\Entity\Post'); $stm-&gt;execute(); $post = $stm-&gt;fetch(); $stm-&gt;closeCursor(); return $post; } }
&gt; I pity the organization that hired you in the first place. Likewise, I am sure.
I used to have a "Fuck how people feel, I'm objectively correct and will always be vindicated because of it" attitude as a younger developer. You're in for a rude awakening in a couple of years, friend.
Being able to write a raw query isn't that useful if you dont have an object structure to map it to. My point is that an ORM makes already simple things marginally simpler and hard things borderline impossible. When you get into summaries, reports, and non other non-CRUD things you'll end up with tons of different column combinations, some derived from aggregates and window functions. 
I think it's inherently normal, personally. We built plenty of profitable systems before the rails cult decided writing SQL was evil.
ok thank you 
If I were initiating a large scale CRM project, I would insist that it be built atop the OroCRM platform (http://www.orocrm.com/). Entirely open source, feature rich business application platform -- all of the things which any project of this nature would need have already been implemented, and done so at a very high level. It is a _tremendous_ jumpstart for projects of this nature -- _months_ of development time is saved. The project budget can then be directed exclusively at domain specific implementation. MUCH more bang for the buck.
It looks like you are storing passwords in the database in plain text. This is a big security violation. Research hashing passwords. You can start here http://www.php.net/manual/en/faq.passwords.php Also it looks like you have a typo "Exceotion" instead of "Exception"
To add to what you said, I've always referenced this Stack Overflow post for password storage: http://stackoverflow.com/a/1581919/1078184
http://www.nearsoft.com
I know I shouldn't do this but the hashing is too much for a test website that only 100 people will use without having personal information. It would be useless for the hacker to hack for this (If he finds the website)
Javascript most likely.
There are lots of shitty ORMs out there that people may have tried and subsequently concluded that all ORMs are bloated. I have a concrete example in mind that I've profiled: [Kohana](https://github.com/kohana/kohana). Details below for why it's bloated, but suffice to say that it is O(n^(2)) when it could be O(n). Kohana is no underground framework, though it's not talked about much. It's certainly on the [decline](http://www.google.com/trends/explore#q=kohana). In Kohana, you might make a model like this: &lt;?php class Model_Article extends ORM { // ... } // ... $new_article = ORM::factory('Article'); $new_article-&gt;title = "Foobar"; $new_article-&gt;save(); // ... $articles = ORM::factory('Article')-&gt;find_all(); foreach($articles as $article) { printf("%s\t%s\n", date('Y-m-d', $article-&gt;timestamp), $article-&gt;title); } Seems kind of sane, right? Wrong. The problem is Kohana's ORM is woefully bad in the way it handles relationships. I don't recall how to define relationships, but suffice to say that if each **Article** has an **Author**, it might be accessed like this: $article-&gt;author // Model_Author $article-&gt;author-&gt;name // String Unfortunately when the set of articles becomes long, say 10,000 articles in one query, the performance of the ORM suffers because of how it's written. You see, Kohana might generate a query for the `find_all` operation that looks like this: select article.id as article:id, article.title as article:title, user.id as article:author:id user.name as article:author:name from article left join user on user.id = article.author_id From that you might get a result table that looks like this: | article:id | article:title | article:author:id | article:author:name | | :-- | :-- | :-- | :-- | | 0 | How does one not ... | 0 | baileylo | | 1 | What is Fascism? | 1 | Rundownthriftstore | | 2 | I have left myself... | 2 | gammison | | 3 | Many Devices Will ... | 3 | NotEltonJohn | Kohana then needs to unpack this flat row into the format we want, basically an object ($article) with a string property (**title**), and an object property (**author**) that itself has a number and a string property (**id** and **name**). The place where it does this unpacking is **Kohana_ORM::_load_values**. Its relevant [source](https://github.com/kohana/orm/blob/3.3/master/classes/Kohana/ORM.php#L1098) is below. **$this-&gt;_object** is the place where the literal **$article** object's properties live, and you can imagine that **$this-&gt;_related** is where the objects with whom we have a relationship (author) go: protected function _load_values(array $values) { foreach ($values as $column =&gt; $value) { if (strpos($column, ':') === FALSE) { // Load the value to this model $this-&gt;_object[$column] = $value; } else { // Column belongs to a related model list ($prefix, $column) = explode(':', $column, 2); $this-&gt;_related[$prefix][$column] = $value; } } } What's wrong here is that the columns are re-parsed once per row. When I profiled this, over 90% of the time spent was in **strpos** and **explode**. A better way to do it would just be to parse the structure once and access the column values by index instead, but the result is that the ORM is actually so much slower than it needs to be. So to answer your question, modern ORMs are good but old ORMs are bad. 
You have purposefully avoided being correct. Unqualified adverbs and random adjectives aren't compelling. Relatively, Proper, Agility, Flexibility...these don't mean anything. The word "should" is used when someone is unable to articulate their reasoning or prove their claims. Often, replacing "should" with "I just know the truth that" in any discussion, can clear up what's being asserted. Even the phrase "clean domain model" is astonishingly naiive. You have not made a good case or any case that I can see. You're probably not going to learn how to argue or even be more constructive from someone chastising your strange assertions, particularly with that fragile ego.
&gt; You have purposefully avoided being correct. Not at all.
If you use Postgres, you can return data as JSON objects and really get away with a lot without using ORM hardly at all. I use a basic system to handle CRUD operations, but using Views and JSON objects makes it a dream-- and fast without bastardizing things in PHP. ORMs just aren't as good, flexible, or fast as the SQL language. I hope one day that ORMs will be outmoded with things like Postgres being able to get data in a good format while being able to have complex (and simple) queries interact with each other in the way that ORM would, if it actually worked efficiently.
Are you opposed to using third-party software? If not, I highly recommend DiffMerge. It allows you to compare files (and folders) so that you can decide what's important to merge and what's not.
Eloquent won't, no, but Doctrine will (kinda)! You have to use "DQL", but it's quite powerful once you're used to it, and it'll hydrate things based on exactly what you're asking for, joins included. I much prefer Doctrine for cases like that, worst case I'll just write some damned SQL ;)
Thanks, I have already been using DiffMerge - it's really good. I guess I'm just trying to find out what I should be replacing, deleting or adding, when merging the master laravel/laravel with the starter site code in my app?
&gt; It's not the row count that matters, it's query complexity. I agree. Row count is irrelevant as long as you're not trying to hydrate all those rows at once. However, query complexity, with a *good* ORM, is manageable. &gt; When you get into summaries, reports, and non other non-CRUD things you'll end up with tons of different column combinations, some derived from aggregates and window functions. The examples you gave (summaries, reports, aggregate functions) are typically read-only use-cases. You shouldn't be using a ORM for those, just write SQL and some view templates. Longer-winded reply follows. --- I'm heavy user of Doctrine, and the rest of this comment is informed by my experiences with that particular ORM. Until a few years ago, I felt like you, because I'd only been exposed to ActiveRecord type ORMs, and those didn't seem to do anything for me beyond making the very-easy marginally-easier (and then promptly getting in my way). Data-mapper ORM's a good for all sorts of OLTP applications. But you still have to know how your RMDBS of choice works, and how to write SQL. A good ORM buys you a lot, but it's no panacea. What you get (with Doctrine, at least): - A limited set of types ("entities"). You can type-hint on them! You can have inheritance! You can compose them! Up in the presentation layer, you can write a view helper that takes MyEntity[], and it always just works, because the your data are objects, not resultsets. You can write your own entity object hydration code, sure, but then you're just building a shitty home-grown ORM. - Unit-of-Work. All write operations are deferred until you flush them. You get an object graph from your ORM. You manipulate the object graph. You flush. When you flush, your database receives everything wrapped up in a nice, atomic, transaction. If you want to get fancier about how those transactions work, you can, and it's easy. - Events. Because you have this fancy unit-of-work, your ORM can emit meaningful events. This means you can write listeners to handle implement all kinds of reusable behaviors to do things like keep last-modified timestamps up to date, hook into your i18n stuff, manage tricky things like nested-set models -- all in a reusable way. - A decent query builder. I don't often use it, preferring to since some raw DQL is often more obvious. But coupled with a decent event manager, having a query represented as an object is pretty nice. Your listeners can then listen for events and modify the query as needed to support a particular behavior. What you don't get: - Basically, stuff raw SQL is good for. Read-only work like reporting where you want to leverage aggregate functions in your RDBMS. My point being, if you're using a *good* ORM, you're not really losing anything. You can go to raw SQL when you need to, and you get a well-designed, well-tested, abstraction layer on top. &gt; Being able to write a raw query isn't that useful if you dont have an object structure to map it to. That's the point. If you want objects, you need something resembling the "M" in ORM. &gt; My point is that an ORM makes already simple things marginally simpler and hard things borderline impossible. I disagree. An ORM can have significant tangible benefits, like those I outlined above. Summaries, reports, etc, are typically read-only, so you just go around the ORM and write raw SQL. In the worst case, you go half-way. You use raw SQL to select a bunch of IDs, and then have the ORM hydrate entities in a loop or something -- more or less the best of both worlds. The only other case is bulk-updates. So you go to raw SQL for that. And you've lost nothing. 
If it's returning pictures, it ain't getUsernameById, now is it?
That's a pretty damn sane position on ORMs in general, I'll give you credit there. I am getting close to demo time on my prototype so it's too late to consider this concept for the moment but it's something I will put some noodle time into for my next release. I do have some CRUD repetition I'd like to shed, if I can find a good mix between the two worlds as you suggest. Thanks for a great reply!
Doh I fail at copy/pasting :( Thanks!
WordPress code is the way it is because of legacy issues. 
Or joins/unions that end up with that millions of rows. Or queries that need to be written with a subquery instead of a join to be performant, or...
There's really nothing wrong with using an ORM. It greatly speeds up development time. However, it's important to also keep an eye on what your ORM is doing. For most straight selects and simple joins an ORM will work exactly as advertised and you'll have no problems. Occasionally you'll encounter a situation where more direct control is required, particularly in the case of large or complex result sets, but that's not a problem. Any decent ORM will allow access to the database connection. Knee jerk reactions that ORMs are bad and should never be used are stupidly short sighted. Like any tool, you need to be able to see when it's not appropriate. That comes with experience and education.
sorry for that. :) . And I was just asking /u/kuizinas for he was doing this for the 3rd time, and what do he think of this. We are getitng feedback. Isn't it ? Or you just only hear aura, but not filter . Next time I will only mention Filter , Router ... and not any mention for Aura ;) 
You miss the point of models entirely. A model isn't just an object with some attributes, it's a whole domain for dealing with a specific set of responsibilities.
You can fetch objects rather than an array: $result = $st-&gt;fetch(PDO::FETCH_OBJ); However this is just an anonymous object. It has no methods for updating etc. It is just an object containing results. If you want a join, you need to do it yourself: $st = $db-&gt;query('SELECT id,name,email FROM users left join user_profile on users.id = user_profile.users_id'); Same for updating: $st = $db-&gt;query('Update user set something = :something where id = :id'); Without an ORM, you need to handle all of the database interactions yourself. Of course you would abstract all this database stuff into a class and then use instances of your class to perform the required functions. 
When Wordpress was created in 2003, superglobals like $_GET and $_POST were still relatively new, and it would be a year before PHP5 rewrite of the Zend Engine brought in the new object model that was actually worth using. Thus, it was written with that really old version of PHP that everybody used to (reasonably) complain about. Since then, things have gotten much, much better. Incidentally, there are times in which OOP is the wrong tool for the job. Nothing that PHP does, but it's a false statement to say that "every language emphasizes the use of OOP", as there are modern languages designed for specific purposes that don't even have OOP features.
1. You won't get a big increase in performance switching to nginx. PHP-FPM is working the same way with both. I would recommend nginx though for the other features it offers. Take a look at this article to configure PHP-FPM : http://nls.io/optimize-nginx-and-php-fpm-max_children/ 2. APC configuration is pretty much standard. I'm no expert with it but that not seems to be the main issue here. 3. Varnish needs an extended config. By default, Varnish misses most of your requests. You need to learn the VCL configuration language and experiment a lot. You should work on cookie eviction, cache enforcing and excludes for your dynamic pages. 4. 40 queries isn't that much (Magento dev here ...) but you could greatly benefit having a Redis instance storing your collections. You can also use it to store compiled html templates. 5. Activate the slow query log and analyse it. Even under load, MySQL shouldn't crash. Once your queries optimized, Varnish &amp; Redis will handle most of the work to free up your MySQL. Also activate query cache in MySQL. 6. Clearly not. I handle 500 concurrent users on a basic Laravel/Rest/Angular service on the same VPS. Your VPS only have 512Mo. Be sure to refrain MySQL from eating it up and crash. You can limit which amount of RAM MySQL, Redis &amp; Varnish will be using.
Hi, I guess the crash reason is RAM. &gt; 3:50:34 InnoDB: Fatal error: cannot allocate memory for the buffer pool Also, I've tried load test once more by resizing my droplet to 2GB (instead of 512). Here is the response: 1,906 hits with 0 errors &amp; 533 timeouts This rush generated 1,906 successful hits in 30.00 seconds and we transferred5.58 MB of data in and out of your app. The average hit rate of 63.53/second translates to about 5,489,280 hits/day. The average response time was 1,061 ms. Looks way better and more importantly MySQL didn't crash, so I guess it is a ram issue. :P
For the OP: 1. Please don't mix PHP with HTML, CSS, JS. Use instead a logicless template engine like Mustache, you'll make your life much much easier! 2. About ORM: http://blog.8thlight.com/uncle-bob/2013/10/01/Dance-You-Imps.html
Maybe you need to, because in the end SQL is not a programming language. Maybe the PHP garbage collector leaks. There are a lot of reasons. After reaching the memory limit on a very big report, Im switching PHP arrays for temporary tables.
That is great. But I would still look into those queries. How many of those queries are common to all users? Do you have query caching enabled in mysql?
Can you explain what the goal is here? I don't quite get why you'd need a library or framework for what is done by the *snippets* section of pretty much any editor. Or... a text file.
Code reuse, DRY. How do you output a select drop down?
Hashing is *too much*? What do you mean using a single function when registering and then when logging in is *too much*? I, like probably many others use same passwords in several places and would not like it to get leaked, while this may not be a risk in *this situation* I really see absolutely no reason to not hash your passwords. And also, I really recommend to name ALL your variables in English (like you mostly have)
1. I'll read it. 2. Okay. 3. I'll read more about Varnish then. Not sure what all those means but I'll eventually learn. 4. Wouldn't that be too harsh on my poor ram? MySQL cache, Varnish, Redis, APC etc. they're all gonna use that poor guy. 5. Query cache already seems activated I guess? Qcache_free_blocks | 1 | Qcache_free_memory | 16514720 | Qcache_hits | 1879 | Qcache_inserts | 179 | Qcache_lowmem_prunes | 0 | Qcache_not_cached | 69 | Qcache_queries_in_cache | 149 | Qcache_total_blocks | 315 6. 500 concurrent on 512mb sounds awesome. May I know a little more about your stack? (via pm, if you prefer)
Query caching is enabled. Pretty much no query is user dependant. Most of them are global select queries to decorate homepage. (pages, categories, articles, votes, comments etc.)
Alright, everyone show your hand. Right?
&gt; Here is what I would do: I would implement a video extraction pattern allowing the users to highlight segments of video that represent the "Juicy" bits. You want to destroy their business in its entirety? &gt; a humongous profit margin so I can see them not really caring about the web application How many businessmen do you know who happily leave money on the table in a cut-throat industry? I've read through a few of your comments in this thread, and honestly can't work out whether you're a troll or just plain misguided.
If I understand you correctly, you just want a method of re-using html here and there, correct? I just embded the HTML inside of the PHP, like so: &lt;?php function yomutta() { $i = 'yamutta'; ?&gt; &lt;input type="button" value="&lt;?php echo $i; ?&gt;" /&gt; &lt;?php } ?&gt; VERY bad use of it there, but it does exercise the format.
&gt;How does one not use an ORM? Well, they learn SQL. And doing OOP for the sake of OOP is stupid : you want good API between parts of your application and this can be achieved without going full objects for everything. I don't like ORM. They're good for CRUD operations but I don't like to do simple CRUD. And when trying to do some harder things with a database you gain a lot of time by using direct SQL instead of losing an afternoon trying to use whatever pseudo-language your ORM implemented. And don't get me started on how half the ORM fuck-up with simple inheritance which is something basic you want from objects.
I'm familiar with the principle, but I really don't think DRY is relevant here. What's the dropdown for? What's the name and id? Is it in bootstrap? foundation? Is it a handlebars template? Live bound in Ember? Is it in Laravel? Most often I just type it. Dropdowns are hardly complex code, but most HTML (apart from doctype, etc) is so context specific that any "system" is largely redundant. If you have a large slab of reused code, then by all means make a snippet of it and save it in your IDE. 
can you give some example code?
let's say your options are in the database and you want to output a select tag with option tags inside. what would you do?
OP - NEVER EVER DO THIS. 
Besides horrible looking coding, what's wrong with doing it this way?
I used to think like some idealistic college kid too. Then I entered the mouth of madness that is American business where productivity and efficiency are punished. I have yet to contract with a web based company that isn't leaving millions on the table. They might get the tech right but their marketing is off or vice versa. I see it every single time. It stems from the flawed American management model that has allowed ego to trump profit (it's flooded with MBAs that can't perform .. especially tech). I have witnessed CEOs blow $50 Million just because they read a blog that steered them in the wrong direction as they chased some innovation that wasn't actually there and they refused to hear anyone telling them that they might be wrong. Just take a look at that stock market. It's filled with turkey tech companies that can't perform living off of hype. They do provide a valuable money laundering service for private equity though. You obviously misinterpreted the video model I outlined. You can take one video and turn it into many (while leaving the original video out there), charge for all the new segments that use less bandwidth because they provide just the parts that the user would fast forward to after loading the video from your server (even with proper streaming there is a ton of wasted bandwidth). You leverage the user base to do the cutting and tagging for you (using a web based tool you provide .. why hire people to cut amateur uploads that may or may not have 20 minutes of dead screen time when the users will gladly do it for free as long as the tool is simple to use) and then charge them for all the new videos that use less bandwidth because they are no longer streaming through some 30 minute video that the user will watch 2 minutes of. I mean that's the golden goose for porn. Delivering just the right amount to keep the users coming back without any excess while increasing the quality of the videos. It also promotes the illusion of a vast library. You can say that you have 10 Million videos instead of 100,000.
ya that's pretty bad. i gave an alternative.
yes return the string instead. and make a more generic function for outputting input tags
I'd be careful. [Basset](https://github.com/jasonlewis/basset) (the asset manager Laravel-4-Bootstrap uses) is no longer maintained. You can still use it but I'd advise following lead of the Basset maintainer and going Grunt/Gulp.js for asset management. It's far less cumbersome and it is a lot more powerful. If you need a good tutorial on how to do that I would recommend [laracasts](https://laracasts.com/lessons).
I used to do it with Smarty. It is now Twig that appears to be the popular templating system nowadays, but it doesn't have helpers for form elements. Similarly, ZF1 used to have `formSelect()` as a view helper where I could just pass an array of value-text pairs. Now the same helper method in ZF2 demands a complex Select object to be passed into it. They keep taking away all the good stuff :(
OK, thanks for clarifying which assumption I should stick with :)
Looks good. I like the fact you can easily plug a profiler.
&gt; Also activate query cache in MySQL. I would be looking more at key buffer sizes than Query cache to begin with - query cache won't save you if queries made vary widely - also if queries are using MySQL functions in their criteria (e.g. WHERE mydate = NOW()) the query cache will be skipped anyway as such a query can't be cached - ever. It's a nice quick band-aid and can save you a little, but would be doing the following first: - For MyISAM tables, check the size of key_buffer_size, default for earlier MySQL versions (below 5.5) is woefully small. - For InnoDB tables, check innodb_buffer_pool_size. - Check MySQL status output for use of these keys/data and tweak/tune away, (MySQL docs cover this well under the key_buffer_size/innodb_buffer_pool_size topics. - This one is a little obvious, but ensure your tables have indexes where your queries need them and check execution plans/etc. for slow queries, see if you can benefit from rewriting those, or maybe even schema changes to get you over the line. The Percona MySQL performance blog is a wealth of knowledge here covers the above very well if you dig a little into their posts: http://www.mysqlperformanceblog.com/ Stuff like this: http://www.mysqlperformanceblog.com/2013/09/20/innodb-performance-optimization-basics-updated/ - these bloggers know their stuff and I follow this blog religiously. &gt; 40 queries isn't that much (Magento dev here ...) Ahh Magento, the king of pig-dog queries :D Will bring any half decent MySQL install to it's knees given half the chance :) When product pages are flying out over 200+ queries per page it's just one big #facepalm all round. Have done a few server optimisation efforts for Magento stores, it's never a fun time. 
get NewRelic and install it. you can try it out for free for 1-2 weeks iirc. You can watch blitz hit the server and then figure out why things are breaking and where. Also enable that swap I mentioned in an earlier comment first. The slow query log should help you identify which queries are using up the most resources. You might be able to cache some of them. Something like APC, memcached, or others. Lots of options to try and hit mysql less for common stuff. Just installing APC may help some just from installing, but it performs better when you tie it into your code as well and manually store things there. As far as how good your results are... bad. Really bad. If you content is fairly static, you could use a reverse proxy and caching system like Varnish or Nginx (I use this particular solution, feel free to copy my config http://reviewsignal.com/blog/2013/08/29/reverse-proxy-and-cache-server-with-nginx/) to improve performance tremendously.
I call bullshit. The way you describe your 'solution' it seems to me you have absolutely no idea what you are talking about. I doubt you ever did anything related to scaling at all. You probably just sold yourself as some consultant and basically ruined several companies while moving to the next job. You are the locust of the IT world. The harsh reality is that the framework of choice has zero impact on the scalibility of the site. Changing the framework is one of the **dumbest** thing you can do in a business unless you absolutely need to. And even then it's usually a dumb idea.
Thanks - I've removed Basset from composer.json and app.php (under 'providers'). Are they the only references to Basset that I have to remove? I'll look at Grunt/Gulp.js now and head to those [laracasts] (https://laracasts.com/lessons).
I ain't twig user, but simple google [twig templates](http://twig.sensiolabs.org/doc/templates.html) Gives you this {% include 'sidebar.html' %} &gt;Per default included templates are passed the current context. &gt;The context that is passed to the included template includes variables defined in the template: {% for box in boxes %} {% include "render_box.html" %} {% endfor %}
I am jelly
Hi Luke! We were actually talking about FoxyCart the other day!! Certainly looks good and we will probably end up using it in the future. We actually normally just send the user off to the payment gateway's hosted pay page so not to bother with such things. :)
None because PHP already outputs HTML http://codeangel.org/articles/simple-php-template-engine.html
**Edit**: Composer update isn't updating 4.1.* as per the composer.json reference you make. Here are the instructions I was originally following: [Git and Laravel 4 practical use] (https://coderwall.com/p/jpblsg) So does this mean to update the laravel core of the starter site, I have to do the following? * git fetch laravel * git merge laravel/master * git status If so, damn, as this is where I've been getting stuck prior to trying your suggested 'composer update' fix.'
I'll check indexing and database structure when I wake up. Does mysql engine matter in this case?
Ok I will try to hash my passwords but I created a password for each user because I did not know how I could make them register without taking the name of someone else. The site is for people in my university and I need one user by student so I just created a database and give them each one their password randomly created. I started my computer science class in French and I am used to name my variables in French and English (cause of the tutorials I read for web development) what is wrong with that ? Sometimes it helps me having two variables with the same name one in French and the other in English so I don't have to find another way to write the name.
I agree that Wordpress sucks. But guess what, people think PHP sucks too. Wordpress is like PHP it gets the work done. 
[Well...](http://i.imgur.com/r38WR6j.jpg)
[His little brother](http://i.imgur.com/2dwYgCX.jpg)
Get all the relevant data from your model, then in the view do something like this: &lt;select name="thinglist"&gt; &lt;?php foreach ($thinglist as $thing) : ?&gt; &lt;option value="&lt;?=$thing-&gt;id?&gt;"&gt;&lt;?=$thing-&gt;name?&gt;&lt;/option&gt; &lt;?php foreach; ?&gt; &lt;/select&gt; Or using whatever template you like. Honestly I find doing that much more straightforward than calling some generic function with a million different options.
It's existing code I'm working on at my internship. I suggested we should move from mysql_ to PDO (which I use for my personal projects) but they said there is no time or budget to port ***all*** the current mysql_ code to PDO. Luckily I'm not the one responsible for potential damages :D 
There's never time or budget. 
Okay, so you still could hash all the existing passwords in the database (Like this: `UPDATE table SET password = MD5(password)` and the passswords you have given out/will give out would still work. When logging in, instead of comparing $_POST["password"] to the database, just use md5($_POST["password"]). And naming variables and writing comments in English are just considered best practice, *especially* in production code. Edit: use atleast sha1() instead of md5()
As I guess with the answers in this thread, you just seem to want to avoid repeating things like echo a select, or an input, or simple stuff like that. DRY is a good principle, but beware of taking it too far! Writing a select in HTML is very simple, you don't need to abstract everything like this because this is a lot of work and it always end up failing. I've been there, done that, and now I write nice HTML and I'm happy. When I look at a weird API that generates basic HTML elements, I'm lost: I don't know all the functions that are available, I don't know which parameters I can use, in which order, etc... It's also much less readable, and a person discovering the code will just scream WTF! And when it's time to apply a theme and all hell breaks loose... It's just a bad idea. Following DRY is nice, but know when to stop.
http://imgur.com/yMkJErf
https://github.com/doctrine/doctrine2/pull/1009 Doctrine is Compatible with hhvm.
I was thinking that as well...but reading the comments, it seems there aren't many people of that kind left :)
Keep in mind that we're talking about a $5 per month VM. The best way to improve their performance is to get several of these so share the load. Also, having your database on a dedicated makes (one without a web-server) sense, especially on low memory servers. I'd go 1 VM for DB + 1-2-3 for web-server.
I can see the injection from here :/
 private $sex; public function getSex() { return $this-&gt;sex; } FTFY! Now, you're properly protected. ;)
Which is why you use getter and setter functions.
AFAIK nginx requires php-fpm to work well and that is much harder to configure correctly than a normal LAMP-stack. But maybe it is easier to configure it for a small vps than for a large server with millions of users.
I love how I learned how to code thanks to my former boss teaching me shitty deprecated PHP methods. It doesn't really matter he was basically teaching me how to invite SQL injection, I learned how to code and a shitload of logic. Now that I'm off on my own coding I've learned what to actually do (well, some small fraction of it anyway) and I'm still greatful for learning all that shitty stuff.
The problem isn't the time needed to write that, it's the time needed to test it on all projects that use it. The lesson to learn here is 'fix it right the first time.' to bad that doesn't mix with making money and the result tend to be 'fix it right enough the first time.'
&gt;hashing is too much for a test website This is *exactly* the wrong attitude to have towards sensitive data storage. As you're just getting started, let me help you out. ***NEVER EVER EVER EVER EVER EVER ON PENALTY OF DEATH STORE PASSWORDS IN PLAINTEXT!*** No excuses, no argument, no kidding. php has enough trouble with a poor reputation for security without you helping it along.
Every time I see this elephant, I feel like PHP and PostgreSQL were born to be together. Not MySQL. Elephants rule, dolphins drool!
You can those types of functions into a data mapper orm. I only play with php, professionally work in a java environment right now, our repository layer has the capability of returning counts when we would like. I kinda recall this functionality in yii active record too. Excuse the auto correct.
Are you *really* suggesting the usage of `MD5()` in 2014???
PHPWomen just recently did a kickstarter for a purple elephant.
No, you're right. Where I work we still return tons of data to memory. Application layer contains exclusively orm objects, out data layer is all SQL due to or takes being millions to billions of rows long and sometimes millions of rows get accessed at once. Sorry for any auto correct.
To be clear, this is NOT the PHPWomen purple elePHPant, and is **definitely** not an official elePHPant.
WordPress is a Fischer-Price framework, that's why it's using global variables, procedural functions, and refers foreach/while as "The Loop".
For a start, wordpress is a *reasonable* blogging platform. Calling it a CMS is ... disrespectful to CMS's. Yes there are CMS like features in it. Yes you can load the thing with terrible shitty addons to expand those features, but first and foremost it is a blogging platform - and the more you stretch and twist it out of that mould the worse it becomes. Next, nobody is talking about some arbitrary self-built CMS with a tenth of the functionality. People are talking about how objectively, measurably terrible the Wordpress code is. It is **not** fit for purpose. It is antiquated, riddled with bugs, almost impossible to comprehend and because of all that developing even the most trivial alterations to it costs you more time and effort than they should. Further, 10+ year old projects that haven't been renovated in 10+ years are not things that we as a community should hold up on high as shining examples of good pieces of code. Because they wont be. And they are not. Adoption rates are sign of popularity, not quality. Quality matters. Maintainability matters. You are doing a disservice to your profession if you think otherwise. You might be tired of the PHP community on reddit bashing on Wordpress. But you know what? we're tired of Wordpress. We're sick of people thinking it can do anything. We're sick of people referring to it as a "framework". We're sick of the harm that it does to the profession by promoting the belief that because you can hack together some insecure, buggy piece of shit on Wordpress that you are somehow a PHP developer. It devalues us. Nothing that has been said about Wordpress in this thread is factually incorrect as far as I can see.
I bet this is your issue. My Ubuntu VMs on Digital Ocean did not have a swap disk enabled initially and once Apache processes starting eating up memory, the OS always seems to choose MySQL to kill first to make up for it. Creating a 1/2 GB swapdisk made the problems go away, even with a 512MB VM. Also some basic Apache optimizations(https://www.digitalocean.com/community/articles/how-to-optimize-apache-web-server-performance) can help limited the number of processes it spins up, etc.
Yes, its maybe the best solution atm. @realrasputin, why don't you develop it by yourself?, i would help you ;)
Is that a homemade elePHPant?
We extracted the HTML helpers out of Aura.View and into their own standalone package: [Aura.Html](https://github.com/auraphp/Aura.Html) This includes includes form helpers. They are now completely independent of any template system. (I am the lead on Aura.)
Now that's just enforcing that it will always be `self`-manipulation!
Another point regarding APC is if you're loading a lot of files, you'll want to increase the apc.num_files_hint value to give you more file slots in memory. Otherwise, APC will continually purge items from cache, making it less useful. You can always check APC by calling apc_cache_info() and seeing if APC is getting a lot of cache misses. This means you either don't have enough memory, or enough file slots.
You can use a node.js server of a PHP server (as people comment with Rachet). You can also use Java, ruby , eralang, ... (there are lot of implementations). Anyway you must asume that you need another server. Some people think that if they use PHP and PHP with Rachet they only need one server. You need one HTTP server (apache, nginx, ...), but Rachet creates a new server (with its port). I'm using this approach with good performance: http://gonzalo123.com/2013/12/24/integrating-websockets-with-php-applications-silex-and-socket-io-playing-together/ It uses one minimal websocket server (node.js + socket.io) that handles the requests from my backend (Silex)
Instead of `PDO` I'd recommend `mysqli`. It's a quicker, easier conversion than `PDO`. Lately I've been doing more asynchronous programming which `mysqli` supports but `PDO` does not, so that's another win.
The market demands code that works, and in particular, works on any hosting provider from $5/mo shared to a dedicated server. There is a ton of code in there to make sure things work no matter what version of PHP you have installed, what extensions are enabled/disabled, etc. That mean, and this is intentional, you can upgrade WP Core from the oldest/cruftiest installation and it will work. Of course plugins are another matter, outside the core WP dev's control.
Mine is on it's way - I've been told it won't be here till Summer. I assume that's a 1 week window sometime in August, being UK based. 
At work we use a Gateway pattern: * Define your Entities. These are simple data objects that are mostly value objects (little, if any logic). They definitely can't save themselves to a database. * Define your Entity-specific Gateways. These know how to fetch, update or persist the Entities. Your SQL statements go here. * Never cross the boundary; always use a Gateway. We also consume data from other services and we just make a different Gateway implementation. We can swap out the implementations on demand and the calling code works without modification. Of course, for this to work well requires well-behaved code from all parties (no leaked abstractions, well-defined error behaviors, etc).
As a side note, his Symfony 2 book is really good and I heartily recommend it to any Symfony 2 dev with more than a passing interest in the framework. 
We have a feature list and based on what our past developer was telling us it was estimated the entire project would take 6-8 months. We have an in house developer who mainly works on other projects so there isn't much time for him to work on this project, but we will have time to maintain it. We would like to be involved in the planning of the project and be able to discuss the feature list so we can insure there isn't a surprise upon delivery. It would be nice to review the individual features as they are completed. We would also like to be involved in the testing phases of the project.
&gt; random dude posts elephant on internet forum, closes mysql vulnerability of multi million user website
Actually you are totally right, I was just using md5 as an example (which I should have not done). I was going to mention about that in the end of the post, but I totally forgot. Still, using even md5 (with a salt preferably) is better than not hashing at all!
22 days of delay
Hate to be that guy, but everyone should be aware that WordPress is **not** a CMS, it is a blogging platform. Despite what they try to market it as, it's a blogging platform.
From the news announcements on xdebug.org: If you find Xdebug a valuable tool, you might want to look into this to support Xdebug's development, or have a look at my Amazon wishlist Awesome.
So my config is actually still using apache as a web server. Nginx is just proxy/cache. I am running apache on another port and nginx on 80. So no apache config changes, no phpfpm, no complicated nginx stuff.
yeah on low memory VMs this is killer. We all remember the first time we hit it :) I've definitely done it way too many times.
Yes, now I got you. My answer was wrong. Apologies. composer update will only update the framework. What you was looking was the laravel/laravel itself. Let's assume you checkout to a different branch. git checkout -b somebranch git add &lt;changed-file&gt; git commit -m "some message" Now git fetch laravel git merge laravel/master You may have some trouble here. Diff and merge. Hope that helps. probably this may be what you really need http://stackoverflow.com/a/1800787/487878
 if ($_SERVER['REMOTE_ADDR'] == '95.97.16.2') {} Oh, I'm just *sure* it's not possible to spoof `REMOTE_ADDR`. This post was ill-advised.
What's the theme you're using out of interest?
A raise implies something better. *drops mic and walks away*
+/u/dogetipbot 1 doge verify
Eeeh, I am sorry. Link is incorrect because it was detected as a duplicate of news about alpha3. I forgot to fix it. Is there any possibility to edit an URL (I don't think so...)
From management's perspective, it only goes away if they update PHP on the server. Solution: NEVER UPDATE PHP EVER AGAIN! Sigh...
There's more to "The Loop" than a standard foreach or while. It completely changes the scope and context of functions within it. It is, of course, an absolutely horrible idea.
ARE YOU SURE?? ARE YOU SURE?? ARE YOU SURE??
It isn't 
I honestly don't think I could work for a company like that. I've done the hacks I refer to only because of a very large codebase that produced a too low income which made doing it properly not feasible.
This is why I always use an abstract wrapper for my database calls. I pass in the SQL statement and variables as defined types, then I can tweak in one place to get the latest and greatest connector.
Where can I get an official one?
They will be available for sale late in the year from [PHPWomen](http://phpwomen.org) :)
PHPception!
[A little "on the nose", don't you think?](http://i.imgur.com/cbfwEQg.jpg)
`TooDeepRecursionException`
I met [Derick](http://derickrethans.nl/who.html) at Midwest PHP last month, super awesome guy. 
Just another hobbyist calling themselves a programmer. But that is to be expected here. Back in the day Digg.com was one of the most visited sites on the web and here are the notes from their presentation on scaling. Kevn Rose famously said "our biggest mistake was hiring PHP programmers": [I dare you to read it](http://highscalability.com/scaling-digg-and-other-web-applications) "Scaling is specialization. When off the shelf solutions no longer work at a certain scale you have to create systems that work for your particular needs."
Yeah, and since php powers so much of the internet xdebug is probably one of the most powerful tools in existence.
Okay! Any place where I can get a blue one?
Why the fuck do you guys all have PHP elephants?
so many var_dumps
Because they are awesome!
And what of the tattooed seniors??? WE MUST KNOW! http://i.imgur.com/KabGCj1.png
I agree with the "suggested" dependencies argument in the article, but what about "dev" requirements? Author mentions that those are also evil, but doesn't say why. Personally I don't think there's any issue having certain dependencies just for dev, for instance a debugging tool or some kind of toolchain component that's only used to compile things before deploying.
Devils advocate here: That's not too say you couldn't use a separate exploit to get into that, $_SERVER isn't read-only. But yeah, the edgiest of edgy cases having whatever that is specifically exploited. I, personally, enjoyed the photo of the elephant. 
You are right a lot.
Did you try google? It's ubiquitous. 
I wouldn't consider 6-8 months as a large project. Obviously it's all relative.... now I'm wondering why I made this post. 
Ah internet!
Sorry man, stuff come up. There were some disagreement about some session changes, then I wanted to sort out some test related issues, then I've just had my 30th birthday, so that was another weekend gone, then I had to catch up and make sure that everything is ok and look through the commits and fix the missing news entries, etc. But keep in mind that this is volunteer based project and the the ETAs can change. Hope you will like the release and thanks for waiting for it. :)
It's elephants all the way down.
I have a couple orange ones waiting from the recent PHP Architect Kickstarter campaign.
The tags are like little poops.
I was expecting books. Pleasantly surprised. 
No jodas.
Blade is a nice template engine. Twig is better though.
*squints* View and Logic in the same file? mysql_ API? That ElePHPant must not be pleased with you.
It seems like a more verbose way of echoing html without much payoff. I would definitely advocate using a real template system, like twig, over this.
http://imgur.com/mOTO3Xy
I hear you, but it's not always as simple as you make it out to be. Sometimes these HTML snippets are built from database data. And reducing a for loop and some if statements to a single function call can be a significant productivity gain. Your reasons for being lost don't have anything specifically to do with an HTML library. That's bad API design and documentation.
The generic function would have a couple parameters. My version would look like this: select($things, array('name' =&gt; 'thinglist')); Is that not more appealing? You're also leaving out escaping those two thing values.
I was actually looking at that a couple days ago. But why not use functions? My main gripe with Aura is OO bloat.
but sigma 24-70
there are a few. Here's one : [link](https://github.com/Abhoryo/APYDataGridBundle)
So you don't accidentally add extra lines after thus sending headers out early which could potentially break some of your code. It's easier to omit the ?&gt; for ease and consistency.
If you mean returning the data as-is from the database, it's because the underlying data might change. If the underlying data changes, you're going to have to rewrite every point of your application that works with that data. Making alterations in one part shouldn't change the correctness of the other parts. By using domain objects you abstract the underlying data structure away from the application and allows you to base your application's assumptions on the domain object's interface instead. If your data changes, you'd only have to change the mapping layer between your database and your domain objects and not worry about the rest of your application. 
They have their tradeoffs. I like that in Blade you can at least execute raw PHP when you need to, in Twig you would need to make a filter / tag. However in Blade what kills me is you can't set variables. That's pretty easy to overcome though.
There aren't any that are going to be able to incorporate logic like if statements, you'll need to write plain old HTML (feel free to correct me if I'm wrong)
Nice read. Thank you.
Twig is a mature template system with enough flexibility to build powerful ui components. For example, lets say you have an object of select options with varying html attributes you could ouput it with the following: &lt;select&gt; {% for key, attrs in options %} &lt;option id="{{ key }}" {% for attr, val in attrs %}{{ attr }}="{{ val }}" {% endfor %}&gt;&lt;/option&gt; {% endfor %} &lt;/select&gt; This could then be saved as select.twig and embeded or included in your other views via: {% embed "ui/select.twig" with options %} I've built a number of "dumb" components with Twig for my team most of them don't even care how they work, they just know they have to feed the views the correct ui object and they'll just work. Tie that in with Twig.js and you can then re-use the same templates on the frontend too. 
Oh and another good thing about Twig is that it makes it hard for you to bring business logic into you views - some don't like this but i'm all for it. Views should just output data, nothing else.
Sure, it looks fine now, if that's all you'll ever need. But in my experience there are always going to be special cases... what about attributes on the options, what if you need optgroups, or do something different with the code? Escaping can be done automatically if you're using a templating engine like twig. Or let your objects handle it. If your solution works for you, go for it. Personally I've found these types of solutions to either be completely inflexible, or so flexible that using them is ugly as sin.
This is what interfaces are for. Your AccountsBundle should only rely on a few interface types, which are implemented by the document creation parts you wrote. For extra separation, put those interfaces in a separate (composer) package.
I feel conflicted every time one of these gets posted. Part of me wants to congratulate you for putting forth the effort in assembling something like this, as a learning exercise, everybody starts somewhere. I really do think it's a good thing to post code and solicit feedback in this type of forum. So good on you for hanging it out there! Another part of me wants to critique it heavily but do not want to discourage you. Suffice to say the issues with your architecture are plenty. To the point where a critique would be useless. My suggestion is to put down the framework, pick up and educate yourself on SOLID design principles and modern PHP toolchains, then tackle something realistic and with a very narrow scope. Don't tackle frameworks until you understand how some of the popular ones truly work and why, at which point you'll start realizing you almost don't need a framework and it will become a non-issue.
For my money, it's IDE support and error checking. Every time you have to enter an object property as a string, your IDE can't error check the property you're accessing. Plus you can have your data 'do stuff' if you're doing OO programming :)
Edit, went diving in there a bit. It's not the worst thing ive ever seen, things aren't organized like i'd expect them which isn't normally a problem when looking through someone elses code, its that the implementation of things feels suspect. You have a Config folder, a Configurations folder in Application/ and a Configuration.php (not in either of the config folders) that actually holds all your tunables. Right this second, I could go to a site using this, go to .com/Applications/MVC/View/Templates/index.tpl and see your database password on line 34 because you probably dont have apache set up to process the tpl extension as php. Everything public gets the extension php
He's French and while his English is not the best, he's pretty responsive to requests if you email him.
Thanks Phil!
Glad you enjoyed it, thanks for reading!
In theory you're right. Just make sure you replicate every mysql_* function in PDO. Unfortunately only in theory, theory and practice are the same thing. Unless you're very good at writing unit tests, you won't notice that single, specific case where one out of many projects fails.
I thought for a second you were going to introduce a new verb and I was very skeptical. Great read.
At first I thought it was a purple dick: https://image.bayimg.com/3876115af7540ec03394ac7c0ff479d0f65ec0b8.jpg Should have progressive encoded your JPEG.
&gt;It is Tell me how to spoof an IP address, please.
Just in case you're unfamiliar with the project take a look at https://puphpet.com/
Bundles are a way to expose functionality to Symfony. You should implement your Accounts library as a collection of POPO's. You then write a bundle to expose this library to Symfony. I.e. you don't actually add any accounts functionality to the bundle. Hope this makes sense. 
Here are some ways that work on a local network: * Flood the CAM table of a switch on the local area network. Now the switch will broadcast all traffic, and you can send as anyone else on the switch * ARP poison * ICMP redirect * own the shitty cisco router with a script from exploit-db or CSRF/clickjacking/XSS (most routers still have serious security issues)
That's really cool, will try it out over the weekend. Definitely more impressive than my application, lol. Mine was just more of an excuse to learn a new language while building something that was useful to me. :P
When looking at schema, though, I know immediately when I see 'mailing_list_users' that there's a strong chance it's linking mailing_lists and users tables. Subscriptions may make sense when you know what you're talking about, but it's not as clear to others. There's no reason that table can't contain extra fields that pertain directly to the relationship, as well (subscribed_at, unsubscribed_at, status)
Meh. I think (and I know a lot of people think this way) that PUT is the method for updates, but also supports the idea of "adding". So what it really is doing is creating a link between one entity and another. Call that link whatever you want, but you don't need a new naming convention for putting them together. Observe: `POST /users { name: 'NotiLoch' }` `POST /mailinglists { name: 'Main list' }` And now you can do this: `PUT /users/1/mailinglists { id: 1 }` *or* `PUT /mailinglists/1/users { id: 1 }`
Oh a name change. Hmm..that's the only reason? So you're saying you would leave all the $obj-&gt;zip because that's getting postal_code behind the scenes? If you're not going to change zip to postal_code everywhere then wouldn't select postal_code as zip be a similar solution? Or even just replace all on ['zip'] in your code.
&gt; select postal_code as zip &gt; &gt; be a similar solution? &gt; &gt; Or even just replace all on ['zip'] in your code. The first one is SQL (and maybe even vendor) specific. What if you want to switch to Redis later on? But more importantly, by having `$result["zip"]` everywhere in your code, you are implicitly creating a dependency on your database structure. If you, however, had domain models that handled mapping database results to an object, you would only change a single object and everything would work just fine. And no, "replace all" is not a substitute for proper objects :)
Thanks for this. Brilliantly written and great advice. Just grappling with APIs at the moment and both this and the articles written by King Phil of Sturgeon have helped greatly. 
Just a thought - have you posted this the Laravel sub too?
Static analysis doesn't work on strings.
Can someone take a screenshot? I don't have an Amazon account, it's not available in the EU. (account creation is, but buying isn't) 
I see. That seems like a tricky layer to engineer.
That's a very interesting approach and well written article, but I have to admit I'm a bit divided. In the end, why let the constraints set by the HTTP standard have any influence on your model? You might answer that you didn't "bend" to those constraints, but rather it helped you build a better model, but what I fear with that approach is that it forces you to think only in **CRUD**. Your model ends up just being a data structure, like a glorified array, exposed through your REST API. It's a bit like if you exposed your database through REST, each table being a resource roughly. So here you talk about a many-to-many table that you can turn into a new model object and HTTP resource, but what about other cases: - publishing an "article" (not a CRUD word) - disabling a "user" (not a CRUD word) - validating a "report" (not a CRUD word) - getting the export of some data (CRUD word, but not a model class) I don't have a generic solution for every case, but what I've learned is that you can find a compromise between the constraints of REST and keeping your model strong and encapsulated: - add HTTP resources as much as you need (just like your article advise) - keep your model strong, let it model the domain problem, don't follow CRUD (e.g. don't bend to HTTP words only for method names, keep associations meaningful, …) - map your HTTP resources to your model That means that **resources are not necessarily mapped 1:1 with model classes**. That's good, your model is encapsulated, you can do what you want with it. The REST API has no word to say on your design. That also means more work. Yeah that sucks :( I have no experience with Laravel but I know that Symfony makes it very easy to expose your entities, but harder to expose "fake" HTTP resources. **Edit**: related link, this is a great read: http://verraes.net/2013/04/decoupling-symfony2-forms-from-entities/
Made me chuckle. Feels like an eternity ago...
Why not LINK/UNLINK verbs? They fit your needs perfectly. That's how you would LINK your user to a mailing list: LINK /user/1 HTTP/1.1 Host: example.org Link: &lt;/mailinglist/2&gt;; rel="subscription" 
http://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication
Old Malt Cask Single Malt Whisky, so delicious
Not unless you also do inserts and updates on the homepage. Don't do that with myisam tables. Migrate those to innodb. Anyway, caching at every possible layer will give you the best perceived performance on a low spec VM!
How many days of work have *you* contributed to the PHP project ?
It's too early for me to be entirely coherent, but your examples all fit into CRUD. Publishing an article is a POST. Example URL: /article Send your model in the message body Disabling a user is a PUT. Example URL: /user Send your update model in the message body. Validating a report is also a PUT. Same as user. Getting an export is a GET.
Yes, Link / Unlink seemed like a good fit to me when I read the first few paragraphs, though I like his conclusion all the same. Link / Unlink is usually woefully under represented in API documentation / examples. 
Excellent! We tell people often, if you don't use us, please use some other hosted service. The liability issues related to security and compliance are too high for most companies to mess with. We also believe companies should have full control of their checkout experience, something most hosted solutions can't offer. Please let us know what you think as you look into it further.
In DDD (Domain Driven Design) that's the exact opposite: approaching everything as an entity is a big mistake. Especially relationships. By considering them entities you end up with an anemic and not encapsulated model. You are not doing OOP and thinking about objects and how they communicate, you are rather designing tables containing data (a relationship being an entry of an association table). Now you end up with loads of services or repositories to manage all that. There you have it: [anemic model](http://www.martinfowler.com/bliki/AnemicDomainModel.html). I'm not saying you're plain wrong though, I'm just trying to add some perspective. DDD doesn't (and shouldn't) apply everywhere.
neo4j works this way explicitly - the relationships can have properties too.
these are definitely useful pieces to know - make sure they're part of whatever negotiations you have with any company. Knowing you have staff to maintain it, and possibly existing infrastructure to work within - that has a different impact on how someone would build an app vs a 'greenfield' approach. You probably want some on-site time - do you require someone to be onsite regularly for updates? Is remote work a possibility? How 'remote' are you comfortable with? This is not a pitch, just throwing out things you need to think about (if you haven't already).
- publishing an article By that I mean an article was created by a "writer", and the article exist, and now a "publisher" will publish it on the front page. So it's not really a POST. You could say it's a PUT, and you put "published = true", but if you are mapping 1:1 your HTTP resources to your model, you are totally exposing your model and breaking encapsulation. With that solution, the client code knows that there's a "published" property on articles, and he knows that he can set it to `true`. That's wrong (IMO). - Disabling a user Same here, you are exposing an *internal* property `$disabled` of the User class to the client. What if the user can't be disabled because he is a super-admin? What if you rename the property? What if you change how disabling works altogether? Here you loose the power of encapsulation again. - Validating a report Same again. What if validating the report is something done by a Service object (not inside the model) because it's very complex and does a lot of things instead of just setting the property in the object? What if even that property doesn't exist at all because validated reports are just stored differently for any reason? - Getting an export Yes that's a GET request, but that's not a "get" on the model because there is no "Export" model class. Say an export is done by a service which loads model classes and returns an array of strings. Here you are not mapping your model to your REST API. I'm not sure this example is bringing anything to this discussion though :p --- So my **TL/DR** would be: *1:1 mapping between HTTP resources and your model is not necessarily a good thing, doing without is sometimes good for your model*. Let's take the example of the article and look at an alternative solution: These are the classes that are exposed as HTTP resources: - `Acme\ViewModel\UserView` -&gt; HTTP resource "users" - `Acme\ViewModel\MailingListView` -&gt; HTTP resource "mailing-list" - `Acme\ViewModel\SubscriptionView` -&gt; HTTP resource "subscription" This is the model: - `Acme\Model\User` - `Acme\Model\MailingList` As you can see there is no 1:1 mapping between the 2. Now you can do whatever you want in your model, and expose a stable, explicit and RESTful HTTP API. (yes you need something that maps the 2 layers) I'm not saying this solution is better than the one shown in the article! I'm just trying to illustrate my point. I do think that the "Subscription" object in the model is not a bad idea at all.
Yeah I agree, I think trying to figure out if a linking table really represents something that can have a good name is a usually a good idea. Definitely are trading off quickly understanding the schema by skimming the table names like tostilocos mentioned, but I think it's still worth it.
Good idea, will x-post, thanks.
The problem with Kohana is that they never wanted to go the same way as PHP is going nowadays (read : PSR) http://forum.kohanaframework.org/discussion/10784/psr-1-and-psr-2/p1 So I believe this is quite normal especially when the majority of today's PHP developers are trying to make PHP a clean language with standards and such.
Cool idea, I've actually never used LINK/UNLINK for anything before but you're right, they would definitely work as another option in situations like this. Thanks!
Thanks for you answer &gt; I've exposed resources many times that have no model in the backend, and I expose properties all the time that aren't 1:1 with database columns. Yes it seems we are definitely on the same page :) For the examples I gave, see above for a more detailed explanation of what I meant, but it's basically the same thing that you are saying.
TIL debugging can drive even the most experienced of developers to drink. 
Yeah, I think that's why REST isn't very commonly used in real world APIs. It's a neat idea and it's definitely worth conforming to it when it makes sense, but if you find yourself straining to fit everything into that limited set of verbs, it's probably time to think about expanding beyond REST. Yes, there are twists of logic that can cram almost anything into REST, but if you let go of the dogma and start using other API actions, in many cases your API will be easier to understand and use, and often much more powerful and flexible. As with SOLID and other programming principles, learn it, understand it, use it, and then learn when to disregard it.
"Keep" means keep for a few months (or less, if your application is particularly sensitive). "Don't keep" means browser session.
Check the return value of the mail() function - if that returns OK, then PHP successfully passed the email to the system mail handler (usually postfix, sendmail, qmail or exim on linux servers, but there are others) It could be something like the message is being sent, but the receiving server is not accepting it because the IP address the mail is sent from is nor properly set up to send email for that domain (SPF, DKIM, reverse dns checks). As well as setting From, try also setting the Reply-To and Sender fields to a valid email address you control - this should ensure any bounces are received. It could also be falling foul of spam filters - something as simple as adding a date header can fix this. I'd recommend using a library for email sending as they tend to automatically handle setting all the generally required headers correctly. Also note that you code is vulnerable to a header injection vulnerability. ie. The user agent sets $_POST['email'] to something like: "user@example.com\r\nTo: &lt;long list of users to spam&gt;" Always validate your inputs - in the case of email I'd check that there's no whitespace (whitespace can technically appear in an email address, but I've never seen anyone even attempting to use it in the real world other than to prove the point) and it contains atleast a single @ sign.
So, You have three repos * Local repo * bare repo on DigitalOcean * cloned repo on digital ocean This the workflow I'd use * Locally push to bare repo * Bare repo has git post commit hook that pulls the changes to the git cloned repo on DigitalOcean. You can find out how to use git post commit hooks for deploying [here](http://ryanflorence.com/deploying-websites-with-a-tiny-git-hook/)
I use a post-receive hook in the bare repo on DO: inside post-receive.sh: WEBROOT=/var/www/vhosts/foo GIT_WORK_TREE=$WEBROOT git checkout -f I'm assuming that pulling to a cloned repo would include the .git folder, etc., which I don't want or need in the webroot. 
We started using the one in the below comment, but found it didn't quite work how we wanted (which was something similar to the grid view in yii). In the end we rolled something out which closely matched our needs and didn't take too long. If you're using backbone in your project at all I'd highly recommend backgrid.
Are you planning on open sourcing the bundle? Sounds useful.
The way I look at it is this way: if it's a simple many-to-many table, it's just a pivot and gets a generic but clear name (mailinglist_users, for example). If I begin to add more properties, I begin to reconsider that. If I add more than two, I consider it a proper model, stop what I'm doing and adjust my code. Like I'm building a web jukebox right now. I have a Track model and a Tracklist model and track_tracklist_map. There's only one other property I need on that: position. To me, that's not special enough to consider a proper model. However, that said, the ORM I use (SQLAlchemy), allows me to represent it in my system easily, so it's no issue to use a pivot table (or mapper table, that's what I usually call them).
i attempted to get your framework running on my home machine but it appears that you've written this for Windows. It seems that you're putting together filepaths prepended with a "/" (/Libraries/...). In a linux machine, this is the equivalent of looking in C:\Libraries. If you intended to use a relative path, take the slash off the front of the string.
Had a similar issue recently. Making it worse is PHP would send from the command line but not the browser. Issue was SELinux permissions for the Apache user. This link helped http://www.developerfeed.com/selinux-does-not-allow-apache-use-sendmail
Just wrap it in a transaction, 255 inserts is almost nothing in terms of processing.
No need for multiple queries INSERT INTO tbl_name (a,b,c) VALUES(1,2,3),(4,5,6),(7,8,9); http://dev.mysql.com/doc/refman/5.5/en/insert.html
True, plus i'd guess in his situation he would want to rollback the entire query if one of them failed as the whole point is it's suppose to be an entire IP range.
Transactions transactions transactions transactions.
I think it would make sense to do more of this: POST /users/1/subscriptions { id: 1 } // subscribe DELETE /users/1/subscription/1 // unsubscribe Though it depends on your use case. For example, for a user facing API this is what I'd do because users can manage their subscriptions, but they cannot have permission to add users to a mailinglist. For an internal only backend api though, I would agree that doing a PUT to the mailing list endpoint would be a reasonable approach.
It depends on your framework of choice. However, if your controller is doing more than simply hooking up inputs to the right parameters of some domain level logic layer, and then hooking up the outputs of that to the output stream, you're probably doing it wrong. So your controller tests should be short and sweet.
There are a few different options for writing automated tests in PHP depending on exactly what you're looking to test. http://phpunit.de/ is the longest standing PHP testing framework. Most popular PHP frameworks use this out of the box. As the name implies, it's best for unit testing. http://codeception.com/ is another good option which builds on PHPUnit and greatly extends its capabilities for stuff like BDD. http://www.phpspec.net/ + http://behat.org/ is an alternative to the PHPUnit-based ecosystem. PHPSpec is good for the "inside-out" testing and behat is good for the "outside-in" testing. Depending on how your Controllers are set up, you might find Mockery (https://github.com/padraic/mockery) useful for mocking objects. It works well with both PHPSpec and PHPUnit.
Get in contact with your local PHP Usergroup they might be able to get their hands on them. [Also some conferences such as SunshinePHP have their own.](https://pbs.twimg.com/media/BeMu9I6CIAA8iDM.jpg)
My company has used PagodaBox and they have a nice setup for using Git. That might work for you.
http://appfog.com/ It's the first, and the best.
Why not bitbucket? You need to collaborate with lots of people? 
If you use a framework that is fully test covered, it should be written in a way that makes testing your controllers relatively easy. ZF2 controllers, for instance, are very easy to unit test. Other than that, the process shouldn't be really any different. Remember: you're only testing what goes on in this unit (function) of your code. The stuff in other classes or functions can be mocked if it requires it, but you shouldn't expect your "index action" unit test to make sure the underlying code is working right. That should all have its own unit tests. Rails is a framework too, so the process/expectations shouldn't be all that different.
Laravel has a lot of unit testing features baked in, extending PHPUnit. This was actually one of the core selling points for me on the framework. http://laravel.com/docs/testing#calling-routes-from-tests
I personally prefer thin controllers, a chubby service layer (housing persistence and business logic), and anorexic models (doctrine). :-P Controllers, imho, should just handle their namesake's operations. I personally explain them as the "air traffic controller" of the whole process. It takes in the request, and points it at a place where it can get the solution for that request (a service). With few exceptions, I feel like that's all they should ever do. simple example: - indexAction should return a list of blog posts. - indexAction gets/has an instance of the blog post service. - indexAction calls $postService-&gt;getPosts(); - indexAction returns the posts. (from here, in a ZF2 world, the framework would take care of passing the returned posts into my view.) My service(s) will handle all my business and persistence (db) logic. A good ORM solution such as doctrine 2 means that your models are "plain old PHP objects" that are basically just dumb objects with properties and getters/setters. Doctrine models are insanely easy to unit test using a ClassMethods hydrator. EDIT: Other things to note - If you're coming from rails, PHP is probably going to be an overall very different experience for you. In rails, as I understand it, there's the "rails" way of going things, and that's how you do things. In PHP, some frameworks exhibit that sort of control over the process, while others give you absolute freedom to define things how you want. I would start at looking up the PSR docs for PHP so you can get a handle on how the autoloader works, coding conventions, namespacing, and all that are "standardized," and then I would look at all the major frameworks to see which one fits your needs best. The big three that I can think of at the moment are Laravel, Symphony, and Zend Framework 2. ZF2, imho, offers a lot more freedom and power than the former two, but it's a bit esoteric at first, and the community tends to be less tolerant for newbness than the others. I think it definitely pays off in the long run though, since overall I personally believe it to be a far superior framework. If you start with ZF2, make sure you go through the quickstart guide, and I'm a firm believer in using Doctrine 2 instead of Zend's database stuff. There are lots of resources out there for how to get that up and running.
Most of the time I don't bother with tests like that (even in rails). I don't think a controller should have much logic to it, and if there is no logic there isn't much to test. Your integration tests will catch whether data is assigned correctly and the correct template is rendered, so there is little point in having an additional controller test to also check it.
Well you can always issue a 403 if the user shouldn't be allowed to do that. The only difference between your version and mine is the verb - which I think is pretty interchangeable. IMO PUT should be used for amendments, and POST should be used for full overwrites (ie. you'd only ever POST an array of objects/empty array, never a single object.)
ZF2's (and ZF1's) documentation, however, is quite lacking. I would not start there as a newcomer, and I personally might not go there with an eye for maintenance.
If you're going for PCI compliance on a site with sensitive information, it's 15 minutes of inactivity. Otherwise, do whatever you want. By default, it's browser session. If they do check the keep me signed in box, you can specify that the session cookie lasts a really long time, be it month(s) or year(s).
With functional tests of course. In Symfony and Laravel they would look something like this: class DemoControllerTest extends WebTestCase { public function testIndex() { $client = static::createClient(); $crawler = $client-&gt;request('GET', '/demo/hello/World'); $this-&gt;assertGreaterThan( 0, $crawler-&gt;filter('html:contains("Hello World")')-&gt;count() ); } } 
Have a look at: http://stackoverflow.com/questions/20693895/testable-controllers-with-dependencies It has 2 useful answers that covers your question. :)
The whole point of automatic testing, however, is that you will never have to press F5 again.
What about existing code?
The one exception I make for this, though, is authorization and access control. Since the controller is generally the gatekeeper in that instance, it's faster and easier to write controller tests to verify that compared to full stack integration tests.
Your controller tests will most likely be functional, after a couple of days of developing, running your suite will take 30minutes. At that point no sane developer will run them and your tests will rot. On top of that, code in controllers should be so little and so stupid that writing tests for that is like pissing away money.
Havent seen that feature to be honest
I have read through Sympony's documentation multiple times when considering the existing alternatives. However, I did not appreciate that it is tightly coupled with the framework itself, models, etc. making it virtually impossible to use it standalone. Does Symfony drive your every project? What do you use when you do not use Symfony?
As I said, I use it as a standalone component. Meaning I'm using it outside of Symfony. It's pretty loosely coupled, you need a few other components but it's pretty useable outside of Symfony imo. Here's an example of how to use it https://github.com/webmozart/standalone-forms
You create a separate repo for your app that includes everything you want. In the case of Laravel, here's the app you install... https://github.com/laravel/laravel This repo contains all the app files. Notice in composer.json it requires laravel/framework. You don't actually do a "composer create project laravel/framework", you create project laravel/laravel. 
"create project" is equivalent to doing a git clone, followed by some tasks. You don't "require" laravel/laravel, or require "vendor/sampleapp", you install it. You don't list it as a dependency anywhere in composer.json. The only way I can think you'd get the file into vendor would be if you're specifying your app as a requirement in your compser.json rather than running a composer create-project. Edit: To clarify, "composer create-project your/app"
I generate them with HTML... That is to say I don't generate them. Why slow down the execution of your pages to generate static, non-changing DOM? I understand sometimes you need a dynamic form. Typically I'll just generate the parts that actually need changed. 
[is that too much?](http://www.jetbrains.com/phpstorm/buy/)
Holy shit! Thanks so much! I actually already had it ready to go, I just assumed there was more work to be done before `composer create project` would work. I just tweaked the flags on that command a bit, and it worked!
Yes? Im perfecty happy with Vim