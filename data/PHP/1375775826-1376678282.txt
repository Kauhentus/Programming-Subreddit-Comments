I don't use anything but my own frameworks and things like WordPress, cake or CI are quite overwhelming. PHP is popular because it has a lot of support. It has a lot of support because it's popular. From a purely objective point of view, PHP has a ton of issues, and it would make sense if the web wasn't built upon it - but it is. It's here to stay, for better or worse, and it seems relatively easy to pick up since its supported by hosts (and httpd) everywhere, and easy to setup on local. Finding examples of what you want to do is also relatively easy.
Out of interest, do you how many of those tools are built into phpstorm's code evaluator?
You also don't need a big, expensive host nor a clutch of licences for proprietary stacks. 
Less lines? Do you mean shorter lines? Lines that each do less and are focused on smaller lumps of functionality, or do you mean fewer lines? 
So it's good practice?
false. is: $x=strlen($foo)&gt;3?2:strlen($foo)&gt;4?strlen($foo)&gt;7?5:7:5; even remotely readable? $length=strlen($foo); if ($length&gt;3) { return 2; } else { if ($length&gt;4) { ...etc etc its 5am and i'm lazy is quite readable. Check out something like [PEP-8](http://www.python.org/dev/peps/pep-0008/) for an idea of why this is completely the opposite of a good idea. Denser code is harder to read code is harder to understand code is harder to debug code is worse code. Not to say that all "fewer lines of code" examples are bad, but reducing the number of lines of code purely for the sake of reducing the number of lines of code is an exercise in futility.
An argument which rings more true than the one posed in this submission is the following: &gt;Code which has not been multiplied beyond necessity holds a higher quality than one that has Which is essentially Occam's razor applied to source code. This has nothing to do with the number of lines of code, but rather unnecessary complexity to the application.
Depends on the use. If for example the head() function only includes the header and nothing else it's no use because you can only use it once, why even make it a function then? The logged function can be functional though if used properly. If it returns the user info if logged in or returns false if not. $user = logged(); echo ($user) ? "Hello {$user['name']}!" : 'Hello Guest!';
Before you go writing a load of functions and putting them all in a file, which can get quite unmanageable, consider grouping them logically and placing them in classes. http://php.net/manual/en/language.oop5.php http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/
LOL.. it's quite a detailed header and required on every page :) 
bookmarked 
This isn't completely right. Not having to rewrite a header, no matter how complex, is A Good Thing^TM because it ensures consistency in code across multiple pages--much as OP states. The concept that something is a one-time use function and not necessarily the best use of time isn't wrong, but it doesn't hurt anything to compartmentalize functionality...mostly because you never know what you might need to reuse later on.
Decent PHP servers cache the compiled bytecode of a file, so no.
awesome
One thing you could always ask yourself is "Do I will ever need to write that part a second time somewhere else ?" If "yes", that means you should put that part in a function, so it will be easily callable from anywhere, and when you will need to change something, you'll only need to change it **one** time. Of course, this function could live in a generic file that you include. So... no, there is nothing wrong of using an include file, even for very small functions.
Install APC http://www.php.net/apc and it's not a problem.
Why do you have 3 forms, and separate SQL areas when all three do virtually identical things? I don't see any ajax on there, so I don't understand what part you are having trouble with. If it was me I'd make a single ajax caller function that takes a parameter (the activity type). Then have 3 buttons that onClick call this function with the proper parameter. On the PHP side I'd have a single piece of code that takes a parameter which is passed to the database.
&gt; I actually have my own web-site framework and library built over the years so I don't even use frameworks. So you have a framework and/or library that you built, but you don't use it? Just because you can build a framework from scratch, doesn't mean you should. Especially where security is concerned, it's best not to be reinventing the wheel.
Yep, considered that too but then I have to include more files. ie- include function.php and then include header.php Instead of doing two includes, I can do 1 include with a header function in it if that makes sense? 
Yeah, I'm just experimenting at the moment, trying to learn php 
:) Don't be so sure. My framework is built internally with SEO in mind and it will never forward different URLs to the same handler as it's domain/subdomain aware. No bad redirections either and such features of most other frameworks. **PS**: My bad! *I don't use frameworks* meant *I don't use OTHER frameworks but my own*.
Did you understand anything at all ? It's not about IDE and documentation it's about the single responsibility principle ...
german company? btw. there are static analysis tools for finding bugs in php code(RIPS and RATS comes to mind), but from your description it seems that you think that they will analyze the "compiled" code, and my guess that they would use HipHop for that (either compiling it to C++ code and analyze that with the existing tools or using the hhvm analyzer directly).
Since you're bookmarking stuff, you should also look into using a templating engine, so you can separate your html from your php code. http://twig.sensiolabs.org/ is a fine example.
Bookmarked too :) Will check into it soon 
This. All of my this. When I started out with programming I hated classes. Now I can't write even a simple project without using at least a single class. They're just too damn useful.
One, I totally agree that this is a stupid question. PHP has always, and will for a time longer still be very popular. Two, using frameworks isn't a bad thing, especially if you build your own from scratch. The trick is, however, is to just not get too dependant upon them to the point where you NEED one to create functioning code. Also, WordPress sucks. (__I feed off of your hate__) Three, PHP may have it's issues, but they're not prohibitive. 
Innovation __is__ reinventing the wheel. As a developer (one who __develops__) I really don't see how you can say that. Wheel 1.0 isn't as good as it gets, and to encourage others not to reinvent the wheel, 1.0 is all you'll ever have.
&gt; things like WordPress, cake or CI are quite overwhelming. Maybe I'm reading this wrong, but WordPress was by far the easies for me to get into when I was starting. As for frameworks, if you want to start off light (which again I found easier in the start) look into Slim.
That code would be rejected by any review of any standard. I get your point, but it's a silly example.
There's a reason everything is moving towards object-oriented stuff: it's very effective. Real world engineers use systems of well-integrated parts. OOP enables us to do so as well. Hell, if you get into Java, it's literally all classes. And working within MVC frameworks will often make you only use classes, except maybe to tweak some configuration settings in some procedural bootstrapping code.
I'm unsure how well these analysers work; because of my past passing interest in static code analysis I know it to be almost impossible to see exploit paths in code that uses abstractions. And the dynamic aspect of the language doesn't help that much, just like when your IDE doesn't know what to suggest as completion, so will the analyser not be able to see the caller and possibly unsanitized input. Most probably it will tag function/methods that could provide attack entry points and have you review what is sent from all the callsites of those method/functions.
I like "PHP The Good Parts".
EDIT: Goddammit. Toolkit, not tookit. ----- I plan on adding all sorts of extra features, such as the ability to pass hex color values, more thorough documentation, etc. but enough is there to really jumpstart any PHP-based interaction with a Philips Hue bridge.
Everybody has written his own framework, it's a step on the path of progression. The next step is admitting that the existing frameworks are better than your home cooked solution, and learning one.
I work for a web development company making custom php apps. The designers think they are "programmers" because they google shortcodes for the plugins they use in wordpress.
Here is an idea for that if/else block.. put this somewhere before the loop, $characters = ' .*:iopK@#'; $character_count = strlen($characters) - 1; and this inside it echo @$characters{round(($blackness / 255) * $character_count) }; the @ is just there to suppress "Notice: String offset cast occurred" -- maybe there is a cleaner way, but I just wanted to give you an easy way to add or remove characters from the list and experiment with the results :)
Uhm, that's kinda missing the point. How many lines is it after running it through a preprocessor or tidy etc.? In the case of your example, there would be zero difference.
That gives me the same notice... (which is not the same as a warning). Maybe PHP 5.4 doesn't like it anymore, I have no idea. Or it's just to make sure people don't do that by accident when notices are turned on (accessing a string when they think they're dealing with an array, that is). Oh, and I just realized I messed up the order, that is, my code turns the image into a negative unless you reverse the order of the characters in that string.
Wow, I never thought about this. I think in order to fix the error, you should run the str_split function on the $characters string. $characters = ' .*:iopK@#'; $characters_array = str_split($characters); Thanks to both of you, I'll update the code immediately. EDIT I: I've updated a working version of the code.
PHP doesn't natively have anything like http://twig.sensiolabs.org/doc/tags/extends.html - at least not with such concise syntax. My only gripe personally with Twig is relatively long compilation times, but that's because the lexer/parser is written in pure PHP, not C/flex/bison like the PHP compiler, and you can cache the PHP files that Twig produces anyway.
Okay first off you should really be separating your PHP from your HMTL. At your current skill level you should just use a switch statement to decide what code you run. Something like this: switch($_GET['Mode']) { default: echo "Mode not recognized"; break; case 0: somecode break; } Second you should be validating and sanitizing your data to make sure people aren't putting scripts and such in. This means you are going to need an error message system to show the user when they try to enter invalid data. I would recommend using JSON for it. I wish I could help you with it all but you haven't provided the full code so I cannot seperate the HTML from the PHP nor understand what you want to achieve. Anyway here is a PostData function I wrote that does exactly what you want: function PostData(URL,Data) { var xmlHttpReq = false; this.onResponse = function(Resposne) {}; if (window.XMLHttpRequest) /*Mozilla||Safari*/ xmlHttpReq = new XMLHttpRequest(); else if (window.ActiveXObject) /*IE*/ xmlHttpReq = new ActiveXObject('Microsoft.XMLHTTP'); else alert('Your browser does not support AJAX calls, please upgrade it.'); xmlHttpReq.open('POST',URL, true); xmlHttpReq.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); var ThisPreserve = this; xmlHttpReq.onreadystatechange = function() { if (xmlHttpReq.readyState == 4 &amp;&amp; xmlHttpReq.status == 200) ThisPreserve.onResponse(xmlHttpReq.responseText); }; xmlHttpReq.send(Data); } POST is just GET but hidden so to use this function you would do something like: var AjaxCall = new PostData('/Somewhere','AParam=AValue'); then if the server is returning some data you want to handle you'd go: AjaxCall.onResponse = function(Response) { //Do something with Response } Alternatively you could use the form auto submit script I wrote, although it requires some other functions I wrote to function. You can get it [here](http://pastebin.com/856bdTUq), the formatting is a little screwed up but I'm sure you'll be fine. With the use of this all you have to do (If you don't care about the server response) is &lt;form action='/Somewhere' method='POST' onsubmit='var submitted = new SubmitForm(this); event.preventDefault(); void; return false;"&gt; and it *should* loop through all the children of the form then generate the post string and submit it. I haven't tested it much although when I did test it everything worked fine (Although I have altered it for you since you don't use JSON for response).
Yep, we had this same thing at my old job - there were lots in 3rd party libraries, mostly in code we didn't even use. They even found one issue in unit tests - a PHP error that tested a bad string on purpose, but it tripped up their compiler. I'd be sure you strip tests from your code and any 3rd party libraries before sending it.
Thank you for saying this. All too often in the PHP world we ignore bad practices because someone's "just learning". That said, I would suggest your js post code could much more easily be a jquery $.post()
I prefer to write my own stuff since whenever I use JQuery I end up using like one or two functions which I could easily create myself so I don't deem the extra time the client has to wait to download the page worth it. But everyone has there preferences.
Thank you for an EPIC answer! Going through it all slowly now! 
Thanks for this, will test it out! 
&gt; improve (reinvent) code. is more like refactoring 
Why do people feel the need to rewrite things things that have already been solved a thousand times? For fuck sake, just use jQuery. Wait a second, I have to go whittle some wood into four round objects and put them on my car.
false, you can validate a code from scratch in the controller, but its not where it belongs, its a service. But since you outsourced it you also have to create an instance of it and have more lines of code.
classes takes more code if you only use it once
I just want to test it but can not see a demo link.
There is a Twig C Extension for PHP : [link](http://twig.sensiolabs.org/doc/intro.html#installing-the-c-extension) 
Sorry :/ I'm trying to get the demo site working and I'll fix the link as soon as possible once it's done. If you have quick access to a webserver, you can go down to the Cleaned Up Code section of the page to get the full source code.
I gave my reasoning, I prefer to write my own stuff which I can learn from rather than just use someone else's code for everything. You don't need to attack me just because I do something differently to you, asshole.
And this is why I don't take graphic designers seriously. You can tell them I said that too. I hate them. Right down to their black little hearts.
My code could be just as easily cached if it was put in a separate file, thus it would be faster. But the main reason (That I probably should have stated) is that I prefer to learn what I'm writing than just use functions made by other people. Personally I think the worst thing you could teach a newbie is that you should use something made by someone else all the time (Which is what I see normally happen with JQuery, they use it for one function then end up using it for everything they do.) rather than learning how to make it themself. Although obviously this is just my opinion and my experience so on a larger scale it could well be different.
Using static classes is a lot cleaner than having tons of global functions, even if it isn't "necessary".
So you're saying is that if you write your own stuff instead of using JQuery you're stupid? I don't find that to be true at all, you're going to learn more if you write your own stuff instead of just constantly using stuff made by other people. Obviously there are exceptions like encryption, which should always be done by specialists. It's actually quite the opposite, if you had two people equal in experience and sat them down and told them to create something without external resources which one do you think would be more likely to succeed in completing the task? The one that has spend all their time just using things other people have made and only really understands how to use what others have made or the one that has wrote everything themself. Yeah, clearly the one that understands how everything works and could write it themself is the stupid one.
I do but I can't be bothered :-)
Persona 4 is a great game.
It is, isn't it? I love the artwork. Can't wait for Persona 5 and the Persona 3 movie :O
So gail :P http://blog.motane.lu/2009/01/02/multithreading-in-php/
Ah that's pretty cool, I didn't know about that. And no they shouldn't, if you discourage people from writing their own stuff and always using things made by others then people won't learn. They will simply know how to use things in JQuery or made by others. By doing this you end up discouraging people that in the future might end up creating something as awesome as JQuery, thus killing innovation.
So this is for turning your lights off and on and dimming them? That's pretty cool
For example, the project I am working on has close to 100k lines of code, it has huge slow processes going on and bottlenecks all over the place (sql to get the logged in row is being called over 30 times :/ ). I was debugging a class and discovered several issues with one method that was over 300 lines long which I turned into a well documented method of just under 85 lines by making it recursive. I did this because it look me less time, knowing the given input and expected output to rewrite the method in 10 minutes rather than spend an hour debugging and fixing the bloated original. In this example code quality most certainly increased and the project lost over 200 lines of bloat. I guess the answer I was looking for was: Code quality increases the less lines you have so long as you have left things better than you found them.
This is the first I'm hearing of the movie. I'll definitely check that out. Got any links?
But what's wrong with just copy/paste when you want to use that code again? It must be fine, as I'm working on legacy systems that do this all over the place. Grrrrrrrrrrrrrrr...
http://www.imdb.com/news/ni29969110/
Being a language that allows output to be mixed with code does not magically separate concerns. You need to be a bit more rigorous about it and lay down some structures, and that is where a templating "system" can help, even if all the system does is to work out what templates to load. Using a templating system does not automatically mean reinventing the wheel. A templating system can still use PHP scripts as templates.
And this is why php developers are bad. 
&gt; The next step is admitting that the existing frameworks are better than your home cooked solution, and learning one. Or at least that, instead of writing a system that's already been written countless times, you could be spending that time developing new software. I used to insist on writing everything myself, until I realized how much time I was spending on boilerplates compared to actual project-specific code. It's also easier for someone else to maintain a CI project than something you built on your own custom framework, because people already know CI.
Stared. Looking forward to playing with this some day.
I believe the research showed (looking for the link) that code quality decreases with the less you can see. i.e. When you can no longer see code at the top of your script. https://news.ycombinator.com/item?id=3037293 http://www.agiledeveloper.com/presentations/caring_about_code_quality.pdf
http://www.p3m.jp/ &lt;--- Official Website http://en.wikipedia.org/wiki/Persona_3:_The_Movie http://megamitensei.wikia.com/wiki/Persona_3_The_Movie There are some Japanese trailers on the official website.
Thanks! Just today I was looking for an image-to-ascii previewer for the terminal/shell, but everything I found was all imagemagick and what-not, and I just wanted something simple.. then I though "maybe it can be done in php.. maybe it already exists? no, surely no one would do something *that* crazy, and it'll probably have to be a dirty hack..." - and here it is, and it's simple! It's amazing how difficult some things can seem and how simple they then turn out to be.. and I definitely need to look more at imagefilter(), that's new to me. Now I want to add colour translation for the terminal version :-) Thanks again!
In case you didn't see it yet, please take a look here: http://www.phptherightway.com/ — this is a must read for any modern novice
No problem! Glad I could help!
&gt; And this is why php developers are bad. Racism against PHP developers
Can you do autoloading with namespaces / functions? That's a real benefit of using static methods. 
define "a LOT".
mmm there might be .. ## might be for programming help #php might be for developers of the php engine/zend
Java needs a proprietary stack...and ruby / python hosts have historically cost more than php hosting
You could just install tasksel ( sudo apt-get install tasksel ) and run that ( sudo tasksel ) and select Lamp Server from the install list...doesn't get easier than that 
VPSs are cheap as hell now, you shouldn't be getting "PHP hosting" anymore.
You should break them up into different files and wrap them individually in something like if (! function_exists('function_name')) { function function_name(){...} } Not because of slowness, but because of readability and organization in general.
Awesome! I put your code onto my website and then started playing around with the characters to use. Found this website with different strings to use for the ascii greyscale: http://paulbourke.net/dataformats/asciiart/ and ended up playing around and found $characters = ' .-:=+i*%$8@#'; worked best for me.
Key word "historically"
Good idea
Its really pretty cool, performance consistency across devices is a big issue for me though. We use it and it does what we need it do do, but I hear complaints frequently about speed and the app not resuming from where it was left off. I've addressed speed as much as I care too, but the app not resuming is a nightmare. 
Bookmarked :) 
That's kind of what I was thinking of doing. Sounds like a good idea to have logical groups :)
fucking heaps ;)
Good idea. Thanks 
In my opinion it would be easier just to type function_name(); rather than select all the text and copy it. It also keeps the whole think looking neater (hopefully)
Yep. No point making more work for yourself. Work smarter, not harder :)
You can in fact, not. I vaguely recall that being a target for PHP 5.next.
You would think so, wouldn't you. I was working on a client project last year that involved a contractor writing an api for their crm. Within two weeks it was 10,000 lines of code, at the client's end. I raised that with the client as unacceptable/problematic, as the coder had obviously not understood the patterns in the functionality. The client was happy with it, as it had lots of code and looked like it worked. Six weeks later, after I had raised a hundred bugs, mainly the same shit over and over, with each api function, they conceded and decided to refactor the code. It got down to about 1000 lines of code and virtually no bugs. 
Sorry, was just trying to get it straight in my head :) 
Performance has been a major problem for me in a recent project using phonegap. I'm at my wits end now as it is working fine on iOS and fine on some Android devices but not on more powerful Android devices (for example it is working absolutely fine on the S3, but on the S4 there are loads of random issues such as links not being followed when clicked but those issues don't happen in the normal browser nor on the emulator or Nexus 7 running the same version of Android). I've basically told my boss that I simply refuse to do anything with phonegap in future, someone else will have to do it
I guess I am lucky that I get to control the hardware we use in the field. So far we are usimg Xooms, XyBoards, and 8inch Notes. For phones I've got galaxy nexus, s2, and note 2. Note 2 is my favorite of everything I never have issues with it. 
Incredible. Thank you for this.
https://wiki.php.net/rfc/use_function
Always more to learn, man. No matter how good you are. Don't feel too bad about it.
Yeah I know, it's one of my life motto's - Don't close your mind, there's always more out there to learn :) 
It's not easier to set up. It's just set up *for you* on cheap hosting. If you have a VPS, you're setting it up for yourself anyway, and it's mainly a matter of `apt-get` and editing a few configuration files.
Apache rewrite
I've been looking all over for the proper RewriteRule and RewriteCond statements but I can't get any to work properly. The main issue I keep having is I can make the www.example.com/about go to www.example.com/about.php but I can't figure out how to make the about.php remove the .php extension without causing an infinite loop
not only does hiphop no longer transcode php to c++, they even completely ripped out those code paths :) You can call it just a JIT these days
I copied this from my own server: RewriteEngine On RewriteRule ^(.*)$ program.php [L] All requests to my domain name will execute `program.php`. In `program.php` I use `$_SERVER['REQUEST_URI']` to find the correct file to include.
this.. is awesome..
This is the front controller pattern at its most basic. Most frameworks work like this.
This will also rewrite **everything**, images, JavaScript, CSS the lot. Probably not quite what you are after.
This is the rewrite rule from my .htaccess. Slight variation on others. Any would work RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME}\.php -f RewriteRule ^(.*)$ $1.php
Well there is HipHop and HHVM, they do different things. 
Noise.
Haha, thank you.
.htaccess in webroot directory RewriteEngine On ErrorDocument 404 http://www.mysite.com/my404page # This strips any trailing slash off the URL RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_URI} ^(.+)/$ RewriteRule ^(.+)/$ /$1 [R=301,L] # This redirects any paths without the extensions in the next # line, such that http://www.mysite.com/about -&gt; # http://www.mysite.com/index.php?content=about RewriteCond %{REQUEST_URI} !\.(gif|jpg|png|js|less|xml)$ RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^([^/]*)$ /?content=$1 [L] You can then determine the correct path and include the appropriate page from your index.php by referencing $_GET['content']. This also helps with layouts- you can put your head, nav, and footer in your index.php (so you aren't duplicating code) and then include the appropriate content for the rest of the page.
 &lt;IfModule mod_rewrite.c&gt; Options -MultiViews RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ index.php [L] &lt;/IfModule&gt; This the one from Laravel 4 it will redirect everything to index.php unless the file exists in your document root. This is usually more useful as it means css/js/images (or any other file for that matter) are not rewritten if they exist in your document root. This will reduce apaches workload and means that every file doesn't have to be parsed via index.php and this mean php needs to be loaded on every request. Finally if you need a specific file to exist e.g. someone is linking to a .html file on your site, you don't need to add extra rewrite rules as you can just place that HTML file in your document root. 
&gt; RewriteCond %{REQUEST_URI} !\.(gif|jpg|png|js|less|xml)$ Isn't that line excessive?
How do you get it so that this doesn't end in a redirect loop? Right now I have RewriteEngine On RewriteBase /test RewriteCond %{REQUEST_FILENAME} !-d Rewritecond %{REQUEST_FILENAME}\.php -f RewriteRule ^(.*)$ $1.php [L] RewriteRule (.*)\.php $1 [R=301,L] This causes a redirect loop; what should I change. 
You need to choose one or the other. You've set it so that http://example.com/example.php will redirect to http://example.com/example (line 6), and http://example.com/example will redirect to http://example.com/example.php (line 5)
btw - if you're trying to figure out how to make http://example.com/example execute example as PHP : DefaultType application/x-httpd-php
That's not a good way of doing it. Why should you have to rename your files? Just use a Rewrite; that's what they're there for.
If I remember correctly PSR-0 oulines autoloading namespaces have a google search for PSR-0 auotloader for the example
I like it as an experimental sort of thing. But why not just use the phone app?
ah
slightly, you say? Have you used Mercurial?
if you're saying you just need to change one of the letters/numbers in the barcode- then you're just going to want to &lt;?php echo $var ?&gt;, which will come from them inputting info into a field in a form and submitting it. see how the URL you pasted has the same number in the barcode? now change some of the ones into 3's and see what happens... so- create a form with an &gt;&lt;input name="**var**" type="text" /&gt; and have it submit to a script that creates the image, with the new variable you stored. "fill in the blanks"
some developers are shady and take advantage of being able to charge for each line of code. old school stuff. its like getting karma by the line... ...except with money.
your username is terrible.
^z^i^n^g
&gt;n g
this happens when one of your scripts echoes something out, or you have an blank line at the end of a script thats included in the page you are rendering.
^this.
1 reason for you. Vim is available everywhere, so ssh ing to over slow connections and editing directly in files is not only possible, but very fast also. If you are using arrow keys for navigation over such a connection, good luck getting any thing done. Also working in multiple files over such a connection is also very easy using buffers. So the ability to use these things as a second nature makes you very fast over an ssh. Also not having to use mouse is also a big deal. 
looking up at a URL and watching it change as i messed with the GET variables.
^^harder^^baby harder
&gt;baby
call me ^d^a^dd^y
&gt;dd y
na, just svn and now git.
Indeed, my bad.
Ok. Now that you have started using git, I wont ask you to change to Mercurial. But if you ever need a simpler alternative, please give mercurial a try. Git and Mercurial are similar in their concepts and workflow. But commands are much simpler and intuitive in mercurial. Or there is another one called Fossil, which I have not used, which is a version control and issue tracking with built in webserver. http://www.fossil-scm.org/index.html/doc/trunk/www/index.wiki
Actually the second condition means it only rewrites example.com/about if about.php exists. So in case you have `img.jpg` and `img.jpg.php` in the document root, `www.example.com/img.jpg` will serve the PHP file. It would be better to actually do what you described and exclude all existing files: RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME}\.php -f RewriteRule ^(.*)$ $1.php
The documentation @ GitHub has been updated to the new VM, thus removing the docs for the old HipHop compiler. edit: https://github.com/Facebook/hiphop-php/wiki
Thank you for those links.
Indeed, every minute you spend in planning saves 10 minutes in execution.
Oh, yeah, sorry - looked at a different post, then this. You are correct.
Ah yeah interesting. Will take a bit of a look. Although will probably just stick with git for its mainstreamness. I rarely do much with VCS apart from commit and update, as I work on my own mostly. But thanks for the tips.
And saves 100 minutes in fixing issues in the live product. 
URL routing. It also allow for nice URLs like http://website.com/news/1337-best-news-ever. Roll your own router or use a framework. The idea is to use apache rewrite (or equivalent for other webservers) to redirect every request to your index.php; except static files of course. Then a router written in php reads the requested url and according to the defined rules, serves the right pages . Have a look at frameworks like [slim](http://www.slimframework.com/), [silex](http://silex.sensiolabs.org/), [laravel](http://laravel.com/), [symfony](http://symfony.com/) etc. Even if you don't intend to use one the concept is interresting and routers are cool.
Cool! A replacement for my pile of ohcrikeyIneedthisattributeaswell. Curl is not always available, you could consider a fallback to file_get_contents (..which in turn is only available with the allow_url_fopen directive). 
looks very good! i hacked together something similar: https://github.com/sgry/svnhue i haven't touched it since then though :(
Certainly a step in the right direction, I just hope that all new code they write is for PHP 5.3+ so we can start using namespacing and better practices in general. Seriously, PHP 5.3 is end of lifed now. It's only getting security updates. I'd say it's safe to use that instead of PHP 5.2. 
I'm surprised that they're sticking with Subversion. 
dont rewrite away the .php extensions if a user types them in, its pretty much uneccessary stress on your servers, you can use the "canonical" meta to make sure those pages are never indexed on relevant search engines so if you never link .php and have a canonical without it, then why bother rewriting those that still have it, dont create rewrite cascades on your own system, its not worth it!
Absolutely. Wordpress has long needed to be either rewritten from scratch, or set on fire from a distance. It is (unfortunately) a pretty good blogging platform. But its ubiquity in the PHP world has given it a respect it has not earned and seen it stretched well beyond the mission it was barely cut out for in the first place. Giving wordpress a "new lease on life" is the worst thing that could happen to it. Well... to us.
And failing that carrier pigeon
Please be sure to sanitize this "content" variable if you go this route. Depending on the implementation, you could be opening yourself up to a RFI (remote file inclusion) issue. Imagine if they could do index.php?content=../../../etc/passwd or some other system file.
I made a post detailing the steps to get a virtual machine running for HHVM testing and development http://coderoncode.com/2013/07/27/first-steps-on-hhvm.html
Also true. I usually switch the content variable against a predefined list of options (e.g. "about", "contact", etc.). (Actually, I usually just use Symfony, but anyway.)
Writing you own micro-framework is a very good exercise that will make you use all the brain-muscle required to know some areas of PHP that you wouldn't normally exercise if you were just using frameworks. Trying to do something from scratch is a good mental exercise, the aim is not necessarily to have the best one. 
You can use namespaces right now. 
...and why do you say that?
I have a folder called `file` for which the rewriting doesn't apply and I put all my JS and CSS files there. &lt;Directory "/srv/http/mydomainname.com/file"&gt; RewriteEngine Off &lt;/Directory&gt; 
Obviously, and I do. I meant that the core can start using namespaces. It's annoying to contribute to the core when you have to stick to 5.2
What are good modern alternatives with feature parity to Wordpress for blogging?
In 2003 it was also the future, even before WP. I was using [bitkeeper](http://www.bitkeeper.com/) then, until the owners got arsy on open source projects, then [monotone](http://www.monotone.ca/) which was nice but was not going anywhere (and was a shocking resource hog on Windows), and then git, once it was stable enough to replace bitkeeper (and it was bikeeper's actions that motivated the creation of git in the first place).
I try using PHP5.3 features in [WP plugins](http://wordpress.org/plugins/google-fonts-for-woo-framework/), and within hours of a release get people complaining that it is not working.
Easy: copy live data and set it up in local dev server. I think you're making this far more complicated than it should be. For example: I work in the medical field, we have to follow strict regulations. We can't edit code willy-nilly on live or staging - those are set in stone and can only be changed via a structured, documented deployment method. Solution: Have a 100% mirror of live on local using vagrant/puppet and when I need to mess with live data I grab a copy of it (hipaa-controlled bits obfuscated, of course).
This smells of homework. Regardless, you should really attempt the problem yourself (and demonstrate that here) before asking for help.
copy live data? What if it is in the order of GBs? I usually have a staging server, and I can edit all the code I want there without affecting the live system. So Instead of copying the live data, I just work in the staging code and fix it there and then pull changes to live repo and update the code there. I can see you work in a restrictive system. But otherwise I cannot see anything wrong with editing directly in server. Do you have any solid reason for not doing so?
Have you never looked at WP code before? Imagine a site written in PHP 4.4, and then organically grown over 10 years and yet still supporting 4.4 for most of that time.
kidding... you asked for criticism and your code was pretty decent so you didn't leave us much to work with.
So what about all the PHP extensions, like the mongodb driver, or Phalcon, and so on?
I'm not sure I completely understand the question, but here's a potential solution... // array to search (add values if you wish) $search_arr = array(21.56, 12.08, 5.02); // value to search for $needle = 21.56; // find all array values in $search_arr that are not equal to $needle // place needle into a single element array and use the array_diff function $result_arr = array_diff($search_arr, array($needle)); // double all values in $result_arr $double_arr = array_map("double", $result_arr); function double($val) { return $val * 2; } // output var_dump($search_arr); var_dump($result_arr); var_dump($double_arr); 
I would like to know why a person would like to do this.
Came hoping for git instead of sticking with SVN. I am disappoint.
Wow, that didn't paste well did it... This line is likely part of your problem: @$fp = fopen("$DOCUMENT_ROOT/E:/orders/orders.txt", 'ab'); It appears as if you want to write to your 'E' drive in the file "E:/orders/orders.txt", but you are prefixing the DOCUMENT_ROOT variable to your file path/name, so the actual file name is something different/longer. Even if you correct the file path/name you may still run into permission issues. Perhaps not on your local windows server, but if/when you run this code elsewhere. You could also consider building the path using the DIRECTORY_SEPARATOR constant. 
Why? You develop for WP by making plugins, mostly through hooks. You can use all the new techniques in your plugins. There are so no need for you to debug core if you are not part of the WP community. 
Welcome to the future! It looks a lot like the past. 
DVCS :)
The location DOCUMENT_ROOT is depends on your installation, and isn't very reliable on Windows/IIS (according to comments on the PHP documentation). Technically the variable is $_SERVER['DOCUMENT_ROOT'] as well. If you are running XAMPP on Windows it's probably somewhere like "C:/xampp/htdocs". An easy way to check... echo "DOCUMENT_ROOT: " . $_SERVER['DOCUMENT_ROOT'] . "&lt;br /&gt;"; You probably wouldn't want to store your orders.txt file in your DOCUMENT_ROOT anyway - it would be available as a web page to browse that way. You 'may' be able to store the file anywhere on your system, depending on permissions. If you want the file to be at 'E:/orders/orders.txt', just make sure the 'E:/orders' directory exists, and use the fopen command like so... $filename = 'E:/orders/orders.txt'; @fp = fopen($filename, 'ab'); Disclaimer: I'm just trying to help you get something to work. This is not secure at all, and you should really be using a database to store orders, or just about anything. This seems more like your learning though, so this advice is just meant to keep you moving with the example you provided. 
Call me when they revamp their decade old code. These changes don't do anything to solve the real problems in wordpress. The irony is half the people here are disappointed in the choice of version control, and not the fact that the codebase is a hulking pile of crap.
Therein lies the problem. ;)
I autoload namespace classes all the time. You can do it.
HHVM doesn't try to emulate the Zend Engine API, so PHP extensions won't be portable to it. Given that a lot of extensions are just thin wrappers over an underlying library, porting them shouldn't be *too* much trouble once any learning curve is overcome.
If you require help, please go to ##php on Freenode, or to /r/PHPhelp.
N/m found it: https://github.com/Herzult/SimplePHPEasyPlus
The price for those tickets is too damn high!!
Well, V4 seems to be on the horizon and if you remember the release of V3 and V2, you'll also remember that each of those versions was adamant at cutting off poor code and saying they will not back-support certain things. Hell, they even made new requirements for PHP and MySQL. I'm honestly hoping that this is what will happen. WP has gotten considerably better over the past few years (with V3 release) in terms of UI and coding. They're slowly transitioning to better practices, better development etc. and soon, and I'm hoping this will happen, WP will create a WPV4 and cut off its dying limbs. It's similar to what happened with jQuery where jQuery 2.0 dropped a ton of support in order to be more modern and speedy. Or with Zend which "suddenly" became Zend2 which was a complete overhaul. While WP is a behemoth, I think they recognize their limitations and the stress their products puts on their OWN servers as they run hosted versions of it.
If you are using PHP 5.5, you may want to use the Zend OpCache instead of APC for code caching. http://php.net/manual/en/book.opcache.php
Plot twist: WordPress isn't a blogging platform, it's a CMS. If you want blogging software, there are lots of alternatives. If you want a CMS, there are lots of options. However, trying to find blogging software with feature parity to WP is going to be challenging; instead, you should look for a CMS that offers some means to blog. That will bring you the closest to WP.
true, true
Have they stopped using mysql_query() yet?
Well, I [implemented a part of the Warcraft 3 lobby protocol in PHP](https://github.com/Manhim/W3GS-PHP), so it should be possible. I wouldn't recommend it though.
I started on Codeigniter, then FuelPHP and moved to Laravel when 4 came out. That's when I realized I didn't know everything I should, when I really started digging into the code. Definitely a lot of good advice in here and it's all been much appreciated! 
The plan is to become VCS-agnostic, with an official bi-directional Git mirror. That's still being worked on. The main reason is although a lot of people would love to switch, the buy-in from the actual committers isn't that high, so we need both.
The minimum version is staying at 5.2 for now, since [60%](http://wordpress.org/about/stats/) of sites still use it. (This number is falling though, thankfully!)
now imagine it was actually written in VBscript :X
guys guys, slow down on the breaking changes!
Submitting your own articles? Brave.
I wish people would explain why they downvoted me. I thought this was a pretty good method.
To be blunt, it wouldn't be the first time there had been a commitment to fix something in WordPress and they didn't follow through. Until it's in a release, I'm firmly in the believe it when I see it camp.
The HHVM guys are talking about adding support for the Zend extension API — I'd probably rather they came up with a cleaner API that could be stolen back into php-src, but they know it's a weak spot right now.
Because I'm a PHP coder who has a lot of interest in working with the API directly?
Cool project. I also built a fully featured PHP client for Philips Hue: https://github.com/sqmk/Phue Composer/packagist support, well documented, fully unit tested (working on functional tests), convenient bin scripts for general bridge management, and works with the entire Hue API. For those without the cURL extension, you can also use this library :-) Consider contributing to this project! 
Awesome, looks like you've put a lot more work into yours. This is mostly the result of me wanting to throw up the Hue-specific part of a personal project of mine to have more worthwhile stuff on my GitHub. Figured someone might find it useful, though. Yours looks like a surer bet for people looking for easy PHP API support, though! :) And happy cake day.
I hate the "you can't submit your own work." If he wrote something and wants to get exposure, go for it. I will vote based on the quality of the article. Sure, spamming the subreddit with links would be annoying (and is why most dislike people submitting their own work), but that should be handled by the moderators in the few instances it occurs.
The article is well put together. I have a very working knowledge of curl, so having it laid out with explanations is nice. Especially the cookies bit, I've had so many issues with curl cookies. My one recommendation would be to update the cookiejar bit to show how you could use [the tempnam function](http://php.net/manual/en/function.tempnam.php) so that if two people requested a page that made use of a curl request with cookies they wouldn't stomp on each other (or at least bring up the issue).
Thanks, ExistentialEnso, fellow Hue enthusiast. I started this as a little personal project as well, before the API was released by the Philips Hue team. Lots of network traffic sniffing to figure out how the API worked. Glad they released some documentation. Your implementation looks good too, and certainly worthwhile to throw up on your github account. The first project I used this with was at my previous employers office (Mashery) for setting lighting effects for actions that happened in our local Call of Duty games, just as a proof of concept for showing activity when folks committed code, CI status, some other things. Any time a game started, we'd fire off a PHP consumer that would tail and parse log messages from our CoD server. The Hue lights would show different statuses for when games started and ended, when someone in the game would get damaged, any deaths, in near realtime. Pretty neat for benchmarking the bridge and zygbee calls to the bulbs. As for now, I use it on personal sites to fire off my home office lights when certain events happen. What exactly are you using Hue for on your personal projects? Definitely loving the Philips Hue system, and looking forward to the addition of the Bloom and LightStrips products!
Maybe?
I encountered some of this greatness in a project recently - was part of a FuelPHP project - not sure if the code was "core". Since I was moving the project to a new server with PHP 5.5 it had to go.... Remove this work from core ASAP - gives me shivers just looking at it... with preg_replace_callback() and rather awesome closure support in PHP now (ability to use $this-&gt; in a closure since PHP 5.4 makes it so good to use now)...
It would have been easier if I could use " or ' which would lose the need for the *?&gt;red&lt;?php* uglyness. This uses CSS (I think) and the &lt;style&gt; tag is supposed to go in the &lt;head&gt;&lt;/head&gt; tags but oh well, it works. ~~The code there is also missing the &lt;/style&gt; tag at the end.~~ Was. At least I did *try* to indent.
Why would anyone consider using PREG_REPLACE_EVAL when the preg_replace_callback is available?
There's a lot of hype around Ghost, but it's still in beta, won't mature for a while, and runs on NodeJS.
I don't think it has anything to do with what we like necessarily, it's just an old rule of reddit to combat bona-fide spammers. I think it should have a little more oversight for enforcement though, since contributing members have been banned before, and it sucks for everyone involved. Perhaps if the admins contacted the mods of the sub where the "spamming" occurred before they ban, then they could either confirm or deny whether they're actually a _spammer_.
I wasn't stating TDD was the correct way to do every project, but merely that following TDD has an effect on how much time you spend on the project.
This is one of the problems. Every WP site that has a bunch of development done on it ends up becoming a custom PHP application sitting next to a WP install, with a few hooks into their shitty API. The shitty API is the other problem. I've had friends lose a lot of money trying to build a site out of WP, then switch freelancers and realise the next guy has no clue how the first guy bashed things together. If they offered a more useful structure in the first place this would never happen. Your millage will obviously vary, but I've seen this happen to friends more times than I have fingers.
I think you're misunderstanding me. I was saying that TDD (that means test first) doesn't make much difference. If you test first or test later, you're still writing tests and that takes roughly the same amount of time no matter when you decide to test.
&gt; Looks like it might be responsible for some of those \ ‘literal slashes around quotes\ ’ you occasionally see on PHP forum posts. (Tumblr is good enough at avoiding them that I had to insert that space.) heh, even tumblr can't properly deal with this crap. I enjoy how "mangling input" becomes "good enough at avoiding them".
Although I don't have one I could see this being extremely useful in a office environment and may now look into investing in a few. I was thinking of having the lighting go from a normal white light to a seizure inducing flashing red light when something is wrong with the servers. I'm sure nothing would get problems fixed sooner than the fear of having an epileptic fit. 
I... don’t really know what to say here. On one hand you’re fifteen and just starting out, so allowances need to be made. On the other hand this code is... disastrous. I don’t just mean “it lacks professional rigor”, I mean it is so full of security issues that you should remove it **immediately** to protect your server. Seriously. I say this not as an insult but as a necessary precaution. The way you’re saving your data creates the biggest security flaw I’ve ever seen. You save to disk without sanitising, and then include, again without sanitising. People can put **anything** in that box. Anything **including fully functional php code**. It’s obvious from the code that you’re allowing file open on urls, meaning just copy and paste of File_get_contents(‘http://badsite.ru/viruses/myfavouritetrojan.php’) Is actually doing to do exactly that. Even if someone isn’t that malicious, typing in a PHP infinite loop and locking up your server is easily doable. **You should take this down before anyone does damage.** Moving on, I highly recommend reading some books on PHP as an OO language, and on computer science as well. There are a huge number of issues with your code, and I don’t feel they should just be ignored. You said it’s “badly formatted code”. DON’T. Just saying it’s badly formatted doesn’t stop it being badly formatted. If you don’t care enough to even indent... don’t write it. And especially don’t share it! &gt; &lt;font color=\"#ff0000\"&gt; Seriously? It's 2013! Font as a tag has been deprecated for **more than a decade**. In HTML 5 it isn't even supported at all. I don't expect you to be a HTML guru, but this is pretty trivial. Computer science and programming and PHP and web design can be a hugely rewarding skill and career. But you really have a lot to learn. 1. Security - you need some. Never trust input. Never ever ever trust input. Sanitize. Look it up. 2. Separate concerns. You have bits of code generating HTML and other bits doing PHP control. Split them at least physically. Your variables should be data, not slabs of HTML. Leave the slabs of HTML to... html. 3. Learn HTML - You need to have a valid document structure. And you need to know what is current and what is modern. edit - 4: Spell check. Profanintys? Seriously. It makes you look very very bad when you do things like this. It might not matter to you, but it does matter. If you have specific questions, hit me up. Happy to help. But I can help most by telling you to REMOVE THIS CODE.
And 23 were for deprecating it.
One shouldn't. Byut preg_replace_callback is new. I have some code that uses PREG_REPLACE_EVAL for use in parsing code. Works great. No security problems. The escaping rules are a bit tricky but not illogical and easy to manage. I'm all for depreciating this but the author way over-sold the problem. 
Did it work at one point in time? If so, they may have blocked your ip address, do you have permission to get the data? If you want someone to look at it, you should probably provide the code somewhere? 
No. Use classes for your functions so you can autoload.
I love me some curl! It's a great tool for troubleshooting that I use all the time, but I had no idea there was a php library for it. Neat. 
&gt; php script that's supposed to rip some public data from a site *Scraping* almost never works for any length of time. It's entirely possible that they just slightly updated their website, moved a tag around, or something. Generally speaking you just shouldn't do it. If a company wants people to use its data, they will provide an API to access it cleanly. If they don't, then... it's not your data to access.
*Did you NOT read the autoload part? How do you autoload namespaces? Or you like to pull everything in... just for fun?*
It's public data. 
&gt;preg_replace_callback is new It's been in PHP since 4.0.5
I dont even have the effort to find said tumblr. Anyone halp?
There are multiple problems with the script, starting from the top, I would recommend replacing the xhtml class that you are using with curl it will support all of the optional elements that you are using and is much simpler to use here is an example to pull the page $curl = curl_init(); curl_setopt($curl, CURLOPT_HEADER, 0); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); curl_setopt($curl, CURLOPT_URL, 'http://www.pittsburghlegaljournal.org/subscribe/pn_sheriffsale.php'); curl_setopt($curl, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)'); $html = curl_exec($curl); That will give you the raw html of the page you are trying to grab, then you can parse it how you will. with the parsing, it would be more recommended to use a proper xml parser than regular expressions, especially ereg...
Why didnt they win? Or did they?
Most of the posts on this blog seem sensible, but [this one on `strcmp`](http://phpmanualmasterpieces.tumblr.com/post/44634822304/i-am-so-comically-angry-right-now) misses the point pretty badly. `strcmp` is for comparison while sorting, not just for straight comparison, where `==` or `===` is much quicker.
Hey, at least it's an informative article instead of the "help me pleaz!" posts we've had lately.
http://phpmanualmasterpieces.tumblr.com/
They did. It's deprecated. The author is concerned that it wasn't unanimous.
It's pretty easy to check this algorithmically. All of the user's posts are logged in the database. If the user posts a larger percentage of a single domain then flag them as a possible spammer (may already happen). And set some well-known domains as allowed so that a person can submit all articles from dailymail.com, if they so desire at the protest of other redditors.
I use a class that I developed call Kurl, which the [GitHub project](https://github.com/ajbogh/Kurl) is missing some new functionality for curl-multi requests and better cache handling. A wrapper class makes it extremely easy to do something like: $result = Kurl::call($headerArray, //array("Authorization: BEARER 12345") $requestParametersMap, //array("param1"=&gt;"val1") $url, $method, //GET, POST, DELETE, PUT, HEAD array("jsonPOST"=&gt;true) //additional options );
Here is a great resource -&gt; http://www.phptherightway.com/
I don't see perl deprecating /e... Why is this such an issue? To be honest though, the tone of these kinds of articles is so overpoweringly patronising, so "I know best now listen to me children", I find it hard to read regardless of how valid the point *might* be.
Same goes for every custom application, and every framework you have no knowledge about... If you know WP, you know the hooks. You would have no problem reading decent written plugins. And their documentation is also good. I wouldn't recommend it for a total CMS rewrite, but for small to medium business it's a good platform.
God, that post pisses me off. He *completely* missed the point. strcmp is made for comparing **strings**. Not a string an array. Not a string and an object. Not a string a *...*. Of course it does 'weird' shit when passed stuff it doesn't expect. Welcome to PHP! A return value of `null` makes sense when it *can't* do a comparison (the `==` should be `===` to begin with!). The code he's bitching about using strcmp is absolutely horrible code. It does about 8 trillion things wrong in about 6 lines. Gaaaaahhhh!
There are some good things in this article, but overall, a few very bad pieces of advice drag it down quite a bit (not to mention the rather interesting typographical oddities and errors). I'll review your SQL section a bit: &gt;Here’s a PHP function that can make things simpler such as this one: mysql_real_escape_string: this will simply take a regular string and your data will get sanitized. This is pretty dubious advice: 1. The classic mysql extension is deprecated as of PHP 5.5, and it should have been deprecated with PHP 5.0. 2. Prepared statements tend to be a much better solution than escaping 3. Your string doesn't get sanitized. It gets escaped. Would you call the string literal in `$str = "\"Hello," cschs said.";` sanitized or escaped? Escaped, of course. mysql_real_escape_string does the exact same thing as my backslashes before the quotes. `'` is a special character for MySQL, and as such, it must be escaped. `mysql_real_escape_string` handles that. &gt;And if you choose to use the above function together with htmlspecialchars, this will help you convert the reserved HTML characters such as converting &lt;scrpt&gt; into &amp;lt;script&amp;gt, etc. This will not just protect your database but will also prove helpful in safeguarding your app from any kind of cross site scripting attacks when they are in the form of user-submitted HTML. 1. `htmlspecialchars` in no way protects your database. 2. Escaped HTML should not be put into a database. Would you put base64 encoded plain text in a database? Of course not. What if I later want plain text back? I don't want to decode it. I'd much rather encode it in the context that it makes sense rather than work with a specific format that has no business being in a database that has no idea what in the world HTML even is. Escape text *when* it's used as HTML, not when it *might* be used as HTML. ------ There's a few other little "errmmm.... eh..." snippets in your article that make me anything ranging from uncomfortable to "that's not quite correct," but for the sake of brevity, I shall leave the more minor things alone. 
No, There is nothing wrong with using functions. There's a time and place for everything. However, your example hints at a website or application that at the very least features user-management. In this case, it's advisable to go the OO route. You should have objects for authentication and users. Using other techniques such as autoloading and Registry your code should looks something like: &lt;?php if (myApp_Auth::check() === false) { // checks Registry if user is logged in // redirect to log in. This could be a function. But better is using a Routing system myApp_Route::goto('login'); } &lt;?php // the login page would trigger something like if (myApp_Auth::login($userFromPost, $passFromPost)===true) { myApp_Route::goto('home'); } else { // login failed message } functions can still be used to perform single tasks that require no connection to other elements of your website/application. Like the database. For instance "echo getFormattedDate();" In terms of managing your code, it's best to avoid having to include a functions file everwhere. It's better to have your website/application run through one file. index.php which makes sure all your dependencies are loaded, through includes or setting up an Autoloader and Registry. And loading the right "page" by parsing the url, parameters or with mod_rewrite techniques. A simple index.php could look something like: &lt;?php require_once 'functions.php'; include 'header.php'; if (logged()===false) { include('login.php'); } else { include('navigation.php'); include(getRoute()); // getRoute would parse the URL, validate page exists etc... } include 'footer.php'; This ensures all your functions are available in every page, aswel as "logged in" is check at all times (if you wish that to be the case). The header and footer files contain all your HTML depencies (css, javascript) and the HTML that remain the same throughout your website. 
&gt; SimplePie is a very fast and easy-to-use feed parser I disagree. :)
That's definitely some food for thought. Thanks for the suggestion :) 
Lets say you have a group of people (the array) you know by their first names (the keys). You could say for each person in that group, get their date of birth (a value). In PHP it would look like: foreach($People as $FirstName=&gt;$Birthday){ echo $Birthday.'\n'; } This only works best with an associatve array which would look like this in my example: $People=array( 'kaz3' =&gt; 'July 4, 1989', '_novice' =&gt; 'January 1, 1901' );
You got an array, like this: (called $letters) [0] A [1] B [2] C etc. now do this: foreach($letters as $letter){ the foreach will basically iterate through all the items in the array, and perform whatever is inside the braces on each iteration. if you were to tell it to just display the letter, you could do this: foreach($letters as $letter){ echo $letter; } This would end up displaying all the letters in the array. This would have the same effect if you were to do: echo $letters[0]; echo $letters[1]; echo $letters[2]; Only you don't have to type all that.
Yes, and I gave up on Magpie, too. (They're not even maintained anymore, are they?) simplexml_load_string() is enough for my purposes so far, making a simplicistic little parser, and expanding it until all the feeds I'm using it work fine, actually cost me less time than I wasted on magpie and simplerss. Also, it's much, MUCH less code. I don't need nor want support for every obscure quirk used in any feed ever since 2000, I just want to parse me some atom feeds. Not that I want to bash the tutorial or anyone using it, I'm just saying, I had so much frustration with the above two, and all the pain disappeared when I discovered simplexml_load_string(), so I just wanted to put that out there.
"I have a collection of similar things. For each one in turn perform the same set of actions on it." The key is an identifier. It could just be a incrementing number or it could be a useful name. Value is the actual data to operate on.
Hmmm, I will give it a shot explaining it. Pretend you have the following array. var $names = array( 'John', 'Jane' ); Our foreach would look something like foreach($names as $name) { print $name; print "&lt;br /&gt;"; } // or foreach($names as $key =&gt; $name) { print 'The key is: '. $key .' and the value at that index is: '. $name; // print "The key is: $key and the value at that index is: $name"; print "&lt;br /&gt;"; } Not very helpful, but lets break it down. **foreach** is a short form of looping through an array (or other object). // EG: for($idx = 0; $idx &lt;= count($names); $idx++) In the background the **foreach** is creating the variables you ask it to ($key, and $value). You will notice in the first foreach I did not supply a key. You can get away with doing this because in that case I might have no use for knowing what index of the array I am at. The second part of the foreach supplies a key, so now I can also use that key.. This is good for looking things up. So in short, the foreach is creating "temporary" variables that allow you to access your array/object/whatever. // Example: // Create temporary variables that only exists in this "foreach" block called idx and name foreach($names as $idx =&gt; $name { // We can access the $names array with the following now // PHP assigned a variable called $name to the current index (idx) record print "My name is $name"; print "&lt;br /&gt;"; // But we can also use the index (idx) print "My name is ". $names[$idx]; print "&lt;br /&gt;"; // And because we told the foreach we wanted a key (idx) we can also see it print "The current Key is: $idx"; print "&lt;br /&gt;"; print "&lt;br /&gt;"; Not sure if that helped lol...
This is in fact very useful. Thank you for that! But I'm curious... Are you somehow affiliated with phalcon?
No, I am not affiliated with phalcon. I just wanted to (hopefully) help others start with using the framework. 
Hehe - just fixed a server with a SimplePie 1.0 installed. It had been running happily for five years, then suddenly came across some kind of error in a feed and went into an endless request loop. Brought the whole damn server down by eating up all the database connections in seconds. Installed latest SimplePie 1.3 over the top, and it started working again. Thank goodness for backwards compatibility! SimplePie is probably overkill (it's *massive*, and I've never worked out why) but if it serves the site for another five years, then it can one day be retired with thanks. Edit: I'm having to support some systems that are ten years old, when SimplePie was just about the only way to parse RSS reliably from PHP.
its not by choice lol. running two sites one has the works on 5.5 the other is an abandoned POS that will never get upgraded.. hence php 4.4.7
The problem with methods like this is a lot of programmers are unaware of the risks. A programmer who manages all the risks of this kind of code can protect against attack. I am sure that the code that is listed for the exploit in the doc was found in actual production PHP code somewhere in the wild.
Yes, this 100%! Magpie and simplepie did not take into account namespaced nodes, and that completely tripped them both up. I also believe one of them didn't support utf-8, so that was also a no-go. After discovering simplexml, I haven't looked back. One of the rare cases where a library did not outperform a hand-rolled solution... 
There are many fronts that want to dictate the direction that the PHP language should take; some want to make it a better OO language, others want it more functional, others like the procedural way of the language. Among the flavours of people wanting to change it, there is a vocal group about features that can be abused, or provide means of exploitation (and they always blame it on the language, instead of the developers). This is another such aspect, where the "mighty" rise to protect us from ourselves. While a noble goal, this is not the way it should be done; by ridiculing features and saying they have no sense or use cases (that just notes lack of perspective of how others may use features). I for one, see benefits in trying to have a single blessed variant for doing things (as the preg_replace_callback is in this case), and I also see this option as not the greatest to use, when the language doesn't allow much for short expressions (as Perl does, especially for string transformations). Also this model is the only way the core developers can try to simplify the language, in general. However any deprecation will step on peoples toes; as it was the case with the POSIX regex functions, mysql and so forth. In conclusion, deprecating or not, it's good that there is a clear process now to do that; and the recent push to update production versions faster is a good thing as well from my point of view. AND the tone in the article was more than annoying...
I've recently started replacing SimplePie with [Zend\Feed](http://framework.zend.com/manual/2.2/en/index.html#zend-feed) in an application I maintain. So far, I've found the Zend counterpart to be far easier to work with.
Just subscribed to this, is there a way to check out the archive? 
http://phpweekly.com/archive.html
I'd suggest you try the php mailing list for installations.
The files are stored on a server and not available via http. It would have to directly access the server, download the files, and then zip them. 
How would you normally access the files then? CIFS share? We can't help you if you don't share the details. 
SSH using the RSA key installed on all servers for passwordless root login
cschs has rightly criticised this article for having some pretty out of date information. I'd also like to point out that it is in no way "witty", and I for one am disappointed. Course... if "witty" and "old and a bit out of date" are actually the same thing, that would explain my dad's jokes...
Yeah, our Network Engineer has it all locked down well. Only those with developer access rights can see them.
"PHP lovers and haters" very professional. 
Superficially, it looks like a syntax very similar to Twig, which is credited at the bottom. What are the primary differences between this and twig?
Speaking as the original author of SimplePie, Magpie RSS and SimplePie are two unrelated projects that go about handling RSS differently. In all truth, more than 70% of RSS/Atom feeds are invalid XML, so in SimplePie there's a lot of work that goes into sanitization of the feeds so that they can ultimately be parsed. There is support for IPv6, internationalized domain names, built-in fetching, built-in caching, support for all character encodings that your PHP installation supports, and an API that doesn't require you to have to understand the discrepancies between RSS 0.90-0.94, 1.0, 2.0.0-2.0.11 (which are all different, and RSS 1.0 is unrelated to the other versions). It was designed to be robust and handle just about every kind of feed from every kind of language and system out there. Code !== Bloat if it has a specific, useful purpose. I retired from the project back in 2009, but if I were to go back and re-build it, I'd offload the HTTP to Guzzle, Caching to Doctrine Cache, and do more modular packages to handle things like character encodings. But hey, it still works awfully well for something that was originally designed and built in the PHP 4.3-era!
Magpie RSS hasn't been maintained since around 2006 or so. SimplePie is still maintained by a WordPress Core Contributor, and is built into WordPress, Joomla!, Drupal, Silverstripe, ModX, DocuWiki, MediaWiki, and many, many other projects.
I've actually had a few discussions with the person who runs phpmaster, as I was concerned that their authors were submitting their own content, and it was bordering on spam. We set some ground rules (same ones that apply to everyone, but worded a bit more specifically), such as that the authors need to be engaging the reddit community above and beyond submitting their own articles. I myself keep a *very* close eye on author-submitted content, and you probably don't even see most of it that gets submitted. If you do ever have concerns about an article's suitability, feel free to click the report link.
RSS and Atom don't have any namespaces nodes, themselves. There are extensions to RSS/Atom that are namespaced, and SimplePie supports a very large number of them. Did you file an issue on GitHub about this? http://github.com/simplepie/simplepie/issues
From our perspective, that is a crappy reason not to change it.
&gt; since contributing members have been banned before Who? If you're referring to ircmaxell, that was an automatic ban that we mods contested directly with the admins to get him unbanned.
He was one of them, and that's why I added my last sentence about contacting mods before enacting a ban. I don't blame you guys at all, and was happy to see y'all supporting him to get unbanned -- though didn't it take several months? Not your fault again, just shows how the automated system can create big headaches which could easily have been avoided. I've heard stories of this happening in other subs too, though. I'm sure ircmaxwell wasn't the first nor the last to have been [unfairly] banned in such a manner.
Thanks! Would be cool if you'd sanitize the link someday, my instinct of typing /archive gave me a 404. 
Another fucking template engine, thanks for that.
You know what the fastest templating engine in PHP is? PHP.
SimplePie made RSS feed parsing so much easier, I thank you for sanitizing the mess that is RSS formats.
In fairness, this is due to the nature of self teaching. When people teach themselves, they only learn what they need when they need it. Advanced data structures are rarely useful for web development. Therefore, PHP developers rarely bother to learn them. A graph might be useful in some situations in web development, but unless a graph is the only way to get the job done, someone self taught will not bother to learn. And I personally don't think there is anything wrong with that.
So... no version control I guess? If you had, you could look back and see all the changes made, and by who. This would help you identify what the ex-employee changed to break the script. You could also likely use that as proof in legal action, should your company desire to pursue that.
It's a two-edged sword. We deal with lots and lots of spammers every day, and in another sub that I mod, /r/glutenfree, we deal with even more. I am very pleased with the way the spam filter and automatic banner works. It tends to catch everything that *is* spam, and gives us a nice unified queue of items to verify, un-spam or just ham. Automatic bans are fairly rare, and they usually happen because of miscommunication with an automatic system. ircmaxell was banned because he got spam queued a few time before the "ham" option was implemented. This meant that even though some of his posts weren't necessarily applicable to the subreddit, and so were "removed", he was still marked as a spammer. As for the amount of time it took, that was largely just because of apathy on his part, and it was also before reddit hired some more active "janitorial" admins, who would deal with the daily volume of such requests.
You might give this link a look: http://blog.adamfairholm.com/fuelphp-for-codeigniter-developers/ There are a few other tutorials I've seen around as well that attempt to ease Codeignitor developers into Fuelphp since they share some of the same roots... philsturgeon is around here somewhere. Anyways, that may be your best bet. You'll be psyched once you figure out classes and namespaces. It makes for much more organized, easy to work with code. 
And RSS is a walk in the park compared to the atrocity known as HTML!
The SPL, http://us2.php.net/spl, makes a lot of common data structures available, see http://us2.php.net/manual/en/spl.datastructures.php. I'm glad this series has been highlightin it. More PHP devs should know about it and I read somewhere that Graphs could be added to it in the future.
I gotcha, so it sounds like a lot of the factors that played into his entire situation should be mostly mitigated now, with more admins, 'ham', etc. If that's correct then that's awesome. Thanks for the insight.
I believe we do, but we're still looking into what changes were made and when. I'm just trying to take the extra step and see how hard it would be to re-create what original script did.
I'm going to write a Lisp parser with this feature because fuck the police.
I dunno, I think I had a harder time with RSS than with HTML.
Never hear of Twilio, thanks for that! I commented a while back on the lack of depth in some of the articles, nice to know you're listening. This CAPTCHA article was well-documented, and balanced copy-and-paste with useful information. Keep up the great work!
&gt; Advanced data structures are rarely useful for web development. This is the main thing. I'm self taught but I started with C and C++. I know data structures but in the 10 years I've been doing web development I've never once had to implement my own stack, or queue, or avl tree, or anything like that. Even if the structure isn't part of the language it's been done and most certainly done by someone smarter than me so there would be no reason for me to poorly implement it.
Well, I've always been one to build stuff from scratch where I have the time to do so, or at the very least opt for a proven off-the-shelf package so that I don't run into issues. Code snippets like these are okay, sometimes, but the end product you wind up with is a bit like Frankenstein's monster insofar as that it's quite often poorly written code tacked together with more poor code and is completely unsustainable. In fact, you'd have to hack at the snippets so much to fit them into a standard library, written in a standard way, that you might as well write something bespoke for yourself from scratch anyway. As a one off, it's fine, but I certainly won't recommend trying to make a regular thing of it - especially not having been burned before. EDIT: Grammar
* tables aren't even remotely indexed properly * code documentation is non-existent * no tests * hard coded html, no templates * uses old mysql library * uses "or die()" error handling * not really OOP - it's just functions crammed in to classes * no escaping used for any of the queries * nothing is properly entified * full of XSS holes I could go on, but why bother. It's really bad. Nobody should use this thing.
Definitely. This the first time I used puppet for provisioning, but it turned out alright.
Yeah, I would always try to make the tests 100% repeatable.
Thank you so much for your help, that's really helped me understand it all! All the best.
Thank you to everyone for their help, you're all incredibly helpful and friendly people!
If you want something a little more "random", just md5(uniqid()) . uniqid() is not as "random" as you need. uniqid(), to those who don't know, is simply a hexadecimal representation of ~~the current time in microseconds~~ unix time with microseconds concatenated on. So you get a 13-character result, but there will be long periods ~~periods for days/weeks/months~~ where the first perhaps 8 digits are not going to change. For example, microtime now may be 12345678ae7f3 and in a week it may be 12345678e9a4c ^\(these ^numbers ^are ^simply ^for ^example.) Notice that it's going to take a long time for those first 8 digits to change. So now you just have 5 bits of entropy in a system where the only returned characters are in base 16, and the numbers A through F account for over a third of the characters. As such, for each iteration there is about (after some quick math) 8.5% chance that you'll get a string of all numbers when using simply uniqid(). EDIT: So I made some assumptions (and we all know what assuming does) about how uniqid() really works. It ACTUALLY gets Unix time for the first 8 hex characters, then concatenates microseconds afterwards. As a result, I blocked out many parts above, but I left much of it for posterity. The exact numbers of entropy are not "correct" in a practical sense, but the theory is still correct that "There will be periods of time where uniqid will have a much higher or lower chance of returning a string that will contain just digits 0-9."
BREACH means the body of HTTPS responses no longer remain secure (private). For many people this is not a concern but for others it is a big deal.
&gt; I retired from the project back in 2009, but if I were to go back and re-build it, I'd offload the HTTP to Guzzle, Caching to Doctrine Cache, and do more modular packages to handle things like character encodings. Long term, the plan is to go exactly that. I'd like to wait on the PSRs to finally get put out though.
It returns a hexadecimal string. Hexadecimal strings can be decimal strings (in fact, *all* decimal strings are syntactically valid hexadecimal strings). I don't see what the shock was here? I also don't see why randomness was required? It seems like introducing non-determinism into a unit test would almost always be a bad idea. If you were just trying to make sure non-numeric strings were rejected by the validator, why not just hard code a few non-numeric strings? The real lesson might be to *not* use randomized data in your unit tests, or, if you do, at least make sure to understand *all* potential outputs.
&gt; There will be periods of time where uniqid will have a much higher or lower chance of returning a string that will contain just digits 0-9 That was what I found interesting, that it was working for months before it started failing, even though it's perfectly obvious now that I know how uniqid works. Anyway, it doesn't really matter how random the input is, I just wanted an easy way to get a randomized string. I assumed that it would make the tests more robust but clearly I was wrong in that assumption.
I always try to do things 100% right the first time, too. It doesn't always work out though.
Silex, Slim, Limonade.
yeah seems those 3 are usually in the top of recommendations, what are the perks of each one? which one you use the most?
Except it doesn't demonstrate an intrinsic failure of transport layer security so it's not "a big deal." BREACH will only harm you if you're already engaging in bad practices. HTTPS isn't a magic bullet. You can't just say "oh my URI scheme says https:// so I'm totally secure." That has never been the case ergo this is not something new. If you're writing insecure code that's vulnerable to XSS/CSRF/etc. you'll have problems. BREACH only exacerbates the problems for which you were already responsible. Basically BREACH is like saying ... **Newsflash: insecure code is insecure!**
I don't get it. What was the complaint? The link you posted just looks like a customer bought a product and then demanded a bunch of changes for free because it didn't suit their requirements. A refund was issued as a result. I must be missing something.
Ignoring the fact that nobody should be using threads in php, neither of these even trap/handle their own signals to allow for graceful shutdowns. At the very least they should trap SIGINT and allow threads/workers to finish their current job.
wat
Agreed, no experience with Stiva Soft but customer seems to have no idea what they are talking about. Sounded like a CMS hero.
That review is horrible. They know they're buying set code, and then expect people to implement features on top of it for free? And they expect because they do business one way with one vendor, they should automatically expect the same experience from every single other vendor they deal with? Self-entitled much...
I've been working with php for only about 4 months now. I come from a system administration background. Curl has been very useful to me in the past for figuring out problems right from the command line.
I can appreciate your point. It's just that I view this in similar terms to how every single PHP developer (basically) disables peer verification in their curl requests for encrypted resources. It's an awful security vulnerability but it's *self-inflicted*. MitM attacks for all! It's not a TLS failure, it's a developer failure and as such shouldn't be put on a pedestal and billed as "OMG TLS ISN'T SAFE!" ...
I just love that I understood every word you just said, starting to feel like a real programmer.
Maybe I mixed it up with something else, because I really didn't know Simplepie is still maintained, and the last time I used it was a bunch of years ago. I still think it would probably be overkill for my own small purposes, but, uhm, thanks for contributing to open source and no hard feelings, right? xD
The "join" and "create" a team links just link to the homepage...
I assume you mean handling incoming requests via a front controller, in which case you're going to have to do it via your server's rewrite engine. The following is an example of how to do this via an .htaccess file: RewriteEngine On RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] RewriteRule ^.*$ index.php [NC,L] You're then going to have to parse the URL to retrieve said parameters. For instance: $path = $_SERVER['REQUEST_URI']; $match = matchRoute($path); if (!empty($match)) { //do your stuff } function matchRoute($path) { var $routes = array( '/^\/(?P&lt;controller&gt;[^\/]+)?(?:\/(?P&lt;action&gt;[^\/]+)\/?)?$/' =&gt; array( 'controller' =&gt; 'index', 'action' =&gt; 'index' ) ), $matches; foreach ($routes as $route =&gt; $defaults) { if (preg_match($route, $path, $matches)) { $matches += $defaults; break; } } return $matches; }
You're never going to get $query or $user, because those are variables. You could pretty easily get them as _GET superglobal elements, though. What you want to do (assuming you're using Apache) is apache rewrites with mod_rewrite. Most commonly this is put in a .htaccess file and then you need to set the 'rules' to match the pattern. Something like this would do the job. Though I'm shithouse at regex, so this may actually summon something dark and ancient from beneath the sea. RewriteEngine On RewriteRule ^([^/]*)/([^/]*)\.html$ /?type=$1&amp;user=$2 [L] You'll then have $_GET['type'] and $_GET['user'].
In what way is it self-inflicted? 
hey Bro, Take it easy. it is a simple free code for beginners. and there are documentations and tests too. which templates suggest to one page script that purpose is to integrate in a cms script. finally would you please show me a single XSS hole. appreciate your review but it is very negative. 
I did that. Someone gave me a solution but another problem appeared. 
I develop in python most of the time but still need to hack on some php code occasionally. I'm running Ubuntu 12.04 on my laptop so still stuck with php 5.3. Also I just want to have some fun after looking at Google App engine php sdk which use the same approach to run php in their local development server.
This vulnerability is in no way self-inflicted though. Previous best practice didn't include "make sure to disable all compression", it was pretty much the opposite.
As you say "When writing certain things" - sure, like components, but we're feel like we're talking about general development here. TDD does not reduce the time it takes to build applications, it reduces the time it takes to build certain aspects and DRASTICALLY increases others. So in general, it averages out. Test first and save some time by making the API first and filling in the gaps - but then lose that time by testing shit you'll end up deleting before the version even ships, or test after and only test the stuff you're actually using. It all works out about the same in the end.
Sure, a whole custom application with no docs sounds awful (and I wouldn't pay that guy) but anything built entirely with a framework means you have the framework docs to fall back on - and as you say WP has this. I guess I have two points here: 1.) Having two applications that happen to share the same "framework", instead of simply building modules for the CMS that act like core, first-class citizens sounds awful. This is why PyroCMS works this way. 2.) If you have a framework in the core, it needs to be well thought out, not slapped together ad-hoc over a decade, relying on procedural functions and demanding that designers understand while loops. If you're making things with it then great. I'm not trying to convince anyone to stop using it, but anyone suggesting the core is a wonderful framework that people can use to build clean quality applications that any other developer can easily take over is high. Adversely, give me any CI/Fuel/Pyro/Kohana/Cake/Laravel/Flask/Sinatra/Rails/Django application and I'll probably know whats up extremely quickly.
I like the part where you claim it's stable over and over making people think the current extension is super unstable while it's being used in thousands of production environments.
Please re-read the post. One of the fundamental properties of SSL is completely lost (privacy). Yes, identity and authentication still work, but formerly secure code is now subject to snooping (but not tampering). The point of the post wasn't that this isn't a big deal (it is). It was that it isn't the *sky-is-falling* scale people have been making it out to be. So yes, it does demonstrate an intrinsic failure of transport layer security...
*session based attacks* would be self-inflicted (like CSRF, etc). But BREACH still kills all notion of privacy in a compressed response. Which is still a massive flaw for a lot of usages.
What I think he's talking about is the point that I make about session security (an attacker being able to impersonate the victim in requests). If you're not following best practice (by embedding the session id in the response, and not using nonce CSRF tokens), it's possible to do session level attacks (send forged requests)... But the privacy component is still screwed...
The [PHP Internals Book](http://www.phpinternalsbook.com/) is doing exactly that. I don't get the second part: &gt; if you want more community participation, not create an abstraction. The Phalcon team want more community participation in Phalcon and writing in Zephir is going to be easier than writing the usual C internals stuff, even if it IS documented. I don't have anything against their decision to use this approach, and I'm looking forward to playing with Zephir. It definitely can't hurt.
I'll be the first to say it: your naming convention is horrendous. Look at these for examples of how you should be naming your variables: * https://github.com/jsanc623/PHPBenchTime/blob/master/src/PHPBenchTime.php * https://github.com/jsanc623/PHPDataStructures/blob/master/Stack/stack.php * https://github.com/jsanc623/LazyLoader/blob/master/LazyLoader.php
When reading the title I already had my anwser ready; 'No, there is not', however, now that I see your example, I want to give a longer anwser. Having a file with utility functions that you require is fine, an alternative could be having a utility class where you put the methods instead. The idea, however, is that those functions don't really belong anywhere else. The example you give with 'logged()' is therefor not really a utility function, it seems to fit better as a method in a user class, that simply checks if the state of it's class is 'logged in' or not. OOP isn't too hard when you get used to it, but personally I found the first few steps very frustrating. Still, it does make for better and nicer applications so I would suggest you give it a try. If you feel like you're too far in to redo everything now, just try to group similar functions together in a file as if it were a class, just without the actual class.
What's stopping you from adding a repo and installing 5.4? https://launchpad.net/~ondrej/+archive/php5-oldstable (5.4) https://launchpad.net/~ondrej/+archive/php5 (5.5)
Thanks for all the work here on the sub. It's my go-to source for PHP news and related discussions, and I'm sure a lot of that is due to the efforts of you mods. So keep up the good work!
Can I ask, why did didn't you consider patching one of the existing implementations?
Long story short, I need to test all features of yrmcds, the server I developed before clients. Unfortunately, there is no client library that can test _every_ aspect of the binary protocol. Hence, I wrote this C client library: http://cybozu.github.io/libyrmcds/ It was natural and quick for me to wrap libyrmcds for PHP, hence this new extension.
&gt; it is a simple free code for beginners. And that's the problem. You know how experienced programmers are always saying the internet is flooded with bad PHP? They're looking at code like that. The review is *really negative* because the code is *really bad*. &gt;there are documentations and tests There is no inline documentation, and I sincerely doubt you even know what a test is.
regarding how to google this...the topic is called "routing". 
Its not Ideal, theres a concept called lazy loading, you all should read about. Especially you, midir.
Good answer.
VMs and *most* laptops don't mix that well and he is only using it occasionally 
The number of states aren't going to change anytime soon. I think it is a waste of query and I'd definitely put it in an array.
I know my names suck, that will be changed latter (find and replace), I want to complete it first.
Sweet. I'm working on a project that communicates with transmission and have hacked together my own client. Will be much nicer to use a dedicated and maintained library. Doesn't look like it supports magnet links yet. I might try and add that functionality in order to use it my project.
Seems rather pointless now that PHP ships with a local server, but still useful for those stuck on earlier versions.
VMs work just fine on laptops and generally aren't all that resource intensive (if you're using vagrant) due to the fact that they're not running a full GUI environment.
I'm actually really shocked this isn't a PEAR package. It would make a pretty good one.
You should just implement redis or memcache for something like this.
Wasn't there talk of adding Puerto Rico as the 51st? 
The information is available in libicu, which is made available by Symfony's Intl component. http://symfony.com/doc/current/components/intl.html#country-names I would recommend other people use libicu as well, as it is a well-known source for this information, and is the basis of internationalization and localization in PHP.
Brilliant! I can bring this into right away. Great library!
The phalcon developers have said that they are struggling to get more community contributions. I don't think the solution is creating an abstraction of PHP internals. It would be a useless skill that you can use in one place, better to have more resources about the PHP internals that would then benefit every PHP extension, not just one project. If you're going to learn to extend PHP, you may as well learn C, not a made up language for one purpose. HHVM may even make all of this unnecessary.
The SPL docs could be better, so we published a book: http://www.phparch.com/books/mastering-the-spl-library/ There is no standard Graph implementation, AFAIK, but this Stack Overflow query gets some good references to other implementations mentioned in the article: http://stackoverflow.com/questions/3102389/graph-theory-tutorial-in-php 
It's true, HHVM brings a lot of benefits, but your assertions that learning this language for "one project" is not correct. It's a standalone language that can be used to make extensions, one extension happens to be Phalcon. If somebody needs to build an extension and needs to learn a language, they can learn Zephir and build it to C, or they can learn C. I know which one is going to be easier to somebody who doesn't know either. 
I agree with the people who have stated it's just a preference. There are pros and cons. Something that would strongly influence me, however, is with respect to table joining. For example, if you have a table of states and abbreviations and each is given a respective primary key, then other tables could use this foreign key dependency for joining data. Maybe a user table that had a column called fk_StateID or something. Your ability to run complex queries becomes much more robust in this case. You could argue the array could simply inject IDs into the query string, but that would assume a consistency between the code and the table (and would probably be considered bad practice).
Nice thing!
It's been 15 days, WHERE THE HELL DID HE GO?!
Ah, nice. I haven't tried Transmission (daemon) yet, I use rtorrent for my Ubuntu and Arch-mirroring services. However, rtorrents xml-rpc really stinks when you have LOTS of releases seeding.
Phalcon is one project, what about the rest of the extensions that could equally use contributors? This is just a massive waste of resources and splits the ecosystem, if you really needed compiled speed, you could simply use existing tools to do the job other than a C extension such as a job server if you really felt that learning C was not possible. I'm not even advocating for HHVM at this point as they too will break the ecosystem, but from where it stands now, they bring far more benefits in doing so than negatives.
So the Phalcon team should document PHP Internals, instead of developing a language they would like to use, and open sourcing it in case anyone else would like to use it? I don't think you understand open-source. PHP internals should be documented better (and some of the core team are on it), but that is not the responsibility of the Phalcon team. If they want to build something they think is cool, they're allowed to. If they want to release it, they're allowed too. If people want to be excited about it, and post it to Reddit because they think it's cool, they're allowed to. Suggesting the Phalcon team should take time out of their day to go and document PHP Internals because it would "help the internet" is a nice idea, but it is nieve, unnecessary and unfair.
Did you try: RewriteBase / That's probably what you need unless you are using http://mysite.com/folder/ then it should be: RewriteBase /folder/ Which means that typically it should work OK without the RewriteBase, so the no post data issue might be that some kind of redirect is ocurring. Have you tried looking in the Chrome Network Panel and comparing that to what you see in the $_POST?
Phil, your trying to come from a holier-than-thou position, however you are taking words from my mouth. I never said they personally should document the internals nor that is their responsibility to do so, I said it's not the best way to go about getting community contributors by inventing a new language that one project uses. Your other tirades are just irrelevant to the topic we are discussing, not once did I say anything that is any way related to your 2nd or 3rd paragraph.
Well im trying to work out what your point is. By saying `I said it's not the best way to go about getting community contributors`, it's not the best way for who to get community contributors to where? I'm not holier than anyone, I just don't get how saying "More docs for internals would be more useful" - when that is completely outside of the Phalcon teams remit - is a relevant thing to say about this. They're doing something for them, and they like it, and so do others, and somehow thats bad or something? I don't get it... :(
Any reason why you don't use the rpc client bundled with `transmission-daemon`? Works pretty well for me.
Ah, it's starting to make more sense. So yeah, the site is the root which is why: RewriteBase / works. I don't really know what I'm looking at in the network tab because I've never had to use it before. It does look like there is a redirect though. I took the 404 error out earlier (I had my own 404 error in for if there was no post data) and I just realised that now that it's gone I shouldn't be seeing a new page when I submit the form. So would a redirect be caused by the htaccess file? 
Nice job, will be looking into it.
I've wanted to make my own as well, mostly because I didn't like certain aspects of the UI. The latest version was much improved, so I dropped it.
I actually like your design, I think it's a more intuitive layout. Nice job!
Vagrant just too slow to start up and also set up, compared to just `wget github.../phpdev.py; sudo apt-get install php5-cgi`. Not to mention I'd also did development on EC2 and it's not possible to install virtualbox there.
Have you pushed code? I agree the site is on the right track on design, but it still needs a lot of work. I like what you've done, especially with the improved heirarchy. But please contribute your changes!
I have a suggestion, is there anyway you can improve the contrast of the version information? I like that you brought it back over to the left for more prominence but I think having the faded gray it still would be missed. Missing this information I see as a common problem in the documentation and it needs to be more prominent. I would argue that it probably should be a little overbearing... I think the font color you have now is too underbearing :)
Wholly crap! exho "I owe you a" If(sex = female){ Echo "a Date!"; }else{ Echo "Beer!"; } 
Is it just me or the images aren't showing. Looks like your CDN is crapping out... http://imgur.com/Q2AWO9q 
Thanks!
Everything looks good on my end. The CDN is through akamai. However, I just pointed the CNAME record today, so maybe it hasn't propagated everywhere yet?
I don't disagree completely. I think the ideal would be for it to change based on the current version of PHP (or your preferred version). If it is completely unavailable in your current version of PHP, it would be red and have an extra note next to it, etc, etc.
you're pretty much skipping over all the benefits, but ok.
Very nice job. The existing language dropdown sort of hangs in its own space and is really quite prominent for something that a user will choose once, if ever. Would it be too much of a usability no-no to put that in the footer instead? Maybe guess based on IP address?
Thanks! I'm not sure how important the language dropdown is. I'm not familiar with any site usage stats at this point. I don't think it is terrible up there, but I'm sure there are a number of reasonable spots to put it.
Shouldn't you as a programmer throw an error if the PHP version is under 5.3 and also state PHP 5.3 is required in your documentation? More importantly, doesn't it make sense to test your code against the lowest common denominator of WP? Annoying, yes, but that's the requirement base you can't pass if you're writing WP plugins.
Unfortunately, no... https://github.com/WordPress/WordPress/blob/master/wp-includes/wp-db.php. But they won't be requiring PHP5.5+ for some time, so they are in no rush... &lt;/ wrong way to think&gt;
There's an aws vagrant provider
I had my do statement in the wrong place. One of the guys over in sql worked it out. Basically the same thing :) Thanks anyway 
good idea.. or I could make them a function :) 
In another thread, people complained about the larger size of the font and line height making it so they could display less information. I have a feeling they'd be even more unhappy with your changes. I, otoh, think they're great - more readable is more good. 
Well then...I'll take the lobster!
Looks good but why the big empty space on the right?
There are a number of approaches to this sort of thing, but it's not really just "a matter of opinion". There can be better approaches and worse ones. Nor is "Should I put it in the data in a database or in an array" really the question. The answer could (and imo should) be do both. Ultimately this sort of question is relatively meaningless without knowing a bit more complex. You have states with abbreviations, sure, but what are you doing with them? Are they users' addresses? Are you saving their addresses in a database? If you **are** saving them in a database, you're better off keeping some degree of connection between the data and the database. People love putting data in arrays, but you already have a place to keep data. That's what your database is for. You don't want to store either WI or Wisconsin. You want to store 24. Or whatever the ID of the state happens to be. Then you want to join in that table when you display their details. This is what's called "normalization". Storing these translations as an array means storing data as code. It means that just for state you have 50 lines of meaningless nonsense. 50 lines of cruft in your code that you have to scroll past while working, instead of packed away in a database where it's actually useful, and where it really belongs. Of course, you know there are more than 50 states, right? There are thousands. The USA isn't the only country in the world. Do you want to store state translations for every country when your boss decides to open an Australian branch, or your project expands to the UK? In an array in your code? If that's a bad idea in that case, it's probably a bad idea now too. With regard to things like Ave -&gt; Avenue, I would have to ask why you actually need to do it. This is actually an error fraught with more difficulty than you think. What is Ct? Court, of course. Or is it Circuit? There are far more road types than you think there are, I've seen lists of around 50, including Streets (as distinct from Street), Corner, etc. You need to make a careful choice with this kind of data whether you need to translate it at all, or whether you should just leave it as it's given. The fact is, using a database or using an array is not an either/or scenario like you seem to think. You can quite easily cache the result of that query, and for extremely long times. Having it permanently in the database, while only ever using a cached version, operated as an array, is entirely reasonable, the best of both worlds. You could set up query caching on the DB, use existing caching systems such as Redis or Memcache for this, or simply build a simple cache system to serialize the DB's response and write it to disk. We're talking... maybe 10 lines of code. **TL;DR Data should be in a database. Move it into one, cache the query. Win.**
Your suggestion that a key:value pair caching system is good for caching key value pairs is apparently not welcomed by Reddit. Shame on you.
OK, a few things that probably won't be welcomed, but hey... Don't use mysql_query. It's deprecated. Which isn't actually a problem in itself but it's deprecated *for a reason*. If you're just learning, please use PDO. It's not only safer, more secure, vendor agnostic and more readable, but it's actually easier. You're doing a few things wrong here, which make seeing the actual mistake harder. $sql = 'SELECT * FROM posts'; foreach ($conn-&gt;query($sql) as $row) { ?&gt; &lt;article&gt; &lt;h2&gt;&lt;?php echo $row['post_title']?&gt;&lt;/h2&gt; &lt;p&gt;&lt;?php echo $row['post_description']?&gt;&lt;/p&gt; &lt;p&gt;&lt;?php echo $row['post_etc']?&gt;&lt;/p&gt; &lt;/article&gt; &lt;?php } ?&gt; The above is much cleaner, doesn't require specific database, and doesn't use slightly confusing syntax like do-while. Seriously. Never use do-while. It's weird and stupid. Regardless I should point out that the above is still not great. An important part of good softwaring is the principle of *separation of concerns*. The notion that you should keep bits that do different things separate is a fundamental of good design, and one that's well worth your time. See how your HTML and your PHP are all bundled up? That's a bad thing. You would do better to split that stuff up. Have your database queries and your code in different places. This is something I would strongly recommend doing, starting in a direction that will undoubtedly benefit you in future. You don't need to immediately install an MVC framework... but something like this would help. function getPosts(){ $sql = 'SELECT * FROM posts'; return $conn-&gt;query($sql); } This is the first step to an approach that would put functions like this in a different file, then in a Posts class, with your HTML in a template. Then ideally in a framework. 
Thanks. Will take it on board. Your help is very much appreciated 
where to see new php.net new design?
The part we actually need to read is a smaller font size, which in my not very old eyes seems to destroy the entire purpose of redesigning it in the first place.
That makes more sense. Was surprised to see a post by you that looked like it was saying security isn't important!
Yes, it was clearly stated that it used php 5.3 and should not be installed without php 5.3. There are, however, many WP users who don't know what php version they are on, and users who just don't accept an error telling them they can't use it. I just keep 5.3 features out if the plug ins now, at least the public ones. For private plugins I go all out with composer, packagist etc. 
go to php.net, click on the "my php.net" link in the top right, scroll down to the bottom of the page. There's a dropdown there to enable the beta layout.
I can't tell if you're joking, but "the balance between positive (or non-white) and the use of negative spaces is key to aesthetic composition" Read more on Wikipedia: http://en.wikipedia.org/wiki/White_space_(visual_arts)
Thanks. Just started talking to them today. Hopefully we'll be able to get some of it implemented in the new redesign that's in progress.
That's fair. I wouldn't mind increasing the body font size, actually.
I'm using the language selector fairly often. Due to my Google settings, I often end up on the German PHP site (my native language), but sometimes, the English documentation of some function is more thorough, so I'll switch. 
I always recommend putting off chef/puppet to people new to Vagrant because learning how to administrate a linux server with plain shell access is just so damn useful.
Wow, this is great! Can you create a Gist of the CSS? That way I can use it in Chrome using the [Stylish](https://chrome.google.com/webstore/detail/stylish/fjnbnpbmkenffdnngjfgmeleoegfcffe/) plugin.
Looks like they added a link to the top of every page now too.
I like the new layout, much cleaner and easier to read, well done. I still feel the colours are really washed out and dull/boring though which isn't really your fault, it carried over from the new beta version. Perhaps they could be a bit more lively I don't know.
So ... for example *memcached write array:* * serialize data to string * copy serial to storage *apc write array:* * copy array to storage *memcached read array:* * copy serial from store * unserialize for return *apc read array:* * copy array for return memcached (and others) have to either use a type native to themselves or serial strings to represent arrays, so they have to do more legwork when reading or writing the cache, APC doesn't have to do that, APC is able to bitwise copy arrays - that's a direct copy of the hashtable, bucket by bucket ... About objects, APC cannot bitwise copy an object, (un)serialize is called for objects and it has to do the same legwork as everything else. This is obviously less than optimal, it is always better to write an array (which can in turn construct an object) than an object ...
I agree that serialization has *some* overhead but for most production applications calls to `un/serialize()` won't even make up 1% of total response time. &gt; About objects, APC cannot bitwise copy an object, (un)serialize is called for objects and it has to do the same legwork as everything else. This is obviously less than optimal, it is always better to write an array (which can in turn construct an object) than an object ... Using an array to construct an object (versus directly unserializing it from a string) seems much more expensive (and *weird*), though I'd love to be proven wrong via some benchmark.
Another problem people often seem to forget is that APC and company provide local cache. memcache is more generally setup on it's own server. That means the connection to memcache requires a remote call, and that can impact performance as well. From these 4, the slowest to fastest: Database &gt; Remote Cache &gt; Local Cache &gt; Cached in PHP That doesn't always mean you want to put stuff in local cache unless it's actually local to the system you are on. It's just important to be aware of the differences as it can have a big impact.
It's data. It should be in a database, and then cached. Also, there is more than one country. 
&gt; Another problem people often seem to forget is that APC and company provide local cache. memcache is more generally setup on it's own server. That means the connection to memcache requires a remote call, and that can impact performance as well. You really cannot compare a DB/remove cache to APC. APC is not a replacement for a remote cache, since the only thing you can put in APC are items that don't need to be synced across multiple servers. You should never built you application in such a way where you are caching DB data in APC, since it means you cannot scale out to more than one server.
One thing to note, is that because APCu is backwards compatible with APC, and because there is a lot of code out there that checks whether APC is available via extension_loaded(..) rather than being configurable whether to use APC or not, the decision was made to keep returning true for extension_loaded('APC') when you're actually using APCu. e.g. if (extension_loaded('APC')){ echo "APC is loaded"; }; if (extension_loaded('APCu')){ echo "APCU is loaded"; }; Will output "APC is loaded APCU is loaded" for any PHP instance that has APCu installed. This is possibly "the wrong thing, for the right reasons" and may be annoying in future years, but it means that it's possible to move legacy code bases to be using APCu without having to change any code.
You can build without compatibility enabled, in which case, no apc module entry is created and you no longer have apc_* functions but apcu_* functions ...
that's an interesting way of doing it; although, in some instances that may be 'too global'. I usually use `SetEnv` in my vhost config. This way, I can use different environment vars for each of my projects. You're a Magento developer so you probably recognize this: $mageRunCode = isset($_SERVER['MAGE_RUN_CODE']) ? $_SERVER['MAGE_RUN_CODE'] : ''; In my vhost for "dev.project.local" I have: `SetEnv MAGE_RUN_CODE dev`
I created a [UserStyle based on his design](http://userstyles.org/styles/91673/better-php-docs?r=1376148845). I've only tested it on a handful of docs pages in Firefox, but I think it should work everywhere.
Out of your choices I would learn Symphony, Zend is a bit heavy for CI level projects, CakePHP is nice but just feels a bit slow, Symphony is nice middle ground.
Someone tell me, when it comes to scale is PHP performance all that important?, I deal with quite a large database of imported books and the only bottlenecks are with the database. Our database is driven by a dedicated server with Xeon dedicated server with 6 SAS drives, but the web server is just a cheap VPS. In my experience the language speed is the least of your issues. 
Sure, but during a request lifecycle with thousands of method calls this will be insignificant. In fact, I have *never* seen a PHP internal function to be the bottleneck during profiling; on the contrary most of them turn out to be either network or I/O related.
I would recommend Laravel. I find it very easy to work with. http://laravel.com/
It always depends on your software/business. If it is heavily database driven, sure you will need a scalable db architecture. But if you additionally need to do post db processing (bbcodes, HTML gen, i18n, l10n, other dynamic foo) you will need to start optimizing php itself by memory caching (where applicable) or even writing Algos out into php c extensions. If you have never seen php internal functions being the bottleneck then lucky you, you never had to deal with such problems. And no 6 sas drives as db server is nothing. I worked with 50+ sas drives (upgraded to ssd last year) and I consider it still a 0.1% challenge compared to other Alexa top 100 websites.
Yes yes yes yes yes yes. Thank you.
Its actually right in the manual http://symfony.com/doc/current/book/service_container.html#referencing-injecting-services What you need is in your userprovider add "Controller $controller" to your construct, and then instead of $this use $controller-&gt;getDoctrine()
Because Code Igniter appears to be a dead-end as far as I can see and now seems to be the best time to look at other options.
&gt; Sure, but during a request lifecycle with thousands of method calls this will be insignificant. That's not necessarily so ... old APC by default used mutex to protect the SMA and cache, this inherently means that every single request that just attempts to read the cache will acquire the mutex, causing other contexts to wait on the same call to acquire it ... this clearly has an impact on every single request ... APC has always been equipped (but for some crazy reason not configured) to use rwlocks, which allow multiple readers and only acquire an exclusive lock upon writing the cache (or alloc from sma actually), this is much faster for applications that are heavy read and not so heavy write ... Again, theory, in practice it all depends on not just your application but your whole stack ...
&gt;*apc write array:* &gt; &gt; * copy array to storage Shouldn't that be *copy on write*, given the same optimisation is pervasive throughout the rest of the language?
shared nothing ...
Please don't put everything in a database which is "data". If you have a big site, and you have to change some table, you'll have to go to a maintenance mode. That means shutting down the site. Which is very costly for a lot of sites. So don't blindly put anything in a database because it looks "cleaner" to you. Think about other factors than cleanliness. And btw, your argument with the states is entirely pointless, because if you organize your config file right (that's what it should be, a config file), you don't have this problem.
Just to clarify, there is [Symphony](http://www.getsymphony.com) which is a CMS and there is [Symfony](http://www.symfony.com) which is a framework, both are PHP.
PHPMyAdmin shouldn't be all too necessary for this to be honest. Use migrations to setup databases and tables as necessary. Not sure you would have a good reason for PHPMyAdmin but depends on your use case. I'm simply speaking from mine where I have it to visually look through data quickly but not manage or create tables, etc. 
I think you're doing in wrong at all. You are fixing the database connection from a much higher abstraction level code. I guess the most right way is to make a fixed Doctrine MySQL PDO driver overriding "connect" function to make an ssh port forwarding. Then just use this driver in your config. Another easy way is to sustain a persistent SSH connection. Daemonize your ssh command with something like http://supervisord.org/ and use a regular doctrine connection.
&gt;you should have access to $this-&gt;container pretty much everywhere That's what I thought but that's not the case inside the UserProvider. So far the only thing I've got working was what I described. &gt;raw SQL I'm not controlling this database at all. I'm only pulling the user information, everything else regarding the database is controlled from a completely different application which I don't control and which isn't even php. Ideally I would access it via a web service, which is not an option.
&gt;http://supervisord.org/ I'll definitely look into this one, didn't know about it. &gt; I guess the most right way is to make a fixed Doctrine MySQL PDO driver overriding "connect" function How would I go about doing this. (Btw. it's postgres, though it probably doesn't matter).
This works, if I put the ssh tunnel before I assign $connection. A question: Where does the "remote_connection" in id="doctrine.dbal.remote_connection" come from, how could I have figured out what to call it? More generally eugene-d suggests overriding the driver to include the ssh-tunnel code - if understand him/her correctly, which seems to be a sound idea.
I did go through that page several times and tried this but never got it to work.
I can't wait for Yii 2 to be stable. I haven't tried the beta yet but I love Yii, it's very practical and does its purpose (speeding up development, making writing secure apps easy) very well, I just find the conventions a bit... old fashioned.
Hmmmn, I was going to say that it looks like a good resource since it's free, and because the author apparently receives and implements any corrections submitted. And it does appear to get updated, however the current version is actually fairly out of date (based on 5.2). 5.2 is obsolete and no longer supported. Even 5.3 is now at the end of its support life (as per php.net). I would suggest if you're starting out, get something that is PHP 5.4-centric (I'd recommend 5.5 but being that it's less than 2 months old at this point, you'll probably have a hard time finding much). It may be a good primer, however, as there aren't substantial differences in the overall structure and techniques of coding PHP between 5.2 and 5.5, but just keep in mind that on its own, it will be lacking the new features introduced in the past 3 versions, so you'll want to read up on those as well (although also keep in mind, if you're not running your own servers, there's a very good chance you'll be stuck coding for an out-of-date version anyway, I'm currently stuck with 5.3, even though there are a few functions from 5.4 and 5.5 that I *really* want to be able to use :( )
good, sensible changes for the most part. I could actually live with your version. two things I would change: -left-align the top nav with the main content area -right-align the search/select with the content area as well
&gt; this makes it hungrier for RAM than APC in most setups, but who really cares about that Me!
Yep. Very much. Though I find static analysis generally fails to detect "this is just shit" code smells, routinely used anti-patterns, etc. If you do this put me down as a beta tester and/or contributor. Any tools that encourage or force the improvement of PHP should be welcomed. 
There are many reasons why you'll probably want states stored in a structured fashion (database table or other). For example, for ecommerce, the sales tax varies by state. For other types of sites there will be similar issues. Some things can't be sold in certain states or require various types of disclaimers, for example.
I actively avoid books which put "PHP" in the title unless they're dealing with PHP at the PHP source level. There are often more mature texts on the subject of programming and design which are better than these. &gt;makes six digits at the age of 24 Don't use income as a measure of someone's ability. Uwe Boll makes a lot of money, but his movies are beyond horrible.
Then you can certainly use it and write as you would with PHP MVC frameworks. You just won't be taking full advantage of Laravel if you manually handle table creation in PHPMyAdmin. Good luck though! I highly recommend reading a Laravel book. Helps a ton in learning over just the documentation. 
Why do you have to go into maintenance mode to change a few tables? Run a query. Update. Done. Then just delete the cache and everyone gets the new structure. I'm not talking about "cleaner" for the sake of "cleaner". I'm talking about maintainability, manageability and expandability. Things that we need to care about as professionals. And what states exist in a country is not "config".
My company is working on an introductory PHP book, but I'm not sure when it'll be out (my hope is soon). It will be up to date, at least. Until then, the most solid introductory one I've found is [Luke Welling and Laura Thomson's book](http://www.amazon.com/PHP-MySQL-Web-Development-Edition/dp/0672329166). It, too, is a bit long in the tooth now, but it's pretty solid. They are working on a new edition, apparently, which I'll recommend until my wallet says to trash it in favor of ours. ;) For free resources, as always, I'll plug [PHP the Right Way](http://www.phptherightway.com) which really does cover up-to-date practices for developing with PHP and also covers lots of PHP 5.4 and 5.5 stuff.
&gt; Why do you have to go into maintenance mode to change a few tables? Run a query. Update. Done. Then just delete the cache and everyone gets the new structure. Ever done that on websites with extremely high load? It ain't that easy. A state table is, to be fair, small enough that the alter statement shouldn't affect a lot. &gt; I'm talking about maintainability, manageability and expandability. Things that we need to care about as professionals. The only "plus" a database gives you is that somebody could edit the states in the frontend. Otherwise there is none. The config file solution is even more maintainable, because you just have to update your state file on the server, and you're done. If you change the way states are stored, it's more maintainable too. You just push your refactoring to live -&gt; done. No database changes, no maintenance, no nothing. It's maintainable, manageable, pragmatic and fast.
The attitude of the people who rely on it to get their job done, and yet dedicate their spare time to slagging it off ...
I don't really use php anymore, but when I did it was always inconsistent function names (strip_tags vs stripslashes), and inconsistent argument order in functions (strstr vs str_replace)
"pluscss" is a blogspam account.
I LOVE PHP!
Yeah I think this is the third or fourth one I've seen in the past 2 weeks. I mean, yeah, we get it, some people don't like some of the things about PHP. Either get over it, or switch to whatever language you think is so vastly superior to PHP and stop trying to get a gripe-fest going. DAE HATE _____ ABOUT PHP?
My small annoyances are * Not being on version 5.5 :( * Having to type &lt;?php at the start of every file * Composer taking so much time and memory ... Can't think of anything else
The design of the library (or absolute lack of) and all the old horrible code written in it
If you're after something that's high performance, don't use a framework.
&gt; Shouldn't that be copy on write No. Imagine you want to backup a folder, you won't copy a shortcut but the whole folder instead. &gt; same optimisation is pervasive throughout the rest of the language Language doesn't matter since the data is saved to more or less external storage
Good to hear. I'm going to take a closer look into this. I'll let you know.
m8 I would get all of that stuff into a class. OOP is the way to go.
This advice about not using a framework if you're after performance is a terrible idea. I've created an entire web game using entirely procedural PHP. I basically have 1 php file with about 700kb of functions like: get_player_name() get_player_units() get_building_cost()... blah blah. Right now I'm recoding the entire thing from scratch as I have a bug that I just can't trace. When you send units to raid, they come back and just die randomly. It's fairly quick without any sort of caching or so, but that's not the point, that's optimisation too early. Right now I'm using ZF2/Doctrine with metadata for defining my ORM entities and that's pretty slow.... about 400ms a page throughout development. BUT! I turn on query, metadata, result caching for Doctrine, classmaps for autoloading my classes and OpCache for caching into OpCode. Now every page is more like 50ms and you seriously cannot tell the difference in terms of speed (extremely easy feat using the framework as you just turn on adapters). Hell, it's going to be even quicker in the long run, because I don't know how the hell I'm going to implement caching in the procedural version. URL btw of the current procedural version: http://www.konoro.org
&gt; Unrelated question, but have you ever run into a user cache issue that causes Apache threads to deadlock? Recently we had started using APC user cache for Symfony as it improved performance greatly and we run a very busy website. Unfortunately we started seeing issues with php deadlocking Apache, resulting in us having to write a ghetto hack to reboot Apache whenever our load balancer detected Apache was no longer responding. &gt; Do you actually mean threads ?? Have you posted/can you post an issue on git ?
You'll get over it ... 
He *sorta* said that, but not really. &gt; That doesn't always mean you want to put stuff in local cache unless it's actually local to the system you are on. 
Nope, its the same thing.
Google itself provides a library for that.. so don't know what your target is.
&gt; APC is not a replacement for a remote cache vs &gt;That doesn't always mean you want to put stuff in local cache unless it's actually local to the system you are on. Nope. Different.
So you're saying namespaces/traits/auto loading don't change your overall structure/technique? There's a huge difference between 5.2 and 5.4 coding... Look at Codeigniter then Symfony2. I mean shit :/ OP: Find a book on PHP 5.4 - That's the most significant changing version, PHP5 has minor new features, mostly syntax and things that affect zend engine. Once you've properly learned PHP 5.4 / OOP then you can look at procedural and wordpress, since a lot of money is in Wordpress
jasonlotito is saying APC is always a local server, which stores data local to that machine, whereas a remote cache is a little slower but stores shared cache information. You are saying APC and remote caches are not comparable because APC stores data local to that machine, whereas a remote cache stores shared cache information. Other than you not pointing out the speed difference between local and remote (obviously a network call is going to add overhead) you guys are saying the exact same thing.
**Lightweight** - Small memory footprint. **High Performance** - Fast execution time.
Yes the Google Calendar API is good in its own right but we wanted to use the caldav format so that our application could allow clients to connect to any caldav server that they required, be it a third part like Google or even our own caldav server.
[This is a good read](https://igor.io/2012/11/09/scaling-silex.html) on growing a silex application. The last section is relevant to your question. "High Performance" is pretty self-explanatory: the framework performs well under load and scales up. High performance could also be related to development timelines: it lets you get things done. "Lightweight" is more interesting. To me that means the framework makes less choices for you -- the design of the application is up to you. There are no firm conventions to follow. There's less writing configuration and more writing code. A "lightweight" framework provides you with the bare minimum and leaves the rest up to you.
krakjoe said that, then jasonlotito furthered that point by explaining why. Then you agreed with him, by disagreeing with him, even though you are both agreeing...
You guys already have a great looking product, so it's great to see you're looking into adding other languages. Any idea of when you expect to release a beta? I'm sending that email now.
You didn't say anything I wasn't aware of, or disagreed with. Nor did you say anything to contradict what I said. My comment was actually in line with what you said: all too often people use APC to do local cache, and assume that memcache speeds are the same. They are not, precisely because of the issue that both you and I mention. &gt; You should never built you application in such a way where you are caching DB data in APC, since it means you cannot scale out to more than one server. That's what my statement implies, though I didn't spell it out. Trust me, I know more about memcache, DB, and APC timings then you'd believe. Where I work, memcache calls are a bottleneck we are working to eliminate.
Hi! I wrote this: https://github.com/fruux/sabre-dav It comes with a generic DAV client, and I use it as well to integrate with both google's card- and caldav server. However, it only does a few things, such as quickly constructing PROPFIND requests and parsing multistatus responses. You will still have to do a lot of the heavy lifting yourself, but it may help you on your way a bit, including OAuth2 authentication. If you'd want to use it, I'd recommend running off the master branch, as it has a few improvements that make it easier to integrate oauth. Most importantly: event hooks that you can use to inject arbitrary HTTP headers for each request and the ability to catch a 401 in case the OAuth2 Bearer token needs to be refreshed. If you need it, I'd be happy to help you on your way a bit through the [mailing list](http://groups.google.com/group/sabredav-discuss).
They mean "please please please use our stuff."
There are MASSIVE differences between how you code in 5.2 and 5.5. If you aren't coding differently: you should be.
As far as the PHP tags, how would you define where PHP should start parsing or would you parse every file?
Great! Thanks a lot for your help. I will definitely take a look and get in touch if necessary. I am new to caldav so probably have a bit of a learning curve to overcome. I just need to work out if in the short term the extra effort is worth it compared to just using the standard Google Calendar API (at least for now to get some Google Cal integration)..
I agree with both points.
Can you elaborate on slagging it off? If you think I am bashing PHP, it isn't meant to. It's my primary language of 11 years.
Why was this downvoted? It's a good example on why you should avoid writing your own stuff from scratch and is from actual experience.
I know this is the PHP sub, but you really might be trying to fit a circle into a square here. No language is One-Size-Fits-All, and if you find that your language of choice can't handle (gracefully) what you want to do, maybe another will. I use PHP all the time, but I also use ruby, C#, java, and javascript (node and backbone) where it's appropriate. PHP has never handled multi-anything well, and that's fine; you went over the reason for that in your post. So why try to hammer a non-ideal solution into it? 
There are some [good examples of that](http://arstechnica.com/business/2011/12/facebook-looks-to-fix-php-performance-with-hiphop-virtual-machine/), however. 
This is a really big misconception, there are several PHP frameworks that beat popular frameworks in other languages, IE: Phalcon, even Codeigniter can hold its own vs Django and RoR. Of course there are in synthetic benchmarks, but so long as you keep PHPs memory usage down (which is its own topic) PHP handles large web loads relatively well. 
Personally I would like .php files to be pure php, and something like phtml or phpt (PHP template) which allows &lt;?php ?&gt;
With no doubt: http://xdebug.org/
Too often this is the definition of lightweight: Code has been condensed to the point that its unreadable by humans. All comments and structure have been stripped.
Second that! With this you can literally `debug` your code by walking through it line by line. Debugging code which misbehaves is much easier to debug IMO with XDebug compared to inserting an echo statement or some other logging statement after suspicious lines of code.
Most logging libraries let you log at different levels. Common levels are debug, info, warning, error, critical. During development you'd allow every level, but in production you'd only let levels "warning" and higher get through and actually write to the log file. Have a look at [Monolog](https://github.com/Seldaek/monolog).
Phalcon really can't be lumped in with other PHP frameworks, since it's compiled.
Actually, it's not usually about misbehaving code as much as following the path of what methods are being called given different parameters :) 
I'm ok with you analogy until the C &gt; Assembly one. When building a large app, you better off let the compiler do the optimization than try to do it by yourself using assembly. But anyway, that's not the point of the thread.
 I beg to differ, pthreads seems to be very good at handling multi threading, as said by the author of the extension, if you don't know how the php internals (or any other language) works you should not try to comment on them. Source: [Post by the author of pthreads](http://www.reddit.com/r/PHP/comments/1jo517/multithreading_in_php_with_pthreads/), [Pthreads site](http://pthreads.org/).
Fair enough, I should've used a more clear formulation instead of using 'misbehaving' :)
I agree -- pthreads is great. I'm working on a threaded version utilizing pthreads (as opposed to the heavier processes I'm using now). I'm just personally not crazy about threading in general because of some of the design tradeoffs and complexity it enforces.
Indeed, by nature most web apps don't need multi threading, and you can easily use queues for stuff like sending mails or compress images and the like. 
Another solution (especially if you don't have access to PHP 5.4+ in production) is to use RabbitMQ or something similar (as long as there are libraries that let you do RPC calls). I'll be sure to check out AMP for some future projects though. 
I would say that they add to your overall structure/technique, but they don't change it. If you learned to code in PHP 5.2 or 5.3, it's not like if you switch to PHP 5.4 your code is going to suddenly all fall apart and stop working.
Meh, to each their own.
Your personal reason is always the best reason.
&gt; "High-performance" is not something I would trust ever in the context of a PHP framework. You should check out the [Phalcon Framework](http://www.phalconphp.com/en/), it's written entirely in C and it's loaded as an extension.
One requires JavaScript to be enabled, and one doesn't. . .
Personally I would choose the first method. However I've grown to like hopping out of php to write legit html, without echoing. My ide auto formats that way, but when echoing it looks all funky 
Define better. One means you process your data on the server, one means you process your data in the client. If `better` means "easier to manage", that depends on your server-side setup versus how you're doing things client side. If `better` means "quicker", do you mean server-side speed or client-side speed?
&gt; Node.js became popular and we immediately got the standard wave of PHP knockoffs. But these libraries didn't realize that PHP simply isn't javascript; You're talking ReactPHP right? If so, you're talking out of your ass. JavaScript is not magical. NodeJS wraps around the exact same libraries that ReactPHP wrap around. You're acting like NodeJS invented event-based programming... **Update:** You're actually using libevent for this library. That is fucking hilarious! You can add yourself to the list of "standard wave of PHP knockoffs", because you are using the exact same tool that NodeJS and ReactPHP are using.
&gt; Unfortunately [gearman is] totally useless in the event-driven arena because you can't actually use gearman to return results asynchronously Unless you actually utilize event-driven programming and allow those gearman processes to fire off an action when they are complete.
This is the preferred method. Closing PHP and using straight blocks of HTML is faster than using echo. Also, using JavaScript to do what PHP could do easily is worse for reasons of compatability and user experience.
Didn't really answer my question
Didn't really answer my question
Good point, but in all seriousness not having JS enabled is not very common nowadays i presume.
Better as in "this is the most correct way to do things because of x y z"
Very good point!
Sorry, ide auto? /u/philsturgeon did mention reusability, it's a pretty good point!
Depends on how the data in question is meant to be consumed. REST clients often don't have JavaScript support.
Alright... So in your code, instead of dbg() you have log('debug', 'message'), log('info', 'message'), log('error', 'message') etc. When you move to production you simply set your logger to disable debug/info logs but keep logging the rest of the stuff. If something starts acting up you can temporarily switch it back to logging everything.
I have a 100-line shell script that I can run to install and configure everything I want. It's basically the same as a puppet/chef script, but while writing it I learned a lot about how to modify configuration files automatically and how to write bash scripts - which means there's a lot of other stuff that I can also automate. Maybe if you're setting up multiple different VMs each week with different OSes and different server setups, but I'd still prefer writing my own stuff over just grabbing something random over the internet. There is of course also the option of creating your own vagrant box when you've got everything set up the way you want, saving additional time.
I'm not talking about ReactPHP -- @igorw is doing fine work. And I'm not pointing the finger at any specific project. I'm suggesting PHP can do better than rewriting all of its functionality to be non-blocking. Incidentally, if you had bothered to read the code you'd see that libevent is an *optional* dependency. Further, had you bothered to benchmark anything you would have seen that the native functionality outperforms the libevent version in this use case. Javascript isn't magical and node *certainly* isn't magical. No one suggested anything of the sort (well, you kind of brought it up). Alas, if only the [DBAD license](http://www.dbad-license.org/) extended to code review and/or interpersonal communications ... **Update:** I'm not saying, "use this instead of these other evented tools," I'm saying, "here's an easy way to get real asynchronous call *results* without having to make everything non-blocking."
I'd be thrilled and more than happy to admit the error of my ways if you could point me to a link or indeed any sample code demonstrating the asynchronous return result of a function via Gearman in a PHP script. No, go ahead. I'll wait. What you're suggesting is saying that gearman knows how to cook a pizza because it can *drive to Pizza Hut and buy carry out.*
Have you read the PHP documentation for [GearmanClient::doBackground](http://www.php.net/manual/en/gearmanclient.dobackground.php) ?
And also: [GearmanTask::data](http://www.php.net/manual/en/gearmantask.data.php)?
I see that you are using [proc_open](http://www.php.net/manual/en/function.proc-open.php) to access code from python for an example. How can that possibly be faster than writing up a worker in python, and client in PHP using Gearman? I know you said that benchmarks are pointless, but most of us are using job queues, and distributed multiprocessing to gain some performance and speed.
It may be an extension, but you still use it through Php, so the comparison is still very relevant. 
&gt; // PHP will not raise an error here even though this should be '\Exception' or &gt; // 'use Exception' at the top, but this catch block will never get invoked. PHP shouldn't be raising an error either. The reason being that it is looking for Foo\Exception, not \Exception, and it won't actually load the class definition until an instance of it has been requested. Having it raise an error wouldn't make much sense because the autoloader lazy-loads the classes at runtime. &gt;Why the silly name? Was the github repo suggestion, and seemed to fit. Probably an Archer reference. 
REST? Sorry, i'm fairly new.
I agree it would be expensive to do this checking at runtime, but in a static pass its an easy one to pick up.
People are right about **lightweight**. It means it doesn't do much and you can DIY/drop in whatever you want. **High Performance** is generally a way of distracting you from the fact that framework is fucking gigantic. 
IDE stands for integrated development environment. The one I use is Netbeans. If you press Alt+Shift+F, Netbeans autoformats your code. If you echo out html tags instead of hopping out of php to write straight html, netbeans will format the echos, and not the html. Hopping out will allow your logic to be formatted as well as your html.
Although with other frameworks to compare against, these are both quantifiable.
I read that it's optional, that doesn't make any difference. If you had bothered to do any benchmarks instead of saying they were entirely pointless, maybe people would react differently? &gt; Javascript isn't magical and node certainly isn't magical. No one suggested anything of the sort What exactly were you implying then with the statement "But these libraries didn't realize that PHP simply isn't javascript;"? What is the difference in this regard? You know your stuff, clearly, but your post reeked of hyperbole. You're excited to have released some code, but you made some weird points in the process.
Okay, I glanced at the code a bit. You're using nikic's PHPParser to produce an AST, in which I assume you're checking for class references? That, coupled with using the project's autoloader would indeed cover most cases (the exception being dynamically constructed references). Okay, you're starting to pique my interest. It might not be as useful for me as an individual developer, as my IDE does those checks for me, but the Jarvis CI integration would certainly make it useful for open-source projects to validate pull requests. 
&gt; What if you have multiple VM's that were all deployed using your shell script, and then you wanted to change a package for all nodes? This is easy with Chef/Puppet; does your method support this? No, but my VMs aren't actual servers being used in production so I don't really worry about this. If I change a line or two in my install script and re-run it it will usually take less than 30 seconds unless a lot of other stuff has new versions available as well - and there are checks in place to make sure configs aren't overwritten etc. &gt; That is an absolutely terrible mindset for a developer. Do you write all your own libraries from scratch too? Actually I spent several years writing stuff from scratch before moving on to frameworks and abstraction layers, and I'm happy I did. Like I said: &gt; I always recommend putting off chef/puppet to *people new to Vagrant* because learning how to administrate a linux server with plain shell access is just so damn useful. If you're already feeling experienced and know how to configure a linux box then you're in a position to know when provisioning scripts come in handy and when you don't need them.
Quantifiable, but arguably useless if it's the only factor in the comparison. 
Busy-waiting for results is *never* a good idea. AMP's API allows your PHP thread to sleep until it receives data, rather than using processor time to do: "Is it ready yet? Is it ready yet? Is it ready yet?" when your processor could be doing something more useful, like serving other requests or actually performing the task you told it to.
why are you so angry?
How do you set these environment variables on CentOS. The envvars file doesn't exist.
Thanks for the links. It looks like my initial research on this topic wasn't as thorough as it should have been. I think it only makes sense not to reinvent the wheel considering these options plus the information about Code Climate expanding to other languages in the future.
Makes perfect sense. And I found the function in PHP's implementation of Gearman that allows you to do this - [GearmanClient::runTasks](http://www.php.net/manual/en/gearmanclient.runtasks.php). I'd just assumed that you had linked to the actual best practice method of doing things.
What IDE is that?
Definitely useless if it's your only basis of comparison :)
Your update works for the .htaccess version, but I can't seem to access the envirornment variable via PHP. Any ideas?
**lightweight** -- We don't have that many features, because we're scared if we add features we'd be called "bloated" even though said features don't effect runtime performance when not used. **High Performance** -- We've somehow surpassed all the bottlenecks outside of PHP that matters in a real webapp that usually make PHP's performance negligible anyway. :P
Have you tried: define('DEV', stristr(getenv('OPTIONS'), '-D dev') !== false); If the above works please let me know so I can update my blog.
Nope, that doesn't work. It seems getenv('OPTIONS') doesn't return anything. $_ENV and $_SERVER don't see the options either.
I just found a workaround to get it to work on CentOS. Please see my blog again, I added another bit which contains the workaround. For some reason CentOS doesn't see it as an environment variable. So we use an IfDefine block in the .htaccess to set the environment variable. I made it the same as it would be on apache to have as few differences as possible. I understand it's not ideal.
PhpStorm. I'm woking with PhpStorm and type-hint everything. I immediately see when a type is wrong (exception, parameter, method return, local variable, …).
Have you searched for BCC ? (Blind carbon copy)
If you want the to to show the actual email address sent, then no, you'll have to loop. If you're okay with it being blank or a placeholder to, you can specify them as Bcc, which i believe normally sends (but don't quote me on that). 
I believe when you have your "SetEnv" in your vhost you should be able to retrieve it in your htaccess file or what do you mean ? For me it is a downside that the SetEnv variable is not available when I execute a script as CLI or by a cronjob using CLI
Whose IDE is that?
Believe it or not but you can't retrieve an environment variable set in your vhost inside your htaccess. Even if you could you wouldn't be able to have awesome IfDefine blocks like now. Which can contain more than just rewriterules. CLI is indeed a downside, I made a workaround in a ZF2 module (TwmDev see blog post) which allows you to do --dev when using the zf2 CLI.
Even with my IDE telling me things are wrong its easy to do a re-factor and not notice its broken something elsewhere. Closed source projects too, which have just as much reason for an automated test suite. 
Yes, getting one int is a lot faster than getting a whole table of data
B.CC. B.B.CC
I don't know if it would work for you, but I had an old script similar to this that didn't use AJAX. It would auto-refresh instead, but instead of checking the database it would touch the script file itself when someone added something to the box. When someone loaded the page I would send the script's file time out as a Last-Modified caching header. Then when a new request came in the browser would send me that header back in $_SERVER['HTTP_IF_MODIFIED_SINCE'] and I would compare it to the file's current time. If they matched nothing had been added so would send out a 304 not modified header and just exit the script and the browser would use the cache. If they didn't match it would do a full reload and hit the DB.
If I had to do it with AJAX, I would make the client send an AJAX request every X seconds, posting the latest comment ID that the client has. If the server has comments with higher IDs, it returns them in the response (using JSON). The client adds them to the DOM and sends through the new highest ID in further requests. With that method, the DOM won't be updated/refreshed unless something has changed. And you're transferring minimal data to/from the server too.
I just linked the most basic one :) I love how Gearman is very flexible, and I love the PHP implementation, it's really good, and I also like the Python implementation. Both of those "just work" out of the box without a headache, other than installing the extension which is really easy anyway.
I just did a test with firebug Getting one byte: 35-50ms Getting 10kb from the DB: 50-100ms In reality 100ms actually don't matter.
I look forward to trying this out! Thanks!
I can't see ever using something like this when we have tools like [xhprof](http://pecl.php.net/package/xhprof) and [xdebug](http://xdebug.org/).
As long as you're sanitising the IP address input before passing it into shell_exec, that'll be fine. If you were to do something like: $output = shell_exec('ping ' . $_GET['address']); You're in for trouble.
I've just starting programming so I'm not quite sure, but when i tried running it on a free server it said that shell_exec() had been disabled for security reasons. Is there anyway someone could manipulate that code if it was enabled on the server and do something unsafe?
It's as safe as you make it. If you don't properly filter/validate/escape incoming data it can be a major vulnerability. Basically, you need to be aware of how [escaping](http://www.php.net/manual/en/function.escapeshellcmd.php) and [arguments](http://php.net/manual/en/function.escapeshellarg.php) work if you use user-submitted data for anything. Also, be aware that many servers will restrict access to ping (and ICMP) so calling ping directly may not work on some servers.
I'd be pinging a game server so there would be no user input, the ip is made public. Would there be anything to worry about? As i just want to display to the website visitor their ping before they jump into a game. 
Instead of doing this, use a [proper deployment system](https://github.com/capistrano/capistrano) (that's the one I use, but there are others which operate similarly) then you can just have it deploy the correct configuration files at the point of deployment instead of adding a bunch of conditional code. This can include alternate .htaccess files.
If written poorly (ie - unsanitized $_REQUEST variables included in the shell_exec() function) you can completely trash a server, hence why almost no shared hosting company will ever allow shell_exec().
PHP is a server-side language. All you'll ever show is the server's ping to the game server. You'll have to use JS, a client-side language parsed by the browser, to have the user's system do the work. http://stackoverflow.com/questions/4282151/is-it-possible-to-ping-a-server-from-javascript
If you still need heck, check out the way they used the extra headers in this example: http://us3.php.net/manual/en/function.mail.php#example-3348 (but for multiple, separate email addresses with commas, all on same line between **BCC:** and **\r\n**) Depending on the type of mail list I am doing, I will just set the TO address to be the same as the FROM address and then put actual recipients in as BCC. 
Lol holy shit im so dumb for not thinking of that. Haha, thanks. 
No you're not, and get past that attitude quickly, it will only hurt you. The best programmer in the world needs to look things up and figure it out, and even sometimes ask others.
website.com?address=bum.com | sudo rm -r /
kylegetspam answered this nicely, but I just wanted to tack on that the only thing that you'd need to worry about in situations like this is the load that using shell_exec() and running a console command may put on the system. You must remember that each page load will spawn a second process (whatever you're running inside shell_exec()) and execute that command. If it's a long running process, or a resource heavy process, that may eventually become a DoS by the way of a user refreshing the page over and over, spawning new processes and overloading the server. ping, for example, under linux will continue pinging until you stop it (or provide a count parameter) so in the original code, it may create zombie threads on the server which may cause the aforementioned overload. Anyway, just things to consider. To answer your initial question: shell_exec() is perfectly safe, it's just how you implement it that can cause issues!
It's disallowed not for your safety, but for the safety and privacy of the webserver itself and its other constituents. It's essentially having a shell with the context of (most often) the www-data user. Depending on the other configurations of the webserver, you may be able to read system files such as /proc/mounts or /etc/passwd, or you may even be able to access and modify other users websites and data. It's more to prevent you from messing with the shared hosting than it is to secure your web application, though it would prevent some carelessness on their users part.
This wouldn't work as sudo would prompt the shell for a password. At very best you might be able to wipe the webroot with this.
I only took a quick look, but the lack of consistent hashing in the underlying [libyrmcds](http://cybozu.github.io/libyrmcds/) is a deal breaker for any mid/large scale applications that use n &gt; 1 memcache instances.
shell_exec($_GET['command']) is what is unsafe, sending it a string is not dangerous.
Unless of course sudo is setup to not ask for a password.
Then that would be a bigger security risk than shell_exec()
Step 1: find exploit in ping. Step 2: hack google DNS server. Step 3: ??? Step 4: Stop laughing.
A couple of gotchas/thoughts: 1. Use the full pathname to the command "/bin/ping xxx.xxx.xx.xxx" because the web server runs with a uid and an environment that may not have your command in its path. 2. If you decide to output the response from the command to a file, make sure you output it somewhere where the user id of the webserver has permissions to write to. 3. Sometimes you also want to capture error output from your shell command which goes to stderr instead of stdout (Im not 100% sure if ping does this or not) - you can add 2&gt;&amp;1 to the end of your command to capture the stderr output too (eg. $o=shell_exec("/bin/ping xxx.xx.xx.xx 2&gt;&amp;1") 4. Safety - its safe if xxx.xxx.xx.xx.is hard coded or is in a variable as long as it never derives from some user input or external source (eg. if you have a user input an IP address into a field that then calls this PHP code, the user can quite simply enter some text in the field that will delete every file on your web server). 5. Is it a good idea - depends - its probably ok for an intranet system but for an external system I think the javascript method may be better (in one of the comments below), Keep the stress off the web server. 
I do similar to you, except I define a custom error handler and use that to output messages to an application log file IF our configurable debug flag is ON in the config file. My debug messages have a priority so I can filter the output to certain types of message. I also output a full stack trace - every method or function in my applications output a message to the debug log with the method name and a "started" messsage, and also any argumeets to the method. Significant SQL and/or data structures are also output (though never credit card info). My debug file can show me the context where the code had a problem. I also use assert statements for runtime debugging. I do NOT strip the debug code out of production - I just turn the config flag off. The config file is PHP and on the server in a non-accessible location so there is no chance a user can get hold of it. So short answer to your question, YES, I leave the debugging code in place. 
Think of the slippery slope - you have some data defined in memory and some in tables. stuff in memory should rarely change but if it does a programmer needs to be involved. What if you add in other countries. Also zip-codes dont change much, nor do car manufacturers, or airline names. Where do you draw the line as to what to put in memory? The answer is right at the start when you architect the database. Data entities belong in the database where they can be maintained without changing your code; its just bad design otherwise. Caveat - my reply is really for enterprise or commercial systems - if this is for a mom and pop website then do whatever is easiest for you, 
- Step 1: hack the webserver to log in as root - Step 2: add an entry to /etc/host to redirect 8.8.8.8 to your server - Step 3: program your server so that when it is pinged, it responds by DDOSing the remote machine - Step 4: laugh maniacally with your cat on the armchair
You left out a little info.Is the CSV file already on the webserver or does a user need to type it into a form and submit it (upload it) to the server, and what OS is the web server (Linux or Windows). Generally speaking you want to: 1. Have a link on your webpage to something like download.php Alternatively if the CSV is on the clients PC you might have a form where a file is uploaded and the action is download.php 2. Create the download.php file on your server- it will open your CSV file and read each filename in a loop. Use something similar to the following link to create and populate the zip file. http://davidwalsh.name/create-zip-php 3. Add additional code to download.php to return the zip file to the web browser client. Examples here: http://stackoverflow.com/questions/7470846/send-zip-file-to-browser-force-direct-download , http://perishablepress.com/http-headers-file-downloads/ That should get you going. When it comes back to the web browser it will probably prompt the user if they want to save the zip file or not. You can add a mime type to the browser to make it automatically run pkzip or similar.
learn to use a COMET-like protocol (which basically was already mentioned by noir_lord) heres a bit more overview: http://en.wikipedia.org/wiki/Comet_%28programming%29 if you google comet php you'll find quite some "tutorials" too 
Never considered self-submitting a problem. I've done it once or twice over the years, noticed a few complaints, and quit the subreddit on advice to avoid being banned like ircmaxell was. Does anyone compare the subreddit to planet-php or phpdeveloper? There's not a lot of crossover these days.
I know enough Chef/Puppet to use it, and I see it as useful for managing more than just a few servers with identical configuration - I just recommend staying away from it until you know how to install and configure a simple LAMP stack from scratch.
Hi, Everyone! my name is Sasho Valkanov and I am head of support team at StivaSoft. I see most of you read the "Badder Business Bureau" review and as you can see sometimes it's difficult to respond to everyone's demands despite our good intentions. As for the client who said that he purchased our Newsletter script and that we do not provide any support, may I ask him to send me ticket ID from our support system where he asked for support. We are very proud of our support service and I would appreciate if he contacts me personally so I can personally make sure everything is resolved correctly. We try to monitor all the web, not just our forum and support system, for questions posted about our products and as soon as we see someone that asks a questions about our products we try to reply to it. That's how we landed here too :) Regards, Sasho
Would it be worth mentioning that the PHP script will block on this method which may result in either long page loads or errors. Is there a way to defer or run this asynchronously so pages will render more quickly?
You can also check first if it is an IP: filter_var($ip, FILTER_VALIDATE_IP); If it is a domain you can convert it first to an ip and then validate or something like that...
According to the following two links: http://httpd.apache.org/docs/2.2/mod/core.html#ifdefine http://httpd.apache.org/docs/2.2/mod/mod_env.html#setenv Both functions are available in your server config, this means you should be able to put the IfDefine block in your server config. Give it a shot and let me know!
[Solarized Light](http://ethanschoonover.com/solarized)
it's a joke, I don't think most operating systems would even run that command with sudo access because its such a bad idea. I doubt the spaces and slash would even come through the webserver untouched to the exec script.
Cool headline bait. They wrote something new using technology that fit the requirements better .vs technology they use else where. 
XHProf and XDebug are great tools, but they have their own use. They both need additional extensions and they both are not ideal to install in a production server. I personally often have conflicts between those two and APC. Moreover, they add a considerable overhead. When you are testing for performance, sometimes you need raw performance. Another benefit of this is that it can be used as a library to build benchmarking suites. I am currently trying to build one: https://github.com/lavoiesl/php-cache-comparison
If you're testing raw performance, you test from the outside. If you're comparing methods you're more interested in the delta between those methods, so overhead doesn't skew things very much. I don't think this is the right way to approach performance testing.
Not trying to say that you're wrong, but if you look at the history of the file, you can see that they made the switch from private to public ([d072f35ea0](https://github.com/symfony/symfony/commit/d072f35ea0166004b6407d510ec9f484f8eef78a#src/Symfony/Component/Form/FormView.php)) for this particular members for performance reasons. Although they could have added some documentation for this.
Why are you angry when you code?
Getters and setters do not actually give you encapsulation. They expose the object state just the same. But the point here is that not all objects are objects in the sense of encapsulation. Sometimes they are datastructures, and sometimes that's what you want. Objects protect you from changing data requirements, because the interface can stay the same. Datastructures protect you from new or changing operations, because the data remains unchanged. Choose the one that is appropriate. Quite often you will have "DTOs" that just holds "flat" data, without any real behaviour at all. And quite often that is actually what you want.
performance reasons? Really? Instead of having a get_attribute and set_attribute methods? Is that overhead?
Well in that case how come they don't use simple arrays for Doctrine entiies while they're at it? In true OOP development the notion of public writable array isn't unheard of, but what is it doing in a FormView class? Isn't a Form**View** class supposed to present some data and not act as what you call "flat data" ?
Don't say "Best practices for debugging code?" in the title and expect people not tell you how they do it. Seems like your tl;dr is a better title.
Did you actually look at the commit he linked?
Sensationalist title, smug remarks, snarky questions. What exactly are you trying to achieve here? If you want help, then that's not a good way to go about asking for it.
Yes and no. These functions are built in, but you should avoid using most of them and rely on abstractions (i.e. mysql_* functions -&gt; PDO DBAL) as they provide a much cleaner solution that is easier to follow. See: http://www.phptherightway.com/
Still Amazing language! Thanks for the link! You know to do something like this: &lt;?php $usdBTC = file_get_contents('http://data.mtgox.com/api/2/BTCUSD/money/ticker_fast'); $obj = json_decode($usdBTC); print_r($obj); ?&gt; Which gets a json object and prints it, in C++ or Objective C you'd need JSON decode headers, HTTP Request Objects, an absolute load of stuff, it would be a couple of hundred lines of code! Very Impressive! 
 const AGREE = 'Y' . 'E' . 'S'; pS. Didn't know such usage is possible outside of class :)
It is that easy, but that's also one of the problems: people build things without knowing "the right" way to do things. Relying on a framework to handle your input scrubbing and db is generally a good idea so you can focus on logic and ignore security concerns. (To some extent). I have been using php for about 10 years now and it is definitely one of the easiest to pickup and learn, and have immediate gratification.
Well, shell_exec() is one of the functions that is disabled when PHP's "safe_mode" is turned on. The reason it is usually disabled is if you're on shared hosting that doesn't give you shell access, because then shell_exec() could be used as a way to gain unauthorized access. But from the web application perspective, the code you have above runs a hardcoded command that is not affected by user input. I cannot think of any way a user could manipulate a request to make that code unsafe.
I'm interested to hear what you think is "true" OOP.
Can someone explain why this is preferred over evaluating the value yourself and then placing it as the value? I feel the (admittedly small) cost of determining what can be evaluated at compile time and what can't outweighs the slight improvement in readability.
Take a look at [PHP's stream wrappers](http://www.php.net/manual/en/wrappers.php), which enables http request and many other things.
http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)
I assume you believe this violates the Open/Closed Principal?
I am continuing on working on a Plug-In. Very open to scrapping that idea though! :)
So you consider this a good practice and would welcome undocumented arrays of random data in your code? I guess you also like naming your variables $vars too
One good use case is eliminating repetition and making code more DRY where several values are derivitives of some common value. If the common value changes, it would only need to be updated once, rather than having to update N other derivitive values. In some cases, N can be very large.
http://symfony.com/doc/current/reference/forms/types.html
How badly do you have to overlook details to ask a snarky and ignorant question? The answer to your question is here: [link](https://github.com/symfony/symfony/commit/d072f35ea0166004b6407d510ec9f484f8eef78a#commitcomment-2333998)
You're not going to find very many people here who agree with you, since Symfony2 is a new "hotness" and this is a PHP subreddit, but I just have to say: I'm not surprised. I appreciate what the Symfony and Doctrine devs do, but PHP was never meant to handle this type of development. You can tell by the fact that Doctrine models must be defined using either another language (YAML, XML) or as comments directly above the attribute definition (which appear to use the same syntax as Java's [Hibernate](http://www.hibernate.org/) ORM annotations, but don't actually use a feature of the language.) PHP is great for small sites that don't require a lot of development — sites that can get by with a simple request router and something like PDO. When you start getting into needing a solution like Symfony, it's time to look for a language that doesn't hold you back or make you trip as much. I'll probably catch a lot of flak for this comment, though. I've just found it's much more difficult to set up a large PHP app than a similarly large app in Python (Django), Ruby (Rails), or even JavaScript (Node.js, Backbone).
Makes sense, thank you.
It also helps if people read the entire question and not just the title. I explained in the first line of the question that I meant "debugging code" as a noun - in other words, what do you do with it? I added the tl;dr after getting a few answers off-topic - can't go back and change the title :(
&gt; Data transfer object (DTO) is a design pattern used to transfer data between software application subsystems http://en.wikipedia.org/wiki/Data_transfer_object
Alas the RFC says that constants on the right hand side are still not supported.
Yeah I use those a lot, but sometimes I want it exported to a nice file for two reasons: * Easily can leave it on a live server when you can't replicate an issue, and when you get a report of it happening, simply dig up the files around that time * Sometimes with external libraries or applications that end up loading a page over, echoing out to the screen will mess something up I'm not discrediting what you said - in fact it's probably the most common thing I use when developing. It's just nicer to have an exported log sometimes ;)
This would be useful: const DELAY = 60*60*24;
;) I always get confused when I have to install things from the command line and whatnot. I can manage a server on a basic level, but installing something on my computer from the command line always seems to throw me.
That's because it's doing all that in the engine itself, if you look. At the PHP source, you will see those 100s of lines The same is achievable in objc/cpp the problem is you need to write the wrappers first Then your final code you use is 3 lines long // This is also one of the problems with PHP everything is included, and not the most optimal, for example, everything in PHP is a hashtable
Why is it inside a View class then? its not transfering the data anywhere in this case. It's being modified inside the View class and thats whre it persists. It's far from a DTO really
Buddy, please you know nothing about Symfony. Form view is just a the data used to render the form and nothing else, essentially it is array it has nothing to do with business logic. It's wrapped in class only for convenience. http://www.youtube.com/watch?v=JAX13g5orwo Syfmony is as OOP as PHP project could be. I would even argue that form component is overengineered and bloated in some places.
Starting with at a minimum a good request processor to handle xss and sql injection is where I'd recommend anyone start. (If it's something they're going to put out in the wild). When just learning though, I'd recommend not worrying about that and just get one's feet wet.
I'm only responding to one bit of this, the end bit: &gt; I'll probably catch a lot of flak for this comment, though. I've just found it's much more difficult to set up a large PHP app than a similarly large app in Python (Django), Ruby (Rails), or even JavaScript (Node.js, Backbone). Thats because all of those applications hold your hand and set up the architecture for you. CodeIgniter/Kohana/Fuel/Cake/Laravel all do this in PHP-land, and in this aspect Laravel is almost identical to Rails or Django, all 3 add or miss features the others have, but on the whole, the architecture is the same thing. To compare Django, Rails and Node to Symfony is ridiculous, as Symfony2 is more a collection of components that can be put together however you like, than a kitchen-sink hand-holder. Don't get me wrong, I love kitchen-sink hand-holders, you just need to use the right tool for the job.
That's probably because in most cases slowest part of twig is the lookup part. Because twig allows you to access anything with dot notation (be it array, object property or getter). It's slow even with the C extension.
It's definitely more OOP than PHPixie. 
It is important too. It would then make the ordering of consts/properties matter. This is likely the same reason runtime, expression-based defaults for property declarations is not allowed.
I don't know of any PHP library that does this, but I did make a testing library in node.js specifically for testing JSON REST API endpoints, including their structure, types, and values. It's called [Frisby.js](http://frisbyjs.com/) if you want to check it out.
What he meant probably is PHP being used as a poormans Java.
Explain.
[Oh, snap...](http://i.imgur.com/0rg9W.gif)
Well, pre OOP PHP nature felt closer to perl, python, ruby? When you look at the PHP now it looks like it's becoming Java and it two versions we will be writing classes like this http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.html
Oh shit. He's the guy behind PHPixie? And he's complaining about Symfony2 being not OOP enough? When PHPixie does things like: - Use namespacing that's non-standard for PHP and Composer - Grossly mashes the view and the controllers together using Page classes in a really... hacked together way. - Uses PHP echos and includes directly in the view (!) - To do virtually anything but create content pages you have to edit core files in PHPixie (such as error handling, for instance) To think I was taking this guys ranting so seriously. 
Dunno about that. The "PHP is Java!" thing is commonly spouted bullshit, mostly against things like separating classes out into their own files, using interfaces and using abstracts. None of that is uniquely java, it would be more fair to say that PHP is turning into C++... which... yeah it totally is. That sounds great.
How is pixie not oop? Even the DI Container is not array based like pimple is.
Well bloated doesnt mean well designed. Im not saying symfony is a bad framework or anything, i was just expecting to see objects instead of arrays.
no doubt, especially for API debugging logfiles are a must
&gt;None of that is uniquely java, it would be more fair to say that PHP is turning into C++... which... yeah it totally is. That sounds great. Agreed. It is, and that's a very good thing.
You can actually replace any of Django's components, like its ORM, template language, and user auth. Most people don't, because there isn't any point in using Django if you replace it all (you miss out on its `admin` package and template context processors), but the option certainly is there. It's the same with Symfony: I could replace Doctrine, Composer, and Twig with whatever I want, but then what's the point in using Symfony? I could just piece those things together myself. Symfony certainly holds your hand and sets up all your architecture. All of the tutorials? They assume you're using the default components. You're also given a development server and a way to manage dependencies, and most Symfony components assume a certain directory structure, which the `composer create-project` command automatically creates for you. That's just as much hand-holding as Django and Rails. Unless I misunderstood what you were saying?
You mean v1 or v2? Because before I convinced you to recode PHPixie for v2 it was ENTIRELY static. I'm not sure how much better it is now, but I'd have to hazard a guess that it's not better than Symfony.
The main reason that constants on the right are not supported (in an expression at least) is that constants require a lookup that may change during runtime. Meaning that we can't be sure that the constant is available and the same as it will be at runtime (think opcode caching where the constant is redefined on later requests). That means that to support expressions on the right with dynamic values (and yes, constants are dynamic) we would need to add a number of tokens and operations at runtime during class definition. Which would change the parser and compiler and executor fairly significantly. it's incredibly useful, but also difficult... This change is purely compile time (opcode caches will be 100% effective). So :-D
Love this, if just for the bit-shifting capability instead of having to manually compute 1, 2, 4, 8, 16, 32, 64, 128... in class constants, especially when you start hitting some of those larger ints.
Honestly, I don't care current trend turning PHP into Java or C++. I am Ok with it as long as source is greapable.
What do you use for debugging?
I dont have any idea what this means unfortunately. Readability is important, but nobody is blindly copying features from any other language for poops and giggles.
xdebug and an unhandled exceptions log.
&gt; In addition to request processing, use a good SQL statement preparation lib right from the start, or you'll end up rewriting a lot of stuff later. This is a very good tip, and it's just good practice to begin with. 
I think you've misunderstood. Let's take this back to your original comment: &gt; I've just found it's much more difficult to set up a large PHP app than a similarly large app in Python (Django), Ruby (Rails), or even JavaScript (Node.js, Backbone). Those listed example frameworks are much more comparable to Laravel than they are to Symfony2. I'm NOT being a random "Laravel is amazing" fanboy, im using it as an example to explain that your "it's much more difficult to set up a large PHP app" assertion is wrong. My main point is this: _Django/Rails are a different style of framework than Symfony2._ No problems there, neither is right or wrong, both can do what the other does and both have components that can be swapped around.
Magic != Java.
Are you saying that Symfony is not meant for large projects? I'm really not sure why Symfony being (in my opinion) slightly different means it's not fair to compare it to Django or Rails. I've worked with all of them, and Symfony felt like it had a lot more cruft just to do the same thing in Django and Rails, but they all felt like they were targeting the same market: complex sites that need more than a simple router and db layer. Could you tell me what kind of site you would use Symfony, Laravel, and Django/Rails for? Maybe that would help with the misunderstanding.
You have totally missed the point. This is not an anti-react rant. It's a "not taking advantage oh php's wealth of synchronous code is idiotic" statement. I've provided a simple alternative that doesn't require you to install an extension. It works *extremely* well for simple parallelization in web SAPIs. Do you want to install Gearman job servers for CLI tasks? No. That's stupid. This give you a way to get parallelization in *any* PHP environment with no middleman. It's ideal for parallel processing in non-server scripts and works quite well in web SAPIs. What's more, you could easily use react to dispatch calls to an Amp job server. So please can we stop with all the *"my lib is cool too"* insecurities?
Yes, yes, yes, yes.... make this so..... :)
Regarding `proc_open()` ... Amp uses a pre-spawned pool of worker processes. It's fast because it communicates over interprocess pipes at the OS level. It *does not* spawn a new process on each call as you've claimed in other comments. Second, regarding speed, if you use any popular PHP framework then that overhead already far exceeds any slowdown you'll see from Amp. With a local job server calls are dispatched and returned in a tenth of a millisecond on my consumer-grade laptop. And it's ~twice that fast if you're able to use a process pool directly instead of going through a TCP job server. Amp will not be the bottleneck in your application unless you do stupid things like create worker pools with only one process and expect to execute lots of simultaneous IO-bound procedures with it. More importantly, you cannot receive results from gearman asynchronously in your PHP scripts while you continue doing other things. Period. You have missed this crucial point. But back on the speed subject ... a gearman workflow, though compiled, is actually not the fastest thing in the world: *Gearman client -&gt; Gearman server -&gt; Gearman worker -&gt; Gearman server -&gt; Gearman client* That's a lot of network overhead. If you use a pool of Amp processes there's zero network IO involved. The data flow looks like this: *Your script -&gt; Worker process -&gt; Your script* Meanwhile the socket job server is little more than a thin wrapper around compiled C functionality. It's very fast and only needs to make one roundtrip over the network because it directly distributes calls to federated worker processes without making another network hop. I'm not claiming its faster than compiled Gearman code -- I'm claiming its a better option for event-driven asynchronous parallelization.
With Opcache in place the compile time overhead will be a single evaluation hit.
I disagree that it reeked of hyperbole but we can agree to disagree on that point. Regarding javascript, my point is that PHP brings no native asynchronous functionality to the table. There is no provision built into the language for event-driven programming. No `setTimeout()`, no `setInterval()`, no XHR. While we can create this in PHP userland the vast majority of people will be wholly unfamiliar with the concept of non-blocking IO or callback-based programming. When I say: &gt; But these libraries didn't realize that PHP simply isn't javascript; What I mean is that we aren't really helping people by providing them with the tools to write async code if they can't use any of PHP's synchronous functionality. Rewriting every compiled database library (for example) to be non-blocking is not an option. For this to be a truly useful paradigm we need tools to take advantage of synchronous libraries that allow us to achieve true parallelization and continue doing work in the main process while that happens. This is simply not possible with the gearman extension. What's more, firing up a gearman extension for a CLI script that needs parallelization without extensions is asinine and no option at all. I've provided an easy-to-use solution for all of these issues and it's frustrating when people misconstrue the point because of a perceived but not intended attack on their favorite &lt;insert lib name here&gt; library.
This is not parallelization. To do this your call to Gearman would block until the response was fully received. This is the exact problem we're circumventing by using Amp.
It's clear that neither you nor any of the people who've upvoted your comment have actually tried this. **You can't return a result from your background task.** I didn't just ignore the Gearman documentation and make things up. I created the library precisely because *you can't do this in PHP with Gearman* and I needed the functionality. If you need a result in gearman you have to block for it. You *can* run a gearman task in the background but you *can't* get its results asynchronously. This is not a matter of opinion or interpretation. But don't take my word for it, google [is littered with the ???s of people making the same mistake that you have](https://bugs.php.net/bug.php?id=59848). Before you trash someone's lib make sure you know what you're talking about first. Otherwise you risk looking like an idiot.
A super-noob when it comes to development, but I started using Notepad++ for editing, at the recommendation of pretty much everyone who ever mentioned editing tools. It's got a bunch of color schemes that all adapt to different languages and has browser-style tabs that make it really easy to tinker with a bunch of files at once. Not sure how it compares to others because I was using Notepad before, but it's free and functional. Also, can't recommend [Trello](http://www.trello.com) enough — it's a free, Jira-style ticketing system that I use for planning my different projects. You can add a bunch of collaborators for free, and they just added a calendar view that helps a lot.
I'm lead dev for a team of 5, this is what all we use: We use TeamworkPM for project management (tasks, milestones, files, notebooks for site data, etc) We use git for VCS, Atlassian's Stash to manage the git repo, and Jenkins to handle both git and ftp deployments for those repos. Why FTP deployments? Some live servers have git installed, but ALL of them has FTP. FTP is dumb deployment, but it works. Jenkins and Stash only upload the changed files. The goal here was to stay the fuck out of FTP directly. We setup our repo's with the directory structure of the public_html folder, and occasionally drop database DB's in there. Our team uses both SourceTree, and SmartGit for desktop git gui's. We use Notepad++, Sublime Text 2, and Coda among our team. We were using Atlassian's HipChat, but since migrated to hosting our own Jabber server in a VM and using Digsby for chat/files etc. Speaking of VM's, we host Stash, Jenkins, cPanel, and our repo's on separate VM's locally. Our client sites run within cPanel on both dev and live to streamline backup/restoration and deployment to live environments (if it runs on cpanel, it runs on cpanel). We use a combo of OSX, Windows 8, and Linux (ubuntu and linux mint debian) for our OS's, really dependent on the person. For DB management we use navicat, phpmyadmin, or sqlbuddy(the latter usually for client sites without phpmyadmin, or without cpanel credentials)
This was the only thing I could think of that would make this useful
For PHP you really should check out netbeans, your life won't be the same. I work in a .NET shop now but we use: Visual Studio 2012, Stash for our git server, Bamboo handles our builds and deployments from dev machine to staging and staging to production. Jira is our issue tracker/project management. We went with Jira after using a few others because we had an easier time integrating out error reporting directly into it, so now all site errors auto log as issues into Jira for follow up with full stack traces and all that funness.
I think it was renamed to Zeta Components and added to the Apache incubator program. I don't know first hand how active its still being developed or maintained. http://zetacomponents.org/
This feels like a homework assignment. You probably won't find help here. Head over to /r/phphelp with more specific questions. We're not going to do the assignment for you.
Not to get into an IDE war, but purchasing PHPStorm changed my life. 
I didn't just ignore the gearman docs. Gearman *is useless* for asynchronous procedure results. End of story. Don't believe me? Try googling to find other people who've fallen victim to [the same misconception you've espoused.](https://bugs.php.net/bug.php?id=59848) Or even better, try to do it yourself. I mean, you could [fake it like this](http://william.shallum.net/random-notes/usingmemcachetogetresultsfromagearmanbackgroundjob) but that's a *really* suboptimal solution compared to real async.
Having used Notepad++ for a couple years, then Geany (similar to N++) once I switched to Linux - Try SublimeText. Even if you don't purchase it (and, in my opinion, it is worth the price) you'll most likely have a better experience.
Jesus, calm the fuck down. All I said was that ReactPHP also had support for libevent. I fail to see how merely mentioning that is "missing the point" in any regard.
My apologies. I'm a bit defensive after returning to reddit to find 24-hours worth of people (you're not in this group, so thank you) downvoting something they don't understand.
On the company level: HipChat for communication, JIRA w/ GreenHopper for task management, Confluence for wiki, Sentry for bug tracking, Harvest for time tracking, GitHub for version control, Xero for expense management, Balsamiq for mockups, Zendesk for customer service, looking into Evergage for tracking user experience. On the project level: Our PHP projects use Yii and Zend Framework (we also use node.js but that's not my department) on the backend with Backbone and Angular on the frontend. All of our PHP developers use PHPStorm. Our node developers seem to like Vim quite a bit.
Or use a real IDE like Phpstorm.
Thats a great find thank you. 
But if you take the framework as a whole? Not just focussing on single components. It says it's enterprise ready, do you think that still applies?
Entry level jobs are just that - where you enter the field. You don't need any real prior experience. The fact you're learning on your own and are enthusiastic is good. Find someone employing entry level developers, apply, and hope for the best. You might even think about applying for a job you are more qualified for that will also allow you some time to program for them. If you're good with computers, it's not unusual for help desk personnel to write code daily. Don't stress about finding the perfect job. Find somewhere that will let you code. Don't be fuzzy about your knowledge. You are entry level. Whether you feel you have "mid level" knowledge of JavaScript is irrelevant as you have no prior professional experience (I'm assuming - you didn't explicitly say one way or the other). Employers will pick up on this, so be honest. Show enthusiasm for any company you interview with. Be able to offer them something for bringing you on and training you. A company won't hire you only to train you, and the work you do during any training periods is not necessarily what they hired you for. Some places just want someone to churn through code and don't really care about you, so watch out for that. You're more likely to learn bad habits at these places. Good luck!
More than anything, I'm wondering how a person with a degree in Finance decided that gambling was a good career choice. Anyways, no person hiring programmers is going to care about your past as a poker player. Your best bet if you aren't keen on design is to pound out several libraries and development tools and publish them to github, since that's the hot trend these days. And for the record, saying you're "good at php" or any sort of language is akin to saying you're "good at hamburgers" on an application to McDonald's. Published code, a decent website, and an understanding of current programming trends are how you'll land a job. Good luck!
It was never a 'career choice'. Being trained in Finance I recognized an opportunity and made the most out of it. I'm trying to move forward now, but I have no regrets, having made more than twice as much as I would at a regular job. Thanks for the advice, I will be working on a personal website soon.
Indeed it is, I am developing a large, large sy2 app and sometimes it's a hassle. Php OOP is ad hoc
What I ment ws that it doesnt use public arrays with random keys in them =)
Thanks. I will definitely make sure to take the time with cover letters. Good to hear I don't really need to learn much more design, that has been stressing me out since I started this.
I have a feeling I'm doing something very wrong. WINSCP for ftp uploading. Copying files on my harddrive for backups. No version control. MYSQL workbench for database stuff. Normal email for project management. I develop straight to the test server with FTP. Sublime text 2 for code editor.
There are 2 Symfony components which can help you : * [OptionsResolver](https://github.com/symfony/OptionsResolver) seems to be what you are searching for. * [PropertyAccess](https://github.com/symfony/PropertyAccess) can help you build your own solution if the first one is not exactly what your are searching for. 
There is a lot of PHPStorm love (and NetBeans which is also great) but IMHO NuSphere beats them both hands down. The debugger is way better that XDebug, you can pause execution, then just run commands like $my_array and it prints the contents, then $my_array[10] = false; or something to fiddle with the data, or $my_object-&gt;run_this() .... you can also do conditional breakpoints, e.g. break when $i=99 or when isset($stupid_global_var) All stuff that you don't think you'll need, but every couple of months you bust it out and solve some niggly bug that has been driving everyon crazy for years. It's a good tool.
I'm on the same boat with where I work now and I simply don't have the time to invest in other technologies, but then again, a lot of the work I do is based on simple CMS programming and the like. Though I still haven't persuaded my boss to buy a test server, everything is local, wooo
Why arent the items of the $vars array represented by FromView properties then?
I should add however, that I also use EditPlus 3 for handling realy large files. I can edit huge XML files without any problems with it. It's a life-saver!
 * Actually PHPixie uses standard namespaces * How is Page class mashing view and controller? * Thats call "using PHP as templating", you can use PHP templates with Symfony too btw * Wtf are you talking about? What core files? 
 * git (tower / sourcetree for gui) * phpstorm / sublime text for editing (php/html/...) * sequel pro for mysql * capifony / ftp for deployment * bitbucket (for sharing source in our team) * jira for ticketing, milestones, scrum, ... * composer * vagrant * xdebug * ... 
&gt; Or use a real IDE like Phpstorm. As a netbeans user considering a switch, what features put PHPStorm above netbeans for you ? 
quick question, how much does Stash cost you?
meh...for projects smaller than a certain size a simple approach is perfectly fine
Yep. Fuck yeah JetBrains. I adopted PHPStorm first in our group when the rest of the team was happily using Eclipse (yeah). Give it a week and it spread like wildfire amongst the team members.
Umm...PHPStorm easily does everything you mentioned
Thanks, I'll look into both. It seems like OptionsResolver requires me to code option callbacks for numericValue() etc., which is ok but it might be faster to extend those hamcrest matchers with better error reporting. 
Yea, because the best thing to do shortly after learning to ride a bicycle is to jump into a sports car.
We pay $10 because we only have 6 users. You'll note from their [website](https://www.atlassian.com/software/stash/pricing) that the price jumps significantly after that, lol. 
I'm a huge promoter of Netbeans for PHP development... ... but PHPStorm is better. It's not perfect though. The code completion often fails to detect declarations in files that Netbeans can detect without problems, and it's missing features like "duplicate line upwards", and the standard duplicate/move line keyboard shortcuts fail a lot and just end up destroying all the code around the lines I'm trying to edit. Overall though, it's the best IDE I've used to date, with Netbeans coming a very close 2nd.
It doesn't require 32GB of DDR-3 RAM and raided SSD's to run a project with more than 100 files in it.
I've no idea why people recommend stuff like notepad++ and sublime text, when there are far better tools available.
Nice :)
&gt; why this is preferred over evaluating the value yourself and then placing it as the value const SOME_TIME_VALUE = 60 * 60 * 15; is by far more self-describing that const SOME_TIME_VALUE = 54000; 
There's a div in my main view with the id of #items. I've narrowed it down to some sort of work flow that I don't understand. If I put a query to the database in my code just after the save(), the new item is not returned, even though it is successfully saved into the database. 
&gt; Which would change the parser and compiler and executor fairly significantly. I understand this makes it much harder to implement, but it also makes it much, much less useful :(
It's not specifically _just_ this example, the whole idea is that sometimes you want to show the workings and not just the final answer. An example on internals was this: class Foo { const FLAG_1 = 1 &lt;&lt; 0; const FLAG_2 = 1 &lt;&lt; 1; const FLAG_3 = 1 &lt;&lt; 2; const FLAG_4 = 1 &lt;&lt; 3; const FLAG_5 = 1 &lt;&lt; 4; const FLAG_6 = 1 &lt;&lt; 5; const FLAG_7 = 1 &lt;&lt; 6; } There are plenty more.
It is all about preference. People are allowed to have different opinions. What is best for you, isn't for someone else.
* PHPStorm / vim for editing * mysql client for database stuff * Jira for issue tracking * SVN for source control, custom push script for deployment * Fisheye for svn integration in Jira * Jabber for chat
I figured it out, it was an issue with the query I was trying to use just after the save(). Once I fixed that, it worked.
&gt; 20 years after first exposure and I still hate regular expressions. Well, if you're using named groups and comments, it does become fairly readable. 
It relies on page renders to be of any use. No thanks.
Well done on having getters and setters? What do you want me to say.
I use Behat to test my JSON responses: Feature: Users Scenario: Listing all users When I request "GET /users" Then I get a "404" response Scenario: Listing select users When I request "GET /users/1,2" Then I get a "200" response And there is a self hypermedia link And there are optional hypermedia links: | link | method | uri | | next_page | GET | /users/1,2?page=2 | And the "users" property exists And the "users" property is an array And scope into the first "users" property And the properties exist: """ id name gender picture_url cover_url location timezone birthday joined moment_ids friend_ids """ And the "id" property is an integer And the "moment_ids" property is an array And the "friend_ids" property is an array And reset scope Scenario: Try to find an invalid user When I request "GET /users/nope" Then I get a "404" response Works real nice once you have your feature context methods set up.
My mistake, i thought PHPStorm used XDebug (which last time I checked) couldn't do most of that.
I just pushed version 1.5 which allows you to store results and re-open them later: http://phpdebugbar.com/docs/storage.html#storage
that looks nice, Im sure it will get picked up by a framework or too
**Everything I say is within the context of what is useful to me, it may not be useful for others. Feel free to disagree** I don't agree, I feel that actually having the computed values in this situation is more useful. I want to know the flag values. The only reason I say the first example is useful is because it gives me readability. Whenever I am dealing with intervals of time (that need to be in seconds) I would prefer to have my constants to be like this: const DELAY = 2 * 60 * 60 * 24; //2 days That way whenever I see a value followed by 60 * 60 * 24, I know it represents a number of days (rather than getting a calculator out). With the flags example in the same way I want to know what the flag is, I want to look and see FLAG_5 = 16, and not have to get the calculator out to do it. Maybe its just me and its my non-conventional quirk. Perhaps there are other examples where it would be useful too but when I was reading this the time example was the only one I could think of.
You can test the structure before you decode it with [http://json-schema.org/](http://json-schema.org/). Thats like an XSD for XML. Have a look at how composer doeas it https://github.com/composer/composer/blob/master/res/composer-schema.json
I have both Phpstorm and sublime text edit pen at all times. The ability to have multi cursor editing is a KILLER feature and a time saver. Sublime is simply faster for obvious reasons. So most of what I do is in to an the heavy lifting is left to Phpstorm. 
I think this is the stage which directly succeeds scattered `error_log(print_r(...))` all over the place and directly precedes `xdebug`.
Nobody has the time to invest and yet we do. That's a lame excuse in my opinion. You can learn things like git as you go
IMHO, avoid all outdated documentation (&lt; PHP 5.3). The differences between 5.2 and 5.5 (i.e.) are enormous and reading an up-to-date documentation may help you avoid some pitfalls. Also, six digits means nothing and doesn't means that you can't make this profit as a doctor, lawyer or doing another job. Rob Liefeld makes a lot of money too, but have you ever looked at his drawings?
Looks like a demonstration of _"Program to an interface, not an implementation"_, yet it fails to credit the source: [Design Patterns: Elements of Reusable Object-Oriented Software](http://en.wikipedia.org/wiki/Design_Patterns), from the _Gang of Four_ aka. _GoF_.
Because he wants the D
I fail to see your logic or how it relates to regular expressions, sorry.
PHPStorm uses XDebug, and can do all of the above.
Thanks, I sure hope they do see some value in this framework to maybe port it to the latest PHP version because it's real easy to work with, (as the initial name indicates). We have found an exact sweet spot between using EZ as the base framework and some components from Zend to extend it, seeing as there is no "One framework to rule them all" out there, this one came darn close to it
Pretty much what you said, yeah. Check out example 3 [here](http://www.php.net/manual/en/pdostatement.execute.php).
&gt;I understand prepared statements for inserting, but whats the best way to prepare statements on select queries? Here's an example using named parameters: $sql = "SELECT * FROM tablename WHERE date = :date"; $stmt = $pdo-&gt;prepare($sql); $result = $stmt-&gt;execute(array( 'date' =&gt; $date )); &gt;how do you prepare statements for selecting with tons of criteria? I'm talking like 8 selectors +. Do you just do a bunch of where this = ?, that = ?, more = ?, then bind them all in an array just like you would for inserting? Pretty much, yes. &gt;Also, things i've read say to wrap connections in try{} and catch{}. Is this absolutely necessary or is it just for error catching? That depends. You shouldn't catch exceptions just to suppress the error, you should actually handle the error as well. If you're unable to handle it in that place of the code, you should let the exception bubble up the stack so it can be handled elsewhere. 
+1 for named parameters. The queries will be much easier read and understand, and you'll avoid param confusion down the line if you end up needing to alter the query to add more params, or change their positions around.
Fair enough :)
&gt; When you start getting into needing a solution like Symfony, it's time to look for a language that doesn't hold you back or make you trip as much. Or a developer who actually knows what they're doing.
Additionally to this article, people should learn that if you want to have a certain dependency you CAN enforce it with concrete type hinting. Type hinting and interfaces are your rarely used best friends in PHP. They and the SPL. edit: I know the author named the class like that to explain the example better, but: please don't name your Interface "Interface". That's just redundant. Interfaces are basically types, so the name should describe what they are or what they are for. 
&gt;please don't name your Interface "Interface". That's just redundant. And I say please do. That way the concretion can take the original name, and the interface name would also keep inline with PHP's [built-in interface naming scheme](http://php.net/manual/en/class.sessionhandlerinterface.php), which is nice.
I found moving to Mysqli was pretty simple and the syntax was pretty close. http://php.net/manual/en/book.mysqli.php
**Lightweight means it's a small library.** It's more of an indication of code size and complexity than speed or features. **High performance means it has high throughput**, generally measured in requests per seconds or total time to respond to X requests. Generally these claims are inaccurate because of contrived benchmarks or poor testing environments. 
Oh, I know how to use GIT but it doesn't fit with the way my boss likes to back up files and a few other things I have to comply with but at the end of the day if it breaks it won't be my problem and he knows I've told him all along.
That's like saying that Microsoft Word should only be used for documents under 10 pages, because anything over 10 pages is difficult for the average person to structure and organize correctly.
Please don't do this. As a major contributor to the php.net redesign I promise that there are major changes coming soon that hopefully bring a lot of improvements. Changing the theme in your user agent is rarely a good option anyway.
That works perfectly, thanks! I use it in my PHP code to set a different stylesheet when looking at a dev site. It makes it hard to mistake where you are when the background is bright pink.
What about [PDO](http://www.php.net/manual/en/book.pdo.php)? It seems to be exactly what you are looking for.
Not... at all? A 10 page document is much easier to organize and maintain than a complex website. I had to write a simple admin panel for a website that was already using Apache and had mod_php enabled (was a shared host). They just needed the ability to edit some simple stuff and have it reflected on the main site. So, of course I used PHP. The problem is that some developers think, "Wow! I solved this simple problem using PHP... I can do **anything** in PHP!" and never want to use another language. This is compounded by the core PHP devs not really knowing what they're doing. This isn't to say PHP is an awful language. It is, but my critique isn't saying that. I'm just saying that PHP is not meant for complex apps that frameworks like Symfony, Laravel, and others target. It's a language for beginners to build sites quickly without having to learn many programming fundamentals.
Yeah you want to give PDO a try.
&gt; That way the concretion can take the original name, and the interface name would also keep inline with PHP's built-in interface naming scheme, which is nice. PHP has no builtin interface naming scheme. http://php.net/manual/en/book.spl.php and especially: http://www.php.net/manual/en/spl.interfaces.php All SPL interfaces do NOT contain "Interface" in their class name, putting "Interface" in the name is the exception, not the rule. See SPL Iterators and almost every other SPL interface as example.
&gt;What you are doing is like looking at PHP and seeing a hammer, then proclaiming that it's useless because it doesn't work on screws so you end up having to fix it when some moron tries to hammer a screw. No. What I'm seeing is [a double-clawed hammer](http://www.flickr.com/photos/raindrift/7095238893/in/set-72157629492908038) and a bunch of people who [insist that there's nothing wrong with their toolbox](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/#an-analogy). &gt;I'm really tired of programmers creating strawman arguments for the inherent terrible nature of PHP. That should be a clue about something. &gt;...thus the entire argument hinges on the meaning of "meant for" which entirely subjective and has no value to anyone but you. It's almost like it's... my opinion or something! But that would be crazy. I'm not interested in rehashing why PHP is a bad language in great detail to refute your reply. [Someone already did that for me.](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/) You can sit here and write paragraphs defending a language that is considered by most to be one of the worst designed ones in recent times, but at the end of the day, I'm not the one pulling my hair out because my hammer takes twice as long to hammer in nails and I have to hold it sideways for it to do what I want.
Is this similar to the symfony dev profiler bar?
You know this is PHP right? Sometimes I was to extends a class from the SPL, just to find out it's an Interface. No way to tell what is what.
&gt;PHP has no builtin interface naming scheme. You're reading the sentence wrong. I was saying the naming scheme of the built-in interface. &gt;All SPL interfaces do NOT contain "Interface" in their class name That's because they're language-level interfaces and doesn't represent "stuff" in the same way that SessionHandlerInterface or DateTimeInterface does (if you get what I'm saying). They're far more abstract than that.
Shameless self promotion here I created [VoorOrm](https://github.com/mardix/VoodOrm), a micro-ORM which functions as both a fluent select query API and a CRUD model class. 
Looks pretty nice, too bad I don't have PHP 5.4 installed anywhere. Edit: I'm right up the road from you in NC btw.
You shouldn't have any of that stuff running on production.
Someone can't put the evil value in the SQL because PDO prepared statements are compiled and sent to the database separate from the SQL query. Therefore, when it receives the evil value, it treats it like a value and nothing more. That's the beauty of prepared statements.
Oh I know exactly how gearman works, and I've used plenty of its similar options. What im saying is that calling it "useless in the event-driven arena" is bullcrap, as you just tell it to run some other code when its done instead of having it run a callback when its done. It's essentially the same thing, but with an added benefit of me being able to offload the process to another server. Having it all in one app sounds like a nice idea for some use-cases, but calling gearman useless is just going to end up misleading folks who don't have the same level of understanding of these various approaches that we do.
I've used illuminate/database from Laravel 4 outside the frameork with great success before. Eloquent ORM or Query builder are fast and easy to use. https://github.com/illuminate/database 
Very very cool. Keep up the good work. I will definitely use and contribute if possible.
The term "Program to an interface, not an implementation" predates that book by decades. Furthermore, I'm not entirely sure that you actually understand the concept. The interface is the collection of public functions or methods exposed by the class or data structure. When you see the "interface" keyword in a language like Java its really talking about a special type of interface known as an "abstract interface". 
I don't have any of the other WeMo products, or I'd add support. The outlets are simple enough. There's more I could do, but I have only so much time for projects like this. But there aren't any other PHP libraries out there for this I'm aware of, and their API docs aren't public. I had to piece it together myself from their XML and WSDL files.
Use redbean. It is super simple to use and comes in a single file.
why not, it only triggers on admin acl on a specific server only accessible by admins 
Because you should never be debugging on production. You should have development and/or staging servers for this purpose, and those servers should be configured with all the relevant debugging tools.
I really like the idea, as variable interpolation can get awfully messy and illegible, but there are a few criticisms I'd offer. First, I'd suggest making your parameter replacement occur *once*, rather than the iterative copy-and-write that's present [here](https://github.com/nicmart/StringTemplate/blob/master/src/StringTemplate/Engine.php#L51). My understanding of the way PHP's memory management works leads me to think that your loop approach would result in a new copy of the input string being created after every parameter is interpolated. This could become very inefficient for larger inputs. Instead, I would suggest converting each of the parameters/placeholders in the input string into sprintf directives, then create a matching set of replacements, and run sprintf. This would increase the complexity of the operation, but would drastically reduce the number of operations that are occurring.
&gt; The term "Program to an interface, not an implementation" predates that book by decades. [citation needed] &gt; Furthermore, I'm not entirely sure that you actually understand the concept. Thanks for that slight, it wouldn't be reddit without someone telling you that you know nothing. But you've got me curious; what, in my very succinct post, leads you to believe that I don't understand it? Are you trying to argue that the concept he demonstrates does _not_ reflect "Program to an interface, not an implementation"? &gt; When you see the "interface" keyword in a language like Java its really talking about a special type of interface known as an "abstract interface". I hate to point it out, seeing as you obviously know it all, but even an abstract interface is still an interface, and the same concept applies regardless.
No idea why you keep bringing up Java, or what relevance anything in that comment beyond the 1st sentence has to what I wrote....
as i said its not "debugging" its profiling and i disagree with the rest, - if you want to do good profiling you need to have actual live traffic on the platform, also - whats the risk to the scenario i described in your eyes?
I am inherently suspicious of anyone who mentions the GoF book in a positive light. It is a rare person that understands design pattern concepts from the 70s and 80s who doesn't feel that the GoF book missed the point entirely. And many, myself included, feel that they set back software engineering by at least a decade. Of course the instructors who selected that book bear the bulk of the blame. I apologize for insulting you.
Because Java, or rather J2EE, is a perfect example of what happens when you blindly apply misunderstood principles and design patterns. 
I've seen code that looks like this before: const FLAG_1 = 1; const FLAG_2 = 2; That is, only two flags. With that little information, there's no way of knowing whether this is a bitmask or just incremental values.
Load testing doesn't require a live environment. In fact, no professional outfit does this. You load test in a controlled environment. You will never need to profile with granularity in a live environment. Your system either handles the load, or it doesn't. The issue isn't risk, it's just the wrong way to do this stuff.
For clarification, are you setting the content type thusly?: $this-&gt;getResponse()-&gt;setHeader('Content-type', $responseFormat); It's almost certainly not be because of the php version but because of ini directives or other things. [See here to see if any of these answers apply](http://stackoverflow.com/questions/2508718/content-type-not-working-in-php) If possible, can you set up a simple php page (not using Zend) that simply sets a content type and echoes the output, and see if the problem persists? It sounds as if output buffering can cause problems here, i.e. Apache may automatically determine content type if you're using automatic output buffering or using any ob_ functions. Are these present in your ini settings or code anywhere? Have you checked for erroneous whitespaces being outputted before headers anywhere in your controllers? Are you using Zend_Rest_Controller? And, it may sound stupid, but are you sure other errors aren't being triggered? Have you tried using CURL or a tool like [Postman REST client](https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en) to check for any errors? What have you used to test the API? Any more details you can provide about your particular implementation will be of great help in trying to resolve this. I've recently deployed a REST API on a php 5.3 and 5.4 server using Zend_Rest_Controller with no problems, using similar code to above. EDIT: When testing your API, are you setting the Accept and/or format parameters correctly? Also, are you reading these properly in Zend? I use something like this: $this-&gt;format = strtoupper($this-&gt;_getParam('format')); $this-&gt;headers = apache_request_headers(); if(isset($this-&gt;headers["Accept"])){ $this-&gt;responseFormat = $this-&gt;headers["Accept"]; if($this-&gt;responseFormat == "text/php" || $this-&gt;responseFormat == "application/php"){ $this-&gt;responseFormat = "text/plain"; $this-&gt;format = "PHP"; # Catches the special 'php' case. } else if($this-&gt;responseFormat == "text/serial" || $this-&gt;responseFormat == "application/serial"){ $this-&gt;responseFormat = "text/plain"; $this-&gt;format = "SERIAL"; # Catches the special 'serialize' case (same as PHP). } else if($this-&gt;responseFormat == "text/plain"){ $this-&gt;format = "TEXT"; } else if($this-&gt;responseFormat == "text/json" || $this-&gt;responseFormat == "application/json"){ $this-&gt;format = "JSON"; } else if($this-&gt;responseFormat == "text/xml" || $this-&gt;responseFormat == "application/xml"){ $this-&gt;format = "XML"; } else if(strpos($this-&gt;responseFormat,"html") !== false){ $this-&gt;format = "HTML"; } else { $this-&gt;responseFormat = "application/json"; $this-&gt;format = "JSON"; } } else { $this-&gt;responseFormat = "application/json"; $this-&gt;format = "JSON"; } if(!$this-&gt;format){ $this-&gt;format = "JSON"; } Some things here are specific to my needs, but should illustrate the point. I found Zend's automatic handling of formats to be lacking so decided to handle them completely manually. I also understand that: apache_request_headers(); is disabled in some apache configurations, so that might be worth checking. Last, but not least, are you sending the right response codes? (200 for succes?) using: $this-&gt;getResponse()-&gt;setHttpResponseCode(200); EDIT2: One last question, what's the length of what you're outputting? If it's large (such as a file) then you may need to take special measures to avoid hitting time/memory limits on server end and on client end (flushing outputs, etc)
I tried going the Atlassian route and I blame them for my first grey hairs. Fuck that noise. Jenkins and Capistrano will get you a long way.
I've just recently got Bamboo set up with Codeception for acceptance tests. Works great so far. Here's a nice site about Jenkins and PHP: http://jenkins-php.org/ No doubt some of that applies to any CI server you end up with.
Can your source that? Afaik this is purely a matter of taste, there is no rule. Similar to Hungarian notation. And interfaces always represent something. If I have the interface "Driver" it represents a generic database driver and the concretions are Driver_Mysql or Driver_Mssql. Why should I call the Driver Interface Interface in addition to it's name? But as I said, imho matter of taste. I would have to look at psr to check if they put a rule in their coding standard for that. 
Oh look, a troll. 
First off, thanks for the input; it's late, and I'll have to try your suggestions first thing in the AM. But, it doesn't appear to be whitespaces or anything of that nature as the output on the 5.3 server shows empty payload in SoapUI, while the 5.4 server shows the intended JSON string, which is usually around 1-4K. BTW, I don't think Zend_Rest_Controller exists in 1.8, which is the version we're using, and we're calling: $this-&gt;getResponse()-&gt;setHeader('Content-type', 'application/json'); in our controller's init(), along with: $this-&gt;_helper-&gt;viewRenderer-&gt;setNoRender(true); $this-&gt;_helper-&gt;layout-&gt;disableLayout(); Again, I'll recheck everything again in the morning when I'm more refreshed. Thanks again for the assist.
I'll agree that "useless" is an overstatement. But I disagree with this: &gt; It's essentially the same thing It's not remotely the same thing. One can be used for parallelization. One cannot. You have two options with gearman: (1) block until gearman gives back your result or (2) don't block but have no access to any information from the background processing other than whether or not the task completed. This inability to get background work *results* is what I'm referring to in my initial (overzealous) characterization. Sure you could store the result in memcache and incur more network IO overhead to compensate but this adds lots of unnecessary complexity and likely outweighs the benefits of offloading the work in the first place. Gearman provides task offloading in PHP but it doesn't provide parallelization. This limits it's usefulness if what you need is parallelization or offloading of IO-bound work from which results are required. This is the point I was trying to make initially (that and pointing out that you can do it solely with native PHP functionality and no extensions). The real winner here is non-trivial CLI programs. Think scraping and parallel DOM analysis of many resources at a time.
I use jenkins, git and phing, fits perfectly for pretty much any project as long as you know how to create a build file.
I'm starting to lean towards Jenkins, could you give a list of plugins you use for it and your php deployments? Seems like there is a lot of old information out there that isn't really functional anymore.
Consider the Closed part of the Open/Closed principle. How many people do you know actually create a new subclass of a type every time they want to add a new method or property? 
&gt; Source what? You're not making sense. I haven't said anything in need of sourcing. I mean if you can provide a source which supports the explanation you provided about the language interfaces. And especially that everything "less abstract" than these primitive HAS to have "Interface" in it's name. There has to be a guideline for the PHP Core developers which dictates them this naming scheme, right? That's what i mean with "source the statement". Sorry if my english was not clear at this point. &gt; while SessionHandlerInterface or DateTimeInterface represents things that are a whole lot more concrete, namely session handling and date time handling. we are really offtopic now but: Abstract: interface SessionHandler A session handler. No info about how it does handle the session or where it stores data or anything Concrete: class SessionHandler_Memcache implements SessionHandler This specifies the type of session handler. public function setHandler(SessionHandler $handler) This says "i want an object / instance if the type" session handler. It's simple, clean, expressive and logical. If the type hint would tell me "SessionHandlerInterface" i would think the method wants something different, but not that the object which is passed to the method has to implement "SessionHandlerInterface" Interfaces are more or less types. They have to explain what the implementing Class IS and not that they are an interface. And btw interface SessionHandlerInterface is just redundant. 
&gt;I mean if you can provide a source which supports the explanation you provided about the language interfaces. And especially that everything "less abstract" than these primitive HAS to have "Interface" in it's name. Except I haven't even said that. I said it would be nice to keep in-line with the naming scheme of *these* interfaces. I'm not saying that *all* interfaces are named like that, the SPL interfaces example of that, but it has been a trend to do so in the APIs of the later versions of PHP. &gt;Abstract: &gt;Concrete Jesus, wolf, I was talking about abstract and concrete in a different sense than language constructs. I full well know how the language works, don't patronize me. I was saying that SessionHandlerInterface is a lot more "real" than what, say, "Iterator" is in terms that SessionHandlerInterface is used to specifically handle sessions, whereas "Iterator" is a lot more general and closer to the language than what it would be to any such specific application. I'm not saying it's more concrete in the sense that it's a class, I'm saying it's a lot more concrete in the sense that it's serving a much more specific purpose. &gt;is just redundant. I disagree: 1. This tells me that it's looking for a class which implement interface X, not an instance of X. 2. It makes the name available to be occupied by actual concretions, which would in most cases be a better fit. 
Don't bother with the guy, he's most likely a troll. The very first interaction he had with me was "Ha!", and everything following that has been factually incorrect, which makes me think he's trying to bait people into arguments "for lulz". 
I just finished setting up a server and found these pages really helpful: http://jenkins-php.org/ (has a list of required plugins for PHP) http://erichogue.ca/2011/05/php/continuous-integration-in-php/ (configure plugins) 
The problem I have with the latest frameworks is that they all force you on some level to use ORM (ex:Doctrine for symfony2) which highly limits your ability to write optimized database queries. The other problem I have, is when you try and write flexible code, which EZComponents and ZF2 is absolutely amazing for, you end up hacking and trying to piece things together in a fixed environment and that is the wrong way to do it. I could also say that the new framework's caching and templating is probably the one cause of major headaches in our Team. The best approach we could find was to create a hybrid of components to solve our problems that are easily testable. 
WHAT IS THIS, THAT BLOODY AUTO LOADER AGAIN? DON'T TELL ME HOW TO CODE AND GET OFF MY LAWN!!
Good luck. Hope I won't have to work with your code later ;)
Nice to hear it. We'll see what happens :)
Don't have one but this sounds awesome. GitHub appears to be down right now but I'll definitely take a look later.
As good as Jenkins is, the interface just looks like total poo. Have a look at Wercker, which is currently in beta :)
I had no idea compact existed. Thank you for this very useful information.
Hi Phil, what kind of problems did you run into? Implementing CI on Bamboo for our PHP projects is on my short term todo list.
I've tested Xing but I've been disappointed : it don't manage git's branchs. It's not the request but I stay on travis-ci for the moment. But I'm interested by all your responses.
I really thought the all caps and get off my lawn reference mighta given the sarcasm away ... apparently not. Duly noted and I won't make any more jokes around these parts :|
Getting the JIRA workflow down so that things would automatically be sent to Bamboo was a nightmare, and just took FOREVER, then when I wanted to modify the workflow it just fucked everything to shit.
I got ya, I loled. :)
 Someone Goofed. Main image under paragraph one references an image on a private IP. Thanks for the free information gathering about Zynga's network Zynga. Image URL: https://10.68.19.70/wp-content/uploads/2013/08/overview_small-300x166.jpg 
:) keep up the good work!
Hmmm...well it shouldn't be too much of a problem, Zend_Rest_Controller is just an abstract class that defines the POST, GET, DELETE etc actions, and the rest of Zend_Rest is just basic handlers and only outputs XML (hence why I wrote my own part for that to handle other content-types)... Let me know when you test out the other things, it does sound like an Apache/PHP configuration problem, I would also suggest checking out the phpinfo() for your server and comparing to your local setup.
Not loading for me
&gt; You don't want to store either WI or Wisconsin. You want to store 24. Or whatever the ID of the state happens to be. Then you want to join in that table when you display their details. This is what's called "normalization". No, you want to store "WI", which is shorter than an integer, and which requires no join to be readable by humans. When used in an address, it demands no join at all. There is *no* normalization step that says "Replace text with id numbers." 
That's the point, it's an internal IP.
Recently I have been playing and having fun with [Propel](http://propelorm.org/).
Have you considered rolling your own, with [Fabric](http://fabfile.org)? Here's an example, this is what I use for my own WP deployments: [Fabfile for Wordpress](https://github.com/YellowSharkMT/fabfile-for-wordpress) There's lots of room for improvement, but at least you should be able to see some of the possibilities with Fabric.
&gt; Propel This looks interesting, thanks! 
I've seen that one, even tried it but I can't remember why I moved away from it. 
I got the same impression from his responses to me in other places of this thread. I quit responding when I realized he was literally fabricating arguments, seemingly for the sole purpose of boasting and insulting anyone who disagreed with his view.
Also take a look at [extract()](http://www.php.net/extract), which is the reverse of [compact()](http://www.php.net/compact) $params = ['age' =&gt; 21, 'name' =&gt; 'joe']; extract($params); // $age == 21 // $name == 'joe'
Well, the inconsistency in his own arguments make it rather obvious. &gt;SOLID Principles are neither *principles* &gt;Consider the Closed part of the Open/Closed *principle.*
That website is not complete, I didn't really expect anyone to be linking to it yet. The rules are not final, and some packages are not quite ready. But yes, it's a thing.
Dude. Thank you.
Heh. I hate extract. I worked on a codebase where someone passed around MASSIVE arrays as function parameters and then used extract on the incoming array. It made it so hard to figure out what was going on. I know that not extract's fault so much as just bad style, but I dislike extract() anyway.
[Fixed](http://code.zynga.com/wp-content/uploads/2013/08/overview_small-300x166.jpg)
Are you looking to learn a new language to acquire a job? If you are, look around your area to see what language is in demand or is used most often. If you're picking a language to learn just for fun, flip a coin or pick the one you can find the most resources on.
Oh missed that part... 10.* 
&gt; Bertrand Meyer is generally credited as having originated the term Open/Closed Principle, which appeared in his 1988 book Object Oriented Software Construction. The idea was that once completed, the implementation of a class could only be modified to correct errors; new or changed features would require that a different class be created. That class could reuse coding from the original class through inheritance. The derived subclass might or might not have the same interface as the original class. http://en.wikipedia.org/wiki/Open/closed_principle Of course the typical SOLID practitioner is going to completely miss the point and reduce the principle to "Dhurrr, gotta use an interface". What boggles my mind is that Robert Martin quotes Bertrand Meyer, uses his arguments, and then turns around and does the exact opposite. 
Relative links are a good thing...I've never done that.
I would approach it this way: 1) write a program that walks through all of your code and stores all variable names it finds in a database table. 2) add a column to the database table with the new name, with a simple replace query you can remove the type prefix and store it in that column. 3) check the table to see if you want to replace some variables manually. 4) now create a program that loops through all code again, and replaces the variables with their new value. Unfortunately I don't know any existing tool that can do this for you...
Phpstorm has a quite nice refactoring tool built in. I used to like the hungarian thingy, but since I switched to a decent IDE with very good code hinting (phpstorm) it became kinda obsolete. Phpstorm can also refactor autoloaded filenames, which is nice.
You don't even need a database. Just store them all in an array. If you must use a database, use sqlite since it's less time consuming and easier to back up.
This is not PHP related (/r/programming) and it's not '20 lines of code'. Here is my 1 line AB testing framework for PHP: &lt;?php class AbFramework() { // LOGIC GOES HERE }
I'm exactly the same, and I'm even one of those paying customers of Sublime Text 2. Are you me?
I have a feeling we are the silent majority.
What's the process for getting a package included in the list?
You say you can't use Websockets - why is this? I created a hosted service as part of my uni work that lets you implement Websockets in a very simple way - it's all hosted so you don't need a server or anything for it - just sign up and use a few lines of JS to make it work. There's a JS Library and a REST API, so you could trigger page loads whenever someone adds a new message to the DB, or directly via JS. It's free to use at the moment and would likely only ever cost you something if usage got really high, although at the moment I have no plans to charge for it - this is a personal project for me. Give me a shout here or via the website (www.insto.co.uk) if you need any help getting it to work.
Definitely not new, have seen this several times on /r/webdev
This was shared with me the other day and I though it would be cool to setup in a sandbox and play with it. Unfortunately, there's no documentation on setting this thing up. I could probably figure it out given enough time, but time isn't something I have in abundance. So, kudos to Zynga for sharing, but it's not worth much to anybody in its current form. If anybody gets this thing running, please share the process with the rest of us.
I think i know how it's supposed to work, but i really think they overestimate the usefulness of this tool for anybody outside zynga. That and the code is really... onorthodox. I'll write docs if i get it to work.
I use NearlyFreeSpeech.net. They apparently use a technique that makes non-http hosting difficult or impossible. I'll look into your service, though! Thanks!
I just looked at the Makefile - I am running Ubuntu Server and it was having issues with INSTALL_ROOT - if you just run all of the commands inside of the makefile with the path you want, looks like it should work. Then you need to go through the directories and probably use the .sql files for your db server - and also copy the sample server.cfg file to the main project directory. This is just for the server, I haven't looked at the client yet. It looks like the Makefile was failing for me because 'test -d' isn't returning the correct value for whatever reason. You also have to edit the index.php file in web_ui to have the correct core_include path for your server. Warning - this thing is (obviously) heavily geared towards games (functions like PopulateGameList, etc)
That's one of the reasons I made this service, it's hard to host a non httpserver on traditional shared hosting - this service takes away all that pain :) Hope it's what you need! 
Yeah, I guess I should just roll my own, shouldn't take long. It'll just need to warn me if (e.g.) $strFoo and $intFoo exist within the same scope. There could be cases where a member variable called $strFoo exists in a class that's a ((great-)grand)child of a class with a member variable called $intFoo, so I guess I'll use reflection to build a class hierarchy tree and go from there.
While true, you know you _could_ implement it in 20 (probably even less) lines (not that you should)...
I've seen it in action, and as a longtime vim user I was pretty impressed! I think then I'd have to do one variable at a time, though, which would take far too long. I guess it wouldn't take as long if all 20 developers were on it, but then I couldn't justify dedicating any developers at all to something that management would consider a triviality (plus the cost of 20 PhpStorm licenses!). I will script it myself.
You have a mole in your organization!
Hahaha it always turns out to be something stupidly simple :) Glad it wasn't something horrific! Good luck!
I don't think you actually need to do integration testing on an API. All you're doing is making a request and getting a response. Doing just general unit tests would suffice.
Thanks mate, I'm already using postman while coding but it lacks the automation that SoapUI seems to have!
[Advanced Rest Client for Chrome](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo)
Might make sense for something like a heartbeat test for maybe network connectivity testing. Maybe someone pushed a change to DNS stuffs and you'd like to know if your service went down. Not really functional testing as much as service monitoring
Behatch (with [behatch](https://github.com/sanpii/behatch-contexts)) is a cool tool for testing your API: [tasks.feature](https://github.com/sanpii/todo-rest/blob/master/tests/Features/tasks.feature). I also use [restclient](http://restclient.net/) and [httpie](https://github.com/jkbr/httpie) for request the API.
np good luck
I was afraid of that, but you're right -- it's always something egregiously simple. Again, thanks for the assist.
The latest PhpStorm has a REST client built in.
I'm surprised more people haven't posted this one. I use it all the time. No reason to not have a rest client test within the browser that you're developing with in the first place.
[Frisby](http://frisbyjs.com) is what I use to automate my REST tests.
I use Postman, tis fantastic. Also, [Dev HTTP Client](https://chrome.google.com/webstore/detail/dev-http-client/aejoelaoggembcahagimdiliamlcdmfm?hl=en) is pretty sound. Both Postman and Dev have the advantage of saving your previous searches.
Upvote for Postman, I use it all the time. Makes your life easier with Collections and Saved Queries
You could look at rolling your own unit tests using an HTTP library like [Guzzle](http://guzzlephp.org/) or [Buzz](https://github.com/kriswallsmith/Buzz).
vouch, this one is good and simple
&gt; $stmt-&gt;execute(array( &gt; 'date' =&gt; $date Shouldn't that second line read `':date' =&gt; $date` instead? Or do I not need to include my colons in my binds? note: I've been using ... $stmt-&gt;bindParam(':date',$date); in my project. I've even got a connections file with a bunch of pre-prepared objects for later use, complete with bound parameters (even some `$_SESSION` variables. Is this good, bad, or indifferent?
Why do you need 3 different "nows"....There is probably a better way to do that. But looking beyond that, yes. That kind of sounds like OO wankery. Naked variables aren't a problem. The fact that they are running around outside of your objects, however, is. It's your code, keep it in line. I did check out your GitHub (found via skills acquired at /r/hacking) and it looks like you could use a framework (or at the very least directories). My advice? Go learn Laravel. You'll thank yourself later. MVC is your friend stop trying to deny it. 
command line curl? - not sure what you mean though but except binary apis i do most testing with curl
MVC is my friend - but it's a friend I'm keeping at arm's distance for this project. My goal isn't "make a really awesome site", it's "make a really awesome site without using any frameworks, libraries, etc. that I don't create on my own". My next project will use a PHP framework, and use JQuery, and have all sorts of other stuff going on that I didn't write myself. This one only has one thing written by somebody else: pbkdf2. &gt; (or at the very least directories) How do you mean?
That badge is hot.
Postman for manual testing and Jmeter for load and regression testing.
Tsk Tsk. If it was a truly RESTful API all you would need to do is provide a discovery URI and it would learn how to test itself. /s
Can't upvote this enough.
[Runscope](www.runscope.com) is awesome. May be useful depending on what you're looking for.
* [Namespaces and Composer](https://jtreminio.com/2012/10/composer-namespaces-in-5-minutes/) * [Container](https://jtreminio.com/2012/10/an-introduction-to-pimple-and-service-containers/) * [Unit Testing](https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/) * [Xdebug](https://jtreminio.com/2012/07/xdebug-and-you-why-you-should-be-using-a-real-debugger/) * [Vagrant/Puppet](https://jtreminio.com/2013/06/make_vagrant_up_yours/) [This guy blows most of my crap writing away](http://blog.ircmaxell.com/). [This guy talks about various things that are over my head, but still enjoyable to read about](https://igor.io/). [This guy explains complicated concepts in easy to digest, bite-sized chunks](http://fabien.potencier.org/). [Here's a site that's fairly good at filtering out crap](http://phpdeveloper.org/). Now stop grinding your gears and get to learning.
A good framework will simply abstract out common things, like a router, and provides architecture so you can get to the good parts: what makes your app unique.
Validation does not belong in a form class, it belongs in a validation class. Unless a library is weirdly written, you can extend anything.
This is from my current time.php. I had enough time-related variables that i found the need to put them all in a separate file, so I could keep better track of them. I know that there's a better way to do this. I just don't know what it is yet. $t=time(); // Current Time $u=$t; $tf = date('Y-m-d g:i A',$t); // Time, Formatted (in server TZ) (To be displayed) $tu = date('Y-m-d G:i:s',$t); // Time, Formatted (in server TZ) (For the update process) $tfOld = "'" . date('Y-m-d G:i:s',$t-86400) . "'"; // Time minus 1 day, formatted. For use in pulling conversations. if (isset($_SESSION["TZ"])) // If the user has set a TimeZone { $tz=date_create(date('Y-m-d g:i:s',$t),timezone_open($_SESSION["TZ"])); // Timezone $t=$t+date_offset_get($tz); // Time, modified to be accurate to Timezone $tf = date('Y-m-d g:i A',$t); // Time, Formatted (in User TZ) (to be displayed) } $tzOffset=($u-$t); // Number of seconds difference from server (UTC) to user I was going to make a class that would contain all of them. The class wouldn't have had any functions, or extended other classes, or implemented any interfaces. I suspected that this might be a bad idea, so I asked. Is there a better way to do this (without using a framework!), or is this an efficient-enough method?
You are correct, but I would assume the two would most likely ship together or be easily pulled in together with composer. 
... and if I find myself needing to write a router? Or needing to be able to abstract things out myself? Or needing to get a job that pays better than tech support, and wanting to be able to prove that I can, in fact, write in pure php? Yes, this is doing things the hard way, but I feel that I have a valid reason to want to do so.
SoapUI is the bee's knees when it comes to testing and developing SOAP APIs. If it is as good with REST, then it is certainly worth trying. It is written in Java so it pretty much cross-platform.
&gt; Shouldn't that second line read ':date' =&gt; $date instead? No.
&gt; When I went from PHP4 to PHP5 - all the links explaining OO php didn't actually describe the real benefits and how to actually take advantage of the style.. It's the same in so many languages/documentation. This is because the abstract concepts of object oriented design are at a level higher than the language that they are implemented in. There are many books written on the different coding paradigms such as object oriented design along with design patterns and principles. I would recommend looking toward books like these rather than blog posts.
For any PHP newbie out there, that hasn't discovered Composer yet -- it's your best friend ever. Use it, learn it, love it, live it.
SoapUI's support for REST is picky. YMMV. It's much better for SOAP. SoapUI expects a WADL for all REST requests. If you don't have a WADL -- and one that is accurate -- that covers all the service's REST methods, I'm not sure that it will help you. I've found it difficult to use the REST request test step object without a solid WADL for the service. In that case (when I needed to correlate or integrate data from a REST service in an otherwise SOAP-heavy test), I resorted to doing it "by hand" from within a Groovy Script test step (leveraging Java's HTTP methods and some manner of Groovy/Java XML toolsets). That being said, SoapUI handles XML response formats very well. It has passable support for JSON too, though not (natively) in assertions.
Bloggers need to learn the difference between "example" and "tutorial" in their titles. 
Tools like SoapUI provide the benefit of confirming that your service conforms to its own WSDL, for starters. For another, if you have a multi-step test that involves calls to multiple services, with pieces of data a) needing to correlate among those calls, and b) needing to be passed on from one service to another, SoapUI is real useful as it expects you will need to do all that sort of thing and makes it incredibly easy to, say, take the value from response 1 //foo/bar/baz[2]/@qux and insert it into request 2 at //fred/barney/wilma/pebbles[@pet='dino']/bammbamm. SoapUI also has crude load testing built in, as well as (if you shell out for the extras) file- and database-backed keyword testing.
Take this as you wish. By using a framework you can learn some of the best practices while learning just as much if not more. The more you want to know how something works with that particular module/library you can look at their code and see the tests that follow and either extend or contribute to the project which is what a lot of companies like to see. I used to be all about doing everything myself but now I see myself learning more and expanding my knowledge at a way faster rate by seeing more consistent examples. If you still want to do it your own way, that's fine but make sure to start doing unit tests or TDD. 
Yup, use this one as well.
haha, no worries. I don't think it's age, more just people that don't want to change, or don't understand the changes. I think it's more prevalent in older programmers because they're been doing what they do for so long they have so much more inertia. But pure speculation, of course.
&gt; ... and if I find myself needing to write a router? Or needing to be able to abstract things out myself? Or needing to get a job that pays better than tech support, and wanting to be able to prove that I can, in fact, write in pure php? Read the code of the stuff you're using. Read it's docs. Understand *how* it works without writing it yourself. Contrary to what you might think, you don't have to write a piece of code to understand how it works. Get better at studying the third party code you use. Study enough components that do what you need and chances are you'll be better prepared to write your own anyway.
It's like an enforced break while it wanders off and does whatever it does to update
I could go first, but I would just get embarrassed with all the people from US making over 100k :(
 $outlet-&gt;setIsOn(false); That's quite strange to read. I'd probably replace this method with `turnOn()`, `turnOff()` and `setPower(bool)`.
This app has bugged out on me and caused me hours of wasted time. 
Just over 7 Years working with PHP and not making nearly enough ;)
Same, but I use ant instead of phing. Far richer plugin set and integrates natively with jenkins. Also [this](http://jenkins-php.org/) helped tremendously. Also, phinx for schema management.
You imagine it would be configured by your host, I would contact them and ask why it's not working. You mentioned the emails are going to your home directory, it sounds a bit like the `mailtodisk` application that comes bundled with xampp, it writes emails you send to disk for testing purposes.
Tjänare.
Ah, du med?
No. I'm Finnish, but in here it's mandatory to study Swedish for few years, so I guess I remember some words.
Haha, fair enough. 
i am down to roughly 100 /day used to be a lot more some years ago, but at least those 100 lines now are well documented, unit tested and everything!
Thanks
around 10yrs and i both work for a company and freelance: freelance around 533.76$ / day and fixed is 2868.96$ / month + meal vouchers, insurance, cellphone, laptop, ... 
Also http://www.phptherightway.com/
Do you usually take on big projects (taking around 3-4 months) when you're freelancing?
Yes, you can save them as files.
The return value of the mail function just says that the mail server (or mail command if PHP is using that) accepted the mail to be put in the queue. It has absolutely no bearing on when, where or even if the mail was actually delivered. Assuming the content of the message is exactly the same as what you sent, check the headers, particularly "Received" ones, as that will tell you what path the mail took to get to where it is. You could also try a different address, such as a gmail or hotmail account that should definitely be delivered externally (mail servers can treat email differently if they think its addressed to a domain they are supposed to handle).
Does Composer have PHP extension dependency checking of any kind yet? Last time I tried it with Symfony, it spent a long time downloading and extracting packages, and then just suddenly failed because something in Symfony needed one of PHP's many XML/DOM extensions (I forget which exactly)
You should read this: http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X This helped me a lot when getting used to OOP and how to practically use it in my apps.
I'm with you on this one. Also, when you find the PERFECT thread on stackoverflow with the SAME exact problem, and all the answers tell you to rewrite everything you have to "make it easier". I know in the long run that's probably true, but when you've wracked your brain trying to get something to work for a while and someone tells you to undo all that work, it's so frustrating.
I'm not overly sure to be honest, but I switched to Postman and find it a much better product.
i'm also from .be :)
$44k here, US. 2 years in. Although this is mainly a Drupal Dev position, I do tons of work with the old PHP apps. I'd say the majority of my core job function is PHP.
In Montreal, about 63k with 2 years of PHP experience, but I have a few years of experience in other languages. It seems very hard to find new offers over the 55k mark though, and most devs here make between 40 and 50. I thought the salaries were MUCH higher in the US, 50% more or so, I am surprised by the results in this thread.
I think you can say it now, none seems to make 100+k yet :P
Yes, you can require extensions like so: "require" : { "ext-intl" : "*" } 
I don't think there's a ton of people earning 100K plus, but there's enough. My company is located in Chicago, and I'll give you a rough breakdown of my team's salaries, jiggled around a bit with names left out so nobody knows what company I'm writing from :p * Lead Developer: 104k, 5 years PHP, 12 years Overall * 2 Senior Developers: 72k, 65k, 3-6 years * 2 Mid Level Devs: 50k, 55k, less then 3 years for both * 1 Entry Level: 40k, his first job And we've had difficulty hiring people for our mid-level positions because we're not paying enough. This company is located in the suburbs so its not nearly as expensive to live out here as in the city itself (we're about 30-40 minutes from Downtown).
Idiorm and Paris might be what you're looking for: http://j4mie.github.io/idiormandparis/ For more 'heavy lifting', i'd suggest Doctrine.
 if ($fruit-&gt;apple instanceof Orange) { // I'll be fucked if I know what is happening }
I think much of this depends on your geography. What part of the world you work, in the states, what city/state etc. In the Los Angeles, CA area. I'm in the $90+/yr range. It's not as much as it might sound, because everything cost more, especially if you commute a lot. Everything is relative.
Shove in `"preferred-install": "dist"` and it's SO MUCH quicker, and uses a cache too.
Unit testing with Guzzle/Buzz is suggested by many but its SO wordy and verbose, you find yourself repeating a lot of the same obvious code each time, and thats no fun. I like to use Behat for this. Feature: Users Scenario: Listing all users When I request "GET /users" Then I get a "404" response Scenario: Listing select users When I request "GET /users/1,2" Then I get a "200" response And there is a self hypermedia link And there are optional hypermedia links: | link | method | uri | | next_page | GET | /users/1,2?page=2 | And the "users" property exists And the "users" property is an array And scope into the first "users" property And the properties exist: """ id name gender picture_url cover_url location timezone birthday joined moment_ids friend_ids """ And the "id" property is an integer And the "moment_ids" property is an array And the "friend_ids" property is an array And reset scope Scenario: Try to find an invalid user When I request "GET /users/nope" Then I get a "404" response With your FeatureContext set up nicely you can just smash out text like this and cover a huge API in next to no time. 
You could try hitting up Pablo Godel (https://twitter.com/pgodel) from Server Grove, I'm pretty sure he mentioned they are using Ratchet in production for their web terminal thingie
I'm trying to get conversation going about the topic in here.
You'll *never* learn good, responsible use of OO practices from a few tutorials. If you were hoping you would, you're in for a bad time.
My experience has been similar with components claiming to be standalone. They've always had some bleed over into the frameworks overall implementation. I'm not working with a small app and so even with the heft of something like Symfony's form component in the long run I am saving code because of the current method for handling forms. I can only hope that Symfony has gone over some overhauls since the article and maybe pulls in less than it did before. 
Would you say you live well on that with regards to the high cost of living in Sweden?
63k in nyc as the sole developer
I think it is because a lot of those concepts can't be covered in a single tutorial -- they have entire books dedicated to them -- and the tutorials you see are just taking those concepts and demonstrating bits of them piecemeal, since it would require a non-trivial amount of time and code to actually give a demo showcasing all the finer points of their use. Just like with many concepts in programming, the benefits won't be immediately obvious or make sense with a small demo, but you can at least see how to implement it. It's sort of understood that you understand that underlying concepts, because if not, it's more material than a simple blog could adequately convey.
Interesting to find a Tool reference in /r/php. 
I work for a regional sports network. You are correct. I'm making so little because I lowballed myself at my first job. I asked for $45,000 to which the hiring manager said, "wow, that's low". I've been paying for it ever since. EDIT Forgot to mention that I'm a WordPress developer. The high paying developer jobs around here are usually for Java or Ruby, specifically using the Rails framework. PHP is not dead, but it's definitely not as popular as it used to be in the early 2000s. I don't plan on retiring at the company I'm at, so, I'm brushing up on my Java skills so I can, hopefully, get a higher paying gig.
Yes, you don't want to redirect to a 200 because you are technically saying to the client "This request worked" when it didn't. For example if the page is missing, that response code should be 404, not a 302 then a 200, because that is a false positive.
I came to PHP without any formal training in any language. In order to learn OO I got a Teach Yourself Java book. It taught me the basic principles of OO which stood me in good stead when moving to PHP4.
Why are you trying to take away [our version of compiling](http://xkcd.com/303/).
I had been using PHP for a couple years before I got a grasp on OOP. It wasn't until I took a couple Java courses that it made sense to me. Knowing OOP concepts first makes it easier to implement them in PHP.
I haven't touched Java since taking a few courses years ago, but it has made me a much better PHP programmer.
Dun dun da da, dun dun, da da, duh duh
I'm trying to use this on my server, I just tested it on XAMPP and it works fine. However as soon as I put the code online to my server which is hosted by name.com, it doesn't work. It just stored the emails in Home -&gt; Mail -&gt; New
Sweeet didn't know that! I'll have to look into it
You probably have that kind of stuff in pyrocms just to fuck with people.. I'm just going to modify the core php fi... ^what^the^fuck
Similar here... 9 years, $95k in Seattle. In sweatpants. No Crocs (not judging). And socks.
I make $135k as a senior PHP software engineer in a smaller company. I have about 1 year of real industry experience (in any capacity) and many more years of personal projects (in many languages / capacities). I can talk architecture, realize that PHP is terrible at many things, and develop applications that scale. I make use of various web standards and I am very familiar with different libraries that exist, not so that I can use them but rather so that I can use similar concepts and constructions within the codebase that I am working on.
&gt; PHP extension dependency checking Something that is done much less than it should be. And I don't know why =\
I come across a fair number of good articles just from reading this sub. But I know the feels, it sometimes takes a lot of googling to sort through all the mediocre content out there and find something useful. Stack Overflow is a great resource though. I always look there first.
63k in nyc? how do you eat? please tell me you don't commute
Yeah sure, data mining and averaging helps if you're trying to gauge what you're worth but sometimes it's good to hear real numbers from real people just to see what is out there, and not what some website *thinks* is out there.
Good read about Symfony Form here: http://webmozarts.com/2012/03/06/symfony2-form-architecture/#comment-17713
I make the equivalent to $ 17,500 USD a year, and I work with PHP for 6 years.
I'd agree about location. I've actually just accepted a dev position in London for a significant salary rise, but I am if the opinion that it is uncooth to discuss how much you earn! From my recent job hunting experience though it does help if you have significant experience with a certain framework or platform. Edit: I'm a drupal dev with 6-7 years php experience
I think you are referring to pagination.
30k€ a year so ~40k$, it's my first job, been here for ~6months and I have no diploma. Working in Paris, France! EDIT: Forgot to add, we've got bonuses, if some objectives are met (and they are) we gain an additional 1/3 OR 2/3 of a month salary (based on a two step objective) in june and december. EDIT 2: Forgot to add, meal voucher, insurance and I've got the "Cadre" status, don't know if there is an equivalent in USA/UK/Wherever, basically I get a better retirement pension but that's in 40 years or something :D.
i live in the ghetto and don't save. it's something of a struggle.
Shameless self promotion here I created [Paginator](https://github.com/mardix/Paginator), a simple class that allows you to create pagination. It doesn't require any database connection. It's probably what you need. 
That is exactly what I am talking about. Thank you for the quick reply!
Having multiple naked variables running amock in your code that aren't well documented is, well, sort of the heretic to OOP. Switching to an object requires change, and change is not always cheap, but what's wrong with passing these around as value objects? I don't see it as carrying OOP to the point of crazy - that's usually reserved for overengineering something (and we've all overengineered stuff at some point!). If you still feel bad, you could use an associative array instead. The downside to the array is you can't parcel the logic you use to translate your time vars with it. 
65K per year. Los Angeles. 5 years experience
France - Lyon I'm actually in an internship (3 year of college and counting) and this is what the market is from jobs offers and friends actually working in. no college or diploma : minimum wage which is almost ~14k€ (SMIC) 2/3 years of college : entry level ~20k€ - 25k€ 5 years of college : entry level at ~30k€ All figures are "brut". You have to take into consideration, we have bonus (healthcare,meal vouchers,13rd month ...) This is common to almost any developper position. For Paris you could easily add 5-10k :)
I currently work for a company that is just starting our scoping session for the next version of our application, and Websockets are a large part of the technology stack. So... we haven't used it yet, it's part of the scope. I suppose I could come back in 6 months and tell you how it went.
12 years experience with PHP. (Experience with many other languages as well.) Technically my title is Senior Backend Developer. $95k/year salaried + good healthcare + flextime + meals &amp; events + $100k class A stock options I should be getting a raise in the next six months to around ~$110k-120k at least.