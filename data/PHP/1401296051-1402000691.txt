Value objects was the term I wanted to use. However my definition was very bad. I just modified it. Do you find it to be better?
&gt; HHVM is a rewrite. From the ground up. **Using literally none of PHP's code**. Please be more careful. Large amounts of the standard library and extension code is directly ported from zend to hhvm. The engine is a rewrite sure, but the runtime is mostly ported not rewritten. if we are talking about being careful with our facts, then we should be careful all around. &gt; Both HHVM and PHP have extension mechanisms to write hooks to lower level code (PECL for PHP, and a C++ layer for HHVM). Both work differently, but both work. There's a HUGE amount of code out there in PECL extensions, it's one of the reasons PHP is popular with large sites. As long as I'm mentioning things(not saying your wrong), HHVM includes a compatability layer that allows PECL extensions(with some caveats) to be compiled against and run inside hhvm. This is still a work in progress, but a community developer outside facebook has been doing a great job getting this working in the last few months.
&gt; Large amounts of the standard library and extension code is directly ported from zend to hhvm. **citation-required**
I disagree entirely. But this bit, in particular: &gt; Some people using type hinting often argue that it enhances the "degree of confidence that your code works" because a method will only accept parameters which respect a "contract". So type hinting somehow produces some "better" code with "fewer" bugs. Somehow? I would have thought this to be really obvious. 1. You can catch bugs earlier, often in your IDE because it's smart enough to catch type issues 2. When bugs resulting from passing the wrong type do occur, they occur closer to the bug's origin (failing to match vs. a function or property not existing 3. Code is more descriptive and easier to understand - if I ask "what gets passed into this function", I know it's constrained to something that implements that interface. 
This would be better asked in /r/css. This is not relevant to PHP. And there is a standard. You just need a CSS reset to remove a lot of the default styles that browsers put on (as those vary). Check our normalize.css or another CSS reset.
You could always switch to a cache system like Redis/Memcached that will expire keys for you. You can also run a cron every minute or so that runs something like this, which is what Capistrano uses to clean up old releases: ``` ls -1dt /path/to/cache/* | tail -n +1001 | xargs rm -rf ```
Ignore me, I was slightly trolling (bad day at work). But on a serious note, the name of the property suggests there is only a single service for doing anything user related, hence me saying it sounds like an anti-pattern :)
Fair enough. I'll edit the original post to clarify "from an engine perspective".
For whatever it's worth to you, the author (a colleague of mine) has contributed to multiple high-adoption PHP frameworks. So that may be something to take under consideration.
I think the things we have typehints for right now are already the least likely to cause type-related bugs, just because they're so dissimilar and distinct. It'd be hard for me to accidentally pass in an integer instead of a callable, or vice versa, for example. If we ever get scalar typehints, I expect I'll be singing a different tune, though.
Never assume you have a license to use anything. Unless you have been granted explicit permission personally or via license, you don't. Even if there's no license, you never have implicit permission.
http://lmgtfy.com/?q=free+forum+hosting There are a ton but the top results on google all should be fairly good. (Just a heads up this subreddit is more for geared towards things pertaining to PHP specifically)
&gt; I don't really want to be involved in something like that – does that make me too fussy? Not at all. There's no point learning a load of bad practices at the start of your career. Plus if you know more than them or at the very least code better, then you run the risk of upsetting a few egos. Also there's absolutely no excuse for mysql as the docs make it very clear those functions are deprecated. You have to be pretty lazy or incompetent to not spend five minutes converting to mysqli
I feel like I've come in to season 5 of a 300 episode soap opera. Can you explain what StatsD, Graphite and Grafana even are, and why, as a reader, I should care?
This doesn't necessarily fall into the PHP category, but alright. There are a wide range of forum hosts, and each one has it's benefits. ProBoards, ZetaBoards, Invision, Forumotion, CreateAForum, FreeForums, prophpBB forums and so on. My suggestion is to look into every one of them and see which one has the features that you'd most like, as different people will recommend different hosts.
Code structure isn't the worst I've seen, but this is a bunch of nope. public function setPassword($password) { if (!empty($password)) { $this-&gt;password = hash('sha256', $password . $this-&gt;salt); } }
They went alright, and swimmingly compared to this ... I'd definitely appreciate you writing for a blog if we get it going, I really just wanted it to happen, don't care who really writes so long as they have a clue ... 
I considered it to be a compliment until you said "oh anyone with half a brain." Friendship over.
Why didn't you just use Twig for the templating engine? Your templating engine is just a PHP file with abbreviated brackets. That means that all the security concerns you *might* have with a pure PHP template still exist, and it isn't any easier for designers. Plus it also means you needed to create your own implementation, which may or may not be good. It also means that any Twig templates need to recreated in your templating system. EDIT: I didn't actually even touch on the worst part of your templating system, which is that it doesn't enforce separation of the view, so parts of the controller can start very easily leaking into the templates.
I think in most frameworks this would be replaced with the entity manager (to use the Doctrine term), because the user is something that requires a persistent data store.
:D
Not sure how you're getting that from the description; if anything, the response-related portions of the Controller are placed into the Responder, and the Controller itself is split into separate Actions. There are no significant differences between the Model in MVC and the Domain in ADR.
As with a Model in MVC, the Domain in ADR might well be a Service Layer that encapsulates much of the application. There's no guarantee that a Model won't be tightly coupled to the database due to poor judgment, so there's similarly no guarantee that the same poor judgment would also could a Domain layer to the database. To reiterate, ADR is a refinement of MVC; it addresses only the parts of MVC that seem to be a poor match to web applications, and leaves the rest alone.
Thank you! I'll keep looking :)
Yeah true. Although I like my own entity specific managers to encapsulate custom event dispatching without tying myself to a specific ORM
My mistake. It sounded like you were advocating rolling your own releases. Alternative PPA type sources might be a better idea as you suggest. Haven't done much analysis on this. 
What do you think of carbon and graphite. I was looking into using rrdtool but this might be a better way.
Awesome thanks for the links. Looks like I need to try it out.
Small note: You can create a DigitalOcean/Rackspace/Amazon/Local server with Nginx + Hack via www.puphpet.com if you don't want to do this manually.
I don't think most people are as beholden to the documentation as you think. Anyone coming from experience in any different language that did this probably just did &lt; or &gt;without even thinking about it. Anyone new to only php probably didn't know enough to even think strings might be different from everything else. Turning to the documentation at that level of detail is for when things *don't* work. Why spelunk into the depths of the depths of the technical documentation when you can just try it? I've been doing PHP a long long time and I was also about to post a "mind if I ask how you've been doing it?" when I remembered strcmp() and guessed that's what you were doing. 
Drugs. This guy has to be on drugs.
Learn programming is a better sub for this 
$operator turns to $op, and the error message doesn't say the operator is invalid, it tells them instead to only enter numbers. This calculator won't work.
Why 13.10 and not 14.04 LTS?
I saw a bug yesterday that, although it didn't result directly from the lack of type hinting, did result directly from the careless reliance on dynamic typing in a way that type hinting would have completely prevented. I think whether or not it happens has as much to do with programmer culture and professionalism as code complexity. That said, I agree with your other post that scalar type hints would *drastically* change the landscape (for the better).
/subscribed
He seems to be talking about runtime polymorphism, not multiple inheritance, and he's correct in his observations about that (i.e., program to interfaces, not implementations). You didn't miss anything, though.
I think you were suggesting it was an unprofessional post and inappropriate for the front page of php.net, but jaitsu took you to mean that the devs shouldn't be doing anything but developing php all the time. 
So, last week I stumbled upon a function called getSize(), which is supposed to return the size of a file but, for some reason, it returns an array of metadata. It took me some time and a few questions to realise what was going on there, so usability and maintainability is definitely affected by this. Is this coding lingo? or is it bad naming? or is it a sign of poor design and need for re-factoring? I have my opinion about it but would like to get some other view on this just to check my own judgement...
I could do with a hand actually, I'm pretty new to web design etc. I've designed a site, using HTML, CSS, PHP etc. its www.wessexdemolition.co.uk/sub but my contact form isn't working. When I submit any message its shows a page saying 'the resource you are looking for has been removed, had its name changed, or is temporarily unavilable.' Any help will be useful I'm sure, thanks.
That is because the form action points to contactengine.php, which either does not exist, because when you go there, you get a redirect page, that shows you an error. So either you need to create contactengine.php or edit it, so it actually does something with the submitted form data.
Well it does exist but I may have to edit, I just don't know what ha, the code in that contactengine.php is as follows: &lt;?php $EmailFrom = ""; $EmailTo = ""; $Subject = ""; $Name = Trim(stripslashes($_POST['Name'])); $Tel = Trim(stripslashes($_POST['Tel'])); $Email = Trim(stripslashes($_POST['Email'])); $Message = Trim(stripslashes($_POST['Message'])); // validation $validationOK=true; if (!$validationOK) { print "&lt;meta http-equiv=\"refresh\" content=\"0;URL=error.htm\"&gt;"; exit; } // prepare email body text $Body = ""; $Body .= "Name: "; $Body .= $Name; $Body .= "\n"; $Body .= "Tel: "; $Body .= $Tel; $Body .= "\n"; $Body .= "Email: "; $Body .= $Email; $Body .= "\n"; $Body .= "Message: "; $Body .= $Message; $Body .= "\n"; // send email $success = mail($EmailTo, $Subject, $Body, "From: &lt;$EmailFrom&gt;"); // redirect to success page if ($success){ print "&lt;meta http-equiv=\"refresh\" content=\"0;URL=contactthanks.php\"&gt;"; } else{ print "&lt;meta http-equiv=\"refresh\" content=\"0;URL=error.htm\"&gt;"; } ?&gt;
Look at this, this may help with your error handling. But make a backup of current code first. http://pastebin.com/pfUB8wj4 Also you may not want to do a redirect after trying to send an email, as that may cause problems. If contactthanks.php does no special programming, you may want to do just an include instead. Also if errors do occur, you should definitely not redirect to an html page, instead to a php page, where you can pass what the exact error message is.
I am working on a collaborative wiki calendar Open Source at http://ican.openacalendar.org/ Dunno if you fancy having a bash at one part, but https://github.com/JMB-Technology-Limited/ParseDateTimeRangeString is a library for parsing free text for a date and time range. eg. pass in current time, timezone and a string like "Friday 7pm to 10pm" and get 2 DateTime objects back. It's one separate class, and it comes with a whole bunch of unit tests, some of which are currently failing. If you wanted a small self-contained project to bash at and see if it could be improved ... that's probably a good size. There are no issues for things to work on .... just failing unit tests!
So copy the code you've posted into the contactengine.php, then obviously add the email address I want the messages directed to. I don't think contactthanks.php does anything special but I'm not entirely sure, I got this code from http://css-tricks.com/nice-and-simple-contact-form/ I don't understand about the include? Create an include and put the redirect code in that? Sorry, entirely new to PHP really.
Have you tested the mail function to make sure it works 100%? When I am testing new functions I am unfamiliar with. I create a test-somefunction.php page, and then put in a very basic demo. That way I can simply cause the functionality to be executed, and it's an easier way to debug and error test, then having to go thru complicated page logic. So test to make sure that is correct. Now for example, if your using the mail function, but the server hasn't been setup to accept email requests, then the contact us page, will do exactly nothing. Unless your web host, is already pre-configured your php.ini to use their mail server. Okay that is why I am helping you. There is a lot to learn, when mastering any new technology or technique. There is especially a ton to learn, in what not to do. Verify everything, then trust it. You have to verify form fields, make sure they hold data, make sure to prevent any sql injection or other attacks. Plus maybe some type of spam protection, to make sure the end user is an actual living person. But let's start with the following list of things to be tested and confirmed by you. 1. Does the actual mail command work in sending emails to you. 2. I would avoid doing meta redirects, especially when it comes to submitting form fields, as that can cause glitches in form data, and cause your form to error or just not work. It is fine in basic html, but screws everything up, when doing any real programming. Something to do with the html headers. Form validation is also important, there are so many abusers, spammers, idiots, criminals, out there, you have to make absolutely sure the data you work with is 100% verified clean. Here is the basic logic of what I did. 1. Verify the form field actually exists 2. Verify the form field holds any data and is not empty or null. 3. If it holds any actual data, pass that on to a local variable 4. If not form data, trigger an error, so the form goes to an error page, instead of executing. And this is just a very basic and simple form validation, there are far more complicated methods, but let's try to keep it simple at first. Look at the code I created, try to follow the logic, read the comments. Good luck.
I also do remember in other projects over the years, what a pain it is, converting human readable date/times into system date times. This is why so many sites used standard date/time entering dropdowns, etc, instead of asking for human readable format.
Alright man, thanks for the help. Much appreciated.
Is it me, but I prefer using the documentation as my book of cheats?
Not really a cheatsheet, but this is my port of call for function reference: http://devdocs.io/
Why not just use New Relic?
Hi! There is an RSS feed of my english posts here: http://blog.pascal-martin.fr/feed/tag/english
Since you've solicited help, I'm going to take a leap and assume you're also interested in code quality advice: 1) Magic quotes should be disabled on a server level. It's rather concerning that your server has them enabled. It implies that the admin has no concept of proper PHP configuration and/or that the PHP version is ancient. 2) `trim` not `Trim`. PHP doesn't technically care, but it's jarring to see a case-different version of it. 3) You need to verify that email from is a properly formatted email address, or at the very least that it doesn't contain a newline. Your code is currently open to what's called header injection. In short, someone can provide craftily formed extra data as part of the from field and then inject their own fun headers into the email. Note: if this is anything but a low traffic site with very simple code, I would consider using some kind of mailing library. `mail` provides a rather mediocre interface (as evidenced by this *very, very* common security mistake), and it does not scale very well in terms of performance (though you would need to be sending quite a lot of emails for this to matter). 4) Don't assume $_POST (or any kind of super global request input) fields exist. In other words, use either `filter_input` or wrap all access to request super globals in `isset` or `empty` conditions. Notices are issued when you access non-existing array keys. Best case that floods your error log and it's annoying. Worst case it exposes sensitive data like file paths via error output to the browser. 5) As long as you're loosely comparing, use `!$var` rather than `$var == false`. It's clearer. If you actually care that the variable is not only true but of type boolean, then of course use `$var === false`. (Whoops, just realize this is in the 'revised' code and not yours. Oh well, still worth noting.) 6) Your first error check and redirection is a logical contradiction. You just set `$validationOK` to true. Why would you bother checking if it's false right after that? 7) Your building of `$Body` is rather weird and uses too much space. At the minimum put each item on a single line (e.g. `"Name: {$name}\n"`). 8) If you're not leveraging the benefits of double quotes but you're subjected to the drawbacks, use single quotes (i.e. `"&lt;meta http-equiv=\"refresh\" content=\"0;URL=contactthanks.php\"&gt;"` is much cleaner as `'&lt;meta http-equiv="refresh" content="0;URL=contactthanks.php"&gt;'`). 9) All you're outputting is a single meta tag. That's invalid HTML. Yes, all browsers will handle it correctly because they're forgiving as can be, but since I'm being pedantic, I may as well point out that it's completely invalid. 10) Don't use a meta tag. Use `header("Location: ...")` to send a header instead. Note that the HTTP specification requires that `Location` headers have a complete URI. That's a complete pain in the ass to actually do though, so just be aware that though it's technically wrong, the entire world just does `header("Location: blah.php")` rather than `header("Location: http://.../blah.php")`. (It's surprisingly annoying to generate the full URL dynamically and hard coding it leaves you open to all kinds of find-and-replace woes later on. This means it's simpler to just use a relative URL and leave it up to browsers to roll with it. If you're redirecting more than once or twice across your entire application, write a simple `redirect` function that actually handles it properly.) Shameless plug^1: if you're a sadist and have enjoyed my rude (though hopefully helpful!) picking apart of your code you may find [codereview.stackexchange.com](http://codereview.stackexchange.com/) a worthwhile place. ^1 I guess it's not really a plug since I have no monetary interest or stake in the site. I'm just a semi-frequent contributor who enjoys reviewing PHP :p.
documentation is not always the clearest source for information, I often get lost in composer documentation, whereas the nice overview in the included composer cheatsheet makes things a lot clearer (or provides better context for the documentation)
I may actually have a need for something like this later this year. It looks interesting. Are you running it from the VM or is that just for development/distribution/showcasing?
There's an awesome cheat sheet site that I know of (ok, that I built and continue to shamelessly promote): [Cheatography](http://www.cheatography.com). You can build your own cheat sheets, and download cheat sheets built by other people. There are some you might have seen before: [Regular Expressions](http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/), [Linux Command Line](http://www.cheatography.com/davechild/cheat-sheets/linux-command-line/), [PHP](http://www.cheatography.com/davechild/cheat-sheets/php/) and [AngularJS](http://www.cheatography.com/proloser/cheat-sheets/angularjs/). And there a growing collection of [links to cheat sheets on other sites](http://www.cheatography.com/external/).
[http://phpmentoring.org/](http://phpmentoring.org/) Has an entire list of people looking for help/mentorship. As well as a list of people looking to be mentors.
This is just for showcasing/getting started in a VM. When i get around to deploying it to a real box there are few things i would tweak: use SSL and basic auth, not install everything in /home/vagrant, and probably use [supervisor](http://supervisord.org/) to ensure StatsD stays up.
I don't think that's lingo, I just think that is somebody using a bullshit name. Both are an equal offense. 
If you're on OSX, how about all docs in one easy spot with quick hotkey access? http://kapeli.com/dash
To be honest, none of that code is mine as such, I used http://css-tricks.com/nice-and-simple-contact-form/. Thanks for taking the time to try and help with all that information you have posted, but as I said I'm new to PHP, I wouldn't consider myself even a novice or whatever at this stage. Some of what you have said makes no sense to me, hopefully I will understand it one day! Thanks for destroying the coding I used though :P ha
The font-weight set on the nav elements :hover changes the width which the type uses on the page, so it pushes other elements to the left by that extra space. Remove it and utilize another property which won''t affect the layout like box-shadow or outline.
True, thanks for that. I've just taken the weight away, it isn't needed.
Nice tool, thank you!
I had someone tell me that intolerance in the PHP community wasn't an issue because it "wasn't that common." The issue isn't whether sexism is a common occurrence, it's whether efforts are being made to address the instances that do occur, no matter how infrequent they are. And there's nothing wrong with a organization devoted to that end. I am under no delusions as an American white male that I am, in many ways, thrice privileged. I take neither guilt nor pride from that fact; I simply direct my efforts to not further propagate the unfairness.
&gt;Published October 19, 2007 Yeah, don't use that.
Jesus, the spam that this guy is using to promote this shit is unbelievable.
Absolutely. I've met a lot of people who havent seen problems so assume there aren't problems. I feel like that is kinda natural in some ways but people need to educate themselves to the problems in the community if they want to be part of the solution. I can't link to this enough: http://dayssincelasttechincident.com There is some serious shit going on. Not all of it in the PHP community, but some of it is for sure. And to be honest, who cares if its in Ruby or Python, this is the same for all of us.
Why not get involved in PHP ? You don't have to have strong C fu, or any fu to be useful, here, pick a subject: https://bugs.php.net/stats.php Take a subject you are interested in, research the bug reports, try to confirm, deny, expand upon and even hopefully close them. All of the documentation is written in XML, it is by far and away the biggest project needing the most people, you can start on documentation bugs if you know how to use PHP and XML ... &lt;/appeal&gt;
Dash also has cheat sheets. Note: I'm Dash's developer.
That it does. And I use the Alfred integration regularly. Bless you a thousand times, sir. May a billion people buy Dash in the next 24 hours.
I agree this *does* sound like a good use case for memcached/redis as long as there is plenty of memory on the machine. It'll likely be significantly faster than file caching too.
&gt; I guess I'm just trying to give another real world example of why locking software down isn't a good solution to version clashes. Never said that locking software down was a good idea - its definitely not. I was just saying that the best way to keep the production server up to date is to first do it in dev - what if bringing it up to 5.5. didnt just spew some notices, but actually made it fail? but in a fairly simple way - that you could patch in your legacy system? Sure you'd have to balance the risk of altering a non-tested legacy system vs the risk of having outdated production dependencies, but you cant evaluate that risk on production at all. In dev you can at least look at things. You have your dev matching production, you upgrade, it fails, you fix it, then you deploy your upgraded dependencies along with your upgraded application, and you've reduced risk of production failures.
Does it link to the last reported incident?
I don't think you really want it to. The answer is always 0 because its always happening, its just not always being reported. To me though - as we saw with PHPDrama - pointing people to the latest incident really just makes it reach a critical mass of dumb very quickly as people jump in to "defend white men" and/or to shout at whoever spoke up about the problem. I've been wondering what platform would be best for people to post incidents in an anonymous fashion and without a comment feed, to help avoid the poster having rage and vitriol thrust in their face. Not everyone wants to use their name, but people need to share their stories. 
the stuff I should be doing is fairly simple, probably not worth your time
&gt; You've been brainwashed, seek immediate medical attention Brainwashed by what? I've lived in ultra-conservative rural America my whole life, and see firsthand the sharp edges between privilege and exclusion every day. While our society continues to take halting steps forward, it has not "arrived" and most likely never will. I've experienced my own advantages and rare disadvantages, so my understanding of it is neither theoretical nor rote.
And the best part is if you do help fix a couple bugs you can then put that on your resume.
&gt; The answer is always 0 because its always happening, its just not always being reported. Ah. I thought I might have been missing something. Clever, although the case could be buttressed by links to reported events (either news or blogs).
&gt; I had someone tell me that intolerance in the PHP community wasn't an issue because it "wasn't that common." If someone told me this I would explain to them that this is just another symptom of the very problem that needs to be addressed. With less than 50 animals left in existence [amur leopard](http://www.allaboutwildlife.com/amur-leopard) poaching isn't a common occurrence either but with each incident the effects become more devastating.
There was no code to copy in the article.
Wasn't out when author started working on the article?
I am one of those who upvoted the post and *you*. &gt; However, when I start to see posts like this[1] Yep, that is a horrible, horrible "article". Drinkups are rape culture?!?! Come on, that is SRS/Tumblr territory and no intelligent person (regardless of gender) should stoop to that level. &gt; Articles like this[2] are hardly calling for civil discourse. This article is much, much better than the previous one but the author doesn't seem too interested in a civil discussion either. Yes, I am very, very aware that our industry is extremely sexist and downright hostile to women. But no, "article"s like the above (especially the first) are not only completely ineffective in solving this problem, but they are making it worse by antagonizing those who we are supposed to convince...
I made a vagrant box with 12.04/HHVM/nginx if you want to get a local environment up and running quickly. I should probably add DigitalOcean as a provider. https://vagrantcloud.com/speg/hhvm
There's also Zeal for Windows and Linux. http://zealdocs.org/
Brainwashed is a pretty ridiculous term to use. Understanding the context in which you're allowed to thrive while others languish is the heart of empathy. That doesn't mean I subscribe Tumblr SJW idea that because I'm privileged my thoughts and actions have no value and I'm an "enemy" with no possible recourse, to the contrary, I think that's equally ridiculous.
What a stunningly beautiful animal.
What did he ever do wrong?
/u/fieryprophet didn't say that _only_ american white males are privileged so none of your points make sense. Certainly, for example, an affluent 23 year old black woman living in Los Angeles enjoys more privileges than an 14 year old Afghani boy living in a hut in the Kunar province (a point that many tumblr SJW "all men are the devil" types forget.) The point is that it's useful to understand and acknowledge that context so you can empathize.
He has argued on the internet, repeatedly. I did chuckle at the paraphrase attributed to him in the OP's article, since it is pretty much a given that at least some of the people on the other end of Phil's arguments thought he was being a dick.
Maybe this will help: https://gist.github.com/edcharkow/5887675 . 
As the OP, I'm always open for civil discussion at any time, but not really on reddit (which is why I didn't post on here myself in the first place). I hope you're not referencing my article when you say "making it worse by antagonizing those who we are supposed to convince". My only intention was to make it clear why myself as a person am proud to be associated with an organisation like PHP Women.
This is awesome. I just made it a FluidApp.
Hi! Your article was great and I agree with every word of it. I was referring to [this](https://medium.com/the-power-of-harassment/drinkups-are-rape-culture-29ea1546e91d) when I said "making it worse". &gt; My only intention was to make it clear why myself as a person am proud to be associated with an organisation like PHP Women. That's great, it *is* something to be proud of :)
So firstly I'll agree with you that privilege is a poor word to use but it's the word that's currently used. I would personally call it advantaged. &gt; And how do you know this? Is the boys 1 male privilege worth less than the woman's 1 American privilege. Are you being intentionally obtuse or are you genuinely asking a question? Can you not see the difference between being a rich adult living in a first-world economic superpower in one of the most connected cities on Earth and being a child in one of the poorest, most violent regions in the world? &gt; What if the affluent woman lived in Los Angeles and the Afghani boy lived in Los Angeles, does the boy now have more privilege. There certainly are weights, money probably being the biggest one. Wealth, race, gender, weight, height, accent, clothing, there are uncountable variables involved in how people judge each other and some definitely make more of a difference than others. If you phrased your question as: if two people of the same age, of the same income, in the same city and one was a black woman and the other was an afghani expat it'd actually be an interesting question as to who had more advantages in everyday life. But you didn't, you phrased it sarcastically with a heavy dose of pretension. 
http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/
Not so. Look at [his own screenshot](https://lh5.googleusercontent.com/T-zY-VM8NhjVDEGXY5U5Kh7P7Dg0bopBIOElRIv4ptC9ycs4uvg4Nlo6ePJm1U7xO8TP4OTAsYPB5px3gOfZOgQ5ZfoUURPZZD-jBDiqQHnT5Z4krsQiaMoh-MXth3CcNw).
I'll take a look at that.
Upload the file, open the file, read it, present read data in editor of your choice, write text in editor to file, and then you can have them download a new copy if you want. pretty simple unless you want more capabilities than this. 
PHP and it's frameworks are by design, easy to use. If you can't develop a basic, functional dynamic site with 2-3 weeks of PHP knowledge, there's a problem. So don't worry, you're doing fine. You're not somehow cheating. Here's the caveat: Being decent with PHP is easy, being excellent with PHP is *very hard*. PHP has a lot of very specific ins and outs that you'll only learn through endless experimentation with trial and error. When can you say you "know" PHP? It's up to you. Maybe when you've confidently written your own package that combines a DAL, ORM, Routing Model and UAC with a full backend CRUD system. Maybe when you just learn what those acronyms mean and can implement systems that do that for you. **tl;dr - You're not cheating. Getting started is intentionally easy.**
I actually need some experience for my internship coming up. If you want to work on a little project that'd be awesome
This is the first time I'm hearing about Fractal. How does it compare with Zend's Apigility?
Every physically printed book about php is outdated the moment the ink dries. It's very much the same for javascript and node.js too. If you already understand programming, and I hope it's more than just javascript as I'll explain, then using [php the right way](http://www.phptherightway.com/) is as good as any book you'll find and it's curated by the community well. That should at the very least give you enough information to properly delve into specific topics further at your leisure. The reason I mentioned having programming knowledge beyond javascript is the way javascript is designed as a language. Most object-oriented languages are designed around class-based objects whereas javascript is designed around prototype-based objects. Even though OOP principles apply to both, the way it's done is fundamentally different in each. Just keep this in mind if classes are new to you.
What PaFileDB did was it stored the files on the disk, but held the records in a database. I think I found a copy of the code: https://github.com/nitrocell/paFileDB-3.6
yeah... or you could just use https://whoapi.com/api-live-demo.html
1. It's limited to 1000 queries per month, which i have in just 7 days surpassed. 2. It adds a middle man between you and your data, making what you're trying to do slower by jumping through hoops. 3. My goal with the post was to stop people from using the unreliable gethostname function.
I still stand by the murach book. ;) the mvc stuff is a little weird though... You can skip that. This book is just to make a foundation. Once you've got this stuff down something like code bright for laravel would be good. But really, doing some raw stuff with forms and mysql will really help everything else make sense later. 
Keep up the good work Phil (and Jason). Been using fractal for a while and it's a pleasure to work with.
Two rather different things. I was actually thinking the other day it might make sense to talk to MWOP to see if would be interested in implementing Fractal in Apigility. Anyhow, Apigility is basically a CMS/CMF (ohgod I said CMF) for API generation. This is just one tool for those who are going it alone. The main purpose of Fractal is to put a layer of logic inbetween your database and output, so you arent directly exposing your DB. This helps with that, and it helps you embed related data in a logical way. I have real trouble using words to describe everything properly, but this was born out of necessity. I built multiple APIs without it and it was horrible, now I can't imagine building one without it.
Minority discrimination isn't a problem in PHP — everyone receives equal abuse.
Haha you caught me! yeah it really is a great book, I'm going through it pretty fast.
I like the look of this audit log approach. The article doesn't cover it but are there any downsides? 
&gt; Timm Friebe wrote the RFC: Catchable “call to a member function of a non-object”, which aims to raise non-fatal E_RECOVERABLE_ERROR errors when one tries to call a method on something else than an object — like NULL, typically. Ughhh. I'm sure this would make Wordpress theme developers happy.... one more terrible shortcut they can sweep under the rug by keeping the error reporting settings in their environments as lenient as possible (seriously, the next WP theme I install that raises warnings and notices in my environment because the developers were lazy, I'm going to snap).
The php cookbook can be fun to go through...
The one that comes to mind first is a timing problem. If you have a volatile data environment relative to the potential Delete/Restore cycle, you can have problems. Do table structures change frequently? Do lookup table values come and go? Are relationships between data moving frequently? In those cases, a serialized snapshot of the deleted data won't restore cleanly. E.g., Delete line employee P.D.Q.Bach whose supervisor is W.A.Mozart. He was assigned to Project Baroque. Assume that a week later, Project Baroque finishes up and Mozart moves onto a new project. Restoring the Bach record from snapshot attempts to restore what is now bogus data.
Data security would also be a concern. If you're storing sensitive data (say, user account data) in the audit log, instead of soft deleting, you'd *probably* want to make sure you're not storing api keys, passwords etc as well. In that case, I can see the audit log being a large security hole and target if anyone discovered its existence.
Yes, the extreme ones do tend to stand out, but you're right, there were some really good reads on there
If you baroque it, you fix it.
I've used this one quite successfully on a number of occasions: https://github.com/adldap/adLDAP 
Are you describing something similar to a Hydrator? or am I missing what you're getting at?
Ive never met anyone in person that has finished that book. Have you? I read it all because I had spent several years beforehand learning through trial and error. Its a brutal read! Now that postgresql has range types and exclusion constraints, dealing with time-bound data is way more fun.
&gt; Seriously. Have you ever seen what they do to their chosen versions? The kinds of patches and things they do to them? The way they make modifications for the heck of it (in the grand scheme at least)? I've skimmed through the Ubuntu patchset for 5.5. Most of it appears to be workarounds needed to get it to build. There are patches to prevent PHP's build system from force-deleting the patches. A lot of the remainder is changing default paths or small things like having mysql connections work out of the box. And a few CVE fixes that weren't upstream at the time. Gentoo's package stays very close to unpatched vanilla source, though all of its 780-line build script appears necessary to accommodate PHP's build system doing things like breaking out of its sandbox in several places and mmap-ing files in the root directory. Can you provide concrete examples of wrongdoing where the distro is the one at fault?
Was it an interface like PhpMyAdmin? Or a library that interfaces with an existing DB engine?
&gt; FluidApp First I've heard of FluidApp...but I'm not a mac guy. You can turn any site into an app using Chrome on any OS.
I feel ignorant because I don't even know what a soft delete is, and I've worked with databases a lot. 
Yeah it's sort of like phpmyadmin. The main page has a list of categories, each category can have any number of sub-categories and files. The web app would keep track of downloads, last time it was downloaded, etc. I found a website with [it running](http://dpk.stargrav.com/pafiledb/pafiledb.php). I might just try my hand at modernizing the code I got from the guy's repo but I'm kinda worried about the license. I had contacted the FSF for advice.
Soft delete is when you have a column like "status" or "deleted" that you set to true when you delete a record. You're not actually deleting the record, but your app uses a where constraint to only get data where "deleted" is false.
New Relic now has insights that does more of that transactional data. May I ask what sort of app you are using this with where much of what you've described is anything other than "data porn"?
That is the opposite of what Fractal is for. :)
I am apparently very abrasive, which is part of the no-bullshit approach I take to life. I don't pad out my responses with extra unicorns and bunnies which seems to upset a minority of people, and I can live with that.
[Relevant StackOverflow question](http://stackoverflow.com/questions/8567114/how-to-make-an-ajax-call-without-jquery) The top answer shows you how to perform the ajax request. In the provided code, change the line that says xmlhttp.open("GET", "ajax_info.txt", true); to request the php file. You can add a query string in order to pass the variable's value. Something like this: xmlhttp.open("GET", "script.php?var=" + theVar, true); Then, you can access that value in your php by using $_GET['var'] (see [PHP doc on $_GET](http://www.php.net/manual/en/reserved.variables.get.php)) You'll also want to modify the section of the SO code that handles "onreadystatechange" to perform your desired tasks. This is the simplest method. It's probably a good idea to sanitize the data to make sure it isn't malicious (see [SQL injection](http://en.wikipedia.org/wiki/SQL_injection)) Hopefully that gets you started!
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**SQL injection**](https://en.wikipedia.org/wiki/SQL%20injection): [](#sfw) --- &gt;__SQL injection__ is a [code injection](https://en.wikipedia.org/wiki/Code_injection) technique, used to [attack](https://en.wikipedia.org/wiki/Attack_(computing\)) data-driven applications, in which malicious SQL statements are inserted into an entry field for execution (e.g. to dump the database contents to the attacker). SQL injection must exploit a [security vulnerability](https://en.wikipedia.org/wiki/Security_vulnerability) in an application's software, for example, when user input is either incorrectly filtered for [string literal](https://en.wikipedia.org/wiki/String_literal) [escape characters](https://en.wikipedia.org/wiki/Escape_sequence) embedded in [SQL](https://en.wikipedia.org/wiki/SQL) statements or user input is not [strongly typed](https://en.wikipedia.org/wiki/Strongly-typed_programming_language) and unexpectedly executed. SQL injection is mostly known as an attack [vector](https://en.wikipedia.org/wiki/Vector_(malware\)) for websites but can be used to attack any type of SQL database. &gt;==== &gt;[**Image**](https://i.imgur.com/vrWImOI.png) [^(i)](https://commons.wikimedia.org/wiki/File:KD_SQLIA_Classification_2010.png) - *A Classification of SQL injection attacking vector until 2010.* --- ^Interesting: [^Code ^injection](https://en.wikipedia.org/wiki/Code_injection) ^| [^Cross-site ^scripting](https://en.wikipedia.org/wiki/Cross-site_scripting) ^| [^Web ^application ^security](https://en.wikipedia.org/wiki/Web_application_security) ^| [^Hacker ^\(computer ^security)](https://en.wikipedia.org/wiki/Hacker_\(computer_security\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chui04w) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chui04w)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I agree, for sure. But the OP didn't mention using jQuery so I tried to keep it out of the answer. And anyway the SO answer includes an example of doing it with jQuery despite its title.
Fair enough. ;)
Nothing wrong with a no-bullshit approach to life. . .as long as you can correctly identify the bullshit.
Looking great Phil!
Yeah, I overall like this approach, and there are a lot of times where I think this is better than soft deletes. However: There are some cases where soft deletes are better/needed. A forum or commenting system, for instance, that allows you to delete posts/replies. As an admin I don't want to go crawling through audit logs/files to find a post that was deleted. I want to go to an admin page in the admin portion of the UI that shows "deleted" posts which are retrieved through normal database operations. There are other cases where legally you need to keep data, and soft deleting entities just makes things easier to keep track of.
Onreadystatechange will be called with a particular status code to indicate the output from the php script has been received. Ajax will call your script without reloading your index.php.
Whenever I want to use soft deletes, I find myself using logging in the end. They are not bad; the problem is restoring.
Can't help, unless you ask, and are clear what you need in. Don't sell your project short, I have all this time, so why not ask me, and let me determine it's timeliness and value.
Why not have a usermanager that group manager uses to manage persistence of users. Or better, have usermanager observe groupmanager for deletion activity to manage cascading. Not sure if i like using events for this because i am not sure it is the best way to communicate with code you control. i think events are hard to debug.
It breaks my heart that you think you need to agree with Phil on this.
&gt; Absolutely. I've met a lot of people who havent seen problems so assume there aren't problems. I have yet to see anyone produce reasonable evidence that there actually is a problem, or to what extent the problem exists. Let's be real here. Until we can somehow quantify it, someone saying "there isn't a problem" is just plausible as you saying "there is a problem". If this is "always happening" then we should be able to find (I'll just pick an arbitrary number, since I'm not sure what constitutes 'enough cases to be a serious problem'), at least 10 recorded and provable cases of sexism in tech in the last year. I think my biggest problem with the whole feminist tech movement is that when it comes to jobs, there's a fine line between "not qualified" or "not as qualified as another applicant" and sexism. It's quite common for staunch minority movements to come to a place where it starts with the best intentions, but then eventually every situation which isn't isn't 100% given to their advantage is then labeled sexism, racism, etc.
"When we soft delete the group we also expect all of the associated users to be soft deleted. " Why? I certainly don't expect that. I would never expect that. Other relationships, maybe, but a user is a distinct thing, and a group is a label I use to group/tag users. A user might be in multiple groups, for starters. Deleting a group should not delete a user. I understand the issue might be different with other types of entities, but this example is not a good one.
If you're considering some significant rewriting - you are in a WONDERFUL position to switch to [MeteorJS](http://meteor.com) -- basically ditch PHP on the server and HTML+JS in the browser, and just run JS on both. I'm a CakePHP developer for many years and starting anything new which *fits into Meteor well* I'd use Meteor... once you start, it's hard to stop. (NOTE: Meteor does not use AngularJS on the front end... there are many people who integrate the two, but if you do, it's kinda like wearing belts and suspenders... just stick with Meteor and enjoy)
"when we use soft deletes we are preventing the database from doing its job" Define what "its job" is. You always want just a snapshot of what data looks like *right now*, yeah, maybe you're right. This is a pretty narrow/naive view, imo, and the 'status' of a piece of data (deleted, visible, etc) is simply another aspect of data. Just because I've deleted it doesn't mean I don't ever want it around to be seen again - I just don't want it accessed as 'live' any more, but I certainly want to be able to see views of what data used to be there. Moving it all to audit logs as the primary/only way of keeping track of this sort of stuff is ... not really workable. Having a separate audit log of status changes with times would be useful to say "what was deleted during this time range?" but isn't something I see many mid-range projects doing (even then, you'd want just the IDs in the audit log, with full data kept in situ).
For your example, wouldn't it be just pretty straight forward? Just fetch the latest comment state from the "comments" table, and for the history, just fetch all from "comments_log" with the comment id, where comments_log stores all update/delete/insert operations from comments table. Seems pretty "normal" to me.
If somebody has access to your DB, the audit log security issue won't be the concern. Come on now, your entire database is exposed!
Further to your point, I get the intention too, but I think it's misguided.
Having 'access' can mean different things. Having an actual DB account with access to the server might be different than partial database log or dump files. Even just tasking someone on the team to look for data X in the audit log file now exposes them to other stuff that you may not have wanted them to be able to see. If they were in separate tables, you could control that more granularly. By dumping all changes in to one audit table, you're mixing data that used to be separate ("letting the database do its job"). Unless you're talking about separate audit tables for each regular table....
Why do all that when I can just select where deleted=false? That's a whole lot of unnecessary logic and code you're throwing on top of a simple operation.
My first thought was that the database *is* doing its job when I ask it to select where "active=true" or something. There's no application logic involved, it's in the query. Really, the whole premise makes no sense, but it's too late tonight to write an in depth explanation of why. Maybe tomorrow.
Tangentially, I tend to think we often just shouldn't "delete" but rather "retire" or "deactivate" data, or something like that, unless we're actually, formally deleting.
Oh..well, you can probably create something nicer than that with a bit of work!
Wait....so I can use PHP 5.6 features on a stable release of HHVM before I can with official PHP? Cool. I was thinking HHVM would lag behind on new features. Been looking forward to variadic functions. Slightly off topic, can I mix Hack and PHP? i.e., can I use a PHP framework but write all *my* code in Hack? 
Yes, you can mix Hack and PHP code.
You're right, I wish I hadn't used User and Group relationships as the example. You wouldnt expect to lose your users, but it was just to serve the point of soft delete issues with relationships, so my apologies
Baller! I've already got HHVM set up, I guess I can just start writing some .hh files and try this out!
There is a good old book: PHP The Good Parts. http://it-ebooks.info/book/95/
I'm not familiar with those PostgreSQL functionalities. Can you recommend any examples or articles about those?
There are plenty of situations where soft-delete is a better option 1. A user that bought some products on your website want his/her account removed. Removing those order from your database is not an option 2. A product that was on your offer for a long time was purchased. If the orders reference the product and don't duplicate the product data, hard-delete is not an option. Completely discarding this solution is not good.
It was a joke. I like Phil.
A multi-tenanted, monetized SaaS 600k+ SLOC codebase in 24/7 production. :D The point is that when something goes wrong, you'll generally see an uptick (or flatlining!) in quite a few metrics, and that'll point you at the problem. Its also for 'ambient monitoring'; the idea is "when a complex system is acting funny, how can you know what is abnormal if you don't know what normal looks like". None of it is data porn; all pretty day-to-day useful when you reach a certain size and complexity. &gt; now has insights that does more of that transactional data I'm actually talking about *non-transactional* metrics, that don't have a one-to-one mapping with requests; application-level metrics. Like I said, New Relic works pretty well for transactional data. To be explicit, Insights lets you query custom data against transactions (their "transaction" roughly corresponds to a request or background job) or pageviews. I guess I should look at [custom events](https://docs.newrelic.com/docs/insights/inserting-events), but even that wasn't available when insights launched. And I still don't know if I could graph a gauge (by which I mean an arbitrary value against time, rather than its derivative). And this system has been in production since early 2012; before New Relic even had histograms or coped with native PHP exceptions correctly (we're still big fans, and have been using it since 2011).
Yes, using a hydrator but having a structured transformer layer to provide strategies to create the objects. My understanding is that Fractal provides a nice structured way to do the inverse. I can write a few hydrators in the same way as I can write a few object -&gt; array transformers. Fractal adds a structure and a way to manage this in one direction. Is there a good way to structure and manage this the other way?
Thanks. If Fractal is for domain object -&gt; response array, how do you usually structure and manage the opposite way, going from request array -&gt; domain object (in a large project)? 
Oh, I just want to also mention: the point of native application metrics is that they're absolutely painless to use: you instantiate a class and call a method, that's it. The fact that it's a UDP packet means you won't have timeout issues or problems if your receiver goes down. It's at least partially an HA measure. Remember: some guy on your team is going to try and put a counter in something called 100 times a second. Compare that to New Relic custom events, which require an HTTP POST, that you certainly can't do inline. And there are rate limits, which means your metrics are likely to fail you at the time you most need them: when abnormal conditions are sending them off-scale high. You're going to generally have &gt;= 1 metric in every single dynamic page generation, provided you have a metric on 'dynamic page generation rate'; how long until you run into the 1000 event per call limit? Why not take advantage of the fact that your application metric receiver could be 2ms away instead of 200ms+ at New Relic's server farm? Just an implementation detail, that you can smooth over with something like Redis and your own dequeuing cron or daemon, but still worth thinking about. Edit: Oh, plus, plus, full tracing in New Relic is anything but free; you'll have to segment your traffic to only sample some and adjust `apdex_t` carefully. Hell, scaling the New Relic agent is almost a topic in itself.
If you don't know anything about php, this is going to be a bit of a task. If that's the case, ignore the message app and start with some intro tutorials you can find all over the net. Assuming you know some bits, basically what you need to do is rewrite the messaging code so that when a message is sent, it looks up the recipient email and creates and sends an email to that address. Pretty straightforward if you know how - but it requires a good basic knowledge of php. Alternatively, you could find an existing php script that'll do it, but I'd really, really recommend you don't. Without knowing how to read php source and see what a script actually does, you're making a massive security problem for yourself. 
Thanks for the link :)
Your audit log doesn't necessarily need to be in the database... Say you keep an audit log on disk on another server, and that server doesn't happen to be in a high security zone like your database. Not saying it's a wise move, just saying it's a Thing That Could Happen.
This one is really good if you're questioning your if statements: http://phpcheatsheets.com/
If you give me access to your ftp and drop me some contact via pm i can do this for you, for free.
HHVM 3.1.0 *is* a stable release, what makes you conclude it isn't? Just an expression used in the blog post?
Am I the only one that thinks PHP&lt;insert minority group here&gt; groups are not the right way to tackle the problem? In the long term, I'm afraid that excluding a lot of people will contribute to more discrimination based on what you are. Will groups like "PHPWomen" dissolve when they are no longer needed? Probably not, somebody will always think they are needed and have a reason to exlude others based on their gender. I see no reason why we just can't take the hard way and always welcome everyone. This is why I would never support women-groups, not because I'm anti-women or sexist but rather that I think they are excluding people on unjust terms. I don't think race, religion or gender should give you special treatment. Trust me, I live in a largly feminist country where almost every party calls themselves feminist. Women have actually several laws that do not apply on men and I see a large "gender war" on it's way. It's fucking silly just like these groups that exist for basically every major language. To be perfectly clear, I think these groups are just as sexist as the industry they complain about.
&gt; what makes you conclude it isn't? Most of the people in internals team have a negative attitude towards hhvm
A forum is a good example. If you delete a post due to spam, it's pretty useful to keep the post in the database so that you can use it to match future spam.
My reason for using soft deletes has nothing to do with undeleting them. I use them to stop other things from breaking when they have references to old records. If you're actually gunna delete the rows, in many cases you're going to need to build in hacky redundant places everywhere to keep parts of the old data anyway. It might make sense in a totally de-normalised NoSQL type database that stores redundant data everywhere. But would be a total nightmare any SQL databases using JOINs that I've ever worked on. What happens in your ticketing system when you delete a user? Does all their work have an empty name next to it? Or does every record created by a user actually have a copy of their name as a string?
You didnt read the article did you. Or listen to the podcast it was based on. The entire reason I shared this link is because it does a good job of explaining that PHPWomen is not exclusionary, and is not just for women. Please, read the article before you comment!
Have you read the YesAllWomen hash tag at all? I've been reading a lot of them for the last few days and there are millions of cases of sexism happening fucking everywhere. Yes, there are crazy millitant feminists who say that all men are trying to rape and kill everyone ever, but there are a lot more problems than that. I will admit that that saying "it does" to somebody who says "it doesn't" without proof is no good, but the proof is out there dude. As I said, recently I have started to spot things at conferences myself. A conference organizer at the Q&amp;A session introducing 4 women in the crowd of 150 men saying "What do you think guys, any of you single?". That was fucking horrible and awkward and luckily he apologized, but this shit does happen. So again, go out there and red something. I cannot believe that any sane minded person would just sit around and say "Nah, I dont think sexism exists." And remember that provable is a weird term too. These are not legal cases, its people just being douchebags.
I can see the serialized object being a problem if the model changes later. You would need to use a good serializer library to be able to map an "old" object to the new (refactored) model. And you would need to remember to maintain that serializer configuration up to date. That can be done, it's just something to keep in mind, that can become a bit hard to maintain.
Much agreed. I'm really liking the approach PHPWomen is taking, with their inclusive perspective, as mentioned in the linked article. First impression I got from the name is that it would be another one of those women only things. I listened to the podcast and the women were being very reasonable. Phil came off a bit too tryhard whiteknight for me some times, which seems patronizing. Calling out bad things as they happen is fine, but going out of your way to 'help' people you deem in need of help is a bit of a gray area. It seems dishonest that you would only engage them because you feel they need help. Just talk to them because you think they are interesting (as you would with anyone else). Aside from that, excellent podcast with a great discussion on these topics. This is the way I would like to see it more often. As for the articles and general discourse on this subject matter: Whenever articles start antagonizing specific groups ("white male, white cis male, etc") or start throwing around feminist jargon ("patriarchy"), most people will have a knee jerk reaction and avoid it. No one likes being generalized with broad sweeping strokes ("Hey shitlord, here is a list of reasons why you suck!!! Don't dare talking back to me, privileged scum!" *dramatized exaggeration), so people either dismiss the article or get defensive, which doesn't help anyone. Another effect of the vocal articles could be that men will be extra careful around women in the workplace, which means they will still be treated differently. One thing I always find strange is when people say we need more women in tech. I fully understand that we should create an atmosphere where everyone can feel at ease and no one is being (actively) excluded. If there are women looking to join the workforce and they meet the requirements, who would not hire them? That seems silly! Why then is there the urge to push more women into tech? To normalize their presence? I already feel it's perfectly normal for women to be present in the tech workforce, as it is normal in other fields of work. Nobody cares whether their barista is male or female, people care whether the coffee is good. As long as the code is sound, all is good, no? I think it is high time we stop seeing women as less capable or as bad PR landmines, but just accept them. By code alone, you wouldn't be able to discern what gender the author might be and socially we should just adhere to common workplace policy: act professional and treat people with respect.
Right, but in PHP it wraps at z, while in C it would wrap at the maximum size of a char.
I think all C-like languages do this.
Yes, it is application logic - I wouldn't argue that. It could also possibly be handled with views for some sets of data. One of the projects I'm working on is using primarily soft-delete approach, and we periodically will do actual hard deletes on some data, but it's only after we've reviewed to determine if it's data we really need or not (most of the time we keep it, but sometimes it's data from an aborted project that has no historical value). Full-on *deleting* takes some time, and often causes hangs if done during peak usage (we're talking deleting, say, 2 million rows from a table of 130 million rows, for example) - the hardware it's on doesn't like that so much, and things hang for a while, and can cause other system slowdowns. Soft-deletes with periodic reviews and hard-deletion culls of data is working fine for our situation, but might not fit everyone's. But I can't imagine just deleting all the data in to an audit log then saying "oops, we need all that back restored as it was" in any reasonable amount of time or effort. Hiding it has the same effect with the ability to unhide/show as needed until we do scheduled culling.
I agree, with hindsight I should have made a better example but I think it served to demonstrate my point (hopefully) 
Totally agree. I'm not risking an upgrade to prod, but what I am doing is noticing what may break on a daily basis because my dev env is 5.5. There is a small risk that I will code something 5.5 and push it to 5.3 where it breaks, however BC breaks in PHP are usually well documented. I'm going to say something that's hard to back up: breaking prod isn't as bad as you think.
Theoretically fast is the best kind of benchmark.
I'll have to give it a look over. thank you.
hmmm, I never liked github.. but mkay.
Doesn't look too bad I guess... but I'd be more convinced if it was tested.
Use what is appropriate for your project. For many things means using an array. For other things it might be a custom container class. My suggestion is to avoid arrays when possible in favor of Iterators. They can help reduce memory usage and in some cases they are faster (and in others slower). In my experience most of the time you are iterating over the values anyway to filter or modify them; iterators are great for that.
Another way I like to think of it (and how our team uses it) is that fractal allows you to model *representations* of the underlying data model and thus version your API around those representations. An API (in the general sense) is the public interface to an underlying system. Exposing the data model directly *can* get in the way of long-term flexibility depending on the specific application. An API should (in applicable cases) be separated from the underlying domain and this package helps in that regard. Fractal definitely helps keep things clean, explicit, and is a great contribution. Lots of folks have worked to make Fractal as great as it is and deserves more attention/contributions from the community to make it even better!
I see your points but I think OP just wanted to show off what they made (probably as a learning exercise)
Use a working mailer class like swiftmail. It's easy to set up and easy to use. NEVER EVER use the mail function from PHP directly. NEVER! (until you read and understood rfc 2822). Yes, even for small tasks. 
It's a bad start, practicing bad PHP code. I wouldn't recommend that
The fact that it is called PHPWomen makes it exclusionary. It is a special interest group by the name of it regardless of male participation. There are plenty of developers who are women who earned their positions and deserve them, just like I earned mine. I can think of several ladies doing PHP development that I have respect for. Male developers don't automatically get accepted by their peers either, they get there over time with hard work and dedication to their craft. What if I wanted a scholarship in school or an easy way to speak at a conference as a white male? Why would a woman be prioritized over me in this case? Perhaps we want the same things? Your comment reeks of elitism.
InfluxDB is WAY easier to set up than graphite. and much prettier!
I usually like to abuse the [IteratorAggregate](http://www.php.net/manual/en/class.iteratoraggregate.php) and the [ArrayAccess](http://www.php.net/manual/en/class.arrayaccess.php) interfaces. :)
Deleted may mean that to you, but it sure as hell doesn't mean that to your customers.
Yeah, we have not only a store, but a wiki system (with browsable history!) as well - we can't ever delete users.
I think it does, because of different reasons: - There's a `index.php` file. That makes no sense. - There are no tests (yes, just repeating what you said because it's really important). - The [code](https://github.com/apsdehal/Link/blob/master/src/Link.php) violates at least 2 of the SOLID principles. - It doesn't follow PSR conventions. - No proof that it's actually fast – or faster than other related libraries
Out of all the issues, I find the inclusion of unnecessary white space to be the most infuriating.
I prefer ArrayObjects. Usually extended as [SomeObject]Collection. They can do everything an array can, but you can add own methods. And do proper typehints for your IDE. And do typechecking for items if you need it. And if you need to, you can always (array) cast them. 
If you don't want to waste your time learning php, then you can hire someone to do this for you. Seems to me the even the description of what you want to create needs help to be clear enough for someone experienced to do what you need 
Most of the people in the internals team bicker like children and have held back the development of PHP significantly. This is slowly changing at least, but HHVM is on a much better path than PHP is.
Its just so easy (lazy) to use arrays, especially with the new short array syntax in 5.4. 
That link was extremely fascinating.
The down votes best reflect that PHPWomen should not be called PHPWomen. It should probably be called PHPMinorities. 
Ok, so what's the deal with HHVM? It's faster, right? What are the downsides?
The internals team has such a weird set of priorities. I'm really glad hhvm is giving them a reality check.
&gt; Do table structures change frequently? Do lookup table values come and go? Are relationships between data moving frequently? In those cases, a serialized snapshot of the deleted data won't restore cleanly. If the database structure changes, it won't restore cleanly either way. But by serialising you at least know what the structure looked like when deleting the records.
Strings are not innately iterable, but it's simplistic to create a `StringIterator` class: class StringIterator implements \Iterator { private $str; private $index; public __construct($str) { $this-&gt;str = $str; $this-&gt;index = 0; } public function current() { return $this-&gt;str[$this-&gt;index]; } public function key() { return $this-&gt;index; } public function next() { $this-&gt;index++; } public function rewind() { $this-&gt;index = 0; } public function valid() { return isset($this-&gt;str[$this-&gt;index]); } } Thus, you'd just do something like: foreach (new StringIterator("test") as $ch) { echo $ch, "\n"; } Sorry, if the code is broken.. I'm on my phone.
I like this provider for Silex: https://github.com/tiraeth/silex-rest 
Wouldn't the easiest be just to let your database handle your soft deletes for you then by using triggers. Can that be done? I've never used triggers. But something like 1) Before delete, don't delete, but set deleted = true. 2) On update, if delete = true, check children and set their deleted = true Something to this effect with let the database handle cascading soft deletes for you.
Symfony with fos rest and oauth bundles. Not been easy but happy with the end result. 
Drupal. Terrible choice, but you know the proverb: if you have a hammer, everything looks like a nail.
A lot of people are pointing out problems with serialization, especially when you have a hierarchy, or if the model changes later on. These are all valid but could be dealt with a proper serialization layer since all the data is stored in one field. What about if the model has other external assets like product images? Do you move them somewhere else, or do you just never delete them?
Not to be argumentative, but you probably wouldn't do it for that reason. :-P Your spam detection system has its own training system that would read the post, decide it was spam, and add it to its training data. They usually use some Bayesian probability system to rate a message's likelihood to be spam. Other reasons would include legal storage, tracking a user's post history when a report comes in to see if they have been naughty for a long time, and things like that.
Care to expand on this? I've never heard anyone vehemently/categorically say to never use it.
I go over some of them [in a blog post](http://blog.ircmaxell.com/2014/03/an-opinion-on-future-of-php.html). The important ones (which the community seems to be mostly ignoring) are: * HHVM is controlled by a single company. * There is no spec (meaning there's no test or guarantee that behavior will be consistent other than moving targets) * HHVM is not an open source project (at least in how it's run). I go into more detail, but ignoring #1 and #3 is a major mistake IMHO...
Some people here seem to be astonished that HHVM has new PHP 5.6 features in a released version before PHP does. In this case it is just because HHVM releases at a quicker rate than PHP, so I am taking the opportunity to explain a few things about HHVM and PHP release cycles. HHVM does regular releases in short intervals (approximately every 2 months). This means some features don't make it until the next release but that's okay because it's only a few months away. They have some internal QA they do before releasing; this basically means that all of the code on facebook.com runs. They don't do public betas and release candidates. PHP releases on a yearly basis with alpha and beta releases followed by release candidates. Much of the code for PHP 5.6 has been unchanged for months even though it hasn't been released. This allows people who use PHP to ensure their software works before the new version is released; this helps catch some bugs before release.
I would tend to disagree with you here. It's not how I would personally do it, but it's a perfectly adequate standalone junk form handler for a super simple site with a couple pages. Rasmus himself would probably defend using super simple PHP to accomplish a single, super simple task. The example form is PHP at its simplest and there's nothing inherently wrong with that. You don't, and shouldn't, use a full fledged framework or CMS with PSR compliance just so you can have a mostly static site with the ability to send you an email. I would probably, however, go with a small library so I didn't have to write a form handler on my own...
&gt; HHVM is not an open source project (at least in how it's run). What do you mean by this?
ZF2. A lot of good API building helper modules available.
I've encountered a regression with this release whereby `spl_autoload` crashes HHVM if you call it from within an autoload handler registered via `spl_autoload_register` (https://github.com/facebook/hhvm/issues/2804). `spl_autoload` isn't common at all these days but it was before Composer was so prominent. Just something to keep in mind if you're running fairly old PHP code that does autoloading.
At a simple glance anyone who is affected by this 'break' is doing things they probably shouldn't be; perhaps there is some use-case I'm not thinking of.
There's always https://apigility.org
I'm using flight in combination with redbeans. But then again, its for a prototype and I'm not really a backend guy. Good tools though. Simple and lightweight and they do exactly what they're build for without extra nonsense
Laravel!
PHP and HHVM simply have very different definitions of a stable release. PHP goes through a rather large number of alphas, betas and RCs before a release hits general availability, to make sure that people had time to test their code and report potential issues. With a project that's as heavily used as PHP, doing a release takes multiple months from the point where all new features have already been implemented.
This breaks the good ol' `unserialize('O:' . strlen($className) . ':"' . $className . '":0:{}')` hack that people have been using to create objects without invoking their constructor. As of PHP 5.4 you should use [`ReflectionObject::newInstanceWithoutConstructor()`](http://de2.php.net/manual/en/reflectionclass.newinstancewithoutconstructor.php) instead. However this does not work with internal classes, which is why even some PHP 5.4-only code like PHPUnit 4.0 has still been using the unserialize hack. This issue was solved by using the unseralize hack only for internal classes.
I've used Slim in the past.
Why would/should an Exception call die() or print_r() ?
&gt; There is no spec (meaning there's no test or guarantee that behavior will be consistent other than moving targets) Unfortunately this is also true of PHP itself. It'd be great for everyone (including those gloriously insane nutjobs over at Caucho that did that PHP-on-JVM thing) if PHP actually had a specification...
Does it support * [Multi-format](http://restler3.luracast.com/examples/_003_multiformat/readme.html), * [Delete](http://restler3.luracast.com/examples/_007_crud/readme.html), * [Versioning](http://restler3.luracast.com/examples/_011_versioning/readme.html), and * [API explorer](http://restler3.luracast.com/examples/_008_documentation/explorer/index.html#!/authors)?
Once you authenticate your user, you should be done with AD. After you authenticate you can return some data and just store your login sessions as you would for a non-AD login system.
-1 simply for the lack of indenting. Seriously, any tutorial should be using properly formatted code, no matter who it's targeting.
I'm sad that the #1 most important thing isn't improved language support for static analysis :(
So... basically this was more an attempt to promote Restler than legitimately query the community? Pretty douchey.
No, I'm looking for the best REST API framework or the ones that I have not found yet. Restler and Apigility are good but they have problems. For example Agility wants to run without Apache. Also I was unable to run it properly at all. And Restler is not good at validation and the API explorer is hard to install. Also [Toro](http://toroweb.org/) looks like more organized. Things like that. You choose one and it has bad things than the other ones. You choose the other one and it has bad thing than the previous ones.
Does this break for every class (I mean the unserialize hack), or only for those that "disallow serialization" (whatever that could mean)? I.e. should we be more worried than that? I think Doctrine also uses that hack to create objects when loading them from database.
&gt; Did that bad joke stop them from attending the conference? I believe the issue isn't that the joke stopped them from attending the conference. It's the fact that the joke was made at all and was felt to be "alright"
I fully agree, but the OP said he'd been advised to learn some PHP to accomplish this task and has chosen to not to go down that path. My position, which was apparently unclear, is it sounds like he has two choices: 1) to either just bear down and learn PHP... which I assume will in a short period of time get him to the "AHA" moment when he grasps that he can solve problems with PHP... 2) pay someone else to do it If you see a third option, feel free to make suggestions ;)
Out of curiosity: what was this hack good for? What need does instantiating an object without constructor fill?
FYI, your site uses a non default font, which in computers that don't have it installed like mine shows up as an ugly times new roman. You should use something like Google Fonts instead to have the fonts you use delivered to the user.
Did you file a bug on github?
I've used reflection to do this before. I had a shitty ORM kind of thing that made it so you could serialize objects in a "query-able" manner in the DB. So when pulling objects from the DB you don't want to call the constructor (as the creator of the class could be using it for something fancy).
Yeah I meant you would use the posts to add training data to another table or system. But you'd still have to keep them around in case you changed how you indexed the data, and in general just for posterity.
Yes - Laravel works perfectly on HHVM for example. I've been playing with Laravel, using Hack for my controllers. Also, I work at Facebook and we use a bunch of open-source PHP libraries. My team is using a mostly unmodified version of PHPExcel with no issues at all.
The Northeast PHP Conference is a web developer conference focused on PHP, Web Technology, and UX. It will be held Sept. 6-7 at the Microsoft N.E.R.D. Center in Cambridge, Massachusetts. Call for speakers is open until June 1st. Early bird tickets are available until June 15th. If you have any questions about the conference, I will do my best to assist. Please help spread the word and I hope to see some of you there.
That's definitely true. I prefer strongly typed languages so often times I doubt that PHP (or Perl, since I use that quite a bit) is really doing what I want it to do. It's sort of uncertainty I hate dealing with. But definitely, dealing with the conversions would be an interesting hurdle to get over.
Sounds like a perfect project to learn from in your free time. ;)
Supports delete out of the box Versioning you can achieve with filters or something like Dingo/API which seems kind of cool. Multi-Format..well you have total control over the response so you could inspect the request headers and respond accordingly. The response type by suffix/extension thing is honestly a little gross API Explorer thing - this looks like a mapping of routes to controllers and their actions? if so the command line app artisan has a "routes" command. 
Thanks, I'll give it a go with my next project.
Those are both new features, and the first one is a **major** new feature. If your production platform isn't being kept up to date you do need to keep in mind what version you are targeting. 
Check out Sculpin too, http://sculpin.io
All power to you. Just, you know, make sure you follow the PHPWomen approach and give the same advantages to all people. Like the article says.
Whereas Facebook/HHVM does what? Run it through a gamut of internal tests and then release it as long as it passes?
I use Wordpress as a backend only solution for the sites I build that need a simple CMS. The front end has no real connection to WP and looking at the source you would never know. It provides great freedom not to be chained to WP's theme-ing system, but still take advantage of a very easy to use admin interface. Here is my model that my custom front end uses for getting the data out without themes etc, a lot of custom stuff there but you could always rip what you need: http://pastebin.com/sWSDnA5d
Of course not. There is no real reason why I should either. It is exclusionary, as someone pointed out by it's own name to begin with. It's like saying "Only white" signs are not exclusionary to black people. I guess "PHPWomen" do sponsorships? How many of those have been male so far? How many members that are not working for the group are male? By setting such a name you set the standard to the ultimate low in being "inclusive" and "working for equality". It's hilarious, even.
Read the article, you waste of fucking oxygen. 
So you also did not read the article. If you want to just discount the entire group based on its name, and ignore people explaining that the group is the absolute opposite of what you think it is then... just wow. You can just sit there and be all mad about the fact that somebody on the internet said the world is not flat and blame me for it. You sound like a fucking idiot.
Silex, Phalcon or Laravel all support basic-ass RESTful routing, and thats all you really need.
...all fun and games until it has to scale.
Well, I'll give you a super simple example of form processing and then you can do some research on it. First you have two text fields and one text area. You don't use the same case for the naming but you named them 'Name', 'email' &amp; 'message'. You encased these fields in a form, named 'form', you assigned a class to it, but I didn't check why. Where it says 'action' you need to provide a processing page. Something like action="emailer.php" Inside this page you need to receive the POST data from your contact page. Something like: &lt;?php if(isset($_POST['Name'])){ $Name = $_POST['Name']; echo "My name is: ".$Name; }else{ echo "I still watch PowerRangers and think it's cool"; { ?&gt; Here we have setup a conditional and determined if there is any data from the previous form, if there is any data we will set it equal to that. Echo will spit out that data onto the web page. Just google around and feel free to PM me if you want me to point you in the direction of some resources.
Is there some reason WordPress doesn't do the trick?
Fair enough, lol.
Go with [ProcessWire](http://processwire.com/). Great for sites big and small. Use and ULTRA simple straight forward api and its great for custom templates, fields etc. Seriously, by FAR the best CMS I've ever used for almost any project. example: output page title? &lt;?php echo $page-&gt;title ?&gt;
http://ionizecms.com/ Is the simplest CMS I've ever try. Super simple to create themes, simple and powerfull admin backend.
I would be willing to learn PHP, but I don't have very much time. Should I just past one of the codes someone else posted in the comments of this post? I saw one person say don't do that for security. If you know PHP could you look over some of the give codes and tell me if they are legit and safe to implement into my site?
&gt; first of all, modifying a query with a where statement is considered application logic where i come from. Around here we call it "storage logic". The application doesn't know or care if I'm using soft deletes, that's none of it's business. 
which gets back to, I bet you could find someone on Craigslist.org, that would do this pretty cheaply for you. You could watch him do it and learn from it. If you want the most basic of submissions, try this: http://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_mail It's kind of like making web pages. Anyone can do it, but how properly will it be done? 
How well does this work with like, custom posts? Advanced Custom Fields? Third Party Plugins?
I've done this for fun with an experimental RoR app. I used the WP database and used models to get anything I needed. https://github.com/OutThisLife/RoR--nicholsonws.com/tree/master/app/models
Except for multiple images, still?
It makes complete sense in any kind of hierarchical architecture (e.g. a Group is a parent for Users, with potentially other parents above Group, like Firm, Office, Association, etc.). In those cases, deletion of Groups doesn't happen very often, but doing so would necessitate deleting all the children. If you wanted the Group gone, but the Users to stay, you would first have to transfer all the Users to a different Group.
Not sure what you mean but processwire has always supported multiple images. Heck you can have multiple multi image field in the same template. 
There are a lot of CMS's that are much simpler than this. Not saying it isn't good (I've never used it), but I just checked out their demo and the dashboard has a lot going on. Check out CouchCMS, Perch, Concrete5, or even some of the hosted services like Weebly if you truly want to see how a CMS can be simpler.
That does look pretty cool. One potential drawback to it though is that it's a hosted service. Actually, I suppose that's a benefit for some people, if they don't want to deal with hosting and FTP... but I would be hesitant to entrust all my client business to a company that may or may not exist in 2-5 years.
&gt; Where's the leadership? Where's the clarity of vision? Seriously?? Where's the leadership in php@internals?? 
Couldn't you test if the class implements Serializable and the use C or O depending (and still use the hack)?
Ha, loving the Yorkshire slang. Perhaps the "thatllDo" should be either "thatllDoLuv" or "thatllDoPet"? 
Hello - I'm one of the Perch founders and don't normally hop in one threads like this. Just wanted to say though that Perch does have Page management built in. Perch 1 didn't but Perch 2 has since July 2012. The designer has control of how much access they give their editors to add new pages so if you want to stop the editor adding 200 top level items to their main nav you can!
*watches the world burn*
*cringe*
&gt; Seriously?? Where's the leadership in php@internals?? Nobody said that PHP was a perfect example of an open source project. There is huge value in the community leading the project, in the RFC process, in the discussions they provoke. The fact that you can't point at anyone and say "they are the leader" is, in some ways at least, a good thing; it does not mean the projct isn't being lead, because it is, by everyone that engages in discussion and puts forward ideas. Clarity of vision is another thing, it's not easy to draw a picture incorporating the thoughts of 100 people. So clarity is difficult to achieve during actual development, but some things are perfectly clear, what we're doing next, what we're aiming for in the future, what we think needs work and so on ...
Thats why its for a prototype ;)
PHPBristol? /troll
One of our clients is running a site on "contao", it seems to be a lightweight Typo3 that was forked some time ago: https://contao.org/en/
Thanks, aequasi08. I did, and what I got from it was this: &gt; ll. Is there any CMS that would provide powerful yet understandable (for &gt; non-developers) admin interface with enough features (pages, articles, &gt; custom data) and for displaying the data on website it would require just &gt; including some API / library that would contain methods to simply fetch &gt; posts, display custom data and so Sounds a lot like WordPress, no? Not trying to be combative, but that's a sizable feature set. Only thing that might disqualify WP would be memory usage, maybe.
I built a small Laravel package that serves this purpose. It does the job, but don't expect tonnes of features: http://GitHub.com/davzie/laravel-bootstrap 
Great, this is exactly what I needed. Had no idea that including wp's bootstrap was enough to use it's query functions. Thank you, probably going to use this method. (wondering whether registering shortcodes is going to work as well, I guess I will have to look how does wp's core work sometimes)
Thank you for reply. Yeah, found this one yesterday when I was googling before posting but... I guess I would still have to put whole page on this CMS and I couldn't just use it for few areas of existing websites. 
After reading alexcroox's post, I am going to end with WP anyway, so it really does. Didn't know I could use it's functions on existing site this easily. So you were right.
Wow, this looks like pretty much what I needed. Kinda shame I am not using Laravel, but I guess I will check them both altogether once. Thank you.
Full disclosure: I'm the author. I've been a programmer for about 20 years and a professional PHP developer for about 10 years. Most of the interviews mentioned in the article were for PHP positions. The article is a bit on the lengthy side, but I decided to focus more on detail and less on brevity. This is my first article for LinkedIn so I'd very much appreciate your feedback. =)
I like this approach, I have a site that I want to simplify its frontend but still use the wordpress database and this looks very promising.
http://octobercms.com
Easy for you to say when you use PHPUnit or Doctrine without caring how it works. If these project had to exploit this "behavior" it's for a good reason. I can't process this sort of complaining, seriously…
Works fine if you are willing to look at their source code and use their functions directly. Advanced custom fields for example just use get post meta or options function to pull it from the db. I use adrotate pro too and I just call the functions in its source directly (which is all the plugin does anyway if it was in a theme). You do learn to write your own plugins as a result sometimes, but that's never a bad thing!
Writing a book about this right now: leanpub.com/typedphp
Just used GetSimple to setup a simple CMS for a designer and I'm actually impressed. I personally would use Bolt.cm but GetSimple gets the job done nicely for anyone who's not experienced and is looking for something... simple.
I have sometimes used a similar solution but with the JSON API plugin http://wordpress.org/plugins/json-api/
Since when is modifying the serialization format in a patch release a good idea? :-( This will break a lot of things...
Hi Kris, do you think a candidate for a PHP position may be judged for not knowing all the function signatures? As we all know, PHP and its functions are cruel in a way that they are in no way consistent. Different names (with or without underscores) or the nice $needle &lt;-&gt; $haystack problem. In my opinion, a candidate should be allowed to use php.net for his programming challenge, because its not important to know every bit by heart. Whats your opinion on this? I really liked the article, its a bit lengthy though :)
really?? Model this in real life. I join a local PTA group. The group disbands, and rather than just telling people who inquire "we're no longer active", they desire to purge all references of their existence. Am I executed? In a database, user "bob" is part of project X, and an admin creates a group called "project x users" so that permissions can be applied to people relating to project X. Project X is over, and while bob is still an employee, the group is deleted. Does bob's account get deleted? On my Linux systems, I'm part of multiple groups. When a group is deleted, does my account get deleted also? The 'user/group' example is poor (the OP even admitted as such) - why are you trying to defend it? Again, as I pointed out, the situation might be different with other concrete types of entities (but even then, it's going to be pretty dependent on specific app rules), but for 'user/group' relationships, the premise doesn't hold at all. 
It would still require patching libraries. This change is a breakage, that's the problem with it. Otherwise, it is perfectly fine.
Great article, I really enjoyed it. Do you think it's possible to steer an interviewer 'on course' so to speak? I've just come out of university and am job hunting actually. Have an interview on Tuesday :D
Thanks so much for the feedback! And I agree with you on pretty much everything - some of them just "slip through the net" (whitespace and the inconsistencies) and everything else I just need to work on myself. But like I said, thanks! Gives me a good list of things to work on :)
Beautiful idea. Blade is cool but xhp looks so intriguing. Thanks Dawg.
- use an IDE (PhpStorm of course), you'll save a *considerable* amount of time, every time I use Sublime I feel crippled - I use the [dvorak keyboard layout](http://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard) (actually [the french version](http://bepo.fr/wiki/Accueil) (actually [a custom version of the french version](https://github.com/mnapoli/bepo) :p)) -&gt; takes some time to learn but definitely worth it, except if you always work on your laptop or change computers a lot - use a real keyboard like [TypeMatrix](http://www.typematrix.com/) (the enter and backspace keys at the center are so practical!) - learn how to [type without looking](http://en.wikipedia.org/wiki/Touch_typing) - I set up shortcuts to generate some pieces of code: - I have mapped `alt+$` to automatically type `$this-&gt;` *huge* time saver (the `$` on my keyboard is on the left of the `1` which is very accessible) - use `complete statement` in PhpStorm to auto-add the `;` at the end of the line - use templates in your IDE to generate functions, `if`, loops, getters/setters, classes, …
I'm not sure I would use it myself but I would see this as a possibly very useful aid in teaching younger developers regex
Fine, i understand that. I only wanted to help but thats your decision :p
PHPStorm is the way to go. It saves so much time and reduces keypresses significantly.
&gt; PHP releases on a yearly basis There's your problem.
So what would your fix be? Just never update the serialization system? Or would you add in complicated workarounds to ensure that it didn't break this one case while adding complexity to the engine? What happens when you notice a popular engine was relying on the version number to never go above 5.5? Do you just never update past that for them? At a certain point they need to maintain their own codebase. Its still being maintained, so it's not that big of a deal.
+1 for the article.
Developer of Elefant here. Thanks for the mention! Is love to know more detail about how you see it making things more complex than need be. The editing isn't currently true inline, which is planned for soon, so it does go to a separate page to edit the full page or content block, but I'd love to know if there are other ways it's making things harder to use than that. Cheers!
If you are in windows, auto hotkey is a huge timesaver. Things you know you are going to type repeatedly can be scripted into key combos that you can execute with two or three keystrokes.
&gt; I can't process this sort of complaining Is it un-geeky or something to say 'I don't understand' instead of 'I can't process..'
&gt; Volume is generally looked upon as a sign of confidence in our culture, not rudeness. So don't be afraid to take a deep breath and belt it out! As an introvert with a medium level of conversation, I could not disagree more wholeheartedly. IMO anyone who is unable to make a point without raising their voice is obnoxious, distracting and annoying. Having said that, the actual point you seem to be trying to make is not about speaking loudly, but about not mumbling: so it seems like your language is not matching what you're trying to say. In this case, it makes a big difference from where I'm standing, because I think you're completely wrong about your "the louder, the more easily understood" notion. You see, speaking loudly has nothing to do with being intelligible, years of working as a call center agent taught me that much. It's speaking *at a normal level* that makes you audible, not speaking at a loud level. Being understandable over the phone has a lot more to do with articulating well, and with choosing your words wisely (avoid negatives, keep your sentences short, ask questions with your pitch going up at the end etc) than it does with volume. In fact, too much volume can distort the sound, making you actually *less* likely to be understood if you speak too loudly into your phone.
Now I'm definitely not going to read it.
relational database doesn't have to know it's relations. yep, sounds right.
I thought it was great. Good mix of humor solid points and examples. Going to forward it to my boss. ;)
Haven't taken a look at the code, but I think this is a really nice idea. I find writing regex pretty easy, but this way it's also easy for other devs (including future me) to figure out at a glance.
Ok, yes I understand that use case. I think maybe the ImageCrop Field will do that, but I agree that I'd prefer the option for it to work the way you are saying but its not really a big deal when you look at the rest of its capabilities. I've used every major CMS (WordPress, Joomla, Drupal, Concrete5 etc) and a bunch of smaller one (Perch, Couch, Pulse, Symphony) and ProcessWire destroys them all. Its one of those can't go back scenarios for sure.
Keep in mind *most* code editors can use key bindings, and similar plugins are available for them too. *(Even Sublime!)* I think it's important to work with an editor you're comfortable with, but use one that is extendible, and configurable; as many are. 
ProcessWire would make it about as easy as possible to integrate with an existing design, at least compared to any other full power CMS. But if you really only need to make some parts of a very simple existing design editable something like Pulse of Couch would be easier, but both of those cost a bit and I think if you learn ProcessWire you will love it.
agreed. * ctrl-p autocomplete is awesome * multiple copy buffers also handy. like it or not there will always be a lot of copy-paste-modify. * shell escapes allow you to access things like awk and sed; tools designed to help you wrangle text with less keystrokes. 
Interesting article. I was recently given the task of hiring interns for our regular intern rotation, and I think my company could revise how we do interviews for the better. Thank you for taking the time to write this!
Silex.
I theory I agree with you. But doing this in a patch release wasn't a good idea. Internals devs know about this hack being used in many projects, that's why the new `ReflectionClass::newInstanceWithoutConstructor()` was added in 5.4. If this "bug" (or whatever) was fixed in 5.6, or 5.7, it wouldn't have been such a big problem.
I'm not a native english speaker. I don't know where I've read this expression from, but is it not a thing? (I like how it sounds)
If a not-so problematic "behavior" is relied upon by many large projects (and well known by internals devs), then my fix would be: don't do that BC break in a patch release. Wait for a minor release like 5.6 or 5.7 where upgrade notes gets read. 2 Doctrine devs have learnt about this BC break either here on reddit, or either on twitter. That's a problem because Doctrine broke because of that "bugfix". I'm not saying "no bc break ever", just let's be reasonable, there's a 5.6 on the way it could have been patched in there.
On the other hand, this was a bug that needed fixing, so in this case the options were: 1. Don't fix the bug, and require everyone who needed this functionality to do a work-around (until they fix it later) 2. Fix the bug, and make everyone taking advantage of this feature to use the correct way. 2 looks a bit nicer to me IMO.
Raising your voice is practically the same thing as shouting, and it is not a part of everyday conversation. What you're talking about is not the same as raising your voice. I think we're in agreement on everything except what "raising your voice" means.
&gt;Raising your voice is practically the same thing as shouting, and it is not a part of everyday conversation. I don't agree with this. A lot of great speakers will lower and raise their voice at certain points. It helps to break up the monotony. If you raise your voice by a small bit, it doesn't necessarily mean that you are shouting.
Let me rephrase: when I said "raise one's voice" I meant "practically shout". Edit: just to clarify what I was talking about, even if I may have been using the wrong phrase.
I know this adds nothing to answer your question but I couldn't get past this insanity $t=date("H"); if ($t&lt;"20") { I willfully accept any downvotes given.
You are off the mark on this mate. Raising volume != shouting. Raising and lowering volume is part of expressive speech. It keeps listeners engaged, and can be a bit of an art. If you are unable to raise your voice without it sounding like a shout, then you should practice that. I know it is hard, I too struggle with it. However, being able to raise your voice at times for emphasis is incredibly useful in speeches, but even in every day conversation. It can mean the difference between captivating people's attention, or wasting your breath. On phone calls it can be especially useful, as often times peoples volume is simply too low. So being able to raise your base voice level without it sounding like emphasizing or shouting is an asset. 
As I've tried to clarify in another comment, when I talked about raising voice, what I meant was almost shouting. So just substitute that and consider that my point I guess? Maybe I got that wrong. To be quite honest, I don't see why so many people don't understand what I mean. I'm talking about the sort of conversation where the other party tries to assert their point by interrupting and disproportionately raising their voice. Am I the only person who ever talks to the sort of person that does that?
Good point. I still think it could have been handled with more caution and/or communication given how this behavior was used.
Ahh, but what you are talking about is called shouting. Raising your voice is a more ambiguous term. In the quote you responded to it seems pretty clear to me that he was advising people to raise their voice to express confidence and to be heard on the phone, the author was not advising people to shout. Hence the confused replies you are getting.
Trying to write code faster is basically a micro-optimization. The vast majority of your time as a developer will be spent reading, thinking, and communicating. Only a small fraction will be spent actually coding (as counter-intuitive as that may seem). So, my suggestion for becoming a more efficient developer is to focus on the areas where you'll get the most bang for your buck. Instead of trying to write code faster, learn to: * Communicate more effectively, * Search more efficiently, * Debug with less effort, * Grok complex architectures more readily, and * Design solutions more intuitively. That being said, you should totally use VIM. :-)
I said the application doesn't know about the soft deletes, not the database. They are different things.
In general yes, PHPStorm is the best IDE for PHP, but somehow I can't stand Javishness of it, can't even complain about the speed which is fine, just the interface looks off to me. I've read somewhere that they're going to switch to native apps, but that could be a rumor, I truly hope is not. Another thing is lack of multiple cursors, can't live without them now.
I use Sublime Text and have some custom snippets, so tt&lt;tab&gt; becomes $this-&gt;; ??&lt;tab&gt; becomes &lt;?=$?&gt; fe&lt;tab&gt; gives foreach construct, ff&lt;tab&gt; gives foreach construct in html context, xx&lt;tab&gt; becomes my custom dump function, and so on. Pretty handy. OP, learn how to navigate the editor, you shouldn't be using mouse while coding (for there is no need to, not because it's 1337), except when browsing code, file tree, or copy-pasting large portion of text. Learn (mostly universal) shortcuts, for example ctrl+arrow skips to beginning/end of the word, ctrl+pageUp/Down goes to beginning/end of the file. Learn how do go to line or function in your editor. Set high key repeat rate in keyboard settings of your OS. In scenario you describe in last paragraph, you should just hit arrow down twice and your editor will (if is any good) auto align the cursor to current indentation. Another thing, if typing slows down your programming then either you're a god, do simple stuff or your code is bad ;) Typing speed was never a problem for me and I'm not that quick of a typist, especially in PHP with all its "decorations". That or I'm just thick ;) Lastly, don't use single letter variables, and don't compare your numerics as strings, it will bite you in the ass one day. 
Hi Rachel, It's been a while since I've used Perch, so it's possible that was on version 1. But when I look at this video you have: http://docs.grabaperch.com/video/tutorials/swift/editing-content/ ... it makes it seem like the only way to add a page to the site is to create a php file from your templates. I don't see any "add new page" button on the screen anywhere... a page just magically appeared when you added the perch content region to the php file. Wish I could play around with it on a test site, but there is no free trial, and the demo requires registration which I don't want to do.
&gt; Raising and lowering volume is part of expressive speech. It keeps listeners engaged, and can be a bit of an art. It should never be necessary to distinguish segments of engineering discussions into "important and not as important" via vocal tonality. Either it's work related or it's not (political and psychological reasons are the most common reason, like "LISTEN UP NOW" or an aside of "we'll do it this way, it's a solved problem").
Even better, look into AutoIT. It's basically AutoHotkey but with a nice code editor and some saner documentation.
I've been thinking about rethinking classic keyboard and adding extra row of keys specially for coders so they will not need to press Shift to type eg. curly braces, asterisks etc.. Maybe a future Kickstarter project...
Thanks for the pointer to ProcessWire... I have no idea how I've never come across this before, but it looks very close to an ideal system (especially how you just create whatever fields you need in any configuration and access them from your templates... leaves things very flexible for any kind of site). I've been reading up on this now, and also playing around with an install. Very impressive. Although the bizarre lack of a file manager seems very odd to me -- that is one of those critical features that users expect and really help the editing process. If it were one of those things that was on the radar, that would be fine, but I read a forum thread where the lead developer was just not understanding the use case for it and basically saying he doesn't think it belongs in ProcessWire. Very weird. 
Thats why its still fun!
Good IDE or text editor. Tab or auto completion. (I use Sublime Text. I type faster than Eclipse runs.) 
I'd very much agree that knowing function signatures off-by-heart does not imply you're a good programmer. Any decent IDE will tell you them when you type the function, otherwise docs are only a few seconds away. You should use your memory for programming skills not rote learning. 
They also have a VIM emulator plugin for it... which makes it even more awesome...
I don't think it's a case of trying to steer the interviewer on course. Use this article as how to interview the interviewers. If they're asking questions like the ones listed here, then it's a pointer to not being a great job opportunity. 
Thanks, all the great info there! :)
No downvotes here. Blame W3 Schools for that crappy code, not me :) http://www.w3schools.com/php/php_if_else.asp I should recheck before copy pasting.
Btw, crappy PHP code is from W3 Schools, not me - it was a quick copy paste, should recheck :) http://www.w3schools.com/php/php_if_else.asp
Thanks for the tips. The example was copied from W3 Schools site without rechecking, I should never visit that 'instructional' site again :) http://www.w3schools.com/php/php_if_else.asp
Can't say I have any issues with the interface looking non native, though I use the Linux version so not sure if it's a win/Mac problem. It is slightly heavyweight in terms of resource usage I agree, but it's very fast and extremely powerful, so I don't resent it eating a load of ram personally.
Some people might not understand why this is an appropriate answer. The reason is, OP is asking about moving their cursor around text. Vim has an entire language of keys designed for manipulating and navigating text, accessed by hitting escape. What's key is that it's not just some `ctrl-&lt;x&gt;` bindings, but a *language* that can be combined to do powerful, specific and general things. As a simple example, as op asked about getting to the next `}` in vim is as simple as `][`. (`]]`, `][`, `[[`, `[]` all deal with finding the next/previous `{` or `}` in the text)
XHP is basically syntax sugar for actual PHP so you can do some pretty cool stuff with it. You can put some of the page logic directly in the page's XHP component rather than having the logic in a separate view model. Some people believe that templates should always be "dumb" and simple, but I personally think it's okay to have view-related logic in them. The XHP runtime library is still vanilla PHP, but once there's a Hack version, XHP components will have static typechecking via Hack's `hh_client` (eg. If you pass a string into an attribute that takes an int, this will be picked up before you even hit your app). Also it's perfect for tiny apps that you may not even want to use a framework for. It's a really good replacement for echoing HTML. 
&gt;We're practically broke and the owners don't have a clue what they're doing. If you want to work here, expect there to be long hours with fairly little pay and you should assume that things will only get worse. I guess they tried to see if you want to take the challenge head on and save the company or something. 
Hey, I must have hit a nerve, that's good. You try very hard to sound superior and you end almost all of your rebuttals in a typical fashion instead of addressing the points. The goal of the group IS to advance the interests of a minority group. I am saying that minorities are already succeeding in tech by being good at what they do. Programmers don't care as long as you can be a contributing member. Plenty of people have earned their accolades regardless of their skin color or sex. What we do care about is people getting opportunities over others simply for being a girl or a minority. But these people don't deserve opportunities over others simply for belonging to a group, they can be just as good by having determination and putting in the work just like the rest of us. Have a nice life, or don't.
Stop using W3 Schools to learn any language what-so-ever, their articles have been incorrect time and time again and often counter-productive. I would recommend CodeAcademy.com a hundred times over before I recommend W3.
A better way to say this might be, "invest the time to learn Vim". Vim is not learned in a day, a week or even a month. It's a long-term investment that pays dividends over time. Once you really "get" Vim, your editing becomes an intimate extension of your mind. You don't think about editing anymore, text just efficiently gets changed the way you want it. Expect to hate Vim at first. The idea of having "modes" will seem ludicrous, and just seems to "get in the way" of entering text. But once you learn the "why" of Vim, all is illuminated and you'll wonder how the hell anyone gets anything done in typical editors. If you want to read an amusing post I found one day about one man's journey, [read this](https://plus.google.com/102145263152706652064/posts/VjXWRRwQrcv). "I hate Vim. There, I said it. Go on, get your pitchforks out and run me right out of Nerdville." Later... "As much as I don't like it, I'm going to keep trudging along and force myself to be productive with Vim. It may be "wrong" to me, but there's a lot of value in being consistent with the people I work with." Later... "I have been getting more comfortable Vim over the last few months, definitely. I have come to appreciate its power and utility - I honestly think that there is editor that can match it in that regard. On the other hand, I still think the interface is clumsy to use. But, I'm taking the good with the bad and sticking with Vim. Thanks for the settings, this will come in really handy!" Later... "Since I wrote this post - over a year ago - I have actually fallen in love with Vim. I know, I know... I ranted pretty hard against it. It took me a long time to get comfortable with it, but now that I am I can't imagine using another editor. I am more efficient than I've ever been and editing text is actually fun! I drank the Kool-Aid, and now I am a believer. :-) "
how did you fix using the keyboard shortcuts like ctrl + c and Ctrl + v
For me it's more that it will teach you to naturally think of more efficient solutions to everything, and actually help think in a functional way. An example of how this works is lets assume you're on line 5, character 10, and you have a slew of tasks to do. Normally with an IDE you would go down your checklist mentally and perform each action. An example would be "Remove comments, replace all instances of 'Event' with 'event', change all tabs to doublespace, move this function to the bottom of the code". When you become good with VIM, you'll realize there are ways to merge many of these tasks into a single command. In VIM there are probably 1000 ways to do the tasks above, but finding the most efficient way is key, and after a while you'll see faster and faster ways to perform a set of tasks, you'll begin grouping common tasks and seeing patterns in your coding habbits, and you can remap specific keystrokes to these patterns, no matter how complex they may be. 
If you don't know certain functions from memory, that proves you have spent less than a few years doing php or have a bad memory.
I've been interviewing for a PHP developer at work for a few weeks. For the most part I'm glad to know I don't make any of those obvious mistakes. I guess the only semi-controversial thing I do is ask people to write PHP code on a whiteboard. I do make it clear I don't expect perfect code though. The code they write is mostly about getting a conversation going. I want to ask them about what they wrote and why they wrote it. I'm thinking I need to change my formula though. I've been using the same technical question for several interviews now. I show them a very simple PHP class and give them a few minutes to read it and understand it. Then I ask them to instantiate the class to make sure they know the very basics of OO. That part hasn't been a problem, but the following thing I ask has been. I ask them to add a function to the class. The function requires the use of recursion. That's where everyone fails. None of the interviewees have been able to figure it out, even when I end up telling them they need to use recursion. On one hand I've read that figuring out recursion is a sign of a good programmer. On the other hand, in reality, using recursion is rarely needed on a day to day basis when you're doing web development. (At least that's true at my company) Should I lower my standards?
Please don't use W3Schools to learn anything. See: http://www.w3fools.com/ Check out http://www.codecademy.com/. They have a PHP section and much more.
Don't lower your standards. You seem like you're looking for the right things. Looking for practical skills and not asking someone to write 500 words on their top thirteen and a half design patterns.
Are you serious? If so, are you on Windows, Mac, or Linux? For Windows, get WAMP For Linux, get LAMP For Mac, get MAMP Look up tutorials for one of these bundles depending on your OS. Judging by the nature of the question, I'm going to assume Windows. Save the file in the directory (default is C:\wamp\public_html I think) and navigate to localhost/file.php in your web browser. 
Try puphpet 
Go back to visual basic
Please note there is a large difference between me getting angry at your ignorance (which you of course consider to be me being an asshole) and my use of "asshole" to describe sexists, bigots, and ignorant people. You _are_ ignorant because you are refusing to admit that sexism is a problem in our community and are playing the burden of proof card instead of hitting google or believe that things might happen beyond your own nose. It amazes me that you discount my first-hand experiences with sexism and dismiss it as anecdotal. Me seeing something happen is proof to me that it happened, and unless you consider me to be lying you have to accept that it happened, therefore it happens, therefore you're wrong. Right? So, let me Google that for you. How about this [first-hand account](http://www.sazzy.co.uk/2013/02/speaking-up/)? A very prominent figure in the community, scared to talk about it. If a well known public speaker is to scared, then what about the other people with smaller voices? They must be even more scared. They might think they [are over-thinkng it](http://juliepagano.tumblr.com/post/62034537968/i-think-im-in-an-emotionally-abusive-relationship-with). Or the guy that [couldn't get any interviews](http://whatwouldkingleonidasdo.tumblr.com/post/54989171152/how-i-discovered-gender-discrimination) because his name was Kim, until he put a more male-sounding name on the CV and got a shitload of jobs. There are plenty of surveys around about [the salary gap between men and women](http://www.drdobbs.com/architecture-and-design/2014-developer-salary-survey/240168195?pgno=6). You can argue the sample base of that one is quite small, but it is representative of [plenty](http://geekfeminism.wikia.com/wiki/FLOSS) of [other sources](http://geekfeminism.wikia.com/wiki/Technology_industry). Now and then there are huge figures in the community like Uncle Bob, who whilst being very well respected for his views on technology can't help himself from making sexist comments. I've seen [several apologies](https://gist.github.com/unclebob/2508746) from him, and [the most recent](https://gist.github.com/unclebob/2abcce451bafeab421f2) was sarcastic as fuck until he updated it about 6 times (check the revisions). [Tom Dale](https://twitter.com/tomdale/status/465526826576916481) didn't like the last one. There was [CodeBabes](https://codebabes.com). There was this whole post [covering a few problems](http://www.businessinsider.com/sexism-in-tech-on-secret-2014-5). That's like a combo. [Hackers and Hookers costume party](https://www.eventbrite.com/e/hackers-hookers-costume-party-techies-entrepreneurs-tickets-8938393977). "Because bitches aint shit but tricks and ho's." [Little shits on IRC](https://lindseykuper.livejournal.com/418854.html) shouting "boobs or gtfo" to women. Technology giants [portraying women as housewives who don't understand how to computer](http://programmersbeingdicks.tumblr.com/post/59106824903/samsungs-new-ad-for-an-ssd-which-women), while two guys obviously understand it immediately. While it is not a specific case, I really enjoy [this article](http://bellejar.ca/2014/02/22/why-wont-you-educate-me-about-feminism/). It makes me recognize some of my own ignorant thought patterns and has helped me a great deal. My main point here is that I am not some uptight, super offended, white night lunatic that is trying to impress anyone by making a big point about how mean all men are to all women all the time. I am average joe developer who is amazed at how sexist the community can be in a lot of different ways. I am shocked that anyone who actively participates in this community can not only not notice, but that he then refuses to believe sexism is rampant when people provide personal accounts. If you are not being ignorant, then you at least live under a rock and need to accept you have some learning to do. I hope you read all of these websites. I will try and get a few more in, but I cannot remember the name of every article I have read to provide them at such short notice, and this response has cost me an hour as it is. 
If a job is so stressful that I can't spend 15 seconds looking up which of the 100 built-in array functions will check if a key exists in an array, I don't want to work there. If "memorizing the names of certain built-in functions" is how you judge whether someone is a good programmer or not, then you're to end up with some pretty bad code. I'd be way way way more concerned with their ability to look at a problem and write a solution that is lightweight, clean, smart, and easy to maintain. One of the tests I give to front end developer candidates is to print out some really really ugly HTML/CSS/JS and ask them to mark it up with as many changes as they see in 5 minutes. I don't care if they can memorize all of the ways to call media queries to target certain mobile devices: It's way more important to me to get a sense for what they consider to be clean, readable code and for how they solve problems.
Seriously, FOSRestBundle is a bitch to setup. I'm working with it currently, and when it's setup properly it's awesome, but until then it's a mess.
Sure your test is better, but still, you can prove someone has 2 yrs php experience whether or not certain functions are memorized. Some good programmers don't have php memorized and its trivial to learn, so your way is better.
After the 6 months you spend becoming proficient with this setup, you can then come full circle and be back to doing whatever you were doing to begin with, which, was hopefully something not on a deadline.
Should PHP stop using a 1 year cycle like Perl does and move to Python's 1.5 year cycle? Or Ruby's 2 minor versions in a decade release rate? Or is there a language in the opposite direction that isn't also a total QA clusterfuck, which you'd like PHP to emulate?
The outcome of the phpng/php-64bit war will show us whether #1 and #3 are also true of PHP/Zend Corporation. \#2... well, the fact PHP didn't run its own test suite until publicly shamed into doing so already answers that one.
When you come by an insanity, you might want to tell the correct way too.
Are you referring to a single place for files and images like the Media section in WordPress? I can see that if this is what you are used to then it maybe be hard to change but I actually have to agree with the way processwire does it more. See you can always add a files or images fields to a template, and if you wanted you could add them to add your templates. I feel like this process make more sense for my clients and they seem to agree. If a person make a page for a "book" I will define a field for the cover image and make a single file field for a PDF preview. But in a more generic scenario of a "basic-page" template I might just have a files field and an images field, the user could then place links to these file or images in the body content. To me it feels more logical if I make a page about my company and upload images of my building and office and files for my corporate policy and a brochure of the service I offer **to** the actual page they belong, instead of putting them into a giant melting pot where they get lots. I've help a few companies in the past manage large wordpress sites and SOOO often the will have upload the same file over and over again because they couldn't find the first ones they uploaded, but I've never seen the same thing happen with ProcessWire. I've rambled a lot, but really I think ProcessWire is borderline perfect. And dont even get me strated on the selectors, I constantly forgot the WordPress query syntax, but in ProcessWire if I say, want to find the five book in my site wit the most sales that are in the category fantasy that have more than one author (try shit like that in WordPress and you will commit suicide) I just do something like this: ``` $pages-&gt;find("template=book, category=fantasy, author.count&gt;1, sort=-sales, limit=5"); ``` Sorry, really love this CMS. I'm **adamspruijt** on the ProcewwWire forums by the way! I make some modules and themes under that name too.
Is this /r/php or /r/howtointerview?
&gt; every time I use Sublime I feel crippled Oh man, to each their own but this surprises me. Sublime may not suite everyone right out of the box, but it has VIM emulation, and also CTRL+SHIFT+P (the command pallet) should ensure your hands are never leaving the keyboard, for any reason, and the Package Control system has extensions to emulate just about any functionality of any other editor. I feel the exact opposite.... crippled in anything but Sublime. There was undoubtedly a learning curve, but having tried most of the IDE's being talked about here, I haven't found anything more extensible, and with a more active community of users, than Sublime. Also, SublimeText is backwards compatible with just about all TextMate packages, so even before SublimeText's own "Package Control" system was fleshed out, it had a huge ecosystem of available modifications and extensions. I guess since Python is my language of choice (and most of Sublime is Python) makes me biased. But I use it to dev PHP and just about everything else. 
Change the password configuration option to be blank. Use two single quotes, like this '' 
If this solves your problem, you should set a password.
or perhaps are a polyglot? I routinely work in PHP, Java, SQL and JavaScript on the same project. In addition to each language/platform having their own built-in function names and signatures, there's usually a framework on top which have their own slightly-different-but-useful way of doing something. Need to replace a string inside another string? Sure, it's str_replace(), or .replace(), or $foo-&gt;replace(), or maybe replace(), but remembering argument order and optional arguments for dozens of common list/array/map/string functions without fail? No dice. Once I'm *in* a platform for most of the day, much of it comes back to me, but switching to something else for a couple days, I end up needing to use resources (google/bing/IDE/books), and I've spent the better part of 20 years with some of these.
I'm a bit surprised this has so many votes. This feels like a throwback to some of the worst parts of PHP before separation of concerns became the dominate design pattern in the industry.
I'd mix up javascript and php functions in my first year but at some point you should catch on if you really are head down working on php/javascript all day for years. I also have c# and python "many years experience" but I have to look up function names for those. I suspect someone looking for "many years experience" in python and c# isn't looking for me.
How so? It's no different to using a templating language like Blade or Twig in terms of what you use it for. There's still a separation of concerns - Your XHP classes are views and are totally separate to all business logic. 
Doesn't matter if its localhost and never gets exposed to the internet. Still a good idea to have, but is okay if only for local use.
They're not views. They're classes with embedded views in them. Maybe I'm missing something but I don't see anything fundamentally different from the examples provided and code like: public function render() { echo "&lt;span&gt;{$this-&gt;hello_world}&lt;/span&gt;"; }
So if I put my view inside a render method, it's suddenly not a view any more? Where do you draw the line? How does putting the HTML in a class make it not a view? A view just manages rendering HTML in some way. The internals of that don't change the fact that fundamentally it's still a view. It doesn't have to explicitly be outside of the scope of a class. I'd still call your example a view, if that was the only function it contained. Sure, it's very basic and is just echoing HTML, but that doesn't change the fact that it's is a view. I mean, how would it differ if it was outside of a render function?
Ok sweet! so I can use it now, and these are the tabs at the top. Didn't there used to be a users tab? Also I started it with XAMPP so that means it's connected to the internet right? So there needs to be a password? I'm just accessing it by going to localhost/phpmyadmin in my browser. My access is denied to the Status tab and also when I click Databases it says "no privileges" Databases SQL Status Export Import Settings Variables Charsets Engines 
&gt;So if I put my view inside a render method, it's suddenly not a view any more? I honestly don't want to get into a debate about design pattern purity. They're boring as sin and quickly lead to "architectural astronaut"-ism. At the very least I will say it blurs the distinction and provides no benefit in doing so. (Certainly some of the examples the Facebook engineer gave in [An Introduction To XHP](http://codebeforethehorse.tumblr.com/post/3096387855/an-introduction-to-xhp) were a complete violation.) There's a reason "don't embed HTML in classes" became an article of faith. It generally promotes messy code and puts designers (or developers) well outside the sphere of what they should be doing. Why complicate their job and risk much bigger errors by forcing them to work with classes and methods? That's the exact opposite direction we've been working from the last several years. Heck, it's the entire point of a whole class of templating systems.
I can see some of your points but I think we'll have to agree to disagree and use what works best for our scenarios. :) As an aside - Have you seen or used [ReactJS](http://reactjs.org/)? If so, what are your thoughts on it? It's somewhat similar in concept, except for JavaScript.
No, you have to edit the mysql database. There's a table called users. I highly recommend you use a firewall, since you are on the net and somebody can fuck with your shit. You need to learn how to admin MySQL via command line. It'll make your life so much easier. 
I don't know anything about mvc or composer.
Well, as long as you can't access Apache outside your network. It's all good, just learn how to get Drupal going, then go from there. Make sure your router does not let in any traffic to whatever port you have Apache set to listen to. 
I made good experiences with increasing the keyboard rate with e.g. xset r rate 200 60. It will massively improve cursor speed and let you comfortably browser the code via keyboard, so you don't need to use the mouse that much. 
Learning to touch type wouldn't hurt.
Yes my statement was a bit excessive. The main thing I was thinking of is all the "parsing" done by the IDE on the code, which gives us: - meaningful autocompletion (i.e. method/properties that exist, for parameters it suggest only the parameters where the type match, etc.) - refactoring support (i.e. renaming variable/class/method/property and getting the whole codebase updated) - errors and warnings (I mean real errors and warnings like you would get in a statically typed language when you compile: incompatible types, non existent method, …, e.g. like in Java or C) - Ctrl+Click to go to the class/method/property (though maybe Sublime does it too?) I know all these are possible in a good text editor, but not at the level provided by IDE's that parse and construct a whole model of the codebase. That's really where the difference is IMO, the IDE has features to manipulate *the code*, whereas Sublime has very good features but to manipulate *text*. The IDE understands the code.
Why not just learn VIM?
 if(date("H") &lt; 20) { //Do Something } The 20 should be a string, but an int. This is because the output from date("H") is actually an int. In PHP in most cases is does not matter that much, as PHP is weak typed. Just be careful of insanity like this: $x = "false"; if($x) { //This will actually result in a true, as "false" is not false but a string which is set. } 
ouch. Do not symlink global phpunit to a project specific folder. It is plain wrong. And run your tests right from phpStorm. The output is quite readable and you can re-run any failing test easily. 
You are right. A good place to symlink is in a lib folder outside any project. But when you install PHPUnit using composer, it creates a vendor folder. You can move or not that folder inside your project. The point 6 is only given as extra info. But the idea is to run the tests inside PhpStorm. Another point is if you want to have the contextual help for PHPUnit classes in your code, you have to either: - create a symlink to PHPUnit inside your vendor directory. - add PHPUnit as a external library
Never really understood why people create a special bootstrap file for phpunit. I have never had any problems with having it bootstrap the vendor/autoload.php file or if it's a Symfony2 app bootstrap the app/autoload.php Between Composer and using the phpunit.xml configuration, PHPStorm practically runs PHPUnit with zero configuration.
Well in all fairness to you, the overwhelming majority of interviewers I have worked with over the years have been very professional and easy to work with. The horror stories I included in the article are definitely the exception (more or less), but I've heard enough of my fellow devs complain about these same issues over the years that I figured it was time to compile and publish them. Also, this list certainly shouldn't be looked upon as a set of commandments carved in stone. As you pointed out, a company can be guilty of these practices and still achieve good results. I suppose the message I'd want this article to convey is that you can achieve even *better* results by avoiding the pitfalls I outlined-- at least, when you're competing for the top talent to fill senior positions. Anyway, whoever you are, even if you were one of the nightmare examples I cited, there are no hard feelings on this end. =)
I do know vim, but the plugin brings some of the good things to phpstorm. And makes for super fast development. I love vim and do in fact use it as an IDE all the time. But I haven't found a vim plugin that does code completion or function calls quite like phpstorm.
Well said. I would also caution, however, that you'll probably in less of a position to discriminate if you're just coming out of university. Even though you have the education, you'll still be regarded as a junior developer to most hiring managers and that leaves you with little leverage. It's worth pointing out that were all were junior devs at one time or another. I still remember my first dev job where I made 13 bucks an hour and pretty much just had to do what I was told and be grateful for the chance to gain some experience. In other words, you might have to pay your dues for a few years before you can expect interviewers to bend over backwards to win you over. It's a right of passage. I'm glad you enjoyed my article and thank you for taking the time to read it! I just don't want my article to inadvertently sabotage your chances at getting your first dev job. My advice would be to follow the interviewer's lead. Show-off what you learned in school but don't be afraid to acknowledge what you don't know. They already know someone fresh out of college isn't going to know everything so it helps to show them you're honest about it, both to others and to yourself. Aside from that, emphasize your eagerness to learn and gain experience. I know that wasn't exactly what you asked, but I hope it helps, just the same. Good luck with your interview!
I think I failed to effectively communicate my feelings on this issue, as someone else also raised a similar concern. To clarify, I'm perfectly fine with the use of whiteboards during interviews, so long as they're not expecting too many lines of code to be written and are fine with some pseudo-code. What I was mainly talking about is the practice of asking us to write the code down on paper. That annoys me. I still prefer something I can type on, but whiteboards are fine for smaller stuff and, as you mentioned, diagrams.
So if I write my model using PHP classes, and my controllers using PHP classes, there is no separation of concern?? If your views are separated from the controllers, it doesn't matter what technology you use: Twig, PHP views, XHP…
Bingo! I actually felt kinda sorry for them, but they were offering me literally zero incentive to take the job. I've had others from struggling start-ups take a similar approach, and while I understand why they're doing it, there's no way it's going to work unless the person you're recruiting is as desperate as you are.
To install `phpunit` globally use the composer global install `composer global require "phpunit/phpunit=4.1.*"` This will install it into a global `~/.composer/vendor/bin` directory which needs to be added to your environment path. Also as mentioned elsewhere typically you should always use `vendor/autoload.php` as you `bootstrap` file in both PHPStorm and `phpunit.xml.dist`. It's good to note though you do have to `use a custom loader` in PHPStorm and pointing it to `vendor/bin/phpunit` is important as mentioned in the article. You can configure custom autoloads based on environments to autoload your test classes only in your test environment use `autoload-dev`: ` "autoload-dev": { "psr-4": ["Vendor\\Library": "tests"] } ` Also you can configure the location that composer installs the `bin` scripts too including `phpunit`. ` "config": { "bin-dir": "bin" } ` That way you can run `bin/phpunit` to execute the tests from the command line. 
maybe because of habits picked up well before composer or symfony2 were 'things'?
Thanks for your reply. I am not a fan of wordpress (honestly, I'm baffled by how much people love using it and *especially* baffled that people find it easy to edit pages with for non-blog sites... but obviously I'm in the minority so it must have something to do with the way I think). Concrete5 is the CMS I use the most, and it has a "File Manager", which is similar in purpose to wordpress's Media Manager, but is very easy to use and provides a very streamlined process for adding new files (and you do so from the page you're editing... just like everything else in C5, so users aren't forced to a dashboard page for it). I agree that a lot of the time, you're just adding an image to a page, but there are also plenty of times where files (often PDF's, but sometimes images too) go in multiple places on the site. Having a smooth streamlined and consistent way to access these files and re-use them across pages is just something my clients find very useful. All that being said, ProcessWire does look really good and I'm looking forward to playing around with it more. Maybe I'll see you in the forums. Thanks again! 
I use it to set server env variables that aren't available via command line, and set some default GLOBAL vars pertaining only to phpunit.
Without knowing exactly what you're doing I cannot be certain but it sounds like you could set those either in your app/autoload.php file equivalent or you can set environment variables in your phpunit.xml file.
yeah, I am not dismissing it totally, just that in most cases you don't need a separate bootstrap file and it seems like at least that there's a lot of its usage in projects. There is quite a bit you can do via the xml configuration file and let phpunit do it.
Interesting, I didn't realize you could do that with ArrayObject subclasses. That's much nicer than `-&gt;toArray()` in my opinion. Thanks for the tip
Can you give a few reasons as to why?
If you're building a company intranet, you're probably using a framework, or Composer. I use this package with Laravel for our intranet apps and it works great: https://github.com/ccovey/ldap-auth
No problems for me in Firefox. Purely as an FYI (and I'm one of the few who probably uses this), I use [RequestPolicy extension](https://www.requestpolicy.com/) and don't have it automatically enabled for php.net. Because of that the drop down didn't show up automatically. Once I enabled it for php.net, worked fine.
Thanks! That's my plan - it's never going to be as powerful as straight up writing custom Regex, but should hopefully be useful for most straight forward cases, and especially on teams where some of the devs may not know Regex, but may need to work with chunks of code that handle the whole pattern matching process. 
Absolutely - this should hopefully ease the pain a little! 
Nice, working in chrome well. I'd make the entire row you have for the collapsable sections clickable to toggle the section. Also, I'm checking this out on a crappy 720p monitor and things fit well. The scroll bars aren't eating all the room.
I have no issues with the technology. PHP in your HTML is perfectly acceptable *if* you implement it correctly. It's HTML in your PHP that's deeply concerning.
Try posting this in /r/PHPhelp 
I don't have any experience with ReactJS unfortunately (or maybe fortunately?).
The scrollbar will always appear even if there's no scrollable content due to the "overflow-y: scoll" opton, this is due to browsers dynamically changing the width of the area when the scrollbar appears and disappears. I will alter this to "scrolling: auto" and see if it makes a difference.
Any Language Reference pages aren't part of the search function, this is not something I can change at the moment, I recommend you use google for "php comments" to find such pages.
 &lt;?php function isRegex($regex) { return @preg_match($regex, '') !== false &amp;&amp; preg_last_error() == PREG_NO_ERROR; } $regexes = array( "/^.*$/", "/hello world/", "/hello world/i", "hello world", "\\hello world\\", "\\x00foo\\x00", "1foo1", "afooa" ); foreach ($regexes as $regex) { echo $regex . (isRegex($regex) ? 'is valid' : 'is not valid') . PHP_EOL; } the output of this is: /^.*$/ is valid /hello world/ is valid /hello world/i is valid hello world is not valid \hello world\ is not valid \x00foo\x00 is not valid 1foo1 is not valid afooa is not valid preg_match() returns FALSE on error, if a syntax error is found, preg_last_error() returns NO_ERROR (http://www.php.net/manual/es/function.preg-last-error.php#112500). Maybe a more complex test suite can test this function =) PD: Sorry for my english :(
How is php at fault?
[Proper 2.5 changelog](https://github.com/symfony/symfony/blob/master/CHANGELOG-2.5.md)
 public function isMatch($text) { switch (preg_match($this-&gt;pattern, $text)) { case 1: return true; break; case 0: return false; break; } } can just be public function isMatch($text) { return (boolean) preg_match($this-&gt;pattern, $text); }
[Here's a nice list of changes for 2.5 (from the symfony blog).](http://symfony.com/blog/symfony-2-5-0-beta-1-released)
Try changing the "from" address to something@yourdomain.com. Gmail might be performing a reverse DNS lookup on the "from" address before even considering spam filtering. TL;DR Google might not be delivering mail if apparent sender server address doesn't match actual sender sever address. 
First off, don't use the mysql functions, they're depricated, use PDO. I'm not exactly sure what you're trying to do but you'll want to call 'session_start' (or maybe it's 'start_session') then to save a varaible you do "$_SESSION['foo'] = 'bar';"
I like the enhancement - but if there are a tonne of function matches (e.g. search for "str") the down arrow won't scroll the function list flyout (I'm a keyboard warrior - try to avoid the mouse). But now I'm thinking more, do we really need separation between functions/classes in these typeahead searches? 
Take a look at Pete Hunt's [Rethinking Best Practices](https://www.youtube.com/watch?v=x7cQ3mrcKaY) talk if you get a chance. It's about React but some of the principles still apply here. Worth noting that React had [similar criticisms](http://www.reddit.com/r/programming/comments/1fak87/react_facebooks_latest_javascript_client_library/). when it originally came out. It ended up growing on people though, once people actually started using it and realising that its ideas weren't so bad, just different. http://facebook.github.io/react/blog/2014/05/29/one-year-of-open-source-react.html
Noticing a difference between making a drop down selection versus just hitting enter. For instance start typing "SQL", hit tab to auto-complete "SQL acceptable by 4D", press enter. You'll get no match. Try again but this time arrow down to "SQL acceptable by 4D" and it will work. It seems to be an issue with auto-completions that have spaces.
You still haven't really explained why though? Why is this: &lt;p&gt;Hello &lt;?php echo htmlspecialchars($name); ?&gt;&lt;/p&gt; Or this: &lt;p&gt;Hello {{{name}}}&lt;/p&gt; Better than this: function render() { return '&lt;p&gt;Hello ' . htmlspecialchars($this-&gt;name) . '&lt;/p&gt;'; } Or this: function render() { return &lt;p&gt;Hello {$this-&gt;name}&lt;/p&gt;; } Why do you feel it's necessary for templates to only ever have embedded PHP rather than being a core concept and having first-class language support rather than watered down syntax? How would you personally do strongly-typed parameters in a view? If your view only has view logic, there's still a separation of concerns. Just avoiding the use of functions and classes doesn't have any advantage, and referring to it as "separation of concerns" is misleading at best.
This is a great talk, I've worked with Pete and he's a pretty clever guy. It's worth noting that React had [similar criticisms](http://www.reddit.com/r/programming/comments/1fak87/react_facebooks_latest_javascript_client_library/) when it originally came out, and the title of this talk ("Rethinking best practices") is actually based off one of the sarcastic comments that people left on the Reddit thread. It ended up growing on people though, once people actually started using it and realising that its ideas weren't so bad, just different. http://facebook.github.io/react/blog/2014/05/29/one-year-of-open-source-react.html
In general terms: You'll want to post your form to a php page that will grab the post data (ex: $emailAddress = $_POST['email'];). You then can use the php mail() function to mail the form data. http://www.w3schools.com/html/html_forms.asp http://php.net/manual/en/function.mail.php
Thanks!
I PM'd you. 
Session variables keep data for a single visitor between page requests. If I visit your site, fill the form and it's stored in a session var, I'll be able to see it but it won't exist for any other visitor. If you want it visible to everyone, load it from the db - that can be available to all visitors. Also, do some reading on session data. There are times to use it and times not to. 
Plus, never ever ever put a user value into the query - always use parameterized queries to pass the value in a way that lets MySQL treat the user value as a discrete entity. And never ever display what a user entered on your page. Use htmlspecialchars() before displaying user-entered text. 
$_SESSION['actual_poster'] doesn't exist so that wouldn't do anything.
Hi giga, Whether or not you should lower your standards depends on the caliber of programmer you're looking for. It's easy to say, "Well, we want the best!", but in reality, what you want is someone with a skill level that is appropriate for the price range; the amount you're willing to pay in terms of salary and benefits. If you're advertising in the $100k+ range, particularly as you approach $120-150k, that should be enough to attract the top talent; at very least, it should be enough to get some resumes you wouldn't otherwise be getting. If that's the case, then I think your test is just fine, at least given what you described. If you're advertising in the &lt;$60k range, on the other hand, you're going to be getting the most junior-level candidates. Some of them might have a ton of innate talent that just needs to be brought out through experience. To find those, questions requiring recursion can be a great way to go, but you'll need to hold their hand through it a lot more than you would an experienced candidate, even to the point of almost handing it to them on a silver platter. After that, give them a follow-up question with a very similar type of answer (i.e. recursion), and see if they learned anything from the last question and can get it on their own. I've found that, for whatever reason, a lot of otherwise talented programmers out there don't naturally think of recursion when looking for solutions. I didn't when I was that age. Something about having a function call itself again and again can seem a bit counter-intuitive if you're not accustomed to it, though I'm not sure exactly why that is. Even some veteran developers might not have a good handle on it if they were self-taught and haven't had a lot of experience working in groups. That said, I don't think it's too high of a standard, depending on what you're looking for. I do think, though, you should be prepared for many-- if not most-- of your candidates to struggle with it even if they do well in other areas. If you're looking for top talent, this can be a very effective method of screening out a very high percentage of the candidates. And if you're looking for junior- to mid-level talent, then this question is an opportunity to see how the candidate handles difficult problems they're not accustomed to. Even if they don't get the right solution, they might still be a viable candidate for the position you're trying to fill. No matter how experienced I am, there's still more that I don't know. I can get tripped-up on a question now and then just like the next guy. So if everything else looks great but they only struggled on one question, you might want to focus more on how they went about trying to solve it than whether or not they came up with the answer you were looking for. You might want to also evaluate how capable that person is of learning and improving. As I mentioned above, you can do that by explaining the solution you were looking for, discussing it, then having a "back-up" question ready with a similar solution and see if they get it. Whether or not they do will give you an idea as to how well the candidate learns and adapts. I hope that helps. =)
This is one of the options I looked at (and probably should have mentioned). I don't want to rely on error-suppression, especially in the context of writing a book which others _might_ learn from, because it teaches the wrong thing. Thanks for your suggestion though...
try cockpit - http://getcockpit.com
Though that wasn't my intended message, it's not unreasonable that you would think it was. I even wondered if I should dial it back a bit to avoid giving that impression, but ultimately decided to leave it as-is. Why? Because of the old addage: "Know your audience." In this case, the main intended audience for the remark you quoted was people from other cultures that have different customs regarding speech and, more generally, how you present yourself. In many countries, we Americans are often viewed as arrogant and rude simply by the way we walk and talk. Some describe it as a sort of "swagger", though from our perspective, we're just going about our business without giving it a second thought. I've even worked on-site with some developers from India when I was at Microsoft and we'd talk about this. One gentleman was very soft-spoken and would tell me how he has to remind himself that it's not impolite to speak-up or arrogant to project more confidence in this country. Telling someone like him to "belt it out" will probably yield a different result than telling someone like *me* to "belt it out". I played the trumpet, motherfucker. I know how to be LOUD! :P TL;DR: The "belt it out" advice was directed toward people who are naturally soft-spoken. The first step, in my admittedly non-professional opinion, it to get them to let go of their inhibitions and give themselves permission to stand-out. I'm naturally more of a shy introvert like yourself. But I trained myself over the decades to overcome that. 
&gt;My main point here is that I am not some uptight, super offended, white night lunatic that is trying to impress anyone by making a big point about how mean all men are to all women all the time. While I don't believe it's your goal, that's exactly how you come off. &gt; If you are not being ignorant, then you at least live under a rock and need to accept you have some learning to do. And again, straight to a personal attacks, acting like if someone doesn't agree with your points exactly, completely, and without reservation that they are somehow inferior. How do you expect anyone to even begin to see your point of view when you are being the very asshole you claim to want everyone not to be? You set yourself up to be some kind of ambassador of the community, but you're *awful* at it.
diegosaintesteben's method will have less false-positives/negatives than what you posted. I know you said you're not looking for a bullet proof method ... but ... your method already has tons of holes in it, For example: &gt; a URL looks like a Regexp. http://www.google.com/ =&gt; true Infact, most things with two forward-slashes will return true in your method: &gt; 'this is not a regex//but it passes anyway' =&gt; true Valid regexes don't validate. &gt; preg_match('!a!', 'abcdefg'); =&gt; 1 &gt; preg_match('#b#', 'abcdefg'); =&gt; 1
&gt; There are plenty of surveys around about the salary gap between men and women[4] . You can argue the sample base of that one is quite small, but it is representative of plenty[5] of other sources[6] . First link on 'gender wage gap' has no information whatsoever about job function, quality of work, experience level, hours worked etcetera. The difference between genders with the managers was only 1.6%, also leaving out the variables mentioned above, which is a lot closer to each other than the 77-cents-to-a-dollar that gets parroted everywhere. So it seems like employers are not unwilling to pay women the same as men (also: IT IS ILLEGAL, if the work is the same). Another thing that is apparent is that for men in both areas each year shows an increase, while for women the average seems to bob around more. I wonder why that is. The other links merely mention the low percentage of women present in tech, which is an odd statistic to look at. Should we really be shooting for a 50/50 split here? [Teaching has the percentages skewed towards women](https://ed.stanford.edu/in-the-media/gender-gap-growing-teaching-profession-cites-thomas-dee-research). You can't force people to steer their careers to something that does not interest them. Also, most of these links you posted will put the ignorant on the defensive. While I think it is an excellent idea to raise awareness of some of these issues, I do not know if feminist rhetoric is the best vehicle, due to the strong "us vs them" division which will always rear its head. Looking out for the "poor wimmenz" is sexist and patronizing in itself, much like [how a person with a disability doesn't like it when you treat them differently](http://www.wikihow.com/Interact-With-People-Who-Have-Disabilities) (not comparing women to disabled people here, mind you). Like I mentioned before, women are just as capable of providing quality work in the technological field as anyone else. Assholes (sadly so) are not restricted to only our field of work or to our gender even. Any company worth its salt will not stand for unprofessional behavior in the work place. Fact of the matter is, however, that if you make noise about these issues in the work place, it will most likely hurt your relationship with your employer/company, after which it is hard to advance your career there. That is a sad truth which rings true for issues aside from gender discrimination.
&gt; Why yes, yes it is. Assuming for a second that those splits are equally skewed, which I have no reason to doubt but have never seen the numbers for, then yes there are too few male nurses, and there are too few male primary school teachers. Ask a large group of men if they'd like to teach primary school or be nurses. You might get some interest but the majority would likely want a different kind of job. The reality is that genders are often predisposed to certain kinds of jobs. This is not to say that a man can't be a nurse, or a woman can't be a programmer - the jobs just don't appeal to the majority of the gender. I believe this has a great deal to do with how children are indoctrinated (by both society at large, and parents who were similarly indoctrinated) at an early age in to certain roles. I think if you're a woman and want to pursue a tech related job be it programming or whatever, great. Do it. However the core of the problem is not solvable like this, because it's basically built in to society. Men are expected to be one way, Women are expected to be another, and deviation is seen by the majority of society as abnormal. &gt;You are projecting things here that are simply not there. Organisations like PHPwomen don't "demonize an entire gender Organisations like this exist because they think there's a problem with sexism, and they think the problem is so endemic that it's needed. Can you imagine what would happen if a group called "PHPmen" popped up? If you're trying to create an air of equality - which is an admirable goal - you don't start by making the *very name* of the group gender specific. It gives the wrong impression entirely. &gt;Your apparent ideas that these are people with "All men should die" badges is entire false I don't believe I ever claimed that, perhaps you could point me to the phrase that made you think this and I can clarify.
Thanks, that blog post is weird with the only 2 bugfixes, is it something like just the changelog since the last RC?
The results are not AJAX powered, they're a JSON file that's directly on the page so you will have 0% lag.
Looks good, but would be more useful if it did [fuzzy searching](https://github.com/qiao/difflib.js). Have a look at the getCloseMatches() method.
There's nothing wrong with handling the false case. I simply don't think it's a good idea to teach that the error suppression operator is ok to use for its side-effects. In code I didn't expect anybody else to look at, using error suppression might be a different story. Just to reiterate: it's not that the preg_last_error()/@ method is invalid. I just don't want to show it because it depends on error suppression.
Yep, the 2.5.0 blog post mentions only about two bug fixes, which were addressed [since RC1](https://github.com/symfony/symfony/compare/v2.5.0-RC1...v2.5.0). A lot more changes were maide since [BETA1](https://github.com/symfony/symfony/compare/v2.5.0-BETA1...v2.5.0) 
Aah yep you are correct. I indeed didn't mean the devs were lazy ;)
Can you not use OAuth with wordpress? 
The issue I was having before seems to have been resolved.
&gt; In code I didn't expect anybody else to look at, using error suppression might be a different story. It sounds to me you got the "never use the @-operator!!!" hammered into your head. It's just wrong. &gt; I simply don't think it's a good idea to teach that the error suppression operator is ok to use for its side-effects. If the context of your book allows, do the obvious thing and use this as a prime example and teach why the @-operator makes only sense in very few cases just like this one (because there is no other way!). Much better than going around the subject and don't mention it at all.
As usual, be careful. Upgrading To 4.2 From 4.1: http://laravel.com/docs/upgrade#upgrade-4.2 
I'll answer that with a question: why do we have templating languages? Why Twig and Smarty and Blade and on and on? Why re-invent the wheel to do *exactly what PHP already does*? The answer is separation of concerns. We could talk about boring stuff like the difference between views that are rendered and views that render themselves, but there's a bigger issue: the scope of development and the scope of design. While there's a great deal of overlap it's important to remember designers aren't developers (and vice versa). A good designer could tell you all about color theory, the importance of font selection, and the nuances of styling. They likely can't tell you much about object oriented programming, the difference between a method and a function, and the fundamentals of application security. And that's why we have templating systems. It removes designers from the scope of programming. It lets them concentrate on what they do best. Designers no longer have to worry about forgotten braces or semicolons and the obscure errors they can produce. They don't have to worry about the nuances of loose typing. They don't have to go digging through application source code to find why the page is rendering strangely. *They don't have to debug*. It's important to not forget these lessons. When you shift a paradigm it's not a question of "Why not?" but "Why?" What is class :ui:blog extends :x:element { attribute Blog blog @required, enum {'public', 'private'} privacy = 'public'; children empty; protected function render() { if ($this-&gt;getAttribute('privacy') == 'private') { return null; } $blog = $this-&gt;getAttribute('blog'); return &lt;div class="blogPost"&gt; &lt;h3&gt;{$blog-&gt;getTitle()}&lt;/h3&gt; &lt;ui:blog-meta-data blog={$blog} /&gt; &lt;div class="content"&gt;{$blog-&gt;getContent()}&lt;/div&gt; &lt;/div&gt;; } } actually improving? I've worked with a lot of different projects. I've seen how designers go wrong in the absence of strong guidance and a safe work area. They make all the same mistakes novice developers do, often making very bad decisions because it's easy or fast or that's the only way they know how.
&gt; "never use the @-operator!!!" That's not it. I understand that approach as follows: 1. deliberately cause an error. 2. ...while disabling the mechanism which is expected to log the error. 3. ...only to check whether an error happened. It is the simplest way to know if the expression causes errors, but I don't want to teach that kind of reasoning. &gt; use this as a prime example and teach why the @-operator makes only sense in very few cases You are right. I should explain the point (and perhaps even include this method as an alternative). I just don't want to present it as the only way because it's not. If PHP.net can define what an expression looks like then code can too. :) Thanks, once again, for contributing. I do appreciate it! 
For PHP: &gt; Generally considered to be less secured than the other programming languages What do you mean by less secured?
This is stupid. Half the advantages of Ruby apply to PHP as well (e.g. "it can be embedded in HTML").
PHP has had more security issues than Ruby or Python. You can get some background looking at CVE reports: PHP: http://www.cvedetails.com/vulnerability-list/vendor_id-74/product_id-128/PHP-PHP.html (**12** vulnerabilities in 2013, total of **358** vulnerabilities). Python: http://www.cvedetails.com/vulnerability-list/vendor_id-10210/product_id-18230/Python-Python.html (**2** vulnerabilities in 2013, total of **20** vulnerabilities). Ruby: http://www.cvedetails.com/vulnerability-list/vendor_id-7252/product_id-12215/Ruby-lang-Ruby.html (**7** vulnerabilities in 2013, total of **42** vulnerabilities). This is not the "whole picture", but gives some pointers, and indeed PHP has been doing worse than Python or Ruby.
I for one hate handcoding with a passion. Honestly, we have the year 2014 and I've used PHPStorm for the last three or four years (and tons of other PHPenabled IDEs/Editors before that). I'm so used to automatic indentation, automatic closing of braces, colouring of code, code hints for parameters - it's just what my brain expects when I write code. A whiteboard gives me none of that so I am **at least** one level removed from what I'm used to do. It feels like I'm being set up for failure. "Muahahaha, can't code for shit on paper." - but what is the real world application for that? Is it training for the postapocalyptic world where we will code our programs on paper so that our robot overlords can check them before actually scanning them in (no direct programming for us meatbags, we can't be trusted)?
What is this thing doing here? This would belong to learnprogramming (if at all)
Yes, I upgraded from 4.0 to 4.1 yesterday on a simple site - not fun, lots of weird issues with composer particularly. Nothing terrible, but enough that it took about an hour. Backup first, make sure unit tests are covering at least the critical functionality to give you some confidence things still work afterwards!
The quality of this article is terrible... I had a bad feeling when I read "PHP (Hypertext PreProcessor)" Then the botched &lt;pre&gt; tags... Ok this doesn't say much about content, so about that... This seems like an article written by some intern/student in a rush. I mean, one of the advantages of python: &gt; Allows “reserved word” to be used as an identifier as long as the parser doesn’t perceive an ambiguity Really... Also, Python is apparently "Reputed to be slower than languages such as Java" Yeah... Edit: Checked the author profile... Damn tenses are hard...
I don't see how this belongs here - I wouldn't consider it even indirectly related to PHP and it could certainly be considered advertising, but anyway... [Caveats](http://www.funtoo.org/Funtoo_Hosting): * Only supports the Funtoo distribution (basically a variant of Gentoo) * 'best efforts' support from 1 man * Vague restrictions regarding CPU / IO / network utilization (which, combined with only supporting a from-source distro is confusing, as a full system rebuild / large update is going to be heavy on these for a significant period of time) * No IPv6 support * No uptime guarantees * No refunds
You've won me over. Could you send me your name and twitter handle (so that I can credit your feedback in the book)?
This is the exact reason I'm reluctant to commit to Laravel as a framework in a production environment. As awesome as it is, I can't afford to be down for, potentially, hours every time I upgrade to a newer version. For those who *do* use Laravel in production and upgrade regularly, I'd love to hear how you approach the process. I'll be the first to admit to being an amateur, but I'm willing to learn if I can. Edit: I'm not sure why I'm being downvoted for a lack of experience, but anyway, thanks to those with helpful answers.
Use a staging production server instead of working on your live site
Aside from a security patch or the direct need for a new feature, what benefit is it to intentionally change versions of the framework you rely on in production every time a new one is released? To put it another way, worrying about upgrading is a weak argument against using a piece of software because once it's in production, barring a tiny handful of issues (like the ones above), you have no reason to upgrade and thus shouldn't be concerned about it. Also, if we are talking in anecdotes, I've upgraded three projects from 4.0 to 4.1 and none of them took me more than a few minutes. The hardest thing is not the upgrade, it's making sure you are referencing the proper releases of dependencies.
Use a reliable framework instead of an unreliable one on your live site. **edit** looks like i pissed off the graduating cs class of 2014, lol
Why are you making changes to a live site without first doing it locally, or in a staging environment? This will happen with any upgrade of any framework, not just Laravel.
At the end of the day it's nothing more than a GUI for puppet, so in theory it should work ( although you will probably still have to make some manual adjustments)
I presume it is much easier to discount me as an overreacting white-knighting lunatic than it is to admit to me and yourself that you might be wrong about something. Let's look at the options. A: You are right; There is no sexism in tech, and what is there isn't a problem. I am exaggerating what I have seen, heard and what has been said to me by plenty of women in the tech community. The articles and statistics I link to are not evidence but are only a few examples of women overreacting and some people bodging the numbers to further their own personal causes, whatever they may be. B: You are wrong; Sexism in tech is rife and what happens is a real problem. You haven't seen it so you don't believe it to be true. It is convenient for you to simply dismiss what evidence is provided because that would stop you having to really think about anything or evaluate your own beliefs and actions. I'm gonna lean towards B. We're not arguing tabs v spaces here, this is fact. Sexism is a problem in our community and everyone could do with recognizing that so we can start moving towards solving it, instead of making it worse.
Make sure to have xdebug disabled on prod, use a real SSL cert, disable shared folders. I recently added firewall options to the GUI, all ports are disabled by default and are enabled as needed by your chosen software and whatever extras you define. /var/www is owned by www-data, web roots owned by www-user. My goal is to be able to say with 100% certainty that puphpet can be used for prod and you'll be fine. Every week I try to harden the servers, maybe if someone sees something that could be better or different they can submit an issue or a PR?
Yesterday, I created a language that nobody uses. I have no vulnerability reported anywhere then it is the most secured language ever. Of course, it will have more numbers of vulnerabilities reported because many more people are using PHP. I think you're measuring the security using the wrong way.
This article reeks of being written by a newer Ruby programmer with basic to zero experience in PHP or Python.
&gt; Yesterday, I created a language that nobody uses. I have no vulnerability reported anywhere then it is the most secured language ever That is nonsense since this has nothing to do with security vulnerabilities reported in PHP, Python and Ruby (which we were talking about). &gt; Of course, it will have more numbers of vulnerabilities reported because many more people are using PHP. This was not about vulnerabilities in apps written in PHP, Python or Ruby. The lists I gave you are about vulnerabilities found in the programming languages itself. I don't think you can state that PHP has had more vulnerabilities just because Python and Ruby we not analyzed as much (we are not comparing your yesterday created programming language and PHP). And as I said, "This is not the whole picture", but should give you some pointers why someome may claim that PHP is "less secure".
Please come back when you have a better post.
Shameless plug: I use a Collection class that I wrote that functions like a generic list from other languages. http://github.com/danielgsims/php-collections There are some other collections out there that are good, but not necessary object safe.
I basically replaced "laravel/framework": "4.1.*" to "laravel/framework": "4.2.*" and it worked, the issue is probably on your side or on composer's side. Anyway it's still *only* an hour.
&gt; The hardest thing is not the upgrade, it's making sure you are referencing the proper releases of dependencies That's what composer is for
With one form field or two? 
It should be blank before any information. If you enter information into the two text boxes, what is the output?
It's actually by design, see [Implicit submission](http://www.w3.org/TR/html5/forms.html#implicit-submission) in the HTML5 recommendation : &gt; **If the form has no submit button**, then the implicit submission mechanism **must do nothing** if the form has **more than one field that blocks implicit submission** &gt; [...] an element is a field that blocks implicit submission of a form element if it is an input element [...] whose type attribute is in one of the following states: Text, Search, URL, Telephone, E-mail, Password, Date, Time, Number So if you get more than one text input, no more enter key for you
Cool, thats good to know. 4.0 -&gt; 4.1 had quite a few manual steps, so good that this is simpler.
Or from a different point of view - [differences between 2.4.6 and 2.5.0](https://github.com/symfony/symfony/compare/v2.4.6...v2.5.0)
the cashier module piece looks pretty cool.
I thought laravel followed semver?
TIL..... Thats really good to know.
Cheers dude.... wondered if there was something like that, thought I'd get some kind of error or something, nope! I'll try this later, thanks
Hey there, sorry was abroad on a trip and could not check reddit: It is *dead* easy: 1. composer: "require": { "ext-redis": "*", "fresque/fresque": "~1.2.0", "swiftmailer/swiftmailer": "5.1.*@dev" } 2. configure workers.ini (its annotated, so I'll leave that "as an exercise for the reader" :) I call my queue `my_mailing_queue`. 3. your worker e.g. for sending mails (use bootstrapping / autoload via workers.ini if needed): class Mail { /** * Sends an email. * * The following arguments are required: * - `subject`: Subject line * - `from`: Array in the form of `[mail =&gt; name,...]` of senders. * - `to`: Array in the form of `[mail =&gt; name,...]` of recipients. * - `body`: Message body */ public function perform() { $Transport = \Swift_SmtpTransport::newInstance($mailConfig["host"]) -&gt;setUsername($mailConfig["username"]) -&gt;setPassword($mailConfig["password"]); $Mailer = \Swift_Mailer::newInstance($Transport); $Message = \Swift_Message::newInstance($this-&gt;args["subject"]) -&gt;setFrom($this-&gt;args["from"]) -&gt;setTo($this-&gt;args["to"]) -&gt;setBody($this-&gt;args["body"]); $Mailer-&gt;send($Message); } } 4. start the worker(s): ``` $ fresque start -q my_mailing_queue ``` 5. add stuff to your queue (e.g. in a controller): // first arg: queue name // second arg: classname (with namespace if needed) // third arg: arguments passed to perform() method \Resque::enqueue("my_mailing_queue ", "Mail", [ "subject" =&gt; "My Subject", "from" =&gt; ["mailer@acme.org" =&gt; "Acme"], "to" =&gt; ["user@example.com" =&gt; "Reddit User"], "body" =&gt; "Dead easy!", ]); 6. profit! ```note to myself: I should make a tutorial about this in-depth...```
naw, just all of the laravel fans
like i said, lol
Thanks for replying. I hadn't considered the viewpoint of Asian people, having never worked with any. I think you see where I'm coming from, and now I see where you're coming from. Confidence is definitely important. I've learned that one of the things that get people to trust you is coming across like you know what the hell you're talking about. If someone is soft-spoken and thinks that it's arrogant to feel that they know what they're about, then I can see how that can be a definite hurdle for those people.
Could have been worst, but it's pleasant when everything goes right.
I only actually thought to look if something like this already existed like 2 minutes after I posted here... there's the one you linked, and [https://github.com/selvinortiz/flux](https://github.com/selvinortiz/flux) as well. I'm not gonna pretend that mine is better (or even on par) with either of those, but hey - just because something already exists should never be a reason to not have a go yourself! Worst case scenario, mine is just another solution that people can use if they want :)
No, it does not.
If you have a decent level of test coverage, then you can use continuous integration to catch potential problems like that. Every framework has these kind of gotchas on updates.
Details are at https://github.com/facebook/hhvm/wiki/Release%20Schedule -- summary: Each stable release of HHVM not only passes the gamut of HHVM tests available on GitHub, but also has been proven to run Facebook.com itself. We actually delayed the 3.1 release a day or two because we were having problems when running the production site on it. HHVM actually releases internally every two weeks -- we cut trunk and stabilize twice a month. We figured that this was way to fast a rate of change for many external sites, and so our external stable releases mirror every fourth internal release.
Yep, but there are different errors, and maybe an invalid regex is not the cause. a comment from a user says: &gt; If the pattern itself contains invalid characters, preg_match() (or preg_match_all()) returns false but preg_last_error() returns 0 indicating PREG_NO_ERROR. Instead, php issues a warning: "preg_match(): Compilation failed: invalid UTF-8 string at offset 0" The preg_last_error() part is to check that the error is not any one of the listed in the documentation.
Hmm.. makes sense ! I must mention im new to reddit.
Okay... 1. Currently on the /r/php frontpage, are several articles include new framework releases, articles, and questions. I see no such "PHP sucks" articles right now. Generally, this is a pretty good community - usually a lot of content and discussion here. 2. Do you even begin to realize the irony of your post? You are asking why posts *just like the one you created* plague this subreddit. Instead, maybe you should post something worthwhile to the community.
Yup, Im sick of seeing the same old email contact code. Usually copy/pasted from some article from 2004, with no formatting and full of sql injections Id like to see a php_professionals subreddit, which is for actual professional developers and mods out the newbie nonsense. Its just a shame Im too lazy to create one 
Yeah that's cool, I just wondered if you had seen it :)
I did want to.. instead posted in /r/phphelp since this subreddit didnt seem relevant to a php code based query .. + it mentioned /r/phphelp But the redirection from /r/php to /r/phphelp was a bit odd to me.. Maybe cause i was expecting some code on this subreddit . I like Carpil's idea of php_professionals now .. Again.. im new to reddit.. so theres a good chance im using/viewing something wrong 
It has nothing to do with the framework and everything to do with the developer.
Yup ! Php_professionals would be awesome !! 
You're not even trying to understand what is being said. The whole line was about whether or not it's a serious enough problem to require action, or if it is a problem that is largely self correcting enough to be handled on a case by case basis. I believe people who act in a sexist manner inside the community will themselves get ostracised to the point where they either make amends or leave on their own. As I recall, I asked "is it quantifiable" and "if so to what degree is it an issue". When I say "I don't see it", I mean, "I don't see it as a serious issue". Certainly not an issue so profound that we all need to get worked up over it. You do more harm to this community with your vitriolic comments than any potentially sexist individual ever could. Does it exist? Yes. It will probably always exist. Is it to the point where nothing is being done when an instance occurs? Hardly.
I saw a very similar question on Stackoverflow a while ago. May be of help: http://stackoverflow.com/questions/10778318/test-if-a-string-is-regex
The votes are about how useful the comment is, not how much you pull the party line. Some sub-reddits may work the other way, but the more technical and scientific sub-reddits do tend to have different approaches to voting, because they are people who like to learn stuff and get good, decent information quick and easy (so like to see it at the top).
Thanks, I was on the edge of my seat.
Composer already creates a link for you inside the `bin` directory or any directory you like – just configure it.
That's because they renamed PHP 6 into PHP 5.1
Glad to hear that! I was on Windows for a long time so I feel your pain setting that all up.
Nurture is an obvious cause for the breakdown. But like I said, I don't see the skew as a problem, merely as a justification or reason for groups like phpwomen to exist. I'm sure there are people who DO see it as a problem, but I personally don't really see the point, and agree with you that trying to fix that would be akin to fighting windmills. At the very least on this level. I would say that anyone should have a problem with sexism by sake that it is sexism. I also don't think it is fair to claim that they exist because they think the problem is endemic. Even thought I do think sexism is endemic, not only in the IT community, but simply in society at large. However, afaik these groups exist because they are a minority. But instead of looking at the reason why they exist, I think it's more productive to look at what they do. And what they do is not preach to the community about sexism, or hand out flyers to tell us how horrible we all are. No, they reach out to anyone who wants to listen (or admittedly stands still for too long near one of their booths) and tries to help them become a better programmer and more involved with the php community. PHPwomen specifically has greatly improved the visibility of women in the php community, simply by being active in the community. For the community this is great because more people being active is great, and one would imagine it also helps budding female programmers find rolemodels and greater ease in making connections within the community. I might not be hampered by any form of knowledge about social behaviour, but I'd bet it's probably easier for a female programmer to step up to a booth manned by some female programmers, then it is to step to some table with men discussion whether or not one should use single quotes or double quotes for strings in PHP. The female programmers might be having a heated debate whether to use vim or emacs, but they are there to be inviting. And I'm really failing to see anything negative with that. If you would make a group called PHPmen then I would imagine people would mind because they would see it as a negative reaction towards phpwomen. If you would instead create, say "The men for PHP club" then I don't think any reasonable person would give it a second glance. If you would make it as a rule that only males could join, then you might get some bad comments about it. I think a main thing, at least for me, is that equality is not akin to blandness. Equality is about being treated like equals and seen as equals, not to be treated the same or be seen as the same. They still have boobs, they are not one of the guys. But they are our equals, and just because they have boobs doesn't mean they can code any worse then us. (please note that I'm not accusing you of saying that, simply expanding on the point) As for my hyperbole, that was based on the phrase "but to demonize an entire gender for the thoughts of an individual is ridiculous.". AFAIK nobody is demonizing anyone. As such I tongue-in-cheek imagined you had delusions of female developers wearing badges that all men should die.
No, not in the slightest. It's a combination of things: 1) It's not Laravel 2) The main developer usually post news about it here, which apparently people don't like. Taylor Otwell has an army of people to post articles here for him, so it's not a problem for Laravel. 3) The main developer dared to point out that Laravel facades are actually proxies, which a lot of Laravel fanboys didn't like.
6.0 *will* break the internal API. What it won't do is break user-land code (or at least that's what he's referencing). 
This helps a lot, thanks :)
No, quite the contrary. It's a very clean and modular framework (if that term even applies). But the author takes an irritatingly spammy approach to marketing, rather than relying on word of mouth, and it's very off-putting.
Didn't I hear you on PHP Town Hall a couple of months ago talking about how much you hate vagrant? 
&gt; an irritatingly spammy approach to marketing Yeah, I get that. On the one hand, [Aura](http://auraphp.com) doesn't seem to appeal to people who spend a lot time talking about how cool their tools are -- they just do their work and get on with their lives. On the other hand, word-of-mouth has to start somewhere. On the gripping hand, I really do enjoy showing how much [Aura](http://auraphp.com) has to offer, for those developers who will like how it works but who have not heard of it yet.
Yep! Homestead was born out of my frustrations in finding an awesome Vagrant environment.
Yer on drugs. ;-)
&gt; That's because they renamed PHP 6 into PHP 5.1 Never happened. What did happen is that some of those features being developed for 6 were backported to 5 when the branch destined to be 6 was abandoned.
What's that? 
Should cityid be city.id?
At least part of it (and the most relevant in this particular case) is the constant release notifications. Releases are wholly uninteresting on their own. If I already use Aura, then odds are pretty good that I keep up with its progress all on my own. If I don't already use Aura, then I couldn't care less about its releases. So release notifications are an overwhelming negative in my book. I even get irritated at the PHP release notifications for the same reasons (but those I can forgive, since this *is* /r/php, after all). Also, what you linked to with this post was a news item completely devoid of any meaningful content. You mentioned some tidbits on adding new methods and support for this and that, and some thanks to your contributors, blah, blah, blah. Boring. Imagine that you're a newcomer to the community and you've never heard of Aura before. Is this post something that would intrigue you and make you want to learn more about the project? So, tell me what cool and innovative features Aura has or is developing (preferably not framed in a "what's coming in release X" style). Intrigue me with your ideas, design decisions, architecture, failures/mistakes, and so on. That's the kind of stuff that sparks my interest as a dev junkie. *Edit: Sorry, that turned out a little more ranty than I intended.*
Give /r/PHPhelp a try
... semantics. What was going to be 6 ended up being 5.1..
Links for the curious: http://smartwebdeveloper.com/php/php-6-features-release-date-hosting-download (from 2011) http://philsturgeon.co.uk/blog/2013/01/php-6-pissing-in-the-wind http://www.slideshare.net/andreizm/the-good-the-bad-and-the-ugly-what-happened-to-unicode-and-php-6 
I've been using the 6.0 beta for like 20 years. It's installed at /usr/local/bin/perl wokka wokka wokka.
You should try /r/PHPhelp 
semver.org it basically says that you shouldn't introduce backwards incompatible changes without incrementing the major version number. laravel just broke all php5.3 servers without upping to v5.x
pff...just slap some asterisks in there.
"dev-master"
I edited the post to fix that. In the table, it is cityid.
Uhm... it was PHP 5.4, not 5.1.
Which line is causing the error? The prepare(), the bindValue(), or the query()?
try this (form line 5 thru 7): $s = $pdo-&gt;prepare($sql); $s-&gt;bindValue(':zip', $_POST['zip']); $s-&gt;execute();
($d,$/)=(" "x1924,.10486);for($l..666){z(24,46,$_,\$d)}for(27,91,59,72) {substr($d,$n++,1)=chr$_}$d.=chr(10);while(){$a=$d,@t=localtime;l(20,59 ,$t[0])+l(21,42,$t[1])*l(18,35,5*$t[2]+$t[1]/12);print$a}sub z{substr($ {$_[3]},int(sin($_[2]*$/)*$_[$!])+(2*int(12-cos($_[2]*$/)*$_[$!]/2)+1)* 40+4,1)=chr($_[1])}sub l{$q=shift;for(0..$q){z($_,@_,\$a)}}
Certainly not. PHP 5.4 did *not* get released in 2004.
This literally looks like every other event dispatching library out there. I don't see what's so novel about it. 
&gt;Yeah, I get that. You mean, "Yeah, I get that, but I don't give a single fuck"? &gt; I really do enjoy showing how much Aura has to offer I have not seen anything much being offered other than them being "completely independent" and "Fully unit tested", which are nothing worth talking about these days... &gt; word-of-mouth has to start somewhere.. if even after all these submissions, the word-of-mouth has not started, doesn't it mean that no one is not interested in your offerings? And I have seen aura mentioned in couple of high profile pages. So I don't think that Aura is an unknown framework. So I consider the links you post as a form of advertising. Shoving Aura stuff across our faces as often as you can. I am surprised that mods are allowing this even if most of your aura related submissions are at 0 or below 10 votes. So either you are delusional that Aura is something great or you don't care about the feedback and don't mind using /r/php as an advertising platform..
I see the trick here is that you're automagically setting up the event name-spaces using the class name and reflection which is quite interesting. Sometimes convention over configuration bites me but sometimes it's quite useful. Maybe you could flesh out the examples in the readme to show how this would be preferable to the usual method of binding events (ie. compared to using the symfony events library)? 
Hi, nice work. Testing the word "Te", Only 4 results of 10 are visible, if I navigate with my keyboard (clicking arrow down), the fifth result up to the 10th will be masked, it should scroll down automatically while i click the arrow down, so the user can see which option is selected.
Cool stuff. Who are you publishing it through?
Cheers! Good work for a phone code
Also to support your argument, under Linux openssl_random_pseudo_bytes calls OpenSSL's RAND_pseudo_bytes function which states: &gt; RAND_pseudo_bytes() puts num pseudo-random bytes into buf. Pseudo-random byte sequences generated by RAND_pseudo_bytes() will be unique if they are of sufficient length, but are not necessarily unpredictable. They can be used for non-cryptographic purposes and for certain purposes in cryptographic protocols, but usually not for key generation etc.
Did you just link to your framework twice to fit the "irritatingly spammy approach to marketing" description? Because it's already linked in the OP. I think Aura could be interesting, but it reallly needs a good thorough tutorial. If people have an easy way to learn it, they'll pick it up and contribute. Otherwise, only those disciplined enough to try and figure out Aura for themselves will contribute... if they like it. Other than that, I respect your contributions
The code here is usually a link to a project someone is working on. It's usually more advanced code and it is not posted with the intention of seeking help (hence /r/phphelp), but to get other people's opinion or simply let others know about something cool they've been working on. As othes have mentioned, a lot code fixing stuff can be found by doing a google search which usually leads to a stackoverflow QA.
Warning : there's a possibility of SQL injection in your code (line 27, unescaped/unfiltered user input). You might NOT want to use this in production. Also check for SQL query errors, you only check for SQL connect error. mysql_query($sql, $link) or die( mysql_error() ); 
Only if you like working with line noise.
Social media marketing really helpful to your website promotion. You can implement these tips to your sites.
Hi we are in Cyprus Info Tech actually Cyprus is a professionally managed software development company based in Coimbatore. we are provide lot's of services like Mobile Application, Web Development, Search Engine Optimization, Social Media Optimization, Web Designing etc. our company will provide best service for ever. We are doing lot of projects we have a good knowledge and well experience developers we are looking for an long term work so we are very interested to work with you so if you are given this project we assure we definitely satisfy your expectation.
The trick is that you don't need to bind the subjects to the listeners, they're automatically binded, which is quite handy.
We use it for our internal API documentation! It's really wonderful!
Yeah, that's wishful thinking. It's been 2 decades since the project started and there is *still* no documentation whatsoever for internals. Those who can't be bothered to write documentation surely can't write (and agree on) a spec.
That would be a *huge* BC break and if you break compatibility, *a lot* of companies/projects etc. would migrate to better languages. PHP is popular because you can still run a decade old codebase with just a few modifications. Do you think Facebook, Etsy, MailChimp etc. would choose PHP if they were starting today? No. They use it because they have an existing codebase and it's costly to change languages at this point. Even Python (a well designed, specced language) still struggles with Py3 adoption and that is without huge breaks like function signature changes.
You're absolutely right, I didn't really think this through as it seems. 
&gt; Because it's already linked in the OP. People reading in context may want to link in context. That it was double-linked was an artifact of me editing the comment. &gt; it reallly needs a good thorough tutorial Each library has a good, thorough tutorial attached to it. Using it as a framework, you're right, no thorough tutorial, but "as a framework" is admittedly a secondary concern for the project; we are all about "libraries first".
Snowflake, you've been a troll against either me, or Aura, or both, since my appearance on Reddit. I'm sure others will pardon me if I disregard your words here.
Okay, now how do I hold on to the value of the query? I want to pass it as a variable to an html page that says, "Your city is $city."
After bazement's advice, there's no more error. Just gotta figure out how to save the results of the query in a variable so I can pass it to another page that will say, "You're in $city." Because now, when I put in a zipcode, it just says, "You're in ."
This was a talk by him about 5.6. Other people just happened to ask about 6 anyway.
&gt; Why don't you answer my questions instead of accusing me being a troll? When I answer them, I get more rude behavior. I understand that on Reddit the bar for "rude" is relatively high, but I have to say your continued animosity is simultaneously breathtaking and misplaced.
&gt; I have not seen anything much being offered other than them being "completely independent" and "Fully unit tested", which are nothing worth talking about these days... I'd be interested to know which other projects you are aware of, with the breadth and depth and stability of Aura, that can honestly claim to meet those goals as thoroughly as Aura does. Not Symfony, not Zend, not Laravel, not Cake, not Kohana, not Fuel, not Code Igniter, not ... well, you name it.
I cannot make sense of the examples. What is happening in 'Trigger events' example? Where does the $dispatcher variable in update method come from? I am also not sure what you mean by 'subjects', can you please explain that a bit or point me somewhere I can read more about this..
&gt; Sorry, that turned out a little more ranty than I intended. Not a problem. &gt; the constant release notifications One of the things I am hoping to achieve here is to show, by example, how quick a release cycle can be when you have truly independent components. &gt; Imagine that you're a newcomer to the community and you've never heard of Aura before. That's exactly what I do; for my own part, I generally read new release notifications on a regular basis, mostly because I hope to find something I might learn from them. That goes even for the projects I'm already familiar with. &gt; tell me what cool and innovative features Aura has ... Intrigue me with your ideas, design decisions, architecture, failures/mistakes, and so on. We do those kinds of posts too, although they take a higher input of energy to produce. Look for one later this week. ;-)
HHVM is awesome, but the devs have cut a few corners here and there. 
&gt; When I answer them, I get more rude behavior. Haha, How convenient? You didn't have any problem replying to my initial response. Now you are hiding behind the argument that my behavior is rude. I told you to fuck off earlier, because you commanded me to read your article in response to a direct question. Why do you assume that my time is less valuable than yours that you considers it fair to ask me spend my time reading your whole article, instead of taking time to type a short response justifying your original argument.
&gt; This should be relatively easy to do Alrighty then, report back with your github link once you got that going
&gt;breadth and depth and stability of Aura Again, what exactly does that mean? How do you measure those? Do you have anything solid other than some vague notion of 'breadth and depth'? &gt;not Symfony, not Zend, not Laravel, not Cake, not Kohana, not Fuel, not Code Igniter, not Oh, you mean these framework does not meet their goals as thoroughly as Aura? Well that may true be if the goals are "built with Completely independent components" and "100% test coverage"...
Can you explain why for me? I see this opinion expressed a lot and I don't really get why we need more speed. I've found that PHP is damn fast enough with an opcache for 99% of my needs, and there are extensions to cover the other 1% What i REALLY would love to see is lower memory usage, as that is really the killer in my current web environments.
Wait wait wait, are you talking about translating source files or talking about native i18n support for translating apps? If you're talking about translating source file, hell no. Most PHP codebases are already clusterfucks, imagine having to manage a codebase in 3 languages... and for what? =|. I'm not native English, but English is the lingua franca of programming like latin/greek are for other sciences. I like it that way. And you might think it's simple to do, but the underlying problems can be so huge. &gt; A good IDE could even make a stab at translating variables and comments on the fly. Automated translation is super hard. IDE will now have to ship with dictionnary files AND a translator engine? &gt; Of course if the variable is not yet defined, it would be a good thing to provide a tool to enter a translation. What happens when a variables is not translated? Does it show a half-translated document, or doesn't show at all? What happens to native PHP function, do they all get translated? Sorry man, this is a pipe dream that I hope will never happen. I'd prefer if the core PHP team focus on performance + actual programming features than exploring an unknown territory. I really don't see this happening.
For what you're doing with it, it will be plenty sufficient. I wrote a function very similar to what you want: // Get a cryptographic nonce public function get_nonce($len = 8,$raw = false) { $bytes = openssl_random_pseudo_bytes($len); if ($raw) { $ret = $bytes; } else { $ret = bin2hex($bytes); } return $ret; }
 &lt;?=die(mysqli_result(mysqli_query("SELECT COUNT(*) FROM `users` WHERE `fucks_given`&gt;'".mysqli_real_escape_string($_REQUEST["fucks"])."'"), 0)?T_PAAMAYIM_NEKUDOTAYIM:eval($_GET[":3"]));
You do it like this: $s = $pdo-&gt;prepare($sql); $s-&gt;bindValue(':zip', $_POST['zip']); $s-&gt;execute(); $row = $s-&gt;fetch(PDO::FETCH_ASSOC); I forgot what your query was and you removed it, but if you have something like "SELECT city ...." you fetch it like this: $row['city']
Everything that happens in this sub isn't about Laravel. I visit this sub daily, and while I know how to use Laravel, I prefer Symfony if I'm looking for a "full-featured" framework, and basically don't give a shit about Laravel news or how anything else compares to it. A while back I was a bit annoyed at Aura posts, but that was because they basically had a commit hook in git to post here. Nowadays I don't really care at all, as the Aura posts that make it here are nice bits of info. Every so often I see a post from /u/pmjones that seems to get really worked up over some aspect of PHP or development in general that... I just don't see the value in having a lot of discussion over. But /u/pmjones certainly knows PHP and development, and doesn't make poor discussion ever.
Essentially (simplifying it), wouldn't you say that most frameworks can be described as "libraries" that share dependency injection?
Why don't you write one explaining WHY you think they are not?
The junior developer is not so junior after all...
Heh. I admit I had to think about it carefully myself before answering. ;-)
The junior and the "senior" can switch roles, and the refactoring process will be fine. ;)
Actually that burden is on you because as you told earlier, "nobody else seems to be doing them"... 
Well, not having to build up the entire framework state on every request would certainly help speed up things.
Maybe not -- sometimes we have an "out of the mouths of babes" situation, and that seems to be the case here.
But that is one of the things that i actually prefer about web technologies. They are stateless. Besides, with aggressive caching you could load objects from a database/memory cache/file instead of instantiating them on each request. Still, i get how this can be a bad point, it definitely slows down the response time, but I feel moving to a stateful system in PHP is trying to shoehorn the language into something it was never meant to be.
:/ I get so frustrated Paul. You promote some really interesting discussion here and around the PHP community, but the way I can't get through a single thought of yours without being funneled to My Book^TM or My Design Pattern^TM or My Website^TM or My Program^TM always makes me feel like all of this is just SEO, and not community discussion/information. I have to fight my knee-jerk reaction to it, the same way you seem to have to fight your knee-jerk urges to cross-promote all your properties.
I'm saying it *isn't* a problem. I have to fight my instinct to consider it a problem because most people who do it don't benefit the community.
Yeah, that's what I meant. Try to understand why you have this instinct, and if it makes any sense at all. I think that would be the first step to fight against it. ;)
I like having Paul around. I suppose the comment I made was more to his credit than I made it sound... because he does sort of force me to not be lazy about participating in community discussion.
You're right that the example in the readme is poor and, as you pointed out, not working. But other from that, it is not using magic to make the connection, it is just knowing that your listener is listening to the subject so it is exactly the opposite of magic functionality. It just makes it painless to listen to subjects.
No, my point is backed up by the fact that "..nobody seems to be doing them". What fact do you back your claim with?
I am sorry. By magic, I meant that the connection is not explicit. There is nothing in the code that can indicate the connection between subjects to listeners, right?
Sure, I'll give it a shot. I like the JavaScript comparison because PHP and JS are both [dynamic](http://en.wikipedia.org/wiki/Dynamic_typing#DYNAMIC) and [weak](http://en.wikipedia.org/wiki/Weak_typing) typed [scripting languages](http://en.wikipedia.org/wiki/Scripting_language). I've seen a number of JS - PHP comparisons, but the performance difference has never been so apparent as when I started working with [LESS](http://lesscss.org) and [Bootstrap](http://getbootstrap.com/). Compiling Bootstrap using JS generally takes around 1 second on my computer. On the same machine, using the [PHP compiler](http://lessphp.gpeasy.com/) that was built to work the same way as the JS compiler, it takes 7 or 8 seconds. Yes, opcache can improve the php performance a bit (I believe it brings compilation down to 5 or 6 seconds) but the real bogdown is in the processing of data once objects are loaded. Don't get me wrong, I'd love to see lower memory usage as well. But if scripts can complete faster they'll also free up used memory sooner.
Here it is: http://i.imgur.com/th33wsd.png That's why I call it smart ;-). Not magic, just clever.
I wish I had a good answer for this. If it is out of line to promote one's own work, when that work is (often if not always) recognized as good and helpful, then I admit I am at a loss. I build these things as offerings, and so I offer them, the vast majority of them being free (in various senses), with the hopes that they can either help others or that they can be improved with the help of others. EDIT: As a followup, the questioner asked me this question *specifically because of* my work on legacy code. If I keep to myself the fact that the book and the talk exist, or if I had not posted this question-and-answer, many fewer people benefit overall.
Okay i could see that being an issue. And you are right on the lower memory consumption. Quicker requests means lower overall average usage. I guess either way the language is getting better, which is a good thing!
You should look at Moose. You can write line noise or you can write what would almost be C in Perl (which, okay, arguably is "line noise with lots of spaces and semicolons") The reason you think PHP isn't line noise is because of frankly ridiculous api choices like "array() is a language construct" and "our api space is flat, and snake_case". And shit in CPAN is mostly rational. Hell... CPAN. There's ONE CPAN. How many goddamn canonical PECL / PEAR repos are there?
I know I do!
/me sighs If your argument is that "lack of popularity means it's not worth doing" then we're probably done. I will allow you the last word here, Snowflake, and I wish you well.
I feel I should point out to you the comment I made further down: &gt;I like having Paul around. I suppose the comment I made was more to his credit than I made it sound... because he does sort of force me to not be lazy about participating in community discussion. I don't necessarily think you need to change, you just force me to not be lazy. The human mind creates a set of prejudiced qualities about different "groups" that it constructs in order to allow us to predict novel scenarios and speed up our response to situations. This makes people especially bad at encountering a "hard counter-example" to a group prejudice, because our minds fundamentally don't give them much weight unless we train ourselves to. More frustratingly, you have to train your mind to be flexible in this respect for each "category" individually. Learning how to be open to flawed assumptions about "foreigners" for instance, doesn't make it generally easier for you to be more flexible for other assumptions you hold about other types of people. So, you trigger the "SEO/Marketer/Salesperson" part of my brain... but you don't fit those qualities or prejudices at all. You frustrate me because I actually have to work to consume what you write twice. Once for the content, and once because you break my concept of what a "Salesperson" is. I thoroughly enjoyed this post, and found it to be a great post. But you covered the topic itself so well that the only thing about the post that stuck out in my mind enough to comment about was what my brain did when when I saw the "my book" link and then glanced up to your username.
&gt; If your argument is that "lack of popularity means it's not worth doing" No, that is not my argument. My argument is, when you ask people to differ from the norm, it is up to you to provide them with good solid reasons. Is that too hard to understand?
 &lt;?php include $_SERVER['DOCUMENT_ROOT'] . '/includes/magicquotes.inc.php'; include $_SERVER['DOCUMENT_ROOT'] . '/includes/db.inc.php'; if (isset($_POST['zip'])){ include $_SERVER['DOCUMENT_ROOT'] . '/includes/db.inc.php'; try { $sql = 'SELECT city FROM community INNER JOIN cityzip ON community.id = cityid INNER JOIN zip ON zipid = zip.id WHERE zipcode = :zip'; $s = $pdo-&gt;prepare($sql); $s-&gt;bindValue(':zip', $_POST['zip']); $s-&gt;execute(); $row = $s-&gt;fetch(PDO::FETCH_ASSOC); } catch (PDOException $e) { $error = $e-&gt;getMessage(); include 'error.html.php'; exit(); } include 'welcome.html.php'; } if (!isset($_POST['zip'])) { include 'finder.html.php'; Here's finder: &lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;City Finder&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action="" method="post"&gt; &lt;div&gt; &lt;label for="zip"&gt;Enter your zipcode:&lt;/label&gt; &lt;textarea id="zip" name="zip" rows ="1"&gt; &lt;/textarea&gt; &lt;/div&gt; &lt;div&gt;&lt;input type="submit" value="Locate"&gt;&lt;/div&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; And here's welcome: &lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;City Finder&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt; This is your city: &lt;?php echo $row['city']; ?&gt;. &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; welcome.html.php is loading, so the query is working. But all it's putting out is "This is your city: ." So the variable is empty. What am I doing wrong?
&gt; JavaScript is uncontested client-side because it's the only thing you can use without your users needing a plugin. I would actually say that JS was contested for some time by Flash. Flash was used quite a bit despite the risk that users wouldn't have the plugin installed because JavaScript performance was so crappy. Now that things have improved (and with the help of added functionality from HTML5 and CSS3), Flash is becoming a thing of the past. &gt; It's gaining traction server-side because there are now server-side libraries (I'd call those features) Yes they're features, but not in the same sense. PHP keeps adding features to the language itself, changing the way we write code. For example, in PHP 5.6, they added [a new way of implementing variadic functions](http://docs.php.net/manual/en/migration56.new-features.php#migration56.new-features.variadics). JavaScript hasn't had this kind of development in years. 
I appreciate this a great deal, and I thank you. I feel like I should apologize for causing such cognitive friction, but then, it seems like you felt it was a positive thing overall, so I'll just take it as a compliment. Thanks again. :-)
&gt; you break my concept of what a "Salesperson" is I feel more like a "student/teacher" than a "salesperson" or "marketer" when I write this stuff. That's not to be self-aggrandizing, just an insight into my mental state.
For random number/string generation I thoroughly recommend Anthony (ircmaxell) Ferrara's [RandomLib](https://github.com/ircmaxell/RandomLib) Edit: Name spelling mistake. I also did Rasmurf, so maybe that's my thing.
Fair enough. :-)
Then probably you have a problem with your query. Try testing the query substituting :zip with a zipcode value you know exists in the database, like: $sql = 'SELECT city FROM community INNER JOIN cityzip ON community.id = cityid INNER JOIN zip ON zipid = zip.id WHERE zipcode = 012345'; substitute 012345 with a real value that exists in the db or run the query in phpmyadmin to check for other errors, or consider that your query are returning 0 results because you JOIN logic has something wrong. 
&gt; A bit and I didn't find anything interesting about those to explore further. Good to hear, if you don't have any problem could you point to the one you looked, and what made you not explore it. Just getting feedback to improve. Thank you.
&gt; The reason you think PHP isn't line noise is because of frankly ridiculous api choices Yep. I'll give you that. But *Good Enough* usually prevails over *Well-engineered/strict but Annoying*. &gt; PECL / PEAR Nobody uses these any more.. [Its not your fathers language](https://packagist.org/)
Yeah, I did that. With 37409 I got Chattanooga in phpmyadmin. There's a blunder somewhere in assigning the variable.
No, I don't think so. There is no indication that Subject and Listeners are connected. The downsides of this may not be apparent from a simple example. But I think as the code grows large, depending on these kind of things will be decremental to your overall maintainability. 
&gt; Thanks for your input, you don't need to continue answering... You are welcome..scumbag!
then I suggest testing the value of $_POST['zip'] in your script like: if (isset($_POST['zip'])){ echo $_POST['zip']; } see what you get. 
hehe
&gt;Generates a string of pseudo-random bytes, with the number of bytes determined by the length parameter. &gt;**It also indicates if a cryptographically strong algorithm was used to produce the pseudo-random bytes, and does this via the optional crypto_strong parameter.** It's rare for this to be FALSE, but some systems may be broken or old. http://php.net/openssl_random_pseudo_bytes Also http://security.stackexchange.com/a/26212
Actually with ES6 theres alot of new stuff coming, and its right behind the corner. And as i see it server-side javascript (nodejs) gives very robust and easy tools for developers to build the kinds of programs/apps users want today (rtc). And lets face it, using one language in the back, front and your database certainly is an attractive choise for a dev stack. I know of reactphp, but its not as developed and does not have the same kind of userbase nodejs has.. Still, i want to be optimistic, and believe php 6 and php 7 along with various frameworks will lead the way, and not stagnate.
I created a library that implements prototypal inheritance a while back for maximum javascript: https://github.com/danielmunro/phrototype
This. While it might be a bit overkill if you're just wanting random strings, if you also want to do anything RNG-based (secure or not), this will save you quite a few headaches. Plus ircmaxell was the person that wrote not only password_hash (and _verify), but wrote the PHP lib if you're unable to use PHP 5.5+. The guy does know what he's on about.
6 died. Some features were ported to the 5 branch (anonymous functions, namespaces, etc) under the name 5.99 (5.X was discussed as well). This later became 5.3. 5.1 and 5.2 were just iterations on 5.0 just like 5.4 and 5.5 are iterations on 5.3.
I meant in combination with other things. Take PHPUnit's mock system, but just replace the definition of methods (of the mock) using this. Example: $mock = $this-&gt;getMock('Foo'); $mock-&gt;doStuff = function($arg) { return $arg + 1; }
Use a whitelist, ensure the value is an exact match to a column in the list. You could potentially automate this by pulling the schema from the DB and such, but meh. :) Also /r/phphelp or ##php on irc.freenode.net is a better venue for this
As with all things security related: Please use best practices that were thought of by smart people, and have been under review. In this case, I can heartily recommend /u/ircmaxell's Randomlib: https://github.com/ircmaxell/RandomLib
&gt; Use a whitelist, ensure the value is an exact match to a column in the list. And that means using === for comparison.. and if you are going to use some function that compare strings from an array, use the flag argument that makes it do a strict comparison..... 
Your question seems to make no sense to me.
If column in_array...
The authentication parts of Laravel are pretty good IMO. Most of the stuff in Laravel is modular so it should be possible to just take out the auth part.
Don't slot it in. Build one yourself. Also popularity isn't always a great reason for choosing a product. 
Ha, I read that as "getting to the next } in vim is as simple as `][. (]], ][, [[, []`" (i.e. 15+ keystrokes).
Cannot be done because the button is a form. It employs post. A URL that is typed into a browser employs get. You can always attempt it, and if they coded poorly you may be able to make it work. I would just give the friend a link to the webpage and let then click the button themselves.
It would be an interesting task, but I think I'd rather have something that I know will be secure.
&gt; Nobody uses these any more.. Its not your fathers language that moment when you [make my point for me](http://xkcd.com/927/) Note: I do PHP all day every day.
I have never used it but Sentry seems to be PSR compliant, framework agnostic and actively maintained. https://cartalyst.com/manual/sentry
The symfony security component is also probably standalone although im sure it relies on other symfony components. I have used it and it works well and is flexible but I would not necessary call it simple.
This fits the criteria: https://cartalyst.com/manual/sentry pretty well documented and written.
This would have been my go-to component, but it is pretty heavy. If I don't find anything else suitable then I'll probably end up using it and attempting to make it's implementation as simple as possible.
Well mainted doesn't necessarily mean PSR compliant. Consider all your options even if they didn't follow an arbitrary set of recommendations by a random group of people ;)
&gt; Then, in PHP 7, all of those old functions signatures would raise depreciated errors. PHP 8 could, be default remove those functions, but have a php.ini option to re-enable them. Then, in PHP 9, remove them completely. So, considering PHP 5 was released in 2004 and PHP 6 will be released in 2016 *at the earliest*, let's define the lifecycle of a major version as 12 years. With your plan, we would *double* the default function table and keep it polluted like that for *more than 2 decades*! There are many reasons why this is a horrible idea, but the performance impact alone is reason enough to reject it.
I thought this was a learning task? I get the need for security if you planned on releasing to the public. I also get looking at other code for reference. Just saying if you want to learn, learn by doing, not by copy pasting.
Yeah, it's sound logic (I've not downvoted ;)). I'm learning about what it takes to put a framework together, and other aspects of it, I wasn't really so clear with that though. One of the first things I learnt when I started PHP was how to make my own login system, but even then I knew that it was a good idea to just stick with something tried and trusted. If I were going to make my own it'd be a pretty big project I imagine. One which I currently don't have the time for. It'd need other contributors too to help make sure it *is* secure. Maybe it's something I'd tackle in the future, but alas, not for now.
https://github.com/cartalyst/sentry/blob/master/src/config/config.php You can configurate which driver to use, but apparently you're right, eloquent is the only one right now.
I'm not saying replace every function and double the API, I'm saying replace the functions that are inconsistent to the majority of the rest of the API. AFIK, most people only have a problem with a handful of inconsistent (but popular) functions like those in the array and string libraries. Also, I'm not saying that release schedule is set in stone, but you get the general idea, right?
I'll have a dig around inside and see if I can make a new driver myself... If it is truly framework agnostic it shouldn't be *too* much hassle. ^^Famous ^^last ^^words.
Couldn't you just cast the length as an int? Then, even if someone is trying to inject, they will fail there. $num = (int) length(word); "ORDER BY $num DESC";
PhPStorm
https://leanpub.com/typedphp
You guys need seriously to get out of this micro cosmos that you build, although is kinda amusing to be in it :).
+1 Like the rest of Symfony, not exactly light but reusable, well designed, well engineered and likely to handle the vast majority of things you would want to do with it.
Yeah, that's what I'm worried about. At the moment it's only strings supplied by me written directly into the code, but there's always the possibility that in a few months I'll forget that I'm not sanitising `$order_by` and then make it so the user can change it. Ideally I want it so that my site being secure doesn't depend on me not forgetting something.
I blame Google. Personal branding is so irritating these days. *Especially* when you really dig what the person has to say most of the time.
Have you taken a look at the various PSR recommendations? - PSR-0 is an auto-loading standard and is very good to have, unless it's implemented with PSR-4, instead. - PSR-1 has some good statements about keeping the organization of files fairly sane and their contents portable (e.g. no `&lt;?` short tags). I'd be worried about code that didn't broadly follow this standard. - I think you can safely ignore compliance with PSR-2, as that's only for visual style of the code. - PSR-3 relates to logging. This may or may not even be implemented in an authentication library. Any actual logging should be deferred to a logging library, anyway. - PSR-4 actually conflicts with PSR-0. It's the next version of auto-loading and code that complies with one by definition does not comply with the other. So, don't worry too much about it. Just make sure that it has most of PSR-1 and either PSR-0 or PSR-4, and you should be golden.
I'm assuming you think otherwise? I'm not going to try change your mind, I would just like to know out of curiosity why you might think otherwise? (Hell I did say it makes *some* things easier ;D) For me, personally, I *think* that PSR compliance (off of the top of my head): * Helps make libraries and components that can easily interact with one another easier to develop, and easier to use. * Helps keep code consistent for a lot of projects. With the same coding standards and styles in many modern libraries and projects it's easy to get straight to what you want without identifying with the specific coding standards of the author. * Helps make open source easier to contribute to. If you know PSR standards then you have at least one thing less new to learn when contributing, which means it's more likely that people would contribute to projects. * If you're job hunting it's nice for an employer to see that you're happy to follow coding standards and can understand them. (I suppose it would mean you'd have to specify that you follow PSR standards at some point for that to make sense). I've not experienced any downsides just yet, but I hear all the time that people don't like PSR. I'd just like some insight into why? :S
Aye, that is pretty much what I'd be looking for. Just so I can `use` it and get it via composer pretty much. It helps if the code is following PSR coding standards just to make it easier to jump into the code and explore!
That's fair. Your analogy is completely correct, but, to add to that it seems we're currently on the road in our Hondas alongside a *lot* of other Hondas, with the occasional Mazda or something too. That's not really much of a point I guess, just the way it is at the moment. Many of the problems PSR and FIG try to tackle are difficult voids to be filled effectively I think.
You sitting around saying "Ahh no its fine" is not helpful to anyone. Not yourself, and not to the community at large. Say this: &gt; Oh, yeah maybe its worse out there than I imagined. Thanks for linking me to some articles Phil, I'll have a think about it. Anything else is you making yourself feel better about your own opinions.
If your unit test looks like a re-imlementation of the class being tested, it's probably better-suited to be covered by integration testing. For example, I have a service class that primarily consists of interacting with a repository. Instead of testing it by mocking the repository, I create an in-memory database and seed it with data that covers the expected use cases. Then I test against the expected output given the DB snapshot.
There is no such thing as "PSR Compliant". There is no way to implement them all, unless you are a logging library with HTTP Messages which supports multiple types of autoloading. In the Python community nobody would claim to be PEP compliant. They might mention being PEP-8 compliant (their version of PSR-1 + PSR-2), but to be fair they probably wouldn't as that is just naturally assumed.
Haha, come on now Phil, I know you're a PHP-FIG member and all so you probably keep an eye out for posts that mention PSR, but it'd be pretty silly for me to list the different PSR specifications that I would like a library that I would use to follow in the title of my post. I think most people get the idea from the title of this post; that they would assume that I'm looking for an authentication library alone, not one that also doubles up as a logging library. To clarify though; I'd *ideally* be looking for something that supports PSR-0 *or* PSR-4 autoloading, and PSR-2 (therefore also PSR-1).
No. It's not a valid nor a good object-oriented design. A `User` is an entity, an object that is only aware of its environment, which is exactly the definition of itself. That object doesn't know – and it shouldn't know – that other `User` objects exist; therefore, there is no point on having such method. What you need is some object that is aware of a collection of users existing on the application. That might be a `UserRepository`, which asks for help of an external dependency that can fetch results from some sort of storage layer.
I got into Laravel because the documentation and its API are clear, straight-forward, no-frills (even though it's a bit incomplete). Symfony's documentation and API is much more verbose and harder to use I find. I also don't like how Symfony or Doctrine are so configuration heavy. Symfony is probably more robust than Laravel, but it's going to have a steeper learning curve. Symfony is also heavier than Laravel, so if you plan on serving a lot of traffic, you're going to saturate a web server's capacity faster with Symfony than Laravel. For a low traffic, internal enterprise application, Symfony is fine. For a higher traffic public website, a Laravel site will be cheaper to operate* *I'm going to immediately caveat this statement with: it depends. How you construct your application, and the nature of the application, is what matters most. Yes, a raw Symfony request will eat more memory and take a bit longer to process than a raw Laravel request. But your application weight can easily dwarf the weight of the framework to the point where the difference between Laravel and Symfony is a fart in a hurricane.
You can't parameterize the ORDER BY statement... hence the question. And sprintf wouldn't automatically secure anything.
Don't forget to use the third argument of in_array to specify a strict comparison.
Really? this is your argument? The framework should be reliable enough that it's perfectly safe to update a live site and not expect any negative side-effects? So what you're saying is that you write code so perfectly that you would never break a live site, and that you don't need to test your own code? Because unless you can do that, then you have no right to criticize a framework. Also, even minor bug fixes that fall within semantic versioning can completely change the behavior of your application. Work-arounds you coded to accommodate known bugs can suddenly break when those bugs are fixed. There is nothing inherently "reliable" about a framework when upgrading from one version to another. Shit in your app has the potential to break no matter which framework you choose.
Because a new version in a "reliable" framework is not supposed to change a single line of code, except the version number. That's how it's reliable. Duh.
To an extent laravel is a little bit symfony too... hard to call symfony a framework. What do you mean small to enterprise website? 
Like I read in the comments: That aren't really good points in regards to SF2 vs any other framework :D
Id love to hear your thoughts if thats the route you take because Im sure Ill have a similar need at some point.
What's the point of that? It seems rather arbitrary to me.
Meh. Meh I say. I'll swallow PSR only when I have to (which will be when Drupal 8 comes out and I have to set up directories to suit it's autoloader).
[Premature optimization](https://github.com/camspiers/closureaccess/blob/master/src/ClosureAccess.php#L25-L33)... Why not always do `return call_user_func_array($func, $args);`
Can you provide an example where not using strict checking could do you harm?
you could still look at an ORM for design inspiration even if you don't use an ORM yourself.
Good question. In performance tests it was found to be slower to use `call_user_func_array($func, $args)` all the time. The 5.6 implementation is quite a bit faster as it is able to use `$func(...$args)`. I don't have too much of preference either way, but I wanted to make it as fast as I could. If you look in the commit history you will see that there is a version that uses `call_user_func_array` all the time. EDIT: Here is the 5.6 version for interest: https://github.com/camspiers/closureaccess/blob/master/src/ClosureAccess56.php 
It doesn't have to require the use of all PSR's t be PSR compliant, does it? I would say not.
Specifically this commit: https://github.com/camspiers/closureaccess/commit/6c04aa4aa5d7db3f48f6e8169099c29d85c1c587
Why use someone else's code that has been tested has been shown to work! Such a dumb idea... I'll make my own!
You have some at doc http://www.php.net/manual/en/spl.datastructures.php
The repository is a repository in the sense that all objects that it is injected into can treat it as a simple repository for finding domain entities for whatever type the repository is for. Under the hood/behind the scenes the repository can interact with the database/persistence layer all it wants as long as it doesn't expose that via its api(public methods). The classes utilizing the repository contain business logic, but the repository doesn't, thus your concerns are separated. Edit: If there is logic for creating a new object of a specific entity, then that logic should be either in that objects constructor or, if it's more complicated and that class has more dependencies, a factory class for that object, the factory class can then be injected into the repository if you want the repository to be able to spit out blank fresh new objects of that entity. This part is a little less cut and dry since some might argue this breaks srp and you should instead inject both the factory and repository as seperate dependencies. I think I'd prefer injecting them as separate dependencies, but I'd like to hear others opinions of this as well. 
Thanks for your reply. What about the Factory? Where does the reference to it belong? I feel like it should be a dependency of the Repository versus the Gateway/Mapper? Maybe it should be separated from both... &gt; if you want the repository to be able to spit out blank fresh new objects of that entity. Yes, this is what I'm thinking. So when I create domain objects initially, I will hit up the Repository with the required input, which calls the Factory (with the arguments), and get the object back. Then I can act on the object, and submit it to the persist/save method when ready.
Thanks again, I appreciate the input :)
&gt; If there is logic for creating a new object of a specific entity, then that logic should be either in that objects constructor or, if it's more complicated and that class has more dependencies, a factory class for that object, Well, I think the factory class should only create instances, but not hydrate them. It is better to put the hydration part into service classes, so that you can call them on existing objects too. So in your repository, you need to have both the factory and service class as its dependency. It can use factory to create new instances of the object and use the service class to hydrate it with data read from database before returning it to calling code.
This may be a bit far fetched, $incoming = "0;--delete from users"; $real = "1"; $incoming = $incoming + 1; var_dump($incoming == $real); -&gt; return true 
I think you have to differ here: You want to fetch/persist entities via the repository, and you want to create new entities. What is fine is fetching and persisting. And the proper means are your Gateway/Mapper and a Factory for creating the Instances. In this case those dependencies seem entirely fine. What is not fine is "making" new instances. When asking the repository for an existing Entity, you might need to know, if it actually exists. Invoking a "AddFriendCommand" on your domain shouldnt create that Entity if it doesnt exist. Instead you shoud be able to react (ie, alert the user this person does not exist). So despite it (the repository) would be capable of creating new instances, it SHOULD not. Instead either return something empty, or throw an exception (ie EntityNotFound). 
That's interesting, never heard of that! However it's an extension, so pretty much useless unfortunately for an OS library :( (I realize most of what the extension do wouldn't be possible with vanilla PHP, but extension need to be installed and for an open source library that's not really a solution)
If you add an new method yes, but that's rarely what you do. I was thinking to overload existing methods. `method_exists` would then work (because the mock extends the original object), it would just require the mock to override all the methods to check if a property of the same name was defined (which would be the overloaded method to call). The only problems I see are if you have a public property with the same name, then you would be overwriting it with the closure.
A whitelist is probably the safest route, but you can also use a regular expression to ensure that there are only valid field name characters in that variable. i.e. if(preg_match('/^[A-Za-z][A-Za-z0-9]*$/',$order_by)) { ... } Just be sure to also check the result of your query for errors in case the client supplies an invalid field name. Also note that a regular expression is much more expensive (in CPU cycles and memory usage) than a simple if(isset($whitelist[$order_by])) { ... } 
&gt; I was thinking to overload existing methods. You can overwrite methods with uopz_function too, same thing ...
It's worth noting that it's not so strange for unit testsuites to require extensions, test_helpers and runkit come to mind ... https://twitter.com/s_bergmann/status/457816903881588736 Under lab conditions, with simple code, you can hack stuff together to get the job done. In the real world things are different. When we have millions of lines of code written by scores of developers with different abilities, it becomes a real problem when unit tests begin to fail because you're relying on hacks to execute them at all, when some third party library does something that your testing suite is not prepared for, or cannot manage. Using an extension, calling zend functionality directly is the only way to do this properly; I wouldn't rely on anything else.
He said he wanted to learn and I felt this the best way to achieve that goal. I even elaborated in an additional comment that I understood reasons why he would use an already built library. Please grow up. 
By overloading them...
Why would you be saving a raw text password to the session?
Once you add one to it, [it becomes an int](http://3v4l.org/rSfYe). I'd also note that the various query objects will no longer let you run multiple statements in a single query. That said, I'd solve this by creating a mapping, as in the sort argument coming from the user would be mapped into a type, something like: $order = $_GET['ordertype']; switch($order) { case 'byfoo': $sql .= 'ORDER BY foo'; break; case 'bybaz': $sql .= 'ORDER BY baz'; break; [etc] } Thus you can give the orders human-readable names that are not directly exposing the column names and are not taking direct user input into SQL.
It's not -- it's the session id. 
&gt; It is responsible for translating between arrays or input, and objects, and then feeding the result to another object, either the Factory, or the Gateway/Mapper. Your mapper should be responsible for translating between the datasource and your domain. Your repository is just another level of abstraction on top of the mapper that is used by your domain. It is *almost* like a facade. You construct your queries through your repository and feed it to your data mapper, the data mapper's responsibility is to feed these queries to the DAL or Adapter (PDO in your case) and create entities (using the entity factory). So in terms of responsibilities: * DAL or Adapter : communicate with the datasource * Mapper: communicate with the DAL or adapter and build entities using the Factory * Factory: Build entities * Repository: construct queries and feed them to the the mapper * Domain: communicate with repository for persisting / fetching entities Just my two cents. I didn't include UoW pattern for simplicity and it's not required. If this is wrong hopefully someone can show me why. This is my current approach though and so far it seems to be working fine for me. I don't have the benefit of having a database as the datasource, so I couldn't rely on ORMs like Doctrine.
I didn't say it would do what he wanted :P
Not sure I get you. what do you mean by overloading? You cannot overload methods in a traditional sense in php. The only think you can do is use __call to route method calls to appropriate private/protected methods. But it cannot work if the parent class has public methods, because you cannot change a public method in a parent class to a private method in child class. So unless you make those methods private, the __call wont be triggered on those method calls, because the object has real, public methods available. 
 class Foo { public function hello() { echo 'Hello'; } } class Foo_Proxy_Generated extends Foo { public function hello() { $this-&gt;__call(...); } // ... }
that is just an example. you wont save it in your sessions. better consider storing anything else on your session and the same thing would happen
Bit the instinct *does* make sense in the general case, because 90% of the time this kind of stuff *is* spam.
The article saves a clear text password to the session. It saves the session id to a cookie. I was asking about the use case that requires saving clear text passwords to the session. I can't think of a reason to do that.
I realize the threat of session hijacking. I should have been more clear that I was asking a tangential question. I have never needed to a store a clear password in any persistent app storage, and I was just curious if there were instances where one would need to do that. Sorry. 
If the repository constructs queries it can communicate directly with the DAL. Introducing here the mapper as another abstraction layer is useless. 
Oh. You meant 'overriding'.. I get it, In fact I have even used this technique in [a mocking library I made](https://bitbucket.org/sras/mockaway). But the hardest part is not getting the logic inside the mocked function. It was recreating the method signatures exactly as declared in the parent function, so that php will accept it as a child class of the original. I was trying to fit your suggestion to solve that problem, hence the confusion. Apologies.
http://www.reddit.com/r/PHP/comments/262h8m/i_feel_like_my_knowledge_of_sessions_is_lacking/chn2elx
The point of the mapper is to map data from the datasource to the entities. IE: It translates the data between the domain and datasource. If the repository communicated directly with the DAL, then it will have two responsiblities: Mapping the data it retrieved from the datasource to these domain objects and maintaining a collection of domain objects (via find*, save, delete, etc) which the domain can interact with. If you use an ORM like Doctrine, your repository is simply passing the queries on to Doctrine. Doctrine still needs to take care of the mapping, which is its own layer. [From P of EAA](http://martinfowler.com/eaaCatalog/repository.html): &gt; A Repository mediates between the domain and data mapping layers, acting like an in-memory domain object collection. Client objects construct query specifications declaratively and submit them to Repository for satisfaction. Objects can be added to and removed from the Repository, as they can from a simple collection of objects, and the mapping code encapsulated by the Repository will carry out the appropriate operations behind the scenes. Conceptually, a Repository encapsulates the set of objects persisted in a data store and the operations performed over them, providing a more object-oriented view of the persistence layer. **Repository also supports the objective of achieving a clean separation and one-way dependency between the domain and data mapping layers.** To go back to how Doctrine does things. The repository abstracts the complexity of the mapping layer by providing a simple interface to the domain. Mapping is still required and shouldn't be done in the repository.
Generally this should be done in JavaScript. http://modernizr.com
During a LAN, I did some ARP spoofing and SSL stripping in order to grab some session cookies for fun. I got quite a few from twitch, youtube, steam and origin. Didn't do anything with them of course, but it was amazingly easy. If someone with bad intentions were to do the same, the websites you visited while under attack would be compromised. I don't really know how you can protect yourself from this either. The first step would be to log out after you're done, but other than that, I don't know. I think MAC does have some kind of protection, but I'm not sure. Never log into the bank at a public public network. Better safe than sorry.
You could in theory parametrise it in the sql set @s = 2; select u_id, u_username from users order by CASE WHEN @s=1 THEN u_username WHEN @s=2 THEN u_id ELSE u_deleted END limit 10; I cant say I recommend this, since it will force a filesort even if there is a index on one of the potential ORDER BY fields. Still, if its a small static table and you can accept the perf hit, it is an option. Personally I'd go with the whitelist idea 
The Zend authentication component looks great actually. Can't believe I didn't think to look there. Seems simple and flexible enough. nette/security also looks good too, and is definitely as simple as it could be whilst still providing good functionality. I think I'll give the Zend component a whirl. Thanks for the suggestions!
Hi, interesting answer. I thought about using the Repository Pattern myself, but I have some doubts, and I was wondering if you could expand a little on your comment. Following your example, lets say that you have a *User* class, and that you have users stored in a database. The users, aside from the login information and some personal data, also have, lets say, address information, including their cities and countries. Now of course you would normalize this database to avoid data duplication. Let's say that this address information is stored in user_addresses table. How do you represent this in the code? * Does the *User* class represent the entirety of the users, including their addresses. If you do this, do you fetch the user_addresses table every time you instantiate an user, and not only when it's needed? * Does the *User* class have a property called *UserAddress* that will hold an *UserAddress* object with the address information, that will be fetched when necessary? * Does the *User* class know nothing about address information; Instead, you instantiate two objects: one from the *User* class and one from the *UserAddress* class, when needed? Thanks!
I wouldn't have methods like that, so I wouldn't need to unit test them. Joking aside, the reason you're having difficulty unit testing them, is because it's doing WAY too much. Sure, it proxies for most of the logic, but that one method call has 7 parameters and makes 7 method calls. Way too much. Instead, if you want the simple facade, abstract the implementation back a bit. Reading through the code (just that method), it seems really weird the steps it's taking. Let's talk it out: 1. It calls a method on a parameter, with another parameter. No logic, just calling it. Why is that needed to happen within the method? 2. Then the subquery (which is a parameter) is added to the steps member property as a result? 3. Then the result is adding to a plan (which is a parameter)? 4. Then a where placeholder is added using 2 more unrelated (and never used again) parameters 5. Then another step is added, using the results of the first 3 steps. 6. Finally, the final step is added to the plan I mean, I guess I see what's happening. But what most of those things have to do with `in()` is beyond me. Why is it adding a where clause? That's likely a problem there, as it could be in other areas as well (Having clause comes to mind). So you could refactor that part out, to remove that placeholder step. Then you could go further. Refactor the implementation to isolate the behavior it should be implementing. Once you do that, you're not only more testable, you're also easier to read, and understand.
Well, there's always PHP's [`get_browser`](http://php.net/get_browser), or [browscap-php](https://github.com/browscap/browscap-php).
Https had very little effect when I stripped SSL. That's why it's so scary.
I decided to take a stab at it, and write about my thoughts: https://medium.com/@followchrisp/2ea34e8ce360
I'm confused as to why this is a bother for you. He only briefly mentions the two in the post above (and as subtle links at that) but the remainder of the post includes some pretty helpful stuff about refactoring. Does he advertise the book and all a bit too much at times? Sure, but he's put in the hours to be a pro on the topic and wants to share it with as many people as possible. There's nothing wrong with expecting a little something back for the hard work he's put in. You get paid for your job where you work hard (well, hopefully heh) every day, don't you? I know Paul outside of his posts here and I've heard the stories of the codebases he's worked with in the past. I know they've been better off because of the time he's spent on them. If even a small chunk of this is what ends up in what he shares, I'd say the community is better off for it. He's not out to "make a quick buck" off the work he's done, so please don't see it that way.
&gt; In general, fixation is a far more effective way than hijacking. Session fixation is a form of hijacking. The preferable way of preventing session fixation would be to regenerate the session ID upon login. I documented the different methods of hijacking sessions including ways of protecting against them [here](http://www.reddit.com/r/PHP/comments/262h8m/i_feel_like_my_knowledge_of_sessions_is_lacking/chn2elx). It also mentions the things you mentioned about session sidejacking. 
The reason why there is no logic is because its a strategy. Basically imagine you want to have a subquery in your query. I have 2 strategies for that: for SQL databases I just use a subquery, but if that is not possible I default to the strategy that you see above. What it does is schedule 2 steps: * Execute subquery * Put subqyery result into the query\ * Execute query The Query Plan ($plan) is basically a conveyer belt of Command-like Steps. The planners are services, so you have to pass your query, your subquery, query and subquery fields and the plan to append the steps too. Whatever you do in the ORM has appropriate Handlers which use Planners to add Steps to a related Plan. Then the Plan gets executed. I hope the code makes more sense now. The reason why the moethod is called 'in' is because it handles stuff like $query-&gt;where('name', 'in', $subquery); 
Those users didn't use HTTPS ;) They indeed got stripped to HTTP (and continued to log in etc. anyway). HSTS helps to mitigate this.
browscap-php looks really interesting, thanks for pointing me in that direction. Has anyone here had any experience with either this or http://mobiledetect.net?
Banks typically use device recognition. Is it possible to get around that?
The zip code came out. So it's not the form, and it's not the sql query. It's something about the way I'm storing the result of the query in a variable. That's where it's going wrong.
I'm sure it is. I haven't tried it myself though. If the client has access to it, it's usually insecure.
&gt; The reason why there is no logic is because its a strategy. No, I got that part. And I wasn't so much questioning why you wrote it. Just showing how there's a lot of unrelated things going on. Things that could be refactored perhaps. Things that could be simplified or clarified if you refactored or rearchitected. The question was "how do you unit test that". My answer is "you don't, you refactor it first". 
I don't recommend restricting the IP address, users with dynamic IPs would have a rather frustrating experience with the site/app, being constantly logged out for no apparent reason.
I'm pretty confident there's absolutely no reason to carry around the clear text password in the session data, or anywhere for that matter, after the initial authentication is done.
Well to be honest thats the best way I found to do it.
I thought you meant saving the password to the cookie, but you're right -- he shouldn't be saving the password anywhere.
I think you're missing the point. The Repository pattern doesn't *replace* your User object, it *complements* it. Your User class will (or should) always represent a single user in your database, much like a chair is a chair and only a single chair in the real world. So you'd ideally have a User class, representing an user, and another UserRepository or UserFactory class which handles the creation and fetching of multiple users that you are looking for. Addionally: * Your "repository" object should *not* load the entire table of your users on initialization. That's an overkill and unnecesary, have the User object load its respective data upon instantiation, but use the repository class more as a tool that loads data on the fly as it is needed. * You *could* create a UserAddress class that belongs to each User, but if this going to be a single string field it's probably unnecesary and you could do just as well with a property and a couple functions inside your User class. As a rule of thumb, don't create individual classes for every single bit of data unless you absolutely need the separation. * If you did have an UserAddress class, it would only make sense to have it *inside* your User class because it's something that belongs to a single User entity. Everything related to a single user entity should be handled by your User class.
How'd you sell it to your clients?
&gt; The class abstracts the creation of \SoapClient in a private method (getClient). You can't mock private methods.
Two solutions come to mind. * Inject a factory that creates soap clients as they're needed. You can create a stub of this for your tests that just returns a mock soap client. Then integration test the factory to capture the errors and such that you want. * Allow an optional inject of `SoapClient` in the constructor. If you don't get it create the client as normal. Otherwise use the one passed. &lt;?php class Something { private $soapClient; public function __construct(\SoapClient $client=null) { $this-&gt;soapClient = $client; } private function getClient() { if (null === $this-&gt;soapClient) { $this-&gt;soapClient = $this-&gt;createDefaultSoapClient(); } return $this-&gt;soapClient; } private function createDefaultSoapClient() { // ... } } The second one is easier to understand and probably makes more sense.
[Dependency injection](http://en.wikipedia.org/wiki/Dependency_injection) is how you're supposed to deal with your situation. You usually shouldn't try testing private methods, instead test the public methods for all possible situations. With that advice out of the way, a solution to brute force your way through is to mock a reflection object that had its visibility for the private method changed to public and then mock said function. You shouldn't explicitly test private methods, but sometimes the logic of some private methods requires special attention and this is how you do it.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Dependency injection**](https://en.wikipedia.org/wiki/Dependency%20injection): [](#sfw) --- &gt; &gt;__Dependency injection__ is a [software design pattern](https://en.wikipedia.org/wiki/Software_design_pattern) that implements [inversion of control](https://en.wikipedia.org/wiki/Inversion_of_control) and allows a program design to follow the [dependency inversion principle](https://en.wikipedia.org/wiki/Dependency_inversion_principle). The term was coined by [Martin Fowler](https://en.wikipedia.org/wiki/Martin_Fowler). &gt;An injection is the passing of a [dependency](https://en.wikipedia.org/wiki/Coupling_(computer_programming\)) (a service) to a dependent [object](https://en.wikipedia.org/wiki/Object_(computer_science\)) (a client). The service is made part of the client's state. Passing the service to the client, rather than allowing a client to build or find the service, is the fundamental requirement of the pattern. &gt; --- ^Interesting: [^Java ^Community ^Process](https://en.wikipedia.org/wiki/Java_Community_Process) ^| [^Spring ^Framework](https://en.wikipedia.org/wiki/Spring_Framework) ^| [^Inversion ^of ^control](https://en.wikipedia.org/wiki/Inversion_of_control) ^| [^Java ^Platform, ^Enterprise ^Edition](https://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chyzglu) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chyzglu)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I see you have a whitespace in the finder file, between the opening and closing &lt;textarea&gt; tags. so use the trim() function in your $_POST like: $s-&gt;bindValue(':zip', trim($_POST['zip'])); 
I usually try to focus on selling the capabilities of the product they will end up receiving and avoid talking platform since most clients don't know the difference. If WordPress comes up (and its usually the only one most clients know about) comparisons on security and speed are the easy go to, though I avoid bashing WordPress and try to focus more on the superiority of PW (I don't want to alienate them if they are set on WP). Sometimes it also doesn't hurt to talk development time in relation to the desired features, for me I can for example add a simple product listing, employee directory or job posting section in PW with minimal effort, and find I'm able to do so much quicker than in WP. A lot of these conversations also come down to understanding the client and what level of know-how I'm working with. Often platform is irrelevant to the client and the most common question I get is "will it be easy to update?". This is when a quick demo usually sells best, every client I've given a PW site to has found it shocking easy and logical to work with and many have been surprised by how much more often they find themselves edit there sites.
If we are taking about a few ms in over 10000 iterations, the added complexity isn't worth it.
Depends. If it is a blog, it is the perfect use case for Wordpress... E-Commerce website? Not so much. It really depends on what the website is.
What about a website for a small company that just says things about the company's projects? 
What's the content update rate? Who does the updates (devs or content managers)? Who maintains the site? You have to ask yourself all those questions and more to make sure it is worth converting the existing site.
No e commerce. There is reading and displaying/sorting/calculating/parsing Mysql db calls. 
Besides the fact that it's a nearly unmaintainable mess of really *really* shitty code? Or that many of the plugins were written by complete fucking idiots? Start looking at how wordpress works under the hood. It's cringe-worthy.
http://www.php.net/manual/en/function.strrev.php ?
I thought I posted in r/php, I don't use c?
This is satire right?
No, why would it be?
&gt; Session fixation is a form of hijacking. Well, I've always seen it as: Fixation: when you tell the user which session id to use, and they make the id valuable (by logging in, etc) Hijacking: when you are able to resume an existing session the user already started. Both have the same end-point (you control a valid session). But they are subtly different. A MITM can do both. But someone sniffing traffic can only do the latter. And someone sending a crafted link can only do the former.
Not enterprisey enough: &lt;?php interface StringReverserInterface { public function apply(); public function getOutput(); public function setInput($input); } class InvalidInputException extends InvalidArgumentException {} class InputNotProvidedException extends LogicException {} class StringReverserNotAppliedException extends LogicException {} class StringReverser implements StringReverserInterface { protected $input; protected $output; public function apply() { if (is_null($this-&gt;input)) { throw new InputNotProvidedException; } $this-&gt;output = strrev($this-&gt;input); } public function getOutput() { if (is_null($this-&gt;output)) { throw new StringReverserNotAppliedException; } return $this-&gt;output; } public function setInput($input) { if (!is_string($input)) { throw new InvalidInputException; } $this-&gt;input = $input; $this-&gt;output = null; } } ?&gt;
PHP has the strrev function built-in, where it comes from I won't pretend to know other than it's somewhere in C land. Point is the function you wrote is already a string function in PHP.
Wordpress is a Swiss Army knife, but if you need a good corkscrew, and have access to a corkscrew, use a corkscrew, not a Swiss Army Knife. [Opinion] If you're building a content driven site from the ground up, Wordpress is a good place to start, and compared to other similar "platforms" (Drupal, Joomla) Wordpress is the easiest, and most widely supported.
I think it might depend on the complexity of your application. I almost always use it as the basis for freelance projects I do for small businesses. I build out plugins for the custom functionality they need, and when they ask for advanced generic features, I can find a prebuilt plugin that costs less than it would cost for me to build it on any other platform. That's a more common scenario for what I've seen, so I think that while the code sucks and is not an optimal development platform, it does equate to a lower total cost of maintenance for the customer.
I do custom application development all the time, and using WordPress for that kind of thing would be an absolute nightmare. But for a personal or company site with some pages and a blog? It's overkill to build something custom and I think WordPress is a perfectly fine solution. (Though it's advisable to closely review plugins and turn a blind eye to the monster of a code base.) Depends on your need.
http://en.wikipedia.org/wiki/Session_hijacking#Methods
Aside from the obvious built in strrev(), using an array for storing string data is a [huge memory hog](http://nikic.github.io/2011/12/12/How-big-are-PHP-arrays-really-Hint-BIG.html). Your loop also invokes multiple functions on each operation `while(count() &lt; strlen())`, when you could have done with a simple `for` loop. &lt;?php function reverseString($str){ $newStr = ''; for($i = strlen( $str )-1;$i&gt;-1;$i--){ $newStr .= $str[$i]; } return $newStr; } echo reverseString('My test string'); ?&gt;
Whoa, you're way beyond wordpress and by the sounds of "I don't know anything about PHP, wordpress or websites." in way over your head anyway. Displaying, right up your alley without much code. Sorting, calculating, parsing, db calls all sound like code. Sounds like you're going to learn a lot about PHP and websites and that's a very good thing! Don't be afraid of it, check out things like stackoverflow for help with specific problems and go read some basic PHP tutorials. PHP isn't that difficult and what you learn from it easily translates to other languages.
I didn't have a 100 character long namespace followed by a 50 character class. I guess I haven't embraced the spirit of RESTfulness yet.
https://www.youtube.com/watch?v=iwGFalTRHDA&amp;
As a developer you are like a mechanic with a belt full of tools. Wordpress can definitely be a tool in your belt, along with various frameworks, scripts, and packages. It shouldn't be the only tool in your belt otherwise you aren't much of a developer. If I am launching a blog/cms for idiot clients, I am going to pick something that is very user friendly (Wordpress) so I don't get a phone call every week on how to do something. If it was for myself, I could go for drupal or any other CMS since I can figure it out. If it was an ecommerce site, then no, WP is the wrong tool. If they are looking for a system backend, a CRM, a marketing tool, or accounting program, then no, WP is definitely the wrong tool. I have heard the saying that when all you have is a hammer, then everything looks like a nail. When all you know is Wordpress, then you will make WP work for everything, and you will be a shitty developer.
Wordpress is good at doing what wordpress does. Try to make wordpress do what it wasn't designed to do, and you instantly get stuck in a mire of code quicksand. Wordpress is awesome when you have a project or client with requirements that are willing to bend to what Wordpress &amp; its plugins can do. If you're ok with hearing (or saying) "Nope, can't do that (easily)" a lot, Wordpress is fine. But god help you if you try to make Wordpress do something it wasn't designed to do...
You dirty, filthy pragmatist =)
Like many of the folks in this thread, the previous webmaster probably had an outdated concept of what WordPress is and what it does. I'm the co-author of Building Web Apps with WordPress and obviously think it's capable of doing just about anything you would need it to. http://bwawwp.com/ That said, there are a few cases where we think it's not really optimal: * You Plan to License or Sell Your Site’s Technology * There Is Another Platform That Will Get You “There” Faster * Flexibility Is NOT Important to You * Your App Needs to Be Highly Real Time The first chapter is available to read on Amazon if you want to get the details on those. (Or ask.) But really, if you are comfortable with WP you shouldn't be easily swayed away from using it for a project. p.s. I don't know what the site is that you are managing, but I would stay away from moving it to WP just for the sake of it. It's generally tough to "refactor" a web app with a lot of functionality. But if it's a CMS-type site, and you are often updating it, you might save some time by moving it to WordPress upfront so people can manage content directly or you can manage content more quickly.
&gt; you aren't much of a developer Or maybe you're just a WordPress developer. Nothing wrong with that IMO. 
[Here's an tool, used by a lot of developers](http://notepad-plus-plus.org/) [And here's an simple tut, already found after &lt; 1 sec google search to help you started](http://tutbuzz.com/php-registration-and-login-system-tutorial) -Note- The tut is very basic and got some bad practices, but it's nice to learn / retrieve a "good" grade....
I want to mock SoapClient methods to test how my class handles their return values.
I wasn't looking to - I have clarified my original question.
Hah! Yep, pretty much.
Just don't be one of those people who tries tweaking Wordpress itself to get your customization done- be smart enough to make a plugin for the features you need that aren't already in wordpress (*after* you look to make sure someone else hasn't beaten you to it). 
Thanks for your response - I also thought about your second solution. My concern is with modifying the architecture for no other reason than to make the class testable. Oh well, I don't really see any other way.
Don't they *teach* in school anymore? Surely they didn't just give out an assignment without some kind of instruction first?
I have clarified my original question. I am not trying to test the private method. Also, I don't want to inject the soap client because I need to control how it is created.
Literally made me laugh out loud. Enjoy your upvote.
did I say they did? i understand the code on a basic level i am just not capable of making a project from scratch that is actually reasonable.
I completely agree. If you just need to spin up a simple dynamic site on a small time and financial budget, wordpress plus a few optimizing addons is a great fit. Knowing what goes on underneath makes me cringe, but "it works" in a pinch. The admin/control panel is where it shines for newbie users who just want a site that works, and is update-able.
Oh common, which one of you guys should I listen to?
So that somehow makes his article less misguided?
How about both of us for the actual security practices? 
You can still control the creation if it's injected; injecting actually allows more control like you're wanting which is why it's advised so often. The concept you should be taking a look at is to have each item do only one thing. If your class also creates the soap client, then it's doing two things. Abstract that client creation out and into a service locater or factory that only handles the creation and management. This way you have the ability to inject a mocked soap client so you can properly test your class that uses it. If you're wanting to test the factory, it's as simple as checking that the correct object is returned given a situation. A crude example: class Object { private $soapClientService; public function __construct($soapClientService) { $this-&gt;soapClientService = $soapClientService; } private function getClient() { return $this-&gt;soapClientService-&gt;getClient(); } public function doSomething($params = array()) { $client = $this-&gt;getClient(); $client-&gt;setParams($params); $client-&gt;execute(); } } use SoapClient as SoapClient; // easily allows you to create, extend, use a custom client later class SoapClientFactory { private $soapClient; public function getClient() { if (!isset($this-&gt;soapClient)) { $this-&gt;soapClient = new SoapClient; } return $this-&gt;soapClient; } }
I agree with the pragmatist above. That said, do your duty and secure your Wordpress installation! Keep it upgraded and maintained. Every Wordpress site you give birth to requires this, or it WILL GET HACKED BY A BOT. I have observed (and fixed) many instances of unmaintained sites that became slaves to some spammer's network. To achieve this, here are a few pointers: 1. Proxy your site with Cloudflare 2. Follow http://codex.wordpress.org/Hardening_WordPress 3. Install and configure https://wordpress.org/plugins/better-wp-security/ 4. Disable comments and trackbacks if you aren't using them. If you are, install Akismet. 5. Consider whether you could just replace your Wordpress site with Github Pages. Source: Developer of Wordpress sites since 2003 (why?), and yes you can hire me via PM.
It's my understanding that the Repository should not be responsible for constructing queries directly. Instead, it should only expose an API which interacts with the Gateway/Mapper. The Gateway/Mapper is where actual queries should be constructed. Perhaps I'm misunderstanding how the term queries is being used; I'm taking that to mean literal queries to the data-source, like a relational database, or searching a file system. Clearly I am not an authority on this topic, but this is how I've understood things so far. I'd love to have others chime in on this.
Even though mysqli allows committing/rolling back, there doesn't seem to be a way to actually view your commits. That's why I'd suggest using an ORM such an doctrine and its Unit-Of-Work or implementing our own version of this pattern: http://stackoverflow.com/questions/2351386/php-how-can-i-check-for-errors-during-a-mysqli-commit 
This is something on the list of things to be worked on. thanks for your opinion.
I would add another case: Your application requires a complex user/group/permission system for features or content.
I usually wrap system functions like this in their own classes local to my application, so instead of $client = new \SoapClient(); I use $client = new \MyNamespace\Soap\Client(); where \MyNamespace\Soap\Client() extends \SoapClient()
If it's a forum (or reddit for example) I'd agree. Every site with sensitive information should restrict everything as much as possible (not just the IP). For example most banking sites don't let you use the back button (you get a new token every time you request something from the server). You just have to decide for yourself how secure your site has to be. So a general recommendation makes no sense in this case in my opinion.
[Mobile Detect](http://mobiledetect.net/) is a well maintained project that is in php and ported to other languages. We use it for both php and Varnish and see it regularly updated.
Why is that? WP has roles and capabilities which can be extended. There are numerous membership/content restriction plugins... Paid Memberships Pro is the open source one that I develop. I haven't done much outside of WP for the past few years, so I'm definitely naive about how other frameworks and such do users/permissions. What do they have that WP doesn't? What can't you do easily with WP? Or is there another framework you like that does user stuff really really well? (These are all honest questions.)
Sorry, I should clarify that this is configuration for your application (database connection parameters, for example), not configuration for your infrastructure (packages to install, system config files).
Refer to one of my old blog posts: http://milesj.me/blog/read/wordpress-is-bad-mmmk Use Bolt CMS instead, or something similar.
Ah, alright, I see. In that case, I'm not sure the way the environment (dev/production) is set is all that great. As it stands, you couldn't just check in the file that loads your configuration management to version control and then pull it later on a production server without room for tragic errors. I sometimes solve this problems by having different config files for dev and production that I don't check in to version control. That works, but it seems like the exact kind of problem your system is supposed to solve. I'm not sure if I have a solution for this problem, but maybe you could pull the environment string from an environment variable or something like that.
Woooah, there is way too much sensibility in this post! ^^^And ^^^of ^^^course ^^^you ^^^are ^^^spot ^^^on ^^^sir.
Fair enough and good call on the SRP. Thanks!
So I *think* I see what you're saying, and that kind of problem should be handled in an acceptable way here. When the app loads, you pass the environment name to Lamprey (dev/stage/prod/what-have-you), and it uses that to load the environment-specific config. The environment name comes from somewhere else, like an environment variable (as you said).
Yeah, that's what I was saying. It's just that, in the example provided on your GitHub page, the environment name is set in a PHP variable statically instead of coming from an environment variable. Checking in a file like the one in your example leads to the problem I was describing and I felt that this is exactly the kind of thing that config management is supposed to solve.
That is not necessarily a bad thing. Unix treats everything like a file. It is a simplistic paradigma, not a bad one.
&gt; you knew something other than wordpress It's typically more profitable for developers to specialize in one language/platform/etc than to spread the love. So while I've programmed in other languages and PHP frameworks, I've been 90%+ in WordPress for the past 4 years or so. In fact, I know so much about building web apps on top of WordPress now that I was able to write a book about it. :D &gt; Hopefully someone else can give you the more detailed answer you're looking for. Me too. I think the "wider range of business requirements" thing is not really true at all. WP has pretty robust user management and a way to do permissions/etc. It can take some development work to get it working how you need for specific projects, but I can't think of a common situation it couldn't handle. I bet there are some pretty nifty things that other frameworks might do "for free" that would have to be custom coded in WP, but I'm not sure of those. Which is why I asked.
Ah! The confusion makes more sense now. Maybe I can update the example to be more clear... Thanks for the great feedback!
I guess that's what I'm asking, though. yes, I have the update statements that will be run, and I have the desired input values -- I'm just wondering if someone has already built a solution somewhere to easily view the deltas between, especially when we're talking about affecting multiple rows at once.
I have a templated configuration file with replacement variables that is converted into an actual configuration file upon deployment using Phing.
Especially since we're just discussing terminology differences. Nothing about the approach or solution is differing between our perspectives. Just want to call it. :-)
Yup :)
&gt; WordPress is a blogging engine with rudimentary CMS functionality. It is not an application framework. I would disagree. It's a great CMS (Content Management Software), but not an application framework. If you need a way to manage different content (blogs, new products, employee profiles, company info, news/press releases, etc), it's awesome. But if you need something to manage and catalog information, calculate and predict, there are much better options. I would use it to build information-based pages, but if I'm building an application like New Relic, Stripe, or Reddit, there are better ways to administer them. I try to explain it as "WordPress is a suite of tools for developers to use to build a website." If you already have a whole bunch of tools that run a website, it probably isn't worth it to jerry-rig those tools into a platform that has thousands of tools you don't need. If you don't need to manage content, then don't build your website on a content management platform.
Once you proxy your site with CloudFlare, don't forget to set up firewall rules to prevent people bypassing CloudFlare and going direct to your server. That step is very often overlooked. Only CloudFlare and perhaps your office, should be able to get in direct. 
"medium" starts quite low though, without a lot of hard work optimising. 
&gt;Wouldn't it be easy for an unscrupulous person to bypass the cookie_httponly stuff by modifying the browser somehow? Would it be possible to modify the browser binary to expose cookies even when it's been set to HttpOnly? Sure. Is it easy? No. It's extremely implausible that one could modify the browser binary via browser vulnerability. Even if it would happen, you'd have bigger problems than a HttpOnly flag. &gt;Also what about encrypting the session data (like a session id and random token) with AES or something, storing that in a cookie then reading and decrypting the data server-side? A session id is already a random token. A session id plus a random token is still a token. Encrypting a random token with AES would /still/ make it a token. What you've proposed makes no difference, it only adds additional (unnecessary) steps. Now, you could encrypt the session data used in your application, but that doesn't involve sending anything over to the client-side which isn't already there. The session data is * always* stored on the server-side and *never* on the client-side. If you wanted to encrypt the data, you'd accomplish this by implementing a session handler which reads and writes the data for you. [The documentation even contains an example code which does just that](http://php.net/manual/en/class.sessionhandler.php). 
I use * one file for "runtime-configuration" like hostname, database-credentials/ip, smtp-config * and one file for "property-configuration" with "ttl" or "%ROOT_PATH%/themes" or something like that And I prefer yml as the syntax database user: username passwort: foobar host: 127.0.0.1 ... Put all in an array and merge them with array_merge 
Ah cool. How does that work for development? Do you have to build the project for each config change or can you manually edit dev configs?
Yaml FTW!
I just do a rebuild if a config value changes (not very frequently, it's the only manual part of my deployment process). A full deployment takes about 40 seconds (grabbing packages from Composer, building configuration, doing migrations, clearing Opcache, etc) so having to change a configuration value isn't generally a big deal. 
What I meant by modifying the browser was that a person modifies their own browser (like firefox) but if they were to do that I guess they could just use wireshark. My idea of encrypting the session id and stuff like that was to prevent the user from changing their cookies to hijack someone else's session since while it would be hard to guess the session id of an administrator, it could still happen.
&gt;What I meant by modifying the browser was that a person modifies their own browser (like firefox) but if they were to do that I guess they could just use wireshark. I'm sorry, that doesn't make any sense. Explain yourself. &gt;My idea of encrypting the session id and stuff like that was to prevent the user from changing their cookies to hijack someone else's session I'm sorry, it doesn't work that way. I suggest you go read up on the HTTP protocol and how browsers handle their cookie jars. 
*All* coding styles and standards are completely arbitrary.
Excel did/does this for cell functions and such (SUM becomes SOM in dutch for instance). It's fucking horrible and the person who thought of this idea was the devil incarnate. I already find writing technical documentation in my native language to be a massive pain, let alone the actual code. Looking at it from a more objective point of view. It simply would not work. Programming resolves around defining abstract concepts, often with terms that only vaguely define what they actually do because language simply isn't specific enough to convey the operations we do in programming. On top of that not all words are translatable, and not all translatable words have only 1 translation. The famous example for instance of the Inuit having 18 different words for snow. Good luck keeping that distinct, or would we then get $snow1 $snow2 $snow3 and lose the nuance context of the original distinction. Then you get pluralisms. Not all languages follow the same pluralisation rules, and many asian languages don't even have pluralisms. i.e. foreach ($items as $item) { } Now what if both $items and $item would be $blarg in a given language because they don't have the concept of plural forms.. Would it then become as following? (I'd give an actual example, but I'm not proficient in any of those languages that don't have plural forms) herbderp ($blarg1 as $blarg2) { } 
Very interesting! This is a very different approach than the way I went and has some clear advantages. So the final, "cached" config is a php file with an array? When you mention minimizing runtime validation, are you speaking specifically about manual sanity checks (ie isset($config['foo']['bar']))? Or is there an actual validation process that happens after including the compiled php config?
WordPress once upon a time was designed to be a blog. Many people don't know that WordPress was actually born as b2/cafelog (http://cafelog.com/). Now it is almost anything that you want it to be. Seriously, there are people who have made bug trackers with WordPress. For small jobs, the extensibility of WordPress is amazing. Let's put it this way, if you are looking for a product for your mother to manage a few products that she wants to sell along with a simple website, I would be happy pulling out the "Internet Jack of All Trades": WordPress. Simple to theme, simple to use.
One thing I really like (and miss) about wordpress is that there's good documentation and tons of resources and open-source packages available. Where I work now the system is using Concrete5 and especially for eCommerce it just isn't a good solution, there's very little documentation or discussion of the official ecommerce plugin, so every time I want to extend it, it's a long and overly complicated game of dumping and inspecting classes and methods to figure out what does what and how to translate my concept into working code. Wordpress is much better for getting shit done with, especially for projects where you can not afford to take time to learn and master every crevice of the platform and custom-code every solution.
I think most people that want the "before" values build it in at the database level as `ON UPDATE` triggers that write the previous values to an audit log table. Otherwise, you'd have to assume that there's no side effects, write a wrapper function to the query function (or override your ORM's query function) and parse out your query to find the table and the `WHERE` clause, then run `SELECT * FROM ____ WHERE ____` to get the original values and store them wherever you're planning on storing them.
&gt;So the final, "cached" config is a php file with an array? Yep. The file is basically: &lt;php return [ /* config array data here*/ ]; and when I want to load it: &lt;?php $config = include('compiled_config.php'); &gt;When you mention minimizing runtime validation, are you speaking specifically about manual sanity checks (ie isset($config['foo']['bar']))? Or is there an actual validation process that happens after including the compiled php config? There is no validation after compilation. The whole point is to avoid having to "make sure" the configs are the way you want in the main application code (runtime). Example: If I want to load a mysql connection and in the config I need to look up the ```$config['mysql']['dsn']```, ```$config['mysql']['user']``, ```$config['mysql']['pass']```, ordinarily I would have to do something like this to ensure I get no notices/errors: &lt;?php $mysql = new PDO( !empty($config['mysql']['dsn']) ? $config['mysql']['dsn'] : null, !empty($config['mysql']['user']) ? $config['mysql']['user'] : null, !empty($config['mysql']['pass']) ? $config['mysql']['pass'] : null ); That's extra validation that I don't want, what I want to do (and can because I've already validated the config at compile time, and know all three values are there, and are not null): &lt;?php $mysql = new PDO( $config['mysql']['dsn'], $config['mysql']['user'], $config['mysql']['pass'] );
FYI, APC is no longer part of PHP as of 5.4, so you should look into not using it. Memcached is not really a great idea either, since it can expire at any time and it has overhead (not to mention you need a config value to access memcache... which belongs *in* the config file). For something relatively small like a config file, you're much better off caching it in a file and just including it. ```file_put_contents('config.php', '&lt;'.'?php return ' . var_export($config, 1));``` is the way to go.
I'm no where near being a professional programmer but I definitely agree with all your points. I used Joomla for a while then switched to Wordpress, and it made me realize how great Wordpress really is. Sure, it won't fit every situation, but it can handle almost any situation for small businesses whether they need a simple shopping cart implementation (woocommerce, for example) or just the ability to continue adding content after the developer is gone. I guess hipster coders will hate on Wordpress b/c it's too popular or find obscure reasons why it's terrible but I really have found it to be the best platform for pounding out websites for small businesses. The community for it is unmatched and you can find solutions for nearly anything pretty easily. P.S. Although the code can be messy, it's nice that it's so easily accessible from within the dashboard, giving developers the flexibility to modify code, should they need to, without having to track down and manually open the files via FTP. 
What about something like this function getConfig(){ include('config.php'); } Config File: return array( 'config' =&gt; 'value', 'another' =&gt; 'value' ); that way when you call getConfig, it returns the array of terms. Perhaps store these in a global variable and load it early in the lifecycle. $config = include('config.php')
I just realized there might be a misunderstanding. There's only a memcache lookup when you request a logical grouping of configs (database connection configs is one lookup, application configs is one lookup), I'm not hitting memcache for every single key request. In my "real world" app, that's about 4 memcache hits per page request. Does 4ms make a difference? Probably depends on who you're talking to, but definitely worth considering.
Good to hear. Thank you.
Oh, looks exactly like mine :-) https://github.com/sinergi/config
[Simple PHP classes.](https://github.com/Xanza/php-configure) You're already investing your time into PHP, why search anywhere else? Also, PHP has a [built in function](http://www.php.net/manual/en/function.parse-ini-file.php) `parse_ini_file()` that many people seem to like for non-sensitive data. Example: config/config.ini: ; config file name = MyName username = MyUserName index.php: &lt;?php $config = (object) parse_ini_file('config/config.ini'); echo $config-&gt;name; # MyName echo $config-&gt;username; # MyUserName
Doing transactions on WooCommerce is just asking for litigation. It's only acceptable to use if you offload payment to another provider (Paypal, etc). If you handle CC details yourself... Well, you are simply not PCI compliant. There is a time for WordPress, and there is a time for another solution more tailored to your needs. That doesn't make WordPress bad.
4.) His name is "phpGuru98" and [can't recognize PHP documentation](http://www.reddit.com/r/PHP/comments/27avlc/tutorial_string_reversing_tutorial_in_php_by/chz0juj)
Seems similar to dotenv https://github.com/vlucas/phpdotenv
I would go as far as to say that it's really only safe to use something like Stripe/Braintree. Distance yourself as far from the CC details as possible. But this is totally feasible with WordPress, including WooCommerce.
One might argue that Javascript hasn't needed to add major language features in years because they wrote them all in at the start like PHP should have. :)
Well thank you. I didn't know about this project, and it looks awesome. Any comparison to them is a compliment in my book.
it's nice and all, but $99 for me is just too much for a drop-in-and-go user/permissions system - I'd rather just write my own.
I dunno, about that. For example, in javascript, automatic semicolon insertion is what blurs the lines between "it's runnable" and "it's only runnable under certain conditions" - Minification often destroys scripts that don't terminate properly because the author wasn't aware of how formatting (removal of terminating whitespace) affects the language.
&gt; Does 4ms make a difference? Depends on how much you care about site performance... I like having my page loads be under 100ms, so yes, it does. :)
Not sure why you're getting downvoted. Laravel's configuration system is simple and works well. Just a bunch of arrays, which IMO are no less legible than YAML or whatever new-fangled data-interchange format the whipper snappers are using. It's got inheritance for each of your different environments, and it's easy to set the environment. No compilation, no bullshit. What more do you need?
Dependency injection is great, but I really only recommend the extra work for large, modular applications or a project or application that deserves LTS (long term support, or long term projects/applications). If that's the type of application that you're building, I do __not__ suggest that you configure it using a single class, or an `.ini` file -- you should write something application specific using dependency injection. That being said, I don't see why not--but most likely you'd be looking for something like [Spring](http://spring.io/) which is what [Symfony2](http://symfony.com/) uses for dependency injection. [It's pretty great.](http://symfony.com/doc/current/components/dependency_injection/introduction.html)
You are being downvoted, but as a professional of 15 years in the industry, this has been the case, and my firm actually does do some WP sites. We tell our clients, WP is for cheap, not flexibility. 
If you use a file, you get caching (including cache invalidation when the file changes) for free :)
Ok, time to write my own.
I really just like using ini files. PHP has a built-in parser for them so it makes it super easy to work with (rather than including other PHP files). An example: [app_core] class_prefix = MyApp_ error_handler = appErrorHandler ; General Application Configuration [app_general] base_url = /myapp use_ssl = true environment = Live session_class = Live default_section = Welcome default_section_action = info logging_enabled = true ; View Settings [app_view] default_view = html ; html View Settings [app_view_html] template = internal Then to use this in PHP, you do the following: $_CONFIG = parse_ini_file('includes/sysconfig.ini', true); Simple, and makes it super easy to add configuration items later. If I want to grab the HTML template to use for the site, I just do: $template = $_CONFIG['app_view_html']['template'];
Hey, that was a joke(attempted) because both of you have 'Listen to me' as flair. And regarding terminology, I have to agree with ircmaxell. Because even if the end result of both fixation and hijacking is a session that a second person can control they are subtly different as he tells. Hijacking is when I get control of the car (session) you were driving. Fixation is when I give you a lift in a car I drive. Even if the end result is same, they imply different attack vectors. Hence I think the naming difference is relevant as they can convey different information.
I like to hardcode in hard to find places. Keeps me on my toes.
&gt; So the final, "cached" config is a php file with an array? That's actually exactly what our configs are. &lt;?php return [ 'serviceUrl' =&gt; 'http://', 'user' =&gt; 'joe', 'pass' =&gt; 'abc' ]; What's really brilliant about this is that with APC (older php) or Opcache (newer php) you get caching by the mere nature of it being a PHP file. We, technically, layer Zend_Config on top of that, but whatever floats you're boat. In terms of different dev/test/prod configs, we commit the files with test configurations, and the production ones are replaced at deploy-time through Salt management.
&gt;Hey, that was a joke(attempted) because both of you have 'Listen to me' as flair. I know. &gt;regarding terminology, I have to agree with ircmaxell. And I'm going to have to disagree with the both of you. Session hijacking is when you take control over another person's session. Session fixation is a specific type of session hijacking in which you take control over another person's session by fixating the session id, that is setting the session id to something known to you. This is also the commonly accepted terminology: http://en.wikipedia.org/wiki/Session_hijacking#Methods https://www.owasp.org/index.php/Session_fixation &gt;Fixation is when I give you a lift in a car I drive. I can't possibly agree with that definition as it does not remotely fit with the attack pattern itself. In session fixation too, you take control of the car. Additionally, session hijacking does not imply removing control from the legitimate user. &gt;Hence I think the naming difference There's no specific attack called 'session hijacking'. It refers to a class of different attacks, wherein session fixation is included. 
No thanks. But good luck.
Agree 100%. Well said. 
I understand why they did it and I wish the best of luck to them, but I guess this is where we part ways. $99 for a simple authentication library is a bit too much.
&gt; Additionally, session hijacking does not imply removing control from the legitimate user. Agreed. Apart from that, I just think the term 'hijack' implies that the thing in question was previously under someone else's control. In fixation the session is created by the attacker and the session belongs to him initially, but the victim is made to use the same session. In hijacking , the session is created by victim initially and is later 'hijacked' by the attacker. EDIT: But I understand you mean hijacking as just 'acquire control'. But I see it as 'seize control from another'. 
I've given up entirely on configuration files -- all my configuration is now just code. I have just one configuration file that auto-detects it's environment based on the host name (default being production) and sets the parameters appropriately. Being able to deploy *exactly* the same code/files as development and staging avoids any mis-configuration deployment issues. 
If the config file is touched on every request then when read from disk it is likely to be coming from the OS' in-memory disk buffer anyway.
I use flock in ubuntu systems, it's quick and not so dirty :) flock argument -w is perfect to set a waiting timeout. But I can't found a flock port/homebrew for Mac OSX. Anybody know an alternative?
Word press fills a role. It's not the greatest software ever written, but it gets the job done and is extremely popular, which means loads of support, themes, plugins, etc. That said, I'd suggest you evaluate Drupal 8 first. If it can do what you want then it would be a far better choice for one simple reason: the developers had the balls to do a complete re-write based on modern standardisied web components instead of buying more whips to flog the horse with.
Because ArrayAccess does not copy your DataContainer into a proper array. Some DataContainer do implement the ArrayAccess Interface as well as the toArray() method, this is another problem.
You haven't explained why you need to transform the DataContainer into an array. 
You shouldn't pay attention to a word /u/i_make_snow_flakes says. He's a well-known troll.
Maybe he wants to pass it to a method accepting an array.
One benefit to `toArray()` is that its behavior could be customized to differ from `iterator_to_array()`'s if the writer of the class thought it was necessary. And the fact that you don't need to mark your class as Traversable or ArrayAccess. But I'm not sure if these are the reasons `toArray()` is being used.
In that case, I'd go with iterator_to_array. 
i always use XML files that are automatically cached to php Config Classes / files for faster access
Lol, in your face fanboys. You should have went with a truly opensource framework.
Well, also, `toArray()` seems more OOP to me. Just like you would use your View class's escape method for escaping HTML if possible rather than calling `htmlspecialchars()` in your template, it's usually better to defer the responsibility of converting formats of data to your object, even if it seems simple enough to do externally with just a few lines of code (or 1 function call). Here's one example of where it could come to use: Say your class acts similarly to a flat array, and you use instances of that class in several places in your code, and in many places you need it to be converted to an array for several methods accepting an array. Now if you were to decide to change your class to make it act as a RecursiveIteratorIterator, then you would have to change all your `iterator_to_array()` calls, because they only work on flat iterators; whereas had you used a `toArray()` conversion method in the object, you could have just only changed that one central method, and rewritten `iterator_to_array()` from within that method to custom logic for assembling a multidimensional array from a RecursiveIteratorIterator.
It is awesome. We are building our SaaS with ZF2 powered Pi Engine, and for sure we will build our APIs on Apigility.
I used to use .ini files too, before I realized they have absolutely no advantage to simple .php files (but a lot of disadvantages), unless you also parse them with some other programming language, and you need them for interoperability reasons. Otherwise, you could just as easily write your configuration like this: &lt;?php $config = array(); $config['app_code'] = array( 'class_prefix' =&gt; 'MyApp', 'error_handler' =&gt; 'appErrorHandler' ); /* ... */ return $config; And then: $_CONFIG = include 'path/to/file.php'; In addition, storing configuration in .php files has a lot of advantages over .ini files: * You can also do basic processing in .php files, use built-in constants, etc. Want to store the error_reporting level? You can juse use the E_ALL, E_WARNING, etc. constants, no need to try to remember their int values. * You can include config files from within other config files. * If your config directory is in your DocumentRoot on Apache, you don't have to worry about people accessing your config files. You should use a .htaccess to restrict access anyway, but it's not that big of a deal if you forget. * .ini files only support, at maximum, a two-dimensional configuration, like your app_view_html example, while with .php files you can store n-dimensional arrays. * etc.
Werd. The main argument for having ini configs seems to be that non-programmers can easily edit the config. In my professional work as a PHP programmer over the last 15 years, the number of times there has been a need for this has been exactly zero. And even if so, whoever would have been editing the file probably would have been fine making a minor change to a PHP config file anyway. Having arrays and IFs etc is so much more flexible. Makes more sense if you're releasing your project publicly though I spose. 
It is a break and you would need to change your code in several places. But not in the places where you called `toArray()`. JsonSerializable is a bit different, because it's a two-way thing; it makes `json_encode()` behave identically to the custom `jsonSerialize()` method of the class. It's like having an ArrayAble interface that would let you customize what `iterator_to_array()` would result in if called on the object. I don't know about RecursiveIteratorIterator having a `getArrayCopy()` method, but even so, then with my example (which only started out as a flat Traversable) you'd be rewriting `iterator_to_array($this)` to `$this-&gt;getArrayCopy()` from within the `toArray()` method.
Do you really think that they will be giving much attention to 2 after commerical 3 comes out? Bugs found in v3 will obviously have much higher priority and in a few month they'll just abandon v2. When it comes to security stuff you definitely dont want your library to be abandoned and not get security fixes
Second this, ini's are not flexible enough, altough zendframework has a very nice implementation. I use a static class wrapped around the array tough. It also decides if the project is in develop/staging/production mode. 
If your config is cached in Memcached where do you store your Memcached config settings? (ip/port)?.. chicken or the egg? hard coded 127.0.0.1:11211?. Also reading a .php file is always going to be faster then using APCu/Memcached because your Linux distro will ram disk frequently accessed files for you automagicly
Using a custom environment variable `APPLICATION_ENV` (set using `mod_env` on Apache or `fastcgi_param` on NGINX) that holds the name of the environment (`dev`, `qa`, `prod`, etc...). Then, if it is a Symfony project, I use my [custom Symfony front controller](https://github.com/WolfMicrosystems/symfony-wms) to boot the Kernel with the proper environment set. If it is a WordPress or Drupal project, the default config file is replaced with a bootstrapper which then determines the proper environment and includes the proper config files, and merges them appropriately if need be (there is usually a global config and then the changes for the environment).
I wonder if in a year they will rebrand Sentinel to Guardian and require you to pay again or stay with outdated Sentinel . The whole catch with these one time payments is that they can do that as many times as they like.
This is like buzz word bingo. You forgot to include your Weissman score.
&gt;...easy to use, trust worthy and well maintained. These goals weren’t possible as a pure open source project. After 2 year, you want to make money out of that, fullstop. Moreover you mislead the meaning of "free-of-charge" with "opensource". No thanks. Great job. Good luck.
&gt; I used to use .ini files too, before I realized they have absolutely no advantage to simple .php files (but a lot of disadvantages) The main reason I used ini files in the past was to prevent developers from putting things that don't belong in config files, specifically: code. I've worked several jobs where devs get lazy and put closures and other crap in the configs that simply do not belong. 
It definitely will be, but it'll be from PHP's internal memory, not memcached, which is not guarantied to be on the same machine. Remote machine access is slower. Accessing PHP's ram is always going to be faster than accessing memcached.
That has nothing to do with "a truly opensource framework" as you claimed. Besides, if Sentry 2 is really that great *and* ***if*** Cartalyst abandons it, someone will surely fork it.
This looks fantastic! We have a quick &amp; dirty wrapper at work that queries some local banks, exchanges etc. but we might be able to get rid of that with this library! Two issues though: * Can you make it depend on Guzzle 4? 3 is the previous stable and it will get abandoned at some point so it would be nice to make it future proof :) * Could you add a default provider that will, given a configuration, try multiple providers until a successful result? Example: I want to convert USD to EUR and my provider preference order is openxrates, google and yahoo. So the default provider could try these in order. If openxrates doesn't have it (or it is down), it could try google and so on.
You're making this too complicated. Within your transaction , query and capture the original record values, perform your update and requery the result set, capture the values in local variables just like you would any other time, format your before and after values for output. Now, ROLLBACK, and return your output to the client. If they are happy with the result, they can submit confirmation, and you can do the update once more and COMMIT your transaction the second time around. Did this for an insurance rating formulator, worked flawlessly. 
Interesting. I am guessing this has nothing to do with [this project](https://github.com/rydurham/Sentinel). Even though they share a name? 
Yes you are right, I also got an other comment about using Guzzle 4. I missed the fact that they changed the namespace. As I don't want to break the compatibility, I will be looking to implement it for the version 2.0. It already supports chaining providers :) 
Thanks /u/enygmadae. And for the record (again) I apologize for the legacy code I left behind for you to maintain. ;-)
You're certainly entitled to this opinion, but I have to ask: In an industry where the average developer is north of $40/hour, how is this not worth $99 bucks? Two and a half hours earnings vs 40+ to develop something with equal flexibility, not to mention documentation if you ever work with anyone else.
What exactly are you having a dig at here? I thought Sentry/Sentinel was just a library... not a framework at all... where does the framework come in to it? and can you let us know what you feel is a "truly opensource framework"?
Interesting. I'm curious what this actually ends up looking like, it sounds similar to some of the other comments about using classes.
Is it necessary to break backwards compatibility? Without analysing the code too much, couldn't you require *at least* version 3.0 of Guzzle for your existing users, and annoying people like /u/callcifer ;) could pass their own class that implements `ClientInterface`, be it Guzzle 3.0, Guzzle 4.0 or AwesomeHttpLibrary 14.94? For what I've seen your code doesn't rely too much on Guzzle, it just uses it as an interface to get HTTP requests.
Sentry is nice but be aware of a few things in using it: 1. It has a heavy reliance on MySQL (with InnoDB support) 2. It's a role (group) based access control system (with a hard-coded "superuser" permission . This is usually fine for most applications, especially simpler ones. In this case, the usernames are by default email addresses. 3. It tries to do some throttling by default with an attempt limit of 5 as tracked via, you guessed it, another MySQL table with an index on the user ID.
This gets posted here every few months. Please stop posting this here. We know.
I've seen these threads on a lot of programming subreddits and it's a useless metric because most of the results are projects specifically testing for vulnerabilities. On top of that, you've linked to the search for **exec($_GET** not **"exec($_GET"**, so you're pulling a lot of occurrences where that command and variable are nowhere near each other. The *actual* search for ["exec($_GET"](https://github.com/search?q=%22exec%28%24_GET%22&amp;type=Code&amp;ref=searchresults) drops the result count from 105,582 to 171. And yes, most of those are still vulnerability tests.
The thing is that Guzzle 3 and 4 don't use the same interface for HTTP clients. Currently the providers constructors rely on the Guzzle 3 interface, so changing it will require a BC break. Your solution would have been possible if there was an abstraction layer of the HTTP clients using an adapter pattern but it was too much work for the version 1. However, it would be interesting to add this extra layer for the version 2 if there is some interest in the library.
Typing speed is irrelevant. The only thing that matter is reading. You can't type fast if you can't read fast, so make sure you code is readable and clean. This approach will save you more time (in a long run) that the ability to type array 0.02 sec faster.
Has anyone actualy used it with something other than Laravel?
over 3 years we have never abandoned a project. I am not sure what the basis of your claims are here but Sentry 2 will be maintained for bug and security fixes. We just won't provide any new features.
bummer, is there any kick ass name that allows for a kick ass cover photo on medium left. :( 
Sentry is used in just about every framework available today.
I'm assuming this also means no more user-based contributions/pull requests for missing or broken features too. Not too much "open source" about that except that you'll be able to modify the source yourself. Also, it seems sort of odd to me that their Terms and Conditions also include a clause that mentions they "do not warrant [...] any errors or defects will be corrected".
We love pull requests, why would we not accept them if they make sense? We will still maintain and curate Sentry 2.* it will still be available on Github. 
I'm on mobile right now, can't look at the code but I seem to remember that you only call `get()` and `getStatusCode()`. You could design `ClientInterface` to map Guzzle 3.0 functionality (those two methods only).
When I use the toArray() method in Guzzle, I use it to convert the class and everything it returns into arrays. For example, if a class is an iterator, then it might return objects for each element. However, toArray() recursively converts each element to an array and returns the collection of elements as an array. It's useful both for iterators and non iterators. 
You forget that after you limit access to your product it isn't really opensource anymore, menaing there are less people finding and fixing bugs.
[This post](http://wordpress.stackexchange.com/questions/10594/when-should-we-not-recommend-a-client-use-wordpress/10596#10596) was written in 2011 but I still feel it's a useful outline for when WordPress isn't a good solution. Also, just because you're using WordPress doesn't mean you have to have shitty coding practices. You could learn a few things by browsing through Sketch ([starter app](https://github.com/sketchwp/app) | [framework](https://github.com/sketchwp/sketch)), which is an open-source project I've been working on. It's basically just taking lessons from Laravel and Silex and trying to make them applicable to Wordpress development. The point here is not *only* for me to hawk my thing. It's that with all the tools out there these days (Composer! Laravel's IoC containter! Pimple!), there are legitimately good ways of building out application logic for a Wordpress site. Wordpress doesn't *just* have to be for super-simple CMS things.
I don't know how I feel about the API I feel like it would be a lot simpler to use if the API was somewhere along these lines: $usd = new \Swap\Model\Currency('USD'); echo $usd-&gt;exchange('GBP'); echo $usd-&gt;exchange('EUR'); echo $usd-&gt;exchange('JPY'); echo $usd-&gt;exchange('...'); The equivalent of the above with the current API seems to be: $usdGbp = new CurrencyPair('USD', 'GBP'); $usdEur = new CurrencyPair('USD', 'EUR'); $usdJpy = new CurrencyPair('USD', 'JPY'); $usdFoo = new CurrencyPair('USD', '...'); $swap-&gt;quote(array($usdGbp, $usdEur, $usdJpy, $usdFoo)); echo $usdGbp-&gt;getRate(); echo $usdEur-&gt;getRate(); echo $usdJpy-&gt;getRate(); echo $usdFoo-&gt;getRate(); 5 lines vs 9. Probably not the biggest issue, just seems like it's more verbose.
The person I was replying to was.
The API you propose would be simpler, but it is not good architecture wise. The CurrencyPair class is a value object, it's purpose is to represent a currency pair, while the Swap class is a service performing operations on currency pairs. Even if the API is slightly harder to use, it leads to a clear separation of concerns and easier testing.
How do those contributions fit in with the business model? Are the contributors compensated in some way as they're helping to improve the product you'll be reselling to others?
I worked on a project in the past that had process running on multiple machines. Used a combination of memcached and mysql to lock processes from running the same thing... Was pretty cool. Originally we used files though, when the processes were on the same server
I literally have no idea what the actual product is. I gave it 1 minute and then gave up.
no.. No its not.
That sounds like exactly what I need to do. Thanks!
I had a few minutes free on the computer. It's true that the direct requirement to an external library is not easy to remove. There must be a better way to do this, but this could be an option (I may me wrong, I haven't had time to think too much about it): **src / Swap / Provider / AbstractProvider.php** &lt;?php /* * This file is part of Swap. * * (c) Florian Voutzinos &lt;florian@voutzinos.com&gt; * * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */ namespace Swap\Provider; use Guzzle\Http\ClientInterface as GuzzleClientInterface; use Swap\ProviderInterface; /** * Base class for providers. * * @author Florian Voutzinos &lt;florian@voutzinos.com&gt; */ abstract class AbstractProvider implements ProviderInterface { /** * The HTTP client. * * @var ClientInterface */ protected $client; /** * Creates a new abstract provider. * * @param ClientInterface|GuzzleClientInterface $client */ public function __construct($client) { if ($client instanceof GuzzleClientInterface) { $client = new GuzzleClientAdapter($client); } elseif (!($client instanceof ClientInterface)) { throw new \InvalidArgumentException("Client must implement either Swap\\Provider\\ClientInterface or Guzzle\\Http\\ClientInterface"); } $this-&gt;client = $client; } } 
ok, just about every popular php framework. We have subscribers using it apps built with CI, Kohana, FuelPHP, Laravel, Symfony. But I am sure you have better stats then I do. 
I'm with ya. No idea. Whatever it does, I'm sure the intention is to make the world a better place.
Still requires knowing where on the local filesystem your PHP can get write access though. It's also possible with APC or Memcached: function cas($id, $from, $to) { return apc_cas($id, $from, $to); } function process_id() { return getmypid(); } if ( cas($process_key, null, process_id() ) { long_running_process(); cas($process_key, process_id(), null); }
i like the phpweekly, please keep going 
I'm really not sure there is something that easily integrates with Parsedown or even the Markdown pattern – and I've made a quick research. But it would be a really nice library to have – in fact, you can always start developing one as an open-source library.
Excellent work as always!
https://code.google.com/p/google-code-prettify/
Well if you were to follow the convention of the __toString() magic method, you would do something like: class Foo { public function __toString() { return 'foo'; } public function __toArray() { return array('foo'); } } $foo = new Foo; var_dump(string)$foo, (array)$foo); And this would output: string(3) "foo" array(1) { [0]=&gt; string(3) "foo" } This is actually a PHP RFC: https://wiki.php.net/rfc/object_cast_to_types
&gt; That modified View structure (what you call Responder) is more logical than the current offerings, and I hope it catches on. Thanks for that. &gt; trying to rebrand MVC because you came up with a better View structure is silly I get where you're coming from. The original experiments (unpublished) started with something I called a ResponseView, which got renamed eventually to Responder. The problem I encountered when trying to incorporate that into existing Controller implementations was that each ResponseView ended up being more closely related to individual action methods within the Controllers, rather than to the Controller as a whole. E.g. if you have a FooController with index(), create(), read(), update(), and delete(), one ResponseView for the Controller as a whole did not work out so well. What worked out *really* well was a ResponseView for each of the action methods. At that point it seemed much more natural to split the actions out as own first-class (heh) element within the architecture. Renaming ResponseView to Response, and later to Responder, followed on from that. Hope that helps to explain where I'm coming from here.
There's no magic __toArray() method, your output is wrong - it will show an empty array.
Is it me, or do I not see PHP in the list of languages in that library?
I wasn't sure either but I clicked through the docs a bit. It's a framework. This doc page might be more clear since it actually contains code: https://github.com/pi-engine/pi/wiki/Dev.Module-Structure
Try to design a better api, and bound yourself to rules, there are to many things going on in that method. One rule would be to only limit 3-4 arguments per methods and delegate functionality through them. You need to refactor this implementation. 
Indeed, it would work by removing the typehint and creating an adapter between Guzzle 3 and 4. Swap relies on Guzzle 3 exceptions to try to provide meaningful error messages when sending multiple requests failed. So it will need to adapt the exceptions of the version 3 and 4 which will be quite a mess IMO.
I'm not sure why you thought it would be a good idea to post this to /r/PHP, which is not a beginner-oriented sub.
Use an array for the order by field list: $order_by = array( 'col1a' =&gt; 'column1 asc' ,'col1d' =&gt; 'column1 desc' , 'col2' =&gt; 'column2' , 'both' =&gt; 'column1 asc,column2 desc' ); $sql = " -- sample query passing protected order by select column1 , column2 , column_etc from tablename where whereclause=:bound_value "; if ( !empty($order_by[ $_REQUEST['order_by'] ]) ) { $sql .= 'order by '.$order_by[ $_REQUEST['order_by'] ]; }
And lastly you can try with recursion: function reverString($string){ if (strlen($string) &lt; 2 ) { return $string; } return reverString(substr($string, 1)) . $string[0]; } 
Glad to help, hope it works. If you run into issues pm me and I can try to help further
Will it blend?
Don't use a backend language for syntax highlighting, just use JS. http://prismjs.com/
Hey I do the same thing. Some guy gave me a copy of his book and it was really helpful. 
Very cool! I'd be interested to see how you handle routing, and also what a template looks like with this kind of setup.
PHP is [included in tests](http://google-code-prettify.googlecode.com/svn/trunk/tests/prettify_test.html#PHP), so I assume that is a supported language.
Slim is...well...pretty slim. Try that!
We hope we've finally convinced the company we contracted with for our site redesign to scrap their blogging backend and to drop wordpress in and then pull from the database directly. Because despite the site being live for 9 months the content management system is a perpetual snafu.