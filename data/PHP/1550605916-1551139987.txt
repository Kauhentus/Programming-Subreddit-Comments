&gt; While PHP is quite smart, hands down, smartest of all IDE's in the ecosystem. I can't tell if you're being sarcastic. I hope you are. &gt; It's an issue of not knowing what your parent class effects without checking for all usages. Look you simply don't understand what I'm proposing it seems, because you continue to be all over the place. This doesn't affect analysis for use **at all**. As in literally nothing to do with it. &gt; While it may highlight something in child class which inherits the interface, it won't highlight anything in parent class. What in the hell are you talking about? &gt; &gt; Those are 3 methods you need to implement on an object &gt; Interfaces. Pass dependencies as arguments which can be tested separately from abstraction. What **in the hell** are you talking about? I'm talking about say a dozen objects implementing the same interface through composition (by proxying the methods of a composited object). I have no idea what the hell you're talking about. Do you just copy/paste random snippets from the sub or? How can you possibly find it so difficult to understand what feature I'm proposing.
Provide them with a dozen reasonable self-contained files out of your codebase, ask them to explain to you what they the code does and how it's doing it. Ask them to say if there's anything they see in it that they would do different, and then ask them to explain why. IMO deduction and analysis are more important skills for a higher end dev than a small project would be. 
&gt;I haven’t had a chance to play with Swoole or PHP-PM yet. How do these avoid framework bootstrapping? They work by booting framework once and keep it in memory for infinite time. Or better said; until preset nr of requests or some package has memory leak that keeps piling. When that happens, server is reset. &amp;#x200B; The only requirement is that framework has clear request-response cycle; check [https://github.com/php-pm/php-pm](https://github.com/php-pm/php-pm) for more info. Symfony implementation: [https://github.com/symfony/symfony/issues/23984](https://github.com/symfony/symfony/issues/23984) Yes, that was me :) and if they read this, I would like again to thank core members for implementing this feature. With PHP-PM, I easily cut about 20ms per request. It doesn't sound much but when your entire processing takes 20-50ms, it is a big difference. I really think this is the future of PHP, or at least something that can and should be experimented with. &amp;#x200B;
That's more likely to be on per-framework basis than a generic PHP version because it'll almost certainly need a database.
Thanks! I'll definitely look into that.
But this is what’s wrong with this generation. No one wants to work for anything anymore. This is literally the definition of lazy. Primarily because a person could have used Google and made up their own mind instead of waiting for replies.
Why is Google the Holy Grail of research? What's wrong with asking a question in a public forum?
Oh, it’s not holy grail, use whatever search engine that floats your boat. As to the second question, doing a web search would return even MORE results than the handful of comments that this question has. The point is that it’s been asked before, you can get countless more information from a web search than one or two sentences saying the IDE someone uses. I guess as I got older I got wiser to things and don’t like clutter such as “what’s the best framework”, “whats the best IDE for X”, “what’s the best X for Y”, when it’s asked every other day, if not daily.
Let them build blog that has Post, User, Tag and Category entities. Basic bootstrap (no CSS/JS time wasting), admin security... 90 mins is more than enough.
One time I was given Code with Bugs out of the company Codebase. I had to fix the... &amp;#x200B; The eveal's one was where the unitTest was Buggy. The Value for the Bug was missing, and so the Test running without complains... So first find why the test does not his Job and then fixing the Problem... &amp;#x200B; something like that, it's fair for both sides. You see what the new Employee can do and how he thinks and the new person learn what will happen to him ;)
I do understand the feature you're proposing. What I'm doing is saying that your feature is garbage. Right. I do understand what you say. I do consider it and reject it as harmful. You seem to have trouble parameterizing the problem I'm pointing. Casually suggesting that somehow the IDE's will take care of it. Which is funny. You also fail to address the issue how would you test that "composition" separately from composed module. Or composed module separately from "composing parts". If you can't do that without changing the code within the module, it's not composition. You can call it theft, doesn't matter. It has same problem as inheritance. I ment PHPstorm, somehow lost on the storm part.
I do get you think it's "garbage". And then your critique is just bunch of random shit that doesn't apply to it in any shape or form. Which means you have no idea what this entire conversation is about. &gt; Casually suggesting that somehow the IDE's will take care of it. Which is funny. Again, what the hell are you talking about. This is just basic syntax sugar to save you from typing and updating boilerplate proxy code. You've no idea what you're talking about. &gt; You also fail to address the issue how would you test that "composition" separately from composed module. You're not making a lick of sense. &gt; If it does, when you failed to make your case clear enough. Yeah I see that. Everyone else got it, for you it's not clear enough, ever. Just shut the hell up already.
&gt; This is just basic syntax sugar to save you from typing and updating boilerplate proxy code. You've no idea what you're talking about. Proxy for what? You've been going on campaign denouncing DI IoC. And you've been denouncing that it's not inheritance. So is it passed as an argument to a module or it isn't. If it isn't you're wrong. If it is when I'm wrong. And we can settle it.
Very nice. Thank you.
Are use dependency injection every day, you fool. I haven’t announced anything in a “campaign” at all. Go take your pills.
To be fair, `&lt;?` is a bit easier/faster to type since those keys and the shift key are all close together. `{%` is a little awkward. 
You explictly stated how it has nothing to do with DI IoC and later you explictly stated that it's not inheritance. So what is it? I'm really trying to make this rather easy question. Either your module is provided with composing parts from a side. It can be via DI IoC in php world. Or it can be via render props in react or by HOC's in react. The main point is that we defined how we supplement our module by explicitly providing with additional code by providing it from outside. The module is passive recipient of functionality and thus remains encapsulated. Other way, the bad way, is when your module itself borrows the implementation from somewhere else. In shitty php code you'll notice it by `new` keywords being used within classes. Same goes for inheritance, your subclass copies code defined somewhere else in the application without the parent class 'knowing' it. In world of javascript functional programming patterns boomed because ES6 modules do not provide means of composition. This wasn't an issue when our front ends could have been contained within simple small widget scripts. With raise of typescript, if functional paradigm is not leveraged we also see DI implementations. For very same reason. I made a circuit here, to provide context to my raised objection, just in case you gonna D:&lt; "It has nothing to do with it 1111!!!!1!!" again. Should I go quote mining?
For my blog, I'd like to make a headless, flat-file, markdown powered blog that I can just drop a folder with a markdown file and any images/assets straight in to and have it appear in a API feed for integration in to website. Does something super lightweight and easy to extend like this already exist or where would be a good starting point for me with as few dependencies as possible?
A JIT compiler in PHP is not just for enhancing performance of existing projects, people. It will open the door for lots of pure PHP extensions that rival or even beat the performance of their C-alternatives, allowing for faster development. It will enable people to write long-living server processes that don't suck compared to the Java alternatives, for example. And it will even further lower the barrier for people to start using PHP, improving the community as a whole. And although on top of that we might even save tons and tons of CO2 pumped into the air by this improvement, you're still complaining? There are more important fights to be won.
that is the correct answer. you have the job as the hr guy.
Take a look at [https://www.amazon.com/Principles-Package-Design-Creating-Components/dp/1484241185](https://www.amazon.com/Principles-Package-Design-Creating-Components/dp/1484241185)
composer create-project symfony/skelleton myproject composer add bootstrap php app/console server:start &amp;#x200B; What will that show? nothing.
/r/phphelp
Ah alright. I guess it's a very small mistake so...
That’s awesome. I have PHP-PM on my todo list for research. That certainly gives me a more clear understanding, thanks. I’d bet we could shave more than 50ms. We do all our own custom bootstrapping for our app, originally sf1, now fully custom with many sf4 components. But we bootstrap a lot of custom libs as well that allows us to simplify the rest of our stack. What’s the biggest gotchas you’ve experienced with implementation on a PHP-FPM stack? Are memory leaks a common issue? Can you use GC with `register_shutdown_function` to mitigate most of these concerns, or does PHP-PM already attempt to do something like this?
You have not explained what's wrong or what you expect the end result should be. You also pasted this in a horrible way. Reddit is bad for pasting code in general so consider using github's gist, pastebin, or some other pasting service.
Ah bruh, I'm sorry. I'm not near my machine so... The page isn't even loading, I think it is 500 Internal Server Error.
Doesn’t sound too hard to build. Why not make one?
Yeah I think I will! Doesn't seem to be one out there that's meeting those requirements. Could be fun to open source myself :)
well, suffice it to say, you won't get any help dumping a bunch of poorly formatted code and saying "doesn't work", whether on /r/php or stack overflow, or anywhere else. First, review this https://stackoverflow.com/questions/1053424/how-do-i-get-php-errors-to-display and make sure PHP is spitting out errors, somewhere. Then, check console output or log files of your web server or the output in your browser. With a script this simple the chances are the error will be displayed somewhere and you can solve the problem yourself. If the error messages you see in log files/console output/in your browser are unfamiliar, try googling them. After all that and nothing works, then feel free to ask, with all the output from log files/browser/console and a link to your pasted but well formatted code. 
Yep, me too and it does the job.
Proper security/auth is also as simple as a DB query if you're working right.
https://wiki.js.org/ does something similar with a git backend. Maybe something worth looking into.
You might be able to modify something smaller like: https://mylittleforum.net/forum/
I disagree with the other suggestions. If you gotta render very complex PDFs it's worth using something like puppeteer. We spin up a small nodejs server that renders html to PDFs in our php docker containers and it works 10x better than anything else.
Nothing prevents you from putting your matches code in Go or any other language, and you access this from a REST API, where as to Go code reads and processes the CPU intensive tasks. Why does PHP have a lot of modules in C ... because it puts heavy CPU tasks in that code base. You can just as well write a C PHP module, to handle this specific task. Unless the codebase is a mess of intermingled concept, then sure, then your stuck but them you have bigger issues to deal with then PHP.
Will it work on iPhone 4?
If I wanted to write in Go I would have written it in Go in the first place. PHP is great for spinning up PoCs, and if you can take your PoC and end up keeping it in the same language due to advancements provided by a JIT all the better.
Take a look at: https://tecreations.ca/edit/edit8.php
In PHP? &amp;#x200B; [https://www.statie.org/](https://www.statie.org/)
Well, that's a scope of (any) dependency manager, isn't it?
True ... but any JIT integration work is probably years away from now. Do not expect to see JIT at end of 2019. So how many years are you willing to wait for a future that may or may not reduce your server requirement? That is the question that you as a business owner or developer need to ask. I am not a Go advocate but some specific tasks are simply slow in PHP. Hell, i spend months building stuff in Crystal ( Think Go with Ruby syntax ) that i rebuild in PHP in a week. PHP is great for some tasks but some simple are not that great right now. That brings us back to your issue. Do not think that the JIT is a magic bullet. Do not forget that Facebooks HHVM is PHP+JIT... Maybe that is a better solution for your company as its available now, instead of some wish list item that may or not get included?
libsodum is already in php 7.2, no need to reimplement it in php. and openssh has hundrets of security minded eyes on it, from a security POV no one would ever reimplement it in php and use it in production. You put forward two potential use-cases that are already working with no need to replace them with PHP code. It doesn't make for a very good argument for JIT.
phpseclib has 1.5 million monthly downloads on packagist: https://packagist.org/packages/phpseclib/phpseclib/stats So your "no one would ever reimplement it in php and use it in production" comment is misguided. If you want to do SSH in PHP your options are: phpseclib, SSH via the CLI (which has significant limitations) or libssh2 (which is a PITA to work with and has an API with limited functionality compared to phpseclb). I'll concede the point that sodium_compat's inability to implement Argon2i isn't of huge concern on PHP 8 or whatever version of PHP might incorporate JIT since that version would also have libsodium but I still contend that it's a perfectly valid example of PHP's fundamental limitations. I do apologize that I have not done a comprehensive survey of every PHP package ever made so that more examples might be provided.
The JIT branch can be easily compiled and works with most code. Give it a try to see how much you gain please. &gt;git clone git@[github.com:zendtech/php-src](https://github.com/zendtech/php-src) &gt; &gt;cd php-src &gt; &gt;./buildconf &gt; &gt;./configure --prefix=/opt/php/php-7.4 --enable-opcache --enable-opcache-jit --with-zlib --enable-zip --enable-json --with-openssl --enable-xml --enable-bcmath --enable-shmop --enable-sysvsem --enable-mbstring --enable-pcntl --enable-sockets --enable-soap --without-pear --enable-fpm &gt; &gt;make -j4 &gt; &gt;sudo make install Gives you /opt/php/php-7.4/bin/php and php-fpm there. &amp;#x200B;
I think Grav its what you're looking for: [https://getgrav.org/](https://getgrav.org/)
Hello Bagelmountain &amp;#x200B; Am not sure if this what you mean : [https://cl1p.net/clunswazyg](https://cl1p.net/clunswazyg) &amp;#x200B; Hope you can help in this.
ohh nice, tnx ill check it out
You could manually scan the server logs in a cron job and write what you need into your database. If you are okay with not using PHP and with having all your access logs in the database, there's `mod_log_sql`.
&lt;?php error\_reporting(0);$OOO0O0O00=\_\_FILE\_\_;$O00O00O00=\_\_LINE\_\_;$OO00O0000=31264;eval((base64\_decode('JE8wMDBPME8wMD1mb3BlbigkT09PME8wTzAwLCdyYicpO3doaWxlKC0tJE8wME8wME8wMClmZ2V0cygkTzAwME8wTzAwLDEwMjQpO2ZnZXRzKCRPMDAwTzBPMDAsNDA5Nik7JE9PMDBPMDBPMD0oYmFzZTY0X2RlY29kZShzdHJ0cihmcmVhZCgkTzAwME8wTzAwLDM3MiksJ0VudGVyeW91d2toUkhZS05XT1VUQWFCYkNjRGRGZkdnSWlKakxsTW1QcFFxU3NWdlh4WnowMTIzNDU2Nzg5Ky89JywnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycpKSk7ZXZhbCgkT08wME8wME8wKTs=')));return;?&gt; xxxx this a part of it 
am trying to send you the full file : &amp;#x200B; [https://we.tl/t-sTgYUfTOaM](https://we.tl/t-sTgYUfTOaM) &amp;#x200B; hope this works
Here is one of the files that i wish to unencrypt [https://we.tl/t-sTgYUfTOaM](https://we.tl/t-sTgYUfTOaM) 
&gt;am trying to send you the full file : &gt; &gt;https://we.tl/t-sTgYUfTOaM &amp;#x200B;
It is hard to tell how much anyone cuts because no one has same computer nor same application. My test was on $700 laptop, page has about 10-12 queries (object hydration, not gonna saving CPU time on that) so I removed about 25%. Which is a lot. The only real problem is if some bundle has memory leaks. Symfony itself doesn't have any more,I tested recently and no matter what I did, memory usage was 100% the same; keep in mind this is in production mode, dev mode works different. &amp;#x200B; As soon I as finish current project, I will focus on this: [https://github.com/k911/swoole-bundle/issues/30](https://github.com/k911/swoole-bundle/issues/30) . I will finally put my big-data hobby project online and run it under swoole. &amp;#x200B; And hopefully, run **all** my future projects in same way. &amp;#x200B; &gt; Are memory leaks a common issue Depends on bundle but if you find one, it is very simple to fix it; make a fork, implement \`\`ResettableInterface\`\` and clean the leak. The only real problem is finding it. But I am sure there are tools to do it. &gt;Can you use GC with register\_shutdown\_function GC works like it always worked, no changes here. Both swoole bundle and php-pm will reset slaves when they reach certain memory limit so it is not really a concern. And you should never use register\_shutdown\_function anyway. That function is only for FW developers, your code should never need it.
In what way does it with better? I might look into it... 
I haven't looked in depth, but I think you need to order your host to take your website offline immediately and preserve any instruct them to maintain any logs of any uploads made to your site via FTP etc. Once that bit is decoded, it then has *more* obfuscation, a basic substitution cipher fed into yet another base 64 decoding. It looks like it's trying to open its own file for pulling out some additional payload. Start of file + whatever that line was + the next one, then puts the next line 372 bytes through the substitution cipher and runs it. Without knowing the rest of the file I'm not 100% sure *what* it does, but i'm 100% sure it's malicious. 
Thanks. Decoding it now. 
&gt;And you should never use register_shutdown_function anyway. That function is only for FW developers, your code should never need it. Not sure what a FW developer is. But I agree it should be avoided.
**How** is Symfony **installation** relevant to my comment? Setup is &lt;5 minutes, I asked for a blog and 85 minutes is more than enough. Honestly, it is more like 30 minutes but I was generous. But enough for OP to see code quality and real-life application, no matter how simple it is. &amp;#x200B; If I was to apply, I would put CS fixer and phpstan as well, maybe some DTO...
Perhaps Pico? http://picocms.org/
&gt;Not sure what a FW developer is I meant framework.
Okay, review time! Someone went to a lot of needless trouble to obscure the code inside the file. The first bit of encoded code is the outer unpacking function, it's a straight Base64 and unpacks to the following: ```php $OOO0O0O00=__FILE__; $O00O00O00=__LINE__; $OO00O0000=31264; $O000O0O00 = fopen($OOO0O0O00, 'rb'); while (--$O00O00O00) fgets($O000O0O00, 1024); fgets($O000O0O00, 4096); $OO00O00O0 = (base64_decode( strtr( fread($O000O0O00, 372), 'EnteryouwkhRHYKNWOUTAaBbCcDdFfGgIiJjLlMmPpQqSsVvXxZz0123456789+/=', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' ) )); eval($OO00O00O0); ``` So they're opening up the file that's being opened, and discarding everything until after the __LINE__ the unpacker is on. The full file contains a long string of Base64 encoded text, but it's not just base64, it's going through a substitution cipher that's handled by strtr (http://php.net/manual/en/function.strtr.php). Copying the payload to a string and replacing the fread(...) with the payload string, and obviously disabling the eval, gives us the following code, which appears to be some kind of image CMS. https://pastebin.com/Dn7Qb7iD 
ReCaptcha + honeypot + XCSRF token + PDO parametrized queries That alone should be enough to secure the comments sufficiently and should take couple of hours tops to implement.
Use ``erusev/parsedown``, ``erusev/parsedown-extra``, ``altorouter/altorouter`` and ``twig/twig`` and that's the majority of the work basically done for you
Oh. Well when you’re doing your own custom bootstrapping and tear down on a custom app, you’re basically a framework developer.
https://www.github.com/api2pdf/api2pdf.php
Set `opcache.jit_buffer_size` in bytes (read somewhere human readable values work, but they don't seem too) ... 
I don't understand why Reddit cares about this 'issue'. Who cares? Live your life. Be happy. Know that there are lazy turds out there and that's why you're going to make more money than them. &amp;#x200B; The whole "This been asked 100 times" is about as worn out as the question that has been asked 100 times. 
Glad to see you agree asking the same thing is tiresome. Have a good night.
Not tiresome to me. All the whining and bitching is what's tiresome to me. 
Oh, apologies. You said it’s about as worn out as asking the same thing over and over, implying you agreed. Either way, have a good one.
I don't personally use it for PDF, but I've started using it for rendering svg to png, and it's a dream. It's a ton faster than other contenders, and generally simpler and more accurate. It renders as chrome would, because it is chrome.
Somebody posts his code (in good faith) and you are bashing instead of helping to improve. That is the only abuse I see.
Did you read this? https://www.reddit.com/r/programming/comments/arx96h/i_ruin_developers_lives_with_my_code_reviews_and/
I've read the code and I could not come up with a SQL injection, could you? All I can come up with is that when the global "sql_mode" is not default (e.g. ANSI_QUOTES), string quote marks should be single instead of double and thus lead to a problem.
*Hey just noticed..* It's your **4th Cakeday** regal2157! ^(hug)
&gt; It renders as chrome would, because it is chrome. This is why I always go with wkhtmltopdf. It's the the same, it just loads a headless webkit browser and renders the thing. But it also has some added options for footers and headers (page numbering, etc.). I'll check out puppeteer tho!
As someone who hasn't always known RegEx, take it from me.. it gets easier!
1) You didn't give enough information for us to help. "php website" is incredibly vague. 2) Look at the rules in the sidebar. No help posts. Try /r/phphelp, and bring more information along next time you ask.
With the way you're asking this question, I would strongly suggest that you hire a professional rather than try to manage your own ecommerce store.
No, no there is not.
Come on, isn't my explanation above clear enough? When called, PDO::quote() makes your query protected. *When you tamper with its output* you are starting to take chances. Just wait until you forget to put quotes back, or - like you said - someone will run this code on a server with NO_BACKSLASH_ESCAPES. Dude is using this function because of legacy code. Instead of rewriting it to prepared statements or at least to proper use of quote() he decided the easy way. Well most of his codebase is probably safe. But the problem with manual formatting is not that it opens an immediate injection. The problem is that it takes just a single mistake to let the injection in. This whole debate is the main reason why old mysql ext was deprecated and eventually removed. And it started a decade ago. Hence my astonishment. 
Is the Django built in login system a good fit?
As a sidenote, I'll just edit your reply as below to fix the list formatting. --- Author of enumerable-type here. Hi, myclabs/php-enum uses "private const" to declare options my implementation uses "final public static function ", so, it depend on your preferences, my implementation is pure object oriented without any magic, so you are getting full autocomplete and refactoring tools on IDEs by default, no need extra comments to add. Also in php-enum: * you need to use `equals()` instead of regular `===` as in my implementation. * persisting into database you have only enum keys of string type and it's hard coupled with option name. * value object construction when you have only ID (e.g. when fetching data from database) is only possible by calling constructor e.g. `new Type(value_from_db)` so this will always create new object and some optimizations(caching) is not possible. * call to `values()` always creates a new array of objects so it's memory inefficient. * `isValidKey()` and `isValid()` - library differentiates between values and keys, and it's not clear what is enum key? This design proposes that library users will use "enum keys" for some logics. Specifically my library forbids uses of any "key" like strings (to prevent future refactoring nightmares) and just operates on objects which can be only referenced by `xxxEnum::Option1()` Pros of my library: * enum options is objects, only one object per option. * comparison by object references * prohibits bad practices to use options as strings (no API for that, only `fromId("key")`), so before using enums if you have a key it's needed to always call ```fromId("key")``` first and work with objects not "keys" anymore. So methods like `isValidKey, search, isValid, toArray, keys` becomes only redundant without need of real use. Cons of my library: * no native serialisation due PHP not allowing passing existing objects in deserialisation process.
Peoples no ready to evolve
https://github.com/flextype/flextype
+1 for this tool. I create invoices out of it and it works perfectly.
Sounds about right lol
&gt; You explictly stated how it has nothing to do with DI IoC and later you explictly stated that it's not inheritance. So what is it? Composition regards an object make of other objects. They don't have to be injected, that's an entirely separate concern. Dude, you have some very obvious problem. And I don't care about it. This conversation is over.
I care
Don’t forget about output escaping, unless you want to have an XSS party. But yeah, it’s not a horribly complex thing to build. 
Shouldn't parametrized take care of escaping the dangerous stuff?
A company I interviewed at gave me a couple of stub classes and failing (but valid) unit tests, and my task was to implement them so the tests passed. Thought it was a pretty well-designed question. There was also a more open-ended thing that was basically “here’s a spec, see what you can do in two hours” and then we discussed what I prioritized and why. 
Parameterizing strips SQL injection, but doesn’t do a thing against cross-site scripting. 
Maybe Jeckyll?
Ah, you're right. Forgot about that one. ^^(looks like I won't be going to sleep early after all)
&gt; Composition regards an object made of other objects. No. It regards object made of other objects in specific way. Which I've already defined for you. It doesn't have to be injected through DI IoC. But it has to be passed to the object from outside so the object is passive recipient of it and remains encapsulated. Much like HOC's in React or Render props. You define the composing logic outside of the module you're composing. And if that's not it, when it's not composition. It's not "separate issue" it is within same term. And this seems to be so hard for you to understand that you feel "I'm not being understood", the problem is in misuse of terms it appears on your part.
as a developer, I wouldn't agree to be making a 90-mins (supposedly it will take more) project home. And I don't think its a good idea to waste 90 mins of the interview on the 'project'. Instead I would spend this time asking them several questions concerning may aspects of technologies you use.
„Without problems“: Never.
Ugh..
FOSComment ?
Your code is vulnerable to SQL injection. Escape user inputs or use prepared statements instead. Also passwords should never be stored in plain text, hash them with a proper algo like bcrypt before storage.
&gt;Come on, isn't my explanation above clear enough? No, not really. &gt;The problem is that it takes just a single mistake to let the injection in. You claim a lot, but can you give an example?
No it is not. This is making it sound waaay too easy. A good comment system actually takes time and thought and comments like these are imo counter productive and naive.
Sorry, that clip's empty. Just paste a few lines into a comment here. It'll do. Should be enough to allow people to recognize whether it's an easily-reversible encryption/encoding or not.
I vomit
I thought node used just JS part of chrome, it contains rendering html part too?
Not specifically about php, but architecture. Largely apply to php!
Puppeteer is just that but headless Chromium instead with full html5, js and css capabilities. I found it to be very accurate when rendering complex PDFs. Also you can leave the main chrome process running and can just open a new tab and save some startup time that way. And as a bonus you can configure the pdf format size correctly, we used to use the Chrome binary directly before with some flags and could only target US-Letter not A4
[http://php.net/manual/en/language.types.string.php#language.types.string.syntax.nowdoc](http://php.net/manual/en/language.types.string.php#language.types.string.syntax.nowdoc)
No it doesn't. Puppeteer ships its own version of Chromium.
That's what Github suggests for [Github pages](https://pages.github.com/)
What's wrong with URL rewrite?
The video is not about that, but as I can tell, url\_rewrite leads to painful server migration, as every servers have their own procedure, versions, this is painful. [https://httpd.apache.org/docs/2.4/fr/mod/mod\_rewrite.html](https://httpd.apache.org/docs/2.4/fr/mod/mod_rewrite.html) [http://nginx.org/en/docs/http/ngx\_http\_rewrite\_module.html](http://nginx.org/en/docs/http/ngx_http_rewrite_module.html) [https://caddyserver.com/docs/rewrite](https://caddyserver.com/docs/rewrite) (Caddy always win ;))
Hey! Did you know about [Carbon](https://carbon.nesbot.com/)? It seems like this guy was a little bit faster than you.
What do you mean with this: &gt;have it appear in a API feed for integration in to website. &amp;#x200B;
Hi. Yes I've heard about and used it. Great lib. My package goal is not to overthow it but be more simply in formatting new DateTime objects with some predefined methods.
to be quite honest I don't see the point in this lib. 1) its source code is only 28 lines of php-core wrapper static methods. You kinda over-engineered the package with all dotfiles and md's. You even have tests. You test your php-core wrapper to the function it wraps. Isn't this kind of... useless? 2) what is the purpose of the [QuickDateTimeInterface](https://github.com/initx/quickdatetime/blob/master/src/QuickDateTimeInterface.php)? Not only it is full-static method interface which *may* be fine (but a bit alerting), but it serves no purpose at all.
Oh, I met with this strange behavior in contracts. Usually with agencies what would like to make a lots of money on my back. In my case it was a just a "frame contract" (sorry, I do not know any good official term for a contract what has just basics in it), and then they want to add more pages, sub-contracts per projects and per contractor/customer also. I did not wait that moment, when I saw this on the contract, I simply walked away with a "Thanks, but thanks no". All your thoughts is quite right (in my humble opinion only), please do not accept that paper, it will lead to more trouble thank you think. I have a few of this kind of story (Actually I could write a book...).
I would like to recommend PHPStorm, WebStorm and IntelliJ in general. They have everything what you need, probably lot more. Also, you can use: \- Emacs + tons of macro/script \- NetBeans \- Vs Code + php plugin (same stuff like eclipse + plugin) &amp;#x200B; Use whichever feel more comfortable and more productive for you. &amp;#x200B; &amp;#x200B; ps.: if you need just a text editor, then Atomic, Sublime, notepad++, komodo also in the bucket.
You should allow it to accept a custom DateTime instance, and only create a new one when one isn't given.
&gt; Why are you saying this? That's the only reason to stick with such a flawed approach. Besides, there is his old driver lies along, using the same approach. &gt; can you give an example? Ok, you just don't understand how escaping works. It could have saved us time if you asked earlier. It's simple though. There is nothing mysterious in the escaping. Despite the common belief, it doesn't escape whatever "dangerous" characters making data "safe". That's bullshit which is sadly shared by common PHP folks up do day. In reality, it merely does escape *delimiters*, to prevent the premature end of a data literal. Say, we have s string 'Joe' in the SQL string. It goes without problem. But as soot as it becomes 'Paddy O'Donnel' it creates a mess. Or an injection. So, although there are some details, for simplicity it is safe to assume that escaping does escape delimiters, preventing a string literal from going wild. And preventing the SQL injection as a side effect. Now take quotes out of the equation. $id = DB::escape($id); $sql = "SELECT * FROM table WHERE id = $id"; / INJECTION! $table = DB::escape($table); $sql = "SELECT * FROM $table"; / INJECTION! and so on. this is why it is so important to keep both things together - quoting and escapiing. This is why PDO::quote() does so. This is why stripping the result of surrounding quotes is abomination.
Damn they have some slick processes
&gt; ReCaptcha Please no. I don't have a google account, and I don't want to spend 20 minutes clicking on cars just to post a single comment. 
Don't know, it's been a long time since the last time I used Django 
1. I've used [https://github.com/thephpleague/skeleton](https://github.com/thephpleague/skeleton) which provided me with all the future md's needed 2. You may be right. I think i should test exact format of method return string (date-fromat). 3. I can agree second time, this interface seems useless atm
If you're interested in using Laravel, I built a package that might help: [https://github.com/spatie/sheets](https://github.com/spatie/sheets) I'm using it for a few sites and I'm pretty happy with it. It's very extensible but doesn't do anything for assets.
Tons of good KISS principle for builders.
Then maybe a JIT can help indeed. The big question is whether a JIT is significant enough for a majority and primary use cases compared to maintenance costs. Engine maintainers are already few only, a JIT raises the bar of entry notably.
[https://stoplight.io/blog/stop-calling-your-apis-microservices-e165a80eba9d/](https://stoplight.io/blog/stop-calling-your-apis-microservices-e165a80eba9d/)
Have you actually *measured* that cost, though? Instantiating a single container object has got to be miniscule in terms of memory and CPU time.
/u/Blazzike are you the developer?
Yeah, but this project uses multiple open source projects by others. For instance, the sandboxing is done through Corveda's PHPSandbox and the text editor itself is by Microsoft. I'm terrified of this subreddit, because you guys probably know a whole lot more dangerous PHP functions than I do. Let me know if you find anything, thanks!
Believe me I'm also terrified of the people of any sub in Reddit. That puts me at ease to know that I'm not the only one haha. Anyways still a neat project, yes, there will be people screaming for security and that's just a part of it. I was thinking of working a similar thing myself then I encountered yours.
Believe me I'm also terrified of the people of any sub in Reddit. That puts me at ease to know that I'm not the only one haha. Anyways still a neat project, yes, there will be people screaming for security and that's just a part of it. I was thinking of working a similar thing myself then I encountered yours.
Urg such a boring task to do...
Hehe, yeah. Thank you and I just hope those people will let me know rather than causing chaos. We'll see. If you have any suggestions let me know, PHP runtime versions may be coming in the future and it will probably be put on GitHub at some point.
Maybe \`get\_loaded\_extensions\`
As someone who puts a lot of time and energy into the bells and whistles of anything I even consider open-sourcing, I respect and appreciate your effort.
&gt;Ok, you just don't understand how escaping works. Actually, I do. &gt;This is why stripping the result of surrounding quotes is abomination. So the danger lies when somebody is creating raw SQL using the "DB::escape" function and then executes it? Isn't that a bit far fetched? What if the user is not using the DB:escape function? I don't think there is a way to prevent people from doing raw queries, or is there? Your explanation is again theoretical and not a specific vulnerability for the library at hand. Do you still think there is a problem in the code?
Was going to come here and share this. Definitely +1 to this one.
What's the danger of \`get\_loaded\_extensions\`? ini\_set is already disabled.
Why did you deny phpinfo? -&gt; same
Alright, I've blacklisted it. Thanks. :)
when you try something like \`ls\` you get an uncaught error: &amp;#x200B; **Fatal error**: Uncaught PHPSandbox\\Error: Sandboxed code attempted to use shell execution backticks when the shell\_exec function is not whitelisted! in PHPSandbox:7085 Stack trace: #0 ValidatorVisitor.php(373): PHPSandbox\\PHPSandbox-&gt;validationError('Sandboxed code ...', 12, Object(PhpParser\\Node\\Expr\\ShellExec)) #1 PhpParser/NodeTraverser.php(139): PHPSandbox\\ValidatorVisitor-&gt;leaveNode(Object(PhpParser\\Node\\Expr\\ShellExec)) #2 PhpParser/NodeTraverser.php(84): PhpParser\\NodeTraverser-&gt;traverseArray(Array) #3 PhpParser/NodeTraverser.php(135): PhpParser\\NodeTraverser-&gt;traverseNode(Object(PhpParser\\Node\\Stmt\\Echo\_)) #4 /home/host/web/php-sandbox.ml/publ in **PHPSandbox** on line **7085** &amp;#x200B;
And disable assert() too :-)
Alright, thanks. I'll catch that! I appreciate you testing with `ls` rather than `rm` or something.
You seem to be taking from my comments a bit more than they contain, hence your frustration. My point is that DB:escape is the abomination. And having it at one's disposal is bad because it gives one the false feeling of security it doesn't provide. 
Both issues resolved, thanks again. :)
I'm sorry, old habits. `ls` seems a bit more friendly indeed :)
&gt; at no cost, It's not going to be no cost. Making the internals of PHP much more complicated is going to result in more bugs (as if there weren't enough of those in the last couple of releases), and slower development of new features.
*Woah!* It's your **2nd Cakeday** Tomas_Votruba! ^(hug)
Thank You:)
Course https://phppackagedevelopment.com
I put myself in your shoes the second I read the title.
&gt;hence your frustration No frustration here. &gt;gives one the false feeling of security it doesn't provide. Like you are doing when giving examples of escaping table names? Anyway, I give up.. you win :-)
The entire talk is about how code generation and standardized build processes allow the company to safely develop the underlying *microservices* that power their API. ??
 **Shopify Ecommerce Website For Your Business** Shopify is one of the best Ecommerce Platform. It gives you lots of features that make it easy for you to manage your business and save lot of time. There are lots of apps on shopify’s Platform each offering a unique feature. One of the most important part in making an Ecommerce Website is integrating a payment gateway with your website. Shopify makes it very easy to integrate payment gateway with shopify Ecommerce Websites. [I will make a Shopify Ecommerce Website for your business in $25. For more details check the link.](https://goo.gl/qVwMqY)
85 minutes is more than enough, but it's a pointlessly trivial task for a mid to senior developer. It won't tell you anything useful about how the candidate thinks about or solves problems and just demonstrates that they can do the most basic tasks required of a developer. It might be useful if you're unsure whether they can code at all, but you can test that in much less than 90 minutes.
Can you elaborate on posting this link? The implication (to me) is that you are criticising the video for calling their APIs "microservices". Or perhaps you're merely trying to add to the conversation by linking to a related article you find interesting? &amp;#x200B; Literally nothing in the article you link to contradicts what the video presents. On the contrary, they completely reinforce each other. &amp;#x200B; I hope therefore that you were merely trying to add to the conversation with this article rather than passive aggressively adding the link in the misguided attempt to sound more intelligent and one-up someone (I mean, this is Reddit, after all!)
It is OP that was interested in real-life project so I suggested making a blog. But I have seen SOOOO many people thinking of self as seniors that I am sure most of applicants wouldn't be able to solve something so simple. Few examples: &amp;#x200B; \- one guy applied for senior position, never heard for implode and explode functions \- other guy doesn't even know English. The code we saw... well think of 100x worse code than Wordpress. And then some more &amp;#x200B; There are tons more but these 2 are top on my list. So that's one of the reasons why I think making blog from scratch is good enough test. I really don't know why I was downvoted, such think could tell a lot about developer; how clean the code is, is it using typehints, can static analysis work on it, is he using server-side validation...
I feel like micro-services were or are a fad that takes a monolithic app and breaks it into smaller pieces, not really solving a problem but instead spreading complexity around like butter over bread. To me it seems like a way for project managers with little to no technical knowhow to say "hey we can fix our app if we split it up" which in all honesty may work in the short term until you keep adding pieces to each of those "services" and they become less "micro". It's almost like saying "Hey lets take this 80kloc project and re-write it because it's a "mess". Just my thoughts. watches the downvotes flow in.
Programming on projects you hope to live a long time is a fight against the entropy of maintainability. If you just need a solution, and it won't change, there is very little technical impact of "procedural" vs OOP. You can even get a great deal of reuse. A massive global namespace is fun in a way. Like strapping yourself to the outside of a rocket. It works.
Short answer: yes. &amp;#x200B; FWIW, PHP does have classes, sort-of. But even without them, you can write clean, well-organized code for even an extremely complex project and it will be maintainable.
The OP mentioned that the only assessment projects they could find were for basic PHP skills, which I think would n ohde implementing a basic PHP blog. I don't generally think a 90 minute project is suitable for assessing someone's capability in a senior role, but then it really depends on the kind of projects you're working with. Whether or not you use type hints and remember to validate server side seems more like a junior/mid level distinction to me. People who can barely code at all should be weeded out before they're spending 90 minutes implementing a CRUD app. For what it's worth I didn't downvote you.
 try { $next($request); } catch (\Exception $ex) { return $this-&gt;buildErrorResponse($ex); } That's why.
&gt;Whether or not you use type hints and remember to validate server side seems more like a junior/mid level distinction to me 100% agree on this! My worry only comes because of incompetent people I saw applying for senior positions. Man... I could write peer-reviewed article on Dunning–Kruger effect in IT world :)
To my mind, this the only real-world example of the chain of command pattern that I can think of. In terms of laravel's implementation, if you examine the call stack within a controller, you'll see that your application actually runs within the final middleware. The application runs at the centre of the final middleware. This is perfect, as it allows for request filtering on the way in and response filtering/decorating on the way out. It can also allow any single middleware to adjust both the incoming request and the outgoing response in one hit. The cons seem limited. Obviously if you have numerous middleware, you may hit the function call limit and taken to extremes, you may find that it actually starts to get unwieldy and it's easy to make irreversible changes to the request. It can also be a pain to debug, if you don't know which middleware is causing you issues.
I am not arguing against your points, I just have never seen the kind of reuse one hears from when learning about OOP. Everything is repeatedly torn apart because reality is more complex than any paradigm. If we want not only to mirror the reality of your use cases but also keep to a coding ideology (whichever) we are making our lives even harder.
&lt;3
 But, and OP correct me if I’m wrong, why is it the responsibility of the user’s code to run `$next`? Why can’t the middleware do it right after it invokes the controller? For me, it seems like a misplaced responsibility. 
You're correct, that's what I'm wondering as well. /u/sentient_blade, thank you for the response, I am still trying to wrap my head around it and will most likely follow up with more questions soon.
The middleware can decide whether it's pre or post, by calling $next either before or after it does its stuff
It’s sounds like it’s not really a question of procedural vs OO, more a question of hand rolled vs using a framework. In practice everything you do in a commercial capacity is going to involve libraries and frameworks and they are going to be largely object oriented. Understanding those frameworks is going to be less about understanding the syntax of the code and more about understanding the theory behind how it’s designed. It will be worth reading up on concepts such as MVC and ORM and then I think the examples you’ve followed for laravel will make a lot more sense. Of course it’s technically possible to do anything in PHP without using frameworks or OO but at a commercial level you just wouldn’t.
/u/parks_canada ^ is the reason. It gives you fine grained control over when your code runs, i.e. before/after/on error, without having three different methods. It's just simpler... along with the other reasons described above.
Because by delegating control of when next() is called to the middleware, it can have it in the place it wants to be, or it can even decide not to call it at all. Let's say I'm writing a security middleware and don't want to continue if the user doesn't have a certain cookie set. ``` function __invoke(Request $request, callable $next) { if ($_COOKIE['secret'] !== '1234') { return new Response('You don not have access'); } return $next($request); } ``` Now, if I was writing the middleware kernel, I could work around this and go... okay, if the middleware returns a response I'm going to use that as the final response. But what about if the Request object is immutable and I want to change it? Okay... so now I check if the middleware returns a request instead of a response, and if it does, I'll pass that response to the next one in the chain. So at this point you've already blown any idea of having a fixed return type on your callable, you've made it more complex, less capable of being analysed, and you've got nothing more to show for it. 
Running `$next` is a part of the contract/expectations of writing these middleware. "Here is the request, and here is how you indicate you want to pass a request down the chain." &gt;It's also worth saying that there's no guarantee that the $next you invoke, is actually the actual function. As [/u/Sentient\_Blade](https://www.reddit.com/u/Sentient_Blade) added, it's probably best to not consider `$next` to be the "next middleware" in any event. The next thing in the line might actually be the application processing the request itself. Indeed, if a middleware does not call `$next`, things might break if the middleware should have... but, that is simply broken middleware at that point because it is not working as expected. &amp;#x200B;
I half agree but what is a proper solution then?
A little from column A and a little from column B. =)
See reply to comment below.
The first con is that one middleware can superseed another without a clearly defined and spec'ed cause. WordPress *kind of* handles that gracefully using ordered priority values for its filters/actions, but even then you can't really prevent two distinct middleware filters registering with the same priority to short-cirtuit one another. How can you ensure that one specific filter always runs, rains or shine, before another specific one?
If you are constantly tearing apart an OO app then likely there is some bad deviations from SOLID principles. Too much inheritance too much focus on reuse is one of the culprits often.
you can program anything in any language that is Turing complete, but some paradigms makes some things easier. 
okay. I'll take the bait. sort of?
code is not reusable; abstractions are. if the abstractions are good, the implementation can be thrown out and rewritten at any time. 
The pro is that now the middleware has full control over when and if the next layer of middleware should be called. An authentication middleware will only call the next middleware on a successful authentication, otherwise return an error response or something.
I've been around a while, and I'm amazed at how frequently I see people rebrand "globals" as some other amazing new thing that is awesome, unlike globals which suck. "context" objects that are meant to be mutated by asynchronous callers 6 levels deep in your stack is probably the latest one. Ultimately it's not a question of functional being better than procedural, or encapsulating in objects being cleaner/better organized in an absolute sense. What matters is if some state changes, will you not know why, and need to know what changed it? For applications with a very limited scope, you almost always know what caused a change, or you don't care, so procedural can be a good fit. Often you can even take something procedural, abstract its inputs/states, and wrap it in side-effect-free functions (fp) and/or objects, without too much work. While it's easier to shoot yourself in the foot, you can still write clean, readable, non-oop procedural programs.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Google: PHP the right way. Start there. 
...ASAP? move now. click. do something. :p
...do more - the things that you do aren't much. do more. :D
https://github.com/PatrickLouys/no-framework-tutorial
Thanks!
I'll check it out!
Hate to say it but you'll have to edit it one more time! That second code example with MiddlewareNightmare didn't all render inside of a codeblock. It looks fairly broken. Thanks for a great response otherwise!
Most implementations without a priority just run in the order that the middleware are defined. $middlewareStack = [ ErrorHandler::class, // First, last RateLimitChecker::class, // Second, second to last RequestSanitizer::class, // etc. Authentication::class, ];
Great post. This helped me understand Middleware a bit more - I didn't realize I could write code AFTER the `return $next($request);` and do stuff. &amp;#x200B;
I believe in no framework also but using some Symfony Components/Libraries but not the full Symfony framework is one way to do that without getting tied to the framework. For the example the [Router](https://symfony.com/doc/current/components/routing.html) is something you will have to build anyway for Web/REST application and it is nice to see some good code, patterns and best practices applied. Once you understand the Router then you can look at other [Router libraries](https://github.com/skipperbent/simple-php-router) to see if they fit your needs better.
https://kevinsmith.io/modern-php-without-a-framework
Here you go pal, just saw this one on HN today. [Commento](https://commento.io/)
:D
I think he gave a good reason at the beginning of the talk for using microservices. And that is the ability to more easily use different languages and tools for different problems. It is already common practice to split up the codebase and the database for obvious reasons. Microservice architecture is just continuing that practice. And I don't think that the "micro" part means that each service is necessarily small. But you do want to split out things that might require different infrastructure or have a logical reason to be separate. I have a php app with redis and everything is containerized. So PHP FPM runs as one service, Redis is another and mysql is another. So it's technically 3 "micro"-services. Now, if I need to create a new feature on the php app and lets say it requires a lot of memory, if I keep it bundled with the main app, then I am going to have to upgrade all the nodes to have at least enough memory to handle that big process - just in case it runs. Or, I can split it out as a microservice and have it by itself on it's own high memory node. 
With all their slick processes in place, I am really surprised that they have no staging environment. He only briefly mentioned it at the end in the Q and A, but his reasoning was that since their testing processes are so tight that it's ok to build everything on production. He says that they are using feature flags and pushing right to production. I just can't fathom how that is a good idea no matter how good you think your testing infra is. &amp;#x200B;
Only if your middleware all call next() at the end (or beginning) If ErrorHandler calls next at the end, its first. Then RateLimitChecker calls next() at the beginning. So its last. Unless either RequestSanitizer or Authentication do the same. As someone adding new middleware to this application, you have to know exactly how every single middleware that is registered is implemented to know how they'll interact with your new middleware. It might be reasonable to always and forever, want your RequestSanitizer to run before Authentication, then the rest of the stack. You're reliant on every future developer to know you want this, and let you have this. Whereas if it was just wrote plain code inside a handler method where you call $sanitize(); and then $autheticate();, other developers changing code somewhere else in the application aren't going to have any effect on you. To break your code, they have to change your code. This is nice, because its reasonable to expect them to know your code if they're changing your code. Less so if they're changing some other code somewhere else in the application.
That's one hell of an [AJAX Interface](https://github.com/AceWT/CShield-Simulation-Game/blob/master/app/console/ajax/index.php)
You’re right. PHP support for OO has come a long way in the last couple of major versions.
Without framework, but 7 files to say hello world, plus composer plus use DI\\ContainerBuilder; use ExampleApp\\HelloWorld; use FastRoute\\RouteCollector; use Middlewares\\FastRoute; use Middlewares\\RequestHandler; use Relay\\Relay; use Zend\\Diactoros\\ServerRequestFactory; use function DI\\create; use function FastRoute\\simpleDispatcher; Plus 72 command line. What a hell, very bad tutorial regarding the title. 
&gt;Only if your middleware all call next() at the end (or beginning) Middleware is just a wrapper that can be defined in linear order, so it's always both first and last at the same time for the remaining queue. It might decide not to perform any operation at "before" or "after" stage, but it doesn't change the order of taking control - calling next(). &amp;#x200B; &gt;other developers changing code somewhere else in the application aren't going to have any effect on you. By "somewhere else" you mean in middleware queue, and yes, making changes there requires them to know what they are doing just like in any other part of code. These changes don't maigically affect distant parts of the code because the queue is explicitly defined - you can read it just as you read "call $sanitize(); and then $autheticate();" (having request sanitizer at this level is a bad idea, but that's not the point). The only difference and the goal is that now devs don't have to touch any existing middleware module to change their integrated behavior (imagine there is no rate limiter implemented - push new class + change single line in composition layer, and there you go).
In other talks by the same gugy covers that better. When he says "in production" what they actually do is create an entire new customer (organization) and work into the system that way. Then they have a snazzy process to go in and say, "yeah, flag that whole org for removal now kthnxbai". It's actually a fairly smart process.
Just don't be so serious ;)
How about HSTS and valid SSL certs? Additionally, not a single bullet point that was mentioned in this article is specific to PHP, let alone a "trending idea," they're all things that PHP devs constantly strive for...
&gt; assert has been disabled. T__T
[removed]
Because I might not want to go to next, but based on some condition, go back, isn't that what middleware's for?? 
If you're open for video tutorials, [https://laracasts.com/series/php-for-beginners](https://laracasts.com/series/php-for-beginners)
Just to be clear, your code won't execute if it's written after a return statement, like this: function foo($request, $next) { return $next($request); // stuff here won't be executed } You would have to do something like this: function foo($request, $next) { $response = $next($request); // do some stuff here return $response; }
It's just a spam article for link building, report and ignore.
This is not a bad link and does contribute, it shouldn't be down voted just because you think the user is being an ass
Got it. It was to defends beginners, wanting to jump into php. I am serious!! ::) I still don't use all that, absolutely not in need of, learnt the hard way long ago, and I am very happy with php. To anyone wanting to jump in, to say **hello world!**, just do that: &lt;?php echo "Hello world!"; And for all your needs and beyond, it's all there: [http://php.net/manual/en/index.php](http://php.net/manual/en/index.php) !!!
Do you already use a CDN or Web Application Firewall ? If not, this might add a consequent layer of security.
Thoughts and prayers.
IMHO, Oriented Object Programing is useful when you modelize concepts or problems. We solve a problem when we create an app to compress SVG files, so this explains why you will be more productive using Laravel than in pure functional PHP for instance, because Laravel abstract the "Database" concept using \`DB::\` or Eloquent, which deletes every bootstraping (connecting to the database, fetching results, closing the cursor, closing the database connection). &amp;#x200B; Many design pattern (Factory, Singleton) uses classes because OOP is the man for the job, abstracting complex bootstraping, securing data provided (protected/public). For me functional programming in PHP takes place when you want to lay out a complex business algorithm, where you are aware of all your input-output, like for example importing a DWG AutoCAD file to a database. &amp;#x200B; Remark, you can mix those 2 concepts. If I keep the example of the autoCAD import, you might want to abstract the database saving process using Eloquent!
No, It's not a spam. I think you didn't read full article. please read carefully.
Fun fact: VK.COM, quite a big social network is developed on a PHP-based language KPHP without OOP.
Instead of the `__NAMESPACE__ . '\Foo'` construction, you can use `Foo::class`.
I don't think it is spam. I might be relevant for people aspiring to have basic knowledge about PHP development...
Please don't do this: include "../../file.php" Do this instead: include basedir(\_\_DIR\_\_) . DIRECTORY\_SEPARATOR . 'folder' . DIRECTORY\_SEPARATOR . 'file.php"; &amp;#x200B; You have no idea how many people I've seen writing things like this "include ("../../../../../file.php")"; Use composer or use include\_path stuff
Thank you for this! I just ordered the book after reading the tutorial
Ouch, don't follow this guide-- it'll likely lead to a broken site, doesn't provide guidance on how to use/test the backups, has the order of PHP and Magento incorrect, and does little to modernize the tooling: * Command Line PHP often does not match the Web Server PHP. * Mention of backups, but no mention of restore procedures. * Backing up from the web interface (not suggested), with no mention of site impact, scheduling or restore procedures * Upgrading the PHP before applying the patch that makes the store compatible: like breaking the store. If one has the unfortune of running a Magento 1.x store in 2019: * Lookup proper backup and restore procedures, practice them, create an area to test. * Consider intergrating tools like git, [n98-magerun](https://github.com/netz98/n98-magerun), and composer (with [magento-composer-installer](https://github.com/magento-hackathon/magento-composer-installer) * Consider shifting the management of Magento to composer (e.g: [magento-core-composer-installer](https://github.com/AydinHassan/magento-core-composer-installer) with [openmage](https://github.com/OpenMage/magento-lts/). * Consider auditing changes to Magento files-- many intergrators modify Magento files directly (strongly discouraged). Blindly replacing them or trying to patch them without an audit will likely result in broken or unexpected behavior. (in `app/code/core`, `lib`, `js`), design files (`base` and `default` in `app/design`), skin files (`base` and `default` in `skin) * Consider auditing overrides to Magento files-- many integrators override Magento classes directly (lightly discouraged). These overrides usually involve copy-pasting Magento code: if it continues to be used, old unpatched code may continue to run. (Magento1 suggests using [rewrites](https://magento.stackexchange.com/questions/133186/how-do-i-override-rewrite-a-block-class-in-magento-1) instead, to avoid copy-pastes). Regardless of what one decides: 1. Use tested backup procedure for backups (ideally a scheduled one) 2. Update Magento: ideally testing first. (no need for patches, 1.9.4.0 is a cummalitive update with PHP 7 patches) 3. Update PHP _after_ Magento: ideally testing first (both versions support PHP 5, but only the _updated_ version supports PHP7)
I'm sorry, did I miss something or there is no gamification at all in it? It seems like a normal process of refactoring, removing code and write tests.
Well, obviously, you /u/magcorp, are sharing an "article" on mag-corp.com, which clearly indicates that you're a website with a with a Reddit account. Relevant Reddit wiki page on that can be found here: https://www.reddit.com/wiki/selfpromotion &gt; "It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account." - Confucius &gt; &gt; [...] &gt; &gt; **tl;dr:** Don't just spam out your links, and don't blindly upvote your own content or ask anyone else to! &gt; &gt; Why? Because reddit is a community, **not a platform for self-promotion.** Based on that, I have no issue with telling you that you're in direct violation with the official self-promotion guidelines and that it's reasonable to flag your content as spam. 
**Magento** is a highly advanced e-commerce web portal and application development framework which offered high-end features for your online business structure. Due to some special features, I preferred Magento. Following are: * Ultimate Flexibility * Two-Factor Authentication For Enhanced Security * Multi-Source Inventory (MSI) * PWA (Progressive Web Applications) Studio Integration * High-End Customizations * Elastic Search Support
Django does the separate methods style and it's kind of a big a pain to work with.
It's based on the chain of responsibility pattern. The idea is that each link in the chain has veto rights on further processing. Doing it in the style, rather than simply iterating over an ordered collection, also makes things like state management easier (it's all local) as well as return types - you only need to return a response object, rather than something like `Union&lt;Response, Continue&gt;` where Continue is some type that says "I'm done but didn't actually return anything". Any time I've built middleware pipelines, CoR is the pattern I reach for first since it feels great suited to this in general. But there have been instances where I've opted for an ordered collection because I don't want early veto of the pipeline _and_ state management isn't an issue.
An excellent answer. Thank you. 
`__DIRNAME__` is definitely a good practice, but is `DIRECTORY_SEPARATOR` at all useful when `require()`ing? Windows supports forward-slashes for directory separators, and I cannot think of any other OSes that run PHP which also use backslashes and don't support forward-slashes. I can only see `DIR_SEP` being useful when you're trying to parse a directory path returned from a method or function.
Very cool project, I did something myself 10 years ago... You will learn a lot :-) &amp;#x200B; What I can tell you by now is: You will rapidly reach limits by how you organized your code and your commands. Try to abstract a command to a single interface, so that you can add and maybe soon chain commands into each other. Your command should not be able to use global variables and such. &amp;#x200B; But I'm already 10 years ahead now (this kind of games still amazes me, maybe I start allover again with something ;-)) &amp;#x200B; I think the best I can do for your actual php level is, to give you some challenges you maybe want to look already to see if your infrastructure can handle: &amp;#x200B; * Will you be able to talk to each other if multiple people are online in the console? How will you enable this kind of communication * Your filesystem needs to go into a persistent layer like a database. From there you emulate ls/mkdir/... * You probably want to have a level system. Like in the beginning (level 0) you can only use a few commands, but more will come as higher the player level is * If you want to abstract commands like "telnet" where you first connect, then login and then you get a whole new environment (commands / fileystem / online players / ...) you get a totally new kind of command that needs to persist data also in the session for example to get exactly to the desired point in the command. * WebSocket might be thing you want to implement, so you would be able to fire events from the server to the player. That means for example that player a can interact with player b. &amp;#x200B; Anyways. Go on! :-) [http://www.phpatterns.com/en/latest/](http://www.phpatterns.com/en/latest/) helped me a lot to see different patterns for solving problems. Maybe the CommandPattern? ;-)
I even found some code when I started again. And soon I reached again a level where I would toss everything away because I would to it differently now: [https://github.com/mikemeier/Console-Game](https://github.com/mikemeier/Console-Game) Maybe you can use it as an inspiration
scandir + foreach + require\_once? &amp;#x200B; if these are classes, PSR-4 + autolaoder?
I wasn't trying to total ass. A little snarky, more backing.
This is a general stuff and not directly related to PHP right? It doesn't "depends" on PHP 
/r/enlightenedcentrism
This is general stuff as in it's a random blog post, yep. &amp;#x200B; The post can be summed up in one sentence. The language and/or framework you use... **depends**, on the use-case and needs.
not always… it depends.
Used it once like 5 years ago. Thought to myself “f this” never suggested it again. Is it any better since then? 
I have totally the same experience. I've been working with Magento since 1.3 and I honestly still prefer working with 1.x. They went out of their way for all the technical bells and whistles with dependency injection and what not but before 2.2 the dev experience for 2.x was incredibly horrible. I remember my first reaction being OMG THEY ACTUALLY MADE IT EVEN SLOWER. I taught a Magento course on 2.1 and I was embarrassed by how slow it was and everything can go wrong in a million different ways. The static asset stuff has gotten better but man did they shit the bed with that system. I've thrown out several installations and just done a reinstall instead of trying to debug that shit.
So... Are you trying to tell me nailing a small nail with a sledgehammer is overkill? Of course it depends, every tool has its uses.
I wish IDEs (well, PhpStorm at least) had support for this. The way it stands, it gets confused whenever I try doing anything other than relative paths.
Exactly! That's the worst part of it, out of the box in production mode it's slower than Magento 1.x I mean yeah Magento 1 had it's quirks but at least stuff worked. Try to save a category with the CategoryRepository. Big chance that the generated url's are incorrect so you have to use $category-&gt;save(); directly which is deprecated but it's just weird. The reinstall thing, so recognizable haha. My .gitignore excludes everything except the composer.json, composer.lock, app/etc/config.php and a couple of other files. All the other stuff gets overwritten with updates anyway. The database is a big issue though... once it's fucked you're done.
It's better as in, it hurts less. Still simple things require a lot of effort and time. it's so easy to miscalculate the time it requires to do something in Magento 2 since it's such a complex hell. For example you can create plugins for basically any public method anywhere. Your plugin may hook before, around or after that method everytime it's called your plugin gets called as well. Pretty neat right? But then you have a bug, a save doesn't work like it should and there's like 20 plugins and it'll just make your head explode stepping through it with xdebug. Once step over too many and you can start over. Also there's still lots of database issues, deadlocks randomly, index issues, front-end is a gigantic slow mess with way too much JS being loaded. Protoype, jQuery, Knockout, RequireJS, it's all used at the same time at places and now with Magento 2.3 they want to chunk ReactJS on there as well. If it wasn't for my job I'd put it firmly int he category "fuck this piece of shit". I am curious though in those 5 years did you use another e-commerce platform or did you just abandon it all?
I'm somewhat in a weird situation, questioning exactly the last sentence. To the question posed in the title, \*NO\*, there is not a technical limit. &amp;#x200B; Now, what I'm constantly questioning myself on (because... yea converting a large, spaghetti codebase to OOP is hard when you don't really grasp the nuances of OOP) is whether or not it's "worth it" or "needed", *per se*. Would I love to move everything to OOP? Absolutely, but my (secondary, see last sentence for primary) reasoning for it is "because OOP seems amazingly concise, and it looks amazingingly clean". But is converting \~300 lines of procedural to \~8 methods really "needed"? Instead of reading it nicely and neatly, in the order the script will execute it, you're bouncing around from method to method, class to class. But, without OOP you are making huge files that could become harder to read. &amp;#x200B; Writing that out, I don't know the equivalent word in OOP terms, but I realize what my fascination with wanting to go OOP is - write once, reuse. Think of it like a header.php, way back in the day, most young developers would include all of that in every file, and then have to update every single file anytime something changed. Nowadays you have a header.php that you... *reuse.* So imagine you made a (horribly silly example) function to check if something is an int or string. You will be checking that quite frequently, instead of writing that function out in every file, you would store it in a (hope this isn't taken the wrong way) global function file that you include on every page and off you go, reusing that function. &amp;#x200B; Of course, the other reason I, along with most procedurally born developers, want to use OOP is because all frameworks are OOP. **So at the end of the day, my primary reason is because if I ever want to use a framework, I'd have to go OOP.**
my boss said don´t worry about documentation, no one reads it anyways...
Slim is probably my favourite PHP framework. I think lightweight and then picking the components/libraries on top of that to most suit your needs is the modern way to do things because it fits in with how web dev is going with microservices and the frontend handling more of the workload much better than monoliths like Laravel. 
What is the "yes" answering? &amp;#x200B; The technical limit question, and if so "eh?" If it's the longer/less organized, I could potentially agree with but if done properly, I'd say that would be strictly for developers who weren't involved in the initial project writing.
I've developed the same plugin/ module/ extension for: * WooCommerce (WordPress) * Easy Digital Downloads (WordPress) * OpenCart 2.3.x &amp; 3.x * PrestaShop 1.5, 1.6 &amp; 1.7 * Magento 1.9.2.x Magento was the worst of them all. I am dreading the day I am tasked with porting it to Magento 2.x.
I've tried using Magento 2 after it was declared "stable" and a few releases after that. Ran into the issue that when someone bought something on the webshop they would get a confirmation mail but the shop owner doesn't see anything anywhere that someone ordered something (not even a new order in the orders list). Response from their IRC channel was: You shouldn't be using magento 2 (a half year after it has been declared stable)
My god that's absolutely terrible, their response times are also ridiculously long on issues. I've seen a ton of real issues getting closed because it took them like 8 months to respond and asked the creator to update it for their latest version. 7 days of no answer from the creator (who probably jumped ship) and they close it.
Thanks everyone, I've seen the light now. I appreciate the feedback.
I was under the impression that using `DIRECTORY_SEPARATOR` is 100% unnecessary with modern versions of PHP.
By “yes” I of course mean “no” ;-) I meant that you can write clean, complex code even using just simple language constructs.
&gt; $response = $next($request); &gt; // do some stuff here &gt; return $response; Gotcha. Thanks for clarifying.
You can use WordPerss + WP Githuber Md ( Markdown editor) [https://github.com/terrylinooo/githuber-md](https://github.com/terrylinooo/githuber-md) And also use the Markdown friendly WordPress theme [https://github.com/terrylinooo/mynote](https://github.com/terrylinooo/mynote)
Have you checked out ThirtyBees?
Read up on clean archt here: http://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html
[This](https://symfony.com/doc/current/create_framework/index.html) is the perfect guide teaching you to build your own PHP framework from basic components.
I've not heard of it before. But given that it's a PrestaShop 1.6 fork, our module will probably just work. PrestaShop has plenty of weirdness and quirks though and it's not something I would recommend. I work for a niche payment gateway and all the plugins have been in service for that. The plugins we develop are based on client demand.
Procedural programming is for amateurs, OOP on the other hand is what it takes for professional programming. In a perfect script, everything is an object. OOP offers encapsulation, inheritance, polymorphism and composition, it helps you build much more extendable, reusable, maintainable, and organized application. The advantages are more evident in larger programs, which are pretty much impossible to work on with procedural style, especially when teamwork is required. For newbies, I'd recommend you to work on a project and learn step by step on why OOP will help you create better software. As your application grows in size and complexity, you will realize how it's difficult or impossible to extend your application further if its written in procedural style. At this point, you won't ever want to code in procedural php any longer.
I have an upcoming project in Magento 2 and now you got me afraid to use and I only had used for relearn the basics since i'm still mantain and build shops with Magento 1. What are your tips for someone whos gonna have to face this challenge ?
I've worked as a Magento developer for four years and I'll never ever go back to that fucking piece of shit software, no matter if it pays relatively well. 
Clickbait.
PWA studio in M2.3 is pretty cool.
I think you're using cassandra 3 while the php driver does not support that version yet.
Hello! I am founder and lead developer of Flextype - [https://github.com/flextype/flextype](https://github.com/flextype/flextype) Current stable version 0.8.3! and I am working hard on a new 0.9.0 version with a lot improvements!
I've seen plenty of Magento 2 sites working just fine. It's a big codebase, but, that's why we have things like XDebug to help us navigate the code and squash bugs. I wouldn't upgrade to 2.3 quite yet. It's almost there. 
*Woah!* It's your **1st Cakeday** donis_plays! ^(hug)
Wtf
You probably want to use DOMDocument. Find the element using xpath, update the element and save as xml. 
That's what I was thinking as well, but while writing the xpath I startet thinking there must be an easier way. I guess there isn't :(
Not really, but once its done you could wrap it into a function to make it easier for the future.
Magento 2 is terrible. We maintain two Magento 2 sites and we’re adding a third next week. It’s so complicated to do even the most basic tasks. Of course clients don’t realize this and get pissy that their requests from months ago aren’t done. And maybe it’s just me but every other extension breaks something. Hate it with a passion. 
Which was the most pleasent one to develop for? 
Excellent slueth'n!
Magento is hot garbage. I was tasked with a project for a major tire store...never again. 
Actually I am using 2.2. I downgraded to 2.1 and restored the system tables and it seems to be working. Thinking you are correct by it being a php driver issue
Run if you can. For real, having knowledge of Magento 1 is a good start, some things are still the same, the .phtml templates and blocks still exist, config is still all XML, layouts are still defined as XML. EAV system is kind of the same as well is the database structure. Backend is completely different, Collections and ResourceModels still exist but aren't supposed to be used directly and marked as deprecated (though Magento uses it EVERYWHERE itself bunch of hypocrites). It's all done through Repositories and getting a collection is done with SearchCriteria. What else you have... erh well front-end in addition to the .phtml also have normal .html template files, these are used with Knockout. Giant mess, terrible to extend, edit or replace and easily break. It's often easier to create your own .html file, load it and use jQuery to put it in the right position. Some important things you should avoid: * Don't ever use the ObjectManager itself to get a class! It's bad it WILL cause bugs and cause strange behavior. I think you only use them when you make a Factory class which doesn't happen that much. * Stay away from third-party plugins as much as possible, they often conflict and when they do they cause bugs in places you don't expect. If you have to use it check the di.xml for Perference tags that override Magento classes. That's a giant red flag! Also check the requirejs-config.js if it replaces Magento javascript, also a red flag. Plugins in the di.xml = good, mixins in js = good. * Before you install Magento make sure to add all the Amazon, Klarna and other third party crap shipped by default to your composer.json in the replace section. That'll remove them completely. If you don't they'll install their own attributes, tables and junk that you can't get rid of and again, cause bugs. * n98-magerun2 is your friend * If your dev environment is being weird switch to production and back to developer mode, it'll wipe all cache and symlinks. * Don't underestimate it, whatever hour estimate you have for m1, triple it for magento 2. * Use deployments to install it and add the lib, setup, bin and other directories to your .gitignore. * To one up the above, install magento, delete everything but the composer.json and composer.lock and do a composer install you'll see that it restores almost everything.
I use the follwing code: $teamDataFile = new DomDocument(); $teamDataFile-&gt;Load('data/team.xml'); $teamDataFile-&gt;xpath('/players/player[2]')-&gt;id = '546545618351'; $teamDataFile-&gt;Save("data/team.xml"); To change the 42 in the following file: This XML file does not appear to have any style information associated with it. The document tree is shown below. &lt;players id="6486584358484"&gt; &lt;player&gt; &lt;role&gt;42&lt;/role&gt; &lt;id&gt;0&lt;/id&gt; &lt;name/&gt; &lt;avatar/&gt; &lt;/player&gt; &lt;player&gt; (...) &lt;/player&gt; (...) &lt;/players&gt; Yet somehow it refuses to run, any ideas?
thanks for the tips, my biggest fear is the management choose a third party Magento theme for the start of the project, usually they're a pain in the ass to install even on Magento 1.
Any tips for XDebug? Main issue I have is that Magento code likes to jump a back and forth. Especially when you want to step into a method that has a lot of plugins. It's quite annoying to see once it's done with all the plugins and I jump over the method all the time.
You have to target the node you want to change directly and change nodeValue I believe. Not on my pc right now can't say for sure.
Sorry to break it for you lads, but Magento isn't the kind of plug-n-play toy you can play with in your spare time. Magento is a highly abstract system that requires a ton of practicing to get right. If you're a 3 man team that thinks it can develop the next eBay with it by gluing some components together, you've chosen the wrong framework. I've been working on 3 Magento stores in my career. 2 of them are some crappy stores with 20 products and 10 daily users, the 3rd is a multi channel solution that runs 100k products and 15k concurrent users. The crappy ones should've never used Magento. The 3rd one wouldn't ever made it live without it. You need a lot of knowledge on how to cache things, how to abstract your models and how to squeeze every performance gain you can, but once you've done that you end up with a highly extensible system that can do pretty much whatever you want.
Php do not autoload functions, nor does it distinguish callables by parameter/return types
This should be in /r/phphelp
Take this with a grain of salt because I'm something of a jack of all trades, master of none when it comes to all these platforms. Having only really looked at one bit of them for each. WooCommerce &gt; EDD &gt; tie between PrestaShop and OpenCart &gt; Magento Unpopular opinion, but I like WordPress. WooCommerce has a nice settings API and form builder for the admin back end. Extending `WC_Payment_Gateway` and registering the new gateway is fairly simple. WordPress's HTTP API is nice. Registering hooks for an IPN is simple. I implemented automatic updates served seamlessly from our own servers in under a day. EDD was more or less the same as WooCommerce, but you have to DIY the form, and there's no Gateway object - just hooks. PrestaShop 1.7 has a bunch of Symfony components fused into it, but also doesn't drop a lot of the things that those components are meant to replace. It also has a nice settings API and form builder. Some of the core is not nice to deal with, e.g. there's more than one call I use that looks like `$this-&gt;confusingMethodName(false, null, [], null, $thingICareAbout, true, 'purple_monkey_dishwasher');`, and a fair amount of duplicated code to support both 1.7 and 1.6/ 1.5 in a single module. OpenCart doesn't have a discreet extensions directory, instead you install extensions by extracting and merging them all over the installation. OpenCart's coding standards are a bit weird in places - e.g. loading translations typically means dozens and dozens of similar looking lines pulling translations out. You can make this a lot more readable with this revolutionary PHP feature called "foreach". But in general OpenCart requires a lot of duplicated code, like for working out cart totals, I had to copy swaths of code from core because there was no way to reuse just the bits I needed. OpenCart 3 swapped out Smarty for Twig for no good reason as far as I can tell. Both PrestaShop and OpenCart are pretty fragmented. Hence why I've had to support 5 versions between them, and probably going to be backporting to older versions of OpenCart soon. Magento is so incredibly slow. I just don't even. How do you write software this slow? The documentation is all over the place. I had to go watch outdated YouTube videos to work out some of the XML files. Magento is just not fun.
yeah, at some point you will have to just go through every module and look at the di.xml , and the plugins, and start setting breakpoints in functions that look suspicious
Actually talk advise AGAINST multiple languages. And often Gibbs google 20k engeeners with 8 langs as example.
And familiarity and a budget, and on how much sculpting to their CVs devs want to make.
Oh no! Steer clear of that, don't, DO NOT use a third party theme. I haven't found a single one yet that didn't fuck you over big time. https://www.mageplaza.com/magento-2-themes/ First few theme's are absolute garbage, they may look nice and easy but they're not as they're doing everything in Magento that you shouldn't do and a ton of modules break. Best option is to just use the default Luma theme and extend and style it. Usually management picks those themes because of Layered Navigation or a certain type of Menu but those can be installed as separate modules. They shouldn't be deeply coupled in a theme. Only reason to use those third party themes if there only need to be very little modifications to the basic Magento 2 functionality. I mean to give you an example of just how awefull it is, Porto one of the best sold themes for Magento 2. You have a ton of settings for colors and stuff, sounds easy but it dumps it all to a .css file without versioning so you have visitors with browser cache seeing the old site and you can't change it. It was also porto I believe that just randomly updated from bootstrap 3 to 4 so when you upgraded Magento you also to change all your custom styling from bootstrap 3 to 4. No just play around with Luma and use .less and you'll see that it's much easier
I assume at that point you're also not using the Open-Source edition anymore but the Commerce/Enterprise version?
You may want to head over to r/phphelp as you're more likely to get a response to basic coding questions. 
I would say go with the contents of your loop. But do a glob on the filename and a regex for the date. Also you might consider creating a static file cache, that way you can serve HTML and let Apache/Nginx do what they do best, serve files.
It might sound totally absurd but some of us work regularly on systems at that scale and still hate the "Magento experience". Even discounting the dev experience I really think the way they do open source is poison. Noone can really contribute to core AFAIK and knowledge is not shared to the same extent as in other OS communities. This is a trend in other OS E-commerce solutions too but Magento has the absolute worst of it. Their certifications are a joke too. I've been called in on several projects where the previous maintainer was a "gold partner" but obviously couldn't write Magento code to save their lives. I do agree with you that if you're going to do E-commerce at scale with a PHP open source solution you're shit out of luck bc WooCommerce will kill you unless you rewrite pretty much all of it. That still doesn't mean that it's actually a good system though. There has to be better ways of doing this. I'll be rich when I figure out how.
Hmm so his official page lacks behind patreon one by 4 days [https://www.patreon.com/posts/adverse-abis-24721587](https://www.patreon.com/posts/adverse-abis-24721587)
Yeah that's almost the way I decide if we should consider Magento or not for a new client these days. If they can afford Commerce/Enterprise then they might just be big enough. Otherwise we stay away.
From my own experience, if you do anything at scale microservices is the way to go. Teams can work independent from each other. Each component can use the framework, language, whatever makes it work extremely well and fast. Not that other stuff can't be scaled but it's just wayyy easier to manage lots of small components than one giant monolithic monster where an irrelevant part of the system could break core functionality 
I was afraid you were going to say that. Thanks anyway! 
In here just to see that other platforms besides Drupal have problems.
Production env but not taking traffic til all tests are green. Then when It passes, flip the switch and gradually take the 'old' version containers offline and repeat til you're running all new
I've never had a good experience with and version of Magento. 
I'm not the guy to ask, but when I tried out Magento a few years ago it seemed like it was pretty cool but the amount of time learning the platform probably could've been better spent creating a custom e-commerce solution without any of the pitfalls of the platform or dealing with the decisions of a third-party for the platform for future support. The pay-off is obviously when you want to make 100 sites, learning the framework is faster than re-inventing the wheel (ideally). I tend to be anti-framework though.
I think it just comes through slow iteration... trial and error plus reviewing what others have done and thinking enough "that's a good way of doing things". Then eventually you incorporate some of those ideas into your own work. &amp;#x200B; Also keep in mind: we're always more critical of our own work and see every flaw. Third party perspective is much kinder.
I wonder if reading code daily for 30minutes would be a good idea? 
Practised, practised and practised again. Write your own objects or libs. It still does not click for me until I'm a day or two into the process when the brain switches and it starts to flow - reality is we do not do that much OOP as we think - writing controllers, models, repositories and events is not really practicing it. For me it's usually the background stuff or import/export processing or business logic bits that stimulate the OOP muscule for me and those do not come around that often.
Give Sylius a looksie. Proper desing, up to date on tech stack, full test coverage. Not small, is a framework to build upon (though simple shops can just work out of the box with a few small modifications and a plugin or two).
Magento 2 is a massive pain in the ass. They should have stepped away from EAV. Even a few years ago when they were building it, that was inexcusable. The block layout system is terrible too. It makes no sense. To really top it off, ever try to roll back a deployment? It's a disaster.
As said before, it can be learned and it comes with practice. I am seen as a senior and im constantly learning new stuff, even from ppl less experienced than me. But we can learn faster by studying, and i do it in a few ways: - Understand SOLID and other principles; - Understand Design patterns; - Read books; - Watch conference talks on YouTube; - Have a pet project where you can practice stuff. I can suggest these talks, for example: https://youtu.be/XXi_FBrZQiU https://youtu.be/EZ05e7EMOLM https://youtu.be/5OjqD-ow8GE
Anybody able to draw a comparison with sylius?
That doesn't sound like what they are doing. If your dev code is in separate containers, that's still a dev environment. He said "feature flags" which usually means that you publish your code right along side the live code and in the same containers. It's just that you essentially place flags in the code to only allow certain users. Like If (current_user_group == 'test_group') then use the new methods. 
I guess so. But you are really going to have to be working on a narrow set of problems if you can do everything with one language. Or at least you will have to start with a fast, compiled language and then spend/waste lots of time reinventing the wheel all day long where a scripted language would be better. It seems they avoid this problem by relying very heavily on AWS products. Which can be really expensive and not always a perfect fit. 
Writing unit tests will significantly improve how you write your classes.
I had a revelation with testing years back, as I realized that test code is just you calling your own code and seeing what happens while expecting specific things to happen. Start small and simple, even simple tests are worth it! Imagine writing a PHP library that offers some functions for developers to use. Next you define a public API for the library and add documentation for others to use it (e.g. "call `foo_bar_func()` with integers and it returns strings"). Now others install the library and use it in their projects. With tests you're essentially writing a project that uses your library, using the public API of your code to see what happens and comparing with what really should happen. Compare the following (A being dev using library, B being you writing tests): - A: developer uses your library and calls `foo_bar_func(123)`, and receives a return value `abc` - B: you write a test that calls `foo_bar_func(123)` and checks that it does the right thing (i.e. `assertEquals('abc', foo_bar_func(123))`) Then later on I suggest you flip it the other way around, write the tests _first_ to define how you want the API to look and feel when someone uses the library. The test will first fail, and you will only then write the actual code to make the test pass. This way you automatically cover your codebase with tests and your code tends to be better designed and more modular. Hope this helped nudge you towards trying out unit testing. It is a really powerful tool in any developer's toolbox.
Roadrunner smokes nginx/FPM for PHP applications, though it’s not written in PHP (C/C++).
Damn, it sounds like you’re a legit computer scientist that got into web dev later. Is that right?
https://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html
https://www.yegor256.com/2016/07/26/active-record.html
Agreed. Do not underestimate how much theming sucks. 
Just think of the data that you're passing around and manipulating as objects. For example, if you're trying to list the price for a product in a shopping card, you could use a currency object that does something like the following: * An object containing the currency's base unit size (i.e. 100 USD, 1000 for OMR, etc.) * multi-byte symbol (or hex / ord) * decimal position (i.e. 2 for USD, 3 for LYD, 0 for LBP, etc.) * abbreviation (i.e. USD) * actual amount in base unit size (1250 === $12.50 USD) Now you can have a various types of formatting methods on the object that can format the amount with or without a separator, symbol, abbreviation, etc. You can then pass that object around and know that it'll always output the same results regardless of where it's used (assuming its properties have the right scope, etc.). This aforementioned currency object is a basic example of encapsulation (a fundamental OO concept). You can also extend the class to contain additional methods or behaviors, or to overload one of the original methods to achieve a slightly different result (inheritance). That's basically all OOP is. A lot of PHP programmers make the mistake of thinking they're somehow learning OOP because they've thrown a bunch of methods into some classes, but classes don't automatically equate to OOP.
Ever heard of Wordpress?
And doing TDD.
Yes, when I started reading other people's code, and I mean really pulling it apart and breaking it down, it was a turning point in my career.
`test(...\["Key1" =&gt; "Value1", "Key2" =&gt; "Value2"\]);`
Yes, it's a major pain in the ass. The one thing I like about Magento2 is the backend, it's very flexible and extendable. The frontend is terrible. KO.js was a major mistake. Also as a user of the new PWA, i'll tell you it's complete shit. &amp;#x200B; If you're running a small shop &lt; 5k products and 5k users, you're best off probably looking else where - woocommerce or shopify mainly. &amp;#x200B; If you're an enterprise company with the ability to allocate the resources it can be helpful with how much you can integrate with it. You can split databases which can help with scaling and backup management, etc. But if that's not you, stay far away.
First migrate it to 5.3. Then to 5.4 and so on.
Just because it behaves like an array in so much as it's a sequence of values, doesn't mean you can set keys in userland. It would perhaps be more accurate to think of them as a simple arrays / vectors rather than the standard php hashtable. 
 Great point! I've corrected the inconsistent spacing with the if / elseif statements, and I'm going to go over "PHP: The Right Way" again to see if there are any other bits I've overlooked. &amp;#x200B; NOTE: I accidentally deleted this comment previously.
Haven't used Sylius too much but it seems to be Magento done right, and runs way faster
You dont have to go through every di.xml in module. Just setting a breakpoint in Interceptor of class you want to debug, all plugins are shown there.
Given your example, I would personally add the brackets, update my method signature to an array, and call it a day at that point. 
I agree, only use Magento if they are big enough to afford Enterprise Edition. I don’t say they should use EE, it isn’t worth money (it provides more features with more modules and more bugs). One thing I think it could be a reason to choose EE over Opensoure Edition is staging module, it’s pretty cool.
Each class of object would need the following types/categories of methods: 1. constructor/destructor method(s) 2. set/get methods 3. methods that return "state" of object but _without side effects_ 4. methods that change the "state" of object without returning return "state" (as this is done by pt 3 above) 5. class related constants, static methods. Esp helpful to not have a method that do 3 &amp; 4 at the same time. I adapted these ideas from Bertrand Meyer's OO Programming Language while coding C++ PS: having methods this way make it easy to implement asserts, preconditions and post conditions during development too. 
&gt;&lt;?php echo htmlspecialchars($foo, ENT\_QUOTES); ?&gt; wrong, you escape before the template so it will be just &amp;#x200B; &lt;?= $foo ?&gt;
Try conditional breakpoints, if you know a detail from the plugin you're trying to catch you might be able to check for that before breaking.
I spent 3 months migrating a Magento 1.9.x store over to Magento 2. I then spent 1 month migrating to WooCommerce and never looked back. That was over a year ago and I don't remember the version, but Magento 2 had been released for at least a year already. I thought, it's been out long enough that the bugs should be ironed out. No. I can't believe how many bugs were in that "production" software. Unbelievable. I should have seen the writing on the wall earlier. Now when I see a Magento-based website I feel bad for the dev that's running it.
It's not just you. To make good plugins you need to have an intimate knowledge of Magento and work with it how they expect you to. Many plugin developers don't. So it's a mess. Also most plugins tackle pretty complicated features in themselves so they're likely to have both internal bugs and bugs integrating their logic into Magento. I have code reviewed dozens of modules and there are probably only 3 or 4 vendors I could recommend.
Magento makes Wordpress look like something built for PHP9
``` function test($key1, $key2) { ... } test(...["key1" =&gt; "Value1", "key2" =&gt; "Value2"]); ``` Will do exactly what he wants. The variadic triple dot operator can be used in either the function parameter list or in the arguments of the caller.
Develop a health problem and pull out of the project now. You can either develop one now, or be assigned one by Magento. I'd rather be in control of my destiny.
I'm a full time Drupal dev and after using Magento, I will never EVER complain about Drupal Commerce again.
Yeah, Wordpress/WooCommerce, for all its detractors does actually work and has solid documentation and support. Can be a bit of a challenge getting some things to work, but I’m working on a massively customised installation of it at the moment and finding pretty much anything to be at least somewhat feasible.
I've been working at Magento agencies for over 3 years (recently left that space), starting with version 1.x and moving on to 2.0-2. 1.x is better as far as developer experience IMO (not by much). Sure, plugins are cool. Sure, generated code is cool. But, you know what's not cool? Logging tickets to Magento. I held the "record" of logging the most bugs in one day at my previous company. It was crazy... Imagine you're building something out, notice some strange behavior or error, trace it back and realize it's a core bug, explain it to a lead developer and have them agree with you, and then create a ticket with Magento... 16 times (that was my record). OH. and after they say "we can't reproduce on a clean instance of Magento," you record (via a screencast) yourself REPRODUCING IT ON A CLEAN INSTANCE OF MAGENTO. Magento 2 has a lot of problems. Especially Enterprise (commerce) and their B2B modules (f**k their shared catalog modules). But, Magento's customer service is not great either. There've been several times where our lead dev would have to explain to them how their own system works. I didn't even get to write software anymore, I just logged tickets and responded to them all day long. It used to be fun to build out Magento modules and themes. Now, you gotta spend more time logging issues to Magento. I can go on forever... but to answer your question: no, so far it's not better. I do believe however, that it will be in ~3 years. I like PWA and GraphQL. Those are going to be fun. I think there's potential to make Magento 2 more scalable by splitting functionalities into microservices. But, right now it's riddled with bugs and it's been a dreadful process to work with Magento on them.
First of all anyone advocating Ruby has no place talking about any languages "relevancy". But: PHP is faster than both Python and Ruby. PHP is more widely used than both Python and Ruby. PHP was made specifically for the web and has a plethora of mature frameworks and libraries for the web. Python and Ruby were not and by comparison, have only a handful of mature frameworks and libraries for the web. There are 3 types of ignorance. People who know what they don't know. People who don't know what they don't know. People who know they know, but really don't know. You're friend is the latter. Its the most dangerous kind.
Thanks, I was going to ask
Lots of good advice here. I read something in an object design book at some point (and sadly I can't remember which) that really made it click for me. Think of each object as its own tiny machine — a machine that is responsible for something in particular with limited and well-defined inputs and meaningful outputs. &amp;#x200B; I also like using the restaurant analogy: &gt;When you go to a restaurant, they show you a menu of choices. You tell the waiter what you'd like, and they bring it to you. You don't run back to the kitchen to check the inventory, get out the necessary ingredients, and tell the chef how to prepare your dinner. You leave that responsibility to the restaurant. They advertise a delicious dinner, and you trust that they can handle it. \- [What's So Great About OOP?](https://kevinsmith.io/whats-so-great-about-oop) &amp;#x200B; Don't design objects that require the calling code to run into the kitchen and make the meal itself.
The variadic method argument basically says “zero or more items in an array” and to me personally only adds real value if you typehint the instances in the array: `php public function myFunction (MyObject ...objects); ` I feel you are trying to use it as Python’s named parameters. But that is technically a totally different usecase compared to what you’re asking. 
&gt;there are probably only 3 or 4 vendors I could recommend can you share them with us? 
I'm saying it evaluates right now to: [0 =&gt; $param1, 1 =&gt; $param2] And what i was trying to do was: ["key1" =&gt; $param1, "key2" =&gt; $param2]
Not sure I agree with this, Magento 2 is a POS don't get me wrong but it has way bigger problems than Eav and the block layout system, both of which are fairly mature as they're largely just inherited from Magento 1. 
Magento 1 since 1.9 has been pretty solid. Before that it was shit. Since 1.9.3 it's been fine or even quite good. Sadly that means it was shit for about 5+ years after it was released, and by all accounts Magento 2 is following this same pattern. The only thing still unclear is whether Magento 2 will *ever* be any good.
Not true really, again I hate Magento 2 so I'm not absolutely defending it, but Magento 2 does use a lot of modern PHP practices like composer, namespaces, Di, etc. Whereas WordPress still 90% looks like it was built in php 5.3.
Just to clairify, in 2.3 react isn't an addition to the other js frameworks but used independently for building a pwa. In that case you can completely forget the initial frontend themes. However, I absolutely cannot wrap my head around the fact that they did a release of a alpha stage product and market it as production worthy. It's not.
This reinstall thing is interesting. I had wondered why there are *so many* files created by the installer that then sit outside vendor and inside git. So do you run the Magento installer (cli) as part of your deployment process?
Why are those systems unable to handle more products or users? Shopify I can maybe understand because it's some rent-a-shop shared hosting thing, but why WordPress? There are major websites (not ecommerce) running WP with huge traffic loads. Is the Woocommerce plugin bad and slow and beefing up my server won't help?
Amasty and Aheadworks are actually really framework compliant modules and it's their entire business so they are available for support and bugfixes. There are just so many modules by them both that they are bound to have some bugs here and there. MeanBee and FooMan make good stuff too. There are definitely more good ones, I have been out of the Magento space for a year now so they aren't coming to mind, but the hallmark of a good module vendor is making modules within the constraints of the framework, which means you are able to override their code for custom work or bug fixes just like a core module.
Are you talking community edition or enterprise? Cause my bet is that community release is enterprise alpha - like you get free software to be the test.
My experience is you have to develop in Magento to 2 years with lot of php experience to call yourself a mid senior Magento dev. A lot of issue is just a lack of experience about Magento ecosystem.
The example sites they list themselves are a mess. Broken UI/navigation everywhere. Not a good sign, it really shows its Prestashop roots. I've had some experience with Prestashop and while it was easy to set up it was always a struggle to have everything work. It never felt modern and streamlined. And then there were the core problems, like Paypal payments being buggy. And it went on for years, don't know if it's even solved yet.
The pwastudio is a separate repo, and can be added to both commerce (former enterprise) and open source (former commerce) as a package. It's not the fact that it's not production worthy what bugs me, it's the fact they market it as such :) I'm all for diving into open source projects and don't mind to make a pr where I can. Absolute big fan of the open source community! 
I have been developing in Magento 7 years. It took me 3 years to learn most of code base and get enough experience to do anything and more years required to do those thing in the right way. In PHP, people often compare Magento with frameworks or basic MVC CMS, I think this is the main issue. Magento is pretty unique in the field of PHP. If you compare Magento with Java Enterprise softwares then you will find a lot of simliraties. I worked with some Java enterprise platforms like Liferay and those systems are even more complicated and slower. I think after some Java nightmare Magento is realy easy. I like the way how the core devs thinks. Key is extensibility. If you feel something isn’t fit to your needs, replace it.
Not all middlewares have to invoke the next one. Think of a cache-ing middleware; if there is a valid cache entry, `$next` is not called. Implementing this with a queue would require adding a mechanism to tell the queue handler to stop additional processing (think `stopPropagation` or `preventDefault` from JQuery). 
Rollback is terrible indeed. But it does sort of work. Before each deployment I make a backup of the database and then deploy a new version. The database backup file name is the commit hash of the previous deployment. If shit hits the fan I rollback which sets an extra environment variable in my pipelines so it'll check if there's a database with the same commit as the deployment. Deploying an older version will restore an older database. Far from perfect but it works.
Ohh yeah that may work indeed, thanks!
well yes and no, just running composer install (including the --no-dev) already triggers the installer for Magento to create all those files. It's the best approach really since you may make changes that may get overwritten when you upgrade Magento. Especially all the .htaccess files everywhere. You can't touch it sooner or later it'll get overwritten by the Magento installer. Note, I'm taking about the files only not the database install. What I usually do when I setup a local environment is get those couple of files I need, composer install, create env.php manually (or copy it from another instance) and fetch a copy of the production database. But since you can also dump the config with app:config:dump a local environment often doesn't even need a production database since all the settings are in GIT anyway. In that case a normal setup:install will give you a clean environment with all the settings and modules from production but without the pages, blocks, customer and product data which is often fine.
This is really useful, thank you.
Okay yeah I get where you're coming from and I agree. Thing about Magento 2 is, component based development is fine if they actually did it themselves. But they don't. I've tried to strip Magento 2 down to the basics but you literally can't since a ton of modules depend on each other that shouldn't. I mean yeah some shipping methods and payment methods can be removed and reporting/analytics as well. [But take a look at the Sales module for example](https://github.com/magento/magento2/blob/2.3.0/app/code/Magento/Sales/composer.json#L7) It requires the framework, backend, catalog, ui, all fine and sensible dependencies. But wishlist? Report? Bundled products? Checkout? Category inventory? Those are dependencies that shouldn't have been there and they appear to have no intention to change it (not even talking about the soft dependencies). Magento is extensible as in you can chunk new stuff on there but removing junk is much harder to do.
I like woocommerce a lot actually so that’s in no way a diss on it. IMO the wpdb is made for simplicity rather than scalability. Once you start adding a lot of post meta the tables get large quickly. Also the base db has about 15 tables to house all the data and woo only adds a few. If you want to scale a store that won’t really cut it in the long run. Shopify on the other hand *can* support 1mil + skus. They have enterprise plans from what I know. But they also aren’t as accessible with developer integrations so if you need to run a store, it’s fine but if you want to run a business it’s a little harder to work with. This is just from *my* experience in e-commerce. I have used Woo and Magento in depth, I have not used Shopify in depth, but I’ve heard great things with the exception of accessibility/freedom since you’re kinda stuck in their “system”.
Interesting thanks. This mirrors my experience, although this has mostly been M1 and not really scratched the surface of M2 extensions. I have always been impressed with Amasty in M1 and even when things are awry their support is top notch. I had also noticed that Aheadworks really seemed to up their game with M2 and have adopted the M2 principles, so much so they even include test coverage for their extensions. MeanBee are great for M1 although never really used FooMan. Let me know if you think of any others.
I dunno I'm pretty sure thats what he said but I'm not gonna spend 45 mins watching it again so I guess it's a cold case 
I like the look of it. I think the main problem is that 3rd party services (shipping, payments, CRMs, whatever) all target Magento for their integrations/extensions because it is so widely known but Sylius doesn't seem to be on their radar. Guess it means any integrations might need to be bespoke, but then if Sylius is nice to develop for then this may not be a big barrier.
Will this improve with the new Declarative DB Schema in Magento 2.3?
&gt; Upon further investigation, it turned out to only be a problem on macOS, which is good as that's not affecting ~~everybody~~ **any servers**
Even if that is the case, if you have proper documentation, you'll be able to point users to it when repeated questions come up again and again (assuming you have a troubleshooting section with the most common issues). While tedious and time consuming to write, it will save you time in the long run (believe me).
Yeah that's what I hear too. I haven't ever run a live Shopify shop, and while their backend looks neat and the frontends look very modern, it won't ever be a real alternative for many businesses I guess. People will need customization and control at some point, and then you need to look elsewhere. It's incredible how there is still a huge hole in ecommerce, either a closed in system like Shopify, bug ridden semi professional like Prestashop or Woo or development hell/expensive giant like Magento. Or the old, half-dead ones, like oscommerce/oxid or whatever they're called. The alternative is own code but it's also not optimal for many, if your developer decides for a career change you're screwed... One interesting system seems to be the Shopware (which is big in Germany) which looks really slick and scalable, but I don't know how internationalized it is and I believe developing costs and modifying, theming etc might get costly. Apart from that there seems to be nothing. And many merchants seem to be somewhat unsatisfied. That's a big market opportunity right there for anyone with ideas and knowledge. :) 
Not in 2.3, it'll only add to the mess since there are now 2 systems in place to upgrade stuff in your database. In time they'll phase out the old system but meanwhile you'll encounter lots of modules that'll just keep using the old system. Even Magento's own modules. Directly from the devdocs: &gt; Implementing declarative schema is not a requirement for Magento 2.3. However, upgrade scripts will be phased out in favor of declarative schema.
Oh cool I had no clue this thing existed. Thanks! 
Yes, I agree it's hard or almost impossible to remove most of the core modules. But extensibility isn't about expanding? They've been developing and expanding this for 12 years. It always evolves and as I see the priority is extensibility while they have to stay in a monolithic system. I thing this two things together are the key business values of Magento and they sacrifice everything to make it. There are thousands of developer ideas. The Catalog Inventory module was a mess. Then a group who wanted to do something about it created a new Inventory system to Magento and the core team implemented it to the 2.3. If a group of developers feel the checkout/sales dependency should be changed I bet they will make a new checkout/sales. It's open source. It can only be good as we are. I've never seen anything else complex like Magento in PHP. Is there an example that should be followed?
This blog significantly changed my mind about OOP: [https://www.yegor256.com/](https://www.yegor256.com/) &amp;#x200B; Look for the OOP articles. Yegor advises are very unconventional but they are worth reading.
If you speak about development for a client (mostly b2b) like at my old job I would agree, you are probably right. In my current case probably not, maybe only for when I get fired or get hit by a bus and my boss has to hire a new dev who then has to go through years of development, same as I had to when I started. And maybe for myself. The user either buys in our shop or if they don´t get our homepage they leave and go to somewhere else and then buy our offer on another marketplace. Users can´t do anything with good information, like the porsch driver from yesterday, coming by our offices (where we have no storage or market) asking why when he tries to buy something online, he gets this strange error that something is wrong with his email. "Your email adress has already been registered, please log in here" (I had to share this somewhere :D ) And for an e-commerce website, no user will look up a documentation nor take the time to read one. This should all be handled with well designed usability and error messages.
NASA sent people to the moon with processing power of modern calculator. Magento needs 120 cores CPU to handle "5,000 concurrent shoppers and 5 concurrent administrators". Source: [https://magento.com/resources/magento-commerce-cloud-performance-report](https://magento.com/resources/magento-commerce-cloud-performance-report) &amp;#x200B; Also frontend in Magento is burning pile of garbage.
OOP really is **not** about inheritance. In practice, having classes with inheritance chains, actually makes the code harder to maintain.
What is OOP all about then? Thinking in terms of entities?
Title's a bit unclear. Amazon SNS/SQS transport *for the [Enqueue](https://enqueue.forma-pro.com/) messaging system* is released.
My agency takes large clients migrating away from Magento to Shopify on regular. We've moved large enterprise companies away from not only Magento but other open and closed systems to Shopify successfully, some merchants who see double digit millions of hits per month and millions in sales per month are running like butter. So it is a viable option for many businesses small or large. Yes, not every business of course, as some have extreme specific modifications that just don't translate well. But, theres many tools to fit the gaps, and what doesn't exist we just write as a custom app or connector just fine. 
Compromise: you can complain a critical bug is found in Drupal.
It's not as hard but it is easy to over-engineer the code with dozen of kind of classes. In sum: In the past, the standard to develop code was to create a big class that carries everything. Commonly, it was called the **domain class** but it is just a name. ```php class Person { var $name; var $age; function show() { $this... } function delete() { } } ``` It evolved into two new classes **Model class**. (again, it is just a name), where we have the values (fields) and we don't want any function (in the possible). We could add setter and getter and constructor too. ```php class PersonModel { var $name; var $age; } ``` **Service class**. This class is the opposite of the model class, it has functions and it lacks of states (fields) ```php class PersonService { function show(Person $person) { $person....} function delete() { } } ``` Rule of thumb: * If you are creating a "visual entity" (for example a button), then it fits to be designed as a **Domain class** class. A domain class is still valid. * If you are creating a "mirror of a database' table", i.e. you have a table with name customers, then you usually create a **model class** (usually called Customer), and every action is created in its respective **service class** (CustomerLogic, CustomerRepo...). * PHP has associative arrays, so you can skip the model class and use instead ```php $bob=new Person(); // it asks for a constructor $bob-&gt;name='Bob'; $bob-&gt;age=33; $bob=['name'=&gt;'Bob','age'=&gt;33]; ``` And while it is valid, **it is not OOP** to use an array instead of a model class but again, the rules are not written in stone and sometimes OOP is not the best way. * Everything other kinds of classes are derived from those 3 classes. For example ValueObjects/DTO classes, Facade, Adapter, Controller (a Controller usually is a domain class because it is visual), ActiveRecord and so on. You don't need to create a "collage" of classes. You could create a full project with Model and Service classes. * Commonly, there is more than one service class, for example, the persistence service class, usually called DAL (Data Access Layer), DAO (Data Access Object) or REPO (Repository) but it could be called differently. * About naming, the names used are not standard. For example, Laravel calls "model", it is close to a Service (Persistence) class. :-| * About naming (II). However, some names are standard. For example, a model class with a primary key (unique value) is called **Entity**. Sometimes an Entity class has some annotations but the basic remains. 
“rock solid”and “ORM” are contradictions. I know of one ORM that isn’t terrible, SQLAlchemy. Every other ORM I’ve tried has had serious performance pitfalls that were very easy to accidentally hit compared to plain prepared statements.
I don't like Symgony annotations, but I'd be much more willing to use them if they were "proper annotations" instead of doc blocks.
Server-side is also SEO friendly. Google says that Google's bot could understand any webpage, including webpages generated with javascript, but the empirical experience says otherwise. Also, if we check the pages of the big guys (ms, apple, oracle, facebook, adobe and so one), they are generated on server side. Twitter and Facebook are the exceptions, and especially Facebook is a clusterf*ck (slow and sometimes it fails)
In Australia, lots of companies have moved away from Magento in favour of Shopify.
Let's say that your work with a designer. Your designer creates the html, css, images and such, and later, you add to the template system, add the template tags and merge with the system. It could be easily fast. Even more, what if your designer is smart enough to know how to add template-tags. 
I remember the Aheadworks Blog module for Magento allowed for you to inject SQL queries and drop the database.
Type. Null means "nothing". The var has not been initialized.
I have no idea why, but when i edit the post body it says "Post body cannot contain text"... &amp;#x200B; Here is the post body: &amp;#x200B; As the title says, is there a difference between these two: &amp;#x200B; `public function setInt(?int $value)` `public function setInt(?int $value = null)`
Python rules for two reasons: Pandas and scripting, its so-so for webpage (in comparison with PHP). In fact, Python is aimed at data science than web. And Ruby is beautiful. However, it means nothing really.
the ?int $value = null in a method call will make the parameter optional. otherwise the method will expect a parameter.
Just to hook into this with an example. ``` public function nullableParameter(?int $value); public function nullableParameterWithDefault(?int $value = null); ``` If you were to call both methods and wanted to pass null, you would need to do it like this ``` nullableParameter(null); nullableParameterWithDefault(); ``` As /u/antoniokadid said, it's optional, so you don't have to pass it and null will be used automatically.
Alright, thanks you guys.
And just a quick follow up, do you guys see any situation where the former would be better than the latter? Ist there a situation where you wanna allow "null" but not allow the parameter to be optional?
But it may! In fact this part of diagnosis is plain **Wrong** as any installation where php is compiled on different machine then extensions will have this issue. Linux or Windows. Does not matter. However, its rarer for Linux/Windows compilations to be done piecemeal, and will most probably come from one source and single cpu architecture used for compiling.
Because you're mean to use /r/phphelp
As I reread my comment I can see where I may have come across as snarky. It was more stream of consciousness. I hope I did not come across wrong, and thanks for the response!
 - `(int $var)` - Paraneter required. Requires an int. - `(int $var = null)` - Parameter bit required. If not passed, var will be null. Requires an int. - `(?int $var)` - Parameter required. Requires an int or null. - `(?int $var = null)` - Parameter not required. If not passed, `$var` will be `null`. Requires an int or null. 
Not quite. It's not the CPU arch the compiler is running on that matters, but rather the CPU arch it is targeting. By default compilers targeting `x86_64-linux` will assume a very old baseline architecture (haven't looked up which, but probably not much more than SSE2). You have to go out of your way (using `-march` or `-mattr` etc) to target a newer architecture. I think the situation is slightly different on OSX, because more different target triples (in particular also specifying the OSX version) are in use there, with different baseline arch requirements.
you're correct, but actually you *may call* the second method as follows: `nullableParameterWithDefault(null);` &amp;#x200B;
Yes, essentially the idea with Domain Driven Design (a form of oop) is that your logic can be abstracted into entities and interactions between those entities. So instead of having a `placeOrder()` function, you can have an `Order` entity which you create, and then send it to a repository to save it with a function like `saveOrder(Order $order)`. Functions perform actions, but Objects have a state, which you then change. This makes for much easier to test code, as you can contain logic within smaller entities.
a simple example: force the developer to understand that this parameter is required, even if it's null. i.e. stops developers forgetting to implement something.
No problem at all! I get what you're saying :)
Well mostly this depends on what should be the outcome of your function and for what reason you need the value. Similar to how some built-in functions of PHP have optional values that alter their behavior. Personally I use it in case I want a default behavior for a function and a modified behavior if the values are specified.
&gt;If passed, requires an int. strangely, but it is wrong. it may be null as well [https://3v4l.org/vLJq5](https://3v4l.org/vLJq5)
Correct. My response made it sound like it's only possible to omit the value, but yes, you can also pass it if you want to.
Wow I didn't know. Thanks for pointing this out. Looks like a big to me. 
Not a bug. PHP doesn't support method overloading, so that is kind of the best you get.
Here’s your first lesson in spec: explain, without code, how you could possibly derive someone’s birthday based on their name. 
https://rhiever.github.io/name-age-calculator/ ?
So this provides an estimate of the year you might have been born, but spec says we’re trying to show an exact birthdate.
Ive already done all the other stuff for the code but i cant get the year of birth calculation code working, i have done all the forms and submits, echod the "Hey..." and got it to work. But how im trying to make the code work, is for it to make the current date 2019, then ask for your age and make it take off the amount of years your are old example: current year 2019, you are 15 so 2019-15 = You were born 2004.
There was versions where it caused a crash, or at least a warning, maybe this was loosened for backward compatibility reasons.
 Not necessarily. I would start by asking; 1. Can a user guess the path to another file if they already know another file’s path? And 2. Do they have access to the second file’s path anyway?
Using absolute paths will make your database tightly coupled to your filesystem. Changing the storage directory or the storage implementation (i.e. moving to object storage) will require database changes. Not sure about security but I'm fairly sure it's a bad practice in general. Applications should be as loosely coupled as possible. Your database should not know about your storage implementation at all.
Security wise I would say it depends on the files and how you are protecting those. Usability wise, it could make your app less portable and reply on specific absolute paths, which could be a problem depending on where you host it. I’d go with relative paths and use and application level config value to set the root.
`(int $var = null)` and `(?int $var = null)` are strictly the same. The latter is preferred since PHP 7.1, the former exists for backwards-compatibility only.
&gt; Your database should not know about your storage implementation at all. Sounds a bit overly ambitious?
All files are in a private folder.
A practical example?
actually, the specs want a year, not a birthdate. perhaps we could get away with it returning a random year, asking the user to confirm and call it 'AI-training'.
Break it down into small, manageable chunks. You say you are already able to do the output so I'm assuming you're just echoing the inputs via the POST variable - e.g. $_POST['name'] &amp; $_POST['dateOfBirth'] You have half of what you need to calculate it. Now you need the other half, the current year. You're going to need: - You need to decide whether you will allow users to enter dates in many formats, and deal with that in your code, or force them to always enter it in the same format - Then you will need to get a PHP function to get either the current year e.g. `date("Y")` or to get a timestamp from the server - Once you have chosen, you will need to google something like "PHP get difference between 2 dates" which will probably suggest you either do something with `strtotime` or convert the inputted date to a `DateTime` object, which would allow you to just use something like this: `echo $currentDate-&gt;diff($dateOfBirth)-&gt;years`
There's still a lot of room for you to make your database know less about the file locations.
Why not store the files in the database itself? If they aren’t too big, that’s what I recommend. I store my images and PDFs in the database 
True.
It is possible for someone born in 2003 to be 15 years old currently in 2019. So they would write "15" and you code would tell them they were born in 2004, while in fact, statistically speaking, most 15 year olds currently alive (And even those who already died) were born in 2003. What is the logic behind this?
That would probably be the least ambitious part of my comment. Making the whole application loosely coupled is a far greater ambition when the Laravel controller documentation just casually reaches for the Model without any respect for SOLID. There should at least be a service sitting on a service interface that depends on a repository interface that has an Eloquent-based implementation injected into the controller.
"Only the sith deal in absolutes" (An absolute statement dealt by a Jedi...)
You can give phpstorm a try, you can test it for a month for free. 
I would worry less about security and more about coupling. A typical solution is storing hash to represent an asset and having business logic that can locate the file / image using the hash. That way the storage pattern is decoupled from the database. For example, in the first version all files are in a single folder (filename is just &lt;hash&gt;.&lt;extension&gt;). However, at some point this doesn't scale anymore, so you use the first 2 chars of the hash as a sub-folder (or sharding key for multiple file storage servers), and so on... When changing the underlying storage, only the business logic needs changing.
Main objective of middleware frameworks is to enable *anything, before, after, before and after or even instead of the request.* One very good solution to enable that is to make a wrapper for rest of middleware and request/response handling, and pass that as an argument to the current handler. Then handler can put their own code before or after the call to the wrapper, any data created before wrapper call are held till the end of handler, and if handler so desire wrapper can be skipped altogether, and instead new response can be returned (or exception thrown). &amp;#x200B; That is very common pattern for control flow. You pass `one` function representing to `another`, thus enabling that control flow inside `another`. Its called [Continuation Passing Style](https://en.wikipedia.org/wiki/Continuation-passing_style) &amp;#x200B;
Nice! The price is the only real reason I don’t use it. Didn’t realize there’s a free trial
This
I prefer Netbeans indexing over Phpstorm. My monolith repos were making phpstorm unresponsive quite often.
Harder to list and get a size overview?
Even though they are the same, I'm using `SomeInterface $var = null` to indicate "I require SomeInterface implementation but if you provide null, I will initialize it with some default implementation" as opposed to `?SomeInterface $var = null` where this parameter is optional and null value has an actual meaning in this method. 
What this said \^\^\^ Having absolute paths, at the very least, make migrating to a new host a major pain in the ass. I could imagine security risks, just by gleaning information, but I'd be more worried about the portability of the application in the long term. Any decisions now, that might take a few hours, will save you DAYS later in migration costs, if you have to move / upgrade your application to a new way of handling files.
Well, we use Joomla, so. Welcome to the last century.
And harder to maintain, imagine moving around that SQL dump. Also database storage only has a performance advantage for file sizes under 256KB, if your files are above 1MB on average the filesystem is a clear winner. (According to a study done by Microsoft on using blobs in SQL server vs filesystem)
Agreeing a lot with szimre. My solution is simply to store relative paths, eg. "january/a/a1155.csv". Remove the base path, which should be a config var. You then simply add it back on when reading the path.
Good points!
At larger scales you're going to have issues with disk space, as you can only reduce the size of a table on disk when you do an OPTIMIZE which requires you to have double the table space available on a machine. We had a small application issue on a DB server which grew a table to 150GB in a week, and reducing that took two months of shuffling files around just because we didn't have another 30GB spare on the machine to do the OPTIMIZE. File systems are designed to store files, and are much better at it than a database could ever hope to be. Or, store them in S3 or some other cloud storage to completely remove storage constraints.
The price also gives you support, good, tested features. It's worth it, especially if you learn how to use it.
I somewhat agree, but in the same time, you are completely missing the point of the question. This answer is akin to that guy in the StackOverflow comic saying "Why would you want to do X? Nobody does X! You should o Y instead you pleb!" There are many different reasons I can imagine absolute URLs stored in the DB. A large subset of those reasons is backing up local information critical to correct operation, such as a local "Plugins" system saving the absolute URLs to plugin installer resources in the DB as a backup, or some dynamic content site saving backing up URLs to said dynamic content (though in this case you should be saving information that could be parsed into a URL).
Yup. That's the way to do it. Put all config vars in a separate table. Then either read them as required, via a custom get\_config\_var function, or read them all into a PHP array at the start of your code. 
This looks just like C
PHPStorm (as suggested by someone else an hour ago) only takes about 10 minutes to index Magento 2, and doesn't need to re-index every time it's opened. I do suggest excluding the /pub folder from indexing, as redeploying the static content will cause a 5 minute re-index, and nothing in that folder really affects code completion.
I hope you are not using a HDD drive.
IntelliJ 2017.14 works for PHP in ubuntu. 21k files. It gets kind of slow for Javascript 80k files (maybe because of the node modules?) It takes a few sec to a few min the first time it starts up to index everything, but then works fine. &amp;#x200B; I do have to clear the heap size from time to time and use an SSD, and it's missing a few things (like: go to previous pointer location, or a quick way to open that VSCode quick search/actions thing) and it's not free :(
Would not say I'm missing the point completely, sure my answer is not security related but I pointed out another issue in the exact same context and gave a reason as of why it is a bad idea.
You could pay $8/month for it as well. Definitely worth it.
I think Slim is a good framework and I use it for small projects. But when I have to make a big project, my choice is Laravel.
I agree.
Unacceptable? To who? Either way, it's not "unacceptable". &amp;#x200B; Now, is it an asshat who thinks something that is on the web should be 100% maintained, well-tested, no bugs, and free? YES. &amp;#x200B; &amp;#x200B;
Woah, the level of insolence is off the charts :) &amp;#x200B; Can you ban/block people on Github, I wonder?
It is either bannable stupidity or troll. Either way internet access should be revoked :D
I just know that if you come out of the gates swinging you rarely get what you want.
&gt; There are 3 types of ignorance. The irony...
\&gt; However, one thing that always (don't know a good word, because this isn't it) "irked" me about people saying "fix it and send a PR" is really one of If I get way you say right, I also find this "fix it or send a PR" a very wrong response, sometime, the product you use may be out of your league, or you know that the maintainer will never accept any PR for any reason. Nevertheless, the original comment is insulting, and IT IS unacceptable. Grown up people must behave as such.
If you have Open Source projects on Github, you actually can get it for free too.
I reported the user to the Github team. This is definitely not appropriate behaviour. Totally rude, absolute no-go.
Well, I get that a \*ton\* of people use third-party projects because... why reinvent the wheel, even though they are perfectly capable of writing said product. I think there's probably more people that are exactly as you describe, out of their league and you know the maintainer wouldn't accept the PR simply because you wouldn't make the fix up to snuff even though the fix fixed exactly what problem you were encounting, if that makes sense? &amp;#x200B; As to me saying it's not "unacceptable", I meant it more as, asshats are all over the world and exactly as you said, grown up people don't behave that way. So in other words, close the issue and move on. If you want to classify that as "unacceptable" behavior, then sure it's unacceptable. I suppose I just have a higher level of tolerance to idiots. For the record, it would also have been just as "unacceptable" if the person said nothing negative and simply kept repeating "can u UNITTEST" over and over, as-in expecting a free project to do anything for you is... acceptable. :P
Hahaha perfect! Yep I misread and thought we were looking for a full date. 
Ah! I was not aware that was an option. I just shared to see if I was the only person to think that. Glad to see I'm not alone. I didn't answer to the guy. Some have but anyway...
It's possible and they're usually quite fast with reacting.
I agree, this does seem possible.
This is pedantic and frankly, not very smart. You know what he meant and it's obvious that commenter is a jerk. The responses were way more civil than they should've been. Ban and ignore. 
Sublime with phpintel. Cheaper than phpstorm, and it's actually a native application rather than an electron abomination. Switching to sublime from atom was a solid decision.
Yes you can. If you do so they can't even fork your projects.
&gt; Procedural programming is for amateurs CITATION NEEDED
That's very cool! Luckily, it haven't happened to me yet. But that's a nice tool in the box. :)
He was too smart to read the license: &gt;BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NOW ARRANTY FOR THE LIBRARY... &amp;#x200B;
Tolerance is another subject, I think (but I guess I'm probably wrong) about myself that I'm quite tolerant, and I would have taken some time to nicely answer to the child who wrote the insulting comment, but it's still a huge loss of time. People who insult others just make every person they encounter lose time. If we added up all time lost because of childish comments, it would cost probably billions of billions of \[YOUR CURRENCY\] all over the globe. I'm not speaking literally about money, all this lost time and energy could save the world, if we were able to give this time back to scientists for de-polluting the oceans or researching new way to save real energy so we wouldn't break the planet. Insulting and childish people don't see that. Every lost of time is a lost of time for the whole word. Every minute of an open source developer is a minute where he or her makes the world better, just like the scientist, just not in the same field. We can't always tolerate stupidity, every person has brain, and sometime they just don't use it because they are lazy. We must not encourage them to remain lazy, we should encourage them to use their brain instead. Stupid people need to get some slaps, and need to learn how to breath.
I feel like you whining about one stupid trol and devoting a reddit post to it.... Is even more unacceptable. Just ignore it man
Reminds me of an issue I got a few years ago: https://i.imgur.com/bwgIyVR.png
Yes, unacceptable. This guy sounds like a dick.
PS JUST DO PR REQUEST OKAY??
If he was really a troll then I agree. But the guy seemed to be legit. If not then yeah I wasted our time. Mea culpa. I'm also very much for publicly shaming that kind of behavior. It really makes community project toxic. Which is what prevented me for a long time to share anything online. 
Databases are quite good at storing data. In my experience, they do just fine. I’ve only seen tables up to 40gb before, but they don’t ever have performance issues. I also have mine running on a disk with plenty of disk space, so maybe that helps
Not sure what happened to the formatting on my question, so here it is again: &amp;#x200B; Man, testing in codeigniter has been a real pain in my a\*\*. &amp;#x200B; I am now trying to figure out why my tests are so slow. I know it partially has to do with my pc (its very old) but it shouldnt take 30 seconds just to seee the starting message "PHPUnit 6.5.14 by Sebastian Bergmann and contributors.". &amp;#x200B; running 4 tests/assertions takes about 30 seconds and 130MB. &amp;#x200B; Any tips on what could be wrong? My laravel application runs much faster on the same pc.
&gt; even though they are perfectly capable of writing said product. If I had the time to fix every single little issue I come across in third party libs, I probably would have just used that time to write it myself. I try to contribute and give back when I can, but I only have so much time. "Fix and send a PR" is a shitty response, IMO.
It’s much easier to migrate data when it’s in one place. The SQL dump is big, but also it’s all there, and can almost plug and play into the next DB. Much easier than storing file locations and having to move locations for some reason. Then you have to update all of the records and hope you don’t mess anything up 
&gt; force to work it out myself Isn't that what programming is about?
Do you have xdebug installed? If so, try temporarily removing it from your php.ini and see if things speed up.
100%, waste of time, hence close issue and move on. Lazy is another point as well. &amp;#x200B; I think the only point (again, I took "unacceptable" as in some sort of high-level should privileges be removed type unacceptable) we disagree on is encouraging people to use their brain. I lose interested extremely quick with people who can't use their brain. Akin to people asking the same questions over and over, without so much as putting some effort into using a search engine. /shrug
I can't help but find this quote to be hilarious: &gt;I'm not mad, I'm angry. because the document LIE TO ME. You're right, though, this guy is way out of line.
&gt; I've had death threats before when I've threatened to push minimum PHP versions I wonder how often the maintainers of OS libraries must deal with such threats. It's crazy. 
About the coupling, I'd say absulte paths are *less* coupled. With relative paths, you depend on the application or implicit knowledge to know where the paths start from. Running out of space? Just add more disks. Absolute paths make sure you're always pointing to the right one without mapping layers. Migrating the files to another server? Absolute paths are easier to search/replace without even touching the application. 
If you're offended by this you're a problem as well. 
I would cut off their internet access for at least 2 months and sent them to the village to recover and "blow off their steam".
Hahaha nice reply.
Totes dick of a guy. It's fucking open source, jeeze
&gt; but I'd be more worried about the portability of the application in the long term. Which, to be fair, in many cases is over-engineering. Fixing file-paths to the path of a new host also is NOT a pain in the ass - it's a fairly simple update query, nothing mayor about it
Oh he's just [THE ONE](http://rachelbythebay.com/w/2018/04/28/meta/) superior to us programming plebs, and doesn't write bugs.
I think cmd [ (or cntrl [) is what you’re looking for. Also depending on the project I will set node_modules as excluded to stop the indexing from taking too long.
&gt; Vim training videos Does this mean..... You know how to exit Vim?
Yes it is. It's over-engineering. This sort of thing becomes relevant for the top100 companies that have 50 petabyte of data stored and they regularly switch to the newest hot shit in storage technology. For the average developer and/or company, you'll almost never switch your storage implementation. And even if you would do it once every couple of years, running an update query for the file-path is not a difficult thing to achieve... 
https://gamedev.stackexchange.com/questions/79049/generating-tile-map
I'VE BEEN STUCK ON THIS SH\*T FOR OVER A WEEK NOW. IF YOU DON'T TELL ME HOW TO EXIT THIS EDITOR I WILL MURDER YOU.
I would separate the functionality. You want to create your land mass first and then have a function to add lakes and a function to add rivers, as all 3 are very different processes. Generate your initial range of coordinates to act as your land mass with no water. Your lakes function would want to look at all, or a portion of the coordinates and select a set of connected coords to fill with water. Of course this would require effectively drawing a circle or similar shape and 'filling it in'. Then your rivers function would want to pick a starting point and snake it's way to a specified destination. There are a few ways to do this. You could pick a starting point and then advance the coordinate in a direction each step. Your logic would need to determine how to progress this to ensure the river expands somewhat outwards. Really what you're asking is a game dev question, as you are wanting to procedurally generate 2d terrain, just without the visual aspect. I've found some links below that should help you; they are for Javascript since usually there is desire for a graphical output, but the principles will be exactly the same and easily applicable to php too. https://gamedev.stackexchange.com/questions/45403/algorithms-for-rainfall-river-creation-in-procedurally-generated-terrain https://www.google.com/amp/s/azgaar.wordpress.com/2018/02/12/polygonal-rivers/amp/ https://www.google.com/amp/s/gillesleblanc.wordpress.com/2013/01/09/creating-a-random-2d-game-world-map-part-2-adding-rivers-and-lakes/amp/ Hopefully this helps you find further reading too now you know what to look for. What you're asking is a very broad question. There are many ways to accomplish what you want, usually not using php lol. 
Not cool. Software development is tough. It's easy to overlook things even with unit tests. Every dev knows this. Bugs happen. It's great to see developers being so passionate about code quality, not so great to see developers act like a complete asshole by talking down to other devs who are spending their free time helping the community. 
The poster was ranting about the lack of tests, but a two minute check would have showed them it has a test suite, and it was last tested three days ago at time of writing.
Scary to think that Trump has managed to obtain a github account.
...but when you come out of the gates swinging, you are probably just looking g for a fight...
Reaching the trump point is the new Godwin point 😅.
I go for 14yo script kiddie. Would love it if some recruiter finds this comment in a few years while checking out his profile. 
Well, I like to think (especially in this case) it was more of a facetious reply. In general I mean, and this I see a lot "I'm accepting PR's", which is really a nicer way to say it, but it means the same. &amp;#x200B; Am I grateful for people who are way smarter than me making their libraries? 100% Am I grateful for people who are way smarter than me making their libraries free? 100% &amp;#x200B; Where I think I will get raked over the coals of a lot of developers for, is my thinking there's a sort of expectation for the maintenance of said packages as well though. Granted, whenever I open issues I always leave as much detail as possible on how the result isn't expected, how I received the result, etc so the person who is smarter than me can look at it and (typically) fix the unexpected behaviour. I would never harp on someone for letting the issue go open though, that is just asshatery. :P
Totally out of place. Probably some one frustrated for whatevet that has decided he can pay it with anyone... A real shame for the community. 
Welcome to the often misunderstood problems of mental health and online identities. Asshats like these exist anywhere whether it’s a business or community working together for betterment.
I've been practicing some tests while creating new code. I've been practicing some tests while creating new code. It encouraged me to write methods with more complex behaviour and introduce bigger changes while refactoring 😌 I think it's a great tool that can improve your code!! Now, It's also true that I got carried away and started introducing overly-complex implementations that I think I will rarely use but that was because I was having so much fun 😅
How do you have the site setup? Xamp, lamp, mamp, Vagrant, docker?
The videos cover how to do stuff once you're _already in_ Vim, you may as well be productive whilst you're there (and can't get out!).
Sure you save yourself some steps when it comes to migration, but: - Scalability is impacted with that much data - You can't index those columns which also impacts scalability and can become a performance bottleneck - You tightly couple your database to your application, so if in the future you decide to use a different storage engine or modify the implementation you will spend more time refactoring That's just off the top of my head. I don't know if there are more reasons, but these alone feel pretty big to me.
I reported him for abuse &amp;#x200B;
Whether open source or not, even if he would be a paying customer to a product, the method of correspondence is unacceptable.
Well, I guess Chinese developers have different opinions about many things, open source software included.
Buy a new computer
If you are showing users how to get into Vim and not how to get out, the death threats may not be completely unreasonable. /s
404 now. What was said? 
Seems to have been taken down. Anyone grab a screenshot?
Anyone got a screenshot? It done 404'd and as an avid consumer of and occasional contributors to open source projects, I want to see!
I got a cute Star Wars themed 404 page.
Censoring comments on github issues? Yeah, completely unacceptable. What is said when it comes to software should remain, regardless of the tone. 
Nice brigading. You suck.
I think it's the op that deleted the post 🤷‍♂️
I shutter whenever I hear that word.
No. You use a plugin to watch the video inside of vim
I appreciate the edit. However, are you joking? If you see some one hitting their wife in the street do you leave it? What about someone yelling abuse at there dog? I think you need to go live in the real world a little bit buddy. You shouldn’t use “it’s the internet” to excuse peoples vile behaviour. 
Now Warranty?
Exclude /pub and /generated directories from indexing. Magento 2 generates files in those directories on pretty much every request cycle which will trigger a reindex.
Well, GitHub team didn't think so, so 404 Not Found at this point.
... If you get involved with someone yelling at their dog you deserve what happens next.
Except I didn’t get involved. I used the appropriate service to report the inappropriate behaviour.
Yes, I did send a report. 404 happened fast.
We need a github where things remain as they happened rather than being changed after the fact.
&gt;Running out of space? Just add more disks. Absolute paths make sure you're always pointing to the right one without mapping layers. How would that be different for relative paths? Even if your storage is so inflexible, you can always mount more disk space somewhere in or near your data directory. &gt;Migrating the files to another server? Absolute paths are easier to search/replace without even touching the application. if you have the base-path in a settings file, this will be as easy as changing that setting to point to the new location.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
LAMP on Ubuntu 18.04
Ill give that a try, thanks
ESC. Type in ":wq" or ":q!" and press enter. Later will worce quit without saving while first w - save and q - exit. 
at least paste screenshot, this posy is a cancer
You're thinking of Emacs
Are you running MySQL in a docker container as well as a PHP application? 
I like your thinking. ;) For me, one argument is that it lessens the burden of the database manager - what you see is what you get, all information you want is available in one column.
there are already some great links here to give you an idea of how to procedurally generate terrain so I won't bother going over that again... I would just add one thing: don't have some Boolean called "is_water" or some such - have an integer called "z_position" and whatever method you use to generate maps should include rules about how much any particular z value can vary from its neighbours... then (hopefully obviously) your tiles can/not be water, depending on their z value (maybe compared to some "sea level" constant?)
And PC specs? I can't see any particular reason it'd be soo slow unless your machine was a POS :/
Yes, different containers.
Better yet, store just the filename, and derive the path from the database. Went through two rounds now of reorganization so now all the files are eg `{$basedir}/1/3/1328247.pdf` and the database tells me that's "Mom's cookie recipies.doc.docx.pdf` and will probably add a third level in the next couple of years.
There are so many ways you could do this. You could create a dump of the production database and launch a container with a bootstrap importing the prod SQL file hourly, half hourly etc You could create a read replica container for quicker synchronization etc Are you running docker locally with attached storage? 
doctrine migrations on deploy. in our environment we fail the health check when there are missing migrations. we run migrations manually
I like that. Is there any resource I can look it up? Not using attached storage.
Unfortunately I don't have any resources, it just sprung to mind. The first solution could work on a schedule, the dockerfile could build importing the prod dump and tag as the latest container and push automatically some how. I'm quite new to docker but that's how I'd Invision it working at least. If you take out the container layer the concept would be the same for a physical mysql Dev and prod environment. Dump the file and import it on a schedule between the two nodes. 
Which direction ? 
Got it. My dev environment is on my machine and the production environment is on a server (locally) so I think the best way should have a php script to dump the db changes on a file and a container to send those changes to production?
Dev(local machine)-&gt;Prod(LAN server)
Migrations are generally the ideal solution, though not appropriate in 100% of cases. How do you normally apply your changes to begin with?
Is the production environment in docker? I'd create a SQL script on the node with a cron job to run the script to dump the database somewhere. As long as you have the production dump on physical storage you're good to go. 
Yes, everything on docker (dev and prod). Perfect, that what I was thinking about. Thanks for your inputs 
I migrate the differences using Workbench migration tool
That's ok. I'm sure there are better ways to go about it, there always are. But I think that should work. Good luck 
I mean the first time you make changes to dev - do... run raw SQL statements on the server though a prompt? Write statements out in a file and run that/version control it? etc.
&gt; Remove the base path, which should be a config var. You then simply add it back on when reading the path. `define("BASE_DIR", dirname(__FILE__))` I don't know how applicable this is here, but this has been one my typical methodologies.
I can't see the comment to which you're replying, but, over 50% of the NLOC in 2.3 were contributed, and a substantial portion of DevDocs comes from the community (in addition to forums and StackExchange posts). Each year Sherrie tracks thousands of contributions of all types (blog posts, podcasts, presentations, dozens of events, etc.). I'm really curious to understand your comment better.
I really like Sylius for the ability to compose the features that you need. Paweł and team have accomplished quite a lot.
I worked on this post for a while and would also like to hear your feedback what's good, what's bad, what needs more explanation, what I missed. I wanted to create a concise resource that gives people an introduction of what they should be researching when creating new web applications.
The remaining dependency graph is... not ideal, to say the least (especially since I was touring around in 2015 talking about how M2 was going to fix this). &amp;#x200B; \[Anton's work to truly isolate all services\]([https://github.com/magento/architecture/tree/master/design-documents/service-isolation](https://github.com/magento/architecture/tree/master/design-documents/service-isolation)) will resolve this issue, but that is definitely down the road from this year.
Yes but I don’t know if this is the best way. I mean with docker I think there must be a better/automated way to do this
The answer to that question is largely dependent on why you said "f this". There is good discussion in this thread though.
For what it's worth, I think most of engineering is reading this thread now, so thanks for starting it. &amp;#x200B; I'm happy to facilitate a conversation with our team, but we've gleaned a lot from your post and responses so far.
Might be worth to check Phinx (https://phinx.org/). 1. Build the migration files 2. Tests locally from scratch 3. If possible, try to run the migration files against a production replica to make sure it works. 4. Run in production.
My day job includes converting data from competitors' systems, and databases like these are the bane of my existence. 1TB+ database and the customer wants a 15 minute maintenance window to dump that data, convert it to a form we can use and import it into our database so they don't lose any transactions.
If you are talking about database structure changes I strongly suggest looking into a migration tool such as liquibase. They allow you to apply/rollback the same changes in multiple environment with convenient syntax and execution. If you want to sync prod data on a dev environment then I suggest either using mysqldump or just copying backups of docker volumes to move them but I'm not too familiar with that last part, I imagine it's feasable
Thanks will look into that
Will check that. Thanks for your help
I recently had to work on a CRM which was all functional. Took much longer time to figure out what's what than when I inherit an OOP project. When I go in and I can see controllers, service layer, DAL layer, router - I know I'm home. Debugging is easier as everything is nicely isolated as well. I don't know if it's my lichen but every time I get functional code, it's a total mess.
Well, even without docker that's a pretty poor way to manage SQL. Ideally you would manage each SQL change in a migration file with an "up" and "down" function so changes can be repeated or rolled back as necessary. Doing it this way both makes it easy to replicate your changes to additional environments like production and staging servers and has the benefit of you being able to add your database structure changes to version control like git. If you haven't used them before, [here is an introduction that explains how they are used in the Laravel framework](https://laravel.com/docs/5.7/migrations). The concept of migrations is used in many places and doesn't need to have anything to do with Laravel - I think they just explain the topic best.
Endpoint that checks credentials, probably a token, via http only secure cookie then returns proper headers and document content that lives outside of the webroot and its children directories. 
If you do not mind paying for a solution, [dbForge](https://www.devart.com/dbforge/mysql/schemacompare/) has a handy DB comparer functionality that can generate script for updating the DB. 
It is a pos. https://www.cnet.com/products/dell-latitude-d830/ My codeigniter app tests run a lot slower than when i test a different laravel app on this same machine, so its not entirely the machines fault
That's an awesome post! Since it's PHP related I think you wouldn't mention it anyway, but a common and bad practice I think you missed is to inform potential attacker/bot whether a username exists (in failed login attempt response) rather than "invalid username or password". Of course it only matters if there are no other ways to brute-force usernames, i.e. by unlimited ajax "username already taken" feature in signup form.
&gt;Magento is pretty unique in the field of PHP. If you compare Magento with Java Enterprise softwares then you will find a lot of simliraties. This is quite correct, so much so that when I was running dev at a Magento agency I actively sought out devs with Java experience. &amp;#x200B;
Well ok, but I meant the base path for zip storage, not scripts. So it needs a config for easy relocation.
Yes you're absolutely right that's very bad practice. I thought about doing a second post about common bad practices to avoid since I don't want the posts to get too large, but I'll still have to do more research on that if I'm still up to date with my knowledge. Thanks for the suggestion!
Great read! Good info! Thank you!
Or if you use their EAP (beta) versions they are free forever. I use it with a ~2MLOC project, NVMe drive (MacBook Pro), 4 cores, 16 GB of RAM and indexing takes no more than 4-5 minutes max
So does this mean you do manual deployments too? Or does your automated deployment break your application until the migrations run?
Do you cover Unicode security issues etc ?
Just to update ya'll, i went with purchasing a php class crud generator, that way with a bit of coding i can inject CRUD interfaces into my application only in place where i need them. thanks all for the comments
yes automated deployments fail when a migration is missing. the switch to the new version does not happen if health checks fail
The free and paid modules for pp all suck hard. We've had to develop our own integration to make it worthwhile. Luckily it's not too hard, just a lot of doc reading on PayPals site
I believe in free speech, but you can't blame folks for removing a lynching threat from a privately-owned service. It wasn't z-lf who removed the thread anyway, it was someone else.
Are you talking about character ambiguity? I mostly covered attacks and security concerns against the server not the user.
Shift + zz. Writes and quits so much easier than typing this shit out :qw! 
&gt; ~~Crazy~~ Emacs people gonna be crazy. FTFY
We use this all the time and it works well but it is best if you are using the Doctrine ORM but I'm not a fan of ORMs in general. If you are using the ORM it will build the structure migration for you.
\+1
Tens of thousands.
There's at least 27,202: r/laravel If that's what you meant :)
Probably. 
Thanks! Wondering what to code a website in, Laravel, Drupal, WordPress... Must have user log in and access mysql database.
Deleted
we usually write migrations manually. migrations package only depends on dbal. doesn't need orm installed
we started using that at my workplace on an existing application. They didn't have a migrations library before.
What's that ctrl+\[ called, i'm on Ubuntu and it does nothing but put \[ in the code.
Like the time I was making an image sharing platform and I forgot to check for any type other than .tiff
Laravel, Yii and Cake, along with Symphony, are the four major PHP frameworks. Drupal is difficult to learn. The four frameworks, I am using Yii, all requires some work on your part, but have everything you need. Wordpress is the easiest option, since it is ready made and customizable. Take your pick :)
It's best practice not to store paths at all. Instead, generate a hash for the record and store that with the record and use it for the filename. You can either store the extension with or separate from the hash (there are benefits and use cases for both). Storing just a hash with no file path has many nice properties: * It allows you to use 3rd party storage services, local filesystems, NFS, symlinks, or any other underlying architecture, with whatever organization you need with the least amount of effort (usually just a config change) * It makes it very impractical for users of your application to guess other files * It eliminates the possibility of iteration/enumeration of your files * It removes the risk of information leaks (e.g. how many files you have) * It removes the risk of local file inclusion attacks * It makes it easy to deterministically generate and retrieve paths from the filename itself * Going along with the previous point, when coupled with generated subdirectories, it provides a self-balancing filesystem that doesn't need manual or semi-automated maintenance * And to tag onto that a bit more, it makes further subdividing subdirectories and relocating files the easiest thing in the world And I'm sure there are others I'm forgetting.
Why?
There are probably 10x more WordPress devs out there. So definitely go for it
An important addition to the SQL injection part. In the real world we are constructing SQL dynamically, adding different query parts on the fly. It means there are **two rules, not one** to follow: 1. Use prepared statement when applicable 2. Use **a whitelist-based filtering** for everything else, including SQL operators and identifiers. I wrote an article [that demonstrates why any other measure won't help](https://phpdelusions.net/pdo/sql_injection_example)
code is broken, therefore, technically safe. $user === undefined; --did you mean $username
Any courses, books you can recommend on writing 'good' unit tests? The theory is easy, it's knowing what to test when.
That's awesome! I posted this in /r/PHP since it'd be more likely to attract devs that still work and have worked with Magento as a lot of people who stopped using it won't look on /r/Magento anymore. This thread is overly negative with lots of it for valid reasons but I'd still like to thank you for all your work and you team as well. Magento 1 has been a game changer. Hopefully Magento 2 will get there as well. Since you mentioned that eneineering is reading this I'll mention a couple of things that tick me off the most from a developers perspective that doesn't have a clear picture of the whole system yet. * **EAV**, it's awesome for products, really easy to use and manage. Other entities, not so much as there's not a single way to manage it. No UI is fine as end users shouldn't be messing with it. But the CustomerSetup for example, add attribute handles the customer_grid columns as well. SalesSetup doesn't so you have to manually create a column in the sales_order_grid. It's that type of inconsistency that leads to errors and bugs as it's easy to do it the wrong way. * **Duplicate methods**, check out the Category model for example. [getAllChildren and getChildren](https://github.com/magento/magento2/blob/2.3-develop/app/code/Magento/Catalog/Model/Category.php#L778) What's the difference? I'd assume get AllChildren is recursive and getChildren isn't but there's a recursive flag for getChildren so there are two ways to get the same thing. [Let's dig a bit deeper and see what these methods do.](https://github.com/magento/magento2/blob/2.3-develop/app/code/Magento/Catalog/Model/ResourceModel/Category.php#L814) Oh.. they're basically the same thing only the getAllChildren includes the parents category as well. Naming is completely off in this case. But let's continue as there's more, Line 782, getChildrenCategories to get an actual collection instead of just the id's. Line 696 same thing different method, 576 a count with a completely different query than the others. 514 another count that's completely different. You catch my drift, of these methods I should only be using the getChildren as that's the one defined in the \Magento\Category\Api\Data\Category and actually stamped with the @api annotation. But it returns a CSV string of just the id's. So if I wanted to use the official way I'd have to explode it, load all the categories myself and then I can use it. * You already responded to my comment about the **dependencies** so I won't go into detail about that one again. I just want to be able to strip everything down to the bare basics and include what I want to use. Not just disable the modules but actually stuff I don't use. * Overall suggestion, Magento is very opinionated and has a big code base and it gets very complex because you can do the same thing in multiple different ways. There's power behind this but not when it causes bugs. In my experience one of the things that hurt the most is saving entities. Lots of before/after hooks/plugins/ect. but all in different places. Some are hooked into the Models save method which simply calls the ResourceModel which may have different plugins. This is the deprecated method so when you save that model with the Repository it may again have different plugins and stuff while interally the deprecated save is used a lot. Then you have a database transaction which most likely won't trigger any of the above or only the ResourceModel. If it were up to me i'd just remove all those deprecated methods and force a single way to create before/after/around plugins when you store an entity. One that works for repositories AND transactions. Removing it may be to extreme so at the very least, log a warning each time such deprecated method is called. The Magento modules itself should of course completely avoid calling it so if a third party plugin triggers you have a clear warning that something may go wrong.
Nice job dude, awesome read - thank you
On similar note - [How to Kill Parents](https://www.tomasvotruba.cz/blog/2019/01/24/how-to-kill-parents/)
Navigate | Back. Might be Ctrl+alt+left arrow, you should be able to set it to whatever you want in your preferences.
One nitpick about passwords: &gt; password_verify is also safe against timing attacks While this is techically true, it has no meaning in real-life, as there is no harm timing-leak could do because the salts are secret anyway. About rate-limiting, I'd recommend per-source rate-limit and global rate-limit approach. A bit more about it is desribed here: http://timoh6.github.io/2015/05/07/Rate-limiting-web-application-login-attempts.html
Just to let you know, whatever tutorial you found just teaching you most bizarre things. It is better to know no programming at all than learn it this way. That said, this post will be delete from this sub, and you are supposed to ask in /r/phphelp 
not gonna do your homework for you, kid.
Its a good place to start if ur beginning to learn PHP, just dont expect always up-to-date or very comprehensive learning there
Nice article ! I may share it with my students as a security reminder, thanks OP :-)
Quite contrary
No
This is the usual w3fools-style guide: too wordy, muddled and misleading. A whole fucking chapter on echo and print and no mention of escaping from HTML and herecoc. String section has no mention of mb_functions() and so on. This is the usual mindless rewriting of Getting Started section of PHP manual. The key word is mindless. It is very similar to the usual blogspam we have here in this sub: *the writer haver minds the reader*. They just need a copywrited text to attract visitors from Google. In a nutshell, where it doesn't duplicate the PHP manual, it's just a facepalm generator, like: `PHP has three different variable scopes:local global and static`. wait. OMFG, I just scrolled to [***this:***](https://www.w3schools.com/php7/php7_form_validation.asp) function test_input($data) { $data = trim($data); $data = stripslashes($data); $data = htmlspecialchars($data); return $data; } this is the real face of w3fools: a "PHP7" tutorial is just a facelifted PHP4-5 tutorial, with all its shit left intact. 
Dear /r/Nicolaperry I suppose yo are just a silly wannabe karma-whore and meant no harm. So just be advised: do not post links to specialized subs. Just because you have no expertize to tell a bullshit from a quality content. Now be a good boy and remove this link to a blogspam article which is not just useless but fucking dangerous. 
You want to link the code changes with the database changes. When you pull the changes via git you get the db migration files, they are executed and everything is fine. We have development, staging and production server and the way we pulled this off is a follows. There is a mariaDB migration folder in the project and we wrote two Symfony console commands (e.g.: db_migrate). When something in the database is change. The migration script is run, and a file with a timestamp and a title will be added in that folder. If a developer pulls or merges the code he has to manually the command for the import, which looks in a database of already imported sql files with creates, drops and alters. When there is an unknown file in that folder it will execute the sql. The beauty is that staging, development and production could have different migrations without crashing or bother what tables are missing. On production everything is fully automated. On every commit you send the code to CI. For instance in Gitlab you run in a CI queue phpunit test, codeception, CS fixer, linter, the deploy to the different servers and on top the database migration command every time when nothing failed. On production you have to watch out when you have thousands of active users. I would not recommend to drop a table that was on use with old code or just rename the table rows. Its recommended to create a new table with new names and for instance changed date format and let new code work with that until the old table is no longer in use and drop the table a day after.
Thank you, that's a good point. I usually don't directly deal with PDO and use an ORM (Doctrine) instead so I didn't even think about that. I added a link to your article in the SQLi section!
Yes I did mean to write $username haha! Thank you I fixed it.
Great article! However I don't see anything about session highjacking? When using a popular framework it's nothing to worry about but if you're coding from scratch it's worth taking notice.
Thank you. I spent a lot of time trying to find a simple yet complete statement that could fully embrace the SQL injection problem in PHP. In the past decades it was "escape user input" which proved to be a disaster. It is now shifting towards "prepare your queries" which is much better, but given sometimes we have to deal with query parts that cannot be prepared ( to order a table based on the user's choice is another common example) I felt we need to have something to cover this case also. 
This is soo beautiful , thanks for your input. A lot of ideas came to mind
I bet you didn't even check the course.
I bet you didn't notice the review I wrote half a hour ago :)
But ultimately that would be unnecessary if you store relative paths in the first place, also opens yourself to user errors. The least you have to do the less that could go wrong.
PHP scope is an http request so making it all OOP doesn't help much. 
And, for you and everyone else who have no clue: [ they used to be notorious for serving outdated, or outright bad information. Folks got pretty fed up with them because people would go there, get bad information, then end up on Stack Overflow wondering what went wrong.](https://meta.stackoverflow.com/a/280484)/285587
I have troubles with my nieces usernames '; DROP TABLE login_info; and Anny' OR 1=1;
Sorry buddy, but that's a super simple task your teacher has given you there. Ask him or her for help if you are stuck. If you can't solve this assignment yourself, by reading the introduction chapters on PHP of any of the hundreds of books and thousands of websites, published within the last 20 years, you should consider changing your career path right now. Further more, this question should have been posted in: /r/phphelp
I might be mistaken here but I always assumed that if you're just using the default PHP system with PHPSESSID and not rolling your own thing you're pretty much good to go. I think you can even configure the entropy source and length when using that one.
You're right. Too many web coders with MySQL experience only in this thread. Index the right columns with suitable data types, and a good DB storage engine will fetch a record from a 100 GB table on an SSD disk in microseconds. Index the wrong columns with your DIY optimized data types, and your shitty storage engine will use an entire weekend to fetch that record from a 100 MB table.
Little bobby tables :\^)
Do you make and use a sensible test suite in your applications? Are you aware of common design patterns, and why they're used? Do you follow and stick to guidelines in your project? If you can answer yes to those, and demonstrate it in some of your work. Then you're way ahead of most candidates.
What design patterns are most common? My current company makes an explicit point of following our own and doing away with convention for the sake of convention (e.g. our framework has for the most part done away with controllers for our web apps)
I use Vim with ctags. Just index the files manually one time, and after a bigger update.
Works really well for that use case. I maintain a legacy Zend 1 application, and the first two things I did on taking it over were to migrate from Subversion to Git and set up Phinx. I wouldn't use it on a new project as any decent framework or standalone ONE has migrations already, but for legacy apps it's perfect.
A whitelist is a great way of protecting against SQL injection, I admit I didn't think about it. I have a question, though. The article assumes a variable is directly concatenated into the SQL query. If the query doesn't use that, just prepared statements, would the whitelist bring any sizeable benefit to it? 
Yes that is correct but if I do manage to get my hands on your PHPSESSID cookie, and you're not verifying the source I'm as good as logged in. Very unlikely thing to happen as other exploits need to be used to even get access to your cookie but better be safe than sorry? &amp;#x200B; Either way I've bookmarked your post, really like it.
Check out [Laramap](https://laramap.com/). Not representative (\~400 Users vs \~27k subscribers on r/laravel) but still a nice kind of visualization.
An older article but also relevant - [When to declare classes final](http://ocramius.github.io/blog/when-to-declare-classes-final/)
Never even heard of Netta. 
[https://github.com/kamranahmedse/design-patterns-for-humans](https://github.com/kamranahmedse/design-patterns-for-humans) Study that for design patterns - can't go wrong if you know that.
Do you know any frameworks? Laravel, Yii, cakePHP etc. Have any CMS experience? Wordpress, Drupal etc. These can be helpful to brush up on. 
Nope. When no variable is going to be added to the SQL string, then no white list is applicable. 
Back then, I read [Real-World Solutions for Developing High-Quality PHP Frameworks and Applications](https://www.oreilly.com/library/view/real-world-solutions-for/9780470872499/). It's comprehensive but it's rather dry and can be overwhelming, so your mileage may vary (I liked it). For a beginner in unit testing, I'd recommend the [SymfonyCast course](https://symfonycasts.com/screencast/phpunit). You need to pay to access the videos but the transcripts (with the relevant code) are available for free. You don't really need a familiarity with Symfony to follow along. If you're Laravel-minded, Laracasts also have a series on testing, but I didn't watch it so I don't have an opinion. Search Youtube for the Clean Code talks (Google tech talks), by Misko Hevery. They're more about writing good, testable code than writing unit tests per se, but they're very good. You should watch them even if you never intend to test your code. The language is Java, but the principles remain the same and you'll be able to follow. He also has a [guide to writing testable code.](http://misko.hevery.com/code-reviewers-guide/) You can pretty much take any Java/JUnit tutorial or article because PHPUnit is very similar to JUnit, and most of the lessons apply to both. What really matters is to start writing tests though. Even if they're very simple, basic tests on your simplest classes. Don't bother writing tests for your existing code in the beginning, as that will be hard and force you to change the existing code. Unit testing will force you to write your code in a certain way and to refactor your code, and that will make it cleaner, simpler (and visually more elegant!), and more robust (flexible enough that it can be changed yet strong enough to not break every time you change something). But be aware that it might not be easy in the beginning and you might not like being forced to rewrite a perfectly working code just for the sake of testing. The reward will be great, though. And don't jump to TDD right away (i.e. write test first, code later). That requires a whole mental context switching and may affect your productivity at the beginning. Wait until you're familiar with testing before doing that (if you want to). 
Yeah I’m pretty adept with yii2, Wordpress, magento. But this job is a step up from that, looking for more fundamentals to catch up on
Yes.
That's, it's Ctrl+alt+left, but there's a bug in there, Ubuntu randomly changes work-spaces with that shortcut, or blocks it so the IDE doesn't take it. Seems to work :) But I meant the VSCode Ctrl+P functionality seems better than the IntelliJ one
It will take a long time before this gets annoying as standard :)
It's basically local Czech + Slovak PHP framework: https://nette.org/en/ Similar to Symfony and Laravel.
I'd do a Zend practice test. That'll tell you if you've got any holes.
Seems likely.
I would also look into Agile development. It seems since it's for an actual company and it's a step up from your normal dev job then it might include some sort of management and knowing the basics of developing using Agile might come in handy.
I manage agile project currently, I’m just looking for PHP-specific fundamentals that might pop up in a technical exam
So I have a product designed which requires this perimission structure; A user can have a primary role &amp; multiple secondary roles -&gt; Roles have a permissions -&gt; The primary role takes ownership but secondary roles can add permissions that the primary does not have set. A user can have their own permissions -&gt; user permissions override primary role &amp; secodary roles -&gt; roles can set perimissions that are not set on the user A user can have primary &amp; secondary roles only on a specific resource.
What's the working scenario / business use case you're trying to solve? It sounds like you're designing a solution with out making a use case first.
RBAC However, giving a user their own permissions is inviting headaches. Dump user-scoped permissions entirely and just give each one their own hidden group with only them in it. The bigger question is can one set of permissions negate another set, and is the highest privilege always used. 
So I won the bet?
Will all respect, my humble opinion: People don't understand "roles" but they understand what a key and a lock are. I do it this way: People can be members in arbitrary groups. Groups are just labels for sets of users. Some groups stay that way. A group could be named "customer bought something in 2019" if you will. Arbitrary. Those groups are like keys. Then, each group can function as a "key" to some resource (The resource has an aaccess group, edit group and so on..). These are the locks. Then, the only remaining question is: Who can see which group? Who is allowed to add someone to a group or subtract? Every group has two "group handles": The group who can see the group and its members, and the group that is able to add new members or subtract. The last part has to be understood only by admins.
The use case is like a Communiy CMS. Users can make their own articles, have permission to manage their own articles (edit/delete/moderate comments etc). The company will have global groups such a global moderators, Partners, editors and clients. &amp;#x200B;
Pick one of these under "supported models": https://github.com/php-casbin/php-casbin#supported-models (As someone else said: You are describing RBAC)
[http://www.zendexam.com/](http://www.zendexam.com/) &amp;#x200B; &amp;#x200B;
Drupal does this. But that’s my bias. Many cms products can handle it. I don’t know if it has a name. But it’s a very common publishing permissions scheme. 
Always know the answer to "what's the difference between an interface and an abstract class?" Seems to come up in interviews a lot. 
5.3, really?
Yup. Adding traits to that list and also what and when to use a final method. 
That’s a six year old exam on PHP 5.3. Some parts may be fairly outdated.
Design patterns?
Go for broke and say traits are a code smell and never use them :D
Do you know what FizzBuzz is? If you don't, do yourself a favour and learn how to pseudo code the crap out of it and then learn how to solve it with PHP preferably adding some TDD in there. It'll also help if you know why it's asked in interviews. Hint. It's not to test your coding. Of the applicants that I see, 7 out of 10 can't properly solve it.
Where you have to write code that outputs like so, right? - F - Fi - Fiz - Fizz Etc. I presume it’s a test of problem solving?
If your working in government you very well may still be using 5.3....
You basically only need /vendor, /generated and /app if you’re not doing frontend stuff. 
Yes the latter example is the correct one and no it's more than a test for development principles. It tests problem solving, people usually screw up when it comes to the outputting of FizzBuzz ie. 15, 30, etc. Which to me personally shows a lack of problem solving and soft logic skills.
An unsupported version? Press X
Reverse a string. Also, orms, prepared statements, frameworks, mvc, private vs protected and other oop things. Docblocks! Phpunit! 
Like PHP 5.3
PHP has some neat things on the release horizon. Potentially you can grab some style points by adding things like, “so this is how I’d do it now, but here’s how I’d incorporate this &lt;new feature foo&gt; once released...”. Also unit/testing fundamentals.
sorry but thats garbage. most of the questions are either not php-related or badly written
&gt;Always know the answer to "what's the difference between an interface and an abstract class?" colleague and friend of mine was asked that question literally yesterday at his final work training exam. its a question for OOP beginners, not for advanced devs imo...
We've interviewed maybe 20 people this year for mid-snr positions. Not all of them had an answer :( But it gives us a guide, like we're not going to move onto questions about DI if they can't answer that.
OOP you should definitely brush up. Also learn to use composer (if you haven't) and make sure you're up to date with actual PHP version. OOP: - Abstractions - private vs protected vs public methods and priperties - Final classes, and methods - Abstract methods - Interfaces - Traits - Overloading - late static binding (static vs self) - PSR-4 autoloading standard - namespaces - Dependency Injection Look at PSR standards in general. Don't forget PSR-2 coding standard. Make sure to have all native data types in your sleeve. Learn most essential functions for manipulating arrays. Make sure to have PDO database manipulation under full command. Get to know about actual frameworks (Laravel, Symfony) 
Ask them what framework they’re using and brush up on the fundamentals (ex: Laravel/Eloquent, Symfony/Doctrine). IMO the one thing that defines a strong dev in modern PHP coding is proper understanding and use of dependency injection. If you get DI/IoC, you probably also have a good grasp of OOP principles, SOLID design, DRY, composition, etc. If they’ve homegrown a framework ... run. :P
So you're saying w3schools is good to learn PHP ?
Does `ldap_error($connection)` not shed any light on the issue? If that doesn't help, you can try setting the debug log level **before** your call ldap_connect: ``` ldap_set_option(NULL, LDAP_OPT_DEBUG_LEVEL, 7); ``` It might make it clearer what exactly is going wrong and where.
Thank you philo. I'll try this in the morning when I'm at work.
Static vs Self was a good one thanks! Think I knew it but never actually questioned it before
That’s what I’m running from haha
&gt;maybe 20 people this year for mid-snr positions what the actual fuck? &gt;But it gives us a guide, like we're not going to move onto questions about DI if they can't answer that. so youre agreeing its rather an entry level question though I take it? also, I might not be seeing it right now but whats DI supposed to mean?
We run doctrine migrations before we deploy the application to Elastic Beanstalk. We do it all through a Gitlab pipeline. The reason for this is that the application will start spitting out errors if users start hitting endpoints where the database changes are. This is due to doctrine trying to map entities to table columns that are not already there. We also only use migrations for schema changes and not data changes. If there's data changes then we have separate SQL scripts.
What's the position description?
Say that for every question
We run doctrine migrations before we deploy the application to Elastic Beanstalk. These changes should not affect the old version of the application. We do it all through a Gitlab pipeline. The reason for this is that the application will start spitting out errors if users start hitting endpoints where the database changes are. This is due to doctrine trying to map an entity's new property to table columns that are not already there. We also only use migrations for schema changes and not data changes. If there's data changes then we have separate SQL scripts.
Yeah, it's a question I'd expect everyone who comes to interview to answer at whatever level. Whether it's nerves or they are simply long time php4 devs, I don't know. DI is dependency injection. 
&gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required).
SOLID principles, and familiarize yourself with the PSRs. Familiarize yourself with unit testing if not. Mocking, functional testing, etc. If framework job, read them docs. 
7K subscribers lol. Sorry about posting here.
Not exactly the same. `:wq` will _always_ update the last modified time of the file even if you haven't made any changes. `ZZ` will only write if needed before quitting, thereby not changing the last modified time if it wasn't actually modified
Shallow and pedantic
&gt; make sure you're up to date with actual PHP version Maybe I have been working as a garbage whisperer but out of the 5 last PHP jobs I had only one of the companies were in an up to date PHP version. I would consider backwards compatible habits an asset in the candidate
It happens. People who are awesome at writing code sometimes can't verbalise why they do something a certain way, when in a pressured situation like an interview. Sometimes it can be a terminology thing too. Like, there are people who would guffaw on this sub if you said "this guy interviewed for a senior PHP role and he didn't know what DI was!" 
About W3Schools is hit or miss, with lots of misses and it's too basic. And even the examples are so-so. Surprisingly, the official documentation of PHP is quite neat, it has examples per function. You should check it out. 
True, but it's never bad to impress on the test. It is occasionally appreciated. 
&gt; "this guy interviewed for a senior PHP role and he didn't know what DI was!" yeah the irony right here... ive been using that without knowing the terminology :\^)
Tips: Also, you mustn't forget to show passion in your work. For example, let's say that the interviewer asks you about "interface and abstract class". You could reply with a generic answer that it could be right but it's boring (and some cheaters fool those kinds of questions). Or, you could reply telling a story how and where do you use it and why you use it. 
One quick thing that may help you a lot is just get a quick 20 minute example project working with composer and PHPUnit https://phpunit.de/getting-started/phpunit-7.html Your end goal is two folders in your project folder called src and test. Make the example files `src/Email.php` and `tests/EmailTest.php`. Then get to the point of running: `./phpunit --bootstrap src/autoload.php --testdox tests` The point of this example is just to get you head around what running unit tests even looks like to start with. After you have that example template running it's very simple getting your head around how to do it for a larger project.
Please learn how to develop web apps for yourself before you try to teach others 
It depends. If the developer (including senior) is minimalist (KISS principle), then maybe he/she hasn't used an abstract class or interface on PHP. For example, usually, my code uses DI and/or Singleton, so I practically don't use any inheritance. 
Haha, I know how to silly! That's why I'm teaching others....
I’m not sure how to interpret your response, so I’m going to rephrase what I said just to make myself clear. You know far too little about programming and development to be teaching anyone anything. You should not be teaching people. What you were teaching people is wrong and unsafe. I have seen your work, it is vulnerable to basic sql injection and xss. I understand that you are young and ambitious and you want to learn and show others what you have learned and make a name for yourself. But you have a lot to learn. This is only the beginning, don’t hurt yourself by rushing to the end 
Quote fast or quite messy 
Are you sure they don't just overthink it and spend too long being nervous or looking for a trick? because the instructions themselves translate into code almost naturally. 
Know the difference between a shallow copy and a deep copy, and which one the __clone magic method does by default.
Do some reflecting on some of your past projects. What went well, what didn't, what would you change, what would you do again, what was a difficult challenge to solve, what was difficult to test, how did you go about testing, etc. &amp;#x200B; If a company is worth its salt, they won't only ask you a litany of trivial technical questions (although you should be prepared for those) but they'll ask you about problem solving techniques and real life situations. 
When it comes to interviews, always make sure you make an effort to find out what they think is important, not just what people here think is a common interview question, or needed to be a good PHP dev. Find the names of some senior people at the company and read any public projects they have on github. Look for the frameworks they like, their code style, anything they've written that aligns with work you've done before, etc. As to your friend, I find the "OO vs FP" to be such a weird false dichotomy, that's such a common misunderstanding it's probably more popular than the actual terms' meanings. FP is a subset of *declarative programming*, which is about "declaring" what something is without describing its control flow. It contrasts *imperative programming*, which is about the control flow. e.g. I could write a recipe in two ways: put "pancakes" at the top, then say "1 egg, 1 cup milk, 1 cup flour, 1 tsp baking soda". Someone who knows how to cook can interpret these statements without being told how to do it. That's declarative. If I wrote "mix eggs and milk in a bowl. Once thoroughly mixed, add flour. Heat pan. Once warm, pour batter etc.", that's imperative, since I'm specifying the control flow. FP is a declarative approach, where instead of writing out a sequence of *statements* ("do this thing"), you write *expressions* ("the value of this is that"). While the imperative approach is by far the most common one in object oriented programming, it's not a hard requirement, and you can take either style depending on which is best suited for your project. It usually means that instead of using statements like: $shopCart-&gt;addItem([ 'type' =&gt; 'pants', 'color' =&gt; 'blue' ]); which would add an item to the user's cart (notice there's no assignment, so it's creating a "side effect"), you would do it with expressions: $updatedCart = $originalCart-&gt;addItem([ 'type' =&gt; 'pants', 'color' =&gt; 'blue' ]); In both cases, I'm still using objects, but their class methods would be defined differently. The former would mutate itself, while the latter builds a new version of its same type and returns it. Anything immutable in PHP likely follows FP an OO paradigms. e.g. the request and response in [PSR7](https://www.php-fig.org/psr/psr-7/), or just a simple [array\_map](http://php.net/manual/en/function.array-map.php) must be used in an expression, not a statement, to do anything useful. 
Yeah, and it's tricky as well. Can cause hard to debug bugs if used inappropriately. Infinite loop for example. 
With all due respect sir, I have built many web apps and many android apps that many people use. The tutorial I am doing is as basic as it gets, it includes almost nothing about security at the moment because again it is a beginner tutorial. 
I was referring to your other work. I’ve seen your website, I’ve seen your YouTube videos, you have nothing to teach.
For my last one it was an abstract vs interface p, describe OOP, what are the SOLID principles, a fizz buzz test and how to detect a memory leak
Dude, working on fed contract now, 7.1 probably will be 7.2 before launch.
Are we just copying content from the php manual and pretending that it’s not blogspam now?
Is there a technical way to find out what PHP contains a specific code running on a system? I need to find out what file is updating a specific MySQL table from an application I did not created in order to fix something. I tried "lsoft" to watch open files but this is a miss and hit thing as the execution is fast and that does not tells me anything except the files that are opening the connection. The application is in Laravel and it was not created by me, so searching for the query to MySQL table does not work either as the code is different using other names and queries are created on Laravel. I have tried everything so far, searching the reference for the table or the query in the files, watching MySQL process with logs enabled...This is driving me nuts. 🤪 Is this really an impossible mission with PHP? Is there a way to know/identify what piece of code is doing this? The software has thousands of files so its not as simple as just looking at the code or doing a search and replace function. I tried this for 20 hours so far and I cannot find the reference on the code anywhere. Every time I think I found it, its just something else.
[How To Ask Questions The Smart Way by Eric Steven Raymond](http://www.catb.org/esr/faqs/smart-questions.html) 
Use breakpoints with xdebug and be code/php storm, to step through/in/out of functions and files. You’ll be able to see what is running and when.
"Variables are a code smell and never use them"
While true it can showcase those skills, a interview setting cam be stressful so be careful tp not use FizzBuzz as your only test 
TL;DR: "Hi Brent! I heard you've got some audience on your blog? Care to share some with your brother?" I don't like to feel grumpy. And I don't like going on someone's post. But really. Why did I just read (all right, just skimmed) that? 
PHP doesn't support overloading, perhaps you meant overriding?
Technically, you could implement overloading in php with some __call fuckery. Don't do that though.
Or dependency inversion 
In my case Emacs makes good job for me. I use these packages in most: * php-mode * ac-php * flymake with php * geben and with xdebug php extension * js2-mode * flymake-jshint I recommend also (optional): * https://github.com/nilcons/emacs-use-package-fast * https://github.com/jwiegley/use-package For learning Emacs and elisp: * http://ergoemacs.org/emacs/elisp.html * https://news.ycombinator.com/item?id=6116514 * (broken link) https://learnxinyminutes.com/docs/elisp/ 
&gt; my code uses DI and/or Singleton, so I practically don't use any inheritance. What does one thing have to do with the other?
I thought it made a good point - I quite liked the analogy and it’s one I’ve never thought of!
To be honest, I think that the idea behind this post makes a good point too. But the article consists of overstretched introduction into carpentry and a very concise conclusion. This is sort of disappointing. All right had a very good introduction into woodworking tools. Now I would expect the *main* part, because we programmers have no less tools than carpenters. It is not only IDE. It's debuggers, profilers, code generators, code inspectors, static analyzers. Containers, web-servers, operation systems, console utilities. Database editors. Version control systems. Of course it is important to know your tools. But what about saying a bit about actual tools, so the article wouldn't sound as a pompous rant make the actual point with some examples?
Do I need to rewrite the php for the header into a separate php file or I can still do it on the same form?
If I was hiring I’d be looking for solid experience with Laravel or Symfony. It might sound elitist but I generally find that magento/Wordpress developers are garbage and I understand that people do jobs to pay the bills but if they weren’t doing Symfony or laravel outside of work there’s a good chance they’ll have a lot of ground to make up. Below are all things that I’d also be looking for. None would be essential but everyone that you have would be a bonus. coding standards and tooling. Devs that use tools like CS_Fixer (linting) and PhpStan/Psalm (static analysis) tend to indicate they care a little more about quality and standardisation of code. Also I would care more about how they handle testing code and setting up CI pipelines. We do 10-12 production releases a day between 4 devs at work. I’d want someone who is comfortable working in a way that ships code regularly. Can you create and document a standardised API? We follow JSON:API spec so I’d be looking for experience with fractal or laravel resources and an understanding of the spec. Do they leverage Dependency Injection? I’d ask why they think DI is important and where they’ve seen issues with places it wasn’t used. I’d also ask something around injecting interfaces and then how you’d go about configuring which class is injected (I.e 2x payment gateways that are used in seperate places). Encapsulation is another concept I’d be looking for. I’d give a real world example of something that went wrong and ask then how they’d tackle it. Eg we outgrew our billing system 6 months ago without warning and things started breaking everywhere. It wasn’t possible to rebuild it overnight so we had to implement a progressive improvement plan. What bits get swapped out first and why? What are some strategies we can use to keep the business running while we re-architect. Data architecture. How they structure database and entities. Do they have experience with eloquent or doctrine? How do they handle relationships and filtering? Active record v data mapped. Repository pattern (when and where is it appropriate and when not) There’s probably half a dozen design patterns I’d be asking about that are relative to our domain (DDD, CommandBus, Queues etc)
Output buffering might help: https://stackoverflow.com/questions/4401949/whats-the-use-of-ob-start-in-php https://secure.php.net/manual/de/ref.outcontrol.php
[Line 246](https://github.com/ABC101888/php1/blob/master/test.php#L246) sets a header, but header has already been sent due to the fact you have HTML before. If you need to set header, do so **before** anything is being displayed.
First off, questions of this sort are better directed at /r/PHPhelp Yes, you’re sending output before setting headers which does not work, simply due to how HTTP works. Before continuing on your way I can only strongly urge you to read up on how HTTP works, basic security concerns in web applications (there was a really good post here yesterday) and lastly best practices for PHP. I know everyone always loves that learning-by-doing approach but all you’re gonna learn is how not to do it. Lastly, here’s the dirty hack you came here for: ob_start(); ... ob_flush(); But please don’t.
The header function can only be used before any output is sent to the browser, eh html as well as spaces or css etc. Therefore in the 2nd part where you use it, it is not working because half the page has already been output to the browser. 
Do not offer a crutch. In a sanely designed application you don't need the output control to prevent such error. Just make your application first send headers and then output. It is really simple. 
Output buffering has some legit uses.
I've been already told to post in /r/phphelp why you're ignoring this sub's rules?
In fact, it has many legit uses. A very nice example is this [XML serializer](https://github.com/adamplumb/XMLSerializer) which greatly boosts performance compared to some other alternatives, all thanks to output buffering.
TLDR, Move all your logic outside of the HTML template. Then it will be all okay!
So what? preventing silly errors is not one.
Before Reddit I had no idea so many people cannot keep to a simple topic in the course of a 2 comments thread. 
nice work :)
I thought we weren’t allowed to say “craftsmen” anymore?
It does. http://php.net/manual/en/language.oop5.overloading.php
It's not theory, but reality. PHP does have overloading. I'm not fan of __call either, but it's implemented by some big faces in the industry, Laravel for example. 
Ones I see used a lot are: builder, factory, decorator, and observer.
Forgot to mention: serialization - json_encode(), serialize(). - Session handling and cookies - Request handling, POST, GET etc. - Restful API - MVC (Model-View-Controller) architecture - Design patterns https://github.com/domnikl/DesignPatternsPHP - Security Here you can find a lot of good PHP related stuff: https://github.com/ziadoz/awesome-php
Report yourself to the nearest re-education camp.
If your goal is to take on free lancing work, then learning Wordpress would open you to a lot of free lance opportunities. There aren't a lot of conceptual differences between C# and PHP; most of the fundamentals are similar in both languages, just with different syntax. If your goal is strictly to be able to take on contract work, Wordpress is a very marketable skill, especially for a college student. Another marketable skill would be to learn Magento, which is a popular e-commerce platform. If you want to advance your career more broadly, then learn frameworks like Symfony or Laravel, and dig deeper into databases. I don't think diving into Laravel or Symfony will have as much short term benefits of broad appeal in free-lance (again, a lot of companies use Wordpress for their websites). In the long term, those could help land you full-time software engineering jobs (but so could dotnet core MVC, for example). TLDR; For short-term freelance, learn Wordpress. For a long-term career, start deep diving into whichever framework in whichever language you like.
Care to tell why? I somehow foresee an argument for that to be amusing at least (was living in a cave).
Not inclusive of women 
Depends what you need to accomplish. Basic CMS, with perhaps some bespoke logic - WordPress CMS framework with a lot of custom "post" types - Drupal Custom web app with a lot of bespoke business logic - Laravel
Well Thank very much I really appreciate it 
"artisan"
"craftsmen" is gender agnostic to everyone except those that just want to be offended by something.
IMO anything from W3Schools is quantity over quality. It's not a good learning resource (no context or reasoning provided) and it's not a good language reference, because [php.net](https://php.net) exists which is better and in sync (mostly) with the language. The same goes for all the HTML CSS and JS stuff, the MDN web docs are much better for those.
Woodwork and Software Development? Reminds me of [this talk by Tim Ewald](https://www.youtube.com/watch?v=ShEez0JkOFw) (not PHP but Clojure, interesting nonetheless).
Inheritance and DI servers to the same purpose: reuse a method or a field. Why do you want to use both methods at the same time?. Anti-KISS? And Interface acts as a contract, but its purpose is weak for a dynamic language such as PHP. We don't need Interface unless we want to create a rule for a library. 
&gt; Poor workers blame their tools. Good workers build better tools. The best workers get their tools to do the work for them. It's amazing the number of PHP programmers that work with a basic tool (including notepad and other editor that I want to mention). There is not an award for effort, but there is one to end the job early. We earn the same if we use a notepad or PhpStorm / VS Core with all plugins. 
Football vs soccer
There are 3 kinds of rules: 1) Legal rules 2) Ethical rules. 3) Arbitrary rules invented by the mob. I don't care about arbitrary rules (newspeak) unless they are part of 1) or 2) or unless they pay me for it. 
Hello, &amp;#x200B; after upgrading to Symfony 4 I thought I'd give actually running my development server on Windows again, but the performance difference is devastating. On my CentOS VM running on the very same pc, I get a very quick experience, everything loads quick - but on Windows using IIS, the exact same application takes considerably longer to load pages. Sometimes seconds, but there's always a noticeable delay. &amp;#x200B; Screenshots: Centos: [https://i.imgur.com/mF3Hlaq.png](https://i.imgur.com/mF3Hlaq.png) , [https://blackfire.io/profiles/8d986718-a1fb-4e57-b413-25c0cb26d655/graph?settings%5Bdimension%5D=wt&amp;settings%5Bdisplay%5D=landscape&amp;settings%5BtabPane%5D=nodes&amp;selected=&amp;callname=main()](https://blackfire.io/profiles/8d986718-a1fb-4e57-b413-25c0cb26d655/graph?settings%5Bdimension%5D=wt&amp;settings%5Bdisplay%5D=landscape&amp;settings%5BtabPane%5D=nodes&amp;selected=&amp;callname=main()) Windows: [https://i.imgur.com/2Pg2GNv.png](https://i.imgur.com/2Pg2GNv.png) , [https://blackfire.io/profiles/0d1bc8fb-fa4d-4f27-a7a8-428cd733f5f4/graph?settings%5Bdimension%5D=wt&amp;settings%5Bdisplay%5D=landscape&amp;settings%5BtabPane%5D=nodes&amp;selected=&amp;callname=main()](https://blackfire.io/profiles/0d1bc8fb-fa4d-4f27-a7a8-428cd733f5f4/graph?settings%5Bdimension%5D=wt&amp;settings%5Bdisplay%5D=landscape&amp;settings%5BtabPane%5D=nodes&amp;selected=&amp;callname=main()) &amp;#x200B; As for why the blackfire probe says that it took 550ms on the centos one too, I have no idea. The site definitely fully loads in under 150ms. Going from the Symfony in built stopwatch, the difference is huge and totally reflected in how the page loads. Both systems run on the same PC, both on the same hard drive, both have xdebug enabled, CentOS runs php 7.1.19, Windows runs php 7.2.9, both 64 bit. So where does this enormous time difference come from? Filemtime and file\_exist calls alone take more time on windows than the entire request takes on Centos. &amp;#x200B; Fyi, running XAMPP on windows, I get 2-4 seconds per request on Windows. So this isn't IIS itself. I just couldn't get apache on windows to serve in somewhat acceptable times, so I chose IIS after all. &amp;#x200B; Can anyone shed some light on this?
Sorry, for some reason reddit wouldn't let me attach a body to the post, so I had to type it out in a comment after creating it. Tl;dr: Same code takes 30-50x longer on Windows/Apache than with CentOS/Apache and still 5-10x longer on Windows/IIS w/ FastCGI.
I'll welcome any type of feedback, good or bad and even ideas!
doctrine/dbal also has a load balanced connection, though it only allows one writer (Which is probably better for stability)
what about connection loss retry upon loss of connection (in/out of transaction)
What's the purpose of validate() method? What would happen if you don't call it? 
I did look at using doctrine but I couldn't find anything on load balancing. Could you show me where you found the documentation for that? I've only ever seen it with one connection and using shards which is not the same thing as PDOLoad.
You are seeing some evidence why even MS runs some linux servers. I have a feeling nginx+php-fpm would be a little faster still. Or at least use less RAM.
It's just to make sure the required type of connection exists. IE if you try to perform an UPDATE without a writer connection defined an Exception would be thrown.
Very good point. I'll add that to the to do list. Perhaps a "retry\_count" option?
What version exactly are you running? Try using the 64bit non thread safe one if your not already.
yeah with some sort of ms * retry_count back-off would be handy.. Sometimes folks like to randomly restart mysql or net issues.
I'd rather you implement a RetryStrategy interface so you can give the developer all the flexibility he can hope for and also you can implement a few basic strategies like exponential retry and fixed-time retry.
You might want to consider adding `"ext-pdo": "*"` as a dependency to your `composer.json`.
I like what you're thinking. Definitely going to add that to the list.
`PHP 7.2.7 (cli) (built: Jun 19 2018 23:13:48) ( NTS MSVC15 (Visual C++ 2017) x64 )` `Copyright (c) 1997-2018 The PHP Group` `Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies` `with Xdebug v2.6.1, Copyright (c) 2002-2018, by Derick Rethans` `with blackfire v1.24.4~win-x32-non_zts72,` [`https://blackfire.io`](https://blackfire.io)`, by Blackfire`
&gt; One line implementation. No need to rewrite your PDO queries. Personally I don't really like magic implementations. Especially based on such clumsy considerations as a regexp sniffig the type of query. What if I need to run a SET query on the read connection? What about CALL? I believe that such a class should allow to choose the connection explicitly, if needed. 
Hmm, I might give that a shot. If I'm able to get my requests down to \~150ms I'd be totally content and happy. Different idea: have you tried running a web server under WSL, accessing the mounted C:\\ drive for the website directory? Does that work? I was mainly tired of waiting for directory syncing or manually publishing my selection after every change, which is why I gave Windows another shot.
But wouldn't PHP throw an exception anyway, Call to a member function exec() or example?
I see your point. Any suggestions on determining type of query other than regex? &amp;#x200B; You can choose user the getter functions to get the writer/reader (`$dbh-&gt;getWriter(); $dbh-&gt;getReader();`) however I do like the option of picking which connection on the prepare() method. Something like `$stmt = $dbh-&gt;prepare('SELECT * FROM pets', PDOLoad::CONN_READER);` &amp;#x200B; &amp;#x200B; &amp;#x200B;
what about type declarations?
It would, of course. But the normal PHP Exception wouldn't show that the problem is the missing Reader or Writer connection. Does that make sense? 
Will it return the same connection if multiple connections are used? When you are setting an SQL variable with SET, it will be available to other queries only within the same connection.
Personally I don't see much difference. It would be a fatal error and abort the execution all the same. So I don't think I would care too much. Did you encounter this error in the wild? 
Just be advised, PDP accepts the fourth parameter, an array with connection options. Although most of them could be set with setAttribute, but some, like `PDO::MYSQL_ATTR_INIT_COMMAND` are explicitly connection options that couldn't be called later. Also I am not sure if setAttribute is populated for all connections. Is it?
The SET query at the moment would use the Writer connection. If you then call getWriter it would return the same connection.
If that exception does occur then the user needs to double check their connection settings. Without specifying that's the cause of the exception they'll spend time trying to debug when I can easily tell them what's wrong.
&gt;like &gt; &gt;PDO::MYSQL\_ATTR\_INIT\_COMMAND Didn't think about that. I'll add an `attribute` array to the `connection` array. Thank you. &gt;Also I am not sure if setAttribute is populated for all connections. Is it? You're very right, only noticed that earlier today.
The thing is w3schools gets a bad name some for good reasons, some for bad reasons. It's quite basic and often doesn't conform to best practice however there's a reason it's often on the first page of Google whenever you look for something PHP related and that is it's relatively simple and easy to understand. I think due to this quite frankly a lot of gatekeepers absolutely hate it. But the thing is if you've never learned a language before and want to try your hand at PHP go ahead and use it it's actually one of the things that made me start to get interested in programming. I'd say it's at least a lot better than trying to learn off video tutorials which in my experience have always been 100% awful. And if you've never programmed before the PHP Documentation isn't exactly going to help you. Just remember that it's an introduction to PHP and you certainly won't be able to get a job in it based on that alone.
Glad I posted it here. Made me realise there's still a fair bit I could do to improve PDOLoad. Thanks for all the feedback.
Please implement proper exponential backoff and jittering as well :-)
Definitely adding that. Will add the jitter option too.
Is there a reason for checking types with `'string' === gettype($options)` and `is_a($options, 'PDO')` instead of `is_string($options)` and `$options instanceof \PDO`?
Just preference. I'm aware instanceof is slightly faster than is\_a. gettype is faster than is\_\* though.
Is this a joke ? I’m shocked
As well as running `SET` queries on read, sometimes I need to run `SELECT` queries on write, for example when I deal with fast-changing credits queries and I don't want to rely on a slave that might be behind the master. Also, in your regex, `SHOW` statements should probably be generally considered as read database queries.
From what I can see, your code does not monitor `seconds_behind_master`. You may want to add this capability, at least as an option, so that if a slave database is more than (user specified) seconds behind the master, it is disregarded as an option. If no read databases are available, I think it should use a write database, or perhaps it should be a config option as to whether it does that, or throws an exception. 
&gt;SHOW Will add that. &amp;#x200B; RE SELECT on Write. I'm going to add the option to specify which connection to query. `beginTransaction()` will fix the connection to writer but that's not what you're looking for as the query would be after a `commit()`
Will do
That is a good idea. Added to the list! &amp;#x200B; RE no read databases, that is already the case - when no reader connections are available writer is use.
It’s ok if you are craft fluid 
I think this library is similar. You might get some inspiration from it: [https://github.com/vitessio/vitess](https://github.com/vitessio/vitess)
Through the [MasterSlaveConnection class](https://github.com/doctrine/dbal/blob/master/lib/Doctrine/DBAL/Connections/MasterSlaveConnection.php) - though only uses random balancing
Interesting separation for writer and reader. Where do these approaches come from? Is it possible combine reader and writer within one entry? SQLite can opened as read-only also. 
WSL instances are suitable for that purpose. Symfony in dev mode with the symfony webserver and xdebug is fast. No syncing needed, you work on local files with PHPStorm and point the webserver to the public directory in WSL (all your drives are available under /mnt) . You might have some small issues or annoyances (I had a bit of trouble setting up XDebug, and I don't even remember how I made it work, but it works) but overall WSL is much better than VMs. 
I’ve seen this boiler plate on github and I’ve looked at it. The one thing that made me gringe was that the models where inheriting from the broadway library
I guess I'll give that a shot. Every post on the matter of setting up a real "remote" development environment either recommends using sftp (terribly slow, no ide likes loading, let alone indexing a project that way) or setting up a cronjob and running rsync once a minute. Both are pretty terrible. I'll give WSL a shot and report back then, I really hope performance won't be much slower than with a linux vm.
Adding on to this, I recommend checking to see if the writer connection has an active transaction and if so, always returning the writer even if the caller asks for the reader.
Sorry for derailing the question, but do you have any reason to specifically run Windows and IIS, instead of say Linux and nginx?
I remember back when I used VirtualBox and Vagrant, I had to use sftp to sync, which doesn't make sense since it's on the same computer. There was a shared folder option but it didn't really work on Windows. No such issue with WSL. I just had to set up a ssh connection between PHPStorm and WSL and added the path mapping for the remote interpreter and xdebug, but no sync whatsoever. On projects where I don't need xdebug, I just use the inplace server settings on PHPStorm.
My pc at work has to run windows and other than that, my ide of choice only runs on windows too. I was/am running a CentOS VM with apache for my dev server, but manually syncing files (or waiting for them to sync) got tedious, so I looked for alternatives where changes are displayed instantly on ctrl + s.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I actually had great experiences with docker and shared drives, but since I'm the only developer currently working on the project and deployment isn't done via docker, I didn't go that route yet. &amp;#x200B; Actually, why do you need an ssh connection between phpstorm and wsl? Can't you softlink the windows directory to your webserver in wsl and just work on the local files, so phpstorm is happy with indexing and loading? &amp;#x200B; &amp;#x200B;
Differentiate between a framework and a CMS. Laravel is a framework Durpal and wordpress are CMS's If the bulk of your application is going to be custom code that you are writing and is specific to your application/business idea, then go with a framework like laravel. If the bulk of your application is just **managing** website assets like pages, images, blogs, news articles, file downloads, forum, newsletter subscriptions etc... so pretty standard stuff, then use a CMS because that is what they are built for. *A CMS is specifically for when you want a non-programmer to manage this kind of content, or you want a user interface to make the workflow for managing this content faster or easier.* Also note that while your mileage may vary, in my personal experience (which is relatively extensive) it is easier to built CMS functionality into a framework than it is to build a massive custom code base into a CMS. So if you have a unique application that goes beyond just a website then go with a framework.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Please forgive the noob question but what does load balance do exactly on a single threaded PHP process? Do you mean load balance transactions by starting new PDO connections and transactions if you are still waiting on an old one?
You didn't actually disagree with him there. He never said this shouldn't be the last HHVM related thing posted. Just that this post is relevant &amp;#x200B;
&gt;PHP Is Unsupported Talk about falling on your sword. Goodbye HHVM. Probably the last release anyone will care about before you fade into just an internal facebook tool.
I need the connection so that PHPStorm identifies the remote php binary and the remote xdebug, that's all. And I never used softlink. I point PHPStorm to the windows folders as the source directory, and I do all server-side operations (launching the webserver, symfony commands...) inside WSL, by going directly to the project folder on the mounted windows drive under /mnt. So I never had any cache writing problem. 
CodeIgniter is great for quick projects and is an easy entry into the world of frameworks for newer PHP developers.
Symfony
I like both frameworks, but I would only use laravel today. The Codeigniter release cycle is too slow and there are rarely any "quick" projects nowadays. If there are such projects, I would use Laravel Lumen. The black box stuff was cleared up, after having a teacher explain what it is the box is abstracting. You then learn to love the magic ;) However, I would still recommend Codeigniter (or at least version 4, when it's ready) to devs who are having too much difficulty with Laravel in the beginning. Usually though, or at least with me, I was ready to move forward after just a few projects. 
I'm learning php from Headfirst php. This code works, but when it's loaded for the first time, the email &amp; email-body boxes should be empty. But they are showing error, saying unknown variable $email &amp; $text respectively. &amp;#x200B;
Hi, &amp;#x200B; I have updated [Doublit](https://getdoublit.com) : a testing framework. &amp;#x200B; It is now version 2.0. This new version makes it easier to use and understand. \- You can find the documentation here : [https://getdoublit.com](https://getdoublit.com) \- And the github is here : [https://github.com/gealex/doublit](https://github.com/gealex/doublit) Any comment to improve it is welcome. Thanks.
\^ this, while the nature of the post nice. Reading it I felt like I was being advertised too. Suprised it wasn't a ad for something or some shitty SEO attempt.
/r/gitlab
Try declaring them as null at the top of the script. These parameters don't exist it looks like, unless you go into the post if block.
The variable doesn’t exist unless the form is submitted, the first time you create the variable is on lines 13 and 14 and they only happen if the form has been submitted. The first time you load the form this code is not run. The warning you are seeing is because you’re using a variable without checking whether it exists, you can check if a variable exists by using a method like [isset](http://php.net/manual/en/function.isset.php). In this instance though you can simply assign empty variables before the if statement (before line 12) and the error will disappear. ``` $email = ''; $text = ''; ```
&gt;Thanks. PS: I can't create a post body in this sub. What's going on? this is actually quite a shame but it hasn't been changed for quite a while already. In the new reddit design here you just aren't able to add a post body, if you wish to do so, you need to switch to the old reddit design where all the functionality is present. no idea why that has not been fixed 
What’s the benefit over PSR-11?
Because you're attempting to use variables without initializing them first. You can either add an `$email='';` before trying to use it, or you can `&lt;?php if (!empty($email)) echo $email; ?&gt;` (or shorter form: `&lt;?php !empty($email)?$email:''; ?&gt;` with ternary `if`) Or, if your php is modern enough (read: &gt;7.2) `&lt;?php echo $email??''; ?&gt;` (using null coalesce operator) Even shorter, you can use php short echo tags: `&lt;?=$email??''?&gt;`. But I would save that for when you have the language figured out a little better. 
IMO, unless there is a performance benifit, i dont care for \`final\` .
dude its 2k19 and you're teaching ppl to write classes and echo variables inside the html page. just why?
The `$subject` and `$text` variables are only defined inside the `if (isset($_POST['submit'])) {` block, so in your output they are undefined and will throw a notice. Have a read of [variable scoping](http://php.net/manual/en/language.variables.scope.php) in the PHP docs. Also, if you're really set on sending emails like this, you'd be better off using something like PHPMailer and a mail gateway such as Sendgrid, as sending raw email using PHP's mail() function is pretty much no bueno as far as spam protection goes these days. You'd be better off using an actual mailing list provider like MailChimp if you actually care about deliverability.
"Release cycle"? CI was dead a decade ago, there was attempts to revive it - Kohana, FuelPHP, some others - which are long dead in turn as well. Yes, right now some nice people are trying to restart CI from scratch but calling nearly a ten year oblivion a release cycle is a bit of stretch. 
you're doing it wrong. Here is why: 1) you need /r/phphelp , not this subreddit 2) you're learning php from headfirst where they teach you outdated approaches and strictly bad practices. 3) you just can't google your simple question and instead you choose to create a thread on reddit (believe me most of simple questions on php has been asked and answered many times and ur situation isn't unique). The googling skill is one of the most profitable in the long run for the developer, btw 4) you haven't got a variable `$email` which you ask about 5) finally, you echo your `$text` var when it has not been 'defined' (in php way) before. (and this ought to have been told you on /r/phphelp) &amp;#x200B;
It's either me wanting to promote the Instagram of my brother; _or_ I might be confronted with developers "stuck in the past"; and you are just not the target audience? I know from this subreddit that you're an experience programmer, so I know you won't read anything new in this post. &gt; But what about saying a bit about actual tools, so the article wouldn't sound as a pompous rant but make the actual point with some examples? I actually wanted to avoid statements like "you should spend time learning an IDE". The post was meant as a thought exercise to the reader. I'd like them to take a minute after reading to think "does this apply to me? How?" I like to think of my readers as programmers who can make up their mind without me having to tell them what to do. It's clear from your comments that you did actually think about it and you voiced your opinion, so I guess I achieved that goal 🤗
You're running with the half the RAM recommended for Ubuntu. Have you tried a more lightweight distro
Oh this is pretty nice, I wish I'd had this years ago.
Over the years I've helped quite a few people set up xdebug remote debugging and helped people figure out why it wasn't working. Most of the time time it's quite straightforward, but every now and then it takes a bit more effort to figure out why things aren't working as they're supposed to. So, I decided to write this guide on some of the steps you can take to help you figure out why xdebug isn't working when you're trying to set up remote debugging. It's not exactly rocket science, but especially if you're new to xdebug, you may not be familiar with all the options you have for figuring things out. I've seen plenty of people give up trying to set it up after not being able to get it running on the first try or dismiss remote debugging as too complicated or useless. I hope this guide can help that kind of people to give it another go.
Just to point to out xdebug is resource intensive so if you have potato you might reconsider.
So you know that in PHP interfaces can extend other interfaces, and how that is the only way to keep I from solid and type checking, and why it's really, really problematic? ;)
"Not a single dev knew the answer. Sad. We wanted to know the difference ourselfs, after all we do not use abstract classes either" Is way more common the one could think. :(
Dependency Injection or Dependency Inversion. Pick your poison ;)
SOLID, with examples pros and cons. Design patterns, with examples pros and cons. Interface, class, function, namespace, (+ autoloading + composer autoloading). Composer, git, ide (yes I was to at least a single interview where they checked for proficiency with an IDE of my choice - text editor + tooling would count too) DDD, CQRS XSS, SQL injection, ... Plain old PHP - warning: some companies will ask for very "clever" - that is unreadable - code, the one that optimize for character count instead of optimizing for abstractions :( apparently good dev knows how to program PHP as C, even though they will NEVER accept such code in Code Review on the actual job\* &amp;#x200B; \*No. I'm NOT saying that "clever C" should land in production code. I'm saying that if its useless knowledge then it should be queried as often as any other useless knowledge during job interview - maybe for creating that camaraderie feel if at all.
That's not an answer to the original question and not even necessarily a follow up question though 
You can even remote debug over ssh; for instance: to execute a cron-script that is not bound to a route. Being able to set up a debugger gives you so much value as a developer. Remote debugging is so handy when environments differ; for example: stuff works locally but not on a staging environment.
I added those very good links after the first Tomas comment ;-)
Good article but you missed the issue I had literally all the time. The port is closed. 
Thank you &lt;3
Oh, I see. As for using a softlink, it's the same thing as using the real folder. I just like using a softlink to /var/www/active so I can quickly change the project without the need to reconfigure the vhost. I might try the built in symfony webserver, but always manually launching that would be tedious too.
Yeah, definitely. I certainly would not recommend keeping xdebug enabled all the time if you can help it. It can easily lead you astray on number of performance issues. I've also written previously at length about [my thoughs on xdebug performance and how to deal with it](https://riimu.net/2019/01/xdebug-will-skew-your-performance/), but the gist of it is that xdebug performance is a real issue and will get you eventually, unless you do something to deal with it.
Thank you. That is a pretty relevant issue as well, so I added a note about checking that as well.
Is REGEX read/write detection reliable? You can have more complex queries like INSERT FROM SELECT etc.
Looks cool! Can't find it from packagist even though the installation instructions indicate it should be there.
I feel like Codeigniter 4 is going to be a good candidate for a entry level framework for new devs. 3.X does not let you play nicely with composer, PSR and other good practices. Even so, Yii can offer a good fit in that space right know, having more advanced components as well. Symfony and Laravel are excellent tools, but I think that definetly there is space for a more beginner friendly framework. A good default routing and request handler + secured data proceesing/forms + a light database abstraction layer can give a new dev a good overview of the benefits of the frameworks approach, without the entry barrier of Symfony or the heavyly opinionated Laravel vision.
[Isn't it this one (`bakame/csv-doctrine-collection-bridge`)?](https://packagist.org/packages/bakame/csv-doctrine-collection-bridge)
Meh, recently wrote something like Laravel Nova for the company I work at, it scans through the Eloquent models that we have and it creates a sort of phpmyadmin-esque interface with relations so it's not exactly a phpmyadmin. For simple models like User or Posts I had a trait that autogenerates name and icon based on name and a way to extract column mappings out of the Eloquent model. Writing this in a separate class would be abysmally stupid. The way I have it now I can plug-and-play models into the admin panel just by implementing a contract and using a trait that implements the said contract. Works fine so far. 
arent all PSR-11 service managers framework agnostic? isn't that the whole point of PSR-11?
Thanks to all for participate and giving your valuable suggestion.
Yeah. Seems to be working now!
&gt;its a question for OOP beginners, not for advanced devs imo... I was just poking fun at "its a question for OOP beginners, not for advanced devs imo..." because it can be turned into one. ;)
It is. Class allows for single inheritance, while interface allow for multiple "inheritance like" extension, and one of defining properties of that extension is... You add that SOLID connection and voila. Other side think you know your stuff. And hopefully they spare you the question about workings of the for loop ;)
That's very true but I haven't thought of a different way yet. Any suggestions are welcome.
Hi, &amp;#x200B; I have a question or maybe chains of questions. Rest API (Lumen or Slim) + frontend (angular or vue.js or vanilla js (custom). How possible to ensure that, nobody (nor human or bot) will start using the API what the site use. &amp;#x200B; The use case: There is a company website with a not-so-small database, most of the data is served to partners via API (it has some key based auth and IP whitelisting). In the upcoming time the plan is to use a Rest API with a client-side rendering frontend (Vue or Angular or vanilla js). What is the common way to ensure, only the client side (client app) using the API? 
Most of the time a user has to login. During this login you will generate an API token that is delivered with each request to ensure that this user can access/process you api endpoints. See: \- [https://jwt.io/](https://jwt.io/) \- [https://www.oauth.com/oauth2-servers/access-tokens/](https://www.oauth.com/oauth2-servers/access-tokens/)
That's a great question and thanks for the feedback! I probably shouldn't have led with "framework-agnostic" haha. &amp;#x200B; Gravity is an implementation of PSR-11 that defines a simple convention and domain-specific language (DSL) to load services and configuration from files in plain old repositories, no framework-specific modules, arrays, etc required. For example, I added Gravity support to my [jstewmc/evaluate-number](https://github.com/jstewmc/evaluate-number) package (it's simple and I don't mean to promote it, but I needed an example haha). Now, anyone using Gravity can just call `$g-&gt;get(Jstewmc\EvaluateNumber\EvaluateNumber::class)` and use the service, no plumbing required.
If someone can access the data by logging into the web app, they can access the data by querying the API directly. There is nothing that can be done to prevent this, there is no reason to prevent this. All you can do is ensure that your user security is good enough to stop users from accessing records that they should have no access to. You can check for user agent or referer headers, but these can all be faked and the effort is not worth the result.
Thanks for the feedback! Yeah, I probably shouldn't have led with "framework-agnostic" haha. That is the whole point of PSR-11, and this is just an implementation. I should have said Gravity defines a simple convention and domain-specific language (DSL) to load services and configuration from files in plain old repositories, no framework-specific modules, arrays, etc required. I'm not sure about the complexity. Most of it revolves around processing the files: parsing the strings, resolving the identifiers, etc. I tried to make things as intentional and SOLID as possible. The empty classes you see may be different states of the same shared abstract class (e.g., File : Opened &gt; Closed &gt; Parsed &gt; Ran). As far as your questions, most of the answers are "I don't know" or "not yet" haha. It's still early: * **what are its unique features?** I'd say it's unique feature is a simple convention and DSL to load services and settings from files in a plain old repository like Composer loads dependencies (e.g., not to self-promote, but [jstewmc/evlauate-number](https://github.com/jstewmc/evaluate-number)). * **how does it handle complex examples? (eg: circular references)** It doesn't yet. But, I definitely want to add that feature. I've been bitten by the circular reference bug before when we used Zend Framework 2 and ran a big test suite (no offense to ZF). * **is it faster than available options, can the container be compiled?** I haven't run any performance tests yet, but I'm excited for [PHP 7.4's preload](https://wiki.php.net/rfc/preload). We're also looking at ways to cache the project's services and configuration in production to keep from reading the same (unchanged) files over and over again. * **is raw php the only config variant available, no yaml, annotations,.** Yes'r. It's only raw PHP so far. Ha, it's definitely been a hobby, and I've learned lots! Thanks for the feedback. 
And then this token can be used outside of the client-side front-end.
Thank you very much, I will check them out.
Thank you, I have then another question: what about parts of the Rest API what mean to serve only small details for the website itself, not really data delivering. I thinking on some rate limiting to ensure there is no DDOS attack or overuse, there is any further steps what good to know in this case? (All the typical security related steps (owasp) done or on the way).
Rate limiting is a good thing to include 
Yep, and for others aspects fail2ban [https://github.com/fail2ban/fail2ban](https://github.com/fail2ban/fail2ban) 
I keep forgetting that one. Wish i could host on linux at work.
Hmm.. I never had any issues while working on /mnt. However, I just realized that I added the entire source directory to the Windows Defender exclusion list. I also have a SSD, so that might be helping. As for the webserver, any service I launch on WSL is persistent until I shutdown my computer (i.e. they survice closing WSL): symfony webserver, mysql, redis, postgres...
My front door could probably be kicked right in by any adult and most teenagers but I still lock it. 
In particular with php!
We all know why. No need to explain. But to each their own if they enjoy building on Wordpress then by all means use the tools that you are good at. But lets not put it on a pedestal of engineering beauty.
This might also greatly improve the php execution speed, and php-cli into unix has so much capabilities!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
PSR-11 only defines 2 methods: `get` and `has`. It does not define how to configure the container, not even for a basic setup. That makes switching implementations almost impossible.
Because he's a pioneer. Nobody is doing that. He must be on to something. /sarcasm
&gt;Frontend r/php: We don’t do that here.
Now it saves all free-floating comments and whitespaces and can print it back as in the original file.
Kind of similar, but on a database level, you can use Postgres Foreign Database Wrappers to create a table directly from a CSV. Example: https://gist.github.com/NikolayS/a819f139c37e0d54ad4a4ca70764f225 MySQL has a similar concept using different table engines.
I'll try windows defender. I have a pcie x4 nvme ssd too and considering that I get \~50-100ms dev system requests with xdebug enabled and listening on a CentOS vm with just 2gb ram and 1 core, I doubt the performance issue is tied to hardware haha.
No, I mean... I don't know why... Does it have a reputation of something? If so I wouldn't know what. As a blogging and basic package website builder it has a pretty great reputation, probably the best, at least as far as I know.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Use the reverse SSH tunnels for fuck sake. Thanks for the guide.
Not a joke. I regularly interview developers and I had the same experience. 
Something I didn't think I needed, but this is niiiiiiiice
It has a reputation of being able to toss up and start blogging very easily. It can do anything you want it to do but its notorious for having security vulnerabilities via the plugins, often hacked when not properly updated. It's core code is not something that would be considered an engineering masterpiece and allows you to edit files inside of the admin UI which is a version control nightmare and a huge security issue as well. But there are teams of wordpress experts who can mitigate all of these risks but unfortunately there are a lot of non wordpress experts out there creating sites on a daily basis that gives it a bad wrap. I have had several wordpress sites I had to save from being hacked for whatever reason and it makes me cringe every time. On top of that there are commerce sites built on these things where the end user has no idea whether the person on the other end knows what they are doing exposing yet another risk.
1.So, this is not the place to get php help. I didn't know it. 2. I didnt know headfirst is bad, which book is good for learning php? 3. Thanks for your advice. i will keep it in mind. &amp;#x200B;
What is the use case for this library? Sorry for the dumb question
I don't exactly understand. But you can stop a query from any point. If you have Select $var fom a and you put on $var something like: '1 from b - - ' it should work. 
Are you running the webserver as root? I manually start it as normal user (since it persists between sessions). Beyond that, sorry. It would be due to any weird issue between hardware and WSL :-(
If you read the introduction &gt; It can be used to write static analysis, refactoring, metrics, code style formatting tools. Seems pretty straightforward to me
Awesome!
The webserver has its own user and group (www-root2:www-root2) or (apache:apache) depending on your linux distribution. I don't think which user starts the process makes any difference.
Then sorry, I'm out of ideas.
I just use the php engine its pretty good at parsing php
The point is to avoid syntax errors by completing any current query and commenting what follows. &amp;#x200B; For example something like SELECT &lt;malicious query&gt; from user will be modified to: SELECT 1; DROP TABLE users; --from user by inserting "; DROP TABLE users; --" There is now two queries who will be sent to your database. The first will just return 1, the second will do whatever the attacker want, and the rest is just comments who will be ignored. &amp;#x200B; That's why you want a bulletproof quote system, either by being sure there is no way to pass through the quotes, or by using prepared statements like "where colum = :column\_value" and let your library do the heavy work
Yeah you can, place your frontend and API on different hosts and only allow traffic to the API server from the frontend server. Your frontend will basically become a proxy/gatekeeper to the API itself. Thing is, all those partners will also need to use the frontend. Not sure from OP if those users should still be able to access the API directly.
The connections to the API will be coming from the client application which will be running on the client browser, meaning connections will be coming from whatever IP the user has. There is no way to limit this, it is a wasted effort.
We're doing it at my work. API itself at api.company.tld, interface for users as interface.company.tld. Users navigate to the interface which is no more than a fancy wrapper. All requests from the users go to interface.company.tld, which passes them on to api.company, processes the response and sends it back to the user. The users only connect to the interface, never the api itself. You can retrieve your token and attempt to make calls to api.company.tld, but those are dropped immediately. This way, we ensure all requests enter the API the way we want it to. We can have multiple interfaces (on different vhosts) which allow us to have one interface allowed to call /endpointA, while another is only allowed to call /endpointB, for example.
so in your case, when the front end webapp makes a GET request, the request is proxied through interface.company.tld, but thats not what OP is asking. OP is asking how to prevent requests that do not come from the web app, as in the javascript client running in the web browser.
My understanding is that a 'Model' is just a class representing the concept of a 'thing'. Most models - the vast majority, even - represent a persistent row of data, from a database, like a user or a product. But conceptually, they don't have to, no? This leads me to my followup question - suppose I have a web application, and I receive an object representing the web request, through which I can get the request parameters, request method, etc. While not stored in a 'models' namespace, would this object/class be accurately described as a Model (of the request)?
No.
From my understanding, models are just objects that store data. They don’t necessarily need to be mapped to a persistence layer. I wouldn’t put them in the same location as mapped models though. Just for the sake of sanity if I need to find it later.
Oh of course - I'm mainly asking from a conceptual perspective, not an organization/architectural one.
You're looking for [https://www.reddit.com/r/PHPhelp](https://www.reddit.com/r/PHPhelp) buddy. Wrong section.
Even then he is asking for CSS help. So more like r/css
Well, interface.company.tld *is* the frontend, and it sends the request to api.company.tld. Only interface.company.tld is accessible to the public, api.company.tld only accepts traffic from the interface host. You can try to have javascript call the API all you want, it won't answer. Use the interface, or it ignores you. OP is asking for a way to shield his API from traffic outside of their own webapp. If I read OP's post correctly, he's using a seperate API and frontend, which is exactly how we're doing it. 
Hey, Tunaflish, just a quick heads-up: **seperate** is actually spelled **separate**. You can remember it by **-par- in the middle**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey /u/CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". And your fucking delete function doesn't work. You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
Hey BooCMB, just a quick heads up: I learnt quite a lot from the bot. Though it's mnemonics are useless, and 'one lot' is it's most useful one, it's just here to help. This is like screaming at someone for trying to rescue kittens, because they annoyed you while doing that. (But really CMB get some quiality mnemonics) I do agree with your idea of holding reddit for hostage by spambots though, while it might be a bit ineffective. Have a nice day!
Shit, I analyze static refactor metric code style tools for breakfast. 
I know about [nikic/php-ast](https://github.com/nikic/php-ast) extension, it much faster, and it is a good choice if you write tooling in PHP and no need to handle PHP5
No, it does not. It’s definitely not the common practice, but you nothing stops you from creating instances of a class without actually storing any of the data in a database. Personally, I like the approach of the Django framework for models (not PHP, I know) :)
We are talking about two different things here. Here is what OP has: * www.website.com -&gt; loads SPA written in angular, react, vue, etc * SPA needs data from server (lets pretend its blog posts) * SPA calls API, wherever it is, could be www.website.com/api/blogposts, could be api.website.com/blogposts, doesn't matter * API returns HTTP response containing blog posts. The API might be an interface to another REST api, but again, it does not matter What OP is trying to do is prevent somone from seeing the data at www.website.com/api/blogposts if they are not using the SPA client. This is the part that cannot be stopped, and beyond rate limiting and security ACLs, there is no reason to try and stop it as the data is public in the first place.
A model is an object (or an aggregate of objects) that describe the state of something, including some business rules about what states are valid and which are not (and how the state changes one way or another). It doesn't need a database, it doesn't even need to be persistent. For example the basic model for a checkbox control is an object with a single boolean field "checked". A checkbox represents that state and that model, everything else is a presentational concern.
Can we ban these damn bots? this is ridiculous
Your understanding is correct. Some popular frameworks (cough...laravel...cough) use the Active Record pattern (or anti-pattern, depending on your perspective), in which you need to extend a base “Model” class to use all of the convenience methods it provides for mapping an object to a database structure. I am personally not a fan of this pattern, but many people are.
You're just a bad programmer. Instead of wasting your time here, improve your knowledge.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I was making a joke. I was being silly. Instead of wasting your time here, attend anger management classes. 
Very true.
So funny, everybody laughed. You have an inferiority complex. Are you only capable of shit posting?
Data object contains only data. If data object represents a table or more tables that’s Entity. Model is an Entity that contains business logic too. So the Model class is basically an anti pattern or legacy pattern from ages when programs had separated by definition of MVC. They thought if there is a Controller class and an html view then there should be an another class a Model. And the MVC has implemented. But today Model is not a class. Model is a group of layers of a software.
No, that makes switching implementations easy. As you only inject the container interface you will only have to change code where your container is constructed - which is one location in your codebase, right? - and your configuration if a new implementation requires a new way of configuring. It’s kind of the point of interfaces - and psr’s in particular - to make switching implementations a breeze.
TIL: ActiveRecord can be an anti-pattern 
Use PDOs prepared statement $pdo = new PDO($yourDns, $yourUser, $yourPassword); $statement = $pdo-&gt;("Select price from products where article_number = :artnr"); $result = $statement-&gt;execute(array('artnr' =&gt; $artNr)); With this you have your prepared statement and PDO will use unbreakable quote marks as such it is marking sql injection near to impossible. Also PDO works with multiple databases and you can reuse your `$statement` for loops E.g. for($i = 0; $i&lt;count($artNrArray); $i++) $result[$i] = $statement-&gt;execute(array('artnr' =&gt; $artNrArray[$i])); As such it's more safe and much more reusable than just building the query directly as a string and then executing via any library. Also as mentioned above PDO supports multiple database types other than libraries like my_sqli which are awesome too but not so multipurpose. In any case prepare your sql query so it will escape the user input or build a function that checks every possible sql injection code and filter it (have fun with 100+ lines of code just for something prepared statements do for you)
SDD ?
Yes, that's precisely (bugger off, spellingbot) what we did. [www.website.com](https://www.website.com) has the user interface and fetches its data from [api.website.com](https://api.website.com) (it matters a bit). [api.website.com](https://api.website.com) allows traffic from [www.website.com](https://www.website.com), but not from [mycunningplan.com](https://mycunningplan.com) or even the console in your browser. Excuse my horrible Paint skills: [https://imgur.com/a/NeezwOg](https://imgur.com/a/NeezwOg). All you need is some firewalling on the API host and you're done. api.website.com/blogposts cannot be accessed, but [interface.website.com/blogposts](https://interface.website.com/blogposts) can. Want it to be a single page? Sure thing, have your webapp not make its calls to [api.website.com](https://api.website.com) but to itself and proxy it through, done. &amp;#x200B;
Wait, are you talking about yourself? Because... "inferiority complex" really seems to be what you've got. You can't even accept I was being silly and you exploded for no reason. You probably always have to be right. 
delete
It's been a bit since I read about why it can be considered an anti-pattern, so this may come across as irrelevant, but my problem is that Eloquents models are tightly coupled with the database abstraction layer. Eloquent gets away with convenience because it's models are aware that their data is coming from a database. In doctrine, models simply inform a database abstraction layer what the relevant table and column mappings are, but it doesn't necessarily "know" that the data is coming from a database. I prefer this because it feels more polymorphic to me; it also reminds me a bit of [Go's struct tags](https://golang.org/ref/spec#Tag) which I'm a big fan of.
There are a few modern resources floating around, i found this one: https://phptherightway.com/
Exploded? What are we in grade school now? Come on, why do you have to be so sensitive. I didn't appreciate your comment because it didn't add anything to the discussion. It seems to be a common thing for your posts. You're not using reddit as a platform for discussion, instead you're just wasting everyones time. If you have nothing to say, then just don't say anything. We would have avoided this altogether.
Again, we are missing each other here. But ignore all of that. What I am saying cannot be done is that you cannot stop someone from using post man, curl, guzzle, or anything else from accessing interface.website.com/blogposts. This is what op was asking and this is what I’m saying cannot be done and shouldn’t be done for that matter 
Are you using xdebug? That slowed composer down for me once.
The way I read it, OP is asking for ways to make sure the API is only accessed through their webapp, which can be achieved this way. There is no way to fetch anything from the API without using the interface OP wants people to use. I fully agree that the interface itself is still accessible to anyone who knows how to make a web request, and there is nothing to do about that.
https://github.com/hirak/prestissimo Give this a try 👌🙌
&gt; If data object represents a table or more tables that’s Entity. I like DDD's definition where an entity is an object has an id(entity). In contrast ther are value objects that are defined by their attributes. Example: You'd model a $50 bill as a value object with attributes currency and amount. You don't care which instance/copy of a banknote you have, only the attributes count. BUT if you're the central bank you may model a banknote as an entity with a serial number as they may care which exact banknote is being handled.
Model is just some data structure, that represents some part of your business logic. You can create model and don't store it in database. In MVC no word about storing it. In other words, model is some abstraction and storing it, depends only on your app logic.
Common arguments (which I tend agree with) are that it breaks encapsulation and is a pretty ugly violation of SRP.
Domain model !== database row. For (a super simple) example you might have `class Apartment implements Model {}` which reads and combines filtered data from tables `furniture`, `appliances`, `people`, `cities` to construct the logical model to be used in your application.
OP wanted to make sure nothing else could consume the API that the JS clients were using. www.company.tld is ~not~ the front end client. The JS web app that loads in the browser is the front end client. This is the client that connects to the api/interface/etc. I really feel like i am talking in circles and we are both agreeing and disagreeing to the same things, so i'd like to stop now before i frustrate myself.
I'm not using Reddit in the way that _you_ want me to use Reddit. And yes, you "exploded," or whatever word you choose to use for your personal attack. The comment of, "Instead of wasting your time here, improve your knowledge." or "What are we in grade school now?" were both totally unnecessary and an intentional attack. **Perhaps you thought my initial comment was making fun of yours.** If that is how you felt, I'm sorry. That was not my intention at all. I saw something and I commented on it. In hindsight, it was funnier in my head that in was in text. I'm not going to delete it though. At this point, I think we both need to agree to disagree and stop wasting each others time. I wish you the best of luck in whatever it is you're doing with your life.
Might be low version restrictions, which makes it check a lot of versions. Theres a plugin to update your composer.json to the versions you are currently using, but i dont have it at hand. Should be easy to find though. If not, i might be able to get it later.
Within reason. Entity Framework and Rails make heavy use of active record. In the .NET world most tend to abstract it away into repositories, but still use active record as most implementations isn't made with immutable models. Gitlab is a good example you can actually look at if you're interested in how the pattern scale. It can be as elegant as data mapper. I prefer the former with a good style guide.
Very large version selections maybe, if you have a bunch of vague package, it need to make a bunch of version check
So basically a container interface implementation that allows libraries in some ways to inject stuff into the di container? I would make that clear in the first line of the READMe, but that’s my personal expectation management. So, the idea of having a some form of di in a package does not appeal to me; it is MY project, and therefore I don’t like the idea of having a package put stuff in my di container. The only valid use case I see for that is for an ecosystem that encourages something like this, for example Symfony’s Bundles. Let’s take that part away and just look at it as a psr-11 implementation. A few observations after going through primarily your docs: Why do you limit the length and structure of the service identifier? Why would you care if someone wants to give services names without dots of namespace separators? In all the examples you use the name of the implementation as the service identifier. The whole idea of dependency injection is to inject a functionality _without_ any knowledge of the actual implementation. Typically this is accomplished by typehinting an interface. It would therefore only be logical, in my opinion, to give a service the name of the interface and not that of the actual implementation. That way if you change the actual implementation the service names still make at least some sense. What is the idea behind the aliases and namespaces? I feel it only obfuscates a relative simple operation. You give a perfectly fine argument for using `::class`. That’s enough if you ask me. I would personally not use folders that start with a dot. My IDE hides those folders by default. You allow a folder per environment but I don’t see any explanation on the order these files are loaded. That might pose an issue when using services from other files in the same folder. I would like to see some additional examples on using services and settings in the instantiation of services. And why would you allow access to `$this`? That means you give the configuration access to the private methods of Gravity. For readability I would pass Gravity - hinted with an interface of course - as first param of a callback defining a service. Removes some “magic”. I don’t think it is a bad library, but I think it has some design decisions I would have done differently. There are a lot of di container implementations that are simpler, more feature complete and probably more robust than yours. But if it works for you and you’re happy with it, then I’m happy for you :)
Are you running xdebug? That slowed down my composer once a lot.
OP is not asking for css help. OP is looking for this https://laravel.com/docs/5.7/pagination#customizing-the-pagination-view
Entity Framework in .NET is *not* an active record style ORM it's the data mapper style. 
Some technical questions I would ask a PHP candidate, depending on skill level and the role they are interviewing for: --- - What are the benefits of static typing? (Purely to gauge some skill level) - How would you debug your code in situations X, Y, and Z? (This reveals a little about their thought process and whether they know about debugging tools or not) - How would you manage code style in projects? (I want PSRs to be mentioned, bonus for automation via PHPCS or similar) - How would you connect to a database when using PHP? (Minimally PDO, optionally abstracted with a good library) - Can you explain the difference between composition and inheritance? (Bonus points if the candidate can explain pros and cons from each) - When would you _not_ pick PHP for a project? (Liking PHP is great, but knowing when to leave it in the toolbox is greater) - How would you ensure your code is in working condition without extensive manual testing and debugging? (Gauges knowledge and interest in unit/integration/e2e/etc. testing, related tooling, and so on) - Can you explain what a DI container is/does? Why would that be useful? (General technical skill level question) - What is your favorite PHP framework? (Character question mostly, no explanations required and there are no right/wrong answers) - What is your favorite PHP package/library? (See above) - What is the strangest project/library/function/class/piece of logic you have written in PHP? (As in "well I did write a chatbot in PHP once" and similar, this question is mostly to gauge the candidates interest of stepping outside their comfort zone and whether they are capable of doing neat things there) - Can you explain what a PSR is/what the PHP-FIG is? (To see if the candidate is in the know of the PHP ecosystem and community at some level) - To whom or where do you go for help, when you run out of ideas when you're stuck? (I want to know if you're first going to Google by yourself, or if you're going to constantly badger your teammates with the simplest of questions) - How would you setup a build and deployment pipeline for a regular HTTP-driven PHP application that is hosted on a single server instance? (Adjacent knowledge, even having a whiff of how applications are built and deployed in general tells me that they understand a bit more than "how to write code") - What do you think of WordPress? (This is a good question to gauge the candidates understanding of picking the right tools where they make sense (e.g. "our company has a blog, why not WordPress installed next to an application?"), instead of instantly dismissing it as a "shit system that no one should use because reasons and the big boys said so") --- I know all interviews are different, but hopefully these example questions spark some ideas for you to go and learn something new in preparation for yours.
So... if I run this "php-parser helloWorld.php" it will print the "Hello World!" from echo "Hello World!" inside the php file? &amp;#x200B; If so what's the point of this? What is the advantage over the PHP parser or HHVM?
No. You could persist to a flat file / csv file for example, or indeed to nothing at all.
Can't say I've ever used it, but can see situations where I could if I was so inclined. It kinda feels like a shorthand way of creating a strategy pattern without needing to create classes. 
I thought this too, but you could just create a (reusable) function with a foreach loop in it too right? Achieves the same thing array\_walk does? (as far as i can see)
You'd still probably do it in the form ``` $walker = function($key, $value) { return $value * 2; }; ``` Rather than walking the array inside each function. That way if you want to apply it to just one value, let's say for a test, it's no problem.
Oh get a room 
No, not at all One of the nice things about the old Code Igniter MVC Framework was that it was extremely easy to use it without a database - which could come in useful at times. I've not tried with anything more modern, but I my impression is that it would be more of a stretch.
So when are we getting goteliphense?
I don’t think he’d want to.
A model is a noun. So no, but they are most often tied to database record(s).
/u/Tunaflish might be talking about CORS, which will stop JavaScript in the browser, but it will not stop other HTTP requests.
Oh, for sure, it's not a bad idea to use a token or lock your door. However, in answering OP, using a token or locking your door won't stop someone who wants to get in. A big difference too is that you give out tokens to your users, so it would be like locking your door but still handing out keys to everyone.
I've been interested in this. I'd love to find a solution that allows it to be used in database references etc as well. It seems that this might do that. &amp;#x200B;
try \`\`\`-vvv\`\`\` flag, and see which process that make it slow, it usually your dependency definition that make it slow to resolve