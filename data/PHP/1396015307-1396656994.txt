After reading this post, I had to double-check and see when it was written; it honestly sounds like a pre-5.3, pre-Composer view of PHP. I'd describe the state of PHP in the exact opposite way. If anything, it's had a massive breath-of-life pumped back into it over the past 2 years.
Imagine building one of those fully enclosed TV / entertainment centers, but then forgetting to leave space for the TV to fit. You don't necessarily need the TV right away, but you need to plan for having it, else you may have to rebuild a significant portion of the entertainment center. Writing code is like that. Modularity is important, but it's not a substitute for looking at the big picture and where you WANT to be down the road. 
&gt; When it comes down to the final product, how much of the framework will you actually be using? These aren't client side frameworks where the code has to be downloaded to the user; they don't load every class in the framework for every request. The idea that they aren't "production ready" is laughable at best. According to [this article](http://symfony.com/blog/dailymotion-powered-by-symfony) here are some big sites powered by Symfony: * Daily Motion (40 mil/pages month) * Delicious * Yahoo Answers Production ready? I think so.
On Windows holding the control key while hovering works too. Thanks.
If I were you, I'd look into the payment-systems, to get an overview on how they work and what they expect from my framework to work. If you keep that in mind while developing, there shouldn't be any major problems coming up. I think most of them work almost the same way. There shouldn't be any big surprises coming up. 
The post never said ruby frameworks were simple nor did it say codeigniter was bloated phil, the writer actually praised CI and Symfony. I think the point the writer was trying to make was how easy ruby reads compared to php, In a way I kind of have to agree.
The open source platform doesn't exist as a legal entity. You can't sue the project; you can only sue people who contributed to it. That only generally happens with copyright violations, as most open-source license agreements make it clear that the contributors do not claim that their contributions are fit for any purpose. In general, your company could be liable, as you'd be the ones recommending that this platform is the solution to their problem (maybe). Exactly the same would happen if you were installing, say, Sharepoint for them. In general, they'd have a pretty hard time suing you unless they could prove that you were negligent; that you failed to perform an update once you know that the system was likely to be hacked, for example. A half-decent contract should be able to get you out of most things, though. In reality, though, you won't get sued unless you get into heavily regulated fields such as healthcare, at which point you want to employ a lawyer who understands HIPAA or whatever the equivalent is in another country. I'm not a lawyer, I just study this stuff for fun.
Epic troll "don't fight the revolution"
Well done!
\*Grabs Popcorn\*
Problems down the road are good problems to have, since they imply you're still in business. 
For the first time the developer realizes that it's pointless to build a PHP replacement. This technology does seem to fill a nice niche. If someone would pull together a package that seamless goes PHP &gt; Java bytecode &gt; Dalvik, now that would be real interesting.
First as fideloper said, don't use the Memcache class, use the Memcached. Secondly, don't use Memcached, use Redis. It offer the same features, plus more. It's as easy to install and use, and offer invaluable tools like the CLI tool which allows you to explore your keys, which is damn near impossible with Memcached. More info here: http://redis.io/
/r/forhire 
[/u/LaravelOhYea](http://1.bp.blogspot.com/-K9HAGiRy0wM/TikpTX8mVvI/AAAAAAAAA7g/nOUtAcTJig8/s1600/vector.jpg)
The repository is named incorrectly. Besides the obvious misuse of the word "facade", the package name prefix should be `Auroraphp.*`, not `Aura.*` (since it's not an Aura package).
Yep. Certainly not as thorough as it should've been. Was a bit rushed last night. I'll do better next time.
You should never allow yourself to get sued for bugs. If providing a service you should limit your liability by having the client sign an engagement letter or a service level agreement. Bugs are inherent in all software. When a business is hacked, do they sue Microsoft/Oracle/Debian/RedHat? Of course not. Any license you choose for the software will also limit liability. For example, here's the third and final paragraph of the popular New BSD license: &gt; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND &gt; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED &gt; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE &gt; DISCLAIMED. IN NO EVENT SHALL &lt;COPYRIGHT HOLDER&gt; BE LIABLE FOR ANY &gt; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES &gt; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; &gt; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND &gt; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT &gt; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS &gt; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
If you track down the most popular open source projects in PHP, chances are you'll find its contributors offering consulting, training and other services for that project.
Haha fair enough, thanks for letting me know. It doesn't look really bad, but doesn't look amazing at the same time. It does make you think how secure it really is. Plus with their contact details being Hong Kong alarm bells are ringing. Though with it all being on github it should've all been peer reviewed I guess.
IonCube and Zend Guard offer bytecode encoding that will truly protect your code from prying eyes. Zend Guard is a more enterprise-level product, but a lot more expensive and requires Zend Optimizer to be running on the server. I honestly don't have enough experience with both to say which one is better.
Where does your competitor store their data? ;) To state the obvious, non-US companies have become understandably nervous about services that store data in, well, the US. The domain of the NSA spy snoop masters. If a potential client volunteers a concern, and you can help with that, and your competitor cannot, then you just discovered a competitive advantage. Use it.
\*Grabs The Beers and shares with /u/philsturgeon\*
The best buyer would be that big competitor. Pitch it to them and tell them if you cant find a buyer, you'll open source the code. They'd pay just to keep the code off the market.
The article seems to lack any real argument. It doesn't say why PHP is a one trick pony (to me this would imply that PHP's popularity is tied to a specific product, which it isn't). It seems to be more of a case that the author wrote an application in a ruby framework which was easier to pass over to another developer; while when the author has written code in PHP it seems to turn into "winding tunnels of code which are hard to follow". I suspect the author should investigate other PHP frameworks. There are plenty of them. CodeIgnitor probably isn't the best to compare to/against. 
Heh. :-)
A lot more of the API is covered now, we're just missing Application Fees, Balances and Events, but I expect to have that wrapped up this weekend. After we get those items, I'd expect a 1.0 release. We're still working on code coverage, which is a lot easier now that I've added Travis CI to the repo.
You could offer your software as a service to others. 
Quick note: if you're referring to OwnCloud in this context, I'd link to [owncloud.com](https://owncloud.com/), which is their commercial site, and more of a direct competitor to Dropbox (for businesses). Owncloud.org focuses on the free/open-source side of things, and is more of a self-hosted Dropbox/Spotify/Google Calendar.
I think the sponsor bit is a great idea - if people using it helps them, then it's a win for them, and it helps with publicity/legitimacy.
&gt; should stick around for a while You should stick around for as long as it takes to get something meaningful out of it. Remember you can still charge for support and maintenance. You can charge for special services on top of the platform. I mean, there are a ton of ways you can still make money with open source software. There a lots of different and creative business models. Of course, not everybody gets to make it to the top of the opensource business. But you are not lost yet. If you stick around and the project turns out to be successful but you do not earn any money directly from it, you can try to place ads, you can consult for other businesses, be them people who use your product, be them competitors. If none of this works out, your 'failure' will still look awesome on your resume and there will be a lot of people willing to give you a chance in their company based on this kind of experience. I am a self-thought webdev with 15 years experience. Through the years I've come to realize that building working ready-4-production software with a robust codebase must be considered something successful even if it isnt good for making money out of it, just because it is so fucking hard and challenging to do it as you may have noticed by now. Also: try to get some sleep before you make up your mind. That is probably the best piece of advice I can give you. EDIT: some minor corrections
1. How long do you leave a teabag in to make the perfect brew? 2. Do you put milk in before, or after the tea is brewed?
&gt;However, from what I've read and heard over the years is that starting an open source project is often as time consuming/prone to failure as starting up a business. But the nice thing is it wont cost you nearly as much to keep it running.
thank god, too long have we been denied the power of active record. 
This article doesn't explain the title, and doesn't offer anything but the author's personal tastes, unsubstantiated at that. It lacks a point, reasoning or... well, any substance whatsoever. It reads like the author was straining desperately to write an article for the sake of writing an article, while having never read an article before.
You might find a more reliable answer in /r/cscareerquestions
Good god man, only devil-worshippers and carnie-folk put their milk in before-hand. We're civilized around here. Oh, and Typhoo, 5 mins &amp; out.
Thanks, made a cross post there
You say you've got five days to learn something; do your homework on HTTP, then. It might not pay off at once, but it sure helps. Also, I think you should slow down a little. Don't try to cram everything in a week. [420 Enhance Your Calm](http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error).
Congrats man, hope it turns into something awesome. You might want to try giving Node &amp; Grunt a go, they're both extremely easy to get started with. Even just setting up a watch+livereload would be a start. And then perhaps learn a few of the other popular tasks: [cssmin](https://github.com/gruntjs/grunt-contrib-cssmin), [concat](https://github.com/gruntjs/grunt-contrib-concat), [uglify](https://github.com/gruntjs/grunt-contrib-uglify). You could get a lot of knowledge &amp; future ideas out of just a few hours effort (under 3 or 4, it's basically as simple as installing node, installing the packages, and following their examples on Github).
Wow, now that's bad...
Quick FYI on this, we've got it hooked up to Travis CI now, and all tests are passing. Working on code coverage and finalizing API coverage now.
Awesome, thanks!
I'd say work on a project of some sort (personal or otherwise) that is in the area so you're all excited about something and can talk about a fresh problem-solving event. Otherwise, I have no advice. I as second choice for my position since I interviewed so poorly. Now they have no idea why I wasn't their first choice (really lucky the first guy declined the offer!).
Thanks, that Balanced look really good, unfortunately not available in the UK though!
Thanks! I was thinking maybe I'd incorporate PHP, jQuery and drupal into making a small demo website(something simple like an animated photo gallery) just to have something to show them when I interview.
How to Google something that has been asked a thousand times before.
Keep it simple so things are bulletproof and snappy. If you don't have design skills, perhaps show them a couple of ways the same thing can be accomplished. I have crap design skills, but my ability to adapt and offer different methods for the designers greases things. Oh, and good luck!
"......and Joomla" Run. Run in the other direction. In fact, move the hell out of your city, since you are sharing oxygen with Joomla breathers. Oh god the humanity :(
With you there, I fucking hate joomla. Hate may not be strong enough of a word for how I feel about Joomla, its just horrid to work with. Wordpress on the other hand, I fucking love wordpress. Plugins and child themes make custom development great. I've even taken themes that weren't child theme friendly and made a child theme of them by using the child theme to dequeue and unhook the non-child theme friendly parts of the parent theme and requeue them correctly so they are child theme friendly.
What's bad about Joomla? I've never even looked at it, could you enlighten me?
Sweet, thanks!
Sweet, thanks a bunch!
why not Eloquent?
How is Doctrine easier to setup than Eloquent? It requires a lot of configuration upfront that is extremely time consuming. Also error logging in Doctrine is difficult to perform which leads many people to turn on query logging at the database level. We use Symfony + Doctrine on a high traffic website and we had to write our own error handling into Doctrine due to the fact we simply cannot easily log a billion+ queries a day. 
Make a file browser inside your application, and use that to browse/locate the file off of the (presumably shared) folder. The webserver then needs to download these files from the shared folder at intervals.
But how would I know on the server side that the path to a particular file is P:\Projects\ShippingLogs\CustomerNumber\ProjectNumber\LogA.xlsx if the browser doesn't expose that information to me client side?
A user is sitting at their computer, using the application. They want to specify that the shipping log document for a particular shipment exists on the network at P:\Projects\ShippingLogs\CustomerNumber\ProjectNumber\LogA.xlsx. Short of making the user go locate the file on the network and copy and paste the path to that file into a text box in a form, how does the server know anything at all about the path to the file? It knows the file name, it knows the extension, the size, and lots of other stuff about the uploaded file, but it SPECIFICALLY does not know the P:\Projects\ShippingLogs\CustomerNumber\ProjectNumber portion for security reasons. The ONLY thing I need to know on the server side is the string: P:\Projects\ShippingLogs\CustomerNumber\ProjectNumber\LogA.xlsx
&gt; IonCube and Zend Guard offer bytecode encoding that will truly protect your code from prying eyes. Truly? No. They're possible to bypass, given time and/or money. 
Yes just implement a file browser that actually accesses the server, it should be easier for a user to navigate through that than doing some copy&amp;paste. The paths etc are all the same. They don't even need to do a file upload.
Well, as you found out yourself, that's impossible. So stop looking at that problem and find a way around it! What do you need that specific path for? If it's for looking up that file from the server-side and see if it has updates later on - you don't really need that exact path, but the path from the server to that file. A web-based file browser where you let the user browse to the given file in an environment the server controls (more so than the browser) would let you do this. Stop telling me what you need and tell me why my suggestion wouldn't work.. :-)
You mean without composer "package manager" specifically, or without an autoloader, or both? It's really simple: 1) Download eloquent code 2) Look in composer.json for dependencies and download those 3) Repeat #2 for those dependencies 4) Repeat #3 for every dependency's dependencies 5) make sure to require_once every file 6) Done! See how simple?
P:\Projects\ShippingLogs\CustomerNumber\ProjectNumber\LogA.xlsx is not a network location, and is only useful to the specific client PC's file system. If files are being uploaded to the webapp I'm not sure why the webapp would ever need to know that the file also exists elsewhere. If only to store a reference to another place, why upload the file to begin with? Having multiple instances of files floating around can lead to disparity between files on the network share and files uploaded to the webapp, bad practice! Though, if for backup purposes, they should consider a separate network share for the easiest copy/paste solution. You could skip the need to know the absolute path requirement altogether if you open your network share to the web server and let it index the entire Projects directory itself, or move to a shared file hosting solution like Dropbox which provides an API which can be accessed from PHP (as well as integration with the client PCs file system).
By the way, I think a better site for comparing them is http://choosealicense.com/ http://opensource.org/licenses/category is a good listing and reference
Add projects for sure. If you have code sitting in a repo somewhere (github, bitbucket) add that as well (you can find a spot for websites under "Edit Contact Info" on the top card). You said that you ran your own business, this should be added to your experience section. Also, you have an errant comma in your PHP skill. Finally, add a summary explaining what you can do and what you're looking for. Treat your profile like you would treat any hard copy resume.
Not familiar with OPC. I'm fairly certain all the rest has been built in or had free mods available for a number of years now.
First I've heard of this, so wanted to check it out. But from what I'm reading you can't use this with your own cloud service, like amazon's s3, you have to use their "OwnCloud" server software?
Not directly, just thinking about what I would do if I was faced with the same situation. I don't know a lot about your product and I notice that plivo is a service and I'm not sure how that fits in with what you're doing, so I'm making a fair amount of assumptions here. It's won't be easy, especially since you're likely going to see a big increase in development work if you are successful, which you have outsourced to someone else. You'll have to really earn your keep with marketing and management (especially project management and client/dev communication) or else you will be dead weight. Spend your time thinking of ways to add value to the customer, while still letting anybody who wants to run the software themselves do it without your explicit blessing. Providing configuration, installation and customisation support is a thing you might have to get up to speed on. Can you offer integration of your product with other products such as CRM's, other phone systems or things along those lines? Really, just take a look at your customers, understand what they're doing and take away their pain points in exchange for money!
whatever happens, you'll be able to say you've gained practical working experience at a big company and have a reference for future oppertunites
Well I'll do my best to avoid it then, thanks!
please dont let me put you off it! everybody is different, I just know of a lot of people who do not like it, i also know some that love it
Hm, I really don't mean to rain on anyone's parade here, but unless you personally have web development experience at a senior level and know how to hire a developer properly (and took the time to audit them properly), I would wager a 95+% chance that the developer you outsourced (another strong indication) is about to hand over a pretty, um... low quality product. I work as a senior developer at a marketing company, I run my own company, and I've invested six figures and countless hours into personal projects. I've made every mistake in the book, and there are a few warning flags on this. You said your experience is with marketing and design (10+ years), which means you probably have that side covered (and it's a *seriously* important side of it), but there's not much you can do about a terrible codebase once the infrastructure is built. On the other hand, terrible code quality hasn't stopped quite a few major products from succeeding, so there is that. Anyway, whatever you decide, you need to take a minute to *really* consider what level of competency you're getting from the developer right now. The reality is that it's very easy for someone without coding experience to see "good results", in the same way that someone without artistic skills has their mind blown when someone can scribble something other than stick figure. Given all the variables you mentioned, I would open source it and immediately start prodding the php community here for insight on the quality. Also, bear in mind, this is just guesstimates on my part and I could be entirely mistaken. I've just seen other situations like unfold in not-so favorable ways.
Does the server have access to their network? Or is it possible to grant it permissions? Otherwise, what you are asking for is not possible due to security constraints. Even when you have a file input in a webpage you are told it belongs to c:\fakepath\filename.ext there is no getting around it without going to plugins such as flash. And even then.. there are plenty of constraints you have to workaround... though may be possible. If the php server had access to the network you could prob manage to make it work with a lot of work though.
I don't currently know of anyone in a position to hire someone that would rely on just a linkedin profile. Great for extra info. But you cannot just rely on that.
I'm not sure that I understand your question. The main part of OwnCloud *is* the software - it makes it relatively easy to turn your server into a dropbox/music streamer/calendar/etc. So you have to have a server to run it on, yes...I'm not sure if you could use S3 or something to store your data, I'd guess it's built to run off the local filesystem, but I'm not sure ther.
You can do this with a Java applet but it isn't a very nice solution. 
How is the cost of living there compare to salary?
Not crazy if you find a place to share or live out in Brooklyn. Get on Craigslist. If you don't die you'll probably love it.
Wordpress and Ghost are more examples, no? Both open source projects with paid hosting solutions. Or are those not quite the same?
Use flash! A very simple solution. 
Yes, you can mount s3, google drive or dropbox in your owdcloud and share everything through a unified interface.
Fortunately my background is web development and online marketing. I started my career as a programmer/web dev, and whilst my coding practices haven't kept up with the latest trends, I'm able to tell the difference between good and bad code. Valuable insights, and it's always good to have someone be the devils advocate. 
Just replying directly as I'm not sure if you'll see my edit above. I've decided to take this advice and open source. The current project is http://www.calltracking.hk
Trick question; the perfect brew comes not from bags but from loose leaves.
Still waiting for more PDO development...
Nice to see MySQLi part of the stack - although it doesn't offer some of the features provided with the newer/better mysqlnd extension such as the [mysqli_result::fetch_all](http://php.net/manual/en/mysqli-result.fetch-all.php) method.
&gt; http://www.example.com -&gt; Redirect: 301 http://example.com # www is just excessive nowadays You lost me here. Without the www, you're stuck using A records to point to your server, which takes away all the magical things you can do with CNAMEs when it comes time to scale and build out a more robust, distributed infrastructure. There's a reason almost no large site is going without the www.
Yup. Saw hacklang and it's like everything all of us have been bitching about php for years..implemented or fixed.
&gt; inconsistencies in function naming convention Yeah.. i found the one who dont use an ide during programming!!! i do recommend phpstorm
Curious: What features of PDO are lacking? I've used some bits of PDO on HHVM, and the stuff I've tried works.
The fact they are using Excel for their logs seems terrible in itself. Why don't you just include that functionality (to log whatever is needed about a the shipment) in your application. Kill two birds with one stone...
The other databases ... it looks like they only support mysql and sqlite
&gt; putting them in Github proves that you code. YMMV: I recently did an interview where the interviewee eventually admitted that he bought the code to put in his Github account.
It's too bad they removed the built-in webserver, it was useful in development environment, just like PHP's built-in webserver.
This is what I would do. Why do they use the Excels? Is there a specific reason they save that information in two places? Because you could expose the information they need for these files through your app and let the database control the information.
This is exactly what stops us, and when I checked session support was missing as well (no idea if that was added more recently tho)
Lemonstand has a small but agile team of developers and v2 will quickly come up to par with the core features of v1. After years of switching from one ecom platform to another that sucked, I've been very happy with Lemonstand, and have clients selling &gt; $1 million a year on it with no platform-related issues. Compare that to the nightmarish Magento CE which some other clients use, which has a head-wreck of a code base compared to Lemonstand. In fact, a lot of our clients have come to us to use Lemonstand after having meltdowns on open source platforms, or just being limited by other commercial platforms (Yahoo, Volusion, 3DCart).
Up until recently I'd agree. But I started to put milk in beforehand recently and it's much better; allows longer brewing time in mug and stops boiling water scalding the tea.
The link to "Is PHP unsafe? or a bad programming language?" should not be on there! Some random article by some nameless person, giving the same bs arguments in favour of php: "big companies are using it as first programming language right now, companies like Facebook or Yahoo." - no they're not, they are just stuck with it as legacy! "If you go to Google and search for information, I’m sure you will get a lot of that." - yeah you will, most of it outdated and utter garbage! "There are a lot of software written in PHP, such as WordPress, Drupal, Magento, etcetera, think a bit, these applications are used by whole world." - boooring, not exactly new and cutting edge. What a shit article. I like php but I don't think these same old defensive arguments need to keep being re-hashed. There are much better strong points about php - it's official documentation, modern frameworks like symfony2 / laravel, speed of development.
Shame it's currently broke though
Why do you think that? That's what they say in the blog post.
ha, though to be fair, it shows a certain kind of ingenuity. I pay dev wages, dev spends part of his wages getting code from freelancers, dev completes my projects as required, dev spends rest of the day browsing reddit. 
I'd be okay with that, I think.
http://www.theregister.co.uk/2013/01/16/developer_oursources_job_china/ - lol. 
&gt; With HHVM 3.0.0 we aren't going to ship an HTTP server anymore. https://github.com/facebook/hhvm/wiki/Libevent-Removal
Like all tutorials from that site, this script is dangerous and riddled with errors. For your own safety, please do not use this script because a malicious Excel sheet can destroy your database, since the author does not escape any of the data. Not only that, but: - removing the `ini_set` line will result in lots of messages, because the author uses the word `cells` as a key instead of a string: this was common practice in the PHP 3 days - A non-malicious excel sheet with single quote marks in it will result in at the very least missing data, but more likely cause the script to error out, leaving you with a database filled with only part of the excel sheet data. - if this is a big excel sheet, it will be a slow script. The author should have collected all the values and then executed a single INSERT query at the end. - the `border` attribute of the `table` element has not been valid since HTML 4. **Edit:** *So I commented on the site that this code is dangerous, and included [a link to explain why](http://www.php.net/manual/en/security.database.sql-injection.php). ~~The comment was removed.~~ I see more dangerous stuff on there, any beginners reading along should stay away from their code. Also, /u/itty53 has [caught them stealing](http://www.reddit.com/r/jquery/comments/20vwjz/how_to_create_fly_to_cart_basket_effect_using/cg849tl) from another site.* **Edit 2**: the comment seemed to disappear while admin approval was pending. It got approved now, and the SQL injection vulnerability is gone from the RAR archive, although the article itself still has the vulnerability in it.
There is an excellent library for writing and reading excel sheets: PHPExcel. Though not perfect it is widely adopted and properly maintained. It would be a better choice then writing your own class/library.
That sounds interesting. Is it the same one that the article mentions? Can you post a link?
Sure! https://phpexcel.codeplex.com/ It is not the same as the tutorial.
Since your application has access to the same drive, you could have a process that indexes all the files on the network drive, making and storing a hash of the contents. Then use a [javascript file loader](http://www.html5rocks.com/en/tutorials/file/dndfiles/) to load the file in the browser when the user wants to make a reference and perform the same hashing, so you can locate the same file on the network drive.
Great job. I haven't used it yet, but I'll glad to give it a whirl very soon. By the way, I saw an issue (issue number 20) about adding Phalcon framework support. Is this still in the works? Is there some way I can do this while you're working on it? Thanks!
I'm sure it can be done. But ........ Why!!?
As some have already said: just be willing to learn. They won't expect the world of you, but you can learn a lot from them. For Drupal learning: Check out [Views](https://drupal.org/project/views). That's almost the most important part of Drupal. I've worked 2 years as a Drupal team lead, if you need any help (now, or when you are working) you can always PM me. As for PHP, You might wanna check out the [Symfony Book](http://symfony.com/doc/current/book/http_fundamentals.html) (Mostly the first chapter). It gives a geat explanation about HTTP and Headers. Good luck
There really isn't enough meat in your profile to give me any idea of your abilities. As other posters mentioned, link to as much previous work as possible. You also said you are running your own business, why isn't that listed? If you are just out of high school it is very cool to know you are already an entrepreneur. One other thing you could try is odesk or findafreelancer or elsewhere just to get some freelancing work under your belt (and get you a reputation). For my own recruitment drives I do use linkedin, it helps with rough filtering (ie: your profile doesn't stand out enough). But, even when I get to my final list, I still go down to calling/seeing hires in action and eventually in person. If you can figure out a way to provide extra information (eg, code, perhaps a video presentation on something) this would go a great way in helping a prospective employer getting interest in you. A personalised blog or website with previous work is also quite useful.
Why what ? its just a tutorial for install laravel :)
Glad to know we are on the same boat. I never felt the need for it. It's either I'm just lazy to adapt or I just don't get why I need it.
Oh boy... this wont end nice. &gt; At work we still run PHP 5.3 So you should be able to use namespaces without a problem. Namespaces, amongst other, allow you to keep your code organised, they allow you to use classes with conflicting names (I bet you tried to integrate phpbb autologin only to find your legacy code already has a User class in it). With namespaces it's easy to implement autoloading. Dont take it the wrong way, but if you want to be anything more than a medicore code writer, you will need to start using namespaces.
I didn't mean to imply that PHP 5.3 doesn't support namespaces, instead I meant that 5.3 was the first version of PHP that supported namespaces, and seeing how we're still porting over parts of the application from PHP 4, it would take us a long time to rewrite our codebase to use namespaces.
Yes, they are indispensable when working on a project that is more than just a few classes. Also, the argument "they're ugly" has always confused me. Is the backslash character really that repulsive? It's just a character like any other; I can't comprehend why it bothers some people so much.
This would be ideal, but the timeline and budget don't allow it. These spreadsheets have been developed over the years and have become quite complex. Also, the client intends to purchase a full blown ERP system in the next 18 months that will take the place of the spreadsheets anyway.
[re: namespaces PHP 5.3](http://www.reddit.com/r/PHP/comments/21ogbg/is_anyone_here_using_namespaces/cgezpf1) Well at work every line of code is the tear of a programmer (we don't use outside code, except for utility plugins that live outside of PHP). I do agree that namespaces make it *ridiculously* easy to implement an autoloader, but we don't even use an autoloader. I implemented one, we ran into [this bug](https://bugs.php.net/bug.php?id=52339) (ironically, called by an unused file that I can't get people to agree we can remove), and now we don't have an autoloader. I don't think my boss would even consider one at this point, one year later. I also don't see how not using namespaces will actually make you mediocre, at worst your code won't run when you try to add external libraries.
Isn't &lt;?= ?&gt; a no no?
The short_open_tag was enabled by default on PHP &gt;= 5.4.0 making short echo tags fine really. It's mostly a template preference though.
Really? Can I ask how large your codebase/userbase/development team is? I'm guessing the application is fully homegrown? I'm not really looking for validation, just curious about the situations of people using them/not using them
That's what use statements are for. :)
This is one of my favorite micro-optimizations, but it should be noted that few applications are likely to run this type of search 10,000 times (and even then, you save a few *ms*). I guess I'm saying that your time could be better spent optimizing other things instead of re-writing every existing in_array call to isset, but you should make it second-nature when writing new code so that eventually every in_array is an isset
No, you're confusing &lt;?= ... ?&gt; with &lt;? ... ?&gt;. The former are standard and used in lieu of &lt;?php echo ... ?&gt; whereas the latter are asp-style short-tags which are the same as &lt;?php ... ?&gt; and are the no-no.
For me, "more than just a few" is when I have multiple components and subcomponents all interacting. Instead of writing Component_SubComponent_Thing_ThingInterface everywhere, I can just import it and write ThingInterface or rename it to BaseThingInterface (or something that makes more sense in the current context). I think it make my code much more clean and readable, and is very much worth it to me if the price is simply prepending a '\' to my global class calls. Your boss sounds insufferable. I can't stand people that are resistant to change for no good reason.
Labeling something as a micro-optimization depends on the application. For example, a parser that determines whether or not the next token is valid would benefit from this optimization immensely considering that it would be called repeatedly (e.g., https://github.com/mtdowling/jmespath.php/blob/master/src/Parser.php#L162). In this case, it isn't a micro-optimization, but rather a good practice. &gt; I guess I'm saying that your time could be better spent optimizing other things instead of re-writing every existing in_array call to isset, but you should make it second-nature when writing new code so that eventually every in_array is an isset Absolutely, but with one caveat: profile your code, look at the parts that are slow, and fix them. If you see a bunch of in_array() calls taking up a significant portion of time, then you could try to refactor to use hash lookups (assuming it's a known list of values and you don't need to compute the hash at runtime).
&gt; I also don't see how not using namespaces will actually make you mediocre, at worst your code won't run when you try to add external libraries. I'm not saying that it will somehow make you a medicore programmer per-say, as people lived without namespaces for years and all was well. Without using namespaces, or without knowing how to, you will miss out on A LOT of software (or you will have to rewrite it), other people will have trouble working with you, and you won't develop your skills to their full potential. I bet you use OOP. Imagine that everything you do, you do without OOP. Sure, you can do it, but does it feel good?
If all of your code is strictly in house then you would avoid naming conflicts that could arise. It still doesn't hurt to namespace features that can be removed / added for different installs of the application. Also, I like to namespace Admin\ from frontend (which I leave as the default namespace). But currently I'm a frontend dev working on 3rd party built platforms (one in .Net and one in Cold Fusion). I have yet to work on a PHP team that does use namespacing though. Mostly because the contract I get aren't for teams but for 1-2 dev sized projects.
Is it really that difficult to write something like \Invoice\Order::get() vs Order::get()? I think your inability to implement an autoloader is not a very good reason to decide that namespaces are worthless. You really use no external libraries at all? Why?
Ah yes, profiling, something else I should've mentioned! My co-workers just fumble around guessing that this or that function are what make their code run slow. I run the XDEBUG_PROFILE flag, open up my webgrind and gain a noticeable change after I replace the slower bits (usually one to three), while others just re-write their code and *think* that it runs faster now (and when I visit that page it still takes 14 seconds to load). Learn to install/configure/run xdebug everyone, don't guess! Also, as you pointed out, a parser is an *excellent* example where this will have a noticeably difference. Good stuff all around
I will never understand people in the software business who take pride in not advancing with the language. 
Your example is not really right, to me it's more: Invoice_Order::get() vs: Order::get() The main feature with namespaces is that you can import the class and thus have short class names.
Are you going to be working with that one company untill you retire? If you're working for a company that is either focusing on supporting legacy product or flat out refusing namespaces (due to "how stupid slashesh look") that's OK, but if you're thinking about switching workplaces in the future, I would recommend keeping up with the times.
If you look at the packages on packagist.org, all of them use namespaces, so I'd assume plenty of people do.
Is there something specific in your comment you would like addressed to me? Short array notation in 5.4 is great. Array dereferencing is the bees knees. ZendOp works flawlessly on my setup even though I had to compile it because it isn't available out of the box for 5.3. I have one, rather large, feature of the language that I'm *currently* not using, and I'm curious if anyone is in a similar position, so I made a post about it. Your statement is blatantly false, and lacks class.
Well you, sir, are a winner, and I award you a chicken dinner! That's precisely why I made this post. I'm fine not currently doing it at the current shop, but should I need transferable skills, I *am* worried about not being fully up-to-date on their usage (although I think there are no big nuances, it should take all of a day tops to get used to them IMO). This post wasn't supposed to be about the pros and cons of using or not using namespaces, I was just looking for people's experience in their team with namespaces, and whether they are used. Perhaps I could have worded it better.
The thing is, we *are* all using libraries and packages, because there is a tonne of hard work put into them and so much shared code. I can create an application by myself in a few weeks, that would have taken a team of coders months to create from scratch a decade ago. I am never going back to those dark days. 
Ah yes, it's always all good untill things work. It's not untill something breaks. Funny story, we had an enterprise app ran by a multinational company keeping track of thousands of their employees running "nice". Up until the point that the host upgraded their PHP installation and, wouldn't you know, `$this` became a reserved variable breaking EVERYTHING ;)
Seems like from this thread, Magento is decent and everyone (devs included) have a problem with it because they don't know how to set it up properly.
lol... Stripe is a real company too.. Real enough to cause PayPal to buy Braintree Payments (Stripe like company) to compete. 
For some reason you're been down voted, but you are right. clients sometimes suggest/want stupid stuff that makes no sense.
I wouldn't obsess over it personally. The whole idea of PSR is to make maintenance and interoperability easier, but you're already stuck with a legacy codebase. It sounds like there's no huge incentive to spend time working namespaces and autoloaders into it, just to comply with these new standards. Its time you could better spend on other things. Next time you start a new project (or you find a real incentive to migrate), then sure, go for it.
What areas of Phpspec and Behat would you like to see documented better? Both projects' documentation is on Github.
Yeah.... Cryptography is more about applied mathematics then "experimenting". I know enough to know never try my own stuff.
&gt; Frankly, if I could do Invoice\Order::get() without a use statement, I would probably be more inclined to do it. Technically, you can. `use` statements allow you to make aliases, either implicitly or explicitly. You can then refer to those objects directly, provided you don't introduce ambiguities. You can also completely leave out all `use` statements at the cost of always needing to specify the qualified path.
I use them in everything I write, and I have codebases consisting of hundreds of classes and others with only one.
I've been in a similar situation $order = new /models/order; $order-&gt;load(['id = ?',1]); echo $order-&gt;name; https://github.com/bcosca/fatfree
A convenient way to convert an array into a lookup table is the `array_fill_keys` function. Alternatively `array_flip` will also do, but will lead to higher memory usage.
Your designers write code? Interesting. Regardless, I'd find a new job, and I'm not just being dramatic. "Banning" something that's useful is patently absurd and anyone that would go that far is going to be a fucking nightmare to work for. I mean that's just preposterous.
&gt; we don't use outside code You might want to rethink this as well. There are projects that solve all kinds of common problems that have been developed and tested across a vast community. Custom building everything means you are solving the same kind of common problems over and over again instead of focusing energy on the actual unique nature of the applications you are building. &lt;/just_my_ten_cents&gt; http://symfony.com/components
A real world example would definitely be nice. At least to show if phpSpec is used differently from Rspec. 
WINNER
I think you're misunderstanding what OwnCloud is. The desktop client isn't the main part of OwnCloud. The client is an extension of the main part, which is the server software. The client isn't something that just by itself connects to any "cloud" service you throw at it, it's a client for OwnCloud. Firstly, make sure you're looking at [owncloud.org](https://owncloud.org/), which is the FOSS part, not owncloud.com, their commercial arm. Although if you're willing to pay for it, the commercial version is certainly an option, and then they'll set up the server for you. But the idea is, you set up OwnCloud on your server, wherever you have it - maybe that's a VPS, maybe it's Amazon EC2, maybe it's a shared server. Then you can connect S3/Drive/Dropbox to that server instance. You can access the OwnCloud instance through a web interface, or optionally you can use the desktop client to access it. But you have to have an OwnCloud instance to connect to. You also can't use *just* S3, since S3 is storage, and you can't run an application on it.
I think a Stack Overflow and Github account are better credentials: &gt; Hi Ast my name is Jose and I'm recruiter for TopTal, the best freelance network in the world, we are about 500 senior devs from MIT, Stanford, CERN, Google, etc. &gt; &gt; I found your profile in StackOverflow and I did a quick screen of your others profiles as Github, etc, and it looks promising...
If they're using semantic versioning properly, than it definitely isn't a problem.
Not using namespaces because they are "ugly" is a pretty ignorant choice.
Well, I am not. It's 2014, and 5.3+ just reached [two thirds server dispersion](http://w3techs.com/technologies/details/pl-php/5/all). Not an issue on servers that I manage, but it *just now* makes sense to even consider it when you're writing distributable code. I'm also not a big fan of solving programming problems that I don't even have. So the first thing I have to question when someone requests my code to be namespaced per default is, why should I inconvenience myself; or if they can qualify an actual identifier clash, or what's the holdup with adding the single namespace declaration line themselves then. Namespacing as end in itself or to map filenames onto shallow class names (as is all too common) isn't very enticing. And before reusing some class cluster from github, I'm instantly very judgy about the authors prudence with other design decisions if namespaces were applied pre 2013.
In large production code, namespaces are literally lifesavers. It's kind of ridiculous to call functions like: return CrazyFunctionNameBecauseIHadAlreadyUsedUpAllTheOtherOnes(); Instead just switch the namespace and use your regular function name. I guess what I'm trying to say is why the hell wouldn't you want to use namespaces? For example, I like to use the same function names, in a predictable and pre-setup way when using configuration functions. This means that all someone has to do to work with my code is learn how I setup configurations. &lt;?php require 'vendor/Config.php'; use Config\database, Config\other, Config\users as Config; Config::db_connect('host','port','username','password'); Config::get_user('username'); ?&gt; Using this method I can easily start bashing out my code using namespaces without having to look back, as they're all apart of an object now.
That is *precisely* what's going on around there. Hell, I can't even get PHP 5.4 for dereferenced arrays :(
Certainly approaching this at work!
just go for it, and see how far you can get. 
On a daily basis when I need to find object declarations/uses in case I want to refactor, and there is not. &lt;rant&gt;I also appreciate the fact that people are taking the time to downvote, when I literally have *no choice* in the matter short of finding a new job in a town with high unemployment, and I'm only replying how you *can* avoid namespaces entirely, and making no excuses on whether you *should*&lt;/rant&gt;
starting now. vroom. 
Yea, our designer was still writing code when I started, though by now he's mostly relegated to purely front-end out of necessity (whereas before he also did some backend out of necessity, I believe)
I was having a hard time until I started using them on a regular basis. now I can't imagine coding before them, it's such a nice way to live collision free and name my classes whatever I want instead of making MyUserClass etc. 
I always think that it is fun to play with APIs, either those from others, or those that you build for yourself. As an example, take your json feed of activity from Reddit, and then display it on a webpage. You can find your info here: http://api.reddit.com/user/Johnny_L/overview.json Then a bit of file_get_contents and json_decode and you have a php object! 
Thanks for all your hard work on this. It looks great!
Thanks!
Sure! Imagine this scenario where you may or may not unset a variable which points to an object (god knows why, but some people do): while ($row = $dbo-&gt;fetch()) { $obj = new MyObject($row); if ($obj-&gt;isRestricted()) { $obj = null; } // .... other stuff here ... if ($obj) { // do something with object } } While the if ($obj) is convenient, remember what PHP has to do. The if ($obj) ultimately has to evaluate to boolean (true/false). When you've unset the variable, it's trivial, but when there is an object, PHP has to take your object and try to see if it evaluates to true or false. That's no problem at all, except that it takes non-zero time, and when done in a loop (as done here), it *will* add up. If you have to do something like this, use if ($obj instanceof MyObject) instead. This is a much more direct statement and uses a language construct that PHP doesn't have to guesstimate. For the arrays, you can try it out yourself. Put a non-trivial amount of data on an array, and evaluate if ($array) 500 times. Time that versus a smaller array, and see the difference in execution time.
Depending how confident you feel I'd suggest going through a book of php basics to help familiarise yourself with syntax, structure and core features of php. Once you're comfortable move on to Laravel, pay for a Laracasts subscription and then start looking into creating any simple app ideas you might have or try reproducing something simple that's already out there e.g. Imgur, lorem ipsum generator, core features of twitter or something that uses the api of another service Twitter, Facebook, Github, TMDB or etc. You could also start with a basic forum and built it up, so start with a post, add logins the post replies, boards, stickies, permissions etc all over time instead of attempting to build everything at once which is more than likely to get you so frustrated that you might just give up. Laracasts also has series such as incremental APIs where you start off with something simple and evolve it into a full featured app. Just make sure you know enough about php to know where the language ends and where the framework begins. If it helps you could build any of the above using raw php and then trying to rebuild using a framework so you can understand the difference better 
[Here is the link to Satis documentation on getcomposer.org](https://getcomposer.org/doc/articles/handling-private-packages-with-satis.md) [Here is the Satis project on github](https://github.com/composer/satis) Unfortunately, getcomposer.org is also down, so you can read it when their server gets back online. **EDIT** Modified the links. For some reason, I couldn't copy/paste correctly yesterday.
good news. A library I have been working on is not finished so it won't take much to convert to 4.
&gt; What’s Guzzle? Guzzle is a PHP HTTP client library. I feel like that might deserve at least two sentences...maybe three. Seriously, if you expand the description and give some concrete usage examples, it's way more likely to gain traction. Just sayin'
Which proposal are you suggesting I adopt? PSR-0? If so then that's an issue [here](https://github.com/robertmain/UniformCache/issues/2)
At the end of the day this is just a question of complexity: hashmap lookups are O(1) and an unordered array search is O(n). 
Shouldn't you be out, removing everything labelled "Tesla"?
Congratulations and thank you! Guzzle has become a pretty standard library for me to rely on.
What the crap are you talking about?
I agree. What exactly is a PHP HTTP client library?
Indeed! That sums it up nicely. I would only add that the client can also just be your browser, accessing the OwnCloud webapp.
&gt; At work we get by with about 500 core classes I'm curious how you name those 500 classes? What subdirectories they are in? What form of organization you use? I have an older project (designed before 5.3) that doesn't use namespaces but there are thousands of classes and they are all organized into subdirectories and using underscores to implement poor-man namespacing (e.g. `Data_Object_Property_Integer` and `Mobile_Calendar_Appt_Edit`)
May be..author should link http://docs.guzzlephp.org/en/latest/ as well. The link has easy-to-understand example.
Awesome! Can I ask what PHP version you ran this under? I'm not actually sure that it matters, and it's been a long time since I changed that code so I'm not sure I can pull up the original implementation, but I'm more than happy to be wrong if that's the case!
`count()` is an O(1) operation in PHP.
You only need to create the lookup table once. You do the call once in the constructor and then keep using the result.
Fantastic. It's a great library. Any chance uncle Jeff is going to have you guys hire some folks to do for MWS what you've already done for AWS? I mean, have you *seen* the client libraries for MWS? 
Same for me. My new boss forces me to use Dreamweaver. It's horrible; I even like Coda more. Problem is, first days on the job I can't really atart to change his workflow. I would just switch, but he insists we use the same programs.
Every sane developer uses namespaces. Your problem seems not to be using namespaces but ability to convince your team to make necessary refactorings. Are you focusing on the right thing here? While namespaces are nice I dont see an immediate need to jump in and just refactor everything to use namespaces if that does not solve some real problem (on your legacy codebase). Instead make changes slowly - start using namsepaces on select few classes where it is needed. Also regarding your attemp at using autoloading: you should register your own autoload function instead of using spl_autoload: // general idea spl_autoload_register(function($class) { $filename = '';// map to filename if (file_exists($filename)) { include $filename; } }); 
You could do some grepping round the codebase for suspicious things, and follow things from there. grep -r --color "\$_GET" . grep -r --color "\$_POST" . 
I think you really need to learn how namespaces work in PHP… You definitely can do `\Invoice\Order::get()` without a use statement.
My main problem with it is that you have to be VERY sharp when you view a tutorial or a "doing it the angular way" blog entry somewhere. Because "doing it the 1.0 angular way" is waaaaay different then "doing it the 1.2 angular way"
That may be true (I don't know) but it's still slower than `empty()`, and semantically less clear. $ php -v PHP 5.5.3-1ubuntu2.2 (cli) $ php count.php count([]) * 1000000: 0.084585905075073 empty([]) * 1000000: 0.02711296081543 `count.php`: &lt;?php $tests = 1000000; $arr = array_fill(0, 10000, time()); $t0 = microtime(true); for ($i = 0; $i &lt; $tests; ++$i) { count($arr); } $t1 = microtime(true); echo "count([]) * $tests: " . ($t1 - $t0) . PHP_EOL; $t0 = microtime(true); for ($i = 0; $i &lt; $tests; ++$i) { empty($arr); } $t1 = microtime(true); echo "empty([]) * $tests: " . ($t1 - $t0) . PHP_EOL; 
So does this just provide the same sort of functionality as CURL but with a few more features, more error handling and presumably feature fallbacks if certain functions are not installed or available. I realise I might be told oh its more than that, but is that the very basics for why you would use this?
you can start with simple guest book submission, which is very basic in php. client form submission &amp; email 
Same concept, but use [ack](http://beyondgrep.com) instead. Way more developer friendly. Edit: ad it's way to install with [homebrew](http://brew.sh), just `brew install ack`.
Or [Ag](http://geoff.greer.fm/2011/12/27/the-silver-searcher-better-than-ack/).
One thing I've learned over the years trying to do a 'project' to learn something: Solve a problem that matters to and affects you. This way you are more likely to finish it, use it, and find flaws and good things with what you've created.
Yes.
Nice tutorial on file_get_contents?
What is this goodness???
Absolutely. PHP has changed, modernised and improved. Not changing means being left behind.
Might want to start looking for a new job where you can grow and write better software rather constantly maintaining legacy software. Just saying. 
I've been there. I'm going to be brutally honest: this is killing your career. The development community is moving, and it's moving rapidly. Not understanding this kind of change is highly destructive. You should always be thinking about the next role, and the chances are pretty good that if you go to another role and say "Nah, we don't really bother using namespaces or external libraries" you'll be put in the "wrong" pile. 5.3 and the features that come with it is nearly 5 years old now. They're standard operating procedure anywhere that doesn't want to be a legacy app. Don't let other people's foolishness hinder your professional growth. It's doing more damage than you realise. Start looking for another job.
It actually only takes about 2 weeks to rewrite a 200,000 line application to use namespaces. I did it for Joomla with help from only 2 other people. And we didn't work on it full time. 
&gt; a new job in a town with high unemployment This may well be misleading. High unemployment often only affects unskilled labour, just because there is "high unemployment" doesn't mean **you** couldn't change jobs. Also... you should change jobs.
You work online. The world is full of php shops you could do contract work for. It's not a question of opportunity, it's a question of willingness to leave your comfort zone in order to better yourself and your career. Most shops that I see maintaining legacy code usually aren't producing that much new software, and they start slipping on their skill set. Then, when the version they are using is EOL and they HAVE to move upwards, they have a lot of migration problems etc because they didn't keep up with them as they were released. That doesn't sound appealing to me as a developer, and is not an environment I want to work in. 
Again, that doesn't sound like a great place to work. Designers making decisions for the developers is never a good sign. 
Require_once **is** significantly worse. The reason it's worse is twofold. One, performance. If you use an autoloader, PHP will only load the classes that have been called. Though there's some overhead on using the autoloader itself, the performance is still better if the number of classes called is significantly reduced. You spoke elsewhere of having hundreds of core classes. I suspect you would get a massive performance boost from autoloading. Second, maintainability. This is the critical one. Performance is secondary. Every time you add new functionality - add a require line. Make a new class? Add a require line. It's just one more thing that needs to be done, to be changed, to be managed, to be version controlled, to be deployed. Sure, it doesn't sound like a big deal, and it's not. But it's also woefully unnecessary. This also assumes that there's one big file with all your includes in it. But actually includes can be (and often are) scattered all over the codebase. Cleaning up that shit is a very, very good thing.
Maybe. Maybe there will be a market for PHP 4 developers. But honestly, can you see yourself **enjoying** a career in fixing up shitty PHP 4 code. Good devs make good money anyway. Being on or ahead of the curve is plenty lucrative. Tying yourself to a shit career on the hope that it pays out is nuts. Do what you enjoy, enjoy what you're doing, and you'll get good at it. Then you get the benjamins.
He literally has no idea. 
So you judge people who keep up with language features as they are introduced and you're perfectly fine with someone who hasn't implemented a new lang feature in the past 5 years. Got it. 
No, I know how they work. They're not a new concept, they've been used in C++ for a while. To your second point, I said Invoice\Order::get() , not \Invoice\Order::get() The difference is the delimiter for the global scope
How does Guzzle's performance stack up against cURL?
On autoload: we did. The autoloader was a function itself, not the default spl_autoload
Obligatory "nah it's more than that!" answer from the author. You can get a feel for why you should use Guzzle by reading the [quick start guide](http://docs.guzzlephp.org/en/latest/quickstart.html), but at a high level, I'll describe a few of the reasons I think it's better to use Guzzle than cURL or PHP streams directly: * Swappable HTTP adapters * OO interface for clients, requests, responses, bodies, etc... * Message bodies use [Guzzle Streams](https://github.com/guzzle/streams) * Flexible event system * Large ecosystem of plugins, including service descriptions Guzzle no longer requires cURL, but rather uses an HTTP adapter interface that allows you to swap out the transport layer of a client. This means you can use the most appropriate HTTP adapter based on your system. For example: * If you don't have cURL, Guzzle will send requests with PHP's stream wrapper (which is way underpowered compared to cURL, but still emulates the same options you can add to the cURL adapter). * If you're running PHP 5.5, Guzzle will use cURL easy handles to send serial requests (thanks to curl_reset()) and cURL's MultiAdapter for sending requests in parallel. * If cURL is available but PHP is &lt; 5.5, then you'll use the MultiAdapter for both serial and parallel requests (the MultiAdapter's performance is not quite quite as good as the CurlAdapter and requires a bit more CPU). * Because adapters are stackable (using a decorator pattern), when a request has the "stream" option, the request is sent through the PHP stream wrapper and the response associated with the request has an open PHP stream in the response body that you can pull bytes from on demand. Even though HTTP adapters are abstracted for you, you can still add low-level options to a specific adapter using [request config options](http://docs.guzzlephp.org/en/latest/faq.html#how-can-i-add-custom-curl-options). [Request options](http://docs.guzzlephp.org/en/latest/clients.html#id1) in Guzzle allow you to easily configure a request and modify its behavior. In addition to abstracting the transport layer, Guzzle provides an object oriented interface to constructing HTTP messages and working with responses. Query strings are represented using a collection-like object and can be easily cast to a string. HTTP headers are managed case-insensitively and it's easy to work with messages with multi-valued headers. The body of a request and response message is abstracted using "Guzzle Streams", which makes it super easy to add behavior to streams at runtime and helps protect you from running out of memory by trying to read an entire message body into memory. Here are some examples of things you can do with the streams layer: * [Emit progress events](https://github.com/guzzle/progress-subscriber/blob/master/src/UploadProgressStream.php) as data is read from a stream * [Validate the integrity of a stream](https://github.com/guzzle/message-integrity-subscriber/blob/master/src/ReadIntegrityStream.php) using a rolling hash as data is read Guzzle makes it easy to modify the behavior of a request and client at runtime using an [event system](http://docs.guzzlephp.org/en/latest/events.html). You can make a call with a client, and the client can do things like automatically retry your request if it fails, automatically redirect, log HTTP messages that are sent over the wire, emit progress events as data is uploaded and downloaded, sign requests using OAuth 1.0, verify the integrity of messages before and after they are sent over the wire, and anything else you might need. Another important aspect of Guzzle is that it's really easy to test clients. You can mock HTTP responses and when testing an adapter implementation, Guzzle provides a mock web server that makes it easy. There's a whole section of the documentation devoted to [testing Guzzle clients and mocking responses](http://docs.guzzlephp.org/en/latest/testing.html). And finally, Guzzle has an abstraction over HTTP that utilizes [service descriptions](https://github.com/guzzle/guzzle-services). These service descriptions define how to serialize an HTTP request and how to parse an HTTP response into a more meaningful model object. Let me know if I can add more information or if I forgot something.
NumberFormatter can spell out ordinals. Assuming we're talking about the same thing, see: http://stackoverflow.com/questions/19409413/display-number-as-ordinal-number-in-word-form-with-numberformatter-php-class
I don't think the version matters, but I tested this on 5.4 and 5.5.
Sorry about that. Sadly, the AsyncPlugin only worked for some users and was super hacky. I had a ton of problems trying to support it: * https://github.com/guzzle/guzzle/issues/579 * https://github.com/guzzle/guzzle/issues/441 * https://github.com/guzzle/guzzle/pull/472 * and many more... Using cURL to try to cut an HTTP connection after the payload has been sent is not the correct way to implement this. I think a socket based HTTP adapter specifically made for this purpose would be a better solution. The documentation for creating new adapter can be found here: http://docs.guzzlephp.org/en/latest/adapters.html
Thanks for the very detailed response. I'll have to look into it some more. Some of the terminology in your post went a bit over my head but i'm sure it's simple enough if I saw it in action.
Great to see so many improvements! 3.x was certainly one of the best PHP libraries, seems like 4 will match that. Couple of questions: 1. Why did you go with your own EventDispatcher? It seems like my apps have an increasing amount of them to manager, of the top of my head already SwiftMailer, Doctrine and Symfony and this is the next one. This just make life harder. If Symfony's is too heavy, why not use the one from Doctrine? 2. I know this is too late, since it's already released, but I'm curios about the reasoning. Have you considered making the MessageFactory and the Adapter required dependencies to be injected into the constructor of Client? For default use you could provide a ClientFactory. That would follow more closely the SRP. Also from a Symfony perspective, it might make it easier to reuse the code in a CompilerPass so the configuration is cached.
uhm. i thought, this was reddit, not [stackoverflow](http://stackoverflow.com/)... try to update your libraries (use a stable version) and if the error is still there, go to [stackoverflow](http://stackoverflow.com/)
mount that file server to your web server and you're good to go with `file_get_contents('/path/to/file.txt');`.
Thanks! &gt; Why did you go with your own EventDispatcher? It seems like my apps have an increasing amount of them to manager, of the top of my head already SwiftMailer, Doctrine and Symfony and this is the next one. This just make life harder. If Symfony's is too heavy, why not use the one from Doctrine? I created a custom event emitter for Guzzle 4 for a few reasons: 1. It's faster because I added a few more constraints on the emitter (like the format how how you crete and return subscriber's event list) and restructured some of the internals. 2. I added more features. I added a "once()" method to trigger an event once and then remove it. This "once()" method is so helpful and so common that I wanted it to be part of the API and not something you need to do in a callback. You can also use "first" or "last" as an event priority. 3. `getSubscribedEvents()` was moved from a static class method to a class instance method called `getEvents()`. This allows classes to determine what events the subscriber listens to dynamically based on how it was instantiated. This is used, for example, in https://github.com/guzzle/progress-subscriber/blob/master/src/Progress.php#L31 4. I needed events to implement an EventInterface rather than relying on a concretion 5. A weaker reason, but still valid: I removed a dependency and now have more control over the future of the product. Guzzle 4 is going to be the major version of Guzzle for hopefully years to come. I'd rather not have to make another major version bump when Symfony releases 3.0 and potentially makes breaking changes to their event system. &gt; Have you considered making the MessageFactory and the Adapter required dependencies to be injected into the constructor of Client? There is a MessageFactory in Guzzle and it can be injected into a client. You can also inject adapters in a client using the constructor. See: https://github.com/guzzle/guzzle/blob/master/src/Client.php#L63. The creation of default adapters is completely a private implementation detail as of right now, but that could change in the future if needed (but I don't see a need to complicate this part of Guzzle right now).
Guzzle is an abstraction layer over cURL (and other adapters), so yeah, you could get better performance from using cURL directly, but that depends on how much you know about cURL (and Guzzle makes it so you don't need to know anything about cURL). Not only does Guzzle make sending HTTP requests so much easier by default than cURL, but it also protects you from running out of memory by streaming requests and responses using stream object (which by default uses PHP's temp streams, so it will write to disk when the size is &gt; 2 MB).
So someone actualy found it hard to use straight curl?
Will the AWS SDK be getting the new version as well?
Silly me, I meant to post this in [/r/phphelp](http://www.reddit.com/r/phphelp). Your assistance was invaluable though. Keep up the fight!
What is the benefit of using guzzle4 over guzzle3? My project currently relies heavily on guzzle3 for doing multi-request's because we use a restful hypermedia approach to our api which means resources return resources, therefore to obtain many objects, we must run a multi-request curl fetch. This takes some time, does guzzle4 improve this kind of workflow?
Ah I see. I misunderstood Guzzle's purpose.
Sure. Sending requests in parallel is definitely easier in Guzzle. Parallel requests are transferred asynchronously by default which makes the underlying architecture faster and more flexible, but there's also a function you can use to emulate the batching style of requests from Guzzle 3. See: http://docs.guzzlephp.org/en/latest/clients.html#sending-requests-in-parallel. For more information on why Guzzle 4 is far better than Guzzle 3, see: http://mtdowling.com/blog/2014/03/15/guzzle-4-rc/
Can't tell if this is a troll or not. If so, well done. 
You can do Invoice\Order::get() without a use statement if you're in the global namespace. I prefer the leading \ because it makes it explicit which namespace is being used. 
I have a working postgres pdo extension. I didn't write it https://github.com/kastermester/hhvm-pgsql You'll have to update the code to make it work though, it's not too hard. go to the original https://github.com/PocketRent/hhvm-pgsql and copy the pq.h and pgsql.cpp to the kastermester code, then try to compile.... fix errors as they arise.
Haha, this is an interesting thought. I'm not quite sure it'll ever get to the point of the FORTRAN + COBAL market now but there might be some niche places that you could get a premium for writing 4 code. Doesn't sound like much fun though.
Yeah, I just removed www from the example. WWW doesn't really have anything to do with the solution.
Short answer - yes. Forgetting the syntax complaints over the backslash (which for me personally, I don't mind and can move on in life) - they are a very much welcome addition to my development - rather than crud like really_long_class_names_to_bake_in_my_own_namespaces(). 
This is some great common sense advice. The PHP array data type really excels with this use case and it's blazing fast.
I wouldn't call this micro-optimization when the item count starts to grow. Have written many a CLI script that would fall to it's knees if I used in_array() vs. hash keys for item/dupe checks.
Already working with it, and loving it! Thanks for maintaining this awesome library. Love the usage of streams instead of events; it was a perfect fit for our application. While working with many cloud SDKs, I've noticed that they all use custom cURL (or stream) wrappers which gave us many different problems; and it feels like Guzzle solves all of them. Props to Amazon at least. One silly question, do you have an idea how easy would it be to backport Guzzle 4 to PHP 5.2? We're working with hundreds of thousands of websites, where many of them still use legacy PHP versions. We already did "downgrade" some popular libraries, and it showed great results in our case.
Yeah, that's a big improvement. Small detail: check the $response / $res variable name in the example.
This is a pretty common question, so I added it to the FAQ: http://docs.guzzlephp.org/en/latest/faq.html#why-should-i-use-guzzle
Doh. Thanks for pointing that out. Fixed and pushed.
i'm using sessions with it right now.
Love this library. 
Advice using the Zend library for Google APIs
Sounds completely reasonable! I'll take a look at creating an adapter, thanks!
Thanks! I know it's not easy, but you got to start somewhere. I'll check Burp Suite!
cool it must have been something they added since I last looked ... good news there :)
..or you can just use: [http_build_url](http://php.net/http_build_url). This sudden urge to reinvent existing functionality is silly.
It's an object accessor. It's used to access a property or method of an object. &lt;?php class foo { public $property = "I'm a property!"; public function method() { echo "I'm a method!"; } } // instantiate object $foo = new foo; // access property echo $foo-&gt;property; // access method $foo-&gt;method();
Drop the `Factory` too. If you have to tell us you're following a design pattern, you're doing it wrong. `Url::fromString()` is better (assuming you need more than one constructor).
I'm typing this on my tablet, so apologies for any typos. PHP, like many languages these days, has a construct called Objects. If you think of a variable as a drawer to hold stuff, Objects are basically cabinets full of drawers , collections of variables and functions which serve a common purpose. For example, You might have an object that represents a user which has variables for the users name, address, email, etc. Rather than pass all those values around individually, you pass the object around as a single unit. (You could do this with an array aswell, but is just an example) Say your user object is named `$user`, you would get the user's name by doing `$user-&gt;name`. The arrow indicates that you want something attached to the object (commonly called an object "member"). If you see a double colon `::'`, it's the same thing, but for a class instead of an object. Classes are like blueprints for how an object is created. Hopefully I've given you enough info to find more on the PHP docs.
Objects are stored in variables, just like everything else.
right. keywords should never be used as class, member, or variables names.
I got it bookmarked for the day I need to track some calls. Btw, instead of MongoDB, I'd prefer PostgreSQL support.
When you instantiate something you create an instance of a class. I.e. Make an object using a class as a reference
I saw your original post and glad to see you decided to do something with the code other then let it sit un used. I have no use for the code right now, but I do wish you success in providing hosting and support for this!
Nice one... But, I dont like your index.php and readme.md - shouldnt you delete/change those? And also please gitignore the vendor directory.
Where are the unit tests? Also I would put the vendor folder and composer.lock file to gitignore. Let composer handle the dependencies... It would be nice to have integration with a good PBX like Asterisk and not just build upon on a 3rd party like Plivo.
Yes. Even better.
Thats mutually exclusive. Unless you have automated tests you don't randomly update your versions.
composer.lock should not be ignored, this file is used to lock versions when you do "composer update" so when you download the source you should do "composer install" to install the same versions the developer installed.
This software looks great btw! I hope your new model works out for you. We are looking at a similar model for a webpage builder that we hope to start developing soon!
I may need this in the near future actually! So hopefully I can contribute and make a few PR's :)
I've just been looking into this for my project. Here's my proposal: https://github.com/OpenACalendar/OpenACalendar-Documentation/wiki/Proposal My project by the way is a collaborative wiki calendar: http://ican.openacalendar.org/
Right in the start it says "Here's an example of sending a GET request using the procedural API." and then it uses "GuzzleHttp\post" ... I'm assuming that that's not quite right?
https://github.com/jekyll/jekyll/blob/master/README.markdown
and many package info pages still point you to "dev-master" as a default. that combo is a recipe for things getting out of sync between devs pretty quickly. 
Because people will complain it's not object oriented because they don't understand PHP.
Great direction you picked/got suggested. Really hope this works out for you, it looks nice.
First you run *composer install* which creates the composer.lock file and AFTER that you run *composer update*
I actually have a project (closed source for now) which is exactly like Opencall except it works with Asterisk, RingCentral, Vonage and a couple of others hosted PBX
I've had to create a userland implementation of http_build_url myself because I didn't have access to PECL on a server I was working with. I didn't create an entire library of classes to do the same job though.
I recommend [Vagrant](http://www.vagrantup.com/) and [PuPHPet](https://puphpet.com/). That's an awesome combination for setting up virtual machines.
I wasn't saying wordpress or Magento are better platforms than opencart necessarily, just that their expandability is better architected. They are both still not great code bases, but beat out opencart in that one area at least. And it's an important area to be good at. How many opencart sites have you launched where you just left it the same as when you downloaded? Every sites going to need something customized, and opencart does not make that easy and doesn't do it properly. 
This, plus [dnsmasq](http://passingcuriosity.com/2013/dnsmasq-dev-osx/) for convenient DNS wildcards.
Going further into the [Vagrant][1] option, there is a [good project which has a collection of bash scripts][2] to create a running environment for PHP without much hassle. [1]: http://vagrantup.com [2]: http://fideloper.github.io/Vaprobash/index.html
[First thing I do with any Symfony project](http://symfony.com/doc/current/cookbook/bundles/remove.html) 
Initially it was made for a Canadian VoIP company as an internal marketing tool, but now there are discussions to make a separate service from it. So maybe we'll be in competition ;)
Thanks for the links! I installed Vagrant, generated a file with PuPHPet and ran `vagrant up` and `vagrant ssh`. I tried going to `www.development.dev` (the server name I entered) and I get a 404. I also tried `localhost` but to no avail. When I go to `http://192.168.56.101/`, I get a blank page, but I shouldn't be. I have an index.php file inside the directory but it's not displaying anything.
Excellent work. One thing though, your [hosting](http://www.ocall.org/hosting/) page pricing. I think you should make it more clear that those prices are monthly, something like $99/month.
[This is a good template to follow](https://github.com/thephpleague/skeleton/blob/master/README.md)
Good luck with the project!
Hello Menjo, you may also want to check out another vagrant builder that I developed: http://getprotobox.com/. Its similar in concept to the other links.
this looks great, however if i can suggest a change. You're using GPL v3 for your open source license. This is a very anti-business license, and would make some businesses hesitant to use your product. For example. Let's say that a business wants to use this software, but has a certain business need that doesn't fit the scope of your project. They know this most likely because they requested the feature and were rightfully rejected. No worries, it's open source and they have their own developers right? wrong. GPL states that they MUST open source any code changes they make to your product, no exceptions. This isn't always possible in business, specially if the feature in question they want to implement deals with integrating this solution into some proprietary software they have. They must also release this code as GPL as well. Comparatively, if you picked a license like BSD. It allows businesses to utilize your code, provides you the same protections but they aren't required to open source their code under the same license, or even release it at all. It sounds silly I know, as there may very well be a hundred companies who do exactly this and completely disregard the license anyway, but not all of them, and especially for a product that's geared towards companies this is where you want to make sure you support them properly.
Seriously, why the downvotes?
Minor nit-pick, but if you're explicitly looking for a _file_, then use `is_file()` instead -- the main difference being that `file_exists()` also returns `true` for directories, which I believe would be illogical in this context. As a side-effect, `file_exists()` is also a teeny bit slower than `is_file()`.
We are jealous because nobody likes our frameworks More seriously, probably because the post does not add content to the subreddit. It's very specific, the tutorials are simplistic and entry-level and provide no interesting points of discussion-- what is left to do? Not much, and so by redditiquette standards, the post does not add content, we should downvote.
So show us what you've gotten so far.
Its just one line of code &lt;title&gt;&lt;?=substr($siteTitle,0,55)?&gt; Patio Furniture&lt;/title&gt; sorry its a patio furniture store lol its got to fit all in one line thats were the problem Problem is that if the 55 character falls between a word it comes out like "buy jaavan patio furniture if you know what's good for y" ... see it gets cut off after the 55 character , i would like it that if its gona get cut off, just dont put the word and thats it. THe idea is SEO to avoid those ... at the end of each search result :) 
 &lt;title&gt;&lt;?php echo substr($siteTitle, 0, strpos($siteTitle, ' ', 55)); ?&gt; Patio Furniture&lt;/title&gt; strpos will return the character position of the first instance of a space after character 55, so then substr will strip everything *after* that. Taking your example string: Me paso todo el dia trabajando sin zapatos, aora para que te compre un par will produce Me paso todo el dia trabajando sin zapatos, aora para que
The Acme DemoBundle that comes with Symfony installations in still sitting in /src. Most people delete the folder and remove it from app_kernel basically first thing.
Well you could discuss the feedback opensource projects get from their users =)
What do you think is off? The namespace? The fact that there are convenience methods?
Oh man. No idea where to start. ***It's a user-experience disaster*** Doing certain actions like editing a piece of content, or adding a new post, disables access to the rest of the interface, even though it looks clickable. You literally have to press a close or cancel button to get out of this mode and resume working with the rest of the admin area. It's like a fucking desktop application that creates those dialogue windows that you MUST close in order to keep using the application. There are dozens of these silly UX faux pas all over the place. ***It's a shitty, SHITTY "CMS"*** In a normal CMS, you add a page, and then you can go view that page. In Joomla, adding a page doesn't mean shit. You add the page, maybe spend 5 minutes customizing the display settings for the page. You then try to view that page, and it's not there. Turns out you have to add every page as an element of a menu in order for it to be visible publicly. Don't want your page to be part of a menu? The "workaround" is to create a hidden menu, and add the page to that.... And those settings you spent 5 minutes configuring for the page? Totally irrelevant - only the menu's overrides of those settings matter (so why they include those settings on a per-page basis makes no sense...) Also, no real taxonomies or different types of posts in the Wordpress or Drupal sense. You need to install the K2 extension to get Drupal-like content types. ***Developed without strict error checking*** The file cache driver uses @ suppressors all over the place. Literally whores them. So if you have Xdebug scream=1 (you have Xdebug scream=1 right? RIGHT?), then you'll see screens full of xdebug warnings and notices, which you have to disable if you want to continue working on Joomla. Why are you getting screens full of them? Because Joomla was developed in environments that tolerate @ suppressors, so they didn't catch obvious logical issues like the file cache attempting to lock files that don't exist yet. ***Shitty extension ecosystem*** Everything is paid for. Even though Joomla terms technically doesn't allow you to sell extensions, that hasn't stopped the Joomla community from packaging all of its extensions as part of some support plan that you pay for. Pay $99, and you get 6 months of support. Oh yeah and we'll throw the extension in there as a bonus because we're technically not allowed to charge for it directly. Plus, the entire ecosystem is European. Much of what you find isn't even in English, or in GOOD English. The documentation for many extensions is also hidden behind paywalls, so if you inherit a project with some extensions, you need the login creds for the extensions to get at the docs. And public documentation for extensions isn't exactly great. Version docs aren't really maintained... The overall quality of extensions is quite poor. Virtuemart? LOLOLOLOLOL. http://www.reddit.com/r/joomla/comments/1zh1wc/whats_your_favorite_shopping_cart_component/cg6j69i Also check out these sweet errors I'm getting right now (not related to Virtuemart, but this is the type of shit I have to deal with) Strict Standards: Only variables should be assigned by reference in /var/www/project/plugins/system/jumi/jumi.php on line 25 Strict Standards: Only variables should be assigned by reference in /var/www/project/plugins/system/jumi/jumi.php on line 29 Strict Standards: Non-static method JSite::getMenu() should not be called statically, assuming $this from incompatible context in /var/www/project/templates/project/index.php on line 19 Strict Standards: Non-static method JApplication::getMenu() should not be called statically, assuming $this from incompatible context in /var/www/project/includes/application.php on line 539 Strict Standards: Only variables should be assigned by reference in /var/www/project/templates/project/index.php on line 19 Strict Standards: Non-static method JSite::getMenu() should not be called statically, assuming $this from incompatible context in /var/www/project/templates/project/index.php on line 20 Strict Standards: Non-static method JApplication::getMenu() should not be called statically, assuming $this from incompatible context in /var/www/project/includes/application.php on line 539 Strict Standards: Only variables should be assigned by reference in /var/www/project/templates/project/index.php on line 20 I'm no fan of Wordpress either because I hate its non-MVC architecture, its procedural spaghetti code API and it generally has many shitty plugins/themes that are very poorly written. BUT, it has some good plugins/themes too. Very good ones. So Joomla is like an even less capable CMS than Wordpress is, and without the good parts of Wordpress' ecosystem to make up for it. Fucking kills me. I hate Joomla.
For link-bait, not bad. For substance, pretty shitty. Shallow, full of opinion with little support, and the body never supports or addresses the title.
wait, i fully don't understand your argument. you're suggesting GPL is better because less people will use his product? Or suggesting that companies have to pay for an appropriately licensed version of the exact same code to be allowed to make closed source changes to an open source project? How about, just open source it under a proper license instead of trying to alienate potential users or charge people for what they are going to do anyway.
&gt; GPL states that they MUST open source any code changes they make to your product, no exceptions Only if they are distributing the sources/binaries. So if a company does this internally there are no problems, but if they decide to sell their own modified version of the software then yes, they would have to open source it completely. This also works for SaaS platforms, since there is no distribution of code (though an argument has been made as to whether or not Javascript is actually distributed, since the client has to download and run it themselves).
I especially like how the author criticizes PHP and wordpress specifically, but the site is run on wordpress. derp
Actually I'm working on making phpixie.org, which would be sort of a "sales page" designed especially for pitching =)
technically it could be compiled though. opencall uses symfony, it's so trivial to use assetic here(i'm assuming they are i just haven't looked) which would make it compiled source one could easily use [Packer](http://dean.edwards.name/packer/) or any js minifier/combiner which would obfuscate the code to a point of diminishing returns.. sure it's still technically source, but almost unusable source
Assetic doesn't compile Javascript, it just calls a minifier and combines things together. It's still source code, just not the source code the developer typed into an IDE. So the question is, since source code is distributed (just minified/obfuscated/combined) does that satisfy GPL? Compilation requires turning source code into machine code, which is not what Assetic or any minifier does. 
&gt; I'm honestly afraid of OOP :) Why? &gt; Only have an AS degree from a technical/vocation school in electronic engineering technology. This is not a problem, really. With your existing experience, you should be fine. &gt; My programming knowledge is self-taught, no degree or cert to back it up. While I do have networking classes and certs under my belt I don't have any such credentials in programming. There are no degrees or certs for programming that are worth the paper they're printed on. The best developers I know are self-taught or have degrees in completely unrelated things. &gt; Little older, now 34. This may be an issue if you want a job in a Silicon Valley startup, but not an issue for most other companies. &gt; Never worked with any type of DB other than Sqlite and MySQL. That's good enough. You may want to get more experience here to make you more well-rounded, but if you can do basic joins, you're probably experienced enough. &gt; I know I need to sharpen my Javascript and JQuery skills, I do a lot of mindless cut paste without actually fully understanding the mechanics of what is going on. My goal is to get to know Javascript like I know Python. This... is less important unless you want to be working full stack. And if that's the case, I'd suggest you learn all about the DOM and how to manage it long before you fiddle with jQuery.
Yes a lot. I cant live without them
How about Ixie =)) PHP Ixie
This is amazing, I wish you the best of luck!
Thanks for the feedback. On the OOP front, guess I am just over thinking it. I'll need to work some OOP into a project, the example of tutorialspoint.com looks digestable. I'm going to start pushing my resume out there.
&gt; Every sane developer uses namespaces. PHP's implementation of namespaces is not the only way to use namespaces.
Reddit is a horrid place to gather that kind of information. The amount of noise (from hipster to misinformation) is staggering.
Ideas, programming practices, and technology have changed greatly over the course of even 5 years. It's hard to say what the new hotness will be. My suggestion I'll give to you is the same suggestion I gave to my work. We should be building SOLID components that can be plug and play into most frameworks with relatively low effort if we change. In addition part of our process needs to include unit testing. This will also lower the transfer time to a new framework. Unfortunately the catch for us is our database abstraction layer. We rely on Zend_Db heavily, even though we handwrite most of our SQL. And as /u/drrck2403 already pointed out. The new hotness now is HHVM/Hack. We've looked into both and can't justify the cost at THIS second. IMO both pieces of technology are game-changers, not simple iterations. I can justify ROI when the "rewrite" cost is down. When we do justify those costs we will be moving components over and start unit testing to see what fails. (Right now we have a lot of unit test failing with HHVM). I'd consider this "rewiring" more than building from scratch again. I would also suggest moving from one framework to another is an iterative change rather than a game changer. Changing frameworks offer very little in terms of capability/flexibility/efficiency with respect to ROI. They are relatively similar and our project is fairly large, so changing to a new framework is a big cost. tldr; Follow SOILD, build components and unit test. 
GPL3 *is* a "proper license". I'm suggesting that it may fit his business model better, or that the OP can build a business model around a dual licensing strategy. It worked for MySQL and Asterisk. http://www.digium.com/en/products/asterisk/licensing The majority of people won't be distributing custom versions of OpenCall; for those that do, and don't want to contribute back their modifications (presumably because they've invested time/money/effort and think that keeping it closed will be a competitive advantage) they can buy a license to do so, or give their code modifications back. I fail to see what's wrong with that approach, and applaud the OP for taking a GPL3 stance. It may mean that some people don't use it. So what? 
Doesn't appear anyone checked that module into the source code. http://lxr.php.net/search?q=EUR2USDvirt&amp;defs=&amp;refs=&amp;path=&amp;hist=&amp;project=OTHER_IMPLEMENT&amp;project=PECL&amp;project=PHP_5_2&amp;project=PHP_5_3&amp;project=PHP_5_4&amp;project=PHP_5_5&amp;project=PHP_5_6&amp;project=PHP_FIRST_UNICODE_IMPLEMENTATION&amp;project=PHP_TRUNK&amp;project=THIRD_PARTY
It's the 1st in Melbourne - but I was not fooled :)
Does Plivo have an affiliate program? Or maybe they would set one up for you eventually. Could be a small revenue stream to help out.
You'll never build anything if you're worried about how you may want to approach it in the future, who knows what black magic may appear. Also who knows how your application my pivot or evolve. Worst case scenario is you're code base will rely on end-of-life dependencies, but if it works now it will still work in 5 years maybe just not on Laravel 13.36. There will always be something better around the corner, some new technique, some new buzz word, some new glittery jazz - when that does appear you can judge if it fits your requirements then. I mean it's not like anything you build now will just cease to function just because something new appear - also look on the bright side least you're asking this now, imagine asking this pre-PHP5 totally different world - even if you did your code would still work today!
This is where separation of concerns is important. It sounds like your app will include a fairly rich domain layer. That layer should be 100% de-coupled from your infrastructure layer (storage/persistence/caching/session drivers) as well as decoupled from your application layer (routes, controllers). This insulates your domain from change, and makes it portable. Of course, at some point your domain needs to interface with you infrastructure and application somewhere along the line. But those "contact points" should be minimized as much as possible, and should depend on abstractions (interfaces) which are implemented as adapters. For example, say for some reason you have some domain logic that needs something stored and retrieved from the cache. Well, if you want to use a framework to abstract out the caching operations for you, then you too need to abstract out your dependence on the frameworks' implementation. For this, you use an adapter whose API your domain can rely on. Adapters are disposable, throwaway classes that usually require little implementation effort. For example you would make a particular domain object depend on some kind of Cacheable interface, and then you implement that interface in say, a LaravelCacherAdapter or a SymfonyCacherAdapter that takes that particular framework's behavior, and adapts it to what your domain wants it to be. The end goal is that you can switch out one adapter for another and your domain is none the wiser. In short, build out a rich working domain layer first, then fit the framework you have AROUND that domain, rather than the other way around. That is how you can protect your app from a changing PHP ecosystem. Be wary of Laravel though. Laravel uses the ActiveRecord pattern which means your domain behavior can be tightly coupled to persistence. A User object as an Eloquent model now means your domain is tightly coupled to Eloquent. A DataMapper like Doctrine allows you to write plain old domain objects that the DataMapper / entity manager of Doctrine persists in storage for you. This means you can keep say, your User domain object 100% persistence agnostic, and you can swap datamappers in and out as needed in order to manage persistence. That said, you can still use Laravel / Eloquent without tightly coupling your domain to persistence, it just requires more work and the use of more adapters. Treating Laravel models as table gateways inside some kind of LaravelDataMapper would give you more portability.
This is a joke. Looks like no one read the fucking thing.
Also $_REQUEST, devs lazy enough to inject so obviously are also lazy enough to not care about get/post issues
Quick typo check: under "What is Call Tracking and Opencall?" you have "decided to release their propriety code to the public", should be "proprietary".
Thanks for the insight. Glad to hear it wasn't just NIH. Looking forward to using it :)
In the codebase I work on, the controllers have a setJsVar($name, $value); method which is written out in a small block of JavaScript in the head of the page, these vars are all written into a global JS object called MVC so that any of the variables are available anywhere in js land, for example var orderTotal = total * MVC.vatRate; A small note here... We don't actually calculate our order price in js cos that'd just be silly :)
That's almost as dumb as using the escape character in class names. I heard about that crap a couple of years ago, but I actually saw someone use that crap here last week. \n, \r, and \t all have well-understood meanings. Adding \ at random to the language with a different from standard meaning doesn't help.
Why is nobody talking about the security holes in this approach? We should implement the ฿ symbol, as bitcoin already uses cryptography
Look on your calendar.
Please use PDO and parameterized queries. That being said, once you have your object returned from the sql query, you can just do a foreach loop and place each value of the record into that option tag. Remember to use htmlentities when bringing data from a database into HTML. 
You have to loop through your results from the database ala [this](http://stackoverflow.com/questions/2460243/using-php-to-populate-a-select-select). Stackoverflow is your friend.
I think it's hilarious that you call it the "escape" character because you associate it with \r, \n and \t. It's just a character on the keyboard. In the context of a class name it's not an "escape" character because you're not in a string context. You should probably learn the meaning and nuance behind things instead of learning dogma and sticking with it forever. "\ is the escape char and can never be anything else!!!11!"
I'm a windows based hobbyist, I hear HHVM isn't possibly on windows?
There are a few things you need to understand and modify in this sample code. 1. Using the // comment method will comment everything to the end of the current line. This means that in your examples, you're commenting out all of your functioning code. Switch the first line to $con = include "connect_to_mysql.php;" // connect to SQL database 2. You have some actual errors in your code, for example, there's no semi-colon after echo '&lt;label&gt;Game:' 3. I think you're trying to concatenate (combine multiple strings) here, but you missed the concatenation operator (the period) and you seem to have switched from using single quotes to double quotes. echo '&lt;option value="'.$result.'"&gt;'.$result.'&lt;/option&gt;'; Really, you should write that as echo "&lt;option value=\"$result\"&gt;$result&lt;/option&gt;"; 4. You seem to have two curly braces are the end for no reason.
Nice try (April) fool. edit: make sarcasm more easily read
So we should trash 40+ years of history because of one PHP design mistake? UNIX and C use it as an escape character so it is natural to call it that unless you are Microsoft fan boi. I see you're on the UNIX-hater side of things.
Learn at least one MVC framework
The GPL specifically defines source code like this: &gt; The “source code” for a work means the preferred form of the work for making modifications to it. (see: https://www.gnu.org/copyleft/gpl.html) So, no, minified javascript is not "source code" as defined by the GPL.
Internet hug, nice.
Really? Yes, I know the date. It would have been better had someone actually committed this.
At the moment it isn't, but since the source is open, it will be eventually.
Everything looks amazing! Great work, man!
`Url::fromString()` is pretty clear to me. What else could it be doing, aside from creating a URL from a string? `Factory` OTOH... what kind of factory is it? What does it produce? I haven't a clue just by looking at its name. `UrlFactory` is better, but it's overly verbose an unnecessary if you already have an `Url` class. *Unless maybe* you have a ton of constructors and need to build URLs in interesting ways, a separate factory class isn't needed.
Yeah, really sorry about that! 3.0.1 is now tagged in our git repo and we will be rolling binaries for it shortly. They can take a while to build, however, but this should be fixed before too long.
There is a Windows port of HHVM in progress: https://github.com/auroraeosrose/hhvm/tree/win32_start
For simple stuff you could look at something like https://sculpin.io/ 
I see a really limited market for HHVM. It looks like it will only support a limited sub set of PHP for the foreseeable future, so it will be hard to move projects across to it. If you are starting a new project and don't want to use PHP due to speed or other limitation there a lots of other options which may be better.
I don't think HHVM is a nail in PHP's coffin as such... PHP will live on. I think it is more the first step towards taking control of the language away from the, at times dysfunctional, internals team.
That doesn't do much for those windows servers out there... I use Linux though
First of all, the title is like asking if apples will kill oranges. HHVM is just an interpreter, it's not Hack. A more appropriate question is "Is Facebook's Hack building PHP's Coffin?" Hack is more Java-like. Did Java kill PHP? No. PHP will always be a gateway language and will always have widespread install bases because of how easy it is. Will more advanced PHP developers move to Hack? Maybe. That depends on whether or not Hack makes their jobs easier or if that's where the money flows. Money will flow there if there is a solid business case for using Hack over PHP, or even over Java. Do advanced PHP developers need strict typing or will it make their lives easier? No, not really. Do most businesses need Hack performance that PHP just won't work for them? Of those businesses, do they feel that Hack will be better than Java? I feel that's a fairly small number, though maybe the appeal of Hack is that you get Java-like performance but have a much broader potential talent pool to hire from (PHP devs being so prolific and all). The challenges that PHP developers face aren't really language-based. I can only think of a few things that PHP itself doesn't provide a clean solution for, but there's nothing about PHP as a language that impedes development. Further, PHP devs are cheap to hire. If you're a webshop, you can hire a basic PHP Wordpress guy for $35,000 - $45,000 / year. A good Java, node, or iOS dev will cost you $80,000 - $100,000/year. As a matter of business, PHP is cheap to develop in, and therefore will continue to be proliferated by web shops and even freelancers. So I assert that: 1. Hack does not actually make PHP development significantly better or easier. More robust code? Possibly. But we have unit tests for that. 2. Thus PHP devs won't move to Hack unless there's good money in it, which means Hack needs to find a business case beyond "You need a billion users". Also, PHP's major performance bottleneck isn't PHP at all - it's data queries. Most PHP apps are data driven, and queries are the bottleneck, not PHP. So unless Hack starts being used for native mobile apps (which would be seriously awesome), then I don't see a mas exodus away from PHP.
Assuming I understood you correctly Routing everything to an index.php and dispatching code is called Front Controller. In this case your User class ::render method is a controller. But reading (2) and (3) it seems the User class is also a Model. Generally is a good idea to have separation of concerns, and this where MVC helps. It defines three main categories of code. 1. The View ( show stuff ) 2. The Model ( store stuff ) 3. The Controller ( glue everything together ) In small applications it may seem like overkill but overtime having components of an application that have a single clear responsability is smart. This way its easy to reuse code and swap the pieces out. MVC also gives you some regularity, that you seem to be breaking only using your "pattern" some of the time. It's easier for new developers to pick up your code if everything is somewhere standard ( Is this view on the ::render method or on the view folder ) This does not mean your code is bad for not following MVC or some of its cousins but it could become unmaintainable, and that is all MVC is trying to avoid 
I totally agree. I was just saying. I think is a value adding comment, considering the headline.
I don't think that's really comparable
Facebook is building Zend's coffin and that's a beast that's needed to die since before 5.3. 
You're mistaken to call me a "unix-hater" given I haven't touched a PC (aside from when visiting clients) for 10 years. I see you're on the "hate everyone that disagrees with your crazy POV" side of things. 
how about PHPDragonWarriarr
Yay, someone else from Melbourne. Have an upvote.
PHPwn
Hey, dude! I actually just read through your site the other day. I have it bookmarked to go back and explore when I have some extra time. It looks lightweight and isn't overloaded with static methods. I do agree with some of the other comments about the naming - to a certain extent. I'll admit the name and cartoons almost deterred me from looking at it. That's just, like, my opinion, man. If you're targeting corporate projects then revisit the branding. If you're just having fun with it as a small side project then don't put too much stock in it.
&gt; Hack is more Java-like. Did Java kill PHP? No. That's not really the same comparison. Hack is compatible with PHP -- you can freely mix PHP code and hack code. That's a big deal. That means whatever code base you are working on today will on run on hack right now. And then you cause start using hack-specific features. That sort of smooth transition is the killer. Right now hack doesn't really provide enough value for the vast majority of people to bother switching. It's also not easy to install or replace PHP with yet. But if it really starts collecting a bunch of killer features and becomes easier to get running then it could become a PHP killer. 
No.
Interface looks pretty slick! Where are your social media channels so I can give a shoutout?
My next blog title: "Is that wiki entry about Betteridge's Law of Headlines true?"
Yawn!! Another pretender. Remember Java already killed PHP (being a real language and all that) and before that PHP was never going to be as good as Perl. I think PHP will be just fine for the next 10 years...
im in California and its still 11pm at night on the 31st. i will re-read this in an hour in my best inner Jay Leno voice. 
Let it come man, there is only a day to make this happen :)
That sounds eerily similar to my start in web dev many years ago, but I was 24 not 34. The only thing on your list of issues that is really a problem is your fear of OOP. You have to get over that. Watch some YouTube videos or read a book or get someone to tutor you (I've done it with others). Once you learn the concepts and can put them into practice, you'll wonder how you wrote code without it. You would probably really benefit from working on a team with more experienced devs. Forget the rest of your list. They are non-issues. You're ready for interviews.
And it never will. HHVM is built for Facebook by Facebook - Windows isn't on the roadmap. With the number of servers in Facebook's stack there is zero chance they would ever switch to Windows server - licence costs alone would be insane. Plus the fact (bias here) its an inferior platform for what they are trying to do here.
I must admit, even from the headline alone (have read the article) I read it more about HHVM killing the Zend PHP engine?
And HHVM is only going to push that 10 years out further - not hurt the eco system.
I've thought about it; I'd be okay with that.
why? genuine question...
But the answer would be no, which would make it true, so the answer would be yes, but then the answer would be no... what?
&gt; I'm sure a bunch of their devs wouldn't mind programming on windows Hrm... I don't know about that, maybe. Still setting up a VM on Linux/OSX/Windows is a no brainier any which way.
Wholeheartedly agree. The programmers will go where the money is. Enterprise level (facebook, imgur etc) might, in time migrate to HHVM / Hack setting up the work enviroment to their liking, enforcing strict hack programming rules etc. But let's not forget that majority of PHP is both developed by small teams and used by small clients. You got your Wordpress powering countles "about us" pages, your magentoo or what-have you powering small businesses. We wont see those people / technology / sites migrate to HHVM/Hack any time soon as right now it's an added cost. You make a new site for a client, and suddenly his hosting provider is no longer OK, because he dosen't support the newest toy, so he will have to pay extra for hosting. Sometime clients aren't ok with your custom solution and require you to use an OS product - we probably won't see the bigest players (apps, frameworks) move to Hack soon.
Cool looking forward to trying it out. Is it pretty much a drop in replacement if you are using standard mysqli or is there anything major we should try and avoid?
Brilliantly. However some contributors will hate it. I just posted this on HN on this topic: You will definitely get conflicting advice on this. :-) AGPL/GPL: If you do this people in the community may like this. But you will have problems selling commercial licenses to people. To get around this, many companies do a dual license model where you can get the code under AGPL for free or pay for a commercial license. However, to make this work, you will have to get all your contributors to sign a contributors agreement giving you some rights. Some will hate this and won't. BSD: There is a risk that an outside company will take code and profit from it without giving back. Some contributors will avoid because of that. But then, no issues folding community contributions back into your commercial codebase. Contributor Agreement much simpler and less controversial. I personally went the BSD route for http://ican.openacalendar.org/ - I like simplicity. 
I just PM'd scottybowl, I'm also in the same boat, just starting with http://ican.openacalendar.org/ Maybe we should all chat and share advice sometime?
I agree with your points, but why are you comparing the salary of a basic wordpress guy and a "good java, node, iOS"? I fail to see the point.
A way to test it maybe?
No one knows what the future will bring. But if I may, I'll impart some of the best advice I've ever gotten as a programmer; paraphrasing of course. "Build platform agnostic, and keep to a single language the best that you can. No one can know, or understand the future so when the time comes for you to jump ship, and rest assured it's always on the horizon, you'll need to be able to navigate quickly or you'll drown--and so will your product." Over the past 16 years that piece of advice has helped me more times than I care to admit.
pyrocms ?
Given the formulation of the law, answering 'no' would not necessarily validate or invalidate the law, nor would it cause a paradox. 1. Any question expecting a 'yes' or 'no' response *can* be answered with a 'no' regardless of whether that response is valid. 2. Answering 'no' as a valid response to the question would not validate the law because the law is formulated to target any headline. If some headlines' answers are 'yes' and some 'no' then the law can be considered invalidated and you could safely answer 'no' without causing any sort of paradox. 
No, I was just wondering that you would use a method "post" for a "get" request?!? Surely post does a post request?!
Allthough php's internals team are an "interesting" bunch to say the least im concerned that Facebook are not the best guardians for something like this.
You seem to have missed about 1/4th of the latest posts in this subreddit…
You sound fun. We should hang out sometime.
For once a benchmark that makes sense.
They're really excited about GD imageflip().
http://www.phpscriptsmall.com/ If you are looking for a PHP script, then check out http://www.phpscriptsmall.com/ we have been developing 8 years for software based on PHP/MySQL. Readymade PHP Script incorporates a enormous capability. This PHP Script is famous for developing web based software applications because programmers can use it easily to create web pages with dynamic content that interact with databases. we offer 10 years support , 5 years update , brand free and free installation. If you’d like to put this capability to use on your website we have the Readymade PHP script here to suit your needs. We have 24 ready made php script with 80% discount offer.. http://www.phpscriptsmall.com/ Here you can contact us: No.1, Ayyavu Street, Opp. to Indian Bank (Aminjikarai Branch), Shenoy Nagar, Aminjikarai P.O, Chennai – 600030 Cell: (+91) 9841300660 
Will Fortran be building PHP's Coffin?
HHVM supports most of PHP. Nearly all the big frameworks run on it very well. Wordpress runs on it. Getting to 100% parity is probably impossible, simply because you would need to port every single flaw, weird behaviour and then trawl through all the undocumented stuff. You can't copy PHP exactly - it has no spec. But, if you get close enough, than you should rarely find an edge case (and if you do, it will be caught by your CI service which you undoubtedly are using).
Zend is a company. Zend Engine is the PHP Interpreter. Let's not confuse the two!
I've heard that "law" before. However, it is an actual valid question and I obviously think the answer is yes. Will the Sun rise tomorrow?
thanks, will know better next time. 
Can you use factory objects, so '$class = new $this-&gt;classes['class1'];' will change to $class = $this-&gt;class1factory()-&gt;getNew();
A few suggestions: 1. Use builder objects or factories -- your classes and can probably be put into some sort of groups that can share common builders/factories. When you need a new object, create one via a builder or factory. 2. You probably don't to worry about allowing all of your objects to be swapped out. Especially value objects -- no one needs to swap out a value object (unless, maybe, they just really don't like the way you wrote your getters, I dunno). If all of your objects are value object, they don't need to be swappable at all. 3. Instead of swapping out classes, maybe rethink the design of those classes. Do you really need to contain all the logic inside Policy or Directive? Could it be in a state/strategy object that the user could swap out *after* they get those objects back from the parser? 4. Consider alternate approaches. If you want users to be able to hook in and change things (change the state of the objects you're creating), consider using something like an event dispatcher, visitor, or observer pattern. 5. Use "prototype" objects. Pass in an instance of every class to your constructor. Instead of using `new` to create new classes when you need them `clone` the prototype. Silex has a pretty elegant [example of this](https://github.com/silexphp/Silex/blob/master/src/Silex/ControllerCollection.php). Now for some likely less popular advice: don't design for flexibility that might not be needed. If this is version 1 of your library/project, just work to get it done. If you find yourself in need of more extensibility and flexibility later, refactor.
Not confusing either - I'd like to see them both go.
They are incredibly incapable.
Not sure how much the new features are used, but I'm a fan of [SilverStripe+Sapphire](http://www.silverstripe.org/introduction/) as a clean OO codebase and easy-to-extend CMS. CMS [demo here](http://demo.silverstripe.org/) (**Edit: added**) 
I cursed php.net many times today. I had to fix a bug with a code that uses PHP's libcurl. The documentation is already lame and sometimes buggy, and these rotations added a constant nuisance. They kept appearing when I disabled JS in my browser. I switched to another browser but it was worse : rotations were not limited to page loading (bugs?). Sometimes clients aks us "Is PHP really professional enough? Wouldn't (Python|Rails|*) be a more secure choice?". I'll have to agree: php.net behaved like a ridiculous school-boy that wants to attract attention, so he keeps annoying grown-ups that have to work.
Vagrant is the way to go. However, if you are just learning how all this server stuff works, check out [Vaprobash](https://github.com/fideloper/Vaprobash) as suggested by @maktouch, since it will "just work" but also let you see how it's all set up. (All the scripts it runs to setup the server are there for you to see). I also run the newsletter [http://serversforhackers.com/](http://serversforhackers.com/), which you might find useful. Check out the first edition for basics on getting started with Vagrant as a MAMP replacement.
All that from a spinning logo for april fool's?
TIL animated gifs are insecure
Don't blame PHP's shortfalls on C. Python does just fine.
I always thought both PHP and HHVM were written in Fortran to begin with...
[Reminds me of this.](https://www.addedbytes.com/blog/if-php-were-british/)
&gt; I'm sure a bunch of their devs wouldn't mind programming on windows Why? There is no advantage to that. Any programmer can find their way around a Linux OS with no trouble.
HHVM is PHP's Coffin in the same way that PyPy is Python's coffin. I do hope HHVM and the other somewhat compatible PHP runtimes (HippyVM maybe, in the future) will bring some healthy competition into the landscape. But that's about it. Remember that improving raw execution performance by a factor of two or three is often not very interesting, as PHP mostly deals in IO bound territory. You can beat HHVM by orders of magnitude with an async webserver written in Zend PHP. People just don't bother with that kind of stuff, because they don't actually need that kind of performance ;)
Hey man, just want to say thanks for Plates! It's become really integral to a pet project of mine. 
I actually think this is a bit of a gap in the market at the moment, tbh. There are small competitors, a few listed below. I'm a big supporter of CMS built on a framework, and October is one to watch in that respect. Not out yet, but built on Laravel. PyroCMS is also coming to Laravel. One I've run across that I like the look of is [Statamic](http://statamic.com/). It's not free, but it looks nice. A question that need to be asked is by "Wordpress competitors" do you mean a full CMS like Wordpress is butchered into being, or do you mean borderline adequate blog software?
Well Im wagering that most PHP development is done in webshops doing wordpress-like sites for clients (even if it is custom PHP, and not in a CMS) vs heavy enterprise-level app development. Given that scale and scope of site, PHP is cheap to develop in. E.g. you wouldn't make a brochureware site in Java, and pay a Java guy 50% more than what a PHP guy would cost. 
that's not very specific ...
I can throw generalities around all day too. Incapable of what?
[were you trying to show us this april fools image?](http://i.imgur.com/nr4Ycx5.jpg)
I'd be open to that.
Here's what we're doing, which is specific to WordPress plugins but might be interesting for you. http://www.paidmembershipspro.com/2013/02/the-paid-memberships-pro-business-model-copy-it/ I don't know enough about your business to be able to price, but we've had success with a plan that was very similar to the cost of a license from a competitor but on our end included a license (free software), some service time to help install, and support that was better than the competition. RE monthly vs hourly etc, I think what is important here is that people get billed at the same rate that they get value from you. So for example, we used to have monthly plans, but most people signed up, got support the first couple weeks, and then disappeared. We didn't give them any value after the first month. So we switched to a one-time payment for 1 year of support. We get more money up front and we don't have to deal with people asking for refunds or charging back 3 months later saying "we haven't been using our membership". With hosting, I think monthly makes sense. If you end up with a support plan, I'd lean towards up front pricing with an incentive to renew.
go to php.net and see the different logo back from when it was PHP/PL EDIT: Apparently they removed it, was hilarious while it lasted
+1 For this. When I first started in PHP I tried to follow many tutorials and didn't really grasp much. What made me really learn was to create a project I actually wanted to use (a forum system), even though it was incredibly complex, and figure it out one step at a time.
No as based on that rule on wikipedia
Exactly. HHVM isn't a nail in PHP's coffin, it's a vitamin shot in PHP's ass.
While I agree with your general point, HHVM also brings Hack and several most-wanted features for PHP. To me that's the most interesting thing about HHVM. And also: PHP internals VS HHVM has a "vision" (in the spirit of "PHP needs a vision" stuff).
What do you mean by wordpress competitors? Wordpress is a blogging platform that tries to bill itself as a full featured CMS. Are you looking for a blogging platform? A content-publishing system? Something else managed by a CMS?
Not one day goes by without some one predicting/questioning demise of some language! Wish had a penny for each.
Your linkedin doesn't tell me anything about what you've studied, projects you've worked on, what you've done or anything really. There is literally nothing there that tells me anything about you other than that you graduated high school and claim to have some level of skill in a wide range of things you obviously don't have the time to have mastered yet. (By the way, you have PHP tagged as PHP,)
I would go with SectionAdminController (or SectionAdmin_Controller, personally). I like to name classes so that the name tells me what the class is used for as soon as possible - (i.e. Specifics-first). Say you're looking for the controller for user administration in a framework, what's easier to find that info in? * AdminContentController * AdminDataController * AdminUserController * AdminStuffController * ViewContentController * ViewDataController * etc. or * ContentAdminController * DataAdminController * UserAdminController * StuffAdminController * ContentViewController * DataViewController 
Would it make more sense to use a single factory that can create all classes? $factory = new Factory(); $class1 = $factory-&gt;getNew('class1'); That is if I understand factories correctly. There being just one factory to handle all object creation, and one factory to be instantiated by the calling application, it means there is just one class to be extended in order to change the resolving of *any* class in the package.
I wrote about this at some length here: [Publish Your Failures; or, The Way Of All Frameworks](http://paul-m-jones.com/archives/4757) &gt; ... being able to operate outside a framework is really important, because the framework you choose today, even if it’s the self-described “greatest PHP framework of all time”, is going to fail you in some non-trivial way in 3 years or so, even if it has a “long-term support” version. (After all, how long is long-term in the web world?) &gt; &gt; ... &gt; &gt; ... for a robust or antifragile system, you should be able to swap out the different subsystems when they no longer meet your needs. As each piece fails (and each one will eventually fail to meet your needs), you’ll swap out each of the pieces at different times. Eventually the system will be composed entirely of replacements, but the whole thing will have kept running the whole time. 
Is this another name for a factory, or is it a different approach altogether? From what I understand, a factory abstracts object creation through a method of factory class. Whether it does so through hard-coded `new Foo()` statements, or is data-driven which some method to change that data, it's the same thing?
Sweet. I got hosed on a spec call center app/twilio integration using php &amp; web sockets. Worked great, but the firm went tits up. Must be a rough market all around. I'll see if anything I've done might be useful to your code base. 
is this a ReadTheDocs documentation output ? (it feels like)
Negative, it's actually a custom, [Sculpin](https://sculpin.io/) powered, theme I designed specifically for [The PHP League's](http://thephpleague.com/) projects.
you may need to open up the permissions. In your mac's terminal, not within the vm, try running 'sudo chmod -R 777 your/shared/folder'
Happy to help! Let me know if you run into any issues with version 2.x.
I do like the implementation used with Plates - keeping it pure PHP, no compile step like Twig/Smarty and a nice feature set for real world template use. I don't use it personally but have rolled my own mini-template engine for personal work using many of concepts and implements used here.
Just browse the packages on Packagist. https://packagist.org/
I think SugarCRM used to be. Also phpBB. A lot of open source projects are modules/components to be plugged in and integrated into your system such as Authorize.NET sdk, phpMailer, php_writeExcel, etc. 
www.moodle.org - I work for MoodleHQ and can promise you, there is no frame work used, which is a real shame.
ha! Which framework would you like to be using?
anything MVC would be good. Hell, I'd settle for creating our own, with templating, rather than using adhoc classes etc.
They are the #1 biggest users of PHP that has ever existed in the world. Why would they not be qualified?
what definition of 'good' are you using? popular? clean code? 
What he said, go work for someone, you have a lot to learn, and you can always freelance on the side, and if your in DC area, we are hiring Jr developers.
I totally agree. This is the same convention I decided upon.
Ugh, moodle is a disaster. I had no idea how bad it was until I downloaded it and checked it out a few months ago. Crazy how many schools are running on that infrastructure.
I agree with this. I started out freelancing, then got a job at an agency, then left to freelance again. The second time around (after leaving the agency job), it was so much easier for me because I had gained a ton of experience (not just technical but also communication skills and managing clients better) AND had a great network of people who had spread out to other companies which led to more opportunities.
The only advise I can give you is two simple things; one, develop and actively maintain a very strong portfolio of work. Two, don't be petty and charge by per-page work. People always feel better about hiring someone who charges per project and offers free updates or support. It's harder for you, as the developer to do it that way, but I've personally observed an increase in client offering with the traditional 'per-page' charge scale omitted. 
OSTicket. It's a ticketing support system. SMF. Forum software. Sphider. Website/Web spider + search. 
Obligatory repeat MediaWiki (I work on this). Also, Phabricator is a really good example of a well-written application.
&gt; The LAMP acronym stands for: Linux, Nginx (Engine X), MySQL and PHP. What? And I thought it was LNMP if you used nginx instead of Apache.
Bold choice, but I think you'll be happier in your work for it. And it doesn't mean you _have_ to move on, but it's good to see your options.
It's really beautiful, great work!
In my experience, the larger a project becomes, the harder it becomes to manage requirements and expectations. To create order in the 'requirements' area, chop the whole thing down into the sub-parts. Prioritize those together with the stakeholders, then start defining requirements for the sub-parts. For the expectations part, I think it's good to define the strategic goal of the end product first, if that's not yet defined. So, what problem(s) that the organization currently has, will be solved by the end product? This should make clear to stakeholders what functionality the end product will have, and more importantly, not have. Then, define goals for the sub-parts. With large projects, it's often feasible to develop in so-called 'sprints', meaning you determine the sub-part which is most important and focus solely on that part. When development is done on that part, have a look at it with the stakeholders if it meets the requirements. If so, move on to the next. If not, make it clear that changes are possible, but will cause delay in the development of the next parts. Working like that will make people feel involved, and you have more checkpoints available to make them understand when something takes longer than anticipated (as happens more often than not, in our line of work :)). A note in general: us developers often over-estimate ourselves, or under-estimate the technical complexity. Be honest with yourself if you feel it's becoming too much for you to handle, and don't be afraid to ask for help when you foresee problems (like you are actually doing right now, by creating this post). As for the 'working between different systems' part, I'd say that depends entirely on the requirements of both the company and the technology.
I am currently in the process of changing every if(!empty($array)) in our code to if(count($array)&gt;0). This codebase has a lot of old blocks of code that are not being run because $array is never being set anymore. When using phpStorm, it will flag the count() when $array is not set, but it won't flag the empty(). 
Fresh out of college you want all the "relevant" experience you can get. A great place to start would be to check out the issue trackers some active open source projects and start contributing fixes and required enhancements. It's a great way to get your name out there, it gives you some experience with real-world software that people are actually using, and it looks great on a resume. In the PHP world most modern/active OSS projects are going to maintain PSR compliance as well, which will get you up to speed on good conventions for "modern" PHP. Personal advice: When searching for a FT job, try as hard as you can to stay away from PHP projects that require versions 5.2 or earlier. I feel like PHP "grew up" with the release of 5.3, and you're gonna be missing the "good stuff" the language has to offer if you use 5.2 or earlier. However, don't let that stop you from going with an overall good opportunity. Remember: Right now experience is your number one ally. Just make sure you don't pigeonhole your experience into &lt;= 5.2. Also, some general advice: Don't assume that everything you learned in college is 100% correct, or that the practices you were taught are still used, or that they're the "best." Fresh college grads who think they know everything can be the worst sorts of devs. Gotta keep an open mind...but also stay objective because you may also be correct. Just keep an open mind and be smart. There are lots of people with lots of experience that are crappy devs. There are also lots of people with lots of experience that are amazing devs. Diversify, but not too much. You need to have a good amount of knowledge in a lot of areas, but not so much that you can't specialize in one when you need to. For instance: You could be amazing at mysql, but it helps to also have at least basic knowledge of other SQL and NoSQL solutions. You may focus on PHP as your main language, but having a lot of knowledge about/experience in other languages is a great helper. (I myself, like many others here I'm sure, specialize in PHP, but I also regularly code a bit of C# and Python, and have experience in a whole slew of other languages.) Never become fanatical and tunnel visioned on one language or technology because it may go out of style. Just because something is different doesn't mean it's "better" or "worse."
It's LEMP (Linux EngineX MySQL PHP)
Besides Packagist try searching the trending repositories on Github https://github.com/trending?l=php 
That's because `empty()` has an implicit `isset()` check. I concede that this is a good counter-argument, but as a NetBeans subservient race I don't get that benefit either way, plus Zend is a little messy and I'm sceptical about even PhpStorm's ability to figure it out (I haven't tried).
I wrote a module for it for my honours project. It's really quite horrible since the code is organised differently throughout the project. Don't get me wrong, it's an impressive product, but the whole thing could do with a rewrite and use MVC.
SugarCRM community edition still is. There's also SuiteCRM which is worth a check (opensource edition of SugarCRM professional)
In a high traffic environment (1+ million hits per day) i've found Nginx holds up alot better than Apache
&gt;every big open source project written in PHP is a framework that's subjective and incredibly incorrect. 
I see a running trend in peoples advice to become a junior developer before thinking freelance, or freelance on the side. Thank you for the advice, it is much appreciated.
Unfortunately, I'm London based.
Thank you for your time and advice.
We use Sphinx, it work great: http://www.php.net/manual/en/book.sphinx.php Highly customizable and provides relevant results.
Working at a fitness club along side, I have spoken to the guy that maintains the till/booking system, have spoken to him a few times about the system, even then, I have noticed subtle differences between, what i guess, you could call education and real world solutions. I see what you're saying about keeping a range of languages rather then getting yourself pigeonholed. I'm not sure why PHP has been the language that I ended up really getting into, I don't know if it's because when I came to uni, I had web development on the mind or it's just coincidence that it is the language that I engaged with the most. Either way, i will make sure that I regularly do little bits of programming in other languages to keep myself fresh. Thank you for the advice. 
That raises a good question. I can't think of any modern, open-source, general purpose, PHP applications aimed at the public-at-large. In a more perfect (maybe) world, we'd have active communities developing systems (on top of popular frameworks and libraries) for: - CMS. There's room for about a dozen with various balances between power and ease of use. - Forum. Why is PHPBB still the forum of choice (or so I assume)? Somebody should just rebuild a traditional forum platform on top of Aura/Symfony/Laravel/ZF. - eCommerce. Somebody needs to re-do what Magento tried to do do with all the stuff we've learned since then. Those three are all mainstays of "turn-key" open-source platforms. And the current picking are slim (and not just in PHP-land, but everywhere). I think the reason we don't see more of that is precisely because frameworks and highly-focused libraries have been taking over. And for good reason. No two businesses, or online communities, or web-zines sites are the same. "One-size-fits-all" never actually fits very well. So the trend has been towards unix: each component does one job very well (we're good at that), and they all talk to the same interface (we're getting better on that front). All that said, we could use a reboot for the "big three" mentioned above. There's no denying the value that Wordpress, Drupal, PHPBB, OSCommerce, Magento, etc, have supplied over the past ~14 years. I'd love to see the Symfony community, for instance, start up a Symfony-based CMS or forum aimed at non-programmers. In general, though, we've learned a lesson. "Turn-key" solutions are terribly hard to do, even with a well-funded team. But bespoke solutions can often be relatively cheap if you have a bunch of generally-useful, well-focused, libraries of FOSS code at your disposal.
Excellent Advice. To add to that, spend some time creating a high-level overview of the architecture of the system and define a scope to make sure you do not deviate or get carried away by things that are not high-priority. 
Using sphinx at work for some clients. I am satisfied with it. Use UTF-8. And for your "ddit" question: sphinx has this feature.
Wow, you can even install Linux on Ubuntu!
That entirely depends on how it's configured. I like Nginx better too, but Apache can scale as well too
shameless plug: http://www.dokuwiki.org
I do ecommerce so I'll chip in and say it's been done. I'm a *huge* fan of Prestashop. Free, open, MVC and super easy to use and extend.
There is no e in nginx.
It's alternative interpreter for PHP, made by Facebook. It's VM in meaning of, for example, Java VM. Read [this](https://en.wikipedia.org/wiki/HHVM#HHVM) for details.
HHVM is about replacing the webserver/php stack with this VM. The major advantage (as far as I have seen) is the speed. It can be blazingly fast in some cases. Also when you think VM, do not compare it to VirtualBox or Vagrant, they are system VMs (essentially they emulate whole computers). HHVM is a process VM which essentially emulate software (for example, Java apps run in a VM). Hope that helps. Also a small mention for the new Hack language (part of HHVM), it is meant to help developers code better by providing real time feedback to syntax errors, warnings etc. The only caveat is anything developed in Hack cannot run on PHP, it has to run on HHVM.
Hi just checked, sphinx and also elastic search but itt says we need to install it in the server ( am I wrong?) and if so, I cannot use this alternative.I need something standalone like a php class or something
So would you expect to still use apache/nginx/etc to manage the requests? But HHVM would manage PHP execution?
Was plagued by that for much of the day. Really fucking stupid idea. Especially that it Kept. On. **Repeating**
noscript, no problem
And always have a contingency budget. Clients like to change things and they think that their new ideas mean the old variant was incorrect, which is your fault and should be fixed by you for free. I recommend a contingency budget of 30%. Any 'fixes' should go to this budget; when it is exceeded all work must stop and further work renegotiated.
www.devdocs.io FTW!
FreePBX, the most mature GUI available in the OSS telephony space.
HHVM would manage the requests
this is fucking awesome
You would still use nginx, etc. HHVM 3.0 supports fastcgi only. http://hhvm.com/blog/4349/hhvm-3-0-0
holy shit, thanks!
This needs more upvotes - brilliant tool. Thanks for the recommendation!
It's blazing fast at running your code. A few months back while I was working on migrating my company from Apache to Nginx, questions about HHVM came up. I decided to put it to the test, and bench marked Wordpress with the [Hello World benchmark](http://docs.phalconphp.com/en/1.2.6/reference/benchmark/hello-world.html) among Nginx+PHP-FPM, and Nginx+HHVM. Nginx+HHVM was almost 40x faster than PHP-FPM! Taking my requests per second from around 25#/s to close to 1000#/s. HHVM doesn't replace a web server, but acts as an interpreter for PHP alongside a standard web server. The biggest issue I have with HHVM is that it's not using the full PHP 5.5 API, instead a sort of mix of 5.4/5.5, but there are some libraries like [password_compat](https://github.com/ircmaxell/password_compat) to make PHP 5.5's features available in HHVM. Along with that, it poorly handles errors on the default configuration. [Here's](https://gist.github.com/bearlikelion/9933270) my development HHVM configuration that will enable logging, display errors, and has an example $_SERVER property. Having HHVM as a part of your stack is a pretty powerful tool simply for how quickly it executes code. Although LNMH (Linux Nginx MariaDB HHVM) doesn't roll off the tongue as easy as LAMP, I don't ever see myself going back. Hope this helps!
I've been running HHVM on my server for a few weeks now, I replaced PHP-FPM for one of my personal virtual hosts that runs a typical PHP/MySQL type of application. It was super easy to set up, I followed the instructions here: http://hhvm.com/blog/1817/fastercgi-with-hhvm In my initial testing, I found the following: * Performance increased by about **5x** (I set up two copies of the same site side-by-side for testing, one with my original PHP-FPM pool and one with HHVM). I ran the same ab benchmarks recommended on the above link. * The HHVM process takes up about 3x the memory of the PHP-FPM pool that was running before. So if you have memory concerns, HHVM may not be the best right now. To be fair, I spent zero time tuning the HHVM install (documentation isn't super clear yet and I couldn't find many articles or example of people doing memory &amp; performance-tuning with HHVM yet), and my PHP-FPM pools are very well tuned (IMO) and compiled from source to only include what I need. I've left it running since, and so far no crashes or noticeable issues, but to be fair that virtual host doesn't see a lot of traffic on a day to day basis (maybe 5-10 people using it a few times an hour). Overall I would say if you run PHP-FPM installations or are comfortable setting that up, it's definitely worth grabbing HHVM and tinkering with it. Based on what we're seeing now, I am certain at some point it will likely become the better way to serve PHP files.
I haven't looked at the code, but I have used it at work. I struggle to believe that any application that creates 20+ databases for it to function is well written.
It's like a working [dochub.io](http://dochub.io), thanks.
Sounds like you need a couple project management and system architecture books. May I recommend any book from Steve McConnell for management. Also, since your talking pieces, the agile methodology would work well to help keep your project organized and on track
I feel like the trend is at least dying down. Previous years, it felt like the entire internet was unusable. Or, I'm just getting older and not frequenting the cooler sites.
I have the same feeling, however, people pointed some april fools jokes out to me that I missed because, appearantly, I'm not going to the 'cool' sites anymore :(
Indeed you would have to install sphinx... mh damn.
How have I never heard of this - it's amazing.
http://en.wikipedia.org/wiki/LAMP_%28software_bundle%29#Variants_and_equivalents_on_other_platforms It's pronounced Engine X
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 6. [**Variants and equivalents on other platforms**](http://en.wikipedia.org/wiki/LAMP_%28software_bundle%29#Variants_and_equivalents_on_other_platforms) of article [**LAMP %28software bundle%29**](http://en.wikipedia.org/wiki/LAMP%20%28software%20bundle%29): [](#sfw) --- &gt; &gt;With the growing use of LAMP, variations and [retronyms](http://en.wikipedia.org/wiki/Retronym) appeared for other combinations of operating system, web server, database, and software language. For example the equivalent installation on a [Microsoft Windows](http://en.wikipedia.org/wiki/Microsoft_Windows) operating system is known as [WAMP](http://en.wikipedia.org/wiki/WAMP_(software_bundle\)). An alternative running [IIS](http://en.wikipedia.org/wiki/Internet_Information_Services) in place of Apache called [WIMP](http://en.wikipedia.org/wiki/WIMP_(software_bundle\)). Variants involving other operating systems include [MAMP](http://en.wikipedia.org/wiki/MAMP) ([Macintosh](http://en.wikipedia.org/wiki/OS_X)), [SAMP](http://en.wikipedia.org/wiki/SAMP_(Sun_Web_Stack\)) ([Solaris](http://en.wikipedia.org/wiki/Solaris_(operating_system\))), FAMP ([FreeBSD](http://en.wikipedia.org/wiki/FreeBSD)) and iAMP ([iSeries](http://en.wikipedia.org/wiki/ISeries)). &gt;The web server or database management system also vary. LEMP is a version where Apache has been replaced with the more lightweight web server [Nginx](http://en.wikipedia.org/wiki/Nginx). A version where MySQL has been replaced by [PostgreSQL](http://en.wikipedia.org/wiki/PostgreSQL) is called LAPP, or sometimes by keeping the original acronym, LAMP (Linux / Apache / Middleware (Perl, PHP, Python, Ruby) / PostgreSQL). &gt;A server running LAMP may be colloquially known as a [lamp box](http://en.wikipedia.org/wiki/Lamp_box), punning on the type of [post box](http://en.wikipedia.org/wiki/Post_box). The [GNU project](http://en.wikipedia.org/wiki/GNU_project) is advocating people to use the term "[GLAMP](http://en.wikipedia.org/wiki/GNU/Linux_naming_controversy)" since many distributions of what is known as "Linux" include the [GNU](http://en.wikipedia.org/wiki/GNU) tools as well as the [Linux kernel](http://en.wikipedia.org/wiki/Linux_kernel). &gt; --- ^Interesting: [^Fluorescent ^lamp](http://en.wikipedia.org/wiki/Fluorescent_lamp) ^| [^PlayStation ^3](http://en.wikipedia.org/wiki/PlayStation_3) ^| [^Personal ^computer](http://en.wikipedia.org/wiki/Personal_computer) ^| [^Apple ^Inc.](http://en.wikipedia.org/wiki/Apple_Inc.) ^| [^Wii ^U](http://en.wikipedia.org/wiki/Wii_U) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgi474k) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgi474k)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Agreed - the default internet shouldn't be broken though.
If you're willing to pay a bit and you're on Mac, [Dash](http://kapeli.com/dash) is a really useful desktop application with the same idea behind it. All your docs in one place. Really powerful, keyboard centric search and navigation.
Your curiosity should be your primary motivator. As in, almost all of your motivation will come from your own desire to learn more. I didn't make any money from programming for years, it was just something I did for myself because it was damned interesting. Maybe you should take a step back and ask yourself if programming if really the thing you want to do?
Except I don't see any PHP docs in there right now. Searches for strpos (I search that one once a week) and preg_match aren't coming up. Edit: Thanks! So to enable other docs click on "Select Documentation" at the bottom and then check off PHP. I was just clicking on the PHP link in the sidebar which showed a link to php.net.
I didn't actually see this one, but it sounds like it was really annoying. It's getting to the point where I try to avoid the internet as much as possible on 4/1. 
PHP isn't enabled by default. Not sure why you you have to go out of your way to "enable" each language. Enable it first, then it shows up.
Have you ever used a site or service that spins you up into a rage over how shitty the UX is? Make a better version of it in PHP, even if it's just one small part of the site that you improve upon.
No problem here: $ php -a Interactive mode enabled php &gt; var_dump(phpversion()); string(8) "5.5.10-1" php &gt; var_dump(uniqid('', true)); string(23) "533c2972b6e279.59095453" php &gt; var_dump(uniqid()); string(13) "533c297b7c473" 
I reported that very bug... it really pissed me off. I'm all for jokes, but that was just retarded.
MySQL isn't cool enough :(
ah ok thanks. any other thoughts as to what might be going on?
Was very surprised by this.
I've been using [Dash](http://kapeli.com/dash) for free so far. I've liked it so much that I've actually been thinking about paying for it.
Dash.
&gt; c) you are not getting mentored I'll echo what others have been telling you. Getting to work in a business environment is invaluable for so many reasons. Hopefully you get into a shop that is pushing the envelope and not stagnating, especially these days with "next-gen" frameworks, composer, and other great dev tools outside of server-side like grunt, twitter bootstrap or foundation, many others. I've been lucky. My second job introduced me to so many concepts my first didn't. My current situation has me working with bleeding edge stuff all the time, it's fantastic to be on the forefront of innovation. I've know others who were not so lucky ( and didn't bother to keep up-to-date in their spare time ). Even though their resume said that they had x years experience they just lagged behind. Not only that but you get to learn about the ebb and flow of the business world in general. How things are managed, and scoped. How teams and individuals communicate ideas with each other. There's a very good chance it's not like you learned in school ( proper system's analysis and engineering FREQUENTLY get thrown out the window ). Working with time constraints with lots of moving parts ( and people ). Refactoring old shitty code / databases / systems ( again with time / budget constraints ). There's tons of juicy stuff that your education just hasn't ( and couldn't possibly ) exposed you to. Good luck! It's a really exciting time to be a web developer!
I mostly agree with you. Though I think it depends on OP's level of core skills. It might be very discouraging to jump into a framework if you don't really understand OOP yet. 
if you need greater entropy, use a sha1 hash which has an entropy of 4.5035996e+41 (read: huge enough for most scenarios)
On a personal level, you have to ignore the big picture to stay sane. That sounds stupid considering your goal is the big picture, but if you compare where you are at the beginning to the goal, it's depressing. Conversely, comparing where you are down the road to where you begin is extremely uplifting. Distill everything down to the absolute core requirements, then cut out everything that makes it "better" or "nicer". That's usually where you focus your attention first and grow in steps from there. A recent large-scale project I worked on was complex built on complex mixed with more complex. We sat down and figured out what we needed before we could actually begin so we worked on that. We needed a universal data gateway abstraction to normalize data transactions. We needed basic models with specific functionality. We needed data mappers that knew where model information was stored, and an entire model's data was usually in multiple places and systems and not the common one-to-one model-to-table relation. Once we had this plumbing in place, then would could turn to the actual application and work on specific business items that we determined we more than vital. We were still dumping data to screen or terminal at this point and didn't have a proper application to show anyone. Once we had the absolute minimum to do anything under the hood, we started working on controllers and model forms and displays. It was only at this point that we were able to show management any progress and it was hard to keep the wolves away. From this point on, it was standard continuous integration with feature prioritization and bug fixes. If the project is large enough, then there are usually multiple levels of management. A project manager might have the grand vision to shoot for, a team/division manager might have the next release to shoot for, a team lead might have the next sprint or feature to shoot for, and a team member might have the closing of the next ticket to shoot for. Different projects will organize differently, so this is just a generalization of one way. I've also been involved in a sled-dog or rugby scrum situation where everyone was level with each other and the "lead" was just someone who pointed in a direction and we collectively pushed on. The larger the scale and complexity a project has, the more management and organization become important. This is not the same as adding bureaucracy and complexity to getting things done. Some places want grunt workers whereas others want more free-thinking problem solvers. Larger companies tend towards more bureaucracy because it's easier to track using similar methods as constructing a building. Smaller companies tend towards a more flexible approach usually due to fewer resources available. I've seen flexibility run stiff as a company grew so regardless of the current situation, it can always change. Regardless of management levels or project size, there's always the same approach to be had. There are reasons sayings such like "divide and conquer" and "you eat an elephant one bite at a time" exist. Every problem must be distilled and divided into the smallest possible components. Then those components must be prioritized according to it's vitality or if enough subsequent components have it as a prerequisite. You may remove huge swaths of components at first and set them aside without truly prioritizing them because you can only do so much at a time and have to circle back around to them at a later date when you can. As you complete each component, you get closer and closer to the goal. The goal may be a release and fixed for a delivery or it may be a continuously evolving service that moves like the magnetic south pole. When a huge pile of bricks needs to be moved to the other side of the yard, you pick up a couple and start moving them. You may move them yourself a few at a time or you may get some equipment to help. Regardless or the method, the bricks still need to be moved to be declared done. Even still, people can always throw more bricks onto the pile exemplifying feature creep or continuous development. People suck at estimating time, so don't do it if you can. If pressed for a time estimate, think about the actual time it'll take you to complete something and you're comfortable with saying, then triple it. If you come in under the mark, they'll be thankful and you might look like you can't estimate properly, but having something run over schedule is much worse. More often than not you'll come across something unexpected or have someone change the estimate without telling you. I once had a huge multi-million dollar project launched after a proof of concept demo without the knowledge of anybody aside from the executives; we spent a few weeks cleaning up that mess that delayed development. Unlike in science, the worst thing someone writing software can say is, "that's interesting". In science that means a new discovery whereas in software it means an underlying problem. I once uttered those words trying to fix a lowest priority bug that I personally thought would be fixed in 5 minutes. There wasn't a clear fix so like trying to figure out if you should ceil() or floor(), I tried to figure out the desired output according to specifications. Those 5 minutes turned into 2 years for about 10 people and a 10 million dollar project wound up being completely terminated because of it; the project was a rewrite and the previous version was mathematically incorrect and couldn't be replicated. So instead of "fixing" something that was broken, they decided to keep what was broken because it "worked".
It's actually not bad.
I think /u/ircmaxell [said it best](http://blog.ircmaxell.com/2013/09/rambling-on-internals.html) when he called the internals community a "toxic kindergarten". Yes, there are some horrible people there but there are also dimwits with the emotional maturity of a 5 year old who deployed a joke like this, or worse, [this](http://i.imgur.com/fWxjxjc.jpg). I mean, seriously? Making the documentation unreadable for *a joke*? Or *my-little-fucking-pony* on a programming langauage's homepage?
We haven't deployed HHVM into production (that'll happen around the end of this month) but we're now fully developing and staging on it! I ran more benchmarks based on our application, which is built with [Slim](http://slimframework.com). The benchmark I made read and wrote to the database, and then rendered a template through twig. I tested it using Apache Bench, running 2500 requests with 1000 concurrent requests. Benchmarks # ab -n 2500 -c 100 /test/bench Apache: Time taken for tests: 16.384 seconds Requests per second: 152.58 [#/sec] (mean) Nginx + PHP-FPM: Time taken for tests: 15.164 seconds Requests per second: 164.86 [#/sec] (mean) Nginx + HHVM: Time taken for tests: 3.275 seconds Requests per second: 763.33 [#/sec] (mean) HHVM is currently taking up about 100Mb of RAM on both of the servers, I haven't really looked into tweaking memory usage at all, since they are both 1GB instances 100 MB is easy for me to spare, but it is something i'm looking more into with preperation for production. There's not a lot of documentation for HHVM, yet. Poke around their wiki for some useful pages like the [runtime options](https://github.com/facebook/hhvm/wiki/Runtime-options). --- What's your average memory usage with PHP-FPM, if I recall I was around 40Mb per process and ran a minimum of 4 processes (around 120 Mb total).
Ponies on php site, this is awesome !!!!! I think thats pretty funny to be honest. )) Especially since my frameworks site design draws a lot fro my little pony ))) I can see how they could frustrate someone though.
Oh, you are the phpixie guy! (nice project btw) Still, even though *you* are free to choose whatever design for *your* project, PHP is a major open source project / programming language and it is *utterly unacceptable* to do something like this. Imagine if Python, Java or Ruby put MLP on their website. People would riot. When PHP does it, it's just yet another ["lol, that's php, not surprising"](http://www.reddit.com/r/lolphp) sort of situation...
Here are some instructions how to accomplish this: http://serverfault.com/questions/411499/force-apache-http-compression-event-if-no-accept-encoding-header-was-sent BUT: This is a really bad idea ^TM A client will indicate whether it's capable of decoding deflate or gzip by sending the Accept-Encoding header. By ignoring that you'll just end up with a bunch of clients that can't process what they've received.
There are two solutions I see, either internals starts taking themselves seriously or replace internals. I doubt the former will happen because many people can't change their personality, and the latter's been approached many times with the most recent being hphp. Hack and the related implementations are not and should not be considered php since it's more a fork than anything. They took php seriously and decided to break from internals and go down their own path into the realm that has become hack. I hope at least the thought of hack being competition leads to internals shaping up a bit, but I have my doubts based on past history with them and similar episodes like ruby. I've always taken php seriously because I chose it as a tool for a job. I needed a resource-friendly language for dynamic websites and back with php3/4, there wasn't much else. It started as a thin layer above system calls for C, so it was adequate for the job. I've since seen php grow into a proper language through force. In its current state, php is extremely powerful if used correctly, but horribly dangerous if mishandled. The mishandling is what has always given php a bad name and reputation, but instead of holding everyone's hands, they've correctly adopted the mentality that it's the programmer's fault if something goes wrong. The low entry bar makes this situation worse because people enter the field with a lack of a software foundation and might learn a specific framework or CMS and hack around thinking if something appears to work then they're done and it's done. It was extremely difficult to relay the basic concept of SQL injection years back because they didn't understand how a database actually worked and why they should bother; I'm having the same struggles with prepared statements now. I have adopted a principle of doing as little as possible on 1 April every year for the very reason that this stuff always happens; I actually didn't witness the documentation fiasco first-hand as a result, but have seen similar issues in the past. There's tact in everything we do. If you want to be treated seriously, don't act childish. I don't have issue with the fairy mascot because it's professionally done and I would consider such a product with my business if I required it. They might alienate some users and clients because of it, but so long as everything is professional and tactful I hold no qualms. I've done business with companies whose logos were old-styled pinup girls and caricatured mutations of Reptar and Godzilla. I'm perhaps more cautious about companies who have no foundation and can be blown away in the dust of a light breeze yet publicly present themselves as an overly polished professional facade like an IBM or Oracle. Too many projects I see spring up out of nowhere publishing on reddit and other channels while offering a slick website full of polish that all of the comments praise to no end, but they don't have any substance or their substance is sour and poorly done. When it comes to internals, I view them as a bunch of people protecting their prize against outside change from people they don't trust with the tact of a lead foot to fresh cement. Everywhere in the world is unprofessionalism, and it's more realistically on a sliding scale from infantile to hard-nosed general bureaucracy. There needs to be a balance and internals is more on the infantile side which is the cause of all the problems. If they were more on the other end, there'd be just as many problems. It's in the same vein as people wanting Linus or rms to chill out about things; internals needs to take themselves more seriously and understand that it is really difficult to work with them.
For ecommerce, Sylius is a great project. They're building a really well organized ecommerce platform on top of Symfony.
No, using a hash function does not magically make your data more random. `sha1(uniqid())` will not provide "better" randomness than `uniqid()`.
Yeah, you need to look local for this kind of stuff. I'll assume since this is in the PHP sub that you are more of a backend person than a wordpress guy-- but maybe you are a wordpress guy (asshole). Wordpress jobs pay money that is as green as any other job. I did it for a while. You need to network. It is horrible. I hate networking. Which is why I sold out and am no longer self-employed for double the money but working triple the amount of time. I haven't figured out if I have come out ahead or not yet. Go to hackespace type places. Attend nerdconventions. (I am still going to those because they are fun.) Talk to your local fix it stores which may do basic web work-- but not database driven stuff with robust access controls and OWASP ESAPI integration. Your niche as a subcontractor will likely be next level expertise. It was what worked for me. And 10% kickback seemed to be the sweetspot for my referrers.
Break or continue is fine. Cleaner than wrapping everything in a conditional.
Don't you hate when that happens? You have like one or two commits that is really minor and only meant for you and then you decide to release it to the public on GitHub and now all of your silly commit messages that make sense to you are there for everyone to read. Sometimes ya need to commit something that doesn't actually matter that much in the scheme of version management so you put one little inside joke for yourself and suddenly it's out there for everyone lol. Especially if you push a personal project to GitHub for potential employer review...
As far as I have seen, there is nothing wrong with the internals. Some people get pissed off when they don't get the same fan following every where as they get here in /r/php..
It would be great if the chrome app would be an actual app and not just a frame for the website Edit: i made a simple wrapper for the site, it uses the desktop chrome app interface, its just a webview that loads the site but it can now be pinned to the windows 7/8 bar; [Here is the source](https://github.com/arosemena/DevDocsWrapper).
Oh, wow. That looks quite active. I'll have to take a closer look.
I am currently *funemployed* (yay!), and freelancing full time, so hopefully I can give some good advice here. Don't go for online reverse auction type websites - **EVER**. They are a race to the bottom, and no one ever wins. Leave it to the bottom feeders. I have had the best success pairing up with local design/creative agencies and PR firms. They are high on the creative side, but tend to need a lot of help on the technical side, so there is a lot of opportunity to be a hero for them. Just cold email a few of them saying something like *"Hi, my name is [name], and I am currently looking for some freelance work in [PHP, WordPress, mobile apps, whatever]. I'd love to meet sometime to see if we can help each other. Here's some recent work I have done [insert work samples, portfolio site, etc.]. Can we meet sometime next week to discuss this further? When are some good times for you?"* You would be surprised at how many meetings you can arrange. When I did this, I had 4 meetings in a single week and got a few jobs within a few more weeks as a result. You just have to be professional, be reliable, and do good work - these agencies are working with clients who they don't want to let down by hiring an inept freelancer, so they will pay more for someone local who they can meet and talk to personally ($55-75/hr is a good place to start if you're fairly new at this). Once you do a project or two good for them, you will most likely get a very steady stream of work. Good luck! :)
Bolt! http://bolt.cm (disclaimer: I'm one of the devs) 
interesting :)
Still under development (and you can definitely see it in parts of the interface), but looks fantastic so far.
Man pages are better anyways, since they keep you in your terminal: http://bjori.blogspot.com/2010/01/unix-manual-pages-for-php-functions.html?m=1
I think it's correct. PHP is a tool that a lot of companies use to generate their profits; the internals team is more scientific in their approach and I think many have a sense of community and nostalgia about the language that predates *Modern PHP*™. BTW, another language (in fact one much like PHP) that I see still has this old school geek mentality is Pike.
return !0 hehe
http://i.imgur.com/J8K3L.jpg
The requesting client (browser/cURL/etc.) needs to send the correct headers (Accept-encoding: gzip) then your server will respond with a gzip response. Otherwise the server would be sending gzip responses for clients that don't support it. 
"because i like programming and for a few bucks" Which one is the main reason? Because you like programming or because of the "few bucks"? Do you picture yourself sleeping on a pile of money or do you like to thing about all the cool stuff you could build with PHP? If you lack motivations, you should just try to think of a cool project that you could do for yourself (manage your comic book collection, make a website that could help your mom remember how to program the damn recorder &lt;= this is actually a good idea, I might do that one, etc.)...
Best post I've ever seen on reddit.
I previously contributed to the thread and was looking at previous posts for nostalgia purposes. Found this, laughed, commented.
Can you not do anything about out the client side to have it send the requested header?
The official mysql docs require a doctorate in theoretical computer science to understand that shit.
Ah my bad, haven't used HHVM 3.0 yet
we get DDoS'd a lot, and the network we host on just goes away every now and then, so I dunno...
Wow... I thought dev docs was common knowledge. Amazing site though, fuzzy matching, can view only one library at a time (library name then tab), fast local storage, and, most relevant, comprehensive across the whole Web development sphere, from CSS to http headers and everything in between, one stop shop. Thibaut is an awesome dude too, Ruby dev who put in php documentation first because it had a larger demand, pretty cool guy. 
You're going to need to increase your motivation level for starters. If this is not something you truly love doing and can't get enough of then there is a chance that this is going to be an uphill battle for you. Aim for small wins. I highly recommend checking out laracasts.com and starting out with the beginner lessons.
You don't do them. Any large project is a bunch of successive small projects - just handle one at a time.
Sphinx, but moving to Amazon CloudSearch. LIKE clauses are very limited.
Like others, I'm seeing TONS of browser support issues on this site. I sent it out to some co-workers and only one of them was able to get in (out of 6). It works for me in latest chrome but not IE 10 or latest FF. For others, it failed in the latest version of Chrome.
I don't have any useful information, but I could never get PuPHPet boxes to ever work.
Very frustrating and distracting when trying to actually work
Ya thanks, this will save me a lot of time :D
register_shutdown_function, get the last error and if it is one of those fatal errors do the following: set a response code of 503 and passthru a static html file containing a fail whale site is down type page.
No support for Python 2.7 :(
https://github.com/camspiers/silverstripe-loggerbridge/blob/master/src/Camspiers/LoggerBridge/LoggerBridge.php this class while somewhat specific to the framework SilverStripe gives you an idea of how you can use monolog to deal with both recoverable and non recoverable errors. It even will allow logging with monolog in the case of out of memory errors.
Thank you so much for the reply! It was a long but worthwhile read, I appreciate it a lot.
I probably should have mentioned: This is a project i'm working on solo, for myself... It's just very overwhelming nonetheless. I appreciate the comment, and cutting it down into parts is definitely how i'll tackle this behemoth. Thanks so much!
The article goes is a lot of details about Collection features, and that looks really awesome! I couldn't see much use behind Tuples and Pairs, but now I see a lot!
Yeah I mean I'll be honest. My Github stuff is purely self indulgent and wasn't really made with how other users or devs may interact with it. Some may say that's selfish, but you know, I don't really have time to push all my time into open source. Gotta build products and ship em init! Stack cash etc.
I was dead set on using Mediawiki to build my wiki farm due to its prevalence (implied stability) and number of plugins... until I tried it. It really wasn't built with farms in mind. I was skeptical about Dokuwiki's flat file performance. But gave it a go. I had my wiki farm including some custom mods up in a few hours. It's awesome! And the default caching to file is actually better than doing sql queries anyway. So if you're a Dokuwiki dev, thanks! It's awesome!
Can you add MariaDB doc? https://mariadb.com/kb/en/mariadb-documentation/
"Hack is only included with HHVM 3.0 or nightly builds after March 20th." Wut?
Yeah I'm surprised at how popular PuPHPet is but their scripts never work out of the box for me.
I have found a workaround to get it to work, see my edit.
couldn't agree more with this - only thing I would add: aim for relationships where you are in the room when the technical discussions are taking place. Chinese whispers + software development = no fun. 
Git, Composer, Vagrant, Phinx, PHPUnit, PHPDocumentor &amp; Sphinx (Python documentation engine)
CoffeeScript ;)
Thanks :)
That site's good but some of the things it does really grinds my gears.
Weird… it works for me in all these browsers. Could you send me the console logs and/or open a GitHub issue with more details? It's likely an add-on/extension that's interfering with the browser.
There is a [php-pm project](https://github.com/marcj/php-pm). You can read more about it in this [blog post](http://marcjschmidt.de/blog/2014/02/08/php-high-performance.html).
I've done it, just need to make a function or class that invokes itself for however many replies there are
Like /u/pigdart said, just add a column to your table for parentId.
If you are using PostgreSQL or SQLite, I think you can use [recursive queries](http://www.postgresql.org/docs/8.4/static/queries-with.html) to fetch nested relations. Are you using something like doctrine for db access? Another thought is, do you really want to fetch all the children of a node at once? If it is like reddit, then you can display comments to upto a depth of 3 or 4 and show a load more comments link to load comments further down. You can use references to load nested relations from a result set into a nested array pretty easily. 
Not sure if it shows the part where the actual nested data for a comment is fetched from database.
Let's say your config file containing passwords and other environment-specific details is *config.yml*. Remove it from source control and instead commit a config "template" having sane defaults for distribution. Name it something like *config.yml.dist*. Add *config.yml* to your *.gitignore* file so nobody accidentally commits it. Here's the important part. When setting up a new environment for the first time, the admin/developer must copy *config.yml.dist* to *config.yml* and provide the configuration values that are specific to that environment. Take a look at how [Symfony 2](http://symfony.com) does it. Theirs is a little more elaborate, but operates on the same principle that the actual config file isn't distributed. I hope this helps!
This is the part where I hawk [Aura](http://auraphp.com) (I'm the project lead). The components are completely independent from each other, with no cross-package dependencies at all. If you want to the middle ground of not having to write a router, dispatcher, template system, etc. but want to put them together in your own way, [Aura](http://auraphp.com) is worth a look.
I think one factor is that the range of projects that people actually want to use reactphp for (regardless of suitability) is much narrower than nodejs. Nodejs has the "OMG Javascript on the server - let's build blogs, forums and everything in it" factor, while for PHP, a lot of these projects have already been done in (and are much better suited to) "traditional PHP" (mod_php / php-fpm).
It would seem that this statement: &gt; I've decided to use the closure table model for storing the comment hierarchy rather than "nested sets" as I believe it is easier to query and sort and maintains referential integrity. conflicts with this statement: &gt; I am able to insert, update and delete records fine but actually pulling them out of the DB and rendering them in a nested fashion is proving very difficult without using eval and other hacky approaches. I understand why you wanted to try out the closure table for this, but you're proving you're theory wrong. You chose the closure table model because you thought it was easier to query, and now that you've tried it you've proved your theory wrong. As for answering the actual question, I would just use nested sets. :)
&gt; I am able to insert, update and delete records fine but actually pulling them out of the DB and rendering them in a nested fashion is proving very difficult without using eval and other hacky approaches. You are fighting against SQL, which means SQL is not what you want as a storage backend. See also materialized paths.
I do this once in a while, and it basically looks like this: /views /libraries /vendor /public /css /img index.php bootstrap.php composer.json config.php The `index.php` simply includes `bootstrap.php`, which is where I do the following: - Include vendor libraries (added using `composer.json`) - Initialize required services (database, router, template engine, etc.) - Define routes (which are either simple [anonymous functions](http://www.php.net/manual/en/functions.anonymous.php), or link to a controller in `/libraries/controllers`) - Dispatch matched route (run the app) I use `config.php` for environment variables (ie. database credentials), and this file is NOT included in code repository. Rather this is created manually for each environment. This approach prevents any accidental overwriting of production config settings. I'll often create a `config.example.php` file (in the repo) to help other developers get started with the project quickly. Hope that helps!
I try my best, but it's mostly just me working on the stuff and I'm busy moving into a new house :)
I often use [Whoops](https://github.com/filp/whoops) in conjunction with [Monolog](https://github.com/Seldaek/monolog) to manage uncaught errors, including those only available via the `register_shutdown_function()` function. Here is an example code snippet, which catches all errors, displays them nicely (in the development environment) and logs them. $whoops = new \Whoops\Run; $whoops-&gt;pushHandler( function ($exception, $inspector, $whoops) use ($config) { // Remove any previous output ob_get_level() and ob_end_clean(); // Set response code http_response_code(500); // Log error if ($config-&gt;error_log_path) { $logger = new \Monolog\Logger('errors'); $logger-&gt;pushHandler(new \Monolog\Handler\StreamHandler($config-&gt;error_log_path)); $logger-&gt;critical( $exception-&gt;getMessage(), array( 'File' =&gt; $exception-&gt;getFile(), 'Line' =&gt; $exception-&gt;getLine() ) ); } // Display errors if ($config-&gt;show_errors) { $whoops-&gt;pushHandler(new \Whoops\Handler\PrettyPageHandler()); $whoops-&gt;handleException($exception); } exit; } ); $whoops-&gt;register();
Given a comment structure of: postID, commentID, parentID, comment class Post{ public $children = array(); } class Comment{ public $children = array(); function __construct($data){ ... } function render(){ /* see below */ } } select * from comemnts WHERE postID = post ORDER BY commentID ASC; ... $Post = new Post(); $comments[0] = $Post; foreach( $rows as $row ){ $comment = new Comment($row); $comments[$row['parentID']]-&gt;children[] = $comment; $comments[$comment-&gt;id] = $comment; /* php5 objects are passed as reference so: $comments[0]-&gt;children[0]-&gt;comment === $comments[1]-&gt;comment; */ } Then you simply have to recursively call a render method function render(){ echo '&lt;div&gt;'.$this-&gt;comment.'&lt;/div&gt;'; foreach($this-&gt;children as $child ){ $child-&gt;render(); } } ... $Post-&gt;render(); 
&gt; RDBMS Not really. The relational model itself is not in conflict with nested relations. However, [most] SQL implementations do not provide means to address the generic use cases. Essentially you need to organize the stored tree data in such a fashion that it is convenient to retrieve, which usually means it is less convenient to create and update, or vice versa (this post is case in point). The most trivial representation of an [unidirectional, acyclic] tree is a table of tuples (parent reference + value), but retrieving a subtree requires a loop for which SQL, at least in case of MySQL which I presume here, doesn't provide a primitive. Thus we have hacks such as nested trees and materialized paths. Essentially there is no native way in MySQL to treat table rows as a part of a tree, and require a range which describes a subtree.
As with all things, start at the beginning. A big project means there are a lot of components that depend on each other. However, there is (or at least should be) 1 component that doesn't do much but mediate between the different smaller aspects. Start there. Once you finish that, you have a something that, by itself, does quite little but to which you can hook up the functionality of the other aspects. Doing it TDD (Test Driven Development) could also help. Write a test, then write the least amount of code to make the test green, refacter the mess you just made, confirm the test is still green, make the next test that'll fail. To put this into an example, let's say you are making a CMS, One of the first tests could be to simply log in. The next test could be to add a page, the test after that could be to edit a page. Than remove a page. Small chunks. And because you make a test before making the actual implementation, you will know *exactly* when you accidently break something. If you don't think TDD is really for you, just write down what you would test if you were going to do TDD, now you have a list of (hopefully) bite-size features you want to implement in your project.
Even though you work by yourself, you can still have the idea of stakeholders. You are making something that is usuable for a specific audience, right? Maybe that audience is nobody else but you, but that's still an audience.
Forgive me if I have misunderstood but with this implementation: If I have Comment A and Comment B, Comment B is a child of Comment A Won't the above code result in the following array of comments $comments = array( "a" =&gt; Comment( "children" =&gt; array( "b" =&gt; ... ) ), "b" =&gt; Comment( ... ) ); Let's assume Comment C is a child of comment B and comment A -- A ---- B ------ C Surely it is impossible to query for "Get me all children of comment A" without a large set of nested queries. 
https://leanpub.com/mlaphp
Oh, I see. You calling SQL as a storage back end got me confused. &gt; However, [most] SQL implementations do not provide means to address the generic use cases I know postgresql and sqlite supports recursive queries. It seems that MS SQL and oracle also supports them. So I am not sure what you mean by 'most sql implementations' does not support them. And as far as I know, MySQL does not do a great job confirming to SQL standards.
I think it depends on if you're limiting the amount of comments you're loading, and whether you're limiting it by depth or an absolute number per page. Also, you can still use the closure DB structure alongside the parentID structure, it's just a denormalized structure. If you save in your closure table that C is a child of A and a child of B you can SELECT comment.* FROM closure LEFT JOIN comment ON closure.descendant = comment.id WHERE closure.ancestor = 'A' ORDER BY comment.id ASC; ninja edit: You can also add a depth column to closure to limit recursion Second edit: you will have an array of $comments, but it's merely meant as a reference set and can be unset() after the loop.
&gt; I know postgresql and sqlite supports recursive queries. It seems that MS SQL and oracle also supports them. So I am not sure what you mean by 'most sql implementations' does not support them. I stand corrected. 
Checkout [deploydo](https://www.deploy.do/) for a good deployment solution. It provides line-by-line diffs before each deployment, supports managed config files and easily connects with your git repository. Additionally your whole team is now able deploy your code in a transparent process, just like you know from GitHub :) For a self-hosted solution you may want to look at [capistrano](https://github.com/capistrano/capistrano). It also provides a good deployment solution, but it takes some time to set it up. Disclaimer: I work for deploydo.
You're welcome =). I use your service almost daily.
Yeah, with this implementation if I had -- Comment A ----- Comment B -------Comment C I couldn't call "Get me all *descendants* of A" in one query, I could only get immediate children. 
I have no idea why SHA1, which hashes a value (what entropy does the value have?), is suggested. The correct way to add entropy would be to use a properly random number, i.e. use openssl_random_pseudo_bytes(). You can use bin2hex() to produce a readable string from the output. You can then replace uniqid() completely (it's entropy is actually quite low, even with the TRUE parameter) or append it to a normal uniqid() if you rely on the ID's microtime components. P.S. The first part of a uniqid() is a hex encoded timestamp...hence the need to add entropy where you don't want it guessed, or are fraid of repeating IDs.
 // hardcoded maximum number of units @ 9 for minor speed increase Chuckled at that a little; I doubt there are many files in the wild that are &gt;=1TiB. It's great future-proofing, though.
You might also be interested in [Silex](http://silex.sensiolabs.org/). It's still a framework, but it's a "micro" framework that comes with exceedingly little out of the box. It's compatible with a *lot* of great libraries, and it lets you totally control the structure of your application. You learn a lot by wiring it all together. [Here's](http://php-and-symfony.matthiasnoback.nl/2012/01/silex-getting-your-project-structure-right/) a helpful blog post about structure etc. I like to do something like: /app /controllers /views /src (for my custom libraries - PSR-0 or PSR-4 (I never remember which) stuff) /MyAppNamespace /Repos /Services / .... whatever else! /vendor /public /js /css /img But really you can do however you like. 
You are my new best friend. :-)
Never forget [phptherighway](http://www.phptherightway.com/)!
Capistrano is a fairly solid solution. If you're deploying to a LAMP stack and don't want to set up your server the Capistrano way, I made this really simple extension that probably deploys in a similar way you do now: https://github.com/rossriley/capistrano-simpledeploy In terms of config, you can then use the environment that is set in your capistrano deploy file to symlink the correct config. Mine looks like this: task :symlink do run "ln -s #{fetch(:deploy_to)}/config/#{fetch(:environment)}.php #{fetch(:deploy_to)}/config/config.php" end That means you always load config.php as your configuration, but depending on the environment, that might point to config_development.php, config_staging.php or config_production.php 
&gt; I'm stuck between two extremes: building everything from scratch, or using frameworks that completely hide the inner workings of my system. So what can I do? How can I build my own basic framework from which to bootstrap everything else? &lt;soapbox&gt; I've seen this kind of thinking before on /r/php and I think, even though it's done with the best intentions, it's misguided. **You will learn a lot from using frameworks.** I know, you want to learn higher level programming techniques in the *purest* way possible: by writing everything yourself. Trust me, you will not learn very much that way. I know because I thought that way myself, and even built my own framework. But it will always be more difficult to learn much by programming in a bubble. Stand on the shoulders of giants, as they say. IMO, the best way to learn good programing techniques is to read and use other people's (good, quality) code. You will learn how to structure your code base, common development patterns (MVC, ORMs), and even better OOP. Also very important is you'll learn how to use other people's code and break out of the "not invented here" mindset. Yes, when you start using a framework the tutorial will say "put your code here, don't ask why, you'll thank us later" but that's just for the sake of the tutorial (and you can always choose to skip the tutorial and dig into the full documentation, but that way it will take longer to get a basic functioning site to play with). However, without even trying you will start to learn why things were setup like they were in the first place just by building and improving your site. My other recommendation is to try more than one framework (once you have a good understanding of the first). Then you can compare implementations, and rate the pros and cons of each. I think this is really where you really start to learn. &lt;/soapbox&gt; Edit: Also, yeah, [what camus2 said.](http://www.reddit.com/r/PHP/comments/223kqe/stuck_between_the_basics_and_frameworks_how_to/cgj3az9) You **will** learn what a router does when using a framework, you'll have to. You'll use it all the time. What the framework does is it doesn't require you to know the implementation details. But, if/when you're curious you can just read the source and find out as much as you want to know about the nitty-gritty.
Awesome. Thanks for spreading the knowledge :)
I will plus one this hawk. I'd also recommend looking at [StackPHP](http://StackPHP.com ) which is a very nice way to build composable apps without a framework dependency. I've also built a stack middleware which I'm using for Aura Router, feel free to check it out (https://github.com/rossriley/stack-aura-router/) which uses Stack and Aura Router to give you a nice starting point of a routable app.
I dont know what database you are using, but postgres can do [recursive queries](http://www.postgresql.org/docs/current/static/queries-with.html).
Overall: Hack is very similar to php, but with additional features (static typing,etc) and restrictions (only one opening tag, no references, etc). IDE's: If you use vim or emacs to develop, there is already syntax highlighting support and integration with the typechecker. Other IDE's that want to support hack will need to add it as a new syntax highlighter. Frameworks: By design Hack is interoperable with php. php files can call into hack and hack (non-strict) can call into php. Nothing preventing you from using your favorite framework, but you won't get all the benefits of hack unless the majority of your codebase is written in Hack. I'd love to see some frameworks written in Hack, but I'm not aware of any that are production ready at the moment.
Most major PHP frameworks are already 100% compatible with Hack and HHVM: http://hhvm.com/frameworks Many others, such as ZF2 and Symfony, are very close to getting there. The Hack / HHVM team at Facebook and most open source framework teams seem to be very interested in working together to get everything straightened out.
Nice. I have suggestion for making a submatrix. Instead of copying the whole matrix, just wrap the orignal matrix in a sub class of Matrix and add two properties, $skipped_row and $skipped_column. and override all the methods that return a value at an offset to consider these 2 variables to return the value after skipping the row/column. But you will have to do all element access via get method, even internally ones without directly using the array.
http://stackoverflow.com/questions/10506668/mysql-multiple-queries-for-anagram-solver please take a look at second answer.
Best PHP book I've read, thank you. 
If you are using mysql then use nested sets or materialized paths. If you are using postgres then use recursive queries.
I really enjoyed this book: http://www.amazon.com/gp/product/B005X2CZUS/ref=kinw_myk_ro_title
I am sorry. ok, I have another suggestion. store the sorted charecters separated by %. so in your word table, you will have entries like, word sorted_chars ----- -------------- dirt %d%i%r%t% tired %e%d%i%r%t% red %d%e%r% and select them with something like , for the word reddit, select * from word_table where "ddeirt" like sorted_chars; 
Add your usernames and passwords to your apache or ngix env var configuration. No more need to store passwords in codebase.
This is how I organize all my projects nowadays: init.php composer.* .git* /src (psr-0/4 classes incuding controllers) /include .gitignore (ignore *local.php) config.global.php config.local.php (unversioned) local.php (unversioned hook during init.php) services.php (IoC definitions) routes.php /tpl layout.phtml &lt;all the other template files&gt; /vendor (unversioned) /public .htaccess index.php (entry point, includes init.php) /js /css /img
People view pmjones as a bit of an overbearing self-promoter. I don't, but I know that's how some feel. I admire his dedication to his project. It would be different if Aura sucked - which, in the little I have seen, it doesn't. 
For TYPO3 there is a AdditionalConfiguration.php which should, like you recommend, not be part of the versioning control. Maybe a template, but that should be it.
H_o Please read - question.
Is this suitable for beginners?
The benefits of HHVM aren't going to be apparent for the majority of regular PHP codebases, because they aren't enforcing the static typing from Hack that allows the analyzer to make cycle-saving optimizations. And unless they run a lot of loop logic that will earn back the JIT cost incurred from the first execution of the loop by traversing a long list of data, the compiler won't be much help either. HHVM's success is really tied to Hack's penetration as a widespread PHP dialect, and considering the massive developer base that struggles with basic object orientation and encapsulation, I don't know how far outside the enthusiast base it will reach.
This is the correct answer here. If you need to retrieve every comment from the database with a single query, you'd have to use a WITH RECURSIVE clause. Unfortunately, MySQL doesn't implement that. +/u/wimpykid
This is indeed the correct answer. I have no idea why you didn't get more upvoted. OP would need a WITH RECURSIVE clause. Unfortunately, MySQL doesn't implement that.
Can anyone recommend an advanced php book?
PM sent -- definitely not browser extensions, unfortunately. My FF is a clean install.
This is where a microframework (silex, fuel, phlyty) or a component library like AuraPHP will come in handy. They'll help you organize the the most common components in a web project without the huge sea of code that comes with a bigger framework.
Don't expect it to be particularly fast, or scale well to a lot of documents. For that matter, Drupal core has indexing and search. You may be able to strip the relevant code out and use it yourself (after making sure that's allowed by the license) 
Why can't you install anything on the server? Are you on shared hosting or have unfriendly sysadmins?
&gt; Hack and HHVM (in some form) are the future of PHP. Lol. 
Am I missing something or are you not publishing application code that you are testing? If so, what is the point?
Networking. You need to get to know people. Look for business networking meetings in your area. EVERYONE needs website work. And if you're good at selling yourself, you will find A LOT of jobs. Also a good idea is to talk to accountants. They have a lot business contacts. Tell this accountant that you're interested in talking to him about his services for your "business". (A way to get in the door) Let him know that you would like to start a business consulting and you're just getting all your ducks in a row. Then ask him if any of his current clients needs websites. I got two jobs this way plus did a site for my accountant.
I am hitting this page of in my application: http://buyable.me/product/view/1561 Essentially a couple of DB queries and rendering data. I will and get a code excerpt to you soon.
In addition to creating a "default" file for git and removing the rest from commits: Set environment variables in your apache/nginx host configuration to define the server name, then have the code choose the configuration file based on the server name set there.
As to settings, I'm honestly unsure but I don't think so. It does definitely vary based on what you are doing. It does really well with looping lots of similar data, things like that. Not looping 50 times, but 1000's of times.
Unfortunately, that does not tell us much :)
Ok I will update the article with the code and let all of you know here. 
Oh ok. My code really does no loops. I thought it worked with repeated code in general. So across many requests to the server.
The basic [PHP mail() function](http://php.net/manual/en/function.mail.php) Saying that, you may want to consider something a little safer, like [a well-established mail library](https://packagist.org/search/?tags=mail). And, because one should *never* trust user input, also look at [validation](https://packagist.org/search/?q=validation), [filtering](https://packagist.org/search/?q=filter) and, of course, a [captcha](https://packagist.org/search/?q=captcha).
People please ignore this, since he used a EC2 micro instance. Even a coin tossing is more reliable than a benchmark on a micro instance.
I see. Not too much of an issue for me with fast internet and a fast machine. I could definitely see that the search results would get a bit too crowded when looking for generically named things present in many languages, however. Not sure how to make the UI clearer. It's a tricky question, for sure.
a t1.micro performs great with PHP5-FPM no idea why it would be bad for HHVM. Also all results in this test are 100% repeatable. So it's not a coin toss.
His point is completely valid, you cannot rely on EC2 micro instance. First, EC2 is shared, with no guaranteed resource, so your performance is subject to the variations of the CPU/RAM/disk usage of your neighbors. Second, a micro instance has a burst-down mechanism that will destroy your performance as soon as you'll start a benchmark. At the very least, use a small instance. For these tests to be remotely significant, you would have to run them at least ten times each. But then, the benchmark is subject to optimizations and file caching. I recommend a library I wrote that does some runs before the test starts: https://github.com/lavoiesl/php-benchmark Tip: If you want to use PHP to run your tests but still go through nginx, I recommend https://github.com/chuyskywalker/rolling-curl to do some parallel testing. 
This is what I would do but i'd also add an `order by votes, parent_id desc`
I was seeing double performance with HHVM-fastcgi compared to PHP-FPM+opcache with Drupal. Haven't tested anything else, but your results look exactly the opposite. 
Ok I can re-run tests on a different instance. So let's agree on the instance type, m1.small?
You have the configuration file load different passwords based on the HTTP_HOST, or is that not the point of this question? 
Someone suggested a c3.large. I will give that a shot and let you know how things go.
Not necessarily. There are plenty of common use cases it is slower at, not really by its own fault but because of the difference in design considerations.
In most cases I'd just use an array, but I agree it makes sense for object properties and/or methods. But to avoid it, why not use call_user_func_array? So something like this: $field = 'name'; //so instead of this: $user-&gt;$field($parameter); //do this: call_user_func_array(array($user,$field),$paramenter); As a side note, it is interesting that Hack excludes both variable variables and extract.
Does the framework allow different configuration modes? If so, perhaps you can enable certain routes under a special "demo" config mode, and different routes under other modes.
Run it on your home hardware or a dedicated non-virtual server and describe the hardware in the benchmark.
Hey, that's pretty cool!
&gt; I've decided to use the closure table model for storing the comment hierarchy rather than "nested sets" as I believe it is easier to query and sort The strength of nested sets is that it's so easy to query (though hard to insert, delete, and re-sort).
c3 would be acceptable indeed because you are CPU bound. This does not change the fact that you will need multiple runs because it is unstable by nature.
Which framework and what is the task changes everything. Are you request, CPU, memory or disk bound. ### Request bound - a lot of small requests The type of webserver and PHP service will change about everything. Running Nginx + fastcgi is a must. HHVM will probaly not have a huge boost over php-fpm. ### CPU bound Running on virtual hardware will give you a big drop in performance. HHVM will help a lot since it can optimize it's opcode. Drupal is known to be very CPU intensive because it uses an insane amount of hooks. ### Memory bound A bit like CPU bound because HHVM has a lower memory footprint. If you are using an ORM like Doctrine, memory cluttering of all the loaded entities can because a problem. ### I/O bound HHVM vs FPM shouldn't do much difference. Running something like APC or any file caching will help more than whatever else. Some frameworks like Symfony build a cache directory where it "precompiles" and concatenate PHP files, lessening the I/O impact.
I *HAVE* run it against my codebase and we see minimum gains of around 3% as high as 12%. We have a few things which HHVM does not support yet though, so we're waiting patiently to be able to use it. As for the guy's assertion that you have to use Hack to gain anything is patently false as there have been proven speed improvements in HHVM LONG before Hack even existed.
He didn't say you had to use Hack exclusively, he said it was the dialect that allowed HHVM to gain the most benefit. And that's true, the ability to enforce stricter typing allows the system to have a clearer picture of how the data needs to be handled. But your typical PHP codebase that doesn't utilize a tremendous amount of long-lived (tens of ms) processes won't see much of a benefit because the bootstrapping code and database access code will make up far more of the processing cost than anything HHVM can optimize. Think of it this way: the difference between a Wordpress-style blog package (minimal benefit) and a image processing script that runs on 100 images (huge benefit) will come from the fact that the latter will use a lot of looping and processor bound calls while the former will spend most of its request cycle setting itself up and talking to the database. Again, if we're not clear about the best use cases and utilization of HHVM (and Hack) up front then we're just going to make things more discouraging for users who won't see what all the hype's about when their poorly optimized SELECT query runs like a fucking dog and they blame HHVM.
I should have that checked out. During a past project, my teammates actually nicknamed me Hemingway after I wrote lengthy commit messages for complicated or otherwise vague issues so I could grep for the diff later and understand it. I think it was supposed to be an insult, but I changed all system aliases to Hemingway and challenged them to a fight. Nobody accepted; we laughed; we drank.
&gt; Why can't you install anything on the server? Are you on shared hosting or have unfriendly sysadmins? Shared server as of now ...
PHP Objects, Patterns and Practice 
There's nothing wrong with Yii 2 in principle, but as it's still in Alpha I'd be avoiding it for now. Yii 1... TBH I'd give it a miss. PHP has come a long way in the meantime, and missing the benefits of composer, autoloading, etc, would be generally a bad thing, imo. It's worth pointing out that RBAC is easily available for Laravel, even though it's not built in. I believe there's a package called Authority. I also ran across something about [Multi-tenancy in Laravel](http://culttt.com/2014/03/31/multi-tenancy-laravel-4/), which might be of interest. I have to be honest, I haven't read it yet, but I will. Everything I've ever done in Laravel has pretty much been multi tenant, so I don't quite see why this is considered a hard problem, it's quite trivial. &gt; I think Yii looks to have less bloat/load/abstracted code than Laravel Can you explain that? I mean, in concrete details. I find Laravel clear and concise, and I think avoiding abstraction as some sort of principle is highly unwise. Our entire field is based on stacks of smart abstractions... PHP is an abstraction of C, which is an abstraction on... etc. Calling Laravel's code "bloat" seems to me like dismissal of good architecture, rather than a valid choice. IMO, Laravel hits a sweet spot at this point - it's cutting edge enough to be good, but also is stable enough to be used. It has a large and helpful community, and a reasonable learning curve. Yii 2 will definitely be worth a look soon, but I personally wouldn't use it yet.
Nice library! It is especially nice to see arithmetic operations that don't mutate the original matrix.
I've been waiting to use it with drupal as well, is the small parity % left to be done noticeable error wise?
Thanks for the awesomely thorough reply mattaugamer! "Here's the thing" ~ 1) I really don't care much for autoloading - although I know (and use) it's benefits - I've seen performance benchmarks and whilst it loads classes quicker when there are many hundreds, it's not much faster for just a couple of hundred classes or less, if faster at all, and it's something I'm sure I could hack into Yii 1. 2) Composer... well that's harder to hack eg getting namespacing right etc... but most, if not all of the third party code I need, should already be available for Yii 1 - even if I have to add it manually and not via the magic that is Composer. Thanks for the multi-tenancy in Laravel link - I think I've seen it before - but will re-read now with your points in my mind, and I think I've seen Authority too, which I should revisit. I guess I'm trying to find a balance in a framework of one with enough of the core libraries/features I need rather than use many bundles/third party code, and preferably one where I can easily get to and see the framework code. When I looked for the Laravel framework code last time, it was called something like 'Illuminate', and if I remember correctly, I had to go to another github page for it, or at the least dig rather deeply for it. That may appear incredibly imbecilic and lazy of me - but it was enough of a pain to put me off laravel, as although I'm all for de-coupling - too much abstraction, at least to me, is as much of an issue as too little. Can you point to any actual flaws in Yii 1 architecture - in the Aug. 2013 release that's truly antiquated or bad coding practice or bad architecture (other than lack of autoloading, integrated composer support, etc)? I actually think Yii has a bigger community than laravel - simply due to its age, and they appear rather friendly (like yourself) and aware of where Yii could be improved - but have good enough work arounds for them.
Thanks! I ultimately found it easier to build a new one, particularly with the map operation on there. It just seemed that logically if you took, e.g., the transpose of a matrix, that's a new and different matrix. Next up, I want to add a Vector type to this, as that's a common specialization of a matrix. I'm just trying to figure out if multiplying two vectors is a dot product (yielding a single number) or something else. As in, is there an implied transposition of one of the 1 x N matrices before the multiplication? Thoughts?
&gt; PHP is an abstraction of C... You can say all computer languages abstract the under lying hardware. But to say one language abstract another doesn't sound correct to me.
I have updated the blog post with the new results and the code it is running.
I have updated the blog post with test results from running it against a c3.large. I have also included a snippet of the code I am running.
Ok ~ fk it ~ I'll give Laravel a try! If it's ok, may I PM you with the odd question about setting multi-tenancy? Thanks for the feedback and advice.
Well, PHP was originally written as an abstraction of Perl, literally. It was a bunch of perl scripts mainly used for templating dynamic pages.
Got myself like 17 of them no further back than 2012 because I wanted mostly modern
Thanks, it's great to hear people like it!
I think a good next for me is to profile the code and see which part of the code is slower.
I'm not sure I understand the last bit, but the dot product of two vectors should yield a single scalar. Can you give an example where it wouldn't?
I have updated the post with the code snippet. Not sure if that is enough. My next steps include profiling the code to see where it is slower.
I used Bill Karwin's method too. Check out http://saurini.com/2013/06/27/how-i-converted-a-path-enumeration-table-to-a-closure-table/. Hope it helps.
call_user_func_array is kind of slower
So, you're basically creating a rainbow table? That's been done before: http://www.project-rainbowcrack.com/ 
I'd be very interested in knowing exactly what your use case is for this. And why aren't you just generating random strings from a dictionary instead?
Hmm no you're wrong, PHP is a direct abstraction of the C libs used, that's why built-in array functions are $needle, $haystack and string functions are $haystack, $needle; and it also has to do with why function naming was so inconsistent. =) It may be perl-like, but definitely not a bunch of perl scripts. 
Read its history. It was originally a bunch of perl scripts. Is it too hard to go check Wikipedia?
Good tutorial. I think it should also have file type checking, and ability to do more than just jpeg. EDIT: My bad. I guess this tutorial sucks. Should have used other x, y, z code instead. Forbid anyone learn how to use standard php functions.
Take this code for example: $vector = new Vector([1, 2, 4]); $vector2 = new Vector([2, 5, 1]); $vector-&gt;multiply($vector2); Before these two could be multiplied, one of them would need to be transposed, as the number of columns of $vector needs to equal the number of rows on $vector2 for a dot product to work. So, for this code to properly work without a bunch of superfluous `-&gt;transpose()` calls in client code, I'd need to just go ahead and transpose one of them inside of the `-&gt;multiply()` function, right?
&gt; the ability to enforce stricter typing allows the system to have a clearer picture of how the data needs to be handled False. For now strict typing of Hack isn't used by HHVM for better JIT compilation. However it is planned to be used for this. Source: comment of a Hack dev on a blog post recently posted on reddit
Symfony http://symfony.com/
oh, thats actually a lot easier than all the solutions i thought of
Hmm...no that wiki entry is wrong, check the sources on it. PHP Tools 1.0 was definitely written in C. https://groups.google.com/forum/#!msg/comp.infosystems.www.authoring.cgi/PyJ25gZ6z7A/M9FkTUVDfcwJ
&gt; PHP development began in 1994 when the developer Rasmus Lerdorf wrote a series of Common Gateway Interface (CGI) Perl scripts, which he used to maintain his personal homepage. The tools performed tasks such as displaying his résumé and recording his web traffic.[5][10][11] He rewrote these scripts in C for performance reasons, You have reading comprehension problems eh? It clearly states he originally wrote it in Perl. He then rewrote it in C for performance...
This is amazing, thanks for sharing.
I'm subscriber since September 2004. It's time to complete the entire collection :) Thanks for sharing!
At this point, if you want your code to have a life beyond yourself, you should stick with Laravel or Symphony 2, if you are building any API, silex is your goto. These are frameworks which all use DI, and are highly reliable &amp; extensible. I'm not going to argue the merits of Yii, but I know anything these days using the symphony stack is going to be built on top of a solid foundation.
Who cares what anybody thinks? You choose the right tool for the job or get out of my office. Next!
Conversely, I can't find a proper source where Rasmus claims he didn't use Perl originally. That sangkrit site seemed very spammy and had zero citations. You could ask him(Rasmus) on twitter or G+. edit: Here we go. some evidence: http://talks.php.net/show/mysql07key/2 see the counter.pl file?
Thanks for your advice - I've decided to go with Laravel :-)
Thanks for your advice - I've decided to go with Laravel, so I guess I'm using symfony underneath anyway :-)
I hope this sale isn't an omen of how well the magazine is doing. With that said, I just bought this years copies, and may end up getting a subscription.
https://github.com/nikic/FastRoute is a nice implementation of a router. Alternatively you can look at the Aura routing component (it has no dependencies on the rest of the framework): http://auraphp.com/packages/Aura.Router/
People who works with only one language hates all the other one. People who works with many hates all of them.
well said
I am still not convinced. It is good to have options and I see myself using hack for some projects, but I care about interoperability a lot and I trust judgment of php-developers community a lot. Facebook rushes with their implementation to get shiny bits, and good press, but there is a good chance that open discussion will bring better solution to the same problems. I want to have that discussion and I want to have "PHP spec" which would give us common ground. p.s. and I don't think static typing is the way to go. Generics are evil
"Lots of people want to pay me to code with it."
http://i.imgur.com/WZ2czgF.png
Save for future read..i trying to do this forever without any sucess
"Facebook"
buggy inheritance?
Set up your web server so all non-static hits get redirected to index.php Prepare a list of key value pairs of the form regex =&gt; functionName, ordered most-specific to least-specific, because you're going to consider them in order. Get the path the client requested from $_SERVER Loop over the list of key value pairs until you find a regex that matches the path. Call that function. That, I think, is about as simple as you can get. You can replace the regex=&gt;function map with something that better suits your needs, work some assumptions in there, use classes or namespaces, whatever.
i store my routing information in an array $routing = array( '/this/is/a/path' =&gt; 'module:action', '/*' =&gt; 'module:action' ); then to get the *action* from the url i do this function action_code($url){ $routing = array(); include(SITE_ROOT.'routing.php'); foreach($routing as $route =&gt; $action){ if(fnmatch($route,$url)){ return $action; } } return false; } then $x = explode(':',$action_code); $action_path = SITE_ROOT."modules/".$x[0]."/".$x[1].".php"; if(is_file($action_path)){ include($action_path); }else{ http_response_code(404); 
There are a lot of Non-2xx responses for the hhvm tests. I guess the extra time in the hhvm benchmark could be caused by error processing when these non-2xx responses happened.
I'd use a combination of rewrite rules and a front controller. So from a php way of approaching it, route everything through a index.php file and allow this file to chose the appropriate end point for the request. I read a decent article on the Symphony website about this approach. I'll try and find it. Edit: Found it, http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html
Here's how I usually do routing. Just include a script based on a GET value: //shared stuff that happens before routes $routes = array( null =&gt; 'home.php', 'about' =&gt; 'about.php', 'contact-us' =&gt; 'contact.php'); include 'routes/' . $routes[$_GET['r']]; //shared stuff that happens after routes Any feedback would be appreciated.
Amen to this, brother. I've doubled my salary in the last 2 years as a LAMP dev.
1. Use ImageMagick. 2. Always save original image. 3. Create thumb with watermark on request. Dont add watermarks during image upload. P.S. If you are good enough try adding watermarks to animated gif.
oh god.. your 2 examples were buggy inheritance (... details?) and a fucking CHARACTER THAT IS USED TO SEPARATE NAMESPACES? holy moly. First world developer problem right there... I don't like the \ character... There are plenty of actual reasons to actually criticise php. Valid problems and idiosyncrasies.... you could have chosen any number of those ... but you complain about the namespace separator. I don't even.... 
There are plenty of arguments to make...I don't know if I have a specific go to...but I do like to point out the fact that it is available on virtually every hosting solution imaginable... which gives you plenty of options when it comes to actually deploying your solution. 
I just noticed this - maybe the code is using something that HHVM can't handle yet?
Chiill..no need to swear...i know u.love php that much tillu ignore it bad side. Php namespace r stupid..have u even see what the proposal for namespace operator? They even propose smiley...well later i show u what i mean buggy php inheritance is since now im using phone
And y is that first world developer problem?typical php lover..cant accept the fact..php namespace are stupid and ugly plus hard to press .it proof how messy php interpreter is..they cant use existing operator cause php interpreter not aware about context..but php still have it use..dont get carry away too much..get over it 
I think I'd create a "demo" branch in git and apply all the changes there. Then do all my primary development in a development branch. When I'm ready to roll out the demo, I switch to the demo branch and `git merge development`. You might have a conflict or two - but that would only serve to highlight the changes you've made in the production app that you might want to change anyway in the demo branch. You would never back-merge demo into development, so as to keep your changes isolated and out of the production code. The nice thing about this is you could then have specific integration tests that are demo-branch specific so the demo's uniqueness is testable too.
What year is it? At least use OOP.
The only major issue with this is that it produces some ugly URLs. www.mysite.com?r=contact-us Whereas using a framework like [Slim](http://www.slimframework.com/), the URLs are a little prettier: www.mysite.com/contact-us Otherwise it's not a big deal. Routing is always something that can grow into a mess; sometimes it's best to keep it simple!
&gt; feel free to browse through http://www.serverphorums.com/list.php?7 that's a mirror. I'm on that mailing list for many years &gt;&gt; Generics are evil &gt; No, based on my experience with C# They are the necessary evil when you try to mix Static Typing with functional approach. it's just that the code is much shorter and cleaner without them (in dynamic languages). Sometimes I am ready to pay this price for a warm fuzzy feeling of static checks, sometimes I'm not and prefer "duck typing"
I saw you and Lorna at PHP[TEK] last year where you guys plugged your book a bit. What a great conference! Opened my eyes on lots of things that i've been missing. I'll be at PHP[TEK] 2014! 
And the answer from twitter is: https://twitter.com/rasmus/status/452003651863588864 &gt; @brianfoxwell I wrote some stuff in Perl early on, but no, nothing that was ever named PHP was ever in Perl.
Did you have a bad experience with PHP when you were younger?
&gt; And y is that first world developer problem? Because you are crying over something that isn't really a problem? &gt; typical php lover I am a PHP developer. And a PHP user. And there are parts of PHP I certainly dislike a whole lot. There are literally dozens of problems with PHP as a language. This isn't one of them. &gt; php namespace are stupid howso? &gt; ugly Subjective opinion? &gt; hard to press Really? on my keyboard the \ key is as easy to press as every other key. Suggest you might have a defective keyboard if it takes significantly more effort to press that particular key. &gt; it proof how messy php interpreter is. Because they didn't want to use an existing reserved character as a delimiter? I'm not saying the php interpreter isn't messy.. but this is hardly solid proof that it is. &gt; they cant use existing operator cause php interpreter not aware about context [citation needed] &gt; dont get carry away too much..get over it get over what? I'm not the one crying into my teacup over a decision to use the \ to delimit namespaces.... 
Not that i hate..i use it everyday but i don get blind by its uglyness and weirdness..php use :: for static and . for class property...y is that..and php core dev have a tendency always to have backward compatibilty...that what most it problem came from..i just found very funny some ppl religously defend php...still php has it use..cheers..im sorry if i offend others phpers :)
That might interrupt the incoherent misdirected rage...
Exactly. And a good programmer is more important than a good language. Within limits of course, you don't want to write a kernel in PHP.
Have u ever see how other language implement it? Than u know why it stupid..it rlly hard to press on keyboard...thats just proof how messy php interpreter is..if php interpreter are context aware, they can simply use / for namespace seperator...no need to worry about division operator..heck who divide string anyway?how many time u see autoloader that perform string replace \ for / ? 
Not to mention its entirely free, and the hosting solutions are very low cost.. If you need a quick online PHP environment you can find hosting solutions at 3-4$ per month.. 
 &gt; include 'routes/' . $routes[$_GET['r']]; Add a var check. Also make the key for home.php be "home" and not null. if(empty($_GET['r'])){ include 'routes/' . $routes['home']; } elseif(isset($routes[$_GET['r']])){ include 'routes/' . $routes[$_GET['r']]; } else { // 404 }
Is this a "your mom" joke ?
Im crying? How so..u just cant accept php weirdness..so sad...how \ is much simpler than /?u urselff do confess how ugly php is..y it stupid? Oh men..go take a look at autoloader implementation...u can google urself about php interpreter being not context aware...get over it..u cant event accept how stupid php namespace is
For WordPress I added the wp-config.php to .gitignore so each environment gets its own config. Its a lot easier that having to remember to run the --assume-unchanged command on every enviorment
I think you made a good choice. I had been stuck on Code Igniter and a custom framework through work for the last several years and recently evaluated all the popular frameworks for a new project. I chose Laravel and I couldn't be happier. Check out [Sentry 2](https://cartalyst.com/manual/sentry/introduction/features) for your permissions stuff. It's easy to use with Laravel and uses Composer. There are a few Laravel + Sentry 2 tutorials out there to get you started, which you might if you're not already familiar with Laravel.
Look at the diff between the old and new composer.lock files.
&gt; Have u ever see how other language implement it? Sure have. What does that have to do with anything? &gt; Than u know why it stupid Nope, still not seeing it. &gt; .it rlly hard to press on keyboard Really? Is it like, more effort? does the \ key have like 10x the amount of resistance compared to other keys? or do you have an exceedingly weak pinkie finger? As I see it you either have a defective keyboard, or you can't type. &gt; thats just proof how messy php interpreter is So, that the \ key is apparently hard to press... is proof that the PHP interpreter is messy. Riiiiiiight. &gt; if php interpreter are context aware, they can simply use / for namespace seperator Or perhaps they felt that it was more comprehensible explain / is for division and \ is for namespaces? It seems like a pretty reasonable decision to me.. even if it is a little idiosyncratic. The fact is it makes **functionally no difference** to how namespaces work and it is dubious proof at best of your assertion that PHP isn't aware of context. &gt; .heck who divide string anyway Well, if I understand correctly *everything* in php is treated as a string so..... &gt; how many time u see autoloader that perform string replace \ for / ? I fail to see how this matters. if the namespace separator was a period you would have to replace a period with a /. 
Hey now. It's not that bad. 
So funny u take it so personally ..sign of blind programmer..now i know y u stuck with php..u can defend php for all u can.fact dosent change..php does sucks..and it even funnier when u blindly support it..lol..i stop here..waste my time
&gt; Im crying? Ok you're not crying. You are raging about something which literally doesn't matter. Of all the things which are "wrong" with PHP your choice to rage against this is ... at best hilarious &gt; how \ is much simpler than /? Did I state that \ is simpler than /? anywhere in my post? Nope. Didn't think so. &gt; u urselff do confess how ugly php is. no, I stated that there are parts of PHP I dislike a lot. &gt; Oh men..go take a look at autoloader implementation Your autoloader assertion is hilarious. If you were to use an idiomatic namespace separator like a period, you would still have an almost identical autoloader implementation. &gt; u can google urself about php interpreter being not context aware I could. I really don't care. However you are making flimsy arguments and failing to backup your position with arguments. Your statement might carry more weight with appropriate citations. &gt; get over it It doesn't bother me. What exactly am I supposed to be getting over? &gt; u cant event accept how stupid php namespace is And you can't accept that it makes no functional difference ... even a little bit. 
I don't "blindly accept it". I simply do not believe you are making a strong case. There are dozens of problems with PHP which are of legitimate concern. If you want to talk about how bad PHP is, those would be appropriate things to criticise. User land PHP developers criticise these shortcomings regularly.
I don't have any old composer.lock files.
Not using version control huh?
For me the go to is: It's fun! In how many languages do you get to type echo "Hello, world!" and actually mean it? :-D 
The modern frameworks, hosting solutions, documentation, great for small projects, good libraries for literally everything 
"Show me on the doll where Rasmus touched you."
Facebook is mostly Hack, but still... Yeah
I feel like this *is* a your mom joke
There are plenty of examples where this is patently false. It **can** still have a massive performance improvement without hack. That doesn't mean it will. It strongly depends upon your code base. Which is why there are a lot of us who say "don't trust benchmarks, you need to test your own code", because every piece of code is different. If your codebase is I/O bound (DB or disk), HHVM isn't going to do a dam bit of good for you. If it's highly dynamic switching types alot, HHVM is likely going to slow you down significantly due to either not being able to JIT at all, or to bailout frequently. Not to mention that there's more to performance than just JIT compiling. What about the fact that HHVM lacks a cyclical garbage collector? Which means for certain work loads on medium-running processes (greater than 100ms, give or take) it can actually leak memory. Not to mention that there are potentially significant memory leaks in there in general (I've got a long-running process that leaks non-cyclical memory at about the rate of 200mb per minute on HHVM, but is rock solid on PHP5.4)... There is no such thing as a magic bullet. Please stop spreading FUD...
&gt; I'm just trying to figure out if multiplying two vectors is a dot product (yielding a single number) or something else. There's at least 2 different ways of multiplying vectors which give you different results. The dot product gives a scalar and the cross product gives you an orthogonal vector of two vectors (only in 3 dimensions).
I don't think you do use php. You just said you access a class property with . ?? What!? Backwards compatibility is very important considering that php is the most installed language in the world. If updates broke old code, there's be millions of servers running old versions of php that aren't as secure or efficient. You can't forget that there are shared servers out there that have hundreds of different sites. Some of those might be a site written in an older php version by a contracted developer. Do you really think that the site owner should have to higher a developer to rebuild their site every time the hosting company upgrades?
I'm sorry for your loss.
I am but I guess I missed that file. But that file doesn't have any text in it about what bugs were fixed or what any changes were. I don't see how this file helps me know this information.
Possibly worth pointing out here that slier has decided to take the argument into private messages... presumably to avoid the torrent of comment downvotes.. Such chestnuts as assertions that golang will be the death of PHP, and that php continues to suck due to the selection of namespace delimiters. Not sure if I should be laughing or reporting the general abuse :P 
Composer... Tell you stuff. Hah laughable. How about while you're waiting for four hours for composer update to complete, you go look at the package websites to see what was changed. Composer won't even tell you when it fails to update something. I'm not trying to bash composer, I use it... It's just that it seems to be lacking a lot considering how big it has gotten. 
Knowing the diff between the versions you had and the versions you have allows you to go to the corresponding repos and make comparisons there.
Isn't Hack just a modified/optimized PHP? Not to mention it just recently went to hack. First it was plain old PHP/MySQL, then they built HipHop. Now it's Hack. Either way clearly PHP roots are still there :D
Tell them to take it up with wikipedia
I use PHP a lot and I am one of those "PHP sucks" persons. I'm also a Ruby sucks, Python sucks, Java sucks, C# sucks, JavaScript sucks, Lua sucks, Go sucks person. I hate them all. Rust &amp; Haskell I hate the least.
Doesn't really work if the person works in multiple languages and even perhaps does a lot of work in PHP.
"What's that? I can't hear you over the sound of me getting shit done." Saw this somewhere on Twitter.
just tell them to have a look at PHP 5.5
The URLs like this are easy to fix in .htaccess though. RewriteEngine On RewriteRule ^([^/]*) /?r=$1 [PT] www.mysite.com/?r=SOMETHING is now accessible via www.mysite.com/SOMETHING. The server will display the correct page with the new URI. [apache wiki with more info](https://wiki.apache.org/httpd/RewritePathInfo) 
Something like 95% of all websites are built in PHP, then I name several big companies (Facebook, for one) using it. In the end, I ask the person what's more important: finding a good paying job or learning 100 languages and not truly have any deep knowledge in a single one. PHP isn't perfect, like every language, but it's popular, always evolving, has a massive community, and there's ass loads of jobs. I'm sticking to PHP unless I find something more fun. 
https://github.com/chriso/klein.php This one is pretty popular.
Cheers
*There are only two kinds of programming languages: those people always bitch about and those nobody uses.* -- Bjarne Stroustrup Seriously, though, if people get all "lolphp" I usually just ignore them. Their arguments are generally out of date, misunderstand the nature of PHP or, worst of all, are actually valid. :) PHP has no shortage of flaws. Whether those are "irritations" or fatal issues is up to each person. Personally, I think some of the terrible function naming, inconsistency of argument order, etc, are things that should be fixed, and as a priority. But PHP is still a valid solution to many common problems, and highly optimised for those problems. You know, connecting to a db, getting info out, displaying it, etc.
I have the difference in the version numbers. Is that what you mean? Composer outputted all the to console.
There you go. Now go do the legwork.
Here's the core concept of routing, the most important thing: you're mapping an identifier (url) to one or more callables. A callable is usually called a controller by convention and will either output html directly or return html for the caller to output. So if you have a function called "index()" that returns "&lt;html&gt;hello world&lt;/html&gt;", then $routes = array("/" =&gt; "index") is a valid route: call_usr_func($routes["/"]).
I was going to send you that today!
What is a "web operating system"?
"You might be right, but you're still an asshole"
Hah, I commented on the issue, it got deleted too :( A mate found this also (check out the issues too): https://github.com/pixleight/closedcart
It's not really an operating system, but a traditionnal computer desktop like gnome/kde. A desktop with icons you can click on, etc... but on your browser, example: https://www.youtube.com/watch?v=Tx-t2RdZwN8&amp;t=6m48s http://en.wikipedia.org/wiki/Web_operating_system
wat
I'll be there! Giving an introduction to databases workshop, which should be fun!
[My reaction to these people.](http://i.imgur.com/2rPPVj5.gif)
[QSA] appends the querystring as the rule is applied.
No one's ever actually said anything like that to me in person. I've only seen it said online. But if anyone did say it in person I'd just point out that it's the most widely used language for web development. 
If you want a *really* simple router, and one that you should never use in production, I wrote [a really simple one](https://github.com/RequestsPHP/test-server/blob/master/bin/serve.php) for testing Requests. (I need to emphasise that this is reasonably poor code, but I wanted something quick that worked.)
20% of websites are running Wordpress, so PHP isn't going anywhere anytime soon.
I usually go with something along the lines of [this](https://www.youtube.com/watch?v=sfvoFa4phO4).
I have rerun the tests on a C3.large and posted the results.
People who get butthurt when you talk about the pros and cons of a programming language have super insecurity issues. As a decent developer you should be able to name things good and bad about whatever language you are working on. If you can't name anything bad about PHP you haven't used many languages or you have your head in the sand.
I usually have a standard reply to these OS X/Linux/Windows or PHP/Python/Ruby or basically any other hater/fanboy statement: "Yeah, I am that good so I need a handicap to be on a level playing field with you people."
Look at symfony's introduction on their website ("the book"). They have a walk-through the most basic "hand made" router - no symfony required for this part of the tutorial. Very instructive.
Wow, really? That's a huge optimization vector, and I'm extremely surprised if that hasn't received any attention to this point.
Or facebook
&gt; Who cares what anybody thinks? People who have to answer to other competent technical people. Basically, people who aren't just in a small web dev shoestring shop
&gt;good libraries for literally everything Debatable (last I checked PDF generation in php was still a pain in the fucking ass).
I did a very rough concept here: https://github.com/Payum/PayumServer. It is based on Silex Micro Framework and can accept only Paypal EC payments right now. All the code could be found in web/index.php
&gt; Something like 95% of all websites are built in PHP, Completely not true.
I like you
That isn't a real argument. Many people thought the world was flat, does that mean they were right?
You would hate Python. Your subjective opinions don't make a language good or bad.
A lot of people using something doesn't make it not suck. 
Or is it flip_array() ?
According to w3techs.com, it's [81.9% of all the websites whose server-side programming language they know](http://w3techs.com/technologies/details/pl-php/all/all) ...
Thanks for sharing, I'm one of the co-owners of php[architect]. The magazine is doing quite well. We wanted to give people a chance to catch up at a fantastic price. If you are going to be at Lonestar or Tek, find us to check out what the print issues look like.
Well ... what you are looking for is probably JavaScript, PHP is not a UI. example: http://dev.sencha.com/deploy/ext-4.1.0-gpl/examples/desktop/desktop.html
Well, that should rule out any 3rd party option that isn't hosted in the cloud. Particularly if you want to do word-stemming.
Im willing to bet that rarely is someone who criticizes another language competent enough at their own to make that criticism in the first place. He who has not sinned may cast the first stone and all that.
I don't like php but it does have its place. Just don't ask for enterprise applications in php, gotta have strongly typed languages in that environment in my opinion.
What are you talking about? That's not even a valid analogy. The fact that at least 20% of websites are using software that require PHP means that the language will be relevant for quite a while. That also means that there will be work available for developers.
Bravo. 
&gt; The fact that at least 20% of websites are using software that require PHP means that the language will be relevant for quite a while. Popularity doesn't mean it's good. The question asked in this thread is not "What do you say if someone tells you PHP isn't used", it was "How do you respond to someone saying it isn't good". The analogy I was trying to make was "just because it's popular, doesn't mean it's right/good". &gt; That also means that there will be work available for developers There's lots of work for Fortran devs right now. Does that make it a good language? PS. I'm a php dev (i also have programmed in python, java, c#, js, etc.., but mostly php right now). If someone were me if I think it's a good language, I would definitely say it is, but I wouldn't just use the false argument that it's good because it's popular. Frontpage and DreamWeaver were popular web tools once, now I shudder when I think of those days.
The token has nothing to do with somebody getting drunk, or being a "fuck you" to anybody. The token name comes from Zend Engine 0.5, which made its debut in PHP3. Zend is an Israeli company, and Paamayim Nekudotayim (פעמיים נקודתיים) is Hebrew for "double colon." That's really as funny/exciting as it gets. the token is named as such as a nod to the Israeli roots of the engine developers. 
Wkhtmltopdf. Construct your html and exec out to that motherfucker.
"PHP Sucks" Works for me! See ya
mod_rewrite
I shrug and say "It was the best choice ten years ago, and we're sure as hell not going to rewrite our entire platform.". PHP isn't as bad as people make it out to be, but I'd never start any new projects in it.
Agreed. Starting out with "PHP sucks" though, is hardly a competent argument of any significance. As said, choose the right tool for the job.
He says that nothing called PHP was written in Perl, but he got the idea to write PHP from his Perl scripts, and rewrote many of them in C to become PHP. You can be pedantic and say that it wasn't technically PHP, but I think that is wrong. That would be like saying the analytical engine wasn't a computer because Babbage didn't call it a computer. Or Ford didn't make cars because he didn't call them cars. edit: You can also look at one of his "evolution of PHP" presentation slides and see that he includes those days of Perl scripts in PHP's "evolution". (http://talks.php.net/show/mysql07key/2)
"When I stop getting a salary for knowing it, I'll stop using it."
This probably came to attention because we were talking in /r/netsec last week about their terrible security practices. "Bcrypt is a waste of time", etc. You should stay far away from this project.
Right now they infer the types (how? I don't know but they say what they did is very efficient), so it's already optimized a lot I guess.
I usually say why we're using it. "The speed benefits of another language don't outweigh the amount of good devs we can find that know PHP." So to get as much done as we can, we continue with PHP and use frameworks and other tools to mitigate some of it's misgivings. 
If you're coding a trivial HTTP server, you can just do string comparisons on the client URL and serve up different responses based on the outcomes. You can probably use the following tutorial in node.js to get what you're looking for: http://www.robsearles.com/2010/05/nodejs-tutorial-part-2-routing/
&gt;nil is a word invented by ruby 
Aww man, the legend was much more fun. But thanks for clearing that up. 
good to know. thanks!
Agreed. I guess I just assumed that the "PHP sucks" person would be another developer.
I really like this one. I think I'll steel this one from you in the nearby futher :)
I show them all the jobs available
**Anti-PHP Person:** PHP Sucks. **Me:** \[walks away\]
If you work with a language long enough you know what to hate it for Don't know who said this originally, but it's valid and the opposite is true as well, every language that is used has some good about it.
Tell me a different language where I can get a free online host for, upload some files and have a functioning web application online, all in 2 minutes?
My work is about half php and half ruby. I feel like I'm the only person in the world that enjoys ruby/rails yet doesn't mind PHP either...
I just tell them that PHP as a language has matured big-time into a really solid language in the last couple years, but I understand their frustration since a large portion of the internet is still running on old software relying on old versions of PHP that legitimately do suck. PHP 4 was a black mark that is going to take a long time to "heal." PHP 5 wasn't even all that amazing during 5.1 and 5.2. 5.3+ is where PHP really grew up and became an adult language with adult features and became deserving of adult respect. Just tell them that blanket saying PHP sucks is like saying CSS sucks because CSS 1.0 was immature and poorly supported.
Just because you can write shitty code in PHP, doesn't mean you have to
I'm not going to defend the repo owner but the person who opened the issue admitted he was trolling and that he's done it to other projects: &gt;What happened is a Trial by Crisis. In this, the "good" developers will take someone that is hostile, brittle even, and then sift their criticism to find what's valid and use it to their advantage; the "bad" developers will melt down in an egotistical rage. It's a brutally honest method of sorting the shit from the shiny, and if it bruises egos, so what? The world is a tough place; get used to it, kids, it's a rough ride. And, guess what? I've done this before, to another project - NodeBB. Guess what didn't happen? Egos were held in check, they've managed to take what I had, use it to forge themselves something better, and come out ahead. Bugs were fixed, security vulns addressed, and improvements made. They passed. This sorry excuse for a developer didn't. It really drives home why I've taken a hiatus from open source projects. People think creating drama on a tracker, rather than pull requests, is contributing to a project.
wow people still fall for the lemonparty.org eh? [have you seen their bumper stickers?](http://www.thatawesomeshirt.com/images/get/558/500x250/) 
To add to that: An array is something, so something is always greater than nothing.
On the OS just use 64bit, there is no reason not too. I second that perhaps CentOS would be better suited for this but in the end linux is linux.
Who cares? The people who go out of their way to make these comments are generally not worth the air they consume.
As /u/SurveySaysFuckYou said: &gt; An array is something, so something is always greater than nothing. You're probably getting confused because `count(array()) &gt; 0` would evaluate to false.
They infer the types by tracing. That basically means they watch the execution of a function a bunch of times to "learn" about what gets passed in. The more times, the higher confidence they have. So if something is always passed in as an integer, they will detect that. Static types can give them this information earlier, but they will still get it.
MariaDB is a drop in replacement for MySQL, so that's pretty safe to try. To get PHP5.5 w/Debian you can use http://dotdeb.org/ repos. I'm very partial to Debian, its solid and tested. It sounds like you're going to put a lot of services on the machine, so make sure you get enough memory. In any case use 64bit, so you can address more than 4G of memory. [This](http://www.howtogeek.com/165144/htg-explains-should-you-use-the-32-bit-or-64-bit-edition-of-ubuntu-linux/) has more details.
So we "should" be able to retrofit HHVM on an existing PHP code base and see the performance gains?
I discovered ElasticSearch a while back, and found so many great uses for it. Fulltext search, autocomplete, analytics. It's a simple jar file to install, and from there it's all REST. Maybe take a look? Nginx is defo the choice instead of Apache.. unless your guys can fine tune Apache. Most people can't. Nginx OOTB &gt; Apache OOTB. Nginx just beats it to serve static files, plus it can act as a pretty good balancer. The downside is that you lose those htaccess files. Even if you're going the Apache route, use php-fpm anyways. It'll make transition easier if you ever decide to switch back to nginx. Also, if you want to test HHVM, it's a 1 line change. Pretty neat. You don't need suhosin patch, AFAIK patches has been rolled into the mainstream php. 5.5 is considered pretty safe. I dunno much about Mysql/maria/percona. I heard that percona is "faster" but don't take my word on that. -- edit: forgot about OS OS: I personally prefer Ubuntu. I'm not a great devop, and if I need help, I find it easier to find help when it's ubuntu, especially for web dev stuff. Just make sure you don't use Gentoo, lolol. 
[Are you serious?](https://github.com/opencart/opencart/issues/1269#issuecomment-38146718) This guy has the worst superiority complex, and he's an idiot.
They are both different types. 0 gets coerced into false for the comparison. An array is defined. Something defined is greater than something false.
What do you mean by "retrofit"? HHVM runs PHP. There are numerous benchmarks that show that HHVM runs PHP much faster than Zend Engine (aka *PHP*) in most situations.
Came here to suggest this lol. The original router before it was cool to route.
Except it's not PHP. Good luck with running this on PHP hosting. Obviously many hostings provide ssh nowadays, but this is going to be a pain in the ass when moving to another host, unlike pure PHP solution and I don't know, if running third party non-php apps is not against this particular hosting policy.
I would look into using reactphp to make realtime notifications and events easier to deal with. Otherwise, you're better off using node.
AS3 taught me to love strongly typed variables. I wish JS, Ruby, PHP, etc. all had them.
You could do way better than C.
I use Ruby/Rails for huge applications and PHP for little things that just need to get done in a day to a week. Love them both.
It might be best not to metal in matters that aren't conductive to the topic.
All PHP array functions begin with array_ :) ... except for the sort functions.
Load up a table with dictonary words. Do: SELECT * FROM words; or however your ORM works. Then in your PHP do: foreach($results as $result){ $myLittleHash = md5($result['word']); //or whatever //Store my little hash somewhere. } 
&gt;Create thumb with watermark on request. When you say "on request" do you mean recreate the thumbnail every time the image is loaded? Image manipulation is one of the more taxing things you can do, why would you not do it once and just save it?
There are a lot of people who will talk down about things simply so they appear discerning. Be wary of them.
"Yeah I know, but I'm awesome at it and it pays the bills"
All the PHP people who complain on being looked down on in this way are the same people who look down on the Drupal devs, of which I am one.
shared nothing *as a principle* also *scales* really well.
alternatively, them: "PHP Sucks" me: "Ok" ( ... continues reading about latest best practices in PHP and implementing them anyway)
Just curious, is this an old project that was written in PHP 4? Or why do you chose not to use a framework? 
That throws a notice. The result is from doing an unsupported cast.
This http://zaphpa.org/ I use it in my mini custom framework
Uhm, yeah that is the plan, but can I lower route duplications anyhow? 
It's a good programmer's best friend because a good programmer knows how to make it into an extremely powerful tool. But it's a nightmare if you have someone who doesn't have good foundations of programming Both things can be said for every language. Shittily written code in the fastest language is still shittily written code.
That's what Sinatra is for.
Facebook also sucks. What's your point? And eBay is a moldy pile of Perl scripts, but you don't hear people rushing to use it to defend Perl.
And WebSockets and other things that require long-running processes are still dodgy at best.
I'd agree with them. I used to feel the irrational need to "defend" PHP. Then I learned a couple of other languages and realized PHP is a mess.
I'm a php/java dev. Python syntax is just bizarre to me 
Everyone's doing a lot with htaccess. Here's how we do it. If you have an url as such: http://www.yoursite.com/slug1/ Simply get the url, remove the base url, explode the rest and put it in an array. Then we simple do a query to the db for any 'page' that has this slug1. The query returns a controller name, for which we simply do this: include_once 'controllers/'.$controllerName.'.php' Always make sure to check if the file exists first, this way you can fallback to the homepage if no controller is returned or if the controller doesn't exist. In case there are many slugs, as such: http://www.yoursite.com/slug1/slug2/slug3 the same process is used, except the controller returned via slug1 simply gets slug2 and slug3 as arguments. The reason the first step goes via the database, is because we always have a dynamic 'page' controller, which is a general page with a body of text. These are dynamic pages that our clients can create and manage in a content management system. They simply create some text and save it and we store it as a 'page' with the 'page' controller.
Easiest way: use a framework.
Why are you comparing an array with 0 anyway?
arrayflip(direction, array_ToFlip)
They've been trying it forever without any useful application
This guy is a douch bag and his code sucks. Its the most procedural, objects are function holders type crap imaginable. Nothing is instantiated more than once. Theres pretty much a single instance of everything. I'm ashamed I once recommended this project to a company.
I stop feeding them and avoid that bridge in the future. 
What does the form html look like? Edit: OK, I have to run... but to cut to the chase, $ClubCode is probably string '118' not int 118. You could probably just cast it to int like $ClubCode = (int)$_POST['ClubCode'];
`$data` was supposed to be an int. Something got screwed up and it ended up an array. I fixed that code, but noticed a weird side effect that it was evaluating as true.
Try adding the verbose flags to composer. I've noticed when I've done this I can see some commit logs of updated packages. `composer update -vvv` You'll see a ton of other unrelated output, and I don't know for sure that all projects will output the commit log, but I've definitely seen it happen. YMMV.
The latest yii has composer support. So... I really like Yii and Yii 2 is looking to be even better
The syntax looks fine, aside from the "or die" paradigm but that's another topic. $_POST['ClubCode'] isn't equal to 118, now you just have to figure out why.
Why will it get ugly to maintain? What do you mean by wildcard/parameters? You can combine it with htaccess: RewriteRule ^([a-z]{4,16})$ ./?r=$1
If this is in the browser, I am suspecting session locks. You can check hen it's doing the delay thing by clearing your cookies and invoking the script again, and if it then runs instantly, it's a session lock. 90% of the time it is caused by email sending in the script. You may want to investigate that. But it could be any other function that does something with an external resource.
Or is it arrayflip(array_ToFlip, direction) ?
what would your controller look like on line 6?
Yes, they had this example web desktop thing on the ExtJS website for a while now. It would be nice if someone actually implemented it. OP: you should really try to implement that. And for such heavy UI, ExtJS is the best tool, especially if you plan to release yours as GPLv3.
I use PHP 5.3+. I prefer to use small libraries with minimal leaky abstractions. I use composer, so I have all of packagist available.
For about 7 years. Android is fun. It's pretty easy to get and once you get it, you can produce something very quickly. Same with JavaFX
&gt; Why will it get ugly to maintain? I've had even medium sized sites with 30-40 routes of varying depths. Your system means not only defining every root level page, but every sub-level and sub-sub-level page as well. &gt; What do you mean by wildcard/parameters? I mean things like `/article/{{articleslug}}`, RESTful urls. Consider this comment thread: `/r/PHP/comments/226cor/whats_a_simple_way_to_do_routing_without/cgk7hnt` That is actually three different staged urls: - `/r/{{subreddit}}` - `/r/{{subreddit}}/comments/{{postid}}` (the slug is optional and not actually validated) - `/r/{{subreddit}}/comments/{{postid}}/*/{{commentid}}` That's a lot of mod_rewrite conditions to map all those segments to different query params. Most routing libraries handle this sort of thing built-in. Then there's also the matter that mod_rewrite is not actually part of your codebase, it's a server configuration. Yes, you can make it part of the codebase via .htaccess, but [htaccess files slow down apache, as does using lots of mod_rewrite rules](http://www.programmerinterview.com/index.php/apache-interview-questions/does-htaccess-slow-site-down/). It also ties your entire application to Apache, so you can't ever switch to an nginx server.
I haven't used Treehouse, but Google's docs are quite good too!
Don't forget there's more than Apache in existence for Web Servers. If you rely on htaccess, you may one day find yourself needing equivalents for Nginx (the next most likely web server for you to use as a PHP dev). Rewriting index.php in Nginx is a common-case, but those fancier custom ones might bite you back one day.
it makes sense to me, or so i think. But socket_select($read, ...) is coming back empty when the 2nd client is trying to connect.
"PHP sucks!" "Giant who cares"
The original message used in the opening of the bug was neutral in tone and factual. I don't see how that was trolling...
Checkout typescript! Strongly typed JS.
then the best way is to look at the source code! if the repo doesn't have a list then there's not much more you can do. Usually people have a github repo, you can always look for that and see what commit messages they have.
We use it where I work. I hate it. I want to use Sylius, but it's still young. Maybe soon! 
And facebook will be... 8 years old? Yeah your examples don't mesh up.
here is the full page code each time an sql statement is run it puts those codes in the database if the club code does not match what they enter in it should throw up an error and stay on that page if the club code is correct then move on to the next page &lt;?php date_default_timezone_set('America/New_York'); error_reporting(E_ERROR | E_PARSE); require 'connect.php'; require 'core.php'; ?&gt; &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt; &lt;title&gt;McNick Fundraising Sign Up&lt;/title&gt; &lt;link href="css/package-soccer-styles.css" rel="stylesheet" type="text/css"&gt; &lt;!--Start of Zopim Live Chat Script--&gt; &lt;script type="text/javascript"&gt; window.$zopim||(function(d,s){var z=$zopim=function(c){z._.push(c)},$=z.s= d.createElement(s),e=d.getElementsByTagName(s)[0];z.set=function(o){z.set. _.push(o)};z._=[];z.set._=[];$.async=!0;$.setAttribute('charset','utf-8'); $.src='//v2.zopim.com/?1zl9XG89KWAtHumWMVpZd7JvvsHgonLS';z.t=+new Date;$. type='text/javascript';e.parentNode.insertBefore($,e)})(document,'script'); &lt;/script&gt; &lt;!--End of Zopim Live Chat Script--&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="header"&gt; &lt;div id="logoDiv"&gt;&lt;a href="../index.html"&gt;&lt;img src="../images/logo.png" width="141" height="24" border="0"&gt;&lt;/a&gt; &lt;/div&gt; &lt;div id="topRightDiv"&gt; &lt;img style="float:left" src="images/homeSignupBar.png" width="1" height="20"&gt; &lt;div id="homeLinkDiv"&gt;&lt;a href="index.php"&gt;HOME&lt;/a&gt; &lt;/div&gt; &lt;!-- &lt;img style="float:left" src="images/homeSignupBar.png" width="1" height="20"&gt; &lt;div id="signUpLinkDiv"&gt;&lt;a href="loginform.php"&gt;SIGN IN&lt;/a&gt;&lt;/div&gt;--&gt; &lt;img style="float:left" src="images/homeSignupBar.png" width="1" height="20"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id="wrapper"&gt; &lt;div style="float: left; width: 650px; height: auto; padding-top: 45px; margin-left: 200px; font-family: Arial, Helvetica, sans-serif; font-size: 36px; color: #f7ce3e; font-weight: bold;"&gt;Club Funded: Fundraising Simplified&lt;/div&gt; &lt;div style="margin-top: 30px; background-color: #02265a; height: 75px;"&gt;&lt;div style="position: absolute; float: left; width: auto; height: auto; top: 78px; left: 19px;"&gt;&lt;img src="images/clubFundedLogo.png" width="171" height="147"&gt;&lt;/div&gt;&lt;/div&gt; &lt;div id="step"&gt;Step 3:Pick your package and enter the code from your card&lt;/div&gt; &lt;div id="packageWrapper" style="margin-top:100px"&gt; &lt;div id="checkOutDivs"&gt; &lt;!-- box one --&gt; &lt;div id="boxOne" class="boxes"&gt; &lt;div class="idclubstuff"&gt;Club Code - Team Code - Player Code&lt;/div&gt; &lt;form action="" method="post"&gt; &lt;input name="ClubCode" type="text" class="emailPasswordBoxes" maxlength="3"&gt; &lt;input maxlength="3" name="TeamCode" type="text" class="emailPasswordBoxes"&gt; &lt;input maxlength="3" name="PlayerCode" type="text" class="emailPasswordBoxes"&gt; &lt;?php $id = getuserfield('ID'); $_SESSION['user_id'] = $id; $query = "select * from users where ID = '" .$_SESSION['user_id']. "'"; $result = mysql_query($query) or die(mysql_error()); $row = mysql_fetch_assoc($result); if (isset( $_POST['submitAssist'] ) ) { $ClubCode = $_POST['ClubCode']; $TeamCode = $_POST['TeamCode']; $PlayerCode = $_POST['PlayerCode']; $Amount = 25; if ($ClubCode != 118) { $err = 'Invalid club code'; } $query = "INSERT INTO club (ClubCode, TeamCode, PlayerCode, Amount, Purchaser) VALUES ('$ClubCode', '$TeamCode', '$PlayerCode', '$Amount', '$id')"; $query_run = mysql_query($query) or die(mysql_error()); header('Location: assistPayment.php'); } ?&gt; &lt;input name="submitAssist" type="submit" value="CHECKOUT" style="margin-top: 15px; width: 180px; height: 55px; margin-left: 18px; border-radius: 10px; font-size: 24px; font-weight: bold; color: #307AB2; font-family: 'Arial Black', Gadget, sans-serif;" &gt; &lt;/form&gt; &lt;div style="width:100%; font-weight:bold; font-size:16px; height:20px; text-align:center; color:red; float:left"&gt; &lt;?php echo $err;?&gt; &lt;/div&gt; &lt;/div&gt;&lt;!-- end of box one--&gt; &lt;!-- box two --&gt; &lt;div id="boxTwo" class="boxes" style="margin-left:3px"&gt; &lt;div class="idclubstuff"&gt;Club Code - Team Code - Player Code&lt;/div&gt; &lt;form action="" method="post" name="hatTrickPackage"&gt; &lt;input maxlength="3" name="ClubCodeHat" type="text" class="emailPasswordBoxes"&gt; &lt;input maxlength="3" name="TeamCodeHat" type="text" class="emailPasswordBoxes"&gt; &lt;input maxlength="3" name="PlayerCodeHat" type="text" class="emailPasswordBoxes"&gt; &lt;?php $id = getuserfield('ID'); $_SESSION['user_id'] = $id; $query = "select * from users where ID = '" .$_SESSION['user_id']. "'"; $result = mysql_query($query) or die(mysql_error()); $row = mysql_fetch_assoc($result); if (isset( $_POST['submitHatTrick'] ) ) { $ClubCodeHat = $_POST['ClubCodeHat']; $TeamCodeHat = $_POST['TeamCodeHat']; $PlayerCodeHat = $_POST['PlayerCodeHat']; $Amount = 100; if($ClubCode !=118) { $errHat = 'Invalid club code'; } $query = "INSERT INTO club (ClubCode, TeamCode, PlayerCode, Amount, Purchaser) VALUES ('$ClubCodeHat', '$TeamCodeHat', '$PlayerCodeHat', '$Amount', '$id')"; $query_run = mysql_query($query) or die(mysql_error()); header('Location: hatTrickPayment.php'); } ?&gt; &lt;input name="submitHatTrick" type="submit" value="CHECKOUT" style="margin-top: 15px; width: 180px; height: 60px; margin-left: 18px; border-radius: 10px; font-size: 24px; font-weight: bold; color: #7FBC2E; font-family: 'Arial Black', Gadget, sans-serif;" &gt; &lt;/form&gt; &lt;div style="width:100%; font-weight:bold; font-size:16px; height:20px; text-align:center; color:red; float:left"&gt; &lt;?php echo $errHat;?&gt; &lt;/div&gt; &lt;/div&gt;&lt;!-- end of box two --&gt; &lt;!--VALIDATIONS for box 2--&gt; &lt;!-- box three --&gt; &lt;div id="boxTwo" class="boxes" style="margin-left:3px"&gt; &lt;div class="idclubstuff"&gt;Club Code - Team Code - Player Code&lt;/div&gt; &lt;form action="" method="post" name="goalPackage"&gt; &lt;input maxlength="3" name="ClubCodeGoal" type="text" class="emailPasswordBoxes"&gt; &lt;input maxlength="3" name="TeamCodeGoal" type="text" class="emailPasswordBoxes"&gt; &lt;input maxlength="3" name="PlayerCodeGoal" type="text" class="emailPasswordBoxes"&gt; &lt;?php $id = getuserfield('ID'); $_SESSION['user_id'] = $id; $query = "select * from users where ID = '" .$_SESSION['user_id']. "'"; $result = mysql_query($query) or die(mysql_error()); $row = mysql_fetch_assoc($result); if (isset( $_POST['submitGoal'] ) ) { $ClubCodeGoal = $_POST['ClubCodeGoal']; $TeamCodeGoal = $_POST['TeamCodeGoal']; $PlayerCodeGoal = $_POST['PlayerCodeGoal']; $Amount = 50; if($ClubCode !=118) { $errGoal = 'Invalid club code'; } $query = "INSERT INTO club (ClubCode, TeamCode, PlayerCode, Amount, Purchaser) VALUES ('$ClubCodeGoal', '$TeamCodeGoal', '$PlayerCodeGoal', '$Amount', '$id')"; $query_run = mysql_query($query) or die(mysql_error()); header('Location: goalPayment.php'); } ?&gt; &lt;input name="submitGoal" type="submit" value="CHECKOUT" style="margin-top: 15px; width: 180px; height: 60px; margin-left: 18px; border-radius: 10px; font-size: 24px; font-weight: bold; color: #307AB2; font-family: 'Arial Black', Gadget, sans-serif;" &gt; &lt;/form&gt; &lt;div style="width:100%; font-weight:bold; font-size:16px; height:20px; text-align:center; color:red; float:left"&gt; &lt;?php echo $errGoal;?&gt; &lt;/div&gt; &lt;/div&gt;&lt;!-- end of box three --&gt; &lt;!--VALIDATIONS for box 3--&gt; &lt;/div&gt;&lt;!-- end of check out divs --&gt; &lt;/div&gt; &lt;!-- end of package wrapper div --&gt; &lt;/div&gt;&lt;!-- end of wrapper --&gt; &lt;div id="footer"&gt; &lt;div id="footerLinksDiv"&gt; &lt;a href="privacyPolicy.php"&gt;Privacy Policy&lt;/a&gt; &lt;a href="termsAndConditions.html"&gt;Terms and Conditions&lt;/a&gt; &lt;a href="../pages/contact.html"&gt;Contact Us&lt;/a&gt; &lt;a style="margin-right:0px" href="returnPolicy.html"&gt;Return Policy&lt;/a&gt; &lt;/div&gt; &lt;div id="copyrightDiv"&gt; Dine The Nation LLC &amp;copy; 2014 &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 
You're likely blocking on a call out to some external entity with a timeout of 30 seconds. Run the command line, prefixed with the `strace` command. A ton of info will flow past you, but eventually it will stop where-ever it's blocking. That will tell you what's taking so much time. Example: strace php -v My guess is a URL fetch... Once you've identified what it is, we can figure out how to fix it. I've seen this before, but can't remember what did it. I want to say IMAP, but could be mistaken there. Find the blocking call, and then we can try to figure it out...
What you are looking for is called a changelog, but composer does not (and can not) show them. You have to look at the packages' individual homepages/repositories for the changelog.
I definitely used to be a "PHP sucks" person, and only really began studying the language in earnest a year ago. I was certainly judging the language based on &lt;= PHP4, and PHP5.4 (and everything I see coming down the pipe for PHP6) looks great. While a series of articles could be written comparing the languages to make the case for PHP, from my POV if we take the MVC approach, each of the big-3 scripting languages fits a different letter nicely: Ruby is great for the Model. It's excellent for writing.really.long.chains, where you don't necessarily care if what you're calling is a method or just a value. This is great for programming complex business logic, since if I want the 'product.price', I don't need to care if .price is a value set by ActiveRecord by directly loading a column from a table (if this is a Rails app), or if .price is actually a method that adds up a bunch of values in 'product' and calculates its tax. This is great for long-term support, since I can completely change how .price is calculated but know the code above me will keep working. The downside is that this is a really terrible approach from a performance standpoint, since you can end up creating all kinds of bottlenecks in places you wouldn't expect. Ruby is also really nice for working with arrays + callbacks, especially for mapping. Python is great for the Controller (and pretty good on the Model). The fact that it wasn't nearly as popular as PHP back in the 90s/00s is really a blessing, since they could properly design its library. PHPs library is full of functions built as a reaction to some demand, then kept forever due to a strong emphasis on backwards compatibility. PHP's array_map inputs being 'callable, array', and array_walk taking 'array, callable' is just one of many confusing bits of syntax. Python's lib is great, and it's about on-par with ruby for array manipulation. It really shines for procedural programming, so all this is perfect for running Controller logic. PHP is, by far, the most View-focused of the 3, with the syntax clearly optimized for templating. The type-juggling generally makes good sense when you're thinking in terms of "these variables represent data either taken from a human being, or being displayed to a human being". Writing your Model / Controller in PHP often looks like a silly pile of typecasts and ===s. On the plus side, you don't get a bunch of 'undefined's crammed into your web page (like javascript does) when you echo an unset variable, rather it simply displays nothing. You're not constantly dealing with errors thrown due to type mismatches, like Ruby or Python will throw. New developers (or your typical WordPress blogger who knows a little PHP) will have an easy time echoing to their page, but experienced developers, who are familiar with type juggling, can make the juggling work for them to tighten up their code quite a bit. 
Yes, it still appears that the type difference is the issue. You can either cast your $_POST variables that are numbers to (int) or use them as strings in your comparison, like: if ($ClubCode != '118')... in either case, your INSERT should not be affected. That assumes that those fields are a character format in the DB (like VARCHAR), which your INSERT statement implies. 
&gt; "Bcrypt is a waste of time" he was being witty
However you'd like it to look like, really depends what your building. I use something similar to this for a simple 5 page site that renders pages with via Twig so majority don't need controllers as there not really doing anything that requires them. Just instantiate it and away you go?
I have the same issue as mrterryh. To cut the long story short I've managed to pin point this to be caused by the MAMP version of PHP on Mac OS X (or any other than the non system one) by testing on a fresh install machine -&gt; for more details check discussion at https://laracasts.com/forum/911-terminal-taking-30-seconds-to-execute/ Anywho I was pointed here, since this seems to be the identical issue and I have also ran the OS X equivalent dtruss Here are the 2 paste bins of the 2 consecutive runs of sudo dtruss -aeodf php -v and their respective blocking sections: http://pastebin.com/NvqZbzBJ 531 48203/0xfa5b7: 809881 44 37 open("/dev/dtracehelper\0", 0x2, 0x0) = 3 0 &lt;== WAITS HERE FOR ABOUT 30 SEC 532 PHP 5.5.10 (cli) (built: Mar 18 2014 18:10:23) 533 Copyright (c) 1997-2014 The PHP Group 534 Zend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies 535 48203/0xfa5b7: 842111 127 11 stat64("/System/Library/KerberosPlugins/KerberosFrameworkPlugins/Reachability.bundle/Contents/MacOS/Reachability\0", 0x7FFF5FBFDE78, 0x7FFF5FBFED20) = 0 0 &lt;== CONTINUES HERE AFTER THE PHP -V OUTPUT http://pastebin.com/qLfQUvke 531 48301/0xfaff9: 833016 8 1 close_nocancel(0x6) = 0 0 &lt;== WAITS HERE FOR ABOUT 30 SEC 532 PHP 5.5.10 (cli) (built: Mar 18 2014 18:10:23) 533 Copyright (c) 1997-2014 The PHP Group 534 Zend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies 535 48301/0xfaff9: 833305 30074063 52 kevent(0x3, 0x0, 0x0) = 1 0 &lt;== CONTINUES HERE AFTER THE PHP -V OUTPUT Hope this goes towards helping both mrterryh, me or anyone else who might encounter this issue
Hating on php isn't cool anymore. Its still cool to hate on microsoft languages.
what do you do for assigning names to the slugs that are passed as arguments?
You know what, I've had this argument before, and it always ends the same way. In the end nothing I can tell you is going to change your mind about why this is a bad idea until you try to use it on a large scale. Nobody builds large scale websites in this manner, it just doesn't work in the long term.
Is that an original quote? Can I use it?
What?! I'll scrap my 2years hard work then. Phpernel is no more! 
Although I can't speak to the server stack, I *can* speak to the actual PHP code. If you are modernizing the server stack, maybe [modernizing the legacy PHP app](https://leanpub.com/mlaphp) itself would also be worthwhile. (I am the author of the linked book).
In this case, it looks like he's using Laravel and should be able to take advantage of framework features rather than use git to sort it out; though I've ha to do the same as you describe in an arcane project in svn. :shudder:
He's using a programming language, so he *could* teach the application to behave however he wants, Laravel or no. I'm suggesting something different because philosophically, I would not want to run code for a slightly-differently-behaving demo instance of my application that could potentially interfere in any way with a production instance. For me, that should not even be a possibility, no matter how easy the language or framework makes it to partition off. I also wouldn't personally want to even see the demo instance code when working on new features, maintenance, etc. It's not an important part of the actual application - it's an alternate version entirely with different objectives. Git is actually marvelous at this kind of thing - but I hear you on how an SVN version of this same setup could be a PITA. Merging can be a very scary prospect in SVN! I wouldn't suggest this model if Git wasn't good at it. Others had already suggested the Laravel route, I'm suggesting something else. OP gets choices! Cheers.
Do you have any debuggers hooked up to your cli version of php? Those could also be timing out if whatever GDB client is hung up. Happens to me with PHPStorm on occasion, especially when I have too many open debug tabs.