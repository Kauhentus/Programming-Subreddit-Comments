Do you have any links where I could read about using them properly? I saw this on nettuts+ and assumed it was what I was meant to do?
I think I need to read up on DBAL's, they still confuse me D:
Also, could you maybe explain this further? &gt; used to notify the code further up in the stack of a fault that it cannot resolve itself I don't really understand the term stack, etc? Thanks for all the help btw, I'm learning a lot! 
ORM allows you to map your data to php objects. It is an abstraction layer that removes most repetitive SQL from your code. It essentially allows you to quickly perform CRUD operations without dealing with the underlying database. Several ORMs exist for PHP. Both Propel and Doctrine are popular, but there are lots of simpler systems if you google for a few mintues.
getters and setters? Could you elaborate? I've never heard of them :\
Haha, OOP is one of those things that look completely useless until you actually find a good use for them, and afterward you'll never again understand how you could have survived without them. Good luck on your PHP RPG!
One example would be if you defined a class which throws an exception at some point. You tend to include and use classes in many different projects, and you may want to handle the errors differently in each one. By throwing the exception but not catching it within the class, it allows you to put try/catch blocks into your other projects and handle the errors there. If you catch the exception within the class as you did here, it's effectively no different from just doing an if statement for the error and `die()`ing. Throw the exception there, catch it further up [the stack](http://en.wikipedia.org/wiki/Call_stack).
Oh, I see. So I should throw the exceptions in the class, but catch it with whatever project I'm coding?
Why would you use ?&gt; if you weren't planning on outputting anything?
This is also useful for if statements. if ( array_key_exists('file', $_GET) &amp;&amp; $_GET['file'] = str_replace(Array('.', '/'), '', $_GET['file']) &amp;&amp; file_exists($_GET['file']) ) exit($_GET['file'] . ' exists'); instead of if (array_key_exists('file', $_GET)) { $_GET['file'] = str_replace(Array('.', '/'), '', $_GET['file']); if (file_exists($_GET['file'])) exit($_GET['file'] . ' exists'); }
I'm not sure what you mean... If you look at most PHP applications, they still end most PHP files with a ?&gt; even if it's just a PHP class contained in the file. I'm just saying there is no need for it, it's wasted space and can lead to annoying errors. It's only needed when you're mixing PHP with HTML in a template file or something.
I don't not like it. I just think it doesn't quite deserve the term "framework". It's a class library for common functionality. I know it does have ways to implement some of the same things a framework does (Zend_Controller, Zend_View), but any two projects both written just using Zend will differ greatly: you have to write the glue code yourself, but a framework *is* the glue. Nothing bad to say about ZF other than that. If this guy doesn't know what a standard secure file layout looks like, how is ZF going to help him? If he uses something like Symfony or [Kohana](http://kohanaframework.org/3.1/guide/kohana/files) he'll be told: this is where the assets go, this is where the templates live, etc.
As others mentioned here: you should only keep index.php (+gfx/js/css) in document root (sometimes known as public_html). Other stuff should not be accessible via browser (even if you have appropriate rewrite rules set). BUT, there is another easy way to secure your scripts. It is widely used in frameworks. Start each library/include file with: if(!defined('SOME_CONSTANT')) die('403'); And in your index.php* (before any includes) add: define('SOME_CONSTANT', 'OK'); This will assure you that no libraries will be accessed directly. \* I'm assuming here that every request on your site goes through index.php
If the way you have to select the array of minutes is this: mysql &gt; select minute(created_at) min from comments group by min; You can inverse it this way: mysql &gt; create temporary table minutes (min tinyint unsigned); mysql &gt; insert into minutes values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40),(41),(42),(43),(44),(45),(46),(47),(48),(49),(50),(51),(52),(53),(54),(55),(56),(57),(58),(59); mysql &gt; select * from minutes where min not in (select minute(created_at) min from comments group by min);
This is a horrible idea, you're going to end up losing a lot of data. If you really need this kind of thing, use redis instead of memcache, then you can add your write queue to a redis list or set and you won't get race conditions and you're much less likely to lose data because redis is (eventually) persistant.
Don't forget “set names utf8” we are in 2011 already ;-)
Yes. An example with PDO: $pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); $pdo-&gt;beginTransaction(); try { //sql commands } catch (PDOException $e) { echo 'Caught exception: ', $e-&gt;getMessage(), "\n"; $pdo-&gt;rollBack(); } $pdo-&gt;commit();
Also Coffee!!11
Temporary tables? Frightening.
Just as a warning to others reading this, it may work on MySQL but for other database engines rowCount() is not guaranteed to return anything for SELECT queries. See the [manual entry](http://php.net/manual/en/pdostatement.rowcount.php) for more info. 
Ah php... what functions *can* I remember the order correctly??
indeed :-) many things can be done in MySQL but sometimes it shouldn't. In this can, don't do this.
Also known as accessor methods: http://en.wikipedia.org/wiki/Method_(computer_programming)
&gt; The degree doesn't matter, if you think it does then simply lie about it, no one will ever check/care. Your experience and work is all that matters. This can get you into serious shit depending on your industry. They may not care in porn, but when I applied to something in the financial industry (Sarbanes-Oxley) or as a government sub-contractor, they will at the very least run a background check on you and if they find any discrepancies that you can't account for, you will not only not get the job, but will might be subject to criminal charges. 
You're absolutely right. I'm talking about creative jobs, design studios, start-ups, porn, etc. Where a portfolio is what gets you the job.
You can step through code using Eclipse too. Both IDE's JIT debugging features are compatible with XDebug.
cool , and you'll probably want to make sure you have all of your foreign keys defined. I'll comment here if I think of something
No, don't make this a temporary table. You can however make it a permanent table, put an primary key index on the min column and use it. But use NOT EXISTS instead of NOT IN - it's much faster: select * from minutes where NOT EXISTS (select * from comments where minute(created_at) = min); But don't generate the min using the minute function, store the min directly in the comments table so you can index it, and this query will be nice and fast.
That one's your fault, not PHP. :) Or do you get subtraction reversed too? array_diff is more or less array subtraction. So it's [main array] - [values to remove].
That's not a panacea - it doesn't work in all browsers commonly used today. It does help though.
If your security relies on access to your scripts only going by AJAX you are doing it very wrong. The script should be robust enough that someone can call it with whatever they want and nothing bad will happen.
That's what I'm saying. If you're calling a file or page with Ajax, then it still needs to do all of the security checks at the start of the request that any other page would do, simply because it CAN be called without Ajax by a savvy or malicious user.
It works on everything except IE6 as far as I'm aware... anything else you know of? Cuz honestly... fuck IE6 ;)
Are you like the one person in the world who *doesn't* know about php's long history of functional code where the parameters have no standard for their order? ;) 
That's why I said "That one's". PHP may have issues with this subject, but not in this function, this function is completely logical.
haha, ok, fair enough. Thanks for picking apart my joke :p
Doesn't work on firefox 3.0, which sadly is still in use. Also Safari 3, and Opera 9.23. Basically any browser made more than 3 or 4 years ago.
 private function __construct($databaseInfo) Changed to: private function __construct(array $databaseInfo) And you no longer need the is_array check, or to throw the Exception because PHP does that for you.
those are all pretty damn out of date, and according the w3 browser stats, all of those combined make up about 1.5% of browsers... hardly worth worrying all that much about imho. A lot of those requests are even probably bots spoofing user-agent strings. http://www.w3schools.com/browsers/browsers_stats.asp
This. Never jumped into learning structural programming. Always started with the basic syntaxes, moved into data structures (some more advanced than others) and then OO tied in with some structurals.
deal ;). Though I might stick to Zend_Db for small projects from now on
So instead of trying to remember the order for functions, just remember which ones are logical? :Þ
First, some source code might help explain this. I'm having some trouble following. Second &gt; You then take that 64 character value and md5 it one last time. md5(anything) -&gt; 32 hexadecimal characters.
Umm... okay. What exactly are you trying to do? Add strength to your hashing algorithm? Do security through obfuscation? Make a lot of work for yourself? Play a practical joke on the next programmer to take over your code? Are you trying to ask a cryptographic question? If so, I'm no exactly sure (no security expert here) but looks like you'd still wind up with the same theoretical strength for your algorithm as just doing a plain md5.
You've done nothing more than hashing a few times and using salt (the password itself).
No. No. No. No. No. 1) MD5 is fast, making running hundreds of thousands of tests per second against your hashes trivial. It will only continue to get faster because there's no work factor in it. 2) You have no salt, making your password domain trivially short. 3) You have no salt (again) making identical passwords hash identically. 4) You (obviously) have no idea about encryption and hashing (which is fine, almost none of us does) which means you've fallen into the trap of thinking convoluted == secure. 5) Essentially, you've just made a more convoluted way of plain MD5ing the password (nothing here adds any security, just passes it through a longer series of very fast steps), but because you're hashing multiple times you're increasing the likelihood of collisions. If an attacker has access to your password table, they probably have access to your "algorithm" so it is easy to generate a domain specific rainbow table for your stored passwords. Generating a rainbow table for all eight character passwords (and if you set a minimum of eight characters, 95% of people will use *exactly* eight) would take no time at all (hundreds of thousands per second). 6) **You don't know how to do this**, which, as I've said before, almost none of us does, which is why you *don't write your own crypto*. You use [PHPass](http://www.openwall.com/phpass) like anyone sensible and forget about trying to write your own clever scheme. 
Don't fool yourself into thinking that'll be more secure than md5($salt.$password).
If what you are trying to accomplish is to overcome problems such as exposure to rainbow tables or collisions, you can hash the password with two different algorithms (i.e., MD5 and SHA) with a salt on the first hash. In other words, hash with MD5, add a salt, and then hash that with SHA-1 (or higher). That eliminates exposure to collisions because the chance of a collision with both algorithms is extremely unlikely. Vulberability to other algorithm flaws are also reduced because a flaw would need to be found for both algorithms. Plus that gives at least 128-bits to the second algorithm so that it is extremely unlikely to appear in a rainbow table. 
Yes because you will have 32 hash values from each two byte hash. Which then gets converted to a look up table of 94 different characters based on one byte or two hex letter values. Ergo the 64 characters. Now having a 64 character value with 94 different values per character. Thus 64^94 That last value ( 64^94 ) then gets hashed as if it were the original password.
You're still left with a 32 character string, which is of the weak md5 flavour...
Well, you need to take those files out of being able to be called directly. Assuming you have index.php getting called every time and apache isn't allowing anything lower than the directory index.php is in to be shared, then you have a simple fix. set_include_path( '../php'.PATH_SEPARATOR.get_include_path() ); So no you have a hierarchy like this: whatever/www/index.php whatever/php/include/something.php Never have file exposed to the outside work unless they actually need to be.
My personal opinion is that hashing in general is the last ditch effort - the more important thing is the security before it - I don't want someone in my DB or accessing my scripts to gain any of the password - because in most cases if they have access to the actual password they can find the alg used to hash it in the first place making the work trivial - best bet is security in front of the box. 
As stated in the beginning of the original post. This is for FUN and LEARNING. Your bashing useless comment added nothing to my (or anyone else here for that matter) education on the subject. Yes computers keep getting faster... Moore's law? I'm pretty sure anyone here can see that there is no salt. Congratulations for seeing so. Easy to create? You kidding? It would be a 64^94 possible combinations... Not to mention because of the modulus phase, you can't get the original answer. There are multiple values that would equate the one. It's easy to rainbow table a two byte password with md5. Not so much 64^94... And that is ONLY if the password is eight characters. It gets even bigger with bigger passwords.... One would have to brute force the first md5 hash to get a 64^94 value. Substitute the symbols by correctly guessing 64 hex values. Then of course if you actually got that far... It would be easy to crack the last remaining values. Everyone says don't make your own, don't make your own... I get it. In case you didn't notice... I am not making my own? This is for educational purposes... How the hell do you think PHPass did it? *Everyone in this thread is now dumber for having just listened to you. I award you no points and may God have mercy on your soul.*
Yeah... That's true. I thank you for actually giving educational advice instead of bashing someone attempting to learn. =) 
Yes, but you should never store your passwords in plain text... By all means create an equal balance between your fort Knox and useability. But isn't that the reason for hashing algorithms. Minus like... Checksums...
Yes but weak only because of rainbow tables. In this case it would be 64^94 in length at the very least. Anyone got some time span on calculations?
I mean I am not saying go plain text but a basic mix of a few md5 hashes (normally I'll md5 the username and the password separately, cut them in half separate with :: in between and use that.. this way if the password is leaked alone its hard to determine what it is..
No. md5 has been found to have [hash collisions](https://secure.wikimedia.org/wikipedia/en/wiki/MD5#Security) so I just need to find a string that matches the hash.
&gt; One would have to brute force the first md5 hash to get a 6494 value. Substitute the symbols by correctly guessing 64 hex values. Then of course if you actually got that far... It would be easy to crack the last remaining values. Sorry, but no. The entire space of md5 outputs (a...a to f...f) has been indexed. That said, you can find a collision of ANY md5 output and break your security. You don't have to brute 64^4, but find the collision.
NO. Here's what you're doing. You are taking a keyspace of the size of the free space in the system down to a much smaller subset of the possible outcomes. Let's look at the cases: 1) sha1(md5($salt . $password)) 2) md5(sha1($salt . $password)) 1) You're sending sha1() a SET 32 character string which only can contain 0-f characters. That is MUCH less than 0-millions of string length and any unicode character. 2) You're now sending md5() a set 40 character string...
I know it sounds like I'm harsh, but there is a lot of misinformation about crypto and it's *very* important that it is set straight. I apologize, but I tend to be harsh.
Sigh &gt;As stated in the beginning of the original post. This is for FUN and LEARNING. Yet you don't seem to want to learn from the criticism &gt;Your bashing useless comment added nothing to my (or anyone else here for that matter) education on the subject. Maybe you didn't understand the flaws I pointed out? &gt; Yes computers keep getting faster... Moore's law? Exactly, so using a fast hashing algorithm like MD5 (or SHA1) makes testing possible passwords very fast. Something like BCrypt has a work factor built in. You set this so that it takes a non-trivial amount of time to compute a hash, say 0.01 seconds, limiting you to only 100 hashes/second (which is very slow). Whenever computers get ten times faster, you increase the work factor by one and it will *still* take 0.01 seconds to compute a hash. &gt; I'm pretty sure anyone here can see that there is no salt. Congratulations for seeing so. Not having a salt in any password scheme is inexcusable. You asked what we think so this is a pretty gaping hole that needs criticised. &gt; Easy to create? You kidding? It would be a 64^94 possible combinations... Not to mention because of the modulus phase, you can't get the original answer. There are multiple values that would equate the one. It's easy to rainbow table a two byte password with md5. Not so much 64^94... And that is ONLY if the password is eight characters. It gets even bigger with bigger passwords.... One would have to brute force the first md5 hash to get a 6494 value. Substitute the symbols by correctly guessing 64 hex values. Then of course if you actually got that far... It would be easy to crack the last remaining values. This is where you are showing a *fundamental* misunderstanding of where the flaws in your algorithm lie. You seem to think that the longest string that appears as part of the process is what you need to guess. Since this is generated in a consistent way from the original password (which is only as strong as the user makes it, so in 99% of cases this is "not very strong") it is merely an intermediary step between the original password and the final hash. The idea of breaking passwords isn't to reverse the hash back to the original, it's to take a list of known passwords, run them through the hashing process (whether that be just MD5 or your convoluted process) and compare the outcome to the stored hash. All password cracking is based on having access to the table storing the passwords and, almost by definition, the algorithm used to generate that hash. So, no, you don't need to brute force *any* of your intermediary steps. You start with generating a dictionary of common passwords, run those through whatever algorithm you know the code to be using and get a rainbow table out the other end. The fact that you claim that there are multiple values that equate to one actually makes it *easier* to crack. The modulus phase actually *reduces* the size of the attack dictionary. You are taking pride in purposely increasing the likelihood of collisions and reducing the security. It would actually be better using *just* MD5 here. **Intermediary steps are irrelevant in increasing security unless they add to the complexity and uniqueness of the password hash** (i.e. adding a per-password hash because that means you need to generate a new rainbow table for every password instead of a single table for the whole database.) &gt; Everyone says don't make your own, don't make your own... I get it. In case you didn't notice... I am not making my own? This is for educational purposes... And we're educating you by pointing out the fundamental flaws in your logic. &gt; How the hell do you think PHPass did it? By taking a known, mathematically secure and tested algorithm that is slow to compute and adding a salt to it. That is all. The other parts of PHPass just make it easy to implement and to make it portable. &gt; Everyone in this thread is now dumber for having just listened to you. I award you no points and may God have mercy on your soul. Well, they certainly might be no more knowledgable by *not* listening to me.
Yeah, but isn't that much easier said then done?
See, now **that** was informative. My whole point in stating this was just for fun and learning is to not get the usual answers everyone throws out there. e.g. "Don't make your own!", "No! use this!", "That's pointless!". I wanted to know WHY... A.K.A. Learn. =) So basically your saying that because the original password is weak. All they have to do is import the algorithm used, then brute force? I suppose it does in some ways break down the possibility of rainbow tables though. Not much of a gain... 
It's more of using an already weak system in an even weaker way.
&gt;You're sending sha1() a SET 32 character string which only can contain 0-f characters. That is MUCH less than 0-millions of string length and any unicode character. Sure, but very few applications, especially web sites, allow the full unicode character set. Plus when you consider that most users will rarely use anything other than a-z A-Z 0-9 and ~`!@#$%^&amp;*()_-+={[}]|\:;"'?/&gt;.&lt;, then you are down to about 94 characters. Using those characters it would take a 19-20 character password to equal the keyspace of a MD5 hash. Plus you have the salt on top of that (which could be the password itself) so you have the best of both worlds. Furthermore, you may someday find rainbow tables that eventually go up to 15-20 characters but you won't be seeing 32 character rainbow tables anytime soon. Anyway you are not understanding this correctly. You still get the benefits of a normal hash of the password using whatever character set it might be using, with an additional hash using a different algorithm to address collisions, computed rainbow tables, or cryptanalytic attacks of any particular hashing algorithm. Edit: To clarify there would also need to be a salt in the intermediate step, i.e., sha1(md5($salt . $password) . $salt)
You have to realize that the mention of a home-grown encryption algorithm may be fun to you but for those of us who have to constantly fight those home-grown algorithms with clients it is not fun at all. 
Would love to see it on github if it's not too much trouble!
&gt; All they have to do is import the algorithm used, then brute force? Yep. &gt;I suppose it does in some ways break down the possibility of rainbow tables though. Not much of a gain... Stops them using *precomputed* rainbow tables, but with fast hashes, generating a new rainbow table that will work against an unsalted password database doesn't take a particularly long time for a dictionary that will get the majority of user supplied passwords.
Yes it is, and not all values will have collisions but that doesn't invalidate the point. When it comes to crypto the fact that it is remotely possible is enough. 
Thanks, will do
Care to elaborate?
Ah, that makes much more sense, and I think I now see why exceptions are useful. Cheers
Ah, I see. Thanks, I'll take a look at a few
Assuming you're going to prepend all user-entered HREFs with http:, then that should indeed thwart 'javascript:' attacks regardless of how the attacker tries to obfuscate it. Edit: Note that this answer is in addition to the advice already given in his previous post
Strip any illegal characters, then strip any protocols not in your safe list. If you just prepend and remove any of your previous escaping code make sure you prevent users breaking out of your "" confines. i.e the url image.jpg?" onclick="jscode". Looking at your previous post it looks like your solution is quite convoluted compared to the ones being suggested (such as htmlpurifier). Simply injecting an absolute url in front of every external resource not only catches all cases, it can lead to some very messy annoyances. What if html is hotlinking to an image hosted elsewhere? How are you handling relative urls that transcend directories? what about breaking out of other permitted attributes such as style? (font-weight:bold;" onclick="alert('happy times') ) Other character encodings(i.e utf8)? Internal javascript? The reason a lot of work has gone into these libraries is because of how complex it is to clean untrusted code that you are embedding. As suggested, definitely do some thorough research on XSS and its vectors before trying to roll your own guard against it. Unless this is more of a thought exercise than taking it seriously?
Lets say the method we are desk checking does nothing other than adds an absolute url to all href/src attributes that don't already have it prefixed. Lets also assume that (s)he is still using other code to strip out anything other than his chosen list of permissable attributes and tags. The following hrefs will result in issues, all requiring additional workarounds that will increase the complexity of the solution (and likely hide other exploitable issues): &gt;blah.jpg?" onmouseover="alert('hi') becomes &lt;img src="blah.jpg?" onmouseover="alert('hi')" /&gt; &gt;blah.jpg?" onload="alert('hi') becomes &lt;img src="blah.jpg?" onload="alert('hi')" /&gt; &gt;http://www.google.com/logo.gif becomes &lt;img src="http://www.example.comhttp://www.google.com/logo.gif" /&gt; &gt;ftp://myimages/image.gif becomes &lt;img src="http://www.example.comftp://myimages/image.gif" /&gt; &gt;https://example.com/image.gif becomes &lt;img src="http://www.example.comhttps://example.com/image.gif" /&gt; &gt;https://example.com/image.gif becomes &lt;img src="http://www.example.comhttps://example.com/image.gif" /&gt; Allowing style attributes: &gt;font-weight:bold;" onmouseover="alert('hi') becomes &lt;p style="font-weight:bold;" onmouseover="alert('hi')" /&gt; And I'm sure I haven't identified only half of the problems that you could run in to with this. If you're trying to learn how these libraries work I'd encourage you to take a look, many of them are open source and you can learn a lot from them. If you are trying to secure a production site then do it properly.
N/A would have sufficed.
Doesn't this require you to look at the errorcode? For an example if there is no database connection, you will still try to rollback without connection.
Yes you can but I feel that Eclipse is a little to much for someone new to IDEs. And the last time I used Xdebug with Eclipse it wasn't the easiest thing to get up and running. I had debugging working with Netbeans working in minutes. I really do need to take Eclipse for a spin again I miss working with Mylym. 
I guess it might be a bit much as a first time IDE user. I have to admit, I used Visual Studio 6, then various versions of VS.net, then NetBeans (briefly) before starting with Eclipse. I found XDebug easy to set up with WAMP, I used a guide online and it was up and running in a few minutes. As I recall, it required an edit to php.ini and a debug configuration setting up in Eclipse. I did have trouble getting it to work on a non-WAMP setup though. I've never tried Mylyn although I would like to give it a go, it seems like a good upgrade to using TODOs in code comments :) 
I'd suggest you aim a little higher and become a web developer. What I mean by that is that it is important to understand the way the web works as well as to grok programming in general. For example, having a good understanding of what is in the HTTP header of a HTTP request or response, how cookie work, how browser cache and proxy cache can be (somewhat) controlled are all quite valuable, especially when something is going wrong. As for programming skill, the boring part is syntax. The most interesting part is learning to use the paradigms (procedural and/or OO) to build software out of small, clear, readable abstractions. It's a divide and conquer kind of thing.
My answer was given under the context of the already established knowledge given in his last post, so my assumption was that he is asking this as in addition to the advice given in that thread (use HTMLPurifier, parse with DOMDocument, etc) which will already address the issues you've brought up. I'd never make such an absolute statement like that otherwise. Sorry for the confusion, but your replies are solid advice and should be taken to heart by anybody thinking of understanding this process.
Note: I wrote that comment as a continuation of the advice given in your last post. I'm not saying that you can take unfiltered user input and prepend http: to it. See ppanther's reply below mine for more info.
There's no problem with having an array of navigation links, and working with it conditionally: &lt;?php $navigation = array( 'Home' =&gt; '/index', 'Help' =&gt; '/help', 'Foo' =&gt; 'http://bar.com' ); if(!$player-&gt;character-&gt;is_alive()) { $navigation['Respawn'] = '/character/respawn'; } if(!$player-&gt;is_premium_member()) { $navigation['Become a Premium member!'] = '/rpgold'; } Do not underestimate the sheer speed of modern scripting languages.
The problem is that your code: $pagetitle = '&lt;script type="text/javascript"&gt; document.title &lt;/script&gt;'; if ($reddit_share == "show") { echo &lt;&lt;&lt;EOT &lt;script type="text/javascript"&gt; reddit_newwindow='1'; reddit_title = '$pagetitle'; &lt;/script&gt; &lt;script src="http://www.reddit.com/static/button/button2.js" type="text/javascript"&gt;&lt;/script&gt; &lt;br/&gt;&lt;br/&gt; EOT; } would evaluate to: &lt;script type="text/javascript"&gt; reddit_newwindow='1'; reddit_title = '&lt;script type="text/javascript"&gt; document.title &lt;/script&gt;'; &lt;/script&gt; &lt;script src="http://www.reddit.com/static/button/button2.js" type="text/javascript"&gt;&lt;/script&gt; &lt;br/&gt;&lt;br/&gt; which is invalid. If you want it to grab the title from the window, then simply assign reddit_title the value document.title, like so: $pagetitle = 'document.title'; if ($reddit_share == "show") { echo &lt;&lt;&lt;EOT &lt;script type="text/javascript"&gt; reddit_newwindow='1'; reddit_title = $pagetitle; &lt;/script&gt; &lt;script src="http://www.reddit.com/static/button/button2.js" type="text/javascript"&gt;&lt;/script&gt; &lt;br/&gt;&lt;br/&gt; EOT; } This would evaluate to: &lt;script type="text/javascript"&gt; reddit_newwindow='1'; reddit_title = document.title; &lt;/script&gt; &lt;script src="http://www.reddit.com/static/button/button2.js" type="text/javascript"&gt;&lt;/script&gt; &lt;br/&gt;&lt;br/&gt;
You are a flipping genius! Thank you not only for the solution, but explaining it. As a new php'er this is very helpful!
This is good advice.
Too often people discourage others from creating their own crypto hashing algorithms. I agree with their reasoning but disagree that it should be discouraged for learning and thought experiments. Personally, I say go for it, but you need to learn what makes a good hashing algorithm. How they're tested. How to create a domain of expected input and compare it to distribution graphs, how to get it peer reviewed, etc. I'm in a hurry but Google for crypto hashing and you'll find a lot of interesting material. [Here's something to start you off.](http://www.unixwiz.net/techtips/iguide-crypto-hashes.html)
Nice work and probably a good programming training but I don't really see any purpose behind it. Every php developer have php installed (I guess). If I want to test some piece of code I just run it from console. There is nothing simpler and faster than that. Also, each one of use is able to create (in matter of minutes) a script that *eval*s some input from posted form. I'm not saying that your work can be reproduced in minutes, it probably took you a lot of time to create. But I'm sure that most of this time was spent on security concerns which are irrelevant when someone creates such an app just for himself (to run on localhost). One more thing: I'm 100% sure your app is breakable. Not that you missed something, but there (http://bugs.php.net/) are ALWAYS some OPEN 'reproducible crashes', 'memory leaks', 'segfaults' etc. And there always will be. Boys like to destroy things, so I'm quite sure many of us here tried to hack your app. Which is (again) some sort of programming training. And that is a good thing, thanks for that. Cheers :)
I like it. One of my first projects in QBasic in 1995 was making a 3D shaded cube spin around. Ahh, the good old days when I wasn't just writing MySQL/PHP C.R.U.D. pages. Next, take on ray casting with wall texturing. Also a fun 3D challenge. 
I played a lot with 2d/3d computer graphics using turbo pascal, (turbo) c/c++, and some assembly. I miss playing with the old (vga video) MODE 13H. Check [this cube in HTML5](http://codentronix.com/2011/05/10/html5-experiment-a-rotating-solid-cube/), [this one in python](http://codentronix.com/2011/05/12/rotating-3d-cube-using-python-and-pygame/), and [this in vb.net](http://codentronix.com/2011/05/25/rotating-solid-cube-using-vb-net-and-gdi/).
&gt; return new Point3D($this-&gt;x, $y, $z); Well, that's silly if the only purpose of it is to enable chainability. Why not update the existing properties and return $this instead of creating a new object every time you intend to change one of the properties?
It makes it a value type rather than a reference type. Think of this way: $x = 2; $y = pow($x, 8); In this case, you expect $x to still contain 2. If you extend this to objects and methods, you want those same kind of properties to hold. In other words, you don't expect operations on numbers to change the original number. 
What are you talking about? Like said: &gt;Well, that's silly **if the only purpose of it is to enable chainability**. Objects are generally considered to be one entity, and methods are used to manipulate that entity. It'd be rather silly if it's returning new objects only to enable chaining of methods. It's a complete waste of memory.
The purpose was not to enable chainability. The class was written using the [Immutable Pattern](http://en.wikipedia.org/wiki/Immutable_object). 3D engines, normally are feed with a list of vertices, which it applies some transformations. It is not supposed that the operations from the 3D engine cause side-effects on the original vertices. This is because it is fundamental to have the original vertex data (which describe what is called the object/model space). 
But since you're actually modifying the points, it's not really immutable, is it? The thing about your current solution is that you are wasting a lot of memory. If the only reason that you're creating a ton of new objects, out of which you're only going to use a few, is to keep the original vertices, then why not just clone them, then modify the copies? That way, you wouldn't waste more memory than you actually need. Don't give the garbage collector a bunch of work to do if it doesn't have to.
As the OP said, and I tried to explain, you typically want operations on value-like objects (like numbers, dates, strings, etc) to be immutable as it makes it much easier to reason about the code. Operations on vertices are typically temporary: you take the original vertices, apply the transformations, display the output, and repeat. If you don't need the original vertices, this method can use more memory but unless the extra memory allocations are actually causing a measurable performance problem then it's really not worth worrying about. 
&gt; But since you're actually modifying the points, it's not really immutable, is it? It follows the Immutable pattern because the original points are not modified. There is no internal way in the class to change the object properties. The memory usage of the script is not bad, at all
I guess the memory usage in this case is insignificant.
Step 1) Don't. This is like "How to hammer in a nail with a soldering iron"
Don't listen to the people that are saying that you just wrapped PDO. Add on to it and make it do a lot more. I'm the main developer on a website with a moderate about of traffic and a few hundred new users daily and my database class is wrapped PDO. Here are some things that you can add to it: When you fetch row, go through that row and htmlentities everything before you output it to the screen. That way you don't have to worry if everything is clean or not. Put in a query debugger. I have one that you pass in the sql and the parameters and you flag if you want it in the error_log or on the screen. It's nice to have the correct query with the actual parameters and not just named placeholders. Add something to handle "in queries" that adds the array of values you pass it to the query and the parameters. Keep working on it and don't be afraid to rewrite it over again. Good luck!
Ah-ha, I read your original post as you scrapping all of your other methods (like strip_tags, etc) and solely relying on prepending urls hence my concern. Do plenty of testing especially using illegal characters and the XSS cheat sheet that was linked in your previous post. Whitelists (vs blacklists) are definitely the way to go so as long as you factor in all of the valid urls without allowing users to break out of quotes or use js within the url you should be fine.
2nd Yii
Cheers, will do, thanks for the ideas :)
It keeps track of the code related to a bug/feature ticket and builds a context of whate files you edit. Hiding all your other files so you don't get information overload. Bring most SCM / Project Management stuff right into Eclipse too which keeps you out of the browser too.
$avgZ["$index"] *insert look of disapproval here*
I learned a lot from sites like gamedev.net, flipcode.net, programmersheaven.com. I remember the series of tutorials from "Denthor's Asphyxia". Raycasting theory with F. Permadi. Tools like HelpPC, articles from BBS/CompuServe... Good old times!
Just came back to say thanks! It's been enormously helpful. I've sorta got the prototype design working pretty well now in MVC. Just have to convert a bunch of existing code over now. I guess my site now works [something like this](http://i.imgur.com/qI9KJ.png). I loosely based it on the Code Ignitor design. I hope I'm technically allowed to call the library classes from the Model, but maybe the controller should call them first hmm. Thing I was wondering is these frameworks seem to create a new View class and pass all the variables they want to display in the view with an array when they call the View class e.g. render('view.php' $stuffToPutInView); That lets them use &lt;?= $someVariable ?&gt; directly in the view, rather than using the controller's version of it e.g. &lt;?= $this-&gt;someVariable ?&gt;. Not sure which is the best way to do it. Currently I'm thinking I might just use the variables from in the controller. Would seem to be the easiest way. Though my Base_Controller now has a lot of templating stuff in it.
Wow, that sounds amazingly useful! I've gotta have a look into Mylyn, I thought it was just a fancy task list.
The first thing I thought when I read the title was "Why?".
Lie on your resume.
It might be personal opinion but I tend to add checks in my view like: if(is_array($contacts)) // or count($contacts) &gt; 0 { //for each loop } else { //Show a sorry no contacts message } You could certainly load a different view from the controller if there are no contacts, seems overkill though for something as simple as displaying a 'sorry' message. 
yeah this is what I end up doing must of the time. Just didnt know if checking for null values in the view was a best practice, or if thats something i should be handling in the controller as the view is meant for (mostly) presentation. Thanks for the reply. 
IMO if you want the "no contacts" message to be generic and usable on more than that page, I'd make a view file for it and include that view from your controller. If you don't need that message on other pages, then I'd do as ryanhollister says.
ahh, so like an errors/no data template page and just pass whatever error through to that view page from whichever controller is in use?
Exactly.
We end up doing a questionnaire to about 1200 students once a month, it has been easier to write the questionnaire, normally 10 to 20 questions. Then to dump the contents at the end to a pdf or Excel file. 
Well, I am not familiar with codeigniter, but it should work something like this: &lt;table&gt; &lt;caption&gt;Contacts&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;something&lt;/th&gt; &lt;th&gt;something else&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;?php foreach ($this-&gt;contacts as $contact): ?&gt; &lt;tr&gt; &lt;td&gt;&lt;?php echo $contact-&gt;getSomething(); ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $contact-&gt;getSomethingElse(); ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;?php endforeach; ?&gt; &lt;?php if (empty($this-&gt;contacts)): ?&gt; &lt;tr&gt; &lt;td colspan="2"&gt;Sorry, you have no contact numbers yet.&lt;/td&gt; &lt;/tr&gt; &lt;?php endif; ?&gt; &lt;/tbody&gt; &lt;/table&gt;
Should be at the top..
No presentation decision should ever be made by the controller. The decision to display a message (Sorry, no contacts) is just as valid as, say, showing an emtpy table instead. The decision is purely about presentation, so it must logically be the responsibility of the view. So, pass the view an empty array of contacts from the controller. There the controller's responsibility ends. In the view, check if the array is empty or not, and display your sorry message if it is. You might want to check out Smarty. You'll now hear a load of crap from people about how PHP already *is* a template engine and you don't need another, but frankly Smarty is the dogs danglies, and the foreach-else construct it provides makes scenarios like yours very neat. It will also give you a simple intro to using partial templates/views to build up a bigger view, ~~reducing~~ *increasing* (edited) code reuse in the presentation layer, and making language support, I18N, providing mobile device views and lots of other stuff much easier later on. It sets up some very good practices, for very little overhead. You can always learn Smarty, then make an informed decision not to use it if you don't want to, but it *will* teach you how to do your presentation layer properly, a skill which you can then implement in "pure" php or asp or anything you like. HTH, and good for you for getting stuck in to MVC!
&gt; ahh, so like an errors/no data template page and just pass whatever error through to that view page from whichever controller is in use? OK, see my other more general reply first, because I think it fits what you need, but you've raised an interesting point here... what counts as an error in your app and how to handle errors in MVC. There's a difference in how you might handle things if having an empty array of contacts is an error (i.e. should never happen and something broke if it did "An error has occured, please try again") or if it's ok and just means there are no results for that particular search ("Sorry, no contacts were found"). Now, if it's ok to have no contacts, then it's just a presentation decision on how you display that, and the controller shouldn't care. If on the other hand it should never happen, that's an error. Exceptions can be thrown, custom error pages can be written, log files can be updated, administrators can be notified (etc, etc, etc) and in this case it is absolutely correct for the controller to be involved in deciding what to do, whether to carry on rendering the normal view with no results, or to switch to a different view, or to redirect to an error page, or to 404 and die. Is the difference clear there? I hope so. Let me know if it isn't and I'll try to clarify.
You shouldn't sanitize the data until you need to use it. Running multiple sanitizers on data is hard to reverse if you need the raw source.
But you always sanitize before using, so what is the difference? Could you give me an example where I would need the raw source?
Generally, you shouldn't do *x* until you need to do it.
I strongly recommend you use htmlentities($var,ENT_QUOTES,$charset); It's as morphotomy said: don't sanitize until you need it. if you do want a construction like yours, you might want to look into array_map() 
As I asked morphotomy above, what is the reason not to auto-sanitize? I basically call this helper, then use the data, so I don't understand the problem.
Hmm, I could spam your server with megabytes of unrelated POST-variables. On a normal sanitation script, you'd ignore all variables and only use the ones needed, with your approach you'd handle all my variables. Can be quite some load if your don't watch out
On occasion you want to save the raw data for example: a WYSIWYG editor stores HTML. So you don't want to convert this to htmlchars. 
Whenever you DON'T want that to be HTML: database storage, JavaScript string, Object creation, PDF generation, Word Doc data, etc. By automatically converting the data to HTML, you add unnecessary constraints.
Don't use htmlspecialchars on input data. Use it on output data to HTML. Unless all your POST variables are only ever going directly to the HTML page and never need to be used in another way, sanitizing the data first is a stupid idea. E.g., if they're going to the database, they need completely different escaping or use of prepared statements. (It's not sensible to store the data in the database pre-escaped for HTML; it mucks up attempts to use or compare it in other ways or in other database-driven UIs.) Like what if your inventory system wants to produce text file reports or work with other types of display, again you don't want HTML entities in it. If it's pre-escaped you also have to make sure any comparisons or validations or regexps working with the data are adjusted to compensate for that. Imagine some string is pre-escaped and you do a search and replace for some text: it might fail to find the intended text, or worse, destroy the sanitization by mucking up one of the entities. Likewise if you wanted to shorten long strings to the first X characters plus "..." you could cut it off after the wrong number of characters or half-way through an entity. Escaping the input data creates a lot more problems than it solves.
So you're saying I should sanitize based on its use: * htmlentities($var,ENT_QUOTES,$charset); -&gt; form input * mysql_real_escape_string -&gt; database Ect..?
No, it's not. You should sanitize your input depending on what data you expect. There are many cases where a sanitation method applied on all data is *not* desirable. Instead you should create an input definition for the data that you expect. See [PHP filters](http://php.net/manual/en/book.filter.php).
I like to always run trim on all my data.
&gt;So you're saying I should sanitize based on its use: Yes. &gt;htmlentities($var,ENT_QUOTES,$charset); -&gt; form input No. You should sanitize data based on the data you expect to receive. For instance, if you got an input field for an email address, then you'd want to strip any character that aren't letters, digits and !#$%&amp;'*+-/=?^_`{|}~@.[]. &gt;mysql_real_escape_string -&gt; database You're better off using prepared statements.
I'd put the original $_POST in a back-up variable...just in case you need it again. Trust me. There's been times where I've created strange bugs just because I sanitized automatically, with no regard for the original input.
Like others have said, don't sanitize prematurely. What I would do is create a class that acts as an intermediary to the superglobals, somewhat like symfony. $form_obj-&gt;name = $wrapper-&gt;getRequest("name"); 
Unrelated, but your username made me laugh out loud. The window is open and the neighbour looked at me like I'm mental.
The assumption is you are only going to use this data for one thing: outputting to an HTML page. So that excludes saving it to a database, putting it in Javascript, emailing it, etc. It pretty much excludes almost anything useful you'd actually want to do with the data.
Well, that's dumb. Suppose that one of those entries is the data from a textfield intended to be used for markdown. Now suppose that the first line of that data is a line of code. What happens? Well, the line cannot be formatted as code since the whitespace indentation used to indicate which lines are code has been stripped away.
An example function that "strips" out everything but what you want, in this case, anything not A-Z, a-z, 0-9, underscore, and space: function stripper($thingy){ return preg_replace("/[^A-Za-z0-9_\ ]/", "", $thingy); } Can easily modify the regex to include other symbols. This method is a more customized approach depending on your input fields. For example, for a phone number input, would strip everything that isn't 0-9, space, (, ), and - (or just strip everything that isn't 0-9 and format it yourself when displaying).
We use LimeSurvey http://www.limesurvey.org/ Its been great!
What if, like every project I've ever written, it in no way makes use of markdown?
[PHP filters](http://php.net/manual/en/book.filter.php) would probably be a better option.
I'm interested in this as well. Limesurvey is OK, but it feels clunky.
It was just an example. I could give you quite a few, all relying on preserving whitespace. I'm not saying stripping out whitespace is bad. I'm saying it's a bad idea to do it on all data rather than just the data that needs it.
While I agree on that overall point, I don't agree with your example or that attitude you used while presenting it.
&gt;I don't agree with your example It's just an example. And such practice would break the intended function of markdown. I could just have easily said data intended to be printed in a &lt;pre&gt; tag, printed to a file, or something similar. The point stands, though. &gt;or that attitude you used while presenting it. Attitude? Edit: Gee, thanks for downvoting me, guys. 
html[specialchars|entities] is an output sanitization. It's only appropriate for use when you are about to send something to the browser. If you do it when you receive the data and then store it in the database that way, you will have a devil of a time searching and sorting the fields. That may not be an issue in this particular project, but it's a bad practice to get into because it gives you a database full of messed-up strings, and sooner or later it will bite you in the ass. Given that it makes no sense to do anyway, there's no good argument for doing it.
Lol, ya I was thinking the same. 10 years of developing and I've never not used trim.
&gt; Well, that's dumb. No need to call someone dumb. Check your superiority complex at the door.
Seriously? I did not call *him* dumb. I called the *idea* of applying the same sanitation on all data dumb. "that is dumb" != "you are dumb" &gt;Check your superiority complex at the door. What superiority complex? I was just having a discussion. 
You can argue the semantics, but the end result is the same. If you tell someone their idea is dumb, you're insulting them. I'm out of here, you may continue to argue with yourself though should you please.
google forms
Drupal with [Web Form](http://drupal.org/project/webform) is awesome. Use [Views](http://drupal.org/project/views) for making custom (admin) listings of the submission results.
I know that it's not what you asked, but you might consider looking into a framework. You know, not reinventing the wheel and whatnot.
Have you considered a view helper?
Wouldn't you want it to be &lt;?php if (empty($this-&gt;contacts)): ?&gt; &lt;tr&gt; &lt;td colspan="2"&gt;Sorry, you have no contact numbers yet.&lt;/td&gt; &lt;/tr&gt; &lt;?php else: ?&gt; &lt;?php foreach ($this-&gt;contacts as $contact): ?&gt; &lt;tr&gt; &lt;td&gt;&lt;?php echo $contact-&gt;getSomething(); ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $contact-&gt;getSomethingElse(); ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;?php endforeach; ?&gt; &lt;?php endif; ?&gt;
No, why? If there aren't any elements to iterate over, the foreach loop will never execute. The additional clause is therefore completely unnecessary. There will never be a case where both the if-statement and the foreach-loop executes simultaneously. The two states are mutually exclusive.
Not much you can do, I'm afraid. I had some guy from the Netherlands card all of my stuff a few years back and start uploading it all over the place. Sucks, but it's just part of the software business.
Without using html[specialchars|entities], stripping quotes down, wouldn't using those post variables in emails, databases ect.. be harmful and prone to attacks? I know to use prepared statements to protect against mysql attacks but what about sanitizing the data for emails ect?
+1 for limesurvey! Its very powerful, and easy to customize. 
A large/most amount of software is pirated via carding, not a whole lot you can do, especially across country lines.
htmlspecialchars/entities isn't an appropriate way to gird data for the voyage into the database. It's **only** for preparing data immediately prior to being output in HTML/XML. Here's the correct flow: 1. Raw data comes in. 2. Raw data is stored in the database, either using mysql_real_escape_string, or via a prepared statement. 3. Select from database returns raw data again. 4. When sent to the browser, it is passed through htmlspecialchars. If you're not using the database, and simply displaying just-entered data back to the user, then skip steps 2 and 3. But the only time to use htmlspecialchars, really, is in an echo statement (or very close to one). You don't specialchars the data and then pass it around and do other things with it. First of all, because you don't want it ending up in the database after being mangled by htmlspecialchars. Secondly, because you **absolutely** want your output template/whatever to be applying htmlspecialchars since you never know where data might one day come from before being sent there.
The only problem you will run into is that you're mucking up your input data. If you are going to do that, store the data to another variable and use it globally. foreach($_POST as $key =&gt; $value) $_POST_HTML[$key] = htmlspecialchars($value); function somewhereElse(){ global $_POST_HTML; echo $_POST_HTML['test']; }
Report them to: 1) The bank 2) The police 3) The user
&gt; Not much you can do, I'm afraid. Uh. Sure there is. Did it occur to you to call the bank and ask for help?
Read the manual and ignore the well-meaning, generally-just-following-shiny-things "community." Then move onto other, very different languages. The man who knows only one language knows next to nothing. The more languages you speak, and the more different they are, the stronger you become.
The bank's going to do what about some Dutch guy who pirated my software?
Quite a bit. First, they're going to watch the personal data associated with that account. Two, they're going to pool it with other data, which leads to finding out how the card was stolen in the first place. Three, the next time it's used, they may catch the jerk in the act. Four, they'll alert the poor sap whose card it is, who might have other cards in circulation. Five, they'll get the police and possibly other agencies involved. Six, lots of stuff I don't know about. Et cetera.
I did contact the issuing bank, Citibank. They referred me to Mastercard. Mastercard referred me back to Citibank. The local police said that if I filed a report, it would just sit in a cabinet; there wasn't much they could do because he's in Italy. I suspect that Mastercard and/or Citibank aren't as willing to help me because I'm simply a merchant. All they've got to do is issue a new credit card number and take the money back out of my account and credit the customer's account. All of the risk falls on the merchant.
I'd love nothing more than to catch him in the act again. He's very popular on "nulled script" websites; this isn't the first time he's illegitimately obtained and distributed software. Citibank did notify the cardholder and reversed the transaction. I hate to see that my company's name showed up fraudulently on their credit card statement.
I did notice that he purchased the software using an IP based in northern Africa. Perhaps building in some kind of tool to correlate the purchaser's IP address with their billing address would be worthwhile. Of course, the caveat to this is their ability to simply use a more local proxy.
&gt; All of the risk falls on the merchant. You can write it off on your taxes, though, in most cases (this may depend on how your business is structured).
Ah, you're right. I can write it off as a loss.
I guess I'm being naive here, but I thought the point of credit cards and their fees was that the bank (or MC/Visa/etc.) had to eat the cost when there was fraud — not the merchant?
I usually run strip_tags(), with an allowed HTML list, then filter_var() with a sanitizing flag. This is the method from my class: http://pastebin.com/Z0Xeim6V Then, when you are ready to output, run htmlspecialchars(), htmlentities() or whatever. 
I'm not sure about free hosting, but you can get a decent deal through hostultra.com for $20/yr domain name is about $8.99 I think. It's a reasonable amount of space, you get PHP support, MySQL databases, and pretty decent uptime. If you're new to PHP, you should start with something more basic than a forum. Forums are tough to build. If you're hell bent on building one, I highly suggest using a framework, like CodeIgniter. CI isn't very hard to learn, you learn about OOP along the way, and it's free. Can't beat that. Feel free to hit me up with any questions you have about CodeIgniter. I'm happy to help you along.
For hosting I'd recommend Dreamhost. Find a promo code to get a year of decent PHP 5.3 hosting with MySQL for $10 or so. For interacting with a database on the code-side, [PDO](http://php.net/pdo) is widely recommended. For manually interacting with the database, You're going to want to use PhpMyAdmin. I don't have much in the way of tutorials, but PHP.net is going to be your best friend for documentation.
&gt;The second is a preferred way of doing it (if..else) Preferences are subjective to the coder. &gt;Your method is actually slower, using if..else it averages at 0.006450267 seconds, as opposed to 0.006979322 for your method. Oh, wow. A whopping 0.0005s difference! Wow, that'll surely have a huge performance impact. Seriously, if the difference isn't greater than the difference in execution time of the same code at different times, then it's not worth mentioning. It's indistinguishable from mere noise. By the way, good job at downvoting a perfectly valid answer simply because you do not agree with my coding style. 
Yes, all modern billing systems have this in place, as do processors such as Authorize.Net. It looks at the IP, address, zip code, etc. and compares it with the card's details. People in places like India, China, the Middle East, etc. are automatically ranked higher. The higher the score, the more likely it's fraud. You can then set thresholds up to let people through with a score of 2.5 or less, to put people in a pending state with 2.5-5, and straight decline anyone with 5 or higher. Search around for an API, I know a few companies do this, but can't recall them off the top of my head. 
Contact the Mafia in Palermo, Sicily. They have branch offices throughout Italy. For a fee they will "contact" this guy and inform him of your displeasure.
Hah! No, when banks and credit card companies say "fraud protection", they don't mean that *they* eat the cost; they mean *the merchant* eats the cost. When you dispute a credit card charge, for any reason, the bank starts the chargeback process. First they send the merchant a retrieval request, to get all the information they have on the transaction. The point of the retrieval is to determine that the customer really made the charge, that they got what they purchased, etc. You know those little credit card slips a lot of places have you sign? Yeah, the point of that is so when you charge the transaction back, they can fax a copy of your signed receipt with the retrieval request. If the bank is satisfied by the retrieval request, the chargeback is denied (this rarely happens for non-physical items). If they aren't, they issue a charge back. The amount of the transaction is removed from the merchant's account, plus a chargeback fee.The merchant can appeal the chargeback, but usually doesn't (more fees, usually doesn't work). Many banks don't bother with chargebacks for small purchases. If it was a 30 dollar item, they'll go ahead with the chargeback. If it was a 5 dollar item, they'll usually just eat the cost.
&gt;Some people may not be able to relate the two pieces of code. If they can't, then they have no business coding to begin with. &gt;Sure I wouldn't be jumping with joy if I saw a developer refactor this but if it works, makes the relation clearer to someone that may wish to tweek the GUI then fine. I don't think it makes things clearer one way or the other. It's just a matter of preference, really. Furthermore, the code is just an example. You do not have to code that way, it is merely outlining the general idea. There's no reason to be up in arms about it. 
Another way to do this, which I would guess is more efficient, is to do: &lt;?php foreach($this-&gt;contacts as $contact): ?&gt; // stuff here &lt;?php endforeach; ?&gt; &lt;?php if(!isset($contact)): ?&gt; // no contacts &lt;?php endif; ?&gt; This will only work though if the contacts variable is always an array.
I went with empty(), seeing as a lot of the time an empty array would probably be returned. It doesn't really matter though, as long as you know what's being assigned to the view. 
Launch, attempt to monetize, and refactor in the meantime.
Upvoted for 'dogs danglies', you're fantastic.
He said...free. jcoll, a great free host is [x10hosting](http://x10hosting.com), they'll provide you with a subdomain, they give you unlimited/unmetered bandwidth and diskspace(within reason), and all the basics for what you need. And you can always buy your own domain if you prefer that to a subdomain.
Use promo code SHIFT on a one year package for $50 off. 
thats what im leaning towards, since either way will involve recoding anyway.
Check out nettuts+, they have some really good beginner stuff to get you started. After that, the PHP manual is your best friend. Also find a good PHP IRC, they tend to help a lot :)
Free hosting: http://www.reddit.com/related/b5cl8/offer_redditor_owned_free_web_hosting/
I prefer to act on a copy of $_POST, rather than modify a superglobal. It's a first step to making your code more testable.
The bank/credit companies couldn't give a rats ass... they realized long ago that it's impossible to secure cards, so they built in the cost of fraud into the cards and pass a lot of it on to the merchant. At most they'll freeze the card account and issue a new card to the user, but they won't do jack about trying to catch the guy. 
Is this site attempting to make money, or is it just so you can learn php? If it's business - ask yourself: Are my visitors more likely to pay me if this is in a framework or as it is now? The point of OO code and frameworks isn't to make the end site magically better, it is to save you a LOT of time during development and most importantly to make maintaining and scaling much much easier. So long as your site performs the functions labeled on the box in a timely and stable manner, your visitors have no idea how its written. The person who should care about whether it is OO and/or in a framework is the developer and any stakeholders of the project.
Send an "automated" email to his email address saying that there is a security update to the software and give a link to download it, but instead of an update give him a special version that dumps his entire hard drive to you and then formats it. ? Then create a fake facebook account and let all his friend's know that he's a thief? 
In my experience, it *really* depends who you're talking to, at the individual level.
In my experience, it *really* depends who you're talking to, at the individual level.
Valve's Steam online game store does this and it's really really really annoying because it gets it wrong. You can't even use PayPal instead because they check the shipping address.
This is some solid advice. I thinking I'm better off with launching then if its successful; hiring developers to take over and manage it from there. Since I should point out I dont have much intentions of actually continuing pursing the path of a web developer. 
I too, don't live in the country where my credit cards are issued. At first I would have to email Steam's support so that they can approve my purchase (this would suck for deals because they would take more then 24 hours to reply) then I learned a trick which I used several times already. Depending on where you card was issued, go the url of the game you want to buy but add ?cc=XX to the url. Change XX to the two letter code usually used for your country (US, UK etc...) the purchase will go through. 
erm, that shit is illegal no matter where you are and those companies and banks deal global. esp in italy or netherlands. russia, not so sure. 
Was working at Dell making close to $90,000 a year. Quit that horrible working environment (but oh what nice benefits), and took entry level PHP programming job at $55,000/yr... (I'm relatively experienced but not professionally, plus have graduate degree)... Been at it for four years now, just jumped ship to another company for $75,000 per year doing more PHP server side programming... NEVER LOOKING BACK baby.
You don't need a host to learn and develop locally. Do that until you have a working application and *then* host it somewhere.
lol, how old are you?
A stripper!
I don't put logic in the view unless absolutely necessary. The controller routes. The model is a container (regardless of persistence). The view is a dumb template. In Kohana/Cairngorm/etc. there's the concept of a logic layer that does the heavy lifting in the decisions of: How to access data How to persist data How to format data How to bind data These are done in the mini-controller/actions of Kohana, the Commands of Cairngorm, and in codeigniter, it's the same as Kohana. I simply don't agree that you should put that logic in a template engine that makes you dependent on that engine. If you switch how you do templating, you have to refactor that logic? No thanks (to be fair you will still have to specify the bindings, but that's the bare minimum of however you choose to render).
That will help you recoup a percentage, sure, but not all of it. If you get boned out of $30 worth of merchandise, you can write off a $30 loss. If your tax rate is 33% then you "saved" (in this case, not paying more- it's not much of savings) $9.90 of that original $30 loss. I'm not saying you didn't know or mean that, but a lot of people do seem to think that writing something off means a one to one savings on their taxes. That is just not the case.
Right. :) I was in a bit of a rush earlier and didn't elaborate. True, you don't get back the full amount, but it's better than nothing.
[Stop trying to own software.](http://www.gnu.org/philosophy/why-free.html)
Why is this being downvoted? It is a legitimate and well written question.
It shows ignorance to how credit cards really work, and I guess someone doesn't like that naive view.
Have you thought about using MaxMind or another fraud checker?
I can go through Stallman's little diatribe and note that our merchant in this case actually DID suffer economic loss. He got hit with a chargeback fee. I'm all for GPL stuff, and prefer to use it for my projects, but its the developer's choice what license to use.
Some stuff that should probably help you on your way: &gt;I need to do a system that allows users logging in Just remember to properly secure your login system. Some considerations: * Use [prepared statements](http://php.net/manual/en/pdo.prepared-statements.php) which is immune from SQL injections. * Use [bcrypt for passwords](http://codahale.com/how-to-safely-store-a-password/). It has a work factor, so it can be made slower as processors get faster, and the hash itself incorporates a salt. To create a bcrypt hash, simply do the following: $hashed_password = crypt($_POST['password'], $salt); The salt needs to be in the following format, otherwise it'll use a different (read: WRONG) crypto: $2a$&lt; two digits for work factor &gt;$&lt; 22 (0-9A-Za-z) characters for salt &gt;$ And to authenticate users, simply do the following (since the hash incorporates the salt): if (crypt($_POST['password'], $hashed_password) == $hashed_password) { //authenticated, do stuff } * Prevent [session fixation](http://shiflett.org/articles/session-fixation): if (crypt($_POST['password'], $hashed_password) == $hashed_password) { //authenticated, do stuff //regenerate session ID to prevent session fixations session_regenerate_id(); } * Switch to HTTPS for logins. * If you intend to have a "remember me" feature, do something like the following: ini_set("session.gc_maxlifetime","2592000"); session_set_cookie_params( 86400*30 ); session_start(); /* ... */ if(isset($_POST['rememberme'])) setcookie( session_name(), session_id(), time() + 86400*30 ); &gt;with a really flexible permission system (where I don't know WHICH permissions that can be set) Sounds like you'd want an [ACL](http://en.wikipedia.org/wiki/Access_control_list) system. Also, make any non-idempotent action (actions that change stuff, such as adding data, deleting, updating etc.) a POST request. Remember to add a hidden hash to every form to prevent [CSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) attacks. Generate a new hash upon every request and store it in a session. Upon a form submission, compare the posted hash to the one stored in the session to validate the request. &gt;each item they sell can have several components and the child node (component) got a reference in the database to the parent node (finished product) For future reference, this is called a unary relationship. &gt;linking them all together to a binary tree A binary tree cannot have more than two child nodes (bi- means two). If it got more than two child nodes, it is not a binary tree. 
Yikes, I can sense your apprehension in this. Yeah, I would be too. Sounds like the stakeholders don't really know what they want, and that you don't have enough time to do this properly even in phases because they want something done properly in a phase 1. 
You should keep translations id DB. That way you can make a nice interface to edit them. As for translation process itself you can choose. Simpliest and dumbest is to fetch each translation from DB. Don't do this, you can get killed for that. a) You can have duplicate templates for each language which you can generate from a master template which has translation keys (placeholders). Not it runtime! Works fast as hell, but is cumbersome tow work with - regenerate page every time you translate anything. b) You can use memcached (or similar) and keep a humongous lump of translation tables in memory. c) Use some framework (with good support and community) d) See other comments
That depends. If the text is static (such the case with navigation items, buttons, forms etc.), then storing them in files would be better. If the text is dynamic (such the case with content produced by a CMS), then storing it in the database would be better. 
Well there will be some static content like "welcome to out website" and navigation link names and certain page content, but as I mentioned there is a possibility of a blog/news feed. So perhaps deploy both? To give an idea of the scope, it will be something like five pages with static content + some dynamic.
So probably better to keep those pages with only static content, like a few paragraphs of text or contact info as files and then other stuff like blog entries would be in the database
Yep. If your site uses both, then deploy both methods. 
Upvoted for not flaming me for the apostrophe catastrophe.
&gt;I don't put logic in the view unless absolutely necessary. It is perfectly fine to have logic in a view, as long as it is presentational logic, not business logic. 
You should probably use a CMS if you are going to have a blog. For multilingual sites I have been using WordPress and the xLanguage plugin. For strings used in the theme I have a translations text file and for anything used in the content it has different sections to enter in each language.
There is so much wrong with this post. The view is *not* a dumb template. Never has been. It's in charge of all the presentation decisions and you can't do that without logic. Saying you can't/shouldn't have logic in a view is not just a matter of opinion, it's plain wrong (for MVC at least). Next, not using a template engine because you become dependent on it is not good decision making. You clearly graduated from the school of decoupling, which I commend, but you may have snoozed during the lecture on *when* to decouple. Decoupling is only a no-brainer when there's no disadvantage to doing it. Choosing a template engine brings advantages, so the decision not to use one shouldn't be taken lightly. You've already chosen your development language, your framework(s), your web service protocols, your ORM, your cloud storage, your CDN, your development tools and platform, your testing tools and a hundred other things that have have tied you in some way, even if it's just a cost associated with changing them at a later date. A template engine is a technology like any other. Just make sure your choices are informed.
I suppose that you don't realize how illegal that is?
If you're going to suggest using bcrypt for password hashing, then the bcrypt methods for hashing and checking should be used, not crypt(). (2a is just plain blowfish, which might not even be available on the system.)
That's what I usually use, but the problem with this in this case is that OP is accessing the files with AJAX, so it will never be defined. Probably you'd do best generating a hash and storing it with the session and send it along the Ajax request. In the ajax file, check that the session hash is the same as the hash it received with the ajax request.
I like Kohana over CodeIgniter. I echo a lot of what Nicoon said, but if you're using an ORM, it will escape things if used properly.
A better example would be posted data which is in a non-latin-based character set. trim() is not character-set aware, and can malform multibyte character-sets (UTF-16 for example). I entered a world of hurt when I ran trim() on some data (that I validly wanted trimmed) but the charset was UTF-16. The data was no longer parseable by PHP because bytes were broken.
Reinvent the wheel, got it.
sorry, I was in /r/netsec mode :p
3 1/2
Personal preference ;) I mainly chose CI due to previous experience; both are viable options though!
&gt; I need to make sure there's extensive security features for it, I am planning to use CodeIgniter framework so I'm pretty sure I got this covered. Thanks for the morning laugh.
You should also have a quick look at Twig as a template language
Using CodeIgniters database class that protects me from SQL injections unary relationship, brainfreeze considering I studied this in my native language - thanks for clearing that up. session fixation, proper hashing using blowfish and https were already thought of. ACL system I'm looking deeper into. Thank you for your thorough reply!
What part is reinventing the wheel, and where have I advocated doing so?
Not entirely sure why I put CodeIgniter and security features in the same sentence, but I'm pretty confident that I'll be able to fend off most attacks (despite it having nothing to do with CI)
&gt;If you're going to suggest using bcrypt for password hashing, then the bcrypt methods for hashing and checking should be used, not crypt(). (2a is just plain blowfish, which might not even be available on the system.) crypt() with CRYPT_BLOWFISH *is* bcrypt. &gt;which might not even be available on the system. It's built into PHP nowadays. The versions where CRYPT_BLOWFISH isn't available in PHP isn't even supported anymore. Edit: More information: http://en.wikipedia.org/wiki/Crypt_%28Unix%29#Library_Function_crypt.283.29 &gt;The crypt() library function is also included in the Perl[1], **PHP[2]**, Pike[3], Python[4], and Ruby[5] programming languages. http://en.wikipedia.org/wiki/Crypt_%28Unix%29#Blowfish-based_scheme &gt;Niels Provos and David Mazieres designed a **crypt() scheme called bcrypt based on Blowfish**, and presented it at USENIX in 1999.[4] The printable form of **these hashes starts with $2$ or $2a$**, depending on which variant of the algorithm is used. http://us.php.net/manual/en/function.crypt.php &gt;As of PHP 5.3.0, PHP contains its own implementation and will use that if the system lacks of support for one or more of the algorithms. 
store in db, fetch once and store in memcache for a day on first request. 
Yeah, a framework does a lot of this for you. It doesn't hurt to understand how it works, though. I am not familiar with codeigniter myself, so I cannot speak for its features. I can only offer you how to do it in vanilla PHP (which should also be appreciated by non-CI users, since they could take part of the advice as well). &gt;session fixation, proper hashing using blowfish and https were already thought of. That's great. More often than not, most developers aren't familiar with these things, so it's a good idea to bring them up. 
&gt; The salt needs to be in the following format, otherwise it'll use a different (read: WRONG) crypto This is a horribly bad approach to salting, and what you describe isn't just the salt, but quite a bit more. (The idea that the salt contents govern which algorithm is used is ... laughable, to be polite.) There is a lot more to this than invoking the magic reddit fake-wisdom word "bcrypt", which is the hint that people are reciting things they heard which were correct when they were written on usenet in 1992, not that they actually know what they're talking about. &gt; And to authenticate users, simply do the following (since the hash incorporates the salt): &gt; if (crypt($_POST['password'], $hashed_password) == $hashed_password) Oh, the hilarity. Salts at the user side! There's *nothing* wrong with that. &gt; &gt; with a really flexible permission system (where I don't know WHICH permissions that can be set) &gt; Sounds like you'd want an ACL system. Uh. No, it doesn't. By the way, all an access control list is is a list of names and permissions; pretending that it's legitimate to call that an ACL means that your idea of security comes from reading router manuals, because the reason someone calls something an ACL is to point out that it's in the Cisco format, not because ACL is a meaningful concept in security. Which is one of the many, many reasons that one does not learn security from Wikipedia. &gt; Also, make any non-idempotent action (actions that change stuff, such as adding data, deleting, updating etc.) a POST request. Please stop using words you don't understand. There's nothing wrong with using the HTTP verbs correctly. Delete should be DELETE. Update should be POST. Adding data should be PUSH. Idempotency has, by definition, nothing to do with adding or deleting resources. You're just rattling off words because you think they sound smart. &gt; Remember to add a hidden hash to every form to prevent CSRF attacks Wrong again, ass. That doesn't prevent the primary intrusion point for CSRF, script intrusion-driven sniffing. The real way to fix this is by using the HTTPS session nonce, since it can't be faked. "Be sure to leave the locks open so that when the thieves show up and try to pick them they'll tick them shut and think they're stuck." Please don't ever give security advice again. &gt; Generate a new hash upon every request This has absolutely no effect. It just means the snooper has to act faster one single time on one single page. You're just reciting things you heard, to the detriment of anyone who believes you. What an embarrassment. And, a dangerous embarrassment, at that; Chef Ramsay should be in your kitchen, screaming at you that you're going to kill someone. &gt; &gt; each item they sell can have several components and the child node (component) got a reference in the database to the parent node (finished product) &gt; For future reference, this is called a unary relationship No, a unary relationship is a row which has only one row related to it. Note that I am speaking in the singular in the viewpoint of a single direction. If for example you have a table of people, and a table of operators, and one of the operators is "is married to," giving you the following setup: (barack) -&gt; (married_to) &lt;- (michelle) That is two unary relationships and two nullary relationships, because both individuals point at married to, but married to does *not* point at either individual. Notice that if you also put Bill and Hillary in there, you can't actually tell who's married to who. What OP is describing is something quite different: a one-to-one relationship. That's where you get the middle table to describe the outer ends: (Barack:#6) &lt;-&gt; (6,15,@Married) &lt;-&gt; (Michelle:#15) Seriously, these are rudimentary 101 database topics. You need to not give database advice anymore. You don't know what you're talking about. http://hsc.csu.edu.au/ipt/info_systems/2-4/database_modelling.htm &gt; A binary tree cannot have more than two child nodes (bi- means two). If it got more than two child nodes, it is not a binary tree. Lol? Here's an example of a binary tree with more than two child nodes. When you're done telling me you meant "more than two child nodes per node," feel free to start cooking up an explanation of why things can't be linked together into one of those. The typical highschool freshman taking their first programming course thinks it's called "rebalancing." 4 / \ 2 6 /\ /\ 1 3 5 7
Not to mention that, unless it's 1992 and I didn't notice, we've moved on from both blowfish and bcrypt a long time since.
&gt; I echo a lot of what Nicoon said You shouldn't. He's utterly clueless; almost everything he said was wrong.
&gt; Not entirely sure why I put CodeIgniter and security features in the same sentence Probably for the same reason that you used CodeIgniter in the first place. &gt; but I'm pretty confident that I'll be able to fend off most attacks Well, I'm not. Largely this is because you're taking security advice at Reddit. You've got a guy down there telling you to keep your password hashes at the client's side, for fuck's sake. You shouldn't be asking questions like this of amateurs, like you get on the web in forums and proggit and stackunderthink and so on; otherwise you'll end up with amateur level security (much as how you got to CodeIgniter.)
&gt; crypt() with CRYPT_BLOWFISH is bcrypt. Lol, no it isn't, you clueless buffoon. Stop downvoting people for trying to teach you things. The bcrypt algorithm depends heavily on its "Eksblowfish" key setup algorithm, which runs as follows: EksBlowfishSetup(cost, salt, key) state \gets InitState() state \gets ExpandKey(state, salt, key) repeat (2cost) state \gets ExpandKey(state, 0, salt) state \gets ExpandKey(state, 0, key) return state InitState works as in the original Blowfish algorithm, populating the P-array and S-box entries with the fractional part of ? in hexadecimal. The ExpandKey function does the following: ExpandKey(state, salt, key) for(n = 1..18) Pn \gets key[32(n-1)..32n-1] \oplus Pn //treat the key as cyclic ctext \gets Encrypt(salt[0..63]) P1 \gets ctext[0..31] P2 \gets ctext[32..63] for(n = 2..9) ctext \gets Encrypt(ctext \oplus salt[64(n-1)..64n-1]) //encrypt using the current key schedule and treat the salt as cyclic P2n-1) \gets ctext[0..31] P2n \gets ctext[32..63] for(i = 1..4) for(j = 0..127) ctext \gets Encrypt(ctext \oplus salt[64(n-1)..64n-1]) //as above Si[2j] \gets ctext[0..31] Si[2j+1] \gets ctext[32..63] return state Hence, ExpandKey(state, 0, key) is the same as regular Blowfish key schedule since all XORs with the all-zero salt value are ineffectual. ExpandKey(state, 0, salt is similar, but uses the salt as a 128-bit key. The full bcrypt algorithm utilizes these functions to compute a hash from a given input as follows: bcrypt(cost, salt, key, input) state \gets EksBlowfishSetup(cost, salt, key) ctext \gets input repeat (64) ctext \gets EncryptECB(state, ctext) //encrypt using standard Blowfish in ECB mode return Concatenate(cost, salt, ctext) I have never seen anyone less qualified to give this advice. &gt; &gt; which might not even be available on the system. &gt; It's built into PHP nowadays. Wrong again. PHP has Blowfish, but blowfish isn't bcrypt.
&gt; It doesn't hurt to understand how it works, though. Says the guy who thinks bcrypt is crypt() using blowfish, who thinks one-to-one is unary, who thinks binary trees can't be merged because they'll run out of child ndes, et cetera.
Please stop falling for the idiot's claims.
I prefer writing a series of questions (methods) that the controller can answer, like a has_contacts method, rather than having loads of pure PHP function calls. Makes things idiotproof for designers, etc. if($object-&gt;has_contacts()) { // foreach } else { // no contacts, bro }
^This, especially if you envisage Symfony 2 playing a part in your future.
PHP files are executed by Apache. You can't download them or see their source code through HTTP (unless your server doesn't have PHP installed and configured, because then they're treated as text files and can be). The only way to get to the files is via FTP, so make sure you have a good password or use SFTP. Also, yes, if you're using MySQL, you need to have the password in plain text in the PHP. Edit: It's also good practice to have a MySQL user account that you use via PHP to be a different one from your root one, and to have a different password from anything else on your server (FTP account, SSH, etc.)
You should also put sensitive files outside of the website root directory. eg, if your website is at /var/www/mysite/live setup a separate directory in /var/www/mysite/includes (or similar). That way if your server does blow up and start serving php files as plain text people won't be able to see them. edit: as to at 
Ah yes, this too. :) 
Best practice is to store the database connection details in a configuration file *outside* of the web root, and outside of your source control. As an aside: it's also not good practice to connect to MySQL as the root user. Have a look at [parse_ini_file()](http://php.net/parse_ini_file) to give you a few pointers. Having the username and password (and hostname, and database name for that matter) in a configuration file also means you can easily set up multiple instances of your code that run on different databases without having to change the code. Having a *template* configuration file in your source control is not a bad idea; and is actually encouraged (by me at the very least :-P). 
Thanks for the quick reply. And that completely makes sense now that you explain it that way. All my experience is in HTML, CSS and JS. I'm thinking I'll set up specific user accounts with set permissions and make connections using those details and not just the root account.
Thanks for the heads up. That parse_ini_file() is definitely a good one to remember. Much better than using include() because of the file path identify. 
create mysql user for a single db. include config file from outside htdocs. dont use apache.
What exactly do you mean? You cannnot just say someone is wrong without saying why or how.
This, definitely. Check out [XAMPP](http://www.apachefriends.org/en/xampp-windows.html), it's pretty easy to set up. Also, find yourself a good IDE. I prefer to use [Aptana](http://www.aptana.com). I use XAMPP in combination with [DYNDNS](http://www.dyndns.org) - Which allows me a free domain (it's a subdomain, but easier than keeping up with your IP address) - There's a program you can run that will keep your IP address up to date with their servers. You can then access your machine remotely, even via FTP, so your friend can work on the same box as well. There's a lot of great resources out there. Best of luck with your PHP learning!
Perhaps [Frapi](http://getfrapi.com/) can assist. Otherwise, you could also try to use Zend Frameworks REST route and context switcher. If you don't feel like doing *anything* on the server-side, CouchDB is also has a REST-ish api that returns JSON. 
The unix root password? Definitely not best practice. Storing the root password in plain text is essentially giving root access to every users (and potential anonymous users) that could read that file. I don't think that's what your code sample is doing though. Most of the time, the database runs a different authentication system than the operating system for exactly that reason. With Mysql, you typically do have an administrative user after the initial install/setup, so the first thing you should probably do is setup various database accounts. Typically, I've seen people create one account with read-only access for general queries, and then use other accounts for specific updates &amp; inserts (account creation, financial transactions, etc). That way, even if someone were to potentially compromise one database account, you're still somewhat protected. Getting back to your link: In PHP, passing the database password information in plaintext is usually unavoidable. I usually prefer to keep them (along with other settings) in a Config.inc files as define() statements. But If you really really worried about security, you could use code obfuscation tools like the Zend Encoder. It essentially encodes all PHP code into non-human readable binary, which is still parsable by the PHP engine. Since it tends to make debugging a nightmare, it's only recommended for production machines.
Don't use Apache?
It's possible for issues with .htaccess, or a larger server issue, to cause the PHP files to load/download with full source code rather than execute. Passwords should always be in separate config file that's included from outside the web root.
What makes you think I did that? Reddit: the only place where you can get massively downvoted for pointing out extremely specific mistakes in security advice, then have people say "you should have said why or how." http://www.reddit.com/r/PHP/comments/huc60/phpbased_project_how_to_structure_it_up/c1yhg6a Sometimes I think I should just let you guys derp your userbases right open.
For one, using crypt with blowfish, then claiming that's bcrypt, and downvoting when someone cut and pastes the actual algorithm from the actual paper.
strip_tags is not usually a good idea. It either removes all HTML tags, in which case people can't use innocent formatting involving "&lt;" and similar characters, or you allow some tags, in which case it becomes trivial for people to inject XSS into your site via JavaScript events like onmouseover. And if you're running htmlspecialchars on the output, you don't need strip_tags anyway.
Well, now you've edited new wrong into your post. 1) Yes, crypt() is in PHP. You made the false claim that bcrypt() was in PHP. 2) Yes, bcrypt is based on blowfish. If you look at the paste of the three algorithms below, it appears one time in one of them, in one of the 22 operations. They still aren't the same thing. This is the same idiotic error as claiming that twofish, which is also based on blowfish, is blowfish. 2a) This is easily tested. Take the bcrypt residue of a thing. Now do the thing you think is the same. Notice how the two don't even have the same size residue. That's beacuse they aren't the same thing. 2b) Putting bold around the text that starts the hash is hilarious, because of course, if you use crypt() with blowfish, the result is exceptionally unlikely to start with $2$ or $2a$, which is just more proof that you're wrong. 2c) The reason it can start with 2 or 2a is that bcrypt is actually two different things, and those are there to disambiguate which one is being used. Funny: when you're saying crypt() with blowfish is bcrypt(), you seem unaware that bcrypt() itself is two different things (and neither of them are crypt() with blowfish.) 2d) You seem to think that blowfish is something different than crypt() with blowfish. This is bizarre and hilarious. All crypt does is invoke various different algorithms. This is like trying to distinguish between sort() and the insertion sort it uses. And, before you tell me I'm wrong here, the alternative is that crypt with blowfish is the same thing as blowfish (which it is,) and that therefore bcrypt, which you claim is just crypt with blowfish, is in fact blowfish. Therefore, bcrypt, by your claims, *is* *blowfish*, if you don't think crypt() with blowfish is the same as blowfish itself. Then you go on to repeat that PHP has blowfish in it, which nobody argued, because you're still stuck on the idea that crypt() with blowfish is somehow different than blowfish itself, and that the two together somehow constitute bcrypt, *even* *after* *someone* *gave* *you* *the* *bcrypt* *algorithm*. The only thing worse than being wrong is continuing to insist on the wrong thing after you've got evidence. Were you editing the Paul Revere article on Wikipedia the other day? Fuck, I hate novices who think they aren't novices, and ignore the evidence in favor of their beliefs. Cryptography is not religion. Take off the priest hat. When the algorithm says you're wrong and the implementations say you're wrong, you're just wrong. 
^ This. There is a right way to point out mistakes, and then there is a douchebag cunt way. Troll has obviously opted for the latter.
^ This. Stop whining, troll.
^ This. Troll spews shit about StackOverflow (probably got voted down and kicked out for being a dick), forums, and proggit, but has yet to provide a solution of his own.
blowfish was designed in 1993. bcrypt, which is based on blowfish, was presented at usenix in 1999. So it would be impossible to have used either in 1992.
You just can't help yourself, can you? &gt;For one, using crypt with blowfish, then claiming that's bcrypt Except it is. 1. PHP's crypt() is an implementation of C lib's crypt(). \[[1](http://en.wikipedia.org/wiki/Crypt_%28Unix%29#Library_Function_crypt.283.29)\] 2. bcrypt is a blowfish-based scheme for crypt() \[[2](http://en.wikipedia.org/wiki/Crypt_%28Unix%29#Library_Function_crypt.283.29)\] Edit: crypt() + CRYPT_BLOWFISH, that is, which I assume is what you meant. Not crypt() + blowfish.
^ This. Again, right way to point out someone is wrong, and then there is a dick way. Troll has again, opted for the latter.
&gt; &gt; For one, using crypt with blowfish, then claiming that's bcrypt &gt; Except it is. Insisting you're right won't change that you're wrong. I pasted the algorithm for you; you simply ignored it. I showed you how to test it; you simply ignored it. I showed you three things that could not be true in your own claims if you were right; you simply ignored all three. Sticking your fingers in your ears and saying "yeah huh" won't change that you're wrong, and that anyone who actually checks will know it. &gt; 1. PHP's crypt() is an implementation of C lib's crypt(). [1] &gt; 2. bcrypt is a blowfish-based scheme for crypt() [2] Completely failed to understand the sort() and insertion sort example, too. What's it like to be stupid?
Thanks for the reply, the view having logic in it was really the issue at hand, but i see what you are saying. As long as the logic is presentation logic, it's not a bad practice to keep it in the view. Exactly what i was looking for! Thanks :)
^ This. Responds rudely when there are other options.
Totally clear. Your first post was exactly what i was looking for. But tolley;s idea was just a good idea in general to use (if only for errors and not things like no presentation data). Still trying to abstract as much as possible! 
Again and again I see it tragic that people are starting out thinking that the mysql_ functions are the way to do things. They are abysmal and deprecated. Use PDO, for the good of all.
nginx is infinitely sexier but Apache still does the job.
Valid point. I should have mentioned that the credit card's billing address was in Florida, however it was submitted to me by an IP address in Morocco.
I like what you do.
As @evertrooftop suggested Frapi is an excellent, thorough solution. Alternatively, if you're looking for something quick and simple, I threw up an API in two hours with this [one-file class](https://github.com/jacwright/RestServer)
Are they php 5.3?
I don't even know where he got the idea that I claimed that bcrypt was blowfish. I've consistently said crypt() + CRYPT_BLOWFISH, not crypt() + blowfish. CRYPT_BLOWFISH is an implementation of the bcrypt hash, which in turn is based on the blowfish block cipher.
Ah, that's right. I was wrong. I thought you were talking about UNIX's `crypt`. You were talking about PHP's. Anyways, ignore him. He's pretty much your standard troll who wants attention. He's so pathetic that he resorts to [signing up on a forum just to berate someone](http://typophile.com/node/61920) (the fun starts a little less than halfway down the page). 
&gt;Anyways, ignore him. Been trying to. The thing is, he keeps following me and mass-spamming me with messages everywhere I go. -_-
A cry for attention, obviously. Standard behavior for a troll. :)
If the files outside the HTTP directory are included, when the server falls over, won't they still be output as they're included in the public folder? Another solution could be to have the passwords ans such in an ini file, then have the PHP load them in. Then, if the PHP source runs away the passwords don't go with it.
No, because include()/require() won't be executed in my example. The user would just see something like &lt;?php include('passwords.php'); and not the actual contents of passwords.php 
Not unreasonable at all. In fact, I'd likely be interested in trading some work (I have a couple personal projects as well) - I work for a company with a non-compete clause so I couldn't charge even if you were offering money. I'm not local though - West Coast. 
You are correct: exposing the root password like that is a nightmare. However, they're really just showing you how the function works, not careful usage of the language. Use MySQLi, by the way. MySQL is deprecated, but not in favor of wrapper libraries, just in favor of its replacement.
No, not the unix root password. At least look at the link before berating it.
&gt; There is so much wrong with this post. &gt; Saying you can't/shouldn't have logic in a view is not just a matter of opinion, it's plain wrong There only seems to be 1 thing. Views are dumb, vs not (embed 'presentation logic', whatever that means to you or don't) It seems it's an opinion, as it lots of companies do it in practice. I have never heard any different nor experienced anything different without significant pain. Give me a simple use case? Give me an example where it's obvious where the logic would get unwieldy or ugly? Manipulating dynamic grids? Lots of developers end up asking the OP's questionsm when spreading the login into ephemeral layers. The OP's question is common because the criteria are non-existent. Binding a static string vs an object with a method is not a presentation decision. Templates can and should be pluggable. ORM pluggable. CDN pluggable. As much as possible, all over. I just don't make that concession for templates by choice. That's all rather irrelevant to determining what is presentation logic. It's pretty simple IMHO. If your output can be simple serialized to json, can be formed into SOAP, can be sent as url params, your logic is done. The rest is presentation logic because the rules that determine the organization and naming of your data is done.
This. Learn PDO first, and use it every time. Just take it on trust for now when you're starting out, and learn the old functions later, only for when you need to maintain someone else's code. Using mysql_ functions is a shortcut to the Dark Side, and will lead to much Suffering.
I did look at the link, which is why I said the following. &gt; I don't think that's what your code sample is doing though. I was referring to the OP's post, which mentions 'root password'.
I believe you're looking for http://programmermeetdesigner.com/
You do know that databases have root users, and therefore root passwords, right?
Yes, I am aware that some databases call their administrator or super user 'root'. I thought that was bad practice, though.
I think designers in your position are relatively common. I seek them out relatively often myself. I might offer to work with you, but I'm about 10 hours south down in NC.
also it could be a good idea to store your mysql connection information in a file directory outside the www folder, almost like what was stated above. Before I started using a custom CMS I made I would store my connection information in a file in a directory something like this-&gt; "/home/user/conn.php". The world can only see /home/user/www/index.php, thus limiting anything even if your server does blow up. The include would then look like this if you're going from the public_html/www folder: &lt;?php include("../conn.php"); ?&gt; 
Nope. A root user is just a root user. It has nothing to do with what the username on the account is.
Aahh, the heady trail of includes and trying to find the connection info... I see a lot of websites with issues and have to do this now and again. I can also vouch that using an includes directory and storing the connection string in there is a good idea and isn't publicly viewable (providing it's outwith your web root) and has the added bonus of helping whoever comes behind to mop up after you.... 
Oh, this could be incredibly useful. Is there any chance you would consider adding color palette generation, functions to change brightness and saturation, and detect contrast problems between colors? I am absolutely willing to help as well! It would be wonderful to be able to have a user select a base color, and have a web app auto-generate the rest of the color theme!
I'll have to tell that to my windows and network admins. 
Ah, thank you good sir. I saw your blog the other day and it is very informative. Keep it up! 
I would think something like this could do the trick. SELECT cr.item_id FROM connection_requirements cr LEFT JOIN connections_compatability cc ON cc.works_as = cr.connector_id LEFT JOIN connector_quantities cq ON cq.connector_id = cr.connector_id LEFT JOIN connector_quantities cq2 ON cq2.connector_id = cc.connector_id WHERE cq.quantity &lt; 1 AND cq2.quantity &lt; 1; 
Its been done. there is a Wordpress plugin that wraps OSTicket into wordpress by using CURL and keeping track of the sessions and cookies in the same way you are looking for. [here](http://wordpress.org/extend/plugins/zingiri-tickets/) is the link to the plugin. 
Oops! I'm not Jacob Wright, as my bad grammar may have inferred. To clarify: I used Jacob's class to create a working API in 2 hours, providing a RESTful service interface to an existing application.
Well either way, thanks :) 
He only got hit with an economic loss because he tried to sell the software as a physical thing. If he had not been, and instead had made his money through more conventional means (i.e., selling services), he would have been perfectly capable of either not accepting a stolen credit card or ceasing to provide the service once the nature of the card was revealed to him. Such a business model provides a far closer link between client and provider, anyway, so it would be easier to recognize a fishy transaction with a person. &gt; its the developer's choice I agree. That's why I'm here, on his comment thread, explaining the benefits. Namely, that he would never have been in this situation.
I'm not sure why this isn't said more often, but you should _not_ be learning MySQL if you are "just beginning" PHP. They are two separate languages. MySQL is not a subset of PHP. It is used outside of PHP, in other languages. It has its own specific way of doing things, and its own format. If you are trying to learn MySQL at the same time you are trying to learn PHP, you are only hurting yourself. On top of the obvious fact that learning two things at the same time is harder than learning them separately, you will likely have to make sacrifices to one in order to learn the other (like ignoring how to optimize a database in MySQL so that you can focus more on debugging your PHP code). There is a lot more to MySQL that just doing what works. There are things that work that are still _incorrect_ due to how much space they take up and how much it lags to query the table you've created. You won't learn these things if you don't dedicate your learning to MySQL, and you can't do that if you are learning it simultaneously as PHP. Finish learning PHP before you learn MySQL, _please_. It will take longer for you to publish a databased work, but said work will be much more efficient, faster, and your understanding of the inner works of both languages will be deeper.
Windows machines don't have root accounts. You'll get laughed at. Networks don't have accounts at all. You'll get laughed at even harder.
Search around to see if there's a local [PHP user group](http://www.nyphp.org/) in your area, you'll make all sorts of interesting contacts who might want to partner up.
not sure if trolling...
SELECT cr.item_id FROM cr INNER JOIN ( SELECT works_as AS connector_id, SUM(cq.quantity) AS q1 FROM cc INNER JOIN cq ON cc.works_as=cq.connector_id GROUP BY cq.connector_id ) AS substitute USING(connector_id) INNER JOIN cq USING(connector_id) WHERE cr.quantity &gt; (cq.quantity+q1) GROUP BY connector_id
Heh, I love how they base64 encoded the email address. I'm going to start doing something like that whenever we hire new staff.
You can do this by either: 1. Changing the session.cookie_secure flag in php.ini. 2. Changing the session.cookie_secure flag with [ini_set](http://php.net/manual/en/function.ini-set.php). 3. Changing it with [session_set_cookie_params](http://www.php.net/manual/en/function.session-set-cookie-params.php).
[w3fools.com](http://w3fools.com/) Please do not learn PHP from w3schools.
But that doesn't address the issue of going from https to http, where the cookie will no longer be read due to the secure-flag, and thus the session lost.
Are you sure about that? The above options should change the secure flag on the session cookie. 
&gt; The obvious but unrealistic solution would be to host the entire site in https. Why is it unrealistic? More and more sites, such as [GitHub](https://github.com/), now have the entire site on SSL. A lot of other sites use SSL for all logged-in users. If you already have an SSL certificate and a dedicated IP address, there's no reason not to serve the entire site on SSL, at least for logged-in users. Reference: [Top 7 Myths about HTTPS](http://blog.httpwatch.com/2011/01/28/top-7-myths-about-https/) Also, **SSL becomes useless if session data is shared between encrypted and non-encrypted requests.** If session data is shared, anybody with Firesheep can sniff the unencrypted request, extract the session identifier, and use it to fake an encrypted request. Congratulations, you've just totally wasted the money you paid for that certificate. Either you keep all session data tied to an HTTPS cookie, or you don't. There's no middle ground. If you want to prevent users from being logged out when they request a non-encrypted page, the only proper way to do it is to redirect the visitor to an encrypted version of the same page. As soon as the user logs in, set a (non-HTTPS) cookie: setcookie('ssl', 'on'); If this user ever makes an unencrypted request with the "ssl" cookie set to "on", you do this: if (isset($_COOKIE['ssl']) &amp;&amp; $_COOKIE['ssl'] === 'on') { if (empty($_SERVER['HTTPS']) || $_SERVER['HTTPS'] === 'off') { header('Location: ' . 'https://www.your-domain.com' . $_SERVER['REQUEST_URI']); exit; } } The user's browser will immediately make an encrypted request to the same page. Then you can do whatever you want with the session data. Don't allow the user to make another unencrypted request until he logs out. (Nobody cares about logged-out users.) 
Yes, by marking the the cookie as secure the browser will only send it during https visits. When the user navigates back manually, or by clicking on a http link, the session is lost since the browser will not send the cookie due to the secure flag.
&gt;Yes, by marking the the cookie as secure the browser will only send it during https visits. Just so we are clear here: You *are* talking about cookies in general being set as "secure", right? The session.cookie_secure flag *should* overwrite that on the session cookie specifically, not affecting the other cookies. If you are talking about the session.cookie_secure flag being set to true, then that's obvious that it would only send the cookie over HTTPS, as that's its function. If you want to use the session cookie over both HTTP and HTTPS then you have to set the flag to false.
People always throw w3fools out at the mention of w3schools but never seem to mention alternatives. W3Fools provides alternatives for JS, HTML and CSS but *nothing for PHP*. If you say something is shit, provide a better option or else you are not helping. That being said, it has been quite a while since I looked for a "learning PHP", I know that [Safari Books](http://my.safaribooksonline.com/) has a free trial which could give you access to several nice resources. I have also heard good things about [Learning PHP, MySQL, and JavaScript: A Step-By-Step Guide to Creating Dynamic Websites](http://www.amazon.ca/Learning-MySQL-JavaScript-Step---Step/dp/0596157134/ref=sr_1_1?ie=UTF8&amp;qid=1307566692&amp;sr=8-1).
&gt; If you want to use the session cookie over both HTTP and HTTPS then you have to set the flag to false. But if the requirement is that the flag MUST be secure for that cookie when on an https page, how would you address that requirement? 
&gt;But if the requirement is that the flag MUST be secure for that cookie when on an https page, how would you address that requirement? I believe you've misunderstood its purpose. The flag tells the browser that the cookie should only be used on HTTPS (The "S" in HTTPS stands for "secure", meaning it is encrypted) connections. Setting it to false will make it work on both unencrypted (HTTP) and encrypted (HTTPS) connections. http://en.wikipedia.org/wiki/HTTP_cookie#Secure_and_HttpOnly
It's not very honest for you to reply to me directly, then when I reply back, to claim I'm following you around, mass spamming you. It's especially funny that you'd say that to a sock puppet account whose entire purpose is that. Take a look through his account history. That's literally all he does, is mass spam me everywhere I go. He doesn't even talk to anyone unless it's me or someone I'm talking to. Be less gulliable. The behavior he just called standard behavior for a troll is literlaly the only thing he does. And you're falling for it.
&gt; I don't even know where he got the idea that I claimed that bcrypt was blowfish Amusingly, I actually pointed out the exact opposite. Indeed, my entire point was that you couldn't possibly believe this. Pity your reading skills aren't better. Here's the requisite quote: &gt; &gt; 2d) You seem to think that blowfish is something different than crypt() with blowfish. This is bizarre and hilarious. All crypt does is invoke various different algorithms. This is like trying to distinguish between sort() and the insertion sort it uses. And, before you tell me I'm wrong here, the alternative is that crypt with blowfish is the same thing as blowfish (which it is,) and that therefore bcrypt, which you claim is just crypt with blowfish, is in fact blowfish. Therefore, bcrypt, by your claims, is blowfish, if you don't think crypt() with blowfish is the same as blowfish itself. Of course, you couldn't be bothered to respond directly, and when it came time to complain to a third party, having exhausted your possibility of civil conversation, you claimed my position was the exact opposite of what it actually was. Now stop engaging the spammer. 
&lt;`?="nothing to do with PHP";? `&gt; EDIT: Wow, nobody else notice the format of the "question"? If those are real requirements, then I guess I'm not a programmer. I'll go out on a limb here and predict that [we](http://stackoverflow.com/questions/6283200/another-complex-mysql-query-involving-combinations)'ll see a different, yet increasingly complex [of course], question every week for the next 4-8 weeks, and then they will abruptly stop! I'm with [#mysql](http://www.reddit.com/r/PHP/comments/hoj85/complex_mysql_query_4_table_join/c1x20pl) on this one: &gt; We asked on #mysql, but they wouldn't help because they became incredulous to the idea of it not being a 'homework problem'. I'm all for helping someone learn, but simply doing their work for them is of no help at all. Don't get mad when your company hires a new developer (in 5-9 weeks) that claims to know SQL but requires a few days to "think about it" before he can produce results...
Oh ya it can be done. It can even hold cookies and it does POST requests. You can pull the whole page over, scrape what you need, then output it as long as Javascript isn't being used to populate content. If it is call the AJAX URL directly through CURL.
One of the requirements on a site that I am working on is that any cookies sent by the server to the browser during an https connection MUST have the secure flag set to true. In this instance, the session id cookie is required to have the secure flag set to true, which will override the previous cookie once the https request is completed. If the user then visits a non-secure page, the session will be lost because the browser will no longer send that cookie back to the server to establish the session and a new session would have to be created. I can simply just have the server NOT send the session id cookie for all https connections and it would satisfy the requirement since technically no cookies are being sent. The browser would continue to send the cookie over to the server since it'll never have the secure-flag set, however the session expiration would never get updated.
Thanks guys for all the information! I'm trying to sift through it all. :)
&gt;One of the requirements on a site that I am working on is that any cookies sent by the server to the browser during an https connection MUST have the secure flag set to true. So, this is homework? &gt;I can simply just have the server NOT send the session id cookie for all https connections Correction, have the server NOT send the session ID cookie for all *HTTP* connections. &gt;The browser would continue to send the cookie over to the server since it'll never have the secure-flag set Given your requirements, this is the *only* solution. &gt;however the session expiration would never get updated. Well, the session cookie will be deleted after the browser session ends anyway. If you want it to keep living after that, then you would need to overwrite the cookie. 
Exactly right, what I would have said. Remember how annoying it was when PHP had magic quotes enabled, escaping input truly creates more problems than it solves.
So this is default functionality in curl? Will it change action and href attributes automatically? 
Sure (if you don't mind Europeans and have a good idea)!
Cookie jars (so you also get sessions) and POST requests are built in CURL functionality. Think of it as the request side of a web browser, you handle parsing/display. You'll have to change action and hrefs yourself, but this is easy enough if you're decent at string parsing. It will set its referring ID as the last URL it connected to so it gets past any referring sites checks. Look up CURL cookie jars and CURL POST requests. There's a lot of tutorials out there.
It's funny how many people forget that PEAR has most of those problems already solved. http://pear.php.net/package/Image_Color2/docs/0.1.5/li_Image_Color2.html
They are deprecated in favor of MySQLi because of parameter binding, not in favor of a third-party library.
What is the reason/source for this requirement? If the session must work on both secure and insecure connections, the only way to do that is to not set the secure flag.
All JOINs are INNER JOINs (unless specified otherwise), so it's redundant to use.
I'm not surprised, but I'll do just about anything to avoid using PEAR libraries. Also my class is a unified data type, there's no need to instantiate different classes depending on the color space.
I'm in Argentina but I'd be down for something like that though I couldn't commit full time to it
&gt; So, this is homework? I wish. I'd be done already if it was. 
Politics mainly. But in all seriousness, a mcafee scan on one of the secure pages throws up an warning "Potential Sensitive Persistent Cookie Sent Over a Non-Encrypted (SSL) Channel" and the site's owner wants that corrected.
Ok - but the session cookie doesn't need to be SSL-only. It's complaining that the information *on the page* is sensitive.
&gt;But in all seriousness, a mcafee scan on one of the secure pages throws up an warning "Potential Sensitive Persistent Cookie Sent Over a Non-Encrypted (SSL) Channel" and the site's owner wants that corrected. Well, that's just silly that McAfee reports that as a problem. Assuming that McAfee checks for a cookie named "PHPSESSID", you have two options: 1. Run all traffic under HTTPS. This will double the bandwidth. 2. Rename the cookie using [session_name()](http://www.php.net/manual/en/function.session-name.php), thereby tricking McAfee. The session ID would be sent over an unencrypted connection, making it vulnerable to packet sniffing. However, the chances of that actually happening is rather slim. 
Seems to be a lot of unreasonable expectations on that site.
I program in PHP. Also, I'm always down to start some fun crazy personal projects, but lack the design skills. Don't hesitate to contact me, I'll be on vacation soon so I'll take that opportunity to start learning ruby on rails and working on some personal projects. Aslo, I'm nowhere near NYC; I'm in France, but I have a fucked up sleep schedule. If a lot of people are interested, you should create an IRC room!
That site is hit and miss. I put up an ad saying I'm looking for someone to collaborate on open source projects with no money-making involved, and I got spammed by a bunch of people sending me form letters telling me their rates. I still met a few neat people to collaborate with, so it's worth a shot if you're willing to sort through the spam.
I can build one *hellova* hello world app! :p
PDO isn't third party. It's baked into the core.
The only way is to not use the built in sessoins and manually set two cookies, one for http and one for https and link those to a backend system that saves the data... like mysql, sqlite, or memcached. However, that kind of defeats the whole point of making the session secure... 
I never said that PDO was what it was deprecated for, just to use PDO because it's awesome.
Ah, then I misinterpreted your intent, and I apologize.
[builditwith.me](http://builditwith.me) is a similar site, maybe a little more app-orientated.
It's funny how many people use PEAR, even though it sucks balls.
The author's intent is clearer, and some backends require it (though not MySQL.)
You should really look at [gettext](http://ca.php.net/manual/en/function.gettext.php) instead of rolling your own.
That's not actually going to work. Consider the case that you have two connector requirements: a 1 and a 2. Consider also that you have a single 3, which may operate as a 1 or as a 2. Because a 3 may act as a 1 or a 2, and because you have enough 3s for any single replacement, your query will report that all constraints are satisfied. However, you actually need two 3s, and you don't have them.
That's not actually going to work. Consider the case that you have two connector requirements: a 1 and a 2. Consider also that you have a single 3, which may operate as a 1 or as a 2. Because a 3 may act as a 1 or a 2, and because you have enough 3s for any single replacement, your query will report that all constraints are satisfied. However, you actually need two 3s, and you don't have them.
Next time, take SQL questions to /r/sql, or if they're backend-specific, to the appropriate backend. There is a subtle problem here which the two answers posted here so far do not account for. Consider the case that you have two connector requirements: a 1 and a 2. Consider also that you have a single 3, which may operate as a 1 or as a 2. Because a 3 may act as a 1 or a 2, and because you have enough 3s for any single replacement, most naive approaches will report that all constraints are satisfied. However, you actually need two 3s, and you don't have them. (Yes, I pasted that to each of them, too: I want them to see it, because maybe they'll beat me to a correct query.) I'm working on a query now. If I succeed, I'll reply again. Incidentally, part of the reason that this is so hard is that the data representation is undesirable. A much more desirable representation would be to number the interfaces, then map part numbers to interface numbers. Not only are the resulting queries simpler, but they're quite a bit faster (which only matters at scale, but still.)
It is a completely untested starting point. Given the vague nature of the question and the fact that it is a 'simplified' example, I'm not gonna do his homework for him...
S'cool.
I think this is actually probably more like his day job as a PHP programmer being faced with an actually kind of difficult SQL question, so I'm gonna take pity. But, I understand your position.
I'm in NY looking for a designer, PM me
PEAR sucks, sorry. :( 
Do you have a tutorial for learning... what this means? Haha. Just getting started with MySQL (a few really simple databases so far).
I've been looking for someone exactly like you. I'm good with HTML, CSS but find it incredible boring. I'm not too bad at PHP, so hit me up with a message. I'm not in NYC though :\
You may be able to arrange a barter. Programmers always need designers capable of creating high quality layouts. I think it would take at least 2 layouts (collaborating on the full design process) for me to consider the trade worthwhile (collaborating on your full development process). This may sound unreasonable but development is often much more complex than designing. I'd say around 30% of my full development process rests on the designer I work with. You guys are in-disposable. :) In this way, I'd imagine that you both own your own projects. The barter is just a way of payment for services rendered. Sharing and co-owning something is a bit more fun sometimes, though!
Hey, thanks for the help StoneCypher! You are correct about the subtle edge case here, and is proving very difficult to work out. It's almost like the query would need to keep a state of which connectors it has used. Could you explain a little bit more on what a more desirable data representation would look like? Thanks again, I really appreciate it =)
...and from the rest of us, use as much as you can and learn as much as you can about BOTH... and the best way is to USE both so you learn them both, as well as how they work with each other. I understand what GAMEchief is getting at, but downvotes for his insistence on this methodology of doing one then the other. You can handle both. Mistakes will be made EITHER way by a beginner, but your learning curve will straighten faster paying attention to both technologies.
As the other developer working with fatalentity, I can't help but reply. I think it's hilarious that the default position when answering a question is to assume it's related to school work. If you are unable to answer the question or simply don't want to help out.. That's perfectly fine! But there is absolutely no reason to make such an unfair (and almost insulting) assumption. We've asked for help twice due to the complexity of the problem and the time restraint involved to solve it. If taking five minutes to post on either Reddit or Stackoverflow can free up hours of our time.. What's wrong with asking? We may get enough input to at least get the light bulb to switch on in our head.. Or we may get nothing. Worst case scenario is we dedicate more time come up with a solution ourselves.
You must really take me for a fool, huh? &gt; I think it's hilarious that the default position when answering a question is to assume it's related to school work. &gt; But there is absolutely no reason to make such an unfair (and almost insulting) assumption. Obvious omission of proclamation of innocence. Tried to deflect attention from the subject at hand by attempting to discredit me and argue points other than the actual question of whether or not this is homework. So, answer the fucking question: are these questions in any way related to school work? p.s. &gt; (and almost insulting) assumption Of course. It would only be insulting if it wasn't actually homework.
&gt; So, answer the **fucking** question: are these questions in any way related to school work? There's *really* no need to be so rude. Relax. It's not homework.
Thanks a lot.
I wrote one on reddit a while back, I'll try to find it. Edit: http://www.reddit.com/r/PHP/comments/fdhpw/quick_pdo_tutorial/
That is impressive code. How long did it take you to do?
I've done work with the cPanel API's, they are fairly simple and documented. As far as automating this though. I don't know if AD has any kind of onpassword change run this script functions. So I don't know how you automatically push the new password out to the cPanel server when a user changes their password from a workstation. http://docs.cpanel.net/twiki/bin/view/ApiDocs/Api2/ApiPasswd
Not that long, a few hours. The hard part was figuring out how to convert RGB to XYZ and Lab color.
I work for a company that does AD automation called [Tools4Ever](http://www.tools4ever.com). I normally wouldn't plug the work I do to try to keep my web life and work life separate, but your question is precisely what I do every day. There's a piece of software called UMRA which is a system that can be scripted to modify databases, LDAP systems, Exchange, Google, Live@Edu, SAP, and many other school-based systems. It has a connector called Password Synchronization Manager (PSM) which is a DLL that gets installed on the domain controllers. The DLL listens for any password reset request and sends the user and password information back to the UMRA server for synchronizing other systems. If you know the API calls to CPanel, or have the database stored procedure (or SQL code) for setting passwords, or have developed your own PHP or web system to do the job, then UMRA can initiate the call. PSM works for workstation password resets, Active Directory Users and Computers password resets, new user creations, and any other reset request to the domain controllers.
I can personally vouch for VlexoFree! Great quality, and up to date. Since I have been with, since December, there have been 4 periods of down time, 3 of with were under 15 minutes. All they ask for is a small link back as well.
Maybe you can build a utility where the user enters a password which is then sent out to AD and to cPanel. 
Thanks for the heads up. GAMEchief and wake6n9bake. I should have clarified that I have prior experience with VB, C+ and SQL regarding 'forms over databases' so I'll assure you, I'm not learning SQL while I stumble through PHP.
It's already kind of late, but I would go with [Phil Sturgeon's REST server](https://github.com/philsturgeon/codeigniter-restserver) It's laid on top of Codeigniter and it's really easy to setup and build up.
http://www.weekendhacker.net/ is something similar too (saw it on hacker news)
If you are developing a forum that you want to *use*, don't - just grab some free/paid for software and you will have a mostly secure and fully functional forum running up in minutes. However if you are developing a forum to learn PHP then go ahead :)
Modifying $_POST once sent out 3000 emails to the same name for me :/ Lesson learnt!
NP, and good luck. CURL is one of the more powerful features of PHP. Once you get the hang of it you can do all kinds of cool stuff.
Try to find one through [weekendhacker](http://www.weekendhacker.net/).
There's actually a second problem in there that I haven't solved yet, is why I haven't replied yet. A naive solver will catch the case [ {has, [1,3,3]}, {needs, [1,2,3]}, {substitute, [{3,for,2}]} ] A naive solver is likely to attempt to solve with the base item first, though, so the case [ {has, [1,3,4]}, {needs, [1,2,3]}, {substitute, [{1,for,2},{4,for,1}]} ] will actually generally not get caught, because the 1 was spent satisfying itself, when it could satisfy 2 and itself be satisfied by 4. This actually has to be mapped out with depth-first search in order to solve both problem cases, and that's classically a pain in the ass in SQL. First, you don't want to do this in a query. Depth first search is by its nature recursive, and whereas that's possible in a query, it's dog-slow. It's as fast as you'd expect, however, in a procedure. People tend to forget that you can write procedural code in SQL. Thing is, writing this recursively is taking a while. I'm about a quarter of the way through it.
What a waste of space.
&gt; You must really take me for a fool, huh? I do. This just doesn't smell like schoolwork to me. It's way too difficult, if you even slightly understand the problem. One needs to implement depth-first token search to get this right. &gt; Obvious omission of proclamation of innocence. Oh, shut up, already. We don't need another Reddit Vigilante Batman. &gt; So, answer the fucking question Please don't do this in proggit anymore. &gt; It would only be insulting if it wasn't actually homework. If you understood the question they were asking, you'd know perfectly well that it isn't. Schoolwork is things like two joins in the same query, not write recursive stored procedures to do presence-theoretical substitable parts explosions.
Don't worry. I have one of those morons hassling me, too. I won't be driven away by him. It's just, this takes time. This is not a simple query.
Guys, please stop downvoting the two people who tried to help but didn't get it right. Yes, they were wrong. They're also trying to help, and the mistake they made is very much not obvious. Proggit is turning into a punishment fetish. Cut it out. Downvote is for people who are not contributing. These guys are contributing, at the best level of their ability, and they're getting pretty close. PLEASE STOP UPVOTING THE PEOPLE WHO COME HERE WITH [NOTHING BUT COMPLAINING](http://www.reddit.com/r/PHP/comments/husl3/another_complex_mysql_query_question/c1ykuxg). THESE PEOPLE ARE NOT IMPROVING PROGGIT. I am working on a better solution. If someone can get there before me, let me save you some time by giving you the dataset in MySQL notation: drop table if exists connection_requirements; drop table if exists connector_quantities; drop table if exists connector_compatability; drop table if exists connectors; drop table if exists items; create table items(id integer primary key auto_increment); create table connectors(id integer primary key auto_increment); create table connector_compatability(connector_id integer, works_as integer, foreign key(connector_id) references connectors(id), foreign key(works_as) references connectors(id)); create table connector_quantities(connector_id integer, quantity integer, foreign key(connector_id) references connectors(id)); create table connection_requirements(item_id integer, connector_id integer, quantity integer, foreign key(item_id) references items(id), foreign key(connector_id) references connectors(id)); insert into items() values(); insert into connectors() values(),(),(),(),(),(),(),(); insert into connection_requirements(item_id, connector_id, quantity) values(1,4,1),(1,5,1),(1,2,2); insert into connector_compatability(connector_id, works_as) values(6,4),(6,5); insert into connector_quantities(connector_id,quantity) values(1,1),(2,3),(3,2),(4,1),(5,0),(6,4),(7,0),(8,5); 
Any reason this was downvoted? Is there someone who just really hates PHP and downvotes everything?
i'm busy working on a survey website that is heavily based on limesurvey. check out [openpanels](http://www.openpanels.net) The main reason for creating openpanels is because limesurvey is clunky. We're ripped it apart and are busy trying to make it muuuuch more user friendly.
If it's through Active Directory, you can use GPOs to set scripts to be called. Those scripts can call the PHP pages needed.
Noob here, what's wrong with PEAR?
Its probably because you're using regexp to parse HTML. Try using DOMDocument and xPath, it makes things much simpler and more readable. http://php.net/manual/en/class.domxpath.php
It looks like I would be running more code than necessary to look up what is inside a td using DOMDocument. I might look into that if I can't get the regex working though. EDIT: The script is for a tool to update sideA on multiple pages that were user created, so I don't want anything being invalidated/lost that the user changed simply because it isn't valid markup. 
Don't know how a non compete makes you not able to charge as a contractor on the side. If you signed a non compete that has that clause in it, the you screwed up. I could see the non compete being effective if the project was being in the same vertical but if not, you are free to do as you please.
You're hired! : )
This is awesome. Thanks!
Hmm, It's pretty standard for a web development company to have employees sign a NCA. I'm a full time employee, not a contractor, he has to protect himself, and if it wasn't there I could just as easily pull customers on the side and say "I'll do this for 50/hr rather than the rate he charges." NCA's are pretty standard in a lot of jobs, not just web development. My wife is a Physical Therapist and all of the jobs she has had made her sign one. 
I've never created my own site and that's definitely an exciting aspect of it. Also, I totally agree that development is more complex - that's why I'd offer to do the website design, seo and marketing, any print materials if needed, accounting if it generates income, etc. I've also been learning PHP for about a year and have a decent handle on it and I write clean code and follow every standard imaginable... so I hope that I'd be pretty easy to work with. Hopefully those things would even out the work load, but I don't really know as I've never done a full-scale project before.
This subreddit does say: News that relates to PHP, along with tutorials. Having problems? Check out r/phphelp
You're right. There are a lot of aspects to development that a designer can do well at, besides writing code.
Ahh, makes sense then. I guess I still remember the sub existing for both. I shall delete the thread.
A lot of people still ask for help in /r/php/, and receive it - maybe your question was just too hard? The advice you got about parsing HTML was good, you could probably even solve your problem with strpos, substr etc. too. 
I could do... preg_match_all('|&lt;td class="sideA"(.*?)&lt;td class="sideB"|msU',$campaign['html'],$matches); $script = substr($matches[0][0],0,-17); ...but that is kind of ugly. I just wanted a nice, clean and simple fix and thought I might as well learn something in case I need a similar regular expression in the future. I just am shying away from the DOM way because I am not sure how valid some of the html code might be in the future. This is basically going to be used to update a script on sideA for multiple pages that were not created by me. EDIT: It would actually be just preg_match, I kept all because I wanted to see what the options it threw back from the regex that is not working would be, but the point is still there.
-5 score: BOOM ROASTED!
&gt;Now stop engaging the spammer. He can do whatever he likes! Awwww is the wittle baby gonna cwy coz he's getting called out? AWWWW
The xml-api's passwd ( http://docs.cpanel.net/twiki/bin/view/SoftwareDevelopmentKit/ChangePassword ) is what you want. Since you're writing in PHP, some of the code on https://github.com/CpanelInc may be of use to you, specifically public-api php or the more simple xmlapi-php. You can also hook into cPanel's password change mechanisms to send the password back when it's changed in cPanel: http://docs.cpanel.net/twiki/bin/view/AllDocumentation/UniversalPasswordTrap Or you could disable a user's ability to change their apssword in cPanel by disabling the feature in cpanel (WHM -&gt; Feature Manager -&gt; edit the "default" list and select it) There's also a crapload of other interesting things you can do.. In 11.34 cPanel plans on implementing a "pluggable auth" implementation that allows authentication to be plugged into with custom code, so at that point a proper LDAP implementation should be possible.
I love PEAR, and PEAR2 is shaping up to be an even better. Its no CPAN but for PHP it works great. Combine that w/ PECL and you have access to ALOT of really helpful code.
The quality of the code is poor and as far as I know it's not even maintained anymore. That and the fact that many of the PEAR libraries depend on many other PEAR libraries.
Oh no, someone who admits to having multiple accounts and who constantly vote manipulates sees a low number. Whatever shall I do? Oh, wait, I forgot: I don't derive a sense of self worth from karma on Reddit; you're just wasting your time. *applause*
The hard thing is that you just don't have to keep a status of compatible connectors, you need to keep a status of all connectors. Because not only do you have the edge case that StoneCypher pointed out, but also one in where the board may require two connectors that are compatible with each other. So the solution ends up where you need to track inventory on every potential connector that could be used. I would consider writing a class to grab and validate this information. It might be more work/code, but if you are on a tight timeline and can't afford to spend more time looking for a sql answer, then do it with php.
A rather large project I'm working on (I didn't design it, merely maintaining it) depends on PEAR's DB library... is this a bad thing? :S
[TJ Dick and I have interpreted your text quite differently](http://www.reddit.com/r/PHP/comments/husl3/another_complex_mysql_query_question/c1yqyy7). We need a clarification from you before we know whether a result is correct. We don't know if these are endpoints or adapters. Under your current model, there is no representation available for chained connectors, because you only describe one end-point. That is. Say you have a 6/8 power supply, and an 8-cable that has a european 8 on the other side, then a downstepper from euro8 to euro6, and the *other* end of the connection, which is currently unspecified, can take that chain. There is no data model here that supports that. Your original question does not support that. TJ Dick wants to know whether chaining makes sense for you; so do I. Depth-first search will work for either case; I just need to know whether to permit that sort of thing, and if so, we need to alter the data model to describe both ends of a connection, rather than just one. My gut feeling is that the job does not in fact permit this sort of thing, but it is very much a thing to be verified.
Oh, that's an interesting point - something I hadn't even begun to consider. I'll ask original poster [in a direct reply](http://www.reddit.com/r/PHP/comments/husl3/another_complex_mysql_query_question/c1yr61n).
Every time I go through Magento's code, my eyes bleed.
Not necessarily, but it's a bit outdated. There are other great DB libraries out there that are actively maintained and supported, such as Doctrine and Zend_Db.
I'd rather not change code if I don't have to. The project is enough of a mess as it is :P
&gt;Oh, wait, I forgot: I don't derive a sense of self worth from karma on Reddit; you're just wasting your time. [Lying sack of shit!](http://www.reddit.com/r/PHP/comments/g32qn/prepared_statements_binding_arrays/c1ktm1a) &gt;Oh, well if a stranger whose **total karma is almost half that of my this week's high point** and has named himself after a founding father who would never criticise someone for being argumentative, and thus has probably never actually read any of his work, says I'd do well to tone it down? BOOM ROASTED!
I'd say my other concern was pretty basic. Say company that makes boards buys parts in bulk, at the best rate at time of purchase. So, the board has both 6s and 8s, even though 8 is compatible with 6. Now I don't know how likely that would be, but I would imagine it is definitely possible. The only way I see around this is to keep track of inventory of all connectors. When you get a connector that matches, you deduct it from its inventory, then move on to the next match. So the main difference is instead of using one big query to sort it all out, you use several queries that you dump into arrays 1. connectors required 1a. loop through and get compatibles 2. connector quantities Now you can loop through the connectors required and match against inventory. As you move inventory into the product, update your inventory array with the new value. I'm sure there are ways to streamline on that, but that gets OP the functionality desired, and an easier way to add some more wrinkles if there are more needs in the future.
Every time I go through OS Commerce's code, my eyes bleed.
That's because it's Zend Framework, which is also why it's natively slow.
I still can't believe that Magento has almost 300 employees and got acquired by Ebay. I made 3 shops with it and each time it was worse with the newer version. Granted it was the free Community Edition but still.
Cables are not chained. Your original interpretation of the problem is correct. To be quite honest, from my understanding of the MySQL query language, what we are trying to accomplish here seems infeasible though pure SQL. We have moved on for now and have left this problem as a // TODO for a little bit later in the project. However solving the problem through PHP is beginning to seem quite appealing. Thanks again for all the help! You and TJ both.
Wow thanks for your help i just think it'll take time to go through everything cpanel can do.. do you know a time frame for the 11.34? isn't that going to have ipv6 support also?
Do you know what GPO it would be?
I believe 11.36 is supposed to be the ipv6 release. 11.34 is supposed to be aug-sept. also, if you need further help/have further questions: http://forums.cpanel.net/developer-discussions.html
If it works for your existing project and doesn't have any annoying bugs, there's no need to change. PEAR as a whole may be overflowing with bad and outdated code, but it also contains some libraries that are quite good. I haven't used PEAR DB so I don't know what it's like, but if it ain't broken, don't fix it. I would still avoid using old PEAR libraries in new projects, though.
Clearly contributing.
Can't say. I certainly wouldn't add any more though.
Not sure about regex, but you can do: $a = explode(' ',"apple banana lemon"); $b = explode(' ',"banana lemon apple"); $c = array_diff($a,$b); if(empty($c)) { //array has same words but ordered differently } else { print_r($c); //spits out the words that aren't present in both strings }
&gt; I do. This just doesn't smell like schoolwork to me. So are you professing to be more adept at MySQL than the sum knowledge of #mysql? Sounds like it. They think it's homework. I thought it was homework before I even saw their judgement. &gt; It's way too difficult, if you even slightly understand the problem. Yeah, sorry, what was I thinking? A professor would _never_ assign challenging work, not even for a group project. I realize the err in my ways now, thanks to you. You're such a superstar! &gt; Oh, shut up, already. No thanks. &gt; We don't need another Reddit Vigilante Batman. Are you a student too? If you had ever worked at a grown-up job, you'd know [the problem that I'm trying to prevent](http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html). I really should give it up though, because you're just another _Reddit Whitehat Hero™_ and, well, some you just can't reach. &gt; If you gave a fuck about the question they were asking, you'd know perfectly well that it isn't. FTFY. 
That's not really the purpose of regex. Regex is for matching a string against a predefined pattern, not compare two strings against each-other in the manner you are describing. If you want to check if the two strings are identical, but jumbled, then maybe do something like this: $string1 = "apple banana lemon"; $string2 = "banana lemon apple"; $array1 = explode(" ", $string1); $array2 = explode(" ", $string2); $diff = array_diff($array1, $array2); $identical = empty($diff); Edit: owwmyeyes beat me to it.
Dammit, you came up with the same solution as I did. Have an upvote. 
yes i've tried that and it works but i have to compare 4000 values in an xml against 3500 values in a csv files so looping over each and exploding isn't really practical. Maybe there's an easier way with regex?
This isn't something for RegEx, unless you just want to make sure it contains the same words, not considering repeats ("apple apple lemon" would match also).
thanks for the help. actually thought of the same solution as you guys did but i have to match 4k vs 3.5k records. looping through each and exploding just to array_diff seems not practical. so there's no other more efficient way?
&gt; &gt; I do. This just doesn't smell like schoolwork to me. &gt; So are you professing to be more adept at MySQL than the sum knowledge of #mysql? What? No. I didn't say anything even remotely similar to that. I just said I don't agree with you, personally, that this seems like homework. Nobody said anything about the skill level of an IRC channel. &gt; They think it's homework. I thought it was homework before I even saw their judgement. That's nice. &gt; &gt; It's way too difficult, if you even slightly understand the problem. &gt; Yeah, sorry, what was I thinking? A professor would never assign challenging work Not of this kind, no. Most of the difficulty is mechanical, and there's nothing to learn here; students would be much better served by a parts explosion. Professors don't make work difficult for the sake of making it difficult. &gt; &gt; We don't need another Reddit Vigilante Batman. &gt; Are you a student too? No, but that you think I am just makes clearer that you have no idea how to judge who someone is by the talking they're doing. Lemme guess: everyone who tells you you've failed to understand the problem correctly, they're a student too, right? &gt; If you had ever worked at a grown-up job Ah, random personal attacks based on guesswork. The problem with people who do this is that when they're wrong, like they nearly always are, if someone sets them straight, they just go "eh, I see through you, you're lying." You get stuck in a confirmation bias loop: every time you want to look down on someone, no matter what they say, you interpret it as more proof that you're correct. That's nice, dear. (headpat) &gt; http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html Yes, yes, it's very cute to point to someone else's article about bad code, and pretend everyone you're angry at is who's being talked to, but in the balance, the problem here, sir, is that you can't actually solve this problem. I know, I know, you'll just posture that I'm trying to trick you into solving it for me; I don't actually want you do, as my asking you to go away shows. You're just some poser talking fog. But for your own edification, why don't you see if you can do this in private? Don't just tell yourself you can: this problem is quite a bit more difficult than it appears (you appear not to have even noticed that there are several dangerous ambiguities in the problem statement, underscoring that you do not in fact understand the problem.) And when you're done lying and pretending you've solved it, I'll provide you a dataset that's too large to solve by hand, and ask you to solve it. Because after all, that'll leave you in a position to hem and haw and make a bunch of excuses about how you don't have to prove yourself to me. And that's correct: of course you don't. In fact you shouldn't: I wouldn't even care if you were as competent as you think you are, which you might in fact be. But here's the rub. For all your hollering, if you were wrong, the way you're behaving right now, you would have no opportunity to discover that. So, you seem to think this is very easy. Why don't you go ahead and try to get the job done, mister "if you had ever worked at a grown-up job?" Because unlike you, I have life-critical code in circulation in the military, I helped build several of the languages you use, and I distribute source to the public which actually gets used. I don't really care if you think I'm a jobless college kid, because I know perfectly well who I actually am. :) &gt; I really should give it up though Please do. &gt; FTFY. Just another thing you failed to understand, Cheech. Are you in here for catharsis? Did you think anyone listens to you when you behave that way? I mean, shit, man, even if you *were* right, nobody would be listening to you. The easiest way to prove me wrong is to build this, and get the correct solution for a dataset. And when you think you've built it, because you built something that works on the single test case you tried, and you didn't think to try it on any tricky ones, and it fails on the test dataset you get, you're gonna get laughed at. Let's see some of your code, champ, if you think you're so awesome. No? Didn't think so.
&gt;Maybe there's an easier way with regex? No. Regex doesn't compare strings in the manner you are describing. Regex is used to match a string against a given pattern. You could construct a pattern from one of the files to match against the other, but that would not only be wasteful, but also completely pointless seeing as you'd still have to loop through and explode the values anyway to build the pattern. Regex simply isn't the right tool for this. 
They're thanking me, and not you, champ.
cool. thanks for the input
Look, I realize you're not very smart, but making fun of you for something that matters to you doesn't mean it matters to me.
lol u mad And I never professed to understand the problem, nor do I care to. **This is /r/PHP**. Feel free to ask me a PHP question.
OP replied. Connectors are not chainable. Also, that method suffers the older problem I pointed out: if you have an item that needs a 1 and a 2, and you have a single 3, which may act as a 1 or a 2, that method will provide a false positive, because both the 1 and the 2 are satisfiable, and that method can't keep track of split-usage stock.
Well, it kind of depends on how your XML is structured, but as for the CSV, you could read the data using the [fgetcsv](http://se.php.net/manual/en/function.fgetcsv.php) function to produce the array.
Have you considered parsing and loading the values into a database. You could quite easily do some comparisons using SQL once you'd done that. 
Solving the problem in PHP will cease to be appealing as soon as you realize you're talking about shipping the entire dataset over the wire then processing it. That'll bring the DB and the webserver both to their knees for non-trivial (few thousand rows) datasets.
&gt; lol u mad Translation: "I know I'm wrong, but I can't admit it." &gt; And I never professed to understand the problem, nor do I care to. When you tell someone else they're wrong, that's you professing to understand the thing you're arguing about. Otherwise, you're being an argumentative clown about things you don't even understand. &gt; Feel free to ask me a PHP question. I don't need help from the likes of you, kid. Why would I bother to ask a PHP question? You think I'm a college student. I helped write this fucking language; I don't need jack from you. You couldn't cope with the questions I'd ask.
There's surprisingly little information about the source from which you intend to generate the data from. Are the values in a database? How do the tables look like? As for the CSV, it's just a file with comma-separated values. You could produce the content directly in PHP and just echo it out. There's no need to output the data to a file. Just set a few headers so that the client knows that it should treat the content as a file download. Something like this: header('Content-type: application/octet-stream'); header('Content-Disposition: attachment; filename="my-data.csv"'); //output data here 
If you're so much better and smarter than me, why are you devoting so much time to this [now] pointless discussion? I said all I wanted to before you even showed up, but I've thoroughly enjoyed trolling you. I bet you can't help but respond to this, too.
Yes, the values are in a database. What would help to know about the tables? And thanks for that code snippet, that's exactly what I was looking for. To use it, I would just run the query, put the headers in the page, and then echo the values out in CSV format? I'm working on a database system for an organization that's used to dealing with Excel files. For their sake, I want them to be able to access the results of whatever query in a spreadsheet.
This is overly complex for the situation, and has faults in multi-server environments. Anything you write to disk only exists on the server that wrote it (unless you're using a networked filesystem, which can have other issues).
&gt;Yes, the values are in a database. What would help to know about the tables? Just the structure if you wanted a more complete example on how to do this. &gt;To use it, I would just run the query, put the headers in the page, and then echo the values out in CSV format? Yep, that's exactly right. The headers need to be the very first thing sent by the server, so make sure that you do not have any whitespace before it.
You don´t need to save the file at all for this. If you do the following, the user should get a save as-dialog with your CSV data without you needing to save it. &lt;?php header('Content-Disposition: attachment; filename="foo.csv"'); header("Content-Type: text/csv"); /* query mysql into variable $result */ $result = 'your query code here'; /* Construct csv from result. */ while ($l = mysql_fetch_array($result)) { for ($i = 0; $i &lt; $columns; $i++) { $out .='"'.$l["$i"].'",'; } $out .="\n"; } echo $csv_data_from_your_query; ?&gt; what this does is querying your sql server, constructing a csv (in memory) from the result, sending headers so the users browser thinks its getting served a static csv file, and echoing out the file. in case your the headers aren't working, try this for content instead: header("Content-type: application/octet-stream");
Why isn't it practical? How long does it take to do the comparison using PHP with 4000 values in each list? If you can provide a SORTED list before running the array_diff, it will run faster, ie, sort($a); sort($b); $c = array_diff($a,$b); 
As you've commented against other solutions you may really want to consider using a temp table in a database to load in either both files or one of them. Then use the DB engine to sift through the data for you.
&gt; but I've thoroughly enjoyed trolling you Seems to be all you've got in you. &gt; I bet you can't help but respond to this, too. Oh, how very meta. Never seen that before. "I'm going to spew a bunch of meaningless crap to avoid admitting I was wrong, then dare you not to respond." You must be a general, you tactical genius.
This problem is exponentially easier to solve if php is involved. 1) Select all connector_ids that don't have the proper quantities. 2) Get the list of all substitutable items and their quantities based on #1. In the example case, I1 has 0, I2 has 0, and I3 has 1. The total qty. for that group is 1. Generate a hash for that group (lets call it hash_id1) and add it to an array. The hash array now has hash_id1 =&gt; 1 for this group of items. 3) Since the hash exists for each group, you know what connector_id belongs to each group, so generate another hash table, this time with connector_id being the index and the hash_id being the value. The array in #3 would contain all the connector_id's that require a substitute who's values contain the hash that point to the group of connectors with the total quantities. Now it's just a matter of looping through array in ## and doing some math.
Sorry, I thought it was a GPO script, but I think it might have been this: http://technet.microsoft.com/en-us/library/cc727636(WS.10).aspx I could have sworn we had a server setup at my University that didn't use Samba for LDAP so we used a script for it. However I can't remember, it's been too long. I went back through a Windows server I have and I couldn't find it.
Upvoted for don't-bother-with-disk. A slightly more clever, arguably cleaner way: //grab some data $result = query($sql); //send appropriate headers header('Content-Disposition: attachment; filename="foo.csv"'); header("Content-Type: text/csv"); //get a handle on the output stream $out = fopen('php://output','w'); //use handy [fputcsv()](http://php.net/manual/en/function.fputcsv.php) to make sure everything gets quoted/escaped properly while($row = fetch_assoc($result)){ fputcsv($out,$row); } EDIT: query() and fetch_assoc() aren't real functions, imagine they have a sane implementation that uses PDO instead of mysql_* functions.
Might want to use a low level diff tool 
Build an index. &lt;?php $opt1 = "apple banana cherry"; $opt2 = "banana cherry apple"; $words1 = explode(" ", $opt1); $words2 = explode(" ", $opt2); $index = array(); foreach($words1 as $word) { $index[$word] = true; } $result = true; foreach($words2 as $word) { if(!isset($index[$word])) { $result = false; break; } } echo $result; 
Split your words into an array. Then: $array_check = array_fill_keys($array1, true); foreach($array2 as $val) { if(!isset($array_check[$val]) return false; } Not sure what output you want - do you just want a true/false answer (per the code above), or a list of matching words? The array_filter() array_map() and array_reduce() functions may help you as well. (I made the array into keys instead of checking the value so that it would be indexed.)
Use array_fill_keys() instead of doing it manually.
That doesn't work for duplicate keywords. What you need to do is increment a counter instead of setting the value to true.
This is true. Right now we are more or less in the beginning stages of the back-end for our web application. So getting everything working right for now is better than spending any more time sitting around racking our brains trying to figure out the most optimized pure SQL solution. I have fallen into the trap many times of trying to prematurely optimize! And right now we don't even have the proper data set to test performance, so were not too worried just yet. Thanks again for all the time that you spent helping to work towards a solution to this. =)
this looks interesting. i'll give it a try thanks!
interesting. ill give it a try. appreciate the input
If you're expecting to differences most of the time then you can save yourself some time here - once there's one difference you don't need to keep checking. Something like $count=count($a) sort($a); sort($b); for($i=0; next($a)==next($b) &amp;&amp; $i&lt;$count; $i++){} return $i==$count; edit: got my for() syntax wrong :s 
hahaha, no. anytime you think you need to write the same line of code more than once depending on input, *you're doing it wrong*.
&gt; I helped write this fucking language; I don't need jack from you. You couldn't cope with the questions I'd ask. *puke*
Lots of awesome there! One of my favs: Short array Programmers are such a lazy folks and writing array() is really annoying. Here is an attempt to make this more handy. Example $arr = [1, 2, [5 =&gt; "foo", 3.14159], 9];
"Deleted short open tags and &lt;?php= is the new &lt;?=" No thanks. I like short tags, and I never use XML. The list of changes was more impressive than I expected, but I recommend you not program for this. It's pretty unlikely he will be able to continue maintaining it long term.
This is really awesome (and some stuff here should really be merged back into main), but it's pretty dangerous to fragment such a common piece of software. Soon enough we'll see scripts that are dependent on this fork and we will have a split community. Edit: Nevermind, my comment is FUD, it looks like most of this will be hopefully patched back in to PHP
Things I'd love to see implemented in the near future. * Ability to hint to methods/functions. To avoid stuff like: createimage(null,null,null,null,null,100,100); and allow: createimage([x:100,y:100]); * A String object. * A way to create short object $hello={'name':'robin','age':12,getWeight:someCallback}; echo $hello-&gt;name; 
Been using it for a month now, never looked back
About that last point, there is a way already, but it ain't very pretty: $hello = (object) array('name' =&gt; 'Robin', 'age' =&gt; 12, 'getWeight' =&gt; $someCallback); echo $hello-&gt;name;
Yes, unfortunately I doubt this will ever make it into PHP, the devs don't like it for some weird reason.
Why does everyone hate &lt;?= $foo ?&gt; ? Other than removing that, I liked the changes :)
The Enterprise edition has the same code as the community edition + some extra modules. So probably it's the same experience.
When you say "not practical", you do know that software is there to do all the long and laborious work for us? It may not be practical to sort 4000 index cards in a library by hand, but give that problem to a computer with a foreach loop, and it is easy peasy.
Don't underestimate the processing that is needed to parse the regex patterns, because it is a complex process. Sometimes exploding a string into an array can be a lot quicker, even if it feels more clumsy.
It can cause problems when handling XML.
How often are you creating pure XML in PHP - by hand! And XHTML is depreciated in favor of HTML5 so there is no reason to write that.
Great job! This is exactly what PHP needs. More improvements to the actual functionality of PHP. Like the developer of this fork, I don't care about OOP either. I hope these changes get merged into PHP 5.4.0. 
Completely agree. Short tags are the norm and they make for faster coding. By default, cPanel/CentOS5 shared hosting plans come with short tags enabled, and that isn't going to change any time soon. This fork coder must love extra typing -- I don't.
Perhaps the coder would have had more market support if he made this into a Shared Object that could be loaded into PHP as an extension, rather than forking the codebase.
The proposal was turned down a few years ago, but it's up for consideration again and a few of the developers who voted no last time have changed their minds. It may still happen. Here's a relevant item in the PHP mailing lists: http://markmail.org/message/fx3brcm4ekh645se
Really? That's awesome. I hope they go through with it.
XHTML has not been deprecated. XHTML5 is actually a part of HTML5.
Interestingly, PHP 5.4 is going in [the opposite direction](https://wiki.php.net/rfc/shortags) and making &lt;?= tags available regardless of the `short_open_tag` setting.
http://www.reddit.com/r/phphelp
This approach is, frankly, ridiculous, and suffers both the problems described in the two naive solution issues I discussed in SQL approaches. It also requires you to pack, ship and unpack the entire dataset every time, and introduces log(n) lookups all over the place in massive iteration. In short: dear god, no.
Oh lookie, you're dusting off your other sock puppets in the effort to look like multiple people again.
I actually thought the discussion on FOSS philosophy and licensing in the comments was more interesting than the fork itself. &gt;Looks good (and extensive) - lots of edits - but why not just patch and fix the main php code?. . &gt;Listen to the community; they're the lifeblood of this language. Over the last few years there has been an exodus to languages like Ruby, Python, and Node. Some interesting debates were brought up in the recent "5.4 moving forward" thread. . &gt;One of the great things of open source projects is that there are discussions. Discussions leading to consensus. Even an "I" project like python can't not exist without a lot of "we"s. . &gt;I'm not sure if you're aware of it, but you can actually not release a fork of PHP with the name "PHP". From the license (http://www.php.net/license/3_01.txt): &gt;Products derived from this software may not be called "PHP", nor may "PHP" appear in their name, without prior written permission from group@php.net. You may indicate that your software works in conjunction with PHP by saying "Foo for PHP" instead of calling it "PHP Foo" or "phpfoo" . &gt;But what amazed me a lot is that I can't find a post from you on bugs.php.net or internals, I think you miss a critical part of what makes OSS. *ninja edits for formatting multiple quotes separately.
That's actually very useful, thank you! It doesn't look much worse than the original either, so reading and future changes are easy.
By default, Debian and other environments come with short tags disabled. The only way to make sure your code is portable is to use the proper tags: &lt;?php
That wouldn't be possible given the nature of many of the changes. How are you going to make a shared object that deletes the disk and memory overhead for safe_mode support?
"make for faster coding"? By what, 3 keystrokes, so you're saving 20-30 seconds per day? Wow.
PHP 5.4 decouples &lt;?= from short tags, so &lt;?= is now always available. The setting itself will die one day.
Good initiative, but with the mentality in @internals, there is almost no chances of seeing any of this make it to trunk. I think this could be the base of the future of PHP, the language is not moving as it should, @internals guys are not very welcoming and very bitter. Only issue is like Derick mentioned, PHP cannot be used for a fork...
Some reason: It's a *language* construct. PHP devs stay away from language features. Everything must be function in global namespace!
XHTML2 was deprecated. XHTML1.1 is still an accepted standard. XML is often used as the data structure in RESTful applications.
I don't get it, why use this: echo strmap("This is {first} and {second}", ["first" =&gt; "X", "second" =&gt; "Y", "third" =&gt; "Z"]); Instead of printf?
That's the nature of open source. It happens all the time. When one project lacks direction or focus it's forked, a new community is built and they move forward. 
This is in the spirit of Mustache. I like it, printf syntax can be quite hard to read on long string with a lot of replacement to do. Much nicer to read something like: strmap("&lt;a href='{link}' alt='{alt_text}'&gt;{link_title}&lt;/a&gt;", .....) 
I see, so it's just a matter of taste.
[This thread](http://markmail.org/thread/xh445vwkovboefnu) is more current (and also long (and got off-topic)). The current situation is [another RFC](https://wiki.php.net/rfc/objectarrayliterals) is being considered either as a replacement or the two will co-exist. Regardless, something _will_ be implemented here. I have no doubt.
I would love to see this extended to support a smarty like syntax. strmap("&lt;a href='{link|validate:'url'}' alt='{alt_text|default:$link_title}'&gt;{link_title|ucwords}&lt;/a&gt;", .....) Then I can treat my string as a view descriptor and allow it to be used more like a template but still giving the designers a little control over what exactly to output.
Been using this one for a few years now. BTW, you can also switch it back to array: `$arr = (array) $hello; echo $arr['name'];` 
Big case of awesome. Thanks for letting us know.
I've been handling XML for years and haven't had an issue with it.
Well, not tackle those items, of course. But adding new functions -- that's what I'm talking about.
moan.
Short Objects would be awesome, we should just adopt json :)
PHP can't appear in the title, PHP can be forked. I've got my fingers crossed for HPH. \s
I don't think I've ever needed an object to array type change, but that is very useful. I love the flexibility of PHP's type assignments. That was one thing that got me hooked on it.
First one is called named parameters, and we all hope they introduce it one day (hopefully as good as python's implementation). Second one I sure hope not for the time being, frankly php's object handling is wayyy to slow for every string to be replaced by an object, that would be a performance disaster. Go do some basic testing of creating and deleting objects compared to strings and/or arrays and you will see how slow it is; given the number of temporary strings in every php code out there you just can't do that. But if they can find a way to make it happen and be fast though, I'm all for it (same for arrays and possibly with chaining too, $arr-&gt;slice(0, -42)-&gt;map($callback)-&gt;merge($arr2) is a lot more sexier than the current mess you get).
Object to array is great to take advantage of all the array handling functions sometimes
I think it's a problem for XML parsers that try to parse an XML file with &lt;?= in it. That must be a pretty rare occurrence, if you're throwing the XML through the PHP parser then the &lt;?= $boo ?&gt; gets stripped out and replaced with the contents of $boo. So the only problem is reading a PHP template that contains &lt;?= and raw XML in an XML viewer. Which seems daft anyway. An XML view that choked on a PHP template? Shock horror! Does it also choke on other random file types? Yes? I'm so shocked! Come one who cares? Anyone who is doing that has to be aware that weird stuff is going to happen.
Any reason you don't volunteer and contribute to an open-source project? Knowing those ropes is a bit scary sometimes, but the frank criticism and flow of ideas is great for any developer looking to sharpen their skills. Plus, there's tons of us already working on open source projects that need your help. ;)
Or use your brain and edit the php .ini file?
 $hello={'name':'robin','age':12,getWeight:someCallback}; echo $hello-&gt;name; Just curious - why? When would you use it?
TIL about php://output thanks :D 
Thank you for the updated links. I see you are one of the devs who has changed his vote to a +1! This is really excellent news.
I'm creating XML in PHP all the time. Even just RSS/Atom feeds. I also use it to construct Word and Excel documents. 
While this works a lot of the time, say you're writing the next big template engine, and you want to distribute it. Joe Bob is excited, puts it in his app, nothing works. You tell him to edit his php.ini file but he's not the brightest and he goes back to Smarty. Honestly it's not a concern most people will ever have to worry about, but for those that do short tags just aren't worth the headache at the moment
I thought the one thing that would make developers' lives more bearable would be fixing function names to one convention and fixing all functions' parameter order to one standard for $needle and $haystack.
I've never thought about it. &gt;Knowing those ropes is a bit scary sometimes, but the frank criticism and flow of ideas is great for any developer looking to sharpen their skills. The more I learn, the more I realize how little I really know. I have some sort of fear that I'm not good enough. On an open-source project, I'd feel like a amateur noob amongst geniuses. It's kind of terrifying. I guess I'm scared of failure. I guess I gotta break out of my shell eventually though. I'd be willing to give it a try though if you could point me in the right direction.
+1 for named parameters a la Python. People are sort of doing it nowadays by adding an $ options array and calling some array_merge with some default options. If people are doing it all the time then they should get it into the language asap. 
Why does it still suffer from the problems ? If a list of substitutable parts is maintained along with their total quantity and you deduct the quantity from it every time any of the substitute parts is required, requirements are met. &gt;It also requires you to pack, ship and unpack the entire dataset every time #1 grabs the list that has quantities unfulfilled. #2 has the list of compatibilities for #1. Worse case, yes, it would have to grab the whole dataset. If data transfer is an issue then it can be done in a stored procedure, which will have to address the other point below. &gt; and introduces log(n) lookups all over the place in massive iteration Hence the hashes. Once those array's are generated (and they only have to be generated once), lookups are nothing more than pointers to the quantity.
Depends on what your'e interested in, I guess. I joined the CakePHP project 6 or so years ago as a semi-noob, and working on that project (and now Lithium) has been *extremely* instructional, both from a FOSS workflow standpoint, but I think I'm much more informed architecturally than I ever would have been. The difference with open source, is that it's very merit based, and that you have to be very self motivated. If you wait to get handed a job, you might wait a long time. Find something that interests you, and start to be a part of the community. You might start by creating plugins or something that's kinda secondary, but then once you know it well you can probably start to fork stuff and submit pull requests (or the equivalent). Having worked on an open source project for a long time, we're always in need of help with documentation, writing tests, and fixing bugs. Just pick something and fix it, and submit it. The more you do, the more you learn—and there's a certain amount of street cred that goes with pitching in to something (especially something that's high-adoption).
Some PHP developers still live in the world where they have PHP and HTML interspersed throughout their application (a hideous mess).
&gt; If a list of substitutable parts is maintained along with their total quantity and you deduct the quantity from it every time any of the substitute parts is required, requirements are met. This sentence suggests that I misunderstood your approach. I withdraw opinion until later, when I'll have a chance to re-read. &gt; If data transfer is an issue then it can be done in a stored procedure, which will have to address the other point below. I'm working on something along these lines myself, though rather than hashing endpoints, I'm trying depth-first search to satisfy. The reason I prefer that, besides having a personal intuitive grasp, is that later I could order the parts, so as not merely to select correctly, but also preferably (such as if the parts cost different amounts.) &gt; Hence the hashes. Once those array's are generated (and they only have to be generated once), lookups are nothing more than pointers to the quantity. PHP arrays aren't sequence containers; they're trees. That's where the lg-n comes from: not fetching what's behind the pointers, but rather getting the pointers out of the array. Remember, it's a vector that's an o(1) sequence container. Array means a lot of things; in PHP, it means "sparse key-value map," and does *not* have constant-time access. Upvoted for an interesting approach, pleasant conversation, and a legitimate and friendly response to someone disagreeing with method.
It does look a lot more readable and maintainable than just numbering your printf parameters (which you need to do for localization as the order of words can change). And basically the advantage is the same as in defining functions with named parameters.
Interested as well....
If you've been doing it for years you're probably more careful than most people about it. Getting a junior developer / intern helping you out and you expect some pain.
If you are producing code for distribution, you can't force people to edit their php.ini files. They might not know how, or they might not be allowed to.
I just started Googling how to get started w/ contributing and I'm already somewhat overwhelmed. What do you use... Google Code Open Source, SourceForge, etc? And I'm just a designer. Is there a way to see which ones seek designers? Most that I've just checked out already seem like they have people designing their apps. Thanks for helping out, I appreciate it. I'm totally willing to learn, but it is intimidating.
At first, I used Craigslist to get all my work. With Craigslist, always make sure you weed out the bad apples by advertising your rates right away. Also, be more specific, find something niche to work with. For example, I would make postings specifically advertising eCommerce sites, or wordpress/joomla etc. Postings saying something specific (I.E. I am a php developer specializing in wordpress development etc and go on to talk about what services to wordpress you can provide, such as custom templates, plugins, etc.) I got almost all my work from Craigslist, and I have made very good relations with several contractors who provide a constant stream of work. I haven't had to post on Craigslist since November of last year, I finally get enough referrals and contractors to keep me busy. 
By hand? Don't you create the structure in memory and output it using a built in generator function?
It's a accepted standard sure, but it's dead. There isn't any point in writing for it anymore. XML is used certainly, no question. But how often do you do it manually? Short tags are only a (slight) problem if you need to create the XML header yourself. Most people (I assume) generate the XML from some sort of in-memory data structure.
It's an template that is XML rather than HTML. Creating the structure in memory and outputting using an XML lib it is significantly more code and hassle. I've tried both approaches. For certain problems, using a template is much more straight forward (for other problems, the reverse is true). 
What do you think about modifying the code to animate the cube?
I've used more than 5 different web hosts all of which had short tags turned on. You can also turn them on using a php.ini stored in your htdocs folder (1&amp;1 do this and others I've come across) or in your .htaccess
but you cant search in the docs for [
maybe then the solution isnt object to array, its array functions being able to accept objects eh? eh?
Not to quibble with your sampling methods, but even if only 10% of hosting providers don't allow it — or even if it's mainly corporate environments — failing to use the proper open tags is still creating needless hassle for no useful reason (and no, I don't think saving 3 bytes per file counts as "useful").
I thought that gettext already has this; obviously I've confused it with symfony's localization... as such I see your point.
I am looking forward to reliably using short tags, not because I'll use them to open my PHP files, but for the simple short-hand echo: `&lt;?=$title?&gt;` over `&lt;?php echo $title; ?&gt;`
Something I always wanted is a "default" keyword for function parameters. So you could have : function Foo($bar='mitzva',$reddit) {} ... and call it with : myFunction(default,'gonewild'). Nowadays arrays as parameters are used a lot but I still think it could be a good idea. There must a good reason for not having it ?
 $element = $this-&gt;createElement('multiCheckbox', 'colors'); $element-&gt;setLabel('Colors: '); $element-&gt;addMultioption('1', 'Red'); $element-&gt;addMultioption('2', 'Green'); $element-&gt;addMultioption('3', 'Blue'); $this-&gt;addElement($element); Something like this?
Not quite. That produces three checkboxes. What I'd like to do is *also* have a text box next to each checkbox. 
ohhhh, I thought you just wanted labels next to the checkboxes...silly me
If you don't want to help, don't say anything. Simple as that. If you are all for helping someone learn, then help. 
str_random FTW
upvoted sir
THIS IS THE BEST THING EVER!!! also drunk at work, dealing with PHP. coincidence?? 
We we we so interested.
ini_set('short_open_tag', '1'); Put that in the templating engine initialisation/constructor PHP code.
ini_set('short_open_tag', '1'); Put that single line in the front controller PHP code.
Just implement ArrayIterator.
Clearly you don't know @internals. There are a number of features in there that won't make it purely for BC concerns. However, a lot of the nicer features could easily find it's way upstream. Loots of doomsayers regarding @internals, all mostly around misinformation. I mean, just look at all the people complaining about [] for short arrays being denied, ignorant of the fact that it's being brought up again, and will most likely find it's way in. Some of the detractors last time don't care enough to stop it this time.
FWIW: He says the same thing regarding the maintenance. 
Nothing wrong with putting PHP and HTML together. Business logic and display on the other hand... 
Or... you could just use PHP.
If I understand you right, all you have to do is store the date of the query row in an array, then use in_array to see if that array has the date you're looking for. For example: for ($j ; j &lt; $num_of_rows ; ++$j) { $row = mysql_fetch_row($result_of_query); $row_array[$j] = $row['date']; } Then, where you want it to display: if (in_array("$date", $row_array, true)) { //Whatever you want to happen for that date, i.e: echo "$result_from_query[0]" } The 'true' option forces in_array into strict mode, which you'll want for finding dates.
I like it :) Thanks. I'll give it a shot.
if you just want to order a result set (or two in this case) by date, the best way to do it IMO is let the database do it. SELECT * FROM t1 WHERE criteria = 1 UNION SELECT * FROM t2 WHERE criteria = 1 SORT BY mydate This avoids even needing to sort it in PHP or in some way combine two result sets. To then group by day in PHP for output, I'd just set a loop variable for the current day, and when the day changes, add your line break, echo out the new day, and spit out the next set of values.
if you want to really nail down permissions, create a table that keeps track of all your scripts, and then add a column to your user table that has a string of csv script ids that a person has permission to access. whenever a user logs in, create an array with the script ids as a key, and then you can check if a user has permission to access a certain script like so: isset( User::$allowed_scripts[ $script_id ] ); good luck... while it may seem complicated at first, its the best way i've found to make sure that each user can only access certain features.
I was thinking the same thing man. But for this particular situation, I have a few things I need to run on each resultset separately before each array is ready to combine.
Just to be clear, the second if statement above should be in a for loop that calls the $date variable from a mysql_fetch_row command. This code will also let you perform different functions on both types of queries.
Most of the high-level Magento modules are pretty clean. Once you start looking deeper, it gets very ugly. It's easier to work with if you take the time to recognize and understand the design patterns being used. There are a lot of them. Thinking in terms of design patterns simplifies the overall perception of the framework. People get lost in Magento code. If a developer would take the time to understand the block layer, they'd realize that the layout xml files are a simple map of each module. 
Why is parsing XML not a good option? Sounds like a job for cron+script to me. 
Please, stop suggesting smarty. PHP's alternative syntax is much cleaner. http://php.net/manual/en/control-structures.alternative-syntax.php The best way to do this is like so: &lt;?php if(is_array($contacts) &amp;&amp; count($contacts) &gt; 0): ?&gt; &lt;!---- display records here ----&gt; &lt;?php else: ?&gt; &lt;!---- display Sorry! message here ----&gt; &lt;?php endif; ?&gt; This way you dont have any ambiguous **&lt;?php } ?&gt;** 's floating around.
You didn't read anything I wrote did you? You just saw the word Smarty and jumped on your soapbox, because for some reason your opinion is better than everyone else's. Did I not predict ignorant smarty-bashing? Thanks for proving me right at least...
Got some new information about permissions, they're not rock solid yet but looks like 4-5 permissions for each user with read/write different, but here's the - twist: Got to have country codes in the permissions, so a person from China can't edit a report from Japan. Each user can have several country codes added to their account. What I'm thinking right now is: tbl_user_permissions -&gt; pid, uid, rank tbl_user_permission_country_code (naming in progress rifk) -&gt; cid, uid, country_code But I'm thinking of putting the permission level from the first table in the country code table so each user can have different permissions for different country codes.
Do you have any suggestions how I can improve this script?
You seem knowledgeable on the subject. How do I sanitise all the outputs in my template when displaying the PHP in the html? Do I need to make a function which does the htmlspecial chars and other escaping then wrap every variable in that? E.g. &lt;?= $security-&gt;sanitise($firstname) ?&gt; It would get quite wordy. Just thinking how I could automatically sanitise all the variables in the controller I need to ouput in the view. 
1) As far as I know, this patch doesn't stop &lt;?= from working. 2) Ugh. Mix PHP and HTML like that? Ugh ugh ugh.
Only if you provide source, or if you divulge your architecture and want us to critique that.
&gt;You didn't read anything I wrote did you? You just saw the word Smarty and jumped on your soapbox, because for some reason your opinion is better than everyone else's. Did I not predict ignorant smarty-bashing? Thanks for proving me right at least... Actually I read the entire thing, and the only thing I disagree with is the use of smarty. I never said my oppinion was any better, I just voiced it. Why do you have such a problem with this? I didn't "prove you right" at all, you were expecting so much to be flamed by someone who disagreed with you, that you saw a standard disagreement, mistook it for a flame, and flamed back. Meta as fuck.
PHP is great as its' own templating system. Why would I add another layer of abstraction when the native tools/syntax provided work just great? From your comment it sounds like your a proponent of completely logic-less templates, like `mustache`. While I do follow MVC, I do not swing that far. `&lt;?=$title?&gt;` looks better to me than `{title}` or `{{title}}` (can't remember what's actually used. Why in the world would I force myself to learn just another way to write a foreach loop, when PHP's works perfectly? Doesn't make much sense.
I agree, 3 bytes if fuck all. But I just think small tags look nicer. There's a little bit of slick about them, just like $boo ?: false; is kinda neat too. I don't like the argument that there isn't support for them when I've been programming PHP and releasing onto shared hosts since, PHP 4.2 or something. It's a disservice to those hosts, most of the reputable ones aren't numpties, they actually care and install all the neat stuff you may need (PHP images stuff, MySQL geospatial stuff etc) You example of corporate environments in my experience are the easiest to change, you just say to the boos that you're adding the new libraries that you code needs. I've never had an issue with just adding a new server with everything on it I want. What hosts have you come across who didn't have short tags and refused to allow them?
If you're using the jQuery autocomplete as far as I know when a new key is pressed all previous requests are cancelled. Not sure what you mean with the session_write_close() stuff? Specifically, what do you mean scripts running in parallel/series? Apache should be handling each request individually (and completely separately from each other).
I am, in fact using jQuery autocomplete. So, in what way are the requests canceled? Does it not make any more of them? Does is send some kind of packet to the server to let the server know to stop processing that request? As for the session_write_close() Apache does handle each request separately, but once you run session_start() in a script, php will stall any other script using that same session id wanting to run session_start() until the first script has released the session variable by running session_write_close(). This is to prevent a situation where script one changes some value and then script two over-writes the change when it saves the session variable. I learned this the hard way. I had a script that transcoded a bunch of flac files to mp3 and then returned a zip file of the resulting mp3s. It worked fine, but while the (large) zip was being generated/downloaded no other pages would load. I eventually tracked it down to the session variable.
jQuery Autocomplete has a timeout parameter so it waits x milliseconds before sending the request. If you hit another key in that time it won't send the previous request. EDIT: See the [options tab on this page](http://docs.jquery.com/Plugins/Autocomplete/autocomplete#url_or_dataoptions)
Hmm I'm not as knowledgeable as I seem. I just make things up as I go along. &gt;Do I need to make a function which does the htmlspecialchars and other escaping then wrap every variable in that? I think you do do that, yes. Perhaps best to open a new thread and get more advice though.
Have a javascript timer that sets the countdown to something like half a second. Every time a character is pressed, the countdown is reset. This way, only a few requests are made instead of a dozen. Edit: I should read comments. You're using jquery, and stuart explained it great.
As far as I'm aware (not an expert here by any means) the javascript cancels the request on the receiving end. So it basically stops listening for a response on that request. I'm pretty certain the processing on the server side won't be halted/cancelled. But for an autocomplete query it really shouldn't be doing much heavy lifting.
Maybe I just really like abstraction, but my templates end up being a lot more like: $t = new Table('input_form'); $t-&gt;body = Form::field_rows($data_object); echo $t; and a whole lot less like: &lt;table class="input_form" style="width: 85%";&gt; &lt;tbody&gt; &lt;?php for ($i = 0; $i &lt; count($data_object-&gt;form_rows); $i++) ?&gt; &lt;tr&gt; &lt;th&gt;&lt;?= $data_object-&gt;form_rows[$i]['label']; ?&gt;&lt;/th&gt; &lt;td&gt;&lt;?= $data_object-&gt;form_rows[$i]['form_field']; ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;?php } ?&gt; &lt;/tbody&gt; &lt;/table&gt; To me, the second one is a whole lot more work, way harder to maintain, and looks like ass. I basically have no raw HTML longer than a tag or two anywhere.
You could use [`array_merge_recursive()`](http://www.php.net/manual/en/function.array-merge-recursive.php) to combine the two record set arrays once you're done with what ever you need to do individually. For each parent array key, you will have to use the string representation of the date - using an integer timestamp will void everything as `array_merge_recursive()` does not preserve numeric keys... while ($row = mysql_fetch_row($query1)) { $array1[$row['date']][] = $row; } while ($row = mysql_fetch_row($query2)) { $array2[$row['date']][] = $row; } $combined = array_merge_recursive($array1, $array2); Using `array_merge_recursive()` replaces the merging code you have in your link, but it's the same basic concept. Then `foreach` over `$combined` like normal... foreach ($combined as $date =&gt; $rows) { echo "&lt;h1&gt;$date&lt;/h1&gt;"; foreach ($rows as $row) { echo implode(', ', $row) . '&lt;br&gt;'; } }
&gt; What hosts have you come across who didn't have short tags and refused to allow them? We mainly ran into it when providing modular solutions for clients that already had an internal codebase conforming to an internal coding standard which was in certain ways enforced by server configuration. There were some things we could interface away, but not this. It hasn't come up for years, though, because we've been using &lt;?php tags.
&gt;But when I try to use this method to change for example my user url to robertochange.com I get the following exception: It probably assumes that "robertochange" is a table alias, and "com" its property. Try this instead: $q-&gt;set("usr.$k", '?', $v);
that's weird... now I'm getting *Message: SQLSTATE[HY093]: Invalid parameter number: number of bound variables does not match number of tokens * and if I echo the query it shows *UPDATE users SET email = ?, password = ?, url = ?, responsable = ?, usr.pais = ?, role = ? WHERE (id = ?)*
Yeah, I think your autocomplete look up script/service should be small and simple as well. There's no need for it to be using/writing session data.
You can download the slides from that page as well. Hopefully I'll get a video up as well.
How do I sanitise all the outputs in my template when displaying the PHP in the html? Do I need to make a function which does the PHP filters and other escaping then wrap every variable in that? E.g. &lt;?= $security-&gt;sanitise($firstname) ?&gt; It would get quite wordy. Just thinking how I could automatically sanitise all the variables in the controller I need to ouput in the view? 
Well, i've been reading @internals for the past 3years, almost daily, even tried to participate in some debate. I just find that sometimes some people on @internals are too quick to dismiss ideas (like the short array syntax at the time, still glad it's back in discussion). It's not all bad, but in general i find it to be a good mess and to quote a PHP contributor "sometimes it feels like in @internals it's just a bunch of monkey throwing feces at each other". And i got an ok knowledge of the internal of PHP (enough to develop extensions, and screw a bit around with the Core). 
Sorry but not using html like it was meant to be used sounds horrible to me
Another way you could do this (in the right situations) is to only run the script if the space bar is pressed. This would allow the script to run after every word. The only gotcha is you would have to timeout for the last word. You could also have it run after N amount of keystrokes...
One tip: Don't use MySQL at all if you expect to have any kind of good performance. If you can and are interested in Redis (it's a Data structure server that keeps everything in memory, so quite fast and powerful), you could have a look at this : http://pastebin.com/raw.php?i=E5h1TLWz It uses the PhpRedis extension (can find it here : https://github.com/nicolasff/php-hiredis ). It's a PHP adaption of this : http://antirez.com/post/autocomplete-with-redis.html I recommend reading the original article (made by the creator of Redis) to have an idea of what is going on.
Well, if you scroll up a bit, I stated that you should not attempt a catch-all sanitation method, but instead sanitize your data according to its use. For instance: * HTML would probably need a HTML sanitizer to protect against XSS * Text would need HTML entities. * URL properties would need URL encoding. etc. &gt;Just thinking how I could automatically sanitise all the variables in the controller I need to ouput in the view? You can't. 
Methinks you need to qualify that further. MySQL has great performance, depending on your needs, the database structure, fine-tuning, etc. Especially since a DB that keeps *everything* in RAM would be vastly impractical for any DB with more than a few hundred MB of records.
I had this same issue - personally I would agree with your solution however the owner of the site (guy paying me) believed it would be too much overhead for the entire site to be in SSL /shrug I ended up setting a session table in the db that would fix it and pull it to either side when needed based on ip which probably took more overhead than running the entire site in SSL but it's what he wanted. 
That's true, if you don't plan on having a lots of hits MySQL will do fine. As for the size, you wouldn't keep everything into Redis, usually you still have something like MySQL or MongoDB behind. Plus it's really specific, but in and out, for this kind of stuff, Redis is more suited than MySQL. If i recall correctly, on this specific case (autocomplete), Redis based solution is about 100x faster than the MySQL solutions, even more so if you implement a layer of caching for the most popular keywords. But yeah, i have a tendency to always favor the high traffic oriented solution (when you have over 100M page views a day you tend to do that :p ). As for the size, a 100000 records in Redis (depends on what you store, but assuming pure text), you wouldn't go that far (50Mb around). And even though, among the Redis server i manage, it ranges from 5Mb of Data to 45Gb in Memory, with no issue in either case.
Don't send a request whenever a key is pressed. Send a request every 300 milliseconds if the input has changed.
I had to do this earlier today. Why not just use integer timestamps ? eg 1234567890, etc . I used ksort() along with that, and it worked as expected.
You are a dick. Why are you such a dick? You spend way too much time here, go get a good paying job, or a girlfriend, You are obviously doing something wrong. 
try removing unset($user['id']) .. doesn't that destroy your whole data structure ? Could you comment your code ? What is $user ?
What about passing an array through to the view and the second parameter tells it which sanitising function to do on that field e.g. $varsToDisplay = array( firstName =&gt; 'xssClean', emailAddress =&gt; 'emailClean', url =&gt; 'urlClean' ); Then in the view class you do something like: $sanitisedVars = array(); foreach($varsToDisplay as $varName =&gt; $sanitiseAction) { $sanitisedVars[$varName] = $security-&gt;$sanitiseAction($_POST[$varName]); } Then you end up with all the vars in $sanitisedVars array cleaned individually to how you want.
Simple: &lt;input type="text" onChange="startSearch();"&gt; &lt;script type="text/javascript"&gt; var timer; //global, you can do it in other ways, but global is simplest function startSearch() { clearTimeout(timer); timer = setTimeout(doSearch, 500); } function doSearch() { //do your ajax query here } &lt;/script&gt; (It's psudocode of course, but it gives the idea.) It will wait half a second after the last keystroke before actually doing the search.
If your database has plenty of connections available then use mysql_unbuffered_query to get things started faster, it won't have to wait for the entire query to be buffered in ram before starting the transfer. If not, I would explicitly close the data link before outputting the result. You will need to copy the data from the resultset, but you will avoid tying up the database while a potentially slow transfer occurs.
I honestly don't understand what you mean by that. HTML is a language for describing content. There is no particular intention about how you should type it. I prefer to type a lot less of it, and to focus more on the logic of my programs. That way I get more done in less time and the results are better.
Firstly, you ignored the fact that my recommendation was to *try* Smarty, not to use it without making an informed choice. I was **very, very clear** on that. Secondly, you were not voicing your opinion, you were overruling me. Voicing an opinion would sound like this: &gt; I disagree with your recommendation to try Smarty because... and would have gladly had my upvote and consideration. Being an arrogant little whippersnapper who thinks his opinion is better than mine sounds like this: &gt; Please, stop suggesting smarty. Spot the difference? If not, I'll be happy to mentor you on communication skills. To make matters worse, you actual reasoning is **completely** irrelevant. There are soooo many factors in choosing a templating engine (or no templating engine): Team-size, skill-sets, training, testing, project time constraints, site expansion plans, I18N/L10N, types of client device, architecture choice, framework integration, porting or integration with existing codebase... etc. etc. etc. All have costs. To state with authority that the OP should not even *try* Smarty (despite all it has to offer) simply due to your own purely syntactic personal preference is monumentally immature.
Ah. So you're using reddis more like a caching tool then, like memcache for PHP. 100,000 records isn't very many... I manage DBs that have millions of records per table (like invoicing details) and that's before doing anything complicated like JOINs. All those need to be readily available for whenever a customer want to view their invoicing history on line, or CSRs view order histories, etc. EDIT: How on earth do you get 45GB of records into RAM? Is that a typo? 
&gt;What about passing an array through to the view and the second parameter tells it which sanitising function to do on that field That's what PHP filters does.
All of Redis data, like memcached, is stored in RAM. So if you have standalone Redis servers and put 64GB of RAM in them, you can hold 64GB of records. One point missed in this thread is that you don't need to store the entire record in cache to perform autocomplete. You generally only need 2 or 3 fields per record in your sorted set (the uuid, the name, and date) and you can do your autocomplete search on those. You don't need to store the other fields the row contains. (Obviously you can't do this with memcached since it doesn't have sorted sets.)
Use memcached as a caching layer around your database query. The concept is pretty easy.. when you get results serialize them and save them to memcache (for 1 hour/1 day, depending on how often you expect your data to change). You query memcached before you query MySQL. If memcached returns results from memory - unserialize them and return these results. If memcached has no record.. then query the database (and save to memcache) --- You can also install and configure Sphinx which is a very fast fulltext search. You setup your indexes (tell it to rebuild the 'items' table every hour) via a cron job.. and rather than query the database you get your speedy results from Sphinx's fulltext engine. These are a few options on speeding up the server side. Follow everyone elses instructions for the client-side optimisation. Reset the timer onkeyup. Making a HTTP request for every keystroke is a real bitch. (PS. Someone may want to correct me about using BOTH Sphinx and Memcached... it may be best to use just one or the other).
That would definitely be a high performance machine in a demanding environment, for sure... is 64GB of RAM for servers de rigour these days? I've not seen any in the wild; most of my clients are fairly established in terms of their server architecture &amp; hardware.
Slightly late, but a nicer way of writing that would be: $params += array( 'a' =&gt; 'default_for_a', 'b' =&gt; 'default_for_b', );
Sorry If I hit a nerve, but you're completely wrong. Theres nothing you can do in smarty that you cannot do in a more simple manner with vanilla PHP.
I agree; this is shorter, much more readable, and what all code in a well designed programming language should look like: &lt;?php echo '&lt;a href="' . htmlspecialchars($link) .'" alt="' . htmlspecialchars($alt_text) . '"&gt;' . htmlspecialchars($link_title) . '&lt;/a&gt;' . "\n"; ?&gt;
 &lt;?php echo strmap("&lt;a href='{link|validate:'url'}' alt='{alt_text|default:$link_title}'&gt;{link_title|ucwords}&lt;/a&gt;") ?&gt; Versus: &lt;?php echo '&lt;a href="' . htmlspecialchars($link) .'" alt="' . htmlspecialchars($alt_text) . '"&gt;' . htmlspecialchars($link_title) . '&lt;/a&gt;' . "\n"; ?&gt; Versus &lt;a href="&lt;?=link($link)"?&gt;" alt="&lt;?=text($alt_text, 'Default text')?&gt;"&gt;&lt;?=text($link_title)?&gt;&lt;/a&gt; 
You forgot some code, FTFY: &lt;?php if ( !ini_get('short_open_tags') ) { throw new Exception(); } function link($link) { return htmlspecialchars($link); } function text() { $a = func_get_args(); foreach ($a as $text) { if ($text) { return htmlspecialchars($text); } } } ?&gt; &lt;a href="&lt;?=link($link)"?&gt;" alt="&lt;?=text($alt_text, 'Default text')?&gt;"&gt;&lt;?=text($link_title)?&gt;&lt;/a&gt; An almost enterprise-quality piece of PHP there
If you can avoid sessions altogether, even better =). If you're not worried about the new $_SESSION array overwriting a previous one, you could also override the session handler with one that doesn't use flock(). 
Yeah Redis is used more like a caching (it actually replaced memcached). No 45Gb was not a typo (server has 64Gb of Ram :p )
No, I wouldn't say that is a standard; it would be overkill for a web front-end. The biggest box we'd run is a 48GB database master; it can use that much for sorting large sets. You could use that much in a memcached or redis server but I've never had a dataset that needed so much cache in one layer. Pornhub might :) If you use memcached already you'd likely get the hang of Redis quickly but it offers more features related to sets and sorting whereas memcached is simply a key-value store.
Or you could simply set the relevant MySQL table to be a MEMORY storage engine table: http://dev.mysql.com/doc/refman/5.1/en/memory-storage-engine.html
*sigh* No need to check for short tags. You control the server. And, in PHP 5.4, it will work by default. Considering any template proposal would be included after that, it is useless to check for short_open_tags. But yes, creating filters and helpers for your views is better than the suggestion of embedding a weak template language within a language that already does templates just fine. Let's ignore the tools and caching capabilities we currently have, and rewrite it all because someone wants to implement yet another shitty mustache template system.
Is this still working?
While interesting, the question "Why?" keeps popping into my head. php is not really designed for these types of applications. I haven't seen performance statistics, but I can imagine they are not particularly good (because php is designed to run behind a normal webserver).
I'd love to see some good performance stats on this. I can see people who really love php as a language wanting an event-driven model like this without having to switch to something they're less comfortable with/interested in. If it's not crappy performance-wise, that is.
PHP was originally barely a language. It has matured a lot since then and most language optimizations are applicable to use cases like this too. Was Perl designed to be used like this? No, it was designed for system administration. Yet, the guys behind Mojolicious managed to implement a sane asynchronous app framework, too.
Now it just needs to be extended to objects. `$obj = { 'blah' =&gt; 1, 'thingy' =&gt; 'magic' };`
I would love to see a ZeroMQ client for this too, it would instantly open up integration with mongrel2, and using other services (like fast C++ caching database &amp; search backends).
And what interesting there? Some C++ programmer makes typos and blames PHP. Use IDE with static errors analyzing to avoid it, nothing new there.
All languages were originally barely a language, and some of them have matured a lot (which is why they are popular now). However, from the beginning, php has been designed and optimized to serve web pages behind a web server. Originally this was apache and anything else that supported cgi, but has grown to support fastcgi and other serving options. Under these design constraints, memory leaks and the like are not a huge problem, since workers are constantly reaped and restarted. Garbage collection has also not been a focus, for the same reasons. Now look at languages such as Perl, Python, Ruby, etc. Sure, they were never exactly designed for serving websites, or doing *insert task here*, but have been designed for longer running processes, and to optimize some system interactions more than php has. I'm not saying this is a bad thing, but I personally think it has limited applications, and particularly will suffer in performance when compared to similar systems implemented in other scripting languages
Shouldn't be too hard to make since the [PHP bindings for ØMQ are already made](https://github.com/imatix/zguide/tree/master/examples/PHP).
Limitations of a language are never a good reason not to try something. If that were the case the programming community would be lacking in many things including imagination.
 // Perform a search on keyup after 500ms. After every keyup, the timer is cleared. $('#search').keyup(function() { clearTimeout($.data(this, 'timer')); var wait = setTimeout(search, 500); $(this).data('timer', wait); }); function search() { // fetch search suggestions here }
Summary: &gt; I am a C++ coder who didn't bother to familiarize myself with PHP enough to turn E_STRICT on.
I currently make my living writing PHP scripts that run on the server as daemons. One step further, in order to be more efficient due to heavy load, I tend to fork multiple copies to handle the bandwidth of the data. PHP works well for these types of things, rapid prototyping that becomes stable very fast.
*two
haha oops!
Please tell me this code is for demonstration purposes only and you don't actually advocate things like "global $session_db;" or "die ('Session read error.')" or an indexless session_access column or mysql_real_escape_string() everywhere. Of course you don't; I mean this is 2011. All of that knowledge is ubiquitous. This is just a quick mock-up right? Something you just threw together in a hurry and don't actually recommend using on a production site. You should write a followup article pointing out the dangerous and bad bits and explaining them. I think that would really help your readers.
He owns up to that: &gt; The good news on variable declaration is that I can jack up PHP's error reporting so that these mistakes are flagged at runtime. The real point of the article though is how PHP treats private variables differently from C++. I think PHP actually gets it right in this case. Where PHP blows it IMHO is allowing other objects of the same class to access private properties: class SecretKeeper { private $secret = 'original secret'; public function talk() { return $this-&gt;secret."\n"; } public function changeSecret(SecretKeeper $keeper) { $keeper-&gt;secret = 'secret has been changed'; } } $foo = new SecretKeeper(); $bar = new SecretKeeper(); echo $foo-&gt;talk(); $bar-&gt;changeSecret($foo); echo $foo-&gt;talk(); //Output original secret secret has been changed That would make sense in class-oriented programming, but not object-oriented programming.
Isn't it kind of fail to calculate the distance in miles and then do the convertion to kilometers. Something tells me it would be simpler to do it the other way around.
Well, they're using lat/long, so you have to convert to some unit of measurement. Most of the world uses km, so doing that first might save you some cycles if you're marketing to the whole world, but if you're in a mile-based system and only marketing to a mile based audience, you'd do it in miles. That's what she said.
Seconded. I came here just to say that. Also, session start should not be called in the same file as where you define your functions. What if you just want to include but not start the session? Oh and.. I just noticed something. Did the OP actually verify that this code freaking works? Nowhere are you actually performing an INSERT into your session table. All your session_open() function does is open the database connection!!! Dear God, my eyes!!! 
Is there a reason why you didn't just use this? function distance ($x1, $y1, $x2, $y2, $units) { return sqrt( ($x1-$x2)*($x1-$x2) + ($y1-$y2)*($y1-$y2) ) . " " . $units; } 
I've started getting in the habit of creating a $_SESSION['user_key'], a sha1(date('U')) usually, and use that to base everything the user does on a site. 
Well, you found it!
Because you want to know the distance in kilometers/miles and the grid is in degrees of latitude and longitude so it's kinda distorted. Hence you need to use the so called  [Great Circle Distance Formula](http://en.wikipedia.org/wiki/Great-circle_distance). That simple formula works for approximating distances though. There's more debate of this code @ http://stackoverflow.com/questions/389211/geospatial-coordinates-and-distance-in-kilometers-updated-again
Its not that its not a good option, its that we were hoping an interface of sorts was already created. 
Discovered that a few months back. It's now our group logo in Beluga.
He uses 'replace' which essentially deletes the row on a UK/PK violation and then performs an insert. It's a lazy man's insert-if-!update.
This is exactly what php needs to evolve. Hope they include a js style object creation in php 5.4
I also wanted to see the benchmark (mainly against node.js), without investing too much time in this. Took an hour to setup the required PHP environment (setting up a vm, getting libevent, custom php build). Two hours later I got a PHP Daemon running in the console, but that's about it. **Some points for the developer:** * **Awful configuration, if somebody just wants to play around. ** - Why do I need AppResolver at all, Why do I need configuration files to make a Hello World? Suggestion: Take a look at what node.js does. phpd start iWouldLoveThis.php #but instead it is: phpd start --config-file=... --path=... * **Nothing works, right out of the box. ** - I'm really not into mood to deduce how to work with the software from the source code - documentation lacks very seriously at the moment. Suggestion: include a configuration that runs/showcases EVERY SINGLE included example app. It's so much more easier for developer to deduct from all the possibilities. * **Directory structure is quite ambiguous .** - *app-clients, app-examples, app-servers, app-web...* What? All I want is a Hello World on port 8888! I mean guys, look at the same old apache: /bin, /conf, /htdocs. Suggestion: why don't you make it simple like: /lib, /doc, /conf, /www Nevertheless, thumbs up for the idea. I'm really curious about how this compares to nginx+php-fpm+apc or node.
classic image. so old.
Ahhh... ok. I was wondering about that. thanks!
It is hidden somewhere on her body. You must find it.
Personally I feel like anyone with these sort of requests should watch The Social Network and put themselves in the shoes of the Winklevoss twins. You've got this amazing idea, and you're essentially asking someone else to create it for free. Eventually you're at risk of that individual feeling entitled to their work (and rightfully so). Conversely I'm always incredibly skeptical of people that want me to do spec work because they're generally very quick to minimize the importance and difficulty of the programming. If their attitude at the beginning of the project is "I **JUST** need you to program it," there's a pretty good chance that, if and when it becomes profitable, they're going to say "well he **JUST** programmed it." Ideas are worthless without the skills to make them a reality.
&gt; sha1(date('U')) So two users access your site at the same and get the same session identifier? You might want to add a random component to that.
PHP is class-oriented. You get the same result in C++. 
Agreed. But that's the thing - I have a large portion of an other necessary skillset - design (both web and print) and SEO/SEM/Marketing. I've been doing both for 5 years. Also, I'd sign a contract before starting any work (and hire a lawyer to write something up if necessary). This is something that I still have to put more thought and research into, but ideally we'd split profits... 33% to the developer, 33% for me, 33% for the 'company' for hosting, marketing, etc costs. Again, I need to look into this, I'm not sure if these numbers are even reasonable. I've never seen The Social Network. I gotta check that out.
I thought of that so I removed it . $user is actually a $_POST with an id, email, password, url, responsable, role and pais fields. I don't need the id and pais so I am now avoiding those like this: foreach ($user as $k =&gt; $v) { if ($k == 'pais' || $k == 'id') { continue; } else { $q-&gt;set("usr.$k", '?', $v); } } The problem being that when I echo the SQL query produced by this I get &gt;UPDATE users SET email = ?, password = ?, url = ?, responsable = ?, role = ? WHERE (id = 150) Which sucks cause it's not getting the information I pass it, only the ID which is set after the loop like this: $q-&gt;where("usr.id=$user[id]");
I highly recommend it. The Social Network was good entertainment in general, but as a developer, designer, or entrepreneur it serves as a cautionary tale as well. I didn't mean to undermine the value of any of these other skills. If I've learned anything from some of the projects that I've launched myself it's that good design and good marketing are just as critical as good programming, especially at launch when you're struggling to build a user base. Last year I went against my better judgement and met with two individuals who wanted me to do work on spec. One was my friend who is an amazing designer and really just setup the meeting. The other was an associate of his with an idea he wanted to see developed. I told them up front I wouldn't work entirely in spec, and gave them a very modest quote for what the development would cost. The "idea guy" immediately took me out of the equation entirely and had my friend build something using WordPress and some plug-ins. A year later they have 5 static pages of their site up and running and not much else. But boy do those 5 pages look good :) The moral of that story is that collaborations like this work best when there is respect and appreciation of the assets each individual brings to the table. I work on an almost daily basis with the designer I mentioned above and we make a great team because we know that neither of us would function as well without the other. I hope you find someone willing to do your programming, and I hope you all are able to reap huge profits :) 
Glad it's working out w/ you and him. It's definitely risky working with someone, as there are so many issues and things that can go wrong without proper planning. This is also why I want the project to be pretty casual. I'm not looking to build a team of people, find investors, hire lawyers, etc... I just want a simple project to work on for the experience; which I think will be invaluable.
I just looked at my source, and I was a little off. Here's what i'm doing $_SESSION['user_key'] = sha1(auth_pwgen().auth_pwgen().time()); Where auth_pwgen() generates a random string. 
Add to any php page URL ?=PHPE9568F34-D428-11d2-A769-00AA001ACF42
What happened to the brunettes fingers?
I'm a total beginner. I pretty much understand what is happening here, but: does this mean there is no need to do any sort of other injection attack checking? I don't have to do anything else? I'm starting out as a total newbie pretty much, so it's best if I just learn how to do this stuff the right way. I'm totally new to the "-&gt;" notation, assuming it's basically "send to". $sth = $pdo-&gt;prepare(" SELECT * FROM myTable WHERE myField = :myField "); So for every different type of query I want to do I should build another one of these? How do you get from there to something like this, from in the comments: $this-&gt;db-&gt;select('foo')-&gt;from('bar')-&gt;where('baz', 'qux')-&gt;run() ? 
&gt; $this-&gt;db-&gt;select('foo')-&gt;from('bar')-&gt;where('baz', 'qux')-&gt;run() I wrote a library to do this but it actually turned out to be far less useful than just doing the SQL. What I found far more useful was a full ORM abstraction but you're probably not there yet. So stick with the SQL.
**Data handling needs to be done by the model.** The controller should only serve as a router and the place to *gather* the data. This is how this would be done in Codeigniter: **Controller:** function index(){ $this-&gt;load-&gt;model('contact_model','contacts'); $data['contacts'] = $this-&gt;contacts-&gt;getContacts(); $this-&gt;load-&gt;view('contacts/index',$data); } **View: ** &lt;div id="contacts"&gt; &lt;? if($contacts) : ?&gt; &lt;table width="100%"&gt; &lt;tr&gt; &lt;td&gt;First Name&lt;/td&gt; &lt;td&gt;Last Name&lt;/td&gt; &lt;/tr&gt; &lt;? foreach($contacts as $contact) : ?&gt; &lt;tr&gt; &lt;td&gt;&lt;? echo $contact['first_name']; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;? echo $contact['last_name']; ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;? endforeach; ?&gt; &lt;/table&gt; &lt;? else : ?&gt; &lt;p&gt;Sorry, no contacts to show, bro.&lt;/p&gt; &lt;? endif; ?&gt; &lt;/div&gt;
Not this again...
I think the thing that saddened me the most was this: &gt;Issues of database server load can be mitigated via one or more of the following: &gt;File based caching of session information on the web server system (using standard PHP file reading/writing functions, ensuring that the file cache is updated whenever there are changes to the session information in the database store) ... file based sessions are the default for PHP, and "ensuring that the file cache is updated" is automatic.
i suddenly want to code php
wow i have worked with php 2001 and i am just now discovering this.
Haha a lot of entrepreneurs looking for "I can't pay you now man but when we make it big you'll have all the money in the world". Can I have that in writing? NO
Yeah, wow. I missed that.
No offense, but that loop is no good. From your controller action, try this: $userId = (int) $this-&gt;_getParam('id', 0); $field2 = $this-&gt;_getParam('field2', ''); $field3 = $this-&gt;_getParam('field3', ''); ... $user = Doctrine_Core::getTable('User')-&gt;createQuery()-&gt;find($userId); if ($user &amp;&amp; $user-&gt;getId() == $userId) { $user-&gt;field2 = $field2; $user-&gt;field3 = $field3; $user-&gt;save(); } Tip: use the magic getters/setters, if they're available . Also, be explicit ie stay away from _lazy_ loops ;) 
where were you 2 weeks ago ? it was a thread here. btw, it won't work if expose_php is off.
I seem to remember "fuck mod_perl" being in that image somewhere. Must have been another version.
It was 2002 or something when I first saw it.
daemontools
Yes I ended up doing "something like that" but there's a big problem when I try [updating the child tables](http://stackoverflow.com/questions/6336924/problem-updating-and-deleting-related-tables-with-doctrine-1-x) though
supervisord works well for this
 exec('nohup php process.php &gt; process.out 2&gt; process.err &lt; /dev/null &amp;'); (from http://php.net/manual/en/function.exec.php) is how I did it. We spawn Python web spiders and monitor them from messages they post to a MySQL table (and looking at their process id, um *ps -aux* and *grep* I seem to recall) Mix in a little ajax to query the status table (from a 'monitor processes' web page) and it all works quite nicely. http://stackoverflow.com/questions/222414/asynchronous-shell-exec-in-php hth
Use http://gearman.org/ I've been meaning to play with this for a while now, but i haven't found a good use case for it yet.. :)
Check out [proc_open](http://ca2.php.net/manual/en/function.proc-open.php)
I recently wrote [this up](http://www.myintervals.com/blog/2011/04/26/pdf-creation-using-deferred-process-execution-in-php/) for my company. We went through the same thing for PDF creation where we wanted the process to run in the background then serve it up when finished. If you're interested in specific information, send me a PM.
Gearman is a job server, it does not directly spawn and monitor worker processes.
proc_open is the way to do it. We use it to monitor any stderr output from the programs and throw exceptions if needed.
I recommend making a copy of your project, and generating the model from a schema.yml file. I think it will reveal a lot of helpful stuff you haven't seen yet. Within your models directory, it will keep all of the generated stuff in its own directory eg models/om/ . All of the classes in the models directory are meant to be customized since they extend the base classes in om/. (You shouldn't touch anything that's been generated.) You shouldn't be creating classes from scratch. Btw, I think if you change the language to english in your description, it will help.
Clearly, that image was photoshoped.
I know this Jesse, I already got the schema.yml and those classes were generated. I'm not overwritting anything if that's your concern. Maybe I'm not getting the concept but shouldn't I be able to do something like: $user = new Model_User(); $user-&gt;UsersHasPais-&gt;fetchAll(); I mean I'm just pseudocoding here....but shouldn't I be able to do something like that, given this schemas? Users: connection: 0 tableName: users columns: id: type: integer(4) fixed: false unsigned: false primary: true autoincrement: true ... relations: ... UsersHasPais: local: id foreign: users_id type: many Pais: connection: 0 tableName: pais columns: id: type: integer(4) fixed: false unsigned: false primary: true autoincrement: true pais: type: string(20) fixed: false unsigned: false primary: false notnull: true autoincrement: false relations: UsersHasPais: local: id foreign: pais_id type: many UsersHasPais: connection: 0 tableName: users_has_pais columns: id: type: integer(4) fixed: false unsigned: false primary: true autoincrement: true users_id: type: integer(4) fixed: false unsigned: false primary: false notnull: true autoincrement: false pais_id: type: integer(4) fixed: false unsigned: false primary: false notnull: true autoincrement: false relations: Users: local: users_id foreign: id type: one Pais: local: pais_id foreign: id type: one 
The child rows should already be loaded. eg $user = Doctrine_Core::getTable('User')-&gt;find(1); $paisId = $user-&gt;UsersHasPais[0]-&gt;pais_id; Here's a [link](http://www.doctrine-project.org/projects/orm/1.2/docs/manual/working-with-models/en#dealing-with-relations:retrieving-related-records)
I get this, cool. But is there a way to get all the pais_id's this user record has or should I loop it for that purpose? Or at least a way to figure out how many pais_id's I have so I can actually do the loop? =)
From the PHP source it appears this example would take the same amount of time. if (behavior == DIFF_NORMAL) { zend_qsort((void *) lists[i], hash-&gt;nNumOfElements, sizeof(Bucket *), diff_data_compare_func TSRMLS_CC); } else if (behavior &amp; DIFF_ASSOC) { /* triggered also when DIFF_KEY */ zend_qsort((void *) lists[i], hash-&gt;nNumOfElements, sizeof(Bucket *), diff_key_compare_func TSRMLS_CC); } PHP does actually sort the arrays prior to checking for comparisons so sorting before will just result in the sort being run through quickly. It then appears to just iterate over the arrays looking for differences. In my search I have found: http://adayinthepit.com/?p=180
i actually had the same issue and solved it with node.js
Everyone here seems to have a solution, but most of them break if you need to have one process monitoring all 3 of your spawns and getting the fastest ones back. For that, I would advise you use pcntl - it will allow you to fork off child php processes for each process you run, and will return that child to your parent when it's finished. This allows you to have 0 polling, ps'ing or ls'ing to determine when stuff is done etc; and if each child runs it's process with proc_open you can get all the details you need.
It doesn't, but I could see it being useful.. Especially for the monitoring side of it..
If you just send Kakserpom (the developer) a quick message on GitHub I reckon you'd get write access in the Wiki real quick. I wrote a document on enabling the ExampleWebSocket server, but yes, all the other examples still need documentation. https://github.com/kakserpom/phpdaemon/wiki/Documentation Also, if you follow the Installation guide there, I think you can get an example running in 15 min on Ubuntu, and that includes installing libevent. In either case, it can be done in under 3 hours. :)
You could take a look at this patch : http://wiki.apache.org/jakarta-jmeter/MysqlCollectorPlugin?action=AttachFile&amp;do=view&amp;target=JMeter_MysqlCollector.patch I have "fixed version", but would need some extra work, if i have time maybe i'll finish it up and put it on Github.
On a side note, you couldn't figure out Markdown for Github's README? You could pretty much copy the comments you have at the top of your file and it would look alright. http://github.github.com/github-flavored-markdown/
This is different or better than minify?
I don't think he's the author. He has a few other submissions linking to different github accounts and repos - besides, I assume pretty much every redditor has some knowledge of markdown after a couple of days, tops.
If someone can rewrite your source code, then yes, you're out of luck. Instead of making things hard for other developers, make things easy so they'll have a reason to use your class. Another alternative is that you provide a web service API for others to work with. Then you protect your source code and have strict control over what happens.
Is slide 33 a wish to kill Python ?
What exactly is your threat model? Doesn't it assume source-access?
This is basically a poor mans solution for a proper deployment process. You definitely get fewer HTTP connections going but you also get another PHP script running for each time you want to combine something. I've been briefly reading through the code and it doesn't appear that it even caches any of the requests. I suppose this is better than using a bunch of different javascript and css files, but you should really be doing this as part of your deployment process instead so that you still get the benefit of having static files.
What problem are you actually trying to solve here, exactly? What do you assume is going to happen that you don't want to happen? Why don't you want it to happen? Is the benefit worth the cost? 
Man, that's tough. I wanted to do something like this with C# a few weeks ago. I want people to be able to make plugins that can only call specific core routines--and that's it. I quickly learned their plugin could do anything that C# could (and Windows allowed).. me no gusta. As a possible solution, maybe you could perform a stack trace to determine which script the call is coming from. Then you could determine if the path was outside your "core" directory and simply *return false;* I dunno, never tried using it in this way...
Use [Class Abstraction](http://php.net/manual/en/language.oop5.abstract.php), visibility, and inheritance. 
if someone gained access to the source all bets are off. they could change what you were doing in any way they saw fit. Also, I agree with everyone else who's posted, that maybe you're asking the wrong question. That said, you could pass in some sort of API key to your class, which if it doesn't match the class won't instance(throw an error and die() the script or something). This could be defeated if someone gained access to your source code, but then anything could be defeated if they did, if you're not expecting to secure the code what you're asking for is impossible. I really suggest however you explain to others what you're really after, because any solution to the specific problem your asking about is going to be a bad solution, and probably not that secure anyway.
There also doesn't appear to be any real security. And it doesn't work with external includes. This should be run not as part of a client request, but as part of your release process. Notice all of the 'echo "FileExtensions set as $FileExtensions\n";', etc. I wouldn't touch it, honestly.
Yes. This. Visibility http://www.php.net/manual/en/language.oop5.visibility.php * Class members declared public can be accessed everywhere. * Members declared protected can be accessed only within the class itself and by inherited and parent classes. * Members declared as private may only be accessed by the class that defines the member. Also you could look into interfaces, which are similar to abstract classes if you don't want to provide any pre-defined methods to the developers in the class they need to construct (or implement). http://php.net/manual/en/language.oop5.interfaces.php
This is just an idea... **SessionLogin class:** try{ $coreDataClass = new coreData($this); }catch(Exception e){ //do something fantastic } **coreData class:** function __construct($instantiator) { //untested and you'd have to create the IllegalParentException class, //or use something else. if(get_class($instantiator) != "sessionLogin") throw new IllegalParentException(); //could also check a protected function if(!$instantiator-&gt;isMyClass()) throw new IllegalParentException(); } Edit: '$this', not 'this'
It doesn't work, because of: $coreDataClass = new coreData(new sessionLogin()); --- The only (hacky) way to do what robhidalgo wants is probably by looking at the stack trace in coreData's constructor.
Let us know how it turns out. Also, storing the paths in an array or something might be scary, a user script might dump $GLOBALS and add itself back to it, thus allowing access.
This is the best answer. The OP isn't going to ever be able to stop somebody from misusing his library/API. Even in C++ where a very similar kind of class access control facility actually exists (see: friend functions/classes), all you have to do is change a line in the header file and you can circumvent it. The best thing to do here, OP, is to document your code clearly and concisely. Explain to 3rd party developers why it's bad for them to directly use your database class. Those that choose to ignore your warnings are not worth your time or support, and their poor decisions will eventually come back to bite them.
I just threw this together. I think it should work on PHP &gt; 5.3 class CoreData { private $whitelist = array( 'SessionLogin', 'Tacos', 'Burritos' ); function __construct(){ $this-&gt;auth() or $this-&gt;notAuthorized(); } private function auth(){ return in_array(get_called_class(),$this-&gt;whitelist); } private function notAuthorized(){ die('No access to '.__CLASS__.' object'); } protected function testDB(){ $this-&gt;auth() or $this-&gt;notAuthorized(); return 'Hello World!'; } } class SessionLogin extends CoreData { function result(){ return CoreData::testDB(); } } class ClassNotAuthorized extends CoreData { function result(){ return CoreData::testDB(); } } $session = new SessionLogin(); echo $session-&gt;result();
There's nothing stopping ClassNotAuthorized from defining it's own constructor and never calling coreData's. 
PHP 5.3 is 2 years old.
How about something like this: class coreData { private static $able = array( 'coreData', 'sessionLogin', 'otherShit' ); private function isCapable( ){ return in_array( get_class( $this ), self::$able ); } protected function deleteTable( $tbl ){ if( $this-&gt;isCapable() ){ echo 'Deleting ' . $tbl . '&lt;br/&gt;'; }else{ echo 'Cannot delete. &lt;br/&gt;'; } } public function tryDelete(){ $this-&gt;deleteTable( 'bitches' ); } } class myCore extends coreData { function __construct(){ $this-&gt;deleteTable( 'information_schema' ); } } $myCore = new myCore(); $core = new coreData(); $core-&gt;tryDelete();
Correct, you would have to *authorize* each method you wish to protect with: $this-&gt;auth(); It's a pain in the ass, but it should work properly.
Oh, whoops! I didn't see the test in the other method. My mistake!
I'm not all that knowledgeable on the specifics, but could you not use an .htaccess file to prevent that?
You should make it cache the files after it minifies them and serve the cached versions. Update the cache like every 24hrs or something.
Nope. PHP runs on the server under the apache user. The .htaccess file only secures directories from being accessed over HTTP. You should pretty much assume that if someone can upload their own php code, then they have full shell access under the apache user account.
TIL Thanks.
What about [Wordpress MU](http://mu.wordpress.org/)? 
Even worse. Anyone who can install a theme or plugin can just add echo DB_PASSWORD; Another solution would be [suPHP](http://www.suphp.org/Home.html) but it looks messy, out of date, and not easy to automate.
there was something called lybris or lybrella or so, that uses one db scheme for all blogs. they just attached a wordpress id to all tables. very efficent. i used it ~ 5 years ago. cant find it right now. :/
Is [this](http://serverfault.com/questions/153614/common-php-setup-insecurity) helpful? 
http://forums.cpanel.net/f34/prevent-users-reading-other-webroots-68624.html
If you need functions that are protected so other classes can't overwrite them, use: final function blah() { }; If you need functions that are only visible to the class that declared it and nothing else, use: private function blah() { }; If you want classes that extend the base class to implement the function, use: abstract function blah() { }; //this must be empty.
With MU you, the administrator, have to approve plugins. You give users a list of them to use and if they are not approved, they do not go. They also can't change themes. And suPHP is amazing. However if that isn't your thing (since it's old) check out suexec and use the CGI version of PHP. http://alain.knaff.lu/howto/PhpSuexec/
This reeks of code smell. Consider refactoring your design.
I know, I'm saying anyone who *can* install themes or plugins can take over. Besides, I want my users to have full control over their site and use whatever themes they want (but also be protected from other users). I think I'm going to give suPHP a closer look
Then you should use suPHP or suexec with different home directories. That is the most secure way to do it. Ensuring that only users can access files in the home directory (not even groups) and nothing can get to it. Also it makes uploading files with PHP (themes, images, plugins) have the same permissions as FTP, which makes it so much easier for changes.
My comment only applies to a UNIX environment (Linux, Mac OS X, FreeBSD, etc). The safest way is to have a local user for every instance of wordpress you want to have. That's something all the major control panel do (Cpanel, Plesk, Direct Admin, etc). Basically each user also run its own instance of the webserver (apache, nginx, lighttpd). With apache it can be done with MPM. I've never done it by myself with apache though, so I could be misleading you. However for lighttpd and nginx what you want to do is have PHP built with PHP-FPM. You spawn one php-fpm instance for every user and you set the appropriate **umask** to 002. And then you recursively chmod each folder to only be read and written by the user. Once that's done you also recursively chown the folder to each user respectively. So in your case, you could create a user for every wordpress instance you want to run. On a linux box you issue this command : $ groupadd wordpressuser1 $ useradd -g wordpressuser1 wordpressuser1 You configure one instance of php-fpm by setting the appropriate user in a config file. Every php-fpm instance must be listening to a different port. Let's say we create /etc/php/fpm/wordpressuser1.conf : user wordpress1 group wordpress1 listen_address 127.0.0.1:9001 More info here: http://php-fpm.org/wiki/Configuration_File You then spawn the php-fpm processes: $ php-fpm /etc/php/fpm/wordpressuser1.conf And than you configure your webserver to have a fastcgi (assuming you're using lighttpd or nginx) listener for every virtualhost. If you have anymore questions feel free, or if I forgot or said something false. Hope that helps! Edit: umas 002 will ensure that every new files created by the users (be it using ftp, shell, php, etc) will be accessible only to the user, aka chmod 0700 if I remember correctly. Edit 2: I just want to let everyone know that the first thing I do when I use a new shared host is to try &lt;?php system ('ls /home'); ?&gt; If that works and displays the content, I check if I can do it for the websites hosted on the server. You'll be surprised how many times that happened to me.
Wow, great idea! What kind of performance hit to you take from running multiple instances of lighttpd? A hundred instances running is a lot of cycles being wasted and programs sitting in ram if each site only gets 15 hits a day. I do like the idea of multiple PHP threads though, it might actually speed things up and you could allocate more important sites more processing power, interesting... I might get 2 servers, set each one up differently but with the same data, and swap them out to see which config does better in a production environment.
httpd-itk
So basically....you're just a hosting company?
The newest versions of WordPress have multisite functionality integrated.
all the interesting stuff at the end of the talk is missing :( 
Well, uhm, I don't know if it's good practice but; I run Apache with suPHP for backend and Varnish for frontend. Every user gets their own chrooted account (shell: rssh or scponly). 
Your advice is outdated. PHP-FPM is now included in the PHP core project and no longer uses the XML configuration files you are referring to. It's also not necessary to spawn a new FPM instance for each user as pools are supported. So you might have a website1, website2 and website3 pool all running as different users, configurations, etc ... (all this being in the same configuration file). umask 002, might be a little lax. I'd opt for 027, so users can do everything, group can read and world gets nothing. With that in mind, a good setup for users would be: 1. Have a website1 user with www-data as the primary group. 2. Run Apache/Nginx as www-data:www-data 3. Run a FPM pool as website1:www-data This way the server can read the static files (your css, html, etc ...) and PHP can create files and directories as it needs to. 
Ahah I didn't even realized that I sent a link to the xml configuration page of php-fpm. I was just too lazy to ssh into my server and copy the config files. Could you explain me what you are referring as to user pools? Are you talking about the ability of php-fpm to dynamically spawn more instance if needed? The only down side I see having the server running a group owner means that in the event of a vulnerability related to the webserver itself (cgi , ssi, etc) you'd be able to read the other user's files if they are group-readable. Edit: Alright nevermind, just took my first slip of coffee and I understand why the webserver needs a way to access the static files. My bad.
Actually you only have one instance of lighttpd running and listening to port 80. What you have is a fork of several php-fpm workers that are idling to have a new cgi request. As I stated on my comment to enkrs, it is possible to have php-fpm to dynamically create and remove php-fpm workers all depending on the load of the website. 
&gt; Could you explain me what you are referring as to user pools? Are you talking about the ability of php-fpm to dynamically spawn more instance if needed? Not quite. The FPM config file has pool definitions like this: ;;;;;;;;;;;;;;;;;;;; ; Pool Definitions ; ;;;;;;;;;;;;;;;;;;;; ; Multiple pools of child processes may be started with different listening ; ports and different management options. The name of the pool will be ; used in logs and stats. There is no limitation on the number of pools which ; FPM can handle. Your system will tell you anyway :) ; Start a new pool named 'www'. ; the variable $pool can we used in any directive and will be replaced by the ; pool name ('www' here) [www] ; Per pool prefix ; It only applies on the following directives: ; - 'slowlog' ; - 'listen' (unixsocket) ; - 'chroot' ; - 'chdir' ; - 'php_values' ; - 'php_admin_values' ; When not set, the global prefix (or /opt/php-5.3.6) applies instead. ; Note: This directive can also be relative to the global prefix. ; Default Value: none ;prefix = /path/to/pools/$pool ... configuration for each pool. Which then looks like this in htop: [http://img7.imagebanana.com/img/as6vqo50/Selection_010.jpeg](http://img7.imagebanana.com/img/as6vqo50/Selection_010.jpeg) So each pool could have static or dynamic process spawning, which is what you're talking about.
Oh that's nice, I really didn't know about that. That would be really useful on a shared environment!
TIL!
Hi Terrence, I'd like to ask a few questions if you don't mind - they're fairly general so I'd rather a post than a PM/Email. 1. What will the focus of the site be? Will it mostly be the ecommerce, social or media aspects? 2. Will this require relocation to Florida? 3. Is the software built on top of a framework, or is it custom? 4. Where is the development firm based out of? Thanks, and good luck!
Do you have a business plan? What's your business model? How many employees do you have? 
[/r/forhire](http://www.reddit.com/r/forhire)
&gt;Q4. Where is the development firm based out of? &gt;A4. India **This worries me**, I've had terrible experience dealing with projects when the owner outsources the big picture and then hires in house to "fill in the details" (read: fix all the mistakes) I feel like outsourced firms don't care about application architecture and maintainability, they just want to get paid and move on to the next project.
Somehow I don't share the sentiment. Its not just India, most of the outsourced development I've seen fits this scenario, offshore or not. An in house developer is going to care more about maintainability than someone who is looking to drop the project as soon as possible.
You should be prepared then for the possibility of one user taxing too much the DB or the CPU with a bloated or badly coded theme.
Come report back after you are in production. Goodluckdawg, LLC
I don't want to bash on Terrence - I know it's difficult to find good help for a new business, but I do have to agree. I currently work at an ecommerce company that sells online courses. The owner outsourced the development of the application to a Canadian firm, who turned around and outsourced it to an Indian firm. They took far too long to get it working (1st version took a year, second version took another year), and when both versions were delivered I'm told months would pass by that very important bugs were not fixed. That's why they brought me on board and fired that development team. The code is shitty spaghetti PHP 4. There's a million files thrown seemingly randomly about. There was very basic security built in. The database is a nightmare (atomic? What's that?). The comments are made up of shit like `// edited by lakshmi` (actual comment). But, it's profitable, so the owner didn't realize how bad everything was. So now I've been rebuilding from scratch, and unfortunately I have to build *around* the existing application so I don't break anything. It's a truly horrible mess... but I really can't blame the owner because 1) He's not technically savvy, 2) When the company started there wasn't money to throw at a good development firm, 3) The site's very profitable, if slow and buggy.
I hate to be negative because I love seeing job listings here. But you are offering: * No Telecommute * The chance to support Indian code with no local guidance. * Low pay. * Suppdog? And you are seeking skilled developers. Good luck mate. 
Terrence, I'd like to honestly respond to your answers, please don't take it as me bashing on you: 1. You may want to target your specific area for job applicants instead of using Reddit. We're so spread out that it makes almost no sense to use this site for job hunters unless you're willing to accept telecommuting. Also, since you're a non-profitable startup, you can't offer relocation assistance for those of us who would potentially be interested in joining. 2 + 3. A custom framework usually triggers alarm bells, unless it's from a very talented development team, but then you mention India which sounds off all the alarms in many developers' heads because although there's many, many talented Indian developers, they're usually not working for outsourcing companies. ie there's a very real possibility that the application you're getting will be a jumbled mess that will be extremely hard to work with. That said, bad code is offset by having a profitable website, and your development team may very well be in the minority in that they are actually talented. I wish you the best of luck!
Awesome! Glad everything worked out for you :)
Hate to say it, but I doubt you'll get much response. The honest answer why you'll probably have a hard time attracting quality talent (it might be offensive, but is intended to be helpful): * The company name does not sound legit. "Suppdog" and in "What's up dog" is a pun-ish type joke. Strike one off the bat for most. * Your business plan doesn't sound unique. "A internet shopping mall" Like amazon? Ebay? A simple webstore? Any programmer here can launch a magento site in under a day with full functionality on their own, why would the want to join your organization (real question). That's where the uniqueness comes in. Since you can't pay much, something (the coolness of the project) has to intrest the coders. Strike 2 and 3 * Your online presence consists of a empty wordpress blog and a blank linked-in account. In other words, what's your reputation as a business builder? Strike 4 * And finally, it sounds like you're a bit in love with the CEO title and thus either a MBA type (Caution: ego, aka Winklevoss), or your 1st go round in web startups. Either way, these are huge red flags to the experienced coder. Strike 5 for the experienced. Just some honest thoughts that I hope you take to heart and adjust your recruiting strategy. If not, it's going to be a uphill battle. All of this is one man's opinion. --edit-- You'll probably have better luck on odesk or rentacoder.
Agree with all points. Also, I hate magento. That is all. 
I'd have to take off a point for using the word "ninjas" too. I'm so sick of seeing ads like this.
"Ninja", "Rockstar", "Dream in...", "Hacker", "Warrior", etc - as soon as I see any of these I'm immediately out.
Like I said, if you want quality coders, you'll have to fix the above.
&gt; I cannot reveal too much of what my business model is. This seems to suggest that the interval between now and 4Q11 is sufficient for any random interloper with a vague summary of your business plan to undermine your company's viability. That to me does not speak well of future prospects. At some point people are going to know what you are selling and how you are selling it. And one quarter after that you're apparently dead in the water.
The problem with using words like "ninja" and "rockstar" is that they've been so overused to the point that they are completely meaningless (you just admitted you used that word without even knowing what it meant). It's also, like you said, a trendy buzzword, and buzzwords are usually employed exclusively by marketers. Developers and marketers often have a strained relationship, with both unable to understand the other. So it's a dead giveaway that the job posting was written by someone with no development experience (or at least it wasn't vetted by a developer who might better help you understand if your posted responsibilities/requirements are reasonable and clear). Everyone wants talented candidates, so it's a bit redundant to say you want "ninjas" or "rockstars." And, I'll admit, when I see it, I automatically assume it's a business that is looking for developers who are willing to be overworked (and sometimes undercompensated) without complaining. But maybe that's just me.
&gt; I believe the lead developer is an IIT graduate, whether that means anything or not. It's good for his marriage prospects, but doesn't have a high correlation to the expected success of your business. &gt; I was going to actually seek out University of Miami Comp. Sci department, but I thought I would give reddit a try since I love this site so much. I suppose it's not the best place but hey, why not, right? I have to say, you may have better luck at the university. The problem you're running into here is that many of the people in /r/php have been tossed around the startup seas for a while now, and have developed instincts about what does or does not seem like a promising opportunity. Your posting just happens to contain a lot of things that look like warning signs. It's entirely possible that your company will be a huge success and that any developers who join you will ride along with you to the top of the world. You're just not necessarily making it look that way. For me the most discouraging thing (after the outsourced India code) was that condescending reply about 'I am the architect of this shopping mall, that is to say I provided the "blueprint" for this mall, and then I hired a construction firm.' I really don't recommend talking to tech people that way. 
Is your site up and running, and pulling in revenue? If not, how can you claim that the business is profitable? It is hypothetically profitable.
I'm not saying it's the truth of the matter, I am saying it's the implication which you are transmitting to your readers.
Right, I'm saying that your analogy is something that I would use with my 5-year-old nephew. Most programmers would prefer to be spoken to directly.
At least he didn't say it was going to be the next facebook. 
&gt; yes there will be local guidance After development has completed. You should have had someone in the process doing code reviews the entire time. No software is bug free I don't care who did it. **If you're not testing today you're not going live this year.**
What's to prevent me from passing an authorized class into the sensitive function call from within an unauthorized class? class unauthorized { function me() { $authorized = new authorized; core::sensitive($authorized); } }
I see a great competition coming between ZF2 and Symfony 2.
Why the hell would you want to fuck with encapsulation in such an obscene manner?
This is more important than the truth.
This isn't very constructive, but I can't help myself.... if (is_object($obj)): if (is_file(dirname(__FILE__).'/'.get_class($obj).'.php')): return true; else: return false; endif; else: return false; endif; ...really bugs me, unless it's just stub code.....but why not this? return (is_object($obj) &amp;&amp; is_file(dirname(__FILE__).'/'.get_class($obj).'.php'));
For this to work you just need to know which page you're currently on. If you're including your page into a template then you should have a variable that contains the page name, so when you're writing your menu include you need to check if that variable matches the menu link you're writing, and if it does, add your "active" CSS class.
thanks for responding. I followed a tutorial and basicall did what you just said. However, it ended before I figured out how to display X page on my index page by the menuLinkid.... code is below in case you want to see it. &lt;?php $index ="hover"; $about_body ="hover"; $portfolio_body ="hover"; $services_body ="hover"; $contact_body ="hover"; $menuLinkid = basename($_SERVER['PHP_SELF'],".php"); if ($menuLinkid =='index'){ $index ="active"; } else if ($menuLinkid =="about_body"){ $about_body =='active'; } else if ($menuLinkid == "portfolio_body"){ $portfolio_body =="active"; } else if ($menuLinkid == "services_body") { $services_body =="active"; } else if ($menuLinkid =="contact_body") { $contact_body =="active"; } ?&gt; &lt;div class="menu"&gt; &lt;ul&gt; &lt;li&gt;&lt;a class="&lt;?php echo $index; ?&gt;" href="index.php" &gt;&lt;span&gt;Home&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="&lt;?php echo $about_body; ?&gt; "href="about_body.php"&gt;&lt;span&gt;About us&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="&lt;?php echo $portfolio_body; ?&gt; "href="portfolio_body.php"&gt;&lt;span&gt;Portfolio&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="&lt;?php echo $services_body; ?&gt; "href="services_body.php"&gt;&lt;span&gt;Services&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="&lt;?php echo $contact_body; ?&gt; "href="contact_body.php"&gt;&lt;span&gt;Contact us&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class="clr"&gt;&lt;/div&gt; &lt;/div&gt;
Ah it looks like you're using two '==' inside the { } parts when you should be using a single '=' for assignment, ie. `$about_body = 'active';`, and since you're probably wanting to append to that, you should make it `$about_body .= ' active';` to get the expected behaviour. Try that out and see if it helps :)
well, I want to assign it on my index page. So when whatever tab is active, it displays the php in the body of my index page. It may not make sense what I'm saying. I'm new to php,and having includes I can see, but I want the content div on my index page to include the includes that are selected "active" from my menu.... if you can make any sense of the shit I just wrote lol.
I guess what I need to do, is on my index page I need to "get" the active ID and display that whatever.php there on the index page.. I should probably RTFM instead of trying to manipulate shit.
Oh, so the code above, which file is that in? (menu.php?) If I understand correctly, you should have a .php file for each page you have, and so each file should look something like: &lt;html&gt; &lt;body&gt; &lt;?php include 'menu.php' ?&gt; &lt;div class="content"&gt; Page content is in here. &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; This way, when a page is opened, the menu code is included in, which looks at the page name, and changes those classes according to which one is active. It should then continue to output the content as normal. Sorry if I'm confusing something here but this seems to be what the menu code is expecting. Perhaps what you want is a single template file (ie. index.php) that includes content based on what argument is passed to it? (ie. index.php?page=home), if so I can provide some code to do that too :)
yes. The code above is in menu.php which is included on my index page. I also, have the footer, header.php etc included. My actual content pages - about, services, portfolio are just linked to the menu. They work, but go directly to the page. What I want is for it to display with an include? on the index page depending on which tab is active..
It sounds like this is the sort of layout that you want, so try and modify this one to suit, hopefully the comments will explain it well enough :) http://pastebin.com/embed_iframe.php?i=s5EZCpkN
I think so. However, I think I need to hit the books. It may just be easier to just put the includes on the other pages.. 
Made [this post](http://www.reddit.com/r/PHP/comments/hcejf/how_to_turn_off_automatic_quotes_inserting_in/) a month ago and submitted a bug for it. Now it should be fixed when 7.1 is released. Hopefully they fix the site wide find &amp; replace which got broken in 7.0 as well. Have had to go back to 6.9.1 for the meantime.
A consultant recommended Zend Framework to my team at work and we've moved to it, but really most of the time we end up writing our own implementations of stuff. The reasons are usually because the Zend ways of doing things are bloated or poorly documented or lacking examples. Zend config is one of the few remaining bits of it that we still use and here's this post that basically says "hey you should write your own implementation". I'm not sure if it's funny or sad.
I've been optimizing Magento performance for a few years, and I've never changed the zend cache settings. Are you using apc and prefork? 
Yeap. Though I am not sure if you are referring to apc as opcode cache (which we are) or as the first of the two levels that magento can optionally use (which we are currently not)... Could you do me a favor and just do a ls -R | wc -l; and a du -sh . ; while in the cache directory to give me a sense of how many files you have and how much space they take up? Additionally we are in the cloud (via amazon ec2) which IIRC usually results in worse IO disk access then is normal. 
Zend_Cache_Backend_File can be pretty significantly slow up against its siblings, Apc/WinCache/XCache/etc. The volume of file IO operations is surprisingly heavy. I'm interested to see how Magento is implementing Zend_Cache, though. 16 directories? How much is it caching, and how big are the caches?
That's my thought process. There are quite a few metadata files that I presume it reads and writes often. You can choose how many "hashed_directory_level"s it caches. By default this is 0 which would imply all cache files are dumped in one directory. A level of one would imply you have 16 directories (0-9,a-f) and I presume it takes an md5 hash of the cache key to distribute them accordingly. A level of two would imply each cache directory itself has 16 directories (0-9,a-f). We currently have as many as 80,000 files. So currently that is 5000 files on average per directory. I'd assume that would not be that onerous especially since we are on a tmpfs mount. I may be completely off base. Though I do know that certain operations (like clean by tag) iterates over all files and having less cache files makes a huge difference. I was going to experiment by increasing the cache level. This is just a tough thing to reproduce because using ab for instance doesn't drop cookies and such to get the different kinds of cache (and sessions) working.... I'll probably end up using a two level cache like APC w/ DB or APC w/ File but I thought I'd draw on reddit's experiences. 
80,000 distinct dynamic files?! Well, I can't say for sure, but I think just about _any_ cache is going to have a metric assload of misses for something that significant in volume. If any of that is static content, though, we're talking a different ball game entirely.
Sorry, I wasn't clear. The cache can get as many as 80k files in it over the course of the day and quite a few (&gt;30k) of those are internal metadata that zend cache uses. I am just trying to see if breaking that up into more "chunks" would help at all. I know when you have lots of files in a linux directory certain operations are impacted but I don't know if it's exacerbated by having multiple apache processes requesting files from the same directory... 
Sounds a little like sour grapes ;) you didn't want ZF and so you'll never be happy with it. It is very modular, so just plug in parts of other frameworks (that you do like.) What parts did you need to rewrite? Did you release them into the wild for inclusion in the next release?
Very interesting, did you benchmark any of the yaml implementations? http://prematureoptimization.org/blog/archives/39 I was always under the impression that the class autoloader (and file finder) was the real slow point for ZF 1.x. Are you seeing different performance? What profiler were you using? XDebug?
Me again. Glad that the strace thing is helping get to the bottom of it. tmpfs is a memory based system. You can't get any faster than that, so your almost definitely not Io bound. have you tried taking a copy of the site and moving it to some non-Amazon setup for testing so you can at least do some side by side comparisons? 
I don't get it. He converts his ini into an array, then passes that array to Zend Config? Why use Zend Config at all then? It seems the only justifcation for is being able to use two different notations which seems well... who cares. Just do Zend_Config::toArray() and store the array in session or APC.
the zend autoloader is a bit extreme for what is essentially: $file = str_replace('_','/',$className).'.php'; require_once($file); But there are many things in Zend that do so much to achieve so little.
Why not just feed Zend_Application a cached Zend_Config Object or even just an array like it converts the Zend_Config Object to? 
The only I've seen is related to the reading of the cache files, and only on Windows, so this may not apply to you at all. The root cause of the issue has to do with 2 things: using chmod in PHP on Windows and the user the file is created under. When testing this locally from the command prompt, the file was owned by the Administrators group, not my account. So when the file was created with chmod 600, I could not access it after creation, even within the same command prompt. However if I used chmod 660 or no chmod at all, I was able to access the file without any problems. It appears that the chmod use within Windows somehow messes with the way Windows handles permissions and inheritance. Furthermore, the command prompt creates the file under the Administrators group even though my account opened the command prompt. There are 2 possible solutions: Remove the use of chmod from the Zend library or use 660 for chmod for files and 770 for folders. We decided to change the chmod to 660 and 770 respectively.
We have also written a custom autoloader to simplify the Zend implementation. One of the problems with Zend is there are many exceptions to the class/path translation - e.g. controllers and models to name just 2.
As I explained in the article, we have an existing codebase using Zend_Config throughout, so the first step was to speed up the generation of that Zend_Config. The second step was then to create a custom config object that has the same (object access) interface as Zend_Config does but also supports array access so we can transition towards a plain array.
That is the plan longer term, however Zend_Config is used beyond just instantiating the application. It is used to store config across the codebase, hence using an object which supports object-access and array-access notation allows for a gradual transition towards an array.
XHProf was used for the profiling here - it has a lighter impact on performance than Xdebug tends to. Personally, my opinion of Zend is that it tries to be too many things to too many people, and that flexibility means a compromise in performance. In an enterprise environment, where the use case is well defined, we have opted to rely less and less on Zend to gain performance. Config was just one of these areas, but was significant.
fair enough
I see, I was just yesterday reading the source for Zend_Application and Zend_Config seeing what is was actually doing so it's weird for me that this article showed up today. 
I'd like to recommend you use a switch statement instead of all of those if/elseif statements: switch($menuLinkid) { case 'about_body': $about_body = "active"; break; case 'portfolio_body': $portfolio_body = "active"; break; case 'services_body': $services_body = "active"; break; case 'contact_body': $contact_body = "active"; break; }
A few built-in functions/methods that might cause issues: * [`spl_autoload` family of functions](http://www.php.net/manual/en/function.spl-autoload.php) * [all `Reflection` classes](http://us2.php.net/manual/en/book.reflection.php) Also, a called script will have all the same permissions as the script which calls it. Meaning the plugin will have full read/execute privileges to all parts of your own application. There is no mechanism in PHP to prevent this... though maybe if you [change the system user](http://php.net/manual/en/function.posix-setuid.php) before calling the plugin script and then change it back once done... but I don't personally know what exact effect this would have, and it's a lot to juggle in both the scripts and filesystem permissions.
The workaround for the author's second problem is to use `__get()` and `__set()` methods. These methods can be used as property access control, including creation of new properties from the outside scope. But, if anyone knows how to access the now duplicate `$secret` property from within the object ($this scope) in author's example, do tell.
Smoke weed
Thanks for this one. I love it so far.
By offering this upvote, I do hereby wish to reward your creativity. 
I'd be careful doing this unless you really know what you are doing (and if you did, you wouldn't be asking). When I was learning about this sort of thing I did exactly this with Apache and PHP FastCGI, because I knew I didn't want users to have access to other directories. I quickly learned that the server wanted to spawn 2 to 3 processes for each Drupal install, and with Xcache enabled, those processes would hit upwards of 90MB each. That's a lot for a site that gets almost no traffic.
It may be in PHP Core now, but I think its more complicated than that. I run a lot of Drupal 6 sites that won't run on php 5.3 (core is compatible, many contrib modules are not) and patching php 5.2 to support PHP-FPM is non-trivial compared to selecting what version you want from a control panel. I know a bit, but not enough to comfortably patch or compile php from source.
Wow, I did not know that. It is common for apache to blow up like that? I work with apache since serveral years, and I see a lot of things, but nothing like that. How that could happen? Due misconfiguration or malfunction? Edit: My english sucks. 
Great!
I also did a little unscientific benchmark of a baseline "Hello World" application at the concurrency level of 50: * **PHP 5.3 with APC in FPM configuration** - 1600 #/sec. * **PHP 5.3 with AppServer via (uncompressed) HTTP** - 1500 #/sec. * **NodeJS 0.4 ** - 3500 #/sec. What is interesting however - a production app. on PHP with FPM falls to around 40 #/sec, while the PHP AppServer can produce 100 #/sec. Meanwhile node.js runs a production app at 1200 #/sec. It seems that for a bigger apps the AppServer's preloading and caching at the low level does indeed offer a speed boost. Keeping an eye on this one. 
There's been a lot of work lately in getting more out of PHP. Facebook's HipHop and application server ideas like this will keep PHP a viable technology for large scale applications.
If it looks like a company made this, its not. I'm 20 years old and I'm a freelance developer who has been making websites since I was 10. I'm not trying to claim I made Tiny MCE. I'm just trying to sell my services and make a couple bucks. I'm weighing the pros and cons of releasing it open source. The best features in this is that you can drag and drop to sort the menus and pages. Menus can be nested inside eachother. When a menu is deleted it does recursive deleting on all the menus and pages. Everything is AJAX. Does anyone have any pointers on what is the best license to put on it? Or if I should put it on Github or Source Forge?
Can anyone tell me an example of how you would use this in the real world? How does it work? thanks.
IMHO, I would release it as open source. The reality is that you wouldn't make much, if any, money from selling it as a closed-source application. With Wordpress, Drupal, online services such as Posterous, Blogger, etc. the market for CMS systems is extremely saturated and there is very steep competition in all directions (complexity, simplicity, features, etc). The benefit of open-sourcing it is you get your name out there. I have been on many interviews where people require to see your open-source contributions. And, there is nothing preventing you from contracting yourself and helping clients to integrate this into their systems. You could still make money by open-sourcing it, but you're also giving back to the community, getting feedback for your code quality, and perhaps getting others to contribute and help grow the product.
Thanks. I wouldn't be selling it by itself. It would only be integrated in sites that I build for people. I think you have some good points. Definitely some good reasons to open source it. 
It doesn't look like a big company made it. In fact there's not really much you can tell from the distracting presentation video except that you can maybe create pages and content in a rich text editor. If you want this project to thrive you'd probably have the best shot at it by open sourcing it.
lol thanks. Big was probably an unnecessary adjective.
You've got a good start. Keep adding features. Bring more developers in. Open source it and you can maybe make some money on support or 'enterprise' versions.
Your video shows a small part of what people may want to do. You have to realize that there are some complex things that people want to do without any programming. Does your cms have structured taxonomies or categories ? How about custom 'types' of content with custom fields ? Making a CMS is a common thing for a web application developer. I've been coding professionally for about five years and I'm thinking about making another CMS with ZendFramework and an ORM, just for fun.
It might not look like much but it has a directory structure. Menus can be nested inside eachother and it does recursive deleting. It has drag and drop sorting. Everything is really clean with AJAX. Its simple enough so any developer can integrate it into their designs without learning how a complicate CMS works like Joomla or Wordpress. I don't know if that changes your opinion or not. I just quit my job so I was trying to make a flagship product for my "company".
It does. You should highlight those features in your video instead of stock techno music and rotating screen caps.
There is a column in the database called "special". The developer needs to set up the special columns manually in the database. Pages that have a value in the special column can not be deleted. I set it up so the value in the special column is the name of a file that gets included into the page. So you could set "contact.php" as the value for the contact page. 
The closest real world example would be Java Servlets and e.g. Jetty. In a nutshell - It allows you to have certain parts of your app. to stay in memory across the requests. For example - when you run your code in a standard environment, it gets parsed on every request, while in the case of AppServer your classes, configurations or libraries are only loaded once (easily cuts 20ms+ on every request), and your DB connection is cross-request persisted (another 5-10ms). Now this does require you to model the application a little bit differently (compared to traditional PHP app.), but it's well worth it. Check out the [example](https://github.com/indeyets/appserver-in-php/blob/master/examples/new/MyApp.class.php)
Just among the small things I look into a CMS and can't find out through the video: feeds for posts, categories/tags, image galleries, multiple users support, security, easy meta tags editing, templating. Besides the editing these are the basics I can think of.
Should post to [Jobbit](http://www.reddit.com/r/jobbit). On another note: Those fake case studies are pretty funny and blindly obvious.
Yeah. It definitely needs some plugins for an image gallery and meta tag editing. You can create as many nested menus as you want so I guess that is the categories. Its not a blog so I'm not planning on adding tags or feeds. Thanks for the feedback though. Maybe I'll release it open source when these things are added.
thanks, did not know about this subreddit
Yes, I'm actually working on something just like that. My employer uses enterprise software that comes with a lackluster web module for sales that only lets you change some styling. It's not very extensible at all, so using cURL I can make a sort of API for it and do some more advanced tasks. cURL does most of the heavy lifting as far as communication with the server is concerned: connecting via SSL, handling cookies, etc.
Also check /r/forehire - looks like a fun gig, if I weren't so swamped this week I'd definitely get in touch. Thanks for thinking of Reddit first :)
Respectfully, [AutoMySQLBackup](http://sourceforge.net/projects/automysqlbackup/) is much better.
thanks so mucho to both of you for providing this info. If AutoMySQLBackup has an option to send those daily backups to an email account, that'd be my dream come true; I've always wanted but never had the time to implement this on my databases my plan is to receive daily backup emails and delete them immediately on a Gmail account, so I have 1 month of backups in the trash, and additionaly send 1 weekly email with a different title that's not caught by the filter to have a weekly more permanent log; that way Gmail's storage should be more than enough : )
Or you could just use [SyncBack Freeware](http://www.2brightsparks.com/download-syncback.html) to download all of the backups made via FTP daily.
That's what I did: http://andrewburton.biz/wp-content/uploads/twitter.php.txt
Why thank you good sir.
I haven't read the documentation, but that software seems to only be automatic if my computer is on. I also very rarely use windows; less than once a week. setting a cronJob in the server to send databases to email automatically at strategically chosen low traffic hours seems a much better strategy. still thanks for sharing and i'll look into it
If Dropbox fits your needs, just use that? As a professional developer, I find Git to be extremely versatile. There is a steeper learning curve than, for example, Subversion but it is also incredibly more powerful than Subversion.
I actually prefer source forge for hosting code, but just the whole process involved with git, its like going WAY out of your way for...?
Git init Git add . Git commit Git push origin master Git is really not that bad. There are a ton of problems that crop up using dropbox as a VCS. Also, if you ever want to do php in a professional environment, you will need to know or learn a VCS or 2. Take a night, work through any of the free online git resources, and you will be set. 
I take it you don't remember CVS or SVN then?
A good GUI client helps a lot. 
I understand its value I suppose, but im still wondering why it has to be so complicated. 
I used the feel the same way about git, but I feel like although the learning curve is pretty steep, the payoff is worth it however far you want to go. Purists will deny this, but as far as I'm concerned if you're working alone you don't even need to branch. In addition to the four commands mitchellhislop listed: git init git add . git commit git push origin master ...I'd recommend learning: git log This will summarize what you've done lately. Learning how git checkout works will open up a whole world of "undo" options and ultimately make you much more confident in experimenting. That fact alone has made me a better programmer. And a couple others I really like: git commit --amend -m 'the message you forgot to leave on your last commit' git diff ...will show you what you've changed since you last committed. It's true that git can be a pain, but it's really worth it. And everyone seems to be using it now, so it's really the path of least resistance. Plus there are metric tons of code on github to learn from.
Using Dropbox for version control is like using rock as a hammer. It sort of works but that's about as close as it gets.
Because things can either be simple or powerful but rarely both. Most versioning systems are made for multiple developers working on the same codebase. If you basically only want to keep track of your own code changes you could try using subversion. Then if you are using windows you could use a gui tool like tortoisesvn (I believe there is a similar tool for mercurial) to add and commit files to your project. My biggest issue with learning git was trying to wrap my head around the fact that I now had a local repo that I could decide (or not) to sync with remote. There are many tutorials on it that have been useful to me. And it really does seem to be great at merging which has always been the hard part of version control on teams... To me the hardest part 
This. Best answer.
haha, thats a pretty good analogy
What do you find complicated about it?
I like to put the following in &lt;projdir&gt;/.git/hooks/post-commit: #!/bin/bash git push --tags origin HEAD This will automatically push commits to the remote server, much as cvs and subversion do.
i really wonder the same thing. hg is a bit nicer in my experience but it sucks having to know both and switch between them. and even that one im sure is imperfect. i've used both and i do regularly and i just wonder why they can't be more intuitive. i definitely am still learning things about both several months (or in the case of git, 1.5 years) on. here is my git config: [alias] st = status ci = commit co = checkout br = branch [color] diff = auto [push] default = tracking [core] excludesfile = /Users/me/.gitignore [diff] renamelimit = 0 [merge] conflictstyle = diff3 [rerere] enabled = 1 
Using Subversion usage as an insult. You people are *really* low. The idiotic fanboyism towards the OS X/git/MacVim flow is astounding. 
Sourceforge isn't a version control system, which one do you use at Sourceforge.
By the same token, you could consider Linux complicated, but would be crazy to not see the value in it. Yes, not everything is magic and GUIs, but not everything should be. The parts that really shine in a GUI are already there with git-gui and gitk (quickly analyzing changes and adding them to a commit, viewing which files have merge conflicts) and the rest is in the CLI where it belongs. In fact, if you use git-gui, you can get by on simply knowing git pull and git push (aside from the init commands, which are only run once per environment). Look up _git rebase_ if you want a cleaner merge tree. That's really all there is to it.
I hate to think about the amount of mornings I wasted fixing broken SVN repos. By the way, what do you find better about SVN than GIT?
I can tell you've never tried Git. To you I pose these challenges: a) name one thing that can be done with SVN that can't be done with Git OR b) name one thing that can be done with SVN _faster_ than with Git OR c) name one thing that can be done with SVN _in fewer commands_ than with Git Try out git for a few weeks. Once you come across things like _git stash_ (which takes [4 commands](http://stackoverflow.com/questions/1554278/temporarily-put-away-uncommited-changes-in-subversion-a-la-git-stash) in SVN btw), you won't ever want to go back.
It's simple and it wants to be simple. Code goes in, code goes out, branch it, tag it, etc. Git wants to be complex. Git wants to be the cool tool that everyone uses for web dev. &gt;broken SVN repos Faulty Subversion, faulty hardware or faulty developers?
I personally don't find GIT any more complex than SVN. You're just used to SVN, that's your comfort zone, so you find it easier, I used to find it easier than GIT too, but then I used GIT for a week and realised firstly that it's very simple and secondly the benefits over CVS/SVN are huge. 
Do I need absolute speed? No. Do I need the ability to store some revision and then merge back the changes at a later date? No. I'm already using Subversion. I don't need to switch pointlessly. I might have used Git at first, if everyone pushing it wasn't so "THIS IS THE BEST THING EVER AND ALL OTHER THINGS ARE TOTAL CRAP", because that's not true of anything at all when comparing products.
Well, if you don't need or want these things, then you're obviously fine with SVN and should stick with it. But some of us find them convenient and so we use Git. I was simply demonstrating that it's not all _"idiotic fanboyism"_ and that Git really does have some interesting features that SVN lacks. EDIT: And if you're familiar with git, there isn't really any reason to _not_ use it for new projects over SVN. But if you're locked in with SVN on old projects, it's completely understandable that a switch might not be worth it.
I still find subversion to be a much more straightforward tool. git has an advantage or two, but the curve to be able to use it effectively is fairly steep. For instance, "rebase" confuses even people who use git daily. See one of @tswicegood's talks on git and he pretty much refuses to even discuss the command because it turns audiences into pudding.
Thanks!
So you're saying you illogically use SVN even though it's slower and has less features, and everyone else is the 'fanboy'?
No, I'm saying it's impractical for me to switch to Git at the moment, and Subversion has everything I need (as I said, I really do not care too much about speed, unless it's really slow), and that I didn't use Git in the first place because I didn't like the people pushing it and the way their arguments were set.
&gt;and that I didn't use Git in the first place because I didn't like the people pushing it and the way their arguments were set. So, you don't use GIT because of the people who use it...not for any logical reason based on its features?
Most of SVN is overly complicated. Getting SVN to ignore files is chaos. With GIT, one file .gitignore with the files listed each on a line. Simple.
No, it didn't strike me as something useful because the argument of using Git had been put so illogically.
Perhaps it was your interpretation of the facts that was illogical.
Git camp: "Use us! We're ten times better (no neutral statistics quoted?) and we have many more features! Plus, TORVALDS TORVALDS TORVALDS" Subversion camp: "Lots of people use us. It's simple." Git is the conversionist version control system. Few people seem to spend time actually using it and seem to circlejerk around it being apparently the best thing ever.
&gt;Few people seem to spend time actually using it Exactly. You don't waste hours with it. You just use it when you need to. &gt;Use us! We're ten times better (no neutral statistics quoted?) &gt;For example the Mozilla repository is reported to be almost 12 Gb when stored in SVN using the fsfs backend. . The exact same history is stored in Git by only two files totaling just over 420 Mb It's [faster](http://whygitisbetterthanx.com/#git-is-fast), not difficult considering how fucking slow SVN is, ever tried using it on a multi-megabyte project? its supports local repositories things like 'ignores' take 5 seconds to set up git creates one .git directory, not thousands in every directory of your project. .git repositories are far smaller than svn git allows many different workflows, including an SVN type workflow, if that is what you like. svn branches are a horrible hack. GIT is just as simple as SVN, you just don't know GIT yet so you to you, it isn't
&gt; Few people seem to spend time actually using it What does that mean? Who do you see 'not using it'? PS, here are some projects and companies using git: * jQuery * Linux Kernel * Gnome * [Microsoft](http://maratux.blogspot.com/2009/03/microsoft-uses-git-for-version-control.html), * Git is now build into Apple XCode * Perl * Merb * QT * Rails (moved from SVN) * VLC (moved from SVN) * Prototype (the JS framework) * XBMC (moved from SVN) As you can see lots of large projects are moving to git. I wonder if any have moved from git to SVN..
But then if you need to amend or rebase, you are fucked.
Please elaborate...
&gt;ever tried using it on a multi-megabyte project Yes. It's not "fucking slow". &gt;its [sic] supports local repositories Great, I always wanted to branch my repository into random places. Oh wait, no I didn't. You seem to be ignoring my arguments completely and just saying "LOL GIT IS FASTER AND BETTER LOOK AT THESE POINTLESS FEATURES AND THIS OBVIOUSLY BIASED AND UNACCREDITED RESOURCE". I said, Subversion is damn fine for me. Let's take a look at your resource. Cheap Local Branching? I really don't need to have random branches of my project to "try out new features". Other people need that? Good for them. They should use Git if that suits them. I don't. I don't need to. Everything is Local? Brilliant, if I work on my project outside of internet access I don't need to make commits every 3 files I change. Git is Fast? This section doesn't compare to Subversion, and just says "lol it's slow". I do not deal with massive repositories very often, and when I do, some checkout time is fine. Being a web developer, I don't deal with massive projects. I know you do, because you use every framework under the library under the sun to achieve one feature in it while including the rest of its 2mb bloat. How do I know this? Well, you're pushing Git. Git is small? Hard disk space is cheap. I have about 2 and a half terabytes of free space hanging around, and 25mb vs 60mb is not too much, honestly. The Staging Area? So I can commit certain files. Great. Distributed? You know what I do when my hardware fails? I either cry, or, in the more likely case I have a backup, I use a backup. Any workflow? No, it isn't. It's the pull everything down and push it back up workflow. It's the Git workflow™ GitHub? The author actually admits he's really biased here too. The GitHub community is goddamn awful. The design is basically the only good thing about GitHub, and even that only adds so much. Easy to Learn? There is no way to objectively measure that.
I think git is awkward to use in some scenarios, but github is excellent. I prefer `bzr` myself in terms of simplicity for a DVCS. Both git and bzr expose very similar workflows, but do so with very different commands. I find git requires a lot of explicit knowledge of things like `origin`, `master`, and `HEAD` and hashes (for real guys?) where with bzr it just works and asks you questions otherwise.
There are certain manipulations that you can do on commits if you haven't pushed them out to a remote repository yet (these operations are local in nature, and it is impossible to perform them on a remote repository) * amend (git commit --amend) rewrites the last commit. It allows you, for example, to add updates that you missed, or change the commit message. * rebase (git rebase) is a tool for reordering commits. It is a key tool when doing complicating merges, and other features of git (like iirc bisection) depend on it.
I found svn to be more straightforward when you don't need to do much beyond basic checkins and checkouts. When it comes to more complicated uses it starts to bog down and loses flexibility and power.
GIT is easy! You just gotta learn force yourself to use it for a few days, and it'll be second nature. There's only a few commands you need to know to be productive. git init git add git status git commit git push git log 
Programmers love git, but I know at least one designer that considers it a pain. I have him use gitY, it's a visual git client for OS X. That works out much better for him. If you're an OS X user, give that a try.
OK what kind of source for benchmarking would you accept? &gt;25mb vs 60mb is not too much, honestly. 12,000mb vs 420mb. I'm sure whatever I post, you'll find a random reason not to like it, but: http://johan.kiviniemi.name/blag/svn-diff-git-diff-speed/ Independent source: Git is faster. http://thinkvitamin.com/code/why-you-should-switch-from-subversion-to-git/ Independent source: Git is faster. http://joshcarter.com/productivity/svn_hg_git_for_home_directory Independent source: Git is faster http://bokov.net/weblog/project-managment/comparing-svn-vs-git-in-performance-test/ Independent source: Git is faster
personally, I find .gitignore one of the most usefull things about git 
GUIs can make things worse, I love a simple CLI compared to the Windows server world of "Find obscure GUI page, click on obscure icon, choose properties, tick boxes" instead of just editing a config file.
Which in the web dev world is often all that is needed. Hence the reason it can be the wrong tool for the job. Remember, different isn't bad, it's just different. Sometimes SVN is the right tool for the job depending on your team/workflow. 
Is there a good tutorial to build a small but complete/useful app with it?
Thinkvitamin is the most idiotically biased source I have ever seen. They will just promote the whole Git-Rails-jQuery-Mac-Vim setup all day long for any reason.
I know its not, I mean for hosting projects and code.
&gt;Git wants to be the cool tool that everyone uses for web dev. That is my general feeling towards it. 
In which case, please provide more accurate benchmarks.
It has to be so complicated because it has to do a lot of really difficult things. I guess you need to explain complicated more- I've never seen them as all to bad, and they make sense at an abstract level. 
You do realize that this is done by APC as well, right?
http://gitimmersion.com/ And never look back.
Release it Open Source, because at least you'll have something to list under personal projects, but a commercial product it is not. Have you looked at Wordpress? it does everything yours does and much, much more. And is free. And is utterly simple to setup. And has a massive, active developer community. It's a good project to have under your name, but without being too harsh, bandying about "AJAX" and sortable menus is not really going to get you very far. Keep working on it, though - strive to make it better. Just in terms of personal development, it's a great idea to look at what other CMSs are doing and work out how to implement similar functionality by yourself.
I could see using a php solution if you are on a shared host etc, but most hosts provide SSH access when you step up to at least a VPS. Setup a cron job for this sort of thing IMO.
I learned PHP out of curiosity, one tutorial after another, I never read a book on PHP. The bad part of this is that you generally don't get to read the "best practices" part and you tend to do some pretty bad coding, at first at least. If I were to do it again I would do it the same. I have a friend who wanted to learn PHP, he bought this 600+ page book. After about 300 pages of it he had finals so he stopped learning PHP for a few weeks. When he wanted to continue he realized nothing of what he read previously stuck with him, he forgot everything. I would suggest not getting a PHP book to learn the language. Get a small project and do it, something simple but that needs to have an admin/backend. If you know the basics you should be fine, just use google. Pretty much anything you will need you will find on google. After you are comfortable coding in PHP, maybe then it's time to get a book on PHP and learn not how to write good code.
If you haven't already, try this out: http://gitimmersion.com/ If you have, then try using some other version control systems and how they compare to git.
APC is just an opcode cache. You can minimize the disk io and skip the lexing step, but It still parses all the code/ast on every request. In case of AppServer - once it starts, it keeps your application running, and parses your classes, setup, etc only once - Essentially AppServer allows you to optimize (skip) the consequent parsing steps (which you can not do with APC). *Fun fact: I just rewrote my application in full proper OO. I got staggering 4x performance increase with AppServer alone, as opposed to PHP+FPM+APC*
I've been keeping a close eye on this framework since the original CakePHP fork. Still relying on Cake 1.3 for any pre-5.3/MySQL projects, but an upcoming project I'm planning will be based on PHP 5.3 and use MongoDB - Lithium is definitely going to be the framework of choice. Thanks for all the hard work, Nate and everyone else contributing to this project.
Ever heard of [Hack &amp;&amp; Ship](http://reinh.com/blog/2008/08/27/hack-and-and-ship.html)? That makes it nice and simple =]
O'Reilly's [Head First PHP&amp;Mysql](http://headfirstlabs.com/books/hfphp/) &amp; Head First Javascript. Really fun to read and with a lot of well laid-out code samples.
uhh no its easy as hell. read the directions.
There is answer for you: http://stackoverflow.com/questions/693827/can-anyone-recommend-a-php-book-that-follows-good-development-principles/725925#725925
This is my favorite of all the php frameworks. Love the new features, keep up the good work everybody! 