Like just about every project these days Cake is using a bunch of Symfony components. Version 3 is basically a ground up re-write with a new ORM which is great. I hate YAML and just never could get into Symfony's extreme configuration complexity - Cake hits a sweet spot of simple (or not) configuration and power.
Upside down from your vision. :) The technology stack is bigger than the world inside PHP. If you are decoupling your logic by introducing a PHP framework you're not decoupling anything. That level of decoupling is already readily available in PHP natively. You can only truly decouple through open standards like HTTP. Create a service oriented architecture. But you don't want that to be dictated by your framework either. 
Only using the ORM here, very satisfied with it :\)
I don't want all these things. I want simplicity and consistency. PHP, HTML, CSS, MySQL haven't changed at all in the last 20 years. That's actually a good thing. I disagree PHP frameworks are a matter of "keeping up with technology". They're more like continuously changing flavors of doing the same old MVC trick. Then there's just those things you don't want to do with your framework. Like Wordpress or Magento. There's no one size fits all. 
&gt; A silly sketch of SQL queries mixed with HTML (or XML) output. IS a tightly coupled thing, allowing you either HTML (or XML) but not both. While even a most basic framework will teach you to decouple the presentation from the data manipulation from the request processing. Let alone the day when you will need a CLI command to perform the same task your sketch does. I know your answer already, "I don't want no CLI commands". That's quite an attitude :)
It's a legitimate question as it's so sparsely used nowadays. I haven't seen a single job post with it listed as a desirable skill, let alone as a necessity in years. In fact, the only reason I know it's still going is because of posts like this on Reddit.
You haven't seen it doesn't mean its dead.
&gt; The lack of a framework-level IoC container is a major pain point for me. Funny enough, I started a project a month or so ago in SF3.4, coming from SF2.x usage of several years. I have not had to use the container a single time. All my classes are autowired and dependencies injected automagically, so outside of controlled returning `$this-&gt;render()` responses, my code so far is almost framework-agnostic. It's quite liberating and a breath of fresh air.
I made a [tutorial](https://github.com/PatrickLouys/no-framework-tutorial) a while ago for people in the same situation as you. It doesn't use a framework, but the knowledge is easily applicable to frameworks too.
The VIM plugin only supports Omni-complete and doesn't attempt to be a completion manager, so deoplete etc. plugins would be great :)
Force yourself start a new project using popular framework like laravel, dig into it, Google up problems and solutions, learn from others, and step the codes to see how magic happens in a framework. I learn everything by looking at how frameworks organize their code, how they write smartass logics and techniques. Experiences don't build up in a day. I spent numerous project cycles to fully grasp the idea of everything. Then sometimes I also answer questions on stackoverflow, force myself steps into deeper realm of a framework, figure out why problem arises and attempt to solve it. It pushes you out from your comfort zone and forces you to look at the framework from a different angle.
&gt; smart ass-logics *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
If you're struggling to understand frameworks and are keen to advance your skills after creating "spaghetti"-like applications (not intended as derogatory). Then I recommend you undertake tutorials on how to make your own MVC framework. I stress though, that I do not recommend that you use said framework in any production code, as building the framework is a learning excercise, to get your head around how mvc works, and ultimately the more tested and popular frameworks. IMHO once you've done plenty of spaghetti, and then learned how to use MVC, you're pretty much equipped to build anything in PHP. There are exceptions of course, and certain things will often require more learning. But it's a journey and there is no end state, just continuous improvement.
I am open to becoming a mentor. I don't care about entry level, but I do expect to define clear goals together and keep seeing progress. If you're up for that, feel free to DM me on Reddit.
I use it for my projects and I also get many job offers requiring CakePHP
Best bot ever &lt;3
Depency manager is built for everyone, not just for seasoned programmers. It's a tool, not a hassle. You don't need to install everything on the packagist, you just need to install what you need, like for example you need to create http requests to some API services, so you install guzzle/guzzle. It's so much easier than you download it, copy and paste it manually. If getting web host to support composer is an issue, then get some cheap cloud hosting solution like Digital Ocean and host it there :)
Hey, I can mentor you if you want. I have 1-year gestalt coaching course, experience in company lectures and mentorings and open-source mentoring Check mywebsite a contact me there, if you like :) https://www.tomasvotruba.cz/about/
This is what worries me, and left me in this kind of situation. My understanding of MVC is that it's a coding standard to separate the design of a page, and the php code. I'll be honest, and say that when reading about MVC, I'm left wondering if I have the level of "intelligence" required to learn it. Even guides that market themselves as beginner friendly or simple seem far too difficult, many of them assuming a higher level of knowledge/understanding than I possess - which is quite the bummer because I feel very confident in my ability to produce even a complex system using spaghetti-code like you said. If I had to throw together some kind of CRUD CMS with login etc, I could do it in a single day, just grab a bootstrap template, make a PHP file for each page. When I attempted to use Laravel or Codeigniter, I couldn't even add data to a database and couldn't find a tutorial in plain english to follow.
Can you give an example of how an amateur might use it? As an amateur, the only 3rd party stuff I've ever used are cosmetic only and would be added with JavaScript. I can only imagine it's useful if you have a niche and complex requirement and instead of making your own way of handling it, using one someone made already to save time. I know that it must be a good tool, because every guide I read while trying to get it installed + working sang it's praises, but since I had no use for it, it really sucked having to invest so much time into it.
Thanks, will check it out
I used to specifically look for CakePHP jobs. Can still find plenty open on the freelance sites I'm looking at. Also, it's near the top of the Github list for PHP Frameworks, so it's bigger than it may seem at first. 
Fair. Would have been nice to see the example you were working on then instead of copying the example from the docs.
Thanks for this, I've read it now. It's probably a bit too difficult for me at this stage. The first few pages made very little sense to me (I think assuming knowledge I don't have) some of the others later on made more sense. I think one main part I was missing is, an explanation of the benefits. I understand these guides aren't made for people like me. For example, the front controller concept is quite difficult to understand because there isn't a explanation to why you are doing it, or what benefits a single point of entry has over the normal way of doing it.
Some things to consider: Your next growth phase could be about design philosophy instead of tools - Domain Driven Development (seriously, do this) - CQRS (command query responsibility segregation) - Event Sourcing (all about message busses) - look at the frameworks Broadway and Prooph - Test Driven Development (ok this bit is about tools) - an implementation of cucumber - phpunit If you want to give domain driven design a try, use simple components like PHP DI for dependency injection and SLIM for routing, requests, and responses.
How to use it is simple. You create a new Composer project and add dependencies by running `composer require some-vendor/my-package`. Obviously if you have zero dependencies... its useless.
Sorry, I wasn't clear. I understand how to require a package. Right now I have zero dependencies, and don't know when I will need to start using them, or for what purpose :P
You are talking about the tutorial, right? In the tutorial I just linked to external resources for topics like that. The book goes into much more detail. I explain why a front controller is used and the benefits of using one. There are also a few theory chapters before the tutorial part starts, that would hopefully also fill in some knowledge gaps that you might have. 
Isn't it illegal to send unsollicited email?
Important question, are you good at oop with PHP? Are you good with using classes and methods to write clean code?
Here are the things I wish I knew to study when I was in your shoes (*roughly* in order): - OOP - Writing tests - The command line (setting permissions, searching, transferring files, running scripts) - Setting up a virtual development environment (Vagrant, Docker, etc.) - Common PHP tools (PHPUnit, Composer, xdebug, etc.) - Frameworks
90% of the time it breaks mass mailing softwares terms and conditions. but I don't think its considered really **illegal**
Thanks Patrick, will check that out
I currently don't use either, i struggle to find opportunities to use them where it isn't simpler to find other solutions. Perhaps my projects aren't complex enough.
&gt; this kind of scraping of details for marketing will be illegal under the GDPR from May. interesting. do you have a source for this particular case?
I signed up for a month of knp university and learned Symfony. It absolutely catapulted my learning.
Ive been meaning to learn more about OOP, I struggled to find real world times to use it, perhaps because my projects or my logic was too simple/ineffecient. Command line and virtual environments seem far beyond my level, I just use Wamp/Xamp to test, then upload my files to a small web host with FTP. It's a lot less professional than you may expect :) I'm very interested in writing tests though, I've struggled with manual testing before and have allowed bugs to go live. Thanks for the list, I will do some googling on those topics!
Honestly you need a mentor or someone else to review and talk about what you are doing and how you are going. On your own you can only develop so far. On your own it is difficult to identify what works well and what doesn’t. Bad code isn’t necessary obvious. Others have recommended learning a framework. Give that a go if you want to go it alone for now. It will at least give you exposure to some well written modules.
You leverage packages so you do not manually need to write everything. An example: For some reason you need to convert an array to an xml object. Yeah you could write it all yourself its not a very complicated process. Or you could just composer require openlss/lib-array2xml and now you have a class that handles all of your array2xml conversions and it only took you 1 minute to do. Also this package has 700k installs so you can assume its a fairly bug free.
This is the way to go. Keep business logic agnostic.
Hello All, I too am new to PHP and would greatly appreciate having a mentor to walk me through the language. I am interested in developing eLearning modules. 
With that said Laravel is big in the freelance circles. My company posted a gig to upwork recently (our core API is written in Cake3). Some of the responses advised us to "rewrite" in Laravel. LMFAO. Delete. You can have your preferred framework, but recommending a rewrite without having seen the code based solely on the framework? The zealotry is strong.
&gt; Command line and virtual environments seem far beyond my level, I just use Wamp/Xamp to test, then upload my files to a small web host with FTP. It's a lot less professional than you may expect :) It's not. You really need to know how to use command line nowadays. You don't need it on your host, you only need to setup your dev environemnt. I've seen you saying that you wanted composer on host. What for? Get composer on your local dev machine and deploy the vendor directory. Do yourself a favorite, switch from wamp/xampp on Windows to either Dual Boot Linux or VM with Linux. 
In this analogy, all I can think is, "is there a fire escape door"? Maybe that door can be for routing out attackers, that door is only open in case of emergency.
There are actually plenty jurisdictions where sending bulk amounts of unsolicited email is considered illegal. For instance, article 13 of the e-Privacy directive of the EU prohibits this kind of spam (without consent or prior relation). Every EU member has its own implementation of this rule (it's a directive) so severity can differ per country. Furthermore, the collection (and storage) of personal information like email adresses is troublesome under existing (and upcoming) EU and local privacy laws.
&gt; Do you mean something like this? Yes, although some of that boilerplate can be skipped through some helpers of course. &gt; Why would multiprocessing be any simpler than multithreading? The actor model doesn't require shared state, and multiprocessing is built-in and native to PHP. &gt; You seem to have had quite different experiences with the Actor model to me. Yes, you seem to want to replicate the Erlang model, which is of course an excellent model, but by its nature it's a superset of the Actor model. I stick to basics for no other reason than ease of portability and platform simplicity. Each approach has its benefits. &gt; You mentioned isolation, but why not just create a separate supervision tree (not technically part of the actor model, I know), instead of a whole new actor system? Let's say you have two groups of actors: - High traffic (msg/sec), tolerant to high latency. - Low traffic, requires very low latency. Mixing both will hurt latency for the second group, unless we can prioritize messages. Prioritization via numbers or labels however is flawed as it's another piece of global shared state, where now every actor is guessing how every other actor is prioritizing their messages, in order to get better guarantees for its own performance. Another way to approach this is to isolate actors with different characteristics in separate systems and give each system a specific slice of the "message bandwidth" if you will. &gt; Does this mean that an actor system will map directly to one (or possibly more?) processes? Is this really a good thing that the potential for parallelism of the application (read: the number of OS processes on which it runs) is being based upon the number of actor systems running in the application? Depends how hard it is to make multiple systems and have them interact, I guess. I'm not necessarily saying that splitting an actor system over multiple processes should be manual and explicit. I'm just saying it's useful for isolation to be *possible*. It's useful to be possible to make groups of actors that have independent settings of another group of actors, and have both actors still interact regardless. Regarding the system:process relationship, it's not hard defined for me. The actor system is just, simply put, an object with a `tick()` type of method. You can loop that on its own in its own process, or you can call the `tick()` of multiple systems in the same loop/process. I leave this open to the user to determine. &gt; I am definitely open to removing actor naming (it would certainly simplify the extension internals, too), but naming actors can make things a lot easier for the developer. Maybe keeping names is the right thing, I don't know. I just know that it makes the Actor system much smaller in practice. Because when you call something by name, now you can't be interacting with just any actor around the world whose reference you received. You're instead interacting with a local name that you, or someone on your team registered in your particular system, because such short-and-sweet names would never apply in a global context. But those are probably more esoteric than pragmatic concerns. As a counter-argument, I guess we could point to DNS as a system of global names. Then an actor name like "foo" can be implied to mean "localhost/foo" and a globally addressable system of actors could be "domain.name/actor-name". Starts looking like the web and hyper-links, which is not a coincidence. &gt; The only problematic thing I see in your factory example is the dependency injection, since the dependency will need to be serialised. I don't really see a way around this. Well let me then propose a bit of a hybrid, taking your API and needs into consideration: ActorSystem::registerActorFactory('FactoryName', function (...) { return new Test(...); }); Now those factories can be used where a class-name is accepted, thus allowing an actor system to be dynamically configured with factories that don't depend on explicit class files with all hardcoded initial settings. And instead of serializing an actor like a PHP object, it can be explicitly asked to "hibernate" itself by returning a state object that can then be resumed by the factory in another thread, or similar.
https://www.ftc.gov/tips-advice/business-center/guidance/can-spam-act-compliance-guide-business &gt; Q. What are the penalties for violating the CAN-SPAM Act? &gt; A. Each separate email in violation of the law is subject to penalties of up to $41,484, and more than one person may be held responsible for violations. [...] The CAN-SPAM Act has certain aggravated violations that may give rise to additional fines. The law provides for criminal penalties – including imprisonment – for: [...] harvesting email addresses The CAN-SPAM act does mostly apply to opt-out, sending unsolicited email isn't explicitly illegal, but associated actions (harvesting emails, or brute forcing addresses) is. You should avoid this if it's for a business.
Sounds like you need https://laracasts.com/
goodass bot
I'm sure someone will be along shortly to berate you over the database stuff and lack of tests and composer support, but the thing that is making my eye twitch -- you mix bracket-less control statements with bracketed control statements. Please don't do that -- it makes the code much harder to read. if($fetchType === 'num') $arr = $stmtResult-&gt;fetch_all(MYSQLI_NUM); else if($fetchType === 'assoc') $arr = $stmtResult-&gt;fetch_all(MYSQLI_ASSOC); else if($fetchType === 'obj') { // omitted } else if($fetchType === 'col') { // omitted }
All this talk in this pot about CakePHP being "dead" and folks comparing it to Laravel makes me think that it would be great if someone did a comparison of the latest version of the two. I was a CakePHP dev back ground 2009. I've been using Laravel since 2014 and I've been enjoying it. If CakePHP has grown up in a competitive way, I'd sure like to know the details. 
I've made a bunch of systems for small businesses to replace paper-based ones. So an example one did include login/authentication and record employees, their conditional pay rates, recording jobs, shifts stuff like that, then had all accounting details which was connected with Sage so he can easily do his accounting. Remote backups 2x a day. Before that, he was doing everything on paper forms. Like I said in my original post, I am reasonably confident working in plain PHP - but frameworks don't really make any sense to me.
Sorry bro, you are speaking in another language to me :) nearly everything you said was stuff that I don't know about. I have composer simply because the Laracasts tutorials made me install it. I don't use composer, it's installed simply as a requirement.
Lots of really good advice in this thread but if you’re like me and learn (at least the basics) by doing rather than reading, checkout a YouTube channel called Traversy Media. The guy does lots of non-PHP tutorials, but there are a few PHP based playlists scattered about. In particular I would suggest you look at the PHP OOP course (lots of MVC in there), the Stripe course and the Laravel course. I seem to gel with the way he explains things and find he goes into sufficient detail explaining everything, including how to get a dev environment set up, what he’s doing and why he’s doing it. Just make sure you follow along with each playlist rather than just watch. Then, when you’ve completed it, try to expand the project to add extra functionality. As somebody else said, Composer is only needed in your dev (local) environment. If I recall correctly, getting it set up is covered in the Laravel tutorial, it’s used quite a bit there and you really start to appreciate the benefits.
https://dev.acquia.com/podcast/69-php-secure-it-if-you-do-it-right-anthony-ferrara
Then TBH you aren't ready to progress from the begginer level yet as you've stated in the post. Don't blindly follow tutorials, understand what you're doing and what for. If the tutorial doesn't explain that, Google it. 
Thanks, I have added the channel to my list of things to look up :)
You can always write everything from scratch and include nothing, but the one time investment to include them is far more beneficial than you rewrite everything from scratch. One amateurish example, you include SwiftMailer/PHPMailer to help you send emails. You don't invest time to write a robust mailer to help you send emails when it add zero benefit to your project. 
I think the kind of things you referenced are stuff that would be common in a developer job based on my googling, but for the average Joe who isn't a developer would be overkill. My "dev environment" consists of Notepad and FileZilla :P I understand what I'm doing when working in plain PHP, and haven't used tutorials for a long time, the most I would do normally is check the official PHP documentation.
Yeah you see a lot of that, but then you look at the code quality of the people saying it and you realise why Laravel was their only option. Three most common that I see in job postings recently are Laravel, Symfony and Zend in that order.
&gt; That's what I'm doing right now and it's pretty cumbersome because I have a lot of things to look at the Windows side I run my IDE inside my VM, but have it displaying directly in Windows. On the Windows side I run VcXsrv, and inside my VM, I "export DISPLAY=192.168.5.225:0" (the IP of the Windows host), and then run phpstorm. 
&gt; Yes, you seem to want to replicate the Erlang model, which is of course an excellent model, but by its nature it's a superset of the Actor model. I stick to basics for no other reason than ease of portability and platform simplicity. Each approach has its benefits. Yes, this is quite correct. Given my familiarity with Erlang's process-like Actor model, along with its well-tested design, it has quite a lot of influence on my own implementation. I do hope to take ideas from other implementations of the Actor model, though. &gt; The actor model doesn't require shared state, and multiprocessing is built-in and native to PHP. The debate of whether to go down the multithreading or multiprocessing route was something that I thought quite about a lot. I came up with the following thoughts: Multiprocessing benefits: - Does not require a ZTS version of PHP (since most users won't have it) - No need to perform [context copying](https://github.com/tpunt/phactor/blob/master/src/ph_copy.c) (simplifies internals) Multiprocessing drawbacks: - Difficult to run an actor system over multiple processes - Actor systems will dictate concurrency at the kernel level, which causes one concurrency model (multiprocessing) to leak through to the Actor model. Developers will then *have* to create multiple actor systems in their apps to better utilise core count, and as core count increases, their applications won't naturally scale vertically - If multiple processes are used, then a special bootstrapping file will need to be passed into the actor system to ensure that the necessary files are included (on process startup) to start the application - There's a lot of blocking state in PHP. If there's only one process for a whole actor system, and a developer created an actor pool of PDO connections, then that would destroy the performance for the whole actor system Multithreading benefits: - Threads are cheaper than processes (particularly on Windows, which should be supported later) - The actor system can more easily run across multiple threads than multiple processes - Context copying means that simple examples (such as seen in the README) can run without problems in a multithreaded actor system (good for getting started) Multithreading drawbacks: - The usual problems of race conditions, dead locks, etc So overall I went with multithreading (which is also favoured by Erlang). &gt; Let's say you have two groups of actors: &gt; [...] &gt; Mixing both will hurt latency for the second group [...] I guess this is why Akka has *pinned dispatchers*, where actors are mapped 1:1 to threads. I can't say that I'm a huge fan of this solution, since it leaks one concurrency model through another, but I can definitely see use cases to it. Under my current design, one would create a separate application (and therefore a separate actor system) to give that actor system its own set of resources. Whether this actor system resided on the same machine or separate machine would not be relevant since remote actors would be used (obviously, if latency and throughput were concerns, then it would be on a separate machine and the app would have a very narrow responsibility). &gt; Well let me then propose a bit of a hybrid, taking your API and needs into consideration: &gt; [...] Interesting - I'll definitely need to have a deeper look into this, along with the testability aspects you raised earlier. Thanks for the fruitful discourse.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tpunt/phactor/.../**ph_copy.c** (master → 6202b5e)](https://github.com/tpunt/phactor/blob/6202b5ecbc61981557b6ca8c8642934cf0dcc34b/src/ph_copy.c) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dwdxytq.)
Start a project on laravel and give yourself a goal that you need to write PHPunit tests for everything.
That would turn into a dick-measuring contest real quick unfortunately(but probably some good clickbait material). They are different enough to not have it be a 1:1 comparison. They are both opinionated frameworks, but have different opinions. They come with different features out-of-the-box, but that tells you little, as you have Composer for most things. One thing I know for sure is a big advantage for projects that need to live a long time, is that you essentially have proper long term support with CakePHP on any of the major versions, and the devs there know how to use semver properly.
I'm curious if this would help you out: [Modern PHP Without a Framework](https://kevinsmith.io/modern-php-without-a-framework) It's a tutorial I just posted last week, and I wrote it with someone exactly like you in mind. Like so many of my fellow PHP devs, I also got started in PHP because it was so easy to start in a procedural style, and I remember how hard it can be to learn to write better quality code. It seems like there's a big gap in educational resources between beginner and mid-level that isn't framework-specific, and I'm hoping to help bridge that gap. If you get a chance, try that tutorial out and let me know what you think. I'd be very interested in your feedback. I'm hoping to write more tutorials for beginner to mid-level devs, so I'd appreciate the help!
Proposing DDD to amateur? Do you want him to kill you and haunt you in the afterlife? ;-) 
I never liked that method overloading isn't a thing in PHP, but can be done through a workaround of collecting the arguments passed and responding accordingly. That was one of the things that initially dissuaded me, along with no type enforcement in a method arguments. They did add type hinting in 5.0, but still, it was only for specific data types, which have expanded in recent versions. At that time, I felt that Java with its strictness was better fit for OOP than PHP with its looseness. I'm fine with it all now, and happy to be coding in OOP with PHP as much as possible.
Nice I might check it out I've never found an ORM that was perfect yet, I'm fairly happy with Laravels but I'd prefer if I could nab some features from Doctrine.
It's not the wand, it's the magician. Programming languages are just tools, and any truly great coder doesn't focus to much on a specific language, but rather on developing programming skills that can be used in any language. The reason why PHP has such a bad reputation is largely because of its past. Most PHP haters base their arguments on what PHP was like in v5.2, and refuse to consider that a language can improve over time. Additionally, since it's so easy to learn, there is a ton of terribly written code plaguing the internet, along with awful tutorials. Other languages have steeper learning curves, which makes it less likely for beginners to try it. Obviously there's a ton of great PHP developers too. I personally view the ease of learning an advantage of the language.
As a other user mentioned, Start with guzzle/guzzle. Their docs show you how to get the psr4 autoloading going. Seems like that might be the only piece you’re missing with composer.
Check out [some free bootstrap templates](https://startbootstrap.com/template-categories/all/) and go from there.
&gt; Is there a such thing as PHP mentoring? Yes, there is. PM me, I would be more than willing to help you out.
i write my own accessors to wrap the getAttribute() method. i do not rely on the magic methods. why? two reasons, the first is you can annotate these methods so the IDE will code complete for you. i noticed our project had a million places where someone did like this /** @var User $user **/ $user = $model-&gt;user but instead of doing it once in a "@return" annotation, it has be done anywhere that magic method is accessed....horrible problem if the return type ever changes! also using the magic methods is slow,especially since they simply wrap getAttribute() it also makes the models difficult to mock/spy using phpunit since magic methods cant be mocked 
its bad practice
Ahh, I was looking for this resource - thank you for the link ! 
Oh this is great, thank you for sharing, I was unaware of this! 
&gt;The burden of proof should be on people making these absurd claims that PHP is inherently insecure. 100% agree, except for when you are the new guy and the "old guard" of devs who were here before you set the rules. I may steal some of your verbiage! 
Just one last question, if I may. Now that I understand what you're going for (a more fleshed out Erlang-like processing model), it seems like a lot of effort. Why did you decide to implement this system for PHP, instead of using existing ones like BEAM VM?
yes
Hmm. That's a good catch, valid point. Apparently, I already had a database and we decided to use Laravel. So with existing structure already in-place, we thought, it would be better to use Laravel Mutator for password encryption. But yes, you have a valid point and I will update my post accordingly.
PHP development began in 1995 when Rasmus Lerdorf wrote several Common Gateway Interface (CGI) programs in C, which he used to maintain his personal homepage. He extended them to work with web forms and to communicate with databases, and called this implementation "Personal Home Page/Forms Interpreter" or PHP/FI.
If you had begun using Laravel in 2014, you may have missed out on the CakePHP 3.x series, which probably puts it much closer to Laravel in terms of capabilities. Laravel tends to be bleeding edge and has a huge community backing which probably still makes it more appealing to most developers, whereas CakePHP is more conservative with its upgrades.
I agree about the method overloading. With `func_get_args()` PHP can't know if a method can take more parameters than it has in it's definition. At least with [variadic functions](http://php.net/manual/en/migration56.new-features.php#migration56.new-features.variadics) it's in the function definition but I don't think method overloading is going to be viable so long as `func_get_args` is a thing idk.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
[removed]
That's just 128 mb. Not sure what your code does but you might want to increase that to 192 or 256 mb.
Checkout laracasts
1073745920 bytes = 1073.74592 Megabytes PHP will default to 128Mb only if you try to allocate more that the maximum allowed (2GB).
Do WordPress next, its the perfect next step between procedural code websites you build now and full OOP frameworks. Also, there are plenty of junior dev jobs for people who can use WordPress in case you want it to be your career. 
I'm doing almost only CakePHP development since 1.3 and I *never* missed a DI container. And actually the way I've seen DI containers used by many people is simply as a replacement for superglobals - horrible.
[Your first database wrapper's childhood diseases](https://phpdelusions.net/pdo/common_mistakes)
I wanted to learn more about the technical challenges of implementing this concurrency model on PHP's VM. Also, having had good experiences with the Actor model in Elixir, it's something I'd really like to see in PHP now.
#IN THIS ANALOGY, ALL I CAN THINK IS, "IS THERE A FIRE ESCAPE DOOR"? #MAYBE THAT DOOR CAN BE FOR ROUTING OUT ATTACKERS, THAT DOOR IS ONLY OPEN IN CASE OF EMERGENCY.
Oh
Because you need to convert into "mebibyte". Mega prefix in math is still worth a 1000, not 1024. This is also, why your HDD has a different volume from what is written on the front. 1 GB != 1 GiB
It's obviously not art. It's just a "style" of graphics. I think you're reading to much into this.
You should not start with laravel then. Work with something with a small footprint but all the new tools (DI, PSR Compliance, maybe ORM, ...). Laravel has too many facades and digging into it is a pain the first times. After the first pages add something, maybe work with middlewares, create a service, a more complicated form, install a package from composer, integrate oAuth2, whatever you like. Will you struggle? sure, but that's the fun ;)
this is creepy
👻 Boo! *** ^^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Block**&amp;#32;**me**](https://np.reddit.com/message/compose?to=friendly-bot&amp;subject=stop&amp;message=If%20you%20would%20like%20to%20stop%20seeing%20this%20bot%27s%20comments%2C%20send%20this%20private%20message%20with%20the%20subject%20%27stop%27.%20)&amp;#32;|&amp;#32;[**T҉he̛&amp;#32;L̨is̕t**](https://np.reddit.com/r/friendlybot/wiki/index)&amp;#32;|&amp;#32;[❤️](https://np.reddit.com/r/friendlybot/comments/7hrupo/suggestions)
not helping
There is also https://php-mentoring.org/ which has a host of people willing to help
http://www.wrox.com/WileyCDA/WroxTitle/Professional-PHP6.productCd-0470395095,descCd-tableOfContents.html echo $coder; // Monkey with knowledge of PHP syntax $coder-&gt;readBook(&amp;ProfessionalPHP6); echo $coder; // Good corporate PHP-programmer bool readProfessionalPHP6 ( array &amp;$coder )
&gt; My understanding of MVC is that it's a coding standard to separate the design of a page, and the php code. yes &gt; if I have the level of "intelligence" required to learn it. you just explained it! &gt; If I had to throw together some kind of CRUD CMS with login etc, I could do it in a single day, just grab a bootstrap template, make a PHP file for each page. try doing it with 2 files for each page. one that's all setting variables, and one that's all viewing variables. now you effectively have a controller and a view. eg. file 1 $user = "amazingmikeyc"; $shoppingList = ['eggs','milk', 'cake', 'beer']; include "file2template.php"; then file2template &lt;html&gt;&lt;head&gt;&lt;?=$username;?&gt;'s shopping list&lt;/head&gt; &lt;body&gt; &lt;ul&gt; &lt;?php foreach ($shoppingList as $item) { ?&gt; &lt;li&gt;&lt;?=$item; ?&gt;&lt;/li&gt; &lt;?php } ?&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; Your controller sets everything up and you view displays it. the view doesn't change anything it just displays stuff. wory about the Model part later. 
Thank you. What do I do to start? Do I need to download anything first? I have dreamweaver and have been using it as my primary web editor
Dreamweaver has not aged very well. I was using eclipse for PHP to start with but I don't hear much talk about that anymore. If you want a free solution I recomment sublime text 3 and install [PHP packages](https://andy-carter.com/blog/essential-sublime-text-3-plugins-for-php-developers). If you want to pay thousands for the best tool use PHPStorm. The stack doesn't work very well on a Windows PC, I strongly suggest going to Ubuntu or Mac. If you don't want to ditch windows you can have a small VM to run your web stack at least. I remember having a lot of trouble using composer for example. Composer is absolutely essential to PHP development now. You should use it even if shared hosts are reluctant to install it. If you don't have a choice, move the /vendor folder to your server. This is the folder where composer installs everything. I suggest you start with the installation instructions on [laravel.com](https://laravel.com/). There are great tutorials over at https://laracasts.com/. It will take some time to make the step from the past generation tools to the 2018 stack but it's worth the time you will save to make amazing websites once you will be comfortable with this.
I'm not a laravel user so here it goes: why use an array of properties, instead of just using object properties?
Hello everybody. I'm new to the subreddit. I've been doing C# for about 5 years with long breaks so I've got the basics of programming in place. I then moved on to web designing, and then lots of back-end development (PHP &amp; SQL). Now, I've been planning to sell web solutions to companies that request it. Are there any tips anyone's got? I've probably been doing web development for 2 years. I've made a couple of solutions for my company. But any shortcuts i could take with the PHP part? To improve the workflow.
the PHP digest is short in coming, thanks for the reminder. The video is a fresh review (the figures change from year to year) for the community to help everyone stay relevant. Anyway, thanks for your feedback!
So it's like Events with native support of Queue adapters? I don't really see the difference, why I should use this complnent instead of Events?
Oh, that was an ad. Come on, make it less blatant please. Right now it's no better than any other PHP outsourcing spam and won't be welcomed here. To clarify: this is not my personal feedback but an explanation how your post is seen by the community.
Probably ask yourself, why did you pick programming in the first place?
Dude chill. Seriously. I work at a big tech company (being vague on purpose), and what I tell junior devs is that it will be months until they are comfortable. Heck, it took me ~1.5 years to feel comfortable myself. Don't overthink, if you feel unsure about how you are doing: ask for feedback from your manager. How does he perceive you are doing? What would he recommend?. Also, keep in mind for the most part, any competent manager doesn't expect employees to hit the ground running starting from day 0 so they will expect you to make mistakes and be lost for some time.
The communication with queuing systems or third parties (Kafka, Amazon SQS, Google Pub/sub) is delegated to libraries like Enqueue's adapter: https://github.com/php-enqueue/enqueue-dev
Message queues let you process info asynchronously and possibly be distributed. Say a user wanted to generate a report that would take 5 min to process, you wouldn’t want them to wait on the page, would you? Instead you could create an async job on the same server, but you share resources, or you fire off a message and one or more workers can scoop it up to process it. Another example is durable information sharing between systems. You may need to notify another application that something has occurred - message brokers can hang onto the message, temporarily back it onto disk, and have a retry strategy. Direct API calls, for example, may fail at the exact moment the event occurred.
Talk to those your working with, ask for help and guidance - don't just habor away hoping it'll click in the future. If you don't understand and you've tried to figure it out for yourself and still struggling, just ask... someone else must have done this prior to you - if know one knows then the company needs to deal with this properly and not leave it on you to battle on your own.
Bought the book, a good read and a great help. 
kill this post with fire
Hey. I totally see your point and you're right. What I don't like about setting it in my server setting is, that it's a "mess". They way I have done it https://christoph-rumpel.com/2018/03/content-security-policy-101, provides nice methods that also explain why I added this or that resource. This way I can see also years later what this policy was for.
This is good advice. I had a similar experience when I was hired as a junior dev. I did my best to understand their custom framework and ask questions after I tried figuring it out myself. This way I could say, I tried looking here and there, but wasn't able to find what I was looking for, can you point me in the right direction. Which at least shows you're willing to do some work before asking questions. 
I too got a job at a webdevelopment company right off school. They sometimes used frameworks, other times rolled their own (poorly written) stuff in PHP. They had no testing infrastructure or habits whatsoever. If the project was complex enough, the only way you'd find out your code had a bug was when it got deployed in production. They also didn't use Git or any other version control, we'd make copies of the source and then upload to a server via FTP. All that, combined with poor management and crappy, repetitive projects lead to what I can only describe as an absolutely soul-sucking experience. After the initial 6 months of contract I was so burned out and disappointed that I just outright quit my job and at that point even pondered switching to a different field altogether. I didn't end up working in a different field, I've had multiple development jobs since then and what I can say is that I am much happier now and enjoy what I do. Anyways, my point with all this is that you should take a moment to process everything that is happening and why. Talk to your co-workers, do they feel the same way? Are their assigned tasks as crappy as yours? Because you could simply be getting the "new-guy tasks" that nobody else wants, and eventually you'll move on to better things. However if everyone feels the same, then that's definitely a red-flag. Just don't judge the whole field by one bad experience, if you truly like what you do keep looking.
I am not going anywhere near this shit
You do seem to spam your articles like a disease. This provided no value whatsoever and you obviously wouldn't be able to explain what's wrong with my implementation. In fact, your usage of `run()` is similar to my use of `query()`, on that `run()` is not a familiar function name like mine. My class doesn't break any rules and is an extremely predictable API. What's even funnier is the fact that you have your own MySQLi wrapper that uses your own proprietary function names for fetching, which would make it terrible to use. That too goes against your article. Your wrapper also not very useful, as it's extremely limited in what it can do (no transactions even). Mine actually has familiar method names and would be easy for anyone to pick up.
The term for what you are probably going through is [Imposter Syndrome](https://en.wikipedia.org/wiki/Impostor_syndrome), and even seasoned developers experience it. You're fine. I would be more worried if you thought you already knew everything. If your company built their own CMS from scratch, then you are walking around inside the head of another individual or the heads of a small group of people. Sometimes people get kooky ideas! If you are having trouble figuring out the system, there's a good chance it's not your fault -- but the experience you get from figuring out other people's code will make *you* a seasoned developer.
As far as I know Composer was created for Symfony...yet Symfony doesnt use it as package manager?
Teach Yourself Programming in Ten Years - Peter Norvig http://norvig.com/21-days.html
Every new project that you will take will probably be very hard at first. This being your first, is even worse, as you have no experience. Every problem will require lots of effort and that can drain your energy quickly. I don't know your team, but the leadership should be aware that you are just learning and that it will take a bit of time to become productive. Don't shut yourself in and ask the senior guys for guidance. Show them you want to learn. Take it easy but if you feel too much pressure, maybe you need to look for another employer - it happens.
I am also confused, are they asking you to deploy a server for an application that already exists or are you tasked with deploying a server for a *hypothetical* application? The way I'm interpreting that request is that they have a PHP application that handles requests itself, i.e it listens on the http port and performs actions when a request is received, but if that is the case I can't imagine they'd phrase it that as "your PHP implementation should make use of the server's API, ie. PHP should not run as a CGI program" because if the application runs that way it would have a material impact on how you to choose to architect the server so you'd need to know more than just "it shouldn't use CGI". Very confusing.
Thanks. Definitely learned new things about CSP. 
Seriously? C'mon, you sound like a child. It's harsh but that's a good article. If you're expecting nothing but pats on the back for posting a basic database wrapper with no Composer support, no tests, all in one giant monolithic class, and doesn't seem to use best practices, then you are definitely in the wrong place. Honestly I do a lot of database work and I can't figure out why I'd ever use this over PDO. It's not bringing anything new to the table, it's just a slightly more obfuscated way of using MySQLi. I don't even use PDO directly because I haven't the time to write out miles of SQL - I have my own custom database package that includes an extended query builder. There are a million wrappers like this out there. Try deflating your ego, learning from this experience, and writing something new.
For IDE completion, you can define [`@property` tags](http://docs.phpdoc.org/references/phpdoc/tags/property.html) at the model class level.
As mentioned above, also take a look at http://wiki.c2.com/?TeachYourselfProgrammingInTenYears in Ward Cunningham’s wiki. Very interesting place, can highly recommend. 
Adam, is that you? I just started a new job with a start-up. While I work with great people now (and did, before), it's quite amazing how different a start up environment is to a corporate overlord and even a medium sized company without git. I can (almost) guarantee the struggles with early development, structures, and people will inform you on how to be a better person/developer. I hope. There are the special ones...
Thanks for this, I have started a new project that requires emailing and rather than using my own - I have brought in PHPMailer like in your example and it's working great. Very easy to use and easy to set up with SMTP.
[https://forge.laravel.com/](https://forge.laravel.com/) This will help you setup the server for the first time and manage sites / deployments over time. You can use other tech like node, but you'll most likely want to stick with one webserver \(nginx is default on forge\) and use that to connect to your php/node/ruby/etc apps.
Honestly, my only testing comes from end-user testing the software by using it. I will be looking into PHP unit tests (I had never heard of any of these before today) :)
Events are sync and messaging is async. That's the difference.
Great to hear that. Thanks!
I think your vision is the obvious one and shared by most people. It feels that way because you have spent so much time learning new stuff. But if you really take a step back and look at the bigger picture. Stuff didn't change that much. 
Frameworks are nothing more then a set of components that work nice together. If you have built a couple of systems yourself already, you already use a "framework", the one you wrote. Let me give you an example. You probably have a file in your systems that decides which function you are going to call based on the current URL and query parameters. This piece of code is your Router because it routes requests to the correct request handling code. Maybe the way you router works is good enough for the thing you wrote, but what if you want to make it smarter. What if you want to use pretty URLs without query parameters? You will have to write more code to handle those cases. What if you want to change your URLs (maybe for SEO purposes, or internal reorganization), will you have to go through all your view templates and search for the old url and replace it with the new one? Wouldn't it be nice if you could have one place where you define all your routers/parameters/callbacks and just edit the URL in one place and everything continues to work as before? This is just one small part of almost every application and this problem has been solved thousands of time before. You have an option of writing your own or using someones battle and unit tested code that probably thought of use cases that you haven't thought of yet, but may come in handy later or in another project. Then you have forms, form validation, authentication, authorization, template engines, ORMs, the list goes on. This is a good read to understand more: https://symfony.com/doc/current/create_framework/introduction.html#why-would-you-like-to-create-your-own-framework
Not Adam, but I'm sure there's plenty of people that are going/have gone through similar experiences, sadly. The company I described was small, and management pretty much shutdown any suggestions for anything that would improve workflow. Basically, if you suggested doing something that didn't directly earn the company income - like for instance, spend a week organizing and configuring git repositories, or spend a week creating testing environments - they'd find an excuse not to do it. So, regardless of being a big or small company, it's the management's lack of vision that ends up causing this.
It's almost definitely worth your while to get comfortable with wrangling servers. VPS providers are cheap and numerous (DigitalOcean, Vultr, Linode, AWS, Azure, GCP...). You can do an awful lot of experimenting with a $5/month VPS from DigitalOcean, for example. https://serversforhackers.com has a bunch of relevant content. You should also be aware of services like heroku, which are a lot more serious than GoDaddy-style shared hosting, but don't require a bunch of knowledge and time to build/admin/maintain. Finally, especially if you're interested in moving in the server-side javascript direction, it's worth checkout out function-as-a-service like AWS Lambda. 
But it still changed, some in bigger ways than you think, PHP wasn't exactly going to change its syntax overnight, and both HTML and CSS are specs, implemented by separate browser vendors at their convenience. If you don't want to use a framework that's fine, on some projects at work, rather than using a full framework, I simply took out the parts of symfony I needed and implemented them because time constraints force me not to piss about with making my own boilerplate systems when I can just include Symfony to bootstrap it for me. The point I'm trying to make is why reinvent the wheel, when someone else has already done it, and better? 
Sounds almost as if you're under the impression that capitalism hasn't killed millions upon millions, what do you think is currently happening in the middle east? That's right, oil. Let's ban anything Americana... Jeez... 
Thanks, but anyway - I can handle event and add job to queue to run it asynchronously, as well as run it synchronously without adding to queue, or I missed something important here?
If you have access to whoever provided the requirement, ask them. Some non technical folk were probably tasked with defining requirements and copied that from some obsolete source. It's probably referring to the old-school method of running server-side scripts (typically Perl) in a `cgi-bin`. The idea is probably the code needs to be run without having to worry about scripts being executable and restricted to residing in certain directories. Either way, the requirement or its intent is not clear. If you can't ask them, then use Apache with a PHP module and call it done. 
No, it's something could have been written out in one sentence, two at most. Instead he decided to continue to spam his articles, which he does far too often. Also an intentionally misleading and clickbait name, with nothing else other than a link. As if my class has "diseases". I wasn't looking for compliments and I never said that, nor implied it. Quite the contrary, I actually prefer criticism, as that's the only way to learn. But awesome use of a straw man. I also already stated in a different comment I'd add composer and unit testing. Read my code and explain to me exactly what I'm doing that isn't best practice, rather than lazily basing it off of someone else's comment, which I clearly specified I fixed. ORMs and query builders are great, but they certainly haven't superseded using plain SQL. There's been a lot of times where I felt certain queries ended up becoming much harder to create, but would have been easy in SQL. My class aims to make vanilla SQL as enjoyable as possible. My methods are also not obfuscated, but simply camel cased instead of snake cased. Take a look at [this comment](https://www.reddit.com/r/PHP/comments/87k2gb/easy_to_use_yet_powerful_database_wrapper/dwddzq4/) for what stands out in my class. PDO took a step in the write direction by allowing you bind values directly into `execute()`, but that's still not enough. It would be so much better to just pass in an array as a second parameter, while still allow chaining. My [transaction method](https://github.com/WebsiteBeaver/Simple-MySQLi#transactions) is also very useful, as it's pretty much like `mysqli-&gt;multi_query()`, but allows prepared statements. I even made a [callback version](https://github.com/WebsiteBeaver/Simple-MySQLi#transactions-with-callbacks) of it too. I also utilized MySQLi's ability to [get more info](https://github.com/WebsiteBeaver/Simple-MySQLi#update-same-values).
What other people have written so far is not true. In general the major difference between messages and commands is that events may have 0 or more listener while messages is always 1. It's an error if there are 0 handlers and it's impossible to route them to multiple handlers. Maybe symfony has decided to change these semantics for their implementation but in general that's the most important difference. 
Mirrored patches: Drupal 7: https://gist.github.com/paragonie-scott/79ddffd734bf15a9d86b723d74d15572 Drupal 8: https://gist.github.com/paragonie-scott/ee034dc43cbaafb9ff1cfcdda77d3240 The actual mitigation of these patches: https://gist.github.com/paragonie-scott/79ddffd734bf15a9d86b723d74d15572#file-drupal-7-x-2018-002-patch-L91 Explanation: https://twitter.com/codeincarnate/status/979080318966730753 &gt; Drupal uses the hash "#" at the beginning of array keys to signify special keys usually that lead to some type of computation. Basically you can inject these. See Drupal form API for example
yes it does?
&gt; what do you think is currently happening in the middle east? That's right, oil. OMG OIL IS HAPPENING IN THE MIDDLE EAST WHO KNEW You're clearly a fool. You can have the last word here if you like.
d'oh! cant believe i hadnt thought of this....still frustrating solution but its something
The best advice I can give you is aside the other recommendations, is to learn to interactively debug PHP. It's been done for decades (debugging tools) and you can do it with PHP too. When the code is not yours, specially, you'll speed up things. Invest on learning to debug ;)
I was poised ready to patch/update a bunch of my sites, expecting a drupalgeddon type scenario - but none of them have comments enabled, none of them use Drupal JS on the frontend, and none of them host sensitive user role specific files. I'll get to updating very soon, but I don't think, in my case at least, these vulnerabilities are that severe? Feel free to correct me if you feel I'm wrong.
The article OP linked does not discuss the vulnerability that was addressed today. The article is talking about multiple other less critical vulnerabilities identified last month, that affected sites with very particular use cases. The security updates released today is a single, highly critical, vulnerability and should be patched immediately. [Here is the information about today's security updates.](https://www.drupal.org/sa-core-2018-002) Keep in mind, any competent Drupal developer should be following security releases and should already be aware of this. If you are just finding this out now, on an incorrect blog post, please reconsider your security policies.
The article linked is wrong, view here: https://www.drupal.org/sa-core-2018-002
It's an outdated spec probably, if you use Apache or Nginx it won't run as CGI, so don't worry about it.
Two: There is much faster swoole. There is much better phppm project(which uses reactphp components anyway).
So that video was just 1 big advertisement...
Yeah, it appeared dead, though. I even checked out the IRC channel a few times.
Yep so that's the point. Instead of reinventing, you use PHPMailer. This is one dependency. So same goes to many popular packages, and that's why we need dependency manager :)
I agree with most of what you say but take issue with this: &gt; the idea of using a very light framework or God forbid no framework is often met with incredulity There are many really popular microframeworks in php. Slim, Lumen, Silex to name a few. These are not dissimilar to Express in nodejs or Iris in golang. At least with PHP you have a choice, if a monolithic framework is the best solution. And believe it or not, for 90% of applications, it is. 
I think you're confusing matters. Yes there needs to be a handler but all that does is hand the message off to an external service. From there it could be 0 to n different consumers handling the message in different ways. For example using topics in rabbitmq means your message can be put into an number of different queues each with its own unique consumer.
I'm really surprised Symfony didn't have this before. Or that I didn't notice missing it in my small forays into Symfony. Laravel has had a queue for ages and I can't imagine developing without it. Especially in an enterprise application where queues are necessary for scaling. 
Going to piggy back on your message with an example to help anyone still a bit confused. Say you have a booking function on your site/API at the end after a successful booking you want to fire off an email to the customer. If you're using an external service (e.g mandrill) for this then you have to make an API call to it to send the mail. Now say that takes 1 second to do you're adding that time to the time it takes to send the response to the client. A common solution to this is place something in the DB and run a cron job every minute that goes through and sends all the outstanding emails. With a queue instead you send a message to the queue with everything you need a for a consumer on the other end to send that email for you, depending on how busy the consumer is the sending could happen within 1 second. Advantages: - quicker API response - opposed to a DB/cron you spread the load rather than having a bulk send every minute - multiple consumers for each queue if needed so when traffic is heavy then scale up the number of consumers to process the queue faster - the queue is an external process and so can be the consumers, so put them on a separate instance so you don't use important CPU cycles that could be processing web requests. - advanced usage with topics allowing single message into multiple queues to be handled by different consumers.
Mirrored patches: * Drupal 6: https://gist.github.com/paragonie-scott/dca4690a504a1d860575041eb274eeef * Drupal 7: https://gist.github.com/paragonie-scott/79ddffd734bf15a9d86b723d74d15572 * Drupal 8: https://gist.github.com/paragonie-scott/ee034dc43cbaafb9ff1cfcdda77d3240 The actual mitigation of these patches: https://gist.github.com/paragonie-scott/79ddffd734bf15a9d86b723d74d15572#file-drupal-7-x-2018-002-patch-L91 Explanation: https://twitter.com/codeincarnate/status/979080318966730753 &gt; Drupal uses the hash "#" at the beginning of array keys to signify special keys usually that lead to some type of computation. Basically you can inject these. See Drupal form API for example
psalm - https://github.com/vimeo/psalm
Wow. I expected something way more complex. How was this not noticed earlier? This kind of bugs are final nails in Drupals coffin.
&gt; Wow. I expected something way more complex. How was this not noticed earlier? &gt; &gt; And they fix it by sanitizing input and not by changing hiw they trwat user data. Sanitizing inputis now long known to be a bad idea tor security and just leads to further exploits down the line anyway since it doesn't fix the root cause. Some day someobe in srupal will write special logic arouns keys starting with $ or % and this sanitization wont help then again. &gt; &gt; This kind of bugs are final nails in Drupals coffin. Pro tip: Double check spelling and grammar when attempting to sensationally criticize other people's work. 
I just imagine they're an eagle, typing with sharp eagle talons.
That should be indication enough of the fact that you're using magic.
True it's a queue, but I wouldn't call it a message queue.
Don't be limited by the language, we have phpdoc, which allows us to be much more specific, it has mixed and instead of array could define the type of items like PipelineProcessor[]. :-) About the suffixing of class names, if you have a multi-tier architecture, you would name everything the same? Like: Controller\Something, Model\Something, Model\Contract\Something, Entity\Something, Repository\Something, Repository\Contract\Something, Service\Something, this would require a hell of a lot aliasing and I wouldn't even dare to try to search by class name. :-D For learning purposes I find it best to reinvent the wheel, like I have implemented a Redis client, now I know what protocol Redis uses, can use telnet to talk to it. :-) Could have require predis and wrap it, wouldn't know a thing about the service. 
[removed]
[removed]
Hello, I'm working with Codeigniter, and I want to insert an ellipsis in the pagination. At the moment, every page is displayed (&lt;&lt;1,2,3,4,5,6&gt;&gt;) and I want it to look like this (&lt;&lt;1,2,3...6&gt;&gt;). Is there a way to do it in Codeigniter? Thank you!
But he is not wrong though. 
old school but when it works it ain't stupid : D
Which you've posted to r/php why?
There is a way to dispatch events async in Symfony app https://blog.forma-pro.com/symfony-async-eventdispatcher-d01055a255cf 
Yes, he is. &gt; Sanitizing inputis now long known to be a bad idea tor security and just leads to further exploits down the line anyway since it doesn't fix the root cause. Enlighten me. Why is sanitizing user input, or any data from outside for that matter, a bad idea for security? &gt; This kind of bugs are final nails in Drupals coffin. This statement is utter nonsense. Drupal is not going anywhere because of this bug. If these kind of bugs would lead to the demise of a CMS, why on earth do Joomla and WordPress still exist? 
Joomla is still a thing?!
Unfortunately: yes it is. They did cooperate with other projects in the PHP-FIG, so it's still not as bad as WordPress.
[removed]
Looks great. Just the amount of overengineering that comes with being a developer. ;-) One point of note: You should add a 301 from the old feed's location to the new one: `http://christoph-rumpel.com/feed.xml` -&gt; `https://christoph-rumpel.com/feed` Also, some other 301's might need tweaking. This one's broken too: `https://christoph-rumpel.com/2017/09/build-a-facebook-chatbot-with-botman-studio/`. 
Dracon, rather.
Regex101 saved my life! The best and last guide you need for mastering 
When someone says "sanitize" typically there's some shoddy filtering involved that often leaves multiple injection places (like in this case). Sanitize implies you take user data, and remove the "bad" parts. But user data is not bad or good, it's just user data in one format, and you want it probably transformed and encoded to another format for display, storage or other processing. So in general he's right the word "sanitize" is suspicious in someone's mouth. In *some* cases however, and rare cases, it can be the right solution. In this case filtering the input array to remove keys beginning with "#" would be a form of sanitization, and it should work, I'm not aware of the details of the bug, and why they failed.
OK thanks a lot for mentioning! I missed that. Will do that right now .
I do a lot of Drupal. This # key is at the core of how Drupal uses it's form API, and render API. A long term fix will be painful and that's why this patch was put together quickly. Drupal , while not as bad as wp, have a very large contributed/ plugin community and I'd guess any changes to form/ render API the could correct the are going to cause massive bc breaks.
Looks clean, great job! I just wanted to say that this is the strangest coding style I have ever seen. All PHP code being indented and function visibility being declared on a separate line, but variable visibility not, makes it weird and inconsistent.
Is there any #special key that could be used for a real remote execution vulnerability, or is the risk theoretical for now? I saw various hooks for executing functions by name, like this ['foo', 'bar'] but if you can't specify arguments that's not very useful.
"I wanted to change my blog's face, so i threw tons of php files on it." A summary of the web. (Yeah, no offence, but for me it's a stupid idea)
Got your point :-) True, but this change was made to fit the site's workflow more my daily work/jobs and to try out new stuff. The user does not care what happens under the hood and Jekyll still would have been a little faster. 
yes the first month of so of a job is hard and stressful because you don't know anything. This is true even when you've got a lot of experience. don't be afraid to ask for help!
The weird thing is that it worked really fine before I reboot my pc... and literally didn't make any changes before the reboot. I don't really want to allocate 2 GB but... i'll try in dev and hope this problem don't come when it will be on prod.
I will. I actually used to respect you...
https://medium.com/@fabpot/fabien-potencier-4574622d6a7e
Two questions: 1: has this been benchmarked against the PHP implementations of CommonMark ? 2: are there any PHP implementations that wrap to the extension methods &amp; fall back to PHP implementations if the extension is not available?
Not sure these are still relevant or there have been changes after this run, but: =================================== Here are the average parsing times: =================================== krakjoe/cmark | 1 ms Parsedown | 8 ms cebe/markdown | 8 ms cebe/markdown extra | 9 ms PHP Markdown | 10 ms cebe/markdown gfm | 12 ms PHP Markdown Extra | 15 ms CommonMark | 61 ms https://chat.stackoverflow.com/transcript/message/41800047#41800047 This benchmark is based on https://github.com/thephpleague/commonmark/tree/master/tests/benchmark 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [thephpleague/commonmark/.../**benchmark** (master → b02bfcb)](https://github.com/thephpleague/commonmark/tree/b02bfcbaca5a83666494eef5caa9d338c279a0ce/tests/benchmark) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dwgtrhl.)
Unrelated to vulnerable apps. I open /r/PHP and i see drupal vulnerability. That's it.
mod_php was only really meant to work with [mpm_prefork](https://httpd.apache.org/docs/2.4/mod/prefork.html). Long story short, every web request needs a process to handle it. 5000 concurrent requests? 5000 processes. If each one needs 1MiB of RAM, that's 5GiB of RAM. PHP recommends the same thing: [1 PHP worker per request](http://hk.php.net/manual/en/faq.installation.php#faq.installation.apache2). Multiple processes take up more memory (and sometimes more CPU) than other models: like threading or event loops. In general, the less processes your application needs, the more simultaneous requests it can handle. BUT: You're going to need a process for each PHP request anyway. mod_php's advantage lies with the "1 process per request" model: it embeds itself in apache's process. Instead of needing 2 processes (apache + php) to handle a request, you only need 1 (the apache + php one). Disadvantages: Apache process takes up more memory. PHP overhead for non-PHP requests. Usage of more efficient MPMs or servers is discouraged (e.g: nginx, mpm_worker, or mpm_event) unless using something like PHP-FPM. I've generally seen a 100% static-file handling improvement w mpm_worker or mpm_event over mpm_prefork, but online performances suggest 33% is more common. (e.g: 4k vs 6k vs 8k req/sec). nginx is usually in a category of its own (8k req/sec vs 2k req/sec). If you have static content or long-requests: these numbers matter more. If you have NO static content or long-lived requests (say, another server is handling that)-- mod_php isn't that much different. tl;dr mod_php needs fewer processes, but adds a cost to EVERY web request. This matters more on mixed-content servers. 
You get more space if you skip indenting every line :) With more parameters I usually break just the parameters into separate lines.
It says "also, I'm running debug php ..." right after that, so those numbers are meaningless.
Yeah, sorry about the confusion I meant for projects that do require a framework as the question was custom (framework) vs existing. Some projects (mostly if you don't expose an API nor a web interface) are better without a framework at all.
If you only read this line then it might be confusing: &gt; Neither Symfony nor phpBB uses Composer **as a way to install its bundles/plugins/extensions**. But if you continue reading: &gt; When installing a Symfony bundle, using Composer **is not enough**; you also need to enable and configure the bundle correctly before using its features. And then the article goes on to show an example command which uses composer as the first step for installing a package for symfony.
Well you haven't tried which ones you've tried. have you tried https://github.com/nikic/FastRoute ? It's somewhat a standard in microframework routing. It is one of the fastest around. The author is also a PHP maintainer. 
I've used Slim's routing in the past, it's really simple and easy to install. https://www.slimframework.com/docs/v3/objects/router.html 
So you're gonna be quite sad, be cause Symfony is droping autowiring in 4.0 =[
Digital ocean has a really strong community and there is lots of info to read up on. You can create a droplet for $5 play around with it to get your head round it before you commit.
It uses composer as a place to store it...but the installation is handled by Flex... So...it is kinda confusing to say the least
In case it's unclear, in 7 the `{ function x()... }` is parsed before the `function x(){}` which is different from 5.6/HHVM.
Author of league/commonmark here. Here are the benchmarks on my machine (PHP 7.2.2, xdebug disabled): Benchmark Results, CPU: 1) krakjoe/cmark 0.84 ms 2) Parsedown 2.30 ms -1.46 ms 3) cebe/markdown extra 3.03 ms -2.18 ms 4) cebe/markdown 3.97 ms -3.13 ms 5) cebe/markdown gfm 4.48 ms -3.64 ms 6) PHP Markdown 4.63 ms -3.78 ms 7) PHP Markdown Extra 6.61 ms -5.76 ms 8) CommonMark 25.92 ms -25.08 ms This extension is much faster than all PHP-based parsers, especially league/commonmark. But if you're caching the rendered HTML output then you'd only "notice" the extra 2-25ms slowness during the initial conversion. I was hoping to write a blog post comparing all of these parsers, but here's the short version based on my experience and limited research: https://i.imgur.com/ri022Ch.png Basically, there's no perfect Markdown parser that ticks all the boxes - the best one for you is highly dependent on your needs. If you want raw speed and full CommonMark support then krakjoe/cmark is definitely the way to go!
You could check http://route.thephpleague.com/ Someone already mentionned FastRoute, and this one's built on it, but I prefer using the league's packages for some reason.
That's a bug in all 3 cases !
A time zone is a function that calculates a loc offset for a moment in time. These functions are complicated and determined by politics. Importantly, they are one way. If you know a moment in time (UTC) and a time zone, you can calculate local time reliably, but if you know local time and a time zone, you cannot calculate UTC time reliably (e.g. during DST transition the same hour occurs twice).
https://symfony.com/doc/current/setup/flex.html &gt; Symfony Flex is a Composer plugin that modifies the behavior of the `require`, `update`, and `remove` commands. When installing or removing dependencies in a Flex-enabled application, Symfony can perform tasks before and after the execution of Composer tasks. Not that confusing. It simply solves the problems highlighted in the article that you linked. Your article said: &gt; When installing a Symfony bundle, using Composer is not enough; you also need to enable and configure the bundle correctly before using its features. If you use Flex, then using Composer will be enough. You won't have to "enable and configure the bundle" manually. At least that's the main goal.
Yeah some people already mentionned something similar but all I can say is, while it's very great to doubt your own skills and make sure you always progress, don't throw away the possibility that maybe the others aren't as good as they seem. So maybe it's not that programming isn't for you, but more like their CMS isn't for novices (That would make it a bad CMS in my book). As long as you stay open to all possibilities and keep doing your best, you'll be fine. (Posting that here shows you're on the right track.)
Precisely. We just got a new VP of IT and he is even relatively clueless still clueless 2 months after being on-boarded. It doesn't matter how experienced you are, it is going to take time to learn the culture, tooling, etc.
I don't know why it got downvoted: if (function_exists('strpos')) die(); should always die before the error get caught, since that the fatal error due to redefinition happens at runtime. In all three cases, it's bugguy, the code should never reach line 2.
Blame wordpress and move on.
While it's pretty shocking, it's also been an open door for years and no (known) attacks have surfaced.
This 8s a great advice. Serversforhackers is awesome. Their videos are short and to the point, and a lot more cleaner to read on the screen. 
I'm not quite sure I've understood your questions but, can't you just save the entire HTML output into a $var than, echo it on your div?
I was REALLY considering buying RegexBuddy a couple(few?) years back. Regexr wasn't quite cutting it, but as regex101 improved I had fewer and fewer reasons to drop the $40 for RegexBuddy. 
Partial commits look incredibly useful!
This sounds like either HTML issues (concepts) or Web concepts are not being applied. A form submission to, say, post, will need to reload the page. If you are posting to a new php endpoint - then the page will reload and have new content. If you are wanting to post without reloading the page and replace the contents of the div with a response - you now need to use Javascript your modify your HTML dom.
my bad, i'll change it
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Okay I hang around this subreddit pretty regularly and I've never seen /u/colshrapnel spam anything. Still doesn't change the fact that he gave you criticism in the form of an article and you just got defensive and tossed it back in his face because you don't like his tone. It wouldn't cost you anything to just read it, take it on board, and see if you can improve your code based on it - maybe even start a conversation about how to apply it. It's long but it's got a lot of good, sensible advice. For the record: https://github.com/search?utf8=✓&amp;q=mysqli+wrapper That's just on Github. There's probably more that aren't specifically called wrappers. Point being, your thing isn't that special. We all build stuff like this at some point. You can say that ORMs/query builders haven't superseded plain SQL, but you are 100% wrong as evidenced by the fact that almost everyone uses ORMs/query builders and only drop to plain SQL when necessary. Most ORMs/query builders allow that if they're any way serious. I'm a dev who does have a use case for writing plain SQL fairly regularly because I do large volume data processing, and I still use a query builder about 75% of the time. So, again, why would I use this, and even if I did, would it be worth giving up the many advantages that come with using a good ORM/query builder? This is still criticism even if you don't want to hear it. Writing software isn't just about having correct code - it's also about its purpose and real world usability and advantages over what's currently available. Maybe you should think about that instead of wanking over how cool your thing is.
Doesn't composer do steps 1 &amp; 2? And can't you add any linter calls as a composer post action? At that point you're just logging the output from your build.
No, he posted that link or a similar on a different post of mine even. And he does spam his posts and causes problems with users all the time. And I did read it, though you seem to not have great reading comprehension, as I stated explicitly that the criticism could have been written in one sentence. "Your class doesn't expose the full MySQLi api." Great job posting a GitHub search. Now stop being lazy once again and actually link me to one, as none of the top ones based off of stars even come even close to my wrapper, in term of features and syntax. I doubt you'll do this, as you seemed to back down as I called you out to provide proof for saying my code doesn't follow best practice. Ah, so now I see your issue. You're a dogmatic programmer who thinks there's only one way of completing a task. That's fine, and I honestly respect your opinion. But there are many people who prefer vanilla SQL. LOL "100% wrong". But since you prefer query builder or ORMs, then you're right, this class is not for you. Once again, you really need to work on your reading comprehension. I stated specifically that I prefer criticism over compliments, as it's the only way to improve. I'd also suggest taking a logic course, as you introduced for too many straw man fallacies. 
Events are messages but messages are not always events. Messages are used to give other parts of a system information where all of the information is encapsulated in an object. Events are that, but then they inform you of something that has happened (domain events) or something that is happening (symfony events).
You've always been able to do this with 'git add -p'.
http://restler3.luracast.com/examples/
Nice product, but straight up $200 a year is too damn high, or even worse if you pay $20 a month...
You realize that anyone can click on his name and get his comment history, right? He's not spamming. He's a bit of a dick but he knows his shit. I'll leave it up to /r/php to form their own opinion about this particular exchange. And as to whether your wrapper class has merit... oh well, looks like the community has already decided that it's worthy of 0 upvotes. Too bad, so sad, better luck next time. I got other stuff to do. Go ahead and have the last word here, if you like. Claim victory, do a little more wanking off over your code, maybe insult me a bit. Just get it out of your system or whatever.
From a error-prevention perspective, using PHPStorm is sort of like going bowling, but using the gutter bumpers – if you're not clear on how to use various methods/functions, PHPStorm can prevent you from making a mess. But it also won't stop you throwing the ball into an adjacent lane. Some great developers find PHPStorm invaluable. Other great developers are perfectly happy with Vim. VSCode + a bunch of plugins can get somewhere close, but it'll never match PHPStorm *if you want that exact experience*.
When I hear someone say this, I think they must value their time very highly. Or they don’t refactor their code much. Or they have never used the debugger in PHPStorm. PHPStorm makes me a better programmer and easily saves me $200/yr in time. I used to be the guy that coded in a plain old text editor, then I tried a good IDE and have wondered why I waited so long. The integrated debugger alone saves me so much time. But to each his own.
That's what I thought, still nothing regarding my alleged bad coding practices nor a GitHub link similar to my class. I see you're going to stick with your straw man (and introduce more), as you are literally out of words. Wow, I really care about upvotes on Reddit haha. What's even funnier is that all you've done in this exchange is created a lot of pointless noise on the internet because you have a rigid view that everyone MUST use an ORM or query builder, since you said so. But still no actual criticism regarding my class. Just fallacies and unsubstantiated claims.
Fair point, I should have said $200 is to damn high compared to the handful of other IDE's that do nearly everything PHPStorm does ... for free.
Also, they do offer a perpetual fallback license so you can basically buy it for a year and then continue to use that version like before https://sales.jetbrains.com/hc/en-gb/articles/207240845-What-is-a-perpetual-fallback-license-
I didn't even realize this wasn't implemented yet, seems silly. I never commit all my changes at once. I always run through the changes and select only the things I want in the commit. Also the reason I don't like the cli client of git. It makes it very hard to do this compared to sourcetree for example. (and now phpstorm) 
This is partial commits as in `-p`, not just selecting/deselecting certain files which you've been able to do for a while.
At that price, it's your employer's money, and (assuming 50k salary) it pays for itself if it saves you 2 minutes per day. Disclosure: I have a personal license for the general suite.
👏👏👏 nicely put. 
Phew... I dont really miss that time having to check those things... &lt;3 docker
Ah ok, should check that out then, thnx for the info. 
Also there is [Php Inspections (EA Extended)](https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-).
How many people here use PHPStorm on Ubuntu? When I moved my work PC over to Ubuntu I had atrocious memory issues trying to sync with remotes. I would love to be able to use it again! 
+1
Sonata Admin
It's symfony, and I can create through command line very simple user management system but will it be wise to use such big system for such simple task? I've created very simple podcast website using standard symfony features, it took about 6 hours. But it seems to me that there are some simpler framework to do that. Am I right? Or symfony with sonata will be perfect?
I’d say you can get pretty close with VSCode with the right extensions, but even then PHPStorm is a real IDE while VSCode remains more like a text editor. For example I can never get ‘use’ to autocomplete like in PHPStorm. PHPStorm recommends optimizations while you’re coding, finds bugs you wouldn’t have seen at first (especially with EA Inspector) and it autocompletes just about everything you’d want. It just makes you a lot more productive and at the same makes coding in PHP for me way more fun (since I can focus more on the problem I am trying to solve). Btw this pretty much sums up all Jetbrains products. All their IDE’s are very well made. I use their products for most projects and use VSCode for smaller projects or quickly editing something.
I've only used git from outside the IDE before, mostly because of this feature. Now the integration might actually be useful...
I’ve had problems with it sometimes being sluggish or locking up for a moment. What fixed it for me was giving it more memory by setting a jvm flag. Can’t remember how to do it exactly, but you should be able to find it by googling. Don’t know if it fixes your problem, but might be worth to try.
Finally decided to buy it after using it for so long. It's the first IDE I've ever bought. JetBrains deserves it. Not only the product is extremely good and a big time-saver, it's a pleasure to use and actually makes my job much more enjoyable. Having a true intelligent code completion makes PHP feel much more professional (for a guy coming from strongly typed languages like me anyway). I can't recommend it enough.
Should I upgrade now or wait for the plugins to be updated? Or does it not matter?
How much lighter than Symfony Flex can you get? ;)
There are really good libraries available which can do it, it doesn't have to be part of your framework to use something.
Magento's db schema is enough to make me feel like a turtle with a walnut for a brain. Never mind the code. Good luck!
Oh boy, I hope the bug causing double-shift to not focus the search field is fixed in this! :)
Are we talking Magento 1 or 2 here ?
Both unless it's exponentially harder to learn both. I'll focus on the greatest opportunity
If you have any open source projects, you can apply for an open source licence. Alternatively, you can wait until the next Early Access release is out and use that for free
If you have any open source projects, you can apply for an open source licence. Alternatively, you can wait until the next Early Access release is out and use that for free 
And $90 is only for the first year, the 2nd year is $71, and every year after that is $53.
There is nothing that does what phpstorm does. Paid or free. It’s invaluable. 
If there was a sublime key binding package available I would consider switching..last time it tried I was just so damn unproductive I couldn't stand it..now I only open it to do code inspection
Download the jetbrains toolbox app. And then install phpstorm with that. It keeps your ide up to date and you can give it some more memory in the toolbox settings. The default 768mb makes the ide slow on larger projects. 2-4gb helps quite a bit.
There are other ide's that offer quite a bit of functionality as well. Phpstorm seems to be the most complete package though.
When using `--patch` with `git add` you can change the hunk size or edit it directly.
I had the same problem a year ago, but if you persist with it for a few days you will get used to the new key combos. 
inside intellij? 
I think your issue is that you don't do well with missing information, I would almost take a guess and say you're good at math too. What you need to do is start learning what's going on UNDERNEATH. For example, they do routing, so first learn what routing is in general BEFORE looking at how laravel does routing. Same thing for dependency injection, and so forth. Try to understand the **GENERAL IDEA** for it before diving into laravels interpretation of it. That way you understand the end goal, what laravel is trying to DO, and it'll help it stick in your head. And of course you can ask questions on reddit, et al, to get a better idea of the general idea of things. because I think your problem is that you get lost in the details, you don't know WHY something is being done so it doesn't stick as well. 
Think of it like installing a program to be able to run a specific audio file. You can download the program and the program may tell you that you also have to download some extra codecs and install them. And once you do both steps, you can listen to your audio files. With a dependency manager, you tell the manager "I want to listen to these audio files" so it hops on the internet, downloads both the codec and the software and then tells you when it's done". That's dependency management in a nutshell. In terms of software development it's useful because it means someone else can download your source code and tell the dependency manager to install all dependencies. There may be 15 of them needed and it'll download them all for you. And then you're ready to run the code. Dependency managers also have the idea of "pinning", so you can tell it that you only want to use a specific version of the library, or only versions greater than 3.1.0 because all versions below that are known to be insecure, etc. 
I like [AltoRouter](http://altorouter.com/). Doesn't seem to be noticeably different to noodlehaus/dispatch though, aside from being slightly more OO-leaning.
&gt; Also the reason I don't like the cli client of git. For most of your command line needs, ['tig' is a lifesaver](https://github.com/jonas/tig).
Or just take the time to bind your keys in PHPStorm. It's truly worth it and almost everything in PHPStorm is configurable.
&gt;this may have come across as overly negative Don't worry, I didn't take it that way. I think you were pretty spot on with your assumptions.
It actually sounds like what you want is different objects based on a type. http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/inheritance-mapping.html You could have a parent table 'product' with id,name,product_type, sku,... and based on the product_type being service, it would pull more values from a product_service table with any values that are unique to a service product. product_digital would have for example the link to the file to download and return a digitalProduct class. product_attributes would be keys and values, height,weight, colour etc. is tax_exempt actually has nothing to do with a product, have you ever picked up an apple to check if it is tax exempt? Why is that stored with the product, it belongs in a tax class that can apply rules to the product to determine if the product is tax exempt and if not how much tax is due. If you were to operate in two tax jurisdictions your $product-&gt;is_taxable() is going to deliver you a binary answer that will be useless. $TaxCode-&gt;is_taxable(ProductInterface $product); now puts all your taxation rules in one place where they belong. you could then pass the $taxcode into your checkout and have it calculate tax due. your checkout class simply becomes a value store with no real logic. one other advantage this has is that it means a business rule cant be broken, if you have an employee that adds a new product that is taxable and fails to tick the box how and where is that validated?
file_get_contents and json_decode.
I tried but it's not working Can u please try and say?
Idk what you mean by web solutions, that's a pretty broad term. With that said 'shortcuts' to improve the workflow. I'll be speaking from a freelance/work from home pov. - Use an IDE or editor w/ _great_ linting support so you can jump through code fast and iterate fast. (learn your ide/editor) - Use a framework, don't waste your time building from the ground up. I spent the first 8 years doing things myself (I've been writing php code since 06-07 and up until a few years ago I've gotten to a mature state where I just don't like writing shit myself if I don't have to. Use a framework that's tested and learn it well. - Follow SOLID to your best ability, you'll thank yourself in the long run. - Always use git - Discipline yourself, limit your social media activity when you're working. Sure a stream/tv/movie/podcast in the background is fine as long as it's not stopping you from working. This has been a decade long battle for me and I'm only in my late 20's... - Use google, but don't copy/paste solutions to problems you have. Check those solutions and maybe write tests for those solutions to make sure they are bug free then continue with what you were doing. - Test things that make sense to be tested. Dealing with numbers, dealing with a special interaction between classes, etc... test things. Even today I feel like I don't test enough and that's a problem I work on and a problem that I pay for every day, but it's worth nothing it's never too late to test. - Last tip is to use http://packagist.org and http://getcomposer.org
I'm glad now to know I'm not the only dev smashing his shift key repeatedly in anger.
Ugh. Mageno is interesting. Like others have said, go for M2. Although it still has things I strongly dislike (EAV was a poor choice imo -- the XML config for page layouts is also goofy imo), it is soooooo much better than M1. Magento does have a steep learning curve, but if you put your head down and power though you can pick it up quickly. Look up Alan Storm. He has some great blog posts. They helped me loads. 
Really useful release, cross-platform IDE for PHP built on JetBrains.
Don't forget to add this https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-
[removed]
I would disagree about extensibility ... The parser is closed, but the AST is very open for modification, and there's not much you really *need* a modifiable parser for anyway ...
[removed]
Ew, mixed language code. Get that Dutch out of there! 😉
JetBrains IDEs are cream of the crop. I use Visual Studio for C#, and VSCode for UI, and they're both utter trash compared to PHPStorm and WebStorm. In fact, the only time Visual Studio is good is when you add ReSharper to it - a JetBrains enhancement. And now they have Rider, which means Visual Studio can fuck off.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
That looks nice! Any other recommendations for plugins?
I use it everyday but never have trouble with it...
[removed]
[removed]
Symfony plugin is awesome, so is .ignore
Have you looked at Drupal's DB schema?
I can guess you are using file_get_contents for https:// and get 401-error See here https://stackoverflow.com/a/28701786/9209584 how to
tbh.... If you can't implement a simple API-call, don't do any projects that involve money. 
PHP Annotations has an issue and blocks Symfony plugin aswell. A reinstall for PHP Annotations resolved it.
Also the annotation one!
Ummmm ... `$whatIWant = $result-&gt;hits-&gt;products ?? null;` ? 
&gt; I just don't think it's as simple as "easy/hard", "good/bad", or "yes/no" ... Yeah, it's definitely more nuanced than that, but it was the easiest way I could summarize things without actually writing that blog post :) &gt; I would disagree about extensibility ... The parser is closed, but the AST is very open for modification You're absolutely right regarding the AST, but the parsing &amp; rendering is completely closed, unlike the other packages. &gt; and there's not much you really need a modifiable parser for anyway ... Table support is the most common need that comes to mind (see [webuni/commonmark-table-extension](https://packagist.org/packages/webuni/commonmark-table-extension)). There are other less-common ones too. None of them are possible unless you can hook into the parsing step. &gt; Also, I'm not sure if there is a world of difference between composer install and pecl install ... I wouldn't say it's hard to install ... My package manager didn't have `libcmark` available, so I had to compile that first. And despite having most common build tools already installed, I didn't have `cmake` so I also needed to grab that before I could compile `libcmark` before I could `pecl install`. I would agree that it wasn't "hard", but it wasn't a simple one-liner either.
been running it on ubuntu since a couple of years, never had issues. early versions had horrendous start up times but that's long gone as well.
Hold my project, I'm going upgrad'in!
People keep saying `you can do this on the command line` which is kind of missing the point. 
Off the top of my head: Material Theme UI Markdown Support Grep Console is nice .env files support Key Promoter X (not Key Promoter, that's dead) 
FYI don't use/suggest Key Promoter, development on that is dead. [Key Promoter X](https://plugins.jetbrains.com/plugin/9792-key-promoter-x) is a forked and updated version of it.
Ever since you guys switched to this payment model I've seen perspective buyers walk away because they're looking at the commercial license. Is there a reason that the Personal License isn't the default?
I'm normally a command-line-only guy (`vim` is my IDE), but I will sometimes use `gitk` when I want to see the tree structure and find a specific commit. Actually, that's the only time I use the GUI in Linux-land. :) `tig` is surprisingly full-featured when it comes to doing what you need to do for day-to-day stuff.
So... What if $result-&gt;hits comes empty? $a = $result-&gt;hits ?? null; For the first pass... Then. $whatIWant = $a-&gt;products ?? null; Still two passes needed. With my library you only need one. 
Thank you. I was actually using Key Promoter X but accidentally posted the wrong link.
Don't get me wrong man, I loved CodeIgniter when I started years ago, but now its a really dated framework with less functionalities than mosts and really old code. Yes it still works but if you want to use a framework, even a lightweight one, there are better choices.
Alan Storm's material is invaluable. I'd had years of OOP experience with ZF1 and Symfony 1 - 2, so a lot of stuff just made sense to me since i was familiar with the patterns. M1's implementation of or choice of patterns to use for some thing's were indeed super wonky though. Also the lack of good documentation for F/OSS version was kind of annoying. I actually haven't delved in to M2 yet, so i'm not sure how far along things have come.
Fair enough! 
I half expected the answer to be that it *doesn't exist* and you have to traverse down some esoteric rabbit hole just to uncoil the start of the madness.
Yes. Magento uses [EAV](https://en.wikipedia.org/wiki/Entity–attribute–value_model) which makes it pretty mind bending to figure out. Drupal is a close second though.
&gt; I imagine the commercial tab is the default simply because organizations make up the vast majority of their customer base. But in my mind the people purchasing a business license are more likely to take the time to navigate to the business-specific license page. Your average user is likely to look at the immediate price tag and dip out before exploring further.
Talking strictly about the database side of things, what are you going to achieve by splitting the table in two? I could understand if (as someone else said) there were different product "types" each with their own distinct set of properties, and you were trying to model an inheritance hierarchy in the db. But it doesn't sound like that's what you're doing. It sounds like you're keeping the same set of is\_ fields, you just want them in a different table. Why? If you don't want to see those fields in every query, just leave them out of the projection list in the query.
Yea, but one have to write all these scripts by themeselves. Here its given as out of the box. Makes easier for developers to focus on their main project. So it saves lot of your time. Thanks for the valuable feedback.
I currently rent a server from LiquidWeb. They have VPS options as well. I like it because i have root access to do what I want, I have WHM/Cpanel for managing simple stuff. Liquidweb has really good support as well. It is a bit more expensive, but not a bad way to go.
Yup. Perfectly fine to have an existing application in CI and maintain it, but I dont understand why anyone would start a new application in CI when things like Laravel and Symfony exist.
Do yourself a favor and use something like [StyleCI ](https://styleci.io/)to auto fix code style issues.
When I click the link
It would work, but maintaining servers is another job, and probably a job you will not like
You could be editing the wrong php.ini. Use phpinfo to check where it is loading php.ini from. http://php.net/manual/en/function.phpinfo.php#refsect1-function.phpinfo-examples
Anyone else have problems with the PHP Annotations plugin stop working with the latest update? I have tried it on both linux and Mac and PHP Annotations does not load, which also prevents the Symfony plugin from loading.
Reminds me when I was working in Mauritius, they had a custom framework, and here I was a Nigerian working on a source code that was 100% written in french, and my colleagues spoke little english, had to learn the code and french ( as to regards to the source code) at the same time, but it turned out well, once you look at other modules and codes and see their design structure and work on a small project, you start to get the hang of it, when learning try to understand why it is so, rather than trying to cram the code, it will go a long way. 
Gonna be that guy, apologies in advance. Docker. 0 conf.
Make sure you **restart** services after adjusting configurations, also.
I am not sure how Docker come into this picture. I am not talking about preparing the new stack/container for running apps. It's just about creating Nginx Virtual Host. Or Maybe I didn't get you.
Laravel itself provides an installation tool called [Valet](https://laravel.com/docs/5.6/valet) that can do all of this automatically. All you need to do is create a directory and it's mapped to `directory.test` in your browser. Great for all PHP projects, not just Laravel.
Found the guy that doesn't know shit
You don't need to do anything if you are using docker. The php image comes with hosting. The only additional step is etc/hosts , unless I've missed something, it seems like docker is an easier solution to set up a host.
Only on r/PHP would something like this get downvoted LOL
 echo "&lt;form action='' method='GET'&gt;"; echo "&lt;select class='Myclass' name='WO' onchange='this.form.submit()'&gt;"; echo "&lt;option value='" . "Select a WO" . "'&gt;" . "Select a WO" . "&lt;/option&gt;"; while ($row = mysqli_fetch_assoc($result)) { echo "&lt;option value='" . $row['Name'] . "'&gt;" . $row['Name'] . "&lt;/option&gt;"; } echo "&lt;/select&gt;&lt;/form&gt;";
You are already echoing out the name, so you got the gist of it. echo '&lt;form&gt;'; echo '&lt;select name=""&gt;'; while ($row = mysqli_fetch_assoc($result)) { echo '&lt;option value=""&gt;' . $row['Name'] . '&lt;/option&gt;'; } echo '&lt;/select&gt;'; echo '&lt;/form&gt;'; 
Is it possible to have form stickiness when the data is coming from the database?
I agree Valet is a great tool to install all the stack required for PHP development. Here the case is bit different (manual setup).
I've tried atom a few times and still seems inferior to Jetbrains Webstorm / PhpStorm even for editing html and javascript. Granted I think my last try was a year ago. Has anything really changed? 
Question about this benchmark: why are all functions declared as anonymous functions instead of just being declared? I.e. ``` $usage = function (...) { ... }; ... $usage(); ``` instead of just ``` function usage() { ... }; usage(); ``` None of these are passed around or anything. Are there any benefits to this approach? Downsides? Just a matter of style?
^ exactly. at this point the only frameworks that are worth using/learning are laravel,symfony and yii. anything else is pretty much outdated or not as good as the frameworks mentioned above 
You can find small instance around $5 from digital ocean, vultr etc. You can check free tier from AWS or MS Azure as well.
What about the other things shared hosting usually does like email and sftp and auto renewing free SSL certs. Do you have to do all that yourself too or do they offer tools to simply stuff like that.
Your current code, how much of it is OOP? Learn all the OOP jargon and concepts. Learn OOP design patterns. Do 2 ”no-framework framework” tutorials. Do a codeigniter tutorial. Study Laravel.
Not sure if it's deserving of downvoting, but this isn't new is it? I thought PHP support was available with the initial release of Atom IDE.
You can host for free on Heroku if it's just a sample site, but they require some downtime.
Are you able to schedule it? I could do with a 3am downtime.
No free option will give you a domain name for free. why don't you just use sub folders? site.com/username/site1 site.com/username/site2 site.com/username/site3 on your shared os. If you own 1 domain just use subdomains site1.mydomain.com site2.mydomain.com site3.mydomain.com There is no need to find another "free option". Furthermore every free option sucks in some ways. 
here you go [Rollout](http://grandappstudio.com/roll-out)
I am using [https://www.wpengine.com](http://shrsl.com/rgic) for my wordpress hosting and I'm very happy with that host. Good customer service, very customization plans, and fast websites.
[removed]
[removed]
They brought they doubled the RAM on their $20/mo and cheaper droplets a couple months ago, so now they're on par with what you said.
Google cloud platform has a free-forever tier. It comes with a 1GB egress IIRC. Even if you pay for bandwidth, you wouldn't pay more than a few dollars. 
I host my site for free on GitHub using their pages option combined with a custom CNAME for my domain. I then put a free CloudFlare account in front of that, so the response times become acceptable. I use my static site generator for this, though. That is written in PHP, but not sure if that fulfills your needs. If you need some dynamic input on top of that, you can always add a free form using Wufoo, which works on static HTML.
That many versions at once can only be a security fix. *Clicks link* Yup. Called it. Anyone know what exactly it fixes?
Atom isn't an IDE. It's a text editor. What this does is add support for IDE features.
Aton and PHPStorm are massively different. Atom is a text editor. It comes with very basic PHP support to allow for easier code editing. PHPStorm is a PHP Integrated Development Environment, which means it has a window for editing text while having a massive selection of tools to help make development easier. A few features which you won't see in a text editor: Code structure view to see which classes/functions/etc are in a file, code refactoring tools to make refactoring a lot faster and reduces the risk, version control integration, composer integration, docker integration, vagrant integration, Database connection abilities to view and modify databases via the editor, local test web server functionality, xdebug integration, jump to class, jump to definition, etc. As you can see there are numerous functionalities that an IDE has that a text editor doesn't. Even if you want to compare this ide-php plugin to PHPStorm, it will come massively sort. As a lot of the functionality for PHPStorm was originally created for IntelliJ which has been in development for over 17 years. It has a massive advantage in just development time but also with resources, the majority of Jetbrain's money comes from it's IDEs so they work a lot on developing those to improve them. This seems to be more of an afterthought.
It's probably being downvoted because it seems like it's nowhere near ready to compete with any IDEs on the market.
[Atom IDE](https://ide.atom.io/) is a first-party extension that adds IDE-like functionality to Atom. It looks as though PHP was supported from day 1 when Atom IDE was released, so I was trying to determine if this was the same thing or something new.
Why is this specific to Laravel?
Uhhh... so Atom IDE is based off, but is not a copy of, of Nuclide which is Facebook's editor for Hack.
https://github.com/lodash-php/lodash-php LodashPHP is a port of the popular LodashJS library to PHP. It tries to mimick LodashJS as close as possible. It's still in early development stages, so there are some missing functions, but I'm adding new functions regularly and hope to have all the functions available in the coming weeks. The goal of the library is to have a set of easy to use utility functions for everyday PHP projects.
The easiest way to think about it is that a by-val variable is a copy of the original. If you make a change to the copy, the original is not modified. For a by-ref variable, it is not a copy. So making a change it either identifier will change the original. In other words, the underlying value is the same but the name is like a tag. In C-programming this is referred to as a pointer; because the variable points to the memory address and not to a specific value. To get at the value of a pointer, you _dereference_ it. PHP does all of this for you, but it’s good to know how it works in other languages. 
I love this idea!
Atom IDE UI comes from Facebook - https://atom.io/packages/atom-ide-ui. As in it's on Facebook's github org account. Looking through the commit history it does look like GIthub started their own PHP Support instead of basis it off the hack support Facebook has since Hack and PHP are so similar. 
Not a fan. Lodash in js exists because of js primitive standard library. All of these functions have php equivalents. Discoverability is also poor, since everything is in single namespace
I’m using lodash over underscore because of the lazy evaluation. Hope this library support that implementation as well. Nice work 👍
You are right, PHP comes with a lot of functions built-in. In fact, in some places LodashPHP just falls back to the native PHP implementation. But there are a lot more functionality that isn't provided by PHP out of the box, and which requires a lot of boilerplate code to accomplish. As mentioned in the description, LodashPHP aims to be a set of utility functions, providing additional features that's not part of the language. For example all the string functions takes care of unicode characters, which you wouldn't get in a normal PHP function. Also I fail see how disoverability would be a problem due to the single namespace
It's not as lazy as it could be at the moment, but it is still under heavy development and there are a lot of improvements that are still planned. Performance is a big priority, and we are always looking at how each function can be improved to add minimal overhead
Now do ramda. Actually. Maybe I'll do that as an experiment. 
Discoverability is poor because when I know my input is string, I don't know which functions I can use. It's also not nice to import namespace and huge list of functions to pop up.
Usually you don't get top-level domains for free, but you can get sub-domains that look like domains. When I started out, I used to use cjb.net. (decades ago..) It's not as good as your own domain, but if you need a quick and dirty page, at no cost, it's ok. but ever since I got my own domain, I'm not using anything else. And if you can't afford &lt;$5 per month, what are you doing as a developer? xD 
Also, rather than creating new project, why not contributing or forking existing ones? Quick google search yields: - [underscore-php](https://github.com/Anahkiasen/underscore-php) - [php-lodash](https://github.com/tajawal/php-lodash) - [bottomline](https://github.com/maciejczyzewski/bottomline)
Ok. Since objects are automatically passed as identifiers there is no need of reference. But since simple variables or arrays are not passed as identifiers, they can be passed with reference. This will definitely save memory. I'll test it for speed.
Read about php's "copy on write" pattern. This basically means when you assign a variable to another, you are always creating a reference. When you change one of these two variables (one variable and the current reference), PHP will _then_ actually copy the variable. In other words, if you have a variable with 1mb data, and assign it to another variable, your memory usage wouldn't be 2mb. When you change one if them, that is when your memory usage doubles. 
 lstrojny/functional-php has very little similarities to lodash, and some of the other libraries linked looks either abandoned or has different kind of implementations to lodash. As mentioned before, lodash-php tries to mimick lodash.js as close as possible
How do you currently solve this issue with lodash.js?
I rewrote some Perl scripts in PHP in the version 3 days for a former employer’s internal server and found out last year they just might update one of these years
My employers lead developer insists we use PHP 5.4 because CentOS still supports it. He is completely unaware of the fact it does not get any security updates anymore. Telling him doesn't change anything.
Dunno I don't use it so I don't have this issue. I wouldn't copy API with this flaw in the first place. With raw PHP functions I at least know that functions named arr_* deal with arrays and functions named str* strings.
PHP 5.4 does not get security updates from PHP itself, but centos still backports them. That's what he was trying to tell you. So security argument isn't so strong.
Didn't know that and I am quite sure he does not know it either. Do you have a source for me?
You can import single functions in a file. So if I only need get I only import that by doing import _get from 'lodash/get'; Don't have to carry everything around
I don't use CentOS but this is how server distros operate generally - while they are supported, critical security patches for outdated packages are backported. You can verify this by checking that EOL of PHP 5.4 was in 2015, but CentOS has still php package releases even in 2016. Now, this works in theory. In practice, distro maintainers often don't have time to backport each security update, so they don't backport all security patches, but only those which are really important. So I guess that's why last update I see is as old as 2016.
With LodashPHP you can also import only what you need import function _\get; The cost of having everything included is negligible, and as with any package included through composer, all the files will always be included in the vendors dir. With lodash.js, tjere is also extra configuration that needs to be done to enable tree shaking so only the functions used is bundled, and if that isn't done then the entire library is anyway included as well
Problem is you can do many same things for arrays and strings. For example, `indexOf`. Your function accepts array only, while I know same operation can be done with string as well. It's just not realistic to know which function I can use based on name of operation alone for given input if all functions are under single namespace. I know that lodash is popular in JS world, but like I said - existence of such tool is more natural there. You would need crazy amount of boilerplate to replicate it there. In PHP, I would rather like if somebody picked up [zubr-php](https://github.com/nkkollaw/php-wrapper) from ground, to deal with existing, specific PHP problem - inconsistency.
5.4 for our work :/ 
Thanks for this information, I was not aware of this.
It’s already done
PHP 3.x and MySQL 3.4, the company still uses RPG just let that sink
 $ php -v PHP 5.3.10-1ubuntu3.26 with Suhosin-Patch (cli) (built: Feb 13 2017 20:37:53) 
That's so sad... You must keeping a compatibility i guess?
I use php 5.4, BASIC, and Pick D3.
Only because I am used to Laravel. If there's need and desire for it to be elsewhere in PHP, I'd gladly port it.
Ha. I've worked at Books-a-million. They're a MySQL 4.0 / Perl 5 shop. Like Perl 5.0.1 . Large chunks of functionality are gone when you go that far back. I remember Perl missing the `switch` syntax and MySQL missing sub-queries. Their stack is actually as/400 -&gt; perl -&gt; mysql -&gt; perl, With a sort of perl translation layer between the as/400 and mysql. They still use perl-cgi on their internal customer service site, and the POS systems use RPG and something else awful. That place was nuts. My coworkers were brilliant, but the management. whew. I only pay cash if I buy a book from them.
[@krakjoe's latest tweet](https://i.imgur.com/UzJj8v8.jpg) [@krakjoe on Twitter](https://twitter.com/krakjoe) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Also you have the identifier and your value. The identifier is knowing, where our value is placed on ram. When you do $a = $b then you copy the identifier and make a new one. When you do $a = &amp;$b then you save the identifier from b to a. So you can access the value from b over the reference, which is saved in a. This helps you in daily programming a lot. When you learn what is an function, and how to use references with functions, you will understand a lot more I think. I hope I could explain it... 
Now to just get every other library to depend on this one...
Of course, but it's useful for people who prefer to use a general purpose editor. Also, it's in its early stages and there's nothing stopping it from improving over time
One of my current company's product codebase was written in 5.0, I've been porting it to 7.2 since February. Since I am the only guy who "knows" the product (that is, I am the remaining guy who had at least a basic understanding of the system eversince the lead developer left last September), they gave me the reins to the project last January. 3nd week into the job, while going over and reviewing the behemoth that is product code without a documentation together with our QA team, our assistant CTO upgraded the production server PHP version to 7.2, citing security issues, without telling me, on a weekend, while he's on beach vacation. I still work here.
Everything is DIY. With a VPS, you're just getting a box with a base OS (typically your choice of Linux) installed. You can roll your own email system, but that's a rather advanced topic; you're better off using a dedicated email provider (FastMail is popular). SFTP you get for free from the sshd service on the server. SSL certs you'll need to configure yourself, though LetsEncrypt now makes that pretty easy and auto-renewal is easy to set up. 
Most of what you mentioned exists in Atom. - Code structure view included in ide-php - Atom is made by GitHub, so it obviously ships with git integration (though I prefer command line) - [Docker integration](https://atom.io/packages/docker)
My god.
&gt; execs making sweeping, unilateral tech changes "Good news! Turns out this thing called 'Hostgator' is WAY cheaper than $dedicated_hosting_provider, so I'll be shutting down the Web, Cache, and DB servers tomorrow. Let me know when you get the Magento instance moved, so I can change the DNS".
My understanding is in the JS community lodash get's a lot of heat and sometimes hatred. The reasons, are not clear to me but I use it all the time. This is cool, and it does help the php community in the whole needle/haystack/needle issue.
An example URL that it could generate: http://image-control.online/image.php?image=https%3A%2F%2Fb.thumbs.redditmedia.com%2Fbg3spr4YPJ5w-_M2jgtcJdYwkHBh0gFjzM6kqP4CSLY.png&amp;width=150&amp;height=150
[removed]
&gt; copy on write Just google php copy on write
Wow, I think you win! Last time I had to work with PHP 3.x was more than 15 years ago.
Any reason they don't at least bump it to 4.4?
CentOS is part of the RHEL family. PHP security updates are backported.
Sometimes wonder if any code that I wrote back in the day is still in use. Hope not!
PHPFI otherwise known as PHP 2.0
Wow. Did much break?
Simplifying for language level. Reference is indirect relation between variables that point to the same value (in memory). If one value equals X then you cannot assign the same X in other way than by reference ("I want to point to the same memory space as that variable"). Identifier is a value, which represents other kind of reference - kind of shortcut link that knows the place in memory where object is stored. You don't have direct access to object - you can call its methods using that id link. The source of confucion is the fact that If you copy the link you'll still call the same object, so its similar to reference. The difference is that if you change value of variable holding identifier, the only thing you destroy is the link to object not the object itself.
Just because something’s abandoned doesn’t mean you can’t fork it. Hell even submitting a pull request is enough to spur a project back to life
At the very least most of the basic functions had been working properly for several hours before the CPU usage went to hell. This is a customer portal that had at least 300k visits per hour on peek hours. I never imagined in my whole life I'll be doing hotfixes on a live prod server, on a Monday morning, while answering angry emails in 3 languages from 4 different countries. When our Vice CTO came back a week later, he simply said "That's your Job, fix it."
Any utility library will always get some hatred (as can be seen in some of the comments on here) since some people don't always see the value in them. The same happens with frameworks where you get some old school developers that believe you should never use a framework. Part of the joys of OSS, always having to deal with the haters :)
A friend of mine has a business with a website whose developer, a graphic designer who knew how to copy and paste code, abandoned it. I maintain it, meaning I make occasional updates to the content while she looks around for a new developer. It runs on PHP 4.3 or something like that. Fortunately it doesn’t process payments or allow user input at all, except for a contact form.
With plugins not in the default editor. 
So what's the difference? GitHub made a lot of these plugins too. And a lot actually ship with it, like a markdown previewer and git integration.
/u/colinodell any insights?
I would've written a detailed report, handed it to the CEO, then went to the Vice CTO, handed my resignation and said "now it's your job. fix it".
Klein is fast but has issues with handling POST. F3 (fat free framework) has a nice router implementation. That being said I'm not senior enough to understand all the things routers can/should do. 
most financial services in my country dropped support for sslv3, some even dropped tls 1.0. we wouldn't be able to handle credit card transactions if we didn't have at least 5.4. isn't 4.4 too old for any service doing cc transactions? how does it work for you?
Framework-agnosticism with framework specific adapters is the way to go.
Well it is the first bank in my country, it is cheaper to maintain it than to rewrite everything in another language
I believe /u/krakjoe added those, so I'd ask him.
Facebook has decided to split with PHP and do there own thing with HHVM. See : https://hhvm.com/blog/2017/09/18/the-future-of-hhvm.html As a result some companies who ran HHVM and have been on the fence regarding HHVM have decided to only focus on PHP7. The main reason why people used HHVM was it speed ( compared to PHP 5.x), what has become invalid from the release of PHP 7. A lot of other benefits have also been taken over by PHP 7. So what does HHVM/Hack offer now beyond future incompatibility issues? This new direction introduces code like this ( from the The Hack Standard Library ). https://github.com/hhvm/hsl &lt;?hh // strict use namespace HH\Lib\{Vec,Dict,Keyset,Str,Math}; function main(vec&lt;?int&gt; $foo): vec&lt;string&gt; { return $foo |&gt; Vec\filter_nulls($$) |&gt; Vec\map($$, $it ==&gt; (string) $it); } Its like somebody tried to shoehorn some C++/C# into PHP. People are already moving more to compile based languages like Go, that are easy to deploy and offer better performance. Or front-backend language solutions like javascript/nodeJS. In a competitive market like this unless they pull a rabbit out of there hat, HHVM will simply fade more into obscurity with HHVM being just a internal Facebook only focused tech.
Sonwait it has to be integrated into GE main app or it “doesn’t count”? Backwards much? Just because ya a plug-in doesn’t mean it doesn’t work the same
I recommended Nexcess to a company with a Magento site and a not inconsiderable sales volume after they balked at our quote for an appropriate managed server set up for their size (the owner said that he was used to pay £10 a month for WordPress hosting). He called me back the next day to triumphantly tell me they'd found a great deal with GoDaddy and agreed a two year contract.
It's still a problem though that there's no index support for Git in IntelliJ. You can only add by chunk while committing in IntelliJ, whereas in Git you can partially add chunks, and decide to commit later (or add more chunks).
Good for you. No use harming your own career with not having daily work exp with modern versions.
Well it was not just that, was a series of annoying things. But that was definitely one of them, as I was working with 7.x on a daily basis before changing job 
It means, atom that you download doesn’t have those feature. There are plugins but the app itself doesn’t do it. PHPStorm is built from plugins but they come with the app. For me this is about what the two do out of the box. How many people even think of searching for all the plugins you need? It’s not about what is possibly, since both allow plugins that possibilities are roughly the same.
https://access.redhat.com/security/updates/backporting
There's no need for it to be specific to any framework. You should have a go at making it framework agnostic.
You want to use lexik/jwtauthenticationbundle. I use it in a project and it works rather well.
The air Force is still using non oo code I wrote in 2008 when I was a sra. Written in php 5.2 because bbtux wouldn't give anything better. I mean, who needs json when you have xml?
Won't they not be able to backport at the end of the year when PHP 5.6 reaches EOL?
I've never even see what PHP 3.x looks like. Worked on PHP 4 was when I first got into development 12 years ago.
I have a client on an application I wrote in PHP 5.3 back in 2009. Currently it runs on PHP 5.6. Never had to touch the code through any version bumps. Considering how old the code is its not that bad, it follows some MVC even though it was built without a framework. Works fine and he's holding off on paying the money for the PHP 7 upgrade until it reaches EOL. I wonder if mysqli will play nice on 7?
How can Centos backport security updates for a PHP version that doesn't receive security updates? http://php.net/supported-versions.php 
In modern JS development lodash JS is not needed anymore. ES6/ES7 already provides most of required stuff. lodash seems to be a codesmell today. Requiring a toolbelt helper library to use only one function out of it is not so good. I'd propose author to split this library into smaller packages by their usage type: Array Collection Date Function Lang Math Number String and not to put them all in one. So If I need only array helpers I could use them but not everything
I wasn’t trying to justify but a fair and honest description between the two. Personally, I justify using PHPStorm because they provide a very well maintained product, that without a lot of time and effort is available elsewhere. 
I agree, it's a far more advanced IDE
In most cases it's wiser to revive the codebase than rewriting it from scratch. Yes, most developers would rewrite it, that's because they are not familiar with codebase and couldn't be arsed to get know it. It's not as exciting. Countless man hours were spent and... They are going to throw them away and start from scratch, repeating same mistakes in a process. Please, try consider at least taking a look how other similar projects work next time you write your own. You will find lot of things are already solved and you will save yourself lot of problems. https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/
How it is possible that deprecated code caused high CPU usage instead of fatal errors? What are the odds that all of the basic functionality avoided deprecated functions? This doesn't make any sense.
Sounds like it doesn't need to be PHP at all
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
His company sucks.
There is an event calendar that is updated regularly through an admin interface. I didn’t write it, butIIRC the data is stored in XML files. Reading and writing to that needs some kind of programming language. Same thing for the contact form.
There are many that say don't use JWT, but none that give alternatives. I'd be interested to see what the actual alternatives are that people use. In 2016 I used forUserBundle and LexikJWTAuthenticationBundle. It worked well enough. Had a pen testing company gave their stamp of approval as well.
Ah, I apologize that makes sense.
I don't really know how Laravel Passport works inside but yes, it was easy to use and it provides all the stuff that I needed, with overriding some methods btw, but the point is that it works and easy to setup, how can I make something similar in symfony?
I know several companies still using 4.3.
I don't know Symfony that well unfortunately. But I don't think you're going to find something as easy to setup as Laravel Passport. I'm curious why you're choosing Symfony?
Well, symfony is very flexible framework, and I like the ideas such as "framework agnostic code" which provided by symfony maintainers, I want to learn it, I want to learn patterns, testing and I want to write clean code, it's my test project (github.com/svbackend/my-art-lib) where I trying to use such new technologies (for me) as phpunit, CI, symfony, postgres, redis, gearman and docker so I don't looking for a easy way, it's just for education
Without bounds on the "when", I worked on many many 4.3 sites ~12 years ago…
Ha... I left my company last year who's probably the leader in RPG dev now (excluding IBM). The pain is real.
https://access.redhat.com/security/updates/backporting
Somehow, some modules ran better(?), or better optimized(english is hard), and our sysadmin managed to keep things at bay for a good duration. At the end of the day we were looking at an almost 1gb error log text file. Had to buy him a drink after.
RPG... My college curriculum required a course with RPG around the year 2000... We also had to learn COBOL. It was not very advanced for the times.
Yeah, leave your job everytime something goes wrong. That will show then. 
Doesn't even mention `bcrypt` or` password_hash`.
I'll count myself lucky then! I just had fatal errors when I went through something similar. Wasn't too bad just going through the logs and fixing them. (This wasn't a very large application)
The Hashtag Framework runs on PHP... [Here is a demo that uses Hash Contexts to securely store passwords](https://bat.hashtagfoundation.org/members/list) 
I wonder how that turned out...
&gt; If you keep your web folder /var/www/html/project as your git or svn working directory. You tend to give your .git folder inside your project folder to the hackers, could even compromise your whole website. This has nothing to do with version control, this is a misconfigured web server.
Healthcare?
We'd really like to hear the end of this story.
(Q&amp;A guide)
I'm in the exact same boat, a except I know nothing about the company, previous developers, or php and I'm the only developer 😂. Pay is phenomenal tho.
I leave my job if management fails me completely and makes my job impossible. 
I did have a look at all the other libraries before I started working on my version. I wasn't happy with any of the approaches, and would probably have rewrite most of the code base which would take a lot more time, which is why I decided to write my own.
Bank
Kid, if this is your blog, stop spreading terrible advice. &gt; SHA256 at a minimum should be used Why don't you fuckin' read the article where it says &gt; Why are common hashing functions such as md5() and sha1() unsuitable for passwords? &gt; Hashing algorithms such as MD5, SHA1 and SHA256 are designed to be very fast and efficient. With modern techniques and computer equipment, it has become trivial to "brute force" the output of these algorithms, in order to determine the original input. &gt; Because of how quickly a modern computer can "reverse" these hashing algorithms, many security professionals strongly suggest against their use for password hashing.
My company also uses RPG on an AS/400, but I think the PHP apps are on a newer version of PHP. The PHP apps we develop on Linux boxes are 5.6 and up, thankfully.
I did not write it and I am 25 kid. md5 and sha1() are unsuitable for passwords. I don't agree with the minimum part, but I do believe the strongest algorithm available should be used. Check you high horse buddy
Yes, SHA512 should always be used with a unique salt
It just came out that way ...
Banking and PHP eh? That's a bold move...
I'll give it a go - will probably have to make an entirely new package for it, as the current version makes heavy use of Laravel features, and relies on another Laravel-only geocoder.
Hey, I love projects like this, I wrote one for my work. Here are some thoughts I had on your project: 1. Check out league/glide, it's a very similar project though more evolved. 2. Check out intervention.io, it's an abstraction layer on top of graphics magick and imagamagick, which exposes a lot other functionality you may want to add 3. You're forcing the end format to `png`, jpgs generally have better compression. You may want to make the output format an option. 4. Your server is wide open for a lot of attacks. Image resizing, while not expensive isn't cheap. You should look into restricting access using a hashed url. Glide has an example, though there is a ticket on the library for changing to hmac with stronger algorithm. 5. If you're looking to play with new out of the box parts of html, you could try out the [filter_var](http://php.net/manual/en/function.filter-input-array.php) functionality to replace your validation. 6. You're not validating the downloaded file type before you process it 7. This would be better if you put it behind a pull-cdn. Requesting a resize of the same dimensions should return the same response each time, a CDN can help reduce response times on cached content as well as reduce load on your server 8. You should add http cache headers
Looks too complicated, you know, when bundle responsible for too many features it's hard to make it customizable, I'm trying to avoid bundles like this, but thanks for suggesting. I'm currently looking on WESSE and fosOAuthBundle, but with WESSE I'm not sure about security, and with oAuthBundle I'm still looking for right solution, there are only instructions how to use authentication with Google, Facebook etc, but I want to store my users with their usernames/emails and passwords in my users table, not in 3rd party services
Thanks for example, currently I've done the same, but with this solution we have to force users to use https, + we need to think about refresh tokens which should be secured as well.. I'm not sure that's a good choice Are you happy with api-platform so far?
Looks pretty good. I already use &lt;https://www.trustroots.org/tribes&gt; which is quite similar (no homeswaps, just stays) and larger tribes instead of smaller networks. Good job on your first php app!
I don't think mysqli will go away anytime soon. 
Wow that is looking awesome! Well done
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Congrats, looks like a lot of hard work! Well done, hope you enjoyed the process
Sadly it only happened two weeks ago, so the fun has yet to really begin for them.
I think you will find this part of the documentation very useful. It basically explains every part of your question and also does you how to debug and play with the answers: http://php.net/manual/en/features.gc.refcounting-basics.php It gave me very good insights early on in my PHP career.
So far I haven't had any issues with api-platform, but I'm not using it's full potential. I'm planning on redoing the entire api and autentication layer in my project to use api-platform with JWT and getting rid of all the custom stuff I'm currently doing
Down :(
Yeah, when HHVM first launched, I was ecstatic! I had had years and years of terribly impolite and impolitic dealings with a couple core members of php-internals, including Rasmus, which came to a head with, I believe, PHP 5.5.3, which completely blew up quite a few of our clients' sites, and our own corporate ones. In a *minor* release, the code `new DateTime('now', new DateTimeZone('CST6CDT'))`, the PHP process would completely bomb out with a **Segmentation Fault**. No logging, no error reporting. Nothing but a terrible white string, and then a seemingly-dead webserver necessitating a manual restarting of the `php-fpm` daemon. For over 15 months, my bug report(s) was denied and denied. Then someone else ran into the problem: All of the "short code" TZs were removed (e.g., EST5EDT, CEST, etc.). Their bug report wasn't ignored. When I said that I, too, had had this problem for over a year, Rasmus came back into the discussion on the bug report and got very mad at the dev who was assigned to the ticket. Then, my 2 tickets were completely deleted / purged from bugs.php.net. Someone, I'm assuming Rasmus, then deleted all of my comments and his replies on the new person's ticket and they tried to cover it all up. https://bugs.php.net/bug.php?id=66985 This major breaking change existed from PHP 5.5.3 (22 Aug 2013) through 5.5.17 (18 Sep 2014). I was really surprised by how the php-internals guys always said "it wasn't a bug". --- Around the same time, being forced to either remain forever on PHP 5.5.2 or move to HHVM, as CEO, my devs and I painstakingly migrated to HHVM. During the process, I found out that in some cases, all of the HHVM password hashes were the same, which is a major security problem. The project at the time did not have any sort of means of safely reporting security exploits, so I wound my way across the Facebook departments until one of the lead FB guys, Fred, actually called me up. We discussed it, and it was patched literally before I hung up the phone call. I was so thoroughly shocked! It was like NIGHT AND DAY between how the Zend Core people had treated my rare bug finds. But then, two weeks later, I was **REALLY** SHOCKED by an email received from Facebook Corp! They wanted to confirm my physical address. Why? because they had automatically awarded me a High Security Bug Bounty of $2,500 :o So yeah, I felt really good about my decision to port from PHP to HHVM. On 31 Dec 2015, I was able to run `/etc/init.d/php-fpm stop` on all of our servers, and it felt -so- good! Then that bloody announcement came through :-/ Over 3/4 of our client sites are, begrudgingly back on PHP 7. I still use HackLang and HHVM on the stock and cryptocurrency trading algos, because it is still far and away superior to PHP 7 in doing heavy, async math and thousands of API calls per minute. I thoroughly believe that the vast improvements born in PHP 7 and after are due largely to the competition and innovation of the HackLang team. For years, PHP was trailing behind. But when Laravel dumped HHVM, it was pretty much the End, from my POV. :-/
My knowledge of CentOS is very limited but enough to know the score when a Debian man calls it outdated. 
This has nothing to do with PHP unless you're going to post the source.
If it ain’t broke...
In my opinion Facebook had the change to move PHP ( or in this case Hack) more towards a interesting future. If they continued with HPHPc, then the current HHVM it will have had more open doors. Now PHP as a whole is in trouble. Unless the folks at PHP wake up, PHP will die out. Simple as that. Yes, PHP is still very present on most webhosts but its mostly because of legacy code then anything else. PHP7 is now out for 3 years and its only at 7% adoption rate, after 3 years! This is a massive difference compared to language like Golang, where all it takes is downloading the new compiler and people can work with the latest version. The way people develop languages has changed and we can see this clearly with other languages, where people take inspirations of the original language and then make there own compiler based language ( that outruns the language it was based upon ). * Python -&gt; Nim * Ruby -&gt; Crystal * ... And yet, we do not see any movement on the PHP front towards a potential compiler based language. Nor do we see any focus on growing PHP beyond back-end web hosting. What about Web Assembly? No, not going to happen with PHP. Personally i do not want pure PHP in a compiler language. PHP needs a lot of fixes but a language that is just as easy, fast to compile as Golang, not so opinionated as Golang ( sorry, i still prefer classes and not writing 20 lines for what i can do with 4 in PHP ). Hell, after dealing for years with hacked wordpress websites ( you know wordpress ), having a actually compiled executable that does not expose its sources, makes it so much more easy to not deal with script hackers. To me it looks like the PHP community has turned apathetic. Nobody is really interested in moving forwards anymore. Projects get started and then simply die out. The big frameworks keep things alive but even they are stuck as nothing but back-end languages. But there is no language that really replaces PHP. And after looking low and high, i sure as hell can not even find any project that even focuses on this. Facebook with Hack, is simply not up to specs. Facebook can not rewrite all there PHP/Hack code so they are simply improving there internal Hack languages and that is it. Its just 90's style development and i do not see a future in this anymore. Give me Golang compiler and tooling + PHP/Hack easiness and i present you a potential future. Sorry to sound negative but PHP as a language is in trouble even if people can not see it. And Facebook is not helping the matter by splitting the language front.
OP is Satoshi
&gt; Its almost as if as soon as you encounter the first hurdle throw a huge hissy fit, slap your resignation on bosses desk and leave with smug smile on your face while company goes into bankruptcy while you are not there. You're talking in the abstract. Let's go back to the facts. A company that should have long migrated to at least PHP 5.6, has a giant messy codebase that depends on PHP 4.3. CTO without warning updates production to PHP 7.2. Everything breaks. Reverting to 4.3 isn't an option. It's your fault somehow every passing minute when the codebase isn't working. What *do you do*, if you're such an adult and so on?
Hey, really nice of you, thanks. There's plenty that could use some work. For the life of me, I can't work out why I've got to click on a dropdown twice before it works. 
It's been a lot of work but I've loved it. I mostly do it on the train to and from work. I really enjoy the daily process of starting with a problem I don't know how to resolve and working through it.
Are you using a JS framework the the bootstrap one? If not PM me your code for your drop-down and I'll be able to give you a hand if you like!
I taught myself app development a few years back and did a few iOS and Android apps, one of them commercially. I was familiar with the concepts and was at the level before I started where I knew what I wanted to do, more or less, just had to learn how to do it in PHP. But I'd seriously never done the slightest bit of web programming. I liked the way the Laracasts tutorials get you going so quickly, how you can put something up on a page immediately, even if it is just Hello World. 
I guess I put maybe 400 hours into it. I know that heaps of people here would do it in a tenth of that but I learned so much it was time well spent. To do it again would be much quicker. I had commissioned a PHP product before this and I always used to think the syntax was so confusing. I'd never bothered to learn any of it, and I really should have. Now that I know more of what I'm doing it really makes sense. I know it's something that's not for everyone but I really tried to build something that I would use myself and just figured that there'd be other people out there who would want what I do. I hope so. I'd really love to think that people would find it useful.
Sorry that you feel that way. I'm just really happy with what I've been able to achieve with PHP and wanted to post it. 
Good work. It really looks nice. I would help with PHP, but source is nowhere to be found, which I support considering potential this service has.
It's just bootstrap 4. Funny thing is that it used to work and I did something to break it. That'd be really good of you to take a look. I'll message the code but I don't want to waste your time either because I'm not sure I know how to package up something that define the problem properly. I'll try though. The part that doesn't work is, if you register and log in, then click on your photo on the nav bar (or name if you don't have a photo) you have to click twice to get the dropdown with Edit profile / Logout.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
test!
No, the url doesnt work because you included the comma.
Well done! Once a developer always a developer 👍
Thanks for the input! I'm definitely going to implement intervention.io. This project was done in like 20 minutes just to solve a problem I had, I'll for sure look into upgrading it a bit more :)
Thank you kind sir. I don’t know but how much my COBOL days help me for object oriented stuff! 
Thanks for reply and happy easter. Yes, that was exactly our plan.
Everyone has its pros and cons. Pick the one you enjoy coding with more
Before I click on some random link, what and why? 
Laravel doesn't use Symfony, just some of its components. Pick whichever better fits your design philosophy.
Hey bud, you're the one who was being condescending telling me to RTFM.
pls find the updated info. Thanks.
That's a non sequitur. You should always use a [password hashing](https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded#passwords) function rather than a general cryptographic hash function.
Glad to see how productive ppl are by using PHP and one of the top frameworks. PHP is often regarded as legacy by Python, Ruby and even Java Devs. But I think this is not the case any more since PHP 7 ... Wondering if there will be some kind of JIT compiler for PHP 8... What was your reason to choose PHP over another language?
* NEVER * CHOOSE * LARAVEL * UNIRONICALLY
I find Laravel easier to build a MVP or prototype. However I’d choose Symfony for a production application. Just my preference. 
Nice! Laravel helped me get my foot in the door of the IT industry. Have you thought about learning a front-end framework?
The amount of spam is strong lately on /r/PHP. Even worse than normal...
&gt; why do i need a command line PHP tool? You don't *need* it, you don't have to use it if you don't want to. The CLI is for for Composer or any other such tools or small scripts you want to write.
It really comes down to what your requirements are for the project
I just opened it quickly on mobile, but the first file I saw had this line : $logsql = "SELECT * FROM `user` WHERE `username` = '".$_POST['username']."' OR `email` = '".$_POST['username']."' That looks awfully close to an sql-injection issue there... 
Good job, this is the best way to learn. Want to learn something? Build something.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Sh4dowCode/loginscript/.../**index.php#L50-L55** (master → 7e8d222)](https://github.com/Sh4dowCode/loginscript/blob/7e8d222349de01d0fdc1d01d7ab5349902ee8597/index.php#L50-L55) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dwn3anx.)
&gt;upcomming 
 * Vulnerable to SQL injection - look at using "prepared statements" instead. * It's tied to a specific database (mysql) and api (mysqli). I'd suggest you abstract your database logic away a bit (perhaps use Doctrine DBAL ? http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html ) * Probably vulnerable to CSRF * exit() only takes numeric arguments; use die() if you want to provide a string response * Avoid using mail() directly; use something like SwiftMailer or PHPMailer. I think most PEAR stuff is now unsupported ( https://github.com/Sh4dowCode/loginscript/blob/master/register.php ) * I think https://github.com/Sh4dowCode/loginscript/blob/master/register.php would allow me to send email to arbitrary end users without the captcha check taking place (only send mail if $_POST['REQUEST_METHOD'] == 'POST' AND the captcha check has taken place). * Databases have autoincrement fields - you shouldn't need to calculate the next 'id' value ( see https://github.com/Sh4dowCode/loginscript/blob/master/register.php#L99 ); dong so exposes you to race conditions etc * Add some error checking to your database calls * Look at splitting up HTML/JS from PHP - e.g. using Twig for templating. It can help avoid XSS by automatically escaping etc.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Sh4dowCode/loginscript/.../**register.php** (master → 7e8d222)](https://github.com/Sh4dowCode/loginscript/blob/7e8d222349de01d0fdc1d01d7ab5349902ee8597/register.php) * [Sh4dowCode/loginscript/.../**register.php#L99** (master → 7e8d222)](https://github.com/Sh4dowCode/loginscript/blob/7e8d222349de01d0fdc1d01d7ab5349902ee8597/register.php#L99) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dwn4ejn.)
You have a lot of "if" statements where the primary branch is empty and you're only using the "else". Don't do that, invert the condition instead. 
Looks like you're leaking secrets in your code. Please remove those from the repository and invalidate / reset those api keys / secrets. Github has a good guide on removing sensitive information: https://help.github.com/articles/removing-sensitive-data-from-a-repository/. Remember, important to not only remove the secrets from the repository but to also invalidate the secrets / api keys since it's possible for anyone to have seen them and saved them. The secrets I stumbled upon. - Steam api key: https://github.com/Sh4dowCode/loginscript/blob/master/steamauth/SteamConfig.php#L3 - Google auth secret: https://github.com/Sh4dowCode/loginscript/blob/master/google/gsettings.php#L4 - Recapcha secret (I think): https://github.com/Sh4dowCode/loginscript/blob/master/register.php#L21
As it was said, pick the one you enjoy most. &gt; It's pretty ironic that Laravel uses Symfony - makes me think, isn't it better to just cut out the middle man? Apple use samsung chip for their iPhones. Does it means apple is worse ? While I don't enjoy their software (I know, I'm weird), you can't deny their take of UX and integration has a clear value for some users. Hell, half the car industry reuse pieces between models and brands... Laravel using Symfony doesn't mean Laravel doesn't bring anything to the table. Just that you have to check if the tradeoff is worth *to you and your project*.
for god sake, update your readme.md and put in big INSECURE AND UNSUITABLE FOR PRODUCTION AT ALL
X-posting my comment from the nginx thread that breaks it down: /r/nginx/comments/88sove/comment/dwn3beh
Yeah, that's probably next. I've definitely struggled not knowing any (and I mean, absolutely not any) javascript. We use React at work so I'd probably go with that. We've got a small dev team (I'm not a dev at work) and they use Laravel and I went with that in my product partly because they raved about it but partly because I knew I could ask questions when I needed to and get good answers. Same for React. What do you use?
It was purely because that's what is used on the product I manage at work. PHP was a legacy choice for them although they're all happy with it, but we needed to build a new product starting 18 months ago and they went through the eval to see what framework they'd use and chose Laravel (and React for the front end). They have the same view about PHP 7 over 5. I've never looked at Ruby but I hear it's very powerful. I don't have a need to learn another language though. I really want to develop my knowledge in PHP. I need to learn how the testing works as that's severely lacking, plus I have ton of other features I want to add.
Totally agree with this. I had this idea a while ago and I have a couple of others I'd like to do too but I started when I did because I wanted to build something real as I went through the 101 course. It makes it stick when you try to convert the education to something real.
I also have a PHP 4.4 application running in production. The bigger issue though is our plethora of unreplicated MySQL 4.0 servers :/ Not being able to perform sub queries really limits what you can do. And the encoding nightmares since charsets aren’t properly supported in MySQL till 4.1. As a side benefit though, we’ve discovered you can more or less safely use up to MySQL 5.0 as a slave, and I’ve also become kind of familiar with MySQL’s source code lol
It's auto-generated code. I tried to replace with it `/`'s but nothing changed.
As a front end developer, Typescript is a godsend. I use Angular 5 and Material design at my job. I really like the newest Angular! Been using it since before beta.
I'll take a look at that. I'll probably start with a similar 101 type tutorial like I did for Laravel and go from there. My needs are pretty simple for the site but I know I could have done a lot of stuff better if I even knew some of the javascript basics. You reckon Angular over React though?
What's your background?
Same difference to me. The right Javascript framework is always the one that will get the job done.
5 years experience First year was the basics 2nd job was yii framework and a few cool applications I made Last job was mostly api stuff, some projects where and there, lots of full stack stuff, custom oop. 
I'm searching yea. Tasks in Google? 
Search for php exercises, books for mid developers, Browse github code for bugs reports, read other code, fix it. This are the simplest ways to improve your skill. 
Docker
You can really go a few different directions, all of which will vary slghtly based on your desired career path and locale. 1. Keep learning more and more about php, building a strong comprehension of abstract classes, interfaces, traits, unit testing and TDD. Which, if learned correctly can really be language agnostic, helping you far beyond php. 2. Use your current knowledge to become an expert in any number of php application frameworks such as Laravel/Lumen, Yii, CakePHP, and others. Although not the primary intent, this track will help you learn more about the items in #1. 3. Take your current php knowledge and start getting more involved in the DevOps side of things with deployment automation (Jenkins, etc), containers (Docker, etc.). The above are assuming you wish to continue working with php specifically, but there is always the option of changing the language focus to something like Java or C++ and movoling into application development. Good luck!
Learn Laravel.
I'll take a look. I'm expecting that it's a pretty big learning curve as you say though and it's more for interest rather than need right now. Thanks for the advice.
How to interview. You'd be surprised how many candidates come in that are either too nervous or don't know how to ask questions / carry a conversation. Interviewing well takes practice. If you haven't done it in a while, there's no shame in taking a practice interview somewhere and then declining the offer.
Where are you hosting it? 
Digital Ocean
Yeah I hate to say it, but the best way to guard against unemployment right now is to have UI / frontend experience to fall back on. Everyone needs JS devs these days, regardless of backend stack.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Yea my old place started using this. Might brush up on it 
Isn't that just ecommece stuff? 
Php is more related to php no? So many tech out there. But sure if need be I'll post there 
How to get more into dev ops? This is kinda the direction I want to go? 
Angular? 
JS and frontend fundamentals first, then specialize in either Angular or React. React is probably a bit more popular, but depends on the region.
Why should I choose this over existing projects. Illuminate/Collection has proven very useful and provides all features you have and more. It has an ORM like query so you can where('key', 'value')
You can even skip the echo statement and put your script tag in as plain html. 
Go on google trends and check the popular frameworks in your region. Verify the result on monster job or site like that. And learn what you want and what you can. 
As said above, know your local job market; are there lots of agencies in which case WordPress, Magento and Laravel, are good systems to have had contact with. Try and have a range of skills that you can tick an interviewer's list: Able to SSH onto a box and restart services, know where the logs for HTTP server, PHP, databases are stored. CSS framework Confident with a couple of IDEs Be honest with what you know and what you don't.... Most interviewer's will have seen people blagging. Most important is come to terms with being made redundant, nothing worse in interview than someone who is angry with last employment. Good luck 
1. https://i.imgur.com/DK1ckG8.png 2. You **never** import a javascript into a PHP file. You import it into the **resulting HTML**. And importing JS into HTML is the most natural thing that can ever be.
I got asked some questions about design patterns and stuff and messed it up, even though I can explain them and use them just fine. So, seconded this.
yep, we just hired 2 new JS heavy front end devs
Don't fall in the magento trap, it's a piece of shit 
https://github.com/TFarla/composer-template After creating a few composer libraries and spending way more time on configuration than actual programming. I've created this composer library template which includes configurations for documentation, CI, mess detector, code sniffer, code coverage and some more.
Databases. Front end developers are a dime a dozen, but good database people are highly sought after.
Probably better to ask that on /r/devops :)
Here's a sneak peek of /r/devops using the [top posts](https://np.reddit.com/r/devops/top/?sort=top&amp;t=year) of the year! \#1: [Resources for Getting Started with Kubernetes](https://np.reddit.com/r/devops/comments/84l48f/resources_for_getting_started_with_kubernetes/) \#2: [I feel Dirty](https://np.reddit.com/r/devops/comments/77dwxd/i_feel_dirty/) \#3: [The death of microservice madness in 2018](https://np.reddit.com/r/devops/comments/7s23du/the_death_of_microservice_madness_in_2018/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
I asked a senior here and my manager they never heard of it. So yea. Anyway ill learn it thanks 
I’m kinda transitioning to “DevOps work” right now but it’s really more a mindset instead of a job description. Besides getting some certificates (aws, k8s ...) you’re better off getting a job in the backend field right now and then slowly switch to DevOps practices (which is what I’m doing). For DevOps read “the Phoenix project”, “DevOps handbook”, “continuous delivery” and maybe “google site reliability engineer” (since you want to work in tech companies). First two are about the mindset and why DevOps exist and are in demand right now, the latter are more technical. Software you should learn about is: - docker - terraform (creating infrastructure) - ansible, puppet, Chef (provisioning infra) - basics of either nomad or Kubernetes(cluster management/orchestration) - ci/cd pipelines - hashicorp stack in general Technical things: - networking (especially L2, L3) - Unix/Linux - Server hardening - monitoring - cloud (aws, gcp, azure, ...) There is a lot more but that’s what came up my mind right now.
`Illuminate/Collection` is just about collections. LodashPHP provides utilities functions for a lot more than just collection, E.G string, math, callable etc and also provides a lot more functionality. It can also filter the values in a collection based on a key =&gt; value pair using `filter($collection, ['active' =&gt; true])`, so it works the same as the `where` on `Illuminate/Collection`
The answer is you should always be practicing learning. I recently started on a Laravel/VueJS website since I don't know a front-end JS framework (or didn't until now) and had no experience with Laravel. The project is a dumb little idea I've had for a while to build an NFL draft simulator, but I like football so it keeps me engaged to learn the fundamentals of each. I'll probably do my next project idea in Symphony/React. Someone mentioned Docker. I purchased a $10 udemy class on it because I was having issues figuring stuff out on my own. The udemy class has helped and was cheap.
Ditto, Laravel/Lumen are quite popular at the moment. 
Thank you for your support. On the one hand, I'd agree that just a link to the whole article is not that helpful, it is similar to notorious "RTFM!" in newsgroups years ago. On the other hand, I tried to explain this certain fault to him already, but he paid no mind. So I posted the link in this thread mostly due to "being a dick" part of my nature, but still with a hope lingering. The certain part I am talking about is [statefulness](https://phpdelusions.net/pdo/common_mistakes#statefulness) as I call it (though there seems to be no such English word). Such a class should never persist any information related to a certain query/statement. Otherwise it will lead to problems that are hard to debug.
Well, there are V8 bindings for PHP.
I'd like to interject for a moment. The IDE you appear to be referring to as, PHPStorm is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future. 
Any resources on learning how to setup docker for PHP development environments? I've tried some of the tutorials in the main site but I end up having more questions than answers. 
laravel is good if you don't care about your code. it just gets things done. but there's not much learning there. the docs are good enough that any half decent dev could walk into laravel blind and get shit done. learn ddd, learn unit vs functional testing, learn cqrs, learn mappers vs active record ... there's a million things to learn, but FOR FUCK SAKE DON'T *LEARN* LARAVEL. you won't learn anything
Chris Tankersley has a book out called Docker for Developers. Get the ebook and when the work-in-progress 3rd edition comes out, you'll get the upgrade. https://leanpub.com/dockerfordevs He also has a presentation on this subject. It's a few years old, but it should still be helpful. https://youtu.be/Ch1k8-vMG_E A podcast episode on this topic (PHP Roundtable): https://youtu.be/MsBHgOPW55o
+1 for DDD
I'm not familiar with this pattern, but I can see how you could do something similar in web development. Let's say you have a typical e-commerce site. The top bar and the side bar on the left contains the menu system, and it's very cacheable (and is not specific to the current session). On the other hand, the "you have X items in your cart" needs to access to the session data and isn't very cacheable. The details for a given product can almost entirely be stored in cache, while some parts of it (i.e. number of items left in stock) can be put in another cache (or it could be requested each time). I actually made a couple of lua scripts (intended to be used in in nginx lua, with a shared memory cache for all the workers) and intended to open-source it a while ago (but never got around to it). It would work like this: GET /products/1234 X-Cache-Ttl: 3600 &lt;html&gt; &lt;!-- include="/includes/header.php" --&gt; &lt;!-- include="/includes/shoppingCart.php" --&gt; &lt;!-- include="/includes/menus/top.php" --&gt; &lt;!-- include="/includes/menus/left.php" --&gt; &lt;!-- include="/includes/productDetails.php?id=1234" --&gt; &lt;!-- include="/includes/footer.php" --&gt; &lt;/html&gt; GET /includes/shoppingCart.php X-Cache-Vary-Cookie: PHPSESSID You have 3 items in your cart GET /includes/productDetails.php?id=1234 X-Cache-Ttl: 3600 &lt;h1&gt;Some cool product&lt;/h1&gt; &lt;!-- include="/includes/leftInStock.php?id=1234" --&gt; item(s) left in stock &lt;a href="addToCart.php?id=1234"&gt;Buy&lt;/a&gt; GET /includes/leftInStock.php?id=1234 X-Cache-Ttl: 60 10+ In the example above, responses to URLs like `/includes/header.php` would already be in the cache, so the PHP backend would only be hit for requests to `/includes/shoppingCart.php` and `/includes/productDetails.php?id=1234` (in parallel). If `/includes/productDetails.php?id=1234` is in cache already, only `/includes/shoppingCart.php` and `/includes/leftInStock.php?id=1234` would end up actually being requested, the rest would be served from memory.
VanillaJS
Check out local user groups (via meetup.com) for PHP, JS, DevOps, and multiple-language programming. The people you meet will have a good feel for the local job market and can be a good introduction into various job opportunities. I learned of my current job through a contact in my local PHP user group. Check your local library to see what learning benefits you get with your library card. For example, I can do lynda.com and Rosetta Stone through my library. Check out a few podcasts that deal with your areas of interest and maybe a few that are beyond your level of knowledge and a few that are not in your primary languages. PHP Roundtable, 3 Devs and a Maybe, /Dev/Hell, Reactive Podcast, the Changelog, Full Stack Radio, Voices of the Elephant, Developer Tea, Coding Blocks, and Functional Geekery are some good ones. If you can, check out a nearby regional dev conference. These are usually less expensive than the big conferences, you get a better chance to meet people, and you get to learn what is hot now so you can learn more about it after the conference is over. If you are in the Midwest, I highly recommend the Kansas City Developer Conference (http://kcdc.info) for a multiple language experience. Upcoming regional PHP conferences should also be good: Longhorn PHP in Austin, WavePHP in San Diego, SouthEast PHP in Nashville, Detroit PHP, etc.
I'd say there's pretty much no use in PHP. Sure you will see some benefit if you do a microbenchmark - I just tried the most extreme example I could think of for cache-friendly vs unfriendly (sequential vs random access of all elements in a 5M element array) and sure, the sequential access was roughly twice as fast. BUT: 1. In absolute terms, the saving was about 0.8 seconds for the 5M accesses. So unless you're processing millions of pieces of data, the saving is negligible. 2. That was doing nothing with the data. As soon as you start doing anything interesting with it, the time taken for the access will become less significant and the relative speed increase will diminish. Basically, PHP is not a fast language. If you're processing sufficiently large data that cache locality is of importance, then you would get way more of an improvement by writing that part in a more suitable language. Even ignoring the speed difference, the sheer size of the data is much bigger in PHP - the 5M element array of ints took 256MB, compared to 40MB in a language like C where there's no overhead on top of the 64 bit element. So your cache is effectively 1/6th the size for an array of ints due to PHP metadata.
Curious to hear more about your sage experience, akarost.
yes absolutely, it helps to increase your visitors online
WTF is this blatant spam?!
Looks like this guy is buying upvotes. Let's make it to cost him a fortune :)
My gut instinct is that magneto is mostly used is ecommece. I prefer back end / full stack work for Techy companies / applications stuff that's useful. I'm not a fan of working for a purely marketing company that sells things on a shiney website. 
ok I will see to it
I started an Ember project about 2 weeks ago - I'd recommend Ember all the way - It's an incredibly solid framework. If you're just looking for view-layer without SPA niceties - take a look at Glimer.js - Ember's view framework as a separate library.
Any opinion on ZF3 + Apigility? (is it viable?)
Magento is for sure used for ecommerce. Your characterization of the range of work is far too narrow - which is understandable if you've not been exposed to the space. My ecommerce work has taken me to 6 continents and almost 50 countries. I've pinged some others to chime in. Ultimately, the work may not be interesting for you regardless. But it's a much broader field than what you seem to presume.
This right here, for some reason JS frameworks vary heaps depending where you live so find out what's popular and dabble with it. It's strange, almost every dev I speak to around me is using angular then across in another city everybody is using react.
Thanks for the suggestion. I just purchased the book.
Let me guess, your one of those "lets build our entire ecommerce from scratch because my pride is more important then my customers success" guys? 
Well you need to be completely comfortable with all of your JS mechanics: * Scoping rules * Closure * Async programming * Prototypal inheritance * How to avoid mutation when needed * What `this` means and how to wrangle it (unlike PHP, `this` in JS is a footgun and requires extra care to manage it) * Additional features like promises, XHR Requests etc * Being solidly proficient with your browser's devtools for tracking down bugs and performance issues Should also be comfortable with CSS * Know what BEM and OOCSS are and at least be prepared to talk about them in an interview. The goal is modularity strategies overall. * Understand the basic mechanics like specificity, inheritance, and the box model etc. * Familiarity with pre-compilers like SASS and LESS is useful * How to use or implement a grid library In addition to that: * be familiar with NPM as you would expected to be with Composer (version patching, installing/updating packages, its lock file, commands/scripts etc). * know how to write unit tests for JS and what testing tools are out there. * be familiar with gulp and webpack. Even though most frameworks abstract away the webpack configuration for you, its useful to know how to use it. * in general, know how to setup a new UI project with a modern build pipeline from start to finish. And when it comes to frameworks / libraries: * For Angular, you also need to learn the basics of TypeScript. You still need to know JS, but in addition to that, some of the main features of TS. * React tends to favor more functional approaches, so knowing the basics of functional programming is going to be more useful in React than in Angular. * Be familiar with component-oriented architecture and some of the challenges with it such as sharing state between parent/child or sibling components, one-way and two-way data flow etc, and how each platform approaches these problems (Redux, observables, static state, services, props-down-events-up etc)
Boring side of PHP market still uses Wordpress, Magento, Drupal and such. Frameworks like Laravel and Symfony are popular but used either on monolithic, small applications or software factories for, again, small projects (here's where you commonly will be asked to be a "full stack"). You can find mid size stuff to be exclusively using a FE framework and all BE stuff as a huge API to handle everything else. Angular/React plus Symfony/Slim is the most common config I've seen there. There're, then, the big infraestructure PHP projects which I find to be the most amusing. REST, Webservices, Webhooks and microservices as arch. Frameworks like Slim and Phalcon or even in-house are best suited for this. Plus things like Cassandra instead of MongoDB (which adds huge control to the Devops team), Oracle PL/SQL, RabbitMQ, Redis, Elastic. Oh, and in mid to large projects you'll definetely benefit of TDD and PHPUnit comprehension.
best advice I can give is to look through the job-offers out there and look at what they look for. Markets always change a bit. I think the only real way to find out what is needed right now in your area, is to look at the jobs that are wanted the most. But in general, frameworks, ooPhp best practices, REST, x-as a service, ... as mentioned by others, are the hot topics for developers atm. 
Uh, no. The whole point of an interview is to figure out if *you* want the job. Just because you get an offer doesn't necessarily mean it's the right fit. And if you're unemployed and need the interview experience, taking on a couple of interviews with no intention of accepting the offer can benefit in a few ways: 1. You are asked questions you've never been asked before 2. The course of the conversation brings up new technologies and / or approaches you haven't heard of or thought of before 3. You actually realize this job is what you want, and the offer is exactly what you were looking for (best case)
Yeah, I'm well aware (and modelled my solution after it). Nginx also has [its own SSI module](http://nginx.org/en/docs/http/ngx_http_ssi_module.html) for a similar purpose, although it's much more limited than ESI in Varnish. I decided to roll my own because of the lack of SSL support in Varnish, and I disliked the idea of having yet another layer for traffic to pass through before reaching the backend (by terminating HTTPS on nginx first, then passing the HTTP traffic to Varnish). In addition, I found that a simple solution in lua that spins up sub-requests inside nginx worked wonderfully, and was way more extensible. I added manual cache expiration to it, cache exploration via a full JSON-dump. I can easily implement different Vary-headers such as the 'vary on the value of a specific cookie' I had in my example above, or 'serve this content for all requests without the X cookie', 'serve this content if the request header X matched the regex Y' or 'don't even send any cookies along with this include request, I don't want to be influenced by them' and similar logic. I guess the big difference is that I shifted the responsibility from VCL to PHP (or whatever backend language you're using).
Definitely not, but I've used magento for 2 years now and the amount of bugs I've encountered is insane and the shape of its documentation is horrible. The rate they fix these bugs is also very slow and when they release a new version usually there are more bugs than they have fixed. They are also very inconsistent with how they implement everything. 
There is some Angular on legacy systems but the front-end is almost entirely dominated by React.
Last interview I had was for a senior developer position at a tech company using Laravel for a handful of applications (most of them were .NET). They definitely expected that the candidate would be intimately familiar with the strategies used under the hood and a firm understanding of the pros/cons. Suggesting that you won't learn anything while *learning* something is arrogant and frankly a disservice to anyone in the community. Making blanket statements that suggest the framework determines your domain implementation is evidence enough that you have no idea what you're talking about though, so I won't take it to heart.
Stripe would be ideal.
Lmao the inferiority complex of symfony devs runs high in these subs.
The only service I would consider is Stripe. You can give your customers a webpage to mange their API credentials.
ECS is pretty much only used in games due to the nature of how games work (it was invented for games in fact). Inheritance is useful to some degree but there are a lot of distinct entities in a game that are also similar enough where inheritance seems to make sense but you end up with a lot of cludgy or copy/paste code if you try to adhere to it. ECS is basically just "what unique things does a given entity have and how do specific sets of these properties work together". But like it seems as simple as "oh, have a base class and then have a base weapon and base enemy class and go from there" but you end up with a lot of weird one-off cases or classes that don't even use huge swaths of code and it's a nightmare to figure out where a thing happens or when you change something you mess up everything else or have to add strange special cases.
You'd be putting your credit in the hands of your clients. How do you plan to handle charge-backs? 
What do you mean by “your credit in the hands of the clients”?
I recommend diving into VueJS. It's amazing
I think he means of you take money from the client of a client they could do a charge back and if you've already paid your client then you're at a large loss.
Take a look at Payum
OK cool. I’ll look into that. I don’t care if my customers want to use my client billing software. If they do it’s just an option and they would have to use whatever I chose.
Nice. This looks promising.
Sounds like you want a "marketplace" gateway such as Stripe Connect, Braintree Marketplace, PayPal Adaptive Payments, Bluesnap. Such gateways usually rarely have integrations in existing libraries, so I'd expect you'd have to integrate their SDK yourself.
Payum (https://github.com/Payum/Payum) supports a wide variety of payment processors, and also includes support for Omnipay
&gt; For over 15 months, my bug report(s) was denied and denied. Then someone else ran into the problem: All of the "short code" TZs were removed (e.g., EST5EDT, CEST, etc.). Heh, coincidentally, this has been my pain for the last week again; this is related to HHVM failing to allow `new DateTimeZone('GMT+1')` - and fixing that in a backwards-compatible way (i.e. *not* dropping the short TZ) is rather painful. 
Well, this is a question of employment. After dozens of interviews and scouring hundreds of job postings, my experience has been that React dominates.
Depends where OP is. If they're in the UK I'd opt for GoCardless because Direct Debit is hands down the most convenient payment method for recurring payments. Otherwise I'd agree.
Remind me again, how many times have you been banned from StackOverflow? So your sole argument against my class is that you can't do the following unrealistic situation? When exactly would this be a realistic situation? $db = new StatefulDB($pdo); $db-&gt;query("SELECT * FROM users"); while ($row = $db-&gt;fetch()) { $db-&gt;query("UPDATE users SET foo='bar'"); }
Ask, I'll be glad to help.
Have you heard of Stripe or BrainTree?
Yes? I am doing DDD after-all. But seriously. The aggregate root paradigm for oop makes much more sense than the normal examples they try to teach from.
Redundant due to a merger or additional hire?
After quickly skimming their docs, I'd suggest staying away. It appears that using it means credit card numbers will hit your servers, which is a huge security liability and drastically increases your scope to be PCI compliant. You _do not_ want to do that without knowing exactly what you're getting into, and chances are if you're asking about this on Reddit that's not the case. Use a gateway that supports client-side tokenization instead. Stripe is the typical recommendation here, although I'm personally not a huge fan (mostly because I used to work for a competitor, so I'm admittedly biased). This doesn't come without tradeoffs, but you really don't want to be screwing around with people's money.
Most (/ all?) of those points have nothing to do with "enterprise" something. They are good and valid points for anybody both using and extending / building upon software. Also everybody knows that if you want enterprise ready Java is what you should go for. Because it is great and does all the enterprisey things
&gt; Avoid associative arrays Agree in principle that associative arrays are bad for handling complex data types. But they're also a reality in the PHP ecosystem. Facebook's Hack created `shape`s to deal with this, and Phan and Psalm both support a docblock syntax for arrays of the form array{required_key: type1, optional_key?: type2} which enables developers to pass around arrays and have the (docblock) type system enforce constraints.
So I cant speak for all of the supported payment gateways because there are like 40-50 of them. But stripe the only thing you get server side is the stripe_token and paypal is handled via a redirect. The omnipay/stripe package goes over the workflow pretty good. 
Omnipay is great because it allows you to have a single interface for multiple payment gateways. So adding (most) payment providers is as simple as adding a package and configuration info. I am fairly sure all of the 'official' payment gateways are client-side tokenization or redirect based so you don't need to worry about handling CC numbers. It makes expansion really easy. In the future you may want to multiple payment methods available for end users and this package gives you really good flexibility for easy growth.
Good to know individual gateways support that. I only looked at the top-level package docs, which showed server side handling of a CC#
and sometimes even the architect himself.
so what have you learned?
This is a great place to start for env work. We use Docker a ton and have started implementing Kubernetes into all of our env's as well from dev all the way up to qalive and soon to production
I can understand working for magento can be a blast, but dealing with all inconsistencies magento makes in the repository and models, not even talking about bugs introduced in newer versions. And lack of documentation. Makes magento a piece of shit.
Maybe, maybe not, but there are inherent advantages to Direct Debit as a payment method that are probably sufficient to outweigh them.
this is the exact thing that's wrong with laravel: you don't know anything but laravel and just naturally assume I'm the enemy (other php framework you know about and therefore hate). I didn't even mention symfony, for the things I did mention it's just as bad as laravel. if you do want to compare those two tho then laravel is absolutely worse: magic everything, globals everywhere, active record, etc
Then you definitely want something like Stripe Connect where you can trigger a payment flow on behalf of your client. Your software can ask the end user to pay into an account owned by your customer. With Stripe Connect you can control a lot of the details about that flow, including if you want to take your own "processing fee" so that some part of the payment goes to your account. What the previous person said about things starting to get tricky is of you want the end user to pay the entire amount into *your* account and then at some later time you pay out that money to your customer. While certainly doable, I think you want to avoid having the money flow through your accounts.
Here's a skeleton that tries to avoid over-fanciness. https://github.com/DHager/docker-php-library-demo Of course, at some point you'll probably want the fancy/convenient stuff.
You want to integrate what are called 'payment gateways' with your product. Stripe is an example. So is NMI. So is PayPal. Etc etc etc... Fair warning you will fall under PCI compliance if you store or transmit card info. Usually the gateway will return a 'token' of some kind that can be used for rebillings. Integrating only one gateway will probably not be enough especially if your clients are international.
Another here using Stripe in the UK, in my experience customers generally prefer using a recurring card transaction to establishing a direct debit mandate, for a myriad of reasons. What do you think the advantages to direct debit are, from a consumer or merchant perspective?
Why do you think dd is better? 
Great mate, then you have everything you need to succeed onto pure backend. Keep learning not specific tools but enviroments, like devops stuff you mentioned, for fun. Being fluid in bashscript, docker and unix management will definetely help from now on. At least in my experience, being able to, at least understand, the whole ecosystem is the way to freely switch positions to fulfill your curiosity and avoid being burnt by repetitive tasks.
New management, streamlining areas, losing money, take overs gone wrong. All sorts. Doesn't matter anyway 
PHP is already quite data oriented. You start with a data object called a request and you return a response. f(request) -&gt; response A lot of side-effects are introduced with things like sessions &amp; databases, but you can definitely isolate and minimize their impact using tools like dependency injection. I know when I worked in Symfony I liked to translated the requests into data, then process the data into a response object use handlers I built for the various parts of the request. Finally returning the result. Definitely facilities easier caching and simpler/more isolated code. I can't speak to the benchmarks, as I generally did it for ease of debugging, testing, and development rather than performance.
Maybe have a look at caddy server by mozilla, and enjoy!
Not a bad idea. However I live in England. No harm in applying for other areas though 
Just stop.
Well there I go being a typical american presuming everyone is an american. :P
This is true. Being able to get your foot in the door is probably the best skill for mid levels.
You should read more then, I’ve implemented many gateways using omnipay and depending on the provider you either take the CC on-site or direct the user. If you do it on site you just have to be compliant and you obv don’t store the full details (usually a token and last 4 digits), then you use the token against the provider.
No, Magento is just genuinely garbage. Not to talk down on the Magento team who put in a lot of work to bring a very capable ecommerce platform to the PHP ecosystem but it desperately needs to be re-architected from the bottom up. The front end especially. Nothing but nightmares working in that platform from front to back end. Magento 2 fixed a lot of problems on the back end, but it's still a nightmare to work in generally. When you want to do anything custom other than reskinning, you'll see what I mean within just a few minutes. The problem is, it is so powerful that there really aren't many other options out there.
I have used several payment gateways and even programmed plugins for various gateways. I have found Stripe to be the best to use. It is fully functional, PCI compliant and the documentation is very good. They are also quite responsive to question (usually within 1 business day) Dont use an Aussie bank gateway - all the ones I've dealt with all suck.
Ember is a wonderful framework for building apps - but OP has asked what to learn in order to get reemployed, and unless they happen to work in one of the few markets where Ember is sought after, learning Ember mightn't be great advice. 
nah,it's just that your lib makes no sense. Learn PHP core functions instead of importing something from another language.
spreedly would allow you to allow those clients to choose one of several processors.
This is exactly what I was want wanting to know. 
Did you add enctype=multipart/form-data to the form? Otherwise the only thing you will receive is the file name. 
I did not, but I don't even receive the file name. Or maybe I do and I don't know how to get it. Can I ask, how should I get it?
Just use $request-&gt;get('csv_file') or $request-&gt;all() to show all data passed.
If you can’t fogure out how to get the contents of a file with php, it might be time to do some more learning before you start hunting for a job...
I'm fully aware of how its done in PHP. I'm not familiar with how its done with Symfony. I loaded symfony for the first time about 7 hours ago and I havent blinked since. 
Did you add the enctype to the form? $request-&gt;get('csv_file') should return an UploadedFile instance. $handle = fopen($file-&gt;getRealPath(), "r")) while(($row = fgetcsv($handle)) !== FALSE) { var_dump($row);} 
I must be missing something obvious. I get $file is undefined. Where does $file come from? 
 $file = $request-&gt;get('csv_file'); $handle = fopen($file-&gt;getRealPath(), "r"); while(($row = fgetcsv($handle)) !== FALSE) { var_dump($row);} die(); Error: Call to a member function getRealPath() on string
the HTML ... I think its okay? https://pastebin.com/F5nuav57
Thank you so much. Your form function is displaying, but when I click it nothing happens. Here's my current controller. https://pastebin.com/r9irDN8F 
Progress! Its accepting the file, but I still dont see the contents. dump($form-&gt;get('csv_file')-&gt;getData()); returns... TestController.php on line 30: UploadedFile {#38 ▼ -test: false -originalName: "test.txt" -mimeType: "text/plain" -size: 12 -error: 0 path: "C:\xampp\tmp" filename: "php584.tmp" basename: "php584.tmp" pathname: "C:\xampp\tmp\php584.tmp" extension: "tmp" realPath: "C:\xampp\tmp\php584.tmp" aTime: 2018-04-03 06:31:40 mTime: 2018-04-03 06:31:40 cTime: 2018-04-03 06:31:40 inode: 0 size: 12 perms: 0100666 owner: 0 group: 0 type: "file" writable: true readable: true executable: false file: true dir: false link: false linkTarget: "C:\xampp\tmp\php584.tmp" } if you can tell me how to see the actual contents, I will name my firstborn after you! hah
I could kiss you right now. Thank you so much. https://imgur.com/a/KD9lo
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/WqHOpzn.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dwppcq7) 
Perfect enjoy your evening!
Made me think of https://www.youtube.com/watch?v=uedw5flJ9M8 ahahaha
LodashPHP provides a lot more functionality than what is provided by PHP. For so me of the functions you would need a lot of boilerplate code to get the result. Have a look at the code and understand what it does before you start bashing the project
You too!!
Your project is the kind of useless crap PHP doesn't need. PHP is not Javascript, it's time you embrace that fact instead of trying to fit a square in a round hole and pretend it fits, it doesn't.
Sure, and I'll make sure nobody else does.
Good luck
The PHP license is presumably used for the programming language itself - your PHP code can use GPL
Unless you are writing a php module, then don't worry about PHP's license. Take a look at https://choosealicense.com personally I usually go with MIT.
I use authorize.
A direct debit is more reliable - because it works off a client's bank account, it's not affected when a card reaches its expiry date, so it's a better choice when the payment period is likely to exceed the lifetime of a card. It also means you can be notified immediately when the dd is cancelled and take action accordingly.
A direct debit is more reliable - because it works off a client's bank account, it's not affected when a card reaches its expiry date, so it's a better choice when the payment period is likely to exceed the lifetime of a card. It also means you can be notified immediately when the dd is cancelled and take action accordingly.
This is the correct answer, choosealicense.com is a great resource for learning about, and choosing a license. **Personally**, I prefer Apache 2.0 for professional stuff, or MIT for personal stuff. I detest GPL (any version), as I dislike the forced virality — although I recognize _that's the **entire** point_.
Thanks for this. I read the post. Found it really enlightening. I've always been interested in web development and I've created and ran a few websites in my time. My current girl friend runs a business online and I setup a Wordpress powered site for her a few months ago. She loves it and its easy to maintain and customize. This blog should be really interesting for anyone with an interest in the history of the web and web development.
&gt; Found it really enlightening. Shit, I better go read it. &gt; *It was January of 2003, and 19 year old blogger and amateur programmer Matt Mullenweg was distraught.* I, too, was really enlightened.
I can highly recommend [Mollie.com](https://Mollie.com) if you're in the EU. They offer an OAuth API to onboard your merchants to your platform \- similar to Stripe Connect.
&gt; spreedly They look quite interesting, have you used them much yourself?
&gt; n Fix it because it can still be better lol
i've known the owner for several years and have some colleagues that have used it for years. i believe reachapp.co uses it, which might give you an idea of use case.
Just because something _can_ be better doesn’t mean it _has_ to be. The cost probably outweighs the value gained.
It's used by Laravel Dusk and some other automation/testing tools. We're using it in one of our projects and besides a slightly tougher learning curve (working with elements/DOM and parsing results), can't really complain.
Drops the history
Thank you. We are using Selenium proper, but cannot find a Java programmer to handle it. So switching to PHP would be a huge relief
Couldn't you just add each repo to the monorepo as a remote and then merge the remote into the monorepo?
Not from my experience? What makes you say that it does?
Good idea. That actually works, if you don't change the file path. In case you move files, the history is dropped because git understands it as deleted file and a new file. If you create monorepo, you move packages like this: - "original path" =&gt; "monorepo path" - /src =&gt; /packages/SomePackages/src
I did this at some length for my degree. The most commonly used licence for PHP libraries is MIT. MIT is what's called a permissive licence, that means it permits the user to use, modify, distribute or even sell the software and the only conditions are that they must keep the copyright notice in tact and must not hold the author or authors liable if the software doesn't work for them. Other similar licences are BSD and Apache. GPL is what is known as a "copyleft" licence that means that in addition to guaranteeing the freedom for the licencee to use, modify, redistribute and sell the software, it also comes with many conditions that stop the licencee from acting in anyway that contradict the principles of free open source software particularly in limiting the freedom of other users. If the licencee violates those conditions their licence is effectively revoked. The main principle with this is that if you make any modifications to the software you MUST publish your changes back to the community. If you download the code and make a modification of it for your own website but don't make it available for other people to use your code you have technically violated your licence and are no longer allowed to use, modify or redistribute the software. Newer versions of GPL also include clauses that stop contributors from using patents in their contributions (which they could then try to charge their users for) and from "Tivoisation" which is the practice of putting controls in place that stop users being able to run modified versions of the software. In Tivo's case this was to put controls in their hardware to stop it from running modified versions of there software which was based on open source (Linux/GNU). Copyleft licences are really important in protecting the open source ecosystem for projects like Linux but for PHP libraries they are typically more heavyweight than they need to be.
Here is some more information: https://choosealicense.com/licenses/
In my experience, see: https://www.reddit.com/r/PHP/comments/89bxfj/how_to_merge_15_repositories_to_1_monorepo_with/dwq3wjc/
What about using python, easy to learn and hire for 
a function to square a number, really?
of course, who the hell would want to use `array_diff($a, $b)` instead of use function _\difference; difference($a, $b); Think of all the benefits you are missing!
please tell me this is just copy pasted from some documentation?
Well PHP is our main language, and it would be a huge benefit to run tests on the same language, as anyone would be able to pick up. While with Selenium our CTO had to take over since Java programmer left (as he's the only guy who happen to know Java). Having all services in the same language is a plus for us. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Think of what you are missing with the other provided functionality! ``` use function _\differenceBy; use function _\differenceWith; differenceBy([2.1, 1.2], [2.3, 3.4], 'floor') differenceWith([[ 'x' =&gt; 1, 'y' =&gt; 2 ], [ 'x' =&gt; 2, 'y' =&gt; 1 ]], [[ 'x' =&gt; 1, 'y' =&gt; 2 ]], '_::isEqual') ```
I'm not sure what source code you are reading, but there is no function to square a number as part of the project
&gt; In this step, go ahead and learn how to use Docker. /r/restofthefuckingowl
I've started using Wordpress in 2012 and have created roughly 25 plugins ever since, ranging from small social media plugins to large-scale user administration systems. What I really like about Wordpress is the hook/action system; once you understand it, it makes it *so* much easier to keep your code clean. I'm starting on a new project next month, of which the key concept is extendability. I'm certainly going to use a similar hook/action system inspired by Wordpress. Thanks, Matt! 
Mink uses https://github.com/instaclick/php-webdriver which is a fork of facebook's webdriver. You might want to look into that one too. And if you want abstraction on top of it, look into Mink.
Hey, great roadmap! I can't wait to see the devops one, I shared this with a starting devops engineer I'm mentoring.
Docker is a well-documented tool, I basically learned how to use it based almost entirely on its official documentation. But to this roadmap, it's definitely necessary to learn how to use package managers and CLIs before Docker.
&gt; In case you move files, the history is dropped because git understands it as deleted file and a new file. This is what [git mv](https://git-scm.com/docs/git-mv) is for. It's almost always history preserving, as then you're telling git where the file ends up. This was used by us to preserve history when we upgraded from Cake 1.3 to Cake 2, which involved a lot of moves and renames, and we retained history on all the parts we used git mv on. You *must* commit the moves before you then edit the files further, else git can see the edited file as a new file and not attach history. So basically: pull if required, git mv the files, commit, then edit as required. Git should preserve the history on the files. Bonus, do it in a branch, so you can throw it away if it goes wrong. 
Its a joke, its because of how it is worded, not what the OP expects.
php4 w/ register_globals enabled...managed to migrate the codebase all the way up to 7.0 but it took about a year
the nice thing about perl is that you can upgrade the interpreter and then set the 'use 5.0.1' modifier to keep backwards compatability
&gt; Wordpress &gt; keep your code clean Pick one.
Ah, so it is. That's really easy to miss in the context of the article though.
Not when you’re trying to clean a floor made of dirt. I’m not going to beat a dead horse, you can find plenty of posts in here or around the web on why, from the lack of security, poor architecture, BC for completely dead versions of PHP, etc.
Fair enough. I was mostly referring to newly developed plugins and the hook/action system though, not Wordpress itself, which I know has a lot of flaws. Using it I felt able to write maintainable code, so I'm going to continue that practice in other non-WP projects.
I've noticed that for some reason doing `brew services restart php` doesn't seem to be working properly. The default OS X php-fpm is taking precedence (php-fpm -v) and showing as 7.1.14. even though php -v is showing the proper 7.2 I noticed this last night when Laravel Valet broke. Haven't had a chance to dig into it yet, so if anyone knows what could be causing that, tips appreciated
&gt;I knew I could ask questions when I needed to and get good answers. I'm pretty jealous. I have a lot of Laravel questions that are really basic, but it's really hard to get answers for them. A search on StackOverflow shows many people with the same questions, but the responses given are usually either too vague, technical or specific for me to understand, yet I can't open my own question as it will be a duplicate. I'm pretty much just following Laracasts, but there seems to be parts where he skips a step, or something works for him that doesn't work for me. For example, I haven't been able to get eloquent working. In the video he creates the model, fine, then boots up tinker and does "App\Task::all()" and it returns everything from his database. For me I get "PHP Fatal error: Class 'Panel' not found in eval()'d code on line 1" when trying to pull all data out of my populated "panels" table.
Why did you single out docker and not any of the other "go ahead and learn x" statements the author made?
This is dope. There’s a lot of things on here that I actually didn’t know about or knew about but didn’t know it was important. This is great info. 
Because I'm working with Docker right now and that jumped outat me.
Especially the architect. 
I have a `Scripts` directory with `update.sh` in it (aliased to just `update`) that I use almost daily: #!/usr/bin/env bash sudo -v while true; do sudo -n true sleep 60 kill -0 "$$" || exit done 2&gt;/dev/null &amp; hasBrew=$(command -v brew) hasComposer=$(command -v composer) hasNpm=$(command -v npm) if [ $hasBrew ]; then if [ ! -d /Library/Caches/Homebrew/Casks ]; then mkdir -p /Library/Caches/Homebrew/Casks fi brew update brew upgrade brew cleanup brew cask cleanup brew doctor brew cask doctor fi if [ $hasComposer ]; then composer self-update composer global update fi if [ $hasNpm ]; then npm update -g fi I ran it like 3 days ago and ran into the PHP issue. Removed all installations and started fresh with just the `php` package since I use Docker for actual development. Maybe some of you will like/use it.
I've contributed to that project before. It's super useful for test web apps front end! I've mainly used it through Laravel Dusk though.
PHP is server side, react is a client library, I see a react front end calling a php-backed rest api honestly. The allure of an all-Javascript stack is the lower learning curve, but IMHO the backend and UI/UX are usually done by different folks with different skills. Where PHP needs to change is developer mindset, it just doesn’t make sense to be building big, monolithic codebases in 2018... Kinda like the MS Windows of development, and I mean that in the most unflattering way possible ;-)
Could you maybe share a link to Github file with history is kept even though location file has changed? Also, do you take monorepo architecture into account? Merge and split, all with history? It could be applied to the split, that possible, but that's not what that post is about. Even for split only, I think that is not the case as we tried that as well. `git mv` it rather shortcut for `git rm` and `git add` It would depend on calls like: git log --follow ./path/to/file See [Stackoverflow](https://stackoverflow.com/questions/2314652/is-it-possible-to-move-rename-files-in-git-and-maintain-their-history). That again, are not Github and Gitlab friendly. 
Until it’s time to scale or upgrade, I fully agree with you :-) And I’m biased in your favor as a Joomla! founder.
What's big instead of forums now?
I don't necessarily disagree with the article, but it kind of comes off as a dude listing a bunch of technologies. I don't really agree with the order or flow of this workflow. For instance, I would put learning relational databases WAYY earlier. Also, I feel like a lot of the technologies listed don't have strong use cases associated with them. There are lots of good reasons to learn about queues like RabbitMQ, or to learn about a framework for your language of choice, but this article lists them blindly without giving much justification or direction for the reader.
I've since resolved the issue - turns out tinker runs on memory and simply closing tinker whilst still remaining in the command line isn't enough - had to fully close the command line and open it all back up to get it to work :) Thanks for the offer tho I have a lot of questions regarding how to use $_GET in Laravel, as when I use vanilla PHP I use $_GET a LOT (probably where a real developer wouldn't use it too) but I'm hoping that Laracasts goes over that further on in the series. 
Very. When I interview people, being able to explain REST is a must. It's simply the defacto standard for communicating with outside data sources. Additionally, when integrating commercial products into a website (even on local intranets), REST is the most straightforward approach.
Although I've no hand-on experience, I understand the principles of ECS well enough. But you've also mentioned 'jobs' a couple of times and that's something I'm not aware of (and unsurprisingly, Google is little help). Could you give me a pointer to read up on it please?
How much do you expect them to know. Like do you expect them to fully understand the more overlooked parts like HATEOS? 
I'm not big on definitions. I just want them to be able to explain the basics of the protocol. I just want to see if they understand it. 
Love these projects on PHP, I think almost everybody hates php array functions, all of them are namespaced by name, and some of them change arguments order. PHP developers are not going to change that, so, having a library who can give us what we expect from array, Is really nice. Most of the time, Laraveltions are enought for me.
Forums are dying. Reddit and Discord seem to be taking over a discussion style contents. I wouldn't give up on running a forum though. 
Flarum has been in development for years. [It's been in Beta release for about as long](https://github.com/flarum/core/releases).
At this point, is it Google "beta", or eternal beta?
That's the point. There are a plethora of variations on its definition. Sure, move your mutations away from GET and use appropriate verbs. Anything more than that is just some guys opinion about what REST means to them. I think that needing know be actively aware that this is what REST is - is useless. Also, I'm docking some interview points for referring to it as a protocol.
I need your suggestions for future features! Currently, I’m thinking of adding Persistence for MySQL and SQLite3... This would allow for the storage of graph data, and would make GraphDS far more useful to apps using databases...
What are you trying to do? I haven't used that even once. To get request data I just use ```$request-&gt;input('name')``` or similar.
I pass a lot of variables through the URL, and record them or take actions depending on the value passed through. Think of your standard google search and all of the tracking/settings variables they pass through their links :) Not only do they track your search, but also if you searched say, laravel then went on to google laracasts, your URL might look like this www.google.com/search ?q=laracasts &amp;oq=laravel &amp;sourceid=chrome &amp;ie=UTF-8 Google add a load of extra stuff, but that's a basic one. You can see the current query is Laracasts, but the "oq" original query is Laravel. an example setting might be &amp;safesearch=off
No one should learn in such linear order, but it might be useful for self-review or to rise awareness of gaps you might need to fill later. Guidelines like "don't invent your own code formatting - rely on examples, and there's PSR standard btw" would do better job than forcing yourself to memorize PSR-2 rules before touching database.
Thanks dude - If I can get it working that's a good place to start - I will be submitting my code for review once it's finished so if there are parts to improve I will find out then and learn from it :)
I'm happy to take a look at it. We're pretty much at the same level by the sound of it. I need to work on this code to add more filters as it's pretty basic at the moment.
Hi, I'm developer Juan Treminio. You might remember me from such open source projects as "PuPHPet, A simple GUI to set up virtual machines for Web development.". I have been working on Dashtainer for some months now, but have had my eye on containers for several years, ever since that first ticket was opened on puphpet's github to support containers. Well, puphpet won't support containers because `$reasons`, so I made this. You click some buttons, fill out some forms, download a zip file and run `docker-composer up` and boom, you're suddenly a container master. There's probably a hundred really embarrassing bugs right now. You're free to point and laugh. The project is also completely bereft of unit tests because I ended up _pivoting_ several times and realized I had wasted tens of hours writing tests that were now completely useless. These are next on my list so I don't feel so dumb anymore. Please test this project out. It's [completely open sourced](https://github.com/jtreminio/dashtainer) and MIT. Instructions on how to run an instance locally on your machine are coming soon.
I'm not super immersed in homebrew's culture -- is there a plain english translation of their reasoning here? &gt; By 31st March 2018 we will deprecate and archive the Homebrew/php tap. Unfortunately we have been unable to maintain an acceptable, consistent user or contributor experience and CI workload through non-core formula taps in the Homebrew organization so we are continuing to migrate widely used formulae into Homebrew/core and encourage more niche formulae and options to be supported outside the Homebrew organization. i.e. what are they hoping to accomplish (or what burdens are they hoping to shed) by pulling *some* of the PHP formulas back into core? What extra burdens were there in having the formulas in a tap repository?
My Balsamiq app crashed just scrolling through this. Nice work!
I had to tap `homebrew/php` to install `php72-memcached`, so I don't think it's entirely 100%...
Not important. HTTP is, the rest is bullshit (no pun). Here we went from SOAP to WebAPI to GraphQL, we never tried to follow REST because REST is a source of endless and pointless debates. 
Sorry I'm a little confused. You're saying anyone saying enterprise ready must be a sales or java developer?
&gt; lodash seems to be a codesmell today Huh, what? Lemme know when ESNext supports `lodash/diff` or `lodash/omit` in concise and readable syntax...
[removed]
Have you cleared and rebuilt the prod cache? bin/console cache:clear —env=prod And also cache:warmup
i think someone must learn REST earlier, like it must be done with db's, cuz it is really important nowdays 
Oh, look, another shitty article written without having done any research. Sigh. &gt; Most frameworks use php tags to call variable from controller, like `&lt;?php echo $users; ?&gt;`. However, blade templating uses `{{$users}}` to print variable. Besides the obvious grammar mistakes, most full-fledged frameworks use a some sort of templating engine, such as Twig, Plates etc. Blade is nothing special in this regard and in some ways is even worse (does anyone remember the `@inject`?). &gt; If you wish to transfer files from local to server, then migration will help build tables using simple command: `php artisan migration`. It's `php artisan migrate`, FFS. &gt; The Eloquent ORM of Laravel comes with simple PHP Active Record implementation. I find it hard to see it as a pro, especially for complex applications. &gt; Be it organizing authorization logic or providing control over access to resources, Laravel is the best among all other PHP frameworks. Care to share any proof of that statement? &gt; Laravel’s principles have been adopted from a universally acclaimed book “Clean Code” by Robert C. Martin. Which ones? AFAIK Clean Code didn't recommend using a bunch of magic to make code more readable. &gt; Without a doubt, Laravel has the best documentation among all other PHP frameworks, which makes the framework even more credible for trying out hands in PHP development. Again, more nonsense without any factual proof. &gt; nother important factor that makes Laravel better than other popular frameworks, like Codeigniter, Yii, CakePHP, is Larcasts, which provides both free and paid video tutorials on how to use Laravel. The production quality of videos is top-notch and they make learning Laravel very easy and meaningful. If you visit the official website of Larcasts, you will see, “Laracasts is the defacto educational resource specifically for working developers building the web with PHP and JavaScript. It's kinda like Netflix for your career!” Yes, Larcasts (note the missing `a`), the magic tool for making your code less shitty. &gt; Unit Resting and easy Routing also make Laravel stand out. These poor, tired units... 
Looks pretty cool. I've used PuPHPet a couple of times, and I'll be sure to try this as well.
This is great for people srarting out with docker-compose and thinking about service-based architectures! Once you see how simple docker-compose.yml with a Dockerfile per service can be, I think you are ready to write them yourself.
Is it cool to be full stack? I'm full stack because my company is too cheap to hire a front-end developer.
It's already on the GitHub repo. You can check it
Really great improvements! Still crossing fingers on the fix for factory methods and multiple arguments thought... Thought it would be fixed in this release.
why do i have to sign up to use dashtainer? PuPHPet never required a signup or login.
Good luck with proposing that: their usage has spiked when developing under certain "idioms". We will disallow it in `doctrine/coding-standard:^5.0`: * https://github.com/doctrine/coding-standard/pull/48 * https://github.com/doctrine/coding-standard/pull/49 
I am late to this thread, but I was in your shoes once! Started off by looking at these "oh-it's-so-simple-tutorials" about developing in Ruby-on-Rails that hyped things I had no idea I needed. *Migrate your database with these simple commands* felt weird when I didn't even know why I would need a version history of my database structure. I didn't even get a "Hello world" example to run (*simply run a local server like this, or better yet, learn to deploy on Heroku! Here's how...*). Frustrated I backed a few steps and acknowledged I would never be able to customize something I only had superficial knowledge of. I changed to PHP (since almost all webhosts supported it natively) and built some forms, added some pages and let them interact with each other. And only if I looked at my code and felt "This looks too complicated, I wonder if someone has automated that or written a library for that" I would look for tools that could help me. So I first found "include()", then I started to include my own "include.php" into every page just to have my weird custom functions available (all in global scope), then I started to use classes, then namespaces, then I started to learn composer. Then I learned about routing, views, etc. Now, after 4 years of free time coding, I was finally able to use Symfony and I understand most of the source code. I am still struggling, though, but I know that I can do it, step by step.
&gt; Now they're cool once again I keep seeing this as the rationale to use static sites. Next to half-hearted mutterings of "the speed" and "the security". I've never seen someone actually able to defend why *entirely* static sites are a thing, except for the cases where the platform limits you (like GitHub Pages).
Let's see how extract* or compact are used. Go to laravel source code: https://github.com/laravel/framework/blob/56a58e0fa3d845bb992d7c64ac9bb6d0c24b745a/src/Illuminate/View/Engines/PhpEngine.php#L37 - this would be probably most commonly used use case. Most of the simple template engines in PHP uses this approach. This is the only "reasonable" use of `extract` function, due requirements of blade (ability to execute any PHP code in templates). https://github.com/laravel/framework/blob/56a58e0fa3d845bb992d7c64ac9bb6d0c24b745a/src/Illuminate/Database/Connectors/MySqlConnector.php#L130 - this example is just about "readability". You could simply replace it with array destructuring + `array_replace` for config structure normalization. [ 'host' =&gt; $host, 'port' =&gt; $port, 'database' =&gt; $database, ] = $config; return $port ? "mysql:host={$host};port={$port};dbname={$database}" : "mysql:host={$host};dbname={$database}"; In this case we know exact what context of config is required for this particular function, we don't pollute context wich unneeded variables and so on. But yes, code will look slightly uglier... but... https://github.com/laravel/framework/blob/56a58e0fa3d845bb992d7c64ac9bb6d0c24b745a/src/Illuminate/Database/Connectors/PostgresConnector.php#L136 - here there are no profit at all from `extract` function. &gt; but they are still heavily used A better option would be ability to strictly limit list of variables wich will be extracted to current scope. Something like: ``` extract($config, ['host', 'port', 'database']); ``` Again, if remove compact or extract, what about `get_defined_vars`? 
&gt; Completely static sites offer no vector for dynamic code execution. If the server only serves html files, nobody's injecting anything else. Assuming you don't integrate third party services, or that if you do, you do it properly. The trouble is "my site does nothing, so it has no injections" doesn't require a static site. You can do nothing in a PHP site, as well, but use it to share content between pages (menus etc.), or drive content from databases which are not publicly editable. &gt; Completely static sites need no script execution overhead. There's no PHP to run, so each page load is quicker than the dynamic equivalent. Like the above, using PHP doesn't mean you immediately get bogged down in the slowest of CMS-es and frameworks. A plain PHP file with a few dynamic features is parsed faster than 99.999% of people on Earth need on their small-to-medium traffic site, and faster than the remote party can even detect. &gt; Completely static sites can be served directly from CDN, so they're closer to the people that need them and have built-in redundancy. I could give you that, but what's an example of a site that could be completely static, and needs heavy redundancy from a CDN? Not the blog from your previous example, for sure. 
Thanks for this - used to love puphpet!
&gt; True again. I guess my question would be; if you don't need a scripting language then why use a scripting language? Imagine your documentation is 10 thousand pages. You change a single item in the menu. Now you need to upload 10 thousand files, at least. With a script, you upload one file. So if I can sum up the problem, it's that static sites and PHP equally well address the "very small site that is just static content". But static sites address poorly every other scenario, like "big site that is just static content", "small site that is partially interactive", or "big site that's partially interactive". And even with a blog, a blog can quickly grow beyond a "very small site of content". If you write something little every day for 10 years, that's 3650 posts. If you want something like "recent posts" to show up on every post in a side-bar, you either do it with JS, which hurts SEO, or you do it statically so now every update is thousands of files to upload. TLDR; The drawbacks of PHP for very small static sites are not significant, while the drawbacks of static sites for anything **but** very small static sites are significant. Hence the choice seems poor in many cases. &gt; ESI and SSI are options for serving mostly static content, while allowing dynamic page sections. Well, at this point we can't say it's a static site, when it has dynamic page sections. Every site is partially static. It's just better integration with CDNs.
Sounds very similar to me, except it sounds like I've gotten further down the road before considering using any kind of 3rd party tool. If I ever needed something, I googled a tutorial for how to make it. If I couldn't find a tutorial, I just figured out a way to make it work (think code equivalent of duct tape) sometimes even using PDO/MySQLi code interchangeably. I always had 2 database connections open for each type. I've always had include files, since one of my very first tutorials had me put my database connections in a separate file. From there I created a functions.php, a classes.php etc.. My classes.php never really got used, I never figured out what benefit a class offers over a function, and always considered a class as "an overly complicated function". After that I read on StackOverflow that separating the PHP code from the design code is a good idea, and that separating static parts of a page from the dynamic parts was also a good idea. My header and footer became separate files, included into each page. All my php code was in a folder named "actions" and my pages named accordingly - `login.php -&gt; include -&gt; login.action.php`. Now I'm trying my best to learn Laravel (online reviews were good, has it's own video series and I was told Laravel and Symfony are what real developers use). I'd never heard of views, namespaces, models, middleware, libraries, routing, all that kind of stuff before this - so it's all a bit overwhelming right now but I'm trying my best to get my head around it, thought part of me is still in the mindset of bewilderment, guessing at syntax and being surprised when something works :)
It seems the writer of the article compared it to the previous framework it used and stopped the research for other frameworks...terrible article.
&gt; Is the JS SEO thing still a thing? Engines are getting pretty good at indexing dynamically loaded page content. More like "engine". Google does some indexing with a JS-aware bot, but their primary crawler relies on static content. To quote [popular SEO blog Moz](https://moz.com/blog/search-engines-ready-for-javascript-crawling): &gt; I recently published the results of my JavaScript SEO experiment where I checked which JavaScript frameworks are properly crawled and indexed by Google. The results were shocking; it turns out Google has a number of problems when crawling and indexing JavaScript-rich websites. As far as I know there's no widely established standard of "safe" JavaScript to use for SEO. The common understanding is that Google's kind of trying and you better kind of not rely on it too much. [Bing's guidelines](https://www.bing.com/webmaster/help/webmaster-guidelines-30fba23a) are not to, quote, "bury links in JavaScript". &gt; It's entirely not basic server-side scripting. It's server-assisted copy and paste. Come on now. And scripting is server-assisted bit shuffling.
&gt; And that JS-aware crawler is certainly not ready for prime-time. Good to know! &gt; Come on now. And scripting is server-assisted bit shuffling. What scripting can SSI and ESI practically do? They are directives to substitute content from an external URLs, and directives to render static content in the absence of the modules required for the substitution.
&gt; Could you maybe share a link to Github file with history is kept even though location file has changed? I can't, because our repo is private, but what I can do is show you this: commit b2b57d6b5cfee1763353d905e50e5412bfe71ede Author: &lt;developer 5&gt; &lt;email@example.com&gt; Date: Fri Oct 16 10:14:15 2015 +0100 Foo after Update $ git diff b2b57d6b5cfee1763353d905e50e5412bfe71ede^! diff --git a/app/Plugin/Foo/foo_app_controller.php b/app/Plugin/Foo/FooAppController.php commit ebd21e572ddeaa2987439c69bfb1b35c0f5147bc Author: &lt;developer 5&gt; &lt;email@example.com&gt; Date: Fri Oct 16 10:11:28 2015 +0100 Moved Foo $ git diff ebd21e572ddeaa2987439c69bfb1b35c0f5147bc^! diff --git a/app/plugins/foo/foo_app_controller.php b/app/Plugin/Foo/foo_app_controller.php commit a4f08efd6cf367eb13b24167e308b6d7f1b24d98 Author: &lt;developer 3&gt; &lt;email@example.com&gt; Date: Tue Sep 1 11:17:17 2015 +0100 Remove call to someFunction from foo_app_controller, we deal with this during the app_controller's before filter $ git diff a4f08efd6cf367eb13b24167e308b6d7f1b24d98^! diff --git a/app/plugins/foo/foo_app_controller.php b/app/plugins/foo/foo_app_controller.php Thus the file has full history going back to 2012, and going forwards to changes made a few weeks ago. In github, you can use blame to view the file, and then the squares next to a given age to see the file as it was back then, meaning that even github keeps the history intact. The biggest thing to point out here is that you do small distance changes, so we moved the file first, the we renamed it, then we edited it, with commits inbetween. If you don't do it like this, such as a move + rename, then git won't track the changes properly and will assume the old file was deleted and the new file was created. We did this to a project that had ~400k LoC at the time in hundreds of files. We lost history on a few, but that was because one of the developers did a move + rename and commit, rather than the move, commit, rename, commit that was required. 
There's a good chance you'll have to make changes to your server settings (e.g. add a rewrite rule if you are using apache). When you go to `http://localhost/sitename/www/testapp/web/page_2`without the `index.php`, it tries to access the file/folder at `www/testapp/web/page_2`, which doesn't exist. In any case, I don't know if this can be fixed through Symfony alone. It's something I'm trying to figure out as well. BTW, try [/r/PHPhelp/](https://www.reddit.com/r/PHPhelp/) next time.
Something like your better option is possible already: ['host' =&gt;$host, 'port'=&gt;$port] = $config
It's just that the distinction between any two categories we can discuss become meaningless once you starting fuzzing the edges. Once static sites include interpretation of commands in the content, they're no longer serving content as-is, they're preprocessing it dynamically. It's like looking at a gradient going slowly from red to blue, and you keep adding blue to your red, while arguing it's still red, and before we know it, everything's purple! ;-)
In your browser's dev tools you can look up where the requests go. In case of your example, it is: http://simplearmory.com/data/achievements.9933417b.json You can see all data used there in form of JSON. You can parse it and use however you want.
Ok, let me be more specific then. If you have a static HTML menu file, and a thousand static "blog post" files, then using an ESI to include the static menu file into those 1000 "blog post" files is what I would consider to be server-assisted copy and paste. I don't consider that [even a simple] server scripting language. how well it's supported is another discussion entirely...
Put the screenshots on the landing page, shouldn't need to sign up to sample the experience or benefit to using your service. Nice job though, looks swish!
You, sir, I salute you, for reading it through when it's clearly a shitty spammy article. Starting from the misaligned ticks in the top "slide show", the outdated 90s page design, then the justified paragraphs. Ugh!
Thank you!
Thank you!
If I switch to PHP 5.6, install xdebug with pecl, then switch to PHP 7.0 and install it for that version it removes the old version. I've had to do them all one by one, copy the so file to my desktop then copy them back to the right place when I've finished all 4 versions I need. Massive PITA
could you go a bit deeper into detail? where and why is a complex relationship needed? have you ever tried symfony's workflow component? just an idea, i will take a look into the source code a bit later.
Out of reading this entire thread, all I got out of it was, is this "server-assisted copy-paste" faster than running PHP. If the answer is yes by a considerable amount, then there may be grounds to use it over PHP.
How are the containers composed? is composer installed in the php container? webserver and composer use the same php container?
&gt; Imagine your documentation is 10 thousand pages. You change a single item in the menu. Now you need to upload 10 thousand files, at least. With a script, you upload one file. PHP static generators are not the best for speed. I use Hugo, personally, and for a site with 1,000 pages, you can expect a rendering time of [&lt;1s](https://discourse.gohugo.io/t/hugo-chokes-on-125-000-pages/7921/13). As for "now you have to upload N pages" that's simply not a big concern -- TravisCI or whatever my release pipeline is does that for me, it's really not a huge hassle to wait the short time that takes vs. the shorter time a `header.php` upload would take. Hugo also very nicely deals with "Related Posts" as static content just fine. You can even include a search via js-lucene like abilities. The primary draw back is that PHP _is there_. In fact, the drawback is that _any_ language is used. The dynamic evaluation and extra code increase the attack surface. Static sites have provably less attack surface and will, without a doubt, work faster, cache better, and be more secure.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://discourse.gohugo.io/t/hugo-chokes-on-125-000-pages/7921/13) - Previous text "&lt;1s" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Thank you. It seems I should consider Laravel Dusk as well!
Wouldn't that just result in people replacing `extract` with this? foreach($data as $key =&gt; $value) { $$key = $value; } If they wanted to skip defined variables, you have to add another two lines: foreach($data as $key =&gt; $value) { if (!isset($$key) { $$key = $value; } } Maybe I'm missing something here, but this just seems like more lines to achieve an identical result. Why not just make `extract` skip overwrites by default, or even throw an exception on overwrite?
* Using docker-compose * If you want, there's a fancy checkbox to do so * No
snake\_case in that article remembered me of the dark era of php. please don't do it again :D
You're missing the point. A "static" site can still use PHP to generate the static site. Ergo *static* does not imply *duplication*.
&gt; You're missing the point. A "static" site can still use PHP to generate the static site. Ergo static does not imply duplication. Static means the file content on the server is 1:1 with the content in the browser. No processing. Using PHP to *generate* the site doesn't mean it generates PHP files. So it *does* mean duplication, unless another preprocessing is done on the server, like SSI. &gt; Also, stop arguing or commenting on literally every paragraph someone writes. Makes you look like a twat. I'm responding and providing context so it's clear what I'm responding to. If you feel that makes me a "twat", you should probably see someone for your emotional troubles.
PHP functions are mostly snake case tough, but I understand the feeling :)
Ahaha well that is true, but still can't help feeling dirty when I use them 
so potentially composer and webserver run on a different php version, or have different extensions installed... that's problematic
You can add composer to the PHP-FPM container. Webserver should not care what PHP version or extensions or composer dependencies your application has.
I tried a nginx, mongodb, php stack; downloaded the file and executed the docker commands as instructed via the website and README. Traefik appears to be running fine, but the docker-compose command fails with "Network traefik_webgateway declared as external, but could not be found". Running "docker network create traefik_webgateway" works. Not sure if this is a bug, or just a step omitted from the instructions.
You just don't know when to stop do you.
composer checks your "platform requirements" defined in packages and project. So the php used to run composer install must most definitely be the same php as the one the webserver uses. I havent seen a single project that got this right, other than "just install php on every container where you need it" or "just install composer in multiple containers" but that totally defeats the purpose of docker... and frankly is just a workaround for something that's flawed by design.
You can still use input submit just if you use preventdefault first and make sure not use a form action
I think you may be thinking PHP runs as mod_php here - it does not. It's solely php-fpm. Within this php-fpm container you can install composer. It's a 1:1 relationship.
Makes it easier in terms of CSS so then I can just use the same buttons through the website 
&gt; a smart interpreter wouldn't run the second operand at all, if first one already evaluated to TRUE! This is known as [short-circuit evaluation](https://en.wikipedia.org/wiki/Short-circuit_evaluation) and has been around long enough that Dijkstra criticized its effects on the ability to reason about a program in [a mail from 1987](https://www.cs.utexas.edu/users/EWD/ewd10xx/EWD1009.PDF). If you're interested in smart interpreter tricks, take a look at how Haskell does [lazy evaluation](https://en.wikipedia.org/wiki/Lazy_evaluation). &gt; On a side note, now you can tell why we are using || instead of OR when we want a boolean result but not a trick. || has lesser precedence than = Only in PHP would they have an or operator with less precedence than assignment, due to the common case laid out in this article. And only PHP would fix it by introducing an *additional* or operator. ---- The thing that's missing here, I think, is a discussion of how this expands out to conditionals. $result = some_function() OR some_other_function(); should expand out mentally to $result = some_function(); if not ($result) { die(); } which is a form inspired by Bash, where programmers often add `|| exit 1` to the end of statements as a quick way to add error-handling (note: if you do this, you probably want to use [bash strict mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/) instead). In old bash, you also see the sibling form, where foo &amp;&amp; bar is shorthand for if [ foo ]; then bar fi This obviously doesn't work with the assignment operator if you were wanting `foo` to be the value that's always assigned. But if you're trying to assign a backup value to a variable, then PHP's shorthand ternary form $val = ($foo ?: $bar); is the same thing as how languages like Ruby handle val = foo || bar
I'm no docker expert by any means, I just tried to create a setup like this and wasn't able to do it. This subreddit wasn't able to help me achieve it either. so, there's a php container which includes composer, and a webserver container which uses that php container? because you answered "no" to my question: "webserver and composer use the same php container"
No. Can you explain why you would ask that?
Webserver _and_ composer do not use the same PHP container. Webserver (nginx/apache) are separate services in their own containers. Composer is on the same PHP container, if you check the checkbox.
Thank you for this fantastic addition! 
I think that's the point. You should `brew install php@7.2` or whatever, then `pecl install memcached`.
Isn't the WP's Action/Hook basically an Event/Observer design pattern? 
yeah ok so my point is still valid, the webserver and console/composer run on different installations of PHP, which is not good.
I maintain a library which still supports PHP 5.5. The new and "improved" homebrew doesn't offer PHP 5.5 out of the box, so I threw together a tap for installing it: https://github.com/jdpedrie/homebrew-php55 Never made a homebrew tap before, so no idea how robust it is, but it worked for me and may be helpful for someone else.
I know, this is exactly what I showed in this example.
Please show me an example where Nginx or Apache care about Composer dependencies when using PHP-FPM.
I'm not a developer, but would a very basic definition be that: It's a set of standards to allow easy transfer of data, so formatting data in a way that makes immediate sense to any system and so that all data can enter the same "entry point", no special logic is required for code from a different kind of system?
apache doesn't care, obviously. but when I do composer install it checks the platform reqs of the wrong php installation. eg: when I add a composer package that requires a pecl extension only installed on the php container but not in the fpm container
There is no `php` container. There is a `php-fpm` container that also includes `php-cli`.
Yes, by a considerable amount. If you cache your entire site with Varnish, and use static includes (which don't require PHP) then Nginx is never hit. If you serve your site with Nginx (static files, static includes) then it is as fast as just serving static files with Nginx (which is very fast). Basically, not using PHP is a lot faster than using PHP.
Everyone here seems to suggest that you should learn new skills related to being a developer. I'd like to suggest a different approach. You should target an industry that interests you enough that you can imagine yourself working in that industry for the rest of your life. Then learn everything about that industry and commit yourself to that industry. I'm late in my career (over 60). I've worked as a programmer/developer in telecommunications (hated it), real estate (liked it), financial services (liked it), insurance (hated it). I learned long ago that my knowledge of accounting and real estate gives me a big advantage over other IT people. Because face it, some day you will cease being a developer, and you will need a wider scope of knowledge than languages and development platforms. Also, over the decades, I've seen the "hot" language or platform change often enough. All programming languages are basically the same thing--they are all based on simple algebra. Watching people re-learn new languages every few years is like watching a kitten chase its tail. Whichever "hot" language you learn today is going to be old and dated in a few years anyway. You wrote that you want to work for a "Tech company," but that term is too broad to mean much. For example, Google is a tech company, but within that it is a search engine company, a mapping company, and an office applications company, etc. What you bring to the table will matter on your overall knowledge base about a particular discipline or industry, rather than just the syntax of a programming lanuguage. You seem to be concentrating too much on the toolkit (programming language), and not enough on the overall knowledge base needed to succeed in a particular area. Choose a discipline or industry that has a broad enough scope to interest you for the next 30 years. Then develop your IT skills and knowledge base to fit that industry. Best of luck. 
&gt; Only in PHP would they have an or operator with less precedence than assignment, due to the common case laid out in this article. And only PHP would fix it by introducing an additional or operator. I think perl would like a word with you.
Actually you may have run into the first reported bug! https://github.com/jtreminio/dashtainer/issues/1
I get where you’re coming from, but I’d like to see a better-designed replacement for `compact` at least. Basically the same thing but it would accept the vars themselves instead of strings that correspond to them (like the JS object shorthand or whatever it’s called). `extract` probably can’t be helped much just due to its nature, but it is incredibly convenient in a few rare occasions. I’d take it over variable-variables in foreach any day, but outside of templating (and stop doing templating in PHP already) it’s definitely a code smell. 
Yes, there's a big penalty firing up a script language, but how much page impression do you have to serve that a small, *cached* PHP CMS is outclassed by static content? And lets not forget that many "static" sites still do a lot client side. Nice syntax highlighting? Some comments through Discuss? Include some social media content? While convenient often computational power is just moved from the server to the client.
I don't think I've ever used them, but I still rather like that they exist - I think it adds a rare level of consistency to the language. If you think of `$` as being the 'variable dereference operator' just as `()` is the function call operator then it makes just as much sense to allow `$$foo` as it does to allow `makeAFunction()()`. Or to allow `${makeAVarName()}` just as we allow `$funcName()`. To _disallow_ variable-variables seems like the wtf. Even if I can't think of a good use for them.
You're pretty close. In its simplest form; a RESTful service is a service that &gt; allow(s) the requesting systems to access and manipulate textual representations of web resources by using a uniform and predefined set of stateless operations. For the service to be "stateless" in this sense only means that your previous requests will not change the behavior of subsequent requests. This of course excludes changes introduced by modifying the data itself. 
You absolutely do need to work on your mindset. Big and monolithic or tiny microservices; it's just an implementation detail. If you think that either of these is a silver bullet that makes for better software then you're the last person someone should take advice from.
All memes aside you can absolutely keep WP code clean. Say for example if you write your plugin as singleton class instead of bunch of procedural code or if you code your templates with Timber/Twig instead of PHP/HTML spaghetti. I think some people just have not had that much experience with WP or simply dont know how to write clean code unless forced by a framework. 
I’m happy to stand up and respectfully disagree with you on your take of architecture being “just an implementation decision.” If you need a simple blog and few people will ever visit, then sure a single platform will be simple and easy to manage. If you’re a bank and need to offload a queue for transaction processing however, there’s a smoking crater in your immediate future with that approach. There’s a reason web systems have grown distributed over the years. I’ve seen firsthand the evolution as it was driven first by efficiency, then developer productivity, and then by scale and efficiency again. Even LAMP has multiple pieces, and for good reason. Specifically regarding web platforms, “monolithic” to me also implies that the backend still renders display code (and not a service for the front end to make REST calls to). Perhaps I was not clear enough, or we just disagree.
In fact CDNs do not care how content is created/served, they care about cache headers (assuming it's a pull-style CDN)
Insisting on people being able to explain REST properly before considering them fit for the job, yet also calling REST a 'protocol' seems just a little funny to me. 
I haven't seen this Dijkstra mail before. That's pretty great. &gt; Rubin's third program fails for N = 0 (in which case his second program succeeds only by accident - see below -). I thought that by now professional programmers would know the stuff the silly bugs are made of. Yeah, we're still ... still working on that ...
Faker!
Native threads (or even basic async like C#) would be killer for PHP. I always feel like I'm missing them when working with PHP. Pthreads is nice, but needs better support. Evented stuff is cool, but sometimes the overhead of introducing events isn't super worth it.
It's scary how many people come in without the knowled of basic infrastructure. You do not need to learn every bit of tech below but you atleast should be able to reason why these tools are needed and for what to use them. These are things I personally drill when searching for a developer. Logging - Kibana stack (logstash, beats, etc), Graylog Metric tracking - Grafana, Timelion CI/CD - jenkins, go, teamcity and deployment tools capistrano Object databases - elasticsearch, redis, dynamodb Not mysql family databases - sqlite, postgres, cockroachdb Queues - aws sqs, rabbitmq Knowledge of devops practices like feature toggles, chatops. Processes like post mortems and how to deal with emergencies. Read The Phoenix Project. Be familiar with new hypes like graphql. You must realize that the dev process is very important. There is no finish line when programming thus you must not only know how to code up some fancy algorithms but how to create something maintainable, expandable and usable by all the parties involved. Also, you should be able to answer most of the stuff here: https://github.com/arialdomartini/Back-End-Developer-Interview-Questions
or at least a decent FFI to call in languages like GO which doe concurrency extremely well. But nah...
&gt; Insisting on people being able to explain REST properly before considering them fit for the job For a job that heavily relies on REST... Really, that's crazy to you? Again, I said that I don't quiz them on definitions, nor do I care if they use a word incorrectly. I just want them to be able to explain the general concept. I don't think that's crazy at all. &gt; calling REST a 'protocol' I used a word incorrectly. So shoot me. This is the type of thing I wouldn't stress over when interviewing someone. I just want to have a conversation about the basics of it. I don't care about them maybe using a word incorrectly.
Sculpin development had almost stopped 2 years ago, which is a pitty. It also misses Symfony DI autowiring, which is much have for app extension. I took the liberty to continue such direction with Statie: http://statie.org How would you compare it to Sculpin from your perspective? 
I've pretty much given up at this point - wrote a little framework to write some RPC microservices with ZeroMQ to do the communication. Pretty generalized, lets us use whatever languages we want on the other end. All runs in Docker. Dealing with closed source PHP extensions was a nightmare.
hhvm has async.
Monolithic only implies that all userland code is run inside of a single process. It has nothing to do with the coupling of the various modules inside or the difficulty of changing their implementation. The lack of distinction between architecture and deployment leads me to believe you're misunderstanding some fundamental concepts in architectural design. 
Have you tried amphp?
You should look into Swoole, an async PHP framework which turns PHP into a node like environment. No need for Apache or Nginx. 
I agree with /u/maiorano84 that practice helps. Recently been to around 7-8 interviews, having never had one before (was freelancer). With every interview I noticed patterns, repeated questions / problems, and (with one or two exceptions) I improved each time. But also - and this is equally important, I think - you learn to pick up on company culture, whether staff seem happy and relaxed there or not, or somewhere in between: basically whether you'd like to work there. You may already have this instinct since you've worked in offices before, but I hadn't and it was extraordinarily valuable to me.
Nice, I can also filter github by most popular and copy paste to make a blog post to spam on reddit!
Swoole PHP.
On one hand, I agree, but on the other hand, remember that this as an open source language that advances on the shoulders of its contributors. If you think Pthreads needs better support, go dig through the stuff [linked in the article](https://github.com/php/php-src/tree/master/TSRM) (among other things), and contribute to Pthreads yourself. Hell, probably just writing Unit Tests could take some load of the main contributor's shoulders. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [php/php-src/.../**TSRM** (master → a9ab5d4)](https://github.com/php/php-src/tree/a9ab5d473b9e51bc68ec960f26cc8088bcdcc0fe/TSRM) ---- 
Check out [phpbrew](https://github.com/phpbrew/phpbrew).
Yep...all defined in the global namespace in a hodge-podge of procedural and pseudo-object oriented code.
I've tried working with ReactPhp, and I like it; it's just that I'd like for common libraries to integrate these frameworks on themselves (like Guzzle), they could of course use something like ReactPhp as a dependency. I imagine something like something in say Eloquent (Laravel): $user1 = App\User::find(1); $user1-&gt;counter++; $promise1 = $user1-&gt;saveAsync(); $user2 = App\User::find(2); $user2-&gt;counter++; $promise2 = $user2-&gt;saveAsync(); $promise1-&gt;wait(); $promise2-&gt;wait(); And such kind of features in existing libs instead of having to implement them yourself. It's not because it's too hard to implement myself, it's just that if existing libraries start supporting them out of the box, people will actually start using them more. For me PHP is all about convenience and making code accessible to many coders.
So would Ruby
HHVM sounds very nice, HackLang would be a godsend. But I prefer staying on the Zend version of PHP, it's being used a lot more, has good enough performance, and isn't owned by Facebook. Also I've heard quite a few people complain about the FB patent grant license: https://github.com/facebook/hhvm/blob/master/hphp/hack/PATENTS IANAL so it's easier for me to just not use HHVM altogether.
Great write-up. Now I know a little more about threads, thanks!
FYI PHP 5.6 will be EOL in Dec 2018. CentOS 6.x I believe is EOL in 2020. 
Ok, that is a different thing than you said previously though. Previously, you said you would love good library for making database and filesystem calls async. Now you want to turn traditional sync library into async one.
Good stuff, but there is no out on Linux! it would be nice if there is a feedback.
Yes, I'm still working on it, a full support for Linux is coming. 
Started using docker not even a month ago, now I feel pretty confident I can spin up whatever environment I need... at least for development purposes. It's really not sorcery indeed. You just have to wrap your head around some basic concepts, and starting up with these kinds of pre-made configs and try to figure out what's going on is one of the things that really made it click for me!
We should start a club or support group or something :-D I'll try to remind myself that I don't have to use all tools available and that not every shiny tool will be useful for my project.
What it sounds like you are having issues is with database relations. Check out [this tutorial on database relationships](https://code.tutsplus.com/articles/sql-for-beginners-part-3-database-relationships--net-8561) Your database should look something like this. You have a table that holds all of your products, each product has a unique product Id. Then you have a users table, each user has a unique user id. Then you should have a shopping cart table. In it should be maybe 3 columns, user_id, product_id, and quantity. Let us call it "user_shopping_cart" table. That third table will have a many to many relationship with both there products table and the users table. That way when a user goes to a shopping cart page, your website grabs his user id, and retrieves all records from "user_shopping_cart" where user_id == that users id. 
I understand what you are saying but I've manually used html to create a table for products (not the sql table) which won't have a unique id (i think this is done through ajax query) unless there's an alternative way to store the product without using sql is there a way i can show you what i mean on chat. Its important i finish this. 
I assume this sort of thing isn't needed if you're running MAMP Pro on your machine which can do https already.
This term has been around longer than most folks that use Reddit today. And in software engineering, 'monolithic' is rarely used in a happy way - hence my respectful disagreement with your assertions, but your very definition seems at odds with basically everyone else which is the real issue here. I'll provide reference to a very commonly-held industry term and underlying concepts: * Here's a more traditional, dated, old-fart (that's me) [explanation](https://en.wikipedia.org/wiki/Monolithic_application). * Here's some [more modern thoughts](http://microservices.io/patterns/monolithic.html). * Even the Microsoft peeps [get it](https://www.c-sharpcorner.com/article/monolithic-application-design/)! hehe * For some balance, here's some [well though out perspectives from both sides of the fence](https://www.infoq.com/news/2014/08/microservices-monoliths/), from some people I respect and know. *"I do not think that word means what he thinks it means."* -- Inigo Montoya
**Monolithic application** In software engineering, a monolithic application describes a single-tiered software application in which the user interface and data access code are combined into a single program from a single platform. A monolithic application is self-contained, and independent from other computing applications. The design philosophy is that the application is responsible not just for a particular task, but can perform every step needed to complete a particular function. Today, some personal finance applications are monolithic in the sense that they help the user carry out a complete task, end to end, and are "private data silos" rather than parts of a larger system of applications that work together. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Indeed, the PHP static-site generator scene is quite different from when Sculpin started. There are a ton of great projects out there!
Yes, but I don't use GUI anymore since my first course. this is for the people who use VMs! you can test any app over https, like Django, ruby on rails, php, nodejs etc.... I'm not sure you can do that with mamp.
I use to use laravel valet but now I don't want to install anything related to programming on my MacBook, I want my MacBook clean not even brew. Now I use parallels desktop pro with command-line tools. I create a vm when I'm done destroy it. if need again create one. This tool is useful for me. Thanks
You want to google routing. https://joshtronic.com/2015/05/24/basic-page-routing-in-php/
I have no fucking idea what that articles is saying lol
I'm not stupid I don't see it happening either. But I'm in favor of it 
Ok, so security aside, $_GET variable contains an array each element of which is a parameter of your URL. In your case it would be something like this: [ 'page' =&gt; 1 ] That's how you can get the current page number. Then you update it like this: $_GET['page'] = 2; Then you can build a link to the next page like this: $url = 'website.com/?' . http_build_query($_GET); These are basic barebones of URL manipulation in PHP. Keep in mind there's much more going on here, including security implications as mentioned above, so you should really learn what you're doing before creating a big security hole in your web app.
I'd really like threads/parallelism. You can work around it with multi_curl if your application is bound to external APIs. We currently do this with HTTP Guzzle promises and are able to call 3 external web services at once. Thankfully we fall into that use-case. For any other use-case you're in trouble. I tried amphp/parallel before going the multi_curl route and the results were not promising. Give us threads PHP!
Neat!
Master branch? I'm interested in contributing for Debian/Ubuntu support.
Have a try with this http://php.net/manual/fa/function.http-build-url.php here is a non peck version https://gist.github.com/MattiJarvinen/3128801
But what about tests???
You can contribute, just send your pull request and we will check it out and merge it.
What you can do is use multi_curl and call yourself to start workers and then return the result, maybe not as efficient as in process thread, but other benefits, uses existing web server process model, no shared memory (no need for mutexs), you can use your existing code base.
What about them? I really struggle to see the connection between this article and the topic of test 
*scrolls to see if /u/kelunik has commented*
https://www.reddit.com/r/PHPhelp/ might get a better response
I hear this so much... "if you dont like it, contribute and make it better". like every php dev has even a notion of C, let alone being able to contribute to a huge project like php... it would take months to get acquainted with the codebase and get a simple thing done. Let alone **implement threading in a language** sure, it's possible... everything is possible... 
why do you need bundles for console-only application? Bundles are symfony framework's specific thing. If you want to create a console application, you don't need Symfony Full-Stack Framework.
Hey Tomas, I'm the author of the article (and future follow-ups). Unfortunately Statie was not considered, there are actually a lot of options out there, and to filter them out I just used GitHub stars as a metric, which is probably not the most fair approach, but it was certainly the easiest and most immediate one. Because of this, unfortunately I haven't taken a look at Statie. I might consider an extra article where I briefly take a look at some SSGs with a smaller following, so I actually wanted to ask _you_ how you'd compare it to Sculpin and others :)
You could literally replace the entire repository with a readme that gives you the OpenSSL command.
You don't need threads in PHP. It has a request-based lifecycle. You can also create an event-loop which is close to threading. Things like react-php already do just that. There are many alternatives. I don't know why people circlejerk around threading in PHP for ages now. If my webserver starts to light up threads i'll shoot myself in the foot
What's the benefit of using Pusher? I've seen lots of people using them.
It's easy to use and it's free for smaller projects. 
&gt; what I personally would love is a good library for making database and filesystem calls async using an event loop. That should be PHP priority #1 (not specifically the event loop but at least async), it would help stay relevant in the age of microservices &amp; multiple api calls.
Ah sorry for the ambiguity english isn't my native language. With "good library" I meant something that is easily understood and preferably used widely already. The Guzzle example might have made it a bit clearer. Guzzle used to be a sync-only library (if memory serves me right) but now has async added to it in a way I very much like and would like to see happen to other good libraries. The great thing about implementations like Guzzle (traditionally sync, but with added async) is that it's easy to migrate and if unexperienced coders don't understand async they can just use the sync version like they're used to.
Isn't it possible to get some time from the company you work for?
I am creating bundle that only uses console, so I can plugin in into other parts of the system when needed
That’s false. You aren’t required to distribute your modified code. Only that if you do distribute it the code is licensed under the GPL ([source](https://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.en.html#GPLRequireSourcePostedPublic) )
I’m working on an all-PHP alternative to Socket.IO with Laravel Broadcasting (Echo), using Ratchet. The Echo side is basically done: https://github.com/simonhamp/echo The server side uses ZMQ as its message bus for now but could easily use Redis: https://github.com/simonhamp/laravel-echo-ratchet-server
Ty for your reply. &gt; bundles are an extension to the kernel No, they aren't, nothing about kernel and bundles in the official docs. &gt; A bundle is similar to a plugin in other software, but even better. The kernel initialises and registers the bundles. The `registerExtension()`method is in the container not kernel, plus the container has already an array that holds all the extensions. The only place where it's used in Kernel, is in `prepareContainer()` method. That's it. Nothing about this method requires kernel features. symfony/http-kernel/Kernel.php protected function prepareContainer(ContainerBuilder $container) { $extensions = array(); foreach ($this-&gt;bundles as $bundle) { if ($extension = $bundle-&gt;getContainerExtension()) { $container-&gt;registerExtension($extension); } if ($this-&gt;debug) { $container-&gt;addObjectResource($bundle); } } foreach ($this-&gt;bundles as $bundle) { $bundle-&gt;build($container); } $this-&gt;build($container); foreach ($container-&gt;getExtensions() as $extension) { $extensions[] = $extension-&gt;getAlias(); } // ensure these extensions are implicitly loaded $container-&gt;getCompilerPassConfig()-&gt;setMergePass(new MergeExtensionConfigurationPass($extensions)); } All the kernel should do is to pass the bundles to container, and this whole logic should be executed there. protected function prepareContainer(ContainerBuilder $container) { $container-&gt;registerBundleExtensions($this-&gt;bundles); //or something like that } Now I wouldn't have to drag the whole http-kernel when I want to just use BundleInterface and AbstractBundle. If the container should not know about bundles, then there should be another component that combines container and bundles, that would be used by http-kernel. If I missed something please point it out, ty.
just add a new row with the visitors information and count it later
Hello, you will find more help on https://www.reddit.com/r/PHPhelp/
1. https://i.imgur.com/DK1ckG8.png 2. [How to report errors in mysqli](https://phpdelusions.net/mysqli/error_reporting) 3. [When to use single quotes, double quotes, and back ticks in MySQL](https://stackoverflow.com/q/11321491/285587)
what worries me the most is that you're the only person maintaining this project (https://github.com/orgs/phpstan/people). you should focus on getting more maintainers onboard, this way you don't need to worry about the future of phpstan.
Main benefit for us is that it saves us having another system to manage in-house. While Pusher isn’t perfect (nor free for anything larger than a small project), it makes sense for us right now as it’s cheaper than running a HA cluster, monitoring it and maintaining it. If you’re worried about downtime as their a third party service (and in reality if they go down you don’t know how long it will be for), implement a fallback long-polling mechanism in your application.
Then you’re not even trying 
contributors != maintainers. phpstan looks like a one man show, you're (as a person) even offering to issue invoices for contributions on PayPal and Patreon.
You'd be surprised how many open-source projects are one-man shows per your definition.
That's generally not how open-source works – unless the company is visibly sponsoring the project to all who use it, it's hard to say "I made this thing that has *already* benefitted you, let me work on it a lot even though there's pretty much nothing in it for you". Put another way, I'm aware of few companies that employ talented developers and allow them to spend large chunks of time on their own passion-projects.
There is a chat channel for Symfony where you might get a more informed response. Just look in the community section in the docs. I would have to speculate that since Symfony was mainly directed at web applications, there really was not much point in breaking the bundle stuff into it's own component. As you indicated, it is only two files (a bundle interface and an abstract container aware abstract implementation); Your case of wanting to wrap a console command in a bundle to facilitate sharing it is perhaps a bit of an edge case. However, there is nothing stopping you from proposing that the bundle functionality be broken into it's own component especially if you offer a reference implementation. Symfony components have been refined over the years. 
I've used Restler before and it's so simple to work with, it's more or less just some bootstrap code that ties it together with your existing classes.
the ones i care about have at least two active maintainers, just in case things go bad, it wont affect the project. don't get me wrong, i support OSS, but this looks like bragging for money to me. if you care about phpstan as a project, get more maintainers on board, that's all i'm saying. this way its future won't be depending on you.
Reentrancy has nothing to do with thread safety and nothing to do with touching or not global state https://en.wikipedia.org/wiki/Reentrancy_(computing)
**Reentrancy (computing)** In computing, a computer program or subroutine is called reentrant if it can be interrupted in the middle of its execution and then safely be called again ("re-entered") before its previous invocations complete execution. The interruption could be caused by an internal action such as a jump or call, or by an external action such as an interrupt or signal. Once the reentered invocation completes, the previous invocations will resume correct execution. This definition originates from single-threaded programming environments where the flow of control could be interrupted by an interrupt and transferred to an interrupt service routine (ISR). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Thanks for the reply. I was trying to figure out if I missed some specific aspect of internal symfony architectute. I will take it to the symfony devs and try to investigate it further. Cheers
Thanks, most of these `medium.com` articles are more like install &amp; configure guide. This is fine for local development, It's far from production ready solution where you need to worry about availability, maintenance, performance. 
Which is why I've wrote about the possibility of writing Unit Tests, or doing some other minor stuff, which wont take months to get acquainted with. You don't have to make big contributions, but not doing anything is worse than any other thing you can do (apart from not doing anything and bitching about certain features).
You are incurring the overhead of a web server though. I looked at doing this and when you factor in bootstrapping a framework on top of the native overhead its insanity.
Yes. *Their* in-house built projects. But they tend not to give back to existing open-source projects, except when it directly benefits them in an ongoing fashion.
I'm not sure what client side has to do with it? In any case to answer your question: Ine. 1 page impression will be faster with a static site than any CMS. Even if everything is in RAM, NGINX just serving the files will be faster than any PHP code. To move $x bytes, the NGINX server just reads the file system and moves the $x bytes. In order to just serve a static PHP page, nginx first opens a socket to PHP-FPM, PHP-FPM initializes itself, reads the PHP file, interprets it, generates the output (the same $x bytes) which gets copied back to NGINX which serves the content. Quite honestly, I'm not sure why this isn't immediately obvious. Also, for me a HUGE plus with a static site is that you don't need to maintain the CMS. 
To add to this, if and when you deploy, you can set `SYMFONY_ENV=prod` for whatever user will be deploying and when you run `composer install` it can clear the correct environment cache for you as well.
I'm confused, from the comments it sounds like you have a job, so why - out of curiosity, are you asking for money to work on an OS project when you have a job that pays the bills? What would the money be good for in relation to the project?
&gt;I am working on console only application and it bothers me that I have to drag whole http-kernel component just to use 2 files form there (AbstractBundle and the interface). If you are building a Console application you don't need the kernel neither bundles. If you however want to use bundles then yes you need the kernel: a bundle is a bridge between a library &amp; the Symfony core which is the kernel. A bundle is pretty much useless without the kernel.
&gt; I'm not sure what client side has to do with it? If the weak mobile client dies a little because dynamic content is processed on it, that's a worse user experience than render it once on the server and serve it cached and ready to be shown. &gt; In any case to answer your question: That wasn't a question. I explicitly agreed to everything you said in the the first half sentence of my posting. &gt; Also, for me a HUGE plus with a static site is that you don't need to maintain the CMS I don't buy that anymore. Because instead of one instance *everybody* who wants to make changes has to maintain a version of a "CMS" locally now, which can become a PITA fast esp. over an extended period of time. A simple flat-file CMS without admin surface runs virtually forever without maintenance and allows fast content changes.
I want to justify to work more on PHPStan **instead** of my day job at least in part because it would benefit the PHP community a lot.
A bit of compensation for the spent spare time I would say.
Hey, I understood that. Just wanted to point out pitfalls of long-tail effect :)
Hey, thank you for taking the work and time to write about your solution. To use you solution, I' need to see the split repo history though. And since Github-compatible is main priority, I'd need that validation too.
Ty for reply. &gt; If you are building a Console application you don't need the kernel neither bundles First of all this is not a console application that does `ls -la` or something. There is many console applications using different bundles to provide required logic. `Console App Foo` does something else than Console App Bar`, yet they share common bundles. Or not.. but the point is, I can decide at any point in time, which bundles go into Foo and which go in Bar. The apps execute complicated business logic (from another bundles) and analyzes GB of data with lots of custom rules defined by customers and they are triggered by scheduler. So no need for a webserver. It's really important that the application is modular and extendable via some kind of plugin mechanism (which I thought the bundles were suppose to provide). Now everybody here says: if it's console application IT CANNOT BE MODULAR? The heck? Why would a trasnport protocol (http or cli) matter if my app can be modular? 
`die()` is similar to Java's `System.exit()` in that it should be used *very* sparingly if not at all.
Bob Martin discusses this in detail early on in Clean Architecture. Monolithic architecture doesn't strictly imply poor source level decoupling. His example was gems, here it would be composer packages. If we have `domain/frontend`, `domain/cart`, `domain/reporting` packages with public interfaces, wired up in some framework that only plugs them in to each other - do you not agree that this is still a monolith? There are no modules that can be deployed individually, no modules that can run independently, without some amount of additional effort. To me, the framework that bootstraps these is not an architectural detail. It's an implementation detail driven by deployment requirements. It doesn't matter if it's one application or if each were its own deployable unit. The resulting architecture of the business model is the same; changes to the domain modules are not required regardless of how they're wired up.
&gt;Now everybody here says: if it's console application IT CANNOT BE MODULAR? I don't think anyone said this and if they did they would be wrong indeed. &gt;It's really important that the application is modular and extendable via some kind of plugin mechanism (which I thought the bundles were suppose to provide). Indeed bundles are not plugins. A bundle is no different than a regular PHP library, the difference lies in that a bundle has an extension point for the Symfony application, which among other things allows you to: - Expose a configuration (which will be validated at some point) - Register services to the container You can do a few more things with compiler passes for example, but that's pretty rare that you ever need it. So depending of what you are referring to by "plugin", this is unlikely to be what you are looking for. &gt;Console App Foo does something else than Console App Bar, yet they share common bundles. Or not.. but the point is, I can decide at any point in time, which bundles go into Foo and which go in Bar. Ok so I'm still not 100% clear on what kind of setup you have or are looking for. However, what I understand is that you have your Symfony application that should be able to execute random logic from various bundles of other applications? 
+1 to your stuff since I worked on it with you :P I actually ended up switching to Redis instead of ZMQ btw, because I realized that to make things scalable, I needed a more generalized pubsub to alert the other Ratchet instances about state changes.
exactly that!
Hey, thanks for the answer, very informative. &gt; Ok so I'm still not 100% clear on what kind of setup you have or are looking for. "In a nutshell": Our business model requires that we deliver the customer solution as one php binary. The logic is random in a sense that the configuration can be random (customer can select a feature which is represented by the bundle), also we select some infrastructure layer bundles depending on which type of customer is it, etc. Sometimes it means we are compiling binaries on the fly, spawning new nodes and deploying special binary version for customer+node (and some other factors). Each of those binaries can have different util/service bundles (eg, either mysql or sqlite or both in case of converters, and so on) with different business logic bundles, which are basically plugins with `process()` method. I do see now that the bundles won't do and I will have to implement something on my own. 
Agree. That is one of the reason why I avoid PHP frameworks, most of them are not that well designed, heavy bootstrap steps without doing any actual work. My recommendation would be to use a BFF approach, ie multiple api:s. One api could be without bootstrapping the framework. Because you should always decouple your own code from the framework so you can reuse it without the framework. 
As one of the maintainers I'm very interested what wasn't promising when using amphp/parallel.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [phpstan/phpstan/.../**README.md** (master → 8ef8115)](https://github.com/phpstan/phpstan/blob/8ef81152e22e85e4b89f89ef3aa695ecb555714d/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dwvf9gu.)
&gt; phpstan looks like a one man show, you're (as a person) even offering to issue invoices for contributions on PayPal and Patreon. So I guess the Linux kernel is also a one-man show.
&gt; His point is, I believe, the bus factor. You get hit by a bus tomorrow, you don't have another main person to take over the job and be the lead. FOSS doesn't have a bus factor. That's the whole point. You have the source, and you have permission to work on it and publish it. FOSS doesn't mean "everyone works for free in large redundant structures, whose only purpose is to give me free shit forever".
Fork it and be the change you want to see, or maybe shut up and stop putting down this FOSS vendor, who created this project and gave it to your for free with a very permissive license.
The problem with your request is that a lot of us are simpletons who believe FOSS vendors are forever obligated to their users for gracing your with Composer package downloads, and asking for money is a blasphemy, as we all know FOSS vendors feed on the endless energy of the Universe, like Buddha, and have no bills to pay or food to buy. Have you considered offering some add-on services for paying users. Like support, or extra features (via closed-source plugins), or access to internal forums? It's more work, admittedly, but it may be something that more people can grasp mentally and feel justified to pay a few dollars every month, and it ensures a more smooth money-flow, compared to sporadic sponsorships?
&gt; Dijkstra criticized its effects on the ability to reason about a program in a mail from 1987. So. Dijkstra wasn't always correct.
And for me the fact that I have stupid data buss between client and server which has no access to "data model" directly is huge win from architectural point of view.
define features as composer pacakges, bundle up as phar archive?
Yeah it sounds like you'll have to define a kind of plugin structure on top be it based on top of bundles or not. Sounds quite hectic to manage as well^^ Out of curiosity how are you creating a PHP binary? You mean a regular app with a CLI endpoint, packaged into a PHAR or something else?
The process would periodically get pegged at 100%. There were other issues like I don't think Exceptions were getting tracked out of it. Not shitting on it, but at version 0.2.5 and what I found in development phase. I wasn't going to risk putting it into production.
But I like Pusher... They sent my a t-shirt and other swag after I gave them great feedback on a new product they're developing. 
Is there a way to run ‘Laravel-echo-server’ on an independent machine and not within four project root?
You just have to put your code on the other machine.
University of Phoenix summa cum laude candidate.
Hello turd_burglar7, Thank you for your time and effort. Hope you can complete the survey.
You mean the child processes were at 100% CPU after the parent is killed? We fixed that yesterday, seems to have been a macOS issue mostly. Exceptions can't be safely serialized, unfortunately. Currently we just provide the information from the exception to the parent, but not the exception itself. Maybe we can implement additional magic in the future to reconstruct the exception objects, but they'll have another trace then.
[We use Box project to make binaries](https://github.com/box-project/box2). 
I agree... If you've got those you're well on your way... But slotting into a professional environment these days requires you to be familiar with at least PHPUnit, Encryption and Authentication and lately also running on Docker and pushing it into Development, Staging and Live environments... Just knowing how to do back-end coding these days will not guarantee you a job...
I reckon this: http://www.phptherightway.com is a much better resource. It actually teaches the why and the how, rather than just being a big list of stuff.
&gt; Just knowing how to do back-end coding these days will not guarantee you a job... Nothing *guarantees* you a job. But if you try to learn everything at once, you're pretty much guaranteed to learn nothing well.
Thanks for spamming this all over the place
Also, git can actually "forget" https://help.github.com/articles/remove-sensitive-data/ But keep in mind : "Once you have pushed a commit to GitHub, you should consider any data it contains to be compromised" 
 I love it. It’s a good path for keep going forward in a sane way. Definitely not beginners, I am senior and some I didn’t know. Guess what I will do now :)
This is the same idea, but no manual actions are required: https://github.com/mlebkowski/nassau-https-proxy Just launch this proxy at 443, and it will forward all traffic to :80 with a dynamically generated certificate for given domain, signed by a previously generated CA Root you trust. No other integration with your existing web server required.
You are all imagining different scenarios (large site vs small site, cached CMS vs non-cached one, interactive features vs none of them, multiple authors vs one author) and comparing apples to oranges. Static site generators are certainly not for every situation, but they do have some benefits out of the box, like caching. There is nothing stopping anyone from caching the results of a dynamic PHP script in a similar manner, but it requires some effort. There are also ways to add dynamic parts to a static website, but it is considerably more difficult to do so. I’ve done all of that. Static sites, dynamic sites, static with SSI, dynamic but heavily cached on a CDN… I even made a static site with a CMS (a manual „publish” was required by the author, that rebuilt the target site). Use what best suites you.
&gt; No, they aren't, nothing about kernel and bundles in the official docs. That's how it works ¯\\\_(ツ)_/¯ `\Symfony\Component\HttpKernel\Bundle\BundleInterface` is used in the Kernel and also initialized there. &gt; A bundle is similar to a plugin in other software, but even better. Not my comment, not sure who you're quoting here. &gt; The kernel initialises and registers the bundles. The `registerExtension()` method is in the container not kernel, plus the container has already an array that holds all the extensions. The Bundle provides 0 or more extensions which can be registered in the container, as you've linked in the piece of code. The kernel pretty much just grabs it from the bundle and configures it in the container. &gt; The only place where it's used in Kernel, is in prepareContainer() method. That's it. Nothing about this method requires kernel features. Correct, the only thing a bundle does, is provide an extension, so why would you need bundles? You can also manually add that extension. No need to add the bundle dependency to the container component. &gt; All the kernel should do is to pass the bundles to container, and this whole logic should be executed there. All it does is use the bundle to configure the container, you can also do this without bundles. &gt; Now I wouldn't have to drag the whole http-kernel when I want to just use BundleInterface and AbstractBundle. Don't use Bundles if you don't have the http kernel, just use extensions and manually register compiler passes, otherwise simply grab the kernel component and register it. &gt; If the container should not know about bundles, then there should be another component that combines container and bundles, that would be used by http-kernel. The http-kernel component is the glue that provides the start-up for your application by allowing you to use bundles to configure the container. 
Newbie from a non-development POV - both of them contain a lot of technical terms and assume a lot of pre-existing knowledge. The OP's link is the more helpful, since it's likely the "main" boxes make some sort of basic sense and give some idea of where to look next, but overall neither are especially helpful to new starters without previous dev experience. For example, and to help you understand the mindset, if I go to say the [Basic Concept][http://www.phptherightway.com/#basic_concept] link. &gt;Here we have a Database class that requires an adapter to speak to the database. Right from the start a new person is thinking, why do I need something to speak to a database? What if I've always just done a basic database connection string? What exactly is an "adapter" in this sense? &gt;We instantiate the adapter in the constructor and create a hard dependency. You're going to lose a lot of people here and introduced 2/3 new pieces of jargon. &gt;This makes testing difficult and means the Database class is very tightly coupled to the adapter. .... This code can be refactored to use Dependency Injection and therefore loosen the dependency. It attempted to give an explanation of why a hard dependency is a bad thing, but the explanation introduced yet more unknown jargon, and raised more potential questions. Why is a tightly coupled adapter a bad thing? What does that even mean? Also it provides no explanation of how the change in code actually achieved the goal. I could go on, but you get the idea..
Interesting. Thanks for sharing
Hmm. This is the sort of requirement that only shows up in "large company" situations. Do you have a company in mind and what are their requirements? Knowing this is important. Also, what is their budget?
Because you should not edit files under vendor unless you explicitly want to and the IDE makes sure you know what you are doing?
Thanks 😊
But I do know what I'm doing and this affects search as well since vendor isnt included to the project. I'm sure there is a setting for this
I work in a similar environment, I'd say 70% of our codebase is fine but the 30% are horrible. The thing is, that certain classes get used so much that changing them may work on one page but break almost everything else. Also, some of the functions only get called when certain settings are active which makes finding wrong output a lot harder. How do you start here? It's not hard making stuff work that way but removing dependencies often kills so much that I have no idea how to start. Luckily the guy tutoring me is an absolute refactoring wizard and always helps but still...
Search by directory when you want to search vendor too. If you're talking about finding a file by name you can search them pressing CMD+shift (on Mac) twice.
I know this but its still annoying. I just want to know if there is a setting to stop this. It worked fine in older versions. 
&gt; which is a form inspired by Bash, where programmers often add || exit 1 to the end of statements as a quick way to add error-handling (note: if you do this, you probably want to use bash strict mode instead). You probably don’t want to do neither: https://mywiki.wooledge.org/BashFAQ/105 TL;DR; `set -e` is fine for small scripts ran in a controlled environment. For a larger scale you’d want to do manual error handling.
Settings -&gt; Directories -&gt; For current project Remove the excluded flag on the directories you don't want excluded. However, like said earlier, it is not recommended.
That might work. I wonder if there is a way to do this by default
You really don't want this by default.
Besides editing files in your vendor map is usually not the way to go (use symlinks or composer's local repo settings for local package development and testing) - there are a few things you can do regarding folder configuration in PHPStorm: - include or exclude folders: settings &gt; directories - add your vendor folder as an include path: settings &gt; languages &amp; frameworks &gt; php, where you can add the path to your vendor folder I prefer to keep the vendor folder excluded, but added as an include path. This has the added benefit that "navigate file" by default won't search the vendor folder (which is faster), but if you press the keybinding again when the navigation pane is open, it will include the vendor folder. It will check the "include non-project files". The reason your vendor folder is excluded by default has probably to do with the composer auto setup when you open a new project. PHPStorm will detect a composer.json file and will ask you to automatically configure the directories for you; hence excluding the vendor folder. I wrote about project setup and other PHPStorm stuff a while ago: https://www.stitcher.io/blog/phpstorm-performance PS: /u/saltub: no need for the PHPStorm notice, we know it's written PhpStorm, but prefer to write it otherwise.
I didn't get that at all. The `public` folder is clearly there in the example, and not one mention that this `public` folder is designed to be the document root, and should be the document root, and steps should be taken to make it the document root. It's the public document root, godamnit!
That's labelled "Basic Concept" but it's the Basic Concept for the concept of Dependency Injection, which is a difficult topic. In my experience, it's something your average programmer couldn't give a good description of. If you'd read everything in the tutorial to that point, that description would make sense. Yes, it's full of technical terms, but technical terms exist for a reason. They make it possible to describe constructs and methodologies used while programming accurately. I'm not sure it'd be possible to describe dependency injection without using some domain specific jargon, and even if you could, you'd end up with a really long-winded answer that wouldn't really help your understanding. That tutorial is very much aimed at people who want to learn about programming in PHP. Part of that is learning the domain-specific jargon used by programmers. 
Because any changes you do to non-project directories should be assumed to be overridden. If you change anything inside the vendor directory, your next `composer update` will literally write over your changes. Which also means that if you don't make changes to these directories, you have no need to work with them on such a regular basis that you wanna clutter up your search with subjectively irrelevant files.
Perfect, thank you for this!