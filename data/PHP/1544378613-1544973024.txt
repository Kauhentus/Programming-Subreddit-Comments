Thanks, I'll keep it in mind.
Do bear in mind, WP was designed as a blog engine and its popularity as a general purpose cms is more or less an accident. 
Have you heard of [`league/uri`](https://github.com/thephpleague/uri)?
Your code sucks and I should probably go do something else.
I have, yes. Quite a good package i might add. But major overkill for my needs.
"The loop" makes plenty of sense - it's just a `foreach` through the posts for a particular view. Just consider it "the post template" and you're good.
Because probably 80% of users are on shared hosting plans provisioned years ago. I see folks with *new* shared hosting and PHP 5.2, FFS.
Lol, and here my hosting provider has just shut down 5.6 and 7.0, after mailing all their customers urging them to update their website if necessary.
`parse_url` and pecl's `http_build_url` do a lot if not all of this, though not in OO
You should send them a "thanks for being awesome" note. Heh.
Good work, may use that :-)
What I made is basically that with oop features. It uses parse_url to get the components. Quite frankly one can do fine with just parse_url, this just offers you abstractization.
Thank you. If you do decide to use it please post issues for any bugs you find. Even for new features if you feel like you need them. Or just extend the classes and roll your own implementation. That works too.
What are you saying? You don't make any sense. They announced the exact opposite, they will be dropping support for older versions, so they will be able to refactor, finally. 
Gutenberg is the only thing you can point to in WP that is semi-modern in terms of practice and application. And still its a heaping pile of turds. I'd be wary if trying to stand up an argument based solely on Gutenberg.
If anyone's gonna write terrible procedural code in PHP7 it'll be WP. Dropping support for older versions is not the same as refactoring to OOP (or other) paradigm.
Sure, but up until now they hadn't a lot of features that has stopped them from using OOP and so on. Now, in a single step, they will have namespaces, Composer, closures, variadics, scalar, void, nullable and return types, and so much more... They will have no more excuses, and we'll see. 
Looks good, I would use it, I have a function that uses PHP built-in functions and returns all of the components and you can feed that back into the mirror of the split and rebuild a full URL. Bit of extra work but not used often, I just leave it in my gist on GitHub for when I need it. I could see using this more often though.
Thank you, I appreciated it. If you wanna add your own functions [knock yourself out, it's actually pretty straight forward](https://github.com/KepplerPl/url/blob/master/ROLLYOUROWN.md).
I wouldn't swear to it, but it looked like there were going to be some incompatibilities between 5.x and 7.x...
Gotta be honest, whoever built that package put almost no thought into building a user-friendly API. A lot of it is incredibly obtuse, and splitting the code (and therefore docs) across 5 sub-packages just makes matters worse.
&gt; ...looking for people to tell me *why* my code sucks and *how I can improve*. FTFY Believe me, this never changes, no matter how long you are at it. I'm telling *myself* how much my code sucks when I need to go back and fix things.
Ah, but no. It's not just a *foreach*. It's a while loop that counts down and internally loads the current post into state so you can then call `get_post()` or `the_header()` in the while loop or something to that effect. Basically the worst possible way to iterate over something. while(has_posts()) { echo the_post(); echo the_header(); } vs foreach($post as get_posts()`) { echo $post-&gt;header; echo $post-&gt;contents; } (above is pseudo code, I don't remember the exact APIs). That while loop loading state into memory so that it can be referred to with global function is absolutely fucking *TRASH* programming. TRASH. Sheer garbage. If I saw that in a pull request, it would be rejected immediately. Yet, that is idiomatic WordPress. WordPress is such Fisher-Price programming, that they have to dumb down the concept of a simple loop by calling it "the loop", and doing gnarly shit so they can spare the developer from using object member access... Holy shit.
I can't even argue with that...
This is actually really great, I love it. Have you given any thought to making the Bags iterable? It would be nice to be able to `foreach($parser-&gt;query() as $key =&gt; $val)` in some cases.
You can do foreach ($parser-&gt;query-&gt;all()... At least for the parser. The builder bags don't have an all method...just yet. But I think I'll add one. I'm really not a fan of magic methods at all and tend to avoid them if possible.
Did you get the foreach loop's arguments twisted sir? Isn't it `foreach($collection as $value)`? Doesn't change your point but.. Y'know, helping a fellow dev.
Are you worried the parts you don't use will fall on you and break your toe? What exactly makes a robust, tested package so overkill that you trade "overkill" for rolling your own? I know I'm being a bit of a smart ass, and I think what you've built is an interesting coding exercise, but utility code that works is tough to compete with and I'm not sure developers benefit from it.
Wow, props to them, I thought it would never happen.
Oh perfect, that works! Yeah, I would definitely like to see a full method reference at the least.
Sorry, been working in TypeScript land too long :(
I'm probably way off base but couldn't you add custom css to the theme to display: none for the div? Or visibility: none? Will delete this shortly as i don't know what I'm talking about but noticed you hadn't any replies yet &amp; thought it wouldn't hurt to suggest....
I ended up writing a small plugin (https://wordpress.org/plugins/password-hash/) that changes the hashing algo to whatever PHP natively provides (bcrypt).
I think technically ftp, sftp and maybe some others like tcp are valid protocols not included.
WP does work on 7.3. The only thing this deprecation allows is for the core to start moving towards more modern code. PHP version bump will not fix the spaghetti, but just getting most of the CMS sites of the world to a safe and secure PHP version is a big win in my books.
Either in a separate plugin (e.g. `wp-content/plugins/my-plugin/my-plugin.php`) or inside your theme's `functions.php` file (wrote this off the top of my head right now so it might require small changes to work properly): ```php // Add a filter to the content of each post that is to be displayed in a feed. add_filter('the_content_feed', function ($content) { // Take the content, and replace anything that is wrapped in a specific div with empty string. $content = preg_replace('%&lt;div[^&gt;]* class=['"]my-specific-class['"][^&gt;]*&gt;.*?&lt;/div&gt;%imu', '', $content); return $content; }); ``` Not sure how the WP feed system internally works, so if you have feed excerpts enabled the code might require modifications as well.
The best one I’ve used has been: [http://apidocjs.com](http://apidocjs.com) - Up to date. - Supports PHP and other languages. - Simple to use, but has a lot of features. 
For comparison/inspiration, you may be interested in checking out [https://github.com/thephpleague/uri](https://github.com/thephpleague/uri)
I have a realitvely large php system (an ERP system) that I have written in PHP5.6 as an internal software for my the company that I actually own and run. It is running in Google Cloud and I was told they would support 5.6 for at least another year. Anyway I want to move to an applicable version of PHP7 as soon as I can. I just don't know where to begin and how I could do this step-by-step and without introducing bugs. 
I'm a terrible coder and I am working in web development. Everyday, I tell myself, when I get fired, I should do something else.
https://bugs.php.net/bug.php?id=76903
Read up on backwards compatibility from php 5 to 7, fix what you can and then start testing. Depending on how up to date the code already is, it might not be that bad. The longer you wait the harder it will become. No way around it.
How is anyone expected to determine the turnaround on a feature like this, for an unknown number of unknown sites, without domain knowledge?
You write in the docs that the parser is immutable, however the `parseUrl` function will happily overwrite the existing values of the instance, so it's not immutble. Maybe the function should check if this instance has already been initialized with a URL, and throw an exception when trying to overwrite an existing value.
It's not really Overkill if you only install https://packagist.org/packages/league/uri-parser
Can't wait for CakePHP 4!
I see your parser doesn't return a fresh object after parsing a URL, but populates itself (based on what I see in the documentation). This is a violation of separation of concerns, which you can very easily solve by letting it populate a URL model object, which in turn can be accepted by the factory method of your builder.
Imagine if everybody would do this on this reddit :)
Imagine if everybody starts being an asshole on this sub :)
As mentionned before, the native PHP SoapClient class is a good starting point, that's the basics. But if you want to easily construct the request and handle the response while using only an OOP approach, I would really recommend you to use a WSDL to PHP generator. It'll create for you all the classes to represent both the request parameters objects and the response objects. In addition, you'll have classes that'll wrap the SOAP operations as methods. You can try the PackageGenerator project by yourself from [https://github.com/WsdlToPhp/PackageGenerator](https://github.com/WsdlToPhp/PackageGenerator) or use it from the online platform at [https://providr.io/](https://providr.io/). Good luck,
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
You will have less trouble with 0% PHP in your CSS and JS code. Here is how I like to do it with HTML5 data attributes: PHP page: `&lt;body data-my-param="&lt;?= $myParam ?&gt;"&gt;...&lt;/body&gt;` JS file: `var myParam = document.body.dataset.myParam;` &amp;#x200B;
CakePHP 4 will be a Cleanup only release. So it is basiclly (feature wise) already here. &amp;#x200B; soruce:[https://github.com/cakephp/cakephp/wiki/4.0-Roadmap](https://github.com/cakephp/cakephp/wiki/4.0-Roadmap) &amp;#x200B;
I've had massive issues with ext/soap so far. Can recommend https://github.com/goetas-webservices/, which is mostly userland code, and explicitly avoids ext/soap usage, plus generates a good tree of value and service types for you to reuse.
This is a really bad idea. Not only it gets messy, it sort of DDOSes your server if you send the proper Expires headers or it caches the output anyway and your variable will mean shit. 
I mean he can politely ask for money on Patreon or bundle it as a service and you can write your own deployer, see if it is cheaper. 
OOP thought: \`class Parser extends AbstractUrl\` Your Parser IS an AbstractUrl? I thought it would "create"/"parse" into an Url.
You can run exakat on your code : it has an exhaustive list of incompatibilities for all middle version from PHP 5.5, to 7.4. Here is an example compatibility report : [https://www.exakat.io/reports/symfony/datas/compatibility\_version.html](https://www.exakat.io/reports/symfony/datas/compatibility_version.html) Then, it will drive you in the code to the place that needs to be checked. &amp;#x200B; Exakat also makes suggestions to update your code with the new features : once you're done with incompatibilities, migration is all about modernizing your codebase with new features. [https://www.exakat.io/reports/symfony/datas/suggestions.html](https://www.exakat.io/reports/symfony/datas/suggestions.html) &amp;#x200B; \[Disclaimer\] : I contribute to this tool. 
I also don't like the idea of using docblocks and reflection at runtime. Too much magic and performance spent on resolving these things I tried a different approach: Generating optimized DTOS ( [https://github.com/dereuromark/cakephp-dto](https://github.com/dereuromark/cakephp-dto) ) I am thinking about making it more generic and use the current framework plugin as wrapper for it then. Anyone interested in looking into this a bit more?
I am not a big fan of using docblocks and reflection at runtime for this. This is not too performant and also limits you quite a bit. I tried a different approach: Generating optimized DTOS ( [https://github.com/dereuromark/cakephp-dto](https://github.com/dereuromark/cakephp-dto) ) I am thinking about making it more generic and use the current framework plugin as wrapper for it then. What do you think? Anyone interested in looking into this a bit more?
I respect the guy and I respect his software. I just don't respect this type of shit. I mean I donate a shit ton. And now people are allowed to advertise in the hopes of changing when and where I give? You want to see my list of payments towards FOSS software projects? I only donate to projects that are doing it for the community, and not for the money. (Well, I hope they are.) This sub is for the discussion of PHP and PHP stuff. Not to ask money. For me, I personally ask donations of the people that are actively using my software and are looking at the project page. I don't post about it on a subreddit. And if I would it would be with a VERY good reason, a reason I can't even come up with right now. &amp;#x200B; So I ask; should we all be allowed to ask for money on a subreddit that is about the discussion of a language and the stuff around it? He isn't asking for money on patreon or trying to bundly proprietary services. He's asking for money right here. I mean most of the people that frequent this sub have opensource projects with donate links. Who decides who's better than who? Who decides who gets more money? The people that have successful projects and have too much respect of the community to be attacked? What if your stereotypical wordpress developer asks for money? The guy made a nice theme and he's polite about it. I can't write my own theme so maybe I have nothing to say towards such people? I'm quite sure such people would be cussed at, because they didn't make a great tool such as deployer. &amp;#x200B; &amp;#x200B;
I respect the guy and I respect his software. I just don't respect this type of shit. I mean I donate a shit ton. And now people are allowed to advertise in the hopes of changing when and where I give? You want to see my list of payments towards FOSS software projects? I only donate to projects that are doing it for the community, and not for the money. (Well, I hope they are.) This sub is for the discussion of PHP and PHP stuff. Not to ask money. For me, I personally ask donations of the people that are actively using my software and are looking at the project page. I don't post about it on a subreddit. And if I would it would be with a VERY good reason, a reason I can't even come up with right now. &amp;#x200B; So I ask; should we all be allowed to ask for money on a subreddit that is about the discussion of a language and the stuff around it? He isn't asking for money on patreon or trying to bundly proprietary services. He's asking for money right here. I mean most of the people that frequent this sub have opensource projects with donate links. Who decides who's better than who? Who decides who gets more money? The people that have successful projects and have too much respect of the community to be attacked? What if your stereotypical wordpress developer asks for money? The guy made a nice theme and he's polite about it. I can't write my own theme so maybe I have nothing to say towards such people? I'm quite sure such people would be cussed at, because they didn't make a great tool such as deployer. &amp;#x200B; &amp;#x200B; &amp;#x200B;
Oh, possible [Impostor](https://en.wikipedia.org/wiki/Impostor_syndrome) detected? :P Don't be too hard on your self. Every famous framework/tool had to do several years of codings and new versions before becoming "acceptable" (except Symfony 4, which is close to perfect). Just have a solid basic that tries to use the correct best-practices/design patterns that fit the best for the code you doing, spread your code as much as possible and update your code if necessary. Read the issues and only take those that are important and not too much blocking. In a perfect world you shouldn't be the only one doing the issues. In a perfect world someone would add an issue and a PR from their fork, which will fix/optimize the issue. But never forget: Everything starts from a basic and has to be optimized. There is no such thing as "perfect". There will always be points to optimize, just take that you don't include high security issues, otherwise you will really get bashed ;)
**Impostor syndrome** Impostor syndrome (also known as impostor phenomenon, impostorism, fraud syndrome or the impostor experience) is a psychological pattern in which an individual doubts their accomplishments and has a persistent internalized fear of being exposed as a "fraud". Despite external evidence of their competence, those experiencing this phenomenon remain convinced that they are frauds, and do not deserve all they have achieved. Individuals with impostorism incorrectly attribute their success to luck, or as a result of deceiving others into thinking they are more intelligent than they perceive themselves to be. While early research focused on the prevalence among high-achieving women, impostor syndrome has been recognized to affect both men and women equally. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
&gt; [he can] bundle it as a proprietary service and you can write your own deployer At that point deployer could be forked. Because deployer is MIT licensed there's little the original author could do to stop it from being forked..
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
1. Why do you want to do that? 2. Can you do that without doing it that way? 3. Are you sure you understand the basic of separation of concerns? The optical scenario should be: - html: Your website structure, no styling at all! - css: Styling only - php: Your business logic So what is your exact "reason/problem" that made you think this idea would be the best solution?
&gt; In PHP what is it someone does that needs anywhere close to 100% of the CPU time? well, there was this 1 time i had to run a dictionary attack against a custom-made fuzzy-hash (err, shitty* hash), but since the hash wasn't computationally intensive at all (the dude who designed the hash had no idea what he was doing), and the dictionary was ~15GB/965091264 words, and i could implement the hash much faster in PHP than say multi-threaded C, this PHP script used 100% cpu for a couple of hours (before actually coming up with the answer) &lt;?php declare(strict_types = 1); ini_set ( "memory_limit", "-1" ); global $fp; $fp = fopen ( "realuniq.lst", "rb" ); $count = 0; $tmp = ''; define ( "USERNAME", '&lt;censored&gt;', false ); define ( "SALT", "&lt;censored&gt;", false ); define ( "HHASH", '&lt;censored&gt;', false ); $i = 0; while ( true ) { foreach ( getpasses () as $pass ) { // echo 'trying : ',$pass,PHP_EOL; if (sha1 ( sha1 ( USERNAME . strtr ( $pass, array ( "\x00" =&gt; "\\\x00", "\n" =&gt; "\\\n", "\r" =&gt; "\\\r", "\\" =&gt; "\\\\", "'" =&gt; "\\'", '"' =&gt; "\\\"", "\x1a" =&gt; "\\\x1a" ) ) . SALT ) ) === HHASH) { echo 'found the password!', PHP_EOL; var_dump ( $pass ); die (); } if ((++ $i % 100000) === 0) { echo $i, PHP_EOL; } } } function getpasses(): array { // read 1 GB worth of passes global $fp; static $ended = false; if ($ended || feof ( $fp )) { die ( 'TRIED ALL PASSWORDS! FAILED! :(' ); } global $fp; $read = fread ( $fp, 1 * 1024 * 1024 * 1024 ); if (feof ( $fp )) { $ended = true; goto endd; } while ( substr ( $read, - 1 ) !== "\x0A" ) { echo '!'; $read .= fread ( $fp, 1 ); if (feof ( $fp )) { $ended = true; goto endd; } } $read = substr ( $read, 0, - 1 ); endd: return explode ( "\x0A", $read ); }
Really?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I think you may have missed the points I was trying to highlight * Wordpress decided to use a 'function'-based design in PHP4 days, before namespaces or auto-loading were a thing. * With namespaces/autoloading: functions would not be nearly as difficult, in PHP, to use. * If PHP had added a method to resolve functions, like was done for classes, it'd also be easier to use. * Despite adding `::class`, it still ends up being string. OTOH, when passing around a symbol in other languages: its not a string. Closures weren't a thing. Interfaces weren't a thing. Autoloading wasn't a thing. Was passing a static function name the worse choice? Not at all. Would not using a string be nicer? Yes, but PHP doesn't really give you that choice. Why don't they encourage the closures? Probably because they supported PHP 5.2 which didn't have them. Is it really crazy to offer &gt;10 years of easy updates for your product? I don't think so. --- I didn't expect a full-blown rant on static functions vs closures vs OOP w/ Interfaces. I don't even know where to begin. I'm _probably_ wrong, but your message comes across a bit like this: * No API should use static/"global" functions. * Wordpress/Everything should be OOP because that's the better architecture moving forward. OOP is fine, but its not the end-all-be-all: you can gain its benefits in other ways (type checking, polymorphism, encapsulation, code-reuse) without the disadvantages (concurrency issues, fragile, slow, limiting). Don't think so? That's fine, but I'd still encourage why Golang and/or Rust decided against OOP-- and perhaps play with some other things like Typescript, with its ridiculously flexible typing system or data-oriented-design to why OOP isn't that great for concurrency/speed. --- Anyway, back to the topic of Wordpress. Wordpress picked a design and has continued to support that design, the platforms they've been on, and the community around that platform. Yes the code is old, yes it can be better, yes they can even support some newer stuff: but their official support has been PHP 5.2+, not PHP 5.3+. Should they do a OOP rewrite? Honestly, it'd probably just complicate things too much (with or without/compatibility), take a lot of time to implement without too many gains, and potentially render years of industry-experience irrelevant. Its a much better idea for them to continue building on the community, tooling, and workforce they have than rewriting. Good choice for them, but still annoying to work with. Should they have dropped PHP 5.2 support sooner? IMHO, which is probably a rare one here: No. RHEL6 _still_ provides support for PHP 5.3. PHP 5.2 support was in RHEL5 which is now EOL. Should Wordpress stop supporting RHEL6 users? No. Its better for Wordpress to be the vendor for those uesrs than Redhat. Dropping support isn't going to make them upgrade, and that leads to a fractured community-- but also encourages a fear of upgrading: there's enough fear of upgrading without BC changes. Reducing that upgrade friction is a good thing. Wordpress isn't a great example of good upgrading, but in general: fearless upgrades should be more normal than they are. Keeping everyone united around the most-up-do-date version is very valuable and probably better than a never-ever-trend of changing interfaces, classes, architectures, and feature-sets. Rewrites are rarely the answer. BC changes are far too common. Lets hope this sort of mentality never makes it to core libraries or processor design.
I am a big fan of musician Bebo Valdez. I'd say: switch to another CMS in his honour.
I highly recommend PHPStorm (IDE), it does the heavy-lifting of composer.
Red Hat still maintains PHP5.3 with security patches, that's probably why
i would argue that the simplest workaround to get pre-7 behavior is to add next($arr); as the first statement inside the foreach()
ps, Zend Technologies offers security maintenance for PHP5.6 until end of 2020, but it'll cost ya: http://www.zend.com/en/support-center/support/php-long-term-support
We're probably talking about different issues. next() is not going to help you to make modifications to the array visible during iteration. Also, in the interest of future compatibility, I would recommend against using any functions that touch the internal array pointer. Rewrite your code to not need it (usually possible and cleaner) or use ArrayIterator in the unlikely case that it should be truly necessary.
My bad, that function should be private.
That's a much better option, yes. I'll take it to heart. Thanks.
What a weird way of numbering releases lol
You misunderstood me. He can pretty much freeze the open source project, leaving it to the community, fork it and make it as a service with some killer features. And IF the community gets around and actually improve it, he can just upstream the changes into his service. Of course you can do the same right now given the open nature of the project. Personally I'm unsure how feasible this idea is in term of revenue generation, but hey, some people pay for PHPStorm, so I'll concede it is in the realm of possibilites. 
&gt; Wordpress decided to use a 'function'-based design in PHP4 days, before namespaces or auto-loading were a thing. Yes. Is that supposed to be an excuse for what it **still** is in 2018? Where would Symfony be if they stuck to their v1 choices?
Seems like regular semver to me, they'll be making a ton of BC breaks by removing deprecated functionality, so it would warrant a new major version.
&gt; accidentally it works We both know its no accident. Wordpress development is stuck in 2005, thats why it's got such a shite codebase and supports long discontinued and very insecure php versions.
The only way they break your code is if you blindly update, and have ignored all the deprecation warnings that would've been thrown in the previous release. It's not really PHP's fault if you don't apply common sense.
Thanks.
I want to pass the template directory URI from wordpress to css and js, but maybe I can change the structure of the assets folder so that I can use relative URIs.
I see, thanks for pointing that out.
You could try something with inline CSS. You know, the old school ```&lt;style type="text/css"&gt;&lt;/style&gt;``` and line up your styles there dynamically based on whatever variables you wish. This way is infinitely better than having PHP files output bunch of CSS.
&gt;Who decides who's better than who? The donator :-)
Thanks.
 &gt; Is that supposed to be an excuse for what it still is in 2018? I anticipated this question and _answered_ it in my prior post. &gt; Yes the code is old, yes it can be better, yes they can even support some newer stuff: but their official support has been PHP 5.2+, not PHP 5.3+. &gt; &gt; . . . &gt; &gt; RHEL6 still provides support for PHP 5.3. PHP 5.2 support was in RHEL5 which is now EOL. Should Wordpress stop supporting RHEL6 users? No. Its better for Wordpress to be the vendor for those users than Redhat. -- &gt; Where would Symfony be if they stuck to their v1 choices? Wordpress's choice to stick with mostly functions is their own choice: a modern architecture need not be OOP. Symfony could have better supported their v1 users, while pushing v2, and without being "stuck." Backward compatibility does not require being stuck. &gt; I got that, but you missed the the entire point of my closure examples. Namespaces and autoloading, as I clearly said isn't the biggest problem of functions in PHP. I slightly regret not getting into that more. These are all turing complete languages. "You can not do X" with functions is fundementally, incorrect. I could've posted a trival counter-example, like below-- you'll probably say it can't be used in all cases, but sometimes its better for these functions to _not_ have state, and that the need for these things to be dynamic in the way you're using them them here is rare: function my_print_hook($t) { echo $t; } function my_print_hook_hi() { my_print_hook("t"); } function my_print_hook_world() { my_print_hook("world"); } $foo-&gt;registerSomeHook("my_print_hook_hi"); $foo-&gt;registerSomeHook("my_print_hook_world"); Oh no! Those 6 lines of code are going to hurt productivity. If only there was some macro-like system to reduce the boilerplate-- oh wait: there is, it just isn't in PHP. These aren't unsolvable problems. These aren't things that only have one solution. You don't need closures or classes to solve these issues, but that's what PHP decided to add-- so that's what we're stuck with. Mots languages, even C, handle this better because when passing around symbols: it doesn't _have_ to care if its a function, a method, a closure, or whatever. PHP's definition of `callable`, otoh, has evolved. It can be a string, an array, or an object that has a special method name. That sort of thing has not gotten nearly the same level of development, care, and focus as classes and OOP in-general, which goes back to &gt; Point being? The initial point being: functions/callables haven't gotten as much attention as the OOP stuff. There is no equivalant to `::class`, and PHP makes it painful to work with functions (and methods): // this is how you're supposed to refer to a method array_map(array($this, 'mapValue'), $array); // vs it being just a thing: array_map($this-&gt;mapValue, $array); Why is the first a thing? You're talking like we've moved away from the age of referring to these things as strings, but the fact is: modern PHP nearly forces us to do so, or to add the overhead of a closure. PHP's definition, for a while: a callable was a string, then an array, and now an object too. The fact that Wordpress had to care at all is, imho, a fault of the language focus and design. They added _callable_ in 5.4, but there wasn't a type hint/argument for this, there wasn't a standard way for them to agnostically accept a callable. &gt; You shouldn't be using "::class" much in the first place, but it's better than directly writing a string, because the refactoring functions don't see it. Meh. Developers still seem to like to copy these things to documentation, databases, text files, configuration files, and more. Refactoring is slightly better with IDEs, but they still pretty much do a lengthy project-wide scan and doesn't really help downstream users much. A few small style guides can help the IDE with this significantly: not just in code, but in documentation and configuration. &gt; Look, go back and read my reply, it's clear you didn't. Some snippets from your reply: Paragraph 1: "you should rather accept an interface via a type hint and that's it." Paragraph 2: " You rename the function, all string references break." Paragraph 3: "namespaces . . . are common with classes and not common with functions " Paragraph 4a: Since your entire premise is wrong (that we pass class names around by ::class all the time) Paragraph 4b: WordPress supports the [closures], but never encourages it Paragraph 4c: Closures are the right solution for hooks. Paragraph 4d: WordPress has a long way to go until you can call it proper OOP. Paragraph 5: the biggest problem with functions isn't namespaces or even autoloading Paragraph 6: "I generated two callback handlers from it . . . You can't do this with PHP's "global" functions and string references." Paragraph 7: And when you can't do it, you write tons of similar code over and over like a monkey and not even notice it. My OOP section covered 1, 2, 3, 4c, 4d, 5, 6, and 7-- though I could've covered 2, 5, 7 better-- but I've done so above. My updating section covered part 4b, 4d-- but being a lot of this is talking about Wordpress: I wanted to go into covering why Wordpress's choices here aren't exactly wrong. Closures may seem like the right choice _now_, but should they really advocate for incompatibility with prat of their platform? Not really. Which part of this suggests that you should make the accusation that I didn't read your reply? &gt; You're just repeating the same things that I already addressed and responded to in detail. Uhm? No. You didn't address them. You're still looking at it in a limited modern-PHP way, not in a way where these things could've evolved in many different directions. Macros? Extensions? Copy-by-value objects? Ad-hoc dynamic typing? Prototype based inheritance? Part of your complaint is that thye shouldn't use functions, but their choice on that was made _years_ ago. Their choice this year reflects that choice. Closures _are_ better, but-- not really necessary and may not make the most sense in fracturing their community. Making it an interfaces, as you briefly discussed: follows up on that. So... here we are again: * OOP isn't the end-all-be-all. * PHP hasn't given as much attention to functions or non-OOP programming-- even some basic functional stuff could be useful. * Wordpress has made acceptable choices given their history, support, and community. 
You got a few options but they all boil down to a database with table(s). Primarily, books table. Each book could have an Id, title, author, date, price, and any other info you want. You could use mysql (server hosted database, probably easiest to manage and manipulate) or flat file systems (access, spreadsheet, cvs, custom). Lookup info on php and database basics.
 What’s the downside to leaving it in for people that specifically want it? Not that I’m one, I just don’t get what the rush is when the work is already done. 
&gt; Read up on backwards compatibility from php 5 to 7, fix what you can and then start testing. Depending on how up to date the code already is, it might not be that bad. We had a very large codebase written in PHP4 style (no composer, just a patchwork of include()/require() and was running on PHP 5.2. Getting it working on PHP7 took a lot less work than I expected.
The developers are trying to prevent another round of lingering, out of date php versions being offered. By removing it, you force developers to move to a supported version and get more people on security supported versions 
Gutsy move IMO for devs such as myself upgrading PHP 7.0 projects for clients.
If you provide a package, you need to provide security support for it. If there is no upstream security support anymore, then it becomes the responsibility of the packager to directly deal with security issues, for example by backporting upstream fixes for newer versions. This is what Linux distributions commonly do, and how RedHat basically makes their money. If Homebrew does not perform security maintenance themselves, then **of course** they must remove packages as soon as security support ends.
Maybe I’m just negative but that doesn’t seem to be their place. Say I wrote a project using php7. Client refuses to upgrade but needs new features written and I need to reinstall 7.0, but can’t. I don’t get it. Homebrew isn’t supporting these applications are they? They’re just repackaging? Old versions of php are going to be here, not least til WP drops support. Homebrew isn’t going to make a difference except maybe by pushing people to vagrant, docker, or standalone virtualbox installs 
re: "any other info you want", perhaps refer to the [CreativeWork Schema.org sub-types](https://schema.org/CreativeWork) ? I should probably be having a project like this myself :D
Might as well go to 7.1 and get security support for a year 
I guess I thought homebrew was just a tool that provided compiled versions of apps commonly found in Linux distributions. It never dawned on my that I should reach out to homebrew to support php let alone Firefox. 
I hadn't used Cake since at least 2.x. Cake still in the old mantra: code around our specs and everything 'just works'? Composite key support? UUID keys?
Honest to god, how many times to do you need to reinstall 7.0? Also, if you go to a client and say “hey we need to update the version of php since the current one doesn’t have security support”, it’ll be a no brainer. In fact you could just do it and then tell them. If you have a good test suite, test against current versions and you’ll see what the upgrade path will look like. As for WP, it’s extremely irresponsible for them to do what they are doing and anyone who cheers them on only makes the problem worse 
I suspect the concern isn't people who specifically want it, but people following outdated tutorials line-by-line without any thought as to what they're installing.
Unfortunately, the client was left behind with deprecated 7.0 -&gt; 7.1 features.
&gt; If you provide a package, you need to provide security support for it. Is Homebrew providing PHP though? They just provide script to install PHP, the PHP binary itself is still provided by PHP: https://github.com/Homebrew/homebrew-core/pull/34739/files#diff-6b4da622a64ae55ec3e0d836cd02e626L4
uuid keys are natively supported if field is char(36) or binary equivalent composite key also ...
&gt; If you provide a package, you need to provide security support for it. Says who?
You can still install it through PECL. Thats what my group is doing to get the 7.2
Just FYI this is part of Homebrew versions "[Acceptable versioned formulae](https://docs.brew.sh/Versions)". &amp;#x200B; If you need PHP 7.0 then make your own tap and you can continue maintain it youself as you see fit. &amp;#x200B; &amp;#x200B;
The "heavy lifting" consists of \`composer require &lt;packagename&gt;\` and \`composer install\`, mostly. While I use and appreciate PHPStorm every day, the things it does for Composer aren't the main selling point. ;) It does, however, also work the other way around: if your \`composer.json\` specifies PHP 7.1 as the required version, PHPStorm can pick up on that and make sure you don't use PHP 7.2-only functionality.
On my second to last day today, last day is friday and then I have a vacation until I start my new job in January. Yes I'm bragging. Yes I'm happy. 
I know this is php sub and SQL database will be the go to answer. But you can checkout airtable for a lighter solution.
if developers had any say in it there would be no more php5.
&gt; Client refuses to upgrade but needs new features I would say that sounds like client *wants* new features, and will need to upgrade to get them. Also, who the hell is installing production PHP7 from Homebrew?
`apt-get` is so 2015, the kids these days use `apt`
Ah, I'll be perfectly honest, I based my previous comment solely on the "clean-up release" and assumed it only meant optimisations, removing dead code and stuff. I should stop commenting super late and just read the damn link lol. My bad.
Absolutely. Cool link btw. To expand a little, a brief explanation of a database table would be... I have a database called mystuff. Inside mystuff I have a table called "books" where I store info on every book I own. Each object inside "books" has a lot of columns of info (Id, title, subject, author...). So, using php, I can query the books table to only select books who's author field matches "George Orwell" and I want them returned to me in order alphabetically by "book_title" column. So you can write scripts to select and order any rows you want. Inside "mystuff" database you could also have another table called collectibles, magazines, etc etc. 
Not to be annoying but have you tried /r/phphelp ? Also I think you need to initialize the session on every page you're going to access it. I might be mistaken it's been ages since I last had to do anything with it.
`while($mother-&gt;isABitch()){` `$holiday-&gt;location = "Wife's family";` `}`
Nope i didnt and i will try right now. Looking rn in the initialize thing. Thanks !
Responsible developers
Sleep. Lots of sleep. As much as the kids will permit me to get. So... maybe the kind of sleep that most other adults normally get. (So much sleep.) Smash Brothers is out and I'll have it before the month is done, so some good times with Smash. Pathfinder: Kingmaker has also sucked me in. Beyond that, tinkering with code that I don't normally get to in the day job. Been reading up on machine learning stuff for years now and have done a couple of personal libraries to put the theory into practice. I think this winter break is the time to finally get my hands dirty with Python, Pandas, SkiKit, etc.. Oh, did I mention sleep?
I'll be upgrading our servers to Ubuntu 18.04 (PHP 7.2) from Ubuntu 16.04 PHP (7.0). Built out an image a couple weeks ago on AWS. We'll be vetting the new image in our integration and staging environments this week. Then deploy new instances to replace what we have in prod. Working at a start-up as the only back-end engineer, I also wear the hat of DevOps but rarely have the time to prioritize such upgrades. The winter holiday is the perfect time to do that from the comfort of my home office with the added bonus of wearing sweat pants and slippers.
removing it from brew doesn't mean you can't install it anymore. 
No attempt counter and limit. Good luck with that.
I like this a lot. 
Road trip to Florida.
I'm out of the loop. What is WP doing now?
Not to be a jerk, but please read r/php rule #4.
Supporting PHP all the way down to version 5.2, explicitly.
Oh right. I thought it was something new they were doing.
Be careful, you appear to have created an infinite loop!
I don’t think this is “official” in that it doesn’t appear to be maintained by Symfony core. This just seems like a contrib library ?
Um..... yeah, about that. ^^^^^^^^^^I'm ^^^^^^^^^^joking ^^^^^^^^^^please ^^^^^^^^^^don't ^^^^^^^^^^kill ^^^^^^^^^^me
It's up for the mother class to break the loop. It repeats yearly, while she's a bitch it sets the holiday destination and is only infinite if the object never changes (which in all likelihood it won't until the variable is unset and carried away by garbage collection) 
Playing Dungeons and Dragons, Falcon BMS, Doom and The Division. Eating good food and drinking excellent wine. And at new years eve, lots of oliebollen!
This integration is official, and is maintained by the Symfony Core Team, you can verify on [https://symfony.sh](https://symfony.sh/). &amp;#x200B; The underlying JS library (API Platform Admin) is not directly part of Symfony, it has a similar status than Doctrine ORM and Monolog: they are third party libraries officially integrated with Symfony. That being said, 2 members of f the Symfony Core Team are also maintainers of this library (among other people). Disclaimer: Symfony Core Team member and API Platform maintainer here.
Offering it by just offering upstream is still offering it as a homebrew package, and if they're not willing or able to maintain it themselves removing it when upstream is past EOL is the right thing to do. It correctly indicates to consumers of the package that they shouldn't be using it anymore because it's unsupported.
Haha fair point! I debated using `apt` for everything but I couldn't remember if the older Debian/Ubuntu versions supported that, so I opted for `apt-get` knowing it would work everywhere.
the true MVP! thanks! I'll be upgrade our image too... I'm starting to wonder how many other people use the holidays for stuff like this.
I've never used Deployer, but I'll definitely give it a whirl and, if it's sufficiently useful, I'll be glad to support the developer on Patreon.
This joke was funnier when we said it in elementary school, where the short bus was the only one with working air conditioning. (My brother was physically disabled, so they put us both on it for elementary school.) It was a double entendre.
Homebrew is honestly becoming more and more painful to use as a development environment. I'm honestly reaching the point that by this time next year I won't be brewing anything.
Going to finish my side project where I utilize ATM networks (Cash machines) to serve Ads in stores / restaurants / airports. Already got some clients, just need to finish the code.
Should be doing virtualization/containers anyways to mimic production exactly 
Thanks! The project almost didn't go forward because we use AWS CodeDeploy and the CodeDeploy agent refused to install on Ubuntu 18.04 due to a Ruby version constraint. Luckily, a few weeks ago, an updated agent was released that will work on 18.04 and we're good to go now. I dev locally on Ubuntu 18.04 with a composer.json PHP version constraint of 7.0.x to ensure the packages being installed would work in our Ubuntu 16.04 instances, so I'm pretty confident the application will run just fine post upgrade. But I guess we'll find out this week.
On more complex builds I won't disagree with you, but that is most assuredly not a requirement for every project and company out there. If you need a one-for-one replica of your production environment to make updates to a WordPress plugin as an example, I would suggest there's an issue within that code if it will only work with the production environment's setup. Likewise, while doing open source contributions, I am not going to tune a virtual machine to "mimic production" (which is highly subjective in every repo I contribute to) in order to validate changes across multiple PHP versions or test code against forthcoming PHP releases. Homebrew had been a good tool to setting up a baseline environment suitable for the 80% solution but with some of the changes they have been making over the last year or so I've found myself uninstalling quite a few brew managed packages and moving to other solutions.
If it were as easy as repackaging everyone would do it. There's also a lot of support for people trying to install things on different versions of macOS, xcode. Not to mention that homebrew would be responsible for the security of this version since php themselves declared it EOL.
It's a package manager just as yum,apt,whatever. In general people go to homebrew if their homebrew packages don't work. That's the kind of support that's provided.
I'm going to guess.. Because it builds whole dependency tree. From first to last release of each package and then it starts to resolve.
I'm happy to say that something that'd trip a lot of people up trying to parse URLs for the first time is something you've already handled: `http://[::1]:8000` doesn't trip up the host/port parsing. This bit is just opinion, but: I think it'd be nice (and at least in the Python world [yarl](https://github.com/aio-libs/yarl does this and it has been very popular) to remove the concept of 'Parser' and 'Builder' as something the user thinks about. Do both in one - if someone parses a URL to create an instance of your class you can have it be immutable, and if they ask for the URL but with the port changed from 80 to 443 or whatever you return a new object, not mutate the original.
What platform are you running on? Linux? Windows?
Heading to Japan for 3 weeks on Friday. Gonna stuff my face with noodles/curry and get drunk at Karaoke.
fair enough. i guess i forget about contract life dealing with clients on all kinds of versions &gt; I am not going to tune a virtual machine to "mimic production" (which is highly subjective in every repo I contribute to) in order to validate changes across multiple PHP versions or test code against forthcoming PHP releases. isn't that a great case for containers? ^btw, ^didnt ^downvote ^your ^op.. ^im ^not ^in ^the ^"disagree=downvote" ^camp
Ugh, never liked that admin UI from API Platform. It's super clunky and would never want a client using that. Sonata seems lightyears ahead of this.
Linux. I wasn't aware Windows had a 64 bit version. PHP Version 7.0.30-0+deb9u1 Linux raspberry 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 
Absolutely is a great case for containers, I'll encourage it to anyone. Personally though, I'm not in the "containerize all the things" camp. I've been running a setup fairly similar to [https://getgrav.org/blog/macos-mojave-apache-multiple-php-versions](https://getgrav.org/blog/macos-mojave-apache-multiple-php-versions) even before Grav was a thing, and it just works for so much of what I do day-to-day, especially since I'm running a woefully underpowered Apple computer and the virtual machine platforms eat resources like a fat kid in a candy store (last time I had to run a VM was to do some IE11 testing, my Mini was hovering 3 inches off the desk because the fan was running so hard).
"Why" you might ask? And rightly so! When you run the test suite via the framework, e.g. `app/Console/cake test app …` you run the tests _within_ the framework: the framework boots and it sets up the environment and mimics the behaviour of PHPUnit by calling it underneath. A travesty and a world of pain. A regular PHPUnit configuration runs primarily PHPUnit which bootstraps the framework. Basically this is the "inside-out" version of the above. Why is this relevant? Because it means easier integration, for example within your favourite IDE e..g PhpStorm. Finally you can properly run the tests _within_ it as you would with any project and can run individual tests (fast dev cycle). With a bit of effort you can also move on to PHPUnit7 (latest supported by CakePHP is PHPUnit 5). This post is dedicated to the ones still having to put up with it. ;-)
Well, API Platform Admin uses the React Admin library, itself built on top of Material UI (the reference implementation of [Google's Material Design](https://material.io/) for React). It follows the exact same style than Android and most Google products. Some people don't like it, but I'm not sure that it's *clunky*. Anyway, if you don't like it, React Admin (and Material UI) can be themed: https://marmelab.com/react-admin/Theming.html#using-a-predefined-theme Creating Admin LTE-like theme (the theme used by Sonata) for React Admin would be a nice enhancement for the ones not liking Material. That being said, Sonata is a very good product (and I'm still the maintainer of it's MongoDB bridge), but it is not similar at all to API Platform Admin. The main benefit of Admin is that it's a full-JS library, that uses an API to fetch the data, and is installable as a Progressive Web App.
At my old job I used to run something similar but with PHP FPM instead of that version switching script, so I could set a PHP version per vhost. All our projects were Apache 2.4 + PHP 5.6 or 7.1 + MariaDB with the same base set of PHP extensions anyway.
Does anyone feel this way about python's FFI?
I'm off on *vacation* until the 2nd of the new year. RDR II &amp; Eggnog is pretty much all that I will be doing until then. I think we have made promises to see my in-laws xmas day. If that is the case, go there grub down and get back home without ruffling too many feathers...
Nice work!
This is just spam. If you want to submit something **relevant** to PHP development here, it'll probably be welcomed. (We don't hate you or your company.) Linking to a "enter your email address for early access" form with NO substance? No.
Hello everybody I am Eslam Salem the co-founder of Shieldfy. I am very happy to introduce Shieldfy workflow to you. Shieldfy workflow designed to I integrate security to every step of your development cycle. Please review the concept/feature and if you are excited about it as we register in the private beta to have a deeper look. Thanks
What’s this thing you call a vacation?
Sorry, I will keep that in mind
Thanks will surely check them 
If you decide to do it inform me on any progress you make
This might be what encourages me to install/learn React. Does one need to know React to use this interface, or does it just work on its own?
I am sorry I didn't know that rule. All I wanted to do is to get feedback on the new feature we are working on. Sorry again.
Cool stuff. Thanks for suggesting
I'll probably will spend my time in VR, sounds more sad than it is.
If you decide to do it inform me on any progress you make 
Best advice: Write up a detailed explanation of what this new feature is, slap it on Gist or Medium, and end with a question. Alternatively: Submit a text entry since Reddit allows Markdown. (This only works if you don't need inline images.)
Thanks will surely check them 
Thanks for the detailed explanation it helps in visualising the tables.
Don't use inheritance to solve this--my suggestion is to make a class that holds authentication credentials and make two versions of it: one that holds real ones, and one that holds null ones. For routes that require authentication, take an authentication object in (either via the constructor or via the method) and apply the credentials found in that authentication object to your request.
Thanks for the detailed explanation it helps in visualising the tables
The variable won't get unset and carried away by garbage collector while you have a reference to it.
I've successfully deployed Beanstalkd in PHP using Pheanstalk. On a server with little or no usage, as you'd expect, the worker processes what it needs to almost instantly. However, with many users it slows down significantly. The CentOS 7 server is no where near capacity (it's highly spec'd 256 GB RAM etc), but I can't seem to figure out how to allow it to process more concurrently. The 'current-jobs-ready' value can increase to 100+ meaning a long wait. Is it possible to increase the capacity of Beanstalkd on a single server?
If this was a package I was using internally I would register it properly in the middleware etc. But I am trying to go the path of least resistance for those who will use the package. In my opinion, overwriting a config class in the package is not the best way to go with it as it would take a bit of configuration for the user.
It work on its own for basic usages. It parses the API documentation (Hydra) automatically generated for classes mapped with the `@ApiResource` annotation and build the corresponding UI. It detected the appropriate HTML widgets to use, filters, relations, handles the pagination... But if you want to customize all or parts of the UI, then you need to learn React.
PHP 5.6 is supported until the end of this year, at which point it will have the same status as PHP 4, PHP 5.5 and PHP 7.0
If you're excited to introduce the Shieldfy workflow to us why don't you introduce the Shieldfy workflow to us?
Start more worker processes? How many do you currently have running? We used to run Beanstalkd in our production application and had about 5 worker processes running concurrently. The main job of the queue was to process 2F auth via SMS but also sent emails, other SMS messages, push notifications, etc. Average processing time was just a few seconds before you'd receive the text message. As we scaled out, we moved to a central queue (SQS) and a dedicated server to process jobs.
polyfills to the win: Specifically for mcrypt: https://packagist.org/packages/phpseclib/mcrypt_compat composer require phpseclib/mcrypt_compat 
Maybe I'm not fully understanding here. You said you're writing an SDK--implying that your SDK talks to a third party service outside of the SDK's control. If your SDK calls, you can include an authentication object. You can make two versions of the authentication object that you require--one that returns `null` for the credentials and one that takes in actual, valid credentials and returns those instead. It'll look something like: ``` interface Credentials { public function getCredentials(): ?string; } class NullCredentials implements Credentials { public function getCredentials(): ?string { return null; } } class AuthKeyCredentials implements Credentials { private $authKey; public function __construct(string $authKey) { $this-&gt;authKey = $authKey; } public function getCredentials(): ?string { return $this-&gt;authKey; } } ``` Then, in your `Provider` code, you can make the `route` function take a `Credentials` object (and if you're feeling plucky, you can make it fall back to a `NullCredentials` object). Alternatively, you can make your `Provider` code take a `Credentials` object in the constructor instead--same concept, different placement.
There aren't 'modes', PHP(and any binary in general) is either compiled for 32 or 64 bit. 64 bit binaries will fail to run on 32 bit operating systems, but 64 bit OSes will have backwards compatibility with 32 bit programs. (I've oversimplified, but what I said is pretty much true of any computer you'd want to run PHP on anyway.) Also Windows has had 64 bit releases since at least XP, and 32 bit cpus are all but dead now in the mainstream consumer market. (Still some holdouts I'm sure, but they're getting rarer)
Gotcha. This was all pseudo code so i did not fully demonstrate. I planned to implement a credentials class similar to your recommendations but still struggled with not having to re-initialize as the API calls could be changed. For instance , api call 2 in a different namespace might be needed to get the results of the 1st call.
A HTTP server in PHP... Why?!?
Also, the holiday is the perfect time to do DevOps related stuff. It'll take just half a day on my 2-week PTO but the pay-off is huge: we'll be on 7.2 with little to no down-time for internal and external customers. And then I can begin leveraging some of the cool new stuff 7.2 offers as well as some packages I wanted to explore but required &gt;=7.2
Thanks very much!
Every time I see ‘Amp’ now I think it’s about Google’s Accelerated Mobile Pages.
I do both, imagine how often I get them flipped around
You spelt Laravel wrong 🤔
The reason I say "modes" is because the apt package lists "all" instead of i386. If that's true, it should have a 64 bit option or outright be 64 bit. It's running in 32 bit mode for some reason. None of the PHP packages explicitly list themselves as x86_64 specifically. It's either "all" or "i386" (32 bit). 
Sleep, sleep and more sleep. 
Debian sometimes has 'fake' packages that might not be exactly what you expect, for example `php7.3` doesn't install php 7.3 as you can see [here](https://packages.debian.org/buster/all/php7.3/filelist), rather it's a way to get via dependencies [the real php7.3](https://packages.debian.org/buster/php7.3-common) and something like [this to actually run PHP](https://packages.debian.org/buster/php7.3-fpm) If you only see i386 packages in the repo search you're probably on a 32 bit OS, what do you see if you run `uname -m`?
But, like, for production use? o.O
It's 86_64, I verified that first. Is it possible that Apache is 32 bit and is therefore locking PHP down to the same level? 
Where die PHP6 went?
Maybe the CPU is, but that doesn't mean that the debian installation itself is. A 32 bit OS can run on a 64 bit OS. I'm willing to bet `dpkg --print-architecture` shows i386 if you see i386 packages from apt, and that would indicate debian itself is 32 bit.
"Homebrew does something unexpected and weird. In other news, bears shit in the woods, water is wet,and the pope is in fact catholic."
That makes sense, it's i386! Linux confuses me sometimes... the "system" section of phpinfo() claimed it was 64 bit, but the packages themselves are being installed as 32 bit.
It's not unlikely phpinfo reports it's a 64 bit cpu rather than that it's a 32 bit OS I suppose.
Why not?
I guess, I'll have to switch to Nginx Unit eventualy 
7.0 is EOL soon and 7.2 is maybe 20% faster in raw execution time. Would recommend going up to 7.3, it’s about 30% faster than 7.0.
Like Laravel, they don't sell it, they are giving it for free.
Try not to split calls like that. Let a response stand on its own. If you have to do something like that, make a method that takes in the two object instances and returns the results of call 2 fed into call 1. That way, you make the dependency explicit, rather than implicit.
Python has a very different runtime model to PHP. For good and ill.
Awesome, it's a great opportunity to dive into Docker.
Im not. Think like call A gets the results of all dogs and call B changes the color of one of those dogs.
bootstrapping a side project of mine, hopefully it will become my main project someday, one can only hope...
Not like Laravel at all, Nova is paid. 
Which, imo, is the biggest flaw in Laravel. The Laravel core devs create pretty good paid projects upon which a lot of devs build modules, but this stops a lot of work on similar, open-source alternatives, as they don't have the same reach and therefore lose motivation to develop it.
It's a php daemon service and $mother-&gt;isABitch() is an API endpoint call.
You don’t need to run through autoloading (and plenty of other resource allocation) on every single request. It can result in crazy performance gains, though there are some design trade-offs you have to make. And when I say crazy gains, I mean it. I saw upwards of 20x improvement for simple requests on a prototype. For what it’s worth, most other languages use this model. PHP is the outlier, not the norm. 
Thanks.
How similar is this to react php? 
Anyone know / try to get some multi-threading working using the Foreign Function Interface? And if it can speed things up?
I think I saw myself in your comment. Planning to move to KVM from OpenVZ, bumping PHP version to 7.3, Peek at MariaDB 10.3, Try out HTTP/2 on this vacation. I am also only backend Dev on a start-up, every 3 months I get to wear hat of devops too. :p
So composer should also disallow abandoned packages from being downloaded?
[removed]
Well, we'll spend a week in Amsterdam. The city looks gorgeous with all the christmas decoration and the snow all around. If Queens is aviable in German we will look it there too and maybe one or more musicals (really want to see the blue man group). If anyone has some tips for places to visit (even food related!) then go ahead! We also want to try out The Sea Palace Chinese restaurant. Then there was a famous breakfast store something like "Omlette" or so where they make you some omlettes that will mindfaq you (not talking about drugs :P). I also have several side projects and I am not sure which one I want to continue.. one is an API Client + overall service for a browsergame (using their public API) and one is a "better" Wordpress, now since WP5 is out and still not close to being "acceptable". Just using WP too rarely to know each thing that I have to include and plan into the future..
Is this like Laravel Nova? Would it be available out of the box with something like 'composer install symfony-skeleton'?
All of those people should use Jekyll 
Does EasyAdmin have the same status?
for starters, commits does not make any sense at all. ideally, you would want to work on 1 feature, like e.g. save new post functionality and commit it when done with good descriptive message. otherwise, version control is useless other than having another place where to store your "zip" with the codebase.
It's similar and [even compatible](https://amphp.org/react-adapter/). Amp favors coroutines over then() callbacks.
Yes 
I don’t know Nova very well, but it looks like a similar solution (even if API Platform Admin is available since a few years). It’s already available by typing `composer req react-admin` in any skeleton.
Isn't this just a basic installation of laravel? What is different in your example?
PHP7.4's preloading should help with that to some extent.
Looks like there are basic changes. Migration, seeder, blog controller. That's all I checked, though.
No. I think you can check the code to see for yourself
I don't want to be rude since you clearly spent some time on this. But... [WTF is going on in here??](https://github.com/d-inquisitor/laravel-blog-example/tree/master/resources/views)
WTF. I don't understand you.
I don't know what OP is on about, but isn't [this](https://github.com/d-inquisitor/laravel-blog-example/blob/master/resources/views/allArticles.php#L27) very much vulnerable to XSS?
http://php.net/manual/en/function.explode.php You may be wanting implode instead. 
I think without some explanation of what your example is trying to showcase, I'm not going to bother diving into a new laravel installation.
For starters, you're having [files defining functions in your views folder](https://github.com/d-inquisitor/laravel-blog-example/blob/master/resources/views/bbcode_function.php), then [including the function definitions straight into your views](https://github.com/d-inquisitor/laravel-blog-example/blob/master/resources/views/showArticle.php#L1), [building queries straight in your HTML](https://github.com/d-inquisitor/laravel-blog-example/blob/master/resources/views/showArticle.php#L75), the indentation in your files are all crazy, [you have unused files](https://github.com/d-inquisitor/laravel-blog-example/blob/master/resources/views/welcome.blade.php), and more.. It feels like you're having this beatiful Laravel scaffolding, then just shoving your own implementations down its throat just to make it work. Move the helper functions our of the resource folder and into your App folder. Prepare the variables that you're using in your controller instead of in the views. Clean up your HTML.
I found out by accident that https://github.com/resque/php-resque exists. https://github.com/resque is the organization for the original Ruby resque implementation. For years the primary repo was https://github.com/chrisboulton/php-resque but it stagnated quite heavily. The approach with fork makes it very resilient against faults/side-effects but the higher your job count goes, the more overhead it incurs exactly due to the forking. I'm using a special variant called https://github.com/wa0x6e/php-resque-ex which for all I know is abandoned, too. I'm also using Laravels built-in Queue/Job system which is way ahead in terms of performance, because it does not involve forking. It's really great and feels "batteries included" because there's also Laravel Horizon bringing a dynamic worker configuration, dedicated supervisor and a dashboard with it. However in terms of interoperability I do like resques approach for simplicity. php-resque touts itself as being compatible to the unofficial ruby implementations, which makes also for nice OOTB dashboards/monitoring tools which understand Rubys resque. I also found it easier when integrating external sources to create jobs with php-resque, as in Laravel the internal format is quite bloated, carrying quite some serialized information within in. OTOH, Laravels worker speed due to not forking is unprecedented from what I've seen. Any other take on this or experience with these kind of queuing/background processing?
You might want to learn about basic web security before teaching innocent ~~readers~~ viewers how to make XSS vulnerable applications.
Have you disabled the timestamp checking on files? In my experience this is the biggest and most frequent bottleneck.
Its already disabled by default. Here's full config: ; Enable Zend OPcache extension module zend_extension=opcache.so ; Determines if Zend OPCache is enabled opcache.enable=1 ; Determines if Zend OPCache is enabled for the CLI version of PHP ;opcache.enable_cli=0 ; The OPcache shared memory storage size. opcache.memory_consumption=128 ; The amount of memory for interned strings in Mbytes. opcache.interned_strings_buffer=8 ; The maximum number of keys (scripts) in the OPcache hash table. ; Only numbers between 200 and 100000 are allowed. opcache.max_accelerated_files=4000 ; The maximum percentage of "wasted" memory until a restart is scheduled. ;opcache.max_wasted_percentage=5 ; When this directive is enabled, the OPcache appends the current working ; directory to the script key, thus eliminating possible collisions between ; files with the same name (basename). Disabling the directive improves ; performance, but may break existing applications. ;opcache.use_cwd=1 ; When disabled, you must reset the OPcache manually or restart the ; webserver for changes to the filesystem to take effect. ;opcache.validate_timestamps=1 ; How often (in seconds) to check file timestamps for changes to the shared ; memory storage allocation. ("1" means validate once per second, but only ; once per request. "0" means always validate) ;opcache.revalidate_freq=2 ; Enables or disables file search in include_path optimization ;opcache.revalidate_path=0 ; If disabled, all PHPDoc comments are dropped from the code to reduce the ; size of the optimized code. ;opcache.save_comments=1 ; If enabled, a fast shutdown sequence is used for the accelerated code ;opcache.fast_shutdown=0 ; Allow file existence override (file_exists, etc.) performance feature. ;opcache.enable_file_override=0 ; A bitmask, where each bit enables or disables the appropriate OPcache ; passes ;opcache.optimization_level=0xffffffff ;opcache.inherited_hack=1 ;opcache.dups_fix=0 ; The location of the OPcache blacklist file (wildcards allowed). ; Each OPcache blacklist file is a text file that holds the names of files ; that should not be accelerated. opcache.blacklist_filename=/opt/cpanel/ea-php71/root/etc/php.d/opcache*.blacklist ; Allows exclusion of large files from being cached. By default all files ; are cached. ;opcache.max_file_size=0 ; Check the cache checksum each N requests. ; The default value of "0" means that the checks are disabled. ;opcache.consistency_checks=0 ; How long to wait (in seconds) for a scheduled restart to begin if the cache ; is not being accessed. ;opcache.force_restart_timeout=180 ; OPcache error_log file name. Empty string assumes "stderr". ;opcache.error_log= ; All OPcache errors go to the Web server log. ; By default, only fatal errors (level 0) or errors (level 1) are logged. ; You can also enable warnings (level 2), info messages (level 3) or ; debug messages (level 4). ;opcache.log_verbosity_level=1 ; Preferred Shared Memory back-end. Leave empty and let the system decide. ;opcache.preferred_memory_model= ; Protect the shared memory from unexpected writing during script execution. ; Useful for internal debugging only. ;opcache.protect_memory=0 ; Allows calling OPcache API functions only from PHP scripts which path is ; started from specified string. The default "" means no restriction ;opcache.restrict_api= ; Enables and sets the second level cache directory. ; It should improve performance when SHM memory is full, at server restart or ; SHM reset. The default "" disables file based caching. ; RPM note : file cache directory must be owned by process owner ; for mod_php, see /etc/httpd/conf.d/php.conf ; for php-fpm, see /etc/php-fpm.d/*conf ;opcache.file_cache= ; Enables or disables opcode caching in shared memory. ;opcache.file_cache_only=0 ; Enables or disables checksum validation when script loaded from file cache. ;opcache.file_cache_consistency_checks=1 ; Enables or disables copying of PHP code (text segment) into HUGE PAGES. ; This should improve performance, but requires appropriate OS configuration. opcache.huge_code_pages=0 ; Leads OPcache to check file readability on each access to cached file. ; This directive should be enabled in shared hosting environment, when few ; users (PHP-FPM pools) reuse the common OPcache shared memory. opcache.validate_permission=1 
&gt; ; When disabled, you must reset the OPcache manually or restart the ; webserver for changes to the filesystem to take effect. ;opcache.validate_timestamps=1 You need to uncomment this line and set it to 0. Invalidating opcache should be manual when you install new updates.
&gt; ; When disabled, you must reset the OPcache manually or restart the ; webserver for changes to the filesystem to take effect. ;opcache.validate_timestamps=1 You need to uncomment this line and set it to 0. Invalidating opcache should be manual when you install new updates.
Why would someone down vote a serious question?
Because this is not a help forum. That's why. (I didn't down vote, but you're using the wrong sub for questions)
&gt; opcache.validate_timestamps I've never had to do that. Seems ridiculous that timestamp would slow down opcache by 2x. Anyway I tried it: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 39376 100 39376 0 0 16204 0 0:00:02 0:00:02 --:--:-- 16197 Connect: 0.145244 TTFB: 2.132792 Total time: 2.430369 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 39376 0 39376 0 0 29363 0 --:--:-- 0:00:01 --:--:-- 29363 Connect: 0.144310 TTFB: 1.045014 Total time: 1.341611 [hydn@fedora ~]$ Then disabled it: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 Connect: 0.145028 TTFB: 0.448949 Total time: 0.448996 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 Connect: 0.147661 TTFB: 0.445045 Total time: 0.445094 
You seriously need to learn how to do formatting online....
Thanks. Will post there.
Sounds to me you're not just running xdebug, but are generating xdebug profiles? Those take a lot of time, but I notice an acceptable slowdown on regular requests without the profiling (10-20% increase).
One alternative is [http://php.net/manual/en/book.phpdbg.php](http://php.net/manual/en/book.phpdbg.php) We use it instead of xdebug for generating code coverage reports, works awesome for that. Never used it as a debugger though....
Okay, thanks
The code is not meant for everybody to see, those who'll test it will test it. 
It looks fine in new reddit, looks bad here.
Nope, the profiler is off.
There are no people in еру either place qualified to answer this question.
&gt;I don't know what OP is on about, but isn't this very much vulnerable to XSS? Yes I think it is.. If you're using Laravel you're better off using Blade for your views (unless you have a very good reason not to). &amp;#x200B; It also help with not having functions in your views : Only put blade files if your views, and if you can't do something with blade it means it doesn't belong to a view (actually Twig is better in that regard because it doesn't let you use php in the views at all... Which can be a pain sometimes but ensure you don't start putting toom uch logic in there).
I just ran a quick test on the Drupal 8 site I'm working on at the moment. If I load /admin with xdebug enabled, but not setting the cookie to start debugging, a pageload takes about 2.5s. If I set the cookie, but there's no breakpoints in PHPStorm, the load time doesn't change. (I assume PHPStorm is being smart about refusing the connection if there's no breakpoint set). If I set a breakpoint that won't get hit by the request, it takes just under 3s to load the page. Sometimes I do notice a bit of a slowdown from having xdebug running (And this is across a variety of D8/SF3/Silex projects) but never 2mins worth. It sounds like something's not right in your environment to me.
The formatting is totally fucked.
Have you tried enabling opcache? If you leave it on but enable the timestamp check, you will get speed benefits without issues 
Your reasoning is sound, that occurred to me as well. However, we are using ApiPlatform that uses a lot of DIC autogenerated files and serializer groups for normalizing and denormalizing entities to api responses. That generates a fairly big stacktraces and jumps through various event contexts and what it seems to me that xdebug collects a lot of information from those execution paths and method call switching so it becomes bloated and slow. In production everything works precached and fast. I tried to kill as many options in xdebug configuration though. Another problem that has occurred to me is that multiple users are debugging through the same php-fpm pool so this might be a concurrency problem, anyone?
Perhaps looking at it with something like New Relic will give you better insights.
2-5 seconds??? Wtf? Requests in my dev environment take like 200ms tops, and xdebug is always enabled. And that's inside a virtualbox instance. Your problem definitely isn't with xdebug.
Of course, however those benefits are not really noticeable on dev environment where you have to rebuild symfony container often.
Ok, but what php app stack are you running? I'm talking about fullstack symfony4 with kernel debug=true and with heavy design pattern approach and bunch of bundles. For simpler legacy apps works like a charm. I'll make sure to check environment once again, have to annoy system guys once in a while :)
Are you on Docker 4 Mac? That would be a huge perf bottleneck 
How to build your own e-commerce solution: Don’t 
I'd suspect frequently auto generated php files (like force-refreshed template compilation). I'd dump and compare scripts in `opcache_get_status(true)`
Yes, full stack symfony, all the debug stuff, dev environment with minimal caching... Are you virtualizing your environment? I use virtualbox with NFS shares. I found that if I kept the symfony log and cache dirs within the NFS share, requests would be painfully slow. Maybe you have something similar?
Dev env is on virtual machine running redhat7, which is virtualized on a bigger company cluster. So it is not a local VM.
Because there are many webservers already heavily tested in production (e.g. nginx, apache). Also perfomance, pure C &gt;&gt;&gt;&gt;&gt; just PHP. &amp;#x200B;
You can simply run you app in projects like php-pm. 
&gt;Also, who the hell is installing production PHP7 from Homebrew? This was my reaction straight away, however, I don't understand why people are using homebrew at all, it makes reproducing the build exactly in a live environment a nightmare. /u/identicalBadger whats the answer?
&gt; Gutsy move IMO for devs such as myself upgrading PHP 7.0 projects for clients Why though? You're not using homebrew for a live environment, are you?
You really should be using Blade if nothing else. Only going to use this one file as an example but in: https://github.com/d-inquisitor/laravel-blog-example/blob/master/resources/views/allArticles.php &lt;div class="col-lg-9 col-md-8 col-sm-12 col-xs-12"&gt; &lt;?php if (count($articles) &gt; 1) { $class = "blogdesc"; } else { $class = "bdes"; } foreach ($articles as $article) { ?&gt; &lt;div&gt; &lt;a href="&lt;?php echo "article/" . $article-&gt;link; ?&gt;" class="blogtitle"&gt;&lt;?php echo $article-&gt;title; ?&gt;&lt;/a&gt;&lt;br&gt; &lt;span class="blogdate"&gt;&lt;?php echo $article-&gt;created_at-&gt;format('M j, Y, g:i A'); ?&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt; &lt;div class="&lt;?php echo $class; ?&gt;"&gt;&lt;?php echo $article-&gt;description; ?&gt;&lt;/div&gt; &lt;/div&gt; &lt;?php } echo $articles-&gt;links(); ?&gt; &lt;/div&gt; Becomes: &lt;div class="col-lg-9 col-md-8 col-sm-12 col-xs-12"&gt; @foreach ( $articles as $article ) &lt;div&gt; &lt;a href="{{ $article-&gt;link }}" class="blogtitle"&gt; {{ $article-&gt;title }} &lt;/a&gt;&lt;br&gt; &lt;span class="blogdate"&gt; {{ $article-&gt;created_at-&gt;format('M j, Y, g:i A') }} &lt;/span&gt;&lt;br&gt;&lt;br&gt; &lt;div class="{{ $class }}"&gt;{{ $article-&gt;description }}&lt;/div&gt; &lt;/div&gt; @endforeach &lt;/div&gt; You should also move that bbcode_to_html function to your Comment model in App\Comment.php and write it like an accessor. public function getFormattedCommentAttribute($value) { $text = nl2br(htmlentities($value, ENT_QUOTES, 'UTF-8')); $in = array( '#\[b\](.*)\[/b\]#Usi', '#\[i\](.*)\[/i\]#Usi', '#\[u\](.*)\[/u\]#Usi', '#\[s\](.*)\[/s\]#Usi', '#\[img\](.*)\[/img\]#Usi', '#\[url\]((ht|f)tps?\:\/\/(.*))\[/url\]#Usi', '#\[url=((ht|f)tps?\:\/\/(.*))\](.*)\[/url\]#Usi', '#\[left\](.*)\[/left\]#Usi', '#\[center\](.*)\[/center\]#Usi', '#\[right\](.*)\[/right\]#Usi', '#\[hr\](.*)#Usi' ); $out = array( '&lt;strong&gt;$1&lt;/strong&gt;', '&lt;em&gt;$1&lt;/em&gt;', '&lt;span style="text-decoration:underline;"&gt;$1&lt;/span&gt;', '&lt;span style="text-decoration:line-through;"&gt;$1&lt;/span&gt;', '&lt;img src="$1" alt="Image" /&gt;', '&lt;a href="$1"&gt;$1&lt;/a&gt;', '&lt;a href="$1"&gt;$4&lt;/a&gt;', '&lt;div style="text-align:left;"&gt;$1&lt;/div&gt;', '&lt;div style="text-align:center;"&gt;$1&lt;/div&gt;', '&lt;div style="text-align:right;"&gt;$1&lt;/div&gt;', '&lt;hr&gt;$1' ); $count = count($in)-1; for($i=0;$i&lt;=$count;$i++) { $text = preg_replace($in[$i],$out[$i],$text); } return $this-&gt;attributes['formatted_comment'] = $text; } Then you just need to add protected $appends = [ 'formatted_comment' ]; To your comment model. Now in your view you just print it like {{ $comment-&gt;formatted_comment }}
Will do !
lol heavens no. Development environment...
Don't tell me what to do. :P
I've worked on https://github.com/mjphaynes/php-resque as well. Abandoned by the project owner, but xelan took over as maintainer for now. I don't think it's fully interop with the Ruby version though. I've since used Horizon as well and probably won't go back to a resque lib. I found that using phpiredis extension with Predis was the fastest way to drive it. Also using blocking is important (blpop vs lpop) because it reduces initial job pickup by whatever your sleep rate is set to. Workers will pick up jobs instantly. Even better though if an implementation can use brpoplpush though, because then it guarantees that the job won't be lost if the server dies while a job is being worked on. I haven't gotten a chance to try this yet, but https://github.com/halaei/lqrm-php looks extremely promising on that front.
An application server is a different beast to a generic web server. Nginx and Apache both hand PHP requests off to PHP-FPM, mod_php or simliar, to process PHP requests. An application server like this is designed to handle requests by handing them off to an already bootstrapped application, saving a significant amount of processing time. This is a similar project to ReactPHP's [php-pm](https://github.com/php-pm/php-pm).
I've just replied to your other response and didn't realise you were already aware of php-pm. php-pm is also written in PHP, but based on ReactPHP (which focuses on an event loop and using `then()`). This is a similar project, but built around Amp, which uses coroutines and PHP's generators and `yield` syntax. They have simlar goals and benefits.
Not use homebrew at all, at least as far as php dev goes. Choose docker, or a pure virtual box environment that matches where you’ll be deploying to. And if you happen to need 7.0, it’s already in the registry. And if they yanked it, you can rebuild it. https://hub.docker.com/r/lyberteam/php-fpm7.0/ In no way was I saying php7.0 is optimal or should be used at all, only that it’s stupid to take it out if someone genuinely wants or needs it. That’s all. If it was holding back Homebrew development itself, by all means yank it. But it’s not. 
This might be one of the few cases where you would favor inheritance over composition
It works when it doesn't segfault ;-)
I'll try your suggestions. Thanks.
For people that actually like visual editing in Wordpress, is Elementor still gonna be the thing or is this gonna change things up?
sorry to tell you - it's just scary in multiple ways. remove it, please.
If you're going to show a website, please, at least end it. It looks like you taked a template and throw some text 
This. Would love to use phpdbg for code coverage, but all those segfaults and memory leaks... :-/
I'll improve code coverage and add some useful and missing unit, integration and API tests. :)
Why don't you give it a try with local env with docker? Your timings doesn't seem very reasonable... 😅 😅 😅 
https://dev.mysql.com/doc/refman/8.0/en/create-table.html
It all depends on how you need to query it. If a single report has all that info and you dont need to query the info directly (except for the probe ID) then just json\_encode the info and store the datetime received, probe ID and a auto-incrementing primary key. If you do need to query inside, newer versions of MySQL and I think it's PostgreSQL? offer json datatypes which allow queries like: SELECT \* FROM table WHERE id\_probe = 1 and jsonColumnName.someFieldInJson &gt;= 5 If you're on an older version and don't have access to that functionality then you're just going to have to split it into different tables or use a single table with many rows. You'll have to test for your use case. &amp;#x200B; Multi-table approach would be easiest to explain and extend. Each table gets an id\_probe, datetime add, value. That would be minimum columns. If you need to add extra data you would be able to. Each would essentially be it's own model. If it's truly just a "type" and "value" then you could throw it all into one table and then add a column named "Type" as an int. Then in another table you store relations between ints and types so you can use a join and use named types.
So... You don't know database structures or what? Open/close, on/off, true/false, what's the difference?
Are annotations a requirement on that stack. (Ye gods, I hate annotations, so any excuse to ban them would be ok in my book).
Or at least warn you if it's marked as abandoned, yes. That said package managers for languages tend not to (never?) promise the same thing as package managers for a whole OS. Language-specific package managers tend to be seen and operated more as an open market and you're encouraged to (and should be doing at least a passing effort at) auditing your dependencies to make sure nothing to unreasonable is happening. There's plenty of people that write some project and don't update it for 3 years, but that could mean either the library is done and stable or that it's been sitting on the same bugs and problems for 3 years, and with composer or pip or npm or whatever else it behooves you to figure that out, because it's an open system anybody can get packages into and quality control is not guaranteed. Homebrew, though, is definitely modeled after OS package managers and has the same premise as they do of installing various binaries and dynamic libraries and managing them for you and system-wide level, and more importantly follows the same model of having a trusted official repo and 3rd party ones as a way to separate what's official from what is not. They're taking responsibility for the main repo by giving it the privilege of being the default and running that repo themselves, and the general expectation set by all of homebrew's peers in the package manager world is that official repos should only package reasonably maintained projects.
I'm struggling trying to learn PHP. I've gone through few tutorials, managed to work through some large projects copying code and working out bugs but don't know where to start from scratch. Can anyone offer any advice? I'm reading the documentation but I feel dumb because I don't know where to even start on my own.
It only helps with autoloading, but it won't allow keeping state between requests directly in memory, like a cache.
Symfony copies them into its object-based structure so there is a unified method of accessing them. There are cases where you don't want to use what is actually passed (or where nothing has been passed at all) for example if you're creating unit tests of your controllers.
Thanks a ton! :)
The main reason is XSS prevention. 
Awesome news! Hopefully, this will help reducing a lot of the `QueryBuilder` madness that I often see :-)
Fuck the "new" reddit! The moment they force me to use it, I am going to forward www.reddit.com to 127.0.0.1 in my hosts file and say c'est la vie!!
StackOverflow would be a more appropriate, and helpful, venue.
Not on the "new" reddit, apparently. Fuck that, tho!
segfaults in over 1/5 of our tests :(
If his box is faster than a dedicated company VM, then his company isn't prioritizing the devs properly.
Just to check avoiding networking issues or strange lagging... Who knows... 
FINALLY!
Just saw `public $dbConn` and closed the video.
So, if I begin a new Symfony project and need an admin, what should I pick? This, or easyadmin?
Thanks
Thank you
Thanks
Great step! 
Quite a bit, yes! I was shocked to find out how much of my application time was spent on Composer's `require`, not even configuration and connecting to services. My impression is that should be nearly eliminated with the preload feature (assuming, obviously, that the classes are preloaded). And that's with opcache cranked up to the max (never expire, don't revalidate, max files greatly exceeding those in the codebase+deps, etc).
Maybe. I haven't used php-pm (or amp) specifically, but both Roadrunner (the Go connnector) and ReactPHP (pure PHP) basically create an event loop around a PSR-7 request model. If you have a singleton _anywhere_ in your codebase (and many DI containers create them by default, even if you're not directly implementing the design pattern), you can get all sorts of weird crosstalk. This means different requests could potentially reuse each other's database transactions. If you're using Doctrine, the entity manager could be shared across requests, so `::clear()` and `::flush()` across independent requests can contaminate each other (not to mention changes to individual entities). I saw my API endpoints growing continually larger and larger responses due to an unintentionally-shared entity response container. On a low-traffic site, this might be fine. But you're likely to find that it's not a quick drop-in tool with no code changes that let you "simply run your app" in a new way. Unless it's doing a forked process-per-request thing, in which case you get an entirely different set of problems.
No one is going to use this if this is your attitude. Learn to take criticism.
Couple of more reasons. All header variables are prefixed with HTTP_ which can make it a bit of a pain to read a header value. Easier to use $request-&gt;headers-&gt;get('content-type'); than to fool around with string cats and replacements. It can be surprisingly difficult to pull certain information about scripts and paths from the super globals. Some of which tends to be operating system or php version specific. And at least in the past, there were security issues as well. But this is the big one. Symfony supports sub-requests. For reusable but isolated chunks of code like side bars or "most recent articles" type stuff it is sometimes handy to treat it as it's own request. So with Symfony you can basically make a sub-request, feed it back into the request handler and then use the rendered html as needed. Taking advantage of caching and what not. Trying to implement sub-requests using super globals would be challenging to say the least. And of course globals in general are good things to avoid.
Horrible attitude mate.
I didn't insult him anyway, I just told him that if he does want to check it. No problem. Others are already reviewing it. That's all
I don't understand.
Meh, QBs are super flexible. They are also less error prone, less fixing when you rename the class
Spin up your application locally on a system running PHP 7. Watch the error log and start fixing the errors one at a time.
I'd highly recommend reading through the [Laravel documentation](https://laravel.com/docs/5.7/lifecycle) like a book, working your way through each section and trying things out as you go. There are a lot of issues that others have pointed out, but in general your changes seem to be fighting against Laravel and often doing so in a way that introduces security issues and will make your life much harder if you were to continue building on the application as it stands. If video content is more your thing, the [Laravel 5.7 From Scratch](https://laracasts.com/series/laravel-from-scratch-2018) video series will take you through building a simple application without fighting against Laravel and using modern PHP concepts.
This is an issue with any programming language. My best advice would be to find a problem you'd like to solve (with code), break that down into the smallest possible chunks of logic you can manage and to work towards each of those chunks one at a time. The hardest part of this process though is usually in finding a simple enough problem you'd actually be interested in solving.
That's definitely been my problem. The things that seem like they'd be simple aren't actually that simple. I've come up with a project today though that should keep my occupied for a day or two and will help. At this point I guess I'm going to take the parts of the more complex tutorials I've done and break them down and make my own applications from scratch piece by piece. It's overwhelming.
I forgot to say thank you. Thank you.
Yeah, I tend to prefer the QueryBuilder to DQL unless it's a *really* simple query and makes sense to use.
1. The query builder is just assembling strings: no additional type safety comes from it 2. Putting DQL directly into a NOWDOC string is much more readable 3. The OP is precisely introducing some of the type/refactoring safety that makes DQL-directly-as-string much more viable during renames (which are very rare, BTW) I'd also add that since using IntelliJ/PHPStorm, I also write a lot of SQL blocks in NOWDOC, so that it is easier to inspect for unknown columns, column type mismatches, etc, because the DB schema can be loaded from either a fixture file, or from a cached DB connection (the IDE stores the last seen schema in its caches). So yes: the query builder is actually less safe, less readable, and one hop more. Unless you write dynamic SQL or DQL (which happens, I reckon, but can be avoided very often), you can get rid of it. Even in scenarios with dynamic SQL/DQL, you can write queries in a smarter way: SELECT * FROM mytable f WHERE (f.thing = :foo AND true = :scenario1) OR (f.thing IS NULL AND true = :scenario2) This is easier to follow from an SQL log perspectives (OPS will thank you), trivial to simplify for the SQL optimiser, and overall much more readable tham the same builder-based counterpart.
I am just doing some tutorials on PHP and I thought that this variable would work because I have defined it in my functions.php above.
r/phphelp
Assuming you're just viewing the login it's because $success is defined within a block requiring a POST (line 8) with 'submit'. If you're just viewing it's a GET and is obviously not sending 'submit' KV. 
I see.. What I am trying to do is display a message below the Submit button when the user inserts the record. If I just echo it on Line 34 on my functions.php file it displays it right at the top of the page, but I thought if I set a variable here it would display this message underneath the submit button when the query was successful. 
I actually missed the actual issue, but it would still kind of be relevent. &amp;#x200B; Line 8 login\_create.php : You call the function but don't save any returned result. So any return by that function will be discarded / unused. Any variables inside a function do not affect outside variables (unless you modify an object passed in, or use a variable passed by reference, or set as global) &amp;#x200B; You would need to change line 8 to be $success = createUsers();
$success is declared inside the function createUsers(), so you can't access it outside of the function. Look up variable scope to learn more a out this. To fix this you can change the line in functions.php $success = "User has been created."; to return "User has been created."; Then in login_create.php change createUsers(); to $success = createUsers();
&gt;You would need to change line 8 to be $success = createUsers(); I tried this but it didn't seem to work. Nevermind its OK I am still new and learning. Thank you anyway for your help. I am just doing a Udemy course to get a better understanding of PHP for some internal programs at work. 
Yes. The fancy pants editor is not for any sub that needs code or strict formatting. Maybe the sub mods can ask the site mods to en-/disable the fancy pants editor on a sub basis.
You appear to be grappling with scope. $success, in your function, ceases to exist outside of that else block. The $success you're trying to echo on the left is just an empty variable. You've done nothing to connect the two, and they are separate entities. When you echo it on the right, you see it where it's created, which I hope is straightforward enough. The simplest solution, given how linear your code is, would be to have createusers return a boolean and check that. If that sentence doesn't make sense to you, then I suggest you rewind in your tutorials or seek out ones covering the fundamentals, but to try and be helpful it would look something like: `bool $success = createusers();` `...some time later...` `if($success)` `{` `echo 'your ad here.';` `}` &amp;#x200B; Best of luck!
Thank you for your help - I will certainly read up on SQL injection and the other links you mentioned, I am still learning. I did however try those changes you suggested - but it still doesn't display any message. Is this correct? [https://imgur.com/a/PKNMDUy](https://imgur.com/a/PKNMDUy)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/2dpkIu7.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ebm29xt) 
Hello Guys, &amp;#x200B; I apologise for the mistake I have made in this thread. I did not mean to offend anyone or cause any harm. &amp;#x200B; Have a wonderful day!
It is hard to see, for some reason the screensbot is coming up very pixelated on my phone, but it looks like you have return = "User has been created"; If that is the case, you need to remove the = sign. Return is a command that will send whatever value comes immediately after it to the original line of code that called the function.
&gt;$success = createUsers(); Thank you so much for your help! 
Thank you I will read up on that
I'm talking about line 34 in functions.php. Remove the = sign after the word return. Of course, glad to help!
Yup got it - sorry new to reddit!
$success looks like it’s declared inside only on the else statement. If you fail to connect to database $success = undefined 
Have you found a way to IntelliSense pre-defined php arrays? 
Try &lt;?=$success?&gt;
Add success to the globals on line 9, also give it a default value
With no optimization Beanstalkd can handle 10000 concurrent messages on such a server. You need to start parallel workers. The workers may need to be spwan on different machines to support high speed. Raise your workers to 10,then 50,100,500
Look up variable scoping if you’d like to know why. In this case... &gt; Local variables. A variable declared within a PHP function is local and can only be accessed within that function.
Please use a framework. Truly scares me to see code like this being created in 2018.
I’m still learning but I will be looking into MVC
Thanks for your advice.
&gt; SQL blocks in NOWDOC It is the way to go with Phpstorm. The hints are awesome and the readability is perfect.
Wherever you’re getting the tutorials from, go somewhere else. I’d recommend phptherightway.com as a starting point. Pretty much anything more than three years ago (to be safe) is probably giving bad advice. And like others mentioned, *please* read up on prepared statements (or better yet, use an ORM). That page has a catastrophic security flaw that’s trivially easy to exploit. 
The script dies though in that case.
This was actually written 8 years ago. Still debugging it.
Yup no worries I still reading up on everything - it’s a lot to take in and I’m still only just stepping my toe in the water. I’m just trying to understand how it all works.
We all have to start somewhere! There are unfortunately a lot of old *really bad* resources out there that still rank highly in search results, which makes it harder. Good luck!
Really? I've been using phpdbg for code coverage for a while and I've had zero issues so far. Is there anything specific that causes this?
If you are learning, please read up about variable scopes. Variable declared within the function declaration block should be available and accessed within that scope only.
Www.phptherightway.com This will probably help you a lot. Once you get your bearings, I recommend Laravel.
It depends: - if you don't want to deal with JS, React and APIs, and prefer having server-side generated HTML, EasyAdmin is.. easy and will be the perfect match - if you prefer having something more "rich" (a Single-Page-App) and that you're ok with using JS and React, then API Platform Admin deserves a try
&gt; The main reason is automagic XSS prevention No it is not.
To understand The Loop and why it is the way it is, is to understand it wasn't written for PHP developers. The Loop was written for users to use and understand in templates they customized themselves. if ( have_posts() ) : while ( have_posts() ) : the_post(); // Sets up the "current" post. endwhile; endif; It's actually surprisingly elegant in its simplicity. The Loop manages to completely demystify the idea of looping through posts and setting up data for a given core-supported view for people who quite likely don't even know they're writing PHP, let alone what PHP even is. Feel free to trash the logic behind making code easy for users to use and understand, but also feel free to recognize that while WordPress often uses its own flavor of PHP that isn't particularly attractive to developers, it also simultaneously represents marketshare in the PHP community equaling four times its next largest competitor. ;-)
I seriously doubt we'll be refactoring large pieces of anything just because of the minimum supported version bump. Getting WordPress installs into modern PHP versions is going to be a win for performance and security regardless. Bumping the minimum doesn't throw WordPress' back-compat principles out the window though. It does however signal to the rest of the WordPress development community to level up their skills, which imo is long overdue.
Closures are actually supported pretty much everywhere, but they clash heartily with the action and filters API to the point where using them is almost reckless – unless you don't particularly care about playing nicely with other third-party code in the ecosystem. In most cases, using closures produces a result of being unable to unhook or modify things in the stack after instantiation, which is central to what allows WordPress to be so extensible in the first place.
Abstraction and consistency.
I am looking to learn more about tests and I prefer reading so searching for some books. I don't any proper experience with languages other then PHP (I dabbled a bit but never have completed any real project). My question is does it make sense to pickup books that are generally recommended but are aimed at software developers ( Like "Just Enough Software Test Automation" or "Refactoring: Improving the Design of Existing Code by Martin Fowler and Kent Beck" ) ? &amp;#x200B; Or should I search for something specific to web development/PHP ? 
I like using QB for everything because when I find out I need a conditional query, I don’t need to rewrite the whole thing, and the diff is also cleaner. By type safety the OP probably meant you can use ::class in -&gt;from().
Why would I sign up for an early access when the project doesnt even try to tell me what is the product? It is not ready to advertise and i will certainly not come back again. Why? Go to the website and click the [shieldify.io](https://shieldify.io) logo, it takes one to [https://worflow.shieldfy.io/](https://worflow.shieldfy.io/) broken link. You guys are so good at security you couldnt implement simple test for your own site? srsly?
Actually we like annotations. Of course you have to know the measure for not to kill php code in a class.
Yup, the network issue occurred to me to, especially the corporate proxy and firewall that could slow down tcp packets.
Yup, started working on that a few months ago, but it raises other problems from a corporate security policy. Completely another story that will be resolved eventually.
I'm just curious, why did you choose Reactjs and not VueJs or AngularJS? What are the main benefits? Thanks.
I think it honestly depends on what the job market is like where you're based. Where I live, there seems to be a bit of a shortage of developers, so getting jobs doing PHP is quite easy. I don't have any meaningful projects in my GitHub and I'm onto my second web development job in a year. (I've hopped around a bit, done some sysadmin stuff in the past, recently switched to web development for fun).
You can now use it directly within DQL blocks, which is why `::class` isn't needed anymore. Even with plain DQL, I just used to concatenate `::class` references within raw DQL strings: works like a charm.
I would recommend starting with Laravel. [Jeffrey Way](https://laracasts.com/@JeffreyWay) does a great series called [Laravel From Scratch](https://laracasts.com/series/laravel-from-scratch-2018) over at [Laracasts](https://laracasts.com/) and the course is completely free. It covers the basics and curves out well.
ReactJS has a much larger use-base, is a more popular pairing with Symfony. This makes it usable for an "as large as possible" group.
So WordPress supports them everywhere... except you shouldn't use them as they break the central WordPress workflow, actions, filters, unhooking etc... Got it... 
Thanks for your input. Where are you based?
North East of England. 
&gt; All header variables are prefixed with HTTP_ caveat: CONTENT_TYPE and CONTENT_LENGTH are not prefixed for some reason. Another reason to abstract it away.
how would one go about and run this in production. do you need a process manager of some kind to keep the script alive. what happens when an exception occurs?
&gt; So what are you waiting for? Stable xdebug support for PHP 7.3
Check the output of his ab. Document length 0 bytes. Non 200 responses: 10000 I think he is benchmarking which PHP version can serve the most errors per second.
Did they travel 3 weeks into the future?
For Drupal 7 website owners who work with PHP 5.6, a new Drupal version 7.61 was released. It entirely supports PHP 7.2. This will make upgrades from PHP 5 easier. Drupal 8 support for PHP 5 will be dropped on March 6, 2019. You should contact a web development team for updating to PHP 7.1 or, better, PHP 7.2, which is supported as of Drupal 8.5 (which was released March, 2018). Drupal 8.7, with a release date of May, 2019, will support PHP 7.3. *Check out our blogpost for more information:* [*https://wishdesk.com/blog/php5-6-end-of-life*](https://wishdesk.com/blog/php5-6-end-of-life) &amp;#x200B;
Gotta catch those "php 2019" search terms.
Usually an RC doesn't change in performance much. This should be the case with 7.3, so it's fine to benchmark it, as long as they note which RC they used! (The article doesn't mention, so one is going to assume RC5 was used as it's the most recent.)
PHP 7.3 is already at a stable release, I'm just confused by the 2019 in brackets.
&gt; I'm just confused by the 2019 in brackets. I mean, it's technically not lying until 7.4 hits in 2019... ;)
It technically is lying since the article was written in 2018...
What the heck happened with Magento? Not only does it not support 7.3, but it's the only one where 7.0 and 7.1 are faster than later versions.
And nothing about how php is running, or what the server config is. Explains why the request per sec count is so high.
Yep ... Its why you can not simply take you old code and use Amp or Swoole, and expect things to work out. Memory leaking, bloat, etc are all part of the course. You need to be more careful what you allocated, where and how. Its easy to work past with some experience but it is less "newbie friendly" then PHP its slow way of forgetting everything after every request. I am honest when i say, that PHP needs to get its behind into 3th gear. PHP is moving at such a slow speed, its ridiculous. PHP 7.4 its preloading, well, wait another year for that one. PHP 8.0, be lucky if we see that in 2021. How about futures or async, because lets face it, a lot of code in PHP is more stuck in IO waiting, wasting CPU cycles then anything else. PHP has moved so much into maintenance mode for old code, that its unable to continue. And its no wonder that NodeJS is the new popular kid on the block. Or Go. Or Crystal. Or ... I find it ridiculous that we need to see Chinese developer creating Swoole to really drag out the real power of PHP and its not a base / core module of PHP. What also hinders Swoole it growth because less people use it.
 I did not analyze your problem deep but when I had a similar problem it was memory available for cached files. When opCache reaches limit it cleans up the compiled cache and recompiles again. Also, note that opCache has different memory limits for different purposes. 
How embarrassing - you are so right. We have tested how fast WordPress fires up and redirects. New numbers and article update coming up.
[removed]
Spamming Reddit to promote your company is a hot trend I hear
Cannot add post content so doint it here: I'm happy to announce I've just released the version 3 of the Gotenberg API. In short: it's a Docker-powered stateless API for converting HTML, Markdown and Office documents to PDF. The main differences between version 2 and 3: * Merging PDF: ~~pdftk~~ pure Go solution * HTML conversion: ~~wkhtmltopdf~~ Google Chrome Headless * Markdown conversion: ~~obscure Node.js app~~ Google Chrome Headless * More options: send assets (footer, header, fonts, images, stylesheets etc.), specify paper size, orientation and margins! Links: * Github: https://github.com/thecodingmachine/gotenberg/ * Documentation: https://thecodingmachine.github.io/gotenberg/ * PHP client: https://github.com/thecodingmachine/gotenberg-php-client As always, feedbacks are welcome! :)
Similarly max_accelerated_files will limit the number of files in the opcache. If you have a lot of libraries or a large codebase then max_accelerated_files may already be at the maximum.
First WordPress and Guttenberg, now this. Are we running out of english words to name shit? 😁
If the argument is that closures aren't supported, that would be incorrect. You can use them and they will work just fine, but you screw over anybody hooking in after you, and thus why core doesn't use them.
Hehe actually it's just a mix of Go (language used) and Gutenberg.
Article is updated, the numbers are approximately the same. Thank you for pointing this out judd48!
No worries, looks good!
Ok i get it now. 👍
Magento happened. Seriously, that software is a piece of shit. There's no actual competitor, it's kinda embarrassing that this is the only enterprise eComms solution for PHP.
[For real, though?...](https://i.imgur.com/6Fi0fpW.png)
I just got back into PHP for a school project (last time I used it was around 2013), but I can't figure out how to do things properly. Everything seems way less 'standardized' or 'laid out' than java (which is where I've been for the last 5 years). I have *a lot* of questions. Any help would be greatly appreciated =) * What is this composer thing? I understand it's a dependency manager like npm or gradle, but how do I use it in my project? * What are the important changes since PHP 5.3? * What IDE am I supposed to use? I used to have phpDesigner 8, but the lack of a dark theme and lack of linux support makes that a no-go for me nowadays. I'm used to eclipse from Java development, but the PHP version simply didn't work for me. I'm currently using Notepad++, but I'm looking for something that has code recommendations (at least for the standard library) and preferably some form of syntax-checking. * How do you properly structure a project nowadays? I heard something about putting your stuff outside of the public\_html folder, but I don't fully understand how that works. * I'm really scared I mess something up security-related. Are there any things that I should watch out for apart from the usual XSS &amp; SQL injection? * Is $\_SESSION still the way to handle login-sessions? * How do people test (as in unit/integration test) their PHP code? * Is there something like a build tool that can check for syntax errors? I feel like I'm starting from the beginning again but I can't find any resources on how to do things properly. Most things use the same habits as 5 years ago, even though I know some of them are bad practice nowadays (bonus points if there's a "not for production" disclaimer). Any help would be greatly appreciated!
Those "click to tweet" slogans piss me off.
Yes we all know it's a piece of shit, but I think the poster was hoping for something more specific, so we learn something about PHP's performance.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Disgusting.
In the [previous version](https://github.com/amphp/aerys) we had one built-in. Now we've split it into a separate general purpose package named [`amphp/cluster`](https://github.com/amphp/cluster), which isn't completely stable, yet. You can register the process as systemd / supervisord / ... process to restart it automatically in case it crashes. Exceptions are caught and an error response is returned. Runtime fatal errors are thankfully mostly gone since PHP 7. Currently there's no hot reload of classes / methods like it's possible with Java application servers in PHP, so a restart is required, yes. But if you want, you can use a file watcher to automatically handle that.
... And you still don't see the problem there.
&gt; is to understand it wasn't written for PHP developers Which summarizes the fundamental problem with treating WordPress like a framework or general purpose CMS in the first place. &gt; The Loop manages to completely demystify the idea of looping through posts How is that syntax any simpler for a non-developer? It's still PHP. 
Mind sharing what's disgusting?
Yeah nah let’s not do this lol.
Fall in love with project icon 😍
Die Hard Marathon like every year
My calendar says it is
Yes, 100%. I work there since 2013. I'm a "Software Architect" now.
What's the business model for Crossover? As a PHP engineer in the US, that title usually carries about 4 to 6 times that salary. Why does Crossover pay so little?
You can take a peek at the changes that are being discussed at the [PHP.net REC wiki](https://wiki.php.net/RFC).
Oh, so Crossover mostly hire people from Latin American countries and Eastern Europe. $15/hr is decent over here. 
A secret subroutine built into the php-cgi request processor which, when visited at a certain kind of day, will inject a large GIF of a ElePHPant eating all the opcodes into the top of every HTML page.
The built in functions to be renamed and rearranged to be more consistent. Won't happen as it will break backwards compatibility big time. E.g. why do array_map and array_walk have opposite order of arguments despite being similar functions. Strlen and str_replace You get the idea.
Why wont we see generics? I'm hoping for that :/
I built my agency business around ExpressionEngine years ago before I moved to email marketing. Looking at v.5.01, not much seems to have changed but it didn't really need to as the control panel was always clutter free. They've made some logical menu changes and improved the number of custom fields as well as incorporated template partials (yay!). The reason CMSs like this have struggled against Wordpress is because they're developer centric and most web owners aren't developers. But for those of us that are, this is very flexible as it doesn't make any assumptions about your template, just use their tags and it spits out the content whether that be a duration, a post, a related post or image etc. Craft (v.3) is a great CMS but I just don't have the time to learn Twig whereas ExpressionEngine tags are much more approachable (probably not as flexible). I hope more people jump in and learn how to use this great CMS!
&gt;For each test, we used the latest version of each platform and benchmarked the home page for a minute with 15 concurrent users. How is this tested?
Magento 2 got PHP 7.2 support last week, a month or two after Magento 1 got it.
I’m kind of disappointed that this wasn’t included in PHP7, especially considering how many other breaking changes were introduced. 
Ah, that makes more sense. Thanks!
I still don’t understand why people hate PHP tho lol
I am working in a system that use a business process that passes by stages, and I found that I could use a State Machine. It's my first time trying State Machine, so I decided to integrate some libraries. It was useless. It is because most libraries are not focused on business processes. A State Machine (Finite or Infinite) is also called Automata (like Nier, i.e. the hot woman with white hair / high heels ), is about **automation** (what I want to, I want to automate process), and I don't want a new way to diagram process, I can diagram a process using VISIO. It is highly used in the mechanical/electrical world but in the Computer World is interpreted as something else. What is a State Machine? It's a concept to design logic (for automation) where a job or process is in a single state at the same time. In easy words, if you click on a switch, then you could turn ON a lamp and, if you click off, then you could turn off. The states in this example are **LAMP-ON** and **LAMP-OFF**, and the changes of states are called TRANSITION. Now, the trick is not to design **STATES**; **states are quite simple,** they are just values inside some array, and nothing more. The main feature is in the **TRANSITIONS**. Or more specifically **WHEN** it happens. And it is here we some libraries takes a different route, most (finite) State Machine libraries focus on events, for example, you call a function and the state changes. While the concept is right but the usability is limited at best. Why?. Let's say that our State Machine is about a lamp, it's on or off, and you have a switch. If you click on the switch, you trigger the event of on and off. But what if the lamp is unplugged? of what if the energy is down?. So, State-Machine triggered by an event is lacking at best. **A value could trigger the transition of state!.** In this case, using the library, it's simple: $smachine-&gt;addTransition(LAMP_OFF,LAMP_ON,'when energy = 1 and switch = 1'); $smachine-&gt;addTransition(LAMP_ON,LAMP_OFF,'when energy = 0 or switch = 0'); It is even possible to use events. Events are values after all $smachine-&gt;addEvent('click','set switch = flip()'); // it flip the value of switch from zero to one But, when the is tested and checked?. A Job (the job stores the STATE and the values). $object=['energy '=&gt;-1 ,'switch'=&gt;-1]; $job=$smachine-&gt;createJob($object); It is possible too to test several jobs at the same time (what's any business does). $smachine-&gt;checkAllJobs(); // it does the magic. I tested (for a example), and the infomation is right, then state machine is able to finish the process in a single shot (At last an **automatic** process). [INFO]: state changed from Pick order(1) to Transport order(3) change [INFO]: state changed from Transport order(3) to Delivered(7) stop &amp;#x200B; I also found another problem, testing. Testing a state machine is a nightmare. It's hard to test part of a process. So I even added a GUI to test it and i found that playing with the GUI and State Machine is funny, it is even possible to create a game with it. &amp;#x200B; &amp;#x200B;
Running Magento with caching turned off is like driving a car without putting on the wheels
Always love Kinsta's PHP benchmarks - Wordpress ones pretty much in line with my PHP 7.3 comparison benchmarks at least [https://community.centminmod.com/threads/16090/](https://community.centminmod.com/threads/16090/) :) &amp;#x200B; &amp;#x200B;
Eran Hammer said it best, [benchmarking frameworks is fucking stupid](https://hueniverse.com/performance-at-rest-75bb8fff143) 
If you're looking to write more meaningful tests and improve how you test your code, language agnostic books will be fine. There is a huge amount of crossover between languages when it comes to testing and the underlying theory is very transferable. Having said that, books dedicated to web testing will likely be more applicable than general software testing.
In the other benchmark today [https://servebolt.com/wordpress-5-0-php-7-2-vs-php-7-3-performance-and-speed-benchmark/](https://servebolt.com/wordpress-5-0-php-7-2-vs-php-7-3-performance-and-speed-benchmark/) Wordpress with Woocommerce is 16ish % faster, why is it only 9-10% faster in this benchmark? 
Did you read the article? The frameworks aren't what is being benchmarked, the PHP language versions are. The different frameworks are used to provide different baselines when comparing the language. Given the often significant performance improvements in each PHP release, benchmarking them is an interesting endeavour and can provide useful rough metrics on how an upgrade is likely to impact resource utilisation.
While there are many breaking changes in 7, most of them don't widely effect every project. A lot of PHP codebases, even large ones, didn't require an enormous amount of modification to upgrade from 5.6. Significantly altering the standard library would have led to much more significant changes to pretty much every PHP project, often in subtle ways, for much less material gain.
Here [https://kinsta.com/blog/php-benchmarks/](https://kinsta.com/blog/php-benchmarks/) Woocommerce with php73 is just 9% faster than 7.2, what is the differnce?
Yes, however my opinion is the metrics offered by this type of test offer no real world value. Little to no business logic and caching turned off seems to taint the results 
This RFC has it all. https://wiki.php.net/rfc/consistent_function_names It reads like a wet dream.
Caching would be an implementation detail of the frameworks, not the language (Opcache is enabled for the benchmarks) and business logic would also only be useful addition if you were (vainly) trying to benchmark the frameworks. All of the frameworks mentioned do a large amount of work before executing any business logic. Just look at the difference between the WordPress and Magento results adding business logic to that wouldn't provide any useful additional insight.
&gt; why do array_map and array_walk have opposite order of arguments despite being similar functions. Because they are not similar in practice. The first one is variadic. Most array function signature are `array_foo(array $array, callable $callback)`, with the array first, then the other parameters, then the "flag" parameters (`array_filter`, `array_walk`, ...). The issue with `array_map` is that it as a "variadic" one, you can pass multiple array and map them concurently. $arrayA = [1, 2, 3]; $arrayB = [3, 4, 5]; $sums = array_map( function ($itemA, $itemB) { return $itemA + $itemB; }, $arrayA, $arrayB ); $sums === [4, 6, 8]; And an `array, callable, ...arrays` signature would have been quite wrong too. It's not an error or a mistake, it was a choice. But I agree, it's a pain, as this edge case is less used. A good deal of the `array_*` and `str_*` ordering madness has at least somewhat decent reasons. I don't mean there wasn't better solution either, just that these are not plain incompetence from the php team. Way less justifiable excuses for inconsistent naming, except history/design by comitee/personal preferences and background of the creator.
Does PHP7.3 still need opcache to boost performance? I read somewhere it does not need so.
I find the best analogies in this subreddit. Thanks for the laugh mate!
They don't need to rename them. They could just add the new ones named correctly and deprecate the old ones. In 10 years or whatever they remove the old ones. I'm sure somebody would write old functions /parameter orders so you can import them into the global namespace if you still needed them in 10 years.
What about WooCommerce? It seems pretty popular, is it not enterprise grade?
There used to be a magic query string or something that would make PHP serve up its logo, but it was removed several years ago. But yeah, generics would be nice. 
I’d love to see continued optimization work, especially around simple code paths. With my workload, there’s a shockingly high overhead in basic stuff like accessor methods and return types. Between the FPM preloading and typed properties stuff coming in 7.4, I feel like there could be interesting opportunities to do deeper analysis and optimization that wouldn’t require a full-on separate compiler. I think all of the groundwork is basically there, at least for programs that use strict types end-to-end (and maybe even those without). Seems like the potential exists to do something like what Typescript and Flow do to give the best of both type safety and runtime optimizations. Also, native LSP support would make me so happy. 
Have a look at shopware.com. It’s a really nice alternative 
&gt; I feel like I'm starting from the beginning again From what I get of your post, it's sadly true. Some of your questions shows you where learning from already a bit outdated stuff in 2013. I'll answer some question, but it boils down to don't roll your own and use a framework, symfony (java spring inspired/feel, "enterprisey") or laravel (reusing symfony foundation, .NET/rails inspired/feel, "dev happiness") are the choices. You could always use composer to create your framework from libraries, but not a good idea right now, I think. &gt; Composer Very similar to npm (yarn actually, as it uses a lock file) once you've set it up, based of a composer.json instead of a package.json. Read its docs &gt; Changes since 5.3 Start from and go up http://php.net/manual/en/migration54.php I don't know how you coded in 2013, but from a script language, php is becomming a OOP language, at least in the default web use. No more multiple scripts in public, one for each "page", now it's all MVC (MVP really) and routers. &gt; What IDE am I supposed to use? Sublime text for a text editor on steroids if you add plugins (better notepad++) or phpstorm (think Eclipse/Netbeans taylored for PHP and Web, worth the cost if your serious with php). I use the later. &gt; How do you properly structure a project nowadays ? Too broad of a question. Are we talking files and directories, MVC, design patterns ? Anyway, use a framework, it will come all included. &gt; I heard something about putting your stuff outside of the public_html folder, but I don't fully understand how that works. Even in 2013 it was a mistake to put any non static thing except your front controller in public. Apache or nginx (the http server) will redirect all trafic to your site to a single file `root/public/index.php` in which you will have some form of `include '../src/whatever.php'`. This way even if your server is badly configured, no one can access to `root/src/secretdangerousfile.php` from the web. &gt; I'm really scared I mess something up security-related. Are there any things that I should watch out for apart from the usual XSS &amp; SQL injection? Never roll your own crypto/security stuff, use others work. Read OWASP top 10 and your library/framework of choice security concerns. You didn't mention CSRF. &gt; Is $_SESSION still the way to handle login-sessions? Nope. No one will ever access the superglobals directly nowadays ($_SESSION, $_POST, $_GET, $_FILES). You use a library which nicely deal with that. &gt; How do people test (as in unit/integration test) their PHP code? PHPUnit, mostly, with a side of codeception/behat/etc. Usually integrated in frameworks nicely. &gt; Is there something like a build tool that can check for syntax errors? Your IDE ? Remember, it's not a compiled language. &gt; Is XAMPP still the way to test stuff locally (on windows)? Laragon is the best *AMP nowadays, but most people are lookig into docker these days. &gt; How do I automatically deploy stuff to a production server? I heard something about Docker but I have no idea how to use it or if it even is what I'm looking for. You'll have to work that yourself. Docker is part of the answer. For a "handheld" Laravel has some paid stuff (Laravel Forge and Envoyer), and symfony must have similar options. &gt; I can't find any resources on how to do things properly. Most things use the same habits as 5 years ago https://phptherightway.com/ for the general thing, but use a framework, and tutorials for that framework.
I would recommend using the [solo learn tutorial for PhP](https://www.sololearn.com/Course/PHP/) which will give you a grasp of all the important PHP components you would need to know. It would also be helpful to learn MySQL or any other database language you would prefer and grasp the insert, select, update and delete concepts. After that you can build a to do list and a basic Content management system. The link below has some great ideas for projects you can build to learn as well. [https://www.projecttopics.info/PHP/PHP-Projects-for-Beginners.php](https://www.projecttopics.info/PHP/PHP-Projects-for-Beginners.php)
&gt; WooCommerce Isn't WC dependent on Wordpress? Not that WP is the end of the world, but for some people having WP be the back-end for a full-fledged, custom e-commerce solution isn't exactly the best setup. I'm a bit biased as I'm a current user, but for my primary client, an e-com company, we've just stuck to Shopify. Between the customizations in templates/Liquid template engine, their API, and external page integrations, we've been able to do 95% of what we've wanted to do with almost no overhead other than cost (I want to say ~$100/mo, but we're a low-volume, high-value storefront). 
It’s not really a competitor in any space outside of small business OpenCart would probably be closer, but it’s a much bigger flaming pile of dog shit
As long as it’s consistent between tests and platforms, it doesn’t really matter
Annotations (via doctrine) are cached in Symfony, even in dev.
If you're not using opcache, then you're reading the files from the filesystem and compiling them every time, so yes you still need opcache for that. 7.3 includes some opcache optimizations (ex. If you do $x=5; return $x; it will just execute return 5;) but those require opcache.
They are called *type declarations*, see http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration: &gt; **Note**: Type declarations were also known as type hints in PHP 5.
They will just close it as you're already supposed to know this
There is also the [Symfony Workflow component](https://symfony.com/doc/current/components/workflow.html). 
&gt;bit biased as I'm a current user, but for my primary client, an e-com company, we've just stuck to Shopify. Between the customizations in templates/Liquid template engine, their API, and external page integrations, we've been able to Check [https://sylius.com/](https://sylius.com/)
Shameless plug: also supported out of the box by https://github.com/doctrine/coding-standard, which will also drop the redundant docblock once the migration is done.
Some more examples: \- [https://github.com/yohang/Finite](https://github.com/yohang/Finite) \- [https://github.com/winzou/state-machine](https://github.com/winzou/state-machine) (+ [https://github.com/winzou/StateMachineBundle](https://github.com/winzou/StateMachineBundle))
I would be even happier with $str-&gt;replace etc approach. I guess you could do it now if you wanted to write a wrapper class and https://github.com/nikic/scalar_objects
Most issues I found were projects (not mine) using mysql_ and depreciated session functions.
Read that typed properties are coming for PHP 7.4 which is great. I'd love to be able to use the splat operator more easily. Is there a reason why we can't unpack associative arrays ? I'm always using array_values before unpacking which looks bad..
There can be several explanations for this. How and on what tests are performed is one. The actual PHP builds can also differ. Servebolt compiles it's own versions of PHP to optimize it for performance.
Have you ever tried it? It's a fucking horror show. To make it any good at its job as something more than a simple single language landing page selling a few things you need to plugin da shit out of it and customize. At that point, that piece of shit generates literally over a 1000 SQL queries per page (admin mode takes 5 to 10 seconds to process each request server side). It basically does not work without caching, but caching adds a shitload of other problems that marketing and managers constantly bug you with, but you can't really fix them or you will lose any chance of updating WP, WooCommerce and plugins. &amp;#x200B; It is not an e-commerce solution. It's a simple cart for WP that should be used only for very simple, dare I say hobby, projects. Using it for any serious e-commerce is a mistake that will lead you to crash into a brick wall of inability to evolve your store at jetliner cruising speeds.
&gt; In 10 years or whatever they remove the old ones Hahaha. PHP is littered with deprecated but still in the codebase aliases. count/sizeof, chop/rtrim, join/implode, strchr/strstr, get_required_files/get_included_files, is_writeable/is_writable (note the spelling!), etc. All of these have been around since PHP4, who's first release was in 2000 and last release was in 2008. They've not been removed yet. [If you add in an alias to PHP, expect it to be around for at least 15 years, if not longer](https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7). 
That's a great way to find if if sites are running old versions of PHP :D
[removed]
Never tried it out, but I love everything Symfony based.
none of those are maintained
Laravel faster than Symfony?
I'm using it in my current project and strongly recommend it. The event system is really nice.
PHP GTK, finally update that thing, Javascript has Node (Electron), python has PythonGTK, C# has windows forms, but PHP has nothing for building native GUIs
I'd like something like Swoole integrated into PHP. The only reason I'm not jumping the Swoole hype bandwagon is because in my career i've used to rely on extensions for functionality, but in the end those extensions always die out and you are left out with legacy garbage and are forced to write your own implementation or risk security issues, among other things. I however, take that as a lesson and I never use non-official PHP extensions (given that even they tend to break from version to version, but at least they are maintanted by PHP devs). It's one of the reasons why I've never even bothered to try things like Phalcon Framework even though I only hear good things about it, I also welcome opcache preload in the upcoming PHP 7.4.
Fair enough
So true.
Thanks for sharing this. I have pretty much the same thing I jumped on this article because I really wanted to see the deploy step as so far I just haven't figured it out in Gitlab and use an external service deploybot. Shame that you's haven't worked it out either I would really like to get a complete end to end solution in one place.
&gt;Disgusting Great well thought out, educated feedback.
Wasn't Symfony 4 supposed to be much faster than the previous versions and also faster than Laravel? Am I missing something?
&gt;However, the cache isn't guaranteed to be there and about 30% of our pipelines would randomly fail because it was missing a composer vendor directory, compiled assets, ... even though those jobs completed just fine. Did you specify a unique [key](https://docs.gitlab.com/ee/ci/yaml/#cachekey) while trying the caching strategy? According to Gitlab manuals: &gt; Since the cache is shared between jobs, if you’re using different paths for different jobs, you should also set a different cache:key otherwise cache content can be overwritten. I had some issues with caching in the past, but they were gone after I set the key.
&gt;Mind sharing what's disgusting? I'm not really a Symfony or React user but I assume having data stored in a controller is certainly a bad idea. I'm not sure about tieing such an important part of your application (login user auth) down to a proprietary provider that would be hard to move away from is a wise idea either. Hopefully, OP can be a little more constructive in some feedback on his reasoning soon.
I'm seeing a common trend in the Laravel community to create packages that lock themselves into that one eco-system. I thought the whole point of packages was you can use them in all your projects, it only seems to be the Laravel community that is hell-bent on doing this. Any reason why?
And I would add Eran Hammer is a really toxic guy that can't watch his tongue and I really don't mind ignoring everything this guy is saying/writing.
They didn't publish the code so not possible to check what is happening there. But seeing the number of requests, I would be more than willing to bet that it's not running in production mode and/or cached not warmed up. Ot is also using the Symfony full-stack whereas Symfony4 promotes the "start with the minimal" approach.
That would be too long to fit the title :)
Because your application is *huge* nowadays :)
Huh! Still using WordPress in 2018? Lol
Inside the post how you'll find out how coding standards break the code.
Yeah, I get the point :) But is there a way to debug "huge" apps as well?
Yes, it can break the code if the type doesn't match, but moving a type to a declaration can introduce unexpected BC breaks anyway, especially if the code isn't tested. As for the CS, yes, the source sniffs are in slevomat, we just made our own adaptation.
What's your dev environment like? I _think_ there might be some filesystem virtualization issues, which cause the load times to skyrocket.
&gt; Our Laravel application needs to be aware of these credentials too, in order to connect to this database. We solved this by setting these credentials in our .env.example file. You can avoid duplicating values by creating a template file and feed it with the current environment values. I usually create `.env.dist` (or `.env.ci.dist`) with placeholders like: ``` DB_USERNAME=${MY_DB_USERNAME} DB_PASSWORD=${MY_DB_PASSWORD} ``` and then populate them with: ``` envsubst &lt; .env.dist &gt; .env ```
I would love to see the [DS](http://php.net/manual/en/ds.setup.php) extension being added to the core extensions.
Having read through your post here and the readme, I'm very intrigued. Can you give me a good real-world example of when I'd want to use something like this, and what benefits it brings over whatever other way the thing might normally be done? Thanks!
It's probably better to not spread wrong terminology. Of course, too late for the title. 
HELLO GUYS! I'm Sergey Romanenko a web-developer with strong will for learning and researching new technologies and architectural solutions. I like creating and using specialised tools for making development processes as efficient as possible. Let me introduce my pet project - Flextype! Flextype is Open Source, fast and flexible file-based Content Management System. That's Easy to install, upgrade and use. Flextype provides amazing API's for plugins, themes and core developers! FEATURES Simple Easy to install, upgrade and use. No installation needed, just copy files to your server! Fast Flextype is realy fast and lightweight! No database required, flat files only! Flexible Flextype provides amazing API for plugins, themes and core developers! Easy editing Use your favorite editor to write your content with plain HTML and Flextype Shortcodes. Dynamic Content Types The flat-file nature of Flextype lets you define custom fields for any of your pages. Open Source Flextype is an open-source project licensed under the MIT LICENSE to set the world free! COMMUNITY Flextype is open source, community driven project, and maintained by community! Github Repository - [**https://github.com/flextype/flextype**](https://github.com/flextype/flextype) Discord - [**https://discordapp.com/invite/CCKPKVG**](https://discordapp.com/invite/CCKPKVG) NO LIMITS With Flextype you can create any project you want. * Business site * Landing page * Personal site * Portfolio * Product site * Documentation * Personal resume * Blog CONTRIBUTE Flextype is an open source project and community contributions are essential to its growing and success. Contributing to the Flextype is easy and you can give as little or as much time as you want. * Help on the Communities. * Develop a new plugin. * Create a new theme. * Find and report issues. * Link back to Flextype. * Donate to keep Flextype free. Common goal of this topic: * Review project (UI/UX/Security) * Find new developers, designers, testers and users.
Did you draw inspiration for the name from [Flex Tape](https://youtu.be/8ci2hj7CSHI)?
But as long as php has no integrated form of concurrent programming, this is useless except for PoCs
Teamtreehouse.com
Yeah, typicall response these days over the net - vote-down-mania. &amp;#x200B; I didn't say PHP is a bad language, or that because WP is shit-quality that means PHP is. No, i use a lot of PHP myself for my daily business stuff. I've done projects using Laravel, Symfony, Slim and that's some good examples of good quality (PHP and in general) code. And in most cases i pretty much like the language very much. &amp;#x200B; All i said was that PHP could be made more of a serious language - and this either doesn't mean that it's a baby-toy as it is. But it has it's flaws: no native annotations/attributes support, no generics whatsoever, strict types but disabled by default - to name the biggest ones. &amp;#x200B; They had their chance when making 7.x to clean all that mess up. Redesign some parts of the language, get rid of all that global / procedural legacy stuff. In short: to make a new, non-backward-compatible, better generation of PHP. &amp;#x200B; And they didn't, bacause this would introduce BC-breaks - and that's a pretty lame excuse, TBH.
For some reason I cannot see post body fields in the post creation view. When I post on other subreddits the fields appear normally. I tried to disable extensions and other things that might affect it. The URL/media forms seem to appear normally though. I saw someone else having this issue as well earlier. Any ideas?
Hi, basically vmware hypervisor, 4 cpus (AMD), 16GB, shared vSAN storage underneath the VM.
[removed]
It's meant to stop all the spam about getting PHP help.
It's also possible in the code. ``` $dotenv = new Dotenv\Dotenv(__DIR__, '.env.ci.dist'); $dotenv-&gt;load(); ``` 
Pretty sure you can't add a body to a media URL or share. Make sure you have the text form selected.
It is the text post form that has no content field, only title. Switching to media/URL shows the media or URL fields correctly.
Really? Does not make any sense to me. As the default sorting on this subreddit is "best" first the original post will probably get buried and the title remains.
I just tested it. I don't see a body as well, only the title field.
You don't say?
You were probably going to ask for PHP related help? :) If so: /r/PHPhelp
Hello I would love to ask you guys if you would be willing to rework my html + css website into PHP one (just language change from english to slovak \[I would provide the translation of the text\]) I wanted to do it by myself but sadly something really important got into it (I have to make a presentation for 700 people and I was told just today) I don't have any money on my PayPall atm, but if you do this for me I promise I could pay you 10$ Thanks in an advance
did you see movie Idiocracy ? 
Just add this to index.php and you're done! &lt;?php echo file\_get\_contents('index.html'); ?&gt;
Ah alright, I misinterpreted what your issue was exactly. 
Thanks, but where should I write the translation? Into that index.php? Or into index.html where I have original english text?
Start studying Google. No kidding. Google can answer a lot of questions, "Which books should read?" included.
$10 is about 8 minutes of a competent developer's time. I think you would be better off finding time to do it yourself.
Check out: https://deployer.org/
That’s something that HttpFoundation achieves, but it’s not a reason (you could just as easily iterate over the superglobals and substitute each value with its escaped version)
TIL - thanks.
I don't think they've done that well. Just because your customers don't know what security is (and thus can't state a requirement) it doesn't mean you're not responsible for security of the product you're providing them. The same could be said about any (non-existent) quality-aspect of WordPress.
I especially like the `Сhange Class Member Visibility refactoring` feature
I believe it depends on karma: https://i.imgur.com/HuFeLUd.png
Yeah, its something I've used in the past I just wondering if anyone had a complete Gitlab solution rather than using anything else external.
https://secure.php.net/manual/en/
https://phptherightway.com/ - the good thing is you get a feeling for the important stuff right away and there are many useful code examples.
Easier, more seductive. 
I don't have any php knowledge atm, but if you send me $10 I promise I could do it some day Thanks in advance
I’d also recommend [Modern PHP](https://www.amazon.com/Modern-PHP-Features-Good-Practices/dp/1491905018).
True, but it doesn't matter really. This code is just awful. Bad in every possible way. Considering just that one file it breaks probably all of the ever-established good practises of programming. * _OOP_ (it's more a paradigm than a good practise, but still)? Does WP uses classes at all? Not in this file anyway, all i see is a bunch of cryptic arrays. * _SOLID_? Apart from the lack of OOP, WP codebase and interface-segregation? Like: c'mon, be serius. * _GLOBAL-STATE-IS-BAD_? Of course, there's plenty of global state in WP. * _KISS_? Yeah, right. [Take a look at this function](https://github.com/WordPress/WordPress/blob/master/wp-includes/post.php#L2208) What the f\*ck is this? In most work-places i've been you would be instant-fired after submitting such an abomination (ok, maybe not instant, but after second try for sure). * DRY? Hard to say looking at just one file, but i have my doubts, after looking at it. You could go on. Also, i would consider a more than 400-500 loc file a smell and a candidate for refactor. This file has at least 4-5k. And that's - partly - the reason why they don't want to do anything good with their codebase. Basically they're so deep down the shit-hole that any quality-improvement has pretty low ROI (relatively to the amount of work required).
Thanks for clarifying and apologies for delayed response. From your initial comment you suggested you either write your own INSERTs or you create your own mapper. Either way - a lot of work. &amp;#x200B; My article (and my work on ATK Data) offers high-level mapper with a friendly syntax, easy to learn and convenient to operate. Surely there are some other tools, and perhaps you made some of them yourself and using internally, which is why I seek insight - perhaps your tool can do certain things better? &amp;#x200B; When it comes to the motives - publishing open-source product for traction alone is a death wish. My goal is to have something usable for myself, my projects, my team and my clients. I don't mind if others use it, but popularity can be a big distraction. &amp;#x200B; The reason to post things here, on reddit, is mostly to get critical feedback. I've published a follow-up article about the import and the Deep Copy feature too, if you want to look at it: [https://medium.com/@romaninsh/multi-entity-copying-and-duplicates-with-atk-data-and-deepcopy-fa1533a6d03e](https://medium.com/@romaninsh/multi-entity-copying-and-duplicates-with-atk-data-and-deepcopy-fa1533a6d03e).
That's simple. It depends only the time you want to invest. What's nice in 2019 is that you have a tone of alternatives. 1. DIY Learn PHP and do it yourself. Estimate time max 2-3h if you look on stackoverflow 2. DIY Github code. You always find already coded apps. Use them or understand what are doing and execute on your code. Estimate time max 20h [https://github.com/rosoftdeveloper/appseed/tree/master/themes/argon](https://github.com/rosoftdeveloper/appseed/tree/master/themes/argon) 3. Done for you: Get a freelancer: From fiver to upwork. It shouldn't cost you too much. 4. Done for you automatically. The alternative is to use tools. If I remember correctly there are tools to do HTML to PHP from the same people ([appseed.us](https://appseed.us)) It does what you need for all your HTML and CSS, Codeigniter, Laravel. &amp;#x200B;
You're right, forgot that! &amp;#x200B; &lt;?php &amp;#x200B; $contents = file\_get\_contents('index.html'); &amp;#x200B; echo str\_replace( '&lt;/html&gt;', '&lt;div id="google\_translate\_element"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;function googleTranslateElementInit() { new google.translate.TranslateElement({pageLanguage: 'en', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, "google\_translate\_element"); } &lt;/script&gt;&lt;script type="text/javascript" src="[//translate.google.com/translate\_a/element.js?cb=googleTranslateElementInit](//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit)"&gt;&lt;/script&gt;&lt;/html&gt;' ); &amp;#x200B; ?&gt; 
Why? Because they will refuse to merge it. Simple as that.
&gt;"start with the minimal" approach In this case you should compare it with Lumen, the Laravel's microframework, that will be a fair test. 
 "Why do these horrible applications exist?" I felt that
Are these.... two bots talking?
All should be migrated. If so would you do it again to PHP or straight to Node or something else?
Who's got time to write bots! I'm making mad coin!!! /s
Actually that's pretty much true. Wordpress is both most known PHP project and probably the worst (in terms of quality) OS project ever created in any language (at least i do not know any worse).
I know this is probably baiting, but I guess I'll bite: I don't think you should migrate and/or start over from scratch with legacy. There are too many moving parts in doing so. Also, team-wise it would be very hard to pull off. &amp;#x200B; About switching languages. That all depends on the project. Modern PHP is by no means a bad language and the same can be said about Node, Python, Dotnet,... If you would go for switching languages I would advice looking into what the strengths are of each application and how they relate to the problem you are trying to fix divided by the experience the team has with the language. &amp;#x200B; &amp;#x200B;
In my experience management hardly ever agree to refactoring or rebuilding a legacy application. And invariably you get the blame for anything that goes wrong with said legacy app even if you haven't touched a line of code.
I'm a dev for a big Magento 1.9 project which slowly grew into a beast to behold. I started working for the company 2 years ago when the project already was about 6 years old. I can confirm it's a drag, you will cry, but when u get to refactor or extract some services out of this monolith and move it to a different or new service and start to break this thing apart you'll get invested in the project.. like its that sad little pupper with a cone around his head who's trying his damn best, but just can't help it and shit the bed after shaking profusely while puking in the driveway. Also you might be sitting on a comedy goldmine. Half of the devs working on the project couldn't make up their mind with guidelines or style which results in hilarious garbage comments and non sensical patterns. Also quality of code may vary wildly (being nice here). Be prepared to read some sick twisted shit nobody knows existed and can't even tell you why is't there in the first place. Also there might be the odd old fella who "always does X" which usually means that fucker made something so obscure for no other reason than to become "the guy that does X" (100% optional but fuck me this happened to me more than once, and after some investigation it usually turns out that that fucker didn't bother to write any documentation just wrote some garbage ass bash script ,he doesn't put in any repo or anything, that exports some data to a .csv file which he then imports to excel to manually edit some rows and send it as an e-mail attachment to person X) Stay strong, improve what can be improved, try to enforce good habits. 
Bites are good. Especially bytes. I am mostly playing with PHP after JS and the entire npm ecosystem that has its ups and downs. I am referring at "migration" mostly for refactoring. That for sure requires ... manual labour. The way it's done is something else. Very nice article! Are you using any tools to handle refactoring? Or just hands on the keyboard?
I do. I'll share it later, as I'm on my way to work.
Not an /r/php thing, I believe it's a reddit site-wide thing.
"Sir we only need to purge all evil from the project! Believe me!" "how much Timmy?" "I don't know.. like a couple of weeks?" "They ain't paying is for this kinda work! We'll keep this shit alive and move on. Live and let live kiddo." "but.. but.. Sir?" "You heard what I said Timmy, focus on the new Projects give it a rest son." "We could save countless hours on maintenance!" "WOHA! So you mean new Features will be done quicker? But our customer is already used to paying like 8h for a new dangling schlong on his landing page..."
If you are using phpmyadmin, adminer, or any GUI to manage your database on a public-facing website, I feel like you have all this coming to you, and more. Use a _proper_ tool that supports SSH tunneling.
Hahah. Right Timmy! Work 16h for a single bug! The endless world of bugs bunny...
Don't enable Xdebug unless you are _actively_ debugging a request. I wrote about it here: https://jtreminio.com/blog/developing-at-full-speed-with-xdebug/
I feel you with the comedy goldmine in the code. Some of the shit I’ve seen: - Typos in variable names but they’re consistent so there’s no problem. I once literally saw $varaible used thusly. - Expletive ridden comments - Data structures transformed into a different format only to be transformed back again. - Values sent to the DB to have them formatted via string or date functions - Multiple, separate classes or functions that share code that is 95% identical - IE 6 workarounds - 3 different versions of jquery used at once Probably a lot of great other stuff for be long since repressed. 
[I have the text option as well](https://i.imgur.com/nyiEAZc.png). Love when these things are nice and obscure :)
Legacy code has been my life for years; it's been both satisfying and remunerative. Of course, any mention of legacy PHP demands that I point out the existence of my book [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp). It has helped a lot of people; if you are stuck with a legacy codebase, maybe it can help you too.
I think that you can ditch the time limit. You've got two great ideas: 1) Explain the new version in 30 seconds. 2) Explain with diffs. But I don't think that those really interested in the later idea need the constraint of the former idea. So go ahead and show all the changes in diffs. Thanks!
Hm. All this post does for me is that it reminds me of the astronaut who fell in love with that annoying beep beep beep sound that repeated for over 24 hours and that he couldn't suppress. If he didn't fall in love with it he would have gone insane. (Well, that's basically the same anyway.)
I would really like to recommend this book as well. It's a great book about legacy code. 
&gt;I'm a dev for a big Magento 1.9 project &gt; Also you might be sitting on a comedy goldmine. Half of the devs working on the project couldn't make up their mind with guidelines or style which results in hilarious garbage comments and non sensical patterns. Also quality of code may vary wildly (being nice here). Be prepared to read some sick twisted shit nobody knows existed and can't even tell you why it's there in the first place. Lead dev on a project that started out on cake 1.2 here. 500k SLoC later... It's on Cake 2.10! And yeah, there's been 6 developers going through this project, and the oldest parts of it date back to late 2011. Our record of longest-lasting bug is currently at 4.5 years. We still have a hilariously long list of internal things to fix, which stacks up against the hilariously long list of new features that are going to be added. I should note that there's two devs left on this project, and it's the only project of the company (it's our SaaS platform). There's code here that works, as long as you don't try touch it. There's code here that looks like it was written by someone who had a gun to their head and if they used too many characters per line they'd get killed. There's code here that I ended up having to grab a sheet of paper and mock-execute it by hand just to be sure on what it did (I wanted to try put xdebug on it, but xdebug does not like this codebase!) That said, the project is getting better bit by bit. We still have almost no tests, but we're expanding tooling to let us run tests so we can start writing tests (which sounds circular, but getting buy-in on this hasn't been easy). I prefer this to working on agency stuff where it's almost a production line of code. I know this code now, I know where it creaks, where it complains, when it logs, where it might break. Every little bug I fix or every bit of code I refactor is a small nudge in the right direction. It might take a few more years to get the code to that place, but we'll get there, one nudge at a time. 
Why would you extend a class to use as "mock" instead of creating a mock based on the interface?
You know most of them didn't start out as legacy projects. One day there were cutting edge or at least appropriate for the time. They just didn't age very well or didn't grow in a healthy way or turned halfway through into something completely different. I wish you al the best. Don't be mad. If you don't like what you're doing maybe it's time to move on. GL friend.
Using PHPUnit's built-in mocking interfaces (createMock($type) or getMockBuilder($type)) is the standard way to handle this. I find them way more flexible, maintainable, and readable than this solution.
If you wanna compare Laravel to Symfony yes. Although let's keep in mind that the benchmark was about the speed improvements brought by the newer PHP versions, not comparing framework performances :)
A gree, let's forget the time limit. What features would you add?
It's about removing obvious BC break. CS can't handle that, AST can. What do you mean by own adaptation? 
"You can come back to that later, we need __MARKETING_HYPE_PROJECT_23415__ done. We have a trade show coming up and we already promised it would be done by then." "Why wasn't this brought to my attention and fixed sooner"
A long block of code that reaches out to a Web service, massages the data that gets returned, has some ineffectual attempt to handle error conditions, followed by ...absolutely nothing that actually uses that data.
With the amount of work that has been done by the Swoole developers, i do not understand why nobody from the PHP developer reaches out and talks about integrating Swoole as a official extension. This increases exposure, more eyes on the code and frankly, gives PHP finally official NodeJS functionality ( way to late ). Instead of wasting time... We already know that Swoole can give a 300% a 400% speed increase compared to basic PHP, bringing it on par with Golang or even beating it. https://www.techempower.com/benchmarks/#section=test&amp;runid=ddefc4c1-dcf1-48d8-8190-7394258bae36&amp;hw=ph&amp;test=fortune&amp;l=zijncv-3 https://www.techempower.com/benchmarks/#section=test&amp;runid=ddefc4c1-dcf1-48d8-8190-7394258bae36&amp;hw=ph&amp;test=json&amp;l=zijncv-3 Maybe this is why people keep positing that PHP is dying. Yes, PHP is losing a lot of developers to NodeJs, Go, ... It has been going on for years. Part of the reason is performance and coroutines. And the snail speed that PHP is developing anymore. Facebook splitting with PHP is one reason. They feel too much bound to PHP its slow development cycle and thus making it hard to stay compatible with PHP. Facebook adds more functionality that takes PHP years to add. So when that functionality finally gets added to PHP, Facebook has a issue where their internal code already uses their own implementation. So they do not feel like rewritting all their code just to stay PHP compatible. It feels by trying to stay past compatible as much as possible, combined with a extreme slow development cycle ( one release every year ) its missing out on the fact that more and more developers are actively moving to asynchronous development.
Don't take me wrong please. I don't have anything agains terminology, It's about readers and their language they understand - e.g. "Up Goer Five" - https://xkcd.com/1133/. I think most people would not understand "type declaration", so they might not even open the post. Which would be a pitty, if they use "type hints" in their code and also have this problem.
You surely don’t have added a public method to your blog model, right? How about the single responsibility principle?
I'd have an ImageService class that would add the image to the database and move the image to its correct path. The ImageService class would be constructed with a PDO instance for the database connection, the path to the image directory (where the images will be moved after being uploaded) and the name of the gallery table. $imageService = new ImageService($pdo, $imageFileDirectory, $galleryTableName); if( empty($imageTitle) || empty($imageDesc) || empty($imagesid) ) { header('Location: produkter.php?upload=missing_required_fields'); exit(); } $uploadedImagePath = $_FILES['file_field_name']['tmp_name']; try { $imageService-&gt;addImage($imageTitle, $imageDesc, $imageFullName, $imagesId, $uploadedImagePath); } catch(\Exception $e) { log_error( $e-&gt;getMessage() ); header('Location: produkter.php?upload=server_error'); exit(); } header('Location: produkter.php?upload=success'); exit();
Disneyland
More precisely, it's a new design vs old design thing. Use the https://old.reddit.com/ domain, and see the text option magically reappear.
&gt; our pipelines would randomly fail because it was missing a composer vendor directory LPT: Put the composer cache (`/home/[username]/.composer`) into the gitlab CI cache. And do `composer install` in every job. It should only take a few seconds, and you are caching multiple versions of different packages that every job can install as it wishes. That way you don't have to use a separate cache on every branch or pipeline.
Fully agree. We already have at least: \- Heidisql(even on linux) \- ValentinaDB \- Datagrip/Database plugin from other Jetbrain's IDE 
Even with a key set, I've run into missing caches. Once you have more than one runner, it's even less of a given. I hadn't thought about using artifacts for this, though, that might still cut down on build times.
I'm interested, as well. We currently use Deployer on some projects, but I'm not sure we're using it optimally.
I'm not mad, I'm sad.
[http://php.net/manual/en/intro.pthreads.php](http://php.net/manual/en/intro.pthreads.php)
&gt;on a public-facing website Nothing wrong with having them on a public facing website the real issue is having them on a public facing port.
Totally agree, besides security, a tool is much faster! On Mac I’m using Sequal Pro, pretty awesome.
Coming from Java's: `Twitter twtr = org.mockito.Mockito.mock(Twitter.class)` the idea of writing mocks manually seems absurd.
&gt; In our app we’ve set up an event listener that will actually send the tweet when the BlogPostPublished event is fired. I'm not going to include that code in this blog post as it's not relevant to the test we're going to perform. The test you should be performing is verifying it dispatches an event. You're not isolating your components.
Oh that's the best stuff. You can bring a hacksaw and rip it the hell out with no qualms
&gt; Let me preface what I am about to say by pointing out that there is a lot of documented evidence that I am a strong proponent of async PHP. I am happy to provide links, in DM, if a Google search is insufficient to demonstrate this (but I don't want to derail my point with what may seem like self-promotion) The desire for async PHP, from the wide community of users, isn't sufficiently big enough for _anyone currently involved in contributing to core_ to carry this baton. Even if it was; Swoole is one of many good and different [implementation] approaches to this problem. ...Which is already an extension people can install for themselves. Given the relatively small number of people who would continue to use an extension for async PHP, and the vast amount of effort it would take to officially support this for all of the platforms and concerns PHP core has; this is not a good idea. The rest of your comment makes many assertions which I neither agree with, nor see any data to back up. You're entitled to hold whatever opinions (on the decline of PHP you perceive, and the reasons for it), but your opinions are likely to be better received given data to back them up. If you're curious which opinions I'm referring to: - "why people keep positing that PHP is dying" - "PHP is losing a lot of developers to NodeJs, Go" - "It has been going on for years" - "Part of the reason is performance and coroutines" - "And the snail speed that PHP is developing anymore" - "Facebook splitting with PHP is one reason" - "They feel too much bound to PHP its slow development cycle and thus making it hard to stay compatible with PHP"
Yes, highly recommend picking up this book. Just recommended it to a friend working in a legacy codebase a couple days ago, in fact!
No worries, we're all adults and PHP devs here. I also think this is about the readers in that we should all help each other improve. This raises all PHP developer boats. PHP 5 is essentially dead and we're talking about version 7 features, right? I'm of the opinion that perpetuating outdated terminology is hindering the collective knowledge among devs. Then again, it's not that big of a deal. 
I'd prefer updates to php-ui, but I think we're both out of luck.
Tools include PHPStorm to give you static analysis warnings all over which help a ton to detect issues and bad legacy crap, PHPUnit (test driven refactoring is super important to make sure the original behaviour is kept), etc. Great way to do it IMO is grabbing a "Golden Master" copy of the output and comparing against it after every change you make. This normally means spitting out the HTML of the page or a screenshot for example, or some JSON output for an API, etc. Not always applicable though, depending on what the output actually is. Usually you try to give it as many inputs as possible so you can ensure most code paths are covered. Then you put all those inputs and outputs in test cases to be validated as you refactor. Decent article I just randomly pulled up explaining this process: https://blog.codecentric.de/en/2017/12/refactoring-algorithmic-code-using-golden-master-record/
This is actually great. Good job to the devs behind swoole. 
some comedy from my company: - jquery loaded but used only vanilla js. - in some projects where jquery was loaded, only inline js / jQuery was used for onclick, onblur, etc -events... [exhibit 1](https://i.imgur.com/LfvMJqI.jpg). ... there is much more (also the crap from your list above is 100% true for us) but I am now on holidays and don't want to remember more.. my blood pressure is raising again thinking about it -.-
3 different versions of jQuery.... smells like wordpress.
Very briefly went over it because I'm at work but overall easy enough to figure out the structure, and think it could easily be modifiable. That being said, moving forward you probably want to look more into MVC style which will break it out more object oriented. MVC is Model - View - Controller. You have objects as your models, an example would be your user model which would have properties like the name, email, etc... Then you'd have a controller dictating the logic for logging in, and the view is 100% for style. It's mostly HTML with variables for data, and should have almost no logic in it
It seems to me that all these vulnerabilities require the attacker already having access to phpMyAdmin. Is this correct?
You know, I actually tried that hence the classes in the beans folder, but when I tried writing SQL inside of functions in files outside of the view it wouldn't work. I later learned it was because I had to pass in the database connection variable as a parameter to the function. Would you think it would be useful to try out a framework or not? BTW I won't actually be doing web dev as a career, but it's nice being able to make a web app, so I don't know if it'd be a waste of time or if my own MVC would serve its purpose for small personal apps I make.
This was super helpful! Thank you.
No, it looks like 2 and 3 are cross site attacks, meaning if you are logged into PMA, and visit a malicious site, then you are vulnerable.
This post is basically based on the "other" definition of legacy software, that I like so much: it's the piece of that makes money. Otherwise it would have been thrown away, a long time ago. 
Not free. Under windows we use NuSphere PHP-Ed (supporting up to PHP 7.2 right now) with a pretty neat debugger (not xdebug) that supports remote debugging and reverse debugging (set backwards execution point in the same context/function). 
WAMP Server is a good option to handle 32/64 bits and several PHP/MySQL/MariaDB versions under windows. Althought a bit cumbersome to install/use everything fine, once you got it's a nice development environment
The first 'chapter' rang entirely true, but there are a few bits in this thereafter which left me double-checking this wasn't actually a bone-dry exercise in sarcasm. &gt; Having a product like this tend to generate income. Vast numbers of apps, especially internal LoB-ware, don't generate income, at least not directly, even though they may be absolutely required to keep the visibly income-generating parts of the business moving. &gt; The most significant part of that income is invested back into the project. Even if it _is_ a product which is directly sold and therefore directly and unarguably generates income, I feel like this needs a `[citation needed]`. Plenty of companies would siphon the most significant part into R&amp;D / loss-leading of future products (in a relatively 'best case') or fat executive-grade bonuses (in more of a worst case). &gt; Most refactorings tend to start with the question from management that is frequently a variation of: “what are the worst parts of the application, and how can we make them better”. This sentence is poetry to a developer’s ear. This was probably the most Poe's Law of the lot, to my ears. I don't think I've ever heard management proactively suggest refactoring, asking the devs where they would ideally like to begin. I've only ever seen developers beg to refactor while management says "what, spend x man-months getting from A to A? No new features, no clearly tangible cost savings or perfomance boost, just the same as we have now but you lot like it for using tidier patterns? Are you fucking mental? Get on with the next customer-facing deliverable at once" (and if you're about to start typing angrily at me that refactoring can create tangible cost savings / performance benefits, you're preaching to the choir, but in my experience it's very difficult to predictively quantify these with any confidence, and tbh most developers are quite bad at even attempting to qualitatively describe the benefits in those kind of management-grokkable terms) 
It entirely depends on the scale IMO. If you know it's only ever going to be a tiny site, 4 or 5 pages, then an MVC framework might be overkill. If you don't know how much it might grow, but only starting with 4 or 5 pages, it might not be a bad idea to implement. The philosophy behind MVC isn't a bad one, it's about organization. I don't really make desktop apps, but I'm sure they probably have something similar to separate logic, style and data. I used to use Yii at my last job (PHP) and I actually liked it a lot, I've used Zend before, Laravel, and Zend Expressive too. Currently using C#'s MVC framework as my new job requires me to write in C#. Frameworks just cut out a lot of BS. Define your database, and it will write all the code for you for your model, and can even generate a simple CRUD interface for you, especially useful to use in an admin panel. Also combined with composer, and you can usually grab stuff other people have written so you don't have to re-invent the wheel, like user classes, and login, etc...
I have a PHP injector project. It's pretty slick(other devs words) and creates small projects with CodeIgniter or Laravel from an HTML theme. It separates HTML code in components and creates parametrization for all the things that can change in the UI(text, url,images) The question is: Would you start with a project creator tool on any HTML theme(themeforest, creativetim, colorlib, or sketch exported) to have a codebase or would you prefer to just start from 0 and inject most of the code manually?
Even if the automatic tools don't work 100% I would spend some time to try one. It can bring a boost or solve some 40-50% parts of the code. Which can be used as example. I always use replace all stuff and it works most of the time. A tool is similar to this. Maybe even smarter than a regex. Good luck!
I think two of these issues (#2 &amp; #3) could be carried out against a PHPMyAdmin install on a non-public port. \#2 is a CSRF attack, so the attacker would have to know the domain, port, and path to craft the URL. These things would be harder to come by if the install was on private port, but not impossible. \#3 is an XSS attack using table names, so it affects PHPMyAdmin installs on public and private ports equally. However this attack requires that someone has created a malicious table name in your database, in which case you're probably already screwed in other ways.
You should really use a framework to save time. Take a look at Symfony or laravel. Furthermore you won't have that much trouble with mysql because these frameworks already have an ORM like doctrine. 
I noticed that you can install phpmyadmin through composer but you can't update it....doesn't that defeat the purpose? I saw with the 4.8.x series composer was an option. Figured it would make it easier than having to manually update phpmyadmin every time there was an update/patch/whatever. `composer update` downloads all the latest deps but if phpmyadmin itself is version 4.8.3 it will stay 4.8.3. I can't find a way to update it to 4.8.4 without manually downloading 4.8.4 like always. I know it is possible because bolt is able to update itself to the newer release with a `composer update`. Any know what I'm doing wrong? Or is that just how it works for phpmyadmin?
Actually, no. Take a look at [PHPUnit 4.5 and Prophecy](https://thephp.cc/news/2015/02/phpunit-4-5-and-prophecy). 
I think legacy companies will hire more and more AST experts. It was never [easier to upgrade huge amounts of code](https://www.tomasvotruba.cz/blog/2018/02/19/rector-part-1-what-and-how/#what-are-architecture-refactorings) than it is today. And do such a big upgrade must be really fun :) Is anyone here with such experience or position? 
I was originally going to write about documentation generators and ask for experiences of newer stuff that works well with modern type-hinted PHP and PHP parsing. Not sure if that counts as a "help question" though. :)
Hmm should check with old reddit as well. Any idea how much Karma is required in case it is related to Karma amount?
Yeah I checked that now. Super strange.
I wonder then, why no serious php gtk application exist. It's available almost 20 years. And:I bet there's a reason NodeJS and friends aren't using threads ;) 
This is actually really interesting. My company has recently been migrating some of our microservices over to Rust to take advantage of the raw performance / concurrency it offers with Futures, it's yielded some really good results so far. In terms of value for time, using this on some of the larger rewrites may offer better results (in terms of time spent, not in terms of performance) which we could use elsewhere. I'm going to install this on my local environment this weekend and have a play around, thanks for posting.
Looks like its an issue with the new Reddit redesign. If I switch back to old, I see boxes for the title and optional text. I only see the title box under the new
&gt; Data structures transformed into a different format only to be transformed back again. &gt; Multiple, separate classes or functions that share code that is 95% identical I recently refactored a method that fetched every record in a table (~150,000 right now) and performed some pretty expensive transforms. It then, in an almost 1:1 copy-paste job, fetched them all again, performed *the same transform*, but just returned them keyed by the DB primary key instead of sequentially. I got the page load on my local machine down from 90 seconds to about 12. Still dog slow but it’s 3-4 seconds on the hilariously oversized production server, and there’s only so much refactoring can help awful, awful foundational decisions. We inherited the project and somehow wound up in a situation where we’re obligated to get it working satisfactorily (totally our fault), but we plan to refuse any further development once our side of the deal is met because it’s impossible to build on. And when I say “we” I mean “management”, I refuse to take any responsibility for this piece of shit. 
As long as I've been around PHP, there has always been an "us versus them" mentality when it comes to Laravel and the end result is usually those who engage in the Laravel ecosystem are writing components/packages/whatnot specifically for the Laravel ecosystem and those writing more general purpose tools are writing general purpose things that get wrapped into Symfony bundles or Laravel packages or whatnot. Even recently trying to use Laravel core components as standalone packages and NOT build a Laravel application, while it's possible I honestly find that the ecosystem and core project so heavily favors the `composer require laravel/framework` approach over the `composer require illuminate/*` approach that you're almost asking to make your life more miserable if you try to use components standalone.
At some point, I traded in Heidi for Dbeaver. Wine kept shitting the bed in interesting ways, a more native-ish tool worked a whole lot better.
Ah, the case of the evil Admin.
That's probably your fault. https://getcomposer.org/doc/01-basic-usage.md#package-version-constraints
This kind of router is called trie-based routing, and it can be very effective. Here are a few examples from other languages: - https://gdstechnology.blog.gov.uk/2013/12/05/building-a-new-router-for-gov-uk/ - Nginx's [location matching](https://github.com/nginx/nginx/blob/master/src/http/ngx_http_core_module.h#L455) - [libr3](https://github.com/c9s/r3) - contains some interesting optimizations, like condensing single-path subtries
Only 1.5 more years till EoL! I can't fathom how much it would cost to port that store over to M2
Yup. Mockito is fantastic in the Java space. Having to switch between Java and PHP stacks frequently lately, it's nice that PHPUnit and Junit + Mockito are very similar in methodology... just have to remember the finer details of mocking and verifying.
Sure, I guess I don't see why you can't use another mocking framework (in Java, the test frameworks and mocking frameworks are often separate libaries). That post still isn't arguing in favor of extending classes to create your own mocks though like OP's article. While other people's use cases may vary, I've been really happy with PHPUnit's built in mocking capability, and I'm pretty sure their mocking API has improved since 4.5. Just out of curiosity, I've pulled a mock example from your article and wrote an equivalent PHPUnit mock. Prophesy example, for a mock of class 'Reader' when the value '123' is passed to read(), it will return 'value'. It also must be called once. $reader = $this-&gt;prophesize('Reader'); $reader-&gt;read('123')-&gt;willReturn('value')-&gt;shouldBeCalled(); In current PHPUnit, I would write something like this: $mockReader = $this-&gt;createMock(Reader::class); $mockReader-&gt;expects($this-&gt;once) -&gt;method('read') -&gt;with($this-&gt;equalTo('123')) -&gt;willReturn('value'); To me, those look pretty similar, and I'm fine using any sane mocking library (I use Junit + Mockito in Java often too). Still disagree with OPs non-mocking library solution though.
An IDE can teach you a lot. I think using warnings from your IDE to teach you about your code as you code is invaluable. I'm always surprised at how many developers I see disabling or ignoring warnings. They'll spend hours struggling with some mysterious problem that would have been solved or avoided entirely if they had cleaned up some dangerous code. An IDE can teach you things you didn't know to ask about. There are also things you miss from using an IDE exclusively but if you love and understand VIM you probably have a grasp on those already.
I install via git (the STABLE branch). Though that still requires a `composer install` on top so maybe it makes more sense to go 100% composer. 
Any decent IDE will have a vim emulation plugin that lets you edit your code with familiar vim keybindings and modes, so you don't have to leave behind that comfort.
I don’t find Sequel Pro to be faster than phpMyAdmin; the opposite in fact. 
&gt; An IDE can teach you a lot. I think using warnings from your IDE to teach you about your code as you code is invaluable. Can you elaborate on that at all with maybe an example? I know it might be hard to think of one right now but if you can I would appreciate it. 
Personally, unless I'm working in a purely compiled language I don't use IDEs. I use sublime text, works fine
This has been done a few times before, for example [Rapid Route](https://github.com/TimeToogo/RapidRoute). But it does sound like you’ve made further speed improvements. 
i use netbeans, it's free and works great
Saving time is great. Ctrl clicking to go right to a method. Seeing php docs on methods right away. Not having to type out namespaces repeatedly. Good to start out in a simple editor but after awhile these little time savers really add up.
IIRC the composer install for phpmyadmin is actually just grabbing a zip file (at least if you use the phpmyadmin composer repo), so it can't do a clean in-place upgrade. 
Thoughts? Use it and see for yourself. You can read all the articles about other people's experience but nothing will ever be better than spending that time to try out the product. Give yourself a work week, there's a free version available I believe. Spend a hour setting it up, really get to know it, go through the features, from searching to clicking through the packages to git integrations. 
i'm sure there's a git blame plugin for vim, but like most others have said. Most IDE's have vim plugins/emulators. Experiment then go from there.
I find great enjoyment using PHPStorm for symfony development using the Vim Plugin (IdeaVim).
I used to be in the same situation as you, started as Linux system admin, and also use only vim for php development. Have tried several open source ide but never stuck with any. My requirement is that it needs to be cross platform as I use Linux, OS X and Windows. phpStorm was the last one I tried because I wanted to check all that FOSS had to offer. After trying it for a short while and watching a few videos, I've stuck with it and only rarely use vim for pasting codes from phpStorm onto the server. It's made my life so much easier. I'd have a very hard time dealing with frameworks if still using vim.
I was planning to try it out VS this weekend (since its free i think), but I just wanted to hear from others if it actually made them more productive or they could recall a noticable impact on switching from something "basic" like Vim to an IDE -- I spend a lot of time reading code, it would be nice if I could spend a little less time doing that.
Hey, PontiacThunderTitz, just a quick heads-up: **noticable** is actually spelled **noticeable**. You can remember it by **remember the middle e**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
PHPStorm's debugger is the only reason I outright bought it. It's a dream.
hEy, PoNtIaCtHuNdErTiTz, JuSt a qUiCk hEaDs-uP: **nOtIcAbLe** iS AcTuAlLy sPeLlEd **nOtIcEaBlE**. yOu cAn rEmEmBeR It bY **ReMeMbEr tHe mIdDlE E**. hAvE A NiCe dAy! ^^^^tHe ^^^^pArEnT ^^^^CoMmEnTeR ^^^^CaN ^^^^RePlY ^^^^WiTh ^^^^'DeLeTe' ^^^^To ^^^^dElEtE ^^^^ThIs ^^^^cOmMeNt.
PHPStorm seems to be pretty amazing -- do you miss anything about vim or does that plugin fill the gap for you?
What makes it better for refactoring in your opinion? Refactoring is always hard. I rely on testing, and `grep` mostly. Does it provide something that you would consider invaluable for a large project refactor?
&gt; I'd have a very hard time dealing with frameworks if still using vim. Why do you say that? I don't think I have a hard time dealing with frameworks like Symphony, Laravel, CakePHP, etc, but maybe I *do and don't realize it*? What makes it easier to deal with large code bases like that?
I’m a newcomer to development, and use and love PhpStorm, it’s great for figuring out where and why I’m messing something up. Also being able to quickly see methods of a class while typing has saved me lots of googling.
Static analysis, type hinting, warnings if those types don't match, warnings about potential exceptions not being handled, etc. Honestly I think you'll be surprised how much you didn't consider previously once you launch it and look at your project.
Yes I was having real problems in VS Code with triggering breakpoints in PHP that have come from an Ajax call, let alone having to switch debuggers for each language. Phpstorm handles it all seamlessly.
Right-clicking a variable, method, or class name and selecting rename and having the IDE automatically update ALL references (across files) for you while you only edited one usage. 
Also selecting a set of properties in your class and generating the getters and setters with maybe two clicks. This is especially useful when you have 10+ properties (eg a DTO). 
I imagine this is a counterpoint to a lot of the replies in this sub, so hopefully it adds some value (or another perspective, at least). I use vim as my daily editor for Laravel, ExpressionEngine and Magento 2 projects daily. What follows are my findings based on using the big three: VSCode, PHPStorm and vim. In my vim setup, I have the ability to view a `git blame` line-by-line, add git changes and push to github without leaving the editor. That functionality is added via `vim-fugitive`, a plugin by Tim Pope. I'm also able to jump to inherited classes or interfaces via a combination of `vim-gutentags`, `vim-laravel` and the PHP language server. I get autocompletion of methods or classes via the same plugins. I'm as fast (or faster) than a lot of my team in the editor, based on workflows I've been using over years with vim and tmux. In short: you can pry vim from my cold dead hands. _However_. VSCode and PHPStorm already have a lot of integrations built-in that I had to manually curate in my dotfiles. And installing new plugins are a couple of mouse clicks (or keystrokes) away, which are a lot easier to install than via `vim-plug` or whatever. Vim as an IDE is a second-class citizen. I've built up my dotfiles over several (yes, 3, maybe more) years, across different languages and interests. And with every new language attempted comes the need to install more plugins to so that things work as expected. If curating your dotfiles is a masochistic hobby and you enjoy the process, it's possible to get to IDE-level functionality with vim. But if you just need to get shit DONE (i.e. work), a preconfigured IDE is the way to go. --- Also, here's how I got to near the same speed in VSCode that I have in vim (key combos to do different things): * Install the vim emulator for VSCode, it's very good. I have run into issues with undo/redo, however. * Open vertical split: `ctrl + |` * Open horizontal split: `ctrl + k, ctrl + |` * Switch to your first split … n split: `ctrl + 1` … `ctrl + n` * Open a terminal: `ctrl + \`` * VSCode uses tabs by default, to switch between press `ctrl + tab` or `ctrl + shift + tab`
VIM is a great tool. It is invaluable in many circumstances. But, it’s not an IDE anymore than Sublime is an IDE. It’s an editor. You have a desktop/laptop computer that can process billions of instructions per second and contains billions of bytes of memory. You can afford a program that uses a bit more memory and CPU than what vim takes up. Give it a try. You might be surprised at how much you like it. You might not. But you’ll never know for sure until you try. :)
The helper hints in php storm are fantastic. Things like “variable might not have been initialized” and the likes. I have noticed higher quality code from developers using it vs him or vs code due to the inspections and helpers. It catches things that can be easily overlooked while the code still functions in ideal situations. Also refactoring and such as previously mentioned is very helpful.
I love vim too. I use vim all the time. But phpstorm is just sooooo helpful to not use it is a little silly I think. 
Its a class/function reference, not a guide.
Still, its very incomplete. Maybe for an experienced programmer it is fine, but as a beginner it rarely solves my problem. Vue.js documentation is awesome. I think most of the bad reputation PHP gets, comes from this crappy manual. 
&gt; exhibit 1 Jesus. Here I was reading this, feeling bad for having a VERY legacy-looking app even though it was built as recently as 2015. But then I see your exhibit and I feel soooo much better. What a nightmare that must have been to get through. I'm so sorry you had to parse through that and work with that.
&gt; Values sent to the DB to have them formatted via string or date functions Oof. Ouch. That's bone hurting juice.
From my experience it will make your code reading more pleasant, it'll be easier to jump between files and click into function definitions. Searching will be easier as well as it supports regex like vim but also easier to control the scope of your search. It's also fully integrated with git so i'll know right away if I'm the idiot that wrote this piece of garbage before I go off calling the other idiots out. In addition, code formatters and sniffers are also built in and fully configurable. You'll get real time complaints in things like cyclomatic complexities, redundant coffee... Etc if that's what you're looking for. 
&gt; most of the bad reputation PHP gets, comes from this crappy manual Uhhh, nope. Trust me, PHP has some decisions in the past that were very very worthy of giving the language a bad rep. Nothing to do with the manual. Also, that manual was recently ("recently" being 5 years ago, which is recent for me at least) overhauled. Turns out, that manual is run by volunteers. So if you dislike it, you can get on the volunteer team and help improve it. Give it a look.
The ability to jump back and forth between classes and methods is a big help.
Put caret on a function name anywhere in the code, press ctrl+F6, type in new name. Boom, all occurrences in the entire codebase have their names changed. Wanna change a file name? No problem, everywhere that refers to that file will also change. Even the comments. You wrote some sub-optimal code that could execute faster? PHPS will tell you that, and allow you to fix it in four key presses. It's a godsend. 
I'm currently rolling with neovim with plugins: * vim-gutentags * vim-snippets * pdv (generating doc blocks) * ultisnips (used mainly as dep of pdv above) * lightline * and some other non-critical things that i like I never used vim-fugitive, but I did like what I saw. &gt; Vim as an IDE is a second-class citizen. I've built up my dotfiles over several (yes, 3, maybe more) years, across different languages and interests. And with every new language attempted comes the need to install more plugins to so that things work as expected. But I love building and tinkering with my vim workflow, so vim is for me. Same, and I also enjoy tinkering with it. Now I almost exclusively write PHP for work, and have less time for side projects, and devops work like I used to do. Thanks for the insight. I am definitely going to give VS code a shot first, and worst case, my dot files aren't going anywhere. 
I use ultisnips (a vim plugin) that can *almost* do that. I type a hotkey, and it generates the getter or setter (depending on hotkey) and I can fill in the docblock and the signature. But it's not automatic.
``` if (foo) { return bar; } else { return baz: } ``` Will trigger a warning, and with a couple of key presses you can turn it into ``` if (foo) { return bar; } return baz; ``` for example. It'll also tell you when properties can safely be made private or protected. It'll look for ``==`` and tell you where you could make the code safer by using ``===`` instead. If two functions do the same thing and you use the slower one, it'll let you change to the faster one with two keystrokes, and will tell you how much faster that function is. I learned more about PHP from using PHPS that I did from my uni. 
That's the kind of magic I don't have with vim. I'm sure there's a plugin for it, but I definitely don't have it, and I'm sure I'd have to configure it. That does sound very handy for refactoring.
And for extracting methods into parent classes. It's easy to "pull up" methods and properties into a parent class without having to worry about copying/pasting. Highlight -&gt; pull up -&gt; verify -&gt; done.
If by VS you mean VS Code, it's not all that great for PHP, IMHO. You can evaluate PHPStorm for 30 days for free, or even use it for free if you go with the bleeding edge builds. Might want to try that instead. 
Honestly, I'm starting to think that's why my colleagues find obscure things when reviewing large pull requests when I know they didn't even run the code or tests.
As I think you've been discovering in the replies here, that's going to be the very common answer you'll find. VIM will _almost_ so all these things, but the IDE will do it better, more completely, and more effectively with little to no effort. That's the real power of the IDE specifically designed for the language is that it just works better with less effort.
I always would do the latter control structure, and I almost never use loose comparison, and I feel like I always deliberately set methods private, protected, or public, depending on whether i think a class could/should be extended, or whether the method needs to be tested. That said, it would be pretty awesome to have the IDE check my work on that kind of thing.
I mean I like vi as much as the next guy, but how do you debug your code? PhpStorm's debugger is great.
My advice is to download the PHP Storm trial and use it on a side project. Thats what I did, after 2 weeks I ditched NetBeans finally. With the VIM plugins everyone has mentioned you should be fine.
Ask your developer friend what git plugin that is. I need it! That’s sweet!
I recently went the other direction—PHPStorm -&gt; VS Code -&gt; VIM. I almost exclusively use VIM, but once in a while I use PHPStorm, especially for the debugger.
This looks a lot like code I would've written 10+ years ago and thats not a bad thing. I think this is a good way to learn PHP because its an easy way to learn PHP. You're not messing with frameworks or composer or anything else that gets in the way of learning the core language. With that said the next step would be composer and frameworks. I don't know what the requirements of the exam are, but unit tests would likely impress your teacher and is a good skill to learn. Its hard to tell just reading through code, especially since I am not going through every file, but since you are using raw $_GET and $_POST be careful of XSS.
The plugin [doesn't fully support `whichwrap`](https://youtrack.jetbrains.com/issue/VIM-282). No support for wrapping to the next/previous line with `l`/`h`.
Phpstan + https://github.com/phpstan/phpstan-deprecation-rules might be able to help detect usage of deprecated calls. I do enjoy phpstorm but if you feel more at home in vim, that's ok if your ci/local tests catch potential issues!
I have a similar background and requirement as /u/apropos626. Loved vim. Was never going to give it up. Then PHPStorm happened to me. Ease of navigating your source, generators, templates, plugins, refactoring tools, and style enforcement/hotkeys are all great features (and just scratching the surface). I find auto-complete of classes, methods, and properties invaluable. It has features I hear are nice but don't use (prefer the CLI) for integrating Docker, unit testing, xDebug, etc.
Lol. Downvoted. Mkay. 
It's key for refactor. Phpstorm it's a must imho for professional php development. Other things it help you is extracting code to new method, or extracting a variable. It makes you go faster. And vimidea plugin adds some if the vim goodness to phpstorm. I always use this plugin 😊
On the server hacks = VIM git push origin master = IDE
Yes, and also just attention to detail. Once you see a pattern of potential issues, it kinda becomes ingrained in you to spot them quickly.
spacemacs is really cool
VS Code is really nice if you write code but aren't a developer. Like pretty much everything I write is either a system tool, ETL, or shim between tools. That's it. VS Code is great because it can easily work with bash/python/php/etc on the fly and give me just enough to make what I do easier without overwhelming me with bs I don't need. If you specialize in one code or write product code I would go with something heavier, probably the same thing the rest of your team uses since then you have a built in support network.
Phpstorm with the vim plugin is great. It doesn’t have every feature of vim (the only main one I miss is CTRL+p to complete the word (with whatever strings are found in current file that begin with same letters) http://vim.wikia.com/wiki/Any_word_completion Apart from that it doesn’t mak much difference to me when using vim in php storm vs normal vim 
Instead of \`vim-gutentags\`, you could try \`phpactor\`. It relies on composer instead of generating tags and works better with frameworks and any other projects with composer and autoloading set up. It also provides some refactoring features + context-aware autocompletion. Here is configuration snippet from my php ftplugin (\~/.vim/after/ftplugin.vim). &amp;#x200B; \`\`\` " this is here only for context, it's better to move this function somewhere else function! FindProject(...) let l:config\_dir\_name = a:1 &amp;#x200B; let l:home\_directory = expand('\~') let l:project\_path = getcwd() while l:project\_path !=# l:home\_directory &amp;&amp; l:project\_path !=# '/' let l:vimrc\_path = l:project\_path . '/' . l:config\_dir\_name if filereadable(l:vimrc\_path) || isdirectory(l:vimrc\_path) return l:project\_path endif &amp;#x200B; let l:project\_path = fnamemodify(l:project\_path, ':h') endwhile &amp;#x200B; return getcwd() endfunction &amp;#x200B; " recursively look for parent directory with presenting '.git' directory let g:phpactorInitialCwd=FindProject('.git') &amp;#x200B; " overwrite default vim mapping for moving to tag definition nnoremap &lt;buffer&gt;g\] :call phpactor#GotoDefinition()&lt;cr&gt; &amp;#x200B; " some custom mappings for quick access to refactoring features nnoremap &lt;buffer&gt;&lt;leader&gt;rr :call phpactor#ContextMenu()&lt;cr&gt; nnoremap &lt;buffer&gt;&lt;leader&gt;rt :call phpactor#Transform()&lt;cr&gt; vnoremap &lt;buffer&gt;&lt;leader&gt;re :call phpactor#ExtractMethod()&lt;cr&gt; &amp;#x200B; " make vim use phpactor's omni-completion function setlocal omnifunc=phpactor#Complete \`\`\` &amp;#x200B; I'd recommend setting up \`ale\` plugin with \`phpcs\` and \`phpmd\` linters as well. See \`ale\` documentation on how to configure those (or ask me here if something doesn't work for you). You could also install \`php-cs-fixer\` and set it up to fix currently saved file according to PHP standards. This is my ale configuration for \`php-cs-fixer\`: \`\`\` let g:ale\_fixers = { \\ 'php': \[ \\ 'php\_cs\_fixer', \\ \], \\} &amp;#x200B; let g:ale\_fix\_on\_save = 1 \`\`\` &amp;#x200B; And yes, all those vim-like integrations/emulations don't really work (at least for me). Vim is not only about modal editing, it is also an editor built *around* this philosophy. And only emulation that I actually liked is \`evil\`. &amp;#x200B; Hope it helps
All of the JetBrains IDEa basically parse your code into an Abstract Syntax Tree and then treat your edits as edits to the AST. This allows for many powerful manipulations and refactorings, because it “understands” your code. 
PhpStorm is terrific software. The best really. You have to use it.
FWIW I have those same messages showing in Vim. It’s not exclusive to IDEs, though at some point plug-ins are bringing you into the territory of turning a text editor into an IDE. And of course CI tools. IMO if choosing to suppress those warnings is the same as ignoring errors in the server logs - it’s just bad practice and sloppy engineering. Doesn’t really matter where they come from. If an IDE is the easiest way to find them, use one. 
well... there *is* grep. sure, it’s not as magic as an ide, but it does help you get the job done. i’m also one of those crusty old vim user types and i’ve come to the conclusion over the years that the os is the “de”, it’s just not “integrated”. learning and getting comfortable with the os de methods and practices takes time, yes. and it will never be as “magic” as storm or eclipse or whatever. but it is lightweight and free and if it’s what your happy with, it is workable. 
One huge difference between phpstorm and vscode/vim and other more basic editors, is that that phpstorm includes datagrip's functionality by default... very good database GUI, and it's really good having it all built into your regular IDE with your projects, and having the same key bindings etc. &gt; I have a lot of vim plugins that make it a "kinda/sorta IDE" I've done that in the past too, it was shit compared to phpstorm. It's the only software I pay for.
The opulence routing library is very nice. Congrats!
&gt; Still, its very incomplete. Surely you can provide an example?
The difference is very simple. There are *file editors* and, so to say, *project editors*. Vim by default is a file editor. It knows nothing of the files other than one currently edited. A good IDE is a project editor, it reads all the project files and helps you to navigate in them. Say, you can control-click on the method's name and land on its definition. Or it auto-completes your own class and method names. There are many tools incorporated in IDE by default, like static analysers and code inspectors. You always have your code inspected in order to compliance with the selected PHP version and have such mistakes as use of undefined variable highlighted. As far as I know, everything like this could be incorporated in Vim too, making it a powerful IDE, but by default it's just a file editor. 
Started as a magento dev a couple of years ago and i would be dead without phpstorm.
Thank you bot. That misspelling thing is horrible.
Well, an IDE can \*greatly\* reduces wasteful use of your brain(so to speak). For example refactoring is much easier, and you get everything in one place.
I loved Vim. Now I am in love with PHPStorm. I am using PHP for 6 years. The first 4 years I have used *mostly* Vim for writing. The two years, most of the part I coded in PHPStorm, and I have also tried VSCode. I feel really really productive in PHPStorm. 1. No-brainer and quick and better setup. I have found it difficult to setup Vim for PHP development. The more features I want, the more difficult it gets. And they are never as great as PHPStorm gives out of the box. 2. Easy refactoring that /u/dohpaz42 has mentioned. I used `grep` and `%s/replace/with_this/gc` in Vim. But that is never going to be as neat as PHPStorm will do that for you. 3. "One-click deploy" files to a remote server. I have found this feature very useful in PHPStorm while write/test code. I don't know how to do this in Vim. 4. "One-click initiate test" feature in PHPStorm. I don't know how to do this in Vim. 5. Easily navigate `implemented` methods, overriden `parent` methods in PHPStorm. I don't know how to do this in Vim. And this sadly lacks in VsCode as well. I have found it very useful. 6. Automatically adds a `use` statement for a class, if you are writing its name. I could go on and on. While this may seem simple, but you will feel the productivity boost when you are working on a critical task. I have used VSCode, I found it more-productive than Vim, but the features are not as sharp as PHPStorm. VSCode plugins I used are not being maintained properly and there are scope of improvements. PHPStorm gives all the features, and it makes sure that they are working properly.
&gt; It would have been nice if the official guide provided clear and complete information. Most often, they do. If you need examples of how to use methods or classes, look on StackOverflow.
Sorry to intervene, but diminishing a Model to simply a data holding class is but a delusion, though extremely popular one. A Model, in fact, is a whole your application's business logic. So, there is no different models, there is just a single Model that is accessed by different interfaces, such as a web-front controller or a command line utility or a REST or GraphQL API controller. So, MVC is actually a set of classes implementing all the business logic (in Symfony, for example, it will be Entities, Repositories, Serives and Helpers). Then this model could be accessed through controllers or command line utilities whose responsibility is to merely convey the user-entered data to the model, get its response and display it to the user. A controller could use a View to do so. 
Check out https://harings.be/vim-as-an-alternative-to-phpstorm-r8z7l I used phpstorm before vin and slowly I am moving away from phpstorm 
I can't believe I see such a code in 2018. If you want to blogspam, at least don't make its content harmful!
As one of the PHP Manual authors, I invite you to send a mail to the Documentation discussions mailing lists (phpdoc@lists.php.net - subscribe via [phpdoc-subscribe@lists.php.net](mailto:phpdoc-subscribe@lists.php.net)) and open a discussion for what you believe could be improved in the manual. &amp;#x200B; Like noted by @PetahNZ then the manual is a language reference, not a tutorial site for commonly implemented functionality (Like session based log in systems).
You should checkout phpinfo() at the next April 1st ;-)
agreed, awful code and full of vulnerabilities
I'm going to start using 'project editor' to describe Visual Studio Code, Atom, Sublime and friends as opposed to Visual Studio and Netbeans
I think the guide explains the functions and how they work pretty well AND there are community examples at the bottom. What is your particular issue with the documentation? I personally think it's very robust. 
OMFG!
&gt; \#2 is a CSRF attack, so the attacker would have to know the domain, port, and path to craft the URL. These things would be harder to come by if the instance was on a private port, but not impossible. This is a situation I've never come across before so only firing thoughts from the top of my head now. If PHPMyAdmin is on a none public facing port as mentioned, the only way to gain access to it is via an SSH tunnel into the server. Won't this render any kind of CSRF attack invalid as the connection is inside an SSH tunnel? &amp;#x200B;
&gt;Totally agree, besides security, a tool is much faster! The tool is only more secure if you're using it via a SSH tunnel and MySql is running on a none public facing port.
For me, it does. It's been a few years since I switched, but I'm sure there were some things that are slightly different, or some things that PHPStorm does that a VimPlugin handled a different way or has conflicting keystrokes for. Expect some nasty muscle memory habits to take a while to shake. However, editing modes and in-file navigation are just fine. At the end of the day, it's an absolute no brainer that it was worth the switch. Put breakpoints in your code, run UnitTests straight from your editor, and get the entire context and stacktrace of your variables at a any point in time during execution? You can't have a more efficient work flow. 
&gt; actually made them more productive I remember that the more I used PHPStorm the more I learned about things that I hadn't thought of doing before. I've tried to replicate them in Vim to some limited success, but here's stuff that I became more productive in because it became possible, not just because my workflow was improved: * I started writing tests for debugging a lot more. The ability to just right click a test method and hit run, and then just hitting `Ctrl+F10` or `Ctrl+F9` to rerun the test (or rerun it in debug) means that running tests became so much easier to *all the time* * Placing breakpoints and breakpoint conditions in PHPStorm is super easy too. Just one click on the line number. I find myself avoiding breakpoints when I use VIM because it's a bit of a pain * I use vagrant or docker hosts a lot more now, just because running anything in them is so much easier. It takes a couple of minutes to set up in PHPStorm and then you can (mostly) forget about it because PHPStorm will run your tests and such in the container * Not only are the static analyzers great, not only can you download more through plugins (Such as [PHP Inspections EA](https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-)), but most of them will come with an autofix. This means that you'll get warned if you accidentally try to commit something that could be improved or could have a bug. You can also ask PHPStorm to scan entire sections of your code for potential issues and fix them with a click of the button for each. * Others have mentioned the super powerful refactoring tools in PHPStorm, but holy hell are they super powerful. Renaming classes or methods, changing the parameter order of methods, moving functions into new classes, these all become much much easier and safer to do. And that's just stuff off the top of my head. And it's not even including the work I do in JavaScript. The thing is that Jetbrain IDE's have so many great and wonderful features that everyone is going to have a different set of what their favorite features are, and what they use the most. Give it a try, spend a week with it. 
Of course, that's exactly how we use it. The problem is when you really want to debug you have to wait for ages :)
Potentially unpopular opinion. VS Code, and Atom, are not IDEs. They're text editors masquerading as IDEs but lacking all the features that an IDE has. Sure you CAN make VS code and Atom do a lot of what PHP storm does... By installing 500 plugins, or you could just start off with a powerful tool to begin with.
I started using brackets. Works on all OSs and the plugins are pretty neat. Emmet is one of the plugins I often use. It basically "guesses" your short-cuts for CSS. btlr:30 "tab" would auto-complete to "border-top-left-radius:30px" and stuff like that... pretty intuitive and really helpful when writing tons of css statements. Especially the ones you use more often can be written a lot faster that way.
I use PhpStorm as IDE, and it helped me not doing bad practises. When I first started programming I had so much syntax problems and shit purely because *I did not understand it* now a few years later everything I tried, PhpStorm corrected **and told why**. This helped me a lot I am not an oldschool PHP programmer, I am definitely not the best (I see post in this sub where I think "lol what do u guys mean"). So take this with a grain of salt, I am only 18 and have much more to learn, but PhpStorm helped me very much
Depends on who you're writing for. If the blog is public notes for yourself or your company, then write those feature which you use. If the blog is intended for the PHP community as a whole, then I would suggest adding in all the PHP changes which would be reflected in code. I had actually considered stealing your idea and writing similar posts. I really like how you solved the conundrum of explaining new features with diffs, such as trailing commas in function invocations.
For the love of god do it! You won’t look back and as people have said you can get a plug-in for vim functionality in most IDEs. As you refer to IDE magic I’ll share a story of our dev team. One guy still uses VIM and won’t convert so pretty much after every one of his commits someone else has to put it through their IDE to use lint, stylise and format his code to our standards. It’s a pain in the ass 
"Switch if-else" and the editor negates the if clause, puts the contents of the else block under the if clause, and moves the content of the if block under else clause. It's not a feature I use a lot but it shows the ide isn't just an editor, it understands php logic.
I think you need to move the closing END; tag to the very beginning of that line. No spaces before it.
Remove spaces before `END;`
I tried that before, it doesn't work.
This, Whenever I come across code that generates warnings by the bucketload - a not uncommon experience - a red flag waves for me and the virtual klaxons start screaming. Warnings, unlike errors, are sometimes OK. BUT you should know why every warning is there and made a conscious decision that you're prepared to accept each. Also I'd expect no more than handful in any codebase. It's always been a matter of professionalism to me that my code generates minimal, if possible zero, warnings and I don't understand the mindset that thinks reams of them are OK. It's just sloppy.
You can't indent "END;". It must be at the beginning of the line, then there will be no errors.
It could use a bit work imo. Like rewriting useful comments into the docs themselves.
No spaces before or after the END;
Yep, I did that and it doesn't work for some reason. Thanks for help tho. I'll try the second solution, thanks.
The 2nd one gives me an error too. Parse error: syntax error, unexpected '1' (T_LNUMBER), expecting ',' or ';' in E:\xampp\htdocs\phpEp1\order.php on line 14 
Now, it works. Thank you man.
[https://github.com/drupol/phptree](https://github.com/drupol/phptree) &amp;#x200B; Recently, I've been working with blockchain stuff and obviously, there were trees (merkle) inside. I wanted to dig into it a bit more, and as I never had to deal with trees at work so far, I built a library to handle them. &amp;#x200B; This library provides 4 different tree types: \* \*\*Node\*\*: The base class \* \*\*N-ary node\*\*: (or K-ary tree) extends the base class and allows you to specify the capacity of a node, the maximum children a node can have. \* \*\*Value node\*\*: extends the N-ary node and allows you to attach a value to the node. \* \*\*KeyValue node\*\*: extends the Value node and allows you to attach a key and a value to the node. &amp;#x200B; This library provides 4 trees traversals algorithm\]: \* In order \* Post order \* Pre order \* Breadth first &amp;#x200B; The "In Order traverser" has been generalized to work with trees having more than 2 children. &amp;#x200B; It also provides 1 converter to convert trees into a graph using \[graphp/graphp\]([https://github.com/graphp/graph](https://github.com/graphp/graph)) library, and it allows you to display a tree using \[graphp/graphpviz\]([https://github.com/graphp/graphviz](https://github.com/graphp/graphviz)) in a few PHP lines. &amp;#x200B; The image I used for the Reddit post has been created using this gist: [https://gist.github.com/drupol/816a198460481493d578653150194eb8](https://gist.github.com/drupol/816a198460481493d578653150194eb8) &amp;#x200B; &amp;#x200B; &amp;#x200B;
Feel is okay in a pinch. But it doesn’t understand context, such as whether it’s a local variable or a member of an array, or a property of a class, etc. 
Ever tried to import / export a table of with a milion+ records. Or import a file that is exported with a different version of phpMyAdmin.
Have you seen [`nicmart/tree`](https://github.com/nicmart/Tree)?
&gt; Potentially unpopular opinion. VS Code, and Atom, are not IDEs. That’s not an opinion. 
&gt; Ever tried to import / export a table of with a milion+ records. If the file is under the maximum upload size I’ve never had a problem. If it’s bigger then I’ll use the command line. Why would you be so dogmatic and say “if you pick tool X you must use it in every circumstance”? &gt; Or import a file that is exported with a different version of phpMyAdmin. Used to be a problem in the long long ago, but I haven’t had that issue for years. 
I'm not sure if it is legal, but I use both (neo)vim and phpstorm. Phpstorm for sure has many awesome features and therefore I don't want to miss them. But my everyday work profits much more from my highly customized vim setup. While phpstorm also is great for pair programming, because many developers use it, vim's strengths are customizability, extensibility and distraction-free working on a level phpstorm is unlikely ever to achieve. (And vim by design will not achieve the same out-of-the-box functionality phpstorm has to offer)
How about providing some actual constructive feedback?
Yes I saw it, it seems that it's not more maintained and my main goal while building phptree was to understand how to handle trees, how Traversers were working and all these things. I see that the TreeBuilder inside is a very nice feature, maybe I should do one as well. The difference that I see is that the Traversers are not using very memory optimized. They are not using yield yet, this will probably lead to some issues if there are a lot of nodes in the tree.
it would work starting PHP 7.3 which was released a week ago so I doubt you have it installed. That said, next time care to read the sub rules, your post is off topic here. 
Well actually it works for a week already ;)
You can install plugins into vim that essentially turn it into a ide. I'd recommend looking at vimawesome.com
For PHP, I actually prefer Sublime Text with Vim emulation.
I do that but the course I am following is using that method.
Sorry, my fault. By copy and pasting the backslashes got doubled. So please remove one of each backslash pair: &lt;table border=\\"1\\" cellpadding=\\"10\\" cellspacing=\\"0\\"&gt; Backslashes will escape the next following character so your string (starting and ending with ") will not be terminated earlier as expected. For the sake of completeness: colshrapnel mentioned it right. You should use plain HTML and insert PHP at a suitable place like &lt;td&gt;&lt;?=$pies?&gt;&lt;/td&gt; or &lt;td&gt;&lt;?php echo $pies; ?&gt;&lt;/td&gt;
I haven't learnt that method yet. Thanks for help.
there is no use in using the method you used. the sooner you learn that, the better
I transitioned from Emacs to PhpStorm. My productivity soared. It was primarily due to the awesome code navigation and refactoring tools that Emacs and vi do not have. You will likely see the same effect.
Code coverage analysis VCS integration Ctrl click to find usages / definition
I don’t want to say that someone should use a specific tool. What I wantend to say is that I had a lot of issues with phpMyAdmin when importing / exporting date, small and large sets. File to big, time-outs etc. A tool like Sequal Pro fixed those issues for me. I stopper using phpMyAdmin 5 years ago, so maybe it is better by now.
I used Vim as my primary editor for years but only use IDEs now if they’re available. That means PHP Storm over VS Code. I like VS Code and I like Vim but these days I’m lazy. I like all the features I want to be installed by default. And the Vim emulation on both programs is good enough that I’m happy. Which that really boils down to the biggest reason I left Vim: IDEs just work. I can’t count the number of times and hours I’ve spent fiddling with my vimrc because imported some plugins in the wrong order and all of the sudden my memory goes to shit. I’m too old and lazy to deal with that anymore. If I want something light and customizable I go with VS Code with Vim emulation. If I know what language I’m about to spend 8 hours working in, I go with an IDE with Vim emulation. Programs without Vim emulation are a non starter for me but these days so is Vim.
I've tried switching from vim, but couldn't get comfortable. I use a few plugins that have helped me mimic enough functions of some ide's. after reading some of the comments i kinda want to try phpstorm, its been years since I've given it a shot.
Sorry, to nitpick but for accuracy's sake: VS and VS Code are two different products. Visual Studio is an IDE only available on Windows and Mac whereas Visual Studio Code, inspired by Atom, is based on Electron and is available for Linux as well. Since you're interested out VS Code, I'd like to reassure you that it is indeed free and open source software.
After the initial inspection of the project, PHPStorm should not lag. If you have a weak machine (which you don't), you can turn down the aggressiveness of the inspections. Between the debugger, inspections, refactoring, and endless config, I can't imagine going to VIM wouldn't make you less productive unless you weren't using its features in the first place.
If you decide to try PhpStorm, I recommend going through these quick videos at Laracasts. It’ll help you get familiar with the basics very quickly and remove some clutter from the UI. There’s a heavy focus on using the keyboard to work quickly. Short videos and straight to the point. And free! https://laracasts.com/series/how-to-be-awesome-in-phpstorm 
I'm developing a large e-commerce site for a startup. They are paying me a decent hourly rate. I don't want them to make $10 million over the next 5-10 years and only pay me eg. $75k via the hourly rate. How can I protect my self from this situation?
Thanks for the clarification
If you think they're going to succeed, you could offer to work for less money for some equity. They're unlikely to give you any if you're expecting to work for market rate though, unless you're an important early employee that it's in their interest to keep. If you can be swopped out easily for another developer with ecommerce experience, you don't really have a lot of leverage.
There is a Vim emulation plugin for VSCode - https://marketplace.visualstudio.com/items?itemName=vscodevim.vim
You need to not charge an hourly rate and charge a project rate in that case. &amp;#x200B; Or offer to do the project for free or a nominal amount and then tie your actual remuneration to their revenue for the next (x) years. &amp;#x200B; Or realise that the whole point of them coming to you and accepting your rate is that you fit their current budget nicely and that you shouldn't be greedy. Just because they make $10m from the product you made for them doesn't mean that you're entitled to any more of it than the agreed project rate, the fact that they may make $10m is testament to their business decision making and not because **you** wrote their platform. There are thousands of us that could replace you at the drop of a hat and write their platform for them. You're not "protecting" yourself from anything. You're just being plain greedy.
If you want the large payout in the end, you’ll need to risk not being paid. Startup founders have a high risk of losing everything they put in the business, so if you’re about to be paid 75k, that means they may lose 75k. If you think you should get millions down the road, then ask about becoming a partner, but risk not getting paid as well. Also, bear in mind that for many startups, the actual nuts and bolts of coding are rarely the value drivers. There is a lot of salesmanship, marketing, designing, etc that will drive value,m. Technology changes, so if they switch from one platform to another (php based to js based), then your value drops to zero. 
I recently did a refactor on such a codebase for a client. The biggest problem was that whomever wrote the original code was doing database called directly with `mysql_*()` functions which have gone away. I could have gone through the entire codebase and refactored everything manually to use `mysqli_()` or even better `PDO`, but this wasn't a client that had much of a budget. So I wrote a "shim" that implemented the `mysql_*()` functions internally as a call to their `mysqli_*` equivalent. This alone got 90% of the way to PHP 7 compatibility. Not sure if that idea helps or not, but its something.
Hey The library looks really good actually! I made a personal one myself. I was just wondering if you have heard of the ds library? It's a widely accepted generic datastructure library made for php 7 and up. It has the same interfaces than the spl ones but they are a lot faster! It might be an option worth considering to switch the SplQueue to a Ds\Queue etc. I initially heard about them from this blog post: https://medium.com/@rtheunissen/efficient-data-structures-for-php-7-9dda7af674cd
Their success is not your failure. There is nothing from what to protect yourself. Do your job, get your paycheck, and use this success story to ask for more in your next project.
You're wrong. PHP's manual is one of the best of any language. The fact that it's not StackOverflow is your problem. Learn to program before you go around shitting on other people's work. Also, try navigating Python's docs if you don't like PHP's. Seriously though, suck it.
It sure sounds like your missing the difference between a language reference and a programming tutorial. The php.net reference manual tells you "what PHP does" but not "how to do it in PHP," it being whatever problem you're trying to solve. There are other resources for that. Your question basically asks why a golf cart is not a pick-up truck: they are two different classes of things that it doesn't make much sense to compare.
Thanks. I have been using mysqli, and through my own wrapper, for the entire project. But for any other similar situations, this sounds like a good idea.
 $redisSession = RedisSession::ServiceinitializeSession($redis); SessionService::initializeSession($redisSession); This is code that I generally target for seek &amp; destroy. If you really must, then use a singleton, but not this Frankenstein. Until you have `ClassName&lt;T&gt;`, with `T` being a type you can hint against, this is not a viable approach, and even then it is still of questionable usefulness and safety.
I stopped using the default PHP image provided by Docker since the first release of thecodingmachine/php. It just works: no more time lost to configure xDebug, to add a PHP extension, to update the php.ini and so on! And don't get me started on file rights management. If you guys are looking for a PHP image, this is the best one by far, period. 
Thanks ! I know php-ds indeed, but I'm wondering if statements like "SPL data structures are horribly designed." are still valid nowadays. Anyway, I will add this to the pipe and see if I have better performance using them. 
&amp;#x200B; &gt;I was using a deprecated method on a library Your team should use some Static analysis tool (linters) and let it check each commit before accepting any merge request. But, you can setup syntastic to check your code each time you save, for example, you could setup phpstan (or ask the other developer what is PHPStorm using to check deprecated methods, you can use it in vim too). &amp;#x200B; &gt;should I just switch to a real IDE that has this kind of magic for PHP specifically? More than "having this kind of magic", IDE's come with everything working together, with VIM, you need to setup everything yourself. The trade-off is a bunch of ram/cpu for a lot of work, so, you should decide what you preffer. I love having a fast, clutter free, simple code editor. So I stick to VIM. &amp;#x200B; &gt;Does anyone have any experience switching from vim to an IDE and can share any insight on productivity? I spend some months using PHPStorm in the past, as I said before, PHP Storm has everything you need nicely packed together, everything on a nice gui. At the end, IDE's are just a text editor with a lot of plugins nicely integrated in the program itself. The difference in productivity \*for me\*, when using PHPStorm instead of Vim wasn't important. PHPStorm didn't gave me anything I didn't have/needed before, of course, I have spend a lot of time setting up my workflow, and that's not an issue for me, I had a lot of fun doing so. &amp;#x200B; So, can you be productive without PHPStorm?, I think you can, but it will cost you a lot of time seting up VIM and your workflow to fill all those gaps in your personal needs.
 ( ((trees) fun (data)) is library(structure) ) PhpTree ( (to) a (manipulate) ) Parsed it for you
I should do an exporter into this format, it's nice !!
I wonder if it has a proper name.
I think you are just wrong here. I am still a beginner too (two years working now) and manual is like the most useful thing ever. I really do not like w3schools tho since it seems very dated and the function examples there are not great at all, I actually blocked it from my browser because it pops up first in every search.
AFAIR this is just standard language parsing for binary and unary arithmetic operators. If you ever saw a compiler tree for Pascal, this probably looked familiar to you.
Some people split the business logic into a service layer. CakePHP has a similar setup for its models (Table, Entity, Behavior), but they primarily deal with data access and validation. They can do more and you could put business logic in them, but I'm mainly bringing those in via a service layer which gets a dependency injection. In this setup controllers interact much more with the service layer than the models themselves.
You sound greedy as fuck. You don’t want them to succeed and you miss out in more money in five to ten years? If I pay you to build a house for 100k and you do a good job then that is what you are worth to the project. It’s my house. You are not my partner or an investor. You are the fucking contractor. You don’t need to be “protected” from my future gains! When I sell the house at a profit it’s my profit. You sound like the kid in pre school that wouldn’t let anyone play with his toys but expected everyone to share theirs. 
Agreed. I have never seen an output method like that used in production. It’s horrible. 
Here's my first Laravel centric package [https://github.com/bakame-php/laravel-domain-parser](https://github.com/bakame-php/laravel-domain-parser) its a convenient wrapper around [https://github.com/jeremykendall/php-domain-parser](https://github.com/jeremykendall/php-domain-parser) with better intregration in Laravel thoughts and remarks are welcomed.
Is the course you're following something you're doing through a school, or is it just an online course you're following? If it's just an online course, I'd highly recommend looking for a better resource, as the method demonstrated in your original code would never be used in a real world application and it makes me very suspect about the quality of the rest of the course. If it's a school course you have to to take... I'm sorry.
Dude thats not how it works.. So should a mcdonald's employee that's flipping burgers 9to5 ask for revenue share ?? i think the username checks out..
Uh ok. Thanks.
There's tons of nice refactoring in PhpStorm. One I use semi-often is 'Extract Method'. You select a portion of code and run 'Extract Method'. A dialog appears with an in put for the method name and a list of required arguments and the output(return) variable. It creates a new method with the selected code and the required parameters while returning the specified variable. Where the code used to be there is now a call to that method instead. 'Extract Variable' is nice as well. If you realize a portion of a statement would be better fit as a variable, you can select it and run 'Extract Variable'. If that statement is used in other places in the same scope it will ask if you want to replace all occurrences or just the selected one. You then choose a variable name and boom done. An important note about the rename refactor is that it's not just searching for the text and replacing it. One key feature of IDEs is that they understand your code. They know that `$myVar` is not the same as `"myVar"` when renaming. So let's say I have class `Foo` with property `Bar`. If I run the rename refactoring in the property declaration and choose `baz` it will update all instances of `$bar = $fooInstance-&gt;bar` to `$bar = $fooInstance-&gt;baz`. Just yesterday I was refactoring some janky code I found online that parses a very nice file format. This was in PyCharm but it's the same base as PhpStorm. I wanted to pull several classes out of this mammoth file into a new file. Instead of needing to do all of the leg work myself(create new file, cut, paste, import all classes from new file, update all references to those classes) all I had to do was select the classes, run the 'Move' refactoring, specify where I wanted the new file, and bam it was done.
I like static methods for initialization, especially for one-liners type of classes. Hell, they are a must in a proper factory class. Like ... which do you prefer ```$var = ClassName::make(...$props)-&gt;chainedMethod()``` or would you rather ```$var = (new ClassName(...$props))-&gt;chainedMethod()``` . It's a one-liner, it doesn't take a rocket scientist. I think the latter just looks ugly and messes the syntax up. It reminds me of my days in C++ where the syntax isn't very clear and I cringe. I'm of those types of guys that thinks that if it takes me more than 10 seconds to figure out what a code is doing, then it's probably a bad code. Most of the time I'm right. Besides, static props have optimizational value when used properly and I even to this day use them for some shared memory attributes. It works and it's not a complex solution. Blindly dismissing static methods and props for me is an indication for a bad developer that can't think on their own. With that in mind, I think whoever wrote this article is really pushing it when it comes to static methods. 
I made it: https://gist.github.com/drupol/4c245cbc5fd26bb76f5e61ef80c9e8d5 This output: [ PhpTree [ is [ fun [trees] [data] ] [ library [structure] ] ] [ a [to] [manipulate] ] ] Now the importer, it's gonna be a bit more complex.
&gt; How can I protect my self from this situation? By having leverage. No leverage, no protection. What leverage could you have in this situation? The only thing that comes to mind is 1. Being such an absurdly good rockstar developer with a rare set of skills, that they couldn't possibly succeed without you. 2. Convincing them of that fact. So do you think #1 and #2 are realistic enough to guarantee you some revshare? Can you do things that another developer would not be able to do for the same bid, without wanting revshare? 
This is a debate that I have regularly with my best friend. I am a senior PHP developer with some devops, he is a senior devops engineer with some Python. The conclusion we have come to is that for devops work, Vim is the way to go, because it's far more portable than PhpStorm when you're working in a large number of environments. As for developing in a single environment, Vim can be extended to add a bunch of the features that PhpStorm has, but PhpStorm has those things out of the box. The code sniffing and profiling has saved me dozens of hours of work in the past year. I can configure it to check my code in real time for PSR compliance with a few clicks. It has an innate awareness of my entire code base, so that some refactoring tasks can be done in a few clicks. It has excellent Docker, Git, MySQL, and REST API support so that you don't need tools like MySQL Workbench or Postman. And that's from kind of a rank amateur with regards to both Vim and PhpStorm. I've been using the latter for a little over a year and I still haven't taken the time to unlock its full potential.
So you doing Drupal at work, or just a similar name? What the hell are you doing with Drupal and this if so lolol?
One would think but there are alot - or a very vocal minority - that will argue with you. 
There are all sorts of stages of learning to develop software. There also isn't one right way to develop software. I learn new things about my IDE and about VIM all the time. Yes you can make VIM do absolutely anything (and I'm glad you pointed out that you can bring warnings and lint messages and errors into VIM, it's not one or the other). You can get stuck in a development stage by exclusively using an IDE and you can get stuck in a development stage by exclusively using VIM. 
And just for others reading this... The bleeding edge builds are called EAP. I think you're only supposed to use them for 30 days but they almost always have some type of update within that time that resets the clock. I used them for a long time. They're not really bleeding edge. It's the almost-ready-for-release builds. Only once has one ever caused me any issue.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This has nothing to do with work and/or Drupal at all.
Thank you!
Interesting, haven't heard of that one before. I'll take a look at it and see if there are any performance optimizations they thought of that I haven't.
I just remembered that I did come across r3 at some point in my research. It was a little unapproachable, but did have incredible performance.
Looks like maybe it's this one: [https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens) for anyone interested. &amp;#x200B;
Side question: what is the best / for the maintainers preferred way to contribute to the docs? I often find minor things to change but I don't know where to begin on contributing in an efficient way. I have filed some doc bugs on bugs.php.net. But many times I've thought that to be too verbose for minor things. E.g. JSON_UNESCAPED_LINE_TERMINATORS is not listed among the options on http://php.net/manual/en/function.json-encode.php (but listed in the separate page for those constants).
I use Phpstorm for searching multiple files and overviews of projects. It updates files when saved so any changes you make in vi will be included in the Phpstorm open files. It is also easy to use different versions of php and then see any errors. Phpstorm show errors in files and folders so they are easy to see when checking php versions. It is also easier to run tests in Phpstorm and see the output. I still use notepad++ for more intese regex searching and text replacing. I do small edits in vi when using git. So I am suggesting a hybrid or multi-application approach.
It's for everyone who wants to learn fast a lot. &gt; ...all the PHP changes which would be reflected in code Why? &gt; I had actually considered stealing your idea and writing similar posts. Go for it :) there is a great small book about it - "Steal like an artist"
Static rocks in the start, then really hurts later. This is my painful experience: https://www.tomasvotruba.cz/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself/
so not "PhpTree is fun trees, PhpTree is fun data, PhpTree is library structure, PhpTree a to, PhpTree a manipulate" ?
As Rasmus explained in phpCE conference, because it's being maintained not by people who are developers. And there aren't enough time and people to spare. Perhaps you can step in? I'm sure if you come up with sound plan, some well executed example and great work ethic you could improve a lot :)
That would be the list of queries (think CSS) to get each deepest child element, if the tree represented a DOM (or anything related like XML, JSON, etc). 
yes! forgot about xdebug integration. never knew how useful it is.
Do you use monorepo or want to start? This CLI tool helps you create, split, validate, update version and merge composer.json in fashion way https://github.com/symplify/monorepobuilder
[removed]
Haha fair enough, I saw the name and made some assumptions 
I do work a lot with Drupal, but phptree has nothing to do with it or my work :)
I use TextMate ... I've tried IDEs but they usually slow me down.
How did your entire dev team get made redundant? What industry are you in? Either way, if you have side projects that you can possibly monetize you can start heavily working on those. If that isnt your thing then just start looking for jobs on ZipRecruiter, Indeed, and CG. PHP is still heavily used so the market is not that bad, but that all depends on your skill set.
I'd suggest using a query builder of some sort, just to simplify the process of adding on conditions to the query. It can get rather hairy with dynamically adding on conditions like this without abstracting away from manipulating a raw SQL query string. That said, your basic pattern of doing an inner join to a table and adding a where clause to restrict the results is sound. You just need a few tweaks. - First up, kill the group by and having clauses. I don't see any benefit to having them. - Recall that `AND` has higher precedence than `OR`, so your current query looks for `WHERE (types.type_id = 1) OR (types.type_id = 2 AND mast.mast_id = 3)`. Parentheses added to show what's happening. - `JOIN` clauses add the joined tables into the output, but you're only interested in the boats. Change to `SELECT boats.*` instead of `SELECT *`.
&gt; but it does help you get the job done How do you rename a public method with a generic name (like `getName()` for example) with `grep`? It's impossible to find the actual usages of that specific method. That's where static analysis and IDEs come into play.
Reformatting code (Ctrl+Alt+L) is AMAZING when inheriting some other developer's poorly formatted code. If you take the time to set up in Settings your indent and curly brace rules, it'll apply them to someone's code in a second, even for an entire project. I can't stand poorly formatted/haphazard code, it hurts my head when I look at code like that. If you're lucky and never have to look at ancient code, kudos. I am not.
 What about [php-gui](https://github.com/gabrielrcouto/php-gui)? Seems active-ish. 
I'm a front end developer and barely scratched the surface of what PHPStorm can do. Great stuff. 
I have never once used an IDE. I work on giant projects that you would think "Why are you not using an IDE" because half the time we spend weeks in one area, so I get familiar with its classes, their functions and so on. Our system looks the same regardless what module you are in or what part of the app you are developing for so it's not hard to follow the common logic. I have nothing against IDE's I have just never used them in the over ten years I have been a developer. When I was in college we used eclipse for java projects and I found the thing was so slow even for type hinting and intellisearch. So now I use Atom. With no IDE functionality. I do not feel it makes me any slower or faster then the average developer and gives me more intimate understanding of the code.
Thanks for taking your time to help a noob... By query builder do you mean laravel eloquent or cakephp? Is there a "query builder" that could be implemented in my already built "vanilla" php project? And finally do have any google search suggestions/topics I could look into that would point me a direction to research this further? Thank you again
Yup. Same experience for me. I used vim + some quality of life extensions for my php development. Really, it worked pretty well. PHPStorm is really, really nice though. The vim plugin works really well for me. And I couldn't live without the refactoring tools now. Renaming a variable, modifying signatures across files, extracting a method from a block of code. Sure, you can do these things in vim, but it's faster and safer in PHPStorm.
Looking for a PHP developer at the moment. DM me if you're looking for something.
So you're saying this is a fantastic little to no setup needed dev container, at the cost of it being a bloated production container. I would much rather use the standard PHP Docker image for production as they're far lighter and stick to the idea of images with one job. This seems great for convenience in Dev and probably good for multi stage builds though.
Dude, I frequently praise this language in comparison with other languages. I really really love it and much appreciate the effort put in by contributors. Look, I'm no grey beard, but from the ~20 languages I've read documentation, PHP has the far superior one. That is compared to both much younger and much older languages. PHP rocks, the docs rock and we love you, dude!
For me, learning the out of the box configuration of a standard IDE means that my ability to move from machine to machine and even cross OS boundaries only minimally impacts my productivity. Since purchasing my PHPStorm license in 2013 I've worked on Windows 7,8,10, OSX and Linux across many projects at 4 different companies. To get started all I really need is to install the IDE, Git, and the chosen virtualization for local dev. Then I am ready to check out code and go to work. I can be up and running quickly on a new machine. I don't need to worry about plugins and scripts and migrating configuration. I can count on a consistent toolset anywhere I need to be working with minimal effort. I let JetBrains worry about tweaking and updating the tools so I don't have to. I feel it let's me worry about the work and the clients needs more than worrying about mine as a developer.
I‘m pretty sure it is his first project at all..
I mean generally any object-oriented wrapper to write SQL queries. I'm a huge fan of Laravel's own implementation. They make it possible --albeit rather awkward-- to use outside of the scope of Laravel. I'm not as familiar with others and so cannot make any recommendations on this. The problem that we're trying to solve is being able to optionally add clauses to a query within an `if` block in a clean and straight-forward manner. Point of pedantry: Eloquent is Laravel's ORM and is built on top of, yet distinct from, the framework's query builder.
You might be interested in [Ditching Hourly](https://www.ditchinghourly.com). For a quick overview, I recommend [Episode 13: The 8 Steps to Value-based Pricing with special guest Ron Baker](https://www.ditchinghourly.com/ef8bce31).
Our company decided to go to a agency to cut costs.
I mean.. I don't know, start looking for a job and put this last job on your resumé?
well, that sucks.
They may end up regretting that decision. To go from a entire dev team, to an agency will rack up quite a bit in fees.
start up an agency specializing in whatever industry your company was in.. 
Yep. Our company just started doing the opposite and saving a ton of money having a small development team on staff. 
What do you use in PHPStorm as a frontend developer? Have you tried Sublime or Webstorm? ALT + Enter ("the bulb") is killer shortcut that reveals many secrets in various places of the code :)
[removed]
If you though the article was wrong, check the code they posted: [https://github.com/ProdigyView-Toolkit/prodigyview](https://github.com/ProdigyView-Toolkit/prodigyview)
Exactly this! You’ll come back as “consultant” with half of responsibility and twice the pay At least that’s how these situations usually end up here in Europe...
Oh go away. This is not a recruitment platform. If everyone was allowed to use this sub as a platform for spamming their vacancies, pretty soon it would be filled with recruiters and careerists and all the actual discussion would be drowned out. Let’s not turn this sub into another LinkedIn.
I think you should read the article the tweet links to, it addresses those points specifically.
Isn't there a thing like r/phpjobs that they can spam in?
Ok, now i see very well what you mean. I don't use any php framework to dev and to be honest I don't use Namespace, so... but i think I will soon to be more "standard friendly" and maybe that will improve the autocompletion quality. Otherwise, I spent 3 days to try VS Code, Atom and Brackets , after I've seen that there is no support today for CSS Grid with NB9 and even NB10! Atom is quite hard to set up on Windows and I don't have a good feeling with it (Beautify is not powerfull). Brackets is too frontend oriented for my need, but more easy to install than Atom. VS Code is really a good option. On the one hand, he's fast and very good with the good extensions for web development (better than NetBeans sometime), on the other hand, you can't take advantage of the autocompletion for inline JS or CSS in PHP files! I had a better feeling with the PHP debugger of VS Code than NetBeans, BUT for the complete PHP experience, the Diff files, local history files, the toolbar (VS code don't have one!!!) I will keep NetBeans 9.0 or 8.2 as daily IDE and I think will keep VS Code too for some task as to make a CSS3 template with Grid for example. Finally NB is still a very good IDE, except for the CSS3 support...
PHPStorm actually understands Vue and Vuex, it kicks ass
Thats exactly what a mate of mine does, when he hears about this happening he poaches all the devs and employs them to in turn service the company that retrenched them or their competitors.. 
File watchers, console, Cms support, solid deployment options, pre processors...
The PHP manual is the best official reference I've seen for any language I've used. What language are you comparing it to..?
that's an astoundingly bad decision. You need to get out of that company at all costs.
Edge and IE has support for Samesite, although limited/more recent in IE11 ([caniuse](https://caniuse.com/#feat=same-site-cookie-attribute)). Safari has support too.
PHPStorm has all of the functionality of WebStorm. 
Renegotiate your contract to pay (some amount, not all) of your work in shares and/or options. For this to be viable you need to be able to make an exit at some point, which unfortunately is unlikely if you're working for a startup. You could consider this a question of risk vs reward - do you believe in the company enough to be a shareholder? Is a reduction of salary worth it just to have a small chance of something big in the future?
????
If you're the only person they can find within the reasonable amount of time and effort, you are valuable. AFAIK there are tons of people specialising in e-commerce. Moreover, if you feel you have the rapport with the owner peeps, you could just ask if there's value in a partnership. But the problem then arises that you get more responsibilities, since they already negotiated a contract worth $75k. If you don't know about their success, why lower your costs? And this should be a precursor to your future contract negotiation as well. You seem to want more, it could be possible for other projects as well. Figure out your criteria. Greed is a great tool. Know how to use it. 
The second example is doing it with an interface.
Open the repo, see no tests, source code is in public subdirectory. Singletons everywhere. Empty magic methods. Etc. At least you didn't roll your own ORM (doctrine) and Yaml parser (symfony/yaml). Sorry dude, but you'll get either ignored, downvoted to oblivion or bashed on /r/php.
Very nice! I’ll go ahead and steal some of these for my Vim setup. ;) Btw, I noticed you used: $value instanceof DateTime::class Did you know that you can use a class directly with the instanceof operator? Instead of converting it to a string first, with the ::class suffix. $value instanceof DateTime
Is there a way to create a short cut to a specific path in the project directories? Navigation becomes hard with deep directory structures. 
I usually get to a file I know is in the same directory, then click on the target icon on the folder menu.
I dot that too but would be nice if say I could jump to the directory with the controllers with a keyboard shortcut 
I didn't even know you could use a string with instanceof!
I was a PHP dev, now a front end dev and I'm still happily using PHPStorm
This article is so full of things I disagree with. You know what the main issue is with having a Frankenstein-like approach like the one shown in `RedisSessionInterface`? You need to _initialize a static class_. Which is basically what a constructor is in a regular object, except in a static class there is no way of guaranteeing that a dependency you're given is initialized. If I get an object, I'm sure it passed through a constructor, and is in a valid state. A fake static object will never give me the same guarantee, I need to manually validate that the class has been initialized.
Thx for recommendation but we are deep into jetbrains products. I'll definitely have a look though.
So, what's the difference?
If you enable "autoscroll from source" in the Project tool window then it jumps to the target directory automatically. First thing I do on a fresh install. 
Why are they promoted as 2 different products then?
I've added this instant upgrade feature to Rector: https://github.com/rectorphp/rector/pull/842/commits/7a0a0b376758b16ff5c19af1ef609e435d094cd5 Now you can remove all the arguments that throw errors from your code by one command.
Good point, I use it without `::class`, that was an accident. It nicely show how templates/post-fixes can save you from this :) I'm actually so deformed by shortcuts that I have problems to type code char by char. 
For string check is better [`is_a`](http://php.net/manual/en/function.is-a.php) function. It's argument make it more explicit to the user. $value = new DateTime; $type = DateTime::class; $isDateTime = is_a($value, $type, true); var_dump($isDateTime); 
Do you mean like "jump to src/Admin/Controllers" in the panel left?
 "require": { "php": "&gt;=5.5", } ... # for PHP 5.3.0 &lt; if(!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192); if(!defined('E_USER_DEPRECATED')) define('E_USER_DEPRECATED', 16384); # for PHP 5.2.0 &lt; if (!defined('E_RECOVERABLE_ERROR')) define('E_RECOVERABLE_ERROR', 4096); ... if(ini_get('register_globals')) &gt; **Warning**: This feature has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0. This trend is continued throughout - for a "microframework" it has a lot of bloat that's completely unneeded for the minimum specified PHP version. Then we have a complete lack of namespacing, a "3rd party libs" dir that has static copies of 3rd party libraries rather than pulling them in via composer (thus losing security updates), multiple "public" directories, a docker container for a framework, configuration handling that has unnecessary overhead (calling a function to set options). I'm pretty sure those custom error level constants are going to break things too (conflict with future core error levels, if they don't already conflict with existing ones due to not sticking to the ^2 rule) The readme.md file has GitHub formatting issues and suffers from apparently trying to document the entire framework on a single page, making it hard to navigate the documentation. Many of the links for support and issue tracking seem to point back to the original Limonade framework It looks to me like this framework should have been left abandoned.
Yes 
Sorry, we already have enough frameworks. Why not contribute to one of the existing ones?
But Webstorm doesn’t have all the functionality of PHPStorm - e.g. Xdebug integration, PHPUnit integration, etc. 
WebStorm is less expensive, for those that don't need the PHP functionality.
Haha, that’s true! I really should set some more up for myself. The only one I really use is “php” expanding into “&lt;?php ...”.
Index.php is a terrible mess. Random default routes and template functions that exit php to echo html polluting the global namespace, I can’t conceive of a reason that anyone should use this ever.
Use what best suits you. I'm just too lazy to type :D My real code without any IDE/tools would look like ADHD + dislexia :D &lt;?php if ($value === trUE) { $this-&gt;run(); } $datetime = new Nette\Utils\DateTime('now'); ECS (also on shortcut ;)) + Rector make my code look smart ↓ :) &lt;?php declare(strict_types=1); use Nette\Utils\DateTime; if ($value === true) { $this-&gt;run(); } $dateTime = new DateTime('now'); 
Scroll down (php.net) or use Google. It's really not an issue.
Interesting question! I did some research, learned something new and found 2 ways. 1) slow one - https://giphy.com/gifs/3oa954Wt8f52HmoWjw 2) fast one - The 2nd one is [bookmark approach](https://www.jetbrains.com/help/phpstorm/navigating-through-the-source-code.html) - Go to your Favorite place (dir, file, line...) - Click on it - Press "Ctrl + F11" - Select number 1 ... - Work - Remember you want to go to Favorite place - Press "Ctrl + F11" - Select number 1 - Enter - You're there :)
Can you elaborate? Never had any problems with the official PHP images. Setting up XDebug is extremely easy and straight forward on those images. Same with other PHP extensions. Updating the php.ini? You don't update it, instead you just copy another .ini file inside the config folder in the container which overwrites the default configs / adds new definitions. File right managements? What problem exactly did you have with that?
Besides the obvious less than optimal code style and plain lack of sanity in the code base it seems there are several severe security issues: - [Directory Traversal Vulnerability](https://github.com/yesinteractive/fsl/blob/master/controllers/fsl_controllers.php#L111) - [XSS](https://github.com/yesinteractive/fsl/blob/master/controllers/fsl_controllers.php#L95), [vulnerability](https://github.com/yesinteractive/fsl/blob/master/controllers/fsl_controllers.php#L95) - [Failed and utterly broken SQLi prevention](https://github.com/yesinteractive/fsl/blob/c38ea00608282109fbd90d280d57190cab201485/lib/3rd_party_helpers/xss_filter.class.php#L59-L64) - [Failed and utterly broken XSS prevention](https://github.com/yesinteractive/fsl/blob/c38ea00608282109fbd90d280d57190cab201485/lib/3rd_party_helpers/xss_filter.class.php#L59-L64), [wat](https://github.com/yesinteractive/fsl/blob/c38ea00608282109fbd90d280d57190cab201485/lib/3rd_party_helpers/xss_filter.class.php#L75), [waaat](https://github.com/yesinteractive/fsl/blob/c38ea00608282109fbd90d280d57190cab201485/lib/3rd_party_helpers/xss_filter.class.php#L116) - [It uses some 3rd party sql abstraction library which I would not touch with a ten foot pole](https://github.com/yesinteractive/fsl/blob/9e5bc3e6663205d3feddce76f736f293987acb4e/lib/3rd_party_helpers/Medoo.php) I didn't really look into the above much and there might very well be *some* false positives, but the main gist of it is that it looks scary and most likely is just another accident waiting to happen.
Cool didn't realise you could bookmark a directory. That does it for me! 
There's also an option to automatically do it, in the settings menu for the project view. I think it was called Follow to Source. I'd have to double check. Blew my mind
You can use the Navigate to File command and type the name of the directory.
Using `is_a` will raise a E\_STRICT warning. It is deprecated in favour of the `instanceof` operator since PHP 5.0.0.
That's true what's my issue is that our project has multiple directories with the same names but I usually only need to visit one of them. Most of the times I type a couple of the parent folder names in the search and it works but it would be handy if I could replace it with a keyboard shortcut 
what a shame . you have a very hard time getting people who have the heart of the company by using an agency or contract devs.
We’d need the full error and a bit more detail to help out matey
What other details should I give you?
The full error message? Which packages are you using? Which stack? What is the line that is causing the error? 
Oh, looks like i've found the problem. The problem was in action in my code. Anyway thank you for your time. :)
Thank you for reading the sub's rules next time.
If that's the case, when why can we write post bodies in /r/PHPhelp? Compare https://www.reddit.com/r/PHPhelp/submit with https://www.reddit.com/r/PHP/submit
They use Symfony framework :)
That looks like a time capsule
Because there are a lot of people who just do front-end stuff.
As far as I can tell, it's mostly defaults and templates.
Same here. Having a team on staff also may be more beneficial to the quality of the product since they are usually more invested in it.
This is awesome! Didn't know about vim-test, it's great! Thanks for sharing!
Please don't use SMS for security.
I don't have any recommendations about the authentication system itself, but /u/sarciszewski has written at length and warned against the use of all the JOSE standards (JWT included). At least worth giving a read before you dive into implementation. [https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid](https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid) [https://paragonie.com/blog/2018/03/paseto-platform-agnostic-security-tokens-is-secure-alternative-jose-standards-jwt-etc](https://paragonie.com/blog/2018/03/paseto-platform-agnostic-security-tokens-is-secure-alternative-jose-standards-jwt-etc)
It's worth saying that JWT isn't insecure. Just that improperly done JWT is insecure, and that it has multiple ways in which it can be improperly done. 
Indeed.
I just tagged version 2.1.0 and you can import and export this format. You can use this gist to generate the image from this post: https://gist.github.com/drupol/32c797e6ac3600222bfed9d94406870e
Why do you not want a cookie-based solution? Where do you plan to store you JWTs?
This new version is a little different. Google wants you to run the script at page load, and even on pages that don't need recaptcha. For learning, off course. Not spying. 
Agree, but bumping requirements to 7.0 a year after it's no longer supported seems... rather odd. [https://en.wikipedia.org/wiki/PHP#Release\_history](https://en.wikipedia.org/wiki/PHP#Release_history) If they're going to bump it at the end of 2019, why not at least 7.2?
So a prospective new user is going to go through a loop of rejections because the password they entered was compromised somewhere else before? I must be misunderstanding this because its absurd.
It probably won’t be too many. After `password` they’ll try `password1` then `password2` then `password3`. Then they’ll give up and just type `qwertyuiop1`.
I think it's fine as long as they are just recommendations, but it's pretty frustrating when a website is deciding how strong **my** password needs to be.
This sounds excellent. Working on a Gatsby JS project rn, but will definitely be trying a symfony4 and react
I'm trying to execute a Python script using `shell_exec` or `exec` that executes a Python script that takes a few seconds to run, and its results don't display. I've tested it with simpler scripts and I don't have any issues. Thanks in advance!
A book on PHP 5 is fine for learning, but you really want to learn the new features of PHP 7 as well.
If this interests you, then likely [so will this](https://caremad.io/posts/2018/08/pypi-compromised-passwords/). PyPI has been using `have i been pwned` in their auth for a few months now.
7 isn't SO different that starting to learn from nothing with a book based on 5 is worthless. 
Anything &gt;= 5 is totally fine IMO. Yes PHP 7 has some great features and new stuff to learn, but don't let anyone tell you that learning 5 is too out of date. 
To chime in what other people are saying, 5 is fine but don't ignore 7 as you're learning. A 5 book should give you pretty good broad strokes, and might even be helpful if you ever have to re-factor old code you may have a slightly better understanding
My apologies up front: this is a horrible idea unless you're a super sensitive website (HIPPA, banking, government) -- and even then, there are far better ways to protect user login than insuring nobody--in the entire world--has ever used the same password. I do not recommend any site implementing anything like this. The last thing you want to do is make a sign up barrier more difficult. It's hard enough now getting users to even sign up, imagine with this implemented?
I agree if you learn from picking up 7 isn't that bad but, tbh if its the first foray into programming I would suggest learning basic first...after that you have all the core learning and you can apply it to any language php, C, java, js ...etc
Go ahead, but with the mindset that you'll have to relearn half the stuff for PHP7. For anything but a learning experience, I will always recommend the non-obsolete versions. That is, 7.2+
I wouldn't quite call 7.0 obsolete...
Are you sure the Python script is sending it's output to STDOUT?
http://php.net/supported-versions.php 7.0 is EOL, 7.1 is down to security fixes only.
Ah, fair enough. I was thinking more from a learning perspective and not supported versions. 
PHP 6 does not exist.
Perhaps for the breached passwords you could provide a warning to the user that the password has been compromised and let them confirm they still want to use it. But it might also freak them out and they'll leave your site.
What is the significance of these lines to your program or whatever you're coding?
I think we, as developers, need to change our mindset/terminology away from statements such as "preventing users registering" to something along the lines of "encouraging our users to use better passwords", and by implementing both of the type of suggestions *(pwned/nist)* within this article. &amp;#x200B; We also need to be building these type of checks into our UX *(same as, say, username checks)* **before** the user hits that registration button. &amp;#x200B; I built a HIBP api into my registration system, and registration UX, and have been super happy with knowing that I am helping my users have a more secure account.
Um, no... A password is literally something that only you know. And, it's ideally something that only one site can verify. If you're not using a password manager, you're wrong. This assumes that you're a software developer working on an authentication system, so you should already be a security expert. If you're not a security export, then you shouldn't be working on an authentication system. If you're not a security export, then at the very least, you should be using the industry standards, especially be using the Have I Been PWNed API to comply with the industry standards. Really, if you can't completely understand [https://pages.nist.gov/800-63-3/sp800-63b.html](https://pages.nist.gov/800-63-3/sp800-63b.html) on your first reading, then just sit down and shut up, kid. You're already in the wrong. The first rule of security is: Don't roll your own. Ever. And if you don't follow the industry standards, you're rolling your own; you're being stupid.
Yes. Exactly. If a new user is reusing their password, they need to be told that they're being idiots. They should be (politely) invited to educate themselves in how to protect themselves. Including being told, in no uncertain terms, that if they use a known compromised password, that they're idiots.
Your book advertises itself as *PHP6*? That's awesome! What would have happened is, the book producers wrote a PHP5 book. And because PHP is traditionally quite good about not breaking legacy, they just slapped on the "PHP6" tag in order to seem up-to-date, and assumed they could get away with it. Joke's on them though, because PHP6 was never released, and instead it went straight to PHP7, which *does* have breaking changes. For learning purposes, your book is just a PHP5 book (*maybe* with a bit about unicode, and whatever else was in the draft for PHP6). PHP5 is going end-of-life in two weeks - so although there'll be plenty of work for migrating PHP5 to PHP7 for a while to come, you'd still need to know PHP7. For anything new, you should probably be using PHP7.2 and above.
PHP 6 back end + Angular 3 front end all the way. 
&gt; I do not recommend any site implementing anything like this. The last thing you want to do is make a sign up barrier more difficult. It's hard enough now getting users to even sign up, imagine with this implemented? What are your priorities?
I have no idea why the book says PHP 6, no wonder I couldn’t find anything about it.
A password security meter is usually a good way around that - set it to display "unsafe" if a user chooses a known hacked password, but let them continue regardless, if they really want to
I’ve been using this in Firefly III for about a year now and I’ve had zero complaints. It will be enabled by default in the next release. Granted, I’m talking about a self hosted tool so the risk of losing users is slim. 
&gt; you'll have to relearn half the stuff for PHP7 Nonsense. What do you need to “relearn”? There are s few extras but nothing vital. 
What started out as PHP 6 ended up being PHP 5.3. Which makes me think the book is based on PHP 5.2 which *is* outdated. Which book is it, exactly? It should still be fine for the basics, but you may be better off finding something that covers PHP 5.6 or higher. 
Hahaa, azerty masterrace!
I've run into sites with this restriction when coming up with a throwaway password.
From my experience if someone's account gets hacked they blame you and not their password reuse. And when you get hacked they don't trust you anymore and will cancel. Then they will tell everyone how you got their account hacked. The only thing that makes a customer more angry than this is charging them when they don't think they owe you anything.
Harshly worded, perhaps, but imo this shouldn't be as downvoted as it is. As developers, we have certain responsibilities. Pussyfooting around that isn't doing anyone any good.
Actually it's not telling you how *strong* your password should be, it's telling you not to reuse a known bad one. This is not the "here's a list of arbitrary rules your password should adhere to".
It's OK for learning, but 7 would be better. Also, security nowadays is a hell of a lot more important than it used to be. Eg, sanitizing database queries and hashing passwords. So even if those subjects are mentioned, they might not be given the prominence they need now. &amp;#x200B;
&gt;Setting XDebug is extremely easy and straight forward on those images I find it pretty hard on the opposite. You need to enable the extension (that can be done easily using "docker-php-ext-install xdebug"), and then, you need to find the IP of the host to configure "xdebug.remote\_host" (and first, you need to understand that xdebug contacts your IDE and not the other way around which is far from obvious for newcomers). Finding the IP of the host is a bloody nightmare. You can get the host ip using "**host.docker.internal**", but this works only on Mac and Windows (not Linux). Ooooor, you can simply use the image and add an environment variable "PHP\_EXTENSION\_XDEBUG=1" :). &amp;#x200B; &gt;Same with other PHP extensions. It really depends what extension we are talking about. Did you try to install GD in the Docker container? Or the IMAP extension? As soon as there are some dependencies involved, it becomes hard. Documentation is squattered all over the place. &amp;#x200B; The correct way to install GD extension is: apt-get install libjpeg62-turbo-dev libpng-dev libxpm-dev libfreetype6-dev libjpeg62-turbo libpng16-16 zlib1g libxpm4 libfreetype6 docker-php-ext-configure --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-xpm-dir=/usr/include/ docker-php-ext-install gd apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false libjpeg62-turbo-dev libpng-dev libxpm-dev libfreetype6-dev (apt-purge is important to remove the dev dependencies that are no-more needed once the extension has been compiled). &amp;#x200B; I mean, how easy is that? Compared to adding another environment variable: "PHP\_EXTENSION\_GD=1". &amp;#x200B; And in the standard Docker image, when do you use `docker-php-ext-install` compared to `pecl install`? Where is the documentation for that? Overall, I find PHP extension installation difficult. &amp;#x200B; &gt;File right managements? What problem exactly did you have with that? &amp;#x200B; If you have never had problems with file right management in Docker, I'll assume you are a Windows or Mac user. The standard PHP Docker image is using the "root" user by default. If you are using it for development purpose (mounting your project in the image's "/var/www/html" directory), it means that when you run "composer install", all the files generated (composer.lock and the vendor/ directory) will belong to "root". This is just painful. You will end up regularly running commands on your host like "chown myuser:myuser . -R" on your project directory to put back ownership in place. Or, you can use my image that will take care of using a user that has exactly the same ID as your host OS regular user... no more file ownership issues! In a development environment, this saves a lot of time (and a lot of pain). &amp;#x200B; Don't get me wrong, you can do perfectly fine with the standard Docker image. But it takes more time and more energy, and overall, it's harder for newcomers to Docker.
PHP 6 doesn’t exist and PHP 5 is outdated without of any support. ....and that’s why you got the book for free
[removed]
I love the return type declaration. http://php.net/manual/en/functions.returning-values.php
No, it's not. PHP5 security supports ends in about two weeks [https://secure.php.net/supported-versions.php](https://secure.php.net/supported-versions.php) and after that it must be forgotten for greater good.
Tbh, i recently discovered return types, and i find it awesome too
Compared to what? PHP5 or other languages?
Please stop using Google recaptcha. It used to be great. One click, and done. In the last few weeks that has changed to the point that a week or so ago I had to (I shit you not) do 36 clicks on fire hoses, crosswalks, busses and God knows what more. This is not about security, this is about Google fucking with us and using us to train their shitty ai. Please start using better alternatives
 Follow the subject 
Compared to PHP 5, i tried to add text but i figured out that i couldn't, and i was trying to edit the title, but i couldn't do that either
Have you looked at PHPActor? I started using that recently and it provides a lot of the same refactoring tools you would find in an IDE.
These checks could still be done, but rather than blocking registration, you could display a message and provide an additional step in the process to allow the user to continue using an insecure password or go back and change it. Reality is that some people don't care about how secure their account is, depending on the service that is provided. Would someone use a complex unique password for a service that offers a to-do list if they don't intend to ever add billing information? They may or may not, depending on the tools they do/don't use to manage their passwords.
Years ago, I started using a simple password: "lcjury" Then, systems started asking for digits: "lcjury1234" Then, we needed digits + upper case: "Lcjury1234" Then, we needed symbols: "Lcjur&amp;1234" At this point, I got a lot of different passwords, so, each time I tried to log in on any website, I had to loop through all of them. A lot of times I get blocked for 15 minutes. Then we have facebook, those were smart enough to not let you reuse an older password (and now people is copying that idea), so I added the domain "facebook" word to my password: "Lcjur&amp;1234Facebook" Of course my password is not that simple, but, my password has the "@" symbol, and there are websites who let me use any symbol but not the "@". I fucking hate this rules. Each time I go to a new site, it has new rules. I have accounts in two banks, one ask me for a 9 character password, it can't be longer or shorter... The other asks for a 4 digits password... Already lost access to a lot of accounts whose password I can't remember. ¡Stop forcing those stupid rules! Personal opinion: a minimal length and avoid most K used passwords are enough, stop forcing your custom rules on your users, instead, use your time securing your site!
Why not to read the release notes and choose your own?
Indeed, for people wondering why.. You're basically moving all the trust in cell phone carriers support teams, which is where social engineering comes into place. Example: https://youtu.be/lc7scxvKQOo This is especially dangerous if you allow people to reset passwords with one time password codes sent through text messages.
I wouldn't recommend PHP 5.6 either. It's not getting any features anymore and security fixes will be over at the end of the month as you can see here &amp;#x200B; [http://php.net/supported-versions.php](http://php.net/supported-versions.php) &amp;#x200B; Since PHP 7.0 is also already EOL I would advise starting with a book for PHP 7.2 or even 7.3
I'd like to hear other people's opinions
You're supposed to use a password manager these days.
If we are "supposed to use password manager", then why we use password at all?.
Well yes this isn't the best system but changing everything from today to tomorrow to use something differently just isn't feasible so it's the best thing to do right now 
Maybe just use == instead of ===
Thanks for the reply, but it did not work
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Put an / in front of the uri
Null coalesce is one of the best things, right up there with return types and scalar type hinting 
1. typehits for primitives 2. return typehints 3. static array optimization [https://blog.blackfire.io/php-7-performance-improvements-immutable-arrays.html](https://blog.blackfire.io/php-7-performance-improvements-immutable-arrays.html) which gives free speed on compiled containers (Symfony) 4. declare(strict\_types=1); kinda ironic when declaration is not strict :) &amp;#x200B;
Thanks, but when i try to delete the filter\_input triggers and it says "missing pagesid parameter"
Then its still redirecting to itself. Try to var_dump pagesid
Can you explain your problem more in detail? Like exactly what part of your code doesn't work exactly? 
1. It wont delete from the database 2. it wont redirect depending on the pages\_id 
Look at the bind params line - too many arguments? Var_dump the variables before the if block and check that the types match the conditions
I mean you're aware that many places are implementing this? Even Eve online has this checking when you sing up or change password. This is why people are being encouraged to use password managers, then they don't need to think about what password to use, just let the password manager deal with it. The other option is to implement oauth and provide a few Auth providers (Facebook/Google/etc). Then you don't even need to ask the last user for a password. 
Let start with first problem. When you execute your query what is result you get? True or false?
Thanks for the reply, i dont see why theres to many arguments? Theres two right?
Try a raw query to see if the problem is the way you are settting the parameters 
when i try to delete, the filter\_input triggers and it says "missing pagesid parameter"
Absolutely. We recently adopted code reviews at work (I know, I know...but they largely ignored them until I got there), and now I reject any new functions that don't have strict typing and return type declarations.
There is your problem. Before executing your query print your post data and check if your pages_id is in your post data 