What do they use, then, genius?
[removed]
Please look at the basics as well, do a small project and get it reviewed by someone for pointers - frameworks are brilliant time savers when you can work within their bounds, but they are just a tool, and it's good to know the basics, and when not to use a framework. I've seen developers with years of experience make interesting decisions on which tools to use (e.g. a one-time data import that could have been written in a couple of hours in a single file script, blown out into a Silex-based behemoth that they spent two weeks working on) From your experience I'm guessing you've mostly done done desktop development, so you'll need to learn about web application security if you haven't already - best practices are easy when they're forced on you by a framework, you end up following them without really needing to know them, and if you go to an interview, you will probably be questioned on them. Personally, when I'm recruiting for developers, I make it a requirement that they can develop without a framework, and our pre-interview task requires the developer to put something basic together without using a framework. It's still really scary how many (otherwise senior) developers don't think about SQL injection, XSS or similar issues.
I don't know on what you base your assumption that I am the creator of Laravel Zero, but I am not. See my other comments below.
&gt; My experience with it so far has been quite incredible as the framework seems to pretty much do all the heavy lifting for me. Laravel is a great framework. Definitely keep using it, you'll save yourself headaches and time by doing so. &gt; Off the top of my head, as sad as it sounds, I don't think I'd be able to connect to a database, do database queries, pagination, routing, user logins, etc without a framework. That's fine, but try and do all of those things by hand on a side project . Once you learn how much work is involved in getting it right, you'll appreciate how much Laravel does for you. These days it's rare for a developer to write their own framework but the best developers do know how they *would* write their own framework *if* required to do so. Once I started picking apart frameworks and rewriting them myself I learned why certain things existed, how I should (and shouldn't) do things and why continuing to use a framework was great.
Nothing bothers me, friend. I just wanted to know if this was considered standard. Thanks
It really depends on what your goal is. If you need to create a working project in limited time - go with a ready-to-use framework or even a CMS and just tune it to your needs. If you have some time to spare or you require some deliberate logic in your project - stick with the frameworks and just extend them. Some frameworks have tons of different 3rd-party modules already written for them and, while trying to understand if that is what you need, you'll learn how other people do stuff and learn from that. Just try not to stick with only one framework. See how others do the same thing. Or at least see how the framework changed over the versions (like Zend 1 and Zend 2 are very, very different, yet still the same framework).
In my opinion, build your own custom web applications from the ground up so you know how things work. Then refactor-refactor-refactor until you're content with your work. Then ensure the performance and security is on-par. Now refactor again. Now you know how a framework works, switch do a decent one ;-)
The article is more than a year old, and the PSR-15 draft has been updated: https://github.com/php-fig/fig-standards/blob/master/proposed/http-middleware/middleware.md The article however explains very well why the change needed to happen, and gives a better understanding about the current draft.
That's usually a good starter app. Might be good to redo the app in a framework afterwards to get a good feel for what the framework is providing 
Honestly... &gt; is this really the most efficient way of doing this task? I'd Re-frame to avoid most efficient because the most efficient depends on what you are measuring, and usually involves bad things we don't want in production code because they are "efficient". That said there were a number of regrettable features of the article Mail::send('emails.success', ['email' =&gt; $newsletter-&gt;email], function ($message) { $message-&gt;from('gtkbrain@gmail.com', 'Goodness Kayode'); $message-&gt;to('gtkbrain@yahoo.com'); }); A Lot of article code should have been put elsewhere, constants moved elsewhere or removed entirely, so that it can be tested. It also doesn't mention some best-practices specific to email. * DNS SPF records * DKIM on all emails * Using BCC to send batches of emails * Metrics systems Personally, just follow a mailchimp tutorial and don't clutter your app with such things. As well as all the above, they also try to ensure you are being responsible with your emails because your spam affects their business and not being a spammer can be hard.
Please note that aligning variable / array declarations can be annoying when reviewing pull requests / diffs, because when you add a new variable / element that is longer than the existing ones, you will have to reformat the whole block. For this reason I prefer not to align variable / array declarations.
although this is pretty, it messes up the diffs, making code review less efficient and creating merge conflicts even when no code was changed. every time you add a longer key to the array, you have to change the other lines to fit, and the diff will report more lines changed. (I still do it though, but it's important to keep this in mind when on a team)
when in doubt, follow [PSR-2](http://www.php-fig.org/psr/psr-2/). your code will feel natural to anyone used to this standard and you can expend your mental capacity on how the code works, and not how it looks. 
well... for me this site says it uses PHP...
Note that you can always configure your diff to ignore spaces. 
Git merge will take this in consideration anyways and make you compare stuff manually to resolve the conflict, which is prone to human error. I was bitten more than once by this even on small teams. 
Luckily, I am merging using PHPStorm as well :) It highlights not only the changed line but the actual contents that has been changed in that line. 
But...I don't see anywhere in PSR-2 addressing this question?
my bad. I was thinking of [the Symfony code standards](http://symfony.com/doc/current/contributing/code/standards.html). it's like a superset of PSR-2. 
Normally I'd say get a few projects under your belt first. But you already have experience with other languages. If it's web experience, just dive into a framework. The language itself is pretty simple outside of the terrible naming "conventions". 
It's an up-vote fishing expedition post. He already knows the answer to his own question. Just the usual bullshit here.
Events aren't the only way to extend something. It's merely the most loose approach. And without care it results in race conditions and dependency nightmares. Say how is the order determined about which plugin fires first for that button? That order may determine not just simple visual things like the position of a button, it may also result in items being *replaced* by plugins that fire later than other plugins. People who've dealt with WordPress plugins (which are also event-driven) are aware of the result. There was a site I had to fix few years ago, where removing an **unused plugin** causes a **seemingly unrelated library** to not load before **another unrelated plugin** runs, breaking the plugin. Events are so much fun, you guys....
I have always gone the way that i wanted to do something, I would do it myself and learn exactly how it is done before using a framework because then you have a better understanding of what is involved rather than putting blind luck into a framework that you would have little appreciation for. In other words (if you have taken calc courses) they always teach you the hard way and then go back and tell you all the short cuts. I think if you start to craft your own solutions to your problems, it gets you thinking in the same way that PHP does and thus you gain a better understanding on how things interact. just my 2c
So we do a bunch of configuration, and we stop even before a simple "Hello, world" is achieved?
Yeah I still use Netbeans when ever I do any local work (almost all of my work is done via SSH now using Vim). As the other comment states because they stick to a traditional software release cycle (every 6 months for them) new features are not released until (at least) 6months later. Even with that said, its extremely fully featured for PHP development and makes the cost for storm hard to justify when Netbeans is free
This. It also destroys `git blame` history, making it harder to track down when something was changed.
If you had an active purchase at the time, you got a two year licence if you paid for one year. Maybe that's what happened? My first payment since then is coming up, but it's only $41 for a year
Why is it the only for Continuous delivery. I've used other ORM in the past, so I must be missing something that is not explained in the README of the repo.
It seems to me like you want to learn PHP in a timely fashion. Keep in mind that taking classes will often get you to learn core concepts much faster than you could ever learn them by yourself. What you suggest is good certainly but It also depends on what you want to achieve. I think the web is so complex nowadays that good websites are made by teams and good developers are specialized in something. Even "full stack developers" have a strong point. Try to focus your learning on what you want to get good at.
for stuff like configs I tab align, but the arrays in my code not. 
You can pay me $299.99 and Ill add a license for you on my companies Jetbrains license server.
I'm lost as well. The only place I see 'Continuous Delivery' mentioned on that GitHub is in the link to this Reddit post.
I indent the members, but if it's full of constants I also save it and load it, as it's essentially not code, but config
Which could me a lot of different things depending on the context. Even in the context of click bait `rise to the` doesn't make much sense to me.
which is why spaces &gt; tabs
OP's mistake is that he's looking at the `BUSINESS AND ORGANIZATIONS` and not `INDIVIDUAL CUSTOMERS` ([see here](http://i.imgur.com/7GHK76u.png) I've seen a lot of people make this mistake and I notice that JetBrains has attempted to address this by adding obvious tabs at the top. Not sure what else they could do besides making it default to personal license prices.
Nothing manly about shooting yourself in the foot.
You don't have to become a PHP Generalist, but Magento sucks. I'm basing that on an issue I created with a PR was closed because &gt; the implementation also includes composer package generation tool, so in case if some module has this dependency we will not add this to the base package and project +tests :). &gt; &gt; Reason why we have it in require right now - is dependency check for development flow, when all magento modules are in replace section, so we duplicate this requirements to make sure that extension is not missed after install. But for composer based installation this requirements are redundant and should exists only on particular package level. Basically they made a tool, to manage their tool that manages their dependencies... That turned out to produce broken output. Seems like they need a Yo Dawg meme
You might think it just "looks pretty" and it doesn't have any impact on your ability to read the code and pick out errors, but thousands of articles on Google Scholar about the impact of alignment on comprehension and reading speed disagree with you. But yeah, if you are a tabby programmer then please align the key-value pairs using spaces.
It's in the PSR-2 Coding Style Guide Additions. https://github.com/php-fig-rectified/fig-rectified-standards/blob/master/PSR-2-R-coding-style-guide-additions.md
I didn't know that was a thing… TIL
Hi, I updated to repo with most of your notes fixes, thank you very much for such review. I couldn't understand what do you mean by this note: `Does not attempt to respect cache headers - all resources will be fetched new.` Could you please specify more about it? Thank you in advance!
I despise #2. I feel obligated to align after I make an edit. I understand your editor can create this magically, but don't assume the person editing your code is using such tools.
Yes, but not the subsequent `git blame`, to my knowledge. And if that's not the case I'd love to know how to change that! Edit: never mind, saw your other comment. Off to reconfigure everything. 
NuSphere PhpEd. Has a superior debugger. Really. Everyday tool against Linux and Windows environments, if you can handle that it is an IDE for windows.
I'm actively working on a simple job system, just need to figure out why code coverage segfaults our RabbitmqEngine (tests pass, just cod coverage wets the bed)/
Generally without tabbing. I've gotten used to a single space around the arrow so that works for me.
i have applied to PHPstorm open source program and just got all products for free for one year. i will probably buy a licence next year. overall, after using sublime text for years, i find phpstorm really great for debugging and code autocompletion is smart and really handy.
Ew, that's the same repo that produced this [idiotic argument regarding tabs vs spaces](https://github.com/php-fig-rectified/fig-rectified-standards/blob/8d412b2d4a6009b0077158d32fe938d79bdefb25/Reasoning-Tabs-vs-Spaces.md). I don't think they should be used as reference for any sort of standard.
Perfect task for and Event handler, also called Jobs /Queues. Some documentation to get started: https://laravel.com/docs/5.4/queues
That might work, but it's not as certain as skipping alignment entirely.
I'm going to start using tabs set at 7 spaces, with 3 spaces following commas.
And arrays will be right-aligned. 
* https://devcenter.heroku.com/articles/php-workers * https://jtreminio.com/2015/12/queues-working-smart-faster-in-parallel/ * https://www.rabbitmq.com/tutorials/tutorial-two-php.html * https://www.madebymagnitude.com/blog/creating-a-task-message-queue-in-php/ * https://blogs.oracle.com/opal/offline-processing-in-php-with-advanced-queuing * https://cloud.google.com/appengine/docs/standard/php/taskqueue/push/
I think the difference here is that teams that use a Git repo rarely (if ever?) review PR's in their IDE's
&gt;Shows w3schools nope nope nope nope nope nope nope nope
Do some good in depth tutorials to learn what tools php has built in. Then go through the quick start guide of a few different frameworks (Zend Framework 3, Laravel, etc) to see what they do well. There are still times I build single page scripts that require no framework, but don't try and reinvent the wheel just for the sake of learning. Use composer packages, use frameworks where appropriate, see how other people have tackled the same problems. Eventually you may find that there are problems you could solve better, faster, or more efficiently than the pre built stuff, but will build a lot of stuff before you get to that point.
Seems like it. This is the link in OP's only other post: [Image upload and moderation with Python and Flask](https://medium.com/@antoinegrandiere/image-upload-and-moderation-with-python-and-flask-e7585f43828a) They're practically identical posts with different code snippets and `php|twig` replaced with `python|flask` Edit: Took a look at other Medium posts by 'Antoine Grandiere' [How to build an image moderation system with Node.js](https://medium.com/@antoinegrandiere/build-a-moderation-system-with-sightengine-for-node-js-6600ac0668c8) [Image upload and moderation with Vue.js and Node.js](https://medium.com/@antoinegrandiere/image-upload-and-moderation-with-vue-js-and-node-js-407fb5a1e0c0) I bet you can't guess what image moderation API is advertised in each article. Edit 2: nvm they've now submitted reddit posts to the additional 'articles'.
I'm refactoring an older application that does a lot of serialization and I *may* need this tool to dig into that a bit more once I get to that area. Very edge casey, but I'm actually saving this tool for just that.
very interesting read indeed! At this point I just hope they (PHP-FIG) can finalise PSR-15 soon. Been waiting far too long for its release. Anyone know the progress of PSR-15?
Wordpress its used a lot, and when you're moving a WP install from one server to another, and things like web root dirs change or domain name changes I think its still stored in the db as serialized data.
As others have said - be very careful about sending that many emails unless you're using a mail service like Sendgrid or Mailgun. Shitty Option: Increase your memory, timeout, and run times in PHP. Just let the bastard run. Don't do that. Another Option Not Covered By Others: AJAX. Set it up so your have a front-end JavaScript that makes batched calls to your PHP. You can then use limit and offset in your MySQL queries. As an example, let's set your batch size to 1000. Hit hit a button and your JavaScript calls your PHP for MySQL to pull 1000 records with 0 offset. Then you loop like normal. The JavaScript knows when this is done and then sends another call to pull 1000 records with an offset of 1000. With 20k records this loop would run 20 times.
&gt;For the first issue, you can work through the collection in chunks. For your stated example, it would mean doing a query for maybe a thousand records, looping through and processing each of those, and then doing a query for the next thousand, etc. Total execution time would increase, since you're making more calls to the database. However, maximum memory utilization would drop by whatever factor you choose to split the working set by. Also I think this might be a good time to mention [Generators](http://php.net/manual/en/language.generators.overview.php) - at least within this context. However, with the problem at hand I agree with the top comment - use something like Mailgun with Queues and Workers.
I'd say learn how to use the language and it's syntax. It will help understanding what a framework offers to help extend the basics.
Neat! I see a potential use case here for "proof of knowledge," i.e. person A knew fact X on date Y. People sitting on [text file + hash + Tweet of the hash from 5 years ago] might use this as a more convenient way to keep track of it all.
In addition to what others have posted including sending that many emails yourself, there is a bug with php 5.6 and associative arrays using ushort. So depending on your php version you can get into trouble if your arrays get over 32768 items. https://bugs.php.net/bug.php?id=68057
We used to send 100k emails a day using a php mailing list software Static IP through a rackspace dedicated server, fill in a template and upload a csv with the email addresses and customer info....once in a while you'll get flagged by an ISP or two, usually Yahoo or AT&amp;T, but it works great
I take it you're involved with FIG? :) Anything the community can do to help these things move forward?
Please cool it. This is the fifth time you've posted the same shitty insult, and it wasn't funny the first time.
How is this a question for /r/php? Anyway, consider using gulp or grunt and set up a filewatcher that triggers a script when a file changes.
Was that a long time ago? We used to blast emails with my previous company (3 or 4 years ago) and got shit-listed rather quickly. Luckily we rebranded the product not long after (and switched to Mailchimp) but the original domain was pretty much shadowbanned from the internet :( There was probably something we were doing wrong!
Does this fall in the category of event-sourced systems?
&gt; AJAX. Set it up so your have a front-end JavaScript that makes batched calls to your PHP. You can then use limit and offset in your MySQL queries. &gt; As an example, let's set your batch size to 1000. Hit hit a button and your JavaScript calls your PHP for MySQL What? Why? If you really want to go down this route just loop in PHP why bother with a button and AJAX? Seems pointless 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
What do you mean by 'a lot of types of events'? Afaik an event only has data and is completely typeless so said, except from a different name foreach one. Are you looking for a CQRS solution only? As you also mention event sourcing. Prooph (http://getprooph.org, https://github.com/prooph/) is a pretty 'mature' library that does it all.
For something like 20K, you can get away by warming up your mailers IP, send a batch of 200 today in the morning, 400 today in the afternoon, keep doubling it until you have sent all of them, if it is an incremental growth ESP's will not be too eager to flash you out, but a service like mailgun is by far better.
I'm also starting to learn Laravel, and found the official documentation to be the most helpful resource for people who already have PHP- and MVC framework experience: https://laravel.com/docs/5.4 I personally found laracasts to be too slow-pased for my liking, but if you like video over reading, it's THE place to go: https://laracasts.com/ I've also been reading about PHP frameworks concepts in general, independently of a specific framework. For example: I was recently looking into middleware, and have been doing research online about the concept itself. It made understanding Laravel's implementation a lot easier to understand. You could apply the same to all concepts of the framework. In case of middlewares I started looking into PSR-7 and PSR-15, which led to some blogposts, which led to a better understanding on the topic.
I prefer #2 but I write #1 as it's the only way to guarantee consistency within a team. Having code reviews full of "Arrays are no aligned" was not helpful, it actually became a problem as people got rubbed up the wrong way. 
I let PHPStorm auto-align arrays. - Personally, I find it more readable. - PHPStorm can automate the process. You should never do it by hand. And here's something to think about: this type of construct should not be used that often in your codebase. Arrays should represent a collection of things, and more often than not, should not represent an "entity". Here a good rule of thumb: can the array still be used if you leave out any number of elements? If the answer is yes, than an array is the correct solution. If the answer is no, it means you're heavily depending on array keys; a better idea is to use a data-object in which the definition of this "entity" can be created by the developer. You can find a good article about this technique here: https://sourcemaking.com/refactoring/replace-array-with-object So to revise, these types of array constructs should really be the exception in your codebase. There's no 100% way around it though, many frameworks allow you to pass key/value mappings for configuration, and PHP in itself is also made for this. But I feel it can and should be avoided in many cases.
I kind of like their ad which reads &gt; Do activity (Answer, Blog) &gt; Earn Rep Points &gt; Improve Rank &gt; Get more opportunities to work and get paid! but means "Waste your life to get meaningless virtual points and tell your future employer you prefer to hang around answering stupid questions to doing your job"
Events may have little overhead on the application but the handlers may not. If you need to manually map an event to a handler that is not lightweight. If you've worked with Prooph, what recommends it over the others?
You say it's superior to blockchain solutions but don't explain how. Didn't look at source yet but if I post something to your service, I imagine you store the hash, well, chain them together, so I can't change an earlier file without disrupting the rest of the data. But since it's self hosted, if I run my own server there's no way to establish when documents were added to it (through faked time stamps) only the order they were added, no?
Absolutely a situation for something like RabbitMQ/etc... I would also recommend looking into [Generators](http://php.net/manual/en/language.generators.overview.php) when dealing with large data sets (helps keep the memory footprint down).
When was that?
I'm the editor for PSR-15 and PSR-17. I don't know of anything per se, but you could always ask on the mailing list.
Well, one of the pros of CQRS is that heavy jobs can be handled in the background by dispatching them to e.g. an AMQP instance and let them be handled by another process later (can be a worker, could also be a microservice). Prooph has a community that is actively using and maintaining it. For the PHP ecosystem they have a relatively long experience with CQRS/ES and have already hit the wall many times so most of the issues you encounter when using CQRS/ES for a long time have already been resolved within the library or solutions have been made for them. They also already have solutions in place for publishing events to AMQP and event store drivers for different database types. Prooph also has some cons, they heavily depend on interop to glue everything together without providing docs if you want to do it manually. This means that if you want to have for example everything defined in your Symfony service definitions with your interfaces in front of them to prevent coupling you'll have to go through their factories one by one to find out how everything fits together. This is gonna take you some time if decoupling is one of your wishes. Prooph also ~~has~~ had a different opinion on upcasting than me. They mutated the event store to present the new format of the event while in my opinion the event store is immutable except for some really rare edge cases (where I would use a 'copy and transformation' strategy). But I see this has been changed since version 7 (https://github.com/prooph/event-store/blob/2ff23c2050ad56a097d178d689382c982610a684/docs/upcasting.md#upasting-on-the-fly). I have no experience with other libraries than Prooph by the way except for our in house developed solution. So I have no comparison to other libraries.
I assume you're responding to this part. Please correct me of I'm wrong. &gt; Chronicle is superior to "blockchain" solutions for most real-world technical problems that don't involve proofs-of-work or Byzantine fault tolerance. When people talk about ["blockchain technology"](https://tonyarcieri.com/on-the-dangers-of-a-blockchain-monoculture), they're usually talking about Bitcoin or a Bitcoin-alike, which has [a lot of properties specific to a cryptocurrency](https://gist.github.com/joepie91/e49d2bdc9dfec4adc9da8a8434fd029b), but they really only want or need some of those features. Sapient isn't a currency. Sapient doesn't deal with soft forks or hard forks (if a fork occurs, someone got hacked and a forgery attack was attempted, which means someone is wrong not "let's negotiate who is right in a decentralized manner"). Sapient isn't vulnerable to Sybil attacks (the 51% problem) since it's not a decentralized system (although cross-signing will give you the benefits of decentralization). There is no proof of work or brute force attacking ("mining") protocol built in. Its superiority comes from it being the correct tool for the job a lot of folks (often misled by blockchainiacs) try to solve with the wrong tool. &gt; But since it's self hosted, if I run my own server there's no way to establish when documents were added to it (through faked time stamps) only the order they were added, no? That's where cross-signing comes in. You can fake timestamps locally, but by signing your latest hash and summary hash to your peers, which in turn can cross-sign to their own peers, it becomes increasingly harder for an attacker to fake the relative time, especially if other sources are mixed in. If you know that a specific software release happened at X date, with Y hash, and you see your cross-sign **after** that, it's evidence that you did not submit your message before X date.
Thanks for the explanation.
Yes, I'm not saying that your system needs any currency like characteristics, hence no need to worry about tokens, transactions, bundles of transactions (blocks) or the like. But where the blockchain excels for timestamping applications (I think) is it's distributed nature. You're not reliant on a single server which could have backfilled a ton of entries prior to going live. 
&gt; Had no idea idea so many people would be against it. It's not so much people are against it, its just that its pointless. Relying on human input for something that PHP can do fully autonomously with no user input just doesn't make sense. It also takes extra work and code to do it that way.
Actually microframeworks are good for micro apps..there is no real benefit since everything should be cacheable anyway..but I would like to see Zend Expressive or Phalcon in the list rather than some marinade or limonade or what was it again :)
One idea: 1. Grab emails from mysql 2. foreach 2000 emails (eg - Gmail limit for recipient in To/CC/BCC is 2000 addresses), build a $bcc list. 3. send email to "myfriends@mydomn.com" and looping each $bbc list - so 20,000/2000 = 10, so you would just send 10 emails. 
&gt; Instead, do your research, recognize and avoid propaganda, and trailblaze your own path. And don't let the opinions or attitudes of random people discourage you.
Down votes? The post is factually correct, it says just the above in their extensive license 
&gt; "Ultimately, go forth and code how you want to code. However, IMHO the guidelines in this doc are awful." I said this in another post here on /r/php &gt; As languages mature (PHP has an epidemic for this) some of the more senior members (wont mention names) shout the loudest about "the right way" or the "wrong way" of doing things until it reaches a point where there is little or no creativity and everyone's code looks the same and everything is completed in the same way. This is not always a bad thing but it certainly locks you into a single way of thinking so moving around communities/languages will really open you up to new ideas in programming. It's funny and ironic at the end of his article he sates: &gt; do your research, recognize and avoid propaganda, and trailblaze your own path. Yet the entire article was written because hes shouting off about people doing their own thing and he didn't like/agree with it. Personally I try and follow PSR standards as close as I can but I wouldn't go blasting someone who doesn't, it's your application, it's your code, if it works for you then so be it.
&gt; Then you have to make manual, human-guided trust decisions rather than letting the network decide for you. Secure-by-default, in other words. Secure to you, perhaps. But it requires a lot more trust on the part of your users, customers, etc. &gt;I don't think web hosting companies would like it if I told them they needed to have 10,000 copies of the same 121 GB Merkle tree just to verify a single update for their 10,000 hosted WordPress clients. Why do you need 10,000 copies of the same Merkle Tree on the same server? Or even the same private network? You don't. Your 10,000 clients can all check against one server. &gt;Personally speaking, I'm tired of clients who approach me with: "I have $problem; can we use blockchain to solve that?" (Bold part is a literal quote from two different people spread over the past year, but remixes of that question have been asked about a dozen times since Paragon's inception.) No, you don't always need a blockchain. Yes, you don't always need a blockchain, and it certainly is the buzzword of the day. But seriously, as far as networked timestamping goes, this is an area that blockchains excel at. It's really their entire purpose, the monetary aspect as implemented in bitcoin is almost secondary to it. 
&gt; Secure to you, perhaps. But it requires a lot more trust on the part of your users, customers, etc. Manual trust systems are provably more secure than automated trust decisions made by computers when fed bad inputs. However, they're less usable, and don't scale well. That doesn't require "a lot more trust". I'm not sure what you mean by that. &gt; Why do you need 10,000 copies of the same Merkle Tree on the same server? Or even the same private network? You don't. Your 10,000 clients can all check against one server. That's not fully decentralized.
PSRs are not religion. Following them isn't necessarily "right" and not following them isn't necessarily "wrong". They are standards that any project is free to adopt or not adopt as the developer(s) sees fit. Consistency and documentation is more important than "following the rules" or doing things the "right" way.
I personally ended up switching to Linux on my desktop to develop with Docker. There are some things you can do with Vagrant and Docker on windows to make file syncing faster, like using rsync or [unison](https://www.cis.upenn.edu/~bcpierce/unison/) (there's plugins for Vagrant and Docker), but ultimately that's just a bit of a hack imo when the app will actually run on Linux. Edit: re docker on windows, you should give each project a different port number, or set up some reverse proxy in another container to serve each project, etc. With Compose, you can specify the project name with `-p`, if overlapping container names are the issue.
Well, I switched to Linux for this very reason - I don't want to share any precious resource with the host machine. And also because Linux terminal is of enormous help for the web-programmer in many tasks and I have not a slightest desire to learn an ugly parody - PowerShell 
Doing R level computations in php is ... not optimal. I don't know how much control you have over the server but my thoughts would be to install Rserve. I have done this before in a slightly different setting. It's not overly complicated. 
I'm generally wary of cons where speakers have to pay for their own flight and travel, but tickets cost hundreds of dollars per head (even for students). International travel is not cheap.
Ah. So what you’re saying is... try to convince them to allow me to use R, right? I’m not familiar with PHP at all, but it seems like the amount of computations my R script runs wouldnt be nice for PHP, right?
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [tuupola/trilateration/.../**NonLinearLeastSquares.php** (master → bb0e6f3)](https://github.com/tuupola/trilateration/blob/bb0e6f38541c099420d63f7f7c49b7677576541a/src/Trilateration/NonLinearLeastSquares.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djitdjb.)^.
[OP here] **Notes:** - This is my first PHP project. If anything seems out of place and is common knowledge, kindly point it out. - The helpers are the bulk of the code, but there's also a controller provided to help showcase how to use said helpers and create something useful/beautiful. - The name of the project is CodeIgniter RAP (from CodeIgniter Restful APi), if you shorten the framework's name, it's CRAP, hence the little manure pile that is the logo. - Hope you enjoy using it as much as I enjoyed making it!
Well, he had me write the script on my personal computer. But only PHP is on this machine. But they seem to think PHP is the best
Any chance you are on Windows 10? If so, check out bash for Windows.
PROTIP: https://3v4l.org/8pg7V is a little better for comparing across versions. It looks like it's returning `false`, which fails a strict type comparison: https://3v4l.org/1bOMC
From the changelog of [`substr`](http://php.net/manual/en/function.substr.php) &gt;7.0.0 - If string is equal to start characters long, an empty string will be returned. Prior to this version, FALSE was returned in this case.
Change logs. Who knew! :)
I switched to Linux because of issues on Windows, that was about 3 years ago. I've been using Linux Mint ever since. The one thing that made it the last straw was the differences in versions of git. At the time, it was causing some weird merging errors with other co-workers. Switching to Linux fixed that, it might not be an issue anymore, but I'm pretty happy with Linux, so I have no reason to switch back.
As a Windows *and* OS X user I can say that you need a good introduction to Vagrant (which is highly recommended for what you're trying to accomplish), so I recommend [this post](http://www.sitepoint.com/re-introducing-vagrant-right-way-start-php/). Start with this, it's a very valuable 10-minute read. If you'd then like to expand on that knowledge, I recommend [my book](https://www.sitepoint.com/premium/books/jump-start-php-environment/?aref=bskvorc), which was written precisely for this purpose - teaching people how to deal with good, healthy, isolated environments. Vagrant can in fact perform *very* well when configured properly, and my [Homestead Improved](http://www.sitepoint.com/quick-tip-get-homestead-vagrant-vm-running/) box really helps with that - we use it as a base for all tutorials at SitePoint (thousands of readers from all operating systems, all needing it to work *identically* and out-of-the-box) so it's configured for simplicity and effectiveness. I'd welcome feedback on any of this if you check the resources out, I firmly believe they'll help you.
I don't know why you're being downvoted, but it could be because your comment was factually incorrect. OP said: &gt; I'd rather pay $300 once than $40 a month in perpetuity. But actually you can just pay $89 once, and get a permanent license, which is exactly what OP wanted. Then you said: &gt; It certainly does unless you pay for 12 months in the row That is *one* of the two options they offer. But they have a second option: You could pay for the equivalent of 10 months in a lump sum, and get the license immediately, which is both cheaper and faster than what your comment implied was the case.
&gt; The name of the project is CodeIgniter RAP (from CodeIgniter Restful APi), if you shorten the framework's name, it's CRAP, hence the little manure pile that is the logo. 
As someone who has just ported some R code to run on Android, if it takes R 2 minutes, then PHP is probably going to be way too slow. Of course, that depends on what it is you're doing, if you're being as efficient as possible, etc. 
What is different between your project and https://github.com/chriskacerguis/codeigniter-restserver ? 
May I suggest a name change? CIRAP is a better name. 
&gt; PSRs are not religion. Following them isn't necessarily "right" and not following them isn't necessarily "wrong". As the lead on PSR-1, PSR-2, and PSR-4, I completely agree. Not adhering to them means only that you do not comply with them, and carries no moral weight (either positive or negative). As for the rest: there are no solutions, there are only tradeoffs. I say do the best thing you know, at the time you know it.
It watch class-model's updates than sync database schema without any command during deployment. No needed database init schema with sql file or other migration specifications! The only schema specs are the model classes that control database from development to deployment.
It is an alternative. But doctrine not update database schema when class model change! It say "not my model match with database table but my model class control and update the database schema"
I've installed it but never actually played with it - how are you using it?
i made a simple social network app in php5 forms with vaildation INSERT INTO USERS SELECT FROM WHERE it was not that good looking :D but it worked then i jumped into laravel i won't say iam pro with raw php but i understand the code if i saw it 
I get good performance with Vagrant on Windows but it's because I use bindfs and nfs: vagrant plugin install vagrant-bindfs vagrant plugin install vagrant-winnfsd More info: + https://github.com/gael-ian/vagrant-bindfs + https://github.com/winnfsd/vagrant-winnfsd 
Xml is an ordinary string in this context, so the answer comes down to learn some php first then/or ask more precise questions. In basic scenario it might go like this: $xml_string = file_get_contents('...url...'); file_put_contents('...existing file...', $xml_string, FILE_APPEND); 
I'm pretty new to docker and I'm having a hard time figuring out the best place to put some CLI commands not directly related to any container, like cron jobs (but not limited to them), for example. Are there any best practices telling where should such commands being put in case when used a separate containers for each piece of software (like in devilbox) instead of single container with full LAMP stack installed?
Hmm your IP must have a good reputation with Microsoft/Google then I guess? I've been doing linux/unix sysadmin for about 20 years, and in the last five years or so I've come across heaps of issues sending email directly, so using mailgun on web servers now. You've probably got some sysadmin with time to spend on email reputation stuff? That's good in that case. I wouldn't recommend anyone else doing it though. 
I heard that before. But look at it this way PHP has a lot and I mean insane amount of tutorials and snippets and what not. When you try to find some documentation of building websites with say Python you will be out of luck, but you will find a lot of documentation and snippets how to build desktop programs with Python. The secondary thing is that PHP will run on virtually every system.
For cron jobs, if it's a system I've rolled myself and the cron jobs are fairly trivial what I've done is have supervisord be the service that gets started up instead of nginx/apache, and then have a supervisord config start up cron and the web server. If anyone has better ways of doing this I'd be open to reading them.
I do plan to do that, and I definitely want it to be community driven because that sounds more fun. I've just built too many things for many years without first checking in with potential people if it would be useful. So I thought I'd reach out and see via the subreddit if there's a use for it. But yeah, I'll definitely post here when there's something to show soon.
You may find a lot of tutorials about PHP, but 95% of them are outdated, 10+ years old, full of bugs and security holes, no code style or standard convention, old syntax, etc. There are good sources of information, but most of the time when you google your problem, you are getting bad code.
Advice for human beings : **Never** publicly shame someone by saying their work is awful.
You still have some Tomcat servers running here and there. But I don't find many companies use JSP
Because those people still think about PHP4 or even 3 and don't know about what happened to and with the language since PHP5 and esp. 5.4. And let's face it, PHP 3/4 is really something to be hated, these days, 7.1 however.... love it, it became a really good programming language - and once you SHOW and demonstrate this to the "haters", they usually don't think that bad of PHP anymore.
PHP 5.5 &gt; is pretty solid. PHP 7 is nice, but I'm still writing my code for PHP 5.6.30 :) few years back I tried to learn ASP.NET 4, after failing miserably I given up on ASP and also on Perl and Python. Did not bother with Ruby (RoR) and just sticked with PHP.
Not much, I suppose. I just wanted to use a RESTful API for a project and the documentation of that seemed confusing, so I built my own.
Turns out that the little manure pile offended more people than I expected, so I will probably change the name or at least the logo. Damn shame really, I spent a whole 5 minutes on that thing.
Agreed. I'm a PHP developer myself and I quite enjoy coding PHP. I'm just calling it as I see it. Nothing is flawless - neither is PHP. However, I'm continually impressed with the additions and changes PHP 7.0+. Regarding tutorials and snippets: Yes, they exist. In excess. I'm glad they do. However, the amount of bad PHP advice floating around the web, containing security and SQL vulnerabilities, n instead of log(n) sorts and searches, unintentional code base exposure, etc. is mind-boggling. And these suboptimal and bad practices keep popping up, even in well-respected code bases like Laravel, and - boy - don't get me started on WordPress. :s
Thank you everybody
I just use a trick with "vendor-dir" - set it to an internal VM file system folder (like /var/www/vendor), run a second composer install and add this to my `app/autoload.php` if ( // false &amp;&amp; ( (isset($_SERVER['HTTP_HOST']) &amp;&amp; $_SERVER['HTTP_HOST'] === 'yourhost.devt' &amp;&amp; file_exists('/var/www/vendor/autoload.php') ) || (php_sapi_name() === 'cli' &amp;&amp; file_exists('/var/www/vendor/autoload.php')) ) ) { $loader = require '/var/www/vendor/autoload.php'; } else { $loader = require __DIR__ . '/../vendor/autoload.php'; } For a Symfony project that makes all the difference. Of Course I make sure opcache is working properly and I tweak realpath php.ini settings as recommended. Allows me to easily have under 1 second page load times even for very heavy big projects (like Sylius)
I will prefer to build it in Laravel since that seems better for quick project/development.
The inconsistency argument always made me wonder, whether a hater ever tried to use an IDE with code completion feature. At least IDE I am using always can tell "is it needle or haystack".
I'm used to people naming their things so weird I'm unsure whether the project is serious about anything; it didn't offend me, just struck me as an odd choice :p
The best way that I found is by using a physical hard drive and VMware. The distribution I settled on was Alpine. It works great.
I was replying to the comment not the post: &gt; If you stop paying you get a perpetual fallback to (I think) whatever your current version is. Really you're just paying for updates because the software doesn't magically stop working The OP states "the software doesn't magically stop working" to which my reply was that it certainly does, your license is revoked if you don't make 12 continues payments, if you stop payments say after the 11th payment you get nothing and your license is invalid. Your're just basically renting the software until you make 12 payments
There are a lot of suggestions for Vagrant on Windows. I really like this solution. There are loads of quick LAMP stacks that you can use as Vagrant VMs Scotch has a pretty useful one: https://box.scotch.io/ If you can try and get your VM as close to production as possible but it's a nice hard and fast option
I agree with this, it is the history and inconsistency and it is so trivial for anyone to find an example of bad code online to validate their point. 7 pulled me back in, with strict types it has become a joy to use again, I've been working with PHP professionally since 2001, going to stick around a little while longer now that it is fun again.
Ohh is that what was doubling the memory usage since 7.1.2
Have you tried with Internet Explorer:) There are invisible (for Firefox at least), but functional checkboxes next to file name on "Choose the download you want" (after you click "download" button)
It's a good argument, I use PHP daily and professionally so I'm not against it, I enjoy using it but having used other languages I can see why people can be so frustrated when moving to PHP
It works fine beside that. What stops you then?
&gt; Python is a lot more intuitive if you're a newcomer Yes this is my first language professionally, it doe's have a much larger intake of new developers now as its being taught in schools here in the UK and with the things like the Raspberry Pi etc The thing is I'm not seeing the same level of shit code being shared with Python as I do with PHP even though they both have a large number of "none computer science types" using them. I can only think this is because Python gives you far fewer foot guns and the level of tutorials are mostly high for Python with it being used largely in professional areas first before going "mass market"
&gt; and the fact that haters gonna hate. Yep.
What do you mean ? https://twitter.com/blowdart/status/880277204319457285
The only one personally attacking anyone is you.
Problem is, using XAMPP you will at some point face issues with OS differences. Generally its fine for small personal stuff, but for big stuff, it's certainly not going to be an ideal setup. Even just running vagrant would be a massive improvement over XAMPP, and is little to no effort to do.
Awesome project. Do you have any idea how this performs on Windows/Mac ? In the past I tried a lot of ways to get a Symfony project working on Windows with a reasonable load time, but I couldn't get it done. I prefer to use Linux/Mac but I would love a cross platform solution for other team developers.
I had problems getting into OOP aswell. I got a friend who knew nothing about webdev, but were all in the C# XAML shizzles. I wanted to learn that, and he wanted to learn PHP. So we sat down for a few weeks and got eachother up to speed. Since we both had fairly good experience in our own language, it was quite easy to grasp the other. Anyways, since he only used OOP in his code, i started to learn the paradigm of it. Never looked back, even for simple apps i still use it. My suggestion is, either force yourself to learn it, or find another language to learn for fun that actually kinda forces you to use OOP. Also, get an IDE that works with OOP (PHPStorm etc.)
One aspect that hasn't been mentioned by the other commenters (which so far I agree with all of them), is the performance. Even with PHP7, depending on the type of solution you're trying to produce, PHP might not be the best choice because it's performance might not be good enough for you without really getting into some crazy solutions (see Facebook, creating their own VM, extending the language, compiling it to another language, etc.). Platforms like the JVM, and languages like Go are great because they have things like support for concurrency. NodeJS is an interesting one, because whether you see performance gains or not will largely depend on what you're doing, whereas with Go / the JVM, etc. it's very possible you'll have a (much) faster product at the end, more easily, if you were to develop using those languages.
&gt; Why is PHP often the Elephpant in the room? FTFY
The `validateUrl()` method in `Grabber.php` looks funny.
Thanks for the tip!
my views exactly. Code is supposed to run, not to be a piece of art. readability might be an issue if code is refactored on a regular basis. If hundreds of developers change it on a daily basis. But most code is written, used and then, maybe, a couple years later refactored. Investing hours into formatting, so that when you refactor it a couple years ago, you save a few minutes, is not really efficient workflow. Like with most code-projects, a lot depends on the purpose of use. "single-use" projects will definitely require less formatting than projects that should be a basis for long-term development. Framework-creators should follow a different standard than developers who throw out Advertisment-pages for a week to month use, that will be scrapped afterwards. Most important issue imho is, that all developers working on a project are on the same page when it comes to style. If everyone does the same, it works. if everyone does his own thing, it probably won't. 
They had a lot of updates this year, i switched from macbook full time. Give it a try.
Its too amateurish. * validateUrl() should also check if URL belongs to *instagram.com* or not. * In getFile() you should be using CURL, most of the PHP installations block URL fetching by file methods. Same problem in download() method. * What does Grabber means if I cannot download it!!! 
&gt; Should I just switch to Linux and avoid VMs? I wouldn't mind. In that case, I advise yes. There's plenty of other benefits, as well.
To expand on the "haters gonna hate", it's a way pat themselves on the back for choosing whatever technology they're using.
There are lots of things on Instagram I'd like to grab... ( ͡° ͜ʖ ͡°)
Is silly as it may sound I been using Sublime Text 2 and then 3 for as long as I can remember. I liked that Visual Studio had some nice tools for PHP but my laptop is long time dead and VS isn't supported on Mac, there is the VS in progress but it's like Brackets to be honest. Thing is I am an amature web developer, with essentially most I stuff I write is for-fun or for good friends of mine, as such I don't make any commercial profit and don't find it useful to buy commercial IDE like PHPStorm, I will however maybe look at Komodo Edit as it's free and get's the trick done as well in my view.
WSL is great, I love it. But if anyone is on Windows 10 and isn't a fan of it then you can use Docker's native windows version. On Windows 10 you don't need to run it through a virtual machine.
Ah, but you can't compare ASP to anything. ASP is essentially a giant cross platform system.
Haha yes I seen that one. I would not mind moving to Montreal granted it's only 400km away from me. Must be fun working at Pornhub haha. And hey they did good for themselves if they're running PHP.
&gt; Someone should really be gate keeping to stop this level of inconsistency creeping in. What do you mean? There hasn't been any inconsistencies in years and most of the std library has been defined prior to php 5 and it's been _almost_ TWO decades since the last minor version of php 4. There's no way in hell the dev's are going to 'fix' the issue because of the backwards compatibility. Those functions are stuck with us, but I'm sure there will be more 'class' based [solutions](https://github.com/nikic/scalar_objects) in the future as PHP focuses more on OOP.
Lmao what a garbage sign up form
If you're comfortable using branches, gits branching model is faster. if you want to work in a decentralized manner ... say you commute to work on a bus or train. using git you can work while traveling, commit locally and eventually push your work to your work-hosted remote git instance without any downtime to your work. With SVN the repository is centralized and it's not easy to do out-of-band work like when you you're on a bus traveling. Lastly many of the current "git as a service" providers: gitlab, github, gogs, gitea, etc ... support git directly, but typically only import from SVN.
CI is still alive! I am coding in it right now. Newest version 3.1.5 was released 10 days ago. Codeigniter is now mature, solid piece of software that can be recommended for new project. It's not "cool" and "trendy" like Laravel or Cake but gets the job done fairly well.
To answer the question from the title Is there a reason to prefer a car to a horse for the everyday transit? A jet to a balloon for travelling? Git is the new level, new step of evolution. There are no local repository in SVN - everything you commit, you commit on the server so it's always commit+push. There is no stash. You name it. Apart from that, you have little choice anyway and surely you could make yourself accustomed to SVN as well which for simple tasks is indeed quite similar to GIT But consider converting your future employer into Git. It is pretty plausible and pays. 
If you want a language that was explicitly designed to model natural languages, you should program in Perl. It's damned difficult to get ambiguity out of requirements docs, which are meant to be interpreted by humans. Modeling something for computers off a natural language is an awful idea.
Git is my go-to, but honestly, I don't find SVN that bad. I have some Wordpress contributions, and I still have to use SVN. There are plenty of articles to read the differences. I personally don't find it as a deal breaker. Whatever you use, try to learn the command line ones and not the UI stuff. IMHO, TortoiseSVN is a terrible SVN client but the command line version is much more Git-like and easy to get in a few minutes.
But, don't be afraid to say *why* someone's work is awful. Saying "Your work is awful" is not constructive and can only inflame. Saying "Here are all of the things wrong with your work:" is strong criticism, but fundamentally respectful of the person you're criticizing.
Oh Jesus I thought this was going to be that over engineered and overly political gender select list package again. 
I know what they were TRYING to do but executed it poorly. The absolute best 'prove your knowledge' sign up processes I've gone through is [HackTheBox](https://www.hackthebox.eu). I went to the 'join' page and saw it required an invite code. I figured 'bummer, invite only' and almost closed the page. No spoilers but obtaining an invite code is a fun little process.
I dont follow, I use python daily developing for the web and its easy as fuck. Try Flask, the documentation is pretty good, I started without knowing shit. Of course you need to learn python3 and flask to develop to it, but the documentation always helped.
Not too sure if this is what you're getting at, but if you already have a row for the user with a primary key and you just want to update a piece of data on that row then look into the update syntax. something along the lines of UPDATE table_name SET column_name = column_value WHERE row_identifier = the_row_you're_changing 
Pretty sure every single company with a small in-house Dev team use TortoiseSVN.
&gt; How this extension, which is both inaccurate and incomplete, and could be a simple class, ended up in the PHP manual is unclear, but it goes to show that there’s a lot of cleaning up to be done yet in the PHP core (I include the manual as the “core”) before we get PHP’s reputation up. In the 9 years (nine!) since development on this port started, not even all countries have been added to the internal list and yet someone decided this extension should be in the manual. For anyone who actually read the article after finding relief that the "over engineered and overly political gender select list package" was not featured on SitePoint (thank God), the closing paragraphs really summarize the article quite well. PHP is headed in a great direction but we really do need to clean up the core. Reminded me of the following RFC's that I hope will be a priority to the core developers: - https://wiki.php.net/rfc/consistent_callables - https://wiki.php.net/rfc/consistent_function_names
A file for every attribute and the corresponding getter/setter? Is this a common thing? I generate base models and then my actual entities just extend those. See: https://github.com/imarc/tenet/blob/master/src/Generator/EntityGenerator.php
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [imarc/tenet/.../**EntityGenerator.php** (master → e96ba0e)](https://github.com/imarc/tenet/blob/e96ba0ef6194898830afceaac84856049fe726c5/src/Generator/EntityGenerator.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djkfh72.)^.
[For the uninitiated](https://www.reddit.com/r/PHP/comments/61tiex/gins_gender_fields_for_the_modern_world/)
Why not the others? I'm a PHP developer, anyone with eyes can see there are problems with the language. 
Flask and Django are both worth looking at
https://encrypted.google.com/search?hl=en&amp;q=python%20web%20app%20tutorial ? We have more curated lists over in r/learnpython's wiki, and would also love to help you out with any specific questions as you're going through the process. Personally, I'd suggest going through the Django or Flask official tutorials, depending on whether you're more familiar with large frameworks or micro frameworks in PHP.
Laravel, without a doubt, primarily because of the amount of resources available within the community to help you.
Silly for me to ask but you are defining the variables before the query, yeah? Also, look into prepared statements. They are easy to grasp and much safer.
I'm suspecting you're /u/Khronickal ban evading, and I recall you throwing that at me before as well, when you were banned. I know I've not done anything to you beyond enforce our rules, and I gave you a ton more leeway than most other people. What exactly do you think I'm doing to attack you, just so we're clear?
1. /r/phphelp 2. Go for mysql. Getting data from the same system is always faster than sending it to the other end of Earth and back.
That would take 2 seconds to find and edit in the inspector. Better to store the users ID in a session and check for that upon form-submission... 
I use Git. Was introduced to it during my 3rd year at uni in an internship a few years ago, and its been a part of my workflow ever since. Never tried any other versioning system, and have very little reason to since they only use Git in my country. Better to try out SVN yourself and objectively see the pros and cons. You'll get a lot of opinions but you never know maybe SVN is a better fit for your new employer?
... so yeah, you're agreeing? You just mispoke when you wrote &gt; Python is a language just like Ruby thus you will be using their respective frameworks like Django and RoR. PHP on other hand will run on ISS, NGINX, Apache, LightSpeed...
Sadly yes I did. 
Search harder. And in addition to the extremes that Flask and Django are, also take a look at [pyramid](https://docs.pylonsproject.org/projects/pyramid/en/latest/).
I didn't say it's any different. I'm opposing OP who said it's bad. 
&gt; ...but something tells me that this is not a good solution. I don't think one needs to understand Doctrine to know that this is not a good solution. Base model generation has made the most sense for me. There are still places where traits are useful (the project at the previous link I gave uses them for storage as well as hydrator features), but not for every setter/getter/attribute you add. That's just some level of insanity.
No, they're in the right order in the actual file. Can you help with the WHERE clause?
SVN supports selective checkout, it means you don't need to download whole repository for only one file/directory. As i know, if you make a branch, SVN will duplicate all files and repositories allocate much more space than git. It was pros and cons. But if talk about todays reality, git looks like more powerful tool. Btw, i heard, that git has workaround for selective checkout. 
Still no option to identify as an Attack Helicopter.
Who upvotes those topics all the time? Getting boring. Coming up every few weeks and content is always irrelevant.
I don't know your use case or what you're trying to accomplish, but now is a good time for you to learn the most fundamental mantra of web development security: *Always assume the user is bastard.* In other words, if a user could save your rendered page, edit the hidden field values, and submit manipulated data, *they will*. (It's actually easier than that to tamper with hidden fields, but I leave that as an exercise for you.) Make sure you're sanitizing your inputs too, btw.
When you said "use is as it's meant to be used" I thought you were implying for local files only.
Done it, ended up being a big pile of junk... If your entities are really that anemic, just use public properties.
&gt; As i know, if you make a branch, SVN will duplicate all files and repositories allocate much more space than git SVN doesn't duplicate the stored files. It uses copy-on-write.
That looks a lot simpler than magento 1.x, but I think I'd still rather shove a fork in my eye than use magento again.
&gt; if splitting the Entities using Traits is really a good idea. No. Entities should represent your domain objects. For example instead of just `Product` class which bunch of getter/setters, you could have small `Product` entity with ID, price and, for example, immutable `ProductDetails` value object via embeddable. Of for example you could have available quantity of this product. This also could be moved to separate value object. Also we need somehow to "reserve" some amount of products for our customer and allow to cancel this reservation. Something [like this](https://gist.github.com/fesor/bdbc25566c24b795be3c3002aa006059). As for read queries like "show product details" or "show list of orders" - this could be done via plain DQL. Or your IDE could generate getters for you if you like. &gt; and the corresponding getter/setter Just don't use getters/setters in your entities.
Standard library 100%. The language itself and its java-like OOP are really not that bad. The procedural-style legacy functions unfortunately make the language look kind of unplanned.
&gt;I used to love all those .svn directories filling up my file system too. SVN just creates a .svn directory in the root these days, equivalent to git.
as mentioned alreadyyou should check out prepared/pdo statements, super easy to use and a whole lot more secure. PHP the right way is a great website. http://www.phptherightway.com/ print the contents of your variables to check if they are actually getting the values you expect. Once you know the correct information is being sent, then you can start trying to insert it into the db.
It's possible they were teaching old school java (it happens because there needs to be legacy support or something...) My brother was taking a Java course recently and it was god awful. His particular school hasn't updated their curriculum in 15 years.
SVN doesn't take "30 minutes" to branch, that's a falsehood. Branching, tagging and any other such operation in SVN is copying a folder (logically, via copy-on-write optimization), which is **instant**. It also uses compression, so that's another falsehood. I can't quite understand people saying "it works without Internet" all the time. Do you often work without Internet? Without Internet you also have no access to documentation, references, searching for solutions, etc. For most projects you can't work effectively, or at all, without Internet overall. So to over-emphasize this feature like this is very awkward. I feel you're a victim of some common SVN vs. GIT myths. So here you go: https://svnvsgit.com/
&gt; As i know, if you make a branch, SVN will duplicate all files and repositories allocate much more space than git. No, it doesn't. https://svnvsgit.com/
The thing is that Doctrine entities (aka persistence entities) are not the same as domain entities. Doctrine entities are basically data transfer objects with little or no business logic. Doctrine overrides getters to support lazy loading. Also, Doctrine's embeddable implantation is primitive at best. Trying to treat Doctrine entities as domain entities seldom ends well. 
&gt; Go/Node have concurrency build right it and can do it in the same app. [We're not far from this, anymore...](https://github.com/preprocess/preprocess.io/blob/93fe43b1be83db01cc06a58d9698548c6ad6390b/app/Responder/ProcessResponder.pre#L42-L52)
Wow! Extremely hot news! (To tell you truth, this sub is not suitable for spam). 
ASP is a framework for creating websites made in .net so I can compare it to Spring which is a framework for creating websites in Java or Symfony which is a framework for creating websites in PHP :)
I think I don't miss the point..the point is that except edge cases which are like 0.1% of all the sites..the performance difference doesn't matter..and while PHP doesn't offer concurrency which is at certain point a hassle but than again it is a real benefit in other areas of the request lifecycle..concurrency and multithreading can be a plus but they are also a big minus and many Java developers will tell you how much time they have spent dealing with multithreading and concurrency issues. That being said a robust application almost never consists of just one programming language..you will use node for websockets and simple messages, python for large text processing, ReactJS for the front end..etc but still in 90% of all the websites in the world you will be just fine with PHP
I prefer git and use it both at work and for personal projects, it seems faster, easier to use and work with branches and merge conflicts. But a few years ago at my previous job we used svn. It gets the job done. I don't think it should be a deal breaker. The tooling/workflow was different (but probably mostly because I used some gui program on windows for svn and when changed jobs switched to linux command line for git), but if you're familiar with version control in general, it shouldn't be hard to learn the basics in couple of hours.
You could even make it more framework independent :-) Anyways... I was interested , so I googled a bit... See: https://www.reddit.com/r/laravel/comments/5ihdgx/are_there_any_alternatives_to_laravel_spark_im/ and https://www.reddit.com/r/laravel/comments/55zrt9/alternatives_to_spark/
To those reading, it may be of use to note that you can grab a JSON feed from users via appending `/media` to the profile URL (https://www.instagram.com/{username}/media/) if you want different sizes for images.
Dude, PHP 7 has been out for over a year. Not only is this super spammy, but also outrageously outdated. The article itself is OK, but the intro paragraph is inaccurate and is sure to turn off anyone skeptical about PHP due to some pretty bold claims that I don't think can be made about any language. The reason you're getting downvoted is you dropped a useless article in here with 0 context or thought. When I say useless, I'm speaking strictly for this sub, not in general. But I promise you everyone in this sub has known about PHP7 for at least two years and to just drop this in here comes off as lazy and rude.
Good luck finding anything as powerful as the Symfony forms :P
They are most certainly _not_ data transfer objects! Just use arrays if you can't use them as domain objects.
&gt; Sadly, you can't be gender neutral in some languages without HEAVY gramatical lifting. In that scenario, perhaps instead of asking for gender you should just ask if the user wants to be referred to as male or female?
&gt; are like 0.1% of all the sites And like I said, PHP is fine for a API/site backend. What it's not great for compared to languages like Go is data processing, manipulating large amounts of data (ETL pipelines), etc. &gt; concurrency and multithreading can be a plus but they are also a big minus and many Java developers will tell you how much time they have spent dealing with multithreading and concurrency issues. I think you are confusing the differences between multithreading and concurrency. In Go I can literally set a certain task to have X number of workers with jobs queued up when one finishes. It's probably one of the first and easiest things you learn with Go. &gt; etc but still in 90% of all the websites in the world you will be just fine with PHP And most people don't have a problem with running PHP for a simple site without a lot of traffic. It's when people try fitting PHP into backend processes and other business applications where the alternatives are much better.
/u/argues_too_much when sending Ctrl+c to a foreground running docker container with supervisord. Will supervisord parse the exit signal correctly to the services its managing?
/u/NLZ13 If you have some extra time to spend, could you setup an example Symfony project with the devilbox on Windows and give me some performance numbers. I would do the same setup on Linux and OSX to have some numbers to compare against.
- Quick form generators - Multi tenancy (think "teams" in spark) - Seamless subscription, upgrading, downgrading etc (with email notifications) - Feature toggling which hooks into an "addons" page where extra features can be purchased (example: SMS gateway integration is 5$ extra /mo) - Super admin panel that can manage all tenants and their users (kiosk mode in spark) - Team member invitiation features, as well as "join a team" feature (must be approved by admin) 
I actually agree with you..people should be using tools most suited for the Job..I just believe that sometimes a tool may be more suited but a less suited will do as well..and you spare yourself the hassle of using a technology you are not familiar with..of course enterprise application have very specific needs so even facebook uses java for some tasks :)
Hey, at least they don't try to oversell it :D
I think I never used SVN and I don't think that I would use it in the future. I read that only one person can edit a file, because it gets locked when someone opens it? What if there are 2 features that should be implemented and don't have a dependency and shouldn't be done in one ticket (one employee should fix A and the other one should implement B)? In days where internet speed is not a question anymore, I don't think that "downloading" everything is a real problem. Esspecially when you need to test your software, you want to first test it localy before pushing it into integration or test server, but if you download only "parts" of it, chances are high that it won't work. I mean if internet would be a problem, SVN would require you having a stable internet connection. Git Pros: - No internet dependency - Multible full versions of the main repository (security backups) - No need for write/read permission (but you still can have it with a bit of configuration!) SVN Pros: - Permissions for paths/files without bigger configuration - centralized repository - No need to download bigger files - No need for a .gitkeep, you can store empty folders
&gt; are not the same as domain entities. This is your point of view, and I respect that. I use doctrine entities as domain entities since in other case I don't see any profit from having doctrine. Yes, it brings alot of limitations on how my domain entities could looks like, but I ok with this. For more complex applications which requires much more cleaner domain model I would use CQRS without any need of ORM for write model. &gt; Doctrine overrides getters to support lazy loading. it doesn't overrides getters, it uses proxy classes and `PersistentCollection` which handles lazy load for you. This is very different approach. The getter thing is only for `id` of entity, to allow you get ID of related entity without fetching it from database. You could look at `Doctrine\Common\Proxy\ProxyGenerator:: isShortIdentifierGetter ` for more information. &gt; Trying to treat Doctrine entities as domain entities seldom ends well. I use this approach since doctrine 2.5 released and I had no problems with that. What problems do you see with this approach? Do you use anemic model and transactional scripts? Or you make your own object model on top of data model represented by doctrine's entities?
another one &gt; 124 | echo -e "${Yello}Done. Now open http://$domain/${NC}" Yello, it's me! EDIT: unrelated to previous statement: I'm not sure if nginx has `sites-available` and `sites-enabled` directories by default in `/etc/nginx` (in `install_virtualhost()`)
There's not much input from the users. I am making a browser based game, so there's a lot of clicking this and that. There's also not a lot of form text inputs. Very limited options for the user. But for now on, I will keep only the necessary info in the posts and grab the rest from the mysql. thanks!
Yes, it is, but in a world where everyone is parroting blatant falsehoods about SVN, it doesn't hurt to bring a little balance to the story, right? There's literally no circumstance, **EVER**, under which branching a folder, no matter how big, takes even a second in SVN. It's a key aspect of its architecture. When facts sound biased, the problem isn't with the facts, but with the memes you're exposed to from ill-informed colleagues, friends and bloggers.
I actually set laracast videos sometimes to 1.25x or even 1.5x playing speed, only slowing them down if it's very intricate. Works great.
&gt; This is the fifth time you've posted the same **shitty insult**, and it **wasn't funny** the first time. Plus deliberately misinterpreting my right to denounce Otwell's malpractices as a personal attack so it can be covered by your rules. You even acknowledge it as a (shitty) joke the first time but then upgrade it to a *personal attack* just so you can justify banning me for it, and on top of that claim I am one of your past victims. Honestly, where does it stop? You take everything personally. Maybe you need a holiday. 
Just use traits for common fields, like created + updated, closed, id/uuid, etc. Also make your own type (or download) for DateTimeImmutableUTC and binary uuid. 
Thanks for the link!
This reminds me "the Lighttpd webserver has memory leaks" myth. A thing repeated enough times.. just becomes true for many people
...Would love feedback about how to make it better.
There is no worthwhile alternative to PHPStorm. It's lightyears ahead of anything else. Just buy it. 
$http is Guzzle package... 
True. But I need ONLY auto-complete. :)
everything you said is right on spot. I use Git today but there's nothing I want to do that I could not do with SVN. GIT works offline, sure, well it's not worth it for me because with all this flexibility comes a high level of complexity and countless teammates, including myself, that make mistakes because GIT let's them do it
So the .pre files are compiled once per Composer deployment, then they are cached somehow? Trying to get how it works :)
Looks beautiful! Maybe include example code up front? I imagine that 95% of your visitors aren't going to write their own code, at least not right off the bat.
Instant feedback is, please don't make is constantly click the "code.pre" and "code.php" tabs :-) Make it a left and right pane (left = pre, right = php) and when people type and stop typing for a couple of seconds, auto-update on right. I realize this is more resource-intensive, but it's immensely more intuitive and less frustrating :)
I have a similar autoloader/workflow, but I made it extensible, so you can set file extension "foo" to be tied to "FooCompiler" for a given directory of source. I just go something like: $cfg-&gt;register('/path/to/source/', '.foo', function () { return new FooCompiler(); }); This config can also be dropped in files in the source itself in the folder they should apply to (like .htaccess in Apache). This makes it reusable for templates like Twig, and different processing formats, rather than it being just one format. What I have is in-house and yours is open-source, so I'm just dropping the idea if you want to consider improvements.
The largest obstacle to adoption of this library is IDE support. I can't write code that my IDE doesn't understand, so I lose all introspection abilities, and every line is an error. Is there some story to address this concern? There would need to be an accompanying plugin for popular IDEs for this to be viable at scale.
Yeah, this is a concern of mine. I think an even bigger problem is that 8 out of the 10 macros aren't inspired by any relevant RFC. There's no standardisation - just an assortment of syntax I like for other languages.
FYI, I am working in Netbeans now... In order for auto-complete to work as I expect, I must add PhpDoc comment in my $api-&gt;makeRequest() declaration. Like this: /** * @return Psr\Http\Message\ResponseInterface */ public function makeRequest(string $endpoint, string $method, array $params){
Interesting...
I was going to add - I don't think executing the code is very valuable. A lot of snippets won't yield interesting results in terms of output. The interesting thing is what PHP it produces. So I think the best approach is left/right pane and you don't have to run the PHP in a sandbox at all. Here's an example: https://www.typescriptlang.org/play/index.html This is one of my favorite toys to play with, every time there's a new TypeScript release. They could easily run the JavaScript too (it's all client-side in that case), but they don't - I don't think there's a need.
And sometimes they stop releasing EAP for three months and you're *Shit out of Luck (tm)*. I wouldn't advise using the EAP as a free version. It's released for a reason (testing upcoming features) and they make no commitment to regular releases.
I haven't look it up b/c I am looking for solution that works like PhpStorm - so probably without such comment. Otherwise, I've just found out that Netbeans works but only when there is comment like yours. Thanks for help anyways! ;)
I'm less concerned because that's happening inside a docker container. You can try `exec("rm -rf /")` if you like :)
You allow outgoing connections, that might be a problem if the container is able to reach sonething that is and should be firewalled from the outside but is not from the container. Also, since this is basically a remoteshell with internet connectivity, your server might be used to send spam, via email, or http. ps: why does the script run as root? 
No trolling, but I don't get the point of this kind of stuff. First thing that comes to my mind is "I have to memorize another syntax, way too much effort compared to simply writing code". Do I miss the point somewhere? Genuinely wondering.
I was resistant to buying an ide so I started with notepad++ then netbeans, but it has a couple rough edges that I dont like. Now I'm working on learning Symfony and I'm blown away by phpstorm, going to pay for it after 30 days is up no doubt.
I started with Notepad++ loved it because it had a build in FTP so I could update the site as I go, down the line I somehow switched to Sublime Text and I used that for a while, at some point in time I swapped over to Komodo Edit, but after a bit went back to Sublime Text, essentially still my tool to date. I got phpStorm under Student licence but after installing it yesterday and using it a bit, I went back to Sublime... silly isn't it. 
I am a hobbyist web developer. So for me personally python is an overkill when most sites I make are for friends and they aren't anything over the top fancy. Most fancy thing I ever made is a fully Encrypted forum in PHP... Why? No idea, I guess few too many coffees later.
o.o Why is CI similar to suicide note?
I wish it were as simple as that. There is some table inheritance going on. So there is a field value table which is extended by different types of field values such as enumeration value or free text. The field value table holds a reference to a field definition. So I can have number of fields which are linked to field values. If i had different fields but they have they same type of value but for a different context then putting a constraint would not work. Unless i can some how put a cross table constraint if thats even possible?
Unfortunately, there is only one way to find out, write it in PHP and compare performance after that. If PHP is to slow see if they would be wiling to install rserve so you can talk to R from PHP, there is probably a package for their OS if the server is under their controllerd and not some cpanel host.
This is a really interesting idea and it's not one I ever would have considered. I find it ironic given that PHP stands for "PHP: hyptertext preprocessor" so that makes this the PHP: hypertext preprocessor preprocessor, lol. I had a look at the examples and to be honest I'm struggling to find or think of a practical use-case. I mostly develop within frameworks (Symfony, Laravel, etc) and I can't really see where this preprocessor would benefit me or make my life easier. The majority of the examples essentially involve ~1 line becoming ~2 lines. Like another person said, it's tough to ask me to learn a new syntax and that's especially true if it doesn't benefit me in a tangible way. That being said, the class accessors seem to be the exception to that statement. Am I missing something? I'm genuinely intrigued by this, but as it stands I can't possibly imagine ever using it.
feeling the same way.
Looks great!
I'm not really following you - it would help if you could provide some pseudocode of the definition. It's also important to know what type of table inheritance is going on; Doctrine supports both multi-table inheritance and single-table with a discriminator column. It's possible that what you're describing could be handled using a [`UniqueConstraint`](http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/annotations-reference.html#annref-uniqueconstraint) on the discriminator column and field value, if it's a single-table setup and I'm understanding correctly.
I'll be blunt, but helpful. You have a shitty SQL schema. Fix the schema, keep keywords in a single table, make the keyword column unique, and you solve the problem.
FYI this is not directed at you, you post plus a few others in this thread just triggered a rant. Again if you see "you" its the general you, not you specifically. I used to think the same. A framework was just some complex pile of code that got in the way of getting shit done. The more I learn about symfony, the more I realize how many problems I have that it solves Lets take a worst case type of scenario for a "huge heavy framework"(lol poisoning the well with negative connotations.) Lets say I want a simple one pager symfony is going to take longer to build it and the page is going to be slow because of &lt;gasp&gt; all that code right? (anyone that says this should feel ashamed and should know its more *what the code is doing and how rather than how much of it!) Not really. Building that one pager takes all of a minute from an empty webroot (+time to create the actual page) Short of the most absurd contrived situations the 15ms processing overhead that symphony adds to that one pager is irrelevant. Am I saying you should build your on pagers in a framework? No, just that all the common objections are really off the mark and defensive. When people use loaded words like "heavy" what they really mean is "**I don't want to learn this**" The sad part about this is that an insane amount of work has gone into many of these frameworks by people far more experienced and smarter than the average person that so easily dismisses them No surprise that the next sentence after "I just use notepad" is "I don't use frameworks" follows by a description full of loaded terms. Do they make simple things hard? sure, they do it to make much harder things simpler too. Any number of topics in tech follow this same pattern for example **config management** (ansible, chef, puppet etc) (cowboy that just live on the root prompt who end up with inconsistent system configs) Learning it was mindblowing and I could kick myself for not doing it a long time ago. **ORMs** no shit I've seen people that prefer to use mysql functions because mysqi and prepared statements are annoying **CMS** Man If I want a blog I'd have a *very* hard time justifying building it from scratch outside of for learning **IDEs** **CVS** source control?! psh who needs that! **proper development environment/testing** Everything gets done on a live site with no backups, probably with an ftp client and notepad! ssh (ever seen someone wait 20 minutes to do in an ftp client what rm -r /dir could do in 1s? Or someone updating wordpress by retracting the zip(s) on their desktop and dragging and dropping in that ftp client? there goes 2 hour! This goes for using ftp when "the server doesn't have ssh access" Saved the best for last! Often people will describe tools as a crutch. bullshit! an ide isn't a crutch anymore than a forklift is. I get that learning something new is slow and unrewarding compared to actually getting shit done, but people who focus on getting shit done instead of *finding better ways to get shit done* are the epitome of working hard **not** smart. If you just want the cheapest most low effort shelves possible get some boards and cinder blocks I guess it gets the job done, but that its functional is no reason to scoff at a carpenter for the array of tools they use like its some source of prid ahhh I don't need all that shit just to build some shelves, good for you but nobody is proud of those shelves, sure you can dress them up a bit so they are not a total eyesore, but its putting lipstick on a pig, and I'm OK with that as long as we don't try to pretend otherwise. 'this is all not to say that these tools are *always* the right choice (does a simple static one pager that only changes if a hone number changes really need source control?)
The first problem you have is that your SQL command is running even when the page isn't being posted to, $username is only being set inside the IF check, that's why you're getting that error. So moving the update inside the if statement will fix that. The next problem is the code you're writing can be hacked really easily, I'd suggest reading up on SQL injection and use PDO (http://php.net/pdo) instead of mysqli as you can use prepared statements to make sure all your parameters are escaped correctly. Once you're up to speed on SQL injection, read up on cross site scripting and this function: http://php.net/manual/en/function.htmlentities.php and you'll have a good foundation for writing secure code as you go forwards.
It'd look like this: if(isset($_POST['username'])){ $username = $_POST['username']; $sql = "UPDATE users SET username='".mysqli_real_escape_string($username)."' WHERE id = 1"; $insert = mysqli_query($con,$sql); } I've included a call to mysqli_real_escape_string, that'll stop people hacking that particular line but I'd still recommend trying to learn PDO once you've got your head around the basics.
Would suggest you to go through the "PHP PRACTITIONER" series on [Laracasts](laracasts.com). Its free as well! 
OP's schema sounds like the dreaded inner-platform anti-pattern, no? But sometimes you're stuck working with what you've got to work on.
or at least change it to a B at the end
In reality, it works well enough. But I personally hate it and try to avoid working with it.
Frameworks don't make it so that you don't need to write code. If you were building a house, it's the equivalent of letting a professional contractor put in all of the foundation, support beams, and plumbing so that you can start putting up dry wall and your insulation of choice.
i do use the doctrine collections class but ill check this out too, thanks
This! The single most important PHP library
your concerns are valid, I've been bitten by them myself. however, you can approach things so your app is or is close to being "framework agnostic". Then you can kind of have the best of both worlds; let a framework provide all the boilerplate logic (e.g. parsing the request, routing it to a handler), allowing you to focus on your business logic. Googling php framework agnostic brings up plenty on the topic.
running as root in a container is a problem if you a: are able to break the isolation or b: have access to the outer file system via mapping. rate-limiting would prevend massiv spamming, thats right. it will not prevent someone to do nasty things from your server. I wouldn't be to lucky if my servers ip find it's way in a logfile that shows nasty things...
Webstorm is pretty cheap and does everything phpstorm does with plugins (I think, I have all products pack). Just spend the money. A good ide is worth investing in, and jetbrains make the best ides.
To be honest; other than limiting requests per IP and aggressive timeouts, I'm flying a bit blind. The site is isolated from my other apps and I think the way I've added things to the container prevent access to the wider filesystem, but I'll only really learn what weaknesses are there once people start trying to do bad things...
I still don't understand what's the appeal of this. 
Yeah, I saw the bigot shut it down.
Very cool! I assume the files are cached somehow for production use? Btw, was really hoping to see generics in there😀
The design is VERY nice. Unfortunately, this just isn't for me. Best of luck to you.
Everyone here has already given you all the benefits of using a framework so I'll skip that. You have around 2 years of experience and I can say I was in your exact position with around the same (2 years) of experience. I thought my code was the best (why do I need someone else's code?) and I recognized you needed tools like Composer/Grunt (at the time)/Sass/etc. It all just seemed like a giant waste of time to learn all these things that do my job for me. _There's no way these things are actually beneficial_. Then the company I got my first professional, full-time job at made me choose a framework and learn it. Boy, were my assumptions wrong. Not only that, I learned that while I thought I was a great developer all this time, I really was pretty shitty. Sure, I knew vanilla PHP, could write MySQL queries, etc, but I was using these technologies _all wrong_. The framework I learned taught me how to build web apps using modern standards. My OOP improved tenfold. I learned the importance of testing. And I'm still improving daily. Now, when I know I don't _need_ a framework for smaller projects I write everything vanilla, maybe pulling in a few small packages. But for most apps, I use a framework. Even my vanilla code is night and day after working in a framework for a year. You're in a good spot knowing vanilla PHP and understanding the technologies from a low-level. But it's time to grow up and take the next step which is letting go a little bit of your ego and letting a framework handle the stuff frameworks are meant to handle (and do very, very well). I promise you will learn a lot and chances are, you will enjoy development more, become a better developer, and save time (which is also $$). The learning curve will be frustrating but I promise when you get it, you'll change your mind.
Syntactically, PHP's array functions are notoriously clunky, and painfully difficult to chain compared to how it can be done in other languages. Plenty of libraries aim to solve that. I avoid them simply because every library would end up using a different one, and there's no interop standard. 
Is your code fully test covered, stress tested, peer reviewed and fully documented? Is anyone that is going to start working with you instantly going to be familiar with the router, db abstraction, view rendering, dependency injection container, service registration, session integration and form handler? I'm guessing no, and that's reason enough to use a framework. When you start a new project do you have all those features completed by just pressing enter because you used a framework? &gt; don't write code but they use tools to build apps Do you use Apache, Nginx Linux, PHP or Javascript? Why are you using those tools to build your app? Why don't you write an operating system from scratch, create a http server and develop a programming language? Those are all tools that you use to create your apps, why not just use a framework which is just another tool to help you finish the job quicker, faster and better?
It took me way too long to learn what an array reducer was. array_map has become my favorite 
Not true at all. While I edge on the side of using a real array rather than a collection most of the time, collections allow you to write some really expressive and easy to follow code. 
Do any of these help with monster multidimension arrays that are a million levels deep?
This looks cool, but question(s) for you is: Why would I want this? Who is this for? I am not trying to discourage you, I mean this is cool. But whats the point? If that makes sense?
You say you've never used frameworks but I would say you always have. You've been using your own "framework" since you somehow had to address (or ignore) the same issues and problems that the other popular/public frameworks addressed. Your way of doing things to address these issues *is* your framework. But since your framework has a community of just 1 member (you), I'd bet your framework is a lot less functional, well designed, coded, tested, documented, training, etc. I'd bet there are issues, especially security issues, that you are not aware of and so are not addressed by your framework. I'd bet your framework doesn't encourage the building of well structured decoupled maintainable applications on top of it. That and that it's probably undocumented as well, I feel for anyone hired to help with or inherit apps built on your framework. Every hour you spend working on your framework (addressing non-biz issues) is one less hour you spend on adding business value. Instead, why not adopt a popular framework, benefit for free from the the many hours contributed to it, and stand on the shoulders of giants.
Yes, check out the *_recursive functions
Mostly php and node, plus no more putty!
Collections are wrappers around the Array class (Arrayable, Traversable). So you don't waste mental time to use functions around your array to manipulate it, you can use methods inside array/collection. Read laravel's collection docs to see how they can be used: https://laravel.com/docs/5.4/collections 
As well amazingly still inconsistent with their naming convention and parameter order.
Which is amazing, given that `map`, `reduce`, and `filter` are so absurdly standardized everywhere else. Of course, most other languages don't overload arrays as a do-everything list/dictionary/hashmap/linkedlist/whatever.
&gt;I have read some articles about react, angular or node.js and I have understood that the programmers today they don't write code but they use tools to build apps. You use framework and library provided tools stitched together with code. &gt;Maybe in a next update or release of a framework things change and you must make big changes in your app, or the framework team stops to update it and this cause security issues in the future. Maybe in the next update or release of a programming language things change. Maybe the OS, too, or even the JSON spec! Write your own everything! Of course that's not generally a big problem; most any widely-used framework/programming language/OS/standard doesn't break often, and if it does you'll get support for a long time to deal with the need to migrate because there's too many other people in the same boat of needing a lot of time for it to not happen. (Python2 is still supported 8 years after being obsoleted for a single example, and the Linux kernel hasn't broken backwards compatibility in God knows how long.) It's very likely to be a problem for you if you use very fringe/new systems, so just avoid them where long-term maintenance matters to you. And even if you do end up high and dry with some framework that goes EOL early and isn't getting updates anymore - is that any worse than you letting your old code sit without active maintenance? &gt;My friends and I we build web apps from scratch in PHP, we have many projects and we update them with new features or bug fixes so I think that in the future if a framework stops to update with new releases and then if we use this framework then we will have a huge problem because will be must rewrite the app. What if there's some issue that affects many or all of your previous sites? As of right now you'd have to go patch each of them independently. If you used code-sharing between all your projects such that you could just update one central piece to fix whatever bug you might have, then redeploy your apps with the newer version of the shared code then you'd save a lot of time and effort both in maintaining old projects and writing new ones. Of course: that's exactly what a framework is. That would just be you making your own framework. May as well save the time and effort and use an existing good framework, and if in future it ever is a problem it stops getting maintained? Just maintain it yourself. It was work you'd have to have done anyway.
Will do, thank you, kind sir
Unfortunately, no life cycle callbacks and indexes on embeddables possible (at least not that I can find). It's an interesting idea but it makes their usage pretty limited to only very simple scenarios. 
Thanks. There's a bit more context in [this other comment](https://www.reddit.com/r/PHP/comments/6kfp7l/redesigned_the_php_preprocessor_site/djmbpnh/).
Thanks. 
If you run `composer install --optimize` or any other variation that generates an optimised autoloader, then the files are all compiled once and the automatic rebuilding is disabled. So, from that point on, just normal PHP files (served with whatever OPCachey thing you have in place for them).
There's a reason that it's near imposible to get without PHPstorm... What you call "autocomplete" is really a huge code analysis system, backed by an advanced database that has to work very fast while maintaining a "graph" of all code relationships in your project. There's no quick plug-in to bring this to sublime or any other language agnostic text editor.
I use sublime text 3. It has nice highlighting and also a linter to show me errors and why. Cobalt 2 for a theme is really nice to work with. 
Add blade template hightlighting? 
I find collections usually unnecessary overhead (and performance impact )unless you have custom functions for your collections. Also, you can just extend ArrayIterator class and add you functions. 
just popped in to say from a visual standpoint the site looks nice. 
Thanks :)
The mobile design could use some love
Wether you realize it or not, when a project has been active for a couple of years, chances are it *is* using a framework. You're probably using packages like an ORM (or at least a query builder), a router, a template engine, something to manager authentication or some other middlewares... Then the way you use them together, as well as your conventions constitutes the framework of your application. Or maybe you're not even using packages and you've built all that from scratch, then you've essentially built an "in-house framework". The issue with that is that unlike Symfony, Zend or Laravel, it hasn't been tested by thousands of people and companies, so it's more likely that you have bugs or security holes in your in house framework. But more importantly, it means when you hire a new team member, there's 0 chance they have already used your in house framework, so you'll have to teach them how everything works and what your conventions are. If you're using a known framework, you can search for people who have previous experience with that framework, or at least point them to the official documentation.
Just stop programming if you don't.
/u/NLZ13 impressive numbers for Windows compared to the old ones. Thanks a lot.
I actually meant (regardless of foreground or background start) that once you correctly use the Docker Entrypoint in the Dockerfile, the services will be shutdown properly. Such as ENTRYPOINT ["/usr/sbin/httpd" "-DFOREGROUND"] In forground start you can send Ctrl+c and in background start you do `docker stop name`, then the signals will be send to the httpd daemon for a correct shutdown and itself can do any clean-up it normally does during shutdown. However, when you use `supervisord` and send a stop signal to it, does it then send stop signals to all services it manages?
Yesss
Bump, can no one help me out here..?
Couldn't explain it better my self.
I know what collections are, I use them every day. :P
For years I have said that one of my superpowers has been that I've read the manual. I've gone through most parts (skipping things like LDAP and Oracle that I had no interest in), but making sure that I know what is available. I might not know how to use things - but looking them up is easy enough. Knowing that something exists is the hardest part of using a library, be in built into a language, or as part of a framework or just a library.
Assign the tags to the image using a column in the uploads table (or use a different table) and use a scheduled command to create the tags and associate the with the uploads. 
Interestingly felixfbecker/php-language-server has recently merged integration with Microsoft/tolerant-php-parser rather than nikic/PHP-Parser. It will be interesting to see how this goes, as previously my experience with php-language-server hasn't been great. If felixbecker/php-language-server together with Microsoft/tolerant-php-parser provides robust/quality features then this would mean you could use your favourite editor that implements a language client.
Eclipse. Been using it for 10 years. It's as good as it gets in a free ide. I have yet to switch to any other ide simply because I switch between different projects of different languages frequently. 
geany is pretty cool
I feel like people shouldn't use Laravel collections as a general purpose collection library. They are mostly an array functions facade and as such will run out of memory on larger datasets (e.g. database result of milion rows). Use Cake's collections or https://github.com/DusanKasan/knapsack (shameless self promotion) 
so when you get exception you have exact line(s) in php code but what about pre code? its debugging nightmare
It's not though. I've used these macros in many code bases. Apart from the class accessors, every other macro is within the same 2-3 lines of code. It isn't difficult to figure out what's going wrong. Debugging nightmare is unhelpful hyperbole. 
Here's another general purpose collections library that has some of those functions encapsulated: https://github.com/danielgsims/php-collections 
[removed]
I didn't want to belabor the point with anecdotal motivation. The truth is I've used this stuff lots. For me, it's not difficult to debug. I find it hard to accept that statement without any data, especially from someone I'm assuming hasn't even tried to use this. I don't mean any offense. I just don't agree with your opinion... :)
[removed]
Learnt that last week myself, after almost 10 years of experience with php. Can't wait to use it
While the array_() functions are really powerful, the amount of hours I've had to spend dissecting chained array_* function calls with anonymous functions is mind bending and pointless; for what? millionths of a second and a few lines of code? Use them wisely. 
this, could not agree more
Wait, what makes your Knapsack library any better than Laravel's collections? If you're going to shamelessly self promote, at least sell it :P
And while you're at it learn all of [this library](http://php.net/manual/en/book.spl.php)
array_map/filter/reduce are actually slower than the equivalent foreach loops, but if you're used to that kind of functional-ish style of programming, they're an abstraction that saves programmer time.
More standard naming, a lot more collection functions, provides a collection trait making a collection from your classes, having both collection functions and the collection class, etc. But mainly working as an iterator where possible (using minimum memory). For more see docs at http://dusankasan.github.io/Knapsack/. If you have more questions feel free to ask :)
Sublime Text 3 has support for Pre? Because if not, your response is not really helpful - any PHP IDE will have as good (or better) support for the normal language.
Seems to work properly with [php-integrator](https://php-integrator.github.io/) here. but unfortunately only seems to work for atom. seems to be working towards becoming language server in the future though
I'd say the biggest selling point here is working as iterators, although, does this actually help that much when doing one of the standard operations such as map or filter? You're generally going to iterate over the entire set regardless.
In that case, I'd recommend starting with Flask. It doesn't come with as many "things", so it's a bit easier to ease into. If MVC is new to you (I'm not sure if you mean that you do MVC without a framework, or if you're doing old-style "each page is one file with html and PHP interspersed"), the idea can take a little getting used to; I found it a bit much when I first made that transition, but after a few months grew to really appreciate it. There is unfortunately no direct path from PHP to any other language, really, because the other languages in common use are much more general-purpose. So while PHP just requires hooking up a LAMP stack (which is one `apt` command) and starting to `echo` some shit in a file with the right extension, other languages (including Python) require either dealing with outputting things in the right format for CGI, or implementing a full-fledged HTTP server and speaking HTTP. And so we rely heavily on frameworks (read: libraries) to do all the heavy lifting for us. That's nice, but it means you have to accept a little bit of magic when you first get started, and then later if you're still interested, you can delve into how all the underlying stuff works. If you want to jump in to making things as quickly as possible, [Learn Python in 10 minutes](https://www.stavros.io/tutorials/python/) is a syntax cheatsheet that gives you enough to get started (but it's a good idea to go back later and cover things more thoroughly). And as I said, we'd love to see you over in r/learnpython asking any questions. Good luck!
Honestly a lot of them become useless once you're in hash &amp; multidimensional territories. Also they do not necessarily perform better than foreach (array_reduce as an example), but that's usually negligible. So foreach is boring because we use it a lot, but that's the correct choice most of the time. array_column was a useful addition in 5.5 though and I wish more colleagues of mine would know about it and use it (too many shops stayed on 5.3 too long).
same with array_filter(). The two of them can be pretty powerful.
I have noticed that a lot of contractors end up know more about a framework than they do about the core language - my guess is because it's easier for repetitive jobs that have more-or-less the same requirements (I want a site that people can login/signup/restful). Whereas folks that work full time have a different use case and end up using raw php more often than not.
Well yes and no. If you are operating on small data sets (think form data processing and such) you are fine. The problem is large data sets like for example 2 milion row database result or CSV that you want to map/filter/reduce. In this case you don't want to pull all that into memory because if you do it for 100 concurrent requests you will run out of it (memory). Edit: If I wasn't clear, to use array functions you need to represent the data as an array, hence putting it into memory (technically twice - before and after operation until gc kicks in)
What do you mean by pre? 
The thing this very thread is about?
Derp I get it now. Sorry I thought this was just an online IDE my bad.
I'll be fair its the memory side of things I wanted to hear about, its mainly why you crushed the idea of using Laravels package then suggested your own.
I didn't want to sound disrespectful toward Laravel collections. For the reasons to use other packages (and maybe mine) see my responses in this thrwad. Tl;Dr is more memory efficient.
Wouldn't that make my point even more relevant?
array_reduce, array_map, and array_filter can eliminate most for &amp; foreach loops from your code. Depending on how much heavy lifting you do, along with other conditions, it may cause a bit of a performance hit.
Yes, I don't disagree with it
`array_filter` is really useful because you can use invoke it on an error without a callback and it will remove all "falsy" values.
Can't stress this too. I review a lot of code and people come up with creative functions and it takes me a while to realize "hey, this is `array_diff`" or "hey, you might as well just use `array_intersect_key` together with `array_flip`", etc. Being able to replace multi-line/recursive code with a single library call is a satisfying feeling.
I use docker for windows. And bash. And PHPstorm. No issues. 
So did you install ubuntu through this... I really need to look into this feature more.. 
array_column is such a great thing to have when you're dealing with arrays structured like a database
PHPStorm does further inspections aka not necessarily requiring the docblocks. Docblocks are typically the last part of an object / module that I add and PHStorm's inspections work as long the return type is obvious.
If you cannot fix your schema, you could use a mutex to protect your critical section. E.g. https://github.com/malkusch/lock/blob/master/README.md Another solution would be to create a worker (daemon) to handle these jobs in a single process but that would be a lot more work.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [malkusch/lock/.../**README.md** (master → 8ed917b)](https://github.com/malkusch/lock/blob/8ed917bcd0381ac00fe3984fcced5be5902ae301/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djoa3p1.)^.
Thanks i will take a look at this.
PHP 5 and 7 do agree "when it comes to empty strings". What they don't agree on is the output of substr(). What do _you_ think the output of `substr('',0,0)` should be? PHP 5 says FALSE, PHP 7 says ''.
Nothing wrong with it at all :P
&gt; we won't be dropping doctrine Why "learn SQL" leads to "drop Doctrine"? Doctrine allows you to use native sql. As for doctrine - lean about persistence ignorance, about unit of work. And then read documentation.
[removed]
&gt; Why "learn SQL" leads to "drop Doctrine"? Doctrine allows you to use native sql. Because ORMs use patterns like the ones you mention that you won't necessarily find in a SQL book but are highly relevant to working with them, and so any recommendations need to take that into consideration.
Very good reading!thanks for sharing!
Get [High Performance Java Persistence](https://vladmihalcea.com/books/high-performance-java-persistence/), which pretty much matches most of what Doctrine also does. Sadly, there are no proper books on Doctrine ORM, especially around DDD and the fact that you should "just use SQL" where needed.
ReactPHP was ok to use for a simple web socket, internet of things/ Arduino playing around project. I'm not aware of anything very mature, again though, not my area of specialty.
&gt; lean about persistence ignorance, about unit of work and then get bitten because your app is running too slow.
What's your question about now, libraries or extensions?
Extensions.
I think there's not that much difference performance wise. `stream_select` is usually limited to 1024 FDs via `FD_SETSIZE`, but other than that, I'm not aware of important differences to choose one over the other. `uv` has the benefit of coming with filesystem support directly without the need for `eio` or multiple parallel PHP processes for async filesystem access.
That's cool, but did you look around first? I personally use this one: https://github.com/arrilot/dotenv-php since it can be used within the web root (php files aren't exposed). But more popular ones are: * https://github.com/vlucas/phpdotenv * https://github.com/josegonzalez/php-dotenv
Just learn SQL. :) &gt; For the flurry of people who will say 'just learn SQL', that's great advice of course and I'll happily take recommendations for books on pure SQL, but we won't be dropping doctrine in the day job, so please keep that in mind when recommending things! You should learn SQL because it will help you understand what Doctrine is doing, how it works, how it (sometimes) goes wrong, and how to use it better. You shouldn't use Doctrine (or any ORM) because you don't know SQL; you should use it because you *do* know SQL and would like some of the simple bits automated so you don't have to write the same boilerplate over and over.
Useful. What about `uv` vs `ev`?
Hey those projects actually accomplish something completely different from mine. They are concerned with loading the env values so that you can use them in your application. Mine is concerned with keeping the actually env files in sync, allowing them to be split and also allowing specific files to be encrypted to keep their values secret. You actually have to use one of those together with my project.
Are u using Apache? Did U edit the right PHP.ini? There is one for cli and one for Apache.
Did you restart the server after changing the .ini file? 
Check the output of phpinfo() - this will tell you both what PHP thinks the current setting for memory_limit is, and where the ini files it's looking at are. If you're using Apache / PHP-FPM, don't forget to restart them after modifying php.ini to apply changes.
Yes I use apache I edited the one reported by phpinfo, though just to be safe I actually edited anything that looked like a memory setting (php-fpm, opcache etc.) - also in an older version of php that's still sitting there unused. I grepped through all of /etc/php for anything that might be a memory setting and changed that to something recognizable and higher than 2MB. And yes I restarted apache every time.
phpinfo is reporting the memory I have set. What is weird is that the error is saying a memory limit of 2MB which makes no sense at all. The only memory limit matching 2MB is the one for uploading files and though files are loaded by the script they are not uploaded.
Yes every time. And phpinfo is reporting the new value. The strange thing is that the error says that the memory limit is 2Mb and I have no idea where that number could possibly come from.
What happens if u set the limit to -1?
Perhaps this setting is set somewhere in the code
array_map or array_filter is the elegant way, but with foreach you get the fastest way to loop trough an array. [Stachoverflow performance benchmark](https://stackoverflow.com/questions/18144782/performance-of-foreach-array-map-with-lambda-and-array-map-with-static-function)
Just as a quick test can you put at the top of your file something like: &gt; ini_set("memory_limit", "2048M");
I did and that works I tried to move it further down the code and past a certain point it wasn't reached so the crash happened. I searched in all code (my own and vendor code) for anything that might be setting a memory limit of 2mb. I suspect that the error message is wrong or referring to something else.
According to your config, you have: &gt; memory_limit = 4000MB http://php.net/manual/en/faq.using.php#faq.using.shorthandbytes Did you try using just "M" instead of "MB". Maybe when it can't understand what MB means, it changes it to a default of 2M?
I already did that with ini_set() where it allowed the script to run, but inspired by you I did it in the ini-file and it worked as well. It revealed a possible error. I then set it to 10GB in the ini file and it still runs. Then I set it to 500MB and it stops with the error of 2MB exhausted.
Did u write GB and MB or G and M? If u write GB and MB the numbers are interpreted as bytes
Textbook premature optimization. Computing power is cheap, developer time is expensive. And the vast majority of loops you write will never run at a scale where its noticeable. Also did you read the second answer in your link?
I was convinced this couldn't be the issue and it isn't *the* because whatever I do if it runs out of memory it reports 2MB limit whatever it was set to. But true, it must be M not MB. Setting it to memory_limit = 4000M Sets it to 4Gb while 4000MB will set it to something else - not sure what exactly.
If you still can't figure it out after trying the config files and restarting apache, it might due to some php library or some other 3rd party code. I'd recommend putting a check in the file that's throwing the error and calling die if the memory limit is coming back incorrectly. If it is then I'd recommend looking into php's tick functions (register_tick). You could use that mechanism to call a function after each php statement, that function would check the memory limit setting and, if it's not what its supposed to be, print a stack trace (debug_backtrace) and die.
You're right /u/domdomdom2 just noticed the same thing. Now that I know what I'm looking for I can see the pattern: I had two different code changes that both resulted in higher memory use, one of these had a very subtle error that would lead to even more memory use before crashing for another reason (even with enough memory). The error reported consistently said there was a memory limit of 2MB - I still have no idea where this number comes from (it was there before I started fiddling with memory settings). Whenever it runs out of memory it reports this weird 2MB. So when this second error kicked in it would use upwards of 8GB before crashing so any memory setting below that would result in that weird 2MB limit error. Anyway the conclusion seems to be: use M for Megabyte not MB. That would at least have given me a predictable amount of memory. Thanks
I think the issue was that I used 'MB' not 'M' for memory settings. I think I have had that faulty settings there for ages but just never hit it before out of sheer luck. When I changed it I just assumed it was the default setting I was looking at.
Why? Because you used ORM for reporting? This isn't related to persistence ignorance, UoW or even to ORM. If we are talking about processing business transactions, universal UoW implementation like in Doctrine, which just performs dirty-checking of your application state, could be a problem, but in practice I didn't had any issues with that.
&gt; you won't necessarily find in a SQL book You could find this information in [Doctrine's documentation](http://docs.doctrine-project.org/en/latest/reference/architecture.html). This information depend on ORM implementation. You could also try to read something about Hibernate. Doctrine is mostly attempt to port Hibernate to PHP.
Man somehow I forgot about this project. Checked it out a few years ago but team didnt want to bother installing. Are there any benchmarks available comparing other frameworks (properly configured for production)?
I would say under no circumstances should you ever use godaddy.... there are so many better alternatives. have you checked what version of php your shared server is using?
&gt; I have already enabled mysqlnd to no avail You did not. This is not a godaddy issue, this is mysqlnd issue. Have mysqlnd have mysqli_result. May be you enabled it wrong
Yes you are right, readability has more value then the little performance benefit. And yes php7 reduces the performance difference even more 
It'll always be faster than other non-extension frameworks because it cuts out the entire bootstrapping process that the usual framework has to do. Benchmarks are pretty apples and oranges so it's hard to get any actual useful metrics.
There are not many benchmarks I can find that include phalcon, but I found this: https://systemsarchitect.net/2013/04/23/performance-benchmark-of-popular-php-frameworks/ most verbose benchmarks I could find. and yeah, Phalcon 2 wasn't exactly a fulfilled framework, but ever since phalcon 3 is has grown a lot and phalcon 4 is already in development.
[removed]
There's the speed thing, but one other nice thing about it being a module is low RAM usage. You can go really far on a cheap VPS with a small amount of RAM. I also just happen to like it as a framework generally regardless of the module/speed stuff too. Does all the main stuff I want done, while being loosely decoupled.
&gt; Benchmarks are pretty apples and oranges Why do you say that? Frameworks are certainly apples and oranges, but if those apples, oranges, and pineapples all respect the same rest api contract for example you can benchmark and find the fastest fruit. This is an older version of phalcon I'd guess: https://www.techempower.com/benchmarks/#section=data-r14&amp;hw=ph&amp;test=query&amp;l=8vmzgf Once you can compare speeds while performing the same underlying tasks you can be in a better position to select a framework, and all the developer tools, libraries, communities around it. Sure, it may be faster than a non-extension framework, but by _how much_ and what, if anything, do you give up to go with your choice?
Thx but that was before PHP7 which is a significant speed difference. I posted a benchmark I found as well above (also not 3.2)
http://i.imgur.com/MW0xxdB.jpg
Are you setting this in a custom / extended INI file, or editing the core file? Perhaps the MB value is being replaced with a default further up at runtime or behind the scenes, due to the syntax error.
It's the core ini-file but it seems quite certain that there is a big difference between using 'M' and 'MB'. I just changed it to 'MB' and now phpinfo reports '128MB', I'm unsure what that means exactly but one of the replies says not using the proper 'M' means it will be interpreted as Bytes, so right now I'm supposed to have a memory limit of 128 Bytes - which is "quite low" so I suppose php has its own lower limit of 2M or something that gets set at runtime regardless of ini settings. Maybe there is a way to get the figure in an unambiguous notation. Well just changed it to '128XYZ' and now it reports a memory limit of '128XYZ' whatever that's supposed to mean. I wonder where you can get the actual memory limit.
Restarting Apache won't help if you're using FPM, you need to restart FPM if you want to give PHP a reset. Maybe a reload is enough, actually.
Make sure you're not using MB, but just M as a unit as explained in the docs http://php.net/manual/en/faq.using.php#faq.using.shorthandbytes
Had the same problem several years ago, glad you solved it :) Setting it to MB probably just leaves the default, which is 2MB (2M).
&gt;:) I am happy that you are happy. Spread the happiness around. [This doggo demands it.](http://l.yimg.com/os/152/2011/10/20/3387261714-1e157c4d23-z_213720.jpg)
check your PHP.ini file noob boy
`ev` doesn't provide the filesystem part, but performance should be the same as said.
&gt; check your PHP.ini file noob boy That was uncalled for.
Thanks
Thanks, that's very helpful. 
Did both just to be sure but the issue was using the wrong shorthand for Megabytes. The correct is 'M' I used 'MB' which lead to the default 2 Megabytes.
Perfect. Bought!
godaddy has a list of PHP modules and settings you can turn on or off. I just ensured that mysqlnd is actually on. Browsing around the net, it seems other Godaddy users have the same problem. Do you know any other hosting website that can for sure tolerate this function? This is my code if you need it https://github.com/alwaysincharge/fridaycamp
We are using PHP 5.6 which should tolerate that function. Have you guys ever used get_result()? And what website did you host on? this is my code https://github.com/alwaysincharge/fridaycamp
Sorry, I forgot when I used shared hosting for the last time. I am using VPS which is a vurtual server which I have the full control of
Where did you get that impression from? 
Another thing I like about phalcon is all its classes, even if you don't use it as an MVC framework you can use all its classes in a flat PHP project without having the worry about everything using unnecessary resources. And PHQL is nice and should be familiar to all the symfony devs. I don't like their new docs though, I prefer the old ones.
Ahh yeah, Didn't notice the posted date. Looks like it was back in phalcon 2 days.
Phalcon 2 vs 3 should be near identical for the same PHP version. The speed benefits of Phalcon are still huge but they should continue to drop a bit as PHP becomes faster and yet the benefits will still remain substantial for the foreseeable future. One more bit is that Zephir for Zend 3 never received the same level of loving optimization that the Zend 2 engine did and so once some substantial effort goes into that then it should see at least some percentage points improvement. Just to clarify, Phalcon is definitely faster on PHP 7 compared to PHP 5.
Haha sorry man I was just having fun.
This is my favourite framework now. I've built a bunch of stuff with it over the last twelve months and ported a huge monolith from slim to phalcon micro. I really like being able to create a simple rest api in a single index.php with all to bells and whistles. 
With Phalcon 4 there is talk about breaking the extension out into several smaller ones. You will still be able to install it all at once or just pieces like many other frameworks.
https://blog.phalconphp.com/post/benchmarking-phalcon This is Phalcon 3, it will win every time which is obvious due to it's nature. Phalcon wins in speed, but it will not make anybodies application any faster if they don't take advantage of it. The amount of open source projects I've seen that use Phalcon to boast speed and then do weird crap (foreach loop SQL queries... slow API calls), just makes no sense. Other frameworks will usually win in terms of dev time, speed of setup and the big one: Community. Trying to find issues with Phalcon (especially if its a bug with Phalcon you can't exactly look at its code...) is painful. It's getting better but not yet "there". More mainstream frameworks will beat Phalcon in this area.
&gt; TL;DR Do not use SMS to restore password or authenticate. It is OK to use SMS as a second authentication factor. 
&gt; The amount of open source projects I've seen that use Phalcon to boast speed and then do weird crap (foreach loop SQL queries... slow API calls), just makes no sense. This was the thing that always bugged me about Phalcon projects. At the place I was at last had a Phalcon API and they went with it because it was super fast. There were I think 16 servers that at peak were doing ~500 to 600 requests per second. And they were all pretty high load and taking sometimes a few seconds to return. But there was no caching and some terrible queries/loops with queries. Had to refactor it a ton and add in some ElastiCache. Was able to reduce it to 4 servers (a little redundancy and in different AZ's) and a year later it was handling ~1000rps at peak. While "hello world" benchmarks are nice to see technically the max throughput you can get, a few crappy queries here and there and it doesn't matter if you wrote you app with Phalcon, Symfony, Silex or Wordpress.
I thought so but wasn't sure. That's cool.
It's actually not OK to use SMS as a second authentication factor. https://techcrunch.com/2016/07/25/nist-declares-the-age-of-sms-based-2-factor-authentication-over/
So this is a fascinating project, I wonder if Hack is used by any major companies. I know that most of today's code can be transferred to Hack it's self, but I'm curious as to who's using hack in production. On that note, did you end up writing a PHP library that would do something similar?
In my experience you'd be better off not trying to migrate to a framework per se, but replacing various sub-systems and refactoring particular components to match modern standards. I've been slowly doing this over several iterations with a legacy code base we use to support a particular type of client with a particular integration requirement. The next iteration will finally be able to see much of the underlying "framework" code replaced in one fell swoop because we are now overwhelmingly using dependency injection and, in most cases, have refactored the legacy libraries to provide compatibility interfaces for things like PSR-7, doctrine, etc.
Recommend me your favourite SQL book then :)
Aside from Facebook, I recently discovered that [Slack is making the shift](https://youtu.be/gmCN76Mr_ms); [some of Wikipedia is written in Hack too](https://en.m.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites) since switching over to HHVM in 2015. Slack's developers are also opting in to using Hack, which is encouraging! In the grand scheme of things, production Hack seems limited to pockets of the codebase and a fraction of major companies, and I suspect migration is usually less justifiable than greenfield projects in Hack. PHP lacks a built-in scheduler and, by consequence, the await mechanism, so sadly it's not possible to do something else arbitrarily while you're wait to pull something. I suspect all implementations would use callbacks somewhere akin to ReactPHP. 
Non-Mobile link: https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^87004
I found useful and recomended solutions for Legacy framework migration on the following website. It might solve your problem. http://howcanfix.com/2823/integrating-qt-into-legacy-mfc-applications
No, amphp.org uses generators as coroutines, so the syntax is quite similar to hack's. And with some preprocessing and it can be exactly the same.
I would go with Symfony. https://stovepipe.systems/post/migrating-your-project-to-symfony
Just pay for it.
If you want to waste time and never ship anything, writing stuff from scratch is a great option. 
I have done this a couple of times using Symfony. We put the Symfony Kernel in front of the legacy application, then listen for a NotFoundException and try to get a response from the legacy application. Then you can write new functionality in Symfony and slowly upgrade the legacy part. This works best if new functionality has very little in common with the legacy stuff. E.g. adding a REST api to a legacy application.
Even had the audacity to "lolol i lock thread, you used your real name, hope your boss finds out trololo", asshat.
Too much white space makes jack a dull boy
I like my retinas so I'll stick with a dark background and line spacing that allows me to get more than 3 lines of code on my screen.
Their logic seems totally flawed there. They seem to be making a lot of assumptions. In reality, yeah - 2FA via SMS is probably not the best idea for someone like say Google, Facebook or Twitter to be using. But for &lt;insert random website here&gt;, it's providing ample security. Realistically nobody is going to go to the effort of cloning a sim or building a fake 3G hotspot to login to your bloody reddit account.
I prefer a not-too-large font size, because it allows me to see more of the code without scrolling or having to resort to code folding. You have to keep the context of the part of the code you are working on in your mind's working set; being able to see it allows you to offload it to the screen, reducing the cognitive load. Also, I don't like code folding. It makes the code an unrecognizable "moving target", requiring you to read function names instead of being able to visually recognizing where you are. Your mind has to manage code folding, keeping track of what is hidden, which again increases the cognitive load.
This post is of no value and will be received by the community as SPAM. If you're a honest developer willing to share your experience, better write a review of ONE tool you have a good experience with. Otherwise don't bother with posting. 
No composer, No PHPstorm, no docker/vagrant, no xdebug, no blackfire, no zephire. and all the tools listed here are shit. * phpDesigner 8 - Just use PHPstorm * PHPDebugbar - Just us xdebug * NuSphere - the fact this support perl shows how shit it is * PHP-CPP - Its ok I guess, but if you want to make a low levelphp extention use PHP's sdk. * Directus - Just us CLI * SublimeText - ehh cant argue against it, but for larger projects use phpstorm * PlatesPHP - Never heard of it, so must be shit * mink - no comment * GuzzlePHP - no comment * Parsedown - never used it before indian spam is indian.
I saw your example: `createPage()` was renamed to `createPaginatedPage()` but what if your class name is `Paginated`? I think in that case you don't need to repeat the name Paginated in the method name.
You lost me at &gt; Why Classmap and not PSR-0 o PSR-4? &gt; &gt; Because classmap is superior. Tying your directory structure to your namespaces, even if only partially is silly. Namespaces should be as flat as possible to prevent excessive aliasing even within a given module and your directory structure should be relatively robust to make it easy to differentiate between the various classes within a given module.
I'm not saying it is flawless. I'm saying that it's better than nothing. Multi-factor auth via multiple insecure channels is better than single factor auth via insecure channel.
But anyway, I have a draft article covering HOTP/TOTP addressing the issue. Need to polish it a bit more.
Depends on who you are. The cost isn't particularly high. For ~$1000 you can either get a fake cell tower or become a virtual cellular data provider getting anyone into your roaming.
What are your experiences with using this? Is the quality always good? What made you go down this route instead of using a very well tried and very well tested method in wkhtmltoimage? Where did that fall short for you? I've been working on just this very thing over the past 3 weeks and also wkhtmltopdf and they have been flawless. 
&gt; will be received by the community as SPAM It's exactly that and nothing else
Ok, reported then
Netbeans then, everyone down votes it because its free. I've used both Storm and Netbeans recently (within the last 12 months) and I can honestly say there isn't a single feature in Storm that I didn't have/miss in Netbeans. Give it a try.
In case of a public method; yes. In this case, it was a private method, and the variable `$page` was something different within that class. So `paginatedPage` was more clear. But you're absolutely right, in many cases, `createPage` would be the correct choice.
I get 50 lines on my retina screen with 18pt and a line height of 1.8.
Then if you like Generators, you may be keen to start using the [nikic/iter](https://github.com/nikic/iter) library, which brings most of that functionality, but for any kind of iterable as opposed to strictly arrays
The code that makes your application different from other applications (the [domain logic](https://en.wikipedia.org/wiki/Business_logic)) should not depend on a framework. For more information on this, search for 'framework agnostic code'. The same holds true for things like specific persistence implementations and third-party libraries. Domain logic should be totally independent of those things. One way to refactor your code is to put a specific [bounded context](https://martinfowler.com/bliki/BoundedContext.html) (start with a simple one) in a newly-written API. You can then consume this API in your existing application. This allows you to rewrite the messy domain logic in your existing application on a step-by-step basis.
If the class was called ```PaginatedPage```, the name of the routine could be further shortened to ```create()```.
&gt; What are your experiences with using this? Is the quality always good? Yup, works pretty good overall. &gt; What made you go down this route instead of using a very well tried and very well tested method in wkhtmltoimage? Where did that fall short for you? wkhtmlto* uses an outdated version of webkit to render pages. From what I've found in my googling is that those tools cannot execute ES6 and that there's no support for modern things like Flexbox. Chrome supports all those nice modern things. Here's [a comment](https://news.ycombinator.com/item?id=14104116) on that by the maintainer of wkhtmlto* &gt; I've been working on just this very thing over the past 3 weeks and also wkhtmltopdf and they have been flawless. Good for you. Keep on using wkhtmlto* if it works for your use cases. 
I would surmise it's because some layouts/js don't play nice with wkhtmltox, and headless chrome is headless chrome, so what you see on desktop/mobile is what you get in headless ?
Perfect, thanks for the link! Impressive, even if just a "weak" test of hello world. That is closer to benchmarking a static file with ngnix than a true application. From the comments on that page the author seems interested in doing real tests with TechEmpower Hopefully we'll get to see! 
Awesome. Thanks for the link. I have a project that needs this 
Just a heads up, you have a bunch of invalid github links on that page because you forgot the `-php` part in your github repo name
I haven't read it YET but damn that bright red/orange searing my vision... had to disable both orange background and linear-gradient background in order to comfortably read that... Ok - since now I'm able to read it let me commend on while reading: 1. fonts and spacing - while readable font is a must (courier new is sooo no-go), spacing in 2nd example is WAY off. It actually increases load because "hey, why are here so many blank lines?". Too much of a whitespace and you've got yourself worndering about blank lines, too little and you've got line-on-line. 2. Folding - yeah, maybe. But then I use method browser for that and good coding practices. 3. DocBlock - If doing real typehinting and good naming then OK, but god forbid if you do that on public-facing library code. While I think you actually can put documentation in separate place, almost all programmers are too lazy to do just that (and thus why DocBlock were born in the first place). 4. Naming - this one I agree with. btw: get rid of that burning orange, please. It hurts my eyes.
If you cannot use directly a column as unique, just create a new column (unique) and fill in a unique value (of course a somehow concatenated now unique key from several sources/tables).
So true
I bet your repositories look like pure fucking gold.
it's just a: &gt; chrome --headless --screenshot ?
Read the blogpost for more info
He's technically right, neither extreme is good. Pushing entire components and projects in a single directory gets messy, even if they logically belong in the same namespace. But the practice of creating namespaces like "Interfaces", "Exceptions" and various other categorization names is also very annoying. And it comes from tying directory and namespace, and both having slightly different use cases. The trick is to have a structure that is not completely arbitrary, but both communicates where in a directory tree a class is, and also allows grouping related classes within the same namespace. Classmaps are the fastest way to autoload, even if you follow PSR-0 or PSR-4 (especially if written as constant expressions, and you use opcache, which will keep the map in shared memory). So technically we **could have any directory structure we want**. But we don't, go figure. I personally have my omelette and my eggs: I have a "development" structure, which is a proper superset of PSR-4 - directories are a namespace by default, but they can be named in a way that means "this is a group of classes in the same namespace". I can automatically export the project to a pure PSR-4 for distribution in Packagist, to avoid confusion among people unfamiliar with the system. But people are so used to PSR-4, I think this should be at best an internal thing to a project, instead of going to the PHP4 way of structuring projects all the way.
OP, I'm afraid you keep driving yourself in tighter and tighter niches. ADR is niche, and now you have your own variation of it, RAD, that's even more niche. You have a niche type of autoloading structure, and using it all with a niche kind of framework. I'm not saying you should mindlessly align with the masses, but if you want to be understood, you need to carefully choose the battles worth fighting, or else everything you do will seem different for the sake of being different, and keep people away from trying your stuff.
You could have a look at this thread: https://www.reddit.com/r/PHP/comments/53m82v/4_years_old_legacy_application/ I was the OP, feel free to as me questions.
I like my portrait 24" with around 100 lines visible at any one time. I'm not sure on the exact number or font size because I'm not at work right now. Anyway, I found my productivity definitely increased when I got that monitor
The screenshots were made on a "retina display" Mac. They have a very high-density displays, so don't be fooled by the text size in the first two screenshots.
Be careful beeing too hyped of array functions or you will start trying to do some fancy shit with `array_map` and/or `array_walk` until you realize, that you actually wanted to use a plain `foreach` (Way too many that did that..). 
I'm on a retina display - it still looks way too spaced out to me.
I get 49 - font size 15, default line height. That is however on the new touchbar macbook pro which has a higher standard resolution than the older models.
if you're ever faced with the question "what PHP framework should I try and learn?" That answer is undoubtedly Laravel.
Well I'm not faced with that question *per se* but it's always on my mind. Could you give a good reason to choose Laravel over Phalcon?
&gt; You lost me at What in particular there are you having difficulty understanding? Perhaps I can rephrase.
Thanks. As you can probably guess, I would have preferred the shorter /hiraeth/ -- unfortunately, it wasn't available, and I'm still not in the habit.
Really disappointed that it doesn't even mention Blackfire, performance improvements are useless without metrics :/ That said, regarding the first video: how can you specify how to optimize the autoloader, e.g. when you want to do `dump-autoload --classmap-authoritative` instead of `dump-autoload --optimize`?
I'm not sure how you determined classmap is niche. I'm also not sure what a "niche kind of framework" refers to. The fact that it's a nano-framework? If anything a nano-framewok like Hiraeth is less niche, because it defines far less for you. It's literally not specialized at all and can largely be whatever you want it to be. I'm glad to answer any questions as to why I choose to do things the way I do. Hiraeth is not particularly tied to RAD or ADR or MVC. In fact, one could route to a traditional controller action just fine. As I said in the conclusion, I think ADR is an interesting pattern. I've had plenty of experience working with unwieldy controllers and I think the separation of concerns it provides is the right approach for a web pattern, as opposed to MVC (which makes far more sense as a desktop GUI pattern for in memory applications.) I think the reasons for a Responder-First approach were also fairly well stated. It is simply the case that not every response will have a requisite action and domain. The decision to call this something separate and call it ADR-like was not "for the sake of being different," but after an initial back and fourth with Paul. He believed, and I tend to agree, that moving control to the responder was enough to constitute a different pattern which is why I e-mailed him with the concern to begin with. I tried ADR (which became RAD) because I found it interesting. Presumably, people will also try some of the things I'm writing about if they find them interesting.
What line-spacing do you use :)? OP is 1.8, which is indeed a bit sparse, although it's better than the default of 1.0 in most IDEs, where they cram lines terribly close. I prefer between 1.2 and 1.4.
[removed]
Just standard sublime spacing but with 1px top padding. I also increased the font size slightly to 15. I get 49 lines in a window.
&gt; I'm not sure how you determined classmap is niche. Using a classmap is itself not niche, you can use classmap with a PSR-4 layout, as well. Pointing your classmap generator at flat directories "actions" and "responders", however, is very niche. &gt; If anything a nano-framewok like Hiraeth is less niche, because it defines far less for you. It's literally not specialized at all and can largely be whatever you want it to be. If it's not specialized, you should apply "single responsibility principle" to your blog posts, like any good developer does for their classes, and not throw in ADR, RAD, custom directory structure, and what not, when talking about Hiraeth. Because you're creator of Hiraeth, and you mark these posts as "Hiraeth | Whatever". By mixing all those things into one big pot, people see this as the "Hiraeth way" and because it looks quite arcane, they move on to something else. &gt; I think the reasons for a Responder-First approach were also fairly well stated. It is simply the case that not every response will have a requisite action and domain. This is what's called a "self-inflicted problem". Your chose ADR, which is notoriously rigid (due to Paul's choice to make it so), then you had to reinvent it, to solve the issue of rigidness. In virtually all web MVC frameworks I've tried, the model is not *mandatory*, and one controller can drive many views, which means you can have one single controller displaying all the static pages across your site, with simple parametrization, i.e.: $twig = function ($template) { return function () use ($template) { return new TwigView($template); }; }; $router-&gt;get('/contact', $twig('contact.twig')); $router-&gt;get('/services', $twig('services.twig')); $router-&gt;get('/about', $twig('about.twig')); Notice how, by using basic programming techniques in existing run-of-the-mill MVC frameworks, we solved the problem, without having to (re)invent and name a new kind of architecture...
It's not even that hard, with a bit of social engineering you can easily commandeer a cell phone number. It has happened in the wild already. https://www.wired.com/2016/06/hey-stop-using-texts-two-factor-authentication/ And honestly, it would be worth hacking a reputable reddit accounts, you could take advantage of the trust and have trusting users download malicious content or other. 
Upboat for Services, they are a pretty standard programming pattern along with DI. Agnostic of framework, but you will need some kind of DI library (any framework worth it's salt will have one). 
You're comment adds nothing to the discussion, but it made me laugh :) Then, as I turn back to the "roll your own framework" code my predecessor left me, I die a little inside.
While you do need to invest some time into learning what the framework does for you and how you need to use it it’s relatively easy in comparison to developing all those features yourself!! The frustration of learning PHP without a framework is too high. If you plan to develop some kind of app for you or someone else to use it would take you months to have everything fully working the way you want..if you even get there! A lot of people give up on the way. Chances that you finish your first app are much higher if you only focus on your business logic part and let the framework (+ libraries) do things like routing, persistence, security etc.
https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program You're welcome
&gt; Good for you. Keep on using wkhtmlto* if it works for your use cases It works yes and of course I'm not going to rewrite everything now the project is almost complete, I was more asking for future projects which might require this feature. &gt; those tools cannot execute ES6 and that there's no support for modern things like Flexbox It sounds like it has better future proof features than wkhtmltoimage which is exciting to hear. &gt; Good for you. Nice passive aggressive tone, go have a coffee.
&gt; it's just a: &gt; chrome --headless --screenshot ? Yes: &gt; $command = "cd '{$workingDirectory}';'{$this-&gt;findChrome()}' --headless --screenshot {$this-&gt;url}";
Although others have been negative towards this I would like to say thank you as there doesn't seem to be any other high quality free videos that target Laravel performance specifically, so nice effort and thank you.
I think I'm missing the point of this but what are you actually compiling down to? 
&gt; Sparked a lot of controversy Yeah, right. 
Never heard anyone having problems with the orange before, I might look into it, who knows. On topic: I feel the screenshot doesn't fully cover the effect a larger line height has on the readability. But it's up to you what fits your needs best. On DocBlocks: in a public library, you'd want to document every public method explaining what the method does, so it's a must to add DocBlocks there. But when DocBlocks only add `@return` and `@param`, it's my opinion they do more harm than good. 
Amusingly for an article about typehints, the docblock `@param` and `@return` text is rendered almost invisible by the stylesheet. Only issue I've had so far with PHP's return type hinting is the lack of [Covariant Return Type](https://en.wikipedia.org/wiki/Covariant_return_type) support (which the docs say may come one day). That's an area where the "more-specific docblock" is key (ditto, as article mentions, for arrays).
**Covariant return type** In object-oriented programming, a covariant return type of a method is one that can be replaced by a "narrower" type when the method is overridden in a subclass. A notable language in which this is a fairly common paradigm is C++. C# does not support return type covariance. Covariant return types have been (partially) allowed in the Java language since the release of JDK5.0, so the following example wouldn't compile on a previous release: More specifically, covariant (wide to narrower) or contravariant (narrow to wider) return type refers to a situation where the return type of the overriding method is changed to a type related to (but different from) the return type of the original overridden method. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
Remember it also depends on the resolution your retina is configured. I always pick the highest available resolution (1680 x 1050) on my current Macbook. It's very well possible you prefer another line height, it's a highly personal choice. But it's good to think about though.
&gt; I'm saying that it's better than nothing. Sure, unless it's checking that "has MFA" checkbox during compliance audits, in which case it's an insecure solution that prevents a secure solution from being implemented.
&gt; Using a classmap is itself not niche, you can use classmap with a PSR-4 layout, as well. Pointing your classmap generator at flat directories "actions" and "responders", however, is very niche. I point the class map at the entirety of "local" -- so my directory structure within that directory is irrelevant to my namespacing (which is precisely how I want it). It would be similar to pointing at "src" which is what I do for packages. The only reason "local" is used, is to differentiate it from "vendor" or imported modules of any sort. Similar to /usr/local on a *nix based system. &gt; If it's not specialized, you should apply "single responsibility principle" to your blog posts, like any good developer does for their classes, and not throw in ADR, RAD, custom directory structure, and what not, when talking about Hiraeth. The single responsibility principle applies to classes/objects, not blog articles. I'm not sure what you're referring to here. &gt; Because you're creator of Hiraeth, and you mark these posts as "Hiraeth | Whatever". That is the title of the page. On an article page it is "Hiraeth | &lt;article title&gt;." I can try to use custom titles for my posts here in the future if that's a problem, but I'm not sure how it's relevant. &gt; By mixing all those things into one big pot, people see this as the "Hiraeth way" and because it looks quite arcane, they move on to something else. All of the articles on the site are relevant to Hiraeth. I can't guarantee that the RAD component would work in another framework because how they do controller/action resolution from the router and dependency injection might differ quite a bit. &gt; Your chose ADR, which is notoriously rigid (due to Paul's choice to make it so), then you had to reinvent it, to solve the issue of rigidness. Yes. To me this is preferable to choosing the alternative which is not rigid enough in my view. Having a mess of controllers with mixed actions often following some sort of convention like /class/method for their URL mapping is a problem. It leads to controller classes which may have odd mixes of things because clients are picky about URL structures sometimes and things end up in places that don't logically group together in code, even if they may logically group together when being presented as a navigation item. &gt; In virtually all web MVC frameworks I've tried, the model is not mandatory, and one controller can drive many views, which means you can have one single controller displaying all the static pages across your site, with simple parametrization... To my knowledge this is also possible with ADR itself. One could create a simple "ViewPage" action. It all depends on how abstract one wishes to make the actions/responders. To me the issue isn't so much abstraction, although I think more abstract responders/actions is preferable to the very fragmented style that Paul use, but the simple fact that the action may not be needed regardless. &gt; Notice how, by using basic programming techniques in existing run-of-the-mill MVC frameworks, we solved the problem, without having to (re)invent and name a new kind of architecture... In the next article I will be introducing the TwigResponder, which very much handles the issue you're talking about. I don't consider this a re-invention of the wheel as much as it is a cleaner separation of concerns. I'm not a huge fan of anonymous functions as route endpoints, but the same principle applies. This code is actually already available, I've just not written about it yet: https://github.com/hiraeth-php/rad/blob/master/src/TwigResponder.php This can then be set up as a fallback route for essentially any URL. So you can route specific URLs to specific responders (which can then optionally have an action), and then the twig loader can be added as a catch-all fallback: "{path:^.*$}" : "TwigResponder" But this would be equally possible with ADR, it's just that the action becomes redundant. One could route to an action that does nothing but invoke the responder. Or perhaps it's the action's responsibility to set the template, but this to me seemed to be stretching the responsibility of an action. There's no particular reason that a responder should not make decisions based on the request -- in fact, for something like content type, this is precisely what one would expect.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [hiraeth-php/rad/.../**TwigResponder.php** (master → 2e6b00a)](https://github.com/hiraeth-php/rad/blob/2e6b00aa96660acaba32752e9aed332247d15c48/src/TwigResponder.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djq2wgp.)^.
I've half resolved it. So I have enum field definition id field which was on the base field value table when it should have been on the enum field value table because that's the only place it is used. This change allows me to put the constraint on enum field definition id and the value. Now tackling what's the best way to retry adding the file on the constraint exception.
really annoys the hell out of me when found code with lazy value names, wtf is td, ft, xd... that shit is not clever or advance, just fucking lazy and inconsiderate 
Usage of "native" typehints can have drawbacks in *select cases*. For example, since we lack things as generics, so if we typehint a Collection class, we can't reuse it for different collections. But if we type-hint through PHPDoc and runtime validation checks, we can reuse all the code. Hopefully if one day we have unions, intersections and generics, I'll be able to "type-hint all things". Because type-hinting all things implies a robust type system, and while PHP is increasingly getting better in that department, it's not *quite there yet*. Until that day, one should be a little more flexible about what they use - native typehint or PHPDoc typehint. But hopefully it's at least one of those :-).
I can chalk type-hints up to style (to a degree), although it's unfortunate. But the guide also *recommends not declaring class properties, but using dynamic ones*. This literally leads to worse performance and higher RAM usage, as PHP will be slapping a unique hashtable on every object, instead of using a shared one (per class). I can't even...
From a PHP superset to regular PHP.
&gt; Nice passive aggressive tone, go have a coffee. I am genuinely happy for you that you have a working solution. How could I phrase that better?
Hmm... you're right. I'll adjust the article.
I have 22 font, 2.3 line height on a 3840x2160 resolution.
Have you read Modernizing Legacy Applications by Paul M Jones? https://leanpub.com/mlaphp He is smarter than I am regarding coding, so I'm following his direction in my legacy app. Putting your app into a framework in its current state will probably be WAY more work than it needs to be. 
uh am I missing something or is that like a really obvious command injection vulnerability right there 
[removed]
What I've been doing recently is use really short variable names (like one or two letters) when I'm writing code, but then refactor it later so that it's meaningful. That way, I benefit from the faster typing of short variables names when I'm first coding, and eventually the descriptiveness of longer variable names when I'm done.
Imagine you have a lot (&gt; 100) of very dynamic database queries and you try to type-hint all the things. How would you type-hint a collection of "rows" coming from a relational database? Without type-hint * array[] of rows * array[] of stdObjects * ArrayIterator of stdObjects With type-hint * array of Value Objects (setter/getter)? * array of "structs" (Object with public member variables, $row-&gt;first_name) * ArrayIterator of Value Objects (with setter and getter methods)? More options?
Feel free to send a PR to repo with improvements
Whoa, that's very cool. At first glance... merging iterators and Promise.first hint that it's possible to port the whole thing to php. I'm going to give this a stab right away. Thank you for showing me this! Never been happier to eat my words
This is the evolution of the logo and explains why is an elephant =&gt; http://sites.psu.edu/loht/wp-content/uploads/sites/2924/2013/08/php_how.jpg
ping me or /u/kelunik if you get stuck
Check your white space privilege boy
Always thought it would be kind of nice if you could type hint an array with a required set of keys. That would save making some types of value objects.
You know, on rest of your site it hides to manageable handful pixels in upper area, but on blog it covers 50% of page height and since my monitor is panoramic it attacks me from both sides. Readability is really in the eye of the beholder, general tip here could be "increase readability of text till you're satisfied and don't have to decipher every word". On docblock fully agree :) but it's "either use typehinting or use docblocks".
Bad news, got a change to create a new docker environment at our workplace on different computers and I'm back to something like Win64, Docker 17.06 (Native): 30+s | 3s. Not a clue what the difference is (again, the same test, devilbox and a new empty symfony project). There is a difference in hardware, but I don't believe it could make this big of a deal. Both computers have an SSD, which was the bottleneck before in like 90% of the cases, just because of slow file sharing.
As always, I enjoy how open-minded and receptive to feedback you are. /s
You could also remove typehinting and return type declarations. From other threads I have read this works very well to reduce 'visual debt'.
&gt; Really disappointed that it doesn't even mention Blackfire, performance improvements are useless without metrics :/ I wasn't aware that some fancy profiling service is now the "go-to" solution for metrics. If you want proof code is faster, you can just bench with `microtime`, browser response time, and profile with Xdebug. All of these require $0 and provide just enough information to do the job. If one needs more than this, I feel PHP is the wrong tool for the job. Even the worst written Java code would be 2-3 times faster than the most optimized PHP solution, when it comes to raw performance. 
&gt; Usage of "native" typehints can have drawbacks in select cases. For example, since we lack things as generics, so if we typehint a Collection class, we can't reuse it for different collections. But if we type-hint through PHPDoc and runtime validation checks, we can reuse all the code. Would you provide a small example please? I've seen this complaint before, but because I haven't really worked with collections and with php7 typehinting, I still don't understand the issue. Wouldn't typehinting the base Collection class solve this? Or are you referring that native typehinting doesn't have something similar to `ObjectType[]` from phpdoc?
Just have a struct/record/tuple type (or means of implementing what is effectively one with some magic like python's [\_\_slots\_\_](https://docs.python.org/3/reference/datamodel.html#slots) and the [namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple) function to generate classes with that feature for you easily and readably) and you'll get all the benefits of being able to specify a specifically-keyed type and all the benefits in terms of resource-advantages such a type has over PHP's array type.
This is actually where implementing an interface would be the best course. The collections don't even have to have a common extended ancestor, they can just implement some collection interface and you check for instance of that interface.
I like the fact that u/mattsah is taking the time to explain their reasoning to you. You don't have to agree, or use, this software. `:-)` 
I'm sorry, did you have an actual suggestion in all of this? The most concrete suggestion I got seemed to be to take "Hireath |" out of the title. Beyond that all you seemed to be saying was "don't do things different from the majority." I'm not sure what you would like me to do with that. It's also not clear your understanding of ADR is well placed. I'm personally just beginning to explore it, but in what little I've played around with the pattern, your criticisms just seem to be something of a straw man. There's absolutely nothing that limits the ability to create abstract actions/responders.
&gt; fancy profiling service What are you talking about? I've been using xDebug profiling, and after that xhprof for years. Microtime is an awful way to profile. 
I'm talking about Blackfire. I didn't say "profile with microtime". I said "profile with Xdebug". Microtime, while simple, can be effective when optimizing a hot routine in a script. Full profiling is sometimes just noise and distorts the performance of the script, if you don't need it. Every tool has a place.
I'll provide an example with generics first. I write a single collection, then I can produce three unique, typed collections with no extra code: class Collection&lt;T&gt; { protected $items: T[]; public function get(string $name): ?T { return $this-&gt;items[$name] ?? null; } public function set(string $name, T $item) { $this-&gt;items[$name] = $item; } } class Headers extends Collection&lt;Header&gt; {} class Cookies extends Collection&lt;Cookie&gt; {} class Form extends Collection&lt;Field&gt; {} There's no way to do this in PHP. My alternatives are instead: 1. Implement the methods three times. 2. Decorate (compose) a collection. This requires lots of boilerplate and proxying has a performance hit. 3. Leave out the type-hints and reuse the class. The most pragmatic and best performing option remains option 3. To provide IDE support, I instead write interfaces for every collection, and I typehint via PHPDoc only. Then I implement the interface via my reusable collection: class Collection { protected $items; protected $type; public function get(string $name) { return $this-&gt;items[$name] ?? null; } public function set(string $name, $item) { if (!$item instanceof $this-&gt;type) { throw new \TypeError('Bad item type, instance of ' . $this-&gt;type . ' expected.'); } $this-&gt;items[$name] = $item; } } interface Headers { /** * @param string $name * @return Header */ function get(string $name); /** * @param string $name * @param Header $item */ function set(string $name, $item); } class BasicHeaders implements Headers extends Collection { protected $type = Header::class; } Even this, as you see, is a lot of extra typing and redundancy compared to generics, but it's the *best option available right now* in PHP. And it happens to be incompatible with native typehints. 
Have an upvote!
Totally besides the point, but I’m never giving up TextMate in favor of a bloated IDE. If I want autocomplete I can make an action to do that.
Are they running on Windows 7 or 10?
It still requires *not* using type-hints.
I wanted a similar service like browserstack. So chrome headless is perfect for me, as it runs as a service in the background. I'm actually using nodejs as the DP implementation is the best and working one right now. I can give it a URL and ask it to create 50 different screenshots and it just works. Even better, is that it's resilient for multiple users at once. I'm looking forward to IE, Firefox and Safari headless. That'll make for a nice setup for viewing screenshots. Shame there isn't an open source implementation for emails. Gotta pay Litmus for it *groan*.
Nice.
&gt; Renaming etc/ to config/; &gt; Renaming web/ to public/; While we're at this, how about we rename `src` to `source` as this has been bugging me forever :-). *It's not a long word, why the hell are we abbreviating it*. :)
Recently i worked on Yii2 project, where frontend framework was AngularJs. I encountered problem that i had to generate urls dinamically from frontend part. So, i have done extension, which allow to generate those urls. I'd really appreciate you if you have a look. You can find code on github. "dmirogin/yii2-js-urlmanager" Thanks. 
maybe https://dev.mysql.com/doc/refman/5.7/en/insert-on-duplicate.html
Or use the auto-competition that your IDE offers you?
Both PC's Windows 10. But I believe one is windows 10 pro and the other one isn't. Hmm, would that make a difference
When it's impossible to deliver a tailored solution, use a nuke. 
Where did that php.exe file come from? How sure are you that your server hasn't been hacked and key executables replaced with malware infected ones?
[removed]
I have really no idea, but there must be something that is responsible for the huge difference
https://en.m.wikipedia.org/wiki/Anemic_domain_model
Non-Mobile link: https://en.wikipedia.org/wiki/Anemic_domain_model *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^87231
**Anemic domain model** Anemic domain model is the use of a software domain model where the domain objects contain little or no business logic (validations, calculations, business rules etc.). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
I usually find that the people who complain about PHPStorm have not-so-great computers. On my Dell XPS laptop, all Jetbrains products fly. It's comparable to simple text editors but way more powerful. 
I have to disagree. The ability to create a new document the moment I hit ⌘-N is powerful. I don't want to wait 1 second. I want to create my document NOW. The same goes for everything else. Speed is everything. If you're used to the speed of an IDE, then it's fine. But once you feel the speed of being able to just code and have nothing setting you back, it's hard to use anything else. You just end up getting really annoyed.
Good decision! Now get rid of the environment variable madness ;)
[removed]
Fully understood, thank you. I always relied on option 1 whenever I write code - duplicate the methods just for the IDE support. And I can see generics would be pretty helpful in a bunch of these cases.
Same Webroot that detected Windows as malware? http://www.zdnet.com/article/webroot-antivirus-mistakenly-flags-windows-system-files-as-malware/
&gt; how about we rename src to source It appears "we" already use `src` much more frequently than `source`. It's [65517](https://github.com/php-pds/skeleton_research/blob/1.x/results/addendum-dirs.txt#L3) to [343](https://github.com/php-pds/skeleton_research/blob/1.x/results/addendum-dirs.txt#L9). A rename looks like a hard sell. (Full report [here](https://github.com/php-pds/skeleton_research).)
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [php-pds/skeleton_research/.../**addendum-dirs.txt#L3** (1.x → fab33c9)](https://github.com/php-pds/skeleton_research/blob/fab33c93d3e20f9b36089ec87ef1bd84b168f99d/results/addendum-dirs.txt#L3) * [php-pds/skeleton_research/.../**addendum-dirs.txt#L9** (1.x → fab33c9)](https://github.com/php-pds/skeleton_research/blob/fab33c93d3e20f9b36089ec87ef1bd84b168f99d/results/addendum-dirs.txt#L9) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djqlq59.)^.
As a ReactPHP team member I'm kinda interested in why you'd think it isn't very mature? ReactPHP builds on event loop extensions like `ev`, it isn't an event loop extension it self.
Here's a fresh analysis from virustotal.com: https://www.virustotal.com/en/file/482711b2f17870ddae316619ba2f487641e35ac4c099ae7e0ff4becd79e89faf/analysis/1499115759/ Looks like a few others are flagging it as well.
As someone who works for a Webroot MSP, I hated that day.
To me, your example is backwards. You should have the collection as the interface and headers should be the implementation. Then override function set and then you can type hint it just fine... 
And when you want to find the definition of a method 13 layes of abstraction down ? It takes me half a second on phpstorm 
To each their own. That’s why we’re all free to pick.
I either think you got me wrong or Blackfire wrong. &gt;All of these require $0 and provide just enough information to do the job. First of all, Blackfire does propose a free plan which is more than enough for a few quick profilings. &gt;If you want proof code is faster, you can just bench with microtime, browser response time, and profile with Xdebug I disagree with all of those points for the following reasons: - Absolute time is a terrible metric. If you have a difference of a few seconds or half a second, yeah it's ok. Otherwise it's not reliable as depends on way too many parameters. Which is one of the reasons Blackfire allows you to first take several samples - When you are looking to optimize a piece of code, the wall time is one thing, but it's more interesting to see the call graph, which part takes what percentage and what kind of resources it's taking (you often have to balance between the memory consumption or if it's more CPU or IO bound) - I love to visualize profiles, xdebug is useless at it and microtime even more So in short Blackfire does a great job, is faster and more reliable. &gt;If one needs more than this, I feel PHP is the wrong tool for the job. Even the worst written Java code would be 2-3 times faster than the most optimized PHP solution, when it comes to raw performance. I find that argument very poor as you may care about performances regardless of the language and rewriting everything in another language as soon as you need a bit of perf would just be not cost-effective. If you start to do shitty optimization like `if ('a' === gettype($x) {...}` yeah I agree but that's not what we are talking about. Another point is that blackfire allows you to profile something in *production* mode without causing an overhead to your application like xdebug would do, which is also a very nice feature. If you want to profile, use reliable tools. As Blackfire is both great, easy to use and cheap, I see no excuse to not use it.
Sure, you were the one super categorical about your opinion. I coded on vim for over 10 years until I really saw what phpStorm can do, and never looked back. So I was just disagreeing with: &gt; But once you feel the speed of being able to just code and have nothing setting you back, it's hard to use anything else. 
Write it out, and let's see whose version achieves better reuse and performance. I think you're confused about the purpose of my example, and how PHP's type system works. - The purpose of my example is to reuse code. Overriding methods goes against that goal (you'd have to override `get()` too, BTW, it will need a return type). In my example, `BasicHeaders` overrides zero methods. - Re. PHP's type system: you can't have a `set()` method where the value is not typehinted, and override it with one where *it is* type hinted. That adventure in code reuse ends with a Fatal Error.
The question remains: it's not a long word, why are we abbreviating it?
&gt; I love to visualize profiles, xdebug is useless at it and microtime even more [Useless](http://grosan.co.uk/wp-content/uploads/-home-fgheorghe-Desktop-cachegrind__var_www_grosan_co_uk_index_php_out%20[-var-www-grosan_co_uk-index_php]_004.png)? &gt; Another point is that blackfire allows you to profile something in production mode without causing an overhead to your application like xdebug would do, which is also a very nice feature. You can't profile "without overhead". If the profiler is running, that's overhead (and non-trivial one). There's no magical way to collect a profile without one.
I think it's even more powerful that when I create a file in PHPStorm, I type the name "LoginController.php", when it creates the file, it already has the php start tags, it already has it's namespace there, it already has the class set up with the name of the file and it's already extending the base controller class and adding it's use statement. Plus it's got a docblock. Doing all that's going to take you at least 30 seconds and it just took my 3 seconds to type "LoginController.php". I can then type "protected $loginForm; protected $loginService", press a control+N and select constructor and I've got all my dependency injection done. I've just spent ~8 seconds doing both those. While you're at least a minute or two in to get to that point. Like you say, speed is everything. Plus I've got autocomplete, I can dig quickly into other classes with control+B, I have typehinting, realtime in my editor error catching, built in xdebug, code quality analysis, quick class switching, code refactoring and so much more. Like you said, speed is everything, but all these features are going to make me a faster developer.
*Nice*
Something something stop using PHP on Windows...
The second you gain in creating a new document, you lose in everything else that a "bloated IDE" provides. By all means have your fast new documents, I'll have fast development and debugging instead.
 &lt;?php interface ICollection { public function get(string $name); public function set(string $name, self $item); } //You can also make 'Collection' abstract if needed class Collection implements ICollection { protected $items; public function set(string $name, ICollection $item) { $this-&gt;items[$name] = $item; } public function get(string $name) { return $this-&gt;items[$name] ?? null; } } class Header extends Collection { } $h = new Header(); $h-&gt;set('test', new Header()); $h-&gt;set('test2', new stdClass()); // error * This example uses 0 overrides for each 'Collection' type - which I believe satifies that requirement. * Any subclass will also register as an instance of the interface so you can use that for the hint rather than the class. This seems plenty usable to me, but maybe I'm not understanding your needs.
You do realise that any autocomplete action you care to write will be in no way, shape or form comparable with autocomplete in a good IDE? Of course, it's your choice what you use to write code but I'm not sure why you would ever choose to pick a tool that is so constrained compared with other tools.
Hangover from the olden days, hence the *./etc*.
Vairy naice!!!
Focus first on reducing any dependencies you have on your current framework. If you can spend some time doing that, you'll probably have a good idea of the scope of doing a migration over to a new one.
Most of the PHP stuff I do is maintaining legacy code that isn’t part of a framework or has easily inferred settings, so features like what you listed wouldn’t be of much help.
I just felt like the article didn’t have to bring up editors.
PHPStorm is bloated. When it’s written in a modern, native language, maybe I’ll reconsider.
I don’t agree with this. You can hack on TextMate to your hearts desire.
Nice work. I just integrated the chrome headless screenshot feature into a project, but the spatie/image integration make me want to refactor using this lib as I haven't implemented the resizing I need to do. One interesting thing I found was that while the documentation for the headless screenshot specifies chrome 59+, I installed `chromium-browser` (58.x) available by default on Ubuntu 16.04, and was able to grab screenshots as documented here: https://developers.google.com/web/updates/2017/04/headless-chrome I'm guessing I may be able to get away with using that without having to install `google-chrome-stable`. Thanks for the contrib, and posting about it!
If the vars are coming from user input. But I would agree that it should be escaped anyway.
I found it failed for large images (7000x4000). But supports flex box unlike wkhtml.
I think I was misspeaking a bit. I think at the time, 7.0 hadn't been released meaning no way to deal with errors except crash and restart the process I was not comfortable at the time with the work around.
Except if you did: class NotHeader extends Collection { } $h-&gt;set('test3', new NotHeader()); // this wont throw an error It allows other types in the collection, as long as they extend the `Collection` class or just implement `ICollection`.
I guess I always just assume something exists. I go searching for the relevant functions and am appalled when I find that I must write something myself.
I'll second this for VS Code. Very impressed by it so far. 
Well... - You made every item of the `ICollection`... an `ICollection`. That doesn't make much sense, a "set of headers" is not "a header". Those are distinct types. I'll just chalk it up to a honest mistake. - Your collection isn't type-safe at runtime. I can assign any non-header to a header collection, as long as it extends `ICollection`. However a `Header` collection must contain only `Header` instances, not just any `ICollection` instance. - Your collection isn't type-safe in IDEs. If I pass a non-header to `set()`, the IDE won't report an error. Also you don't have a return typehint, so IDEs won't see what's returned from `get()`. &gt; This seems plenty usable to me, but maybe I'm not understanding your needs. My needs were simple. Type-awareness in IDEs, type-safety at runtime, without code duplication. You don't have code duplication, but you failed to meet the other two requirements... The `ICollection` interface serves no purpose here, basically. And the `Headers` class doesn't declare its item types or ensure its own type-safety.
Your example doesn't solve the underlying issue. The problem is figuring out how to have multiple collections of different types of things. So the original example was to have something like: $h = new Headers(); $c = new Cookies(); $h-&gt;set('test1', new Header()); //works $h-&gt;set('test2', new Cookie()); // error $h-&gt;get('test1')-&gt;invalidMethod(); // IDE flags this I'm not quite following what your code is doing, but it's definitely not doing any of that. And I can't figure out what your interface is doing...
It's not just Symfony that does this, it's an extremely common practice in lots of languages, frameworks, and systems. For example we have "bin" instead of "binary", "lib" instead of "library", "var" instead of "variable", and so on.
I never said "just Symfony does this". I was talking about the practice in general.
I suppose you'd advocate that `config` should become `configuration` too? ;)
Configuration is a long word, source isn't...
Not youtube, but Laracasts
Well, if you allocate an array in C/C++ to store a path you'll have to specify a length, which is typically a length of MAX_PATH, as defined by Posix. And while for Linux these days it's something like 4096, in the past (or on embedded devices) you wouldn't want to use that much memory just for a path. In the past and on embedded devices it definitely makes sense to save those few bytes. I guess that's the origin of src, bin, etc and lib.
Different method still a function
I like using a bigger font size because it forces me to write short and simple methods. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
so youre worried about 32bit systems 20 years from now?
I agree with you - it's really not necessary to use `src`. We don't use short variable names, why should we use short directory names...
Yes. If you look at how many systems still run on old PHP4 systems, then I don't think it's farfetched at all that in 20 years there will still be COBOL or old Java installations running.
Please no. 
I didn't ask why were they abbreviating it 40 years ago... Apparently it's ok to change `etc` to `config`, but suggesting `src` to `source` means I have to get kicked around all over this thread...
About folding code bodies by default: PHPStorm offers a structure window. I put that under the project window. That way you have all the benefits of a structured overview and don't need to concern yourself with collapsing every single block of code. Also, it sometimes really helps to scan the body of a method before deciding where to start editing.
Yes, I also mentioned this option in the blogpost. From my point of view, folding has few more benefits: you can still see the class file itself, which is more visual than a list of methods and properties. Furthermore you can also see the colours of the code, adding another visual element which allows you to quickly scan without having to read the structure list. But is a good alternative if you don't like folding :)
Configuration Files (x86) 
Well I know what I'll be doing for money in my 50s.
It's OK, I can't take your `src` away from you! It's yours forever. Just for science, though, please explain me why you and others feel so emotional about this abbreviation :) Thanks
Yeah thats the point I'm making. Nobody is going to pay $1000 to fake a cell tower for a specific location, for a specific person. The $1000 cost is likely far more than they'd make back from gaining access to someones account somewhere. Unless you live in an extremely corrupt part of the world this is all entirely theoretical. Don't forget you'd also need to know a persons location, email, password - lets get real here, nobody is going to do that. You may as well be saying don't click save passwords on your computer as someone could break into your house, steel it and gain access.
&gt;Useless? I find that unreadable so useless yeah (besides not being usable for prod environments). I can understand some people can get past the ugly UI and still find something there, but I can't and any minute spent on it would be a pain for me. In comparison, looking at a Blackfire profile is quite a pleasant experience :( &gt;You can't profile "without overhead". If the profiler is running, that's overhead (and non-trivial one). There's no magical way to collect a profile without one. Yeah you're right, in the request (or CLI script) you're profiling, there's definitely a slight overhead that gets bigger if you have a lot of recursion because of how PHP works. Otherwise, the only overhead you get is the one from installing an additional PHP extension (i.e. almost non-existent). Unlike xdebug, it doesn't instrument all the requests, only the ones you want to profile, which makes it safe for production. 
&gt; node.js Node.js is not a framework, it's a javascript runtime environment.
Natural selection starts in approx. 30 years, I am excited! Imagine all the old systems that never upgraded, because it only works on Windows 95 with Patch 22.1.501.311, but not 22.1.501.312 or higher, but needs .Net 1.4 which requires Patch 23.4.123.5, so you needed to write your own DLLs etc. and dare you if this server ever restarts, because it's possible that it won't go up again and you're screwed! ..ok, that's more the problem of the system administration, but if you also carrying for the system,.. damn :D Does storing in DateTime format includes this bug or only for signed integers?
Nice videos. I installed lets encrypt on my server following one of your tutorials. As a suggestion, please add a comments section to the video pages. I would recommend disqus or facebook comments.
That would depend on the system, but your best bet atm is storing as a DataTime format.
It's not that long of a word. It takes, what, another second to type? And with autocompletion, the extra length shouldn't be much difference at all. I think `config =&gt; configuration` is as valid as `src -&gt; source`, and I do like `source` over `src`
&gt; When you try to find some documentation of building websites with say Python you will be out of luck What is this? https://www.djangoproject.com/start/ http://www.tutorialspoint.com/django/ https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world https://www.fullstackpython.com/web-frameworks.html https://code.tutsplus.com/articles/python-from-scratch-create-a-dynamic-website--net-22787
Finally an antivirus I can agree with.
Er... let's not mistake Jeffrey's video for some sort of bit argument amount the pros and cons of type hinting. The video was a small rant aimed towards beginners about not doing it simply because it's trendy.
Hundreds if not thousands of packages use the src directory structure. It would be bizarre remaining src to source. There is no benefit to it unlike renaming etc to config and web to public. 
I'm worried about 32bit systems now that have to do date calculations in that timescale (e.g. mortgage calculations)
Bikeshedding much..? https://en.wikipedia.org/wiki/Law_of_triviality
**Law of triviality** Parkinson's law of triviality is C. Northcote Parkinson's 1957 argument that members of an organisation give disproportionate weight to trivial issues. He provides the example of a fictional committee whose job was to approve the plans for a nuclear power plant spending the majority of its time on discussions about relatively minor but easy-to-grasp issues, such as what materials to use for the staff bike shed, while neglecting the proposed design of the plant itself, which is far more important and a far more difficult and complex task. The law has been applied to software development and other activities. The term bike-shed effect or bike-shedding was coined as a metaphor to illuminate the law of triviality; it was popularised in the Berkeley Software Distribution community by the Danish computer developer Poul-Henning Kamp in 1999 and has spread from there to the whole software industry. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
If you think there's no benefit to renaming `src` to `source`, can you explain what benefit you see in renaming `web` to `public`?
http://www.phptherightway.com/
Because web is not descriptive. Whereas public you know everything in there is .... Public
No, there is nothing comparable to this warehouse of wisdom around. Just checked the [error handling section](http://bestpractices.thecodingmachine.com/php/error_handling.html) and every statement there is cast of solid gold. In comparison, with all the due respect, but [related section](http://www.phptherightway.com/#errors_and_exceptions) on phptherightway is rather a muddled rehearsal of the basic concepts that doesn't show you any right way beside "avoid @". My own humble efforts to treat various PHP related delusions and superstitions are no match either.
You can't assume a 64-bit system has the right behavior. For example, integers on 64-bit PHP 5.x on windows are in fact 32-bit signed, so the legacy date functions suffer from this issue on those systems. Also, mysql's timestamp type is 32-bit, even on 64-bit builds. In PHP: use the DateTime class. In SQL, always check the range of the date/time type you wish to use. Avoid storing/processing time as a number (not just for Y2K38, it's a bad idea in general).
Because public is not descriptive. Whereas web you know everything in there is... on the web.
Now your just arguing for the sake of it. 
super.... best post now in r/php
this is hardly anything but clickbait. In 2038 PHP will have been 43. PHP 4 will have been 38. 64-bit Processors hit mainstream adoption in 2004 making them 34. If you are maintaining PHP 4 in 2038; you deserve to be rekt as it's nothing but blatant gross negligence. This whole reddit post is stupid because those who are STILL using php 4 in 2017 are the same kind that will be running PHP 4 in 2038. And what makes matters worse... is that the author didn't even bother to do a TINY bit of research. The DateTime class wasn't introduced into PHP until 5.2... ofc meaning that ppl on php &lt; 5.2 are still FUCKED. 
How does what language a tool is written in affect its functionality? If it works as advertised (it does) then they could have written it in binary for all I care. Anyway, whatever works for you.
You believe you could write an autocomplete system that is as thorough as that in PHPStorm? With all due respect, no you can't. 
A [POS](http://www.urbandictionary.com/define.php?term=piece%20of%20shit) article about POS systems.
*Here's the Urban Dictionary definition of* [***piece of shit***](http://www.urbandictionary.com/define.php?term=piece%20of%20shit) article about [pos](https://en.wikipedia.org/wiki/point_of_sale) : --- &gt;any object, person, or other existing thing that works incorrectly, is too expensive, or just plain sucks. --- _Ryan that [hummer](http://www.urbandictionary.com/define.php?term=hummer) is a piece of shit! Why'd you buy it??!_ _Dude, why would you vote for [bush](http://www.urbandictionary.com/define.php?term=bush)? he's a piece of shit!_ --- [^(about)](http://www.reddit.com/r/autourbanbot/wiki/index) ^| [^(flag for glitch)](http://www.reddit.com/message/compose?to=/r/autourbanbot&amp;subject=bot%20glitch&amp;message=%0Acontext:https://www.reddit.com/r/PHP/comments/6l6lxv/what_is_php_point_of_sale_software/djrhaw4) ^| ^(**Summon**: urbanbot, what is something?)
I can't wait to see a Pentium II running Windows 98 in the year 2038. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
TheNewBoston PhpAcadamy TraversyMedia TheNetNinja (although I'm not sure about php) 
What madness are you referring to?
&gt; The official docker image includes chrome 60 running headless. WHICH official docker image? 
&gt; Symfony 4 won't have the equivalent of app/config/parameters.yml. Use environment variables instead. http://fabien.potencier.org/symfony4-best-practices.html
The only comparable site/documentation I can think of is Hola's DNA. It's really comprehensive and covers things beyond just code. I think you will learn a thing or two from it as I did. https://hola.org/dna
Thanks. I am taking a combination approach. I am taking this advice by using Symfony components where practical with the hopes of maybe one day being able to use Symfony as a framework instead of just separate components. Although this makes me wonder if there is really a clear point at which Symfony is used as a framework as opposed to just using components.
That's Aramaki. :-)
I wonder if there is any *paid* obfuscator in the world. 
You don't write classes? There also isn't a time where you want to dig into a class you have referenced in a file you are working on? Wouldn't it be easier to control+B on the class to automatically open to the method/class you do it on? What about built in git or complete git history and blame as well as show every change you have ever made to the file even if you didn't commit? Built in xdebug? Amazing autocomplete with typehints? Code analysis live in the IDE, literally it tells you hey you are comparing a string to an int or this method doesn't exist? Automatic refactoring as you improve the new code you are adding to your legacy application? You should really look into it, because if you ever look for a new PHP job at a modern place, you are going to be the slowest and unproductive developer with TextMate.
Not working at all on Firefox, I can't focus/paste anything in the text area. Also try to type a Cypher key, then delete it, something is terribly wrong with the JavaScript of this page :p
It's not a website but a book like [Code Complete](https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670) contains this kind of information.
Yeah I know what this is about, I just don't understand how this is madness. What would be though is making _all_ parameters dynamic, but that's another story and not what is promoted here.
Nothing wrong, it's just obfuscated! :-J
Ioncube
It's encryption, not obfuscation. equally useless though
Where did you read that?
Why?
As easy as it is to break, it does have a use. Keeps customers from poking at the code then doing support calls for bugs when the mess up something, and is enough to prove intent for copyright violations in Canada. 
It's a general 32-bit problem, not specifically a PHP problem. You can already see it manifesting in legacy systems counting time in 32 bits, but in the year 2038 the problems will probably occur in more obscure places such as old embedded systems that are used longer than they were intended. https://en.wikipedia.org/wiki/Year_2038_problem#Vulnerable_systems
**Year 2038 problem: Vulnerable systems** Embedded systems that use dates for either computation or diagnostic logging are most likely to be affected by the 2038 bug. Many transportation systems from flight to automobiles use embedded systems extensively. In automotive systems, this may include anti-lock braking system (ABS), electronic stability control (ESC/ESP), traction control (TCS) and automatic four-wheel drive; aircraft may use inertial guidance systems and GPS receivers. However this does not imply that all these systems will suffer from the bug. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
Their "what you should not do" function has a void return type. Probably needs to be bool?
Yeah, should be a copy-paste a error from the correct variant. Sent them a pull request. 
Well, I don't see how moving the settings of my Symfony application to the config files of Apache (or whatever webserver you are using) is a great idea. And I really don't like the idea of having to set environment variables to be able to run CLI commands. But maybe I need to wait until the release, because Fabien's blog is not crystal clear of what is going to happen: &gt; Symfony 4 won't have the equivalent of app/config/parameters.yml. Use environment variables instead. vs. &gt; Note that you can also define environment variables in a parameters.yaml file if that feels better to you. I would rather see it the other way around, in parameters.yml/config.yml instruct the application to read environment vars if that is what you want.
"There’s just no rhyme or reason to any of these values." Actually, they're ASCII codes (or Unicode, because Unicode includes ASCII): const integer IS_FEMALE = 70 ; // 'F' const integer IS_MOSTLY_FEMALE = 102 ; // 'f' const integer IS_MALE = 77 ; // 'M' const integer IS_MOSTLY_MALE = 109 ; // 'm' const integer IS_UNISEX_NAME = 63 ; // '?' const integer IS_A_COUPLE = 67 ; // 'C' const integer NAME_NOT_FOUND = 32 ; // ' ' (space) const integer ERROR_IN_NAME = 69 ; // 'E' Not that it even matters, because the whole point of a named constant is that you're using the constant instead of directly using its value. 
I said it’s bloated. Not that it doesn’t work as advertised.
Yes. Yes you can.
It would be nice to ctrl-b, but I usually know what I’m working with so I don’t know if I’d use that quite often. I have full git support in text mate. History, unstaged and staged changes, blame, etc. I don’t use xdebug enough since I can generally figure things out from a simple stacktrace. I used to use it more at my previous job but not so much now. Autocomplete usually gets in my way due to it trying to compete something that I don’t want it to. I should know if I’m comparing a string to an int. I mean, if you don’t know the codebase then an IDE would be helpful, but I also feel like these features could be added into textmate if I wanted them. I know you can with JavaScript due to there being tools that extract this information out via a cli tool that you can hook into. An IDE isn’t for everyone. I have found in the past that they have slowed me down more than improved my workflow. With memory issues, slow load times, glitches, etc, I just prefer a simple, hackable text editor. I didn’t expect my comment about IDEs being bloated to get this much attention.
There will be `.env` file instead `app/config/parameters.yml`. The exact same convention is adopted by [Docker](https://docs.docker.com/compose/env-file/), [Laravel](https://laravel.com/docs/5.4/configuration#environment-configuration), [React](https://github.com/facebookincubator/create-react-app/blob/85a9bc8590528bd1e5bab186918721feb64c7d78/packages/react-scripts/template/README.md#adding-development-environment-variables-in-env) and dozen other popular open-source projects. Nothing crazy about it. [You can read more about the general idea here.](https://12factor.net/config)
You can and should define your parameters as "parameters", i.e. in the YAML file: # config.yml parameters: foo: bar that declaration can be done in any config file, and you're free to have a `parameters.yml` config file with all of them if you want to, it's fine. What Fabien referred to is dynamic variables, i.e. with the `%env(FOO)%` you can have a parameter that changes from one request to another, which is very useful on platforms like Heroku. However in this case you should still use a default value and a parameter: # config.yml parameters: foo: %env(FOO)% # you should consume `%foo%` in your app, as when you consume a parameter you shouldn't care about where it comes from IMO %env(FOO)%: something # looks a bit weird at first, but this is how you define the default value for `%foo%` in case the environment `FOO` doesn't exists Feature which has been available since Symfony 3.2 I believe: https://symfony.com/blog/new-in-symfony-3-2-runtime-environment-variables Now in 3.3 a DotEnv component has been added as well to allow to easily setup environment variables with the `.env` for _your_ env variables and the `.env.dist` for the default untouched one. But DotEnv is really meant for dev only, as it causes an IO access (on CLI it's fine, for your app much less), which is why such environment variables should be defined in your web server for production (and not rely on DotEnv). Now that you have DotEnv in dev, the `parameters.yml` and `parameters.yml.dist` becomes a bit quite redundant, hence completely replaced for DotEnv by default to simplify things. You can still use it in the end it's just using Composer scripts: https://github.com/Incenteev/ParameterHandler Don't hesitate if you haver other questions :)
The only benefit I see is that other popular frameworks like rails do it that way. I personally don't care enough to have an opinion on it. 
Can you elaborate on this a little? What benefit have you gotten from the book so far? What do you mean by putting it into a framework in its current state is way more work than it needs to be? I figure it is not so much more work as it is impossible. Don't you normally have to change your code if you want to adopt a framework, especially if the code is not well designed? I would think it would be better to slowly integrate a framework than make a bunch of refactorings that will supposedly allow a framework to be used later. This way each refactoring would have a specific purpose and we can see the results as we go in the form of being able to more and more adopt a framework.
I decided to go with Symfony as it seems to be one of the most popular, liked, and recommended frameworks. The only other one that might have a higher level of popularity and people liking it is Laravel. But I'm afraid Laravel would be too all or nothing for us. I've also heard that while Laravel code has a certain elegance, readability, and writeability, they use too much magic as their technique for achieving that, and this makes your code harder to debug and understand on a deeper level. I used to love magical code, but the more experience I get the more it seems a desire to use magic to make code nicer to work with is a symptom of a deeper problem in the code that can be solved without magic. Symfony seems to be a good fit for existing applications as it is not only a framework, but a set of components that can be adopted and used individually. This makes me feel less locked in and seems like it will allow us to adopt it gradually and only to the extent it benefits us. However, we are actually not coming from an existing framework, or at least most of our code is not using one, so I'm not sure how helpful that link will prove to be. Anyway it is still good info and might end up being useful, thanks.
That's part of the problem. We don't have an existing framework or any consistent structure, or at least most of the code is not using one. I figure trying to adopt a framework is the best way to see what dependencies need to be broken, how to best achieve that, and to get immediate results out of the work. Anyway I am trying to use Symfony now as it seems we can adopt one component at a time instead of a big bang approach.
Please take a look at the ZeroMQ library. If it's good enough for CERN and the LHC then it's probably good enough for just about any PHP project out there. ZeroMQ is the answer, by Ian Barber: https://vimeo.com/20605470 The guide for PHP: http://zguide.zeromq.org/php:all On php.net: http://php.net/manual/en/book.zmq.php
I think your conflating "Java the programming language" with "Java the platform". You're referring to JMS, which is part of the Java Enterprise Edition, which in turn is a "platform" for developing applications using the Java programming language. I.e. a whole bunch of prefab stuff to make it easier (and more standardised) for large businesses (such as banks etc.) to build software systems. So, back to your question. You would probably be looking at some JEE equivalent in the PHP world which turns out to be Zend Server. http://www.zend.com/en/products/zend_server 
Lol
&gt; If you are maintaining PHP 4 in 2038 So Government departments then? Hell, some are still running XP, or older OS'es, so as already noted, it's not just a php problem, it's a 32-bit problem Also plenty of applications today are still being coded to 32-bit standards Like the Y2k bug, it's likely that this will be a non-issue to 99.99% of people, but it'll still be an issue somewhere
You can read through my own best practices deck at https://ocramius.github.io/extremely-defensive-php/
As a 32bit problem, it’s going to last a lot longer than you’d expect. There’s not a lot of 64bit going on in the embedded world at all. Most the computers you use aren’t a PC. 
How many systems still run on a 32 bit UNIX system?
[Silex](https://silex.sensiolabs.org/) is a nice way to get started with a minimal Symfony setup.
Zillions, probably. https://en.wikipedia.org/wiki/Year_2038_problem#Vulnerable_systems
**Year 2038 problem: Vulnerable systems** Embedded systems that use dates for either computation or diagnostic logging are most likely to be affected by the 2038 bug. Many transportation systems from flight to automobiles use embedded systems extensively. In automotive systems, this may include anti-lock braking system (ABS), electronic stability control (ESC/ESP), traction control (TCS) and automatic four-wheel drive; aircraft may use inertial guidance systems and GPS receivers. However this does not imply that all these systems will suffer from the bug. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
COBOL should actually be fine, as very few COBOL systems will have modernized to using unix timestamps. I mean, most of them only got 4 digit years 20 years go. Unix is still a few decades away.
+1. Off tangent, about a year ago he did an AMA. Its a very tragic story. Now whenever I am using 0mq, I am reminded of how random life is. https://www.reddit.com/r/IAmA/comments/4ipl7o/im_writer_and_free_software_author_pieter/ he passed away about a year ago.
Useless. My code is already incomprehensible when I write it. 
If you need Java, write Java. Trying to turn PHP into java isn't healthy for either ecosystem. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I find that "being a programmer" means much more than "writing code". Trying to find ways to be a more optimal programmer, is a good way to spend your time; in my opinion. So I respectfully disagree :)
"Easily ... do something ... in PHP" Follows the installation of a bloated library that will just call another binary, but in a more complex, slow and insecure way. Great.
Yeah I think h3h3 or Boogie on YouTube got owned this way recently. Or might be thinking of someone else?
I guess you got the question wrong. I am talking about a contract such as PSR7 not a concrete implementation. What if I working on a library or a framework and there is a problem that could be perfectly solved by MQ (split a data into chunks and process in parallel for example). I dont want to depend on a single broker or building bridges for every broker or MQ library out there. I just want to write my code which is rely on some interfaces and that's it. People can use it with any transport which supports the contact. 
I don't need Java, I am fine with PHP. I'd like a MQ standard, JMS is just an example (which is very good IMO). What is wrong with having such a standard in PHP? Why is it not healthy? Do you think having a hell of a lot of MQ libraries here and there is healthy for the community? 
Why do you focus on Java? I am asking about a MQ standard, Java is just an example. 
I would like to suggest an alternative: http://php.net/manual/en/book.ds.php
&gt; Off tangent, about a year ago he did an AMA. Its a very tragic story. Now whenever I am using 0mq, I am reminded of how random life is. Just checked out who this guy was. His [last tweet](https://twitter.com/hintjens/status/783254242052206592) really made me feel mortal. I hope that I am as peaceful as him in my last moments.
There is a data structures extension that also has a composer polyfill: [php-ds](http://php.net/manual/en/book.ds.php) 
I'm...not...crying...
Why doesn't flush work on CGI? It should work fine if you disable buffering and output compression. 
Completely +1. A MQ standard would be absolutely great in PHP. Yet, you cannot come to the PHP-FIG and say: "hey guys, I've this idea, would you work on it for me?" If you want to have it move forward, I'd start by finding "like minded" people who are looking for such a solution. Then, work on the interface and build adaptors to the existing implementations (like what the guys in HTTPlug did: https://github.com/php-http/httplug ). Go talk to the existing messaging implementations and try to board them in your project. When you have a working prototype, it will be easy to create a working group on the FIG and get that validated.
How would you do something like this: Browsershot::url('https://example.com') -&gt;windowSize(1920, 1080) -&gt;fit(Manipulations::FIT_CONTAIN, 200, 200) -&gt;save($pathToImage); I bet you'll find yourself writing a lot of code to make that happen. The package tries to help fellow developers saving some time by handling a lot of small gotcha's behind the screens. &gt; complex How so? &gt; slow How so? &gt; insecure How so? Complaining is easy, and it doesn't really help anyone. I would highly appreciate constructive criticism or PRs that make the code of it better, faster and more secure. 
Although I completely agree it's total click bait about a very old story its not so much a PHP problem but a 32bit problem 
How is this even a story? This bug has been known for as long as I can remember programming, nothing but click bait. Laravel had this problem when it was using the Carbon library for setting expiry dates on API access tokens only last year.
The server can buffer, which is why it usually doesn't seem to work as well. There's no way for the FastCGI process to tell the server "flush" AFAIK, it only flushes its own buffer, not the server's.
That's what I did! I [ported a JMS](https://github.com/php-enqueue/psr-queue), I built [some transports](https://github.com/php-enqueue/enqueue-dev/tree/master/docs/transport) on top of it to gain some experience and make sure it actually does the job. I tried to solve real life problems with this solution: [liip_imagine_bundle process images in background](http://symfony.com/doc/current/bundles/LiipImagineBundle/resolve-cache-images-in-background.html), [fos_elastica_bundle populate command optimizations](https://github.com/php-enqueue/enqueue-elastica-bundle), [Symfony async events](https://blog.forma-pro.com/symfony-async-eventdispatcher-d01055a255cf) and a lot more. I posted all these stuff on their mailing list proposing my help. I just need a sponsor so that I can start working on it. But it looks to me nobody give a hood. 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [php-enqueue/enqueue-dev/.../**transport** (master → 77124b6)](https://github.com/php-enqueue/enqueue-dev/tree/77124b666b9690c91cf106b5386aa10bc9ab702c/docs/transport) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djstiha.)^.
I'm guessing from your post you're using MySql as well so I would recommend High Performance MySQL link here: http://shop.oreilly.com/product/0636920022343.do I know it gets recommended a lot in this sub but its wholly justified. I got this book many years ago on the first edition and the majority of the content is still relevant today so you might want to look on Amazon or eBay for an earlier edition if you want something cheaper.
If the size of the body is negating the impact of preload via [Link: thing.css;rel="preload";as="style"](https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/), do you perhaps need to load in your body via fetch/ajax as well ?
the whole point of using vagrant is automatic provisioning (puppet, ansible, etc) ... you don't need vagrant for this kind of tutorial, using only virtualbox would've been fine. imagine everyone in your team going through all those steps for every project they work on ...
heatmapping what? php source code? -&gt; blackfire.io? :D
Exactly, [PuPHPet](https://puphpet.com/) is worth mentionning for those who want a simple GUI to configure their VM. 
He is truly inspiring and I wish I knew him before he passed away. He has such honour and respect for all human beings and had so much love to give. If everyone thought like he did, then the world would 100% be a better place.
&gt;&gt; insecure &gt; &gt; How so? https://www.reddit.com/r/PHP/comments/6kyr1k/easily_convert_webpages_to_images_using_php/djq5j7u/
The push works fine on Apache Handler so the problem resides with FastCGI and how it handles the buffer (I'm no expert, but that's what I came to understand) 
Will be taken care of soon: https://twitter.com/freekmurze/status/882542079016042496
Are you talking about something like hotjar?
&gt; I bet you'll find yourself writing a lot of code to make that happen. No. Implementation: function screenshot(string $url, string $destination, int $w = 1920, int $h = 1080, int $crop_w = 200, int $crop_h = 200): bool { $cmd = sprintf('cd /tmp &amp;&amp; chromium --window-size %d,%d --headless --screenshot %s &amp;&amp; mogrify -crop %dx%d screenshot.png &amp;&amp; mv screenshot.png %s', $w, $h, escapeshellarg($url), $crop_w, $crop_h, escapeshellarg($destination)); exec($cmd, $output, $return_code); return !$return_code; } Execution: screenshot('http://example.com/', __DIR__ . '/scr.png'); Zero PHP dependency. 200% more secure. Less memory used. Faster, easier to understand, debug and learn to use. This is just over-engineering things.
now I'm wondering if there's actually a difference between a h2 push and just a Link header...
Yes
Well the good side is you don't need to have a pre-installed ISO, you can instead just specify the OS in the Vagrantfile. Also you can write all of these steps in an inline shell script inside of the Vagrantfile, pass it around your team, and when they 'vagrant up', it will boot into a LAMP stack without the developers needing to install it on just a Virtualbox VM.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This ^ is all you need.
This is the perfect list and antiviruses NOT to use EVER!!!
Well, I assume mac and linux binaries would also be detected as malware, Since they are all the same source, just different build settings.
I'm not sure if there is a difference really but most importantly, one should be able to flush early in order to optimize the load time
Are they detecting all php versions or is this a specific version?
Are they detecting all php versions or is this a specific version?
I must say, that function is a nice solution. But the package can do quite a few things more. It can look where Chrome is installed. You function does not work out of the box on MacOS or another platform where `chromium` does not execute the right binary. There are lots of image operations possible, and there also are a few arguments that can be passed to chrome itself. I do acknowledge that if you don't need all these options and if you know what you're doing, a function like the one you wrote can be helpful. I find that if you need lots of options a single function can be a bit unwieldly.
Yeah of course it caters only for your case, that's because most people don't need hundreds of options. BTW, please please use escapeshellarg() on your arguments before running any command in your package, as you are just leaving a very open security flaw.
&gt; caters only for your case, that's because most people don't need hundreds of options. &gt; BTW, please please use escapeshellarg() on your arguments before running any command in your package, as you are Yup, there's already a PR in the works for that. 
Consider that most hospitals still used Windows XP (an OS no longer supported by Microsoft as of April 8, 2014). People will use outdated technology for a huge number of reasons, this example being the outright cost of upgrading the systems, equipment, and tooling for a new OS, even 3 years later. While there have been large pushes to move everything to 64-bit, many legacy systems are going to fall into this scenario, whether we want to believe it or not.
hmmm, His reddit account was still being used up until new years day, that was also the final release of ZMQ.
I only tested 5.6.30 32 bit that OP mentioned. You'll have to test any other versions on your own.
Because it's easier to shit on somthing than understand it or provide a defense of the opinion. Hue hue Java is shit lololol. Same crap with people who say php is garbage and then link a 10 year old post. Good unbiased CS advice is hard to come by. ZeroMQ is very good, I've never tried to get somthing baked into php though so I'm not sure what the blocker or argument Sharif this is.
I just did a quick test using the code from here https://stackoverflow.com/a/7975179/268074 I'm using PHP 7.1 on Windows with Apache and mod_cgi. Output was flushed every second as expected. I tested just via running curl on the CLI. &lt;?php header('Content-type: application/octet-stream'); // Turn off output buffering ini_set('output_buffering', 'off'); // Turn off PHP output compression ini_set('zlib.output_compression', false); // Implicitly flush the buffer(s) ini_set('implicit_flush', true); ob_implicit_flush(true); // Clear, and turn off output buffering while (ob_get_level() &gt; 0) { // Get the curent level $level = ob_get_level(); // End the buffering ob_end_clean(); // If the current level has not changed, abort if (ob_get_level() == $level) break; } // Disable apache output buffering/compression if (function_exists('apache_setenv')) { apache_setenv('no-gzip', '1'); apache_setenv('dont-vary', '1'); } // Count to 20, outputting each second for ($i = 0;$i &lt; 20; $i++) { echo $i.str_repeat(' ', 2048).PHP_EOL; flush(); sleep(1); }
I only just learned about array_reduce and now I use it everywhere!
A lot of the shell commands could be done in with Vagrantfile's `config.vm.provision "shell"`. Alternatively, you could probably just install [Laravel Homestead](https://app.vagrantup.com/laravel/boxes/homestead) and be done with it lol. Note that Laravel Homestead has nginx and not Apache.
Should we not be using `utf8mb4` now days, not `utf8`?
The idea is good but the implementation is terrible. Make the content consistent with the title (Five common mistakes: #1 Use PDO...) Make examples consistent with descriptions. Fix syntax error in PHP code And then you may try to get back.
Thank you for your comment, it's very helpful. I fixed all titles to match the article's spirit. Also, added / modified some of the code samples. Let me know if you found any syntax errors I didn't see and I'll make sure to get them fixed - I double checked them just now.
That's true, article was corrected. Thank you!
I've only used one in the past: https://www.crazyegg.com/ It did the job well enough for me to confirm my suspicions that users are only clicking on certain links. I *think* the only issue that I recall having is that I saw a lot of heat coming from places with no links, which I realized is because I had hover menus on the site that contained links. Those hover menus didn't show up in the screenshots they provided. I recently discovered https://www.dugwood.com/clickheat/index.html which I'd like to try since it's open source (https://github.com/dugwood/clickheat), but I haven't had a reason to install it yet.
Yeah I had a quick look over at crazyegg but it puts me off that they hide their pricing
https://www.crazyegg.com/pricing/
&gt; According to OWASP (Open Web Application Security Project), using **utf8mb4** will open you to various types of attacks (you can read more about encoding bypassing). Also, you should use **utf8mb4** regularly in both PHP and MySQL for better and more standard multilingual support. X is bad, also use X.
I suppose that "Do not assume ORM frameworks are not prone to SQL injection attacks" makes too bold a statement. . Besides, without a proof it makes it out of line with other issues. If you can provide an example of such a vulnerable "ORM query" whatever it is, it would make your article more credible.
Sorry about that, was just live editing as a result of PetahNZ's comment. fixed now.
So it's just a copy-paste from OWASP
Done, added an example from Doctrine's documentation that shows how running an SQL statement with Doctrine will be vulnerable, unless you use prepared statements.
The content is original. Some of it relies on OWASP, which is a very good source for security tips. For recommendations from OWASP, we added explanations and code examples wherever relevant.
All right then. Where can I read more about encoding bypassing? Or can you explain it here?
Some blog posts with exmaples for using encoding tricks to bypass security filters - http://www.paulosyibelo.com/2014/07/bypassing-htmlentities.html https://wiremask.eu/articles/xss-filter-evasion-cheat-sheet/
Yeah, I've thought several times about whether I want to use a function (in particular for arrays) that's part of a framework or to stick with handling things in a generic PHP fashion. Some of the frameworks come up with better solutions sooner, but then if you change frameworks for a living or want to move your work to another framework...
[Nice](http://i.imgur.com/hOGeYq2.png)
I'm not sure I follow. The page loads fine for me.
Uhhh, wut?
Unfortunately, both the array_filter + array_map functions have inconsistent syntax which leads to "weird" looking code. You're probably better off wrapping these methods inside a collection object: http://php.net/manual/en/function.array-map.php http://php.net/manual/en/function.array-filter.php
Well it is PHP what do you expect lol. I don't think that's an argument for not using them though. Do you not use implode/explode?
A large amount of people didn't think that was the point of the video at all. If nothing else the video was poorly done and his points poorly communicated.
But that's a major benefit of IDEs when using type hints, the IDE can make much more intelligent decisions and suggestions.
wait, these blog posts are related to HTML, not SQL
Looking at everyone else's 'lines on screen count'.. wtf is wrong with me. I have 125 lines visible on screen(PHPStorm in full screen mode)
It's a pretty 'loud' color. Especially going from [a dark theme on Reddit](http://i.imgur.com/IW3VClJ.png) to your site.
h3h3 got hit by that a while back, not sure about recently.
What would be a scenario where one recognizes a queue item to be out of order?
Your application is already a framework. It might not have a name like "laravel" or "symfony" or "yii", but it's still a framework with years of institutional knowledge built in. Chances are, your legacy application has: * not enough testing. * globals * random functions * no dependency injection * no separation of database code from the rest of the code. * no separation of transactional logic from the rest of the code. * no separation of business logic from the rest of the code. * no separation of presentation logic from the rest of the code * URL paths coupled to File paths. * Repeated logic * View pages tightly coupled with specific classes, functions, file paths, and/or server configurations. Any of those attributes are antithetical to someone else's framework. You will work as much to make "refactor to someone else's framework" as you will to "refactor to a modern application with the existing framework." There are two ways to fix it, either way: Shotgun changes throughout the code base and hopefully not bork it, or use Jones' guidance to make systemized changes a bit at a time and modernize that code base. Paul M. Jones states "If the application was already in a state where its logic could be ported to a framework, there would be little need to port it in the first place." (sic) Modernize your legacy application, don't rewrite. If you really want to rewrite it, ask Netscape what happened when they decided to rewrite Navigator. Ask TextMate what happened when they decided to rewrite Textmate 2. Once you have modernized your application, you might be able to separate your existing framework and use it in another project. Don't rewrite and lose your institutional knowledge; refactor and make it better. Just like testing helps you determine when you're done writing, the process in the book helps you determine when you're done modernizing. 
The sample code for *Do not assume prepared statements are always safe in PHP* does not include the **LIMIT** issue written about in the text.
I'm confused, why does ordering even matters on a first-in-first-out queue? 
The joke was funny. Not thigh-trashing funny, but it gets by. I fail to see the fun in the code example, though. It's just an example of a flawed implementation. Not only should the constructor be utilized, as pointed out in the gist (https://gist.github.com/rob-murray/5454707). This will also open a new connection every time it is called, which - in turn - may bring the code execution (and if improperly configured, the database) to a grinding halt when the connection limit is reached. Also kids: Use factories.
Or more exact, if stuff can be out of order, it isn't a FIFO queue. 
thank you for the share, I wonder why they hide the prices from its potential customers, doesn't really make sense.
I'm confused by the throwing of the RuntimeException from the code coverage package. That seems confusing for a consumer and an unnessesary additional dependency
&gt; ZeroMQ is the answer This is just socket library, some devs really needs message brokers like rabbitmq or NSQ Here is useful link with comparison of different MQ and job servers: http://queues.io/
Well, first of all I must admit that it's a subjective matter and everyone can have a different view. But at least I may explain, why *personally* I find it funny. This is not just a flawed implementation but the implementation that is *exactly opposite* to what was intended, an incongruent one. According to the [alleged nature of humor](https://www.theguardian.com/uk/2002/oct/03/3), "we find jokes funny for lots of different reasons. They sometimes make us feel superior to others, reduce the emotional impact of anxiety-provoking situations or surprise us because of some kind of incongruity." - and the Failed singleton affair bears at least two of them. It's much a relief to hear that you liked the Genie joke. I've heard it only in Russian but was unable to find the native English variant, so I had to translate it myself, but I am not fully satisfied with the result.
If the queue is popping things in a different order than they were placed in the queue, then it's a bug in the library, not a case when an exception would be thrown. If the usage of the library put things in the queue in the "wrong" order, and is then checking if they were popped out in the "expected" order, rather than the order they were added, then the full exception responsibility should be on the user of the library. Especially for cases like multiple consumers on queues like AWS SQS, AMQP, or Beanstalk, it's not really a reasonable use case for the library to be concerned about, IMO.
It's very considerate of you to be so responsive to community input!
how could messages end up out of order on a FIFO queue? if pushing and popping to the queue are not locking atomic operations then it's not really a FIFO queue. regardless, putting a message back if it has an error in processing it is also a violation of FIFO behavior. as a user I would expect a message that throws an error to throw the error and then vanish. it's up to the user whether or not the message should be requeued. 
I understand what you are saying a lot better now, thanks! Your comments are insightful and helpful. There are many aspects of what you said that mostly seem non-controversial yet still insightful. There is a more controversial / important underpinning I seem to be picking up as well. Perhaps it can be summed up something like this: Using an existing framework tends to be a good starting point when starting a new project from scratch, but it tends to be a bad idea for legacy applications. Legacy applications already have too many caveats both for how things should and are being done that is too different from how frameworks want you to do things. It is more practical to slowly refactor the code to be a combination of good enough and use a framework designed to fit how the application is already designed than to completely redesign the code to fit a completely generic framework. Not only is that less work, but it also allows insights already built into the code about how to achieve our applications needs to be kept. Refactoring those parts of the code to fit an existing framework could prove to be impossible and still keep the performance and reliability needs. That being said, if there are parts of our code that are not very specific to our needs, it might be good to replace them with generic components if we don't like the solution we came up with.
It's interesting that Silex is described as a micro framework built on top of the Symfony components and that one of the lead developers is the person who created Symfony. This makes me wonder, if a project were to use Symfony, at what point is it being used as a framework as opposed to just using Symfony components?
interesting idea to take it to them. on my servers I just monitor the logs for lets say 10 http-requests resulting in a 404 and then blacklist via iptables for 24 hours. this blacklist can be large at some days but I've never noticed significant slowdowns for regular users 
Looks great, thanks!
So, you want to introduce an easy way to denial of service your website when these robots are all suddenly using all your available bandwidth to download a huge zip file?
the file is zipped and represent a fraction (in bytes) of the actual file.
Ok I see now. But what is making these "robots" unzip the file?
i don't know. this part is vague... Maybe the bot will try to unzip file or maybe the attacker will check his bot log, see zipped file(s), scan them and try to unzip one ?
https://en.wikipedia.org/wiki/HTTP_compression It's a part of the HTTP protocol, so most browsers and tools like curl would be susceptible.
Thats old man :)
It knows the response's content type is gzip, which is normal, so it decompresses to get the response.
so.. it's just a wrapper for calling external programs? why? `exec` disabled?
The logo screams "Angular!"
Funny idea, but for every one of these attempts sending a 10MB file seems like a bad idea in actual use. Seems like bandwidth charges and your server resources would rise very quickly.
Thanks for the sample. I'll give it a spin and see how it goes 
good to know. thanks!
right but you can play around with double gzip compression which will reduce it even more. It's more of a proof of concept
Awesome! My production implementation of the bomb also looks at 404's and 403's per IP and if there are too many of those it will send the bomb.
The thing is that the bots are looking for specific responses so when they send a request to a URL they look at what the server is sending back. If the answer is gzipped, they'll have to unzip it in order to check the contents, which will blow their memory
Seems like a good way to piss somebody off and paint a target on your back.
this would at least kick your own server if you are under a DoS or DDoS attack. but for regular dumbos scanning the net this should not add much unnecessary load.
I'm very tempted to try this too. on a side note - I always thought that a "zip bomb" is an archive which contains itsself so the resulting data is not just BIG but infinite. 
That's cool. But what web based typos are script kiddies using now? Mostly everything I know is CLI.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
There are a lot of jobs that want a CS degree or equivalent, but often with job postings they ask for more than they'll actually require. In my experience from being on both sides of the hiring process, if you are the least bit competent and not a disaster as an interviewee, getting the interview is the toughest part. It is VERY hard to find developers who are remotely competent. Don't let stories of select giant corporations like Google giving ridiculous interview questions scare you off. 
the scripts still use web requests and would access the bomb. This is the whole point
You can simply go `$optimizer-&gt;optimize($filename)` and it'll do the Right Thing. You don't really have to have to care about the filetype and the best parameters. I could see how that might be useful :)
In your opinion, would you say i'm competent enough to get a job? I know its hard to know without knowing more but from what i have said. Your opinion would help me.
Then you'll get trained even better. Nobody said you should be doing this on a server with your crown jewels hosted on it.
Yeah, I'd rather not piss off some Asperger's script kiddie with a botnet. Maybe they can't do much damage, but I'd rather null-route the traffic and have them move on.
Sorry, I should have given more context. The package works with AWS SQS and SQS currently does not support FIFO across all regions. So I am trying to do FIFO from the package itself. And the only way I can think of is to let users determine if the message is out of order.
Sorry, I should have given more context. The package works with AWS SQS and SQS currently does not support FIFO across all regions. So I am trying to do FIFO from the package itself. And the only way I can think of is to let users determine if the message is out of order.
Hmm, can you explain more? Why can not a Runtime Exception be thrown ?
Sorry, I should have given more context. The package works with AWS SQS and SQS currently does not support FIFO across all regions. This package is not the message queue itself. It works with SQS only. So I am trying to do FIFO from the package itself. And the only way I can think of is to let users determine if the message is out of order.
Sorry, I should have given more context. The package works with AWS SQS and SQS currently does not support FIFO across all regions. So I am trying to do FIFO from the package itself. And the only way I can think of is to let users determine if the message is out of order.
I'd love to read it, but the left side of the text is covered by the social buttons. 
@OP, is your website really running PHP v5.4.44?
Getting a degree or certificate will show any future employers that you can finish something, which will lead to better gigs, better paychecks, better food, better vacations, and better housing. Note that I'm telling this to 20-years-ago me, you may choose to listen in and learn from my bad choices. 
Since you seem to know more than 1 programming language (C++, python and PHP), you're leagues ahead of the "competition". Focus on improving and learning more. A good step up would be to learn about design patterns and when to apply them, and why we use them. There are plenty of videos out there from renowned speakers and/or software developers that are worth your time because they focus on how to "think" like a software developer. Try some code kata's, do some TDD, learn a bit about domain modelling, and try a few frameworks (Symfony, Laravel, Zend are popular as "full stack" frameworks, and there are a bunch of "micro" frameworks like Slim, Silex and Zend Expressive). There is plenty to learn, and potentials hirers won't expect you to know it all, but having a base understanding about most of it, will exponentially increase your chances of getting a job.
How well does this do against command line utilities? 
I followed your link to OWASP to find what they say about utf8mb4. I see : &gt; Use UTF-8 as your database and application charset unless you have a mandatory requirement to use another encoding. Looks like OWASP is recommending UTF8. Am I missing something?
I guess there can be a spectrum between fully adopting Symfony and using various components. You can do the same with Laravel, I've used some `Illuminate/*` packages without using the whole Laravel framework. By installing the full framework and following the default practices of using all the tools it provides you'd be using the whole thing, but you can swap out most components for other libraries at the cost of doing extra work wiring everything together.
I suppose. The article references what this does to various browsers though. 
Love that the mysqli exception does not follow the camel case convention, why? I mean just deprecate it and add the camel case name... It's literally the only "exception", please PHP get your naming conventions straight.
The fact that you're personally invested, willing to learn, and are trying to improve yourself it very much sounds like you are. No matter what you're experience there's always a tonne more to learn, so you'll never be at a point where you're "done" and completely ready. A good junior dev is a combination of having a simple base foundation of understanding how development works, and an ability to listen and learn on the fly. But to add onto my original comment, getting the interview should be the most challenging part. Without the experience or education, it's possible you'll be looked over quite a bit, so there may be a lot of playing the numbers required, though this will vary by location and random luck. Don't let that be an indication of whether or not you're capable of handling the job, it can just be tough getting that first foot in the door.
Nice
I'm glad this response made more sense. I was on mobile for the first one, and until there is a brain bluetooth module it will be a pain to type (what feels like) full novels on mobile. Yes. Don't lose what you already have, make it better. And test it. I'm not sure what's controversial about that. It also forces you to look at *all* the code, including that kludge you wrote to add functionality for that one time the boss said "I want to be able to do $SQLQuery-&gt;addRunTimeSearchParameters-&gt;ExportToXLSFile()" and he never used it, but it's still in your code base, making your eyes bleed when you look at it because one Monday morning he decided that he wants it yesterday morning, and you haven't seen it since you closed the editor. Your existing framework probably isn't the problem, the way everything is connected to everything else without testing is the problem. Using the steps in the book in the order presented, all code gets better. Duplicate code is removed. (More) code is tested. Dependencies are Injected. Go step by step, one issue/chapter at a time, and your code should still correctly function while it's modernizing. At the end of the book, Paul M. Jones brings up the issue of porting to the hottest, sexiest framework and gives no preference as to whether it is good or not. &gt; I will only point out that, in the course of modernizing our legacy application, we have essentially built our own custom-tailored framework. We have done so with what is probably a more disciplined and rigorous approach than most public frameworks in PHP land. While we gain the community that goes along with a public framework, we also gain the baggage of the framework developers themselves." I originally thought to rewrite my application. Didn't work, wasted time. I thought "How about if I take $framework and rewrite my app to fit inside". Didn't work, wasted time, but I did get a handle on $framework. I have now spent less time and more actual "work" to get to where my app now is, and I am only just started the process of Chapter 8. I can see where the app will go, and I have hope again. I highly recommend http://mlaphp.com/ 
What do you mean by "10 http-requests"? Request to the disallow section in your robots.txt or a trap url?
I think he meant "if 10 consecutive http requests from the same IP result in a 404".
Maybe make the code executable on the client side? Maybe a JavaScript file that loops endlessly spawning processes or something. 
why need it? php cUrls only support upload a file from disk.but,sometimes,we need upload a file from memory(eg: http proxy etc). 
its can be parse php post format request body. `a[b][c]=1&amp;a[b][c]=1&amp;a[b][d]=1&amp;f=1&amp;g[h][i]=1&amp;g[h][i][t]=1` can be parse to `map[string]interface{}`,like $_POST.
It's not that a Runtime Exception couldn't/shouldn't be thrown. It's that a Runtime Exception from a completely separate package (a test coverage reporting package at that) shouldn't be thrown. Catching that exception in consuming code would be confusing. If you're going to throw a RuntimeException, namespace your own (my choice) or throw the generic one. 
I think a good way to test yourself is to head over to stackoverflow.com, select the php tag and see how many questions you can answer. freecodecamp is also a good resource and allows you to build a resume while working on nonprofit stuff.
&gt; production implementation Have you thought through the legal ramifications of that?
Oh I see, thanks for clarifying it.
thats not even a serious question.
The only general-purpose distinction that matters here is between Error and Exception. Everything else was thrown in because Java has a similar hierarchy so we had to blindly imitate without understanding. Of course, also the specific exceptions thrown by PDO etc. are interesting, but you don't need to see where in the hierarchy they are, you only need to notice that as you use extension XYZ it throws a XYZException.
PHP has many more classes that are lower case. Just give up on consistency in PHP and you'll feel better. You can keep consistency in your own projects, instead.
Hey OP, won't readfile on a big zip file hog system resources?
pretty cool idea, so could you take the 42.zip file and just use that instead? 
Probably shouldn't use `rand()` here. Use `random_int()` instead.
In mysql utf8 is not actually utf-8, it's only a subset. utf8mb4 offers complete utf-8 support.
Creative, maybe a bit fun, but hopefully no one mistakes this for proper security on a critical system.
You're not sending a big file, you're sending a tiny one that says "Decompress me to ten billion zeroes" or the like. 
Perhaps you're thinking of a fork bomb. 
You don't need so many rules in iptables, and indeed dynamically modifying iptables might cause other administrative problems. Use [ipset](http://ipset.netfilter.org/) instead, which is a fixed-memory solution: ipset -N badurl hash:ip forceadd iptables -A INPUT -m set --set badurl src -j DROP Then allow `httpd ALL=(ALL) NOPASSWD:/sbin/ipset -A badurl` so that your scripts can go: system("sudo /sbin/ipset -A badurl $ip"); 
It's a very abstractly technically nice idea. 1. It's probably illegal 2. If you were going to do it; is using PHP and wasting cycles on `readfile`, parsing etc the most intelligent way forward? * Think about where in the stack such a thing should live (system or appliance level) * Think does it need heavy processing at all, or could a webserver rule, or appliance fit better, be faster? * Are there alternatives such as rules to block SQL containing requests? (there are) * Can you just block specific national IP's or specific IP's? (you can). It also saps 10MB of bandwidth from your site on the off-chance they'll open the file, or be using chrome, ie or a number of other quoted clients. They probably won't if they have the slightest idea what they are doing. IMO this type of thing lives better in a honeypot as a flat-file called `132-passwords.tar.bz2` or similar.
If they even ask for the body, then maybe. Most automated attacks I'm seeing are multi-stage, the vast majority are either timthumb attempted attacks or SQL injection attacks so they can login legitimately. Oh and SSH attempts... Millions of SSH attempts.
Those systems will have to take the hit and move to something a little less lightweight than an integer wrapper then...
can someone please explain me this condition ? Why is he testing for theese? `if (strpos($agent, 'nikto') !== false || strpos($agent, 'sqlmap') !== false || startswith($url,'wp-') || startswith($url,'wordpress') || startswith($url,'wp/')) `
I noticed in the section of the README about logging, that it says to use setLogger(). From what I can tell, it is uses useLogger().
alternative point to this. Why would it be anything else? I Checked it out hoping it would be a wrapper, because not using an existing process and wrapping it is the maddest thing to do in this situation.
Yes I can imagine that. I'll look into it!
If it works for you, that's fine!
Probably not. You just put up a fake PHP version and then people will focus their attacks on something that won't work.
I think it said they don't understand zip but do understand gzip. So it wouldn't, it would just download a file I think. This works because gzip is how webpages are normally compressed so the browser just opens a 10GB webpage and runs out of memory in the process.
Agreed. I actually got hired where I am now without any formal experience. I'm an open source developer with 10 years of Self-taught experience. I knew C#, VB6, and Vb. Net fluently, while having a decent grasp of F#, Python and Java. I barely knew PHP, let alone HTML. I got interviewed for my current experience mainly because of my understanding and they had me make a project for the interview, which I completed more effeciently than the other applicants. They knew I had some web development experience but were satisfied I could catch myself up to be worth hiring. 
Something I didn't see in your post is a mention of git, or other version control. If you already know how to use git, great! If not, stop everything and make it your highest priority. Programmers who can't use version control are unemployable. Or at least, not employable at any place you would want to work. In terms of skills, you're off to a good start. Bear in mind that you will never know everything. In this industry, there's always going to be some tech that comes out of left field and embarrasses you with how little you know about it. As you go on, you'll get better at picking the probable winners. In any case, it's usually better to focus on concepts and paradigms than the particular implementation. For example, consider functional programming on it's own merits, rather than the merits of Haskell. Because it's impossible to know everything, you're going to not know the answer in interviews sometimes. Just be honest about it. As an interviewer, I'd much rather hear a honest admittance of ignorance, than have to listen to someone's cringe inducing half assed answer where they try to bluff their way through. Sometimes, you can outline what you do know, while still being honest with your lack of knowledge on the specific area. For example, if you were asked about Zend, but hadn't worked with it you could offer up: "I haven't worked with Zend, but I have worked with Symfony, which is another MVC PHP framework. I understand that Zend is more explicit about it's configuration, where as Symfony is convention over configuration." This is an absolutely fine answer! It tells me what you do and don't know. I'm not going to ask you horrible questions about Zend, but we can talk about MVC in more general terms. If you don't get a job, it's totally reasonable to ask what you could have improved on. You won't always get a useful answer here, but often just showing that you have a willingness to learn and improve could mean that you might get a phone call a month later. Finally, don't neglect the importance of communication, both written and verbal. We work in teams, and communicate with clients on a regular basis. Learn to write and speak well, and you'll find doors open up for you.
on a trial of fullstory.com right now through affiliate link fullstory.com/boag I released a [wordpress.org plugin](https://wordpress.org/plugins/cd2-fullstory-integration/) for it, as I found it interesting. they do heat-maps, visitor recording &amp; playback and a pretty powerful user segmentation and filter area (with built-in hiding of password and cc fields). TBH I'm not going to sign up as it's 500/pcm and one thing I never thought about was what happens in nations with specific policies on what you can monitor, what you can keep and transmit, and where to etc...
Looking if certain strings appear in the URL or the user agent string. Strpos returns false if not found so if it has a position then it is found and should be blocked.
sorry I wasn't clear, I understand what it does, I don't understand why it does this. Why does it search for 'nikto' or 'sqlmap' . Or, why does he search for the url to begin with wp-, wordpress or wp/ . Is nikto or sqlmap just present in the user agent string of these scanners? Why would the url's that will be protected begin with wp- or wp/ ? shouldn't this stop accessing wp-admin ? Or wouldn't all people which would access url's containing wp/, wp- or wordpress be bombed ? 
the example is from a non-wordpress site so there is no legitimate reason to access any wordpress subfolders and if someone accesses them it's obviousls a scanner
* [What Chronicle is](https://paragonie.com/blog/2017/07/chronicle-will-make-you-question-need-for-blockchain-technology) * [Previous discussion](https://www.reddit.com/r/PHP/comments/6jw9oz/introducing_chronicle_an_auditable_immutable/) Cross-signing and replication are already implemented. I'm looking for peoples' thoughts on ways to make the replication more useful.
basic MVC, OOP, a little bit of design patterns, maybe able to write a recursive function is al you need for a junior position..no one expects a junior to have real experience..they expect to have a little experience and a little more formal knowledge..what is important is willingness to learn and improve..so most of the time we look more for personal qualities as skills..because you will need to educate a junior..and hopefully he will stay with you long enough to get your investments back..so don't worry based on your description you are good to go :)
I don't care for the request itself, I just count how much are resulting in error 404 (webserver access.log column 5) and sum this up over IP (column 1) and time. 10 x 404 in under a minute is hardly a regular user -&gt; ban 
So make sure every fifth request goes to the main domain, got it.
I din't realise this was your point..so using an ORM in a not ORM way or in a way it is not meant to be used is vulnerable..makes sense :)
obvious unless you have a "wordpress" sub-folder :))) .. I get it now...thanks
Nikto is a forced-browsing utility. It essentially bruteforces a huge number of common directory names to try mapping your web application. SQLMap is a SQL Injection scanner. It tries to automatically identify injection vulnerabilities. Both, by default, show their name in their useragent.
I saw this claim earlier too. What would be illegal about it?
OP is deliberately serving a malicious payload, which in the UK comes at the least under computer misuse act. In-fact in most European nations, I'm pretty sure posting instructions is illegal too. It's not that I agree with those laws btw, I'm just keen to avoid taking up too much of my life being dragged through courts. as usual IANAL, check with a lawyer http://www.legislation.gov.uk/ukpga/1990/18/section/3 Also TBF while it's unlikely an attacker would be interested in seeking legal redress; if they are using others computers (and they likely are) to launch an attack, then you are slowing down a third-party computer. The reason a honeypot is better for this is that the attacker is likely going to retrieve the files via tunnel (not direct to a remote PC). Damage to a remote PC puts the attacker in legal danger, they are much more comfortable hitting out at you through an intermediary than directly, but if you damage the remote PC both you and the attacker have hurt the innocent but stupid third party. (It is most likely to be a theoretical risk, but why take the risk?)
I see.. Well, this would protect against an amateur hacker. It's hard to believe that someone who knows what he's doing will keep the user agent string in a hack tool.
I also called what /u/Egging_McNut was describing a zip bomb. If you do a google search for zip bomb recursive you will see many others also calling it that. The fork bomb if I remember correctly is for when you don't have sufficient privileges for anything real, but still want to cause the system to grind to a halt. Mostly used on shared hosting providers back in the day. 
That makes sense, thanks.
Uh, if you are running exploit scanners a target may already be on your back. 
or your menu is crap ;D
You're right, i've corrected in the readme. Thanks for letting me know. If you spot another error, feel free to PR a fix.
what you mean with safe?
Interesting
That's not how JS works... Unless they tool is running under node and they Are being stupid enough to eval the payload
Good old security through obscurity. Very effective.
Not really, he could have setup state of the art security, and then some, just icing on the cake. So script kiddies trying out their shiny new toys would be eliminated at the first layer itself.
But *hackers* most probably are not running their tools via a browser.
Just to be sure, since I'm doing calculations with BCMath, should I also have all argument/return type declarations for numbers be string instead of float and cast MySQL DECIMAL columns to string and not float in my ORM? Basically never use float anywhere? It just feels a little *stringly typed*.
Hmm, at my work we have a few devs who went to university and they would disagree with you. 2 of them came here as an intern while doing a 4 years university course. They never went to finish the course and instead are now fully employed here.
Im not sure i agree. I understand someone is doing something illegal in the first place. I have no idea if serving a zipbomb is considered illegal or not, but if bank tellers were to shoot bankrobbers im sure there would be some legal issues as well. (But let me also note i think OPs idea is hillarious and well thought, just playing the devils advocate)
Does yii not have a sum method? and I assume you may need to execute() the query after you define the query. `AnnouncedPuResults::model()-&gt;sum('party_score')-&gt;where('polling_unit_uniqueid', $cal2)` does that not work? Im not a yii dev so I do not know how their ORM works.
I wouldn't do it, you are breaking the contract defined in the interface. The interface specifies that the method can return mixed, and anything using that interface has to assume that is what is being returned. To give an example with code, if you are working with the interface then you cannot assume that the return value will be a string as you don't know what the implementation of the interface is doing. I can call the following method with a StringToBoolTransformer, and the method should still work (this is also why we don't type-hint the method param in the implementation either). function doSomething(DataTransformerInterface $t) { return $t-&gt;transform($this-&gt;property) } If you do know what the implementation is, then you can call specific methods that have return type definitions. function doSomething(IntToStringTransformer $t): string { return $t-&gt;toString($this-&gt;property) } class IntToStringTransformer implements DataTransformerInterface { public function transform($value) { return "$value"; } public function toString($value): string { return $this-&gt;transform($value); } } You need to think about what the code is doing. What value does putting a type-hint on the implementations return type bring? What value does the interface add and it is really needed? Would you be better off with more specific interfaces, such as a DataToStringTransformerInterface rather than one that may be too wide-reaching to be useful.
Good point. Haven't even thought about that. True, when getting the interface and calling methods of the interface I have no idea of the return type anyway. 
Look into Sphinx a document based database or something similar that will process this generally better than anything MySQL can provide. Sphinx does delta updates really nicely and it has a pretty good PHP api. I basically I would from a job deltas during the day then perhaps nightly run a full index update. Also don't store large XML in your dB, store a location to the file and then use that (you may already be doing this)
&gt; in aprox. 30 years &gt; Saving this for later when people ask how nobody saw it coming in time. . Think about it... do the math again...
Please don't post your blog continually.
&gt; PHP is the winner vs All Languages to end the Why PHP debate. Learining or study a new language is always give advantage &amp; to have PHP in your toolbox it will always serve you a better advantage. And to add to it as I say always Wait, what did I just read?
Definitely yes.
its my opinion dear.....
why? this is not good? 
&gt; Loosely Typed This is actually a major drawback when you start working on actual real-world enterprise applications. The introduction of scalar type declarations and return type declarations in PHP 7.0.0 was a major step forward.
To those interested I managed to fix my issue by doing the following: 1. Fixed an issue I found in the schema which allowed me to define a unique constraint based on definition and value. 2. Used Query#setLockMode with PESSIMISTIC_WRITE in doctrine when searching for existing values. This helped to avoid getting UniqueConstraintViolationException in concurrent requests due to my change to the schema. Now it all works fine with no duplicates. Thanks for the responses.
Indeed.
hmmm.... i will improve my post next time
Complete support that is a requirement when... ?
Has anyone really been far even as decided to use even go want to do look more like? At least, that's my take on it.
In a blatant appeal to authority here, the Liskov Substitution Principle says that the above example is fine. You can make the return types more specific. Any function that calls transform that can handle mixed, which means it therefore can therefore handle a string. Note that the reverse rule applies (although last I checked PHP didn't handle it properly) for parameters. If an interface defines a given type as a method parameter, an implementing or extending class must make that parameter type definition the same or more generic.
Have you considered Dockerizing it?
Yes i am storing the xml in the filesystem i currently am running it locally for testing purposes, i am interested in this "Sphinx" ultimately my web application will be on AWS i store information about the company feed in the database the way i have set it up you can get the url for the xml dynamically so the location isn't required. with sphinx how is the xml file stored i assume its stored on the database?
I'm sure your English is far better than any foreign language I happen to know but what you wrote comes across as absolute nonsense (aka word salad). If you want to post these sorts of things in English then you really need to team up with someone who has far better control of the English language. 
:(.... i am trying to improve day by day..... :( 
&gt; The interface specifies that the method can return mixed, and anything using that interface has to assume that is what is being returned. Since string is just a special case of mixed, anything using that interface should be just fine if they always get a string back instead of a more general mixed value. This is a type-theoretical principle called *covariance*: you are allowed to tighten the types of outputs when creating a subtype. PHP only allows this in the special case where the parent type (class or interface) does not have a typehint, and the subtype adds a return type hint. I blogged about this principle a while ago: https://www.moxio.com/blog/17/on-type-safety-without-generics-and-the-role-of-package-design
Incorrect. Curl supports upload without a file.
Yes, for parameters it is clear, I mean, PhpStorm even throws an error, I just thought, since there's no error for interface return type declarations it's a decision everyone has to make for it self and wanted opinions. Thanks for your answer. 
For some reason I read this as "Easily optimize PHP using images", and I was so excited. But this is also pretty good.
So, did you solve the "annoying sessions" issue with ADR? 
Haven't jumped on the Docker bandwagon yet. Should really take the time to learn it
I'm stuck using PHP on a CentOS 6 box running PHP 5.3.something. Of course it's the RedHat package that has security vulnerability patches back-ported to the old version for long-term stability. But it's a bit of a PITA sometimes....
Gotcha! You are right. I should throw a package specific exception
I don't buy that argument, that why I specifically aimed my question at the OP. If he or anyone else was looking to entice attacks by spoofing software metadata, they would be more effective by adding "Powered by WordPress" or Made with Joomla" 
An empty file of 1MB, 10MB, 1GB, 10GB, 10000PB is not a malicious payload...OVH are making some too : http://proof.ovh.net/files/ If your computer can't handle it....not the OP problem If it's illegal in UK to host an empty file there is about 194 other countries where you can host it 
The interface clearly says `@return mixed`? Fix the interface or use PhpDoc and do `@return string` on your side. This change doesn't break the contract but does bring in type hinting for PhpStorm, Netbeans, ...
 interface Loose { public function doThingLoosely($input); } class Strictly implements Loose { public function doThingStringly($input) : string { return $this-&gt;doThingLoosely($input); } public function doThingIntly($input) : int { return $this-&gt;doThingLoosely($input); } }
First, from https://www.reddit.com/r/PHP/wiki/index : "Please do not frequently submit links to your own content, exclusively. It's likely to get spam-filtered." Second, although it's nice you're blogging about PHP, your content isn't really going to be that interesting to PHP devs.
This isn't quite the case in PHP &lt;7.2 the extending type must have the *same* parameter type hint as the parent. It can't take a wider type In 7.2 the extending type can *remove* a parameter type hint, implicitly widening the accepted type to mixed
I love your license, it's a very good idea!