The real answer is "I wouldn't. I let my payment systems get outsourced to Amazon and PayPal, who are much more competant than I am, and who have much better insurance." The technical answer is "that data should not have been on a server connected to the internet; everything that could be should have been hashed and stretched; everything that couldn't be should instead be GOST and whirlpooled and twofished; developers should never have had access to customer data; url hacking is a 101 topic; customer data should have been nested encrypted over the wire; et cetera."
awesome! what advantages do you have built into over say cushy or pagelime?
&gt; Have better passwords Password quality was not part of this. &gt; We know Sony is horrible with this already. How? &gt; Password protect your PCs because hacking is much easier when you don't have to use the internet. Also has nothing to do with this situation. &gt; Encrypt hard drives (or user folders) to prevent access to the data if the computer's stolen. Would not have helped in any way. &gt; Use a firewall, antivirus, and/or network attack reporting. Fail, fail, fail. You don't even know how this was done, do you? You're just reciting platitudes. &gt; Don't store entire credit card numbers in one database online. Store the first 4 and last 4, but keep the rest elsewhere. This is ridiculous. The only way this would make any difference was if they were two different kinds of database, and you were trying to protect against vendor software defects. Since no vendor defect had any involvement here, this is a complete sideline. In other news, this increases the maintenance workload, and if they *are* two different kinds of database, you've also increased your vulnerability to day-0 attacks. If they could connect to one database by sniffing, by definition they would be able to connect to both. Not only is this mindless and wrong, it actually makes security substantially worse. &gt; Use irreversible encryption Do you mean one-way hashing? There is, by definition, no such thing as irreversible encryption. &gt; Any other user information is lower priority than SSN and CC #. No, it isn't. All user information is maximum priority. Not only is this not actually a thing to be done, but it's the exact reverse of the correct mindset: trying to pick and choose what to protect, instead of protecting everything. This is an example of the same mistake Sony made. &gt; Use strong passwords for database connections. Would not have helped. &gt; Use SSL encryption for payment processing and user information updates. Would not have helped. This is a good idea, but not for the reason you seem to believe. Cracking into an SSL connection after the fact doesn't take long. The purpose of an SSL connection is to keep people out long enough that the nonce tied to the authentication credential expires. Since this was a sniffed authentication attack, all you accomplish by pushing this into SSL is to slow down the initial penetration by ten to fifteen minutes. &gt; Connect to FTP using SFTP or SSH. Would have had no effect on this situation whatsoever. &gt; Besides a username or a person's real name (maybe email address), user information should be read under a secure connection. Uh, no. All information should be not only on a secure connection, but encrypted and transferred as secondary residue. Why you're trying to explicitly not-protect sensitive data is beyond me. &gt; (SHA256 with salting for instance) SHA is not encryption; it's hashing. SHA256 is not a good choice. &gt; If you are displaying someone's address or phone numbers Oh look, you want to protect the data that's a matter of public record, but you want to not protect the data that can be used for identity theft. How wonderful that you seem to think you're in a position to give security advice. &gt; then it's best to use a secure tunnel. There is no such thing as a tunnel which keeps attackers out. All they do is buy you time to expire the last legitimate connection, which would have no impact on this attack. You have said nothing which would have prevented this attack, and you have failed to address any of Sony's serious security problems. Gong.
&gt;If you’ve been coding in PHP for a while, you may be familiar with the foreach loop. Oh God I hope you are. Sarcasm aside, good article. When I was starting PHP, I created my own DB iterator using counts and multiple arrays... was hideous. Then I realized PHP offers object iterators.
It's nice you made such a long counter argument to my helpful suggestion which was made with the best of intentions, but your comment offers no helpful points to the discussion. In no place did I ever say that I was 100% accurate. I agree that some words are generalized, such as "Irreversible Encryption" (we all know that given an infinite amount of time, any computer can break a hash). That doesn't mean you should nitpick every sentence. If you want to be helpful to the OP then post some helpful advice. If you want to be a dick then choose someone who will give a shit.
&gt; my helpful suggestion which was made with the best of intentions Your suggestion isn't helpful because it's wrong, and makes things worse. In security, that's a problem. &gt; but your comment offers no helpful points to the discussion. Incorrect. &gt; If you want to be helpful to the OP then post some helpful advice. I advised him about the problems with your advice. That's helpful, even if you're too busy being angry to understand that. &gt; If you want to be a dick then choose someone who will give a shit. You know, when someone points out a bunch of things I'm wrong about, I thank them. Maybe, if you learned how to do that, you wouldn't be stuck being this wrong in public when giving advice about security. C'est la vie. 
On its own for now at least its much more basic, but the main advantage is it's all on your own server and easy to customize. The photogallery and product catalog are the next tools to come, then some other additions i have in mind 
Hi there, I have a question, in the root index.php, there is this function, it has comments but I still don't get what it does as you've only commented to explain what PHP's built in functions do, rather than the function you've written. function nakid_get($tool,$options){ //Make option string $option_strings = array(); foreach($options as $ok =&gt; $ov){ $option_strings[] = $ok."-".$ov; } $option_string = implode("_",$option_strings); // $url = NAKID_URL."index.php/connector/".$tool."/".$option_string; $content = ""; //Get content if (function_exists('curl_init')) { //USE CURL FOR GETTING DATA $curl_handle=curl_init(); curl_setopt($curl_handle,CURLOPT_URL,$url); curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2); curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1); $content = curl_exec($curl_handle); curl_close($curl_handle); } else { //USE file_get_contents FOR GETTING DATA $content = file_get_contents($url); } echo($content); } You could consider taking out commented code, most of your 'Connector' controller constructor is commented out and the none of the code that isn't commented out actually does anything except parent::_construct() public function __construct(){ parent::__construct(); global $data, $system, $user, $options; $options = array(); //print_r($options); //disable once done dev //$this-&gt;output-&gt;enable_profiler(TRUE); $data = array(); /* $data['page'] = "home"; $data['notes'] = array(); $finalpage = false; //CHECK CONFIG.PHP SETUP check_config_settings(); //Verify config.php setup //CHECK INSTALLATION check_installation(true); //Verify Nakid CMS is installed //GET SYSTEM INFO $system = get_settings();//Get array of system settings */ } 
Thanks for the heads up. Some of the code there is placeholder I do need to clean up a lot of the unused code.
Upvote for "get nakid"
awesome, let's over complicate shit when we can just use a foreach loop.
Yes "cockwagger7"
Id link to my blog if it wasnt down at the moment, but i use this for various purposes, should work fine for you #!/usr/bin/php -q &lt;?php // read from stdin $fd = fopen("php://stdin", "r"); $email = ""; while (!feof($fd)) { $email .= fread($fd, 1024); } fclose($fd); // handle email $lines = explode("\n", $email); // empty vars $from = ""; $subject = ""; $headers = ""; $message = ""; $splittingheaders = true; for ($i=0; $i &lt; count($lines); $i++) { if ($splittingheaders) { // this is a header $headers .= $lines[$i]."\n"; // look out for special headers if (preg_match("/^Subject: (.*)/", $lines[$i], $matches)) { $subject = $matches[1]; } if (preg_match("/^From: (.*)/", $lines[$i], $matches)) { $from = $matches[1]; } } else { // not a header, but message body $message .= $lines[$i]."\n"; } if (trim($lines[$i])=="") { // empty line, header section has ended $splittingheaders = false; } } // You can stop here and do what you want //This is where i send a message back to the sender. $to = $from; $subject = ""; $body = "$message"; $headers = "From: FROMADDRESS\r\n"; $headers .= "Reply-To: REPLYTOADDRESS\r\n"; $headers .= "Return-Path: RETURNPATHADDRESS\r\n"; mail($to, $subject, $body, $headers); ?&gt;
http://www.phpshare.org/articles/Piping-Incoming-Mail-with-PHP
1) Setup a catchall email account, and have it setup to pipe emails to your script 2) Use stdin to read the message contents 3) Use [Mail_mimeDecode](http://pear.php.net/package/Mail_mimeDecode/redirected) to parse the content 4) Do the rest of the straight forward email forwarding logic I currently use the above method on my web site for a custom message system. 
So, he replaced a foreach with a foreach...? This article does a terrible job at selling people on using iterators.
Most of my TDD experience is with rails, but the concepts are the same. Tools are different obviously. With PHP you'll probably be using PHPUnit which supports everything you'll need to do. In rails I tend to do it using Cucumber and RSpec, but you can do the same things with PHPUnit (Cucumber just has a nicer syntax as you write your full stack tests in plain english, which I find helpful to start with because I can work from putting words to the problem to help frame the code). Anyway... There are two big paradigms out there now, TDD and BDD. Test driven development essentially works with unit tests to first spec out what something should do, then you write code to make the test pass. BDD is similar, only focuses on user behavior rather than unit tests. Note that BDD is TDD, just kind of a different approach to it. As a simple example, with a TDD approach you may first write a test for a Post object for your blog that verifies it only saves when a title is given. You'd run it and it would fail, probably complaining that the Post object does't exist. So you'd create a Post object, and run the test again. It would fail, probably complaining that there is no posts table. So you'd create a posts table. You'd keep going until it saves. Then, perhaps you'd write a controller test that makes sure the blog/index action returns 1 or more blog posts. Then perhaps a view test to make sure the view displays 1 or more blog posts. BDD focuses on testing the whole stack by testing for what a user should see, instead of what individual units of the application can do. If you were doing a blog application with a BDD approach, you would first write a test that describes what should happen. As a no code example your test would look something like: Given a non logged in user And a blog post named "First post" When I go to the blog page Then I should see "First post" This is actually what the test would look like using Cucumber (or Cuke4PHP), but could also be implemented in ruby/rspec or php/phpunit as code. But the idea here is that you describe what your application should do. So you'd implement this test, and run it, and it would fail on the first line, saying that it couldn't find a user class (or that it doesn't know what logged in user means if you're using cucumber). So you'd add helper code to handle the statement and create a user object. Etc etc. With BDD, the focus is on the big picture, and tests are generally run using a simulated web browser (or optionally, a real web browser). You're actually testing the full html output of the application, including click through's, form submits, etc, essentially testing from the user perspective rather than focusing on individual unit tests. That said, even if you do BDD there is still a place for unit tests. Typically what is done is that you implement your BDD test, it fails, so you implement some unit tests to support the bdd tests, which fail, then you implement code to make the unit tests pass which then makes the bdd tests pass. Sounds complex I know. But there are many many different ways to handle this. For me personally, I start with a BDD scenario like the one above and make it pass. I personally feel that writing unit tests for stock behavior is a waste of time, so in the above example I don't bother writing a unit tests for my post model since the framework I'm using already tests model saving and the cucumber test covers my implementation of that model. I save the unit tests for things where I'm doing custom logic. I try to avoid duplication between the integration tests and the unit tests. As an example, if my model does some stuff on insert like automatically creating some related objects or setting defaults, I'll throw a unit test in for that. But if it's just stock framework functionality and does nothing special, I won't bother and just stick with the integration test to make sure what you get is what you want. I may be rambling a bit now, but TDD/BDD is a big topic. If you want to check it out a bit more, here's a good article on setting up Cuke4PHP: http://lucato.it/php-bdd-cucumber-cuke4php If that doesn't appeal to you, then I would suggest checking out PHPUnit's built in BDD support. Really depends on what floats your boat, they both do the same thing. Technically the idea behind Cucumber is so that non developers who make product specs can write/understand the tests. However, I find it quite helpful to start by typing it out in plain english as it helps me to wrap my head around what I'm currently working on before diving into code. Some people don't see the need for another layer of abstraction, however, so if you fall into that camp, PHPUnit's BDD is just fine too. And if you feel BDD is too much at this point, there's nothing wrong with starting out with plain old unit tests either. Also, though it's rails and not PHP, I think the railscast overview on cucumber would be useful. It does a good job of explaining the process of BDD, even though the tools and language are different: http://railscasts.com/episodes/155-beginning-with-cucumber And here's a screencast covering a good bit of TDD with PHPUnit: http://dev.davidstockton.com/phpunit_and_tdd/ 
technically, thats not a question ;)
for PHP TDD see [Behat.org](http://behat.org/). This [video](http://symfony.com/video/Paris2011/576) may also help
Unless you have a very large amount of data to process, it would be easier to use the [DOM](http://no.php.net/dom)-extension or [SimpleXML](http://no.php.net/simplexml) for handling XML. Having said that, the example is missing a 'global' to make the variabel reference a global variable instead of a local one. I usually suggest using $GLOBALS['varname'] to access global variables instead of global $varname, so that each reference indicate that you're actually referencing a global variable. In the example this would be: function textfunction($parser, $text) { if ($GLOBALS['last_tag_read'] == 'UNIPROT_ABSTRACT') { $GLOBALS['uniprot'] .= $text; } } The 'last_tag_read' variable will have to be set in your opentag-function (and now we're seeing that we're getting quite a bit of global state here, which is why we'd be better off by encapsulating this in a better way (either in an object or in wrapper functions that can keep an internal state for each "parser").
You should probably add: static $uniprot, $last_tag_read; To that function in the example. Otherwise you are overwriting the variable each time. Alternately use a global variable, in which case you will need: global $uniprot, $last_tag_read; Also I like http://www.php.net/manual/ru/function.xml-set-character-data-handler.php#85415 much better as a way of handling this. The one you linked to would not work right if you had the same tag twice in a row (it would look like a split string).
Since the article was a little unclear, imagine we have these two classes, one of which uses IteratorAggregate: // classes with multiple properties class People { var $people = array(); var $database; var $stats; public function addPerson( $person ) { $this-&gt;people[] = $person; } } class PeopleIterable extends People implements IteratorAggregate { public function getIterator() { return new ArrayIterator( $this-&gt;people ); } } When you foreach over an instance of People, you get the properties of that instance, namely $people, $database, and $stats. When you foreach a PeopleIterable instance, you are foreaching over elements in the $people array. Iterators let you customize how you loop over your objects.
I looked into this a while back for a personal project of mine but one reason I didn't use it was because it didn't accept a file path as a form of input. I often get images and PDFs around 5-10MB and I wasn't sure if I wanted to have that all in PHP memory. Do you know if it handles that well?
Depending on what MTA you're using you can probably just set up a virtual alias configuration that will pull from your database rather than running through a script specifically.
Sorry, my system doesn't have to handle attachments so I'm not sure how well it can handle them. 
No worries, just curious!
It's not php, but the best tutorial type example of TDD that I can think of off the top of my head is the [Rails Tutorial.](http://ruby.railstutorial.org/ruby-on-rails-tutorial-book)
I cant find it right off hand, but ive done this using my script below. When you look at an actual email with an attachment, or multiple ones, its consistent in how its structured making it easy to read file type and grab the base64 if i remember correctly, and save it. Ill hunt it down and post it for reference if i can find it
I would suggest that your approach is pedantic, nitpicky, and smacks of arrogance. You are only being slightly more correct than the poster, BuckWheat. It's not that you are wrong... it's your approach. Everyone in life is at a different level in everything. I doubt that you are an excellent sky-diver, for example. Also, BuckWheat probably generalized to make his post more readable and approachable. When you make something precise, you also make it difficult for beginners to understand. Given that the OP asked a very general question, it's likely that he's a beginner and needs help getting started. Buckwheat took the exact right approach by providing general and very good advice for getting started. This is a pedagogical approach and keeps the reader interested. The best way to keep people from learning is to demand too much from them immediately.
http://net.tutsplus.com/tutorials/javascript-ajax/start-using-html5-websockets-today http://davidwalsh.name/websocket
&gt; I would suggest that your approach is pedantic, nitpicky, and smacks of arrogance. That's nice. That's also appropriate when you're dealing with security. &gt; Everyone in life is at a different level in everything. Yes, and those who are that far down shouldn't be giving advice in correctness-critical areas like security, medicine, the law, et cetera. Maybe you're comfortable with people handing out garbage security advice. I'm not. The downvote button is explicitly for people who are not adding to the conversation. Rediquette is clear: it is not for people you disagree with, or people you are angry at. &gt; Given that the OP asked a very general question, it's likely that he's a beginner and needs help getting started. And that's why it's absolutely critical that he not follow the garbage advice he was given: it was non-germane, will weaken his system, and he is not yet ready to crap-filter. &gt; Buckwheat took the exact right approach by providing general and very good advice for getting started. And here's evidence: you're another clueless amateur who also thinks that was good advice. Try to focus: it's not that the advice was too general and off topic, though that's true. *It's* *that* *the* *advice* *creates* *an* *insecure* *system*. And here you are lauding it for its quality. This is why people like me need to stand up and say "well, no." And this is why amateurs need to stay out of security advice - and also meta-commentary on bad advice being shot down. People like you are why Redditors can no longer trust the advice they get on reddit: you just whine and downvote when appropriate criticism is levied. &gt; The best way to keep people from learning is to demand too much from them immediately. Demanding that someone does not give bad advice is simply not too much.
Socketio
Im struggling to find the site its hosted on but there is one where a guy writes all kinds of ridiculous things in PHP that one wouldn't normally think to write in PHP. He wrote an SSH client in PHP at one point even. [This guy](http://blog.magicaltux.net/2010/06/27/php-can-do-anything-what-about-some-ssh/) has a SSH daemon and DNS Server written in PHP that might be a place to look although they are likely a bit more complex then "code examples" 
It's amazing how closely this resembles a hand-rolled project I did for a client and then put into Kohana. Nice work thusfar!
Thanks! That's pretty much how this started, one by one my clients needed a simple CMS and I couldn't find anything that wasn't very complicated
I'm using socket.io with node on a variety of projects and it is an absolute breeze. Highly highly recommend.
Will be adding the description below to the next version I upload, in the mean time hope this helps: --- The nakid_get function is called from the user's website, looking something like this: nakid_get("content",array('block'=&gt;2)); The function passes the "tool" being used (content, gallery, catalog, form...) as well as parameters about the tool such as the id of the entry being pulled or optional settings given by the user The function will use CURL or file_get_contents to call this page from the "connector" controller and output the page's contents
Unfortunately WebSockets are disabled in default configuration cause of [security issues](http://hacks.mozilla.org/2010/12/websockets-disabled-in-firefox-4/) :/
Only in FF/Opera - socketio falls back to flash sockets then longpolling then standard ajax all behind the scenes - I've had no x-browser issues. The supposed "vulnerability" is really an issue with proxy servers, why Mozilla has decided its their problem is beyond me.
socketome
That sounds like a good way to go. Do you have any links on how to accomplish it? By the way, thank you Redditors for lending your immense brain power to my little problem. :)
PHP is optimized to run quickly, to not care about leaking. PHP is a templating language. A web server (mod_php, php-fpm, …) spawns a PHP process and hopes it to finish as soon as possible (otherwise it'll kill it, remember the 30sec default time limit?). PHP doesn't fall into the languages that can do stuff like websocket paradigm. It wasn't meant for that and shouldn't be tweaked to it imho. All the cool websocket stuffs using Python (gevent, spawning, twisted, …), Ruby (eventmachine), Node.js, Java (Jetty), Erlang, … rely on specific language / library (libev, libevent, …) features to achieve this. You can do it, but I'd advise you not to because you'll end up using `sleep()` or `sleep()`-like methods which is the wrong solution of async stuff.
Give [this](http://articles.slicehost.com/2008/9/2/mail-server-configuring-postfix-to-use-mysql-part-1) a look over. Depending on your setup (I'm assuming you're using postfix), it should be pretty straightforward. Good luck!
This option looks viable using the Pear mimeDecode module, but I'm not exactly sure how to implement it, the article is a little short on actual usable code: http://www.theukwebdesigncompany.com/articles/pear-mimedecode-module.php Any ideas?
And this one uses Zend, but it appears to be way over my head: http://www.programmingfacts.com/pop3imap-email-attachment-read/
Don't let your reddit experience be ruined by StoneCypher. He's a trollish cunt who enjoys being a dick to others. Quite possible because he doesn't have a life. 
^ This.
No worries. I don't get bothered by people online because it's easy to close the window, go outside, and have fun in the real world. I've been on Reddit too long to let asshats bother me. Edit: Oh, you're pointing out a troll. Nicely done.
It's what I do!! :D
This is excellent advice. Four or five years ago, a friend and I tried setting up a PHP script that would run as a web socket server, using Flash for communication on the front-end. It worked, but it was a huge pain to write and ended up being very buggy (memory leaks were especially problematic). There are a lot of tools that can allow you to utilize websockets very easily, but despite its versatility, PHP is not one of them.
Ok sounds good. If there is no valid /client-abc/ in the URL do you look for a /default/ directory in the URL or just assume if it isn't there that they're on the default site? So they request: mydomain.com/user/user-control.php I'd serve up the default site because they haven't requested their own. But if they requested: mydomain.com/client-abc/user/user-control.php Then I'd serve up their theme/design if they have one.
My problem with using virtual hosts is you have to restart apache to get them to be recognised. True/false?
yes, where are you hosting your site? 100dls per subdomain? you can get unlimited in almost every webhost for free, also root acces or tools forsetting up subdomains really easy cpanel, etc...
Not being well designed for a purpose is never a good reason not to do something unless that code is meant to go live and be used in a production environment. In any other situation, pushing the limits is what we're all here for.
Minesweeper, why not... Create table `tblmine_sweeper` with columns `gameID AS INT AUTOINCREMENT PRIMARY KEY` and `mine_coords AS MULTIPOINT`. To start a new game, run this query... insert into tblmine_sweeper (mine_coords) values ( MultiPoint( point(FLOOR(RAND() * 10), FLOOR(RAND() * 10)), point(FLOOR(RAND() * 10), FLOOR(RAND() * 10)), point(FLOOR(RAND() * 10), FLOOR(RAND() * 10)), point(FLOOR(RAND() * 10), FLOOR(RAND() * 10)), point(FLOOR(RAND() * 10), FLOOR(RAND() * 10)), point(FLOOR(RAND() * 10), FLOOR(RAND() * 10)), point(FLOOR(RAND() * 10), FLOOR(RAND() * 10)), point(FLOOR(RAND() * 10), FLOOR(RAND() * 10)), point(FLOOR(RAND() * 10), FLOOR(RAND() * 10)), point(FLOOR(RAND() * 10), FLOOR(RAND() * 10)) ) ); To play, run this query until you die, changing `$g` to equal the ID of your current game, `$x` and `$y` to coordinates you want to guess at... `SELECT IF(INSTR(AsText(mine_coords), '$x $y') &gt; 0, 'yes', 'no') AS dead from tblmine_sweeper WHERE (gameID = $g);` Ok, maybe not exactly how minesweeper is played. Maybe more of an excruciatingly long game of Russian roulette. But I'm sure you can change it up as needed, and perhaps save guessed coordinates, etc, etc. The other problem is a random coordinate could be by some very small chance a duplicate, thus reducing the number of actual mines to less than 10.
Output `$sql` and test it against the database. See what happens.
Alright i ran the sql query in phpadmin with the name and hashed pass and it returns 1 row. however echoing the the result of navlogin from the script shows 0. Weird part is it also has the same parameters i used to test the query in the database. Also tried commenting out the mysqlinject() and similar results still appeared. Still stumped.
Is `$conn` a valid resource inside navlogin? Are you declaring `$conn` as a global? I wonder if PHP is using some default MySQL connection which may not have the right privileges in MySQL. Could you paste the sample code into pastebin or make it available somewhere?
checklogin function or mysqlinject , the small part of your script currently shown does not seem to contain any errors after a quick view, apart from a few improvements that could be made on it. Consider using === operator for strict equality. Also for basic data validation Ctype functions can be handy, though in all fairness these are maybe used in you clean_string functions. Debug your functions, intuition tells me your problem is in there. 
It's really aimed at beginners / intermediates. If you know what a bitmask is already then you're probably not the target audience - but you are still one kind of person I would like to get feedback from. Did I make any mistakes? Say anything confusing? I'd like to know :-) **EDIT** Also: if there's anything else you would like me to write about, please let me know. It could be something you wish beginner PHP devs knew about, or something you want to know about.
No offence but it's shit like this that creates people who write shitty PHP code. People need to have at least a basic understanding of how a CPU works and what logic gates are without any relation to a specific programming language. Also, if you're going to show examples don't just show flags but IP addresses and subnet masks as well. And it's definitely NOT(!) like magic AT ALL. Aunt Tillie likes to think there's magic going on in the computer, but those who program it should know better. EDIT: KEEP 'EM COMING
&gt; No offence but it's shit like this that creates people who write shitty PHP code That has to be one of the greatest uses of "No offence", ever :-D &gt; People need to have at least a basic understanding of how a CPU works and what logic gates are without any relation to a specific programming language I agree that a generic understanding is useful, but a programming language is just an abstraction for such things. Where do you stop? Should people also have to understand how to dope the silicon to make the transistors that make up the gates and the CPU? You've got to pick a starting point, and this is the one I picked. It's something that beginner PHP developers have probably seen but don't understand; I'm just trying to put them on the right track to understanding what they're doing. &gt; Also, if you're going to show examples don't just show flags but IP addresses and subnet masks as well. I can kind of see where your coming from, but I don't really see how I would fit them in with the rest of my article (if you could call it an article). I wrote about using bitmasks for specifying options/flags; I don't think subnetting is closely related enough to be worth mentioning. &gt; And it's definitely NOT(!) like magic AT ALL. Aunt Tillie likes to think there's magic going on in the computer, but those who program it should know better. I did say *almost* like magic; \*sigh\*. I'll take that bit out, I guess.
At the end you might want to mention XOR; E_ALL ^ E_NOTICE ...as an alternative to E_ALL &amp; ~E_NOTICE ...as the formed is used in the error_reporting() functions documentation.
Good point! I'll add that a little later on. Thank you, kind sir. **EDIT**: done. I'm not sure I've been very clear though; I might rephrase a few things at some point.
TIL about Google WebFonts, thanks!
&gt;I agree that a generic understanding is useful, but a programming language is just an abstraction for such things. Even if that would be all there is to a programming language, this is why fundamental concepts like boolean algebra need to be taken out of the context of anything else. Draw your own connections to applied fields. &gt;Should people also have to understand how to dope the silicon to make the transistors that make up the gates and the CPU? Herp de derp, the hardware fabrication process is several parsecs out of scope but a programmer wouldn't be a programmer if he doesn't show even a fraction of interest towards semiconductors. &gt;I wrote about using bitmasks for specifying options/flags Well it became an article about bitwise operations, but of course the usefulness of them in manipulating flags should be obvious given this concept (and constants). Perhaps the article has the wrong outset. &gt;I don't think subnetting is closely related If the focus of the article was just applying flag constants, yes. Perhaps I'm old fashioned but taking an example of an applied science and narrowing down the fundamentals towards that example is the wrong approach IMHO. Better read about binary, hexadecimal notation (nowhere mentioned in your article), boolean algebra (truth tables, learn them!) and two's complement first. These are applicable to *way* more concepts then bit fields.
No problemo :-) It's not quite what I was hoping people would get out of it; but at least you learnt something!
Agreed, Photon seems to be this kind of effort (pushing the limits): http://photon-project.com/
It's worth noting that PHP does indeed support libevent with the PECL libevent library: http://pecl.php.net/libevent And here's a list of the libevent functions: http://php.net/manual/en/ref.libevent.php
Your parseUrl() method should return the default Id if it doesn't find a client code in the url. When I implemented this, it was with subdomains and domains eg client.site.com and www.client.com. My parseUrl() method basically just looked at $_SERVER['SERVER_NAME'] . If you're working with a parameter after the domain, it should still be pretty straight-forward. One more thing, all of your db tables should have a client_id field to separate everything.
you're right about exiting after header(), but your reason is inaccurate. The code would continue to execute, which might explain OP's error. As far as viewing anything remotely, that would depend on whether ssl/https is enabled, and the question has nothing to do with proxies or networking. _All sites_ are vulnerable to man-in-the-middle if there's no encryption/ssl.
The content is good, but please cut the article into ten pieces, each with prominent ads to the east (3x) and south (2x) of the content. Sincerely, Tom and Anand 
This is a simple issue that should be able to be debugged quickly. Your header() calls could be the problem. Try implementing a baseUrl variable, and use that to help create urls for redirects and links. Also, you should have exit() after header() to block your script from executing more code. eg ` $baseUrl = BASE_URL; // constant $route = 'page/home'; $redirect = $baseUrl . $route; .... header("Location: {$redirect}"); exit(); ` Couple of more hints: I would disable your mysqlinject until you get it working, and output/double-check the sql by running it on the db.
Nice article, i'd love to see some examples on there of real-world uses of bitmasks. IP addresses are a good one, if I see someone else explode() an IP address i'm going to cry :(
I was on a TDD project using Kohana and PHPUnit. The process went like this: ` 1. write code 2. write unit tests for code 3. run unit tests via phpunit 4. repeat steps 2-3 until the code coverage is 100% , using phpunit's code coverage tools ` With a little practice, you will be able to identify code paths quicker and write unit tests quicker. I wrote tests for controller actions as well as model methods. You generally want to test a method by itself. This is known as isolation. To do this, you mock what all methods return, except for the method being tested. This is known as dependency injection, and generally involves using a container class. PHPUnit uses php's built-in Reflection class directly, so you can use both PHPUnit classes and Reflection classes when mocking. 
Yes, but I was assuming that the OP's code was meant for production, as was mine. Trying to get a PHP script to run a socket server was a fun, interesting challenge, but I sure as hell wish node.js had been around back then. It would've saved me a lot of time and frustration. That said, it's still fun to see all the crazy things PHP can do that you'd never think it could.
Looks good - makes sense. You should link to the article using a comment on the PHP manual somewhere e.g. from error_reporting()
I think you did a fantastic job. I wish there was such a concise way explaining bitmasks in PHP to a newbie when I was learning it. I'm glad you included examples of where you can use them.
Crickey. That means somebody could write a pure PHP web server… Challenge accepted :-D
I'd omit the error_reporting constants xor example. Someone might get the impression that andnot and xor are interchangeable for unsetting bits. Use a semantic example of xor or a practical usage example like xor swap algo.
Yes what I did was have it in a separate file so i can change it later, because Im using a set up locally hosted on my comp. $servername='127.0.0.1'; $username='root'; $pass = ''; $conn = mysql_connect($servername,$username, '')or die(mysql_error()); thats the info. 
The problem seems to be with the navlogin function. I tried running the other code separately. What I found was navlogin retunrs 0 as the number of rows, even though a similar query on the database returns 1 row. No clue why. 
I added that after sending header info, though it did not solve the problem, but its good to have anyway. 
Ill be using that code snippet but about your latter comments, I already attempted those and the db returns what I want but not the function. 
The biggest, most glaring omission that I noticed was you never actually explained what the bitwise operations *do* in plain English. Examples are great and all, but saying something like "the product of a bitwise OR is a bitset where a bit is set when the corresponding bit is set in either coefficient or in both coefficients" goes a long way towards usefulness. Also, this is false: &gt;It's just a regular boolean OR operation that you use all the time, performed on each bit of the numbers in turn. I guess you could show it like this: It's incorrect in a statically typed language, it's even more incorrect in a dynamically typed language like PHP.
Hmm; you have a point. I've tried to make it clear that the truth table for each operation is different, and that it can be used "in many situations" rather than all. I'll have a think about how to re-word things etc. Thank you :-) **EDIT**: I added a bit more clarification to the end; hopefully that's a little better for now. I will think harder.
Haha; that put a smile on my face, thank you :-)
Thank you for your comments. &gt; Examples are great and all, but saying something like "the product of a bitwise OR is a bitset where a bit is set when the corresponding bit is set in either coefficient or in both coefficients" goes a long way towards usefulness. I'll try to come up with something along those lines; I think it may introduce a few too many new words in one sentence for a beginner PHP dev though - maybe for a CS undergrad textbook it would be ok, but I'm trying to keep my tone informal and friendly where possible. &gt; It's incorrect in a statically typed language, it's even more incorrect in a dynamically typed language like PHP. I'm not quite sure understand why what I said is completely false; I know it's not *actually* doing a boolean AND on each bit; maybe I need to re-word it to make sure it's clear that I mean "it is as though it's performing a boolean OR on each bit in turn". Would that work? Or have I missed something much more elementary? Was my pseudo-ish code example just plain wrong? Bare in mind that I was trying to demonstrate the result of what happens, not what actually happens behind the scenes. Also: why is it *more* incorrect in a dynamically typed language? **EDIT**: I changed the wording around that bit; does that work better?
https://gist.github.com/949850 - a non concurrent one (one request at the time) - and a concurrent one (~3 requests at the time) 
What is it you would like to see done with IP addresses that you have seen done badly / with explode? :-)
Thank you very much, kind sir :-)
It's more incorrect in a dynamically typed language because something like ("foo" || 0) will equate to true and people who are beginners in PHP will expect that same sort of behavior from a bitwise OR operator. Your wording, specifically the phrase "on each bit in turn", is also deceptive in that it implies bitwise operations are a iterative process and they're not at all - they're single CPU instructions as long as the bit set fits in a register. I'd axe that phrase entirely because I wouldn't at all be surprised if someone who was completely unfamiliar with bitwise operations leaped to that conclusion and I think the atomicity and performance of bitwise operations is one of the reasons why they're useful for things that could otherwise be done without them. Some definitions that I think are beginner friendly (if they don't know what any of the words mean, they shouldn't be programming because they haven't taken an elementary algebra course): For all of these definitions, we're going to define bit set as some arbitrary length number of binary bits. Set in this context means a value of 1, as opposed to 0. **OR**: The product of an OR operation on two bitsets is a bitset where a bit is set if it's set in either (or both) argument. **AND**: The product of an AND operation on two bitsets is a bitset where a bit is set if it's set in both arguments. **XOR**: The product of an XOR operation on two bitsets is a bitset where a bit is set if it's set ONLY in one argument. **NOT**: The product of a NOT operation on *single* bitset is a bitset where every bit has been flipped, e.g. ~0110 is 1001. And I think you should look into bit shifting for another article because there's a lot of things you'll have to cover, like PHP not allowing unsigned variables and endianness. 
I understand the need to separate yourself from the crowd but I, for one, like the simplicity and ambiguity of "Web Developer" I've recently gone back to using simply Web Developer rather than a Web Application Developer or Web Engineer or whatever other fancy title. The way I see it is that my title should reflect not just what I do but the industry I work in and the industry I work in is changing every year. I was a Web Developer before there was CSS and XHTML. I was a Web Developer before XML-RPC and SOAP or RESTful API's or Twitter or Facebook or jQuery. I like the idea that my very vague title is not a mistake. It's a hello. Whatever conversation comes after that defines my capabilities and interest but only the context of the here and now because as my title suggests next year will be different. ... or we could just go back to calling ourselves Web Masters!
PHP is no longer just a templating language. While it started out as one, it has matured into a full scripting language. Personally having a PHP socket server being used in production to handle 15k+ connections a second (and has been running for 7 months solid now), I can be pretty safe to say that it is a valid way to go about things if you wish. It just takes more of an application/system developers mindset than the traditional web based script mindset to keep the memory issues and efficiency at bay. As for a PHP websocket solution, one method can be found here: http://webreflection.blogspot.com/2010_06_01_archive.html#9026939161516824255 However, for a pre-built and tested option, I would recommend the socket.io way that someone linked to in this thread, albeit non-PHP.
That works. Nice article.
does IP A.B.C.D lie inside network E.F.G.H/I is probably a very good practical example. Bonus points if you make it work in IPv6 and IPv4 in the same code!
Stop using `$_REQUEST`, it is a security threat as it is combining `$_POST`, `$_GET` and `$_COOKIE`. it should be something like this: if ( isset ($_POST['password'] ) &amp;&amp; isset( $_POST['user'] ) ) { $db = new PDO('whatever::where_ever:') $query = "SELECT userID, firstName FROM users WHERE userName = :user AND password = SHA1(:password)"; $stmt = $db-&gt;prepare($query); $stmt-&gt;bindValue( ':user', $_POST['user'], PDO::PARAM_STR ); $stmt-&gt;bindValue( ':password', $_POST['password'], PDO::PARAM_STR ); if ( $stmt-&gt;execute() ) { list($uid, $name) = $stmt-&gt;fetch(PDO::FETCH_ASSOC); // blah } //blah blah blah } 
Why is it dangerous to use $_REQUEST?
&gt; Stop using $_REQUEST, it is a security threat as it is combining $_POST, $_GET and $_COOKIE. It's not more of a security threat than $_POST is. It can give you unexpected information and make it easier for attackers to submit data. But it is by no means any more secure to use $_POST rather than $_REQUEST. You still need to cover the exact same security practices. If you want to argue for $_POST over $_REQUEST then please use clarity and clearly knowing where information is coming from. Security is just plain wrong.
Try $stmt = $db-&gt;stmt_init(); $stmt-&gt;prepare($query); Back in the day, I had a similar problem and did the above to resolve it.
It's not dangerous. It simply allows your code to be error prone. $_COOKIE['someuser'] = 'aname'; $_POST['someuser'] = 6; Which one would you expect in $_REQUEST? ('expect' being the key word) What happens when it's not what you expect? 
For people who say that $_REQUEST is not a security threat: + http://devlog.info/2010/02/04/why-php-request-array-is-dangerous/ + http://thephpcode.blogspot.com/2008/09/request-security-problem.html
I don't see what points the second article is making, but I'll answer the first: if you have an XSS vulnerability that would allow attackers to inject cookies on your site, the fact that they can inject cookies on your site is probably the least of your problems. Edit: I have to admit that it does make me rethink the idea, because the point *is* valid. But it just pains me to impose the choice of post or get in the code. The concept makes no sense to me (and incidentally encourages beginning developers to think of the contents $_POST as something completely safe and controlled because it's not as easy to manipulate as parameters in a URL). Edit 2: I was checking PHP configuration since I remembered something about being able to configure the order in which variables are overwritten, and lo and behold: &gt; Note that the default distribution php.ini files does not contain the 'C' for cookies [in 'request_order'], due to security concerns. That's indeed the case on all of my servers. Case closed, as far as I'm concerned.
This should be on top.
I love the style of the blog, and your style of writing in general. What syntax highlighter are you using? It seems to do a very good job of highlighting (I write a lot of PHP on my blog, but also a lot of Scheme and C/C++). I'm using Geshi on my blog right but am really wanting to give that whole system an overhaul (and move to markdown in the process).
Perhaps you didn't use `SHA1()` on the password value when you originally created that particular user record? Try running an `UPDATE` query on that particular user record to reset the password to `SHA1('newpassword')`. Then test the login function again. Just be sure to change the test user record's password or delete that record altogether when finished testing. Also, make sure `autoincrement` is on for the `userID` field.
Or worse: some configurations include $_SERVER in $_REQUEST (iirc) and a user could replace the contents by sending some $_GET or $_POST data with the same name.
&gt; Stop using $_REQUEST, it is a security threat From [the manual entry on `$_REQUEST`](http://php.net/manual/en/reserved.variables.request.php): &gt; Description &gt; An associative array that by default contains the contents of $_GET, $_POST and $_COOKIE. From [the manual entry on `request_order`](http://www.php.net/manual/en/ini.core.php#ini.request-order), which pertains to PHP 5.3+: &gt; Registration is done from left to right, newer values override older values. &gt; If this directive is not set, variables_order is used for $_REQUEST contents. &gt; Note that the default distribution php.ini files does not contain the 'C' for cookies, due to security concerns. I agree `$_REQUEST` seems a bit prone to problems, but perhaps things have changed since those times. In other words, times change, and technology and standards along with it. Can you be more specific how this security threat is still relevant to 5.3+ for users intentionally using it as proscribed by the manual?
That was my first thought. I just finished my user registration page, and it's inputting data to the DB correctly (I made extra sure). Even users I add with the registration page aren't able to log in. It's the damndest thing. Even when I query the db in phpMyAdmin it reuses to return a record if I include the password file.
Are you sure? According to the manual, only get, post, and cookie arrays are merged in there. Edit: the default ini file says... ; This directive determines which super global arrays are registered when PHP ; starts up. If the register_globals directive is enabled, it also determines ; what order variables are populated into the global space. G,P,C,E &amp; S are ; abbreviations for the following respective super globals: GET, POST, COOKIE, ; ENV and SERVER. There is a performance penalty paid for the registration of ; these arrays and because ENV is not as commonly used as the others, ENV is ; is not recommended on productions servers. You can still get access to ; the environment variables through getenv() should you need to. ; Default Value: "EGPCS" ; Development Value: "GPCS" ; Production Value: "GPCS"; ; http://php.net/variables-order variables_order = "GPCS" And... ; This directive determines which super global data (G,P,C,E &amp; S) should ; be registered into the super global array REQUEST. If so, it also determines ; the order in which that data is registered. The values for this directive are ; specified in the same manner as the variables_order directive, EXCEPT one. ; Leaving this value empty will cause PHP to use the value set in the ; variables_order directive. It does not mean it will leave the super globals ; array REQUEST empty. ; Default Value: None ; Development Value: "GP" ; Production Value: "GP" ; http://php.net/request-order request_order = "GP" 
&gt; Edit 2: Yeah, always check the column length. Per [the manual](http://dev.mysql.com/doc/refman/5.5/en/encryption-functions.html#function_sha1), "The value is returned as a string of 40 hex digits". I should've remembered to ask more about the column myself.
Isset lets you throw multiple params in there like it was one big &amp;&amp;... If (isset($_POST['username'], $_POST['password']) { ... }
As always, it all depends on context. This would likely not apply to everyone's case. &gt; If the object on which you call the doSomething() method now aggregates a FileTool object instead of the static call you could just pass another object implementing the same interface to the tested object and an alternative implementation would be used. In case of unit tests you could use PHPUnit's mocking features to automatically generate a mock object for you, which then is passed to the object. (There are also various other mock object libraries out there.) In other words, only if you involve yourself in something like the above mentioned example should you be concerned.
Once you get into sockets, all you need to worry about is the protocol message structure. Or you can just make one up yourself, up to you.
I only wish there was something like that but for *empty*, so I can say `if (!empty($_POST['username'], $_POST['password'])) { }`
I like "Web Developer/Designer" since I really do the front- and back-end work. I actually had my current employer change my title to that.
The second article is poorly written in my opinion, and this whole problem assumes that we should be trusting data from the user. If you're exposing your session IDs through $_REQUEST - you're doing it wrong.
you could do something like function empty2() { foreach(func_get_args() as $test) { if(!empty($test)) return false; } return true; } 
How do you handle concurrency? I managed to get the 15k requests/sec but with no concurrency at all. I tried with forking it, but the performances dropped seriously. With no threads you only thing remaining is creating a whole new interpreter, which cost memory and time.
Yup and quite often do, very clean implementation right there, thanks :)
I completely agree. I guess this /r is full of PHP fanboys. How can anyone objectively say that PHP is better than ruby or python. It just isn't. For fucks sake, they only just added namespaces! It's a template language that suffered from major scope creep. It seems like all the smart minds around have moved onto contributing to python and python frameworks. I hope it dies in the arse to be honest. They have really done nothing but continually fuck the language up over time rather than fix the major flaws it has.
No. First of all, it's $\_SERVER. Secondly, it's not possible under any configuration that $\_SERVER would be overwritten with POST or GET values. Only the synthesized array $\_REQUEST could experience overwriting. And anyone who looks in $\_REQUEST for $\_SERVER stuff is a gibbering moron. And nobody here had proposed doing that.
It can make it easier to execute XSS attacks against your site. Someone could create a link that sent arguments normally intended for a POST (i.e., a form action that actually does something and changes state on the server side), by adding GET arguments to the URL. Since this doesn't require Javascript, it's more likely to sneak through your filters.
I would add a non-security related concern to this argument and that is using $_REQUEST is not restful. I think seeing the distinction between these two methods is useful for your thinking process since if you can see a POST is taking place then you know something is about to change. Also doesn't aggregating this data give users the wonderful ability to copy urls that make changes to data. If someone unwittingly clicks one of these they could delete something.
Thank you! My syntax highlighter only handles PHP unfortunately. It's just one I hacked together into [Michel Fortin's Markdown parser](http://michelf.com/projects/php-markdown/). All it does is split the PHP string apart with [PHP's tokenizer](http://php.net/manual/en/book.tokenizer.php) and wrap each token in a span with a class to reflect its type. Then I style it with [this CSS](http://foo.tl/assets/styles/code-dark.css). I stole the colours from the vim theme I use: [xoria256](http://www.vim.org/scripts/script.php?script_id=2140). Once I've tidied things up a little I'm planning on pushing the source of the site to github - it's crazy simple stuff, but I thought it would be nice to share anyway. 
If you're using static classes for one-off things, as in Kohana's modules (Date::WEEK, for ex), then you're fine, but if you're doing examples as shown in the blog post, then yes, static isn't the way to go.
Ahh yes. And the old "web crawler deleted my database" problem. I can't believe I forgot about that one.
Also don't use SHA-1 for password hashing. Use something based on Whirlpool.
The project essentially has it's main connection handler process and multiple worker processes. The handler accepts connections and passes any data between its worker process and the connections. If all worker processes have no spare client slots (eg. 1k clients per worker process) then the handler forks a new one off. If there are are more than X client slots available to use, a worker thread is instructed to close to save resources. And yes, this is using the standard PHP interpreter :)
[Using a template engine on top of a language built to be a template engine is just silly](http://codeangel.org/articles/simple-php-template-engine.html). If you're mixing business logic with presentation code then _you_ are doing it wrong, that doesn't mean the language is flawed. However the real point I was making was that php files are executed right alongside all other web files without any special configuration. mod_python attempts to do this as well but just isn't nearly as flexible, and django is a pain in the ass to get up and running. This isn't surprising tho, Python wasn't written with the intent of being a web language.
Just seeing that first line of code reminds why I love CodeIgniter so much.
Strictly speaking, this is NOT Test Driven Development. If you write your code before your tests, your code will influence you, so your tests will be biased. A TDD process goes like this: 1. Design a function/method and describe its IO. 2. write unit tests according to this specification 3. write code 4. run unit tests (via phpunit) and repeat step 3 until all tests pass 5. repeat steps 2-4 until satisfied (code coverage...)
That actually sounds really cool, I would never have thought of using the tokenizer to do that. I'm sure others will greatly appreciate it if you do put the source up. And I knew I recognized the colorscheme, xoria256 is what I use too :D
Ok, that has got to be a troll.
Here's an exercise you can follow. Get a lamp box running on Ubuntu 10.04 or higher then follow these instructions http://superuser.com/questions/55055/how-to-install-an-updated-version-of-pear-phpunit-on-ubuntu to get the latest and greatest PHPUnit installed and accessible from the console. Next up, make a new class and call it whatever... say SQLSelect or SelectHelper. Make a sqlselect_Test.php file with a class "class sqlSelect_Test extends PHPUnit_Framework_TestCase" add in a require_once to your SQLSelect class file. Using this http://dev.mysql.com/doc/refman/5.1/en/select.html as your guideline. Make a test like function test_BuildASimpleSelect(){ $actual = (String) SQLSelect::Start("foo", array("blah", "bar")); $expected = "SELECT blah, bar FROM foo"; $this-&gt;assertEquals($expected, $actual); } From command line run #phpunit sqlselect_Test.php Fill out SQLSelect's logic until the tests pass. Once done with this, add in logic to handle DISTINCT, Order By, Group By, and Having. I'm currently working double as a consultant for a University and also teaching student employees how not to piss me off. I've put all of my minions through an exercise like the one above with the requirement that they get a working tool from TDD. From my perspective, a builder pattern class is one of the easiest introductions as its trivial to determine expected result and has almost no additional dependencies.
this is one place up/down voting would come in useful, even if it's only for a limited time to get rid of old or irrelevant stuff.
You have to actually SELECT id and theimage. In the query you show, you only select acolor1 and distance. As for your last question, isn't this what you are trying to do anyway?
[Here you are, sir](https://github.com/footle/foo.tl/blob/master/Ftl/Html/Highlighter.php) Sorry for the lack of comments etc; I didn't plan on showing anyone any of this code ever :-D
Such short code, brilliant!
An actual "lolwut" was produced.
Interesting, thanks for sharing. Workers are still working in sync mode (one request at the time) I guess. There are some async system out there—node.js might be the most trendy at the time—and I don't see how PHP can offer a similar behavior.
It's all those comments touting personally defined functions and classes in there that get me. The Examples section is usually just fine. No need to know exactly how you personally used it in your own app or website. If the manual page is incomplete, please do add some examples of your own so others can tell how it's used. But otherwise, please don't add noise. I know we may all get excited when we make a personal discovery about the awesomeness of the simple act of using a particular already well-documented feature, but I don't think the manual is the place to share it. Which is why they need for a flag feature. The site admins already have a good handle on spam apparently as I've never seen any, but a feature like being able to instantly tell them "hey, this comment isn't useful in any way so can you take a look and maybe remove it" would help to clean up all the shitty and irrelevant comments I've authored myself and forgot about years ago. Edit: before you ask, no, I am not Jeffrey.
So RoleID is defaulted to some value on insert? If so, you could simply do this: INSERT INTO foo (auto,text) VALUES(NULL,'text'); # generate ID by inserting NULL INSERT INTO foo2 (id,text) VALUES(LAST_INSERT_ID(),'text'); # use ID in second table [source](http://dev.mysql.com/doc/refman/5.0/en/getting-unique-id.html)
pfff, you should definitely go for a mysql database, if not, you will overcomplicate things. That being said, this is how I would do it (horrible,horrible practice): Store the iinformation on an XML instead of a plain txt file, this way you will be able to do some basic queries against it. Encrypt everything inside the file nodes. Honestly I would say to them that if they don't give me mysql access and extra money, then it is not possible; and the best I could do is to email them the form.
Hmm I'd still need more info on your problem. Do you want to input A,B, and C and output the closest A, B, and C? Or output the closest A, B or C?
omg yes. sometimes all I want to see is the function used with different parameters, or different options set, not an entirely new function definition you used in your project which is what I have to wade through to find what I need.
What does the dataset look like? Are you searching article text? Single words? Do the keywords never change (a predefined list)? We need more info before we can advise you. If the keywords are a predefined list then just create an index table that associates an article id with a list of keywords and search that instead of the huge dataset.
And this is the documentation people like to claim is the best, let alone even passable?
You could create a php file called handler.php. Point the form action at it. In handler.php, you'd have something like: ` if ($_POST) { $filename = 'posts.txt'; $submission = implode(',' , $_POST) . "\n"; $fileHandler = fopen($filename, 'a'); //append fwrite($fileHanlder, $submission); fclose($fileHandler); header("Location: confirmation.php"); exit(); } `
Index the fuck out of the keyword table, and make sure your database server has a shitload of RAM. If I'm speccing a new database server these days, I want no less than 16 gigs.
Yes. One bad comment in thousands does not mean the entire thing is useless.
Yeah, if they beefed it up a little by adding some sort of community reporting/rating mechanism and a threaded structure for replies, it would be downright outstanding. Kind of like a hybrid of StackOverflow's comment structure and PHP's existing documentation.
I don't think anyone that's read more than one or two pages there could make the claim that it's "one bad comment." The entire comment feature has a well known history of being full of bad comments.
I'm part of the PHP doc team, and I'll see about removing this note. It's worth mentioning that this is one note in many thousands. If you ever notice a really wacky note, please either post a message to the php.notes mailing list, or feel free to give us a prod in #php.doc on EFnet. The notes for the documentation undergo minimal levels of moderation, to the effect that someone gives them a cursory read and, if they're generally relevant to the page, and don't include anything profane, they're approved. While this note is obviously ridiculously wrong, it's something that could reasonably slip through the moderation scheme. Edit: I've flagged the note for rejection, so it should be gone on the next website update.
basically a database with all the keywords attached to an ID. I want to be able to match keywords against that set and return the ID's. 
Then it's best to do as I suggested. Create a table and associate each article id with a list of keywords. Have 2 columns. An article id for the first column and a keyword id column for the second. Create a PHP script to have it do a search for each keyword and fill out the rows of the table. Run the script from command line so it can take as long as it needs. So the table filled out would look like this article_id|keyword_id :---|:--: 1|2 1|7 1|4 2|7 2|8 article 1 is associated with keywords 2, 7, and 4. Article 2 is associated with keywords 7 and 8. This is known as a many to many relationship or an associative table. More info: [Database Design pattern: many-to-many](http://www.tomjewett.com/dbdesign/dbdesign.php?page=manymany.php) 
&gt;either post a message to the php.notes mailing list, or feel free to give us a prod in #php.doc on EFnet. There really should be an on-site way to report this kind of thing. The notes section is pretty static for something on the official php site.
There is an on-site thing, the bugtracker (http://bugs.php.net), but unless you have a batch of note issues that you'd like to submit for review, I think it's best not to clutter the bugtracker with individual issues. The reason the notes are as they are is that they're also included in some versions of the distributable documentation. If the notes were as dynamic as, say, Reddit, it would be really difficult to include useful notes in the documentation. It's worth mentioning that the notes section isn't really for *discussion*, but rather it's for user-contributed information and examples of particular functionality in PHP. Sometimes the formal documentation must be very terse, in order to keep the size of the documentation down, so we rely on user notes to clarify anything which could use a more colorful example. If you're interested in helping maintain the documentation, please feel free to pop into #php.doc on EFnet. When I first started, I knew almost nothing about XML, Docbook or documenting programming languages. The group is very welcoming of newcomers, and we'd be happy for the help.
what was the comment? (it seems it's missing)
And an even longer history of being full of very good comments. The good so far outweighs the bad that only a troll would come to the opposite conclusion.
Couldn't you just add a "flag" button and then just keep an eye for comments that get flagged a lot?
End-to-end Developer
I believe there's a website overhaul in the works, which will probably address many issues that exist with the current website. Keep in mind that PHP is an open source community-driven project, so any work that's done is usually done on someone's free time, unless some company has a vested interest in seeing the issue resolved. Since the notes work, for the most part, there hasn't been much talk about rebuilding that system.
I deleted it. [See here](http://www.reddit.com/r/PHP/comments/h1lm1/phpnet_really_needs_to_clean_up_their_user/c1rz3yp). &gt;Interfaces are also good for connecting your code to periphial devices and/or other software applications - of which you are not the author of. For example, your digital camera has many functions built-it, and when connected to your computer, the software running locally uses the camera's "interface" to communicate with it. &gt;When you look at interfaces from this point of view, the program you write is like "extending" the actual device or applications internal software, but without the original source code or classes.
thanks exactly what i needed!
Run phpinfo() and see if Sqlite is installed. If you're (even only slightly) familiar with PDO, you won't have any problems making a decent form. Sqlite is usually bundled with PHP and stores its database on the filesystem. There are a number of tools (like SQLite Manager) that can provide a GUI to your database.
The documentation isn't one of the best because of the user contributions, it's the best because it's utterly comprehensive and extremely easy to access (http://php.net/*function*). The user contributions are generally very useful as well, of course, but that's not the only reason the PHP docs are considered the best.
stop doing inserts like this, they are always so confusing. insert into &lt;table&gt; set field1='',field2='',field2='' only use: insert into &lt;table&gt; (field1,field2,field3) values (1,2,3),(2,2,3),(3,2,3); if you are going to insert multiple records at once. otherwise the former is much easier to read and debug.
Using statics is pretty much just namespaced function calls. No problem if you're happy following a procedural paradigm overall, but mixing it with OO code tends to be nasty. 
I'll bite. Pretty much what you'd find in a text on the material (without the text), but worthwhile in that it calls attention to practice. I'd throw in a bunch of links to other language resources for inspiration (i.e. Perl Quiz of the Week, Ruby Quiz, Code Kata, and Learn Python the Hard Way), but they're a little far afield (even though most could also be tackled with PHP).
Yes, there's a website overhaul in the works - see http://www.php.net/?beta=1 HOWEVER, that's just the design - the notes are still pretty much the same. No option to flag comments so far :-( 
Perhaps load it all into a [Search Tree](http://en.wikipedia.org/wiki/Tree_data_structure) in memory. It's quite fast (Once its loaded) and the most nodes you'll ever have to search equals the length of the word you are searching for. Searching for "Ball" * Check if node B exists, if it does, goto node B, else fail * Check if subnode A exists, if it does, goto node A, else fail * Check if subnode L exists, if it does, goto node L, else fail * Check if subnode L exists, if it does produce a list of articles that exist at this node There may be subnodes ("BALLER", etc) but you don't care.
If mysql is a no-go, this is really your best option at this point. PDO is usually bundled with PHP5(.3?), but if you run into trouble with it, you can always try the [sqlite](http://php.net/manual/en/book.sqlite.php) functions.
Wasn't aware of this method. I'm finding as I'm doing this project that he hasn't taught the class a lot of things that would make life simpler. I'm probably one of the smartest people in class and I'm relying on google and you folks way more than I should have to for, what seems to me, pretty basic stuff. 
Well I'm working on 3 long-term client projects that use FuelPHP, Dan Horrigans boss has just switched his office to using FuelPHP and we have about 60 people contributing features and bug-fixes on a regular basis. FuelPHP isn't going anywhere but up.
How is the 'keeping user ratings/votes honest' problem solved? Where ideally no logins or accounts are needed/used to vote.
A lot of thought and discussion has taken place regarding how to improve the user notes, but let's try a few baby steps. I'll add this flag feature soon. I guess use recaptcha to help know if humans are involved... instead of user accounts. The user notes were and are meant to do one thing: find content that'll be folded into the manual. We've been liberal with leaving them in (~25,000 currently) so should do a better job integrating the content and/or removing note clutter.
I only looked at [one exercise](http://phpexercises.com/php-variable-content-destruction.html) there, but did not like the result. They have unset($name); var_dump($name); and figure it's a PHP version problem that this no longer "works" but I disagree, and think it's an error_reporting level problem. Fail.
There has been talk in the past, but no real work done ;) I'll try to remember it all, find various discussions within the list archives, and see where we ended up (it's been awhile) and write about it. Also, as frozenfire stated, patches welcome ;)
True, however there is a link at the very bottom of manual pages (in beta mode) titled "Edit this page" which deserves testing and use. We'll probably end up with a block like and under the "Quick TOC" with features like "submit note" "edit this page" "submit bug report" etc.
Same. Wish they had these for every language. :)
I don't like it really. It would be nice to have some real world context for those exercises. for example with loops instead of writing abc 10 times or something you could make them write &lt;li&gt; elements or some tabular data, the same goes for other topics for example concatenation could be an example of presenting a few "database-like" variables like "NAME SURNAME lives in TOWN" or something. I hope you get the general idea. It would not only teach some laguage constructs with silly exercises, but also show how they can be used for simple (or not so simpe) tasks in web scripting.
What is stopping you from getting mysql running?
Some options: * [Doxygen](http://www.doxygen.org/) * [PHPDoctor](http://peej.github.com/phpdoctor/) * [phpDocumentor](http://www.phpdoc.org/) In the past I have used phpDocumentor but it hasn't been updated in years, and is a pain to work with. I've heard good things about Doxygen, but have also heard it can be a bit complex to work with because it also supports other languages. 
I wouldn't try this in PHP period. Please check out Lucene or Solr.
For those desiring to help and/or learn about the php.net notes system, please have a look at the wiki page idea titled [Revamping user comments at php.net](https://wiki.php.net/ideas/usercomments). It links to past discussions and offers ideas. 
I agree, but you can't have everything. It's still a good thing to exist. I like that you are asked to solve a problem *before* being given the solution. Then you get to reveal the solution and see how close you are. I don't mind much that the examples don't have real world context. I like the opportunity to practice PHP. I've bookmarked it.
If you (i.e. your app) know the name of the file you want to open, you only need execute permission for the directory (and all of the parents), not read permission.
It really depends on the configuration of the server. As elmicha said, the apache/php process needs permission to enter every directory above but not necessarily read. That is why on almost any somewhat secured server you come across /home is rwx--x--x. It makes it harder to figure out the other accounts on the system and where to guess for possibly accessible files/folders but the web server can still get in. Generally unless the system is running phpsuexec or something similar you just need to make sure that the web server and php processes have execute privileges on the entire directory tree they need to access.
644 for files. 755 for directories. Enable suEXEC/suPHP. 
I haven't had any problems with phpDocumentor- what kind of things do you think makes it a pain?
Perl Quiz of the Week, Ruby Quiz, Code Kata, and Learn Python the Hard Way
No shell access, for one thing. But I checked the other Gliridae's recommendation and it turns out that sqlite is available. 
Thanks, I hadn't thought to do this. Turns out that `sqlite` is okay. 
why would the world need any permissions, assuming apache user is part of the group that owns the files and directories in the first place? can't we do 640 and 750?
Thanks a lot, I hadn't thought to do this. Turns out that `sqlite` is there and I'll be able to save responses with PDO.
Cool. It was the shear number of bad comments that was the problem (probably ~a hundred or so rough guess). It seemed a laborious process to open a bug report each time I found one, and comment content was rarely a big enough issue to go that far. And as frozenfire said above, it would clutter the bug tracker and probably drive you insane. The flag feature could be as simple as opening up a form where the user may note why they're flagging it, and then just simply send a template email to the docs alias from the backend for consideration. Skip the bug tracker all together. Up to you guys though.
I've not had a chance to look into this but I immediately want to say thank you for providing this reference. I've often thought to myself that there is a severe lack of academic style instruction online that involves testing and exercises and an over-abundance of simple blog posts and tutorial sites. I've always found that test and exercises are enormously beneficial in solidifying the uselessly base and ethereal notions mentioned in tutorials and examples.
Agreed. Also, I'm lazy so instead asked someone else to implement this [here](http://php.markmail.org/thread/7gfkqozusrugv3al). I'm guessing someone will... maybe even a reddit user? :)
haters gonna hate.
I'm with you on this. I've always found that using the language to solve problems makes you a better programmer. Debugging and problem solving are the very basis of programming, so it should be an essential step in learning.
haha, yeah, just saw this earlier. :)
http://forums.cpanel.net/f185/why-644-755-unix-permissions-ideal-files-directories-public-folders-136821.html
haha, yeah, just saw this earlier. :) I just wish these were divvied up into skill levels. 99% of that stuff is way above my level.
Really?? All this hubbub over _that_ comment? I don't think it's either trolling nor bad; _that is just what an interface is_. He was trying to explain it in a way that is applicable to the real-world. When I explain interfaces to a noob, I very often start out with the analogy of hardware interfaces, too. It paints a very clear and simple mental image for the student about how and why we have interfaces. Nobody _gets_ interfaces so well when you remove all real-world semantics from them; "what's this, something that requires that my objects all have the same methods? why not just subclass? why even require it, can't you just look at the other class and see if it's there? blah blah". But when you explain that interfaces allow you to easily _interface_ your code with other's code -- which may or may not actually involve hardware, that call is not PHP's to make -- it's easy to see the resemblance and the reason for the name. There are much, much, much worse comments on PHP.net than this one, which I believe is actually very insightful. 
So, only mechanics should drive cars then, I guess? I know nothing of logic gates or how a CPU works [internally], and somehow I find using bits very easy and straightforward.
Having no real formal CS education, bit operations were somewhat of a sticky subject for me to learn on my own. There were examples everywhere of them in use, but very little reasoning as to why. I think your article would've been helpful for me in those days. I do agree that an article on bit operations should really point out the synergy with IP's &amp; CIDR, but that is a domain-specific take on it, and considering that this is PHP, only tangentially related. Also, one of the few concepts that I only recently learned about regarding bitmasks/operations was the notion of a [nibble](http://en.wikipedia.org/wiki/Nibble); I always wondered why constants were defined using cryptic hex notation...
I'd add "or Sphinx or even your RDBMS' fulltext indexing feature". But there is a case to be made for doing it in a non-fulltext RDBMS. It depends on the OP's problem. If the search is only going to be run occasionally, and if the search is for 20-200 *total* keywords against 500,000 documents, then the extra performance and features of a real search tool might not outweigh the cost of learning a complicated new tool. However a real search tool will have better performance as the number of keywords or simultaneous searches increases, and it will provide things like relevance-ranking, faceting, and hit-highlighting that make dealing with a return set of thousands of documents much easier. Personally I use Solr because it's what I know. Bill Karwin has a [presentation comparing Lucene, Sphinx, MySQL fulltext and inverted-index searching](http://www.slideshare.net/billkarwin/practical-full-text-search-with-my-sql) on a 1.5 million-document data set that jibes well with my experience.
DAE get lazy and do all their exercises in the same file? http://i.imgur.com/SRzNV.jpg I do. :D
Zend is now using [DocBlox](http://www.docblox-project.org/) to generate the documentation for Zend Framework. It's still a little rough around the edges, but it has advantages over PHPDocumentor: * It understands namespaces. * It's many times faster. * It does incremental doc builds It also uses XSLT for templates and themes, which is either a plus or a minus depending on how you feel about XSLT.
always interesting
got to love free resources to help us get started 
I didn't rip anything from that article, I didn't even know it existed. My template example is quite a bit different. I took my ideas mainly from learning how ZF View engine worked and simplified it.
Aunt Tillie drives a car, she doesn't design or build one. If you write expressions, you ought to know what it says.
Are the dimension stored in a configuration file somewhere? Maybe you've pasted an UTF8 equivalent of x to the file and saved it that way - if so, open the file and type the dimensions by hand. Are you 100% sure that it's indeed an "x" in the DB?
I haven't used Formidable Pro but it looks like something's replacing anything that matches [digit]x[digit] with that multiplication character (`&amp;times;`). I'd guess it's FP's content renderer that's doing this - you might want to report it to them as a bug. Otherwise find the code that's doing this (perhaps `preg_replace("/(\d+)x(\d+)/", "$1&amp;times;$2")` or something) or add your code somewhere to change it back (e.g. `str_replace("&amp;times;", "x", $page)`). I don't do much WP development however so I'm not sure where you'd go to do this.
I think this your problem :) http://codex.wordpress.org/User:Here/Texturize I'm not sure if you can disable individual entries or if there's a way for the plugin to print without them but I'm guessing this is what is causing the "texturized" 'x' to appear.
str_replace('×', 'x', $imagename);
Why not post this on stackoverflow?
`str_replace('&amp;#215;', 'x', $imagename);` Or in a plugin or your theme's functions.php: function my_init() { remove_filter( 'the_content', 'wptexturize' ); } add_action( 'init', 'my_init' );
I am using utf8_unicode_ci currently, I've actually always wondered what collation was ideal for wp, although I'm no dba and this would probably be best answered in the wp /r. Admittedly, I don't have a solid grasp on MySQL. I only really know enough to get myself into trouble :D Would running an ALTER table query suffice, or are there other pitfalls I should be aware of? 
This is for sure a possibility, I'll have to look into that some more. 
I am 99.9% certain it is not a hand made error. That was the first thing I checked :P The meta keys for that particular entry are infact a regular letter x. I know something is off because when you try to view that image url directly. This shows up in the Apache error logs... File does not exist: /srv/www/sponsorgoal.com/public_html/wp-content/uploads/formidable/566528-300\xc3\x97168.jpg The 404 error page shows the url all screwy too... The requested URL /wp-content/uploads/formidable/566528-300Ã—168.jpg was not found on this server. Searches throughout the entire db show zero "×" symbols/characters.
I have already reported it to her, but sometimes that can take some time to get a response. Was really hoping I could resolve the issue tonight. So I came to the place I knew would be up all night :P The "only" place I've seen wordpress use this × is in the Media Library, when you select an image to edit, near the top there are details about the image. One of those details is the dimensions. The now infamous ×, appears there. I went back and checked several other blog's I have access too and they all have it there too. Which kinda points HashBox's theory about the Texturizer. So I'll have to bring that up with the cute sounding Formidable Pro dev Stephanie :D
You're contradicting yourself now. &gt; If you write expressions, you ought to know what it says. When I use bitmasks and write expressions for them, I know exactly what they mean. This has nothing to do with my knowledge (or lack thereof) of logic gates, CPU's, etc. What I'm trying to point out is, that I can utilize bitmasks with great efficacy without knowing a damn thing about all the CS theory you bring up.
A part of me is actually impressed that programming languages have become simple to the point that people who don't want to touch a CS textbook with a 10 foot pole can swiftly write software that isn't KTurtle drawing a flower but some real shit that's worth a damn. But as with any topic, the more is written about it the lower the SNR gets. This is part of why proper education matters, for any discipline. At the end of the day, what matters is if you want to learn a trick or a skill. E.g. you can learn to play a specific (or even several) part(s) on a piano or to read and write sheet music like natural language. tl;dr get off my lawn and all that ;)
Try setting a cookie to store the refresh time with your javascript and then have your PHP code read it when generating the meta refresh tag the next time.
PHP cant do this, as this is a client side function. PHP can only mess with pages before they are served to you, once you see it, its beyond PHP's grasp. I would use jquery, and reload individual elements containing the relevant information at a set interval, and then if/when needed manually set/change/activate that timer through user interaction. Here is some sample code that would work: &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.0/jquery.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; var auto_refresh = setInterval( function () { $('#load_content').load('loadcontent.php').fadeIn("slow"); }, 10000); // refresh every 10000 milliseconds &lt;body&gt; &lt;div id="load_content"&gt; &lt;/div&gt; &lt;/body&gt; &lt;/script&gt;
That's what I was thinking... as a follow up question though: Is it possible to send an extra bit of request to a PHP server (similar to how you would send it to a page using javascript) so that the server knows how long to set the refresh time for? Something like site.com/page.php?time=1000 Is there a way for PHP to decipher that information when it is called?
yeah if you wanted to use the meta refresh method, just put in a little php echo in the tag like this &lt;meta http-equiv="refresh" content="&lt;? echo $_GET[time];?&gt;;URL='http://thetudors.example.com/'" /&gt; Thats the short and dirty, so you can try it. But you might need to worry about default value, or sanatizing the $_GET input. Here is an expanded version with default value; &lt;? if(isset($_GET[time])){ $time = $_GET[time]; }else{ $time = 0; //Whatever default number you want here } ?&gt; stick that before the meta refresh i showed above, but use the variable $time instead of the direct $_GET[time]
The variables after the question mark are called [GET](http://us3.php.net/manual/en/reserved.variables.get.php) variables. You can reference that time variable with $_GET['time'] Keep in mind that GET variables are inherently insecure because they are easily changed by the user. So always verify the information in a GET variable if it's going to be used anywhere sensitive like a SQL query. This is incredibly important if it's an outside facing website with untrusted users.
Perfect... I've used GET variables before, but I didn't know how they would play with PHP. Thanks a ton dude, I think you've just saved me a lot of work moving stuff from php into just html and javascript. =)
Just set the refresh target to the page, with a URI argument saying what the next update interval is to be. Problem solved.
They really shouldn't be showing PHP echo'ing HTML to noobs. Thats just irresponsible.
Hey, I just wanted to say thanks a bunch for this info it was very helpful. I'm definitely going to check out Symfony &amp; Django before I make a decision.
I guess closures in PHP aren't the same thing as they are in JS. Looks like they've simply decided to call first-class anonymous functions closures... Probably because it makes a good buzz word. In JS these are two separate things. Or, rather, closures are anonymous functions that do things a certain way to also become closures. It's my understanding that the idea behind JS closures is that they are "closed" (get it?!) around the relevant scope so that even if that scope goes away outside of the closure, the variables inside and the scope itself are kept alive within the closure. In a situation where you pass a PHP "closure" a reference, what happens when the referenced variable goes out of scope? Does it become undefined? Wouldn't that defeat the idea of these things being called closures...? They're just functions at that point. Don't get me wrong; anonymous functions being first-class objects is great and can clean up code considerably. But I don't think these things are actually closures in the generally accepted definition of the term. I'd love to be shown I'm wrong, though.
Nice article until I read "why anyone would make anything private is beyond me". Why anyone would make that statement is beyond me.
You could save a lot of time on this class by extending [ArrayObject](http://php.net/manual/en/class.arrayobject.php) instead of implementing Iterator and Countable. Then just interface with $this as an array. This is exactly what I did in my own [DBRecord class](https://github.com/ChiperSoft/phPit/blob/master/objects/DBRecord.php). Makes saving and loading rows an absolute breeze.
But doesn't mention the Y-combinator approach?
Jezzus this is some messy shit. Wasn't pass by reference made obsolete in PHP a few versions ago? And btw, a closure isnt simply the ability to pass a function as an argument and execute it.
Passing by reference *at call time* was deprecated a while ago. The reference bit belongs at the function itself, not at the function call. &gt; a closure isnt simply the ability to pass a function as an argument and execute it. In PHP, the only difference between an anonymous function and a closure is the `use` clause, the thing you noticed being referenced.
&gt; In a situation where you pass a PHP "closure" a reference, what happens when the referenced variable goes out of scope? Nothing. You still have a reference to it. It wouldn't be undefined, it would continue to have it's value. 
References and reference parameters still exist (and is common among programming languages). What was removed from PHP was call-time pass by reference -- which was a bizarre feature -- where you could pass a variable by reference to a function that wasn't expecting it! 
&gt; In a situation where you pass a PHP "closure" a reference, what happens when the referenced variable goes out of scope? In PHP, the only difference between an anonymous function and a closure is the `use` clause, in which you specify which variables from the current scope will be included in the scope of the closure. This particular trick is taking advantage of PHP's *horrible* reference system, which works at the variable level instead of at the value level. When saying `use ($foo)`, the value of `$foo` *at declare time* will be used when `$foo` is referred to inside the function. When saying `use (&amp;$bar)`, the value of `$bar` is determined based on the current value -- in whatever scope it was originally declared -- at *function call time*. Because of PHP's equally awful variable scoping rules, this little trick is only really effective either in the scope of a class, or in the global scope. Unless you do something like this, from the PHP interactive shell: php &gt; function make_f($val) { return function() use(&amp;$val) { echo "val={$val}\n"; }; } php &gt; $f = make_f('herp'); php &gt; $f(); val=herp Okay, nothing special. But let's make the function builder take it's value by reference: php &gt; function make_f_byref(&amp;$val) { return function() use(&amp;$val) { echo "val={$val}\n"; }; } php &gt; $derp = 'what'; php &gt; $g = make_f_byref($derp); php &gt; $g(); val=what php &gt; $derp = 'fffffffuuuuuuuuuuuu'; php &gt; $g(); val=fffffffuuuuuuuuuuuu Because of how PHP references work, the original scope of the `$var` bound to the closure at declare time was a reference to the original `$derp` variable in the global scope. Changing it causes the value seen by the closure to change.
hmmm this is exactly the sort of thing I get paid to do at a local college. It's fun the first time. Mine are used to evaluate classes, instructors and collect tutoring data.
Sit down with them and have a heart to heart. You don't want to make it seem like they are bad developers (which they might be), but you need to explain what's wrong with spaghetti code. The underlying problem is that it's hard to maintain. Hard-to-maintain code is a [technical debt](http://en.wikipedia.org/wiki/Technical_debt). The larger and larger the debt, the harder the entire system is to work with. Right now is *the* time to propose starting the process of [refactoring](http://en.wikipedia.org/wiki/Refactor). *Not* a rewrite. You *can* make the code better, *progressively*. Start by splitting out all the presentational bits from the non-presentational bits. You can do this without any sort of framework or third party library -- remember, PHP is a great template language. There's no shame in having page.php do a `include 'templates/page.phtml'` at the end. The next step is far more arduous -- splitting out the page controller glue from the actual business logic. While you can shift around presentational code with ease, working a single page at a time, chances are that the business logic is spread all over the system. This will require a far more concentrated effort, and might not be able to be done piecemeal like the presentation code. The biggest problem, though, isn't the code, it's the people. I've been a similar position before. Twice. The first time, yeah, I was brought in to maintain the code built by the company founder. I did what I could, but he frequently pushed new features over refactoring. That product is dead now. The second time, it was the lead developer, not the company founder. The only thing that let us make progress on the code was him deciding to leave. I don't think you're going to have that same stroke of luck with your company founders.
I'd like to see this done in Node.js
I know the feeling. We all want to rewrite code we don't understand but my advice is not to do a major rewrite especially if the whole mess actually works. What I would do is that for every feature or bug that I need to implement or fix, I would study that section of code pertaining to that issue and only refactor relevant code. This should result in better QA in the long run as opposed to doing everything at once. Don't know if I understood your question well, but good luck. Edit: McGlockenshire beat me to it and with a more well-thought out solution to boot.
why dont you post this in a forum
Rewriting is most likely not worth the time and money. It's more of a convenience to you than a necessity to the company. If the startup paid developers to do an entire rewrite everytime they hired someone new because the developer disagrees with the previous developers coding practices then theyd be out of money fast. Just deal with it to the best of your abilities, try to follow the current coding practices in place in the project so things can stay consistent (and theoretically manageable). If it takes more time to get the job done then it takes more time. The only time a rewrite makes sense is if a feature would be more easily/cheaply implemented on a proper rewrite of the code than it would be to hack it into the code of the existing verson. As my hot eocnomics teacher always said, logical people think on the margin.
__Don't rewrite the code!__ Grab a framework like Zend set it up and smash all the php/html files into the public folder so it works just like it used to. Then whenever you have to work on the code start combining it into the framework. Eventually with time (might i add, _paid time_) the code will start coming together in the framework instead. Then convince your co-workers to use the framework so they don't keep adding to the mess and you will be just fine.
I just want to say that you have my deepest sympathies. Writing code can be fun and energizing, but spaghetti code just sucks all of that away and leaves you with this awful feeling as it takes a several hours to a day to implement even the simplest of features or fixes. I'm currently cleaning up the spaghetti mess that a consultant created for us, but it sounds like yours is far, far worse. I like the ideas of a progressive, incremental refactoring, but disentangling the business logic from a dozen different sources can be difficult and disheartening. My suggestion is to try to chunk out sections of it to rewrite. Go ahead and refactor as you go with features and bug fixes, but also continually have a side project going wherein you're taking a particularly nasty knot and just reimplementing it from the ground up. Don't worry about duplicating code and functionality from the spaghetti; it'll be going away soon enough. And, use your version control system to branch these things away, so you can safely break the system without affecting mainline development. 
Turning up to a new job to find that the code is filth is a pretty common experience IMO. Resist the urge to rewrite: however awful and hacky the current code is, it *mostly works* and fixing things that already work should be a low priority for anyone. My advice would be to every time you touch a bit of code to add a new feature or to fix a substantial bug (rather than just a bit of CSS) to take a little time to make some incremental improvements. For example, inline CSS is really easy to pull out and put in its own script file. Don't think you have to make the code all beautiful at once, because that will overwhelm you. Instead, make sure that brand-new feature development is done right and later as the product grows and is more successful there will be time to port the other pieces across in bits. [Tamrix's comment](http://www.reddit.com/r/PHP/comments/h3qhg/recently_started_with_a_new_company_and_im/c1scnfd) is very sensible indeed. Politically, it is going to be hard to say "guys, all your code sucks". I think it's easier to pitch as "now that your product is sucessful and the company is growing then we need to start laying things out in a more separate form to make it easier to maintain" and make it clear that you're only planning on doing the new bits in the new way. Look for a reasonably self-contained new bit of functionality and implement the new style for that and show that it's possible and that you can potentially do things faster and more cleanly; chances are they know what they've been writing isn't brilliant, and if it really is that unmaintainable then you should be able to wow them with how much you can get done when set free. Given long enough, they'll start referring to your way as "the new way" and start actively looking for ways in which new features can be developed "the new way" because they know they'll get things better and faster that way.
Sounds exactly like me about a year ago. In fact I can't find a single difference between your story and mine. A few months in, during PHP Advent, I read something that completely changed my outlook on it: http://phpadvent.org/2010/legacy-jungle-by-mark-story Also, bear in mind that they're probably aware that their code isn't great and are embarrassed about it.
requires more upvotes. Also take a look at doctrine. ZF will allow you to take parts (e.g. form objects) and just throw them into the HTML+PHP+CSS mess, slowly refactor all the monkey nuts out. Also, this is a great lesson they don't teach you at Uni, spaghetti code makes money fast. Without the spaghetti you wouldn't have a job, so you may not like it but you have to respect it :)
Do they at least have version control? If not, that's priority one. After that, a good development/testing environment and a release process (a simple script is fine, just don't edit live files by hand). From there on, work on new features and bug fixes and try to slightly improve all the code you touch. Big rewrites are _never_ worth it.
i agree with this do more work for the same money, lol
If the sloppy code runs like shit, then it may warrant a re-write ala twitter or fb crashes last year. Only do it if its necessary though.
As someone who loves ORM in general and has worked with Doctrine, allow me to advise you against integrating Doctrine into any project beyond low complexity. 
Good luck I'd love to know how you get on.
I did just that, two years ago, I had my spagetti code (was all mine), but when the startup started to grow, the new programmers always complained about the messy code -it wasn't that bad, i at least used smarty for the templating!!- anyway, we endedup with Zend Framework up and running after months of rewriting. What was a fast site, became a trully pain in the ass. Sure, maintenance was faster, everything was neat and in it's place, but that FW killed our performance.
Why do you say this? I've integrated Doctrine into a semi complex ZF project recently and have had no issues with it at all.
I agree completely with @tamrix on all points except I would go with Kohana instead. However, I would say have it recomposed with [Kohana](http://http://kohanaframework.org/), but the documentation (which used to be awesome with an earlier version) really blows. (And before you Kohana fans chew me out -- realize that I'm not the only one saying this.) Also, the default URL routing has issues with dashes in the controller and action slots of the URL, so you have to make a complex route function in your bootstrap.php to let you use dashes in those URL slots if you want. But once you overcome these things, it's one of the best frameworks, has great community support, and has a very low learning curve.
Oh Gawd no. I hate ORMs and especially Doctrine. You have to keep recompiling the ORM scripts. Most developers you hire understand at least straight SQL statements. If you use PDO and prepared statements, that's some pretty clean code with very few lines, and are quite easy to fix. ORMs just add unnecessary goo and lengthen project timelines.
That all really does depend on where the product is going. If it is getting expanded and extended and improved on a continual basis, then a rewrite most certainly *could* pay big dividends. Without a rewrite it could just be heading down a big hole (and I have seen that happen to companies before). However - rewriting is not a one-man job. It needs support from the company, with a strategic outlook.
The FW killed the performance, or your conversion introduced some major flaws?
Playing devil's advocate a bit here but: why would *you* make something private, out of interest? :-)
Agreed. Something you can do is when you have to tweak or rewrite something is to pull it out into a library function. Then go through all the code and make anywhere else using the same code use this same function. After a while, your code will be cleaner and more "framework like". It will then be much easier to port onto the framework of your choosing in the future. Phillip.
As you move through your changes try to factor out stuff where you can. 
Did you cache anything? Did you profile? Did you check for slow SQL queries? A good framework makes all of these a breeze.
I've done this before, watch how much you decide to bite off. When I first joined my second company, I was in charge of setting up the framework for the entire web stack. No problem, I was still fresh out of college and knew what I didn't want to have done from my first job. Two years later I was looking at code that made my eyes bleed, so I decided it needed to be rewritten. At first I tried to do the whole thing, but when you have too many changing pieces things can become really tricky to debug. Instead I reverted all my changes and broke the rewrite down piece by piece. It took longer, but it was easier to work in changes, because it was a phased approach and I could contain the changes to only a few files. In the end, it worked out great, but I learned another lesson. If you're going go refactor, do it sooner rather than later. It will save you more work.
first step if i were in your shoes, is to start adding MAJOR comments to the code to explain it to yourself. For if you need to go back to something youve already looked at you dont want to waste time trying to understand it again. If they are moving forward fast they may end up hitting a wall. It obviously isnt Object written code. Maybe start writing some objects to deal with certain things and then start pulling pieces out of the code. CSS is a good start, then move on to the HTML. Take the initiative. If your worth your weight in salt, then they will appreciate and thankyou for it. It will also be at this time when you decide for yourself if you want to stay with a company that is a startup. You will get indicators that they will make good money or just normal money.
It's very verbose compared to some ORMs. But I can't think of any other problem points with it.
Sure, i started caching everything (Mistake #2019), then realized i just needed to cache some things. During migration, we changed database schema, and that resulted in slow queries, that we had to rewrite. It wasn't the FW failure, but it didn't help either, we had a site with about 50 code files, and with the framework, we ended with one with hundreds, that had some impact on IO.
Obviously both. It was our first approach at ZF, so we made a lot of mistakes. Finally, after 1 year of tuning, and modifiying, and testing, profiling, and all that, now is starting to work as it must.
Get out while you still can.
Your design sounds complicated. What about using a database (can be a simple text file with one question per line) and a counter to keep track of the current question? 
Actually, not really. I've read somewhere that linux has excellent I/O caching (thus extremely performant small file read operations), not to mention that your opcode optimizer (APC, xCache, etc.) probably already caches the files in RAM.
You can just do: if (isset($_POST['username'][0], $_POST['password'][0]) { } If the first character of the string contains something then the string will contain something, if you're looking for a minimum number of characters then you can just replace the 0 for the number of characters - 1 (it's 0-based)
To keep extended classes from accessing the method or parameter. Why would a programmer want this to be the case is a good question. I can't think of a specific example off the top of my head right away, but I can certainly remember several times I've tried extending some other class and the developer had used private. Grr. (I'm interested in seeing an example by indenturedsmile as well)
I think this is pretty much the OP's point. Personally I haven't come across a situation where *private* offered anything more than *protected*, other than annoying anyone who wanted to extend that class. By setting to something as private I kind of feel like you're saying "There is no reason you would want to do this any differently"; which, to me at least, seems pretty close-minded. I would say it's a little close-minded to say *never* too, but at least it's much less likely to *stop* anyone from doing anything.
if you want post it i'll take a gander at cleaning it have the next 15 hours free
Are you making the quiz to learn PHP or are you making the quiz because want a quiz? If its the latter, I can build it for you for free, I am looking for projects to work on. Either way, pm me your email and I will help you out, I just got done with [this site](HTTP://lotrlcg.com) and alot of what I did there would apply to what you are doing.
I run into this problem a lot at my job. When I have time I build a php file that puts all the data queried from a DB into an array and outputs it as JSON. All the logic and code is in the php file that outputs the JSON. Then I build a view page typically in PHP but you can use jquery too. The view page has all the html and css. It's usually pretty easy to do this without changing the original, you just rename the file when you are ready. It produces several benefits. 1. I usually get a much better understanding of how the code works. 2. the performance is the same if not better because I can optimize the code. 3. If I need that page's data elsewhere all I have to do it to query the JSON file. 4. The code is easier to read and easier to maintain when I come back to it. It's not full blown MVC, but it is at least some separation. And it does not slow down you performance like a full blow framework will. BUT, if you are working on this with several other developers, a framework will make that process easier.
^ It would be interesting if someone could provide a simple answer to this. Most of the time I see a 10+ page document listing merging / branching etc. Its like they are trying to explain arithmetic, algebra, and calculus simultaneously in a subject that seems like it should be more top down friendly.
Yes, exactly. I understand what *private* does, but I've never found an example that justifies using *private* over *protected*. Maybe I'll do an article and explain my reasoning in more detail, with examples. I'd be interested to here what examples indenturedsmile has that I could use to balance my article.
Isn't that what the "final" keyword is for? :-)
I recently started to work with subversion. One time on a 2 dev project with a friend and now on a solo project. I don't think it's perfect but i just "checkout" once (to have the stuff on the local harddrive) and then just "update" and "commit". I update whenever i start working and commit when I'm done. Works for me...
IMO for a one man shop, there's nothing significant to be gained from distributed over regular version control (besides learning a DVS).
Work overtime and drink excessively; wash, rinse, repeat.
Subversion isn't a distributed version control system like mercurial and git, so it's actually not a completely even/fair comparison. Though the concepts are similar, distributed repositories tend to add a layer of complexity to otherwise simple projects.
Well, I'm probably over simplifying it a bit... but generally I've run with a central repository that the website will pull from, either by a trigger or automated on a tag/branch. Similarly, we run staging environments that pull from a separate tag/branch. Each machine any of us work from generally have a copy of the repo, and we use that to work. Once tested on our own machines, we'll push back to the central repository under the given "live" or "staging" branch, and the server in-question will pull/merge from there (again, either manually, cron'd, or via a trigger mechanism). Once things look good on stage, they're merged back to the tip/live branch, and the main server is manually updated or triggered to pull from the main repository and update the live site. Like I said... probably a bit of a simplification, but hopefully it makes some sort of sense and is potentially useful. There are, of course, other methodologies out there, too.
Here's what I would do if I were you. 1) Sign up for a service that provides you a Git repo. Github is the most popular, but you don't get a free private repo. I prefer Codaset for my stuff because they give ou 500 MB of disk space, which is more than you get at the other free places I'm aware of. To make this easier, I'm going to assume that you're using Codaset. 2) Create a project on Codaset. This will create your repo for you. 3) Set up the repo on your local machine. On Codaset, go to the Source tab in your project and it will give you specific instructions on how to initialize a repo locally and then 'connect' it with the Codaset repo. 4) Copy your source files into the repo. Add and commit everything. Then push everything up to the Codaset repo. (git push origin master) At this point, you have everything set up for one of your environments. For the others... you simply clone the repo and it will pull down all your files to those boxes. Your workflow should now be as follows... 1) Make changes on local environment 2) Commit those changes 3) Push those to Codaset repo 4) Log onto your 'production server' 5) git pull Of course in an ideal world you have a better release strategy than this, but for a single developer shop this is probably fine. In your scenario where you have two local environments, you're basically two developers. You push code up when you're ready and pull down when someone else (your other machine) pushes up code.
This is exactly what I do as well, and it seems to work ok. I am on the same page as the OP though, in that I realize I have a pretty limited understanding of the 'correct' process. I tend to do more then a single commit per day though. I will commit for all major changes or a batch of bug fixes, and any time before I upload to production. This way my commit messages are short, sweet and easy to figure out what was done, and I have a lot of places to roll back too if I flub something.
Sure, xCache was on (later moved to APC), but the HD was still getting stressed...
i'd highly recommend you salt your passwords as well... // in a config file that is included define( APP_PASSWORD_SALT, '8r657go813qfiq37hn4qcfi8ghq374i' ); if (isset( $_POST['user'], $_POST['password'])) { $password = $_POST['password'].APP_PASSWORD_SALT; // perform query... }
"Big rewrites are never worth it" -- that is, unless you can introduce significant new features or attack new markets with a rewrite. A lot depends on where his company wants to go. With that said, it's surprising how little a company's technology is considered in a acquisition or other similar cash event -- it's all markets and customer base.
I actually use Mercurial through NetBeans, which is my IDE. You have to install TortoiseHG to make it work, but I have never actually used it directly. 
I am not particularly familiar with this process either, unfortunately. The only thing I can see would be rolling back. I can't ctrl z my way to a massive rollback. I'd like to see how that happens, though. If I fuck something up, I would LOVE a full site rollback. 
Even for a single developer, the process should be similar to that for a team of developers. It's up to you how complex (or robust) you want to make the process, but my suggestion would be to look at something along the lines of Jenkins (né Hudson) and use it for deployment. You can create tasks, and hang these off version control hooks - for example, to build a release when something is pushed into its local repository. This way, you could use something along the lines of Phing (like Ant, but for PHP) to create a build script. This might run some unit tests, lint the files, etc etc, before releasing the code. In a very simplified case, this might be as simple as tarballing the source code, SCPing it to the remote server, and switching a symlink to switch the new code live. I know that might seem like a fairly elaborate procedure compared to FTPing the files, but it gives you lots more control - e.g. simplified rollback, auditing, very easy releasing, etc. There are plenty of tutorials online for setting these things up. Even as single developer working on my projects, this is (similar to) the procedure I use.
Oh :) Ok
Why don't you have a bitbucket if you're using HG, and pull the changes down to the server?
The correct workflow for me is to check in my work often enough to a remote repository I won't lose it if my laptop is stolen or some other cause why my code is no longer accessible. That and I use VMs all the fricken time. **VMs, VMs, VMs:** Use a VM for your dev environment. Reason for me at least is to leave my code station free of nginx, mysql, apache, postgresql, mongodb, and anything else that installs as a service or needs a port. Plus I make the VM match a clients live environment as much as possible if I know what it's going to be. HDD space is cheap so I don't reuse VMs between clients. **Coding and testing my changes:** I have two ways of getting my code changes onto the VM. The first host I test with will be named \*.dev and is for quick testing. The host runs off a folder shared between the guest OS and my host OS. I can make changes without having to mess with git. After I am happy with my work I'll commit and push it up. The second is for staging, named \*.staging. I do a pull to get code changes for this one. The reason for the second host is because I might miss a file in my commit, or I might forget to commit at all. I also tell myself I don't want to see any errors here. This is purely mental and I don't have some magic configuration setting for the setup that is any different than *.dev. The two hosts are just virtual hosts in apache or nginx after all. Now this isn't too helpful if you're trying to travel a lot and work from different machines. In my experience VMs don't like to travel on external HDDs between machines. Though if you used Dropbox instead of a shared folder then you might use an EC2 or other remote server in place of *.dev. Also [Git w/ Dropbox](http://stackoverflow.com/questions/1960799/using-gitdropbox-together-effectively/1961515#1961515) Anyhow that's my workflow. (I do not pretend mine is the **CORRECT** workflow for anyone else.)
For a while I attempted to use a VM for local development but ran into some odd issues. The major one was that I had trouble getting xDebug to work with Netbeans and an Ubuntu VM. I use WAMP at this point, and I'm actually pretty happy with it.
nah, they are nice - the normal stuff doesn't seem worth it, but when you do interesting things with trees and many-to-many joins it gets interesting. Getting the ORM to build all your objects and fill them is sweet. Also, you must have objects that represent (for example) customers, orders, products, payments, deliveries etc. You already have 90% of an ORM built, why not lever doctrine and get it to read the DB and build those objects for you? Grab a customer with his orders, products, deliveries etc all in a couple of lines of code? Why not? Personally using SQL to JOIN customers with orders with products and you end up with some evil giant array with: Mr Jones, Some Order, Product 1 Mr Jones, Some Order, Product 2 Mr Jones, Some Order, Product 3 Mr Jones, Some Order, Product 4 Mr Jones, Some Order 2, Product 1 Mr Jones, Some Order 2, Product 2 Note how Mr Jones is repeated, ugh. Get that out of my face. I don't want that, it's not useful. So to grab the interesting bits I either run 3 or 4 queries, or I dig through the above. Or I let Doctrine do it for me. Um, tough choice ;)
Here's a simple way to do it (using Git but can easily be adapted to HG, I just don't know HG commands very well): 1. Create the project on a Git hosting site (GitHub, Gitorious, etc.) 2. Clone the project to your local machine (git clone &lt;address to repo&gt;) 3. Add the initial files to it and commit/push back to the hosting site (the site itself should have easy to follow instructions for that) 3. On the remote machine, clone the project (git clone &lt;address to repo&gt;) That gets you set up. Then, moving forward, here's your process for developing. 1. Make changes locally 2. Commit and push them 3. SSH into the remote server and run "git pull" to pull in the latest changes That's the gist of it. To automate things a bit, if you want to get fancy, you can set it up so that the remote server automatically pulls. For example, where I work, we have a separate "production" branch, and whenever anything is committed to that branch, the remote server sees it and automatically pulls it in, so that's how code is pushed live. But manually doing it as I laid out above is fine too, it just depends on how lazy you are.
Not all companies are ok with having their source code on something they don't control.
The process can be pretty much the same as a centralized VCS. The easiest way is to use a free service (like github), create a repo there. Then just use that to push your changes to basically as a backup. Or can set up gitosis yourself, it's pretty easy So: * 1. Create remote repo * 2. Create local repo * 3. Do work local repo. commit early/often. rebase if necessary * 4. push to remote repo * 5. $$$ profit The easier thing about working solo, you can be more liberal with the rebase command to keep a linear repository history, since no other people have to fetch/merge (pull) your changes. that's about it. same as SVN except the commits happen in two steps (commit then push). No need to complicate things. Hope this helps.
"not meant to be extended"? In an OO language, I'd be pretty disappointed if I can't extend a class and its methods how I want. I can't think of a reason why you would want to stop someone extending it - you might want to encourage them not to, but to actually stop them.....that seems, as footle said, pretty close-minded. My use case might be different to that which the developer intended. Or maybe I've found a bug in their code that now I can't fix? Or perhaps I want to unit test it, but they haven't allowed for DI.
Which is absolutely the biggest gain that version control offers. Unfortunately I'm an SVN guy as I haven't been in a multi dev shop in a long time. I can elaborate on my process if you thing that it would be helpful though.
That doesn't make sense :| The database server was on a separate machine? Maybe you had swapping or something. :D Anycase, I'm stumped. Sorry.
Here's how you'd do this with github **Set up new repo on remote server** Go to github and create a repo **Clone repo to machine** git clone &lt;repo_address&gt; Example (clone my new project): git clone git@github.com:JohnColvin/phpNETFLIX.git **Work on local files; test changes on local server; ~~upload directly via FTP on making sure changes work correctly~~** After completing work you make a commit. I'm of the mind that commits should be one "chunk" of work (atomic change). Think about a commit as completing an easily definable task. If someone asked you to take back the work on that task you'd only need to do a single git revert! *Stage your changes* git add * OR git add /path/tothe/file.php If you deleted a file you'll need to use git rm instead *Commit your changes* git commit -m "Explain what you did" This gets you to a point where you're working repository is clean again, but the changes are not in the remote repo yet **~~At end of day,~~ commit changes on remote server** You can push any time you want. There is no need to wait if you're the only one working on the code. git push **At home, pull all changes to my home PC and continue working there. Commit changes on remote server before going to sleep** git pull (I use git pull --rebase to avoid merge commits. You can only pull with rebase on a clean repo) At any time, you can use git status to see which files have been changed. Before you've staged changes, you can use git diff to see the change you've made. This is SO helpful. You can make sure you didn't leave any debugs or anything in there. There are so many great things that git can do for you once you've mastered the basics!
To put it as simply as possible, here's what my git command history might look like: SSH onto my webhost and: * git init * git add . * git commit -m "Initial commit" Start repo on dev system: * git clone ssh://user@site.com/~/public_html/sitepath * git checkout -b develop Normal operations: * git pull * git checkout develop * git add . (if necessary) * git commit -m "such and such change" * git add . (if necessary) * git commit -m "such and such change" * git checkout master * git merge develop * git push origin develop SSH to my webhost and: * git merge develop (to master) A few notes: I don't have any professional sites, so I'm not using a github repo or any repo. I'm just testing and uploading to my host. If anybody suggests any improvements on this workflow, please do tell. Obviously, I add in other commands to this workflow as needed.
I use the following flow with Git and it works very well for me: 1. Create a new branch for each non-trivial feature/fix that you work on. 2. When you finish your feature, rebase from the current HEAD of your master branch (if your HEAD has changed), then merge the feature branch into master. This allows you to work on more than 1 feature at once while also allowing you to pick-and-choose when/if each feature gets merged into the mainline. It also keeps your master branch clean and mostly stable (you're never developing on it), allowing you to easily switch back to it for reference when needed. Pushing/pulling: Since you're the only developer, it doesn't really matter when you push to remote, since other devs aren't waiting for your code. If you're using multiple environments (which it sounds like you are), obviously push whatever branches you've modified when you need to switch environments. Otherwise, just do a push each night so that you have a somewhat fresh backup at any point in case of disk failure. EDIT: Also, if you can SSH into your production host, I'd recommend simply cloning the remote repo and doing a _git pull_ of master when you need to deploy. FTP is a pretty old-school way to do deployment, as it has no native integrity checking and is more difficult to automate with shell scripting.
- No multiple-column primary keys - Many-to-many connecting tables can only reference two tables All kinds of other limitations. Some things fail silently. Some things are claimed to work in the documentation, but you look at the source code and there are comments saying that it's not supported. It's been a while since I've worked on it, but it was one of my most frustrating assignments, and worked with first-generation ASP and JSP back in the day.
Here's what I do, and what my company does. I edit everything remotely on FTP. So changes show up right away. I use PHPDesigner, other editors also have the ability to just edit direct on FTP. The plus to this is, several people can work on it at once - it might be tricky for file collisions, but if code is segregated properly, it's not a big deal. Good thing is we can work in multiple environments (I can switch to my Mac if I'm fixing a Safari issue, *nix if I'm working on something on the backend) That folder we are working in, is a child repository. The parent sits on another server. Our dev/stage environments are both children of the parent repository, UPD and LIVE are rsync'd up version (the reason we rsync those is because its automated, and we don't want any merges or anything, just clean copies up). For this, you can use a simple XML manifest for Phing, which can be run and handle all the tasks for deploying. We commit at bug fixes, major changes, etc, whenever needed (commit and push). For something like an Alpha or Beta release, we use tags, and update our environments according to those tags - stage would be an update &lt;tag&gt;), that tag is stored in a file For you the short version would be dev and live, so live environment would be a clean export of the repository without any metadata. We use HG at work, I use Git for my own projects (which I use Github for, and I have a private repo for a few projects). That's my basic workflow
Personally, I use private anywhere use of a variable may change over time and between different versions of the software. Mainly for reusability. Here's a stupid example: Let's say I'm developing a library (that I'm distributing for free on the internet) that helps other developers perform math on triangles. For the first version of the software, I store the points of the triangles as separate variables (a,b,c). For the second version of the software I decide to store these variables in an array (for whatever reason). If I allowed these variables to be public, developers using my software may access them using "triangle.a". When they upgrade to the second version, their software breaks. Instead, I make the variables themselves private and give the developers accessor methods (getA/setA for example). This way, the developer's code doesn't change, but I'm allowed to change how the library works on the inside. Of course, if you're only writing code for yourself or your small team, this doesn't seem to matter. However, imagine a case where a major change needs to be made in the structure of a class. If you've been accessing public variables, you have a lot of find/replacing to do everywhere that class was used. 
This is my SVN process, should be similar 1 - Populate repository (Source server) 2 - Checkout code locally 3 - Write 4 - Commit 5 - Tag 6 - On test or prod server, switch tag to the one you just created 7 - GOTO 3 **NO FTP 
How about using a free service like tumblr.com? (You can direct a domain to it)... With a little bit of elbow grease (modifying one of many themes or making your own), it can be awesome. If you don't have a domain yet... http://www.fatwallet.com/GoDaddy-coupons/ Good Luck!
Do you have a domain name? I'll volunteer to host it to aid in a job hunt. Shoot me a message.
I searched for a simple Mercurial explanation all night one night and couldn't find one. All I wanted was an explanation on pushing and pulling changes and all I could find was really in-depth stuff. I've since given up on using Mercurial and still don't know if I use *hg pull* or something else. Because it sure as hell didn't work when another developer tried to pull a change after I pushed it. No such problems with Git, though, hell yeah.
You had me until the detect POST and I got a little lost. Sorry, I'm a bit of a newb.
Nope I don't have a domain name, thank you though.
Here's a short and sweet example. &lt;HTML&gt; &lt;HEAD&gt; &lt;style type="text/css"&gt; body { font-family: Verdana; font-size: 11px; padding: 20px; } .submit { background: url(http://i.imgur.com/Hlvad.gif) no-repeat; height: 43px; width: 123px; border:none; } .submit:hover { background: url(http://i.imgur.com/Hlvad.gif) 0 -43px no-repeat; } &lt;/style&gt; &lt;/HEAD&gt; &lt;BODY&gt; &lt;form method="post" action="#"&gt; Email: &lt;input type="text" size="30" id="email" /&gt; Password: &lt;input type="text" size="30" id="password" /&gt; &lt;input type="submit" class="submit" value="" /&gt; &lt;/form&gt; &lt;/BODY&gt; &lt;/HTML&gt;
[NFSN.net](http://www.nearlyfreespeech.net), isn't free but might as well be. Deposit $5 and you'll be set for months, really awesome service, too. I doubt you'll ever find a 'reputable' free PHP web host.
You can sign up for something free at dyndns. Won't be fancy but good enough. Offer still stands.
Well if that's the case, you set up your own "origin" server, and push and pull to that.
can you scrape together a $5 visa gift card: http://prgmr.com/xen/
I'd be willing to host it as well if you're interested let me know.
Why use an excess vehicle? $submit...
Try this: if($_POST) { // Remember to clean your variables! Google "Clean POST variables PHP" to learn more... // do stuff with your code... // if there is an error, the form will show... if there is NO error and you don't want the form to show again... $noForm = true; // If you put the $_POST variables in the values .. in the form, this will help users fix problems so they don't have to retype everything. You could also use Javascript/Ajax to do this realtime instead ;) } // Check to see if you tell the script NOT to show the form (successful or something like that...) if(!$noForm) { // Form goes here with &lt;button type="submit"&gt;&lt;img src="" alt="" /&gt;&lt;/button&gt; }
Can submit inputs have background images _yet_? You're probably looking at using an onclick handler to call submit() , whether it's a button or a link.
I just requisitioned an old PC I had lying round. Just some old 2GHz thing with 512MB RAM. That's all you need for a development web server really. Throw Ubuntu Server or something on there, XAMPP etc and it's good to go. Bit of mucking around on the console to set up shares etc but it's a good learning experience. Guess I prefer it than a VM chewing up a lot of CPU/memory on my development machine. But if you've got a new machine with quad core and lots of RAM why not.
Yep. Also no CC, I'd be willing to deposit $5 in there too if he has a paypal account. For low traffic you're looking at like $0.60 a month so $5 will last at least 6 months.
Since no one has answered your question yet... zymic, heliohost, and 00webhost. They are all fairly slow though, but good free options for you to get some experience with.
No, the most common way I found to do it seems to be to put the submit button under an image. But that only works in some browsers. You can see an example at http://imgthis.com It works in Chrome, FireFox and Safari for sure, should be OK in IE9 too but I haven't checked recently. But short of javascript it seems to be the only way to skin it.
Thanks for the help guys, I think I'll settle for tumblr for now and just redirect my portfolio page to 0fees to get pass through the spam filters, tumblr isn't filtered right?
Everyone is making this much too complicated. All you need to do is add a value="submit" to the image button. ` &lt;form action="http://www.google.com" method="post"&gt;` ` &lt;input type="text" name="email" id="email" value="type your email here" /&gt;` ` &lt;input type="image" src="images/submitButton.png" alt="Submit Form" value="submit" /&gt;` `&lt;/form&gt;` Also, you have 2 name attributes. Don't forget to add alt text in case the image doesn't load. Source: http://www.knowledgesutra.com/forums/topic/60185-how-to-make-image-buttons-act-as-submit-button/
 if ($_SERVER['REQUEST_METHOD'] === 'POST') { // your code here } IMO
While true and good advice, sappro was just modifying lines of OP's code where he had written `$submit = $_POST['submit'];`
While it might be a bit overkill, you can get hosted on [phpfog](http://phpfog.com) (after getting a few other people referred as well) for free for 6 months. I have an account, but have yet to give it a try.
Don't get me wrong; I wasn't advocating the use of public members instead. Why wouldn't you have used "protected" in such a situation?
http://www.alwaysdata.com , the first 10Mo are free, you have MySQL/Postgresql/MongoDB , SSH access, daily backup, ipv6 and your custom additions to php.ini ! 
This. I use prgmr.com, it's awesome.
000webhost and Bytehost are free hosts that I use.
Important thing to remember with image submit buttons is that they were created for server-side image maps. When you click on it, it will not submit the value of the input element to the POST/GET, but rather pass the X and Y coordinates of the point the mouse cursor clicked instead. Therefore the value attribute is redundant for image submit buttons. Additionally, since it passes the X and Y coordinates, if you want to detect if the user has clicked that particular button, you need to test for $\_POST['submit_x'] or $\_POST['submit_y'], it will append '\_x' and '\_y' after the name you give it, $_POST['submit'] will not exist.
&gt; set up your own "origin" server Exactly. Furthermore, there's no setup involved. Git understands SSH natively - any box you can SSH to can serve as the remote origin. You just put a bare repository (git init --bare) in any writable folder (named something.git, or as you like). Then the translation from a standard Subversion workflow is simple: * svn checkout ~= git clone * svn up ~= git pull * svn commit ~= git commit (possibly a bunch of times), then git push Voila. Any random directory you have access to is acting as the equivalent of your centralized SVN repository.
The only problem with this method is that is also sends the X and Y coordinates of where you clicked on the image as GET parameters. If you're using something like an imagemap, I could see how that's useful, but if you just want a fancy image that says "Submit," I reckon that those GET params are unwanted.
 date('1.m.Y', strtotime('-1 month'));
Worded the title wrong! How about 'Last Day of Last Month'? And besides, that's nowhere near as 'cool' ;)
1dollarhosting.com. It's $12 per year.
I prefer mktime(0,0,0,date('m'), 0); Day zero is the last day of the previous month. or mktime(0,0,0,date('m')-1, 1) First day of last month. This way seems much more reliable and programattic 
Permissions can be a pain, as can the lack of a *real* sudo, and good luck deleting files that have open handles. 
In most cases you can just not care. The alternative is to use a &lt;button&gt; tag, unstyle it and give it a background image with css.
-1 month does not actually subtract 1 month, it subtracts 30 days. Pretty much the most annoying thing in PHP. 
Always good information
We found out (the hard way) that the PHP 5.2.3 DLLs do not play well with Windows 7. Throws a lot of bizarre issues. As far as I am aware 5.3 functions correctly.
http://www.awardspace.com/ I don't know how good the free is but the paid is great.
They blew it when they decided to make it in RoR. Not enough web hosting companies support that, and not enough developers can extend it. If they had chosen PHP, it would have been a far better project. More coders, and more hosting companies. Like duh.
I set up a separate server. An old pc will do. Win2000 or XP. Install Xampplite. Then share the drives on it. It works well. 
strtotime() is a much underused and underrated function. I use it a lot, and love it.
Each to their own. I personally prefer the sexy black magic approach but then I also love Ruby!
 &lt;form action="foo" id="quux" method="post"&gt; &lt;img src="nswf.gif" onclick="document.getElementById('quux').submit();"/&gt; &lt;input type="hidden" name="proof" value="positive"&gt; &lt;/form&gt; &lt;?php echo "Proof {$_GET['proof']}"; /* injectable, just an explanation, do not use */ ?&gt; 
 date('d.m.Y', strtotime(date('d.m.Y', strtotime('-1 month')) . ' -1 day'));
Just noting what has already been said PECL extensions can sometimes be a pain, as well as permissions. Outside of that your biggest issue will be file names. Windows doesn't care about file name casing where as *nix is case sensitive. Also if your running system commands that can get close to impossible to replicate. Cygwin is out there but your still limited to what it can do. If I'm stuck inside of windows (Like at work) I just run a virtual box that allows me to run linux as my web server and setup a network drive. This works out better since our production environment is linux.
Someone's a little confused about [the nature of the word short](http://www.reddit.com/r/PHP/comments/h4gtl/how_do_you_use_an_image_as_a_submit_button/c1skck6).
Host your personal blog on a major blog host, such as wordpress.com or blogspot, so that when asked why you can say it's about uptime, maintenance and PR. As far as the spam, don't use HTML email anymore, and try to get SPF and DKIM set up for your domain.
 strtotime(date('d.m.Y', strtotime('-1 month')) . ' -1 day'); or strtotime('last day of last month'); ? Out with the old, in with the new! Edit: But congrats, you did answer my challenge :P
I agree. With PHP it could've been a one click install on most web hosts, or download, untar and run install.php. RoR takes a bit of work to set up, and if you've not done it before it's a bit of a challenge.
There's a program called Unlocker you might want to give a go. I've hardly used it but it does the trick when I do.
In my current job, I'm working on a MacBook Pro, but for the last 10 years I worked exclusively on Windows and *nix boxes. I usually had a Windows desktop and/or laptop. A *nix box (usually CentOS) either on physical hardware somewhere or virtualized in the PC. If I was deploying to Windows servers, then I'd just have PHP running on the local box. There *are* differences running PHP on Windows vs. running on *nix, but by and large these differences won't bite you (until they do, then you deal with that). I'd still recommend running Apache instead of IIS on a Windows server, as this tends to keep things a little more toward the sane side. That said, I wouldn't recommend Windows in the server room unless the client demands it, or you've got lots of money to burn. Now that I'm working on a Mac ... there are things I like and things I don't like. I like that it's *nix under the hood. I hate the default keyboard behaviors. I love my touchpad, but I have seen newer PC laptops with the same multi-touch capabilities, so I guess that advantage is evaporating. I HATE the way that OSX deals with application windows, and I hate (as in with fire and venom) that everything shares the same damn menu bar at the top of the main monitor. And no, everything does NOT "just work" on a Mac. 
My main issues are general slowness compared to my Ubuntu or OSX installs. Even on a more powerful machine, PHP just runs slower for me on Windows (Win7 x64). This is especially true when running tests in PHPUnit. 
So in other words you haven't really looked at the PHP manual since PHP 4? Here's a piece of advice which will lead to finding tons of these wonders: Look at the left side of the manual to see related functions and read them!
I agree, I was very disappointed when I found out it wasn't written in PHP. I'm a fan (but not a fanboy) of PHP but mostly because that's all I really know. RoR might been a great ~~language~~ framework and better than PHP but considering far more people know PHP I think it would have been a better choice, presuming of course that the people who started diaspora know PHP. I have no idea whether it would have been successful if it was written in PHP but I'm sure it would have had a better chance, I would have certainly set up a server for my friends. Hey, maybe someone will port it.
Choice of language isn't what makes Diaspora unusable.
I believe that this particular collection of strings only became available as part of PHP 5.3 and with a quick search, the first mention that I can see of it in the PHP docs is in a user comment a good few 50 or so comments down the page. I only wish that I had the time to spend reading all comments on every page of the docs and changelogs alas sadly I have far too little 'spare time'!
Notepad++
Similar expressions have been available for a long, long time. The intent of the function has always been to parse natural language into timestamps, thus string to time()
I'm using PhpEd and loving it (though it's not perfect). Other than that - used to use Zend (but that was in the 5.5 era, 7.x series just sucks).
[Komodo Edit](http://www.activestate.com/komodo-edit) (that's the free version, which is good enough for me, but there's also a paid version with more features called Komodo IDE). It's available for both Mac, Windows, and Linux.
On the other hand, if Diaspora had been released in PHP everyone would have blamed PHP for all the security holes and other problems in the initial release. Because it was in Rails, I can use it as an object lesson that amateurish programming, not language choice, compromises security.
Totally agree, however that was not the point of the post. It was to express my excitement to learn that string representations such as 'last day of last month' are now valid strings to pass to the function. This is a trait that many other, more functional languages, such as Ruby have had available for a long time. Personally, I find being able to use strtotime() with these expressive strings to be of great use and I'm sure that in the correct situations others will too.
eclipse PDT for win, osx and *nix
Notepad++ is definitely the way to go.
I always used Notepad++ when developing on Windows. Thankfully I don't have to touch PCs anymore :D
Also, they wanted to redevelop everything and that was clearly wrong. We already have OpenMicroBlogging, OpenID and MicroFormats. To get those stuff together would have be a better choice IMO.
Wow thanks! I think 10mb should be enough I can use dropbox to hold most of the heavy media stuff. SSH access on a free web host is awesome, I'm immigrating to Canada, hopefully in July and when I do find a job I'll definitely be purchasing a plan from these guys!
Netbeans on Mac and Windows 7. With both machines using github for my personal projects and svn for work projects. Auto complete with annotated comments are very helpful.
Notepad2 for simple scripts or small things, Netbeans for large projects.
Add the DBGp plugin + XDebug + The Chrome XDebug helper plugin and you have a great dev environment.
Yes, they can. You just have to set border: none so that it doesn't use native styling. 
Netbeans, it's a full IDE that requires very little configuration compared to Eclipse. It's free, and seeing it's programmed in Java you can run it on other operating systems if need be.
NuSphere PhpED. I hate running Java IDEs, even though I do think Zend is pretty decent. PhpEd isn't in Java, so it runs pretty quick!
eclipse PDT.
What should it return on March 30, 2011?
I know it gets hate but I like Dream Weaver. 
Not at all. I didn't mean to come off "stand-offish". Protected members are only available for child/subclasses. In my bad example above, the Triangle class would most likely be used outside of the context of child classes. For example, triangle.setA would be used directly instead of using a class that inherited from Triangle. Edit: Misunderstood a bit. As I think about it, it is a very rare case that a class would need a private member over a protected one. Again (ugh), using the Triangle example, say in the first version of the library I extended the class and created an EquilateralTriangle class. When the Triangle class was updated for the second version, the EquilateralTriangle class may not have needed any modification, but if EquilateralTriangle was directly accessing its parent's variables it could have caused the same problems as before, requiring a code rewrite. This is a very flimsy example though, and there continues to be a huge debate over the use of private in any instance. To answer your original question: I personally use private because some old guy at university told me to. See here: [http://blog.astrumfutura.com/2011/03/private-vs-protected-methods-the-debate-that-never-ends/](http://blog.astrumfutura.com/2011/03/private-vs-protected-methods-the-debate-that-never-ends/) And here: [http://phpandme.tumblr.com/post/4391869601/private-vs-protected-lets-combine-them](http://phpandme.tumblr.com/post/4391869601/private-vs-protected-lets-combine-them)
How is it more reliable? Is strtotime going to suddenly stop working? Or do you just believe that it's going to suddenly start sending you different values just to fuck with you.
Activestate Komodo Edit, works a treat!
Only thing I use it for is to build eNewsletters but hey, it does that well! :)
Sorry bro, some of us haven't memorized every page on PHP.net. We'll work on that so you don't have to read about something else you already know about.
Netbeans PHP. Just so easy to get it up and running with xdebug so you can step through the code line by line as it's running. Every other IDE made me pull my hair out in frustration trying to get it going.
Php Designer 7
Same here. I use some flavor of Eclipse for almost everything. For my "real" job it is Java development with IBM Rational products built on Eclipse and then Eclipse PDT for freelance web development.
SciTE :)
I use Notepad2 for quick scripts, NetBeans/Eclipse for larger projects but used to use [PHP Designer](http://www.mpsoftware.dk/phpdesigner.php) which is a great PHP-specific IDE.
Seconded. I love Eclipse PDT. Used to use Zend Studio 7.x until I realized it was just PDT with some integrated Zend stuff that I didn't use anyway.
It sounds like you're looking for a text editor more then a IDE, I would go with other's recommendations on Nodepad++. However if you are in the market for an IDE, check out PHPStorm. It's surprisingly feature complete for barely being on the market.
I love editplus. I've tried them all but keep coming back.
I've gotten comfortable with [php coder](http://www.phpide.com/php-editors/php-coder/)
Its funny because its expensive software ....
haha The job I'm going into built their site in Dreamweaver...guess who gets to wade through the code and "fix" it.
Programmer's Notepad
+1 for NuSphere. It looks like crap in Ubuntu though (at least the version I have, 5 something, and is windows which requires wine), which is why I use Komodo (and hate it for the most part). 
If you give the image a name and a value, you get the value under the name key in the parameters. Yes, the X/Y coordinates are sent as well, but you can safely ignore them.
That's the coder not the tool, its an IDE.
TextPad.
It's so annoying. It grays out occasionally when I save things, and often when I need to add or update a remote server it will not "take" and I have to restart komodo to be able to add or edit the entry. (sometimes restarting reveals that it did add it, other times not so much) Other than that and the lack of a "smart upload/download" ala NuSphere and no versioning support, it is great. Can't beat free. I don't think I'd spend 200+ bucks on the IDE version since they really don't add any more great features and NuSphere is better and only costs that (or did when I had it).
[jEdit](http://www.jedit.org)
Don't forget to take advantage of the built-in NppFTP plugin too. It makes editing remote files fantastic!
For a lightweight editor I always fall back to PSPad. For an IDE I like PHPStorm, but I don't use it much.
${Notepad++}++
Chill, first of all, I only said "seems". Secondly, strtotime does a lot of magic to interpret ambiguous dates (of which this is not one) - e.g. guessing which locale you're using if you give it a dd/mm/yyyy instead of mm/dd/yyyy. thirdly, if you're using a word like "last" in there, you can't loop over it programmaticly. Fourthly, according to user comments on php.net, strtotime will give you the current time on that date unless you explicitly supply a time. e.g. strtotime('midnight first day of last month'); is not the same result as strtotime('first day of last month'); if the script is not run at exactly midnight.
For Windows, Linux, Mac: gVim. With the right plugins, it's the best.
[PHPStorm](http://www.jetbrains.com/phpstorm/).
It's fantastic. CTRL+Shift+S direct SSH save to my webserver? Best.
It depends on your definition of "free". For a one-time fee of $36.00, you can host PHP [here](http://sdf.lonestar.org/). I use them, and have had no problems.
I use this as well and really like it so far.
PHPDesigner is pretty awesome. I like the code hinting it uses.
I use to be a big proponent of EditPlus and to this day it still handles some things far better than other text editors. I especially love it's ease of macroing and it's got good rapid prototyping tools that I miss in NotePad++
 &lt;button type="submit" name="submit_form"&gt;&lt;img src="image.jpg" alt="" /&gt;&lt;/button&gt; Then to detect the post you can just do... if (isset($_POST["submit_form"])) { # code here } This also allows you to perform actions for a specific form, rather than any time POST request is made.
Thanks, I greatly appreciate your efforts to improve the quality here!
Great, but they have been since 5.3 and strings like "monday next week" for even longer. It's awesome you're excited about PHP but it's not something new. I suppose it's unfair to take my disappointment that stuff like this is actually upvoted out on you, though. /r/PHP signal to noise ratio is just horrible.
I eventually paid for the full version, and it's been great. I haven't had the problems you mentioned though - The paid version doesn't have a bunch of extra features but their debugging suite is nice
OpenMicroBlogging is being used by Diaspora, according to the wiki page.
agree'd
They would have had far quicker adoption among programmers and hackers, is all....but that would have helped to finish the project. That would also have happened if they'd used Python!
Ruby = possibly great language Ruby on Rails = possibly great framework Ruby on Rails != language (great | otherwise)
I made the switch to Netbeans from Eclipse, happy every since. 
Oooh, number four is interesting. Thanks!
http://www.phpedit.com/ is a must-have. Last generation has a great UI and powerfull scriptabilities.
Yeah, just hit ctrl+s and it will automatically upload the saved document to your server. 
Notepad++ in WINE. That's what I use anyway. 
Use the code view, it does that well too!
Indirectly? It might be. Four novice programmers using Ruby, not so big of a problem. They probably love Ruby. The rest of the (free software development) world, this is what they see: 1. I don't have any (or much) experience in Ruby 2. I don't use Mac, which is the platform for which the developers made the software 3. There is another project, written in PHP, that does the same thing (StatusNet/GNU Social) So why should they hack on Diaspora? And that lack of new developers causes a lack of community contribution, and the lack of community contribution causes unusability.
[Geany](http://www.geany.org/) 
you dont?
You can code all you want in Dreamweaver. You should try it out some time.
Yes, yes I have: It's not free. The second I start programming on a non-free system like Windows will be the second that my freedom gets shot to death. You're a programmer, now. Download a GNU/Linux distro (OpenSUSE, Mandriva, and Debian are all good), learn to love it, and learn to program on it.
The PHPUnit problem really hurts PHP development in Windows. Running a single trivial PHPUnit test (`$test-&gt;assertTrue(true)`) takes around 10 seconds longer to start under Windows than under OS X/Linux, even when running in a virtual server on the same machine. I might need to run a test twenty times in an hour. In a full day of development that's almost half an hour lost waiting for tests to run.
Yes, sadly many of the people i know who "use" Dreamweaver does this. but when you know how to actually code it can be a great substitute to scrolling your way through your giant style sheet to edit a single variable(not that this is unique to Dreamweaver). i do not use it anymore though, since the licence is ridiculously pricey.
Is it Dec 31 last-year safe? That always gets me :)
What do you meen You don't code in DW? I code in DW. 
Thanks for the help. I'll try it out and report back. 
you can do this with any text editor and FTP client that supports third party editors. I use Notepad++ with WinSCP set to use it by default. I hit Ctrl+S and WinSCP uploads it on the fly. Handy stuff. I find this to be much more reliable than the NppFTP plugin.
I'm pretty satisfied with Netbeans. I use Eclipse at work, but it was buggy as hell on my 64-bit Windows 7 computer, so I was forced to switch.
The killer feature I always need but so few IDEs include: integrated SFTP support like Dreamweaver and Notepad++ support. I don't want a local copy of the file, I want to open it from a remote server, press CTRL+S and be able to refresh my browser page immediately.
Aptana Studio 3.
Same here, I don't get on with aptana 3, but Aptana 2 does everything I need.
http://sublimetext.com - If you like Textmate, I think you'll like this. (Sublime Text 2 is also available for Mac and Linux)
Depends on how you use it. I sometime use Dreamweaver in the split-view, where I see the source and the view of the site. Its very good for you too see a visualization of what you are working on without tabbing to a browser and refresh. I don't use any of its code-generating stuff, I don't like a tool to do a lot of "magic" behind my back :-) 
It's okay, but it's written in Java, so it's quite slow, and the widgets aren't native. I ditched it for Komodo Edit.
Komodo Edit as I mentioned somewhere else in this thread also runs on Linux.
Eclipse used to eat all my ram. Netbeans is lighter and easier to manage. I used EditPlus too for Years and Netbeans finally won his place on my laptop.
I go between Notepad++ (Free) and E-Texteditor ($47). E-texteditor definitely offers more and is very light weight. Also known as the Textmate of Windows.
This is a fantastic text editor. Just waiting for new stable release for the code folding so badly now :/
I would use this but I need something that can do themes. When staring at code for hours I need a black background to help with eye strain. That is the main reason I use Notepad++ 
Definitely. Best PHP fully featured editor I've tried, and I've tried a lot of them.
Haven't actually gotten to test this out yet but am I going in the right direction? http://pastebin.com/3ydgCs97
Yeah, but you have to keep switching to your FTP client to browse and download remote files for editing, don't you? Adding a remote file browser inside the editor is a whole lot more convenient. Double click to open, ctrl+s to save, without switching apps.
Use Eclipse + RSE (http://tmober.blogspot.com/2006/11/remote-system-explorer-10-is-released.html) works quite well for this. 
One of the few decent FTP enabled (via plugin) editors out there. I use it as a fallback for Notepad++ occasionally.
I use Komodo Edit exclusively, support for almost everything, PHP, Python, JavaScript (+jQuery), XML, HTML... the list goes on.
Yes, I very much want code folding.
Notepad++. For the longest time I used Eclipse with the PHP development plugin and it works well, but it was overkill.
It's a very solid editor, if you ignore the wysiwyg shit in it. It's extremely well FTP enabled, and can be really efficient for editing remote files, especially if you need to store credentials for many servers, each with different settings.
PSPad is a bit too lightweight, when there are good options like Notepad++ and Komodo Edit available freely as well. I wouldn't want to have to write php in PSPad, but it's passable for light html work.
Is E-Texteditor FTP enabled? If yes, does it store separate accounts for servers, or do you have to put in your credentials each time?
Sublime is beautiful visually, especially if you enjoy a dark interface. I just wish it were FTP enabled (and that it didn't have a nasty memory leak in the version I tried).
I use Zend Studio because I like the integrated debugging and code completion. I hated 6.x, 7.x was good but 8.x is a lot more stable.
Yeah right, having to learn DQL is a bunch of bullcrap. Losing ~75% speed isn't worth it unless you have close to no users. Every time I see someone talking up ORM, I'm never surprised to see a real lack of experience from the person using it. ORM makes *some* things easier, but it's not worth it in PHP.
I second phpedit. The features are vast. The support is top notch.
and seeing it's programmed in Java it **is slow and crashes frequently .** FTFY
Oh? My bad. So maybe they could have make stuff like this more clear instead of make it buzz. But then, those who do are right, I'm only talking...
Yes you do have to browse through the ftp client, but don't have to download or upload anything. Double-clicking the file will open it in the editor of your choice where you can Ctrl+S to save and it will automatically get uploaded through FTP. Once you initially open the files you need, you rarely have to jump back over to the FTP client. I agree having the folder/file structure inside of NP++ is handy, but after having about 2 dozen FTPs in it, I noticed many different kinds of servers weren't compatible with the NP++ FTP plugin; especially Windows Hyper-V servers.
[Netbeans does this well](http://blogs.sun.com/netbeansphp/entry/sftp_support_added), as does PHPStorm.
I never got an invite....so I have no idea wtf happened
Used to use netbeans on both mac and pc but ever since last month i switched to phpstorm. Give it a try! Im sure you'll fall in love 
I concur, so much so I bought a license.
Editplus 
I am consider installing the ubuntu windows installer which lets you use ubuntu like an application on top of windows. is that good enough?
i haven't delved into PHPUnit testing yet but nice to know this. thanks!
This post made me realize what Diaspora is after years of having no clue how it was supposed to work. It's basically vBulletin or PHPbb but as a Social Network. Right?
i used to hate the top menu bar thing when i got my mac but got used to it. regarding virtualized pcs, do you recommend it. because i am considering this vs installing ubuntu in a seperate partition and i don't know if a virtualized nix is as good 
thanks for the input. what virtualization software do you use? i might do this too considering most replies in this thread are pointing to not to use windows
good to know. what's your setup btw?
Emacs all the way man!
Report the issues with Windows servers to the developers of the plugin, if you haven't already. Mercifully, I don't have to deal with crap like that right now.
Unfortunately much of the time I don't have the time or bandwidth to petition the author for these kinds of issues. Besides, I was experiencing random timeouts, files getting locked up on me, and a slue of other nagging issues that were inconsistent and changed from ftp to ftp. I found the method of least friction was to use an FTP client that does what it's supposed to do perfectly - transfer files through FTP. WinSCP really excels here compared to FileZilla (which makes you download/upload/confirm overwrites). Give it a shot. I was once told your editor should be for editing and your FTP client should be for FTPing. I've never found a solution that did both well.
The best thing is, our money went to fellow Europeans. :) I think the lead phpStorm programmer is named Alexandar or something. And they seem so warm and great. I don't know why.
&gt; I personally use private because some old guy at university told me to. I have to commend you; it is exceptionally rare to see such honesty in such matters. If I have made someone properly think about *why* they do something, I have accomplished what I originally set out to do. 
How are you using Github with NetBeans? Just manual commits?
I think you misunderstood what Otterfan was saying... ...or I did. Either way, one of us is confused.
I use nbGit. Does its job for the most part.
I tried that, it's cool but it starts up slow for me.
does np++ have a git or svn plugin?
For a real kick, check out the FSM that actually makes up this function in the PHP source.
Yeah me neither. Gave them my email address pretty much as soon as they started accepting them. *Still* nothing.
It could have been written in ice cream, and no one would have used it.
If you like TextMate, you might take a look at [e-text editor](http://www.e-texteditor.com/)
The wysiwyg has got better, but I mostly stick in code mode, you are correct the FTP system is fantastic.
Do you think they've started squirming in their chairs yet in realization that they've jumped into the deep end without knowing how to swim?
I have E-Editor on my windows box. http://www.e-texteditor.com/ has been the closest to resemble Textmate. 
ha, I noticed you posted this AFTER I posted the same thing LOL. my bad. 
You'll want your form to point to a PHP page, &lt;`form action="that page url" method="post"`&gt;. I believe the best practice when dealing with a form that creates files or database entries is to have the form point at a PHP page that redirects you to a success page, so you don't end up with double submits if someone hits back or refresh, but I've only just recently started working with forms. Anyway, when the form submits to the PHP page, you'll want to get data from $_POST['xxxx'] where xxxx is the name="" of the input field from the form you want. You might want to check your php.ini to see if Magic Quotes is turned on; by default it'll escape quotes coming from the form before you examine $_POST. From there, fopen() is your friend for doing the actual file writing. Just make sure the directory you'll be writing to can actually *be* written to by the server process. It's not the most secure implementation, and probably not the best (like I said, I'm just getting into working with $_POST recently), but it should get you on the right track. Bookmark the PHP manual and abuse its search function, helps out a *lot*.
Naming it Diaspora also didn't help matters much.
If you like Textmate, I think you'll ~~like~~ love this. Folding, indenting, completion. Pure harmony. Support this developer!
I've been using jEdit for a long, long time. Due to Komodo being at the top of the thread and someone having left jEdit for Komodo, I just tried it not 45 minutes ago. I love it so far! Thanks!
I use Notepad++, and cuteftp. If im working on multiple files and its sticky, ill use notepad++ for its splitscreen and other highlighting features. For most other work cuteftp and its built in editor work just fine.
jEdit is awesome as a general-purpose text editor. It has tons of customizability, many useful plugins, integrated FTP/SFTP, awesome regex support, and receives regular updates. It's also very fast. I've switched to Netbeans for my PHP projects because of its debugging and other IDE features. But I keep jEdit around for everything else.
Yea, but then I'd have to use Eclipse :( Actually I really like the feature set but it's *so slow* compared to a lightweight editor like Notepad++. Maybe if I was a true programmer and needed all the debugging and profiling tools, instead of a lowly web developer that only occasionally does serious PHP work.
There is a "Subversion" plugin listed in the built-in Plugin Manager, but I didn't see any mention of git. I much prefer TortoiseSVN, though, so I've never had a reason to try any of the integrated SVN options across the various editors I've used over the years.
there is a good tutorial on how to open/write/close a file over at [tizag.com](http://www.tizag.com/phpT/filewrite.php) For naming, unless you want to get into complicated stuff as far as determining what number of form submission you are on, i would suggest using a timestamp to name your resulting text files.
I believe the ~~people~~ students that started the Disapora project didn't even know RoR. They used the project as a way to learn the language and/or framework. No idea about their familiarity with PHP, though.
They blew it when they decided to name it "Diaspora". It sounds like the name of a gastrointestinal fungal infection.
Came here to say this. Having the gVim shell extension so I can literally edit ANYTHING in vim is pretty awesome.
I run PHP 4.4, 5.2, and 5.3 on Windows 7 under Apache. I've had this setup going back *years* and I have no real issues. All my sites are developed on Windows and deployed to Linux without modification. The performance issues I'm hearing on this thread are entirely new to me but it sounds like the startup time of the PHP executable might be problem. That's not really a problem for me with this setup. In fact, my editor spawns PHP to do real-time syntax checking and it is never an issue. I even run on a Atom-based netbook. There are plenty of tools like WAMP that will setup the whole thing for you. 
phpEd is good, but not free.
Yeah, it sounds like a disease, or a drug that is meant for a disease.
[PHP Development Tools](http://www.eclipse.org/pdt/)
+1 for PhpStorm. I went to it from Notepad++, and my first thought when opening my existing project was "...whoa." It's stupidly configurable - I'm the kind of guy who, when buying a new game/software, goes directly to the settings menu first, so this hits my sweet spot.
I can't recall ever having Netbeans crash on me...
Alternatively, Exclipse + Aptana 2 (plugin version). The Aptana file and remote explorer is excellent, and the JS / CSS editors are great too.
Why are you guys talking about Diaspora like it's already released and failed? It hasn't even made it to a full release yet, it's still considered alpha level software, and it's undergoing very active development (as of the time of this writing, the last commit was 6 minutes ago). Let it get a full release before you start talking about its adoption rate please.
It's a tool I use to earn money - it's money well spend.
I've been relatively content with Netbeans. My favorite feature is its integration with Mercurial. Committing and pushing to the remote repository can be done quickly via right clicking projects and saves me a trip to the command line.
I would strongly suggest against it. You're running an emulator, which means you're losing power exponentially. Instead of one OS, you've got two OS's running simultaneously along with the overhead of the emulator itself. The convenience doesn't nearly make up for the loss in speed IMHO. Also, a number of things simply won't work right, for example graphics/network drivers tend to have a problem. If you only have access to one computer, I'd suggest partitioning your hard drive and installing a bootloader like grub. (if that sounds intimidating, its as simple as popping in a windows cd, installing, popping in an ubuntu cd, installing, and then highlighting whichever OS you want and pressing enter on each startup. Google "windows ubuntu dual boot")
I like tortoise. I just thought that having it as a plugin and all in one place would be easier. And so it seems there is enough demand that there is actually a svn plugin. Cool, I'll have to check it out.
It sounds like a prescription drug. "Ask your doctor about Diaspora. Side effects include lack of hosting support, unfinished software, and a snowball's chance in hell that the average computer user would ever adopt it."
aptana 2 was quite buggy for me, aptana 3 runs nice and smooth. great editor, I don't get all the people here using notepad++, does that even support projects?
i'm hooked on EditPlus too. 1.5MB free trial - lightweight and feature rich - http://www.editplus.com/download.html
This is a part of choosing a technology platform that many developers don't consider. # of coders # of hosting companies It's a real strength of PHP -- especially #2.
Feb 28. Far preferable than returning March 1. This one special case is a bad reason to have the functionality broken for everything else. Running -1 month on March 1 shouldn't return January. If I want -30 days, I'll do -30 days. -1 month should intelligently move back 1 month, and care for the fact that not every month has the same number of days. Most of the time the use case for -1 month is this: I have a year/month combination and want to get the previous year/month combination. I have to do this via if/else rather than using a built in php function which is asinine. I do not understand why this hasn't been fixed. 
I love it on windows, but the newest version of PDT is always locking up on me or losing features in linux. I have used Eclipse for years, and will most likely continue to do so, but only because it supports the other languages I'm working in as well.
Really depends on your tastes. I use Virtual Box.
Absolutely love my sublime text! http://i.imgur.com/6raCM.png =)
I believe there are NP++ plugins maintained outside the list that appears within the Plugin Manager, as well, but I've never looked into that further. They might be total crap...
over 300,000 users :)
I don't think that's it, I think it was because it was retardedly convoluted for most tech friendly users, let alone your average "type facebook login into google" types. I honestly think we need more stuff written not-in-php, because PHP is horrible if you've used something like Python.
They had a shared image uploader and a little design up with a group of over 4 people after 3 months and thousands of dollars using Rails, and it still had stupid security holes in it. Diaspora is subject to Poe's law, almost. A scam, or someone very enveloped in a rather silly idea and its equally ridiculous execution. 
Another vote for NuShpere's phpED. I can't live without its debugger, DBG.
Yeah *seriously*. Identi.ca was the clear model for how to do this and even that isn't all that similar as it's really more about institutional deployment not individual deployment. For what they wanted to do a one-click install on a $3.99/mo shared host should have been the goal.
&gt;Because it was in Rails, I can use it as an object lesson that amateurish programming, not language choice +1
Means VERY little to me. I'm talking about concurrency, not the number of users in your table. 
Started with eclipse, had problems with it as well (W7 64b). Switched to netbeans and I am quite pleased. Now all I need is CSS3 support.
Yeah tried for hours to get that working with xdebug to no avail. Was asking for some local path to the PHP compiler. Didn't see how that was going to work if my LAMP server was on an external linux machine. Used Netbeans, done in 10mins.
Nope
 //this updates the values in an array //the array can be indexed: // $arr[0] = 'something'; // $arr[1] = 'something else'; //or the array can be associative: // $arr['mykey'] = 'something'; // $arr['key2'] = 'something else'; foreach($arr as $key=&gt;$val){ $arr[$key] = $val." - updated"; //$key is the indexed number of the current array position, //or the key for an assoc array. } You will still need a counter if you don't use an indexed array and you need the number that you're currently on.
It's been looking me right in the face this whole time and I never realized it. Thank you.
&gt;I honestly think we need more stuff written not-in-php, because PHP is horrible if you've used something like Python. Why are you on this subreddit if PHP is "horrible" to you. Go somewhere else where you can actually contribute positively to a community and don't comment here. You come of as being an annoying/trolling douche when you say things like this.
It would have had far greater adoption if they had a clue what they were doing, regardless of the language they chose.
Emacs
No one cares about your pathetic 512mb server - lol Carry on reinventing a common pattern for each of your projects. No one cares.
I've done a few RoR installs for some clients stuff before and it's still a challenge.
You're not missing much.
It's not a matter of the active development or the stage of development in which it's in, but a combination of the developers skill level and their choice of programming language.
It's slower, but if you're doing it for a learning experience go for it. The nice thing about VMs is if you blow them up, you just reinstall it. You can also backup VMs a whole lot easier.
Might give 3 another try then, when I tried it I was in the middle of a project and some things had moved around and I was wasting time with it. I'm not doing anything critical at the moment, so I'll give it another go. It's always nice to move forward.
netbeans wherever I go... but Notepad++ is ok too
Either submit like normal or use ajax . A form onsubmit handler could run before it submits and you could do many things there. You could potentially set input values, or even create inputs.
haven't done it myself but I heard getting PEAR to work on windows can be a biatch. In Debian based systems I just go apt-get install and that's pretty much it... I don't remember having to do much more than that, but...maybe some manual config somewhere...nothing major though
I'm not sure if I'm following you here. Should I do something like: &lt;input id="txtTotal" type="text" value="" onsubmit="someJsFunction();"/&gt; And somehow use that function to copy the txtTotal value somewhere else in PHP?
Forgive me for being a total idiot but I would love to see this and can't figure out how?
Are you saying you have the variable in PHP and need to put it into js to do some work?
use onsubmit in a form tag eg ` &lt;form action="script.php" onsubmit="return myFunk();"&gt;` if myFunk() returns false, it will block the form from submitting. Fyi: In general, returning false in javascript will stop many different things. Next, you have to pass your variables from the browser to php on the server, and that can be done with a normal form submission, or you can use an ajax call to send it over. Does this make sense?
the other way around
Ya, I use a counter and foreach because I really hate having to use $var[$x]. It would be nice if the array pointer could return it's position but oh well.
but what is myFunk here? I have a js script which autocompletes the txtTotal onchange doing totalField.value = totalPrice; Is myFunk supposed to be this function? (Sorry my js skills knowledge is not very wide, ive been doing just php until now)
create new form elements for each of your variables: myForm = document.getElementById("form_to_add_to"); myVar = document.createElement("input"); myVar.type = hidden; myVar.name = variablename; myVar.value = variable_value; myForm.appendChild(myVar);
Worked great. Thanks for the help!
I actually just need to get the total. Would it be possible to have the rest of the form retrieved by the $_POST without having all the inputs translated to js vars?
Not really, since you'll still be using the nonfree OS.
you can always stick a hidden variable in your form and just modify the value of it via javascript. &lt;input type="hidden" name="myvar" id="myvar" value=""&gt; &lt;script&gt; document.getElementById("myvar").value = new_value; &lt;/script&gt; And then on the form processor $_POST['myvar'] would be equal to what you had set it in the jscript. 
oh, fancy js trick. Thanks master. I really suck at js but I am definitely gonna try that. Should I add an onsubmit somewhere to excecute this?
Holy procedural code, Batman! No offense, bro, but your code is a complete eye sore. I'm going to need my girlfriend to give me some of her eye bleach now ;o You really need to jump onto both the Object Oriented and Clean Code bandwagons. Immediately. 
I assume you're adding up a series of form fields. You can call your totalling function onsubmit of the form, or you can call it onchange of each of the form fields. It really doesn't matter much. jQuery would make this a bit easier, but that takes some learning. If you're going to be doing Javascript in the future, it would be worth your while.
I'm already following the lynda.com tuts on the subject. I know Im not supposed to suck at this forever. 
Yes it is FTP enabled, and it allows you do save FTP credentials as Profiles for quick access. 
Fuck no, I go here because I'm an experienced PHP developer and I like helping people out. It doesn't mean I have to be a proponent of the language or agree with the OP.
Don't sweat it, everybody has to start somewhere. jQuery is actually a good deal easier to learn than all that old school DOM document.getElementById stuff.
As mjcov says below, there is no guarantee that the index will be in a numerically ascending order, so tread carefully in using it in this way. Agree with OP though, there should be a built in process for this.
What version of PHP are *you* running? I'm 5.3.5 on my local machine: -1 month certainly not always -30 days. -1 month on march 1 yields feb 1. On March 30 it yields March 2, which isn't exactly intuitive, but what do you want? It's an ambiguous case. When it's not ambiguous -- when the previous month has the ordinal day of the reference date -- you get that date. It only gets weird when the plain-english-meaning is ambiguous (March 29 (in a non-leap year) minus one month). 
Gedit is available for linux, mac and windows in case you like it as much as I do and didn't know.
It is actually fine
Nice. Thanks. I'll have to take another look at it sometime.
Yes, Notepad++, but hide the ugly and useless toolbar in the preferences.
Thank you ever so much for such quick and thoughtful responses. So, ok, I think that I'm in way over my head. I haven't understood any of these responses, and that is because when I said I am a beginner to html, I meant that this is my first week trying anything. If anyone can elaborate on what they said, maybe put it in simpler terms, I don't know. I've looked up "Magic Quotes", "fopen", and "arrays", and I still can't seem to put together what to do. Just so you know, it's for a professor who I will instruct how to use it, so it really can be the most barebones page with no extra complexity. Would anyone like to offer more guidance? Thank you again by the way...
Thank you ever so much for such quick and thoughtful responses. So, ok, I think that I'm in way over my head. I haven't understood any of these responses, and that is because when I said I am a beginner to html, I meant that this is my first week trying anything. If anyone can elaborate on what they said, maybe put it in simpler terms, I don't know. I've looked up "Magic Quotes", "fopen", and "arrays", and I still can't seem to put together what to do. Just so you know, it's for a professor who I will instruct how to use it, so it really can be the most barebones page with no extra complexity. Would anyone like to offer more guidance? Thank you again by the way...
 if($_POST) { $stuff = implode("\n",$_POST); file_put_contents('results1.txt',$stuff); } else { echo 'html form content here'; } that should get you somewhere, read the docs at php.net if you need more help
Eclipse.
So I guess you already have a cleaner and proper version to share, amirite? 
But I think they require a valid credit card, which is actually a problem since I don't have one :(
I putty into screen where I use vim.
I made one that works on my windows development machine. Save the script from the link below and save it as testfiles.php in the document path. I set it up for 86 inputs but you can modify that easily enough. sorry about the delay on the right code, I was busy misunderstanding the problem. ;) http://pastebin.com/Ppaqrq2N 
Diaspora fails as either an RoR or PHP project. Period.
Has nothing to do with PHP
lol...diareah
Notepad ++ :D
There are plenty of rails developers out there who could contribute. That's not where they blew it. They blew it by thinking there were enough people out there who cared about security to unseat a competitor with a HUGE market share, and really offering nothing compelling to the casual user which makes up that market share.
Don't jump on a bandwagon just for the sake of jumping on a bandwagon. There's nothing wrong with procedural PHP for something like this. Keep it quick and simple.
NuSphere PHPEd, definitely worth the license fees, I love it. 
No love for UltraEdit? You can open files through ssh, FTP, sftp. Also has a ssh client built in, full FTP/SFTP. Macros and more. I use to use notepad, but now this is my development tool.
ctrl+f "vim" Modal editors are the best.
Why do you put all your HTML into constants?
Could not agree more. It's a shame it doesn't have git integration, but it does make documentation really easy.
I use this too. Love it!
Is there something wrong with me? I just saw the OP's code and i really like it, everything is tidy, well commented and somehow it's really short and easy to understand, i don't see any problem with it!
Comment was aimed at hopeseekr 
I know, thats why i said it, when someone says something like what he said, maybe it's because of something that an untrained eye cannot see but so far that code looks good.
NetBeans 6.9.1 with the [Zen coding](http://code.google.com/p/zen-coding/) plugin is a pretty sweet setup. The only thing it lacks, which is pretty hard to find, is live collaboration. Not even that important to me, but would be cool sometimes.
If you're going to do this you really should set a variable to the count before. The code in the middle block is executed every time resulting in a function call to count() for each iteration. $len = count($array); for($i=0; $i&lt;$len; $i++); **Edit: Alternate version:** for($i=0, $len=count($array); $i&lt;$len; $i++); 
I'm not talking best practices; I'm talking basic PHP templating a la... `&lt;textarea&gt;&lt;?php echo decrypt($x) ?&gt;&lt;/textarea&gt;` Or are you somehow not aware that you can open and close PHP tags as much as you want and pretty much anywhere you want...? D:
Use [winscp](http://winscp.net/) and set the default editor to netbeans (or whatever ide you are using).
Another vote for PhpEd. The integrated live debugger is what makes it worth the money, IMO. Saves SO much time. It's a fairly decent IDE as well, although I'm not big on the way it manages projects and workspaces. I just don't even bother with any of the syncing features. I use git anyway. I really like how it indexes the code to generate code hinting, though. This is another great feature. You can start typing a function that exists somewhere in the codebase and it'll pop up with the definition, and if there are comments above the function, it'll show those too. Really slick. Works awesome with a well-commented framework. I think it's easily worth the money. Way better than the free IDEs out there like Komodo, Netbeans, and Eclipse.
I can't stand Eclipse. It's glitchy as all hell and STILL doesn't integrate well with remote sites or source control years later. Eclipse is a Java IDE meant for writing Java - anything else just feels tacked on and clumsy. I keep trying it every couple releases and while it's gotten way better, it's still pretty miserable. If I were absolutely forced to use Eclipse for PHP development, I'd at least use Aptana.
I always wondered why people didn't use PHP shorttags. Could you tell me why you don't use them?
In good time ;D
Unless you plan to actually boot into the Ubuntu partition when you're working, I definitely recommend virtualization. You can't run both OSs simultaneously when done as partitions. With today's (even fairly commodity-level) hardware it's no problem to be running a VM concurrent with your Dev tools, browser instances, etc. I'll even run several VMs sometimes. I'll have a CentOS Image running the server. And a Win7 instance running for IE (on my MacBook). 
Snapshots, and good backups. I haven't had to rebuild a VM from scratch in years. 
Upvote for virtualbox. 
They resemble ASP tags too much, which makes me avoid them like the plague :p
They can clash with XML, which has syntax in the form &lt;?xml version="1.0" ?&gt;. If short_tags are on you cannot have that kind of syntax in your templates. Short tags are in fact how PHP started out, but then Rasmus found out that XML was already using it, so he changed to &lt;?php. The problem with short_tags is also that they are not universally enabled. If you code on entire site using short_tags and find out that the cheep hosting you've rented doesn't have it enabled, and doesn't allow you to change it, you're in for a bit of a headache.
Not all servers support short tags so not using them makes your code more portable. I've never actually run across a server that *doesn't* support them, but that's the reasoning behind it.
It's pretty easy to just echo the xml tag at the top, so I don't see that as a valid reason, really. And in the 1 in 1000 chance your host (it had better be your *client's* host and not yours--there's no excuse for not having control over your environment) doesn't allow short tags, it's easy to search and replace. These are the two reasons I've seen the most for not using short tags. I see them cited so often that I'm beginning to think they're a canned response! And frankly, neither is really a valid issue.
Only acceptable response to this question I've ever heard!
I've never seen one either--and when my code gets ported around, I'm usually the one managing the port anyway!
haha, if the 'i got 86 problems' is code for you trying to say 'i feel bad for you son,' thanks for the sympathy. ok, so this seems to be a .php file to create and close the .txt file. Now, I think that I am supposed to use this .php file in conjunction with an .html file with the 84 or 86 comments? If so, do I use the first line of my form, which is &lt;form action="/html/tags/html_form_tag_action.cfm" method="get"&gt; ...or something else? Or, do I not need another .html file. Is this all I need? Thank you again...
Yup, from http://php.net/manual/en/control-structures.for.php for ($i = 1, $j = 0; $i &lt;= 10; $j += $i, print $i, $i++); You can multiple things inside each expression. As for the memory management bit, you have to think about cases where the array you're measuring could be altered while in the loop. Likewise if you were using another function besides count() that depended on the array and you were changing their values. So you'd really want PHP to behave this way in the end!
I think they used to be insecure or maybe it's just that you can't be 100% sure they'll work...? Can't remember exactly; the long-form tags have become a habit (and also a macro in my text editor so I don't actually type them out).
&gt; Fuck no, I go here because I'm an experienced PHP developer and I like helping people out. Helping people out doesn't mean shitting on PHP. I don't care if you're experienced or not. I am also an experienced PHP developer and I happen to really like PHP. I don't really like Python, I don't really like Ruby, but I don't go on those subreddits and shit on those languages. If you don't like PHP, if you're not happy that you develop in it, great! Don't contribute to this community.
[PHPEclipse](http://www.phpeclipse.com/) is what i use for my PHP projects.
It integrates fine with remote sites, and i have 100,000+ SVN logs from the last three years. It integrates well with SVN. Eclipse is a fairly extendable IDE. It can be used for many languages (hence i use it) and there is a large community and a lot of support. I've never had any issues and it is running on workstation around 45 hours a week.
I don't use Windows to dev anymore, but when I did I used [WAMP](http://www.wampserver.com/en/). 
Using short-tags wouldn't have much affect when porting your code to another language, would it?
Netbeans. The code completion, autoformatting, phpdoccing etc. is just insanely good.
that php script creates an html output (it creates the input boxes and all) but if you wanted to parse the data from another page, so long as the inputs are named intput[0] and input[1] etc, it should still work (because it will still see the $_POST is there) (and on a side note this is a good time to mention cross site scripting vulnerabilities. If I had that script up on a server and knew it's layout then I could post to it from any website on the internet because we didn't put any logic in to test for that. [tl;dr: while this script might be fine for testing this is not set up for production usage.]) the title was just a random placeholder thought. :) 
I checked it out when I heard about it, with full intention to contribute (which I normally never have, because I really want to free a considerable amount of time for it), but because it wasn't written in PHP I couldn't. Too bad, but I still hope it becomes a success...
Actually it means whatever the fuck I want it to mean, and if that includes having an opinion about the language I've used for the last 10 or so years, I fucking will. You can write good code in PHP, but the language doesn't make it easy and so much is still a hangover from where it was a hack on top of c for perl users, as opposed to a well thought out language. 
Phpstorm - it's not free but it's very good. I usually try to recommend some open source solutions but there is a big gab between phpstorm and the rest of the IDEs. 
Agreed. They claim the code is not portable. Why not just put this line in your bootstrap code: ini_set('short_open_tag', '1'); That should let you use &lt;?=$var?&gt; as your script runs. For classes and your bootstrap file you should stick to the full &lt;?php tag but works for everything else. On the off chance you need to use XML and not the better JSON format, then for those specific pages handling XML you can just go to the full &lt;?php tags. Why does the template file need to handle XML? Why would you be echoing out XML directly to your normal page? Bizarre. Short tags work just fine.
It sounds like you've had bad experiences sour your judgement. PHP is a great templating system - but only if you do it correctly. Don't do any logic in your template files - pass all information to it from another file that contains your logic. Helps keep everything simple and better organized.
&gt; Why would you be echoing out XML directly to your normal page? Bizarre. Most often because they're using XHTML.
Part of being experienced is knowing the shortcomings of your tools. Sorry, but I don't see him bashing PHP, he's just acknowledging it sucks. Is he going around /r/php and repeatedly telling people not to use PHP? I don't see a problem with saying it sucks. It does. I've been a PHP developer since PHP1, and I also do Ruby. PHP is a pretty crappy language. Sure, it works. No I don't hate it. Yes I can rock out solid apps with it. None of that means I can't acknowledge that it's a pretty poor language overall.
There are a few people who have objections to your style, most people intuitively know there is a problem - because it isn't terribly easy to read - though the "canned responses", as pointed out, either leap to OOP or freenode-folk-knowledge and haven't been very helpful. The main issues I see are: - One letter variable names: even if the context seems obvious to you, it may not be to others, nor a future you (in a months time). You should make your code as self-documenting as possible, dont use comments to make up for the fact your code doesnt explain what it does. - Block HTML / HTML functions / HTML vars / etc.: There seem to be a few stages of php-html grief: 1. blind mixture, 2. hiding html in vars/fncs, 3. hiding php (smarty), 4. self-discipline . I suggest you skip stage three - it is quite absurd - and just learn how to integrate PHP into html in a responsible way (no business logic, only echos and loops - conditionals in *very small* apps). - 'Bunched code' - It looks as though you're trying to squease the most amount of statements into the least amount of space - those challenges are set at 'bad programming' competitions. You should write code *to be read by humans* - syntax is restrictive enough without actively trying to obscure code. This means just putting spaces in logical places, grouping logic visually and by var/function name, etc. - Commenting: comment *why* not how. How should be clear to anyone who knows php. Tell the reader what the function / piece of code hopes to achieve and any non-obvious decisions made when writing it. What's $iv, what's $c - why are you passing them around? ... What's going on? Something at the top of the file, describing the general approach, or in the comments of a fnc would be helpful. 'Get an initialization vector and its size, 64encode and save it in the {MCRYPT_IV /} header'. Very Quick Example: http://pastebin.com/rcg3cZME - Largely just search/replace, copy/cut/paste - so i dont expect it to work without some minor debugging. It does NOT do everything that it should - still, largely because i didnt want to sit and work out the purpose and flow of the script. With good commenting it is, i think, much clearer and more logical. Conclusion: You dont need OOP to have clean, logical code - but you do need clean, logical code.
Er... this may be in the wrong place ;)
I do try to avoid this type of thing because it seems to be a PHP only kind of deal. I'm not saying defining all your basic page composition in constants is the best idea but those 'php things' kind of weird me out.
Correct! When they say "portable" in this context, they don't mean porting to other languages but rather moving code to a different server environment. The argument is that not every server supports short tags, so if your code gets moved it could break. (But I've never seen a server not support short tags, and usually I manage those servers when my code gets moved anyway...)
I believe you responded to the wrong article. 
I agree, the "proper" way to do this would likely make it way more complicated than it needs to be / is now. KISS, especially when the requirements are simple.
Alright friend, thanks to you I am finally making headway in this project and I see the end in sight. So far so good! I can't thank you enough for this help... this is impossible for me. http://www.geneseo.edu/~dlf2/ This is the site, and you can try it yourself if you'd like! I had to change the "testfiles.php" to "index.php" because on my college's server you must use "index" for it to read. I went through and changed every instance of "testfiles" to index", but I'm getting an error and no .txt file is exporting. This is the error: Warning: fwrite(): supplied argument is not a valid stream resource in /Web/dlf2/public_html/index.php on line 24 ...but I recommend you try it yourself so you can see because much more than that comes up as errors. Is there an easy way to fix all of this? MANY thanks to all.
Reading over these, it sounds like I do things a bit differently. * Create repo on remote server where I store all my git repositories (private server for client code, or Github if I'm doing something open source) * Make a local clone, staging clone, production clone. * Make changes to local code, branching as needed for new feature additions, merging to master branch after testing on local server. * Push to remote server. * Pull staging server, test, make any necessary changes, once it all works, tag it. * Update to tag production server.
Better than NuSphere PHPEd?
Notepad++ is all I ever use anymore.
I would highly recommend you get a merchant account and get behind a very simplified API like Authorize.net. Then you can build your recurring payments system on top of them or use something like Chargify.com. It will be more flexible for you and slightly cheaper.
Thanks. I'm looking into other options, too... I would still like to know if this is possible with Amazon's system, though.
Hello to r/php from r/gaming.
The only thing I miss in the features is code blocks, besides that I love it!
Does N++ support FTP? I use Crimson Editor and like it a lot, but it crashes often when editing remote files.
Yes, i was thinking, "Is nobody using UE??", it's my day to day tool. I tried finding a replacement, but never get used to any alternative, for me it's fabolous, altough i miss some things 
&gt; No multiple-column primary keys Bloody hell that's bad.
Is this offer still actual? I would be interested.
&gt; As you can see, my needs are pretty straightforward and simple. No they are not.
It's a fair criticism but did you not have anything constructive to say?
I disagree. "Simple" is relative. "Code this from scratch and make it work Simple", no. but for a service that's specifically designed and marketed as a tool to "make accepting payments on your website easy" those needs are pretty basic and a a fundamental part of virtually every web app on the internet, so they're tasks that any such system should be able to handle.
im under the idea that a merchant account is hard to get... you need to move big money for the bank let you have one, am i wrong?
IIRC that was an addition to the spec after people pointed out that a lot of what they were proposing already existed.
Picture Facebook. Ok, no... way too many features. Remove everything but the basic ones. Right, now imagine if a lot of those features were buggy or incomplete. Good. Now imagine if many of those features had security holes. There we go!
That was actually a pretty simple task. I did it by using explode to split the string into words and then i filtered out those without an @ in them and trimmed the &gt; &lt; and , away. The email addresses are stored in $emails. Here's the code: $words=explode(' ',$str);$emails=array();foreach($words as $word){if(strpos($word,'@')!==false){$emails[]=trim($word,'&lt;&gt;,');}}
Your code works, but that isnt a one liner. its a 7-liner: explode(' ',$str); $emails=array(); foreach($words as $word){ if(strpos($word,'@')!==false){ $emails[]=trim($word,'&lt;&gt;,'); } } 
Not sure if this will cover everything, but it is the closest thing I could come up with. &gt; preg_match_all('/([A-z0-9.%_+-]+@[A-z0-9.%_+-]+)/', $str, $emails);
One-liner that works about 99% of the time: $output = preg_match_all('/[a-z0-9._+-]+@[a-z0-9.-]+\\.[a-z]+/i', $str, $matches) ? $matches[0] : array(); Not a one-liner, but more correct solution, using [this library](http://www.phpkode.com/scripts/item/mime-e-mail-message-parser/): include 'rfc822_addresses.php'; $parser = new rfc822_addresses_class; $parser-&gt;ParseAddressList($str, $output); 
I forgot to add no regular expressions!
im looking for a one liner without using regular expressions
Portable design: template engines (try [Twig](http://www.twig-project.org/) or Smarty) This will separate the View (frontend) from the rest of your code in any way you feel comfortable doing, and also allows customers to modify the design to their needs without having to manage PHP code.
I don't remember seeing "without using regular expressions" when I first read your post. Did I miss it or did you add it later? Anyway, let me try again in a while... Can I use PHP 5.3 closures? Or does that count as multiple lines? :) Edit: I posted another one-liner that uses a closure.
I would not have user connections be responsible for long file transfers. I would leave it as a cron or gearmand job. Same with SSHing. That should be handled by an unseen backend process. i.e., 1. user makes a request. it enters a queue 2. a running process in the background notices a new item in the queue and processes it
&gt; im looking for a one liner without using regular expressions In 1 line? Ya right. Can you do it? Let's see your code.
Here's one without regular expressions. It uses a closure, so I'm not sure if this would satisfy your definition of a one-liner. $output = array_map(function($str){ return trim(strrpos(trim($str), ' ') === false ? trim($str) : substr(trim($str), strrpos(trim($str), ' ') + 1), '&lt;&gt;'); }, explode(',', $str)); _Edit: It's actually a one-liner. I split it into two lines to get rid of those annoying scrollbars._ It can parse your string, and it'll probably also parse some variations of it. I specifically accounted for the case where there might not be a space after each comma, or an extra space before a comma. But it does require there to be at least one space between the name and the e-mail address. Obviously, it'll also break if there's a comma in the name or e-mail address.
Why do you need 3 files? You can do it with one, something along the lines of this maybe? http://pastebin.com/3DBgixLF
 $a = array_map(function($x) { return substr($x, substr($x, -1) == "&gt;" ? strrpos($x, " &lt;") + 2 : 0, substr($x, -1) == "&gt;" ? -1 : strlen($x)); }, explode(", ", $str)); Here we go EDIT: PHP 5.3 only
Sorry if I didn't make it clear in me original post, but that's how it works. The user sends the request to the backend server, which disconnects them and runs the task.
nice! definitely consider that a one-liner. My version used closures too.
here was mine: $extracted_emails = array_map( function($v){ return trim( end( explode( '&lt;', $v ) ), '&gt; ' ); }, explode( ',', $str ) ); 
I don't think that if the ultimate purpose is portability and just being able to 'incrust' the app within another page as a widget or something relying in third-party libs would be advisable. I think he can achieve MVC separation with pure well written PHP
That's not one line, you have ;'s in there.
you're a moron
No offence, but given that you're asking how to write portable code, do you think that your PHP application is good enough to be distributed commercially? Have you taken security, performance, scalability, flexibility etc. into account?
[PHP is already a template engine](http://codeangel.org/articles/simple-php-template-engine.html). You can separate View from Controller without having to rely on an external library.
I know there is a small market for what I am doing and I know there are people who will be interested in it. I am also using this as a learning opportunity.
[Download the source.](http://php.net/downloads.php) and open up /ext/date/lib/parse_date.re (and the subsequently generated parse_date.c)
If you do go the route of having it be something embedded into their page, you have to be _very_ careful to make sure that all of your classes are named such as to not possibly collide with anything the site owner might be using. You could accomplish this with namespaces, but then you'd be constrained to PHP5.3 only. The easier solution is to just prefix all your class names with something unique, like an acronym for the application. The best way to make sure your app is easily embeddable: Make a new website completely unrelated, and try to embed it.
&gt;Portable design: template engines (try Twig or Smarty) * Template engines do not constitute a portable design. Sure, your design might incorporate a template engine, but simply having one does not make your design "portable". * PHP is its own templating language. There's no reason to add another one to the stack. You could include the view script directly or handle it through a template class a la PHP Savant, Zend_View etc. &gt;and also allows customers to modify the design to their needs without having to manage PHP code. Irrelevant. The customers would still need to learn a language. Does it really matter whether it is PHP or Twig/Smarty/whatever?
Okay, but back to the questions. Is it good enough to be distributed? Is it secure? The reason I am asking is because you do *not* want to leave a gaping security hole on a customer's website. 
timdorr gave a nice answer
hey, i'm making it because i want a quiz and learn something. i have done a bit of code but i cant seam to get it to work, i dont know enough. should be something like this: http://www.elanman.co.uk/2009/03/make-your-own-php-quiz-part-1/ But not calculate true or false. Like it should be "witch color are you?" and by awneser some questions get a result. First of sorry for my english i am from sweden. If you would like a little project and help me that would be awesome! Best regards, Toby
Can you give the wget command you are using? I've tried wgetting with my phpseclib install and everything worked fine. Have you tried manually making an SSH connection and trying the wget command?
I think it will work without semicolons within one line functions but it just doesn't look right.
Everything in the database is stored with mysql_real_escape_string, login is required before any data can be submitted, only certain HTML tags are allowed, passwords are not stored in plain text, etc. I am confident that I do not have any gaping security holes. Although I am not familiar with creating a portable PHP application, I am not new to PHP development by any means.
 $emails = array_map(function($s){return filter_var(end(explode(" ", $s)), FILTER_SANITIZE_EMAIL);}, explode(",", $str));
You'll get a parse error if you omit the semicolon inside a closure.
&gt;Everything in the database is stored with mysql_real_escape_string * And how are you handling non-string expressions? * What about data retrieval? &gt;login is required before any data can be submitted How are you doing the authentication process? &gt;passwords are not stored in plain text How are they stored? &gt;only certain HTML tags are allowed How are you handling the sanitation? 
Oh, my bad.
Luckily, there is no "app store" oversight when it comes to this. You can sell whatever you want to in whatever quality it may be in. Its up to the customers to decide if they want to buy.
foreach(split(" ",$str)as$n)!strpos($n,"@")?:$e[]=trim($n,"&lt;,&gt;"); $e will contain the emails. can make ik smaller by inverting the strings with ~: foreach(split(~ß,$str)as$n)!strpos($n,~¿)?:$e[]=trim($n,~ÃÓÁ); anyway... will get some notices :P Edit: incase you don't consider this a oneliner: for($m=split(ß,~$str);$n=$m[++$i];!strpos($n,¿)?:$e[]=~trim($n,ÃÓÁ));
`end()` is cool, but use `error_reporting(-1);` and see what happens :)
Variable payments is easy. Monthly payments are easy. Variable monthly payments are not easy. At least, making them not exploitable (by any of the sides) is not a simple thing imho. And I really dont think variable monthly payments are common sight in internet web apps. Now, sure I dont have experience with Amazon FPS (my company went with a different payment processor), but I really dont see how you can say that variable monthly payments are something that is, or should be, simple to do. 
Honestly I don't feel like I have to explain everything to you. I know what I am doing. Just because I haven't had to think about the portability of my code before doesn't mean I am not a competent developer.
Dont worry if its "good enough". I suggest creating an install script, that will create and populate(maybe) the db tables needed, and accept user input for DB details and write that to a file. Set it up so someone can just include the app within their site, then detail what styles do what, so they can customize it. As a bonus, offer to set it up for them for a small fee.
Thanks. I've been looking at other people's scripts for calendars and such, and it seems like there is really not as much to it as I thought. 
Dude, relax. You don't need to go into defensive mode just because I am asking you a few questions regarding your application. You asked for advice, and in order for me to give you advice I need to know what it is you've already done.
Have you looked into Phar?
Nah dude. You're trolling the guy. Security is an absolute priority, but it has nothing to with the mechanics of packaging an application bundle.
Thanks for downvoting all of my posts and telling me that I am a troll.
Not at all. You don't even need to have a fully operational business. I've used e-onlinedata and CDG Commerce before. Both had a relatively easy setup process. Just some forms and faxing to do. 
Are you saying it's wrong to echo html with php? Or are you saying it's wrong to show noobs how to do this? edit: In other words, I'm just asking for clarification of your point.
Sorry. The authentication checks the username and password entered against a database where the password is a MD5 hash value. Depending on the user there are 3 levels of authentication "author", "editor", and "administrator" kind of like WordPress has. It uses a $_SESSION variable to store the authentication key. The submitted content is sanitized like this: $content=mysql_escape_string(strip_tags($_POST['content'],"&lt;p&gt;&lt;a&gt;&lt;b&gt;&lt;strong&gt;&lt;i&gt;&lt;em&gt;&lt;u&gt;")); And I'm not sure what you mean about data retrieval? It uses a MySQL SELECT statement, mysql_fetch_array, and stripslashes() 
wget -O &lt;filename&gt; &lt;link&gt; It works with direct SSH, and works in the script 100%, 90% of the time. just every once in a while it fails. Do you think it would be better/easier to just have some way of checking if it was wget properly and re-trying if not? Thanks for the reply.
 $extracted_emails = array_map(function($v){ return trim( end( explode( '&lt;', $v ) ), '&gt; ' ); }, explode( ',', $str )); Looks like 3 lines to me. If you're going to give [onygren](http://www.reddit.com/r/PHP/comments/h6625/one_liner_challenge_1_extract_emails_from_a_string/c1sv2bp) shit for his post maybe you should practice what you preach. EDIT: BTW YourAMoron is probably the best idiot test user name I've come up with so far. If you correct it I can almost guarantee that you are the moron.
I'm not trying to be argumentative, this is just new territory for me and I'm trying to get my head around it. :) In my mind, it's essentially the same as upgrading/downgrading an account to a different subscription plan, which is something every hosting company, web app, or other subscription-based service offers. Maybe I didn't express what I'm trying to do clearly enough - entirely possible. Or maybe I'm confused, which is also entirely possible. It's not like I will have some services for $5, some for $10, etc. and you build an a la carte plan for whatever services you would like, and no changes in billing amounts would be made without an approval action by the user. That would be quite difficult/involved, I agree. What I'm doing is this: The web app offers one thing. You pay $12/mo for that one thing. If you want two of that one thing, you pay $24/mo, 3 is $36, etc. I can't imagine anyone needing more than, say, 10, but I'd like to just be able to change the billed amount rather than set up and change between 10 subscription plans, but I'm open to changing subscription plans if that's the easier way to go about it. It's just that I didn't see an easy way to change the plan using Amazon's Simple Pay Subscriptions, so was wondering about how it would be done with FPS. That said, I'm not tied to Amazon at all. It just looked like a viable option that I'd heard good things about and had been interested in trying. If anyone has better suggestions, I'm all ears.
Namespaces and a smart deploy script. Also, good documentation for integration. Additionally, maybe look into an embed API.
&gt;The authentication checks the username and password entered against a database where the password is a MD5 hash value. MD5 is not a secure way of storing passwords. It is [cryptographically broken and US-CERT is advising against further use](http://www.kb.cert.org/vuls/id/836068). Please consider using [bcrypt](http://codahale.com/how-to-safely-store-a-password/) instead (available through PHP's [crypt()](http://php.net/manual/en/function.crypt.php) with CRYPT_BLOWFISH). &gt;It uses a $_SESSION variable to store the authentication key. Okay. Just remember to [regenerate the ID](http://se.php.net/session_regenerate_id) each time the user logs in to prevent [session fixation](http://shiflett.org/articles/session-fixation). &gt;The submitted content is sanitized like this: &gt; $content=mysql_escape_string(strip_tags($_POST['content'],"&lt;p&gt;&lt;a&gt;&lt;b&gt;&lt;strong&gt;&lt;i&gt;&lt;em&gt;&lt;u&gt;")); Huh? First of all, mysql_escape_string is deprecated and relying on it is "highly discouraged". Either use: 1. [prepared statements](http://php.net/manual/en/pdo.prepared-statements.php) (recommended). Both PDO and mysqli has it. Or.. 2. mysql_real_escape_string for escaping strings, and cast anything which isn't a string to its appropriate data type (e. g. integer for IDs). Secondly, mysql_escape_string doesn't sanitize HTML. It's only used to make sure that the string you've supplied cannot escape the SQL string expression. Use a HTML parser instead. [HTML Purifier](http://htmlpurifier.org/) is a popular choice. &gt;And I'm not sure what you mean about data retrieval? It uses a MySQL SELECT statement, mysql_fetch_array, and stripslashes() I was talking about the user input used to fetch the appropriate records, e g. http://mydomain.com/script.php?id=5. IDs aren't strings, and mysql_real_escape_string won't protect against anything which isn't used in a string expression. You need to properly cast the input values to its appropriate data type if you're going to inject these into your SQL statements. Alternatively, use prepared statements, as previously stated. By the way, if you're using stripslashes() in an attempt to sanitize your queries, that won't help you at all. PS. Remember to protect against [CSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) attacks. You can do this easily by adding a hidden form field with a value which is generated upon each page request. Also store the generated value in a session. When the user posts the form, simply match the value in the POST data against the value stored in your session. If they match, the request is valid. Otherwise, display an error screen and ask them to resubmit the form. Good luck. **Edit**: I give up. People are just gonna downvote everything I say in this thread. seveneightn9ne, If you want to continue this, I'll be available via PM. 
Ok. Same command I was testing :). If it works 90% of the time, it's probably unrelated to phpseclib or wget and perhaps something happening on the server you're downloading the file from. If it fails, does wget report or log anything interesting at all? I assume you've already tried the -o and --debug options? Alternatively, you could also use curl to download the file.
I don't know a whole lot about the Diaspora project past or present other than it seems 'neat', so I probably shouldn't be commenting about it. I just happened to Wiki OMB after reading his (p4bl0) comment and saw Diaspora mentioned there. I do completely agree with the OP though - it should have been done in PHP. 
I actually haven't tried with --debug, that's a good idea. Previously I just redirected all output into a file. Basically it just ends output, nothing special. I have a separate $ssh-&gt;exec() that echos "done" into the same file. It looks like this when the error happens: 3550K .......... .......... .......... .......... .......... 49% 9.03M 3s 3600K .......... .......... .......... .......... .......... 49% 1.02M 3s 3650K .......... .......... .......... .......... .......... 50% 5.85M 3s 3700K .......... .......... .......... .......... .......... 51% 8.59M 3s 3750K .......... .......Done As compared to when it works: 7250K .......... .......... .......... .......... .......... 99% 198M 0s 7300K .......... .......... .......... ...... 100% 241M=6.3s 2011-05-07 08:27:17 (1.13 MB/s) - `[redacted]' saved [7512125/7512125] 0 Done The 0 is the exit code, which is echoed in the same $ssh-&gt;exex() as the wget command. And I believe I tried curl in the past with similar results, making me think it may be an SSH-related problem. But I'm not sure what would cause it to just drop the channel mid-action..
Nicoon you trolled the fuck out of him he just wanted to know how to make his already made app into a portable format to be reused on other sites. If he wanted a lesson on securing his website he would have asked for it, hell he even complied with what you were saying and provided his method of security in detail, then you took it upon yourself to troll some more. Honestly provide constructive feedback, or go back to that bridge. seveneightn9ne keep doing ur thing brah! 
&gt; Template engines do not constitute a portable design. Sure, your design might incorporate a template engine, but simply having one does not make your design "portable". He wants to allow people to modify the design easily. I hope you don't actually think handing someone PHP code interspersed with the frontend is practical at all. Find me one reputable piece of portable and extendable PHP software which does not use a template engine, and we can start from there. &gt; PHP is its own templating language. There's no reason to add another one to the stack. You could include the view script directly or handle it through a template class a la PHP Savant, Zend_View etc. Are you serious? PHP is a terrible templating language, and abandoned all intention of being a template engine a long, long time ago. If you read my link, the beginning starts with: &gt; When it comes to template engines in PHP, many people will tell you that PHP itself is a template engine. But even if PHP started its life as a template language, it did not evolve like one in the recent years. As a matter of fact, it doesn't support many features modern template engines should have nowadays: And goes on to list feature after feature and reason after reason why using PHP as a template engine is usually a terrible idea. In addition, separating template logic from code itself has security and organizational purposes as well. &gt; Irrelevant. The customers would still need to learn a language. Indeed, they *may* have to learn a language, but instead of being a more procedural language like PHP has become, it is a structural and logical language which is *designed* to be understood by frontend developers rather than programmers -- the exact demographic the OP is concerned about. You do not want people modifying template code only to mess up and introduce a security vulnerability, create a bug, etc. Template engines abstract these features and give frontend developers the freedom to manipulate and reorganize the layout without causing harm to the actual script.
haha i wasnt correcting your username. you're taking things way too seriously. and theres obviously a difference between $x=1;forech(){};explode(); and the code ive posted(if you dont see it, keep practicing).you can tell because other people have posted similar code. anyways....relax
I'm not trying to troll him, I am trying to help him out by verifying the quality of the product. If he were to sell a bad product that could potentially damage his reputation and even land him a lawsuit. That's not something he would want to happen. And no, it isn't about his original question, it is a side-discussion about the product he is trying so sell. So what? &gt;Honestly provide constructive feedback [I have](http://www.reddit.com/r/PHP/comments/h66nn/how_would_you_create_a_portable_php_application/c1svseq). 
Please read the (Twig) link I posted. The very beginning explains how PHP has become obsolete as a template language, and how using a template engine provides several benefits for development and deployment of PHP software. Also, I have never seen reputable software which didn't use a template engine and actually had a portable frontend. At least, not in the last 6 years.
Thank you.
&gt;I hope you don't actually think handing someone PHP code interspersed with the frontend is practical at all. I am not advocating that you should mix HTML and business logic. That's directly contrary to what I have been saying. &gt;Are you serious? PHP is a terrible template engine PHP is an excellent templating engine if used properly. Look at Zend_View, PHP Savant etc. &gt;In addition, separating template logic from code itself has security and organizational purposes as well. Again, I haven't been saying that you should mix markup with business logic. &gt;it is a structural and logical language which is designed to be understood by frontend developers rather than programmers -- the exact demographic the OP is concerned about Not true. PHP isn't any harder to learn for templating purposes than what Smarty (or probably even Twig) is. They both have programming logic which directly maps to their PHP counterparts. You have not abstracted this away. I quote from Smarty's documentation: &gt;One design goal of Smarty is the separation of business logic and presentation logic. &gt;This means templates can certainly contain logic under the condition that it is for presentation only. Things such as including other templates, alternating table row colors, upper-casing a variable, looping over an array of data and displaying it are examples of presentation logic. So yeah. Still got the very same programming logic PHP has, therefore not making it any more easier to learn for front-end developers than learning PHP would. &gt;You do not want people modifying template code only to mess up and introduce a security vulnerability If you're introducing a security vulnerability simply by making a typo in a template, then clearly you are using it the wrong way. Business logic shouldn't be present in your templates at all, so it shouldn't matter. I also quote from Smarty's documentation: &gt;This does not mean however that Smarty forces a separation of business and presentation logic. Smarty has no knowledge of which is which, so placing business logic in the template is your own doing. 
Off the top of my head: 1. Use the full tags. `&lt;?php ... ?&gt;` not `&lt;? ... ?&gt;`. 2. If your application makes database queries, you're going to need to deal with the possibility of some servers having [Magic Quotes](http://php.net/manual/en/security.magicquotes.php) on. There's a PHP function that will return true/false depending on whether its enabled or not, and you can strip the added slashes if that is the case. 3. Your functions, classes, global variables, etc. should be prefixed with something that is unlikely to collide with another script. e.g. rdwl_my_function() instead of my_function(). 4. Installation needs to be as automated an idiot-proof as possible. WordPress is a good example of this, and there still are hordes of people who can't figure it out, even with instructions.
How weird. You're logging both stdout and stderr, right?
Yep, &gt;somefile.txt 2&gt;&amp;1 For example: $ssh-&gt;exec("wget -O ~/path/to/file.ext ".self::AWS_LINK."path/to/file.jar &gt;&gt;~/last-update.log 2&gt;&amp;1;echo $?&gt;&gt;~/last-update.log");
i actually laughed out loud at this. upvote for you
&gt;without using regular expressions. Now that just isn't fair... :(
 require('my_awesome_magic_email_library.php'); $emails = new emailArray($str); There. You said no regex, but you didn't say no abstraction. :P
No, I mean you're right -- they are using OpenMicroBlogging now. My point was that it seems like they didn't even know something like that existed until someone pointed it out.
In that case I'm stumped as well. I'm starting to follow you in your reasoning however that phpseclib/SSH is the culprit (looking at your output and the exec command). Function exec in SSH2.php returns the output based on the result of the \_get\_channel\_packet function. You could try to put some quick logging code there as well, i.e. at "case NET\_SSH2\_MSG\_CHANNEL\_CLOSE:". It won't really help you fix the problem, but at least you'll be sure that the channel gets indeed closed.
I will try that- thanks for all your help and time. Right now I just have it loop until it gets the file successfully- should stop the issues I've been having for now, and since the server forks it won't hold up anyone else. Thanks again! :)
its just for US residents? im mexican, living in mexico.. im gonna go check it out anyway thanks
You're welcome. For the record, I only downvoted one of your posts.
Would it be possible to store the questions in a database and then specify the flow between questions in there? Just thinking aloud, something like Q1 =&gt; (Yes -&gt; Q2, No -&gt; Q3), and so on and so forth.
If what you want is to modify the value in-array, you can use a reference foreach ($arr as &amp;$value) { $value = 'new_value'; } 
Yeah, it sounds like what you need is a User class that interfaces w/ your model and is then usable from any of your controllers. 
I think you're actually describing two issues here: Your business logic should be contained within your models and services (this is the thing you're referring to as a "library"). This will leave very little code in your controllers -- they should do little else than managing request/response. If you do this, then even if you have a controller that is dedicated specifically to ajax requests, then there won't be much, if any, code duplication involved. However, you can also frequently handle ajax requests in the same controller (or action) as your non ajax-requests if you implement some sort of context-system or specific response and/or view types. Zend Framework for example, implements something called "Context Switching" which allows you to define different types of contexts for your response data (e.g., xml, json, html, etc). This means all you have to do is set the appropriate values on your view, and then the actual type of response is determined by the requested context. With this approach, there really is no duplicated code necessary at all.
a simple two-dimensional array could represent the relations (or paths) in the maze: $links = array(1 =&gt; array(2, 3), 2 =&gt; array(3, 4), 3 = array(4)) After that you have to store the individual pages or their texts in a file or a database. Then fetch the current page content depending on a $_GET variable. You show the options by checking the beforementioned array. You didn't mention if the pages differ by html or just text.
Sounds like a "choose your own adventure" script would suffice. http://www.iamcal.com/games/choose/room.php this one is open source Just change it up so your questions and answers are appropriate to whatever it is you're trying to do.
I would suggest writing it all up as a single page with external images/js/css, no php required. You could write it all up like an image slider so that the visitor is presented a fancy css3 or image providing the statement and the yes/no options. From there, when a visitor provided the response given statement you could, via javascript/jquery, show the next step and repeat. It would be a simple page that could be very elegant with fonts and animations. If you have knowledge of jquery and the like this should be an afternoon delight. 
Ok, I'll try to give a bit of an example here. Say you have a site with a bunch of user types. You have regular members (free users), clients(paid users), different types of clients (lets say auto dealer and auto repairmen). On top of that, you have associate accounts (for employees) and admin accounts. Now, all users are going to have some information that functions the same - email, password. So you create a user controller that handles those things, and all of your extended user models can share that code. You'll have the same thing in your client level. Some things will be the same across clients, maybe address, phone, business hours. So you create a controller for clients, that is used for processing these things. As for ajax, I tend to handle it and traditional requests with the same controller. For the most part, you are processing the same data, the output format is the only difference. I just add an additional variable, when present, encode the return with json, and when not, handle like I normally would. A controller does not have to display a template, or even output results. It simply handles a request.
I doubt anybody is going to steal my secrets or guess my ideas from my classes, but what I have is a coupon class, a deals class, and a stores class. None of them are particularly dependent on one another, but when a user enters in a new coupon, my view has the ability for them to enter what store the coupon is for. (the deals are store specific, but I want to tie the deals in with the store and the coupons eventually)
I'm not actually using a framework at the moment. I've wanted to learn ZendFW, but haven't actually gotten around to it. My application isn't large and is mostly for fun and practice. I'm really trying to get down the basics of PHP and OOP for now. Also, I thought business logic went into the controller and DB specific stuff went into the model. Am I doing it wrong?
&gt; but what I have is a coupon class, a deals class, and a stores class. Do you mean classes (as in libraries) or classes (as in controllers)? There should be one for both. The controller calls the class to gather the data to send to the View. You should not store general functions in your controller. The functions there should only handle requests. To load the library classes, use spl_autoload_register(). It will include the library for you when you first call it. Put these library classes in a separate folder from your controllers, and make sure to check that the file exists before doing the include in spl_autoload_register(). That way, there will be no conflict between your library classes and your controller classes.
You have to represent all the "choice" contexts. I would make a bunch of classes with renderView methods and some javascript to do ajaxy loading. Every class view can have behavior submitting what class to autoload next. So yes, 100 separate class files, but only 1 view file and an interface that 100 classes must implement, but no specific file structure.
If youre not using a framework, you could maybe mimic context switching quickly just by passing in a $\_GET variable? Dont make the ajax call to an Ajax controller, but to the same method of your User controller. example.com/users/index.php vs an ajax call to example.com/users/index.php?ajax=true Then in your User controller, index method: $ajax = (isset($\_GET['ajax']) &amp;&amp; $\_GET['ajax'] == 'true') ? true : false; //any User#index code non-essential to the ajax call if(!$ajax){ } //any User#index code non-essential to non-ajax call if($ajax){ } display either the full template+layout if !$ajax, or return a barebones template if $ajax.
Yes, it would. It could be as simple as having a questions table (one - to - many) and an answers table. The answers table would have a field that tells the script where to go next.
Save the relation in the database and cut out all of the classes. You could do the thing with one class and one view.
The problem with this solution is the OP has 100 entries. That is a lot memory to eat every time the $links array is created, also this makes it extra fun to edit the data in the array. 
Do you have access to Imagick? You can also call image magick from the command line if you can't get Imagick on your server. [using exec](http://www.rubblewebs.co.uk/imagemagick/other.php?info=composite_sunflower_soft.jpg) 
If all your answers are yes no, you could implement a binary search tree in a database (two columns: question number (auto increment starting at 1), question text) To get the next question number: If answer is negative multiply the current question number by 2. If answer is positive multiply the current question number by 2 then add 1. 
Well for your specific example, I would just use the same action. That action should detect whether it's an ajax request or not. As a index list, it should support pagination and filtering, etc. So it does that, fetches the data, if it's a normal request it passes the data to the view. If it's an ajax request it either spits out json, or spits out an html partial of just the user table.
I will check that out. Thank you!
http://framework.zend.com/manual/en/learning.quickstart.intro.html
The [official documentation](http://framework.zend.com/manual/en/learning.quickstart.intro.html) is a decent place to start. The tutorial WarRabbit linked to is pretty much the gold standard ZF intro.
This is the best one I've looked at so far. Thanks!
Not sure, but I'd bet there are merchant account providers down there too :)
What do the logs say? You can enable logging by doing the following: &lt;?php include('Net/SSH2.php'); define('NET_SSH2_LOGGING', NET_SSH2_LOG_COMPLEX); $ssh = new Net_SSH2('www.domain.tld'); if (!$ssh-&gt;login('username', 'password')) { exit('Login Failed'); } echo $ssh-&gt;exec('pwd'); echo $ssh-&gt;getLog(); ?&gt; I kinda have to wonder if maybe the socket is timing out. Here are two posts I found on the phpseclib support forums from someone having a very similar issue: http://www.frostjedi.com/phpbb/viewtopic.php?f=46&amp;t=18135 http://www.frostjedi.com/phpbb/viewtopic.php?f=46&amp;t=20090 Maybe what worked for them would work for you! Alternatively, I wonder if the read() / write() modes that are present in the latest SVN might not work better for you. Here's an example of how to use them: &lt;?php $ssh = new Net_SSH2('www.domain.tld'); $ssh-&gt;login('username', 'password'); echo $ssh-&gt;read('[prompt]'); $ssh-&gt;write("ls -la\n"); echo $ssh-&gt;read('[prompt]'); ?&gt;
I will set up a thing that emails me the log when an error happens- it's hard to make it happen. I think the socket may be timing out, which I might be able to solve with the socket_set_timeout as mentioned in those threads. I'll post when I have a log. Thanks! I'm not sure if the write() method will do any better if it's indeed a timeout issue.
Here's a project. Make a CMS that you can drop into a subfolder on any static website, and then edit the XHTML/CSS to include those PHP snippets in the XHTML. It would pull the content from the database, and then cache in a file cache. If you edit the database, the file cache is marked dirty, is flushed for that content, and the cache is rewritten for that content. Give the mini-CMS a jQuery-based rich editor like CLEditor, and then use a jQuery-based image editor so that one could resize and crop images too. Then, add a file upload mechanism so that one could upload videos, zips, and PDFs (and other files) that people could link into their XHTML snippets. Keep the interface super simple -- sort of like FrogCMS, and nowhere near as complicated as WordPress. Also, have you considered Kohana? It's a better fork of CI. However, ever since the rewrite from 2.x to 3.x, the docs kind of have holes, but all and all I find it an enjoyable framework to work with. Note that Kohana 3.x no longer has built-in XSS protection. And why? Because XSS evolves too fast. Instead, Kohana docs now point you to an up-to-date XSS protection cheat sheet so that you can improve your code to block XSS. If you put it on Github and open source it, I can assist you on this project. See, I need this very thing for a client I have in Columbia, SC, USA. I need a system where they can tweak content without having to contact me so often. See, as a freelancer, often times a frequent request I get for an organization or small business website is just a CMS thing. So, I get the wireframes and designs run through my client approval and a designer. This gives me a PSD image set. I then chop these into XHTML/CSS and then sprinkle in some jQuery. However, that only makes a static website. It would be great to be able to turn the static website into a CMS.
Here's a comment I posted a while ago that might help. http://www.reddit.com/r/PHP/comments/gw2j0/mvc_what_is_the_model_used_for/c1qp280
`isset($_SERVER['HTTP_X_REQUESTED_WITH']) &amp;&amp; strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest'`
business logic - how you want your data to be handled; your model is your data itself, and how you want it accessed; a service typically handles db, but it's often done within the model as well (ie, if you only have one database type). your controller should be doing presentation logic -- specifying what variables and data that needs to be displayed.
simple. make a truth table. every variable represents a question, and its value represents its answer -- 0 = no, 1 = yes, x = don't care, haven't answered. every single permutation should direct to a page. there will be 2^n permutations, where n is the number of questions, but if the flow design is linear, you should have a LOT of don't cares. you can implement this table any way you want. i.e., a database table with a separate column for every question. you might not even need a database. personally i would have a flat file or even a php array with all the possible values and the page they should point to. for example: Questions: Q1 = Do you have a dog? Q2 = Is it a german shepard? Q3 = Do you have a cat? Ill combine these variables bitwise so they're represented as Q3 &amp; Q2 &amp; Q1, and represent the binary term as a decimal number. start with Q1, then... 0 = 000 =&gt; Q3 // doesnt have a dog. ask about cat 1 = 001 =&gt; Q2 // has a dog. is it a shepard? 2 = 010 =&gt; XX // not a possible outcome 3 = 011 =&gt; Q3 // has a shepard. next question 4 = 100 =&gt; QN // has a cat. next question 5 = 101 =&gt; QN // has a cat and a non-shepard dog. next question 6 = 110 =&gt; XX // not a possible outcome 7 = 111 =&gt; QN // has a cat and a shepard. next question. The lookup should be O(1), so really fast. Adding a database will really hurt performance, but could make your life easier if you're a beginner and don't want to go through the mess of making a bitwise LUT -- ie., you could specify the columns in MySQL dynamically, and "don't cares" will be a great deal easier to deal with since you can query for only the columns you care about. For every user's action, flag the event, store it, and look it up against the table. Best practice is to store this in a session, but you could even get away with storing it as a GET variable. Recommend scoping the bitwise pair to the relevant stage in the workflow. IE, by Q2, you've only answered one question, so only the one lowest bit is relevant. this will make life easier...unless the questions can be all over the place. 
really, really, really should not use exec. bad security practice and will not work on non-nix servers. just install imagick module and use the php methods.
Write a powerful search script that can be added to any website.
i think bitwise operations is really important, it's something every intro to logic teaches. i'm amazed it has to be discussed when it comes to php...but then again, this is php. as a side note, and as a correction, ORing and ANDing are sometimes referred as adding and multiplying. in logic questions, you'll often see A\*B+C\*D to represent A AND B OR C AND D. to be specific, OR is a non-carry add operation. 
Write a command-line application that will take a given directory (or the directory it's run from) and scan top-level directories for git projects. If it is a git project, check for a) changes that need to be committed and b) commits that need to be pushed. But don't actually commit/push -- just prepare a handy report on all the projects that need action.
For videos: [Zendcasts](http://www.zendcasts.com/) For books (pdf or dead tree): [Zend Framework in Action](http://www.zendframeworkinaction.com/) (this is by Rob Allen whose excellent site has already been mentioned) For in-depth: [Zend Framework - Surviving the Deep End](http://survivethedeepend.com/)
Don't do that. Why involve a database? The content needs to be written, one way or the other. It's static. Put it in a class. The calls to the view have to be done one way or the other, use the classes. You dont save anything using a DB, but do introduce a whole new data layer. 
I never considered using a database but some of the questions will have up to five answers and won't just be a "yes" or "no" response.
They differ by content (text) but the design of each page would be roughly the same. This is a good idea though I never thought about doing it like that either
I'd appreciate it muchly if you could give a quick code example of what you are suggesting to do here because if I can avoid including a DB that would be handy.
I think a single page might be a little big because some of the results are going to be a very descriptive wall of text.
To give a little more information to the project I am going to be attempting to create site based on consumer rights in England. People will come to the site and find out what rights they have based on how long they have had the product, where it was bought from etc thus the questioning 
Just a note, but Rob Allen says you should *not* buy Zend Framework in Action, as it's old, and very outdated. He's currently writing a new book for ZF2 that should be out later this year. I'd stick to his blog for now.
Build something super simple to get you motivated. A chat room script using Javascript polling and database-stored chatroom history.
If you want to get into CI just read their documentation. It's all you really need.
Here's my idea I always give when people ask that kind of question: - simple for both new and power users - easy to style, but not requiring a lot of changes - i18n bug tracking system.
Zendcasts should be avoided. We frequently tell people in #zftalk to avoid that site because the casts generally teach bad practices. Your best best is to use something like Surviving the Deepend, which is written and maintained by some highly regarded, core members of the ZF community.
Very much in agreement - http://www.php.net/manual/en/function.eval.php#44008
Make sure to include extra power.
How about a bug tracker? Use the bug tracker to track its own bugs. Then, you can use the bug tracker for anything you do from then on. This is pretty much the path I started on.
this is actually a really good idea but it is a little complex. I would never have come up with this angle but I really like it. upvote for you sir.
I'll be coming back to this thread for sure
Hmm, good idea. I have no idea why I was set on keeping my ajax separate of my other controllers. Thanks!
Sorry, they are controllers. I have models for each of them. Actually I have a Model class and each of my basic controllers (coupon, store, deal) has a model that extends the model class. Thanks for the tips. .. oh, just looked at the spl_autoload_register function and I'm amazed! Wow, thanks for pointing that out to me. I never even knew that existed. 
Hmm, good idea. I have no idea why I was set on keeping my ajax separate of my other controllers. Thanks!
Figured I'd followup here. This has been implemented, and is [online.](http://www.php.net/download-docs.php)
ternary operator should count as 2 lines of code eg ` $var = closure() ? 'foo' : 'bar'; ` is the same as: ` if (closure()) { $var = 'foo'; } else { $var = 'bar'; } `
I neved tried to imply, that the page texts should be put in the array. If it only holds the relations, with average of 3 connections per page, with every integer taking [68 bytes](http://www.pankaj-k.net/weblog/2008/03/did_you_know_that_each_integer.html), it would take 3 * 68 * 100 + 100 * 68 = 27200 bytes.
I don't think so. Ternary is meant to be 1 line.
yeah, this looks even better in case you are already using $\_GET vars to build a filter, you dont have to worry about trying to check whether you need to do ?ajax or &amp;ajax.
Interesting. Are there any other resources that #zftalk recommends? Aside from Deep End what is out there? I particularly like the format that the guy on zfcasts uses as seeing the process and hearing the mental dialog helps me quite a bit.
besides ImageMagick php usally has GD installed. i think there are user examples here: see imagecopymerge_alpha. http://www.php.net/manual/en/function.imagecopymerge.php i think you'll have to make an PNG with an alpha-channel transparency in photoshop to merge with your photos. maybe you can do it client side too. http://stackoverflow.com/questions/3362175/html-css-create-alpha-mask-over-image 
It depends what you're looking to learn!. Back when I got into ZF, there wasn't a quickstart so I learned from subscribing to as many blogs as possible. My best recommendation outside of what's already been said would be to dive into [Matthew Weier O'Phinney's blog](http://weierophinney.net/matthew/), then start learning Doctrine2 and reading about marrying the two. Also, don't be a stranger in #zftalk. I for one love welcoming new people to the family! I'm rizza on there and almost always available if you ever want help.
no way. truth tables are really simple, and they're the first thing a computer scientist learns. :) it would be the same, and much easier to implement, as having a MySQL db with the following columns: id, q1, q2, q3, ..., qn, page $count = 0; $select = ''; foreach ($questions_answered as $q =&gt; $a) { $select .= "`$q` = '$a'"; if (count($questions) &gt;= $count) { $select .= ' and '; } } if (empty($select)) { $select = '1'; } $sql = "SELECT page FROM lut WHERE $select"; of course, this is really bad implementation if you're going to be changing the columns in the future, and you'd want to make every q_n column a key for performance (although, that seems like a bad idea, too). it's best to implement a relational table scheme, but it's not apparent to me at the moment how you would do that.
I've been using ZF professionally at my company for about 3 years. I haven't actually visited Zendcasts in some time as I really only need reference material when dealing with something especially tricky but #zftalk might be useful (I usually only hit IRC when I'm deep in a project and stuck on something... lol... I should make it a more regular hang out. I'll check it out.)
Ive used http://www.000webhost.com/ a number of times. No ssh access or anything but served my purpose for wordpress powered sites. And doesnt require a credit card number or anything, only a valid email address.
And then double it.
[This might be of some use](http://www.iema.net/membership/memberplanner) - it is a flowchart thing I put together for a client a while ago. All the options and flows go into one page, in an unordered list, and a jQuery plugin handles the flow. Each stage is a list item, with an ID to identify the stage. Each option the user selects is a radio button, with the value set to the ID of the next stage you want the option to take them to. The markup was designed to be as simple as possible. You can see the complete page on the print preview. The markup in this case is hand-coded, but there is no reason why it could not be generated from a database. The longest path in this example is Start now -&gt; Less then 3 years -&gt; Now a student -&gt; I have not graduated -&gt; Yes The page will store all the answers as you go along, and any form submitted at the end will send the page taken to the server. It may not be of any use, but just thought it sounded like the kind of thing you could be looking for. I call the plugin [qatool](http://www.iema.net/modules/jquery/xartemplates/includes/jquery.qatool.js) (Question-Answer tool).
Whoever is downvoting because they have a case of the ignorance, please stop suggesting a database. I have created an entire framework for you that does exactly what I described. Took me about 40 min and is not finished (has some security issues), but finished enough for you to create your site with it. http://www.sendspace.com/file/v9j78d
Unfortunately a client side solution won't work because I am trying to fade the image into a user defined background. I am going to need to apply the alpha-channel transparency server side. Thanks though!
&gt; no way. truth tables are really simple, Not simple to maintain. Your comments describing the encoding are just duplicating the data, but are necessary to understand the data. So you didn't gain anything.
Agreed. Never used Symfony but I can say that ZF is a **huge** pain. Some examples: * Documentation is sort of an extended API. It lacks real-world examples and the relation between components. * Data abstraction is very basic. ZF-doctrine is buggy. Doctrine is not that great either, just that the PHP world doesn't have anything better. * The forms api is not very flexible. * The zf tool is a mess. * The application.ini is a mystery. I always end up using Bootstrap.php to configure stuff. On the plus side: * Deployment is fairly easy. * The default router gives nice looking URLs without much trouble. * The "templating" language is just PHP * They have lots of validators for many different purposes.
Then you'd have to store the responses (and their subsequent questions) in a table, as suggested by tjdick.
"Easy PHP Websites with the Zend Framework" ... best reference ever
what are your hobbies?
"global" anything is hard to justify. It can easily become difficult to maintain/extend something that has global variables. Something similar would be to follow the singleton pattern. You would have an object that could be easily extended/modified but still have a single point of reference and instance of your connection. Edit: /** * Singluar mysql connection * * @author thesevn * @version $Id$ */ class MySQLConnection { /** * Singluar instance * * @var MySQLConnection */ protected static $_instance = null; /** * MySQL connection * * @var mixed */ protected $_connection; /** * create the mysql connection */ protected function __construct() { // make your mysql connection // $this-&gt;_connection = } /** * Get the singular instance * * @static * @return MySQLConnection */ public static function getInstance() { if (self::$_instance === null) { self::$_instance = new MySQLConnection(); } return self::$_instance; } /** * MySQL actual connection * * @return mixed */ public function getConnection() { return $this-&gt;_connection; } }
Nothing wrong with keeping a single persistent connection for the entire request, but using `global` is not the best way to do it. Global is in the same category as `goto` where, yes, it works, but there are probably better ways to write your code. In this particular case, look into writing a singleton class to wrap the creation of your database object. Basically you have a single class with a static value to hold your database object, and a static function to request it. When the function is called it tests if the static value is valid. If it isn't, open the database connection and set the value to it. Then you return the connection object. Quick example: class Database { private static $dblink; public static function Link () { if (!self::$dblink) { //database connect code goes here self::$dblink = $your_database_object. } return self::$dblink; } } Then, any time you need to work with the database, just call Database::Link() to get your db object.
if you're submitting the value as post, it will be in $\_POST['Homeowner']. If you're sending the form as a get request, it will be in $\_GET['Homeowner']. Or you can just use $\_REQUEST['Homeowner'] which combines the two.
Awesome, thanks a lot.
That makes a lot more sense. Time to read up on the singleton pattern. Thanks a lot!
Primitive types in PHP (strings, integers, arrays) are not objects, so no, you cannot extend them. What you can do is extend [ArrayObject](http://php.net/manual/en/class.arrayobject.php), which is an implementation of ArrayAccess, and allows you to interact with the object as if it were an array.
No, not from a security standpoint, if that is your question.
echo join(',', array_filter(range('a', 'z'), function($a) {return ord($a)%3==0;})); 
 echo implode(', ', range('c', 'z', 3));
Thank you very much this is a fantastic base to go on. I am a bit of a PHP amateur but I have enough here to decipher myself and build a framework from. Thanks for your effort!
 $b = array('a', 'b', 'c', 'd', 'e', ...); Problem? [](/troll)
Rats, do you know if it's possible to extend any native PHP object, without extending it with a new name?
No, PHP uses standard classical inheritance, there's no prototyping.
you have to know that `c` is the first letter that has an ascii code divisible by 3
Cool, thank you
You're obviously going to "have to know" some things for any solution... alex's still gets the job done, and in a very simple way.
So?
I think it is possible; you can use magic methods in PHP to catch calls to undefined functions on your objects. So, if you tried to call $obj-&gt;customSort() on your object, but the customSort() method did not exist, then the __call() method would be called with the function name as it's first argument. You could use this as a way to create a prototyping system, possibly. 
No. What I like to do is make a SQL class with the following functions: * connect (constructor) * return connection * last query * last result * select * select-join * update * insert * delete then extend any classes that have to deal with SQL. The SQL connection you have should stay open during the entire request (I've never had it fail). You can also use this over and over again in your projects. Saves quite a bit of time.
Nope, looks perfectly alright to me.
its hard to put every possible loophole in the rules. if you look at Nomikos solution youll see you dont need to know anything except the alphabet. with that logic, you could just use echo 'c,f,i,l,o,r,u,x'; right?
 echo str_rot13("p,s,v,y,b,e,h,k"); Hey, I didn't break the array rule 
I have something similar going on right now, but I really like the idea of being able to run the last query and fetch the last result. Adding those functions right now, haha. Thanks!
because then you could just do echo array( 'c','f','i','l','o','r','u','x' );
It's not a loophole. I don't even understand your "have to know" rule. Basically you're saying it's "too cheap" edit: What I'm saying is, they both create an array in memory via range(). Filtering it via callback is more verbose, but not fundamentally different.
No, that's not similar to his solution. Nomiko's uses range() as well, he just started at a different letter. I don't see how one is legit and another is a loophole.
But this is not possible on any object for which you don't have the source code. The only classical inheritance system that I know of that allows this is objective-c using categories.
 $is_homeowner=($x=base64_decode('X1JFUVVFU1Q='))&amp;&amp;${$x}['Homeowner']=='Yes';
Well, if you are going to put up challenges in the future, may I persuade you to put up a goal which isn't "first man to the party wins"? Maybe something a bit more worthwhile so the rest of us has a chance to contend as well, e g. doing the job in the fewest number of bytes or w/e. 
Could make an API wrapper for some websites API. Write a library for PHP that makes it easy to access the API. I [made one](https://github.com/hamstar/Wikimate) for the MediaWiki API for use in WikiBots. e.g. $wm = new Wikimate(); $page = $wm-&amp;gt;getPage( "Reddit" ); $text = do_something( $page-&gt;getText() ); $page-&gt;setText( $text );
Well, you could monkey patch the code through runkit (a PHP extension), but I'd advice against it. You could create a class with an identical name in a different namespace which extends the original, though. 
NP. That was my latest addition this week. Makes it so much easier to debug.
if someone posted echo 'c,f,i,l,o,r,u,x'; would you consider them the winner? --- Edit: fixed code
i agree. my next challenge will be like this.
No, because that would echo the word "Array" ;) (Read my edit)
Great.
yeah, i was creating the next challenge and echoed an array for some reason. we are just going to have to agree to disagree. 
You can extend with the same name only if its in a different namespace. But you probably dont want this either due to having to construct it with the new namespace For example: namespace foo; class Bar extends \Bar { }
wow, do you have anything interesting to solve?
yeah sure, i'll try to do it in the next few days!
True, but you could extend the object for which you don't have the source, and then use my magic method idea. 
thats not the point... not trying to cure cancer, with php one-liners. just posting stuff for people who might enjoy it. if you dont enjoy it, dont participate. 7 People apparently enjoyed this. Relax.
Because nothing says 'secure' like base64.
This is a GREAT solution because it illustrates how php's built in functions reduce the amount of code you have to write if you bother to RTFM. If the OP is going to call this a loop hole, OP shouldn't be running these contests.
you know php already has a [general purpose SQL class](http://www.php.net/manual/en/class.pdo.php) that does just that... no reason to make your own.
Yeah. Singletons can be useful for this. Incidentally, if you required multiple database connections, you could consider the multiton pattern: http://en.wikipedia.org/wiki/Multiton_pattern#PHP
I always enjoy challenges, so keep em coming, however I consider using " function() { } " inside a 'oneliner' a much bigger no no then using ternaries. 
you make your own so that you can pass messages and errors to your message and error classes. If you have a simple project then there is no reason why you cant use a general purpose class, but in complex projects you want to build in functionality that is useful throughout the project.
By the time you've built the prepared query, parameter binding and done all the error checking necessary with try/catch you end up with like 40 lines of code just to do a query. Do you want to repeat those 40 lines of PDO code to do a query each time? Easier to wrap all that in a select() function, pass in the query and params as an array then return an associative array on success or error. Sort of a PDO wrapper if you like.
you can then take this kind of code above and build a connection stack. an array of connections. Each entry in the array being a connection object. this then allows you to make multiple connections at once in your project, say to three different databases at once. Or different users having different connections if they have different rights on the database itself.
Try it and see. I know that doesn't seem helpful, but a simple print_r($_POST); would have made it obvious.
There are a lot of people advocating the Singleton design pattern here. Be careful. The Singleton pattern really only gives you the exact same thing as a global variable in a shiny object-oriented wrapper. Here's a good explanation of everything that sucks about Singletons: http://misko.hevery.com/code-reviewers-guide/flaw-brittle-global-state-singletons/ There's a lot of stuff about unit testing in there but you can safely ignore that if it doesn't apply without the rest of the points losing any of their value.
I came to post the exact same thing. Doing this is utterly pointless. Your singleton class is now global - you gained nothing except being more buzzword compliant. It's complexity for the sake of complexity. If your class does more than just return a connection object, you might have some arguments. But a class that does nothing else? Don't. Keep your code simple. Simple always wins.
It actually makes no sense at all. Your "Database" class is now global - so you exchanged one global for another, and gained nothing except more code. See this post http://www.reddit.com/r/PHP/comments/h6x3r/is_there_anything_wrong_with_using_a_global_mysql/c1t4166 lower down, for a link with some more. The simpler your code the better. Period.
Or you know, you could just have a global array with 3 connections in it. Or 3 global variables (it's not like they are interchangeable anyway, it's different databases after all). It's less code, easier to understand, faster to run, faster to write. I hate seeing code like what you posted - it's a classic example of overengineering, or coding for the sake of coding.
You can do that very easily without reinventing wheels. What would you do with a database error anyway except log it and send the user to your error page?
You made separate functions for select, select-join, delete, etc? I'm so glad I will never need to work on your code. disquoi_ please don't do this. Write SQL, or use a real library designed for this like Zend_Db. Never hand write this stuff.
Wrapping pdo makes sense, but implementing it from scratch like YourAMoron suggests does not.
No idea why you're being downvoted, to be honest. I'm sure some will say you are being too aggressive or some other nonsense, but will be the first to jump on the next big news story about how some shitty developer was responsible for a major leak. To add to what you said, PDO or MySQLi may be an issue when it comes to portability. If you're making extensive use of a database consider implementing a driver-based interface that lets you keep the same query code with different methods (legacy mysql_* functions, mysqli, pdo, depending on availability). Read about [dependency-injection](http://www.potstuck.com/2009/01/08/php-dependency-injection/). And then people wonder why PHP developers take so much flak.
&gt;No idea why you're being downvoted, to be honest. Neither do I. They claim I was trolling, but I doubt they know what the word actually means. As for thinking I was being aggressive, I suppose that's how they might have perceived it, but I assure you, I wasn't trying to be aggressive or downgrading. I was trying to help the OP by launching a side-discussion about the product he intends to sell. &gt;PDO or MySQLi may be an issue when it comes to portability. If you're making extensive use of a database consider implementing a driver-based interface that lets you keep the same query code with different methods (legacy mysql_* functions, mysqli, pdo, depending on availability). It's doubtful that PDO and mysqli would not be available, but you are correct that dependency injection would be the right path to take to maximize portability. 
Singleton's *are* globals. 
Native UNICODE support and maybe LLVM support are some of the things that are possibilities for PHP6. For the foreseeable future you can check out php internals: [http://news.php.net/php.internals](http://news.php.net/php.internals)
If you find the tutorial a great resource, buy his book. It is even better.
As far as I can sum up from all the posts I've read about the whole PHP 5.4/6 matter it is that there was no real sense of direction it was going in. No simple plan for if 5.3 was to be the last release in the 5-series or to stick with a 5.4 - and in that case, what should be the focus of 5.4 and of 6. From back in the days, I've always read about PHP6 being heavily focused on unicode and I've read several places that PHP6 was to be mainly (if not only) that. Unicode. PHP 5.4 seems to be coming along nicely and does include some nice new additions such as traits which for must people focusing on object oriented work with PHP are most likely looking very much forward to. I know this isn't the answer you're looking for but I hope it helps clear out some minor details. I myself would very much like to a public roadmap to be presented by the PHP developers so we, the PHP developers, can get a sense of the direction they're going for. From what I know off, the best way to keep a finger on the pulse is to subscribe to their mailing lists, which I do. But something a bit more "public" and official would be very nice indeed.
More accurately, I'd say that the early chapters are outdated as ZFiA doesn't cover Zend_Application. Everything from chapter 4 is relevant to Zend Framework 1. i.e. the stuff on views, auth, acl, search, pdf, mail, caching. i18n, etc will work with ZF 1.11. Regards, Rob... (possibly biased, as I'm the author of Zend Framework in Action)
Take a look at what Ruby, Python and C# were implementing 5 - 10 years ago and that'll give you an idea of what'll be 'glued' onto the side of PHP next :) P.S. I love PHP, it pays my wages, this post should not be taken too seriously. Just sayin.
free using torrent.
Also some people fail to realize that having many users and being older means that its harder to make significant changes. I don't see recognizing that as being a bad thing.
if(ISSET($_POST['Homeowner'])){ if(strcmp($_POST['Homeowner'],'yes')==0){ // do yes stuff }else{ // do no stuff } }
Age shouldn't be a barrier.
I am using posts: $homeowner = $_POST['Homeowner'] And I don't get a value when I'm trying to print to the email. Value is still blank :(
Ha this worked! Thanks!
Tell that to Chris Hansen Heeeeey-ooooo
Seriously?
Of course it should, I don't want to rewrite all my applications when a new version of the language comes out. Backwards compatibility is one of the first things I look when choosing a new language.
PHP6 is to PHP what Perl6 is to Perl.
I have pondered this myself. I think the php group realized quite early that PHP 6 wasn't needed considering they implemented most all of the features planned for PHP 6 directly into PHP 5.3. I cannot speak for them however, so this is just speculation.
Then why not simply use good 'ol inheritance?
 echo 'c,f,i,l,o,r,u,x'; this works too. it illustrates very well how php's echo statement can reduce the amount of code you need to write.
This is being discussed again as of yesterday, and this discussion will likely gain traction and result in a real timeline. A few links that should help you: [Thread: PHP 5.4 again](http://markmail.org/thread/2qork7y23ccqs7ns), [5.4 TODO](https://wiki.php.net/todo/php54), and a [list of RFCs](https://wiki.php.net/rfc) As for PHP 6, that talk is on hold with the focus being on 5.4.
Not really, as PHP 6 talk/development is on hold, whereas Perl 6 is not.
I was considering posting: echo 'c, f, i, l, o, r, u, x'; as it also met your criteria, but I felt it was a bit _too_ cheap. Thanks for making an effort at improving the subreddit though; there's definitely potential here for something interesting. I recommend being much more stringent with your requirements next time! I'll be keeping an eye out for your next challenge :)