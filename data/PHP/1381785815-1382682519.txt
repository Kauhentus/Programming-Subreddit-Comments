I never wrote that FB should use a standard framework. Frameworks represent the idiomatic practices of the era in which they were created in. Modern PHP is based around the current frameworks. These not being in existence back in 2007 would lead to modern programmers not liking old code. A modern programmer would see old code as wrong, bad style, using outdated patterns, etc. 
There's also [PHP_OS](http://php.net/manual/en/reserved.constants.php), which contains a [string describing the build environment](http://stackoverflow.com/questions/1482260/how-to-get-the-os-on-which-php-is-running). A hackish fallback might be to check (amongst heavy documentation as to your intent) whether [DIRECTORY_SEPARATOR](http://php.net/manual/en/dir.constants.php) is `\` (Windows) or `/` (anything else).
IDEs are a personal preference so I can only tell you my perspective. I'm more of a minimalist type of guy, I hate when PHPStorm takes 10 seconds to load on Macbook with SSD and 8GB memory... so I myself use Sublime Text 3, switched from TextMate 1 and thinking of switching back to TextMate 2. Many people love PHPStorm and of course it offers so much more than TextMate or Sublime, but I realized I don't need all those "shiny" features...
Another option may be to offload the work to a reliable third party system (your own Unix sever dedicated to transcoding media) or service such as Amazon Elastic Transcoder. Read more at http://aws.amazon.com/elastictranscoder/
One approach would be to define the paths of executables per os, and file_exists on that path at runtime. 
Your tech skills far surpass your people skills. You should work on that. 
From their homepage libav seems to be cross platform...
Thanks for trying to untangle my possible confusion, haha. I'm not averse to session management - I will be using it. I just want to add an additional layer of security on top of user access control by making my router a little smarter. Perhaps the protection I want is more akin to a firewall class, but it should still work with my router. Specifically I wonder if it's a good idea to attach an additional unique ID to each nav/link/button/etc in it, so that my router can check for this (before checking for user authorization)? Why? Because even an authenticated user may try to snoop about by typing in different URLs and there's a chance they may end up where they shouldn't. This will be a tiny percentage of users ~ just crackers/hackers ~ but their potential damage to the app is much larger than their numbers. So, what I'm suggesting, would appear a worthwhile extra security feature to add. However, I don't know how I would hide that unique ID from the URL eg by having the router rewrite the URL without it? If you can see a way I could do this, I'd really appreciate your advice, thanks.
Your judgmental arrogance is in peak form, however.
Ah. Thank you. I'll remember that for next time. 
Not OP, but if what you're saying is correct, why does this work? &lt;?php // $variable and define() are called at run time $variable = "asdf"; define('_HACKERCLASS_VALUE', " $variable "); class HackerClass { const VALUE = _HACKERCLASS_VALUE; } var_dump(HackerClass::VALUE); // string(6) " asdf " Isn't define() run at runtime, especially since it uses $variable? Does PHP magically resolve the constant when running instead of when parsing for this one use case?
Check Reddit. Ignore the trolls, click some links, see what people say and form your own opinions.
Because the static constant is not resolving to a runtime value, but a runtime call to a dynamic constant.
why not offload the processing to amazon, google app engine or something?
If you have xdebug installed, you shouldn't need to use var_dump. Use xdebug's debugging sessions to step through the code and see/manipulate all in-scope variables and class properties. Once you get the hang of it, it is a tremendous time saver when debugging.
Why does the time your editor loads in make any difference at all? Do you frequently open and then close your editor? Personally, I start up phpstorm in the morning when I start my work day, and leave it on for 10-12 hours until I'm done for the day.
When I look up a function in the PHP docs I also look at the function names next to it in the docs, and those listed in "See Also". I also read through the examples that people have submitted to the docs. About 1/2 the examples show poor usage, but as you read the comments you'll see people point out the poor usage and usually (in typical internet fashion) tear the person apart with reasons why it was stupid to do it that way. 
That's the thing though. Am ubuntu user doesn't even need to know how to use a command line interface to do anything the average user would. I think my mother would be fine with either. 
I am on my phone so sorry for the errors etc. GIT is a version control system. To get the code on your server you have to add the remote server to GIT. GIT more or less watches files and folders you tell it to. You creat or init a repo which tells GIT hey watch for changes here. This allows you to edit the files with what ever text edito you would like and when you are done you commit and push it to your server. GIT is awesome since it keeps track of every commit allowing a sort of trail or progress of the project, nice if someone wants to help on the project or if things blow up you can roll back to the previous commit.
i kind of agree with that but i think you have to study code that is probably good how do you know that the code you're trying to understand is not some pile of spaghetti crap? if you're gonna invest time and effort studying someone else's code try to make sure that you're studying something that is intelligent
Git helps you to track changes of your source code. You can start with [Git Immersion](http://gitimmersion.com/). Best tutorial so far (for beginners, of course). Alternatively, you can read [Pro Git](http://git-scm.com/book) As of questions you asked: 1. It doesn't. It's you actually who requests changes via HTTP/Git-over-SSH protocol 2. They are independent, but there are plugins which help you calling git commands from editor UI 3. Just read links above 4. Because you're human, you tend to make mistakes and forget stuff about code you're writing
It's not just about loading time. It's the feature creep feel of it that bugs me the most. I like simple things like Sublime with codeintel...
If I were to explain Git very simply, it's a way for you to take a snapshot of your code. Every time you take a snapshot (called a commit in Git speak), it saves the new version of your file and knows what the difference is between your current snapshot and your previous snapshot of that file. This way, you get a nice timeline of changes to your code base. Where this really comes in handy is when you are working in teams. Different people will be working on the same code base but each have their own local version of it. Since Git is saving everyone's snapshots, each person is able to merge the differences between everyone else's snapshot to make sure everyone has the same code. It's a bit like everyone working on the same story/book. Everyone is making their own changes and changes and Git is the tool everyone uses to make sure everyone is getting each other's changes. Git does a decent effort at merging changes for you, but sometimes changes are too difficult for it to figure out without a little help and you have to manually merge the changes. If you use a decent IDE (editor), they often come with built in tools to do that for you. My preference is NetBeans. There are concepts in version controllering that are a bit more complex, but I think it's just better to get used to the basics at first until you feel more comfortable with it. As for your final question, Git is most useful when working in teams, but I would still recommend using it as a solo developer, because it acts as a backup to your code. Also, it tracks your changes, so that is really handy in case you want to see why you changed something or if you made a mistake that you want to revert. Nothing is worse than realizing you blew a away a chunk of work and can't undo it. :)
The best way to learn new things is to meet or work with other developers. The next best way is to follow podcasts (although these days, good PHP podcasts are hard to come by). Third best way is to go to developer meetups and conferences (if possible for you). Next best way is to follow good blogs and places like this subreddit. The last way, which is hardest but also inevitable, is to play around with the tool / framework / whatnot. If you are at the point of actually playing with the code, look for the unit tests - they often give you the best, quickest indication as to how to write the code and what it's purpose is.
Its like ctrl+s and ctrl+z on steroids, and you can push your changes to a remore repo, create branches for testing new features etc.
1. Programs like git and Mercurial are all a class of programs that are known as Distributed Version Control Systems, called DVCS in short.. But what you have to understand is this. They are just a glorified zip application. And the repo they create can be thought of a zip filearchive, which, like any zip archive, is created in the local machine itself. But unlike a normal zip application, these programs can store multiple versions of a file in its archive. They can also receive versions of files from another related archives (clones). It is here, that connecting to another machine comes into play. 2. Programs like this are normally used from a command line interface. But some editors can accept the path of the git or mercurial executable and can issue the required commands on the behalf of user, who can use the UI of the editor for git operations. 3. For a nice read on the concepts of DVCS, I recomend Hg Init by Joel Spolsky, http://hginit.com/, this uses Mercurial, but it uses the same concepts. 4. This is a tool while enables to keep track of your development, and the changes you make to the files and enables to you to store meta data about the changes. It means, for every change in your history, you can store a commit message that describes the purpose of the change. What you use all this information for is only limited by your imagination. But some of the common uses are, a. To find out when was a bug introduced into the system and the exact change responsible for it. b. You can keep different branches of development, that can be combined/merged at a later stage to include a subset of the features you implemented. c. You can review the last set of changes, to make sure you are not introducing any modifications that was part of a testing/debugging session. d. If you use a service like bitbucket or github, you can take an instant backup of all your code( the recent changes, to be exact) in a single 'push' command. Now that being said, these are some of the basic questions you should be asking instead.. 1.How can I save the state of my code so that I can restore it later, or how can I make a commit? 2.How can I go back to a previous version of my code? 3.How can I view the history of my changes? 4.How can I view the changes I made since last commit? 
1. It does not connect to your webserver 2. You dont connect your text editor to GIT 3. No, it does not work like that. 4. You should NOT use GIT as a beginner or noob (note this is just my opinion and others may differ). Now what is GIT. It is a Version Control system or a Configuration Management system. There are loads of different systems out there to do this and GIT is a newer one with some advantages for teams of developers creating complex projects. How version control works. You create a document, then you check it in to version control. Lets say its your resume. Every time you want to change it, you check it out of version control, make the changes and then re-check it in. Every time you check it in you add comments to say what changed and it gets stamped with a version number. (Version 1, Version 2, Version 3 etc. - complex projects often get lots of versions sch as 3.23, 3.24, 3.25 etc, Normally a major change to a complex system will update the major number so version 3.23 may go to version 4.00 whereas a minor change will update the little number so version 3.22 may have gone to version 3.23). Now you have your resume in a version control system. Someone from 2 years ago calls you and says "hey can you send me the same resume you sent me back in 2011". If you just had the current resume you would be screwed having made quite a few changes. But version control systems give you a logfile where you can go back in time and check out a version as of a certain date. You can see all the changes since that date to see how your document evolved. Lets say you have been refining your resume over the last few weeks and have been updating it in Version control on every refinement. When it is just perfect, you can tag it as a special release. So Version 1.15 may be the one you gave out after you graduated, Version 2.4 after you left your first job etc. All the changes in between may be minor so you want to only see the major versions you have tagged as being significant. This is like a release version. Often for software you have lots of files. You check them out and change them and check them back in to Version Control. Now its time for a release - all the files get tagged with your special tag (lets say Version 1 RC) - so not you can always pull all the files out that make up Version 1RC to put out a specific release of your site. So Version 1RC may contain index.html version 1.43, styles.css version 1.07, mycode.js version 1.85 - it does not matter because you are pulling Version 1RC and the Version Control System tracks individual files that make up the release. Also in Version Control you have tools to see not only what changed in each version of a file, but who changed it (this is useful in large teams). So GIT is a Version control system. A good one. But i would not recommend it right away for beginners. However some experts write software and store them in a public (free to access) version control system where you can pull out the latest version of their code. You dont need GIT on your system to access this code - just go to the public repository and look on the right hand side where it says download ZIP - this will bring all the files in that repository onto your system downloaded in a ZIP file. Here is an example of a free tool stored on a public GIT system - this just is a tablesorter utility (its not mine): https://github.com/tristen/tablesort Click on it and look on the right side and download the ZIP - you will see how it works. Finally (this is a long post) should you use a Version control system as on a one man shop. I think you should, and would recommend you start with SVN (download Tortoise SVN as a windows tool and read up on how to create a repository - this is where the Version Control system stores your actual files and all the changes) Hope this helps. 
Sorry php noob, but the approach you are thinking about does not make your urls more secure. It's called security by obfubstication and that doesn't actually make anything secure. Any half decent web developer (and hacker) would easily bypass this. I would just focus on matching your urls and making sure to validate/sanitise your inputs. Any additional and irrelevant parameters passed should just be ignored and using the MVC pattern should make your code more manageable/maintainable. Why not just use a robust framework for this?
My biggest question about Git is... how does it work when the files need to be on the server to be tested? Or does it not? The way the templating is set up for my company's site, the files need to be on the public server to work. Right now we're live editing because we can't figure out any other way to do it. It wasn't bad when I was the only person editing files... but now there's a few of us and it's causing problems.
In a nutshell. When you're programming and you have implemented/removed/updated a specific feature or have been working on some code for a while, you might want to commit your work to a local git repository. What this means is that you are saving a state of your code base at the moment you do the commit. The nice thing about this is that you keep a pretty extensive history of your code. If something breaks, or you need something you removed, you can see the code or revert to older versions. If you use a remote repository such as GitHub or Bitbucket, you can push your local repository to the internet. Now you have a back up, in case something happens to your computer. When working in groups Git can also be a very nice tool, but this is more advanced usage. You can keep track of other people's work, and if needed do complex merging. The tutorials mentioned by /u/waitekk should get you stared. As for your noob questions: 1. Git has no direct relation with your web server. When you get more acquainted with Git and have some sysadmin/dev-ops experience, you can automate deployment of your code. 2. Some text editors have Git integration plugins. These plugins basically use the Git command set in the background. You're better off using the Git command line tools or using a GUI like SourceTree or TortoiseGit. 3. Not completely, but that's okay. The system can be a bit complex when you know nothing about it. 4. For the reasons I mentioned: code history and backup (if you use a remote service).
"Nah, I'll just leave my text editor running and never exit it. What do you mean, power outage? It won't happen before the project is done!"
Then you clone your git repository onto your webserver and update the working copy there. You can make it updating itself with cron in every 1 minute if you like. It's also possible to use hooks (e.g post-commit hook) that can trigger events (like updating working copy) on other systems.
I almost feel like I shouldn't have even mentioned anything because I'm too much a beginner of git, and have too little of an understanding how our company's CMS (Ellington) works. And the company that sold us the CMS went out of business so there's no one to help us so we're kind of on our own. But for the files we're working on to work, they have to be a certain name in a certain directory. Even the style sheets, I mean... I can make a git for the style sheets, but we'd have to edit the live files to point to these style sheets for testing.
That's not it
The problem here isn't Git. The problem is your server setup. Why is live so different to your local dev environment? I would look at tools such as Vagrant, Docker and Chef and see how you can make your dev environment the same. May be a pain in the ass but it's less of a pain than the eventual time where something goes wrong from editing live (and I've had that happen way too much in the past)
plenty of answers already but here's my 2bitcents &gt; How does Git connect to my web server? git is agnostic to network or even filesystem issues, that means you can use http, ssh, or even local dirs within the same machine (or NFS-mounted ones). it's worth mentioning that there is a git:// protocol which is also available but it's not required, as long as you can reach the files it'll work. &gt; How do I connect my text editor to Git? That depends on your text editor, most IDEs have plugins to provide integration, you can also use a git GUI tool or even the commandline, git works on the files so it's not necessary to have it integrated on your IDE but it is convenient depending on your workflow. &gt; Is that even how it works? yeah, git works simply as a registry of changes that is stored locally within your files, unlike SVN that stores that on the remote server; in git you track the changes on your own machine and (optionally) synchronize them with remote copies for backup, sharing or collaboration. &gt; Why should I use Git if I am the only developer for a certain project? you should use a VCS even if you're the only developer because keeping track of the changes and having the ability to go back and review how things were done is really really useful, now why git in particular? that's up to you, there's many others. ps: also check /r/git
I don't have a local dev environment. At least not for this job. This company brought in a server, showed us a few things on how to SSH/SFTP into the server, make the changes to the template files, and then how to check the changes live on the site. And they've since gone out of business, but it was ok because I was the only one working on the site anyway. Now we have a few people working on the site and we are definitely running into issues because of it. And I agree the issue is more the server than Git, though if I knew Git better, there would probably be some solution. Also, I don't know if this is normal, but if I was to have a copy of the server set up on my computer, there's probably 100GB of data on the server once including all the photos and videos. And a constantly changing database (which I recently learned is postgresql). And the server itself is Django-based. But I'm not a Django coder in the slightest. Only the templates.
Only use git if you have read and understood this: http://www.sbf5.com/~cduan/technical/git/ It should also answer questions number 3 and 4.
To add to 4., you're the only developer working on a certain project *now*. Are you going to be the only developer to *ever* work on that project over its lifetime? If not, git history will be incredibly useful.
Don't use tabs in the yml files! I remember taking this path half a year ago, and being stuck for over a day. Also these articles http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1 are really really good, and I would start with that, read the cookbook afterwards
* Egg and Bacon * Egg, Sausage and Bacon * Egg and Spam * Egg, Bacon and Spam * Egg, Bacon, Sausage and Spam * Spam, Bacon, Sausage and Spam * Spam, Egg, Spam, Spam, Bacon and Spam * Spam, Spam, Spam, Egg and Spam * Spam, Spam, Spam, Spam, Spam, Spam, Baked Beans, Spam, Spam, Spam and Spam * Lobster Thermidor aux crevettes with a Mornay sauce, garnished with truffle pâté, brandy and a fried egg on top of Spam
TIL: I'm not a programmer.
* [Zend_Math](http://framework.zend.com/manual/2.2/en/modules/zend.math.introduction.html) * [Moontoast Math](https://github.com/moontoast/math) 
Git is a "distributed" version control system. The distributed bit means that rather than being a central "official" *repository* with everyone pushing to and from that, all working copies are basically equal, and can exchange data directly between each other. Think of something like Bittorrent, which shares bandwidth around the network rather than just downloading from one central file. The noob questions are fair. 1. It probably doesn't. Git is more about how you manage your data than about how you deploy stuff to the interwebs. That said, there **are** systems that can take your committed git changes and FTP them up to your server. There is also the possibility of setting up your web server as a git "remote" and pushing changes directly to it. Modern PaaS systems like Heroku and Fortrabbit work like this, and it's magical. 2. You don't need to. A file is a file. You make the changes all you like in whatever editor you want to use. But many of the better editors have things built in so you can commit, update, etc directly from the interface and avoid the command lines. 3. Nope. 4. Because it makes you better *and* faster. When you use version control you can save yourself tedious fucking around with "did I upload this file? what about that one?" You click. You commit. You're done. Some version control systems like SVN you can see from the icon that the file has been changed and hasn't been uploaded. Or that some files in a directory haven't. No making mistakes thinking you've uploaded all of your changes, but you actually forgot a JS file, or an image. All of your changes are saved, too. Not sure if you need this block of code? Delete it. You can get it back later and in the meantime you don't have a block of commented code. Don't need to have index.old files or a /v2_final_old_newchanges/ directory. Deployment is easier, too. Using things like Fortrabbit (which all my hosting is on now) I can commit a change, push it up to github for backup, then push it directly to the webserver. I can even force composer to run an update to trigger my component changes. Version control is utterly necessary for anyone who wants to consider themselves a professional. Sorry about the implication, but it's true. And of the version control options, Git has become by far the dominant. I must admit I still don't *get* it 100%, most particularly the distributed bit because I generally work alone. But the knowledge of version control in general, and git in particular has been one of the most valuable things I've learned recently.
git is time travel machine for ur file
4. Is the data important? If it's important you should have several copies of it. a. Your local copy. b. Your server copy. c. The GIT version.
I have a different path. I play with it, break it, eventually fix it, and still have no fucking idea what I did. Go me.
Thank you! It works now! And thanks for the feed back on my code! I'm still and beginner so every bit of feed back is very much appreciated :) Now i'm trying to figure out how to output only 3 &lt;td&gt; tags next to each other and then start with an new row. witch should do the same.
That gets a bit fiddlier. Basically you need a counter, and you need to use the % (modulus) operator. It's not a particularly well known one, but it basically gives the remainder of a division. echo (5 % 3)."\n"; // prints 2 echo (6 % 3)."\n"; // prints 0 So what you end up with is a variable like $counter, and every time you loop you do $counter++. &lt;?php if( !( $counter % 3 ) ){ ?&gt; &lt;/tr&gt; &lt;tr&gt; &lt;?php }?&gt; Does that make sense? It takes a bit of dicking around with the start of the counter. I believe it should be 1, not 0.
I think an easier method is to allow easy creation of an api endpoint that a javascript client can use to communicate with.
&gt; I'd still like the app to verify that each request comes not from an app element eg link or button, rather than otherwise entered in the address bar Why? I really don't get why this is a big thing. You are just making it harder to get to the same place which is terrible in terms of UX and security through obscurity is pointless. If I clicked 15 links in your app then I wanted to go back to that page, I would expect the URL to work. If I found out I was going to have to find my way back it would suck.
Well it makes sense. But is don't really know how i should apply this to my code. I've used the code that you recommended before. 
These are all users that have logged in right? Why not just generate a hash based on the user's session ID and the URL? For example, if you have a button that directs them to /user/123, you could create a hash using a function like createHash($session_id = '12345', $url = '/user/123') which returns an example hash 'abc456'. Then when you write the button code you use /abc456/user/123 as the URL. When that gets sent to the browser, you have a global route that eats the first chunk, which validates that the hash matches the session ID and URL. Then you forward the remainder to the router as normal. This way, it the user presses the back and forward buttons, the links should still work as they are all valid until the session expires.
I'm a big fan of using Vagrant because 95% of the production servers that I use are using Linux so I can match my development environment very closely to production. It's also super easy to use with PuPHPet.com
This tutorial matches your thread question: [Git for ages 4 and up](https://www.youtube.com/watch?v=1ffBJ4sVUb4) (well, it's one year off) It's a very good technical introduction to git, but might be too detailed for someone just starting with git.
NET16 is obviously better.
Even beyond that, are you going to work on *any* project with other people? It would be good to get some git practice in now in readiness.
Vagrant, used with Puppet. Works great, especially in teams. Takes a bit more time to setup, but once it is, you can bring up as many boxes as you need to test. Check out PuPHPet.com to get a basic box with puppet config you can alter.
Q: Why should you use git? A: Because it will instil some discipline into your development environment, workflow and procedures. You describe a pretty scary setup. There is no reason why git needs to cover the whole project in one repository. You may have several repositories to cover different areas. Your dev environment could use a cut-down database and data files for developing and testing against.
&gt; It's not so terrible for procedural code. Fixed that for you.
A lot of this has been covered, but: 1. Git does not connect to your webserver. A git repo exists somewhere: a local folder on your file system, a shared network drive, GitHub, a SSH remote, etc. 2. Your text editor and Git do not need to have any sort of relationship. You edit your files, then you commit them. Your editor COULD have plugins to make this easier, but its not required. 3. Maybe? 4. To avoid project-v1.zip project-v1-withfeature.zip project-v1-withfeature-final.zip project-v1-withfeature-final2.zip project-v1-withfeature-final2FINAL.zip You always need to back up your work, and comiting changes lets you roll back features or reverse specific changes, as well as seeing accurate history. Then, if somebody comes along to help (friend, colleague, somebody who is buying you out) then you can share the Git code and they get a full history too. As for learning, try these links: * [Interactive Git](http://try.github.io/levels/1/challenges/1) * [Learn Git Branching](http://pcottle.github.io/learnGitBranching/) * [SourceTree](http://www.sourcetreeapp.com/) That last one is a GUI, because clicking shiny things is easier than learning commands, but some-day you'll want to use commands.
Git saves old versions of your files. It also makes it easy to share your files/code with other developers through a Git server (like GitHub), much like Dropbox. Go ahead and [try Git on GitHub](http://try.github.io/levels/1/challenges/1) (online tutorial).
Fair enough. I use Sublime Text 2 as well, in combination with phpstorm. I use it for when I need quick edits, or for working on stuff in other languages (like Python, or shell scripting), or for just a general purpose text editor. I encourage you to try out phpstorm one more time though. Pretty much everything can be customized and turned off. I have spent a decent amount of time customizing my settings in phpstorm. Things like tweaking the syntax highlighting just how I want it, messing with the "Live Templates", etc. The things that phpstorm offers over Sublime Text 2 are really awesome, and I think they would really improve your workflow if you give it a chance. Things like code completion - I have tried a few different plugins in ST2, and they just aren't as good as phpstorm's. Phpstorm can import your class names/methods/properties, functions, and variables from anywhere that they are in-scope in your project. You'll also get the docblock comments if you've defined any. Phpstorm has awesome external tool integration, for things like Git, Compass, and Composer (and pretty much any other command line tool that you want). In version 7, it looks like they are bringing some kind of support for Vagrant, which is pretty exciting. And of course, last but not least, phpstorm has a great xdebug integration. I haven't been able to get xdebug working in ST2 very well, but it's dead simple in phpstorm. That's probably the number one thing I couldn't live without.
I must reiterate what *everyone* is saying here about question #4. Even if you do not use git, I cannot emphasize enough that **you need to use some sort of version control**, be it git, svn, mercurial, whatever. Learn one and use it. It is a requirement of being a developer. End of story. 
Based on what /u/mattaugamer gave you earlier you would change your code like this &lt;?php $counter = 0; // sets the counter $query = $dbh-&gt;prepare("SELECT * FROM images_portfolio"); $query-&gt;execute(); ?&gt; &lt;table&gt; &lt;tr&gt; &lt;?php while($row = $query-&gt;fetch(PDO::FETCH_ASSOC)){?&gt; /* we started the counter at 0 and add 1 at the end of the loop, so we test here if you run through it in your head it would be counter 0 =&gt; false, 1 =&gt;false, 2=&gt;false, 3=&gt;true so now we output the row end. You could start the counter at 1 and test this at the end of the while loop but it's standard practice to start a counter at 0. */ if( !( $counter % 3 ) ){ ?&gt; &lt;/tr&gt; &lt;tr&gt; &lt;?php } ?&gt; &lt;td&gt; &lt;p&gt;&lt;?php echo $row['title']?&gt;&lt;/p&gt; &lt;a href="image.php?id=&lt;?php echo $row[id]?&gt;"&gt;&lt;img src="img/&lt;?php echo $row['name']?&gt;"&gt;&lt;/a&gt; &lt;/td&gt; &lt;?php $counter++; //adds 1 to the counter } ?&gt; &lt;/tr&gt; &lt;/table&gt;
Another vote for Vagrant. Its convenient and using http://puphpet.com, you can have a basic LAMP box in a couple of minutes. Also, vagrant is cross platform and saves you the headache of trying to get stuff working with your host system.
... and why do i need all that stuff? that stuff would block me in doing the actual work i would spend days tweaking it to be usable... 
I can't write a lot right now I'll just address your specific questions. 1) It does not connect to your web server, has nothing to do with your web server really. 2) It does not "connect" to your text editor really. Some editors have "support" for it, meaning they "understand" git is there. But there's no real "connection" 3) That's not how it works. Git just creates a ".git" folder next to your files and it lives there. Other tools like your IDE or text editor can see what's in there and show you some graphical user interface, but that's about it, it's just some files sitting there, no server, no connecting, no connections... 4) Git is like a journal. It's like git your personal secretary, as you do your work you yell "Git! write that down!". It'll keep track of your files and changes what happened to what file and when and all that stuff, it's pretty good at remembering that stuff so you don't have to. If you are just one person there's less motivation to use it (although it's still useful). But for multi-person projects, working on the same project at the same time it's pretty much impossible to not use some kind of version control. Suppose we have 5 developers and they all have made some changes to "index.php" and "login.php" and "style.css". Now how the hell do you merge these files together? Pass files around in dropbox "index.php-timmy-version8-fuck-this-shit.php" happens. Git accurately takes care of all that stuff. If knows who has done what and helps you merge those works together into one thing. Lots and lots of other features that others have mentioned. There's some learning curve but if you are in this shit for life you cannot go on without learning it. Protip: when you think you have understood git, that's not when you have understood it! It'll take a good couple of "Aha I think now I understand git! ...... time passes .... holy fuck I had no idea this is how git works" cycles until you actually learn it.
"It may not be able to determine..." mostly refers to ancient versions of proprietary UNIX systems, often on custom and application-specific hardware. Pretty much nothing that will ever be running PHP in the real world. You're safe.
haven't tried it myself but it's built using laravel I think http://wardrobecms.com/
Thank you for the explanation! I get it now, and it is working!
Set a requirement for 75% (or even 100%) majorities to add things to "errata". That will allow actual errors to be corrected while preventing "we changed our mind" or--even worse--back-and-forth issue bickering. Super-majority voting has been controversial in the main PHP development list, but this is different. PHP should change, PSR-2 should not.
Although I'm not a Drupal user myself, I think it (Drupal 8) might be what you are looking for.
Along these lines, before I used Git, I used Netbeans as my IDE, and it had great file History tools, so I did manage to save my butt a few times.
I'm more of the opinion that it should be like amending the US Constitution. Only another PSR standard can repeal or modify a previous one. That keeps the process clean and makes it so that "errata" aren't little minor things.
Well then you inevitably end up with "lawyers" arguing what is truth and what is not. And you get the worse sideffect: people will have to ammend already written code.
/u/mattaugamer did all of the heavy lifting. I just put it together for you. I would definitely look into looping structures though. It will help you understand what exactly is happening in your code plus they are some of the fundamental building blocks of coding. Also as he put it. &gt;Most of the layout stuff you're using tables for there. you probably shouldn't be. Tables aren't for layout. They're for... tables of data. You should be using the appropriate tags, and styling them with CSS. You could do this with &lt;div&gt; or &lt;ul&gt; tags and style the page so that it automatically puts three in a row and not have worry about doing it programmatically. If you don't know about that I would also recommend looking deeper in to html and css
true == -1 wat? "php" == 0 wat? :D
To add to 4: It makes tracking history an awful lot easier, and you never have to worry about removing code as you can always backtrack and restore it. No more commenting out!
I'll take a look into the looping structures. I'm fairly new to this, and have been taught to loop data into an table. But what you and [/u/mattaugamer](http://www.reddit.com/user/mattaugamer) are telling me makes much more sense! Thank you guys!
To add on 4, here's an example. Yesterday I started working on my project that only I work on and have access to. I made some changes to the code and messed a lot of stuff up, but couldn't undo it. So I simply restored that specific file back to what it was at the last commit and was able to work from there, saving myself a lot of grief.
Alright, I'll give it a shot. Git works with repositories, aka a big list of all the changes you commited. Usually, you have git on your own computer, and you work with your IDE or text editor on your own computer wiht your own files. So that's question 2 for ya, git watches your files and your text-editor watches the same files. So, what about your server? Well, a repository can be linked to an 'upstream' which is just a remote location, like your web server to name an example. Every time you commit in git, git stores the changes and so, when you 'push' to your upstream, the upstream will apply all the changes it receives, syncing whatever files were changed. Why should you use git? Because with Git you can travel through time. I'm thinking of using git for my own projects where nobody else will ever work on but me. What do I mean by 'traveling through time?' Well, since git knows what you changed, you can always go back to a time before a particular bug existed and see, commit by commit, what changed and thus, what introduced that bug. But wait! There is more! Let's say you have to make something new, but there are 2 options of doing it and you don't know which one you should take... You create a branch, try one option and find out it's not the right one afterall. You go back to before you started and do the second option this time. If you find out the first attempt was better afterall, you can switch again. This will take less then a second. You can try out ALL the options, and in the end, switch to the one you want or combine multiple to one. I suggest you read this; http://git-scm.com/book/en this is what I'm reading for my job where working with git is simply an every-day-thing
Because of the nature of type juggling, it's generally a good idea to avoid the `==` operator entirely, especially when [things like `'9223372036854775807' == '9223372036854775808'` are true](https://bugs.php.net/bug.php?id=54547). Just use `===`. If you explicitly convert variables to the appropriate types, it'll save you hassle in the long run. There are lots of security vulnerabilities and bugs that end up created because of people using `==`. `strcmp($_GET['a'], $b) == 0` breaks when $a is an array, for example, since it returns `NULL`. Now, why would `$_GET['a']` be an array? Well, if someone goes to http://example.com/example.php?a[]=2 then you'd get an array, not a string. This is an actual security vulnerability found in an actual web app, though (hopefully) you won't be using `strcmp()` to test string equality. `===` is better for that. That said, the implied `== true` in conditionals (or `== false` in `!`) is fine most of the time, since the rules for that are very logical and it helps code readability. It's also something a lot of languages have, even ones without the loose `==` that PHP has. For example, C, C++, C#, Java, Python and JavaScript all have some variant of this.
I gave up, was there an ending? You should of told me I am super awesome because I got 25/25 right or something ..
&gt; Something framework-based (Symfony, Zend Framework, Laravel, etc.) Yes, you'd likely want a full framework. Not only would you have a better chance of all the features being supported that you need, but you'd have a good chance of getting participation from the framework devs &amp; community itself. &gt; Which version of PHP would be sensible to target? I'd suggest targeting the latest stable version of PHP available. I don't want to sound negative, but even if you somehow managed to build a feature-complete and release-ready version in 1 year, you're probably still going to have a period of ramping-up your userbase, so it will likely be 1.5-2 years before such a project gets any serious traction. If you begin with an already 'old' version of PHP, it may be unsupported by the time you hit the big time, and now you're just Wordpress 2.0. &gt; How much configuration should be done in static files and how much in the database? There are pros &amp; cons to both, and each have their specific use-cases which are better for specific situations. So I'd suggest deciding which is best for specific purposes that you want to achieve, and then going from there. &gt; Should it support many kinds of database providers, cache providers and mail providers or just a small set (like MySQL, Memcached and Swiftmailer etc.)? First off, you need to get popular before that matters at all. Build it with flexibility in mind, but only create an [MVP](http://en.wikipedia.org/wiki/Minimum_viable_product) which will cover the most common uses. If you design your project and system appropriately, then it will be easy for users to create their own implementations and contribute them back to the project. Don't try to "boil the ocean" yourself on the first iteration though. &gt; Should it have a public/web folder as the Apache/Nginx target or control access with PHP/.htaccess? Sounds like a minor implementation detail...
reading http://tutorial.symblog.co.uk/ before jumping in helped me a lot. i used YML instead of annotations, so i also used the symfony book at symfony.com to help me get started. I think it might help to first read through the blog examples before trying anything, so you have some what of an understanding what the end product will include.
Just curious, why does it matter so much to match a production environment? What could possibly go wrong in a Linux setting if you've been working on a Windows setting the whole time for development? 
it could be in the near future, but in the current state it is far from mass production ready unless you really know what you are doing and not afraid to dig into the core. (and help the developers fixing things with real use cases at the same time)
3 years ago Imgur was written in PHP and using Kohana 3. [Source](http://www.reddit.com/r/PHP/comments/czbyc/what_is_your_biggest_php_project_you_have_ever/c0weeue)
If you provision to Digital Ocean, it can spin up a new instance from scratch in about 120 seconds. If you provision locally, not counting the initial OS image download, it can take under 5 minutes depending on your hardware. I have a 2013 mbp, `$ vagrant up` to `$ vagrant ssh` takes just about 4 minutes. Long enough to get another cup of coffee.
Right, which is why amendments are not allowed and breaking changes cannot possibly happen.
Well put. Git has saved my bacon more than once 
Nope. Look at the errata that was added this time: &gt; [09/08/2013] Using one or more multi-line arguments (i.e: arrays or anonymous functions) does not constitute splitting the argument list itself, therefore Section 4.6 is not automatically enforced. Arrays and anonymous functions are able to span multiple lines. It's just a point of clarification. The wording was unclear, so it has now been explained. It is not actually a change in the meaning, and therefore is completely backwards compatible. Otherwise we wouldn't have allowed errata because it would be NUTS.
I think you should try Mercurial, instead of git. If you go the git way now, there is a very good chance that you will end up hating all DVCS bacause of the poor usablility of GIT...and never bother to learn their advantages.... 
Shameless plug: I work on [Bolt](http://bolt.cm), and it's pretty much what you describe. - Based on Silex, with a bunch of Symfony components via Composer. - Uses Twig as templating engine. - Most of the configuration is done in `.yml` files. - Supports SQLite, MySQL and Postgres. - Supports Apache and Nginx. We deliberately focus on "keeping it small and simple". Not just weblogs per se, but we do not try to sell it as a replacement for Drupal. Check it out, and you're welcome to join us, if you like where it's going. 
Unfortunately, the reality is that the FIG group and PSR will reach a point where you have to introduce breaking changes to continue making progress. I know you want to prevent that, but it's an inevitability.
For the record, this has been solved: http://philsturgeon.co.uk/blog/2013/10/psr2-v-codesniffer-psr2
Let me be a little more clear. A single PSR will **never** contain breaking changes. A replacement PSR can be as breaking as it likes. PSR-354 replaces PSR-234. Done.
you only need to download the box once. I personally put a few boxes together with most of the required modules installed (using 'vagrant package') label them up and add them to my core vagrant path. Then tweak the base url in the box VagrantFile, and upload them to a cloud files service. Since you have most stuff already in place, all you need is scripts to populate your databases (from a sql dump for example) and depending on the application some inotify sync scripts to keep your shared folders synced up with a VM native path for speed. If switching between projects, use 'vagrant suspend' instead of destroying or halting the boxes and they'll come up again in seconds.
Isnt this kinda even worse? I meangetting conflicting standards is not a good idea. I kinda liked how each next PSR has to extend upon the previous one (PSR-2 extends PSR-1 for example), and I don't think its good idea to have parallel standards( very happy that the tabs vs spaces solution to "have PSR-2/1 and PSR-2/2 one with tabs and one with spaces" never went through). What I think might be a good idea if the group could deprecate a standard. E.g deprecated PSR-0 when PSR-4 is introduced. Deprecating/obsoleting is a natural way of handling code, so might as well work for standards too.
I totally agree with you. I spend most of my time in front of a screen and I'd much prefer to have a paperback version, ideally with the digital copy as well.
Vagrant. Case-sensitivity stays the same in files and databases, PHP tends to perform a bit better in a Linux VM than Windows, and you don't have to deal with as many Windows-specific things. That being said... last I tried, shared folder performance was pretty bad. If you run into performance issues, you may be better off copying to the local virtual disk and treating it as a external development server (that you need to upload/deploy to).
If the answer is something that's already done then you're not reading the question at all.
This is the first answer I care about. The projects already mentioned are good and all; but I'm talking theory and your answers are what I'm interested in.
Case sensitivity can also be a problem on Windows. I developed a large web app for a client only to have them change to a Windows server at the last minute. One of the third party libraries I was using on stopped working when we pushed to their server (I've stopped using it).
&gt; Thanks for asking ~ it's important to me because it appears to be a security gap in common framework/app design. No it really is not, it's simply because routers don't deal with security, it's absolutely not their job to do so. Controllers deal with that kind of thing. Routers just define routes to controllers and actions with their params. Why are you trying to shoehorn a very important part of your app in a completely ass-backwards way? What you're taking about are [nonces](http://en.wikipedia.org/wiki/Cryptographic_nonce), which are strings that are randomly generated, and which can be used only once. This could work, although I still think this is a completely backwards way of thinking about web security. Your app could generate link with those nonces appended (eg. yourapp.com/dashboard/6gPRhFaH6RYgrBKBtMxp), your router could check if that nonce is valid for that URL (which would mean you'd have to store those nonces somewhere to be able to check their validity and to be able to make them expire). But this means that the router would be doing something it's not supposed to. And which would mean that your users couldn't use bookmarks, because once you use a link it expires. The users would be completely confused if they used a bookmark and it would say "access denied" or "invalid nonce" or whatever. I still don't understand why are you so adamant on doing it this way, there's probably a reason why it's usually not done this way. Just check for access on top of your controller and that is it. It's actually really, really simple to do. You could have already done that in the time you've wasted stubbornly pushing your idea.
&gt; Why should I use Git if I am the only developer for a certain project? I asked myself the same question. For me it's great as a backup solution. It also allows me to easily pick up my work on another workstation or in my case, virtual machines. You can have cleaner dev and production code bases and you can deploy your production code! Version control is also very nice once you get use to it. I prefer bitbucket; it uses git and you can have free private repos.
In my company we collect keys to translate during the sprints and let them translate in bulk before the release - I would recommend to let your colleagues collect translations via google docs or dropbox and commit all relevant changes every week/sprint/whatever.
&lt;pre&gt;var_dump($var);&lt;/pre&gt; even better
It contains bad practise though: &gt;if (!$json) exit("JSON error.)"; No. Use `json_last_error()`. &gt;echo "&lt;b&gt;7 day weighted:&lt;/b&gt; $" .$json["USD"]["7d"] ."&lt;br /&gt;"; You should escape all output. What if the API is compromised? 
You could move them to a subrepository and only give translators access to that.
There's also the benefit of diffing your changes. It's easy to forget a debug printout or a todo-comment. 
http://www.youtube.com/playlist?list=PLJisTtxH_G6-PaYvn1mFBn3n3PIi3evgn
Yeah but man, if you work an eight day week and boot up in the morning and close down before you go home, that would cost a massive $0.28 per day! Think how many sips of coffee that is!
Yea, it's like a fancier, distributed version of CVS. It differs pretty heavily from CVS in terms of even its core philosophy (e.g., the git work flow is just different from CVS), let alone the tools it gives you versus CVS. The major points are you have your own repository, so you can just commit against that (allowing you to commit while offline) and then you push that up to a master repository, which is more like the traditional repo in CVS terms. If CVS is a single large bus that holds all of your commits, adding them one by one, then git is like an aircraft carrier. Everyone builds their plane (their commits) at home/military base and then you fly it to the aircraft carrier when you're ready. When you get there, the chief mechanic (git itself) figures out what your new version of the plane brings to the table, applies its upgrades to the other planes and the flagship model (the master branch) on the ship. Git then helps you apply other's upgrades to your own plane before you fly it back home for more work. Everyone experiments on one main model of the plane, working towards a final, masterpiece flagship plane that can be published. That was fairly labored, but its all I got.
Yeah, I recommend Scott Chacon's git book (pro git) at git-scm.com.
Git is like when you play a video game and you want to save the game. You did all this work to get to a certain part in the game and you don't want to lose all that work so you save it so you can go back to one of those check points later. This lets you explore the game but always go back to where you were and undo what you did. Only Git is the tool we use to save check points in our code. We can make changes without too much fear because we can always roll back to older versions. 1. It doesnt 2. It doesnt. Its a program that runs on your machine and tracks changes to files on your filesystem. 3. Not the way you described it. 4. For the description I gave above and it allows you to work with other people easier so you don't constantly overwrite each others code.
http://www.manager.io/ was just posted to Hacker News. Perhaps useful for you? HN thread: https://news.ycombinator.com/item?id=6555235
If you want to stick with using VCS, you could create a separate repo for these language folk to work on. Add it as a remote. When you want their changes, merge them in. You shouldn't need to create a separate repo to work like this, but with inexperienced git users to deal with, it will be easier. (alternative is to add lang developer personal repos as remotes, but they probably don't run SSH servers...) You could structure a google-doc spreadsheet with sheet=lang, col A=key, col B=val. The API for talking to spreadsheets is very easy, I think you could write a script to turn this into your JSON file without much trouble. Then you can commit these changes manually (or automatically!) whenever it suits you. Now you've got a 'portal' for your language people to edit which looks friendly. They can't mess up your repo, and they get lightweight version control via google docs. You're also not relying on them to generate valid JSON, which is a strict format. 
It also makes deployment very easy. Make change, stage, commit, push. Rinse, repeat.
there isn't anything in the ZIP folder for me.
First suggestion. Get a github account and put code up on there.
The index.php is there for me along with the folder structure but nothing else. Odd...
I would personally remove them from versioning like anything else that's uploadable/replacable via forms. Backups of the entire live project directory should still be made regularly. P.s. as soon as anything becomes uploadable by users, that something is not tied to the project anymore as it can be freely modified at any time even multiple times for the same project. Therefore it doesn't make sense to tie it to any commit.
The only PHP file in the zip was index.php so all I can comment on is those few lines, a few very minor things: \1. You don't need a closing PHP tag, i.e. ?&gt;, if your file ends in PHP (or the file is all PHP). Helps prevent output before headers if you ever need to send headers in your code. \2. No need to comment everything, especially if it's clear what's going on, like this: include("theme/header.php"); // Include the header theme We can see from the code, and specifically from your file structure (which is good) that you're including the theme header :) 
I always cringe when I see separate header/footer files. Use output buffering to collect content into a variable then send that to a template that includes both your header &amp; footer. Like so: ob_start(); // Output your sites content here $content = ob_get_clean(); include('template.php'); Then in your template: &lt;html&gt;&lt;head&gt;&lt;/head&gt; &lt;body&gt;Header Here&lt;?= $content ?&gt;Footer Here&lt;/body&gt; &lt;/html&gt; Can't comment on anything else since your zip is empty :)
and while you're at it, learn git. i've been writing php forever and am just now learning to use git, but should have done it years ago
I like this idea, but I would like to see this be implemented to where the keys themselves can be determined by the interface already. To elaborate, the developers have built the app using Keys a, b and c. These keys value's need to get translated. It would be nice to see the Google form parse through a JSON object and send all the Keys to a document so they would have to enter "lang" and "val" in your example. That way they wouldn't be able to mess with anything non text.
I am the creator of wardrobecms and just wanted to comment on some of my thinking behind it. First I went with Laravel for mainly two reasons. 1. I am most comfortable with it. 2. It has lots of features that I think will be useful later on. Such as the mail queue, events, package development, eloquent which supports many db types. As for the php version I went with 5.3 which is Laravel's min requirement. I didn't bump it to 5.4 because of some distros not having support yet. That will come but I'm honestly in a big hurry to go to 5.4. Maybe I just skip it and go straight to 5.5. I haven't given it much thought to be honest. I chose to use the repository pattern for the backend storage with only a db backend supported. But it gives devs the ability to use other things like a flat file, dropbox, or something else if they for some reason don't want a db backend. A final decision I made was utilizing composer to separate the app out. So any time you want to upgrade it's as simple as running `composer update`. I feel like this is the future for self hosted apps and so much easier for upgrades. I hope this helps in some way and if you have any specific questions just let me know. 
What is the benefit of using this over having separate files for header and footer and using an include? Other than server requests. Not being dickish, just generally wanting to know.
Haha. This is my first PHP page, however it's not my first website, nor my first language. I'm fairly experienced in many languages including C++, and PHP seems very similar to it.
I don't understand...
You cringe when someone uses include("bla.php"). Then you tell them to use ob_start()? Please explain yourself. And this: &lt;body&gt;Header Here&lt;?= $content ?&gt;Footer Here&lt;/body&gt; What is this?
Oh no, I'm really sorry. When I zipped it I didn't do it recursively.... I decided just to use my github account, so you can look at my edit to find that.
Sorry about that, I didn't do a recursive zip, I made an edit above.
Sorry :/ See above comment.
Wow, thank you so much for that! I kept wondering how the textpress guy did that. I'll make this update as soon as I get time! :D
Right, I have one, been using git for years. I don't know why I decided to use a zip initially. Here you are: [https://github.com/superzanti/Phantom](https://github.com/superzanti/Phantom)
Yeah, I love git. I've always thought it was a shame more universities and companies don't use it. Not a single company I've worked for has even used a good code management system.
I got around the crap shared folder performance by writing a Chef recipe that mounts a cifs share that is on the host PC and will run every time you vagrant up. Only downside is it requires you to set up the shared folder manually on each host PC you use.
My first recommendation is to get the HTML out of your PHP. `echo`ing HTML code in various places makes it very tedious to make chances down the road. If you're using more than one `?&gt;` in a file (and most times one isn't even needed) then you're doing it wrong. Like /u/mayobutter touched on [here](http://www.reddit.com/r/PHP/comments/1ojc75/my_first_php_page/ccsi08r), you should be using some sort of templating. If you don't feel like using an existing template library, simply assigning your output to variables (`$article_title`, `$article_content`, etc) and then echo them from within your template file (`&lt;h1&gt;&lt;?= $article_title ?&gt;&lt;/h1&gt;`). Include the template and you're set. Look into the [Model-View-Controller pattern](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) if you're serious about moving forward.
Parse the HTML content and create the database references. Reference counts are a little dangerous since a mismatched count will either cause your resource to be deleted prematurely or never deleted. I prefer to have garbage collection process just quickly scan the database for any references to the resource and if there are none then delete it. 
PHP is, like C++, a C style language, hence the similarity :) Welcome to PHP! 
This should be the first resource you look at: http://www.phptherightway.com/
Yeah those are all just changes. I mostly wanted people to review the PHP. It uses a flat file system to grap and sort the articles you see.
You are right, i definitely should, but the article is more about retrieving JSON data and showing how to decode its not supposed to be a completed script with error debugging, etc.
Here is how I got it working: 1)Get vagrant and virtualbox setup: http://docs-v1.vagrantup.com/v1/docs/getting-started/ 2)Change to wherever you want your source files stored Run this command if you have git installed: git clone https://github.com/zendframework/ZendSkeletonApplication.git zf2skeleton (The above command will create a directory called zf2skeleton) If you don't have git installed you can just download the package from github and unzip it. 3)Go to https://puphpet.com/ Use these parameters: Select Debian Squeeze 6.07 Name your local VM: zf2 Local VM IP Address: 192.168.56.101 (default) Box sync folder source: ../ Box Sync Folder Target: /var/www (default) Apache Virtual Host: Server Name: zf2skeleton Server Aliases: zf2skeleton Document Root: /var/www/public Add stuff for the MySQL database to make it happy: DB Name: main_db Username: admin Password: password 4)Create the manifest, unzip the contents of the archive into zf2skeleton/vagrant folder. A Vagrantfile should now be in zf2skeleton/vagrant folder. 5)Edit the common.yaml file in the zf2skeleton/vagrant/puppet/hieradata folder. Change the config for the vhost to add the line "override: 'All'" This will change the apache vhost config to have AllowOverride All (Note: Make sure the line endings are Unix. Windows line endings will cause a puppet exception.) ---------------------------- apache: modules: - php - rewrite vhosts: zf2skeleton: servername: zf2skeleton serveraliases: - zf2skeleton docroot: /var/www/public port: '80' override: 'All' setenv: - 'APP_ENV dev' user: www-data group: www-data default_vhost: true mpm_module: prefork ---------------------------- 6)Change to the vagrant directory, do 'vagrant up'. This could take 10-15 minutes to get the box completely setup. 7)Do 'vagrant ssh'. Once it logs in, change to /var/www/ and run the command 'php composer.phar install' 8)Add this to your hosts file: 192.168.56.101 zf2skeleton 9)Browse to zf2skeleton in the browser, you should see the Zend Framework 2 skeleton application. If you go to http://zf2skeleton/bad you should see a ZF2 404 page, not the apache 404 page. 
Where specifically are you talking about? Because I'm using a template. And I use parsedown to parse my flatfiles to html.
There really isn't such a thing as "hardware" load balancers in modern cloud computing stacks, they're just x86 based servers with powerful NICs. And FOSS software has mostly solved the software side of the problem for common protocols (HAProxy for TCP/HTTP).
Ho would you suggest I change it? I'm very new to php.
https://github.com/superzanti/Phantom/blob/master/lib/post.php btw, including a header and footer file is quite cumbersome, try proper templating where you have the content injected into the layout. for a first site this is good, demonstrates some clear understanding of concepts, far better than my first work which can only be described as a turd.
Just a fussy thing, but: **1. Include is not a function.** include 'lib/Parsedown.php'; That would be better. **2. No namespaces present** It would be better to put them in. It's not like it won't work otherwise, but... you know. **3. Next step Composer** This isn't a flaw, but your next step should be learning the Composer package management system. That will save you from having to include anything at all, and let you use external libraries much more easily. All in all, though, this is a really good effort. It's clear, concise, and shows an understanding of the language and what you were trying to achieve. It's well done.
If you have xdebug installed, it will syntax highlight it for you
I guess you have worked for the wrong companies. :)
Take a look at [PTRW](http://phptherightway.com).
If you have your live site sitting on top of another clone of git repo then it's OK to edit "live" stylesheets. Just be sure to commit your changes to the underlying git repository and push the changes to remote repository. Then pull changes from remote repo to your local working copy/clone. So you have all the changes made elsewhere in your local git repo, too.
http://www.tinymce.com/ The thing is, you have to write the upload backend and resizing yourself. You could resize the image in javascript and upload the result though.
I highly recommend Redactor - http://imperavi.com/redactor/ It is much more modern than a lot of the established editors, no iframes or anything, and it supports things like drag and drop for uploading. It does NOT allow resizing of the image, but tbh I doubt you'll find anything that does. If you want things resized to specific dimensions (ie, the same size each time) you could do that pretty easily in the upload script.
Little Bobby Tables is so cute, though.
&gt; lot of the established editors, no iframes or anything, and it supports things like drag and drop for uploading. It does NOT allow resizing of the image, but tbh I doubt you'll find anything that does. If you want things resized to specific dimensions (ie, the same size each time) you could do that pretty easily in the upload script. tnx, i was hoping there was a way to let the user chose the size of the image, after he uploaded. I have seen this function in the magento webshop editor.. 
tnx i will have a look at it. How ever i was hoping there was some editor that had image upload and resize as a default option, and not something you had to make yourself.. I have seen this function in the magento webshop editor.. /edit from their example they seem to have a resize image function :)
Not really... PHP is a weird semi-dynamic language.
ben there.. its greath yes, but no resize image function. There is a plugin for it though but its only for the beta version. I bought reactor, that does that out of the box.... 
Splitting a page into a header and footer completely misses the point that a HTML page is a set of *nested* elements. It also misses the point that the header contains stuff that the body will be requesting, and you probably won't know what goes into the header until after you have generated the body, as a broad assumption at least. I think header.php and footer.php should have been outlawed a decade ago, with a punishment of an appropriate level for their use (probably involving sharp sticks and a feather).
One reason is that what goes into the header is very likely to depend on what ends up going into the body. So you should generate the body first, then you can generate the header, then you should wrap them both together into a page. *Obviously* it depends on just how flexible your scripts are going to be and what they are doing, but good practices should be encouraged. I've seen it said: understand the reasons why things should be done a certain way enough, so that you know when and why you break the rules. So yeah, header.php and footer.php "works", but it has its limitations and traps you down a certain path you cannot get out of.
&gt; How much configuration should be done in static files and how much in the database? Why not abstract it? Send the configuration through a package that decides where and how to store and retrieve it. You can then fiddle with getting the details right later.
I don't think you understood: http://en.m.wikipedia.org/wiki/List_of_C-based_programming_languages
It is "C-like" in syntax but in practise it is not much like C or C++.
context: git bisect 
"C-like" means its syntax shares similarities with C...ie, open/close braces for blocks, etc. I can see you didn't read the link I linked to prior.
I like how you're using PDO prepared statements. Good. I aso like how you have a class for the presentation layer, an object that represents your html document, $page and $site. Perhaps before rewriting using ZF, maybe you can try making a micro framework with what you've got. I assume you're heard of MVC, google if not. Right now, you've already got the View part done, your csite and cpage classes. Great, so now get the Controller part done. That means you'd be eliminating all the independant php files that act as entry points to your application. The browser should only be hitting index.php, unless it's assets like images, css and javascrit. Make your URLs look like: yoursite.com/?page=quotes|shoutbox|whatever After that, you can easily get them to look like this with URL rewriting: yoursite.com/quotes yoursite.com/shoutbox After that, try to get all the logic/important code out of shoutbox.php and contain it within one simple class (could be more that one). The idea is to have it only taking care of the shout box functionality, add a message, get the messages. Let something else make it look pretty. That will be your Model. Presto, you've written an MVC application! Now go learn an MVC framework so you don't have to reinvent the wheel :)
I agree, we recently shopped around for a nice wysiwyg and ended up using redactor. It's very easy to use and has a fantastic API.
I'm well aware of what C-like means, I just don't like comparisons to C or C++. PHP's syntax is deceptive, it is not like either ;)
You should provide copies of the files to the non-developers and merge the changes in yourself. This way they never have to see the git repo.
Redactor is the best I've found and I couple it with an image script utilising [ImageWorkshop](http://phpimageworkshop.com/)
One quick thing I noticed - hashing passwords is good, but hashing them with SHA1 is less then ideal. Not using a salt is even less ideal. The easiest solution, if you're on PHP 5.5 is to use password_hash() which uses a more appropriate algorithm, and takes care of salts for you. If you're on older versions of PHP there's a library you can include and use, https://github.com/ircmaxell/password_compat
You really need to provide more information about what "Dissect is a set of tools for lexical and syntactical analysis written in pure PHP." actually means.
The only think I can think of, from reading his 'readme' is it is a text parser that checks the grammar of the text inputted. But I also didn't read too much, was kind of hard to follow and read.
It's a library to implement your own parser or interpreter of something, for example if you want to make your own CSS preprocessor or text based adventure...
I've been using [ApiGen](http://apigen.org/) and so far it seems to do the job just fine.
I really like the documentation [output](http://api.nellafw.org/class-Nella.Forms.Multipler.html) of ApiGen. Thanks for sharing!
No he doesn't. That actually is enough information to tell you what it is. This might be difficult for you if you don't know how parsers work.
&gt; More like a proof of concept IMO, because people don't need that, There are a lot of template engines implementing their own DSLs. There's definitely a place for something like this.
Very true. I hadn't thought about that use-case at all.
Thanks for the feedback!. And I've actually avoided composer because I want my system to be made from the ground up so I know exactly how it works and can make any modification I want. I'll look into namespaces.
Thanks!
Yeah, I definitely am.
Cleaner code.
tl;dr; NO REASON FOR ALL CAPS [Carefully. Punctuated. Ph. D.]
Including the new version 4? I have used it in the past, and I would agree. I have not used 4, which may be a fairly major change. I'm hoping it loads the heavy bits only for older browsers.
If you are using Bootstrap, Summernote is young (read: recent browsers work great, and there's not many examples out there) but really slick. https://github.com/HackerWins/summernote
Perhaps true. But I would imagine if there were specific requirements of the project they would have been mentioned.
It's... familiar. I think I've seen that on spec documents or something?
You can look it up. The information is out there. I'm pretty sure the docs even link to an explanation of how parsers work. If you don't know what a screwdriver is for, it's not like they give you a complete rundown on how to use one in the package. A certain level of knowledge is expected.
haha alright. Thanks.
pico -w For copious commenting within the code, jEdit, same as I use to write the code.
I've been using Sami mostly because it's so easy to install - simply use Composer.
I understand that you use pico and jEdit to edit your source code and add your documentation... but what do you use to generate the documentation html files?
They're fairly easy (so long as you've at least skim read the Twig docs to pick up the basics of the syntax), but to be honest the default fits most situations perfectly anyway.
Essentially correct. You *can* put the router functionality in the cpage class, but is that the best place for it? (I only used ?page=xxx because it seemed like an appropriate query variable name.) Seperation of concerns is a big deal in MVC, and object oriented programming in general. Yes, a router can, and often is some variation on a big switch statement. But there are other ways to do it, with their own pros and cons - *literal* big switch statement: you're defining, at write time, a map of url segments to controllers - convention over configuration: What if your router could see at run time what controllers are available? or perhaps better, just check to see if a controller exists when a request comes in? See how CodeIgniter routing works. You can also look at how Symfony does routing, it's more complicated, but eventually worth a look. Now. You can have a seperate controller for every page, but eventually, you might realize that many controllers are pretty much identical, except for what they return. Remember, a controller will be a class, which can have many methods, and every method can take arguments. How about? $password-&gt;login($_POST['username'], $_POST['password']); $password-&gt;attempt_reset_pass($_POST['username']); $static_page-&gt;read_and_render($_GET['page']); How will that affect your router? How would it affect other ways of routing requets? Food for thought.
Well, first off you can't do what you are doing. You can only set properties to primitives (string, int, array) when you declare them. To initialize the property with an object, you have to do it in the constructor (or some other setter method). class Restaurant { public $TableGroups; public function __construct() { $this-&gt;TableGroups = new SplObjectStorage(); } }
Worked perfectly! Thanks for the help.
Also, https://github.com/Perennials/jsdocgen was announced here the other day and I find it very nice compared to apigen
If I have to Google what something does in order to know what it's for, maybe that search entry should have been copied into the description? A plain English description of what it's for is surely a bare minimum requirement for documentation. "Uses genetic engineering and alchemy to turn cats into other animals. Requires PHP 5.3." It's not that hard. Edit: when I saw the thing either I missed the link or it wasn't there. THAT is what needs to be more visible. 
Christ, I didn't say it was. Just think that even saying "this has shit to do with parsers" is more information than was provided. I'm not expecting a fucking series of screencasts, just a single two line description of its goal and intended usage. 
Make sure you turn on error notices when you try this, and ensure your variables are set or you'll have a shitload of notices. I'm no fan of short tags. I'd rather use Moustache.
Honestly, in my opinion, since you are dealing with legacy source code (which I assume has a bit of code smell), the best thing would be to write your tests using the same database as is used in production so you are testing as closely to what the application was designed to do as possible.
Why is mocking PDO not a viable option? Even most legacy code doesn't duplicate connection/construction logic. The rest of the application only depends on the PDO interface (even if it's type-hinted), so it's easily mockable. You'll just have to do a very small bit of dev to make the point of construction injectable.
From my perspective, the core language does too much already. This is mostly because a decade+ ago there weren't a lot frameworks out there. So PHP evolved as a quirky language with a large standard library (much of which were wrappers around existing C libraries). Today, that legacy remains, and there are also a ton of native extensions that continue to extend the language in various ways (all that pecl stuff). So, in a way, the language does solve most common web problems. What it doesn't do is provide a modern framework complete with routing/dispatch/controllers, etc. Why not? Because a framework is by nature very opinionated, and they're very top-down. The massive proliferation of frameworks we see in the world today is because people have different opinions about things. Contrast this with lower-level, more "bottom up" things, like cUrl. It's a powerful little component. You might not like the API, but you can easily wrap it with something like [guzzle](http://guzzlephp.org/) or what have you. That said, there is a project called [Phalcon](http://phalconphp.com/en/), which does essentially what you're suggesting. It implements an MVC-style framework as a PHP language extension. As an extension, you can ignore it, and not bloat your interpreter. Or, if you want something like it, with a different API, you can roll your own.
&gt; PHP doesn't really have a purpose besides the web (and it does that very well). That's a fair assumption, right? Maybe for a few cron jobs but that's it. No, that's a horrible and incorrect assumption. PHP is *most often* used for web purposes, but it's more than capable of doing whatever you'd like to do with it, generally speaking.
This was my first thought too. l think you will do yourself a favor in the the long run if you do the work to make the existing "model" testable/mockable. Aside from that, you can make a copy of the database and test against it.
I'd say it's pretty much just for the web.
While some of these things are good next steps for you (OOP, GIT, MVC), the rest are not very realistic. I see more than a single pair of &lt;? ?&gt;’s all the time, I mean you can only separate PHP and HTML so much. I also don't get what's wrong with header.php and footer.php, they're pretty prevalent, just look at a wordpress theme. Looking at your code, no need to use &lt;?php ?&gt; so much, I mean as long as it's all php, what's your reasoning here? The rest of your code looks pretty good to me especially for a beginner. Don't get too caught up in opinion. There's a lot of contradicting opinions about what's good and bad out there, your code is organized and well commented and I see you're not reinventing the wheel but rather using native php functions whenever you can so that's great, you just need more experience that's all. Check out http://www.phptherightway.com/
Anyone who knows anything about parsers **already knows** that lexical and syntactic analysis is directly related to parsers. This tool is obviously aimed at people who have a grasp of this. It's fine not to know something, there are any number of people here who'd help you try to understand it - but don't sit there and try to act like he made a mistake because you don't understand the fundamental concepts or terminology.
Who is using it for something other than web related? [PHP is meant to die](http://software-gunslinger.tumblr.com/post/47131406821/php-is-meant-to-die). *Assuming* you agree with that premise what other software application can you think of where the application *should* die after it's executed?
I wrote some migration scripts the other day to move some data in to a new system. That wasn't web related.
You should definitely use the Spl stuff. Those classes are used throughout Symfony for example.
Wow. Just. Wow. I'm saying it makes it easier for people who want to make their own parser because tools like this are half the battle. If you know how to make a parser, you'll already know what this is good for. If you don't need a parser, or don't understand anything about parsers, this isn't going to help you accomplish anything. Go read a book ffs.
I'm a huge fan of using it in place of my bash scripts. Most of mine are not cron jobs; launchers/batching/cleaning/wrapping are just some use cases.
No argument that it's mostly used for webdev, but your analogy is somewhat lacking since in the time it took to write this reply I'm sure 10,000 people used a bit of toilet paper to blow their nose with great success.
And 1 billion people used it to wipe their ass.
You're missing the point. THE WORD "PARSER" WAS NEVER EVEN MENTION IN THE FUCKING DESCRIPTION. That sort of thing is EXACTLY the sort of information that WOULD have been useful. Done with this dumb conversation now. 
Just what I took from the last thread linked in the main post. But i'm assuming it will be via MVC.
The fact that this had to do with parsers was never mentioned in the readme and would have been exactly the kind of information... fuck it. Wasted enough of my time here. 
Thank you! I'm not sure either about the header/footer, I was just pulling together a list of what to properly look up and read into before I make any more progress with bad practices. Thanks for the link, I'll have a read into it :)
It's a general purpose programming language. As such, you can do anything with it that you can do with any other general purpose programming language (Java, C++, Python, Ruby, Lua, etc.). People have written (non-web) games, daemons, educational software, and all manners of other things in PHP, and it works very well. That being said, people have certainly created stronger ecosystems for certain tasks in other languages. For example, there's an awesome Python game dev community surrounding [pygame](http://www.pygame.org/). To the best of my knowledge, nobody has created anything similar for PHP, so Python would obviously be the better choice for something like that. But this has nothing to do with the actual languages.
Frameworks do some of the work for you. They give you some pre-written code that, ideally, you'd have had to write in one way or another to get your project done. Things like database access and bits that give your code some structure (MVC, etc). Of course, large frameworks end up having lots of useful code, but not always exactly what you want. Your app is beholden to the framework for its existence and your app carries with it all the debt from the framework. That's why there's no universal framework that's good for everything. PHP is a language, not a framework, and as such it must be able to do anything within its large scope. It has to provide you with as debt-free a tool as possible, so it cannot pre-write code for you beyond the basic tools. Some of its tools go a step further, such as the database layer properly escaping parameters. These are driven by demand, but they didn't always exist this way. Within the scope of web development PHP should be able to handle just about everything, whereas Symfony and other frameworks have much narrower scopes.
Just create stuff is my motto! Even if it has been done already, building it on your own is a great to learn and stay motivated. The ideas usually come when I'm in a middle of a boring part of a client project.
Because one of the few saving graces (and one of the things that irk very stupid "smart" people) is that PHP is not an opinionated language. It doesn't force you to a particular style, and while it provides a lot of builtin functionality it often provides multiple ways of utilizing that functionality. This infuriates the intelligentsia that love to brand their methodologies as "the" way to build a platform or application and package it into a system that basically crowds out all competing opinions (see: Ruby on Rails' domination of the Ruby ecosystem.) This may lower the barrier to entry to write reasonably well-functioning code, but it also abstracts away a lot of the sharp edges that invariably show up to bludgeon a codebase once its use case starts to creep beyond the parameters of the surrounding framework. PHP doesn't do any of this for the user, and while a lot of good components find plenty of reuse within the community, they aren't propagated as the only way to do something either, leaving developers free to build towards their specific use case and use only the tools they need, not the tools they were told they must have by some dumbass looking to shill a few "Dummies Guide to X." There shouldn't ever be a "single" way of doing things, that's how unhealthy and destructive monocultures sprout up. Standards like the PHP-FIG group do exist and are being implemented against, but they're voluntary rather than mandatory, allowing for plenty of code reuse within the PHP ecosystem with none of the monolithic bloviating.
You only need to configure it once (for the most of things).
These are not rules, but guidelines. If you break the guidelines, understand why, and if you can justify it, than proceed (although it's not really possible to justify using unfiltered client side input in your SQL queries or the like!) And HTML can totally be output in a PHP file, it's kinda the original purpose of the language. Just try to separate as much of it as you can from your logic so you're not repeating yourself constantly. However, some single file PHP apps actually violate a lot of these guidelines, for a very clear purpose (to be self-contained and easily passed around.) Much like writing, know the rules before breaking them.
SublimeText. Documentation should not be generated.
MVC is an architectural pattern. You use it for large code-bases, when applying OOP best practices is not enough to contain the project's complexity. Instead you should look at [how to do simple templates in php](http://codeangel.org/articles/simple-php-template-engine.html). It will be enough for the size of stuff that you will be making at this point.
Moustache?
The issue with mocking PDO, for my application at least, is the fact that I could be testing one method that makes multiple queries. I can mock PDO ( and PDOStatement for prepared statements), but if I have multiple prepared statements in one query, I don't know of a way to have PDOStatement have multiple return values. Consider: class myClass { public function myMethod() { $db = $this-&gt;db //previously set as a PDO instance in constructor; $stmt1 = $db-&gt;prepare("SELECT x FROM y"); $stmt1-&gt;execute(); $result = $stmt1-&gt;fetchAll(); $stmt2 = $db-&gt;prepare("SELECT q,r FROM s WHERE t=?"); foreach($result as $row) { $stmt2-&gt;execute(array($row-&gt;x)); $stmt2-&gt;fetchAll(); //do some more stuff, you get the idea } } } I'm not aware of anyway I could adequately mock either PDO or PDOStatement to make this work. That's why I was thinking of using SQLite. If you know of a way to do this kind of thing with just a Mock, I'd love to see it (no sarcasm intended. I'd really like to know if this is possible).
I ran across a similar issue earlier, and found [DBUnit](http://phpunit.de/manual/3.7/en/database.html) to be extremely useful. I believe it uses PDO and sqlite in the background. Edit: Use the phpunit/dbunit extension, not DBUnit stand alone.
[Read this](http://phpunit.de/manual/3.0/en/mock-objects.html). Pay special attention to `onConsecutiveCalls()` and `at()`. That's just for built-in mocks, though. If you find that it's not expressive enough (or easy enough), you can always create your own mock objects, and do whatever you want. **Edit:** Sorry, I linked the wrong doc version. [Here](http://phpunit.de/manual/3.7/en/test-doubles.html) is an updated link.
Is there a problem with editors filling in a docblock comment with default values when you type /** and hit enter? Generation can be a fine way to handle the upfront cost of "boilerplate" especially on a large and already undocumented project. Additionally, some IDEs are capable of detecting parameter types and return values, and can provide docblock hinting with smarter defaults. This is arguably better than not having a tool to generate the basics.
&gt; but to be honest the default fits most situations perfectly anyway. I personally only want to modify the look of the resulted documentation to fit the layout of my site. I had a look and it is indeed very easy to do that. Thanks!
/* What documentation? */
Great insight, thanks!
I've seen PHP listed right along side R and S on research scientist job postings - most certainly not for websites.
I think it's a lame attempt at stereotypical humor at the expense of the French.
Mixing HTML and PHP is not inherently bad, but can often be a symptom that you have not separated your concerns. http://en.wikipedia.org/wiki/Separation_of_concerns The rendering of the data (the view) is one concern. Handle the user's request (a GET request to /foo/bar) is another concern handled by the controller. The knowledge of where your data is stored and how to access it is another concern (the model, although the concept of a model is a bit more complex than this). So if you have one php file at /foo/bar.php which is responsible for 1. Handling the request to that URL 2. Loading data from a database 3. Displaying that data Then you are mixing concerns in a single file, and this is considered a bad practice because it makes it difficult to re-use your code (what if you need to load the same data at a different URL and show it as json instead of html?). The MVC architecture is one approach to handling separation of concerns by encouraging you to separate the controller (handling the user request) from the model (your data and business logic) and the way the data is output (the view). This is an oversimplified explanation of MVC but I think understanding the concept of separation of concerns is more important than following a rule such as "never mix html and php". It is perfectly valid, for example, to have PHP classes or functions which are used in your view and which generate HTML. In your example perhaps you have a function that builds a select dropdown based on an array of data.
That tutorial is terrible. I'm sure every newbie starts building their sites that way, but no professional does this. You'd be better off looking at a [template engine](http://codeangel.org/articles/simple-php-template-engine.html).
I think that's a false dilemma. The same language can effectively support multiple frameworks for different use-cases. PHP is a servicable language, suitable for a CMS-type site, or a RESTful API to feed data to a mobile app. But there's no one-size-fits-all framework for those use cases. You might use Phalcon for the API, and Symfony for the CMS, for example. Languages and frameworks are different things. Even though PHP itself is kind of "framework", it's not really (in the modern sense of "framework) -- and for good reason. As a language, it's more closely tied to HTTP (superglobals, fopen() accepting urls, etc) than other languages, but none of that stuff is what you expect from what people call a "framework" these days, which is mostly concerned with routing/dispatch/ORM. 
I don't think he's rude either. I think OP was referring to the fact that he can sometimes come across as a bit arrogant. That's understandable as he's a very clever guy, and usually when he talks about something, he's right and he _knows_ he's right. That confidence, coupled with a rather strong french accent can come across as rude. The one time i've met him, he was very nice and friendly. 
I'm not sure what you mean. You asked specifically if Symfony-type stuff was going to go into PHP core. It isn't. But Phalcon is an attempt to *optionally* add a symfony-type stuff as an extension. Which is the right way. So if you like the API of Phalcon, that's great. You get a super-fast framework. If you don't, you can use any other framework, or write your own, either in PHP, or in C (as an extension) 
I think that generally php is a very solid language. It's constructs allow you to do many very sophisticated things that you would see in Javascript, Java, C, maybe not C++, minus the whole pointer &amp; strong-type stuff. Python has a few frameworks which people use, but nobody dare say make them part of the language. Many of the things which python preports to have, are starting to come online in the php world like pthreads for php. If you're going to pick up php from a python world, throw your "why nots" into the trash and just make shit happen, if it works and it's not overly complicated, it just made your life easier. You will see horrific code written in both python &amp; php. Frameworks are what make your code easier to maintain because of the interfaces which you follow &amp; implement to a particular documentation standard. Relax and have fun with the langauge. Throw out your *why nots* please.
just curious because i know a lot of php but now i'm learning python why would you want to learn php if you know python?
IMO PHP does solve most of the common web problems, I'll list here: * **Template system** PHP needs a [start tag](http://www.php.net/manual/en/language.basic-syntax.phptags.php) so you can [mix HTML and PHP code](http://www.php.net/manual/en/tutorial.firstpage.php). * **Dealing with forms** You have one [superglobal](http://php.net/manual/en/language.variables.superglobals.php) var for each type of common web request **$_GET** and **$_POST**. They're arrays and [working](http://php.net/manual/en/tutorial.forms.php) with them it's on the core. When you're uploading files you have another [superglobal array](http://www.php.net/manual/en/reserved.variables.files.php) with the uploaded files data. You can also [filter and validate](http://php.net/manual/en/book.filter.php) the inputs. * **Cookies and session** There's a core function to [set the cookies](http://php.net/manual/en/function.setcookie.php) and again a [superglobal](http://ar2.php.net/manual/en/reserved.variables.cookies.php) to dealing with them. For sessions you have another [bunch of functions](http://ar2.php.net/manual/en/book.session.php) and *you guess!* another [superglobal](http://www.php.net/manual/en/reserved.variables.session.php) var. * **Database** You have [abstractions layers](http://php.net/manual/en/refs.database.abstract.php) and also extensions for a lot of [database vendors](http://php.net/manual/en/refs.database.vendors.php). * **Configuration** You can read a [.ini file](http://php.net/manual/en/function.parse-ini-file.php). This is the only option and the only *cool* feature is that you can use your's or PHP defined constants in the .ini file. Nevertheless I used a lot in legacy projects. * **Caching** [APC](http://php.net/manual/en/book.apc.php) and [Memcached](http://php.net/manual/en/book.memcached.php) are availables. * **Security** You may protect your input from a [XSS](http://en.wikipedia.org/wiki/Cross_Site_Scripting) attack with [htmlentities](http://php.net/manual/en/function.htmlentities.php) but you should use it [right](http://shiflett.org/blog/2005/dec/google-xss-example). For a [sql injection](http://en.wikipedia.org/wiki/SQL_Injection) you should use [prepared statements and parameterized queries](http://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php/60496#60496). You should be aware of the [remote file inclusion](http://en.wikipedia.org/wiki/Remote_file_inclusion#PHP). * **Authentication** There aren't auth functions. You can use [HTTP AUTH](http://php.net/manual/en/features.http-auth.php) for a simple web. * **AJAX/REST integration** You may deal with (JSON)[http://php.net/manual/en/ref.json.php] but there's no support for DELETE and PUT requests, you should [parse it by yourself](http://stu.mp/2008/05/parsing-put-requests-in-php.html). * **SOAP** I added [SOAP](http://php.net/manual/en/book.soap.php) because PHP is used a lot as a web service platform against mobiles apps. So with all of this *core* solutions why you should you use a framework? 1. All the solutions are integrated for example your database already knows how to read the config file. 2. You have a convention to follow. You know where to put your classes and how to name it. Finally, should Symfony move their components to the PHP core? **Nope**. Programming an extension is hard. You have to do it in C with a Zend library support. Write it in PHP it's faster. From the developer point of view it's easier to upgrade a code that a C library.
&gt; Just the pieces that don't really change so much, so you get a single way of doing things. That doesn't happen. Web technologies are constantly evolving. Imagine what a PHP framework would be like if it had been set in stone 5 years ago? It would look nothing like modern frameworks in any language. It would be antiquated. PHP doesn't really have a purpose besides the web *but* it was designed to basically replace C for coding up web pages. Historically it's been very low-level. Much of the API is just thin wrapper around existing C libraries (warts and all). 
For those curious, the video mentioned can be seen here: http://www.youtube.com/watch?v=0erGiEm07b8&amp;hd=1
Ok Im starting to work on what you suggested, will get back to you later when its done or if I get stuck on something.
I would be willing to bet that there are hundreds and thousands of examples of php being in non-web related production use cases. They may not be in the public or open source, but they exist and they are running. My personal example would be a suite of tools I wrote for managing OpenVZ containers on host machines. The purpose of the scripts was to efficiently manage the resources and availability of N number of hardware nodes for M number of containers. When a certain container started consuming resources (greater than configured thresholds), or a hardware node failed, the containers could be automatically moved to different nodes. This was all handled by a master daemon on a control/monitoring server (heartbeat/drbd for ha) and orchestration daemons on each of the hardware nodes to issue the OpenVZ commands. Master and orchestration stayed in contact with each other at all times and a mysql db held the node layouts. If anything started to go wrong, master would spring into action and do it's thing, graceful (resource usage) or forced (node failure). This was all done with a handful of php scripts that used the stdlib. We wrote this in php, because we felt most comfortable with php. I'm sure I would do it differently now or maybe there by better tools these days (I don't follow OpenVZ anymore), but back then it was what we had and it worked really well.
I use PHP to deploy my applications to my servers and other PAAS.
hey, you are thinking right, this is not rocket science so it should be simple as it could be. If you're putting inputs in your form that belongs to different models, then maybe you should reengineer your models? There is nothing bad with embedding couple of forms on one site and submit them at one time. What you say is that you had to create some new logic in your application to handle these forms/inputs. Try to rethink this and see if your model is really done well. For example Symfony2 Forms, allows you to build form that maps given inputs to your model properties, but also allows you to add not mapped inputs. It also allows you to embed form inside form, so you can create, for example, an article with couple of categories, which will be automatically mapped to article class and couple categories classes.
Trying to test a difficult to test version so you can make it more testable sounds like a bit of a funny mission? Do some re-writing then spend twice as much testing after the rewrite, then you have more tests and less hassle. 
I'm a bit of a dinosaur who started using PHP in the late 90s, after a brief affair with ColdFusion, preceded by a couple of years of writing CGI stuff in C and Perl. In the 2000s, I got to know, and love, python and ruby. Java was a constant thing that I was mostly ignoring (but sometimes dealing with) throughout PHP is worth grokking, because, as OP sort of pointed out, a very low-level web framework is built into the language. People love to hate on it, but PHP still has it's historical strengths, like the fact that a representation of an HTTP request is built in via superglobals. No muss, no fuss, no objects. Just a perlish hash called $_GET, or $_POST, or whatever. So, for the quick-and-dirty, you don't need to make very many decisions. The obvious web-related stuff is all there. You want to send a response header, you call header(), as opposed to SomeGuysHttpLib:Response:SetHeader(). And if you need that level of abstraction (a nice OO HTTP response object), you can take your pick of a bunch of libraries and roll your own. In Python, if you want to make an HTTP request, you need to adopt a userland framework. Python is a *great* language. I love it. But if you want to write a prototype client for some web api, you first have to decide between [requests](http://www.python-requests.org/en/latest/) , or [urllib2](http://docs.python.org/2/library/urllib2.html), or whatever the library-of-the-week is. In PHP, you have the option of using the canonical, built-in, methods. Use curl_\*, or you can even be cheaper (for GETs) and just `fopen('http://something.com/api/route?param=bork', 'r');` and it works just like reading a file (you can even use the built-in file_get_contents(). In some cases these are dangerously sharp knives. But that's the point. PHP allows you to be quick-and-dirty (for web/http based things) when it's called for. It doesn't *force* you to be, but it gets out of the way if you want to "move fast and break things". Further, PHP is easy to deploy -- both the stack, and the applications that run on it. mod_php is a thing (it sucks, but it's a thing, and it didn't suck back in the day, and it's still servicable for a huge number of use cases). You install it with your package manager, you write a .php file somewhere in /var/www, and it just works. Python webapps aren't too horrible to deploy, but you need to use a lot more brain-cells. And for a simple script that just crunches some data in some database and outputs a CSV for some PHB ... you want a script, not an application. So why would a python programmer learn PHP? Because in the real-world, businesses often demand ad-hoc scripts that might live for a day or a decade. Modern PHP retains the ability to write one-off things very quickly, and deploy them by copy/pasting it into vi and saving it in /var/www. And PHP has gotten good enough, that if that one-off script becomes critical, you can actually iterate on it, apply big-boy design patterns, and turn it into a proper application. If you hand me a great, detailed, specification, I probably won't pick PHP. If you have a modest need, a tight timetable, and limited budget, I'm not afraid to pick PHP. Believe me, there's nothing I'd like more than something like PHPython -- basically PHP with a super-clean syntax, while retaining all the handy shortcuts the PHP ecosystem provides. But at the end of the day, the PHP language isn't *that* bad, and it provides a ton of shortcuts that are incredibly useful in the real world.
This is a great project. Advancing your programming skills isn't always easy but it is rewarding. As a baby step toward learning object oriented programming I'd recommend breaking your script down into functions. Have a function for retrieving the raw data from the Eve API, have one for formatting it, have others for gathering specific info, and another for building and outputting your HTML. The script will still be procedural but it will get you thinking about your code as discrete elements with specific jobs. That in turn will help immensely in making the jump to OOP. As a bonus it can help get rid of redundancy and simplify your code. Another thing you can do is start learning [cURL](http://www.php.net/manual/en/book.curl.php). Using file_get_contents takes fewer lines but it also has fewer options and can run into problems on certain server configurations.
This is a great improvement! (but seriously: have people tried to get errata through for "this spaces thing must be an error, let's use tabs, mmmkay"?)
The complete opposite to "no fucks were given that day" by Phil. I really like this, thanks for caring!
Thank you sir.
Nobody will be able to do that, and even if they try we'll just reply with "lol, nope". Errata cannot break backwards compatibility, and is used for clarification - not actual change.
And one of the integrated tools that are most "web" is *header*.
I think the lesson here is thus: Don't write specifications without having a reference implementation. That's the only way to be reasonably sure that everything was specified correctly. (Yes, this also includes coding style specs :)
That sounds logical. Wouldn't [addendum](http://en.wikipedia.org/wiki/Addendum) be a better name, then? 
Maybe we can make an errata piece to suggest we should have used the word addendum? Ha. No but either works really. Errata is: &gt; An error in printing or writing, especially such an error noted in a list of corrections and bound into a book. This is what we're doing really. It's mostly errors (the code example had a fatal error), or "we didnt mean this, but some folks though we did because of shitty wording". They're both about the same. Either way, aint nobody switching spaces to tabs.
While code level documentation generated with ApiGen and alikes is good and necessary it's not sufficient. You need documentation about architecture, design, access, integrations etc... Confluence is excellent tool for that kind of written, non-generated documentation. You can also use Google Drive for that purpose.
Absolutely. If there was an implementation set then this would never have been left as an ambiguity. There are still loads of discussions left. How to handle an interface that extends multiple interfaces - for example - is the second potential errata. There is loads of this stuff, which one day I'll probably turn into a brand new PSR which replaces (deprecates, supersedes, whatever) PSR-2. Patching is not fixing, and hindsight is a bitch.
Just because something is popular and/or used by Wordpress does not make it a good idea on its own, and I'd actually suggest that if WP is doing it, that's a smell of its own. The deal with stuff like header.php/footer.php is that they really only work for simple, procedural pages. As the complexity grows, you're going to end up with spaghetti code and non-DRY all over the place.
What are you referring to exactly?
Is everything in Laravel called statically?
It's beautiful. 
In this specific case: The improved CS looks a lot better. The before version was slightly stupid. In general: PHP-Fig is not a rigid organisation, and figures out a good way to make established PSR's better. 
Laravel has "facades" which just serve as static wrappers for classes inside of its container. However, behind the scenes almost all of the classes are instantiated by providers and then stored inside of the container.
and it's completely optional. You can inject the objects being used behind the scenes by the facades into your objects, rather than using the facades.
Ah that makes sense, thanks :)
Let's hope phpStorm makes the same changes ASAP. I've had PSR1/PSR2 disabled due to the Multi-line Argument Issue. Thanks for giving it some attention Phil!
I guess that does imply there's some globally accessed/statically registry though, right? Otherwise the static methods wouldn't know which objects to call...
There have been a _lot_ of stupid fights online about whether 'spaces' are better than 'tabs' for indentation, or vice-versa. The PSR-1 and PSR-2 settled on 'spaces', for various reasons, and a lot of people didn't agree with that. In fact, there are still a lot of people who religiously refuse to use the PSR standards, because they prefer tabs. In practice, it really doesn't matter that much, because your editor or IDE allows you to use either transparently. For an example of the sillyness surrounding this, see this: https://github.com/php-fig/fig-standards/pull/91
Don't use it for other things beside web. Seriously, don't.
Curious, how is file_get_contents limited versus curl? Also, if you're going to use cURL, might as well use guzzle to make it sane. http://guzzlephp.org/
Why so expensive? $119/year seems awfully steep.
They don't.
Nice! I take a very very similar approach, slightly different implementation but the idea is the same. Generally I create a base validator (just like your abstract validator), then extend with individual "create" and "edit" validators to merge in rules specific to those contexts but I like the way you've laid things out here with the passes($method) implementation. The other thing I do slightly differently is implement the MessageProviderInterface on my validation classes so that I know consistently I can call getMessageBag() on whatever object I might expect messages from, be it a validator or something else entirely. I 100% agree on the general principle of handling FORM validation separately from MODEL validation.
I use this all the time! My only gripe is that the column edges get overlapped by each other and I can't read the last bit.
ah that's pretty interesting, and a bit crazy =)
Phil, can I ask a dumb question related to PSR-0? There's some ambiguity in the first point: A fully-qualified namespace and class must have the following structure etc. This is a point of contention between myself and a colleague. I think it's implied that the namespace is mandatory, and every part of PSR-0 is moot if it's not present. He reads that at no point does it specifically say that a class **must have a namespace**. Merely says that *if it does* it should have that format. I acknowledge the ambiguity, though, and wondered what you (or others) think?
Now if only I could actually get Laravel installed and working :( Keep hearing a lot about it, but cant try it because the install docs don't seem to match what you need to do to install it, and I can never get anything working. Edit: The basic install I tried didn't work. The docs seem to be wrong.
Printing and shipping is expensive. The difference between our digital and print editions is simply that extra cost, which we pass on to the customers that want the print edition. We also don't stuff the magazine with advertisements. Finally, we pay our authors and pay to have a technical editor review each article.
Anybody seen something like this for Yii? I know about [this one](http://www.yiiframework.com/files/yii-1.0-cheatsheet.pdf), but I'd love something as in depth as the OP's.
Not sure what you are struggling with but the install is actually pretty smooth I'd say. Install your webserver with PHP 5.3+. Install composer. Load the master.zip from GitHub and extract it to your webserver document root (or set up a virtual host). Run composer install from the document root and watch it install.
Guess you are right. But I can't really figure out what this has to do with a basic Laravel installation, whic I interpreted was your struggling to begin with.
Came here to say FPDF and ImageMagick. I can personally attest to the general friendliness and speediness of the guy (Jan Slabon) behind the commercial &gt; v1.4 pdf's extension for it , as I bought it (for work) recently. Curious to see if there are other suggestions as well! Good question OP.
The problem is the deployment for this framework is fundamentally broken in terms of accessibility; I'm blind so I cant do what others can if the composer install isn't working (and is not)
I understand that opinion. The code that I'm trying to test is mission critical business logic. I really didn't want to set out rewriting large chunks of it without some tests in place to make sure that I'm not breaking things.
So trying this for a private project isn't an option? Well maybe you say: coding for a living is enough and I don't want to code at home. But not giving it a shot is pretty easy to then say: I can't get it to work.
I generally use the cupsfilter command line tool to generate a PDF. 
wkhtmltopdf if you have a dedicated box you can install stuff on. Don't have to deal with any PDF-specific stuff, just make your markup look the way you want, and let wkhtmltopdf do the heavy lifting to give you a PDF.
Using [PDFLib](http://www.pdflib.com/) for one of my projects. Thankfully, it was already purchased by the client (it's expensive). At the time of the project, we needed specific features that we could only find in PDFLib. 5 years later, they're probably available in open source libraries. I can't specifically remember what the features were, something related to printing.
[Composer](http://getcomposer.org/) is a command line tool used to manage dependencies in a project, similar to Node's `npm`. It lives somewhere in your executable path and is (should) never be executed by a server. It doesn't handle web requests or responses. It just manages dependencies. It can be used as a production deployment tool to manage distributable, packaged dependencies for a project, especially in a continuous integration environment.
I don't know how you end up changing your code in production with the Laravel framework. You clone the core repository and then run composer to install the project. What composer does is pull the dependencies that the framework depends on. You're not physically changing any code and I'd say that's responsible package management. You can then commit your changes to a repository of your choosing that holds the core code and then deploy it to your other environments, run composer, and have it work right out of the box. The other thing too is that it allows you to specify other environments, so your core repository of code could contain the configuration files for your development, staging, and production environment.
What I really need is a library that can open an existing PDF with form fields and fill out those fields. Haven't found one yet :/
I use [dompdf](https://packagist.org/packages/dompdf/dompdf). Just generate your document in HTML and CSS and feed it into dompfd.
Thank you!
Hey sorry about this, I've added word-wrap: break-word; to the colums now. :) It's been a bit of a tossup between do I make it just two columns, make the font-size smaller, or leave it 3 and word-wrap.
I code at home all the time; I just hold the same standard for my code at home as I do at work.=, so that means if I cant do it the right way, I don't do it. 
We've tried DomPDF, wkhtmltopdf and FPDF. Each one seemed to have at least one important feature that it couldn't do. We have since moved over to generating LaTeX output and running it through a conversion. Developing the necessary framework has been a bear, but the control and flexibility has been well worth it.
The problems the composer based install; What exactly is composer doing, and do I really need to do this every time for every computer this code runs or is developed on? Seems excessive, if so. As it stands, I cant get the composer thing to work and getting it to work seems to be a prerequisite so I am blocked. 
It seems to me that the idea of "spaces for tabs" makes less sense than using... tabs for tabs. It's the one part of the spec I find really annoying. It just seems really silly. But I follow the PSR standards still. Because not doing so, regardless of my personal opinions, is way sillier.
I've been following the spec regardless. Most of the time it's fine, but things like routes... damn they get clumsy looking. :(
This is what I've used too and it seems to be the best free tool out there for PHP as far as I can tell.
ReactPHP solves little problems. IF you want to do async programming ,you need async IO , PHP doesnt do async IO. PHP db drivers are not async for instance and PHP threads are very weak. Go ,Scala or NodeJS is more suited for that. ReactPHP however can be replaced by an message bus, like RabbitMQ. This works quite well.
PHP is great at 2 stuffs, shell scripts and web apps. Python is a real general purpose programming language not PHP,because of the way PHP works .PHP is a Hypertext processor,it's goal is to generate text.
i believe you're being down voted because your lack of composer knowledge. While most people will have composer installed on all of their machines it's certainly not necessary on your production server. You could check all of your vendor packages into your version control along with the rest of your project. You **can** be sure you are using the same version of composer packages across your different environments, this is what the composer.lock file is for. It locks down the current versions of packages you're using. Most of the popular composer packages come with their very own set of unit/integration/functional/etc tests so both the developer of the package and its users can be confident in its quality. Symfony, zend, etc components can all be found on [packagist.org](https://packagist.org/). Composer isn't just about managing packages though. You can use it to create your autoloader for all of your classes. It's **extremely** handy. I'd highly recommend getting a little more familiar with composer.
Hey there, creator here, I gave the DB section some love today based on your recommendation. In regards to the Schema builder, I just haven't gotten around to it yet (been busy). Feel free to write a pull request though. [Github](https://github.com/JesseObrien/laravel-cheatsheet) In regards to Eloquent, some of that stuff is hard to display on a "cheat sheet". It's meant to be concise and easy to read, and getting across the point of a mutator concisely without just mimicking what's in the docs is hard.
+1 for FPDF.
So I upgraded my VPS' wampserver to 2.2 and now It shows these errors, I have no experience in PHP so I have no clue on how to go about fixing these errors. How would I fix this? 
I'm guessing you had errors suppressed before and now they are not. It's better to actually fix them, however. Without seeing the code it's really hard to tell, but my guess is you're trying to work with the post variable before it's been posted. I'm also guessing that if you fix the first problem, the rest will go away too.
+1, I use wkhtmltopdf in my projects as well, but I must say it's somewhat disconcerting that it hasn't been updated in over two years, and there's over 700 open issues in the issue tracker. It seems that changes in the qt lib have made it really difficult to compile webkit into a static binary without major hacks, so development on wkhtmltopdf has pretty much stopped until that can be resolved.
Great!
They're pretty simple errors to fix. Where those vars are undefined, give them a default value before the code block they get assigned in somewhere. For the undefined index, you can try something like: if (isset($your_array[$name])) { Do your stuff }
Composer just pulls dependencies. If you've worked with NuGet, it does exactly the same thing. All it does is pull dependencies into the project. Nothing more than that. It doesn't change code, it just adds the libraries you need. If you believe that dependency managers destroy what competent developers do, you must not be a competent developer because the future is in utilities like NuGet or Composer. Composer only runs the first time to install all prerequisite dependencies for the project, not every time you try to execute code in the project. So you do have to run it once in every place you're deploying your code. Also, what are you trying to do to get composer installed?
How can I preview some of your content without paying anything?
https://code.google.com/p/wkhtmltopdf/
You should set xdebug.scream to 0 (zero). It is overriding the error supression in your code. See: http://xdebug.org/docs/all_settings Best thing would be to refactor your code so that you don;t need to suppress any errors though.
Any reason it needs to be a tag, and not an attribute? e.g. &lt;item name="one" value="1" /&gt;
&gt; I don't think i want to put the validation inside of my models. I'd like to validate the data before it gets pushed into the model. I think you're right on the first point, but not on the second one. I urge you to take a look at the [Symfony Validation Component](http://symfony.com/doc/current/book/validation.html). You can use it stand-alone and integrate it into your Lavarel app. I don't think that you should force validation into one point. You should use multiple validation points. Take for example a simple mailinglist form that maps to a subscription object. The form has a field for the name, the e-mail address and an extra field to confirm the e-mail address. The first step (on the server, after any HTML5 client-side validation) is the form validation. You only need to validate things here that are specific to the form. In this example, the only validation required is that the e-mail field is the same as the e-mail confirmation field. Then, push the data into the subscription model and validate the model itself. This is where you check that the name and e-mail address are valid. So, you separate the form-specific validation from the model validation. This has the advantage that you can reuse the model validation elsewhere. For example, you could push data into a model over an API and validate it before saving. But this doesn't mean that you have to implement the model validation inside the model itself! The Symfony Validator, for example, allows you to separate the validation rules from your model (in a separate XML or YAML file for example). The validator simply takes your model with data in it, loads the validation rules from somewhere else, then lets you know if the model is valid or not.
I am a very competent developer; I just dont use PHP very often as I can usually find better solutions with other languages. As for how I installed composer, I just run the exe. 
Thanks for the idea, but that seems like it can't support nested arrays. With my version you can get &lt;elements&gt; &lt;one&gt; &lt;nested&gt;hello!&lt;/nested&gt; &lt;/one&gt; &lt;two&gt;2&lt;/two&gt; &lt;/elements&gt; But with your option there is no way to do nesting.
We use it in our project and it mostly does the job just fine. The only issues we've had were with tables sometimes causing page breaks in weird spots, and sometimes not being displayed at all if they would fall at particular points in the document. Nothing that couldn't be easily worked around though.
That doesn't work on windows; And composer (and composer is really the issue here) doesn't work when its installed. 
Hi bobef, Sorry to hijack your thread, but I came across this post. I'm doing something similar for a 2 day hackathon for a friend's birthday, and would love your feedback. Your project seems very mature, with a lot of features! It'd be neat to compare notes, or if you just want to say hi, let us know. About the hackathon - http://www.onlinemarkdowneditor.com/docs/tbrianjones/ome-docs/DOCUMENTATION.md Chat room - http://tlk.io/ii_hackathon
It's definitely in need of some refactoring, but considering it's long history and constant updates it's pretty good.
How about setting up a virtualised development environment then, perhaps running something like Ubuntu? There are free solutions available you could use, such as VirtualBox, to achieve this. Have you looked into Vagrant? My company has developers working like this, some running windows, some linux, some mac, and it makes things a lot easier.
 composer create-project laravel/laravel your-project-name --prefer-dist Found here: http://laravel.com/docs/quick I am running Windows, it works perfect for me each and every time.
Something built into PHP is terrible? Colour me surprised.
Composer works absolutely fine on Windows. Install it correctly and it will work correctly. I run it on multiple versions of Windows and it never has failed once for me.
At the startup I used to work at we used to use this &amp; switched over to wkhtmltopdf due to performance reasons. TCPDF was a disaster if you were trying to make fairly large PDFs.
&gt; And what would happen if you needed to access query parameters in a POST request Request::query()
Since its clear I'm not going to get out of having to remind you all of this, I'm blind. As a result I have hardware and software requirements that I must keep to; and since in this case the software doesn't support standards that most other things do, I'm sort of blocked and cant do any of that if a prerequisite like composer doesn't work. Don't you all feel so much better now, knowing you down-voted the blind guy who just wanted to check something out? This is why the PHP community gets a bad reputation.
I've ran into similar issues, but unfortunately some applications have to be installed on environments where the client doesn't get to install their own packages.
I'll be more than happy to help you out. Can you post either a copy paste or screenshot of the output?
I use tcpdf. Not very lightweight, however.
my PHP Project at work uses TCPDF
Tcpdf because of the UTF8 support, and fpdi for using an existing PDF as a template (works with fpdf too). Although I mainly use them for form / application output more than for images.
Simular to the price per year when the magazine was doing their first print run under the previous management. Eventually the price started to drop as more people subscribed to the print issues. I assume the same thing will happen under the new management.
I was bored this evening and wrote this real quick. Enjoy. &lt;?php /** * Class XmlArray - Handles converting a multidimensional array into an xml string. * * Usage: Instantiate the class (new XmlArray), call the toXml() method with a multidimensional array * as the first parameter. Viola. This can handle an unlimited amount of nested arrays. */ class XmlArray { protected $collector = array(); /** * Recursive method which handles parsing an array into XML * * @param array $data (required) * @param bool $parent (set by recursion, you can also use this to nest your entire XML output) * @return string */ public function toXml(array $data, $parent = false) { if ($parent) { $parent = $this-&gt;normalize($parent); $this-&gt;collector[] = "&lt;$parent&gt;\n"; } foreach ($data as $key =&gt; $value) { if (is_array($value)) { $this-&gt;toXml($value, $key); } else { $this-&gt;collector[] = $this-&gt;xmlify($key, $value); } } if ($parent) { $this-&gt;collector[] = "&lt;/$parent&gt;\n"; } if ($parent === false) { return implode('', $this-&gt;collector); } } /** * Sends a key/value pair to the normalizer and returns a well-formed xml node. * * @param $key * @param $value * @return string */ protected function xmlify($key, $value) { $key = $this-&gt;normalize($key); return "&lt;$key&gt;$value&lt;/$key&gt;\n"; } /** * Strips any invalid characters from the string parameter. This includes any non * alphabetic character from the first position in the string, and any instance * of XML in the first position of the string. * * @param $string * @return mixed|string */ protected function normalize($string) { // strips any non alphabetical character in the first position $string = preg_replace('/^[^a-zA-Z]{1}/', '', $string); // using regex to check for xml is overkill $string = (strpos(strtolower($string), 'xml') === 0) ? substr($string, 3) : $string; // strips any whitespace $string = str_replace(' ', '', $string); return $string; } }
Try msysgit. It delivers a bash terminal and git command line tools. The thing that irks me about Windows is its lack of a bash terminal. That's a real power tool that most developers need to be their most productive.
this is bar-none the best PDF library out there for PHP, http://www.setasign.com/products/setapdf-core/details/ you can add annotations to pdf files, fill out forms w/ it, it does a lot. It does cost money though.
thanks for responding. I agree with what you're saying and i believe i'm already abstracting the validation out to be used in various places. Check out my RegistrationValidator object to see what i mean. I do need to look into how symfony handles it. I've liked what i've seen from doctrine
We're also using Prince at my job. Seems to work really well, the PDFs our product generates look awesome.
I got it fixed now! Thanks a lot guys &lt;3
Yeah, we can make some beautiful PDFs. I was using Crystal Reports before this and Prince is so, so much better. The amount of hacks I had to do in Crystal Reports is ridiculous. The amount of times I had to tell people that we couldn't do something because it was impossible or extremely difficult was also getting frustrating.
Interesting, I went the other way, starting out of college (with a class in forth and a side of postscript under my belt) writing PHP that wrote postscript to be run through ps2pdf. Then I went to LaTeX, and now I use a slightly customized FPDF. (I added Cell() parameters for vertical alignment, padding control, and an option to decrease the font size towards a minimum in order to fit a string in the cell.) PostScript was probably the slowest way to do anything ever, but at least I knew exactly what I was going to get. LaTeX was OK, and when things worked they worked quite well, but at our company it was kind of a cult thing. You got it to work *and then you never touch it again because you know what happened to Bob when he touched it and it broke and the statements were printing out in 3pt Times*. Most of the things I raged about over FPDF I worked out. I ripped apart the MultiCell code to work out the line-wrapping algorithm so I could find out *in advance* how many lines MultiCell of width W would take to print a string S (why the hell is this not a builtin function???!), then used that to create tables by determining the tallest cell in the row and coping with page breaks and drawing borders manually rather than letting FPDF do it in MultiCell(). I've only got one thing I've never had the time to really figure out with FPDF, and that's how to get it to generate a PDF that the PDF viewers will print out correctly by default. Since we're printing statements onto statement paper we need the numbers to go in the boxes and the addresses to go in the windows, but the default in all of the various PDF viewers is to screw with the margins (or as we affectionately call it in our office, "shrink to sh... fit"). Someday I'll have a few hours and a stack of paper to blow on figuring out what margin settings make the PDF come out right, but until then, we just double check before printing the statements to make sure the browser hasn't secretly replaced Adobe Reader with their viewer to see if we'd notice.
Yes, and I also tried the same with my eyes, but I'm still blind and composer still doesn't work.
We've dealt with the print scaling issue, too. How we solved it within TCPDF: $tcpdf-&gt;setViewerPreferences(array( 'PrintScaling' =&gt; 'None' )); Looking at the underlying code, it looks to be writing `\PrintScaling \None` as part of the `ViewerPreferences` dictionary. Hope this helps.
Does LoC stand for Lines of Code?
Thanks a lot! Knowing what the feature is called helps a lot, now that I can Google it, it seems that it's not officially part of the PDF spec until [1.6](http://pdf.editme.com/pdfua-ViewerPreferences) (and even then its optional). It looks like it works for other people despite FPDF outputting PDF version 1.3, though Chrome's built-in viewer [does not honor it](https://code.google.com/p/chromium/issues/detail?id=158752)
I'd say find a few free online tutorials (many great ones have been posted here in this subreddit regarding testing) to whet your appetite on the subjects you want to learn more about before delving in to paid books on Laravel-specific methodologies.
I was just trying to find a preview on their site, as well. Can't seem to find one.
Well, XML is pretty arbitrary so you could do whatever you want to, really. But if you don't like the syntax, there's also this option: &lt;item name="one"&gt;1&lt;/item&gt; &lt;item name="two"&gt; &lt;item&gt;2&lt;/item&gt; &lt;item&gt;dos&lt;/item&gt; &lt;/item&gt; Name attribute representing associative arrays and no name attribute represents indexed arrays.
MPDF was the choice our company went with after experimenting with FPDF, DOMPDF, TCPDF and many others. Our use case was dealing with many existing documents, converting them to HTML, and then finding a library which supported enough features and had an accurate representation of HTML in the generated PDFs.
I use [tfpdf](http://www.fpdf.org/en/script/script92.php) - based on fpdf - it has Unicode support and creates fairly small PDFs, you need only to include one class etc.
Is "lexing" a word most php programmers know?
how many apps have you personally built with it?
A much more complete answer than my simple answer, but there are some possible problems with your normalizing function. $xml = new XmlArray(); echo $xml-&gt;toXml(['2colors'=&gt;['Bell pepper red','jalapeño green'],'3colors'=&gt;['R'=&gt;'Red','B'=&gt;'Blue','G'=&gt;'Green'],3=&gt;['one','2','three']]); Results in &lt;colors&gt; &lt;&gt;Bell pepper red&lt;/&gt; &lt;&gt;jalapeño green&lt;/&gt; &lt;/colors&gt; &lt;colors&gt; &lt;R&gt;Red&lt;/R&gt; &lt;B&gt;Blue&lt;/B&gt; &lt;G&gt;Green&lt;/G&gt; &lt;/colors&gt; &lt;&gt; &lt;&gt;one&lt;/&gt; &lt;&gt;2&lt;/&gt; &lt;&gt;three&lt;/&gt; Combine your solution with my "normalizer" elsewhere in these comments, and you wind up with: &lt;el2colors&gt; &lt;el0&gt;Bell pepper red&lt;/el0&gt; &lt;el1&gt;jalapeño green&lt;/el1&gt; &lt;/el2colors&gt; &lt;el3colors&gt; &lt;elR&gt;Red&lt;/elR&gt; &lt;elB&gt;Blue&lt;/elB&gt; &lt;elG&gt;Green&lt;/elG&gt; &lt;/el3colors&gt; &lt;el3&gt; &lt;el0&gt;one&lt;/el0&gt; &lt;el1&gt;2&lt;/el1&gt; &lt;el2&gt;three&lt;/el2&gt; &lt;/el3&gt; There is still the problem of the unencoded "jalapeño green" in there, but it is moving toward a solid solution.
Thanks! Why are you doing this in the normalize function? (I mean, when does this ever happen and why is it a problem if an element starts with the string xml? // using regex to check for xml is overkill $string = (strpos(strtolower($string), 'xml') === 0) ? substr($string, 3) : $string; 
Normalizer looks interesting, thanks!
None. PHP frameworks does not seem interesting to me these days.. But apart from that, why don't you guys go and post in /r/laravel for all the Laravel specific posts..
Also, it's really fast.
What is the error output you get ? "not working" is not specific enough to help you.
I use html2pdf. It is built upon tcpdf to allow you to write your document in html.
This is an old blog post of mine (actually the very first!) and as such a bit outdated. I've done some more experimentation in this area with the https://github.com/nikic/Phlexy project. Among other things I found that for stateless lexers an even faster approach is to use `preg_replace_callback`. Furthermore I found that for large stateful lexers the difference between a naive lexer and one using compiled regex becomes a lot larger. E.g. if you implement a lexer for the PHP-syntax compiled regex will be approximately 5 times faster.
&gt;Why wouldn't they allow them? because there is /r/laravel for that stuff. If you post some thing like 'hey look how laraval does this clever thing', I don't mind. But some of the recent Laravel posts were. 1.A Laravel cheat sheet. 2.An announcement of a Laravel book. ( i think two of them were there). 3.This one, which details how Laravel 4 is different from laravel 3. And Laravel beginner tutorials gets posted regularly.. These things have 0 relevance to someone who is not interested in Laravel. 
If I had an existing app I wanted to add realtime features to, I'd probably just use [Ratchet](http://socketo.me/). Honestly, as much as I hate trying to shoehorn everything into PHP, integrating different languages together is much more of a pain.
Thanks - hadn't heard of NetBeans. 
Yeah +1 for Netbeans - runs rings around Eclipse (PDT). Also hear good things about PHP Storm from JetBrains. Personally, I do EVERYTHING on Sublime Text 2 - it doesn't do autocomplete or fancy stuff like that - but getting around your codebase/files is so very quick and natural once you learn a good chunk of the hotkeys.
&gt; These things have 0 relevance to someone who is not interested in Laravel. But they may be relevant to someone else who is interested in PHP. I'm sorry we don't all conform to your opinion but it's a good framework (and I've tried everything from Slim to ZF2) so I'm going to continue upvoting interesting posts on the subject thankyouverymuch.
Yes, you're right! I'm using [dissect](https://github.com/jakubledl/dissect) to define a DSL for our company OPAC, and I really enjoy the process, that is, as you said, quite magic.
You don't NEED an IDE, but after using one you'll never WANT to go without again. Everyone bitches about Eclipse but I happily use it all the time, find the one right for you. No matter the IDE learn your shortcuts early on.
The idea to compile the regex into a single one is a great and non-trivial advice, even if the post is a bit old... :) I already know (and appreciate a lot!) Phlexy. I'm using [dissect](https://github.com/jakubledl/dissect) and I find Phlexy lexers a bit more powerful, so I was thinking to build a tiny adapter to use Phlexy lexers in Dissect. Have you planned to make a complete parsing tool that include Phlexy and that allows grammars definitions and parsing (like dissect) in addition to lexing?
Yea, I gave Eclipse a 3 week try before I tried Netbeans. Never looked back 
Download PHPStorm EAP (free) http://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program Everything you need to do to set it up is `File-&gt;Open directory...`. Trust me, you'll thank me.
Because it was listed in your requirements.
The array example you provided is lacking a key pair for the children. As far as the normalize, the regex function will let any UTF8 character through. The script I wrote doesn't account for valid UTF8 (which isn't part of the requirement) nor for array input that isn't well-formed. [ '2colors' =&gt; [ 'item1' =&gt; 'Bell pepper red', 'item2' =&gt; 'jalapeño green' ] ]; Is a bit more valid of syntax. If you look at the OPs requirements, there were four items: no spaces, only alphabetical characters in position 0, xml cannot be in position 0 either, and everything else can contain any valid character. If I were deploying this for a client (and not myself) - I would put in some more robust normalizers - like disallowing &lt;&gt; and some other problematic characters. Edit:: There's definitely room for some modification to handle the example array you provided. My solution would be to detect non-key/value pairs and return/store only &lt;$key /&gt; I didn't test this but it would probably look something like this: foreach ($data as $key =&gt; $value) { if (is_array($value)) { $this-&gt;toXml($value, $key); } elseif (is_numeric($key)) { $this-&gt;collector[] = $this-&gt;xmlify($value, null); } else { $this-&gt;collector[] = $this-&gt;xmlify($key, $value); } } I'd also have to modify the xmlify method as follows: protected function xmlify($key, $value) { $key = $this-&gt;normalize($key); return (isset($value)) ? "&lt;$key&gt;$value&lt;/$key&gt;\n" : "&lt;$key /&gt;\n"; } I'd also point out that if this were for a client, I'd be putting in checks for malformed data and throwing exceptions if someone decides to name a key element `1xml`, etc.
This is not exactly answer to your question. But do you use version control systems like Mercurial? If not, start learning it immediately. http://hginit.com/ There is another very-hard-to-use, but more popular one called git. I tell you this because, if your are not using version control then no editor can make your life easier.....That being said, please give 'Sublime Text' a try. It is fast, portable and works out of the box..and looks damn good too...with a lot of plugin available for everything....
I like the article. But why is it in /r/PHP?
I think it depends on what type of projects you're working on. If you're writing a lot of OO code and following the PSRs you will end up with a lot of individual files and folders. In these situation being able to ctrl+click though to method defintiions and such is way more efficent than trying to find the correct file in the project hirarachy manually. Interactive debugging and test runner integration are nice but not the main reason to use an IDE imo.
Bootstrap and Foundation alter the size of the image on the client by setting its width in the browser; it's still the same image. As a by-product of that, it means that you could end up with, say, a 1000px-wide image being displayed at 100px wide - which is hugely inefficient. The approach in the article is designed to *supplement* that approach, not replace it; so you'd have a different image file for say, 3 different breakpoints, and within that range, the image might be resized in the browser.
That is exactly why ratchet came to be. The client needed sockets for a component of a project and having all of our business logic in node.js for this one requirement was not practical when the rest of the project could be easily handled with PHP. Not saying php makes a good server here, but Chris got something workable out of it and it works against some pretty heavy loads.
whoops, fixed!
If you build something like Phalcon, you can scratch off both #1 and #3 :) In terms of demonstrating your PHP skills to the world - #1 is the best option.
I've used it in a few projects with great success, it's a lovely lib but it doesn't have proper composer support last I checked, really buggy. Installing it manually works great though.
&gt; Have you planned to make a complete parsing tool that include Phlexy and that allows grammars definitions and parsing (like dissect) in addition to lexing? Nope, that's too much effort for little gain (generating LALR1 tables isn't exactly simple) ^^ I'm happy with using `kmyacc` or a hand-written Prat-parser for my purposes.
The Zend_Pdf module is pretty good.
Yes, because the community needs yet another application framework. ::rollseyes:: My advice, contribute to an existing framework, and start learning Python/Ruby. Test the waters, see what you like, then take the plunge.
QuickBooks online are not generating check documents with the print scaling disabled. When print scaling is disabled, Chrome does honor the setting and scale to fit is unchecked when attempting to print the PDF. I believe the linked issue is concerned about not being able to disable scale to fit within the browser for all documents printed. EDIT: Look at this hastily made [sample](http://r1.128.io/scaling.example.pdf) within Chrome and "Fit to Page" should automatically be unchecked.
I love wkhtmltopdf, but repeating table headers across pages is a non-starter for us. I do hope that gets sorted soon.
That's definitely understandable. Could you do this piece-meal? Rewrite one chunk at a time and use BDD to make sure the overall functionality continues to work as expected, instead of getting down and dirty with the specific IO of arguments/responses at the unit-test level?
Looking at this again I can maybe see where there is a little confusion: &gt; A fully-qualified namespace and class must have the following structure \&lt;Vendor Name&gt;\(&lt;Namespace&gt;\)*&lt;Class Name&gt; This bit specifically `\&lt;Vendor Name&gt;\(&lt;Namespace&gt;\)*&lt;Class Name&gt;` uses regex-like syntax - which is also similar to how arguments are depicted for PHP methods and CLI stuff, so its not uncommon. The vendor name is absolutely required, then the brackets and * make "zero or more". This bit to me is not unclear, but could be to others who don't know what the brackets are all about. &gt; Each namespace must have a top-level namespace ("Vendor Name"). That second rule adds the potentially unclear part. Each "namespace" must have a top-level namespace? Maybe it could have been "each class ..."? Whatever. I think the parenthesis probably covers it well enough.
I don't think many people know about **global** variables, which is a good thing. I'd rather not encourage their use. You're right though. I should change that example to change the **$multiplier** after the closure is defined. I'll do that later today. good call.
Doesn't phpStorm just use CodeSniffer anyway? http://www.jetbrains.com/phpstorm/webhelp/code-sniffer.html If that is the case, then phpStorm will work fine whenever they (or you) update the version of CodeSniffer.
If you word it like that it sounds silly, but anything will sound silly if you word it wrong. We don't use "spaces for tabs", we use "spaces for indentation and alignment". ;)
PSR-1 doesn't say anything about spaces, only PSR-2. So yes there are plenty of people ignoring PSR-2 but using the rest because they like tabs and don't want to be told where to put their brackets. Laravel is a perfect example of this, they support PSR-0 and PSR-1, then follow PSR-2ish - but use spaces and allman style. That is _fine_ and is exactly why PSR-2 was split into its own standard, so people could use PSR-1 without having to be told how to style the rest of their code. But, anyone refusing to use _any_ PSR standard because of tabs v spaces is a fucking idiot who doesn't know what they're talking about. :)
Woah! Game changer.
Hey, it's your cake day. Have some [CakePHP](http://cakephp.org/) on the house.
Alright, say I have a designed thing in InDesign. And I want to use php to inject some database values in it and pump out a PDF. Would the best workflow be: Convert InDesign doc to HTML doc, use one of these libraries to put in DB values, then output to pdf?
I think that you should definitely use an IDE like Eclipse, since IDEs have a number of advantages over text editors. If you want, you can check out my article about why you should use an IDE [http://stratosprovatopoulos.com/web-development/php/ide-php-development/](http://stratosprovatopoulos.com/web-development/php/ide-php-development/)
&gt; set it up is File-&gt;Open directory.... Trust me, you'll thank me. Thank You
Internals used to maintain version 4.* and 5.* at the same time. As features keep getting back ported I could only assume that the 4.* branch evolved into what is now 5.4.
Do what ever you want. There are no rules. What ever you learn will be of benefit at some point. 
+1 For MPDF, I've used after trying fpdf and dompdf
I liked Nusphere PHPED, when I was coding PHP more regularly
From what I gather, he's pissy because php throws an error when a function isn't defined? Is there a language that doesn't do this?
I think learning a second programming language is almost as challenging as learning the first. It helps open your mind to different ways to solve problems. By extension, it makes it easier to use the correct language and paradigm for the job. The book Pragmatic Programmer recommends learning one language per year for these reasons. If your choices are between ruby and python, I would recommend python (it's just an opinion). The main differences for you would be: - Getting used to strong typing. You can't assign a list (array) to a string. - Simplified OOP. There's no public/private/protected. - Greater consistency in the language, core libraries, and third party libraries. Obviously third party libraries are not as consistent as core libraries, but it's an improvement over php. - A more opinionated idea about what "the right way" is. However, you could also consider learning a non scripting language such as c or c++. If you choose c, k&amp;r is a great book. 
must be friday already..
One of the more difficult design patterns I've had to learn was working with IoC/Dependency Injection. I still find myself slipping into my old ways. So I'll take a look at this on my free time, it never hurts to brush up.
I've asked that question to myself before and it's great that you brought it up. Unfortunately I'm facing the same problem as you so I won't be able to give you straight answers, but I can try to help address each point: 1) You could if you really feel like making something better than what's out there, but I would really rather try out some of the already existing ones as you may find one that already does what you imagined. Laravel is getting really popular nowadays which appears to be able to do a lot, simply and flexibly. CMS's on the other hand as I've noticed are a bit too admin friendly and not too developer friendly. I may be wrong about this, but if you would be able to write a simple CMS based on your experiences that both allows for easy development along with good admin functionality (being allowed to create new pages, change what boxes appear in what order and what contents they are in), you may be able to cover yourself and/or your team from any future boring website requests in short amounts of time. 2) That you can do. It would also help you practice coding nicely and testably, as people in charge of Frameworks will require you to adhere to their strict standards. I personally would be too lazy to seriously participate in any of this, but go ahead if you feel like it. 3) Unless you really, really love programming in C, I would personally not recommend it. C is very hard and you'll hardly find any C job ever unless you are really, really good. You probably don't want to start getting into C if you already have a lot of experience in PHP. Also, it's probably mostly going to not result in anything. Anything you make as a PHP extension, the people in charge of PHP probably won't pull your changes into the master branch; and the companies you would be working for probably won't trust your extension. The only things the people in charge of PHP would be willing to accept are RFC patches, which may take a lot of effort to write, may not be voted for at all, and even if so, it'll take ages before that new PHP version comes out and everyone would be able to use your changes in live environments safely. Of course, it does seem kind of fun, but I don't think it's worth the effort. 4) You could, but I don't think that there are that many opportunities to practice those languages after you start learning them aside from you own projects. What I would rather recommend though is node.js as it's a trending server-side scripting web-server in JavaScript that lets you write your entire backend in JavaScript. It's good, because it's getting popular and also because it's written in JavaScript that you may already be familiar with from front-end development (or if not, you can increase your client-side JavaScript skills with the help of server-side JavaScript). Also, JavaScript itself is gaining popularity in other areas as well. The new Qt 5 allows you to use JavaScript in certain parts for instance. So yea, that's all I have for you. I don't really have any obvious ideas unfortunately. These were my 2 cents addressing the things you listed. I have 5 years of web development experience.
Here's a IMO better article demonstrating roughly the same exact thing, from like 1.5 years ago (I think the author is a redditor): [Using node.js to store PHP sessions](http://gonzalo123.com/2011/07/25/using-node-js-to-store-php-sessions/)
what is this used for?
I understand where he's coming from, but &gt; It’s not ok that echo 0.000001; produces 1.0E-6 and that casting it to string doesn’t help but putting quotes around it does. This isn't an issue with PHP, it's an issue with the IEEE Floating Point standard. For example, Python, Ruby, Java, and C all do this.
Why is everyone too lazy to click a link or two? Not everything should be fed to you on a platter. &gt; HipHop VM (HHVM) is a new open-source virtual machine designed for executing programs written in PHP. HHVM uses a just-in-time compilation approach to achieve superior performance while maintaining the flexibility that PHP developers are accustomed to. HipHop VM (and before it HPHPc) has realized &gt; 5x increase in throughput for Facebook compared with Zend PHP 5.2. &gt; HipHop is most commonly run as a standalone server, replacing both Apache and modphp.
HipHop for PHP VM. Its a JIT Compiled form of PHP code meant to drastically optimize PHP/logic heavy sites. Made by, and for, facebook but released to the masses.
Probably help if I reference this too: http://en.wikipedia.org/wiki/HipHop_for_PHP 
Thank you. 
You can use [php-pdftk](https://github.com/andrewheiss/pdftk-php) with [pdftk](http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/) to insert data into form fields. IIRC, php-pdftk converts a php array into an FDF file. PDFTK is then used to insert the FDF file into the PDF form. It does require use of exec() since pdftk is a cli tool though. I used this method (so far about 5000 PDFs generated, no errors) and it works very nicely.
I hate imagemagick so much; it's one of two projects with a logo on my dartboard. Every time we upgraded it to fix a bug, there was a regression that introduced another one. .. Can you use graphicsmagick instead? 
&gt; I think the author is a redditor For anyone interested: /u/gonzalo123 
If there is I don't think I want to use it.
Haha :) Jeah FPDF itself doesn't depend on ImageMagick but I use it to process images before I put them into a PDF as it only allows rescales (I thought this was a PDF limitation and not so much an FPDF one but i'm not sure). What were you doing that you got so many bugs with Imagemagick?? It is a bit of beast to work with though I must admit but I have never had a lot of with it problems after the initial setup phase...
The frameworks that everyone loves and uses right now were all developed when the community had dozens of other frameworks, as well, so I find this stance pretty weak. There is a lot of benefit to reinventing the wheel. It lets developers break out of otherwise very restrictive boxes. Just look at how different Symfony2 and ZF2 can be.
+1 for Sublime... but it is not a full-blown IDE out of the box like Eclipse, Netbeans, etc. The upside is that it is very very quick with short cuts and has amazing fuzzy searching for finding files and functions. If you are good with a language already, then try Sublime. If you want all the code completion, database management, versioning tools, then you want a more full blown IDE.
You should offer atleast one article per month for free. It's not the cost, it's the process of paying anything at all that's the barrier. If your content is worthwhile, people will jump through hoops to pay you but I'll never know if it's worthwhile if I can't see any of it.
I would seek to fully understand those frameworks and CMSs that already exist, and then decide if I was capable of doing it better. I would probably find that I couldn't, but incidentally I'd now be an expert on those frameworks I just learned. My point, it's unlikely a PHP dev with three years of experience is going to have insights that allows them to build something superior to ZF/symfony/laravel within any kind of relevant timeline. Certainly they will learn tons trying, and that's the spirit. But don't fool yourself into thinking it's going to be the next hot thing. Waste of time and direction.
Oddly enough, I'm enjoying Laravel quite a bit lately. However, what I find most interesting is that Jeffrey didn't really reinvent anything, he just added some sugar and flavor on top of what's already out there.
Allow me to test for understanding because I'm not entirely certain on how HHVM fits into the PHP "stack". The confusion is coming from looking at their change logs. Does HHVM essentially re-implement all features of PHP? So when PHP adds Closures, HHVM then also has to add them? And every extension has to be re-written for HHVM? Are they able to borrow code directly from PHP internals? Does Apache/Nginx still need to sit in front of HHVM? Edit some of these questions were answered by Rhynn below. This page also clears some of it up http://en.wikipedia.org/wiki/HipHop_for_PHP
Considering that composer is getting more widely adopted, you could always make great libraries that people can easily import into frameworks. I'm always grateful when someone takes the time to package a service's PHP library into my framework of choice (laravel) so that I can develop more quickly. Or, if you have your own idea for tools, make them a composer package!
well. I have built http://bootsnipp.com, http://filegr.am, http://mymaplist.com, http://cheatsheetr.com and more with Laravel (all projects took under 1 week each to build thanks to its awesome syntax). I want you (and everybody else) to take the benefit of using high standards that Laravel promotes and you too, could build things quickly with it. Laravel is definitely PHP and without trying it you will not make a good judgement.
Yes, it's another implementation of a PHP runtime.
welcome to php :\ this is why we get the rep as bad devs 
Just a note for anyone trying to do this in a VM: HHVM requires 1.2GB of memory to start: https://www.facebook.com/hphp/posts/10151262575779326 You can try to lower it using some weird config settings, but they don't seem to be working correctly at the moment. Solution: spin up a vm with more than 1.2gb memory!
I'm not sure that's correct. I only gave my VM 1GB of RAM, and it worked.
&gt;I want you (and everybody else) to take the benefit of using high standards that Laravel promotes What makes you think that one needs to use a framework for maintaining 'High Standards'? &gt;and you too, could build things quickly with it. In a big and complex project, all the things that frameworks makes easy for you will be nothing compared to the implementation of the project itself. I mean, it wont matter how many lines your framework needs to load a view or model, so having an awesome syntax wont matter. So you can build 'things' quickly with it is only applicable to very simple projects. 
$100 seems expensive but it will pay for itself in a single project by time saved,
I am trying to get data from an outdated government website, that we have to search 10-20 times a day. Currently the it takes upto 30 mins for the search do to extremely long page loads and a really bad search tool, if I can copy the data once a week then add a search function it will cut the user load by up to ~90% 
[QueryPath](http://querypath.org/) is probably the easiest I've found.
Well that function should do the trick. Just pop in the URL and you'll get the entire source as a string. Tough to parse though. If you are looking for specific data, look into DOMDocument: http://net.tutsplus.com/tutorials/php/html-parsing-and-screen-scraping-with-the-simple-html-dom-library/
I concede that PHP is badly designed but there's at least a semi sympathetic reason here. `str_word_count` and others with underscores are original to PHP. `strcasecmp`, `strcmp`, `strpos`, `stripos`, and so on are replicas of famous C functions.
and if file_get_contents is blocked, you can almost always use http://us3.php.net/cURL
As you said the solution that I provided in the post was similar (instead of using redis I use node.js to store the PHP sessions). After discussing a lot about this problem (how to share auth between PHP and node) I realized that it isn't the better solution. As someone said here we can use Rachet (a php implementation of websockets) but the problem remains the same. We have a one webserver+php and one realtime server (rachet or node.js). They're different processes (even if they use the same language).We can use Redis to share information, but what can we do with auth? one valid session to our http server can perform one websocket request? We need to create very exotic solutions to solve it. I found the solution in the Rachet's documentation (http://socketo.me/docs/push) We create one "traditional" application with our auth system and one websocket server for the real time. websockets are bi-directional, but we don't allow incoming request to the websocket server (easy) and when when we want to send something to the websocket server, we perform one http request to "traditional" server and the http server redirects the request to the websocket server through localhost (or a secure connection). This process is well explained int the rachet documentation. I'm using something similar in production and works like a charm (the websocket server with node.js+socket.io in my case) The websocket server is very simple. It only is listening to one TCP port at localhost and redirects the requests to the socket.io server.
Tell me what all development tools/libraries have you mastered in these three years....and I may be able to answer your question. 
&gt;December 8, 2012 at 4:48am I think he means old hip-hop, not the new one they released today or the one they released before that.
So where is the line drawn? In /r/programming, you may see some overlap with /r/php. Similarly, /r/Laravel posts make it into /r/PHP some of the time (see: a lot of the time). However, you'll never see an /r/laravel x-post in /r/programming. /r/laravel is much smaller right now and more eyes are in /r/php. After some time, we may see a shift where nearly all Laravel posts are only in /r/laravel, but that's only once people start to use it as much as /r/php. There was an initiative to give Laravel it's own instance of a StackOverflow community. This was largely shot down because most people felt that Laravel questions should be a part of PHP questions (and rightfully so!). Essentially, Laravel is not big enough to require it's own SO community (nor should all /r/laravel posts be relegated to the less popular /r/laravel) You're upset because you see no value in something that is becoming quite popular. Furthermore, your argument that you should "just use composer and specialized components" demonstrates that you don't know how Laravel is built. You can include portions of the [framework](https://github.com/laravel/framework/tree/master/src/Illuminate) in Composer and use it within your application. If you don't like seeing these posts, down vote them and move along. Over time, more people should begin to feel similarly and the posts will be pushed to their respective community. The system is setup to let you do that.
Cool, thanks for the follow-up!
&gt; After some time, we may see a shift where nearly all Laravel posts are only in /r/laravel, but that's only once people start to use it as much as /r/php. That is no excuse to spam /r/php until then... &gt;here was an initiative to give Laravel it's own instance of a StackOverflow community. This was largely shot down because most people felt that Laravel questions should be a part of PHP questions A Laravel question and a Laravel tutorial is different..I think. So taking stackoverflow as an example is not really appropriate. &gt;You're upset because you see no value in something that is becoming quite popular. No, I am just doing my part to maintain the quality of this sub. &gt;You can include portions of the framework in Composer and use it within your application. Yes, I know about this. &gt; If you don't like seeing these posts, down vote them and move along. Over time, more people should begin to feel similarly and the posts will be pushed to their respective community. The system is setup to let you do that. So you are upset because I commented in addition to down voting? I think its only fair to let the OP know why he is being downvoted. 
IIRC they're targeting 5.3 at the moment, but I'm struggling to find some info as well. If it helps, they have a compatibility assessment for popular frameworks (number of tests passing/failing): http://www.hhvm.com/blog/875/wow-hhvm-is-fast-too-bad-it-doesnt-run-my-code
(Yar, this be weeds here: enter only if you care about details and definitions) There is a key in there. It is merely numeric. It is shorthand for the same as the following: [ '2colors' =&gt; [ 0 =&gt; 'Bell pepper red', 1 =&gt; 'jalapeño green' ] Which, for PHP is nearly the same (but not exactly the same for reasons I assume we both know, so no reason to explain) as this: [ '2colors' =&gt; [ '0' =&gt; 'Bell pepper red', '1' =&gt; 'jalapeño green' ] Which, importantly, fits the defined case and results in the same issue. You are of course, not incorrect. We're just treating the OP as having given either a formal spec with testable data and seeking a specific answer, or a description of a general goal with an illustrative example and seeking a general answer that can be applied to a wide class of data. You wrote your answer addressing the specific, while I went for a general tool using the actual XML spec and handling all possibilities of PHP key values. (Obviously you also went for a full class, while I only provided a pair of snippets, plus a testable example.) I think it boils down to when she or he says, "XML element names have strict naming rules" followed by bullet points, is that saying: "use the XML spec, among them these four points", or "use these four points, ignoring anything else in the spec". I assume the former, but it sounds like you're assuming the latter. I am also assuming that, "But since the array key can be pretty much any string", means "4" is a valid key that needs to be handled. ...and we're into the most common programming thread issue, that of the OP needing to clarify the question.
I read 5.4 somewhere, if I remember correctly.
Ignoring the fact that "superior" is completely subjective, something doesn't have to be superior to be worthwhile.
Was just speculating as I haven't followed internals or the release cycle in a few years.
Did a bit of testing using the 13.10 package `phpversion()` reports "5.4.999-hiphop", which I guess means 5.4, and almost 5.5? Some observations: - Traits are supported (5.4) - array_column exists (5.5) - Generators exist (5.4) - New GD constants aren't defined (5.5) - `mysql_connect` doesn't raise E_DEPRECATED (5.5)
I have had the most success and easiest time with PHPQuery http://code.google.com/p/phpquery/ 
Would you care to share your experiences with both of them?
As I said, worth it for the learning process. Just saying that if you're truly trying to build something you want people to use, at least be aware of what's currently available and how they work. Have some reason to think you are improving on the state if the art.
Not many, because most PHP libraries are junk. 
Traits support was the first thing I noted (some fixes around this in the latest release blog post) - so it seems to be a bit of a hybrid 5.3 -&gt; 5.5 feature set, which I'm not sure if that's a good/bad thing.
Uh nothing really... 
I belive they haven't implemented the [intl](http://php.net/intl) extension yet, which is something zf2 requires. 
Don't use that, it's very memory intensive vs. curl. Always use curl. If your php version doesn't have curl well, get your php installed with curl. So get a new host or whatever. **Always** use curl.
Git is not that hard to use, no sure why people think so. Why couldn't an editor help make his life easier if he's not using source control? I mean, I'm all for source control, but why are they so tightly coupled in your mind? There are tons of features editors can provide outside of source control.
Use [Goutte](https://github.com/fabpot/Goutte) paired with the [Symfony Console Component](http://symfony.com/doc/master/components/console/index.html). Maybe throw [Guzzle](http://guzzlephp.org/) in there. Make sure you have curl installed. Create a Console Command that uses Goutte to scrape the page. You can use cron to run the command regularly. Believe me that works.
Why are so many people interested in writing new frameworks? What deficiencies are they encountering? I mean there are tons of contributors to some of the open source frameworks and it's extremely unlikely that you'll write something even remotely comparable to pre-existing frameworks. Is it just an intellectual exercise? Legitimately curious. I see so many novice-to-mid-tier developers try to do it and never understood why.
You can **completely** separate PHP and HTML. And you should.
There is only one thing I can say about PHPStorm: Its....worth....the....money 
I agree with all of the bullet points in your original post. All reasonable suggestions. Some additional things I'd note: It's understandable given your level of experience, but this is kinda gross to work with. I would completely refactor it if I had to support it. Good code should read like a book. Your function names aren't the best and some of it is redundant functionality that could be shared. As people have mentioned, the HTML just screams "NOVICE!!!" but that's ok. You'll get there. The thought process is the hard part. You either are capable or you're not and you seem like you get the premise. Few comments below. I tried to be a bit thorough in my critique because it seems you're eager to learn which is great. Don't be discouraged. Picking up habits one at a time will help tremendously. * I see you're replacing spaces with %20. Look into urlencode(). * You have a lot of DRY (Don't Repeat Yourself) Violations. When you start to think "I'll just copy and paste this from here to here!", second guess yourself. Almost always a better way to do it. If you decide to do it anyway, third guess yourself. * Your indentation/commenting/spacing are weird in places. Be consistent. Find a coding standard somewhere and stick to it. Your code will look a lot nicer. * Assuming you want to get into good habits and possibly work on projects with other people, start creating docblocks for your functions. * Speaking of functions, you have a lot of "floating" code that just sorta gets run in-line as you come across it. Consider wrapping small pieces of functionality into functions more frequently. It will help others understand your code a lot easier. * You're assuming your file_get_contents call will succeed. Not a big deal now, but you need to consider the possibility it doesn't, if this were this anything you wanted to support in the future. * You have at least one variable that's not used. * You can probably get rid of a LOT of your nested foreaches (which scale terribly) with a change to data structure and/or refactoring. * You can use elseif instead of else and then if on another line in at least one scenario. * Code that you have that's commented out (i.e. debugging code) just makes it look unprofessional. I understand the purpose for it, but you should get rid of it when you're done debugging. Also, might want to look into Xdebug. * It's "independent" not "independant".
because some of us are :/
I will not say that I have literally mastered but I think I can work well with Zend Framework 2, MySql and Javascript, the tools I have been using are github, netbeans, mysql yog, sublime text 2
Downvoted... enough said.
Awesome, glad you like it.
1. Ok. Try learning Unit testing using phpunit. Writing a simple test is easy. The hard part is to write your software so that it is made up of individually testable components. For this you will have to do something known as dependency injection. It is really simple concept. But it is not always straight forward to implement. So you have select some small projects and implement it in a testable way. Prepare to make a lot of mistakes and spend some time correcting them. Learn to use mocking/stubbing while testing. You can use php units mocking framework. You may feel that writing tests is not worth the effort and time taken. The important point is to do it enough times so that you will develop the sense to know when it is worth doing. 2. Since you are using Zend Framework 2, I suppose you already know how ORM tools work. If not. pick up one, like Doctrine, and Implement a simple project using it. 3. If you are not using a templating system, pick one, like twig. And implement a small project using it. Learn to use template extensions in twig. 4. Because you are using github, I suppose you are already comfortable with git. I mean I suppose you are comfortable with using code merges, resolve conflicts. Learn advanced operations like cherry picking and history editing. Learn how to make good commits with only a single feature/bug fix per commit. 5. Use composer and do a simple project without using a framework by only using components. 6. Learn how to use virtual machines. Use virtualbox for start. Install Vagrant and setup a PHP, MySQL Apache stack. Try a different webserver like lighttpd or nginx. 7. Learn how to use caching using APC. 8. Learn SOLID OOP principles and try to keep those principles in mind in your future work. 
I know this is /r/php, and you can get good results pulling simple data from the DOM with PHP to store it in a DB, but if you want more features, (for example screen captures, handling JS-heavy pages) you'd be better off with something like [phantom.js](http://phantomjs.org/).
Old timer reporting in here. Lots of tools being suggested here to walk the DOM and fully parse it. In my opinion, a full DOM implementation is almost certainly more than you need. I much prefer to do this sort of thing with raw text matching and regular expressions. That will survive a gross overhaul of the page (new layouts and frames) as long as the page's internal content persists in roughly its structure. And a well-built text search will certainly be faster than a DOM parse, too.
can it scrape a div with styles on it and get is as jpg?
Right. I mean, unless the remote site has gone to extraordinary lengths. Getting the content is no big deal. Parsing surgically is by far the trickier part. I was working with one site that returned blank pages if the USER_AGENT string was curl or wget. I set it to "Never You Mind" and it started returning good goods. 
I do the sme as anoland. All of the PHP packages for this seemed shitty or were actually broken, and the code to do it manually was a mess of stream wrappers and bla. I ended up slinging it off to a Python worker via RabbitMQ (or whatever queue system you feel like using) and all is well. We send out a bunch of notifications and it all works nicely. We have a PushNotification.php class which does a lot of this: public function sendUserReceivedGift(User $recipientUser, User $senderUser, Perk $perk) { $merchant = $perk-&gt;getMerchant(); if (empty($merchant-&gt;name)) { throw new Exception('No idea who this merchant is?'); } foreach ($recipientUser-&gt;getApnTokens() as $token) { Rabbit::enqueue('comms', 'apn', [ 'user_id' =&gt; $recipientUser-&gt;id, 'token' =&gt; $token-&gt;token, 'key' =&gt; static::APN_GIFT_RECEIVED, 'args' =&gt; [ $senderUser-&gt;name, $merchant-&gt;name, ], 'acme' =&gt; [ "perk-{$perk-&gt;id}", ], ], 'topic'); } } Messy, but it works. It means the Python/Queue logic is nicely wrapped up in PHP methods, which use type-hinting to make it clear what we want and it's nice and quick because it just shunts things off to a queue.
How does it perform compared to to CIL of Phalanger? (which is basically visual studio PHP)? I'd love to see real world benchmarks using a variety of situations (VM, AMD versus Intel) using PHP for complex jobs. Ever seen any? It would be awesome if there was a PHP compiler that could hook into CUDA (think kepler's auto threading). Matter of fact if anyone is interested in a small job optimizing code I have a small bit of software that factors cost/supply line sourcing that I need to bring from 6200 seconds (10 lines 4 suppliers [stock,quantity] each line) down to 6 seconds with 100 concurrent (or .01 second serially). Probably using CUDA. Could be any language :) 
You may want to check the Origin headers during the handshake to prevent CSWSH attacks : http://www.christian-schneider.net/CrossSiteWebSocketHijacking.html
Maybe this will be interesting for a core PHP developer, but for a PHP user what happens "_behind the scenes_" doesn't really matter. Usually the user wants a consistency across the API and when a newcomer sees `htmlentities / html_entity_decode`, `str_replace / strtr`, `current / array_pop`, `array_push($array, $item) / array_search($item, $array)` and others, his head will explode. Many PHP users scream that they want the API changed, PHP core developers respond that they will not break the API because that will make people mad and in the end nothing changes, except the website where this things are discussed.
So do we, coupled with gearmanmanager, supervisord or just plain old screen you're set. (the latter two will be helpful for a solution without gearman as well) 
Best framework is the one you write .. 
No it's meant to pull information from the HTML. So like attributes, inner text, etc.
Yep you are an old timer and by the sounds of it, time for you to retire.
How many clients do you use to connect to the Apple Push Notification Service? Isn't there a limit to how many connections can be made simultaneously from the same IP? In my case all the machines in the cluster that could be used as hosts for the workers are seen as one IP from the outside world. 
When I'm sick of making ten times what you do, I will.
as my script started way before gearman and was usually for SMS messages, its still a good way nowaday if you cant access geraman or something i work with MessageQueues based on Memcache, [works with db too of course] i have 4 Queues/Buckets i pull out of, every bucket has a cronjob that runs every minute and can dispatch up to 1000 push/sms in that time. thats basically it. nowaday its ported to gearman cause its easier to spawn more instances automatically in peak times. 
unfortunatly wordpress and likes use global variables quite a lot. Of course , a better solution is to use namespaces and classes,but some of these CMS are still stuck in old php versions and it's not going to change.
Wardrobe. https://github.com/wardrobecms/wardrobe Built in Laravel 4 using a repository pattern. It's got some issues, but they're pretty minimal. I run a blog on it myself. &gt; I'm kinda tired of creating the easy stuff that will take some time nevertheless. Damn straight!
Don't know what I was thinking. 
I have been looking at this to build a blog soon, how much work was it to theme? 
Disconcerting is accurate. We use it as well and I reached out to the developer (Jakob) a while back and offered to even pay to fix a known bug as it was hampering our tool. He responded quickly and said it was not a factor of money he just had no time to work on the project. I have always hoped someone would grab it and run.
file_get_contents can be negatively affected by PHP settings and server OS. There's more info at http://www.php.net/manual/en/function.file-get-contents.php. Last I checked it was also considerably slower (it's been a while so that may have changed). There's definitely a time and place for file_get_contents (I use it on local throw-away scripts whose main purpose is to just quickly Get Work Done™) but for someone looking to expand their skill I'd highly recommend learning cURL. It's the way to go for anyone who's going to be deploying to multiple different environments or working with changing feeds, not to mention it's multitude of features over file_get_contents.
no argument here. course, there are bad programmers in every language; php just gets the most hatred because it's barrier to entry is so low that it attracts of beginners.
And how exactly would you display data from php? Use ajax and json encode everything?! Sounds like going way out of one's way to adhere to a crazy rule. Yes separation of logic and view is important, but that doesn't mean one should completely avoid having any php on the front end.
Templating systems/tokenization. Logic in a view is a slippery slope. Some systems more or less forbid you from doing logic in your view (outside of simple if statements). Others offer a bit more logic such as Smarty. But if you have php in your view, that is gross and you are almost certainly taking a shortcut in lieu of doing it properly.
Seems nice enough, I'll definitely have a look :)
Someone clicked the up arrow
Like this! Does this have functional/unit tests? Because I couldn't see them.
It's hard to answer that without knowing what exactly you want to do with it. If you just want to give it different styles, etc, then it's really easy. If you wanted to drastically change its behaviour then (probably) quite a bit harder. I can tell you that the themes are pretty clearly handled. They have a number of files (post.blade.php, index.blade.php, archive.blade.php, etc). There's a single css file. There's a routes.php file that extends the core one. You can add manual pages to that (I modified it to make that more dynamic). I think you could make it do almost anything. The more knowledge you have of Laravel/OOP/Blade/CSS/HTML, etc, the easier it will be.
There's a tests directory with a few stubs in it, but it looks like there isn't.
I wrote something pretty flexible here : http://github.com/davzie/laravel-bootstrap 
I'm definitely not advocating mixing logic and view, any php on the front end would be strictly for outputing data. Templating systems are cool and all but at the end of the day Smarty is built on top of php which means you haven't avoided having php code in your HTML, you merely masked it by a system that limits what kind of php functionality you can mix in your view. That's helpful when the project is big and you want to enforce certain standards but if it's a small enough project with one or two programmers who know their shit, it's not going to make much of a difference. 
In a project where you aren't using templating (can't imagine why not, considering how simple it is to utilize), how are you binding your view to your controller? Are you including your views directly? Vice versa? I just hate the tight coupling. That and mixing/matching content types gives editors/syntax highlighting fits which is just a nitpick but it's obnoxious.
Why not just use one of the many psr-0 autoloaders available rather than just using composer for it's psr-0 autoloader? 
If you want to, redis is probably a better option than MC in this instance with lists and it's ability to "popblock" from them. But, as noted, gearman is a much better suited tool.
I'm using Symfony for one project and Wordpress for a couple of others so direct includes aren't needed. Everyone has their preferences, and there's always room for improvement. But in the real world your hands are tied with time and budget constraints and the way the last programmer decided to do it. I'm yet to work in an environment that's anywhere close to ideal, granted I'm yet to work for Google or anything but I've heard crazy shit like on the spot builds to production even at big companies like IBM. My point is, if you're strict about enforcing best practices, you're gonna have a bad time. 
I tend to have the opposing view (if that weren't obvious by now, heh). If you're **not** strict about enforcing best practices, you're gonna have a bad time and end up with an unmaintainable codebase. I've seen it slaughter companies. Continuous integration and continuous deployment are entirely different animals from separation of concerns, obviously. Both CI/CD are extremely useful and borderline required on large teams, or you're going to be in for an absolute nightmare scenario. I would never make the case that you need CI/CD on small projects, that's pushing it.
There's a middle ground between unmaintainable and perfect. I guess this is just the attitude I've adopted recently to combat some of my obsessive compulsive habits that are a hindrance to being efficient.
RabbitMQ or some queue system would probably be your best bet. A quick and dirty way would be to put the notifications in Redis/MySQL and have a daemon running in the background continually checking and executing (PHP script using a while true loop). 
You could just copy the [example code from the PSR spec](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md), wrap it in a `spl_autoload_register`, and stick it in your bootstrap for PHPunit. 
I got a bit bored, so made the very basic math stuff, but with a little twist https://github.com/lsv/math
Arguably, a language by definition should be neither a framework, nor a library. PHP is currently a bit of a disheveled *library* more than a consistent language. Adding a framework structure to it would make it cease to be a language, and thus make it less flexible. That said, there are some nagging problems with it if you want to adhere to SOLID design principles. In 90% of cases, you will use PHP in conjunction with persistent storage. The easy thing to do is to tightly couple your data managers with a DAL singleton. The "proper" thing to do is inject your DAL into the data manager for unit testing purposes. But in an MVC framework with a front controller, injecting it means a lot of pain in the ass hot potato passing of that DAL: First you have to instantiate your DAL. Then you have to give it to your router/dispatcher, so that it can in turn give it to the desired controller, so that it can in turn give it to the appropriate data object / model. So as a language, PHP needs better automated/templated dependency injection. I should be able to inject all of a classes dependencies before I even call the class. Something like a definition of a class: definition DataMapperDefinition { provide($dal); provide($cache); } And a class that uses it (but the way the language should work is that if you don't have a DataMapperDefinition defined anywhere, it simply ignores it, and then complains if you don't provide the necessary constructor arguments. That way you could pluck this UserMapper out of a project, and do fully isolated unit testing without needing the DataMapperDefinition to exist at all. class UserMapper applies DataMapperDefinition { protected $dal; protected $cache; public function __construct(DataAccessLayer $dal, Cache $cache) { $this-&gt;dal = $dal; $this-&gt;cache = $cache; } } then in your index or bootstrap, something like: $dal = new DataAccessLayer('some', 'connection', 'params'); $cache = new Cache; hydrate(DataMapperDefinition($dal, $cache)); So when UserMapper class is called, the $dal and $cache are automatically injected for you. You can override them as constructor params if you wish, making them fully testable and swappable. $userMapper = new UserMapper(auto, auto); // 'auto' tells it grab the parameter from the definition class. This would make it extremely easy to manage dependency injection of single instance objects in a large-ish object graph.
Seems very verbose, and oddly done. What's the value in the basicMath being a switch/case. Finally I'd expect a dedicated Math library to answer 21!
I appreciate the suggestions you mentioned in the comment. How about you sharing your knowledge via a Guest post for the blog?
the basicMath method is just so I didnt wrote the same stuff over and over again, combining 5 methods, therefore the switch. If it was possible I could have skipped the switch and write $this-&gt;number = $this-&gt;number $type $input; Where $type is + - * / or % - but that dont work :) But yes, it is very verbose, it was actually just a test for using MathML :)
You might also want to show something about how these slugs could be used. It creates the slug (for a post or whatever), but doesn't explain how someone can use that in their site with rewriting rules. Edit: but for those who want the code to create the slug, it does accomplish that.
Speaking of the code in WordPress, [`sanitize_title_with_dashes()`](http://core.trac.wordpress.org/browser/trunk/src/wp-includes/formatting.php#L980) is the function that does the most part of this.
&gt; Holy shit this is a big commit Excellent description of a commit, really lets you know what's changed.
Oh yes people still get it wrong, but my point was that the frameworks have never said MVC would be the only components people ever need to build things.
I'd be happy to write a guest post about regular expressions. At least a brief overview with links to the many resources available, like regular-expressions.info.
Came in here ready to suggest imagemagick's 'import' command Was disappointed
After you make a change in composer.json do not forget to run: `composer dump-autoload`
I paid $199 for Intellij and it's worth it. Best editor out there if you want to program in several languages and not only php. I already get phpstorm from work but I think Intellij have a php plugin available that makes it exactly like phpstorm.
Haha that was when it was first being developed . I promise my commits are much more descriptive now that the repository is public.
setInterval() and clearInterval() are not jQuery methods, and you don't use them in php.
I suggest SublimeText 2/3, a realy powerful Text Editor. Install PackageControl to unleash its full power. If you want to use a full IDE you should take a look at PHPStorm. Personally I would stay away from Dreamweaver.
What.. I don't even... Really?
Well, its ranking high on DZone (not my blog or my submission on there) so I thought I'd submit it to here and see what people think. 
This is... Like... The worst, man. What is this even about? There is nothing useful in here about jQuery or PHP at all. Here is the actual reference for setTimeout and setInterval, which may be of some use to somebody here. http://www.w3.org/TR/2011/WD-html5-20110525/timers.html#timers
netbeans is a free ide that works fairly well. you can configure it to support xdebug to get some debugging info.
I'm sorry, did you just say "Dreamweaver?" Does that even still exist? The great thing about scripting languages like PHP is that you really don't need an IDE. I personally recommend learning the language without the aid of an IDE, but that's merely my opinion. I edit PHP in Vim and have been doing so happily for some 12 years. If you really want the assistance of an IDE, PHPStorm is a very good one. Sublime Text has some IDE-like features but is more akin to Vim in that it is chiefly an editor (and a quite nice one, at that). I would steer away from Eclipse because it is very complicated. There are PHP editing "perspectives" available, like PHPEclipse, which gives Eclipse the ability to understand more of how the language hangs together, but you still have to get familiar with the ins and outs of Eclipse, which is a massive program. Some people like NetBeans, but once again that's more of a Java-oriented IDE with customizations available to make it understand PHP better; it isn't purpose-built for PHP.
IDE - Sublime Text 2 Server - Vagrant (+PuPHPet) I would suggest Laravel 4 too, but I am not going to, because it became a rule to mention this framework in every thread like this. But damn, I love Laravel!
I don't know, are they all told that * creating a blogspot blog * labelling yourself a professional * posting your cringeworthy code is the way to earn yourself a job? All these &gt; Dear Sir, I have found many good solutions here on your blog thank you or comments like &gt; java.lang.NullPointerException happened what do I do kind sir make it only worse.
PhpED is good too
I've always thought screen scraping was awesome, and I'm not trying to hijack the thread with my own questions but can anyone tell me what common websites are OK to scrape from (to stay legal and follow a site's privacy policy). It would be kind of nice if the site owners themselves were responsible for keeping scrapers off... if there was some meta tag that defined a site's scraping policies so we wouldn't have to read their privacy policies every time. (and legitimate scraping libraries could say something like "We're 100% CAN-SCRAPE compliant.")
Legality is always an issue, I am scraping a government website that is severely outdated and page loads take up to 5 mins. This issue is compounded by the fact that their search tool is extremely literal. I am also not looking to make my search tool public, I am just trying to make it fast and user friendly to my staff to save some (hell a lot) of money and time.
I opened this link only because I wanted to see the full dumbs.
If your app is big you are better off not start porting something over from C# to PHP. It's a waste of time, energy and resources. Take some good C# tools if you want to move to the web (they exist). PHP is not even that high quality language and if you are new it will be a huge investment before you can get it to a decent level. But if it's a small app and you are doing it just for the sake of learning PHP .. by all means.
Matter of taste mostly, but personally I prefer Komodo Edit and HeidiSQL.
Damn people really hate Dreamweaver. I don't use it, but it does have a code view with syntax highlighting, built-in FTP, etc. so it's really not that bad, you don't *have* to use the actual website-editor portion that gets a lot of flak.
Good bite, got him. :)
Things to look for in an editor that you'll find helpful: * syntax highlighting, (this is a pretty low bar that most programming editors hit). * autocomplete. Only a handful of editors do this well. * Supports your VCS (git, svn, hg etc...) * DEBUGGING WITH XDEBUG... (omg people don't know how important and great a tool remote debugging is). less important but some other nice things: * supports javascript, html, and css features (highlighting, autocomplete, debugging) * Unit testing support (phpunit) * Filesystem watchers (for sass, stylus, etc..) * code quality analysis tools * cross platform (It's nice to work inthe same environment no matter if you're on mac/win/lin) * profiling (cachegrind analysis tools) * PHPDoc helpers * composer support * Refactoring tools ... (really nice, probably should be in the list above) My suggestion is that sublime text 3, can do most of this with plugins. but PHPStorm does all of it out of the box, and they are constantly adding support for things that most IDEs aren't up to date with. (Vagrant support coming soon!).
The problem is not the features, the problem is the bloat that it is. The same features can be done without being such a piece of junk. And if you really need a WYSIWYG to create the HTML/CSS side of things, then you're not a web developer and you need to learn more. In terms of being IDE, it's only really an IDE for HTML, CSS and JavaScript. Anyway, there's a reason they started work on [Brackets](http://www.brackets.io/).
I second your notion. Anyone who uses Dreamweaver and calls themselves a professional Web Developer is deluding both themselves and their employers. The only thing that makes it "superior" to other (most of them free) Web Development IDEs (ie. code-highlighting text editors) is the WYSIWYG side - which creates non-compliant, often non cross-browser compatible garbage markup. Sure the built-in FTP is handy (when you can get it working properly) but many other (again, free) superior editors also include that functionality if you want it. That Dreamweaver takes a full minute to launch on a workstation-quality machine, eats ten times the resources a glorified text editor should, and costs several hundred dollars to license for use, there is seriously not a single good reason a professional should use it.
I thought so.. Then I started using PHPStorm
I would share the software I use to create apps in PHP. Firstly I started using zend server community edition. It comes bundled with apache server, phpmyadmin(interfaces your mysql database). For an IDE I use phpstorm, but if you don't want to fork out some cash just use netbeans. Very good ide. I use git as version control and sourcetree as a visualized repo manager. I use chrome as my development browser but as a good web dev you should test your app in all browsers ;) I use bitbucket to store my repo as it has free private repositories. You may also use github. I use prepros as my assets compiler for less and coffee files. Great little ruby desktop app that watches for changes and auto compiles the .less and .coffee files for me. Frontend i use bootstrap css framework to get a prototype started. Very easy to customize and extend. I would recommend using an MVC php framework like Symfony, zend, laravel 4 or silex. They just solved most of the common problems so you do not have to reinvent the wheel. There is a big debate as to which framework is the best. That though you have to decide for yourself. There are pros and cons for all of them. I use filezilla to upload my application to the hosting server. It does it's job. Lately I am experimenting with post receive hooks on git to auto upload as I push. Or if your tests are all passing on your jenkins build server it will push the latest fixes for you.(We are in a very high release cycle environment) Hope that helps ;)
What in the what? This is the worst thing I have ever read on the internet.
NetBeans may not be built for use with PHP, but it's really damn good at it. It's also free unlike PHPstorm.
Hardly surprising. You're not doing yourself any favors by re-posting that crap here.
Netbeans is fairly good
Php is server side, you can't do that.
thanks, submitting this post has just made everyone a little bit dumber.
**and movietemplate.php** &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;?php echo $row['Movie_Name']; ?&gt;&lt;/title&gt; &lt;/head&gt; &lt;?php include_once("template_pageTop.php"); ?&gt; &lt;body&gt; &lt;h1&gt;&lt;?php echo $row['Movie_Name']; ?&gt;&lt;/h1&gt; &lt;p&gt;&lt;?php echo $row['Poster']; ?&gt;&lt;/p&gt; &lt;p&gt;Genre: &lt;?php echo $row['Genre']; ?&gt;&lt;/p&gt; &lt;p&gt;IMDB Rating: &lt;?php echo $row['IMDB_Rating']; ?&gt;&lt;/p&gt; &lt;p&gt;Quality: &lt;?php echo $row['Quality']; ?&gt;&lt;/p&gt; &lt;p&gt;Year: &lt;?php echo $row['Year']; ?&gt;&lt;/p&gt; &lt;p&gt;Trailers: &lt;?php echo $row['Trailer']; ?&gt;&lt;/p&gt; &lt;p&gt;Synopsis: &lt;?php echo $row['Synopsis']; ?&gt;&lt;/p&gt; &lt;p&gt;Location: &lt;?php echo $row['Location']; ?&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;
 include 'movietemplate.php'; instead of $content = include 'movietemplate.php'; no file\_put\_contents
Thanks, but when I try that the page doesn't get created now and I get an error Object not found! The requested URL was not found on this server. The link on the referring page seems to be wrong or outdated. Please inform the author of that page about the error. If you think this is a server error, please contact the webmaster. Error 404 localhost Apache/2.4.4 (Win32) OpenSSL/0.9.8y PHP/5.4.19 Edit I think I fixed it with this: $newpage= $Movie_Name; file_put_contents($newpage, file_get_contents('movietemplate.php'), FILE_APPEND); header('location:http://localhost/movies/' .$newpage ); however the page movietemplate.php isn't working right because none of the data that was just added to the database is displaying. 
I have a feeling I'm going about this all wrong. :/
So because something would take some time to do, you don't do it? Days is pushing it. It's usable right out of the gate. I personally don't use it, but don't underestimate the time a good IDE can save you in the long run. If you shave 10 seconds off something you'll end up doing thousands of times...
Why on earth are you trying to create an actual new file for each movie instead of just having a template file grab from the DB on load? Moreover, even if what you're doing ends up working fine, what if there are two movies with the same name?
Sure you can -- the zips are available right on Github.
&gt; Without an honest answer to this question I consider this discussion futile if you haven't built anything. The value in discussions is that the less experienced ones can learn from the more experienced ones. So it is never futile. May be you are the kind of guy who likes to take and don't want to contribute anything. I see that you have a blog and all, but from your attitude, it seems the blog is more like an ad for your products. 
Is there a log table of price changes with the changed date that you can cross reference to?
&gt; 2.4.1 (stable) was released on 2007-05-03 Yeah.....
unfortunately not its just one table
Ideally i would think that each change would have it's own ID, form what it sounds like, it is updating each item with the latest price change and date. Maybe write a job to pull a CSV weekly and massage the data as needed?
You're right, each change would have its own ID as an entire new product type thing. I will definitely look into outputting to a file which is something I was going to do anyways with the finished query. Thanks for the advice!
In the future when you have big code pastes you should use github gists or even pastebin. Makes releasing them easier.
Lol, Databases are just multi-player spread sheets. So it looks like each change is in fact unique, that is a good start. Maybe this is best done with a nested select? I am still learning about the more advanced tricks you can do with SQL SELECT WHERE timestamp BETWEEN 2013-10-13 AND 2013-10-20 Somehow nest a select within that to pick out any changes? Now im just throwing out ideas that i am not sure how to implement myself, lol.
Please try this.. select p2.* from product as p1 join product as p2 on p1.price &gt; p2.price and p1.name = p2.name where datediff( p1.timestamp, p2.timestamp) &lt; 7 and DATE(p1.timestamp) = DATE(NOW()); This part below does a join of product table with it self using the above condition. ie check if there was a product with same name with a lower price anywhere in table. on p1.price &gt; p2.price and p1.name = p2.name This part below check if the price drop was in the past 7 days. where datediff( p1.timestamp, p2.timestamp) &lt; 7 and DATE(p1.timestamp) = DATE(NOW()); EDIT: corrected to discard the time component of the dates. 
No dice, but I could be doing it wrong. In your example what would p2 in the select be? This is also a large database so I was hoping to do the 7 day check first to limit the results I have to sort through in the very beginning, does that make sense? I have that part working getting the results of the last 7 days it's just the taking day 1 results and checking them against the other 7 days' results that I'm having trouble getting around. Again thank you for the help I really do appreciate it
My first reaction... this has to be an old article... 2013...
Databases are not just "multi-player spread sheets". That is a very naive view of their capabilities. As it's currently built, it will require a join or a nested select. Your suggestion uses static dates when you need something that is dynamic and will work across all dates and/or a range relative to the current date.
I hope you are mentioning about the time component in the timestamp comparison. I have edited my answer. Thank you.
Why would you recommend pulling to CSV? To get around the limitation of not understanding how to write the query? The table (despite poor schema and likely not being indexed well/at all) contains all the needed data.
Nah aliases are just shurtcuts 
This is more of a MySQL and logic question rather that PHP. Nevertheless, if you want an answer with working code, you should update your question with the table(s) layout. Without them you will receive only code examples and the approach with JOIN posted by @i_make_snow_flakes is the best one in this context.
Nah, more like to me it sounded like the information was being overwritten instead of each change having a unique ID. As we have seen, this is not the case now.
Wow they misspelled "separation" three times. And "spaghetti". And "these". Wonder how closely the code is checked for errors.
A.) He never indicated it was a production environment and I qualified it with "If you have any control over this schema", which implies executive discretion. B.) For something this simple, a refactor of code that touches it is likely trivial, especially given the inferred state he's currently in. C.) You just live with bad design forever? If you can't change something so small, you should probably reconsider your deployment plans.
initially think 2 selects and join them in a subquery as follows (note this is sql pseudo-code, not real sql): select * from items where item_date_added = TODAY and item_id IN ( select item_id from items where items updated in last week ) Thats functional. Ideally get the list of item ids updated in the last week into a temp table and then just do a join: select * from items i, updated_list u where i.item_date_added = TODAY and i.item_id = u.item_id; Note you should play with this in MySQL and get it just right before bringing it into your PHP PDO code. 
You posted this is webdev too so I answered it there - fyi: http://www.reddit.com/r/webdev/comments/1ov7vz/please_help_create_new_page_with_file_put_contents/ 
The form is never submitting to the real URL? &lt;form enctype="multipart/form-data" id="myForm" action="$Movie_Name.php" method="post"&gt; will post to a page called `$Movie_Name.php`. It will not expand your variables as you're outside the PHP scope. Surround it with `&lt;?php` tags!
One would expect that an "optimized for learning" framework would follow MVC instead of MVA, since there's little reason to learn an architecture thats not widely popular
There's no need to read a book if you have never written a test before. If anything, a book will probably overwhelm you and stop you from getting started - as most books I have read on testing assume you have TDD knowledge and want to take that knowledge further (I don't know of a good beginners testing book). What I would do / what I did was to hit up youtube and look for videos on phpunit for beginners and introductions to tdd and php. I also found the envato / tuts+ vids to be helpful. Once you have that sussed, you will find your often on the phpunit docs page finding better ways to improve your tests. And then once you get to a level where you feel comfortable with tests, there are a good few books to try - growing object oriented software guided by tests is pretty good as a starter - it's not php but the concepts are the same. 
An item that was added today could not possibly have had its price changed last week :D
Since they're first time programmers, I'd say the basic programming. if, &gt; &lt; == , what is a variable, what is a function. Strings, integers.
Scope, my God if I only had a grasp on scope before I started my first serious project. It's even more important now with closures.
input sanitization.
Even though it gets repeated all the time, www.phptherightway.com would be a great start. At least covering the fundamentals of that... There's some stuff to skip. That said, are these "fresh programmers" experienced in any other language?
I wish I have learnt sooner that you should have notices and display errors on and get used to trying to adhere to them. Also, you much teach others this otherwise they'd not only be damaging to themselves (as avoiding notices and having notices turned on helps you find many problems is your script a lot easier), but can make debugging a nightmare to any teammates who is used to notices being on.
Nice article, but I still hate closures in PHP. They make it all but impossible to sensibly navigate larger source code, because even powerful IDEs like PHPStorm can hardly ever figure out that a closure in File A creates an Object of type B in the source of Class C. Off go all of my autocomplete features.
That's the issue with wkhtmltopdf; it's always going to be beholden to the Webkit developers.
I recently worked through the php track on Codecademy, and the biggest failing for me was that at the end of all the lessons I still didn't have much of a clue how to put an app together, so I had to look elsewhere. So my advice would be to show students how to do practicals stuff as early as possible, so they can immediately start to see how they might put their new knowledge into action.
Nice. A few useful ones which I didn't know about. 
yeah that is one downside. They do have their place though. The fact that you can basically build up a class at runtime is pretty cool, which is why i think they're so popular for IoC containers.
I've been a PHP developer for over a decade and recently discovered phpStorm and couldn't be happier. If you want a cheaper option for OSX try MacRabbit Espresso. 
On the first day? Include. On the second day? OO. On the third day? How to RTFM!
The concept of separating logic and presentation, especially in regards to web apps. No closing tags in the middle of a function in order to print out HTML...
This should be a long response but I don't have enough time. **var_dump** and not OO, just procedural.
There are more data structures than just arrays.
[This](http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/) might help
how to get a development environment up and running. 
Could be used internally in a form validation library 
Actually no. PHP borders on worthless for anything but web development (web development tools like PHPUnit/Composer excluded). But don't bind the feedback mechanisms to HTML, CSS and JavaScript. Nothing is more frustrating than getting the correct output in PHP only to have it display with botched HTML, god help you, invalid CSS. When you're starting out, it's very difficult to differentiate where the issue is coming from. If you throw everything in the learning pot at once, you end up with programmers asking "What's wrong with my SQL query?" when the real problem is that they're trying to build a layout with HTML tables and their CSS is completely borked. Completely separating all the aspects of web development was the single most important thing I ever did to improve my dev skills and general quality of life. 
CRUD
How about real debugging using xdebug?
PHP seemed so hacky to me. All arcticles and how-to I found had PHP, HTML and CSS all mixed up. That is until I learned separation of concerns by using a framework and it all made more sense. Everything was sane again.
Or a little more amused.
After seeing this post I decided to upload some code I use to generate a quick reference sheet for laravel. Just in case anyone finds it useful or wants to make a proper cheat sheet from it. Example: http://gsaulmon.github.io/laravel-facade-dump/ project: https://github.com/gsaulmon/laravel-facade-dump
Pretty good article explaining [Ruler](http://jwage.com/post/31292541379/ruler-a-simple-stateless-production-rules-engine-for) (http://jwage.com/post/31292541379/ruler-a-simple-stateless-production-rules-engine-for) and how its used at OpenSky.
You beat me to it but RTFM is right up there. I've been on countless forums where newbies are asking the same old questions over and over, that have been answered adequately so many times already. If only they could grasp Google, let alone programming!
from what I can tell he's using functions built into Zend studio, so that. The webservice hosting was done with zend developer cloud, which from what I can tell is an open beta right now. For a production app, you'll need hosting and infrastructure of your own obviously. That's all it appeared he used to the web app portion. For the iOS compilation you'll need xcode which means you'll need a mac. The bridge from php to ios was done with Cordova which is open source.
I'm not going to see it, take that.
&gt; from what I can tell he's using functions built into Zend studio, so that. Indeed. I have already contacted Zend about that. &gt; The webservice hosting was done with zend developer cloud, which from what I can tell is an open beta right now. Ok, thanks, I didn't know that. &gt; For a production app, you'll need hosting and infrastructure of your own obviously. That's what I actually want... I already have my own architecture and don't want to pay for yet another service. I have notably a dedicated server for the application I am building, and it already has a few RESTful apis I wrote manually (no frameworks) and wouldn't mind using their frameworks from now on. But do I have to pay a license for the server part? Do I just upload a few things (like recompile PHP with it, or is it already in the Zend framework?) &gt; That's all it appeared he used to the web app portion. Well, I seemed to hear the word "Codiqa" when he said "We licensed it". Codiqa (https://codiqa.com/) is 26$ per month for 1 user and up to 3 products. &gt; For the iOS compilation you'll need xcode which means you'll need a mac. The bridge from php to ios was done with Cordova which is open source. Or that's what I heard, Cordova... yeah, I can recognize the logo from the Cordova website! Thanks a lot!
Sorry, it was the default title... I was actually hoping someone has already posted it and I would get a "duplicate link" warning where I would see the past comments...
I can't decide if this is pure genius or the result of OOP gone mad.
Hah, no need to apologize I was just poking fun 
I really, really, really wish OOPHP was more widely covered, and I really wish I started diving into that when I started learning PHP.
But you still downvoted me ;-)
I'll teach var_dump and I'll mention xdebug. At least they should learn the basic debugging.
I don't think it's that, some other languages have similarly low barriers to entry and aren't hated *quite* as much. It's mostly because PHP has a troubled history. It was written incompetently and a lot of the code written for it was incompetent, and people kept being incompetent when designing it. I think things are turning a corner and PHP devs and the PHP core developers are making better decisions, but you have to remember this is the language which had magic quotes, register globals, SecureVar(), mysql_escape_string, and other things :/
I'll just leave [this](http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers) here.
something like this probably: echo $xml-&gt;data-&gt;parameters-&gt;wordedForecast-&gt;text[0]; if I understand what you want correctly...just change the 0 to be whatever text values (I assume day of the week) you need. Please check out the PHP manual, it's a great resource if you are new to PHP and XML: http://us2.php.net/manual/en/simplexml.examples-basic.php Normally this would be a RTFM reply, but I like NOAA...sooooo... 
The very first two things I learned about programming were "Never assume the user knows anything." and "Keep it Simple, Stupid." I wish all programmers started out with that.
My biggest problem was with what this was called: -&gt; so I could Google it. (TBH I still don't know what its called apart from "the arrow thingy"
Negative on that, did not upvote but did not downvote :)
Thanks!
One thing that I'm not even sure if you CAN teach but that would be extremely useful is simply how to spot bad PHP code. Most people learn by googing their problems and inevitably end up looking at some highly dubious sample code which gives them the idea that the bad way to do something is the proper way. If there were a list of heuristics that could be applied even by an amateur to spot code that should be ignored it would help a lot. e.g. PHP and HTML thrown together in single files (beyond simple templating), using deprecated functions (ereg, mysql_), failure to follow modern standards (e.g. an OO library that does not follow any common autoloading standard), warnings or notices shown when code run with -1 error reporting.
I'd start with: * Output (print, echo, concatenation, escaping quotes) * User input ($_GET/$_POST, save $_FILES for later) * Control statements (foreach, for, while, case, break, continue, next) * Arrays / hashes (sorting, looping) * Functions In that order they should be able to start making websites right from day 1, with increasing complexity. 
Exactly the tutorial I needed. Comparing it to the old mysql_ way really works for me!
So it would be fair to say, further clarifying for /u/Dick_Justice, that HHVM is basically a more performant fork of PHP. 
What if the price was changed before it was added?
I think introducing them to the concept of libraries, external and internal to PHP would be a good thing to mention. It'll drive home the idea that most coding is never done "from scratch".
OOP, Templatesystems, MVC
Fair enough, but if you're going to get to databases, maybe a "create your own CMS" type project then please don't even both to show the non-PDO data access functions. Let them remain blissfully ignorant.
I share things that I learn from building real products, of course here and there I'd say where this bit comes from. Have you seen my github profile? The blog is just a small channel that has thousands of developers coming to learn from my experience every week. I do consider myself as one of those "more experienced ones" and I have evidence to prove it, while what you did here is not learning but rather hating for no reason. 
I never used a rules engine before, but the syntax to write the rules looks pretty scary. Suggestion to improve the engine: use a generic and readable tool to create the rules, such as [Hoa Ruler](https://github.com/hoaproject/Ruler)
I think most people learn PHP because of the wide use of it in web technologies, so I would go that route - HTML, forms, handling input, mysql, where to go for help. One thing I wish I had been taught was where to go and how to ask for help. Didn't start using SO until a few years ago, but it has solved hundreds of headaches. Also using an IDE like Netbeans will help find syntax errors if you can't find them yourself.
The best thing you can do for them is to give them all the sites they should be looking at first hand. Impress upon them how many bad and/or outdated tutorials exist online. The biggest roadblock budding programmers who are learning PHP for the first time face is the overwhelming pile of shit online which will steer them in all the wrong directions. Another thing I'd suggest teaching them is how to read the manual. This sounds like a no-brainer, but it's truly impressive how many people don't check there first.
Good tip! I will keep that in mind when my month runs out. Thanks!
You may want to look into disabling the popover-on-select behavior on your site. A lot of people (like myself) highlight text as they read and this behavior makes following the article incredibly frustrating.
Thanks for the link! I like this HOA documentation a lot better, took more than a glance but I finally understand what these things are. &gt; So first, we create a context with two variables: group and points and we then assert a rule. K. Got it. &gt; A context holds values to concretize a rule. A value can also be the result of a callable. Neat. Got it. So the ruler basically evaluates a rule given the provided context and asserts the result. Makes sense. --- example 1 :: will output true because the context meets the rule criteria --- Spiffy, got it. I can see how something like this could allow users to define some interesting and customized logic in the front end, very interesting.
Thank you, that's valuable feedback.
I think this is a pretty unfair and unfounded conclusion. Although it may have struck me as redundant up front, after reading the documentation about what it is, and the use case it was born from, it makes sense. Whether this particular library is a "good" implementation of it or not is another discussion that I'm not even remotely qualified to comment on. The relevant portion that I do understand is that the alternative would be to turn your users into developers and let them have access to define the logic within your code.
Error handling/reporting, debugging.
Absolutely!
I am trying to learn TWIG atm. Something I wish I had looked at a long time ago. If these guys are FIRST TIME programmers then I would start out very simply. I wouldn't even touch on PhP in the first day. I would just make sure they have basic HTML concepts first and setup some sample cases to explain WHY and HOW PhP fixes common web development problems. That way it is in context. [The Book on the Symfony website](http://symfony.com/pdf/Symfony_book_2.3.pdf?v=3) has a great first chapter on HTTP Fundementals. That could also be a great place to start.
Just going to toss out that using a provisioning tool might not be the best way to go for everyone. There's a learning curve to all of them and, given time constraints, I've more than once just built a base box and spawned from the pre-constructed base box rather than from provisioning scripts. Doing the actual configuration is quite a bit faster doing it by hand if you're comfortable with that and once you've done it, you package the box up, and all done. Granted PuPHPet is great, but you'll almost certainly want to change it up once you have a VM built, and if you don't know Puppet it's probably going to be a lot simpler to config the box and use your own package than updating the scripts. 
It's like unit testing just came alive....
Sorry for the late reply...2nd job blues. Thanks a bunches on that! Works great now! Cheers!
 $rb-&gt;logicalAnd( $rb['minNumPeople']-&gt;lessThanOrEqualTo($rb['actualNumPeople']), $rb['maxNumPeople']-&gt;greaterThanOrEqualTo($rb['actualNumPeople']) ), &gt; Of course, if you're not into the whole brevity thing I am, but I'm not seeing it here 
Its been 11 hours...have you decided yet? :)
You can create some very basic MVC framework yourself in one evening: model, controller, router, dispatcher, boostrap file, helper. Google it, there are examples, it's super easy. Don't use an existing MVC framework, it's basically same thing, just with a lot of fluff and more difficult to explain. It's good to keep code modular, especially DB models and HTML views. The advantange of MVC. Imagine you works on a project for a year and keep adding/changing things. MVC will keep your codebase manageable, while if you just keep throwing everything into PHP pages it will grow out of control very quick.
Have you tried the active record pattern? It looks like that's what you're going for. I personally love the flexibility of doctrines orm system and really wish I could combine it with a system like yii's active records. 
Skip the php part and give a how to google presentation. If you're gonna learn programming through php you're gonna have a bad time
Seriously? You enter a room full of newbies and that's the first thing you talk about? Not trying to downplay the importance of clean code, knowing the type system's quirks, etc. but programming is more than just the idiosyncrasies of a particular language. Control flow, recursion, loops, scope, etc. are far more important and will carry on to other languages (more or less).
If you're going the OO route, I suggest teaching about the concept of dependency injection. When I think back to a beginner programming cause I took, we were taught about classes, interfaces, polymorphism, etc, and this is great because they offered us a way to map real-world ideas to code in a way that is somewhat familiar to non-developers. Then invariably somebody will mumble something about 'separation of concerns' and decoupling, but it's far less common that people are shown how object composition using dependency injection helps to deliver these things. A number of developers that I have introduced to the concept have stated things like "oh, now OOP *really* makes sense!", so I just don't think it can be understated :) Edit: clarity
So is the concept a bit like make files? You set up the rules then leave the engine to decide how and when to run them? 
"ORM abstraction" is not a pipe dream; it is a fever dream. What problems would such an abstraction possibly solve? EDIT: Assuming OP is the blog author. You mention you like what you see with Doctrine. Doctrine implements a DataMapper abstraction, which is a lot more sophisticated than ActiveRecord -- you could call it a super-set. The big difference is that Doctrine entities are plain php objects, and there's a UnitOfWork in play. In fact, you can roll-your-own ActiveRecord on top of doctrine, if you're [so inclined](http://www.doctrine-project.org/blog/your-own-orm-doctrine2.html)
&gt; Have you tried the active record pattern? Of course he did. He tried Eloquent and Propel. 
I think you fell for a misconception there. You will have a hard time if you try to have your repository return a model. As you noticed, you need agnostic models, which you might want to solve by actually not returning what your orm considers a model, but instad an entity/aggregate. Think about this: You want your objects to not care about what ORM you are using. but in fact, you dont even want it to care about IF you are using an ORM, a NoSQL-Backend, or if you are just serializing stuff into files. Basically you map the stuff you need for your usecase to your own model implementation, return that as an container (for your data and required methods for your usecase), use it for whatever you need to do, pass it back to the save method of your repository, which then maps it back to your ORM (or any other infrastructure). 
&gt; "ORM abstraction" is not a pipe dream; it is a fever dream. &gt; &gt; What problems would such an abstraction possibly solve? Let me give you some perspective here. Imagine you are in a vast corporate environment (sometimes that happens even to us php guys). Lots of data is crammed into large databases. different teams, different usecases, maybe data is sharded to several clusters. Different domains in your application are handled by different teams. Maybe you want to be able to choose the right tool for each job. Or 'that other team' needs to access entities from your domain. You might not wanna try to force them to use the ORM you like in your domain. This is not the usual stuff you do in your everyday php, but i assure you, there are valid cases this makes perfect sense. 
&gt; Or 'that other team' needs to access entities from your domain In this scenario I would advocate web services to share domain data
Extend that to include keeping things modular|component connected with well define and documented functions|API's. Regardless of the programming language it's a good thing to know the '17 Unix rules/philosophy" If they can crack that then life is easier for everyone.
Which is totally valid. but the other team might still want to use a class FooFromWebserviceRepository implements FooRepository and a FooFromSomeLocalInfrastructureRepository implements FooRepository which is a perfect example for ORM abstraction.
For those interested, there is an [/r/phpstorm](http://www.reddit.com/r/phpstorm/) for those interested in PHPStorm specific news.
In the 7th version are you finally able to completely turn off live edit? I like my archaic way of destroying my files and NOT saving until I tell it to.
I thought they would never implement this because that's how their IDEs all work but I did a quick search and found this: http://www.dotmana.com/weblog/2012/07/disable-auto-save-in-phpstorm/ * settings / General / confirm application exit : checked * settings / General / confirm application exit : save file on frame deactivation : unchecked * settings / General / confirm application exit : save files automatically : unchecked * settings / Editor / Editor tabs / mark modified tabs with asterisk : checked
They changed that up - I tried it a couple weeks ago in 6 and it still saved (didn't ask if you wanted to save) when you exited.
hmm...would you go through the repositories for attaching/detaching models to each other? How would you handle validation? 
Other languages do it successfully (Python, Ruby). There's no reason that PHP cannot do it as well. It's just a matter of design and effort.
I used the trial when they released (you could use all functionality for one month) and all the plugins I use were perfectly usable, and even more responsive. I don't use Magicento though
agreed. I came to the conclusion that the level of effort for me is too much to be worth it. 
Oh I forget it does that. I usually just git reset --hard HEAD for that, since I tend to save automatically anyway
If you right click on the tab or file in question, there's a local history option that's fantastic. Before we removed all the environment-specific config files from our repository, it saved us a lot of trouble.
What's magicento like - I've seen it mentioned a couple of times and have inherited a couple of existing magento sites recently. What sort of stuff does it do?
I didnt say what i would be teaching them, but what i wish i knew when i started.
Considering an aggregate should always be valid, the only way to construct them, is __construct. here's a quick example so you get the idea: class UserProfileAggregate { extends Aggregate public function __construct($id, $userData, $profileData){ parent::__construct($id); //obvious $this-&gt;userData = $userData; $this-&gt;profileData = $profileData; $this-&gt;validate(); } public function setTwitterAccount($account) { $this-&gt;profileData['twitter_account'] = $account $this-&gt;validate(); } public function validate() { //do stuff } public function getUserData() { return $this-&gt;userData; } public function getProfileData() { return $this-&gt;profileData; } } class UserProfileRepositoryDoctrine implements Repository { public function getById($id) { $user = //do ORM-stuff to grab the user return new UserProfileAggregate($id, $user-&gt;toArray(false), $user-&gt;profile-&gt;toArray(false)); //smells like doctrine 1.2 } public function save(UserProfileAggregate $aggregate) { $ormUser = //ORM-Stuff to grab user if exists, otherwise create $ormUser-&gt;fromArray($aggregate-&gt;getUserData()); $ormUser-&gt;profile-&gt;fromArray($aggregate-&gt;getProfileData()); $ormUser-&gt;save(); } } class UserProfileRepositoryPDO implements Repository { public function getById($id) { $user = //meh 'select * from user' etc... $profile = //meh 'select * from profile' etc... return new UserProfileAggregate($id, $user, $profile); } public function save(UserProfileAggregate $aggregate) { //update user set $aggregate-&gt;getUserData() where id = $aggregate-&gt;id() //update profile set $aggregate-&gt;getProfileData() where user_id = $aggregate-&gt;id() } } edit: comment reuse :D
That's right. And it should be noted that the history isn't limited to this session, it shows version from even days before
You can call it what you want, but that's not going to change anything that's actually happening. I've seen some of these types of rules implementations in the wild, and they can be leveraged to great success. I work on software that makes use of a rules engine, and we used to require backend code changes for simple updates to rules -- updates which were 100% driven by the business, e.g. the number of pieces of flair required to satisfy the _piecesOfFlair_ rule, and not only did every developer hate making these changes, it was a waste of time to require completely rebuilding the software (which is required any time backend code changes) just to accommodate the changing of some value `x` to `y`.
You might want to read the linked article by Fowler, [RulesEngine: Should I use a Rules Engine?](http://martinfowler.com/bliki/RulesEngine.html) Among other things, [business rules](http://en.wikipedia.org/wiki/Business_rules) (used in a [business rules engine](http://en.wikipedia.org/wiki/Business_rules_engine)) would be one use. Or anywhere that you need to make a decision which requires consideration of several different concerns.
So far, I'm liking the update. One bit of annoyance though: I can no longer have the program open on 2 computers at once. I have my work stuff on one computer and my personal stuff on another, and I switch between them during the day sometimes. Now I have to make sure that I close one down before the other will run. For certain, one day I will leave with my laptop to go do some work somewhere else, and then find that I'm stuck because my other computer still has the application open. EDIT: I currently have PhpStorm running on both computers now. This morning, it wouldn't let me run it until I closed it on the other computer, but I closed both down completely and opened both back up without any issues. I'm inclined to think that maybe I ran into some license glitch the first time around. I'm sorry to have unnecessarily worried people.
Did you know PhpStorm has local history? It tracks every change you make to the file (this is outside any VCS such as Git or Hg).
So all this hype around HHVM to discover that php 5.5 + opcode cache is faster? Good news for me. :)
Actually I believe that most popular MVC frameworks for PHP (at least CakePHP and Symfony) follow MVA, which is an improved form of MVC.
Maybe so, but for anyone that is willing to take the challenge it would almost certainly prove a worthwhile experience. Lots of lessons to learn in that realm.
Oh that IS annoying. I understand the reasoning behind it but PHPStorm and JetBrains seemed to be doing fine with their previous licensing system. 
I found that weird and off-putting to start with but soon got used to it and now I like it.
Yes... that just adds to the annoyance. I don't want an IDE saving files automatically unless it's from a crash or unless I tell it to. It's one of the main reasons I still use PhpED.
Their Youtube channel helped me a lot when I started using it. https://www.youtube.com/playlist?list=PLQ176FUIyIUbfeFz-2EbDzwExRlD0Bc-w It's a good investment to learn about all the features, it's not magical but my workflow is constantly incrementing in speed since I've been using it.
I use VIM. 
No they dont. In symfony you can still call model methods from inside the view. Thus the data flows to the view directly from the model bypassing the controller. MVA would relate more to "logicless template engines" like Mustache
PhpStorm. Great all around IDE. Used to use Netbeans but it was very slow and less customizable than PhpStorm. I tried Aptana long ago and it also was pretty slow, but that was a few years back.
VIM
PhpStorm with the IdeaVim plugin.
This happened with PhpStorm 6 if the two computers were on the same network. Are you saying it now happens even if the two computers are not on the same network? 
 public function add($number) { // validation: if (! is_int($number)) throw new Exception('Addition failed: Argument 1 must be a valid integer.'); // make a new calculation: $calculation = new Addition($this-&gt;number, $number); // ensure the calculation was successful: if ($calculation-&gt;had_errors()) throw new Exception('Addition failed: ' . $calculation-&gt;get_message()); // update $this-&gt;number with the result of the successful calculation: $this-&gt;number = $calculation-&gt;get_result(); // return $this: return $this; } Calculation should be an abstract class that provides proper error handling and enforces extended classes to provide get_result() and other methods you need.
My two computers are on the same network. I haven't yet tested it when one is on a different network. I did not have this issue with PhpStorm 6 though.
not exactly. It's rules you can set up for say, when a customer gets a discount. Every time a customer goes through checkout, you execute these rules and see if the discount applies. The benefit of a system like this is they made a GUI for sales people to use which let them set complex business logic.
that's messed up
I hope to Zeus this is only on the same network. I'm _very_ unlikely to close it before leaving work / home.
PhpStorm for almost a year now, before that Sublime Text 2.
I'll give the same comment here: That's interesting to see someone actually try that. However I think it's bound to be hard because these 3 libraries do not use the same ORM pattern. Doctrine uses the Data Mapper pattern, i.e. you have your entity (model object) which contains NOTHING related to persistence, and then you map your entity to database (using annotations, YAML, …). The mapping is external to the domain object (even though with annotations, these are in the same file, that's why I don't like annotations for this specific usage). The pro of the Data Mapper pattern is that it allows to really separate the domain logic from persistence logic, and use OOP like inheritance in your classes (which is a feature that doesn't exists in MySQL and all). Propel uses the Active Record pattern, i.e. you have one class per table, and each instance of the class represents a row. This pattern is simpler, but OOP features are limited by what the database allows. And also, your model is tied to your database, and you end up with methods like "save()" in your objects. So to try and abstract all of them to a common API is nearly impossible I'd say, because it's not the same architecture and not the same goal.
Geany. It's a text editor with a built-in terminal.
Amen brother
I'll check it out, thanks!
In case you don't understand how it's used (it took me a while to get it, but maybe because I was sleep deprived): 1. While editing, you use the plugin keyboard shortcut (I think default is *ctrl+;*). 2. You press a letter, number, or any character for that matter, including SPACE 3. Now all occurrences of that character in the editor screen will be labeled, you type the label's text and you immediately jump there 4. If you want to cancel (i.e. stay where you are) press Escape If you use Vimium for chrome: it works the same as when you press F to click a link
Fibonacci was just to test php work that takes some time to execute, if you have better tests that runs on hhvm submit those and I will add a reference :) that was just to prove that the hello world example isn't enough to compare hhvm with the others
Never to start that awful joke of a language.
* Avoid global variables like the plague. * Separate your presentation and your back end. Even `require 'template.php';` with a bunch of global variables which are in `&lt;?=?&gt;` tags is better than interlaced mysql_* and echo calls. * Don't use `mysql`, PDO exists. * Avoid W3Schools. * `==`'s behaviour isn't always what you expect, use `===` * Whether you use `$_GET`, `$_REQUEST` or `$_POST` matters an awful lot if you want to avoid XSRF. * Always use htmlspecialchars(), even if it's for some value you know will be safe. Because if you're like me, you might later make that value unsafe, and bam, XSS. * `mod_rewrite` is not the answer * Remember to specify charsets. * Use a single index.php file which routes everything, to avoid duplication. * Use source control and a dev environment. Don't edit the files on the server directly.
Same here! I keep it open at home and if I can't use it at work, then I'll have to go back home just to close the program :p!
OOP isn't a difficult concept. Teach both procedural and OOP. I think babying developers with "procedural" versions of OOP APIs is a silly idea, they can understand the OOP version well enough if you'd let them.
This is bullshit. When users of a pirated copy have more post-acquisition advantages than users of a legal copy you know you are doing it wrong.
Amen. I say go ahead; I'll do it too. I don't see it any different than downloading a copy of a printed book you bought. It might not be legal, but I don't think it's immoral
Right. You could have a UI for Business to change "rules" for when things happen without having to do the comparisons in the code with `greaterThanOrEqualTo` instead of `&gt;=`.
We usually don't announce sales beforehand, making it a bit of surprise :) So, who knows when the next sale is coming!
you should restart apache (and php5-fpm in case you use it) after doing the setup. you can log into your redis server with 'redis-cli -h &lt;hostname&gt;', and check if you see any sessions with 'keys *'. The point about persistence is totally right. if you have persistence configured and dont reboot by pulling out the power chord, you should be fine :)
I just tested this during my lunch hour. I left PhpStorm 7 running at work, came home and upgraded to PhpStorm 7 (same license), left it running for 45 minutes and all is fine. I have a feeling it's just a problem when running on the same network, however I personally witnessed that with PhpStorm 6.
Haven't checked yet, do you guys know if it supports Subversion 1.8?
Honestly it may be slightly poor phrasing on my part, but I've yet to see PHP be a good choice for anything besides web development and tools to help you work with PHP. Tools like Guard, Capistrano, Chef, Ansible, or Jenkins aren't written in PHP but plenty of PHP developers use them for PHP based projects. Capistrano and Jenkins have recently gained some PHP alternatives, but I guarantee you they will not see much uptake, and I'll eat my shoe if anyone uses them outside of PHP application environment. And how well do you think SublimeText would have fared had they chose PHP as their plugin scripting language? Ignoring the "Fractal of Bad Design" elitists, PHP is good for the web and working with itself...And that's about it. Ruby, Python are better choices for general scripting and even Javascript is more popular than PHP. If I'm missing something I'd love to hear about it, but I've yet to come across anything that leads me to believe that I'm mistaken on this one.
seems we did not read the same article... see the fibonacci benchmark.
Thank you for explaining your opinion. ;)
At my place the designer usually delivers HTML/CSS/Javascript, and I translate it into a Twig template. Are you using [Symphony](http://www.getsymphony.com/)? You could switch to [Symfony](http://symfony.com/) and no one would have to learn any new names...
The mistake you made was trying to use ORM objects as your models. A `UserRepository` should return `User` *domain models*, not ORM objects. Your communication back and forth between the repository is done using the repository interface, which should accept/return only domain models, which are data-source-agnostic. There will be one repository per data source per model. A data source can be just about anything - a PDO connection, an ORM, a flat file, a web service, etc. For example, you might have an `EloquentUserRepository` that maps your CRUD requests to Eloquent requests, and maps the returned ORM objects to domain models. You could then use a `MyApiUserRepository` to persist those same user domain models to a web service. The basic idea here is that your application code only needs to work with a single interface per entity, and the repositories are there to act as middle-men for mapping those standard interfaces onto whatever interfaces your various data sources expect/return.
That's just file change tracking, completely unrelated related to its automatic file saving. So I cannot compute the extra annoyance here.
Ha! No we have an in house framework. So your designers produce plain HTML? You then integrate it? 
Yes I hadn't used it for templating before either. Pretty much the only advantage is being able to swap server side languages and we never do that. So what templating system do you use? Who integrates the template? 
i'll ask you the same question i asked another person...how do you handle relating models to each other? is that done in the repository classes as well? **attachUserProfile(User $user, UserProfile $profile)**?
While I’m pleased to see new features… can they please, please, please fix the [“jumping file tabs” bug](http://youtrack.jetbrains.com/issue/IDEA-22546) for the next release. I’ve been waiting two years on this. It should be a simple fix, and it has lots of votes!!! It’s a huge UI/UX problem not to be able to consistently spatially locate a file tab in the IDE.
That part was added later, as the author said.
... If it causes extra un needed save states, it adds to the annoyance later if I need to go through past save states.. I don't know how you can say automatic file saving is completely unrelated to file change tracking... one happens because of the other. I think that's what you might call relational
but where would you put the code that actually related the models to each other in the first place? 
Say I was to purchase a license today and it goes on sale a few days later. What is the cut-off for getting a refund of the sale price? 3 days? 7 days?
&gt; and have the repository hook everything up. In particular, your repository would do this inside `findById()` or similar methods (or internal methods that they call - this is all implementation dependent). For the above example, the code might look something like this (completely fictitious): *SomeOrmUserRepository* public function findById($id, array $options = []) { // pull data from data source $ormUser = OrmUser::findOne($id); // create domain model from data $user = $this-&gt;createFromOrm($ormUser); // create related domain model $userProfile = $userProfileRepo-&gt;findById($user-&gt;getProfileId()); // hook up relationship $user-&gt;setProfile($userProfile); return $user; }
There's this: http://sourceforge.net/p/p5chi-xshare/wiki/Home/ I'd love to attend your course, is it being taught online by any chance? 
I'm sure somebody else will post a few examples, but you could try finding projects on Github: https://github.com/search?o=desc&amp;p=2&amp;q=symfony&amp;ref=cmdform&amp;s=stars&amp;type=Repositories 
Oh, the "intelligent" rearranging. I find myself constantly closing files I'm not using because of that.
There's a context menu to "restore from git", or something like that. 
See here... http://en.wikipedia.org/wiki/Single_responsibility_principle
Well that answers my question. I should break them up. Thanks!
Welcome.
What you are attempting is admirable and a good building block of architecture. You are fumbling because you're not 100% clear on how it all should work. I really recommend you read "Domain-Driven Design" by Eric Evans, a.k.a. "the blue book." It's an industry classic, and it will make all of this clear to you, including the prerequisites you seem to be missing. http://books.google.com/books/about/Domain_Driven_Design.html?id=hHBf4YxMnWMC You don't need to read the whole book. In fact, in the first chapter, it'll specifically tell you which chapters are the important ones to read. It'll actually be a quick read. You'll want to learn about domain modeling, aggregates, repositories, factories and services. Then, it'll all make sense.
You have to compare to the best, not the worse. 
Serving static files with HHVM server? Interesting. Does this perform better than Nginx? Better than apache2?
Can't believe how much it's improved since I first started using it about 2 years ago, and can't believe that it goes for such a cheap price. I actually smile when it's time to renew, it's that freaking good. No bullshit.
That's part of idea core. I'm fairly certain these guys mostly just work on the features and the bugs in them. Though I won't claim to know anything about their internal organization. 
Yes more features and stability, you could always beg him to give it to you for free... 
that's configurable. I usually have 4–6 projects open simultaneously
That's a little ingenious reply I think. Facebook wrote the VM by employing experienced VM writers, got huge performance improvement running a 1 billion plus user site and they are generous enough to release it as open source and promising to ensure that it works with other major frameworks out there by assigning some of the members time to resolving the parity issues with the other frameworks. Supporting other frameworks does not match their financial goals but still they are committed on this and we should thank them for that. As Facebook said before, they got performance improvements for their use case, that may means that have a strict coding guidelines on what not to do that impacts HHVM performance. A small glimpse of this is outlined [here](http://www.hhvm.com/blog/713/hhvm-optimization-tips). Also [refered in this](https://github.com/strangeloop/StrangeLoop2013/blob/master/slides/sessions/Adams-TakingPHPSeriously.pdf?raw=true) presentation they created an new language named HACK that is a superset of PHP which adds more type information and detects codes that can not be VM optimized. There is a good possibility that there are some codes in Symfony2 framework that is not optimized by VM so it behaves normal unoptimized PHP code. By trashing their works by calling it hype is a huge understatement to me. 
Our studio department provide us huge gigabyte big illustrator files at 300dpi or higher that we then have to convert into various page assets. I have managed to get across to them that I will only work with layered photoshop files which they now provide for each element on the page layout but still at 300dpi... Its now my job to edit those for the web, export into the correct file format, write the html, css and javascript to make the magic work - on top of programming the entire application stack. I joined as a software engineer... oh how that job title has changed...
Started using PhpStorm a year ago, and now I'm a full time addict. Luckily my license is valid until december so thanks for releasing 7 before that ;) Anyway, I was really looking forward to the SSH feature, doesn't seem to work in windows though. Is this a bug on my system or is it just not supported?
Thanks, I've been using PhpStorm for a while now but I feel like I'm only using the very surface of the powerful IDE. Gonna check this channel out!
Sorry, I can't answer this question - it really depends on how big is discount and other reasons. So, every time it's re-considered.
It has been released yesterday and available in IntelliJ IDEA 13 EAP (latest, also released yesterday)
Great tutorial. I have one problem, whenever I run php app/console doctrine:schema:update --force on a virtual machine I get all this gibberish showup, like; Generating entities for namespace "Sketch" ?? } ? ?}??DEV?? O?SYN?SV~?Users.php___jb_bak___?P?P??P??ebQā ????DEV?INO?SYN?SV~?Contacts.php___jb_bak___?V?V??V??ebQ?F &gt; generating Sketch\DemoBundle\Entity\Users Any idea why or how to prevent it?
This is tempting, it's just that the designers find it useful to investigate what's in the XML when we just need to add that 1 extra field.
It appears you have jetbrains backup files stored inside Entity directory I have no idea why this happened, try ls -al inside this dir to see if I'm right ls -al 
This is a terrible tutorial. In just a single page it tries to cover: * Host security * Basic Linux package management * Configuration of nginx * Compilation of node.js The ironic part is that Symfony itself is barely anywhere to be found and yet node.js is included. Host security (such as fail2ban, securing user accounts, etc.) is it's own topic and should not be given such a cursory overview. Also, in all of these steps there's no explanation as to what's happening. Why are the config files set this way? How can I change things to match my custom environment?
thank you for you feedback These are my notes, and it's true that there is no explanation for most of the steps. But as a developer I kept to repeating these tasks at least once a month and this guide helps me now to do all steps in order and don't forget about anything. This is also about preparing server for PHP / Symfony, not deploying code itself
I would also clean up the grammar errors. I am guessing English is not your native language?
how?
Here's the summary: 1. Benchmarks suck, and only prove the exact circumstances around the benchmark. 2. PHP is not slow. (in a sane setup at least) 3. HHVM is not magic. 4. You need to test your application. The benchmarks here just show that without a ton of logic, PHP will beat HHVM. And with a tight loop, HHVM will be better (tight loop means the same code executing over and over). Considering that HHVM uses a JIT compiler, this should not be a surprise. JIT compliation does have some overhead over a normal VM. That's shown by the PHP performance with opcache (considering HHVM does have an opcache). JIT really shines when you have logic that's repeated a lot of times (hence why Fibo sees such a large gain under HHVM). So in short, no, HHVM is not magic. There are cases where it will make a HUGE difference, but it's completely application specific... And generic benchmarks do nothing but confuse the issue....
No problem with persistence. Race condition is a problem.
sweet thanks. I'll definitely poke around in this.
&gt; Host security (such as fail2ban, securing user accounts, etc.) is it's own topic Got any good articles on things like this?
Preferences -&gt; General -&gt; "Open project in new window"
I'm on stable. So I'm waiting for IDEA 13 then :)
Something that is very basic (and not necessarily 100% true but true enough for a beginner's course) that is very helpful is to let the students know that PHP outputs only text. That is it, it doesn't output forms, it doesn't output tables, it doesn't output inputs, it doesn't output websites, it doesn't output images. all PHP does is output text. Its with the help of another language/program/etc. that allows for this text to be actual forms, tables, inputs, websites, images, etc. but PHP does not do any of these. This is a very basic idea but it isn't something that is obvious when you are 100% new to PHP. Knowing this very fact allows students to understand what PHP actually does, it doesn't make a website, but it can make the HTML that makes a website.
my answer whenever people ask me 'does phpstorm have this, can it do that?' is always ' I'm sure it does, I just haven't found it yet'. And so far I've been right every time.
please not a blog. Every damn tutorial is a blog. it's in Brazil, how about some type of football (soccer) app? World Cup travel itinerary tracker with maps?
a) not unusual at all for the front end guys to not know php. However they should be smart enough to at least learn the templating front-end. b) what I might recommend is being able to set a DEV flag in your controller to show a block at the bottom of your page with a 'var_dump'. If you don't like the default output then do an iterative loop through it in the template to add a little markup, add a dev-only css file, and voila. At my last place one of the guys wrote something into zf2 that buffered any controller output before the view render and displayed it in a modal when the page loaded. I left shortly after he did it and never got a good look at the code, but it was pretty handy.
&gt; Konrad Podgórski Probably.
no support for HTML5 tags in that. I had to replace all the &lt;article&gt;&lt;section&gt; tags with &lt;div&gt;s to get the report to print. I didn't like that.
I'm not exactly pitchfork-wielding regarding magic methods, but I will get on any devs who use them to do too much. If you want to format some strings or make sure something is the right type, then ok I guess. But once you start doing real work and logic in a _get or _set, I'm not on board any more. I'm cool with: public function __set($name, $value) { //check if $value is an int and throw error if not } I'm not cool with: public function __set($name, $value) { //check if $value is an int //if it is then go get the user with that id# and store the resulting object in the class' $user variable //then update the db with their latest login date. } I still think there's better ways to write the code that eliminate the need for this. In my first example, If I was going to map a value to something and it needed to be a certain type, I think in 90% of cases I'm better off accepting that value in a type-hinted constructor and mapping it to a private/protected var.
ic..what i want is open multiple project in same window..its a bit anoyying to switch between windows..btw thx for ur suggestion
Thanks. This is something I've been considering. 
What? Refunding is a thing? Mikhail, where were you, when I bought my licence two days before your last sale? WHERE WERE YOU, MIKHAIL, IN MY HOUR OF NEED???
I seem to have misled a lot of people. I am well versed in working with PHP/CSS/HTML and programming as a whole. I have worked as a Web Developer for 3 years now but I have never just started something out of the blue. I always have used other frameworks/peoples work and just adapted it. My question was directly relating to good practices when starting up a new project.
Read http://www.phptherightway.com/ - it has answers to questions you didn't even know you should be asking.
Wow these look super useful. Ill edit this with the thanks you deserve when I get home.
I'll give this some thought, but this program sounds identical (or at least very similar) to the Tower of Hanoi problem. You might glean something from this: http://www.vincehuston.org/ps/hanoi_article.html
You wanted to start with git? First things first, get yourself an account at either [github](http://github.com/) or [bitbucket](http://bitbucket.org/) (bitbucket gives free private repos btw). Next, install a client on your machine. Linux? just install the git client (installation differs for each linux variant). Windows? [SourceTree](http://www.sourcetreeapp.com/) is nice. Mac? [SourceTree](http://www.sourcetreeapp.com/) is nice again. Create a new repo on whatever site you choose and follow the instructions to get it pulled to your local machine. I've heard good things about PHPStorm, I personally use [SublimeText](http://www.sublimetext.com/). A lot of people would use a framework to bootstrap their project mainly because writing boilerplate code over and over is a bullshit process. There are a ton to choose from. Laravel is the current hotness I guess, theres CodeIgniter (still relevant?) too. Do a google search for PHP frameworks, get one, look at how its made, tear it apart, see whats inside, etc. Using a framework not only makes life easier for you, but it makes it easier for everyone that works on your project in the future. Decided on a framework or written your own? Rad, get a basic install up and going inside the git repo you pulled down earlier. Commit and push it all to the provider (github, bitbucket, whatever). Your project is now safely stored off-site. From there, build out your app.
There is no `profile_id` on a `User`. That's probably where you're getting confused. Domain models are only concerned with object-to-object relationships. Foreign keys are a data-source (RDBMS) specific thing. These get abstracted away to your datamapper (repository). Maybe this will help: $user = new User(); $user-&gt;setProfile(new UserProfile()); $userRepo-&gt;save($user); At this point, your `UserRepository` can pull `$user-&gt;getProfile()-&gt;getId()` and do whatever it needs to with it (datasource dependent). If the value is empty, it can use an appropriate repository to first save a new profile, and get an id with which to persist when it inserts the new user. All of this can also be wrapped in a transaction. You can also pull in existing models to use with new relationships: $user = new User(); $user-&gt;setProfile($userProfile-&gt;findById(123)); $userRepo-&gt;save($user); $user-&gt;getId(); // 456 $user = $userRepo-&gt;findById(456); $user-&gt;getProfile()-&gt;getId(); // 123
ahhhhh...i see. thanks for the clarification
&gt;-cough- adobe adobe is a terrible company to compare anyone to. IDE Comparisons should be made with other big IDE products, like Eclipse, Netbeans, Zend Studio, etc I for one am looking for a good IDE that is no F'in Java based. I hate java 
Hi guys, I'm curious, has there been any traction on this idea since?
Are you not using transactions?
My issue with those docs is that often times there are some things you would like to do that are just missing from them. Then I'll ask in #laravel, get an answer, Google the method, and it just doesn't exist in the docs. So I guess my issue is that a lot of Laravel's features are undocumented.
The site is way too overwhelming, is this markdown/textile parser that outputs stuff in Twig friendly format? Or am I missing something? 
Please post about it again when you do =)
Take a look at the Key Promoter plugin. It's so damn annoying when turned on that it makes sure you'll learn all the shortcuts.
Laravel 4's Eloquent is my favorite active record ORM. https://github.com/illuminate/database
Yes, I do. That would explain why it doesn't happen on my prod environments. I will work out how to turn them off and see if that fixes it. Thanks!
\*clicks link\* \*puts pitchfork away\* 
wow, where have you been?
In the deep forest of Java
From a programming perspective java is ok. From a Deployment, management, and Security perspective Java SUCKS...... and Oracle as only made it worse... which I thought would have not been possible. I do not even want to have JDK installed on any of the PC's I own
Explains the slowness
EYYYYYY-O!
It takes markdown content, throws it into twig templates, and parses it all into pure HTML.
Does anyone know of a good "light" theme for phpStorm?
 $(".awesome-bar").remove()
I don't see how this is different from any other DI container? I'm not familiar with all the PHP DI implementations out there but I've recently used ZF2's DI container and it basically works like that. The only problem with "magic" DI whereby it automatically injects dependencies based on type hinting is that with larger projects it becomes slow. Therefore I'd be more interested in benchmarks of how it actually performs but I can't find any on the project's site.
Honestly I think Vagrant is a far better solution than Wampserver.
A little context would be nice here.
This is an interesting idea, I haven't seen a generic implementation though (not all APIs are the same of course). I'm going to give it a shot this week, could be a fun project.
This is Tower of Hanoi. Why are you doing it with classes? You'd be done by now if you just shoved it all into arrays.
 class Block { private $blockCollection; public getBlockCollection() { return $blockCollection; } } Similarly for BlockCollection. You don't need to "retrieve the class that the class is defined under", you just need the object that the object is attached to. When you add a Block to a collection you do: $b = new Block($blockCollection); 
Shopping cart/ecommerce app, simple CRM, simple inventory system, a project management/issue tracking system, invoicing system. Pretty much any of these are good, and can be very very simple, or expanded to make it incredibly complex.
It's a constant battle with the marketing folks :(
Anything i can read up on race conditions? I will only be using redis for sessions.
 if (strcmp("stuff", array()) == 0) echo "ZERO"; else echo "NO ZERO"; That prints "NO ZERO" for me. Turns out that strcmp converts the array to the string "Array", so maybe the password was "Array"? This is in PHP 5.2.6 (I have to work with what I have __:c__), maybe something changed lately?
It's like Jekyll/Octopress but written in PHP, using Twig for templating. I quite like using it for my sites.
This rant is ridiculous. The author got bitten because he/she doesn't know how `strcmp()` and weak typing work in PHP - as if something going wrong because you don't know how to use it properly is somehow *not* your fault...? `strcmp()` compares two strings. When you feed it garbage, it does the only logical thing it can do in a language that doesn't throw exceptions from the standard library: **it returns an error value**. The error value in this case is `null`. PHP is weakly typed. It uses implicit type casting when comparing two variables of incompatible types. Because the call to `strcmp()` returned `null` when it was passed garbage, the author's comparison thus became: null == 0 When used in a comparison with an integer, `null` is implicitly cast to 0, making the comparison: 0 == 0 Et voila. You can prevent 99% of these problems by simply using strict comparisons (===) everywhere and making exceptions when you need implicit type-casting. It's for the same reason that you shouldn't do things like `!strpos(...)`. Know your inputs, and know your standard library. **Edit:** *I will, however, make the concession that the `null` error value is apparently not documented on php.net, and it most definitely should be.*
Sure wish this had TFS support
&gt; Vagrant I'll be reading about it. Never heard of it. Wampserver is pretty easy for a beginner though. Vagrant maybe also. I'm glad to have it to investigate. Thank you 
Variable $blockCollection is not defined yo... $this-&gt;blockCollection;
Extend ArrayObject, is a class. 
Don't do out of your way for me though :-) I'm ploughing on anyway with a custom solution, but I'm building it into a Laravel Package. So for now my version will be locked to Laravel, but hopefully I will learn enough lessons from that to make it more generic next time, with the minimal of Laravel wrapping. For both the SugarCRM and MailChimp back ends (Data Mapper modules, I believe) there are many tens or hundreds of thousands of records. In both cases there is an enforced pager on the data, which is essentially a good thing to prevent HUGE masses of data moving between the apps on single requests. The MailChip API does not allow me to select records that have changed since a certain date, e.g. in the last 24 hours, which is one thing I want. There is simply no filter for that, so far as I can see. However, it will let me order records by reverse last-update timestamps. So essentially to get the last 24 hours worth of changes, I want to select ALL MailChimp records in reverse date order, fetch them one at a time, then stop fetching when I get a timestamp greater than 24 hours in the past. Of course, it is important that I don't fetch ALL records in advance, because I may only need a dozen out of 20,000. So the data mapper middle-ware should provide a local buffer I can pull the records from in my main application, and each time the buffer runs dry, invisibly fill the buffer up with the next page of records fetched from the remote MailChimp application through its API. I already do this with the SugarCRM client API, but it feels messy, although it does work - used [here](http://www.changeagents.org.uk/sustainability-jobs/) - all data you see there, including profiles and logins, is on SugarCRM and goes through the APIs. This is where I thought that I must be reinventing the wheel and there must be a generic wrapper (the Domain Model?) to handle it in a consistent way. Ultimately, I will have a Laravel application that synchronises data between SugarCRM and MailChimp, in both directions, just through their RESTful (in Sugar's case 'kind of hinting in the general direction of' RESTful) APIs.
i'm trying to do more TDD. it seems like the more i do it the easier it is. i either write tests or end up doing a lot of var_dumping, but at least this way when i'm finished i still have the debugging code for later. also, if you are working with other developers it gives them a good idea of how to use your classes. the more you do it the more benefits you will see.
In what way is it overwhelming? Happy to help answer questions if you have them! As others have stated, you have the gist of it. Given a set of source files (markdown, textile, twig, plain ol' HTML) it will convert and format the sources into fully rendered static files. I worked with Jekyll and Octopress for quite awhile before I started writing Sculpin. I'd say it is closer to Jekyll than Octopress since out of the box it doesn't provide any sort of structure for you.
&gt; in any strongly typed language If you want strongly-typed language features, do not use a weakly-typed language.
Not feedback on the article per-se, but the code example: I went to look at the repository just to get a quick overview of everything you've done (an easy way to scan for any cool tricks without needing to read the entire tutorial) and you've committed the entire project at once, meaning browsing through all of the files includes all of the default Laravel stuff, so I have to know which things to skip (eg: I know database.php in the config file isn't related to this project) whereas if your code was in a single commit separate from the Laravel default files (config etc.) I could just click on the project commit and see everything you've done at once. https://github.com/phpmasterdotcom/LukasWhite-StripeAndLaravel/commit/9f685dfc9c15712d99f6ecdd918ba6bbc03bfb31 Not a huge deal but for the future it would make your example code useful to even more people :)
Lol I **hate** when I make ironic, poorly-timed typos. Not sure what I was thinking at that time; some sort of Freudian slip probably. That said, I agreed that it is not an ideal way to install Laravel or any Composer-based code, and I would not encourage anyone to do so. But it **can** be installed that way, so they aren't *wrong*. It's just not usually best practice. But there's always edge cases (look at this thread...). I encourage you to be less reproachable when it comes to offering advice / your opinion. Telling someone they're wrong (and using phrases like "are you fucking kidding me") does more harm than good. Be a teacher, not a drill sergeant.
Redis has no locks.
How is this better than http://www.phrozn.info/en/ ?
I knew a guy who downloaded a page with malware once... he died 7 days later. 
Yes, I do. 
You're not alone.
Google left handed way of removing the demand for php on their cloud. 
For example, you have **async file upload** and are writing uploaded images' ids to redis (redis session). You need to: 1. lock 2. read 3. write 4. release So you have to write your own lock logic for using redis in such situations. P.S. About this example. Why do you need to write upload ids to session? If you want to link user's uploads before submiting some form with attachments (user refresh page and his uploads are still there).
Chrome showing me the same thing at the moment. edit details: What happened when Google visited this site? Of the 1393 pages we tested on the site over the past 90 days, 4 page(s) resulted in malicious software being downloaded and installed without user consent. The last time Google visited this site was on 2013-10-23, and the last time suspicious content was found on this site was on 2013-10-23. Malicious software includes 4 trojan(s). Malicious software is hosted on 4 domain(s), including cobbcountybankruptcylawyer.com/, stephaniemari.com/, northgadui.com/. 3 domain(s) appear to be functioning as intermediaries for distributing malware to visitors of this site, including stephaniemari.com/, northgadui.com/, satnavreviewed.co.uk/. This site was hosted on 73 network(s) including AS36752 (YAHOO-SP1), AS23148 (TERREMARK), AS36444 (NEXCESS-NET). 
No, you can't explain that!
Google WMT claims that this file is possibly injected with malware: http://static.php.net/www.php.net/userprefs.js That file has been around for donkey years. Must be Google's plan to make everyone switch to Go instead of PHP.
Except in any strictly typed language, it would've been done for you already, there's no way you would even get to the point of having a variable `$foo` if you declare the variable as string and the value given is an array. All this 'filtering' and 'sanitization' is a pain in PHP.
Dart instead of JavaScript, you mean.
everything on php.net (like www.php.net | de.php.net | docs.php.net | ...)
Is there a reason for having an over-engineered solution to what is essentially a variant of the towers of hanoi problem? Take a look at your class hierarchy and ask yourself if it makes the problem more tractable; I doubt it.
Germany here: Same here.
Sorry - it's been a while since I actually coded stuff in PHP
Same here.
I think that was because he also drank his own pee
Same here, does anybody know if there is a genuine malware threat yet? EDIT: [Found this](http://productforums.google.com/forum/#!topic/webmasters/puLmvjtK0m8), looks like they are onto sorting it out
I just found [this](http://productforums.google.com/forum/#!topic/webmasters/puLmvjtK0m8), I think it's the php.net webmaster requesting a review.
Haha that was good :D 
so I can do a convert file.pdf file.png and GS create them automatically. So then I guess just a file that pulls the file names ... I'm guessing something like: create folder upload pdf split into pngs pull pngs into db, move pngs delete folder... ...any thoughts?
great thank you. I read somewhere that there is a lot of processing overhead using imagemagick. Do you have any experience with this?
Erm, I think their static server got hacked? Obfuscated scripts are a pretty common practice for hackers. I wonder what it exactly does but I can't make any sense out of it. EDIT: OK, maybe they didn't get hacked, but I don't get why you would obfuscate your javascript so heavily, it's not exactly a common thing to do, minifying, ok, but obfuscating, no.
From my point of view, I found out that using ImageMagick was too slow and I end up using a small tool from http://mupdf.com (Madeira) that allowed to get nice performance when generating the images. It took me a few seconds to generate the images for a more than 200 pages PDF. If you're familiar with Ruby, you might give a look to this tool that maybe suit your needs better. http://documentcloud.github.io/docsplit/
I get it as well. [Direct link](http://php.net).
The PHP.net webmaster has successfully applied for a manual review now [review request](http://productforums.google.com/d/msg/webmasters/puLmvjtK0m8/3LAHmGo1e1kJ)
I think the more pressing concern here is why are webmaster tools/analytics so goddamn unpredictable? The docs are never up to date!
Same in Israel
Am I right in assuming that this would be the perfect back end for [Sir Trevor](http://madebymany.github.io/sir-trevor-js/)?
For those in need of the php documentation (without the comments) : http://devdocs.io/php/
PHP is a bad first language. Good 'ol C (i.e., with data structures, and other stuff) is good. I'm not a Python coder, but Python also seems better. Once they have the correct mindset for programming, they can use PHP.
Do note that devdocs.io seems to be incomplete (for example version_compare doesn't appear to be on there)
Yep.
Odd. Didn't notice as I use [DevDocs](http://devdocs.io/) instead.
Do you have / know of a class you recommended that implements locks? It looks like the phpredis module has had this as an open issue for 2 years.
It should be noted that devdocs appear to be incomplete. For example, I couldn't find version_compare on there.
&gt; Always scaring how much Google can hurt projects or companies. Read [here] (http://safebrowsing.clients.google.com/safebrowsing/diagnostic?client=Firefox&amp;hl=en-US&amp;site=http://php.net/) &gt; Of the 1613 pages we tested on the site over the past 90 days, 4 page(s) resulted in malicious software being downloaded and installed without user consent. The last time Google visited this site was on 2013-10-24, and the last time suspicious content was found on this site was on 2013-10-23. &gt; Malicious software includes 4 trojan(s). Do not think this is bogus.
Sorry for posting a duplicate, did not see the other threads among the other stuff. I did not say that the threat was not genuine. Genuine or not, the power of Google (for or against websites) is scaring to me.
I did not say it was bogus, just quoted... Genuine or not, the power of Google (for or against websites) is scaring to me.
The file had different content when Google accessed it, and something fishy's going on with it, the content has changed several times according to server logs.
Do transactions help solve the locking issue? If two ajax requests are writing to the session at the same time?
"It can never happen that a request issued by another client is served in the middle of the execution of a Redis transaction. This guarantees that the commands are executed as a single isolated operation. Starting with version 2.2, Redis allows for an extra guarantee to the above two, in the form of optimistic locking in a way very similar to a check-and-set (CAS) operation. " http://redis.io/topics/transactions#cas 
It's also my favorite.
One significant benefit of unit testing is that if your test is hard to write, it's generally a good sign that your code is too complicated or can be subdivided more. You'll notice that if you have a bunch of loops / nested conditionals, your tests are going to be a nightmare to write and you'll have to write multiple tests for the same set of functionality. When you write tests for "clean" code, you'll be amazed how easy they are to write and consequently, read. If you get lost half-way through your test writing and have to constantly consult the code, consider refactoring. I've found several bugs that would have absolutely made it to production if it weren't for unit testing. I will never write software without tests again. It's also crucial for larger teams, you more or less can't function without it. Someone refactors a piece of code that they didn't realize was a dependency elsewhere and suddenly your build goes boom in development, not production.
&gt; Must be Google's plan to make everyone switch to Go instead of PHP. What? Google engineer says the JS it was definitely compromised: https://news.ycombinator.com/item?id=6603831
No shit. That doesn't even look like javascript...
So you write tests before you write code? Why the mix? I write unit tests after the fact, but true TDD (test-first) is difficult.
I don't think that this is obfuscated JS, it looks more like compressed "binary" data. Given that the file name is "functions.js" and that the string contains many small parts of PHP function names, this is likely a compressed function name list.
awesome, thank you and I will read up on it. 
You should also worry about a condition called 'dog piling' when caching stuff, I wrote a blog post about this here: http://alekseykorzun.com/post/49520668105/how-to-gracefully-handle-cache-expiration 
Save yourself from a lot of pain and suffering and just use [Swiftmailer](http://swiftmailer.org/). When it comes to sending e-mails a damn lot of things can go wrong, so you really don't want to re-invent the wheel with this.
You got to be kidding me, well thank you. I don't know why I didn't search for a RSS feed.
I actually ran into this and that's when I threw my hands up to ask for help. Is it possible to install this in a server? Do I just copy the files into a folder?
I have been really wanting this exact feature for ages. Glad that it's being proposed. 
I can't support this enough. One other related change that would be great is that if PHP fixed how the different functions indicate a error condition. Some indicate an error by a return code, exception or throwing a PHP error. Why not just stick with one? Ideally exceptions.
Giggedy giggedy.
I do hope this gets approved. There's a workaround for this now but it's a kludge at best. This will be ever so much better.
To do calculations more than once? It's not locking. Example: 1. WATCH 2. GET 3. some calculations 4. MULTI 5. SET 6. EXEC failed go to 1. It's just "check data wasn't fucked up or try again".
this is awesome, I really hope they go the BaseException route. only because if they make EngineException extend Exception it WILL break existing code, limiting php 5.6's adoption.
Yes, it _must_ be installed on te server, as PHP is a server-side language. This library can be installed by uploading the files: &gt; If you downloaded Swift Mailer as a .tar.gz or .zip file installation is as simple as extracting the archive and uploading it to your web server. http://swiftmailer.org/docs/installing.html Try following the examples on this page, to get started: http://swiftmailer.org/docs/messages.html But, if you want to do this by yourself, I think you should at least get acquainted with PHP's basics. Here's a good start: http://www.codecademy.com/tracks/php
If fi.php.net server does not show the news entry, use http://php.net/archive/2013.php#id2013-10-24-1
Sure, input filtering is a requirement in any language. But in no other language do you have to worry that a string variable is actually a string and not an object, an integer is actually an integer and not an array, etc.
So, does this mean warnings and notices would continue to work pretty much like they currently do (as in, they aren't catchable)? I would love for the concepts of nonfatal exceptions and resumes to be introduced, so something could throw a warning or notice exception that, when uncaught, merely logs the message and continues normally as if nothing had been thrown. This would give us the benefit of catchable errors while mainly retaining current behavior.
It's all set on the server (installation wise). The only problem is getting it to send a mail. Whereas with basic php mail all I need is to create a header, subject &amp; address; I don't think it's that easy with this one. I'll keep poking around with it but let me know if there's a simpler mail sending example because the ones on the site aren't working.
You shouldn't still be seeing this — assuming this is recent, what IP address do php.net and static.php.net resolve to for you?
This is probably the most important PHP RFC I've seen to date. What are the official channels, if any, for everyday members of the PHP community to offer support for this?
Only, you know... JavaScript: &gt; 0 == "0" true &gt; false == 0 true &gt; "password".substr({foo: ['bar', 13]}) "password" ...and any other weakly typed language. These languages have chosen to use weak typing on purpose. It's not an oversight, or a mistake. And implicit type conversions are the driving force behind weak typing (can't have one without the other). My suggestion to you going forward is to either deal with the fact that all languages have different designs and learn/use them as they were intended to be used in order to become a better programmer... **or** settle into your comfortable niche and stop using languages you don't like.
72.52.91.12
You should definitely pass the connection into the class. Not only will you save yourself unnecessary overhead (and possible deadlocks) from duplicate connections, but dependency injection will make your code more testable, as well.
So you're using windows with norton and you're concerned about outside threats...?
Thanks so much. You can e-mail me at aharvey@php.net if you don't want to post here.
Thanks for the advice. Would it also be a good idea to keep a local reference to the connection? Something like: class bar { var $_CONN = null; function doSomething($conn) { $_CONN = $conn; $this-&gt;somethingElse(); } function somethingElse() { $_CONN-&gt;query("SOME QUERY"); } }
Non-fatal errors, notices, and warnings can be converted to exceptions with a custom error handler. These exceptions will include full correct stack trace and there is even a built in class, `ErrorException`, for this purpose. 
 class bar { private $conn; public function __construct($conn) { $this-&gt;conn = $conn; } public function doSomething() { $this-&gt;conn-&gt;query("some query"); } }
If someone does a catch all they aren't explicitly saying to catch an EngineException, so the same code would behave differently in 5.6 over 5.5, BaseException would solve this and allow compatibility with legacy code 
Two wrongs don't make a right. Just because Javascript also uses weak typing doesn't make it okay. What you just said is like a kid who gets told off for something, and his immediate reply is to point at his sibling and say "i saw him doing X" to take the blame off of himself.
Thanks. What I mean is, is having "private $conn" a bad practice? It seems like you shouldn't keep references to database connections flying around in all these different classes.
 Secure Connection Failed An error occurred during a connection to wiki.php.net. Peer's Certificate has been revoked. (Error code: sec_error_revoked_certificate) Shit. php.net is not having a good day.
No, it's not bad practice. It is very common to inject dependencies, including database connection objects, into the constructor and storing them as a private variable on the class.
Agreed. This has been a long time coming, and while it's not a silver bullet it would make many things far easier to deal with.
protected not private, private is a dumb thing to use
Yeah I'm familiar with the difference between the two patterns :) I hacked away on something for an hour tonight, pretty fun little project and I expected I'll keep working on it. Super preliminary with very limited configuration and features at the moment, but it's coming along. https://github.com/adamwathan/activerest Extend the Model class and provide a base URL and the functionality that's there should work automatically with any traditional REST API. Going to work on adding the ability to customize the API end points next.
You misunderstand what the news post is saying. They admit that a malicious file was being served and Google picked it up. However, it wasn't being served consistently because of an rsync job -- so when they check it themselves, at first, they didn't see anything wrong. Essentially, whoever set hacked the servers and set this up wanted to avoid the site admins themselves seeing it in action, so they didn't set it up to serve every user on every hit. Additionally, if one user is served a malicious userprefs.js, notices it, and then reports it, when the admins check it out, they'll see that the userprefs.js on disk is perfectly fine. All in all, this could have gone on for awhile if Google's automated scanners hadn't gotten lucky and been served the malicious version of the file.
Ah gotcha, I will admit I kind of skimmed over it. Does not help the fact that Rasmus Lerdorf was saying nothing was wrong on their end on twitter yesterday.
[ErrorException](http://php.net/manual/en/class.errorexception.php) covers some bases if you opt into throwing it from within an error handler. 
The weird thing is, I only get this error on Firefox. Chrome seems to be fine. Any idea why?
http://php.net/archive/2013.php#id2013-10-24-2 Cascading issues, I suppose. Site compromised-&gt;flagged by google-&gt;cert revoked. I guess Chrome doesn't check CAs for revoked certs.
I'm curious. What would the implications of implementing this be?
You should probably get that checked with your doctor.
Subscribe to the PHP Internals mailing list, follow the RFC thread, and contribute. I've found that arguments made based on experiences with the PHP language generally get the best reception, and only when those arguments are for a specific way of implementing something, or a question about why something is done another way. Don't reply with "+1" or something that shows support without contributing to the idea. Especially don't reply poo-pooing the idea without backing it up with something solid and knowledgeable about the PHP engine. Sorry if this is coming across as stern. The PHP devs often are not very friendly (there are exceptions, and they often post to this subreddit), so trying to offer advice on being heard. To subscribe: http://php.net/mailing-lists.php To read: http://news.php.net/php.internals
That is so wrong. Every notice and warning is an error. The fact that there is distinction is pure poor legacy PHP design. It's been proper PHP practice to run code with `error_reporting(E_STRICT | E_ALL)` or `error_reporting(-1)` for years. Turning notices, warnings, and errors into Exceptions accomplishes the same thing, only better. Also notices and warnings are large performance issues as generating them is quite expensive in PHP. Even ignoring them is expensive because PHP still goes through the effort to generate the message even if the display is suppressed. 