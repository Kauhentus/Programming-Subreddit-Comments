Lists do not have value equality in Dart (and in most other languages): var a = [1, 2]; var b = [1, 2]; print(a == a); // true print(a == b); // false There is good sense to this choice. Just because two different lists currently contain equivalent items, that doesn't mean they always will, so it's risky to consider the lists themselves equal: // Not how Dart behaves: var a = [1, 2]; var b = [1, 2]; print(a == b); // true a.add(3); print(a == b); // Now it's false! Now consider what would happen if, say, you were using those lists as map keys or something. In general, value equality isn't a good fit for mutable objects and lists are mutable in Dart.
&gt; // [3,3] (runtimeType verified as List&lt;int,int&gt;) Isn't this just **List&lt;int&gt;** ?
Since the sublist (move) contains just two entries, i would make that a value class (like in Java or Data class in kotlin) void main() { var moves = [Move(1,1),Move(3,3),Move(4,4)]; print(moves.contains(Move(1,2))); print(moves.contains(Move(3,3))); } class Move { final int x, y; Move(this.x,this.y); @override int get hashCode { int result = 17; result = 37 * result + x.hashCode; result = 37 * result + y.hashCode; return result; } @override bool operator ==(dynamic other) { if (other is! Move) return false; Move move = other; return (move.x == x &amp;&amp; move.y == y); } }
yes, that was a typo. sorry about that.
I don't follow what you are saying here. Doesn't what you just described apply to anything? for example, var a = 1; var b = 1; print(a==b); // true a+=1; print(a==b); //now its false i wouldnt expect that because 2 lists are equal at one point in execution that they should be equal always. This is confusing to me. I am probably misunderstanding something. thank you!
I think this mostly just has to do with the fact that List&lt;T&gt; is an object. All objects are not defined by the values of their fields (in your case, the int tuple) but rather their memory address. This isn’t the case with primitives like integers or doubles since their values are literal. 
Here: a+=1; You are not mutating the number 1 *itself*, you are storing a new unrelated value in the variable `a`. In my example, there is no assignment to `a` at all. It's the list itself that changes.
Hmm, I need to read what mutability means in this sense....it still is confusing. What you say makes sense for the variable and the number 1, but in the case of the List of Lists, I would have assumed that the List is the variable and it is storing lists instead of plain numbers, so to me that SEEMS to be the same. What u/eazop wrote before you sounds clearer, but then I see on the dart tour that "*Everything you can place in a variable is an object, and every object is an instance of a class. Even numbers....*". and I am back to confusion. Maybe i just have to accept it for what it is and it will be clearer when I run into variety of situations. thank you!
but the dart tour says that "*Everything you can place in a variable is an object, and every object is an instance of a class. Even numbers....*" and that sounds to me like a number literal is an object, not a primitive. (I am a beginner programmer, so maybe I am just confusing terms)
I follow most of what you've done here and it seems like it would be a long term solution (though probably overkill of the type of exercise I am doing). Can you please explain this part to me? int get hashCode { int result = 17; result = 37 * result + x.hashCode; result = 37 * result + y.hashCode; return result; } thanks!
That code computes a hash for the object. The main idea is that equal objects MUST have equal hash codes (but equal hash codes do not mean equal objects). Theoretically, you could just return 0 and it would be a valid hash function, but generally you want the hashes to be as unique as possible. The code you're asking about is a common (but far from perfect) hash function (17 and 37 are chosen because they're primes). Various code editors generate similar functions for you. To understand why hash codes are important, take a look at how hash tables are implemented. 
It's true that internally Dart stores everything as an object, but variables that represent the "primitives" in other statically typed languages (String, int, double, etc.) are unboxed, in essence, when they are used or compared. For those types, the value is what matters, while for reference types (List, Map, custom object types, etc.), their starting location in memory is the main thing. Hope I'm not just making it more confusing. Haha...
Think Flutter on desktop could catch on even faster then mobile. 
Actually really like Dart. But it was needed as it does AOT and JIT is not allowed on iOS. Cross platform would never work if it has bad performance. Dart can get us the performance needed. AOT uses more of a run time then a VM.
Yep. Over 40k stars already on GitHub.
Flutter already has over 40k stars on GitHub and just hit release. It is early but would say it has already "taken off". Also with Fuchsia it is inevitable, IMO.
I do think Dart will cut into JS. Big reason is better performance. 
what's your favorite language feature of Dart?
AOT would be #1. Dart just feels like a more polished JS.
Are you using https://pub.dartlang.org/packages/test You can use `--pause-after-load` to debug - https://github.com/dart-lang/test/blob/master/pkgs/test/README.md#debugging
Please, don’t. It’s a pain to deal with non-nullables, and unless it gives performance benefits at runtime l, it’s not worth it. 
I don't know how much I disagree with you, but this is a very unpopular opinion. Dart's `null` problems are almost always sited by people comparing Dart unfavorably to other "modern" languages.
&gt; It’s a pain to deal with non-nullables There are usability concerns, but we have a handful of features in mind that should alleviate most of them. Most users believe the safety you get in return is worth it. &gt; unless it gives performance benefits at runtime The goal is that once your entire program is null safe (we'll support programs containing a mixture of null safe and not null safe during the migration), then, yes, we will be able to optimize based on that fact.
How is it more of a pain to deal with non-nullables than unexpected nullables? Genuinely curious.
I started down the AngularDart road because of the need to re-build a pure JS website, my distaste for the JavaScript ecosystem (npm, package explosion, etc.) and my recent love of Flutter. But now I'm torn... AngularDart seems really solid but there is a lot to learn and it's pretty much all or nothing if you go AngularDart. Vue on the other hand seemed lightweight but after a week of playing with Vue.js I might just have to go back to AngularDart... the simplest of things in Vue.js is really not that clear and I feel like I may as well just write pure JavaScript. Ugh, decisions, decisions.
You can get an NPE in two cases: a bug in your code, or somebody else calling your API with an (unexpected) null value. Non-nullables help with the latter but not so much with the former. The price you pay for extra compile time null checks is having to go back and forth through your code to add/remove the nullable annotations. On the other hand, when an NPE does occur, it’s usually easy to trace to its root cause. 
It’s going to be a big undertaking for Dart / Flutter library owners to make the existing code null-safe. Once that happens, the users of those libraries will be forced to add non-nullable annotations to their code. In other words, once non-nullables are introduced, they become a must to use. If the majority of the developers do indeed support this course of action, I’ll take back my statement. 
Judging by this thread, it’s evident that it’s an unpopular opinion. However, I’ll speculate that the majority of Python users would support it. You can go to extremes to maximise compile-time checks, or just embrace their absence. It’s indeed a matter of opinion.
Hmm, doesn't work for me. I'm using IntelliJ with Dart plugin. If I run a browser test it says "Observatory listening on [http://127.0.0.1:50035/](http://127.0.0.1:50035/)" and thats it. It hangs there forever. OK - I can open that link but than I'm in "Observatory". Makes it even worse... 
But if you could specify the non-nullability of a variable at declaration time, you'd never need to annotate it again but you'd still get compiler enforced null safety. It seems like a miniscule burden in exchange for a big benefit to me. 
i kind of get it, but it definitely doesnt seem obvious. I think I have to start concentrating more on the practicality of these concepts instead of the computer science explanations. A lot of the answers I get go deeper into the language than what I currently am prepared to understand. thanks! &amp;#x200B;
I'd rather you didn't, thanks
&gt; It’s going to be a big undertaking for Dart / Flutter library owners to make the existing code null-safe. Yup. We can automate much of it with tooling, but it's a big change. It's roughly akin to going from dynamic typing to static typing. &gt; If the majority of the developers do indeed support this course of action, I’ll take back my statement. It is the number one feature request from every team we talk to, is a tentpole feature of all three of the main languages we compete with, was one of the first feature requests for Dart, is one of the most starred issues, comes up on every single Reddit and Hacker News thread that mentions Dart, and shows up at the top of almost every survey we've conducted for several years.
Please add IDE support!
A crazy ride. Dart 2 was a huge migration for everyone involved. Glad the author got through to the other side!
This is on my long list of things I want to work on. You could look at pkg:build_cli and/or pkg:build_version for pretty simple examples. pkg:json_serializable is more complex.
Just add the `async` designation to the function housing the conditionals, then stick an `await` in front of `_performThisAsyncFunctionBeforeMoveToNestedConditional()`. Something like: if (snapshot.hasData) { print(‘hasData'); await _performThisAsyncFunctionBeforeMoveToNestedConditional(); if(id==uid) { ... Execution is suspended by `await`, so the nested conditional runs only after the async function has completed.
Who?
I think the stuff here is closest thing. https://flutter.io/docs/development/data-and-backend/state-mgmt
Thanks, I'll check them out!
scoped_model 💯 it's a flutter lib
Thanks for reply! Problem is I don't know how add async designation because I have streambuilder housing the conditionals ([https://docs.flutter.io/flutter/widgets/StreamBuilder-class.html](https://docs.flutter.io/flutter/widgets/StreamBuilder-class.html)) Is possible to make conditional async?
Actual I think I have solved now! I just use boolean to track if `_performThisAsyncFunctionBeforeMoveToNestedConditional();` is complete. When complete set bool = true. I also change conditional to `if (snapshot.hasData &amp;&amp; bool ==true)` and make this all keep looping (until bool ==true so enter the conditional. &amp;#x200B; But this is v workaround and I think not v good. You know better way?
You can set the builder function as `async`. Something like: StreamBuilder&lt;int&gt;( stream: _lot?.bids, // a Stream&lt;int&gt; or null builder: (BuildContext context, AsyncSnapshot&lt;int&gt; snapshot) async { if (snapshot.hasError) return Text('Error: ${snapshot.error}'); switch (snapshot.connectionState) { case ConnectionState.none: return Text('Select lot'); case ConnectionState.waiting: return Text('Awaiting bids...'); case ConnectionState.active: return Text('\$${snapshot.data}'); case ConnectionState.done: return Text('\$${snapshot.data} (closed)'); } return null; // unreachable }, )
If you’re not doing anything with the result and the subsequent code is not impacted by the outcome of the async functions then you can remove the await. 
Yes, there is very much a difference. Let's say you have: _firstAsync() async { await signIn(); print("signed in"); } _otherAsync() async { var = await instance.get(); print("got instance"); } And lets say that `signIn()` and `instance.get()` may take random amounts of time. If you do: _mainAsync() async { await _firstAsync(); await _otherAsync(); } Then the program will *always* print "signed in" and then print "got instance". The call to `instance.get()` will not happen until `signIn()` has completed. (More specifically until the Future returned by `signIn()` has completed.) If you do: ​_mainAsync() async { _firstAsync(); _otherAsync(); } Then the two calls run essentially in parallel. It could print "signed in" first, or "got instance" first, and you have no way to predict or control that. 
You might be interested in doing: _mainAsync() async { var firstFuture = _firstAsync(); var otherFuture = _otherAsync(); await Future.wait([firstFuture, otherFuture]); } This will have both operations going at the same time. If you truly aren't interested in the return values of the async methods that you call, you could ignore `await`ing either operation... but there are pitfalls regarding exceptions that have already been mentioned. Or if you have work that occurs after the async calls, but relies on the async calls having been completed, you would definitely want to await the async calls before performing that work.
Even without turning on those options, I used to always declare every type and return type. After working with type inference in C#, which is a much more verbose language all around, I began to see why the Dart style guides urge you to rely on it in many situations. Explicit types everywhere is certainly extra safe, but a lot of code lines end up very long (and thus more confusing) when you do it. I also explicitly declare return types more than 90% of the time. In fact, I probably only leave them off when doing quick experiments that won't necessarily stick around. For instance, it can be nice to leave off `Future` as a return type on some `async` functions to avoid having to import `dart:async` when you're just trying to do something quickly.
Thanks! I am not use try catch now. Is important?
Thanks! You explain very good!
Thanks! When is you example good to use?
Yeah I think I'll keep them turned on as I do like the explicitness they communicate. Like you said it makes some lines a bit long but it's worth it especially if it were a code base you're not familiar with.
Yes you should handle all exceptions in some way. 
Thanks! This important for production. But when develop should not be problem because can see output in console - show what went wrong. This correct?
If have one await and one not await, does not await function still wait for await function? For example: \_mainAsync() async { Await \_firstAsync(); \_notAsync(); } &amp;#x200B;
for those of us who are starting even closer to zero....can you please explain what the 2 modes entail and examples of both? thanks!
If you have: _firstAsync() async { await signIn(); print("signed in"); } _otherAsync() async { var = await instance.get(); print("got instance"); } _mainAsync() async { await _firstAsync(); _notAsync(); } main() async { await _mainAsync(); print("_mainAsync returned"); } Then the program will print "signed in", then "_mainAsync returned", then at some point later, "got instance". 
Much needed thank you.
Here is the docs for [always declare return types](http://dart-lang.github.io/linter/lints/always_declare_return_types.html) And here is the docs for always specify types
Thank you. Will read them now.
Yes, it’s super important if you’re writing production level code. Keep in mind that when developing you might not see exceptions because exceptions can occur for a variety of reasons (network failures, different software/hardware, versions of dependencies, etc...) so just because you don’t see exceptions when you run it doesn’t mean your users won’t see exceptions. That’s why it’s so important to get in the habit of thinking what should I do if this throws an exception? It will help make your life easier when debugging and it will make your users have a better experience when using your software. 
What are the primary appeals of using Dart for the backend?
Is it possible to call a less specific mixin method over a more specific one? In other words if you have: &amp;#x200B; class Musician extends Performer with Singer, Dancer &amp;#x200B; Given the above Singer.Perform() implementation will be called. But what if I specifically want to call Dancer.Perform() - is there a way to do that? Thanks!
Same simple language and comprehensive core libraries. The biggest advantage I can see would be if you have Flutter or web Dart projects that could share code with the server side. Dart all the way down!
Thanks!! I not know this before. I will try learn more about catch exception!
Thanks! I think understand. That I not expect. Even though \_mainAsync() is await, ("\_mainAsync returned") will print before. So to be safe if want everything to execute in order just make everything await?
[removed]
&gt; if want everything to execute in order just make everything await? Right.
I couldn't believe it so I filed a bug report. [https://youtrack.jetbrains.com/issue/WEB-36409#](https://youtrack.jetbrains.com/issue/WEB-36409#) Almost **2019** and it is not possible to debug browser targeted tests!
No. I've been looking for one for a long time. We need to build it.
I'm a Flutter developer so being able to stick to one language is the biggest advantage for me. Other than that I guess you could stick to whatever language you prefer (Python is good for web scraping).
https://pub.dartlang.org/packages/mock_data#-analysis-tab-
Great package! Very useful. Be sure to check out your package's analysis tab for suggestions on how you can raise its scores and increase its perceived viability. :)
Old comment of yours I'm replying to, but do you have any good links for Dart serverside AOT? Don't know in the invocation.
Oh dear, I don't, sorry.
Gilad isn't on the google team anymore, the book can give you insights from one of the language designers but it is outdated.
language tour is currently the best resource out there. Next to it, is the dart std library source code. &amp;#x200B; i was asked once how did i get so good so quick at golang? I read the stdlib and tests line by line until I got it. Good news Dart stdlib is not that big at all. A good test of any new framework/library/language, is to look at the std lib. Looked at C++11 ? I ran away as fast as I could.
Most of the basic semantics of the language — objects, classes, methods, interfaces, inheritance, etc. — are the same, so the book is mostly fine. The type system is significantly different and the *philosophy* behind the type system is quite different. So parts of the book that go into that may lead you astray. I would be surprised if he updated the text. He no longer works on Dart. I would love it if someone on the Dart team could find the time to write a newer reference, but that's a big commitment.
Fuschia, Googles new OS will probably heavily support it. But I mean you CAN use Dart wherever. 
Thanks, I'll check out fuschia. 
It's probably a little ways away but they've released some stuff about it! 
Great, I just googled some info. Is there any particular reason google wants to make a new mobile OS over Android?
Oracle pushes Google at least to go for innovation, by suing. O wants tons of money, claiming googles "unfair" use of java,by creating android. Judges are confused or what? [https://www.wired.com/story/the-case-that-never-ends-oracle-wins-latest-round-vs-google/](https://www.wired.com/story/the-case-that-never-ends-oracle-wins-latest-round-vs-google/)
Think it is heading to a very bright future as it is an important part of Fuchsia.
I number of reasons. First, the Linux kernel is over 15 million lines of code all running privledged versus Zircon, Fuchsia kernel, is 10s of thousands. It is very difficult to secure 15 million+ lines of code. Too big of an attack plane. With Moore's law slowing down we have to find other ways to optimize. Zircon should enable more efficient use of hardware and especially with more cores. I would also expect Google to do with own SoC that is optimized for Zircon. 
Thanks very much for the detailed reply, sounds like Fuchsia has a bright future.
Don't know but I imagine it's party to get away from java
Excited about what Google is doing. Plus love they develop in the open so we can watch a new OS come together. But really with 88% smart phones running Android the success of Fuchsia is a bit guaranteed as no other option. 
Oracle shot itself in the foot, one of the main uses of java is Android. Thanks for the details, I wondered why Google is moving away from Java and introducing things like Kotlin.
I think/hope dart will be a good choice for wasm. I enjoy dart and flutter far more than I thought I would. Wish I could use it at work. It really it the best parts of Java and JavaScript.
&gt; So why is returning everything allowed through a shorthand function[()=&gt;] even if the return type is void? The reason is that users often use `=&gt;` to declare setters (which makes sense since the nearby setter usually uses `=&gt;` too. Setters always return void, but the body of the setter is usually an assignment. Assignment expressions return the assigned value. So if we didn't allow void `=&gt;` members to return values, then this would be an error: class Foo { int _bar; int get bar =&gt; _bar; set bar(int value) =&gt; _bar = value; // &lt;- Body evaluates to int. } It's not the most principled language choice, but it seems to line up with the idioms users prefer. (Personally, I wish we had a better overall syntax for declaring getters and setters.)
I'm about to launch a webapp written purely with Dart + Aqueduct. It supports Signup, Login, OAuth2, eCommerce functionality, etc. Experience was really awesome. With the introduction of Google's Hummingbird, I think Flutter on the web has a lot of potential.
Thank you, didn't see further analysis, just saw Popularity is 0, so I thought can't do nothing more for overall score, but will take a look. 
Thank you for your response, I mention that in above comment. I didn't see further analysis, just saw Popularity is 0, so I thought can't do nothing more for overall score, but will take a look. 
Good to hear, hope it goes well
Cool! Was hoping for a level 2!
Dart on the server is also a good option. I got over **2+ hours of video** covering the Aqueduct framework on **my YouTube channel**: [https://www.youtube.com/watch?v=vvDomA-ru3E&amp;list=PL3UwowPBo8XEDvDDY7fpurOLt7hhYMBlx](https://www.youtube.com/watch?v=vvDomA-ru3E&amp;list=PL3UwowPBo8XEDvDDY7fpurOLt7hhYMBlx) Check it out and let me know your thoughts. And **Subscribe** and **Hit the bell**🔔 for more updates :)
Nicely done. I love it!
I am one of the fortunate few who gets to use Dart at work. I'm rebuilding a PHP web app with AngularDart right now. Since I'm using the BLoC pattern, I will be able to share most of the code with a future Flutter app, as well. Love the developer ergonomics of Dart.
Fantastic!
The horrible grammar distracts from the message. 
The horrible grammar distracts from the content. 
Thank you for the feedback, will try to improve
It's not possible from within intellij, yes. However because of the new build_test and build_web_compilers you can serve your tests using build_runner open the url of the tests and then debug within chrome which was sufficient for our team in most cases.
I agree, this does not seem possible.
Perhaps, but if only native English speakers wrote about Dart, there'd be a hell of a lot less Dart content out there right now.
&gt; unless it gives performance benefits at runtime l, it’s not worth it. Performance isn't the only thing that matters - eliminating an entire class of really common runtime errors is huge. A sluggish app is probably better than one that crashes.
&gt; You can get an NPE in two cases: a bug in your code, or somebody else calling your API with an (unexpected) null value. Non-nullables help with the latter but not so much with the former. I'd say it very much helps with the former. If you make a variable not-nullable and have code that is assigning a potentially-null value to it, you'll get a static warning. It can stop you shipping code that could NPE. &gt; when an NPE does occur, it’s usually easy to trace to its root cause The big issue with NPEs isn't how difficult they are to track down (though I'd argue in some cases it can be very tricky), it's the fact that you just crashed on your user. In my opinion, eliminating potential runtime errors is the best thing a programming language can possibly do.
&gt; the users of those libraries will be forced to add non-nullable annotations to their code But surely today they have to either assume variables will not be null (which is dangerous and may result in a runtime error) or write code to handle it being nulls - but what do you do when a variable you don't control and didn't expect to be null is null? You might not crash, but you might also not be able to do anything particularly useful except show the user an error).
But if not-null is supported, it supports both cases. Supporting non-null is a superset of what we have today - how can it be a bad thing? You don't have to use it if you'd prefer everything be nullable.
Thought it was a clickbait . But really learned something . Nice Article man!!!!!
Same
Thanks
Lol for a second I thought I somehow missed a new windows launch
xD! I am just small creater need support ! please subscribe me and share!
[This question was voluntarily removed by its author.](https://i.imgur.com/mkwVIEf.png)
This looks pretty cool. Would expect much of where Electron is used to now go to Flutter.
Would love to read about this. problem is your link is dead.
Please don't remove the question the next time you solve your problem by yourself. Add the answer you found to your own question, this helps others with the same problem and doesn't produce a dead link ;) 
Dart will start loving native extensions in the near future. I am working on a new FFI. A vision document, as well as the progress on the prototype can be found on [https://github.com/dart-lang/sdk/issues/34452](https://github.com/dart-lang/sdk/issues/34452).
Awesome! I wish more company’s used Flutter, and hopefully they will with the release of Flutter 1.0.
Have you ever used both languages? They are totally different - you just picked a few syntactic similarities.
I've only used Kotlin a little bit, but I'm also not the author of the article. :)
Thank you, this is great.
There's no reason to write Dart code like this: class Foo { int _bar = 0; // underscore marks the field as private int get bar =&gt; _bar; set bar(int val) =&gt; _bar = val; } Just do: class Foo { int bar = 0; } In Dart, fields and computed properties are completely interchangeable, so the thing you do in Java and C# where you speculatively hide every field behind a getter/setter pair isn't needed. 
Null safety main point is exactly the compiler's error that Dart doesn't do.....
&gt; While I love both languages, I think they are not so different in terms of features They're hugely different - null safety - data classes - sealed classes And there's plenty of other differences, but the lack of these three basic features are why Dart as a language is not feasible for me.
One I am learning Dart on
After this I'm going to flutter
Phuuu I'm really glad to hear that and hope the best!
Dart's syntax was intentionally designed to be comfortable for Java programmers so they could pick it up with as little effort as possible. 
Interesting. As co-creator of PicoContainer (the first general purpose constructor injection container for java - still used in JetBrains IDEs?), I’m always interested in new DI containers. Angel appears to support arbitrary hierarchies of parent/child containers which is exciting. 
Erm, not sure if this is good, but the best I could come up with :) &amp;#x200B; A Future is like a dog fetching a newspaper. &amp;#x200B; 1. You tell the Dog to fetch the Newspaper, but the good boy cannot give it to you right away. He must go out and fetch it from the front step! 2. The good boy will attempt to retrieve the Newspaper for you. If all goes as planned, he will retrieve the newspaper and give it to you. 3. If he gets distracted by a birdie, he will fail to get the newspaper, and you will hear a lot of barking, indicating your plan has failed. &amp;#x200B; Now, each step in terms of Dart Futures: &amp;#x200B; 1. You tell Dart (the dog) to go fetch some information (the newspaper) for you. Maybe this information will come from from a Web server or a Database -- in any case, Dart does not have the info and needs to go get it for you. This is generally done by creating a Future! 2. Dart will attempt to go out and fetch this information! If it succeeds, it will "resolve" or "complete" the Future and you can Read the Newspaper. 3. If it fails, Dart will "reject" the Future or "complete the Future with an error" and you must figure out what to do at that point -- Go get the paper yourself (retry) or just live without it (display an error to the user). &amp;#x200B; Hah, I had a bit of fun, but I'm not sure it's helpful. Please let me know!
First, `Future` is not actually a keyword. It's a class from Dart's async library, though it does enjoy some explicit support in the language. Synchronous functions return a value as soon as they're finished executing, and they block the main thread while they're doing their work. Even `void` functions return `null`. Asynchronous functions (those marked with `async`) sometimes return a Future instead of a value. This is essentially a promise to provide a value later, usually because the value isn't immediately available. Likely, the async function needs to make a network call that takes time to complete. When the value does become available, the function completes the Future, and now the calling code can access it. The purpose is to avoid blocking the main thread of execution while waiting on asynchronous operations. While you wait, your code continues to execute, and the user interface is still responsive. Once the Future completes, your code is notified and jumps back on it.
The way I see it, a `Future` instance is just “a placeholder that will hold a value at some point.” That “some point” is not known at compile time, nor even at runtime, until it happens. So, you call `then` with some callback/action that should be performed at “some point.” The async/await keywords can be thought of as a syntactic sugar (they’re not really, because `await` defers the current action). But basically, if you tell Dart to await some future, then it will tell the current task to pause, until “some point.” As you can see, “some point” is unpredictable, so things like I/O use Future. You don’t know at compile time, or even at runtime, exactly how long it will take to open a file.
Haha that actually really helped me a lot thanks! Thanks for taking your time to explain to a newb at Dart. Just started looking into flutter.io since my boss was talking about it in a meeting.
I strongly suggest you go to dartpad, and just use it , over and over, write the examples over and over till it clicks finally. If you have IntelliJ use that instead of dartpad. &amp;#x200B; Believe or not, I wrote C &amp; ASM bios drivers in 1990s, it took me a solid week to have it click. Seriously simple, but I do feel for you on this one. &amp;#x200B; P.S. No, unless you pay me a lot im not writing some opensource arm drivers for me. Its a common request, its not fun for me to write at all , i wrote my share.
It all makes sense now. I was wondering what the exact purpose was.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/flutterdev] [Use custom DNS server for HTTP requests?](https://www.reddit.com/r/FlutterDev/comments/ab2yck/use_custom_dns_server_for_http_requests/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
AFAIK the dns requests are are always resolved by the operating system. I think you would need to change them there but I dont think there is a common way to change them programatically. One idea I do have though is that you could manually query the dns server you want to use and then make the request to the resolved ip address. For this you would need to take a brief look into the DNS protocol and also it would mess up https in case you are using that.
There probably are libraries in your language of choice for querying dns servers but i have never done it though
I am using https, but maybe I can somehow disable certificate validation. In "native" Android development with Java/Kotlin, the OkHttp library has a DNS setting. I guess I could look at that code and see what they're doing - they have full https functionality. Thanks for the detailed comment.
You're welcome. Good luck my friend!
Yup soon!
Awesome! I'm glad others are considering Dart &amp; React, even though AngularDart is the more popular choice. I've also written about using React with Dart. Here's a pretty detailed tutorial creating a todo list application: [https://www.leejamesrobinson.com/blog/getting-started-with-dart-and-react/](https://www.leejamesrobinson.com/blog/getting-started-with-dart-and-react/)
That's great. I have also recorded part 3 demonstrating the **react** package. Will be uploaded in the next couple of weeks.
"considered" . There's whole over_react package with better dart bindings for react
That's exactly what my blog post is using.
I checked now, yep, you're right. It would be good to update that post since dartium is deprecated, there are also new commands etc. It would be also interesting to see react with BLoC
The over\_react package surely has better bindings, but it's not compatible with Dart 2 at the moment. When it is, I'll make a video on it :)
React with BLoC coming up...
No surprise there. The backlash from companies that spent millions developing their apps would have been seriously damaging.
Did really someone think that the only supported way to write Fuchsia Apps would be Flutter?
No did not. But even with this news there are some on Reddit saying it is not true. There is a decent amount of circlejerk around Google on Reddit.
did you just add a couple of sections after isograms or did you modify anything else? &amp;#x200B;
Added a few lessons, yeah, and made a few small corrections to existing lessons. No major modifications to existing content.
just finished reading the latest 2. thank you!
https://www.dartlang.org/guides/language/language-tour
How about that one YouTube sieres by Smartherd? https://www.youtube.com/playlist?list=PLlxmoA0rQ-LyHW9voBdNo4gEEIh0SjG-q
I'm teaching subscribers to build full-stack applications with Dart on my \[YouTube channel\]([https://youtube.com/c/CreativeBracket](https://youtube.com/c/CreativeBracket)). Check it out and let me know what you think. 
Ok is it done yet or in progress? 
Neither. I release videos every week covering an aspect of full-stack. So far I have content such as: * Building a RESTful API with Aqueduct and PostgreSQL * Using JavaScript libraries in Dart applications * Learn Dart in 30 seconds series The videos are free to watch.
Ok I will check them out. Currently leading dart of the Smartherd sieres.
If you're already familiar with Java, C#, or JavaScript, then just look at [this hour and half long video](https://youtu.be/OLjyCy-7U2U) and take some notes to follow along. Then practice writing it while looking at the Dart documentation.
Isn't that Dart 1.0 though?
its pretty good, i followed it. He explains things pretty well. Currently following his flutter series and its good too.
Ok will do I'm going follow the videos and then try to bootcamp
I'd say someone paid $15 to make a fart pun.
if you have never programmed anything before, that sounds good. If you have basic knowledge, do the bootcamp first. that way you dont have to pause the video every minute, you'll have a basic idea of whats going on.
I have experience in Python and C++
Then definitely do the bootcamp first. It's short but pretty good.
Ok I'll do that
Solid investment if you ask me 
I dunno. It's too easy and obviously to be clever. I applaud the attempt at levity, but this is just lazy comedy, if you ask me.
$12! Canadian! It's a discount fart pun! Someone said this was easy/lazy, and [I wholeheartedly agree](https://i.imgur.com/gDXNXf1.png) but I just couldn't help myself after seeing it typo'd by a coworker
Java and Erlang, yes are quite different. But the two languages that are so closely related to Java simply cant be totally different. Kotlin introduced a lot of overwhelming syntactic sugar (inspired by Groovy and Scala). Sugar is not always good for your health. In particular, instead of getting the job done, you may start play with all these "pseudo-features" - it will only consume your time, without any benefit to anyone, including yourself.
The article misses the most important point about Dart and Flutter. Dart can be interpreted so it can be loaded fast and changes in the source code can be loaded without loosing the current state (faster development cycles), but it also can be compiled (AOT) thus making production builds faster. 
Yeah, the article's author doesn't seem particularly well educated about Dart and its history. Google never stopped paying attention to Dart. It only stopped talking about it outside Google for a while. And AdSense is far from the only big Google app written with Dart. Google projects have millions of lines of Dart code in production, including AdWords, Google Fiber, and even Google's own internal CMS. &gt;While the development team behind Flutter and Dart... This statement is misleading, too. The Flutter and Dart teams are quite separate. Flutter was developed by members of the Chrome team and they considered a dozen languages before settling on using Dart.
As soon as Kotlin or TS comes out with something similar to Flutter the adoption will fallback to where it was before. Kotlin native has much more potential in my opinion to become the! x-platform language TS has a much better JS interop and Kotlin is a much cooler language in general. Dart is nice but it has nothing special except, now, Flutter. 
Well, sometimes a platform / killer app is all you need, despite having maybe a language which has less features than other. Do you expect something like Flutter to exist? Something like ionic, which uses typescript can maybe be seen as similar, but by far doesn't have the uptake Flutter is already getting
This will be such a game changer!
Can't wait to try package:duvet!
Sure - that's true. Maybe Flutter is the key for Dart but in my opinion the Dart Team made so many wrong decisions in the past that I'm quite sceptic for the future. Writing/Learning more TS and Kotlin is a save investment into the future. Dart is more risky...
I just saw this message: [https://groups.google.com/a/dartlang.org/forum/#!topic/misc/dpUkC2ZMTBo](https://groups.google.com/a/dartlang.org/forum/#!topic/misc/dpUkC2ZMTBo) (Dart2ES6) if that's really true this will have much more impact than Flutter... I cross my fingers and hope the best.
Phuu - really good news. I hope!!!! they do this job right and Dart produces readable ES6 code that integrates well with Node and TS.
&gt; means that calling `int` methods requires an additional cast fwiw you don't really need an additional cast - as you can call any method on `dynamic`. You would not get any completion or static type checking - but call itself would succeed. 
Probably not with TS
Interesting indeed, but what's the big benefit here, and why do you think the impact is bigger than Flutter?
Probably not but it would be cool if Dart could write d.ts files by default. This would make it much easier to reuse JS libs written in Dart. Producing readable JS code (ES6) is one step but reusing those libs with JS or TS is another must. Reusing means there must be a way to publish type-infos with the generated ES6 code.
Of course, nothing in that announcement indicates that it will produce easily readable code. It still might be compact, highly optimized JS.
If the language being compiled from is statically-typed, why would one want to compile to another *statically-typed* language? Just curious to know more. I'm assuming the idea here is to write your app enforcing Dart conventions and the generated es6 code shouldn't be modified directly. 
If the language being compiled from is statically-typed, why would one want to compile to another *statically-typed* language? Just curious to know more. I'm assuming the idea here is to write your app enforcing Dart conventions and the generated es6 code shouldn't be modified directly. 
Hey, author here. I am happy to answer any questions dartisans might have!
Sad but true.
Assume you write a lib in Dart and compile it to JS. Someone else should be able to use this JS! lib. Don't forget - Dart (community, code...) is a minority. Reuse outside the Dart-world must be as easy as possible and part of the reuse-universe are type infos. JS can't store types and for this Dart should be either compile directly to TS (which is an illusion - I know) or at least store type-infos in d.ts files. If Dart want's to dictate how it must be used it will fail. This is one of the reasons why Dart is where it is. If you compare it with TS, Dart has nothing to offer, it is a nice language but thats it - and this is not enough these days. So why should one use Dart instead of TS. I think the key is integration, tooling and easy of use outside the Dart world. &amp;#x200B;
Ok, so not fully Dart code to TS, but rather the type information for whatever Dart code is being translated to JS.
Yup! This would be great.
hey, any plans targeting graalvm? technically is it possible to interop with golang?
&gt;any plans targeting graalvm? &amp;#x200B; No plans targeting graalvm - we are quite satisfied with what we have going. &amp;#x200B; It might be cool to try it though - but I don't think we have resources for that. &amp;#x200B; &gt;technically is it possible to interop with golang? Yes, somebody has tried that - to write an extension for Dart VM in Go. See here: [https://github.com/zsxawerdu/go-dart-extension](https://github.com/zsxawerdu/go-dart-extension) &amp;#x200B; With upcoming C FFI this might become even easier. &amp;#x200B; &amp;#x200B; &amp;#x200B;
Add an analysis_options.yaml in your project root with the following: analyzer: strong-mode: implicit-casts: false Oftentimes I wish this were the default. I do this in every one of my Dart projects - it finds these bugs during dev time
Is there any sort of issue/tracker/repo we can watch related to the FFI?
Watch this one [https://github.com/dart-lang/sdk/issues/34452](https://github.com/dart-lang/sdk/issues/34452) \- the first prototype will start landing this quarter.
Will do, thanks 
Great read and looking forward to the sections still in progress. Hope update us when completed
my reason why i haven't updated the git repo. I did manage to get go-chi router running in the backend and serving up dart content. FFI is the best way to go. 
Thanks for your input, I've added the files analysis\_options.yaml in both of my package root and my project root. It doesn't seem to change anything. From what I read in the doc, implicit-casts : false and implicit-dynamic: false are both used to make the type check stronger. &amp;#x200B;
just a thought here, but if vm runs kernel binary, nothing in the world is stopping someone take another language and compile it to a "dill" ? EDIT: And take the binary dill and push out .NET IL code. &amp;#x200B; Everything seems hot replaceable.
The changes will not fix the problem, they will allow the analyzer to help find them. Are you using an editor?
Check out https://github.com/thosakwe/bullseye (the testcases dir is more accurate than the example dir) Still in the early stages, but you can absolutely produce your own dill As for emitting.NET IL, etc, Dart kernel files do seem pretty high level (most nodes correspond to Dart AST nodes), so you might have a little more work to do, depending on the target you intend to compile to. (correct me if I’m wrong here)
I just started a new beginner video series on this. If focuses on teaching the Dart language features with simple examples. [https://www.youtube.com/playlist?list=PLNnAcB93JKV\_R1aZc7ZbQRsiEyeDLUpE-](https://www.youtube.com/playlist?list=PLNnAcB93JKV_R1aZc7ZbQRsiEyeDLUpE-) I will upload upcoming videos weekly on Fridays. Hope this is useful.
Ah alright, yes I'm using Atom with the Dart package, I haven't realized though but yes it works. My bad.
Blog post: https://medium.com/flutter-community/kt-dart-better-collections-for-your-flutter-business-logic-41886ab7883?fbclid=IwAR1n-62Ieo121t-mxH4HD5IJAixNEG1e2_0TMNymS5GsJac6lPGLH7njaQk
Do we really need 5000 of these
The more, the merrier, I say!
I assume you mean taking input from the command line? It's not too bad: import 'dart:io'; void main() { stdout.write("What's your name? "); var name = stdin.readLineSync(); print("Hi, $name!"); } 
Ahhh see I'm learning it form the dart bootcamp and it doesn't go over this at all
Thanks 
The link took me to a blank page
Yeah, that's not the full link the OP posted. The tutorial engine needs a parameter to load a course. Try this one: https://da-bootcamp.firebaseapp.com/?course=start_programming_dart
As usual, there are lots of ways you could go about this. Here's one example: void main() { int beers = 99; do { if (beers == 1) { print("$beers bottle of beer on the wall, $beers bottle of beer."); } else { print("$beers bottles of beer on the wall, $beers bottles of beer."); } print("You take one down, pass it around... "); beers--; if (beers == 1) { print("$beers bottle of beer on the wall.\n"); } else { print("$beers bottles of beer on the wall.\n"); } } while (beers &gt; 0); } Now, this is an overly verbose way to do it. Definitely not the most elegant approach. If it were a serious program, I'd use a function to determine if each instance of the word "bottle" should be plural or not, and that would really cut down on the amount of code required, but you haven't learned about functions by Lesson 15. :)
That's because you can't import `dart:io` in DartPad. It's not currently possible to take command-line input with DartPad. You'd have to use HTML.
I like the idea of the Ternary operator, ?: print("$beers ${(beers==1) ? "bottle" : "bottles"} of beer on the wall.\\n"); &amp;#x200B; [https://www.dartlang.org/guides/language/language-tour#conditional-expressions](https://www.dartlang.org/guides/language/language-tour#conditional-expressions)
Or print(“$beers bottle${beers &gt; 1 ? “s” : “”} of beer on the wall.\n”);
I completely agree. Semicolons make code look messy and unorganized. I especially like how Swift does it, the code looks very professional and I hope someday Dart can pick it up.
There's over a year of discussion on this [over here](https://github.com/dart-lang/sdk/issues/30347), including proposals for [optional semicolons](https://github.com/dart-lang/language/pull/73).
I personally got exposed to the lack of semicolons in python thought it was nice but I missed my braces a little bit. I just now looked at some Swift code out of curiosity and thought they had an elegant solution! We should copy.
Very nice thank you sir/ma'am!
Yeah, I've sunk a lot of time into figuring out how to do this over the past few months. It *is* doable, but it's pretty complex, more complex than it is in most other languages. Kotlin, Scala, and Swift were designed around optional semicolons from day one. Go wasn't, but was explicitly designed to have a really simple grammar which made it easy to retrofit optional semicolons. Dart, alas, has neither of those luxuries. The original language designers took JavaScript, pumped a bunch of Java in there, including C-style declaration syntax, and then avoided actually reserving any keywords. The result is that there are a lot of nasty edge cases that get ambiguous if you make semicolons optional. It's tractable, I think, but it's not going to be anywhere near as simple as it would be in other languages.
Makes sense. I saw you were very active on the GitHub issue.
I agree with you but sometimes pythons whitespace solution can cause problems 
How about Swift?
Yeah ik do you recommend any other learning platform 
That was my idea was but I was trying to follow the guidelines. I skipped that problem untill I got past functions. 
Hey, PORTUGESE-MAN-O-WAR, just a quick heads-up: **untill** is actually spelled **until**. You can remember it by **one l at the end**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
Hey BooCMB, just a quick heads up: I learnt quite a lot from the bot. Though it's mnemonics are useless, and 'one lot' is it's most useful one, it's just here to help. This is like screaming at someone for trying to rescue kittens, because they annoyed you while doing that. (But really CMB get some quiality mnemonics) I do agree with your idea of holding reddit for hostage by spambots though, while it might be a bit ineffective. Have a nice day!
Thank you all for the help! 
Never looked at it 
&gt;The original language designers took JavaScript, pumped a bunch of Java in there, including C-style declaration syntax, and then avoided actually reserving any keywords. For some reason I love this description...
What are the main problems of Python's whitespace style?
Sometimes if you miss a place a whitespace sometimes it doesn't work right
I think you should try building a web app. You can have an input tag which makes a request to fetch auto-suggestions in real-time. 
What's one of the nasty edge cases? Just curious! 
Thank you. That's a very good idea. I'll try it out.
I think the Boot Camp is a great way to learn the very basics, and it will get even better with a little help from the DartPad devs. (Disclaimer: I'm the author of the Boot Camp.) There are tons of video tutorials for Dart basics these days, since the dawn of Flutter. The Boot Camp is inspired by the book "Dart for Absolute Beginners," but that book is pretty outdated at this point, which can be difficult to deal with if you truly are a beginner. I'll be adding more content to the Boot Camp as regularly as I'm able, so stay tuned!
I started off in Python and am learning Dart to program for Google's new Fuschia OS. I will probably just do the language tour now. 
Here's a couple: import 'foo.dart' hide bar Presumably, the author intends that to be a `hide` clause on the `import` directive. But `hide` isn't a reserved word, so technically it could be a type and the second line could be declaring a variable `bar` of type `hide`. main() { someVeryLongIdentifier.anotherVeryLongOne andAThirdVeryLongIdentifier } This could be two statement expressions, the first a getter call and the second a getter or variable access. Or it could be declaring a variable `andAThirdVeryLongIdentifier` of type `anotherVeryLongOne` which was imported from another library with prefix `someVeryLongIdentifier`. Or: main() { someVeryLongIdentifier.anotherVeryLongOne someFunctionName() { ... } } Is `someVeryLongIdentifier.anotherVeryLongOne` a getter call, or is it just the return type of the following local function? All of this stems from using C-style declaration syntax instead of having a keyword for a variable. Which Dart *also* does (`var` and `final`). Except that `final` can also be used like a modifier, which causes its own problems. 
That's amazing. So subtle and so difficult. Thanks! 
Python runs on your computer or your server. It can access everything your account can. Dart in Dartpad runs in the browser. What do you expect "[dart.io](https://dart.io)" to access? Your whole computer? The whole server it's hosted on? Dartpad can only access what the browser allows it to.
Personally, I don't think getting rid of semicolons is worth all the effort. Of all the things the Dart team could be working on to improve the language, optional semicolons is way down at the bottom of my list.
It would be fantastic, for sure, if DartPad could provide some means of accepting user input, and being able to import non-core packages would be awesome, as well. In my view, a better DartPad would help increase language adoption since it would make it so much easier to teach conveniently.
Suggestions welcome: https://github.com/dart-lang/dart-pad/issues :)
I read in another post of yours, first of all let say THANK YOU! And please add some more content. Let's hope that dartpad will be a little bit more useful.
I'm glad you like it, and I hope it's helped you. You should start a campaign to convince Google to pay me to write more Dart training material, eh? That would speed it up! Haha... As it stands, I will keep trying to add more whenever I get a rare bit of free time. :D
This is my way of concincing them, I am just a person but if they want some some feedback from your work, i think they got it, note that i wrote with capital lettere thank you, that should tell google more than enough :P. Jokes asside, if it is a side project i can imagine the struggle to find time and motivation to work in it, if it does not bring incomes i mean. 
Yeah. I am dreaming of a data class with copy on update.
Complete toss-up whether it’s wise or unwise. If you’re planning to be employed using this know-how, it might be unwise. If you’re just into it for making things for yourself, it should be fine. 
I can second this. I think it’s also important to add that you’ll learn a lot of concepts that’ll carry over to other languages like Java and JavaScript.
If you are looking for stepping stones to industrial languages, it should be Javascript or Java, but it is not impossible to study Dart and Javascript in parallel. Also, when I need a big company's API, there is no dart in it, only things like Python, Node.js and Java; that is, commercial support. 
&gt; Also, when I need a big company's API, there is no dart in it, That’s a good point. I don’t think google supports dart for cloud functions. If you’re building a mobile/web app you’ll probably want a service you call to keep complex queries from happening client side.
I actually only think this is true if you're trying to be employed as quickly as possible, in which case you might need to spend your time learning a language in wider use. Otherwise, I believe Dart is great language for learning programming concepts for the first time.
I believe Dart is a truly great first language. Unlike some languages (JavaScript especially), Dart isn't full of quirks and surprises that make learning the concepts difficult. Check out my [short article](https://dart.academy/dart-academy-boot-camp-start-programming-with-dart/) on the subject.
For personal use I think it's a great language. It's more strict than JavaScript so it's more predictable and forces better coding but more forgiving than Java. Web may change in the future with project hummingbird but we don't know many details yet though. But for mobile it's pretty solid. 
learning dart won't make you employable (at this point), but it will be easy to transition to most languages from it. it has syntax familiar to most languages but doesn't have many exotic features that don't exist elsewhere so you won't miss much. 
I just watched this yesterday, thought it was quite good: [https://www.youtube.com/watch?v=Jji05a2GV\_s](https://www.youtube.com/watch?v=Jji05a2GV_s)
Not a bad idea. It is a pretty easy language to pick up. Plus I am older and seen a lot of tech come and go and rarely see something with as much momentum this early as Flutter. Dart is the language that goes with Flutter. Flutter already has 50k stars on GitHub.
 Hi, all depends on your personal interest and what motivates you really and maybe what you envisage your apps doing, e.g. if your find the animation side interesting (as I certainly do for my hobby app) then dart/Flutter are looking like a really enticing area to delve into. If you really think web site would be primary interest for you then JavaScript (plus react native for app side) is probably the right direction (at least initially).
If you can bear with my English, I did presentation about built_value and other builders https://skillsmatter.com/skillscasts/12266-flutterldn-october you need to register thought.. Examples from presentation are here https://github.com/charafau/built_value_examples
Really wish something like data class built into the language instead of using thrid party package for creating the value classes.
If only I could use ed25519 :/ Non the less great work! 
there is an issue in dart-sdk repo for that - upvote please 
Do you work at jetbrains or google? Your dart boot camp is getting better. ;)
I do not work at Google or JetBrains, nope. I just do that stuff in my free time, which is why it goes so slowly. ;)
One suggestion at functions, passing variables into functions and returning values.
Definitely glad to get feedback, but I'm a bit confused about what you're suggesting here. Lessons 18-20 deal with those very things.
You are correct, I am wrong. Sorry!
At the top level of the file, you can do: final _ptMap = { 1: [1, 2, 3, 4, 5, 6], 2: [1, 1, 1, 1, 1, 1] } (Dart doesn't require everything to be inside a class like Java does.) If you want it inside a class: class SomeClass { static final _ptMap = { 1: [1, 2, 3, 4, 5, 6], 2: [1, 1, 1, 1, 1, 1] } } The underscore at the beginning of the name makes it private. 
Thank you. &amp;#x200B; Any way to ensure type safety i.e not allow final \_ptMap = { 1: \[1, 2, 3, 4, 5, 6\], "test": \[1, 1, 1, 1, 1, "string"\] }; or is dart more like javascript instead of java
 static final Map&lt;int, List&lt;int&gt;&gt; _ptMap = ... 
&gt;awesome, thx &amp;#x200B;
Merry cake day
Thanks! I didn't even notice that.
Nice article. Thanks for writing it!
I didn't write it, but I'm glad you like it. :)
If in field, variable declarations you also initialize them with literals Dart can infere the types. In this case you dont need them. Dart tries to be shorter, intuitive and neat
I got it. It's simply List lines = [...];
You can initialize an empty array of arrays with: `List&lt;List&lt;int&gt;&gt; lines = new List();` But if you only type: `List&lt;List&lt;int&gt;&gt; lines;` You will get an error
That makes sense. Thanks! Oh wait, now that I have you, I'd like to ask another question. I'm trying to mutate a list to filter out X's moves from O's moves (I'm sure you'd guess that I'm creating a tic tac toe app). Is there any way to do this? I know I can achieve a similar function as javascript's array.filter() by using **retainWhere(test)**, but it's altering the main List, not the mutated one. Any way around this?
I'm assuming you're doing something like `List lines2 = lines`? Then any alterations you make are on both lists. I'm unsure but you should be able to something like `List lines2 = new List.from(lines);` This *should* give you a fresh copy of the list which you can mutate without mutating the original
Hey that worked! Thanks!
If you initialize the list with values in the declaration you don\`t need to specify types, Dart can infer them for you. This form is valid, but is an ummodifiable list, use "var" keyboard if you want a modifiable list const lines = \[ \[0, 1, 2\], \[3, 4, 5\], \[6, 7, 8\], \[0, 3, 6\], \[1, 4, 7\], \[2, 5, 8\], \[0, 4, 8\], \[2, 4, 6\], \]; Another forms const lines = &lt;List&lt;int&gt;&gt;\[\]; List&lt;List&lt;int&gt;&gt; lines = \[\]; &amp;#x200B; I dont know what is your real intention
What you have works in Dart too, except that in Dart `const` creates a *compile-time* constant list where in JavaScript, `const` just means "can't reassign the variable". The corresponding concept in Dart (like in Java) is `final`: final lines = [ [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6], ]; &gt; but it's altering the main List, not the mutated one. The easiest way to copy a list is to call `toList()` on the original one: var copy = lines.toList(); copy.retainWhere((e) =&gt; ...); 
No worries! 
Just popping in to say: the \`where\` method is probably what you're looking for! \`where\` = \`filter\` where it won't mutate the original list.
Heyo. Are you referring to the ‘retain’ method? Or when instantiating?
Yeap. That does look easier. Thanks!
Oh, meant to say: There are two methods for filtering lists: \`retainWhere\` and \`where\`. The first mutates the list, the second does not. So, for your example, you could have something like this: \`\`\` final original = \[\[1, 2, 3\], \[4, 5, 6\], \[7, 8\]\]; final filtered = original.where((innerList) =&gt; innerList.length &gt; 2).toList(); &amp;#x200B; print(original); // prints \[\[1, 2, 3\], \[4, 5, 6\], \[7, 8\]\] print(filtered); // prints \[\[1, 2, 3\], \[4, 5, 6\]\] \`\`\`
This works as well. Thank you!
put commas at the end and it will always wrap to next line
Seems the simplest solution is the one most often overlooked, thanks!
Note that the `new` keyword is actually optional in Dart 2.
Or, when can it be more advantageous to do so than not? 
With the caveat that there may be some reason I don't know about: Isn't it always best to declare types if you can?
What exactly do you mean? Do you mean the difference between something like `var thing = someMethod();` and `Thing thing = someMethod();`?
Check out this thorough treatment of [best practices for Dart types](https://www.dartlang.org/guides/language/effective-dart/design#types).
Quick clarifier: if you're coming from a java background, note that dart handles privacy different to most other language in that private variables are package-private, not instance-private - so you can do class SomeClass { static final _ptMap = { 1: [1, 2, 3, 4, 5, 6], 2: [1, 1, 1, 1, 1, 1] }; } def main() { var obj = SomeClass(); print(obj._ptMap[1]); // no error } You won't be able to access it from outside the package though.
No you shouldn't get into trouble. The advantage is to only have to declare the type on either the left or right hand side of the equation but not both.
Dart is also a strongly typed language, so you'll feel right at home. This is true whether or not you write the type of your local variable, as long as it has an initializer: int i = 3; // i has type int. var j = 3; // j also has type int. Sometimes inference isn't able to fill in a type for you, like in the obvious case of: var k; // Nothing to infer from. By default, Dart fills in the special "dynamic" type for that. We're working on adding a check to make that an error instead because many users don't like dynamic silently appearing in their code. But, either way, you won't run into trouble if you always declare your variables, and you won't run into trouble if you don't declare them in places where inference fills it in for you. In practice, most users prefer to omit the types when inference lets them.
thanks!
helpful - thanks!
yes, it's ably answered now, thank you
Just always use var 
No problema
What is the class's name supposed to be? `Ex` or `dep`? Since classes are customarily capitalized, let's assume the class is `Ex`. This is how you'd do it: class dep implements Exception { }
Supposed to be dep 
Edited! ;)
Thanks! I did that and it worked!
thanks, but that really doesn't answer the question
editorconfig
For declaration of variable type 
The whole build\_xxx is a mess and is way too complicated. Instead of implementing these things into the language they leave it to the user and to external packages to solve the problem. data-classes, annotation support... this should be part of the language! If you looked at the YT-video mentioned in this thread you see that the effort that is necessary for a data class. Compare it with e.g. Kotlin...
Instead of providing such packages the functionality should be part of the language
Hmmm, who made this poll? Dart by far ahead of Kotlin, JS, Java... looks not very reputable
It's not necessarily disreputable, though there were only about 1000 respondents. Even the pollsters were quite surprised by the results. Flutter has made Dart look shiny and new, while Kotlin and JS don't have that distinction this year. When Kotlin was first released, and again when Google officially adopted it for Android dev, Kotlin scored high on these kinds of polls, too.
Not surprised. Thought this would happen. Does seem a bit early. Was thinking more next year or later this year. 
&gt; It's not necessarily disreputable I wouldn't be so sure. It has Rust at two different positions. Who knows what 'post-processing' went into this
Sloppy, for sure, but hardly evidence of nefarious purpose.
Dart to me is in the same learning category as modern C# or Java or Swift. I’m not sure Flutter/Dart is what you are looking for, the advantages are cross-platform mobile dev and fast 2D UI but you didn’t mention interest in those areas. If your goal really is more aimed at a teaching a group of non-technical to get into development, aiming for something like html/JavaScript maybe more suitable to start with.
Actually, cross-platform mobile dev is exactly, what I'm interested in. And I wanted to avoid plain HTML and JS, because of the quirks in both of those languages. I believe, that teaching someone, they need to do something, because "that's how language works" or "for historical reasons" is like teaching people magic. There is no reason, for example, to bind a method in constructor in JS other than something breaks sometimes if I don't. Of course there is always a technical reason that makes a lot of sense, but that's not something I want to explain to someone, who just learned to make two variables and add them together. It's reassuring, that you put it on par with Java, because it was one of the options I was also considering. However I was afraid that the rigid object model, full of factories, manager and runners might be too intimidating to someone, who is just starting. I'm aware, that Dart, as an OO language, is not really much different, but I hope that the small differences add up to something significant. Kotlin was also an option, but I found it too "esoteric" for a complete beginner, since it solves problems that someone starting out wouldn't even know why they need solving. The main reason why I believe Dart to be above those three languages you mention is Flutter, which I find to be the superior framework for "native looking" cross-platform development when it comes to development time (I haven't used any mobile framework before, so I'm only going by the word of others). Maybe if Flutter had native bindings for C# or Swift, I would reconsider, but I need to use it for a while to really decide which I prefer. I simply believe that the path from "starting out from absolute zero" to "creating useful apps and adding features" is shortest through Flutter with Dart. I hope practice proves me right.
what have you tried so far, and what are you having problems with? 
Dart is a script-y version of Java that isn't Javascript.
The more languages you learn, the more they're all the same. But they all have their nuances and idiomatic patterns, and those are the things you pay attention to.
I actually wrote about [Dart as a first language](https://dart.academy/dart-academy-boot-camp-start-programming-with-dart/). You might find it interesting.
I hope it goes well for you. Just a note - gauge not gouge - next to last paragraph. Very different meanings but maybe it was a spell check or autocorrect issue. It's a word the English picked up from the French. I find those really mess with non-native speakers. I was in NetSuite training last week in Bucharest and almost no one could say Suite correctly. They can make the sounds, it's just their brain fights them when it sees the spelling. Good luck - I hope it goes well for everyone involved.
Hey, I don't know if this is still relevant to you, but I'll just say that RxDart is actually very much based on standard Dart streams. RxDart main abstractions are just extensions of standard Dart classes: `Observable` extends `Stream` `Subject` extends `Stream` , `StreamController` This is different from Rx implementations for other languages (RxJava, for instance), where Observable introduces a completely new API, and probably requires a new way of thinking about the code. So, no matter if you choose to use RxDart or just standard Dart streams, this won't affect the architecture of your application much. RxDart just gives you some convenient methods for constructing, composing and listening to your streams, but apart from that it doesn't introduce any new concepts. You can start with standard streams and look through the documentation of RxDart. If you find something that you need, you can substitute all of your Streams with Observables easily, because they share the same interface. Hope this helps.
The syntax is very similar but i also saw in dart a syntax like .. instead of the regular . I cant use dart:html for some reason Is there any reason string is capital but int isnt Does dart have something like this https://dlang.org/articles/cpptod.html
have you even looked at the official language tour?
I don't know of any resources specifically aimed at C++ devs, but most of my early career was C++, and now I'm a full-time Dart dev. I'd be happy to answer specific questions you might have, though the official [language tour](https://www.dartlang.org/guides/language/language-tour) should be of interest to you, as well. The [cascade operator](https://news.dartlang.org/2012/02/method-cascades-in-dart-posted-by-gilad.html) (`..`) is a great bit of syntactic sugar that helps keep your code terse and readable. You mentioned you "can't use `dart:html`." Is that a question? Maybe some more details on that could help us help you. The reason `String` is capital is because, like everything else in Dart, strings are objects, so it's essentially the name of a type or class, which are conventionally capitalized. The real question is, "Why are types like `int` and `bool` not capitalized? And the reason is entirely for familiarity. Languages like C++ have primitive types, conventionally lowercase. Dart does not have primitive types, but the decision was made early on to make as much of the language familiar to users of other languages as possible, thus this odd discrepancy. Anyway...hope this helps! As I mentioned, I'm glad to answer any other questions for you as they come up.
I get the error Error: Not found: 'dart:html' Although i can import anything else 
It's not possible to import that library in a Dart console app or a Flutter mobile app. Does that seem like the issue, maybe?
Yes, i thought it would still work as long as i dont use any browser specific features.
Nope. That whole library makes no sense outside the browser context, so it's just not there.
To answer your questions, .. is used to go back to the base class. Take for instance: &gt;main(List&lt;String&gt; arguments) { final foo = Foo(); foo ..bar() ..bar() ..bar(); } class Foo { void bar() { print('bar'); } &gt; &gt;} It is called cascade notation. It makes it so you don't have to repeat yourself saying 'foo' over and over again. &gt; I cant use dart:html for some reason What is the error? Can it not be found? Did you use stagehand to create the project? &gt; Is there any reason string is capital but int isnt As with most (all?) languages, String is an object. It is not a primitive, like int, or num is. A String is an array of char's with methods to manipulate it, Dart just chooses to specify that String is in fact an object, even if it's treated like a primitive.
For ints it is just stdin.readByteSync(); right?
No, that reads a single byte of input as an unencoded byte. If you want to read the string "123" as the number 123, then you'll need to read it as a string and then parse it to an integer. Something like: stdout.write("Enter a number: "); var string = stdin.readLineSync(); var number = int.tryParse(string); if (number == null) { print("That's not a valid integer. :("); } else { var square = number * number; print("The square of your number is $square!"); }
Thanks you sloved my problem for my new Flutter app 
Sorry to revive a dead thread. I am about to do a tutorial series on Dart over on my YouTube channel. I've been waiting until dart 2.0 became more stable and I guess now is the time to do it. Many of my subscribers have been asking for it because they seem to get lost in the Flutter material. 
This tracks with the type of trends that I have been seeing on my YouTube channel. I a ton of languages but my Subs just keep asking for Flutter and Dart material. I've almost considered converting my channel into a flutter/dart channel at times since it is so popular. 
I welcome all dart tutorials/books/explainers. I found lots for flutter, but few for dart. I think flutter would make a lot more sense to me if I knew dart well enough. thank you.
If you want to make it so that parenthesis get their own line, the best way I've found is to use commas. I know there is probably a setting you can use in the editor config files, but this has just become a habit for me personally. 
You don't need the new keyword. 
It's inferred if you omit it, but no you don't NEED it
Dart has `where` instead of `filter` but it still has `map` and `reduce` along with a few others like `forEach` etc. 
Very nice. Its a tough topic to cover (isolates I mean). My video's on the subject have been a bit underwhelming. 
Hate to plug my own channel but I have a flutter tutorial about built_value. https://youtu.be/hNbOSSgpneI
Yeah that's the precise sentiment that many of my subscribers have when it comes to dealing with pure flutter tutorials. My hope is that by creating an intro to Dart series, beginners will be able to pick up flutter or just Dart in general and use it as their first or second language without having to know a little JS or C#/Java beforehand. 
Yeah you're right. Its a bit verbose though and I was ecstatic when they made the new and const keywords optional with dart 2. It doesn't seem like it would really do much to remove one word but especially in larger flutter programs, the amount of clutter is much easier to handle. 
Absolutely!
Always room for another Dart channel!
I try to do the stepper but all the time there is error can you give me folder have the code 
The sample code version in the book is too lower, it is hard to fix/update errors for Beginner by using current tools.
try this plugin. it support AES 128 bit cbc padding 7, and AES 128 bit GCM now &amp;#x200B; [https://pub.dartlang.org/packages/cipher2](https://pub.dartlang.org/packages/cipher2) &amp;#x200B; [https://github.com/shyandsy/cipher2](https://github.com/shyandsy/cipher2)
My channel already does flutter and some Dart (actually just started a beginner's guide for dart). 
Keep it up! And be sure to post your videos here.
Noticed that I provided the wrong GitHub link in the description of the video haha. That is corrected now with: [https://github.com/RobertBrunhage/Youtube-Tutorials/tree/master/stepper](https://github.com/RobertBrunhage/Youtube-Tutorials/tree/master/stepper)
yes, but i wouldn't worry about it anytime soon. web components aren't widely supported and haven't gained much traction for years, despite being a cool feature
Dart's support for the web, beyond angular dart, is not a priority for Google. So it this is critical, don't bank on it because it's not going to happen unless Google needs it
Web components are supported by all major browsers with the exception of Edge which has them in development.
Safari is the new IE. it only supports autonomous custom elements which is a huge breaking difference. mobile browsers are also a minefield of inconsistency and don't forget people still use out of date browsers 
In a word, no. I also doubt they'll be supported any time soon.
Have you already seen M4D? Here are some examples: [https://www.mikemitterer.at/service/diverse-live-beispiele-fuer-github-repositories/](https://www.mikemitterer.at/service/diverse-live-beispiele-fuer-github-repositories/) Links to GH and pub are on the same page. I don't use WebComponents but my own MdlComponents - check out the source: [https://github.com/MikeMitterer/m4d\_components/blob/master/lib/components/MaterialAccordion.dart](https://github.com/MikeMitterer/m4d_components/blob/master/lib/components/MaterialAccordion.dart)
End Edge is switching to a Chromium base now, so it'll soon have web components that way.
my guess is that first isnt just a single char but has the newline character in it from the readLine, try trimming it or just reading a char.
I got it figured it out and wrapped in Ina if else loop
The course I took to learn Dart never went over this 
No. About the closest I could see would be: if (!["A", "B", "C"].contains(varNameHere)) {}
Ok I will try 
BTW in Python this would be string concatenation: &gt;&gt;&gt; "a" "b" 'ab'
Yes I realize Python is my primary language
Then you are referring to pythons if x not in ('a', 'b', 'c'): # code ? This translates to a `contains` function of a collection. Also see pythons magic method `__conatains__` (https://rszalski.github.io/magicmethods/#sequence), which is called on `in` and `not in`.
Yes I am 
Haven't used that in a while thanks for the refresher. My job dictates that I don't use a lot of I/O mostly because I use Python for web development.
Hi everyone, I created this to learn Dart Web and it was quite fun doing it! It implements exactly the same functionality as the \[React Tutorial\]([https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html)) does, including time-travel... but uses no external libraries (just the Dart SDK, mostly \`dart:html\`). Here's the \[React version\]([https://codepen.io/gaearon/pen/gWWZgR?editors=0010](https://codepen.io/gaearon/pen/gWWZgR?editors=0010)). &amp;#x200B; The React code is 145 lines, while the Dart code is 262 lines... but the Dart version is not using any library (and I optimized for readability, not briefness), so I think that's still pretty good! I am thinking of writing a small library that will help implement web applications in Dart following this design (Widget-based but exposing the DOM), would be happy to hear your opinions!
Is it really necessary to install Dart and \_build\_ the app on the server? Isn't there a good way to generate a binary like for Go? I found [https://github.com/filiph/dartbin](https://github.com/filiph/dartbin) but am not sure if this is actually reliable, it seems to just wrap the byte code generated by running dart --snapshot=file.snapshot file.dart, into an actual Go program?! Would be interesting to know what options there are that I may be missing, or if DartBin is actually the right thing to use for that.
There’s no way to turn Dart into a standalone executable afaik, but you could create a .dill snapshot on your machine, and put that on your server. Either way, there’ll still be compilation happening at runtime, unless you happen to be developing on the same district that you deploy to, and can deploy an app-JIT snapshot instead of app-AIT.
Looks like dart-sass distributes the Dart VM alongside a snapshot of the application itself, as long as small bash scripts to bootstrap it. That sounds like a pretty good idea! &amp;#x200B; [https://github.com/sass/dart-sass/releases/tag/1.17.0](https://github.com/sass/dart-sass/releases/tag/1.17.0)
If you’re deploying to the server, though, you might as well just use the APT package instead of bundling the VM (because it probably wouldn’t work). Afaik the APT packages of Dart are just archives of pre-built executables that get extracted to the right places. Building the Dart VM from source takes a good amount of time, but installation via APT takes but a few seconds, which is why I’m assuming it’s just an archive.
There's the bloc pipe which is part of the [angular\_bloc](https://pub.dartlang.org/packages/angular_bloc) package.
That's exactly how I found it out! I didn't even realize it at first because it has all the same docs and texts. Only difference is each occurrence of the word Dart is replaced by Fart.
I don't think there is any official dart or flutter certificate yet. The language and framework are still quite new in the programming world Your best bet is probably an unofficial certificate from Udemy or a MOOC for taking a dart and flutter course. 
Adding to that, there is also a Flutter course by Google on Udacity..
welcome to machine floats. python has a nice rundown. [https://docs.python.org/2/tutorial/floatingpoint.html](https://docs.python.org/2/tutorial/floatingpoint.html)
Welcome to the wonderful world of floating point numbers. Perhaps you should Google for “floating point” a bit to try and understand why this happens. You can trust Dart, because most languages have a similar behaviour. Meanwhile, your problems are solved using decimal: https://pub.dartlang.org/packages/decimal
Thanks, that explained it really well.
[See here](https://floating-point-gui.de/).
Thanks!
IME the negatives are really minor; your code is infinitely more reliable at the cost of sometimes needing an assertion / extra if / etc. 
&gt;IME I've found that that a combination of constantly changing scopes and super flexible database (Firebase). It becomes too easy to change things up often, thus resulting in fields that once did exists and now might not. Javascript makes this easy to handle so it can become very difficult to tell what may (at some stage in the long forgotten past, or future) be null or not. &amp;#x200B; I know that nullable types helps reinforce this bad coding practice, but I feel its makes building MVPs and fast iteration so much simpler
Have you tried the tutorial on their website?
When you are picking the variable type just use var instead of double or string. It makes thinks a lot easier to just let Dart figure it out. Unless of course it is a function parameter then you can't. 
I was looking for more of a video series.
Certainly. You can user int.tryParse. It's basically the same, but it will return a null if the parsing fails. There is equivalent method for doubles -&gt; double.tryParse &amp;#x200B; [https://api.dartlang.org/stable/2.1.0/dart-core/int/tryParse.html](https://api.dartlang.org/stable/2.1.0/dart-core/int/tryParse.html) &amp;#x200B;
Is that a good thing? I like my variables typed to avoid mistakes but if that's the better way to code in Dart I'm fine with that.
It's really only need if you need that certain type of variable. For example String x = "Bob"; var x = "Bob"; They are the same thing. 
\[Here was the original post\]([https://www.reddit.com/r/dartlang/comments/7fjanb/getting\_started\_with\_dart\_react/](https://www.reddit.com/r/dartlang/comments/7fjanb/getting_started_with_dart_react/)).
Thank you for this! &amp;#x200B; I really enjoy writing dart and I would like to get into dart for the web. Previously I only used it for flutter and server work. This really helps me getting started. 
It'll grow on you :)
&gt;It'll grow on you Don't think so. It's more likely that we grow apart 
This is very easy with generators: ``` Iterable&lt;int&gt; everyNth(Iterable&lt;int&gt; list, int n) sync* { int i = 0; // 0 or 1, depending on your needs for(var e in list) if(i++ % n == 0) yield e; } ```
Not a fancy 1-liner, but gets the job done just right, thank you
I still refuse to believe any serious programmer would abandon a language because of it's naming conventions... Good luck finding a language that you like!
A programming language is like a kitchen knife. If it feels good in your hand you keep it - if not you buy another one. And there are many knifes out there...
Of course, but that's not the point. I doubt any mainstream language and its libraries will be tailored to your exact preferences. If you avoid a language due to such small details, you'll have to avoid an awful lot of good languages. Then again, who am I to judge? 😉
This might be faster for higher n List&lt;T&gt; everyNth&lt;T&gt;(List&lt;T&gt; list, int n) { final length = list.length; return List.generate((length / n).floor(), (i) =&gt; list[(i+1) * n]); }
Nice solution, thank you.
It's not THAT small detail - there are so many of these small or not so small details. That's the problem. I don't expect living in a prefect (programming) world but Dart always felt and still feels like a beta version. E.g. there is no debugging support for web-base applications. (OK Chrome DevTools but thats what I mean with "beta") That's for sure not a small detail. Stacktraces with x lines based in dart\_sdk.js or require.js, bad JS interop... OK I have to stop here - this post was not thought as Dart bashing. 
`import 'package:queries/collections.dart';` `main(List&lt;String&gt; args) {` `// Generate test data` `var data = &lt;String&gt;[];` `for (var i = 0; i &lt; 30; i++) {` `data.add("item${i}");` `}` `// Filter data` `var c = Collection&lt;String&gt;(data);` `var each6 = c.where$1((e, i) =&gt; i % 6 == 0);` `print(each6.asIterable());` `var each7 = c.where$1((e, i) =&gt; i % 7 == 0);` `print(each7.asIterable());` `}` ===== (item0, item6, item12, item18, item24) (item0, item7, item14, item21, item28)
I have full debugging support right inside WebStorm. Break points, watches...all of it. Not sure what you're talking about there. I use JS interop in almost every big project with great success, and for smaller projects, I almost never need it. I, too, disliked the new constant convention at first, but since my IDE styles them up anyway, I've found I don't care about that so much anymore. In any case, if I wanted to continue to use all caps, there would be nothing to stop me.
\&gt; I have full debugging support right inside WebStorm. For browser based applications???? Not VM, browser-based...
Happy to help!
AngularDart, yep. I hear VS Code does it too, but I haven't used it.
Nice blog. Did you develop the design or it's a theme.
Yep, it's open-sourced [here](https://github.com/leerob/leerob.io).
Thanks a lot for sharing.
Sorry, I was talking about browser based unit test... they are not debuggable...
Oh, I see. Yeah, I haven't tried that.
Let's say one day you ship this library: class Vector { static final zero = Vector(0, 0); final double x; final double y; Vector(this.x, this.y); } It gets wildly popular. A user says, "Hey, I'd like to make const vectors. Can you support that?" Indeed, there's nothing preventing the class from having a const constructor, you just didn't think to at the time. So you change it: class Vector { static const zero = Vector(0, 0); final double x; final double y; const Vector(this.x, this.y); } Users who want const vectors and a const zero vector can get it. Existing code using your library is still fine. If we had a different naming convention for constants, then you'd need to change the class to: class Vector { static const ZERO = Vector(0, 0); // &lt;-- final double x; final double y; const Vector(this.x, this.y); } Renaming `zero` to `ZERO` is a breaking change. So, concretely, all SCREAMING_CAPS for constants does it turn some otherwise non-breaking changes into breaking ones. There's no real benefit to compensate for that harm. 
It's hard to say "almost always" because different users have different preferences. Non-nullability, just like static types in general, *does* force you to think about nulls can and cannot flow through your program. So there is a real mental overhead to it. We'll minimize that with nice language features like smarter type promotion, but we can't totally eliminate it. If you don't care to worry null reference errors until they actually occur at runtime, this may not feel like it's worth the effort to you. But many users really seem to like the extra safety provided by non-nullable types and consider it well worth the effort. The main languages we consider to be in the same space as Dart — TypeScript, Kotlin, and Swift — all have non-nullable types. Users *constantly* ask for this in Dart, and its absence seems to be significantly hampering adoption of the language. 
Where's the problem? That's what they did when they change from uppercase to lowercase constants (Dart 1 -&gt; Dart 2 - they WERE uppercase!!!!) class Vector { @deprecated static const zero = ZERO; static const ZERO = Vector(0, 0); // &lt;-- final double x; final double y; const Vector(this.x, this.y); } That's the odd thing (One of many weird decision the Dart team (Google???) made. Constant's were UPPERCASE - one day they decided to make them lowercase. 
Sure, I guess if one embraces it and learns to manage nulls properly, non-nullability could be an invaluable tool. I just get a bit nervous when it comes to these big platforms (ie Flutter) that every other week there is a change in what can and can't be null. This has been my experience with Kotlin and Android development so far. Every time I come to make a small change it feels like theres a hundred new 'Unnecessary safe calls' or Type mismatch 'expected nullable but got non-nullable' warnings. Hopefully Flutter won't fall victim to this.
"One Day", in a major release, I don't think you should be surprised by breaking changes in a major release ..
&gt; Where's the problem? The problem is that it unnecessarily causes an otherwise trivial change to become a breaking change. &gt; That's what they did when they change from uppercase to lowercase constants (Dart 1 -&gt; Dart 2 - they WERE uppercase!!!! Yes, and it was massively painful and really difficult. We should have done it before 1.0. The lowercase constant convention has been in place since well before then. &gt; Constant's were UPPERCASE - one day they decided to make them lowercase. Yes, for the reason I stated above. It's not a good naming convention because it makes your code brittle.
Thank you very much for your replies, apart from the Flutter Udacity course, which others do you recommend taking? It doesn't matter if they're not free.
What's inside your `Packet.toJson` method?
&gt; It's not a good naming convention... Hey, that's an option but this opinion is not shared by most (all???) of the other programming languages And why shouldn't it be good? A constant is not a variable. If you see something like c=2*r*PI it's clear what PI is. But if you see c=2*r*pi you have to check first because it's not clear You think it makes the code brittle, I think it's part of the documentation, makes it clear what the intention of that piece of code is 
Well Flutter desktop is also Dart. Would NOT use Electron at this point. "Flutter on desktop, a real competitor to Electron" https://medium.com/flutter-community/flutter-on-desktop-a-real-competitor-to-electron-4f049ea6b061 Plus learning Flutter is going to offer a nice return. It already has over 50k stars on GitHub. It is the future.
Don't let this die! You're our only hope! https://github.com/dart-lang/language/blob/master/working/terminating-tokens/feature-specification.md
Right now, the officially supported targets is just command-line applications, web applications (server and browser), and mobile (Flutter). It’s possible to write Dart with Electron but there are only a handful of tutorials out there. There’s more promising attempts with using Flutter on desktop. But these are not official and are more of hobbyist effort. It would be easier to write a web application in Dart and deploy locally. 
* Yes, you can build an app with Dart and Electron (I have an [example](https://github.com/thosakwe/dart_electron_starter_kit)), but just know that it's effectively a Web app. So you can't use `dart:io`, and instead, have to use the [node\_interop](https://pub.dartlang.org/packages/node_io) packages. * You can also use Flutter for desktop, but AFAIK, there's no official support for it (though there is the flutter-desktop-embedding repo). * I've heard of a tool called "Feather" that uses Flutter to build desktop apps, but I don't know much about it. * There's also another way - ship the .dill of your app, along with any native extensions, and have users run it in the Dart VM (or ship the Dart VM too).
I spent a *lot* of time on optional semicolons. That is only the first of three or four approaches I tried over the past several months. It is really hard to make semicolons optional in Dart without adding a lot of complexity and risking making it harder to evolve the language in the future. Dart's syntax is just not very clean and simple and making semicolons exacerbates that. The two main problems are: * The original designers didn't want to add any reserved words that weren't reserved in JavaScript, so instead Dart has lots of "contextual keywords". These are identifiers that are treated like keywords in some contexts but can also be used by users. This makes it hard to know how to handle semicolons without knowing exactly where you are in the grammar. For example, you might assume we could always ignore a newline before `hide` so that this works: import 'foo.dart' hide Something Except that you need to *not* ignore it here: class hide {} // Yes, this is valid. hide someVariable // And this. * C-style type annotations where a type name introduces a variable and where the return type is on the left means we don't have clear keywords introducing new variables. Consider: main() { someIdentifier anotherOne } Is that declaring a variable `anotherOne` of type `someIdentifier` or calling two getters? I think we will circle back to try optional semicolons again, but for now we're going to focus on non-nullable types.
Prob a dumb question, but wrt reserved keywords, could they be added with a breaking change and a `dart-fix` tool?
Excuse my ignorance, but wouldn’t you just need html and css for a static site? Are you trying to incorporate something more? 
With a breaking change, anything is possible. :) But, in general, this is a very difficult breaking change to make. The problem is that these identifiers could be part of a library's public API. So if we turn that into a reserved word, you can't just fix your own library. You would have to instead change your API which is a breaking change to your library's users. So, in order to do this, we would have to migrate the *entire ecosystem* away from using an identifier first and then make the breaking change. 
Web pages and web apps produced with Dart are no different from those produced with HTML/CSS and JavaScript. The only difference is that you don't have to write the JavaScript yourself, as the compiler does that for you. You can create a simple page using the `dart:html` library or an advanced web app with [AngularDart](https://angulardart.org). You can certainly host pages created this way on GitHub Pages. They are "static" in the sense that there is no server-side element--they run entirely on the client.
Thank you for the detail info! I'm fairly new to web development as a whole. I'm trying to avoid having to write html/ CSS, so if I understand you correctly, this could be achieved with `dart:html`? I will be taking a look at angular in the near future, but in trying to keep things simple for now to solidify my understanding.
As replied to another comment below, I'm trying to avoid writing html/ CSS just because I can't see myself needing them other than for this single project. Is this possible with dart, or is writing html and CSS inevitable within web development?
Well, sadly, Dart only replaces the JavaScript portion of that equation. You still need HTML/CSS. The Hummingbird project, still in early alpha, will put Flutter on the web, and that will largely eliminate the need for you to know HTML/CSS, but that's definitely not ready yet.
I figured this was the case, but I was hoping I was missing something. Thanks again! I did see the hummingbird project during flutter live and it looks very enticing. 
It’s inevitable, that’s the language of the web. You can look into angular dart, but you still have to use html and css. There is no avoiding it. 
[https://medium.com/flutter-community/flutter-from-mobile-to-desktop-93635e8de64e](https://medium.com/flutter-community/flutter-from-mobile-to-desktop-93635e8de64e)
thanks, I will work on
My question it's referer to this, with flutter and dart it's possible create app how the applications created with electron, for example "app desktop for whatsapp"
Not following? Could be your English.
sorry, I'm sheepish. I asked, with flutter for example it's possible development an app Desktop for whatsapp? It's possible to open in desktop app an app web?
thanks for your answer, then with dart is possible to use how to web container (for example tomcat)?
Thanks, I will work on
Has anything come off from this article? I haven't seen any update of the project
You could, but normally, you would write your server-side application on a [Dart server framework](https://github.com/yissachar/awesome-dart#server-frameworks) and then you also write your browser on Dart that compiles to Js using [AngularDart](https://webdev.dartlang.org/angular) or [OverReact](https://workiva.github.io/over_react/)
Just to clarify one thing: it is definitely possible to write a website based on \`dart:html\` but it won't be static because this package runs on the browser. That means that it will build the web pages when the JS code transpiled from your Dart code is executed (in the main function), which you link from a nearly empty HTML page - the browser loads the HTML, sees the JS/Dart code, executes it, then the code builds the actual contents (this is commonly known as a SPA- single-page-app, because all other "pages" you see are built on the fly by code). Just the other day I posted a Tic-Tac-Toe game that does exactly that: [https://www.reddit.com/r/dartlang/comments/aowu0o/pure\_dart\_web\_tictactoe\_clone\_from\_the\_react/](https://www.reddit.com/r/dartlang/comments/aowu0o/pure_dart_web_tictactoe_clone_from_the_react/) Notice that the HTML and CSS in this example are minimal, everything is basically generated on the fly by Dart code (just like in the React sample that inspired it). The \`dart:html\` package is just a Dart package, so in theory, if you learn its API you can write a website with it based on the knowledge of the package's API alone... but at the same time, a lot of things, like element's names and style Strings, are actually HTML/CSS concepts... so in the end, you'll need to know how that works.
It has been a few months now and I still can't find something that I can try right now... @bartturner if you're going to offer that as a viable alternative, please link to a page where we can download and try this, not a blog post from months ago that doesn't actually deliver anything, only promises.
But to clarify more than that, it's perfectly possible to create a mostly static site that uses Dart. Just like with JS, you can do a site that's mainly HTML/CSS, and use Dart just to add minor bits of interactivity, etc. This isn't really Dart's niche, though, as it's designed to create SPAs and other more advanced client-side apps.
There is a great one on skill share. I can't remember his name but it was $200 I believe which should narrow it down. There is one other on there but not nearly as good.
Also, there's no need for the `assert`. You can declare your variable as `int manint;` instead of `var int;`, since you know what type it will be.
I have created a course on Dart 2 for beginners. It's free and available on youtube along with all source code on Github. Check this [course link](https://www.youtube.com/watch?v=5rtujDjt50I&amp;list=PLlxmoA0rQ-LyHW9voBdNo4gEEIh0SjG-q). The course quality is premium. 
Dart luckily is easy to pickup. But using Dart is important for Flutter to offer the developer experience and end user experience you get. "Why Flutter Uses Dart" https://hackernoon.com/why-flutter-uses-dart-dd635a054ebf
Dart is a niche since x years and probably stays one. I would wait until Kotlin or TS provides something similar to Flutter...
I would agree wit kotlin, but ts is very not capable enough to provide the simple developer experience the dart team strives for (in my opinion, at least) 
This won't last. As soon as Dart/Flutter becomes really mature and able to do real x-platform development the whole environment will be at least as complex as all the other tools.
I suppose you're the maintainer of this site? Your Twitter link links to your YouTube channel. Apart from that, great site! Dart is probably the only language you could do _real_ full stack development eoth: Web, Backend *and* mobile. It's just awesome. 
Actually there are libraries for Google cloud functions in dart. You shouldn't have issues working with most mainstream apis and technologies like gRPC are available too.
You know, a year ago I'd say it was hard to find dart jobs outside of small niche companies and Google, but with the release of flutter, the amount of jobs looking for competent dart devs has increased drastically. Yes, you won't have the same kind of choice as if you learned a more mainstream language but that doesn't mean that learning dart as a first language is useless in that regard. Also, when you learned dart, you learn oop and can easily translate those skills over to c#, java or JavaScript in a few days after learning syntax differences. 
Great spot! Fixed.
What about Kotlin?
Aqueduct is ready for production and would suggest going ahead with that. Angel seems to be almost there. See the chat room on Gitter for more information: [https://gitter.im/angel\_dart/discussion](https://gitter.im/angel_dart/discussion)
Thanks for this answer. Angel 2.0 can be used in production, but the upgrade to 2.0 is not yet 100% complete. But it is definitely "almost there," in terms of things like ORM and GraphQL, which have some outstanding tasks left to be completed. Just about every other existing package has now been upgraded for Angel 2.0. Aiming for a full release in March or April. Technically, you can use Angel 2.0 in production - there will be few breaking changes, if any, going forward. You can track the progress here: https://github.com/orgs/angel-dart/projects/6 Angel v1 has been used in production (I can point you to someone whose company adopted Angel v1 as their backend), but as of Dart 2 stable, it was time for a big update to the framework. That being said, Angel is a community project, so if you're interested in contributing, you're more than welcome to. The Gitter chat is probably the best place to get continuous updates. Lastly, the version 2 docs are here: https://angel-dart.gitbook.io/angel/v/2.x/
It's getting harder to figure out why you still hang out here, Mike. :)
Kotlin is a cool language, but its web offerings are really immature compared to Dart. Its cross-platform mobile story isn't as nicely packaged as Flutter, either. Maybe someday, though.
Yes, it’s possible.
Yea - I know what you mean... I'm really pissed at Dart but I'll stop this kind of comments. 
this have an sequence of precaution?! you have a guide?!
After you build the project (webdev build) it becomes HTML+JS+CSS.
Oh yes, sorry for my stupid question but I'm new in the context. thanks
See here: https://www.dartlang.org/guides/language/language-tour Read the "Optional parameters" section. (In fact, read it all. :))
Thanks mate
K does anyone tried async actions in Mobx dart???
All text in German.
Oh jeez Nane, didn't know you actually use reddit
I'd challenge that Kotlin's web offerings are immature compared to Dart. If anything, due to Kotlin being well-supported by Spring (Boot, MVC, etc), it should be argued that it's *far* more mature than Dart for server work. Regarding mobile...can't argue there. 
This is good stuff. Now, who's going to volunteer to translate it all into English? ;)
My first tries here. The Google+ Community is going to die because Google+ is going to die ...
Best of luck to you! 
Good idea, I can provide the raw Power Point slides for that ;-) Anyone?
Ive taken your flutter tutorial. It was very good. I will look at the dart one too. Thank you!
So, Dart Sass is just a CSS preprocessor, often used with AngularDart, but useful for any web project. If you didn't know, Sass is pretty much just a way to write more advanced/convenient CSS constructs, things that aren't supported by the regular CSS standard. A Dart script translates your Sass "code" to plain old CSS for use by browsers. It is not a front end UI framework. It's all about styling screen elements. If you write a web app with AngularDart, you write the UI with HTML and CSS, then you write all the backing code with Dart (in place of JavaScript). As you know, it's entirely possible to use JS code within a Dart web project, and that is occasionally useful for big projects (things like charting packages, Firebase API, etc.) that may have no native Dart equivalent. I think server-side Dart is really great, allowing you to share data models between client and server, and it keeps you from constant context shifts if you're using the same language throughout your stack.
Web: You write HTML and CSS, but instead of Javascript for the logic, you write it in Dart. Your server can be in any language (including Dart). DartSass, like CSS, is for styling. Colors and layouts and the like. You should focus on functionality before you dive into these. Best to use something like Bootstrap if you just want to make things pretty without thinking too much about the 'how' &amp;#x200B; Flutter (mobile): I'm fairly certain that if you can't get by with the default widgets (of which there are a lot), you can make your own. Visit /r/FlutterDev for samples of what is possible. &amp;#x200B; Server-side Dart: It's a thing. I cannot say how reliable it is since there hasn't been a lot of public declarations of how reliable it is. It's fair to assume that people are testing it out in lower demand environments. &amp;#x200B;
Competition is great, but from all the dart server side frameworks, only aqueduct and angel has survived. Aqueduct seems to have a company behind it, and angel seems to int the hands of only one (yet skilled) programmer. I think the best course of action would be of angel and aqueduct did combine forces. As the server side dart community is so small collab could help the projects going further...
&gt; I'm starting from zero, currently going through HTML + CSS, planning to get into js a bit then dart all the way. I'll delve into web design first because I was told it's a good way to start but my goal is ultimately to code for mobile. You do not need to know any HTML or CSS to program for mobile when using flutter. If your goal is to ultimately code for mobile, then forget about web development. You might have been confused because dart is can both be used for flutter and for web development. You don't need AngulartDart or DartSass. If you want to learn dart just enough for flutter, just read through [this](https://www.dartlang.org/guides/language/language-tour). Then move on to learn flutter [here](https://flutter.io/docs/get-started/install). There's also a course on Udacity you can take. Not to confuse you, but these *is* a scenario where you need HTML+CSS, etc to program for mobile, and that is react-native. But that has nothing to do with flutter.
Now it makes a lot more sense. Thank you
Great, now I get it and thanks for the bootstrap suggestion! 
Dart as a substitute for js. Now it all makes sense. Thank you for your help! 
Hi, If you are really set on Flutter then I’d just suggest referencing Flutter.io web site plus maybe free Flutter/Dart courses on udemy/YouTube to start with. What you are currently looking at (HTML/css/js) are obviously massively popular and well supported and if web site design/development is something you are interested in then you should carry on, but if your passion project is an app then you could make things easier for yourself if you just look at the Flutter resources first (as a first step, obviously I don’t know the scope for your passion project, remaining on the app side means you may prioritise looking at some Swift for iOS or Java for Android if you need to interface with other functionality not yet covered by Flutter/Dart implementation).
Thanks for the advise. I decided to do it in Golang. After a day of playing with it seems better than to hope the framework will survive
Smartherd has a couple of good course on Dart and Flutter that is how I learned it. 
&gt; Persons from the following countries can submit but will not be considered eligible for the contest due to local rules, including exclusion from judging and prizes: Italy, Brazil, **Quebec**, and Mexico. We're a country!
Thats a sane choise. Dart has a lot to offer, but serverside dart is not yet big enough for real app requirements (imho).
Static types
Single entry point to code via main(), strong types, generics, inheritance-based object orientation rather than prototypal-based object orientation, weaker library ecosystem than node.
But it is growing and adopting frameworks from JS! 
JavaScript is basically a huge collection of quirks and gotchas, and you have to be very disciplined to avoid writing crap code with it. It has strange scope issues and its dynamic type system causes more problems than you can imagine. Dart is a modern, well-thought-out language with a comprehensive core library and clear, clean semantics. Additionally, a Dart web project is able to make use of whatever JavaScript libraries you want, so with Dart, you get the best of all options.
I don't think there's much evidence to suggest dart is growing in the web development space. In mobile, sure, but not on web. Typescript won.
I mean like reactive frameworks. I enjoy using it for system utilities too. Wish it had an ML framework. Unfortunately the ones I've found are all a work in progress. Tried working on one but haven't had time to do much in that regard. 
Agreed. I think there's a tensorflow package, but I'm not sure if it's web-ready or flutter-only. I think, generally speaking, the comment about the library ecosystem stands compared to what's available with javascript. And while I understand there are ways to interop with javascript code, it's not as clean and simple as, say, typescript.
dart and javascript aren't similar at all. the syntax looks vaguely familiar, but that is about it. the two non-obvious differences that developers seems to find most alien and problematic are its prototype-based objects (as opposed to class-based) and dynamic scope binding read this: https://github.com/getify/You-Dont-Know-JS
exaggerate much? it's not that hard to write javascript that isn't shit &gt; JavaScript is basically a huge collection of quirks and gotchas somewhat true. but as with most languages, most of the quirks arent things you run into in reality &gt; It has strange scope issues this is indeed one of the biggest pain points for many developers expecting it to behave like their favorite language, but it only takes an hour or so to wrap your head around &gt; its dynamic type system causes more problems than you can imagine. that's just a weird assertion to make. is there something about javascript's brand of dynamics? or are you one of those people scared of dynamic type systems in general? &gt; Additionally, a Dart web project is able to make use of whatever JavaScript libraries you want, technically true, but it's painful to do that. dart's js output is pretty siloed, so interop is not something you get for free &gt; Dart is a modern, well-thought-out language with a comprehensive core library and clear, clean semantics I agree with you there 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/h_n] [Flutter Create (Contest)](https://www.reddit.com/r/h_n/comments/atdi8h/flutter_create_contest/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
If know JS it is easy to pick up Dart. But I am not sure I would say "similar". Dart is just a lot, lot, lot cleaner than JS. So it is much easier to learn Dart. JS value is how ubiquitous it is. Not from the quality. 
No JS is literally a huge collection of quirks and gotchas. I mean literally. I am old and done a ton of software development and there is really nothing like JS. I do NOT blame JS. It is just the history. When it was conceived it was never thought to be what it is today. The story goes it was done in 7 days or was it 10 days? Brendan is really talented but he is not god ;). I am actually not religious but could not pass up.
&gt; Name me a single other language that had to resort to using three "=" because of the others being broken? every language i've used that i can think of (except maybe lisp?...it's been a while) differentiates between equality and identity checks. it's not a unique concept, so i don't see why you find this a problem &gt; Dart got rid of three "=". I haven't been using dart that long. I didnt realize that. if they got rid of three, that was a mistake. I see no benefit of forcing the use of the `identical(a,b)` function over `===` 
The point is the syntax. They had to resort to three "=" It is not clean. JS is full of this. Dart is just a lot cleaner. But also hard to make performant and why Google had to resort to Dart for Flutter. https://hackernoon.com/why-flutter-uses-dart-dd635a054ebf Why Flutter Uses Dart – Hacker Noon 
&gt; The point is the syntax. They had to resort to three "=" how is that a point? much less a problem or demonstration of something unclean? math uses two lines for value, three lines for identity. it should be a pretty familiar concept. js has problems but that is far from one. it is a really bizarre argument 
Syntax is how clean something is. JS is not clean and a mess.
Thanks guys I have started JS and everything you said is correct.
JS interop will let you include JS libraries. As far as i know there a a few limitations though. 
Dart's regular comparison operator (`==`) defaults to comparing by identity, actually. You overload the operator for your own types to make comparisons work in a more customized way. As to your earlier remarks about dynamic type systems, I do believe the disadvantages outweigh the potential advantages, yes, especially for larger projects with multiple developers and lots of APIs. Strong types tend to be self-documenting, especially at the borders of APIs. TypeScript goes a long way toward making JS palatable, but is still polluted by too much of JS's baggage.
Whoops! Thanks for the heads-up! Corrigé. I’m still invited home for la Saint-Jean I hope?
Sure! It felt good while it lasted.
Is this spam? This person's last few dozen posts are identical to this one.
&gt; Infosec community &gt; Uses discord Yeah, I'm not buying it, chief.
 Medcorder is a free mobile app to record conversations with your doctor and share them with friends and family, so you can make better-informed decisions together. Medcorder on Behance:[ https://www.behance.net/gallery/76309833/Medcorder-mobile-app](https://www.behance.net/gallery/76309833/Medcorder-mobile-app) Any feedback appreciated!
Isn't this against the law in most countries? 
Yes, yes it is.
That's why it isn't on the Play Store.
Check this out.. [https://github.com/mobxjs/mobx.dart/](https://github.com/mobxjs/mobx.dart/)
Yeet
Holy shit looks great, thank you for this one! 
Great stuff. Highly recommended!
I like how you present the new set literals, so we can get a small introduction to the internals. High quality staff. ;)
How did you convince your boss before knowing what you are getting into? Love to hear that secret formula :)
We are currently building a product that may be a startup in the future. The client (Flutter + Angular dart web) is completely written in dart and besides the small learning curves there are almost no downsides. So far we are not limited in any way. We decided to use kotlin for the Server since we already have the experience with that and I think the dart community is not so big and compared to the huge java stack there are not so many different libraries to choose from. I would consider writting the backend in dart if the app is not huge and you want to share some classes with the client as well. Maybe share model classes, serializer/deserializer, endpoint urls and so on. That‘s fancy but not a really big deal. 
With AngularDart, did you get into any JS interop issues? Did you miss any third party widget or library that you'd easily get in JS land had you used that? I am thinking of creating the front-end of my side project with AngularDart but these things concern me. I don't want to rewrite everything from scratch and I'm not sure how good JS interoperability is.
CLI apps don't really have keyboard *events*. It's more that what you type goes into the app through its standard input. The [Stdin](https://api.dartlang.org/stable/2.2.0/dart-io/Stdin-class.html) class in "dart:io" lets you interact with that. If you want something that behaves more like a "keyboard event" and less like a "command prompt", what you probably want to do is: * Turn off [echoMode](https://api.dartlang.org/stable/2.2.0/dart-io/Stdin/echoMode.html). This way, when the user types a character, it doesn't immediately get written to the screen. * Turn off [lineMode](https://api.dartlang.org/stable/2.2.0/dart-io/Stdin/lineMode.html). This way, each keypress goes immediately to your app instead of waiting for an entire line of input to be entered. * Listen to the stdin stream using [listen()](https://api.dartlang.org/stable/2.2.0/dart-io/Stdin/listen.html). This will call your code whenever the user presses a key.
With project hummingbird on the horizon, the option will come up to transpile a flutter app to a web app. Might be worth exploring.
What the...? There are so many times it would've been good to know this....
Ah gotcha - appreciate the response! Yeah, I was trying to create something that can automate an interaction with another app via generating keystrokes but from what you're telling me and what I've researched, that doesn't seem like a possibility. I'd probably have to offload a call to a c++ app or call some other app to handle that. Thanks for the response!
I write AngularDart at my company every day, with an eye toward using the code in a future Flutter app. I've been doing web apps with AngularDart since its inception, really, and I can tell you that for the most part, JS interop isn't a big deal. For big libraries, like charting and XMPP stuff in my case, it's a simple matter of producing a little typed wrapper, similar to TypeScript definition files used for a similar purpose. If I want to use some JS widget (which is rare, because the AngularDart widgets cover most basic stuff), that's not so hard, either. There are a number of approaches to JS interop possible, some easier and some harder, but it's all quite do-able, and totally worth it to be using Dart (especially if you're looking to do mobile, too). With everything Angular has to offer, and simple components like a popup, it's surprisingly easy to create your own widgets when necessary, too.
Thank you for the detailed answer and peek into your personal experience. I will surely look into AngularDart. :)
Now you do!
We use mousetrap lib. Its awesome.
The best development orgs to functional UI-clicking test automation. For the web, Selenium's a defacto-standard. FlutterDriver is the official way for Flutter apps. I don't think it is capable enough. Flutter (for Android) is has very slow builds, and that's a huge problem too. Even incremental builds are too slow.
A new ffi for Dart is [in the works](https://github.com/dart-lang/sdk/issues/34452), so you could probably call into native code via that once it's ready. Also, what platform are you on? Depending on what exactly you're trying to do, you may be able to use already-existing command line tools, e.g. [create a YAML libinput events file](https://www.mankier.com/1/libinput-record) and [play it](https://www.mankier.com/1/libinput-replay), use xinput, etc. 
[removed]
Seems very similar to RxJS observables.
You can do: &gt;Constructor(this.list) { list.shuffle(); } or &gt;Constructor(list) : this.list = list..shuffle(); &amp;#x200B;
&gt; But... &gt; &gt; () =&gt; print("hello"); &gt; &gt; ...doesn't return anything, except void. That's true, but only coincidentally true because `print()` happens to not return anything. (Technically, it returns `null`. `void` is a static type, but has no values of its own.) &gt; Just wondering if there is a shorter version than: &gt; &gt; Constructor(this.list) { list.shuffle(); } Nope, that's the way. 
I have a question, would doing this shuffle the original list you pass into the constructor?
Thanks!
Thanks!
We didn‘t miss any JS libraries but the wrote most of the stuff our self. However using a ja Libary is still painful but it can be done. What libraries would you use/miss?
Yes, it would! You could do Constructor(list) : this.list = List.from(list)..shuffle(); To avoid that
I would miss a good (even not so good would do) GraphQL client. :) In fact that's the reason I went with Angular instead of AngularDart. 
In remember there was a graphQL dart client but the repo isn‘t active at all. I can understand why you choose angular and not angular dart in that case 🤔
I wish I had the time to write one and maybe take some inspiration/code from the Flutter GraphQL client which I heard is pretty good. Not sure how much it would apply to web though, and graphql clients are pretty hard to write :( Other than that, AngularDart is pretty awesome
Is there are a platform dependency to the flutter framework? I think the flutter graphQL package could be easily used in web. I never used GraphQL but as far as I know it’s „just“ provides a bunch of apis to do network calls to a GraphQL backend or am I wrong? 🤔
Though i do believe the suggested way to create new list copies is with `toList()`. this.list = list.toList()..shuffle();
Hey, I have been thinking of using Dart on my future startup (just an idea so far, but code is already being written!). I chose Dart because: * can re-use same business logic code on all platforms (backend, web, mobile). * I even wrote the deployment script in Dart to avoid having bash scripts hanging around! Really easy to do. * great language to work with - I became productive in a day or two. * performance - compared the HTTP server with Java: Dart actually won (tested with small concurrency levels which is expected for my a-few-customers-startup case)! * focus on single-threaded async programming but with possibility to use Isolates for CPU intensive tasks - without fear of concurrency issues. * DartWeb allows me to completely avoid the JS ecosystem, which I find too unsafe and unstable to use - which causes huge amount of time wasted doing breaking upgrades or trying to patch vulnerabilities. I believe Dart will still be around in 5 to 10 years, unlike the current JS trends (even React and Angular I think may not be around in that timeframe - or might be around but in a completely different form - which is practically the same). I am not worried about hiring people to work on Dart because any Java/C#/C++ dev would pick it up in a day or two (like I did). And given the huge interest in Flutter, I think Dart will become more and more popular very quick (assuming the pressure to add other languages to Flutter doesn't bear fruits - which is my opinion from all I've read so far).
On that note, it would be nice to see more packages made in a way they could be consumed by cli, web or flutter.
Depending on how complicated this CMS is, you could do a Dart command-line app. There is [this project](https://github.com/thosakwe/dart_electron_starter_kit) demonstrating how to get started with Electron, though. Not sure how up-to-date it is. Maybe Tobe will chime in.
Thanks! I don't think a command-line app is what I'm looking for but I will have a look at the electron demonstration.
No to use Dart over JavaScript. I heard some bad stories about JS. I am making a web app. 
I successfully implemented a cross-platform Flutter + Electron + Angular Dart app. As for the Electron part, you only need to embed the Dart's JS output in the HTML file, and open that HTML file with Electron's BrowserWindow API. It's pretty easy actually.
Found an answer, by putting res = int.parse(num1) + int.parse(num2);
Yep! Although, I believe it's recommended to use `int.tryParse()` these days.
 You can download it here: [https://play.google.com/store/apps/details?id=co.medcorder.app](https://play.google.com/store/apps/details?id=co.medcorder.app) or [https://itunes.apple.com/us/app/medcorder/id1392651594](https://itunes.apple.com/us/app/medcorder/id1392651594) 
Hello, do you think that you will include some other concepts like working with files, reading/writing, oop, maybe include some builded methods, maybe some web too like angular dart or something. As i have seen your web site is the best for beginners, and i also know that some of this things are not available in dartpad, and also know too that maybe i am asking too much. But i find your tutorials perhaps the best, interactive and educational. 
With cross-platform Flutter + Electron + AngularDart you mean a Flutter App and a AngularDart App (using Electron to bring it to the Desktop) right? How did you approach the code sharing between AngularDart and Flutter? obviously you can't share the UI code but how did you share Blocs and Models? Did you made separate packages?
Yes, you have to create a separate shared/common package which should contain most of your code, and ideally reusable libraries that can be shared across multiple dart apps or projects. So in total you have: 1. Flutter package which contains only flutter UI (always delegate the logic from your UI event handlers to your controller or viewmodel), plus implementations of the abstract services in the shared package (here's a tip which I learned the hard way, if you plan to create more dart apps, put all reusable abstractions and implementations to a separate package, see #4). 2. Electron + Angular Dart package (or you can separate the two if you plan to deploy a web app aside from an Electron desktop app) which contains your desktop UI (just like above, delegate to your C or VM) + implementation 3. A shared package which contains your business logic (e.g. your models, your Controller or ViewModel or Presenter or what ever you call it, your shared services, etc.) + abstractions 4. And optionally, reusable package***s*** (again separate for flutter, angular, and shared) which can be reused across all your projects if you plan to develop other dart apps or projects. If you've done Xamarin Native, you'll see that this is how it's done.
Yes, I plan to continue the lessons for as long as people are still interested. All the concepts you mentioned will be included, and more. As you mentioned, some of them won't work in DartPad, and for those, I typically just do tutorials on https://dart.academy
Thanks for the insides! That was helpful.
Too bad we can't participate :(
&gt; JavaScript is faster than compiled languages like Java... &gt; Dart is approximately 2 times faster than JS... What?? If at least links were provided for us to check these claims! Not what benchmarks I’ve seen suggest at all.
There are countless more claims like this throughout the article. I wish they would have at least cited a source or two.
Js isn't even close to Java in performance, maybe only in some cherry picked cases.
2 times doesn't cut it. It should be more than that.
This is stupid. If you want speed, develop in Swift or Java/Kotlin. If you want productivity &amp; sassy-ness, develop in Javascript.
It's well written, but not particularly well researched, eh?
Why do you say that? How can we impove it? 
Is it really stupid, if you have not even read the article? 
&gt; Dart is a programming language that was initially used internally at Google to build web, server and mobile applications. Note in that quote the reference to server apps. Then later: &gt; Dart is currently actively used with Flutter for developing the frontend of cross-platform mobile apps. Dart can be also used for web development, but there is no mention of Dart being used for backend development. In reality, Dart's VM was designed to be usable server-side, while JS's had to be adapted for that purpose by the Node project. &gt; Dart supports both loose and strong prototyping. As Dart is a compiled language, most of the programming errors can be found during the compilation. In that respect, Dart is more type-safe than JavaScript. This whole thing is misleading. As of Dart 2.0, the language doesn't really support "loose" typing. It has a fully sound type system, though it does some type inference and supports a `dynamic` type. Your last sentence in that quote should read: "Dart is type-safe, and JavaScript is not." Visual Studio Code is easily one of the most common IDEs for Dart, but there's no mention of it in the article. Those are a few examples at a glance.
I'm frustrated with this article. It is well written but appears to be written from a perspective with little industry experience. Skimming a lot of the other articles on the site they are of similar quality. &amp;#x200B; The general text is well written, well presented, and generally easy to consume. However, they are all very light on actual details. A lot of the arguments for the thesis are more subjective than objective. I'm generally fine with this style of content but I want to see links and resources used to back up the claims.
&gt; Dart can be also used for web development, but there is no mention of Dart being used for backend development. [weird](https://www.dartlang.org/server)
Question - curated by whom?
By Machine learning AIs
Is there anything you have to use that Dart 1 doesn't support? I mean apart from the change from Barback to the updated build system, the APIs didn't change that much.
At the company that I work, some apps that are data heavy and got some deeply nested data structures (List of Map of Map of List, or such). Our backend is NodeJs. Those data structure didn't parse easy (while in JSON) compared to the server side. We found it a pain in the ass to migrate to Dart 2.0. We found easier to keep those apps in Dart 1.24 and the newer apps will be in JavaScript (ES8) using the ReactJs library. To be honest, being able to easily include JS libraries to our project is a major plus too. While possible with Dart, passing Dart callbacks to the javascript functions was somewhat problematic. 
Quick question. Keeping a close eye on Flutter right now. Is there any sort of advanced design tools available for non-programming “designers” to build Flutter UIs with? 
There's the [Flutter Studio](https://flutterstudio.app/)
Thanks, I’ll check it out!
I feel like Uncle Bob's response to the SOLID 'controversy' is always well worth a read, like once a year to remind ourselves: &gt; https://sites.google.com/site/unclebobconsultingllc/getting-a-solid-start
I would recommend the same [https://flutterstudio.app/](https://flutterstudio.app/)
There is no benefit of using Dart instead of JS or TS anymore.
You should compare Dart with TS not with JS
I agree, the reason why I started using Dart was for it's Object oriented programming aspect. Nowaday that part is well covered in JS
Absolutely! ES6 is readable has both OOP + functional. (TS is even better - adds types... (sorry - couldn't resist :-)))
&gt; Dart started as a dynamic language What? I never knew this!
This is my first post on Reddit after a few years as a reader. Thanks for all. I just started learning Dart after many years playing mainly with C++, Delphi and C#. From the beginning, a strange attracted me to Dart. I feel like the language and its ecosystem was designed for me :). Everything is so intuitive that I decided to invest more time to learn about development workflows and technologies (Flutter, server side, and Dart for the Web). This post gave me hopes to see the ecosystem and packages grow ( I'm interested in computational geometry and a good database support like a solid ORM framework). Wish it could be supported in browsers in the future (unlikely because of JavaScript group and lobbying effect)
They are adapting Flutter for the web, though.
The weird part is that dart haters are JavaScript fans ffs. If JavaScript were the last programming language on the Earth I'd stop programming.
&gt;Wish it could be supported in browsers in the future (unlikely because of JavaScript group and lobbying effect) However, Dart compiles to JS code for the web.
Hope they will succeed! By that time I will enjoy Flutter learning with VS Code. One expressive enough language for the UI and logic is a idea. Way better than {markup+code} approach, thanks to Dart design (e.g. optional named parameters). I feel to have more control over my app.
Some brave soul should post this to /r/programming. At the very least, the comments should give /r/programmingcirclejerk some fodder.
&gt;Dart started as a dynamic language and only with Dart 2 we now have types. Google kinda messed up that they did not make Dart a statically typed language from the beginning. Dart has been statically-typed from the beginning, but implemented in an optional way. You could program in a dynamic fashion and overlay types as and when you needed. You could also enable a flag which enforced strong typing mode. As of Dart 2 its strong typing only.
I posted something similar on /r/webdev and they couldn't resist: [https://www.reddit.com/r/webdev/comments/b06p44/is\_dart\_a\_viable\_option\_for\_web\_development/](https://www.reddit.com/r/webdev/comments/b06p44/is_dart_a_viable_option_for_web_development/) I'll post to /r/programming too :)
Agreed! Dart is a much better language for those coming from JS, Java, Objective C, etc. The problem for Flutter adoption is that Flutter's use cases all have better language choices in their native toolkit with Kotlin, Swift, and Typescript. Dart really needs to improve, quickly
Yeah, those guys are similarly surly and unreasonable in that subreddit. In fact, I was unjustly banned, simply because they believed too many of my posts involved Dart. If I had posted 3 JavaScript links every day, they'd not have said a thing to me.
Dart has the **http** package: [https://pub.dartlang.org/packages/http](https://pub.dartlang.org/packages/http) Alternatively you could use Dart's inbuilt classes [https://creativebracket.com/quick-tip-how-to-make-http-requests/](https://creativebracket.com/quick-tip-how-to-make-http-requests/)
any idea about flight APIs?
Yeah, Googling around got me here [https://rapidapi.com/collection/flight-data-apis](https://rapidapi.com/collection/flight-data-apis)
it is deprecated and i couldn't find an api for dart
No problem. Since the Flight APIs are HTTP-based, you can use Dart's HTTP client to converse with those.
Dart wins with having both JIT and AOT though. Not a lot of languages do both well.
thanks
Dart may be running in debug mode in that environment, which adds all kinds of overhead. Running in release mode, especially if you compile the code to a snapshot, can be incredibly fast.
The Dart VM will compile your entire program into an IR called “kernel” on startup. As you write progressively more complex programs, you’ll see that time difference start to go the other way. 
We don't have enough information to give you too much insight without speculation. Which commands are you running for each language? which versions of python and dart?
To run I'm using code runner in VS Code. Python Version 3.6 and Dart version 2.2
Thanks sure hope it does as I got scared after reading that python is comparatively a slower language, so after getting these results I thought Dart was even slower than Python.😊
Hello world isn’t exactly the best of benchmark haha
🤣🤣🤣🤣
If you are starter stop worrying about performance as of now. Even slower languages are fast enough for &gt;95% of us cases. Just focus on getting stuff done.
All you're measuring is the fixed startup overhead of the two languages. Since your program doesn't do anything *else*, that's the only numbers you see. Once you have a big enough program to do some real work, the fact that the Python interpreter starts up in 0.023 seconds compared to the Dart VM taking 0.758 seconds won't be as relevant. Also, the Dart VM isn't currently optimized for running Dart from source. If you compile your program to a snapshot first and then run that, it will start up *much* faster. Python automatically caches the compiled bytecode for programs to start up faster. Dart just doesn't do this automatically.
To add to this: If you wonder about the snapshot functionality, there's an [article on the wiki](https://github.com/dart-lang/sdk/wiki/Snapshots). Basically, you run something like `dart --snapshot=hello_world.dart.snapshot hello_world.dart` first, and then you can use run `dart hello_world.dart.snapshot` file instead of `dart hello_world.dart`. I just tried this and that makes your hello world program execute in 130ms on my device (about 6x speedup). Hello world is a weird benchmark, of course, but at least you see how big a difference this makes. For longer running programs, it's probably not worth your time to compile snapshots, because the cost of compiling the program is negligible.
Is easy to use asynchronous and parallel computing in python?? Dart encourages you to use this pattern and that's the scope where Dart stands out. In a real big application with UI you should have a better performance. Use this to create an app-jit snapshot: dart --snapshot-kind=app-jit --snapshot=main\_jit.snapshot ./main.dart In your case rename main.dart to 00-hello\_world.dart
By adding the await it is synchronous so nothing else will execute after the error is thrown in that function. It will then proceed to the catch block to make the Boolean true. 
You could test this yourself with simple debug print statements before each method in the try block.
It should be caught as soon as it's thrown. Await makes your code synchronous so it throws the first error and caches it. boolean is true
You can use ‘throw’ and print right after to give this a try. The last time I tested, it keeps the rest of the block.
As others have said, using try/catch with awaits will move to the catch as soon as an error is encountered. If you want to wait for all of your futures to complete and then handle the error(s) check out [Future.wait](https://api.dartlang.org/stable/2.2.0/dart-async/Future/wait.html).
Nice article with clean examples. 
Is it just me or are some of these examples reminding me of C#?
I find C# and Dart pretty similar tbh. 
&gt; ~/ &gt; Dart also has a few operators for speeding up arithmetic operations. Does this actually affect performance? Seems pretty strongly just behavior changes, not really intended foe optimization... 
It isn't really meant to make division faster, it's there to avoid making int division *slower* because of the ugly pattern `round(a / b)` which is definitely more costly than int division. If you're doing number crunching in Dart, it probably would make a noticeable difference.
Hi, I just recently getting to know Dart and interested in building a desktop app like you wanted. If I want to write a desktop app using angulardart and electron, which learning direction would you suggest since I never have any experience with Dart, AngularDart, and Electron,but I do have other web developing experience. 
Why would you not use Electron?
A "static site" generally means one that is served as static files, without a backend API. It doesn't mean the pages themselves can't contain JavaScript.
While you probably can, I've tried to do a static site using AngularDart but it fought me at every step. It obviously should be possible (I'm pretty sure Angular doesn't *require* a backend) but the whole device experience is set up as if you are serving it from Node or whatever, so it is a pain to do in practice.
You want a combination of `map()` and `addAll()` methods: ``` data.map((item) =&gt; item.addAll({ 'available': false })); ``` Learn more about the various methods in the links below: [https://creativebracket.com/top-10-array-methods-you-should-know/](https://creativebracket.com/top-10-array-methods-you-should-know/) [https://creativebracket.com/top-10-map-object-methods-you-should-know/](https://creativebracket.com/top-10-map-object-methods-you-should-know/)
Developer experience is much, much better with Flutter of Electron. Plus Flutter is much more secure. Flutter has better performance. Hard for me to come up with a reason to use Electron over Flutter. "Electron critical vulnerability strikes app developers" https://www.zdnet.com/article/electron-critical-vulnerability-strikes-app-developers/ This will continue to happen with Electron because of how it was architected. Why investing time in learning Flutter is going to get you a much better return than Electron long term.
Thanks for the help. I cannot get that to work. It works when adding multiple pairs to one map. I want to add one pair to an array of maps?
I got it... forEach((item) =&gt; item.addAll(); &amp;#x200B; &amp;#x200B; Thanks very much for your help. &amp;#x200B; &amp;#x200B;
Are you trying to add entries to existing maps, or produce a new array of maps? You say the former, but the JavaScript does the latter. If you want the former, just: for (var map in data) { map['available'] = false; } If you want the latter: var data2 = data .map((map) =&gt; Map.of(map)..['available'] = false) .toList(); In the next release of Dart, we plan to add the spread operator you have in your JS example so you'll be able to do: var data2 = data .map((map) =&gt; {...map, 'available': false}) .toList(); 
Thank you. I am new to programming in general and very new to dart.. I come from making complex spread sheets for fun, personal use and work colleagues.. Thanks again.
Welcome to programming! :D
What VSCode theme is this?
material theme (darker high contrast)
 void main() { const Iterable&lt;Map&lt;String, String&gt;&gt; names = [ {'name' : 'Aldridge, Scott'}, {'name' : 'Thomas, Richard'}, {'name' : 'Bloggs, Phred'}, {'name' : 'Tilley, Paul'} ]; final RegExp r = new RegExp(r'^T'); names.where((Map&lt;String, String&gt; name) =&gt; name['name'].contains(r) ).forEach(print); } You could actually recreate the pattern inside the where() closure each time if you wanted, but (I believe) it's more efficient to create it outside and reuse it, in the manner shown here.
Thanks, that looks great. I am not sure why I had a single properties. I was learning JS when I wrote that... 
If I'm understanding your problem correctly, you want to print all names _starting with_ a capital T. Without regular expressions, it could look like this: void main() { const Iterable&lt;String&gt; names = [ 'Aldridge, Scott', 'Thomas, Richard', 'Bloggs, Phred', 'Tilley, Paul' ]; names.where((String name) =&gt; name.startsWith('T') ).forEach(print); } Slightly cleaner, perhaps?
That looks great, what I was doing was exporting a ton of data from a spreadsheet in CSV, converting to JSON then using it for shift work calendars, autocomplete in inputs etc, merging names with new dates and working hours, adding key value pairs and such as I go. My original source is a collection of around 40 PDF tables! I am very new to all this at the moment just trying to get comfortable with making useful tools. Thanks for your help. I didn't really get it from a google search. 
If you're using CSV files extensively, you could consider using the functionality in the csv package: https://pub.dartlang.org/packages/csv That might make things a bit easier.
Thanks again, I will check it out now. I was interested in Regex because I thought I may be able to make a cooler search experience... maybe not..? &amp;#x200B;
I ended up with this anyway... main() { String userInput = 'h'; data = data .where((data) =&gt; data['name'] .contains(new RegExp("^$userInput", caseSensitive: false))) .toList(); data.forEach((item) =&gt; print(item['name'])); } &amp;#x200B;
I ended up with this anyway, Thank you! you're a big help! &amp;#x200B; data = data.where((data) =&gt; data\['name'\].contains(*new* RegExp("\^$userInput", caseSensitive: false))).toList();
*data = data.where((data) =&gt; data\['name'\].contains(new RegExp("\^T", caseSensitive: false))).toList();*
Jermaine, you are amazing man!
This is awesome! So glad to see changes in dart making the nested widgets easier to read
Thanks for your kind words Allochi!
I read the whole article. Beautifully written and explained. I love the reconciliation of statements with expressions in the context of lists. Hats off to the team. These are truly exciting times for Dart!!!
I think I will stick to reddit sub for now. I don’t even have facebook app on my phone anymore.
The idea of adding JSX to Dart in the future makes me happy!
Having a team of poligots makes Dart a perfect fit for all kinds of customer solutions, cli, API, web, mobile; we got ya! Great article!
Any news on this? Dart 2 support?
Xamarin is open source through and through. How did the writer miss that big fact?
I'm really not that big fan of Dart anymore but OS or not is only relevant (or a big fact) if you have two products with the same quality. (BTW - Flutter is also OS, mainly controlled by Google, yes - but OS) And in this case these two products are not! on the same level... My hope is that Flutter or it's C++-Framework could be used with other languages than Dart - this would be real openness in my opinion... &amp;#x200B;
Flutter is not an OS. 
I think they're using OS to mean "open source" here. :)
Oh. My bad. I got so confused. 
&gt; Beautifully written and explained. Thank you! :D
Nice, a demo of Flutter on the web.
Dart will get better. They had to go to hell of converting their whole type system for the past few years. Now they will have room to expand their languages. Their https://github.com/munificent/ui-as-code is really nice. As long as /u/munificent stays in the team, I have faith that the language will evolve in a nice way. I just want a data class, union and solid pattern matching. 
I still prefer TypeScript to Dart at the moment but Dart is improving nicely.
Desktop Flutter is still definitely alpha quality at this point though.
&gt; I just want a data class, union and solid pattern matching. I want those too. :)
If dart gets all those features, along with removal of semicolons , a solid ffi system, and flutter gets stable on the web and desktop, whoa! Dart is going to become immensely popular imo.
Ok .Just for clarification. Dart is chosen by the flutter team for the reason that dart has been out for longer than Kotlin or other new languages. Flutter is not the only platform that uses dart. This lang is used for backed and also front end web (AngularDart) . I don't recall the backend name but it is really nice one , with dart. 
&gt;I don't recall the backend name but it is really nice one , with dart. Aquaduct / Angel more than likely
Yes 
Dart has been chosen because it offered at the time what other languages couldn't.
And this is why I wrote Kotlin there . Kotlin can do now (or maybe surpass) what dart can do , but it is not the same statement if we try to talk in the past tense. 
Can it do AOT and JIT compilation?
Don't know. Mike might have the answer. “Kotlin Native” by Mike Hearn https://link.medium.com/aTT1X3EtgV
Older age isn't the reason. I believe Typescript, Golang or even Kotlin users is much more to dart. Dart is nice but choosing it isn't a wise choice since developers have to learn more Google language. Using Dart for Angular or Typescript for Flutter from the beginning is would be better
When I say older , I mean the time that it has been tested over other languages. 
It isn’t a problem. Dart, like swift pairing with cocoa (touch), seems to a good way to go. Dart is nice to use from a swift user perspective.
I think you missed my point, I didn't say that dart is bad in anyway. Rather than it's not that useful and in my opinion not necessary at all. Like the angular thing didn't work that much, typescript is way more nicer in angular. The only thing I found useful in dart was flutter, typescript would make it a bit in competition with the likes of frameworks like nativescript. To point out that learning dart would be a waste of time, I must say no. I Literally didn't pass through any standalone learning phase coming from JS cross Platform mobile dev. I must say dart and flutter gave me what JS frameworks couldn't with much more ease in learning, and even better debugging in some cases. &amp;#x200B; My question was more of the actual reasons for google to create a new language since they had GO, as well as the future dart has beyond flutter. 
The Dart team have detailed here why they went with Dart for Flutter https://link.medium.com/sDI2l2vugV Long story short, they evaluated several languages including JavaScript.
Neither is officially supported, I should mention
TS is JS. JS is simply not performant enough.
You believe each company should create just one language that can do anything and everything? Microsoft has created a good dozen languages, each with its purpose, and no one seems to think that's strange. Go and Dart are very different languages, with very different strengths and purposes.
That is actually true. 
I'm a little shy to go all in with stuff Google does. For the longest time I scoffed at Angular - until I worked at a shop specialising in it (v1-1.6). I then worked at a corporate and we used NG 2.x+ a lot - basically that and RN for mobile. HOWEVER! I think a fair bit of skepticism when it comes to Google is healthy. If their bet on Flutter doesn't pay off, they won't think twice about moving resources.
Wrong, Deno can compile TS to native, there's no proof that Dart can do better. This is performance of dart vs nodejs, there is no clear winner [https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/dart.html](https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/dart.html) &amp;#x200B;
The winner is pretty clear. When Dart wins, it wins big (up to &gt;50%). When Node wins, it wins small (~20% at worst)
The OP's question is about Dart without Flutter. There is no place for Dart . It's true. Dart on #23 Tiobe index [https://www.tiobe.com/tiobe-index/](https://www.tiobe.com/tiobe-index/) &amp;#x200B; \- Frontend: Angular Dart is quite quite small compared to React , Vue , Angular TS. \- Backend: We have Go, scripting: js, ts, python \- AI, ML: Python, go &amp;#x200B; I like Dart, but learning new language for using it on only for Flutter somehow itsn't interesting enough for everyone. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
according to wikipedia, the two languages are about the same age. plus, kotlin has the maturity of the java ecosystem behind it. so I just don't think that was the reason. listening to the flutter team, the reason was more about performance and hot reloading. I'm not sure of the subtleties of this answer, but maturity couldn't have been the major factor. besides, age is just a number. 
And JS is dynamic typed. Try with TS and Deno, i'm pretty sure that the performance is better. Performance isn't everything. Go is faster than Python 10 times, but Python is more popular than Go 10 times.
&gt;And JS is dynamic typed Was that supposed to be an argument for JS being superior? &gt;Python is more popular than Go for data science, sure. For infrastructure, Python is dying out quite quickly.
How do you know?
Dart language packages website (pub) is written in dart
It can't. Plus slow compilation. Don't know why language has so much attention, there are many other languages out there (at least for server). I was using kotlin since 0.88 and can say that it breaks from time to time.
Like dynamic typing is good...
From the OP: &gt; Beyond Mobile: Building Flutter Apps for iOS, Android, ChromeOS and the Web &gt; &gt; Flutter is a great way to build mobile apps for iOS and Android from a single codebase. This talk will live code a real-world app that runs on all of these platforms &gt; 
This is like saying an npm package isn't officially supported by Node/JavaScript which is just an extremely asinine and borderline meaningless statement.
I'm not sure the point you're trying to make but you sound like a junior dev/college sophomore.
It wasn’t a knock against Dart, FYI.
It seems like a silly thing to specify imo but to each their own.
Not sure what’s “asinine,” “meaningless,” or “silly” about it.
&gt;The winner is pretty clear. When Dart wins, it wins big (up to &gt;50%). When Node wins, it wins small (\~20% at worst) Wrong, look at Stackoverflow or Tiboe ranking, Python is no2, if it can be used only for data science, we are all data scientist. Python is being used for backend development much more than Dart. Need work on data, number not by your subjective opinion
Good or not is depends on what criteria, using static typed has its disavantage. Why don't you use C++ for all your things like web dev, frontend? 
You have no idea boi
&gt;You believe each company should create just one language that can do anything and everything? Microsoft has created a good dozen languages, each with its purpose, and no one seems to think that's strange. Go and Dart are very different languages, with very different strengths and purposes. Go is lack of OOP features, and that's why it can't be use for GUI development. I use Go everyday but must to say that's lacking of OOP or Generics makes me mad sometimes.
There are [some](https://github.com/visualfc/goqt) attempts.
Seriously, TIOBE? As for credible ways to measure popularity, just counting the number of search results for "$language programming" on a bunch of popular websites has got to be one of the worst. You know, imagine someone asking about Go on stack overflow. yeah that never happens nowadays because the documentation is fucking awesome and every possible question about language features has already been asked.
The TIOBE index oversamples unintuitive, hard and confusing languages because it counts the numbers of explainers, questions and general talk about the language. But the worse the language the more questions you'll have. And that leads to more questions.
Thanks for the hint! I understood that the site itself is a Flutter demo (which would be cool actually).
You know how to make it pay off? Use it, and get others to use it too. If you like a technology, the worst thing you can do is sit back and wait for it to become popular, while encouraging others to do the same.
I think that is a nice sentiment, but I don’t think applicable to a company with a track record like Google. People still use the Flux architecture &amp; HHVM - but Google seems to be glib about changing direction no matter what the buy-in. Ng1 was one of the most popular frameworks at one stage, and that didn’t stop them from changing things up.
Google did everyone a favor changing things up on Angular users. Angular 1 was a product of its times, and times change. Its architecture is terribly clumsy compared to what's possible with today's web. Personally, I'm a huge fan of Google's progressive approach to development, always pushing the boundaries. A side effect of that is that pretty often, technologies run their course and stop being the best way to do things. This makes conservatives nervous, I understand...but thankfully, I'm not one of those. I don't think the best thing to do is continue pouring resources into inferior tech for eternity. Constant improvement has a cost, I know, but I believe we should all be more willing to pay it together. If you're gonna be in tech, I think you need to accept that all our techniques are in their infancy, and be prepared for the inevitable, rapid pace of progress.
I would argue though that the reason React, Vue, Angular, and TS are so much higher up than dart is because JS has been around for a long time and used ubiquitously in front and backend. Dart may, as I don't have a firm grasp on the differences yet, offer something different than what JS has to offer. It's also fairly new, so skepticism about the longevity is healthy and warranted given Google's past behavior with new projects. 
I'm very much for progress &amp; a better way of doing things. However, VueJS is becoming more popular and it's very clearly reminiscent of AngularJS - or what it could have been. So no I don't believe new is always better because a large corporate says so. React's API has comparatively changed very little since launch. What I was saying, that I think you missed, is that I think a little bit of skepticism toward Google in particular has never been a bad thing.
Or Ember for that matter.
Actually, Dart is quite old compared to Rust. First version was released on November 14th, 2013, while Rust is May 15, 2015. Rust is now much more popular than Dart now. Like i said, it supposed to be better if Google chose Dart instead of Typescript or Angular. Before Flutter, Dart was dead for a while. Google failed to bring up Dart to replace JS on browser few years ago. Choosing a language to unify your framework is important. React does it so good. 
Both Python and JS were there for almost 20 years, why there are many new questions on Stackoverflow these days? They don't have good documentation? They are old as fuck but there are numerous of new question because they have largest community and have more user to use them. &amp;#x200B; I gave you the number, the facts, but your ignore it. You truly believe Dart can be used on backend more than Python or JS so i don't know what to say boi. &amp;#x200B; Not only TIOBE or Stackoverflow, any chart out there can show you Dart community is tiny compared to Python or JS. Open your eyes and look at the subscribers number of this group compare to JS or Python. You don't trust any community index, so what's kind of ranking you trust? Yourself? Lol. 
&gt;why there are many new questions on Stackoverflow these days? If you watched JS, you'd know it's still evolving and the massive amounts of (sometimes badly documented) libraries doesn't help reduce that number. Javascript from 2000 can't be compares to JavaScript from 2019. &gt;You truly believe Dart can be used on backend more than Python or JS I literally never said that. I just said that Go is winning a lot of market share on infrastructure. I didn't say anything about Dart's market share. &gt;Dart community again, you're completely missing the point of my comment. I was replying what you said about Go, not Dart. &gt;You don't trust any community index I sure do trust GitHub stats (or similar. anything that shows how much code is being written instead of how much people talk about it)
Thanks mate! I'll check it out. Appreciate your efforts 💙
I'm sad to report that I did not, in fact, miss that point. I'm trying to counter it. I don't believe it prudent to be automatically skeptical of anything just because Google is behind it, because I think their reputation for abandoning projects was born of an overreaction by conservative thinkers who don't really understand the process of progress at the pace Google pushes it. No one here believes Flutter is a better way of doing things because a corporation says so. We're quite capable of judging the technology on its actual merit. So my point is that when we developers believe an approach is a good one, regardless of who initially created it, we should be brave enough to jump in and help it succeed, rather than sitting on the sidelines, hoping it'll magically become popular enough to safely use. The sideliners defeat the tech and themselves with their conservative rhetoric, because not only are they not using and helping, but their comments scare others into passivity, as well. This is one way nice tools end up abandoned by their creators--they can't get enough people help them make it succeed. That said, sometimes it just turns out that, despite popularity, a particular technology ends up not being the best way to solve a problem. In that case, I'm glad that companies like Google have the balls move on and pour their resources into something more promising. Google abandons a lot of projects because they start more than anyone else. Their whole strategy is to try everything and see what sticks. I think they should be lauded for that, not condemned, and we should do what we can to help them make the world better.
Cheers Fleper!
How would using dart instead of angular work? I was under the impression that youd use dart with angular, not in place of. 
&gt; There is no place for Dart . It's true. Dart on #23 Tiobe index Kotlin is 39, TypeScript is out of top 50, so what's your point?
It depends on what chart. Stackoverflow most popular language 2018. Js #1, Ts #7 and Dart isnt in the top 30. https://hackernoon.com/top-3-most-popular-programming-languages-in-2018-and-their-annual-salaries-51b4a7354e06 Subscribers of Dart is 5.5k on reddit. And typescript is 13k and Js is 550k. 
Could you elaborate on what you mean by "break"?
When you add kotlin plugin and combine it with annotation processing it likes to break. There was known issue with dagger, and retrolambda. It also likes to break with multimodule project. Sometimes when you have problem with code, Android studio will show "kotlin compiler has failed" error only, then you need to go and run Gradle from terminal with verbose option. Also, it might be fixed now, but annotation processing wasn't cashed for kotlin classes.
Here's Part 2 [https://www.reddit.com/r/dartlang/comments/b5ppvm/angulardart\_tutorial\_lets\_build\_a\_bookmark/](https://www.reddit.com/r/dartlang/comments/b5ppvm/angulardart_tutorial_lets_build_a_bookmark/)
This is actually a great gateway into how the OSs of the world are evolving. Great read! Ty
You can write another front end for the Dart VM (I have a project like this; if you want, I can link it). You’ll mostly need to use package:kernel and package:front_end, and emit Dart kernel files (.dill) from user inputs. These kernel files can be directly run in the Dart VM. From what I can tell, different versions of Dart kernel IR are not backwards compatible with old versions of the VM. Using the latest package:kernel might give you an “InvalidKernelVersionError” if you try to load some of the sources in $DART_SDK/lib, i.e. vm_platform_strong.dill, so in my experience, I’ve always had to pin to a specific version. Also, I haven’t found much documentation about pkg:kernel/pkg:front_end, so basically all of my exposure to it has just been side projects and hackery. So, there may be some things I’m missing in my response.
Please link it :)
https://github.com/thosakwe/bullseye
Thanks, going to check it out!
It's definitely possible, as thosakwe said. It's hard to compare the Dart VM to the JVM. Java is **hugely** popular and is **everywhere**. Dart has struggled in its efforts to be popular. Really it comes down to popularity and ubiquity: Java has both, while Dart doesn't. In the future? Maybe that changes in the future, but for now, don't bet on it. 
There is already a project going for flutter apps to run natively on desktop, you can check it on [Github](https://github.com/google/flutter-desktop-embedding) There’s also [Aqueduct](https://aqueduct.io) , for server backend, and Google’s working on something else called Hummingbird.
Also plugging [Angel](https://angel-dart.github.io) as a server backend 
Unless you're doing something unusually compute heavy (in which case you should be splitting off critical code to a faster, lower-level implementation), I don't think the DartVM adds that much overhead. [See this GitHub thread with a similar question.](https://github.com/dart-lang/sdk/issues/34343) A dart lead developer replies that AOT is not part of the SDK, and argues that JIT compilation, by being able to optimize itself with the workload, is actually faster than AOT.
For writing servers JIT is perfectly fine for the vast majority of use cases. In the rare cases with very heavy loads, like say +10,000 req/s, Go is probably a better candidate unless you want to write the AOT compilation for Dart yourself (which some people have done). Anyway, AOT for the Dart CLI is being worked on. This is a comment from 9 days ago: &gt; We're working on packing this up to make it more approachable. I can't offer a timeline, but we are making good progress! https://github.com/dart-lang/sdk/issues/34343
The programming language Ceylon can/could? be compiled for DartVM as target. https://github.com/jvasileff/ceylon-dart
The technology is all there. As you note, deployed Flutter applications are fully ahead-of-time compiled to a native executable. But we (I'm on the Dart team) haven't built all of the tooling and stuff to make it easy for a typical Dart user to AoT compile their app yet.
I guess the only compelling reason to have AOT is when running on embedded devices or tiny ones like the Pi. Even then, it’s arguable if you really need AOT. 
Recently finished the course. I must say, it's by the far the best one I've seen. Thanks a lot mate for putting all your efforts crafting one. 🍻 Looking forward to more dart &amp; flutter stuff ❤️
Also on cloud functions to get faster cold start times.
Thanks a lot! This is exciting, I hope it will be there soon. Please pass my regards and "job well done!" to the Dart team, you guys are doing great 👍
Thanks for all, I'm giving [https://github.com/Jaguar-dart/jaguar](https://github.com/Jaguar-dart/jaguar) a try, it seems cool so far.
Could I ask if you could share any technical guides if available, I would love to give it a try.
I don't know if we have anything written down, but I'll see what I can find.
Dart is very easy to pickup. Never fully understood what the big deal is with learning Dart. It also gets us Flutter.
There's nothing official or supported yet, but the comments in this issue should get you started on how to compile a Dart program to a native executable: https://github.com/dart-lang/sdk/issues/34343
&gt; Never fully understood what the big deal is with learning Dart. This was never the issue. Programming languages are easy to learn. Dart simply lacks the features of a modern language. I already know Java, but I don't want to write Java because the language lacks the toolset to efficiently do my job. This is why I write Kotlin. Dart, as a language, is a big step back from Kotlin, Swift, Typescript, Rust, etc. Flutter can be 👍👍, but I don't want to write Dart because it lacks features I expect from a programming language.
Doesn't matter, what matters is... NO DART JOBS. 
Don't worry...the features are coming.
Create jobs! Build business around it?
This is very nice, but sadly, we can't use mirrors in most of the places Dart is used (client code).
Just saw an article yesterday Flutter is was of the hottest technologies. Which would mean Dart. Here is another one "LinkedIn Data Says Flutter Is Fastest-Growing Skill Among Software Engineers" https://adtmag.com/articles/2019/03/29/linkedin-skills.aspx
The new keyword is optional (as of Dart 2) when used before a constructor call, and also the const keyword is optional, if used in the correct const context. I don't think there are any differences under the hood, but it can create less verbose looking code especially in places where you will call constructors a lot (like Flutter).
I have been slowly shifting not to use new; thank you for clarifying that I didn’t started a bad practice.
You can activate the lint [unnecessary_new](http://dart-lang.github.io/linter/lints/unnecessary_new.html) if you want to get analyzer warnings about it. If you want to remove all new/const where they are not needed you can run `dartfmt --fix -w .` ([more information](https://groups.google.com/a/dartlang.org/forum/#!msg/misc/U_lDlVwYOV0/DE8DG-osBgAJ))
I regret I have but one upvote to give.
tl;dr there aren't many well done sources of information for learning programming, if you mimic the digital ocean style of tutorials, you'll be the best, hands down. &amp;#x200B; Let me tell you, I'm very grateful to you, and to anyone who offers resources on the Internet for free, so this is /not/ a complaint, I'm just trying to give you feedback. &amp;#x200B; I'm trying to learn DART, and programming in general, and I've been fooling around with various servers and Ubuntu and command line for a very long time, and it's incredibly difficult because I have to hobble together knowledge from many different blogs (often outdated) ubuntu forum posts, stack overflow answers, etc. The hard part is there is always a step that the author of the blog or video skips over that I then have to google to figure out, and it often takes me longer to figure that step out then it does to do the rest of the tutorial. &amp;#x200B; I'm using spacemacs, and not VS code, so when I get to the part where you "Use stagehand" at about 1:35, you do a bunch of automated stuff that is totally foreign to me. So I tried messing around, going to your git page to get the source code, mess around with that to get it working in spacemacs, and failed. &amp;#x200B; Then I thought, "Okay, I'll download VScode and just follow exactly along with him," but then I ran in to the problem of "time to learn VScode". I watched the whole video to get an idea of what's happening, but the fact that I'm lost at 1:35 means I can't replicate everything you are doing, thus I can't actually make the web app. &amp;#x200B; The **best**, and I mean far and away **best,** tutorials I have ever encountered in 15 years of messing around with linux and servers and stuff is at digital ocean. &amp;#x200B; Something like [this](https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-ubuntu-18-04) is a tutorial that will take someone from absolute 0 to full understanding. Even if there is too much information for the reader, and they are already familiar with all the steps, it's useful to have them there. &amp;#x200B; Also, if you have *every step explained*, when someone is trying to google another problem they have, they'll end up at your page, discover that you have the best tutorials and will likely stick with whatever courses you setup. &amp;#x200B; I think if you do tutorials in this digital ocean style, you'll be the #1 stop for DART (especially because there is so little learning information about dart). &amp;#x200B; I for one would be your Patreon in a heartbeat if you did that. &amp;#x200B; Also, if you wanna make a real course for absolute beginners, [this](https://javascript.info) is the best programming tutorial I have ever come across in any language. &amp;#x200B; Please keep up the good work!
Hahah good one, dart community is tiny compared to js or python, for example let’s just see on reddit itself, r/dartlang has 6k subscribers where as js has 500k. Dart is being used for flutter nowadays, without it I don’t think it’ll survive for long. I wish flutter team should’ve gone with typescript/js
Thanks so much for your detailed feedback. I did assume that in general people would be familiar with VS Code. There are step by step tutorials on [my blog](https://creativebracket.com) and I do have [this bare-bones tutorial](https://creativebracket.com/generate-the-scaffolding-for-your-next-project/) for setting up a project using Stagehand. I do like the DigitalOcean style tutorials, which has helped me set up a droplet with them. Thanks for considering my Patreon community. I would encourage you to go for it, that way I can work on improving the content and creating more detailed programming tutorials.
You can check out this guide for how to make use of it. [https://medium.com/dartlang/darts-built-value-for-immutable-object-models-83e2497922d4](https://medium.com/dartlang/darts-built-value-for-immutable-object-models-83e2497922d4)
&gt; I don't think there are any differences under the hood You are correct. The `new` keyword was never ever meaningful in Dart so we made it optional. (We would have removed it entirely, but that would have been a massively breaking change.) If you use dartfmt, it can remove them for you: $ dartfmt --fix-optional-new -w files...
Typescript is a shit!
&gt;pub global activate webdev This worked for me! Thanks!
Question, What can dart be used for except flutter ?
Transpiling to JavaScript
For web, either using Dart's regular built-in HTML interfaces, or using AngularDart. And it can be used for writing server-side programs or command-line utilities, since it runs in its own virtual machine. Meanwhile, Flutter apps work on iOS, Android, and Fuchsia now, but soon that will extend to web, Windows, Mac OS, and Linux.
are there benefits to this ?
So basically Dart is aiming for one programming language for creating apps on Web, Mobile and desktop ?
I suppose so. By transpiling to JavaScript it does a better job than Java on the front-end web (Java as a web front-end has been dead for a while). In mobile, it has flutter which is cross-platform. Desktop seems the weakest here. The command line is there like pretty much all languages, but I'm not aware of anything like Swing or Java FX.
Well there's [this](https://feather-apps.com/) I don't know good it is but it shows that atleast dart for desktop is possible using flutter
Dart I'd typed language so you will get better compile time checks.
Java on the web is a nightmare. And personally, I like the Dart language a hell of a lot more than Java. Also, if there's a way to do an iOS app with Java, it can't be good....
I am currently on a path of learning full stack web dev (php,node) as my base then flutter for cross platform apps.. I wanted to learn another language so I thought of learning Java . I thought it was mainly used for webapps and android development but now that I hear it is a nightmare what is the actual main usage of java on the field ?
These days, Java is mainly used for server-side apps, Android apps, and desktop apps. Basically everything but web and iOS. Honestly, my favorite "stack" these days is Dart all the way down. I create web apps with AngularDart, and if I use the BLoC pattern, I can directly share about 70% of the code with a Flutter app, which currently targets only mobile officially, but Google is working on web and desktop targets for Flutter. If I need server-side scripts, I use Dart again, but pretty often I use Firebase as a database, which keeps me from needing any back end code at all.
is there a vue dart equivalent ? because I use view
You can use [Vue with Dart](https://pub.dartlang.org/packages/vue), but honestly, I like the full solution ANgular provides quite a bit better.
But my commas are automatically removed in VSCode?... and then the braces still line up like in OP's first example.
Awesome. Thanks George. You're a treasure.
I thought they were only AOT on iOS. On all other platforms, it runs inside the Dart VM.
Nice! Any chance you could share some screenshots, here or in the repo?
Sure, I'll spruce up the README a bit more. Good call.
Hey... When using this technique to listen for keys as they're typed, you get integers. Are there a set of constants defined to translate these? Something like the `KeyCode` stuff in `dart:html`?
It takes a function as a parameter. That function will be called in every element of the list, and you will get back the iterable of these results, in the same order as the original list. If you need a list and not an iterable, just call .toList() on it. So, something like `[1, 2, 3].map((el) =&gt; 'x $el').toList()` will give you a list of strings: `["x 1", "x 2", "x 3"]`.
why we use (el) with ' () ' ? 
el in this case is just short for element. You can change the el, it’s just a name for the current element of the list that’s passed to that function
Thank you!
No problem :)
Did you try reading the documentation?
I will.
Also, that wasn't meant to be ride, it's just that Dart and Flutter have really good documentation which is surprisingly helpful
Do you mentioned this site? [https://www.dartlang.org/guides/language/language-tour](https://www.dartlang.org/guides/language/language-tour) 
That one, and the one for List, and the one for List.map. Do some searching and see what comes up. This was the first result for "dartlang list": https://api.dartlang.org/stable/dart-core/List-class.html
Hey ardagoren, If you wish for the numbers to differ from one another, you could use a `Set&lt;int&gt;` to help with that as it ensures there aren't duplicates. import 'dart:math'; void main() { Set&lt;int&gt; numSet = {}; while (numSet.length != 10) { numSet.add(createRandomNumbers()); } print( numSet.toList() ); } int createRandomNumbers () { int randomNumber = Random().nextInt(60); return randomNumber; }
Check this out: [https://stackoverflow.com/questions/52017389/how-to-get-the-claims-from-a-jwt-in-my-flutter-application](https://stackoverflow.com/questions/52017389/how-to-get-the-claims-from-a-jwt-in-my-flutter-application)
what growth?
Thanks. This is exactly what I needed.
But y tho.
Dart wasn't on last year's
You could say this about any new project, when an incumbent already exists. I see no harm in someone starting their own project... Besides, there doesn't just need to *one* option.
I'm not arguing they don't have a right to develop. But a project doesn't exist in a vacuum. There's no context to this post, no use case better served, and no vision I can see to a path that would encourage adoption. I think those are always valid questions to ask when context is missing. This is polished enough to have examples, testing, and a readme. It's based on a JS reference spec/implementation. They spent a lot of time and effort, which implies a desire to broaden adoption and not an exploration of an idea alone. But why? Why would a developer use this over other options irrespective of maturity? Where does this fit in the ecosystem, or in a dev toolbox? Genuinely, how does this solve a problem for your end user? Those are tough questions, and uncomfortable, but absolutely necessary if that effort and care should translate into developer use and engagement.
We have no universal tool for all tasks (except postgres :) and existense of `sqlite` doesn't mean what we don't need anything else. For me some points makes sense. Performance for example. As response to you I've tried to create sample program which inserts `1M` JSON records and compare times to `sqlite`. ```dart import 'package:ejdb2_dart/ejdb2_dart.dart'; void main() async { final db = await EJDB2.open('mydb.db', truncate: true, wal_enabled: false); for (int i = 0; i &lt; 1000000; ++i) { await db.put('mycoll', {'name': 'foo${i}', 'score': i}); } await db.close(); } ``` ``` time dart lib/ejdb.dart real 0m24,147s ``` I've tried to find a native sqlite binding to compare, but failed - did not managed to run any program on with current `sqlite2`, `sqlite` pub packages for latest stable Dart 2.2. About what ecosystem do you speak?
Oh I see, that's a progress
I forgot that you need to compile a native dart module as part of SQLite support. This works without effort for flutter with sqlflite since it's provided for by Android and iOS, but you're right that SQLite support is not great in the dart VM right now. What platform/OS are you on? The story around compiling native is not great unless it's Linux. For that I use the dart runtime image with sqlite3-dev installed, and call make in sqlite2 in pub cache after the pub get as part of the dockerfile. I agree, not great. Postgres or firebase would be better choices than SQLite outside of Flutter. In light of that, I can see a use for something for rapid prototyping that's less heavy than a full database. Are you the package author?
&gt; The growth is amazing... Really? amazing? 1,9%? Since 2012...
Hi! For me it is imposible to integrate any native app into Flutter effectively, with reasonable efforts. All what we have in Flutter: `flutter code &lt;-&gt; platform channels &lt;-&gt; JNI binding to native lib` (Android) which leads to terrific allocations/copies for every simple call and poor performance. Yes `Dart VM ffi` on its way, waiting =) I think this library will be usefull for cases where application business domain is not complicated, for example key-value storage, gathering statistics, trading=), managing game state, all cases where strict database design with relations just eats developer's efforts and performance. &gt; Are you the package author? Sure
These guys answered you very well. I just wanted to point out something to make your life easier. It's much easier to share a screenshot of your code to get answers than to take a picture with you phone. If you're new to programming you are going to want to take screenshots often. There are many tools to choose from and even some built in to your OS. &amp;#x200B; I see you're running ubuntu. &amp;#x200B; 1. Open **Screenshot** from the Activities overview. 2. In the **Screenshot** window, select whether to grab the whole screen, the current window, or an area of the screen. ... 3. Click **Take Screenshot**. ... 4. In the Save **Screenshot** window, enter a file name and choose a folder, then click Save.
FYI, your topic is posted in the Dart *programming language* subreddit.
r/lostredditors
It’s a spam bot
Cool reviews you have got. ;)
Thanks
Good job! Can you tell which API did you use to check for the episodes?
You can try something out of vscode. I use grip (a command line app) to visualize markdown files.
I will try Grip. Thank you. Not even the Dart Markdown library views their own files correctly [https://dart-lang.github.io/markdown/](https://dart-lang.github.io/markdown/) thanks.
Not just a viewer, but maybe related: [Typora](https://typora.io/) is the greatest Markdown editor I know of.
Thank you for this. It is definitely the best output yet...but still not perfect. The issue in this viewer is with sections that start with `&lt;?code-excerpt replace="/([A-Z]\w*)\d\b/$1/g"?&gt;` these dont display correctly. The only thing I found that mentions these is here [https://github.com/chalin/code\_excerpt\_updater](https://github.com/chalin/code_excerpt_updater) &amp;#x200B; any other ideas I should try? thank you.
I'm a maintainer if the Dart Markdown package. Can you elaborate on how the the Library Tour doesn't get rendered correctly? Thanks!
I downloaded [https://github.com/dart-lang/site-www/blob/master/src/\_guides/language/language-tour.md](https://github.com/dart-lang/site-www/blob/master/src/_guides/language/language-tour.md) and tried opening it in several viewers. &amp;#x200B; Here is how nice it looks on the browser ( [https://www.dartlang.org/guides/language/language-tour](https://www.dartlang.org/guides/language/language-tour) ) &amp;#x200B; [https://www.dropbox.com/s/xb7qgmru5m7ssfd/Screenshot%202019-04-16%2020.37.42.png?dl=0](https://www.dropbox.com/s/xb7qgmru5m7ssfd/Screenshot%202019-04-16%2020.37.42.png?dl=0) &amp;#x200B; this is what it looks like in VSCode native markdown preview....no plugins. [https://www.dropbox.com/s/d5b7iwccm7zftwd/Screenshot%202019-04-16%2020.38.26.png?dl=0](https://www.dropbox.com/s/d5b7iwccm7zftwd/Screenshot%202019-04-16%2020.38.26.png?dl=0) &amp;#x200B; with the typora markdown viewer macos program [https://www.dropbox.com/s/m5hrfj4phai3olg/Screenshot%202019-04-16%2020.39.07.png?dl=0](https://www.dropbox.com/s/m5hrfj4phai3olg/Screenshot%202019-04-16%2020.39.07.png?dl=0) &amp;#x200B; and finally with the dart markdown live editor from [https://dart-lang.github.io/markdown/](https://dart-lang.github.io/markdown/) &amp;#x200B; [https://www.dropbox.com/s/i2434c651ire9rf/Screenshot%202019-04-16%2020.39.57.png?dl=0](https://www.dropbox.com/s/i2434c651ire9rf/Screenshot%202019-04-16%2020.39.57.png?dl=0) &amp;#x200B; &amp;#x200B; none of them look like the browser one. Maybe I need to download more than that md file? plugins? something? The code looks bad on all, but even the normal formatting looks weird in most. &amp;#x200B; hopefully these examples give you and idea of whats going on. &amp;#x200B; thank you!
Ah. That is not a valid Markdown file. Or rather, \`&lt;?code-excerpt "misc/test/language\_tour/basic\_test.dart"?&gt;\` is not any sort of markdown. So markdown parsers/renderers cannot do anything with it. It uses code\_excerpt\_updater to replace those with content from other files in the filesystem (another thing Markdown doesn't do). &amp;#x200B; I'd follow the [README's](https://github.com/dart-lang/site-www/blob/master/README.md#before-you-build-this-site) building steps in order to build the Language Tour HTML file. If you build it once, there might be an intermediate Markdown file in \`./dart\_tool/\` in the site-www repo's root directory, which has all of the excerpts replaced, producing a valid Markdown file.
did you try following the instructions?
No, not yet. I just read the comment that mentioned the instructions. I had no idea that a .md file required to execute scripts. I will do it this weekend.
I didnt even bother to check the other files, I assumed .md was just a file you could open on a viewer. Thank you for this. I will try it this weekend.
the dart repo has instructions on how to serve the site locally
Yes, a message by u/samrawlins pointed me that. I will try to install whats needed this weekend., but it will be a "for educational purposes only" exercise. My initial intention was to just have something like a PDF file which I can read offline on any device. I live in an area with pretty crappy internet. thanks for the tips!
Just save a html copy from the website
Eh
Why?
Because Swift, Go and plenty others. I enjoy those languages more unfortunately I can't use them with Flutter.
And if it's optional, like in Kotlin, we can both be happy. Best of both worlds.
Dart absolutely should not add optional semicolons. How would that benefit developers? Applying dart format could change execution behavior, and resolving ambiguities would increase complexity and surely compile times. Why would anyone want python behavior where you need to escape newlines in expressions? Is dropping those winky boyes at the end of the line that time consuming? That proposal reads like "k so this is a bad idea but hear me out..."
In the big list of things the Dart devs could be working on, optional semicolons ranks very low for me.
Good!
As a huge fan of semicolon-less languages... ...I'd much rather them focus on non-nullable types and stuff like FFI, really this isn't the end of the world...
Nah.
Not sure that's should be devs priority... Or the priority for those who create plugins for IDE...
Just like in javascript, it's like you are passing the reference to this function. You can then call it from the receiving function and pass any parameters to it that you would like.
The parentheses are a signal to the language that something should be executed, so `myFunc()` is saying, "Execute the function found at 'myFunc'." A function in Dart is pretty much like any other variable. The name alone is a reference to the function code, just as you refer to an integer value with the name of its variable. Sometimes it's useful to pass an entire function as an argument to another function. This is when you'll most often see a function's name without its parentheses, since you won't want the function executed as it's being passed.
I don't know whether I'm actually against optional semicolons, but this is a naive argument. If you believe code without semicolons is confusing or difficult to read, you're gonna have a hard time in a language where they're optional. Very few of us have the luxury of only needing to read our own code.
So mine function will be passed as a value not as an executable?
That's actually a really good point...
This is called a [tear-off](https://www.dartlang.org/guides/language/effective-dart/usage#dont-create-a-lambda-when-a-tear-off-will-do).
Basically, though it can be executed later. Here's a simple (and not very useful) example: void main() { print(doMath(5, 2, add)); print(doMath(5, 2, subtract)); } int add(int a, int b) { return a + b; } int subtract(int a, int b) { return a - b; } int doMath(int a, int b, Function operation) { return operation(a, b); } Here, you can see that `doMath()` takes a `Function` argument, so you can make it either add or subtract the integer arguments passed in. You can [specify a particular function signature](https://www.dartlang.org/guides/language/language-tour#typedefs) for your `operation` parameter using Dart's `typedef` feature (and you usually should), and that will ensure executing `operation` will work correctly. But the main point here is that when you execute `operation` by adding parentheses, it runs either `add()` or `subtract()`, depending on which function you've passed in.
Here's another way you can play with function references: void main() { Function doMath = add; print(doMath(5, 2)); doMath = subtract; print(doMath(5, 2)); } int add(int a, int b) { return a + b; } int subtract(int a, int b) { return a - b; } As you can see, a variable of type `Function` acts essentially like any other variable type.
Thanks ..Now, I got it
that is terrible terminology. i hope they dont try to push it
It's a form of [point free programming](https://en.wikipedia.org/wiki/Tacit_programming). I'm not sure this terminology is more helpful though..
**Tacit programming** Tacit programming, also called point-free style, is a programming paradigm in which function definitions do not identify the arguments (or "points") on which they operate. Instead the definitions merely compose other functions, among which are combinators that manipulate the arguments. Tacit programming is of theoretical interest, because the strict use of composition results in programs that are well adapted for equational reasoning. It is also the natural style of certain programming languages, including APL and its derivatives, and concatenative languages such as Forth. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/dartlang/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
no, i mean "tear off" is a terrible name for the concept
Yep I agree, it's the first time I read this term actually.
Just to add to this, you don't need to use a `typedef` to specify the function signature ([there is even a lint, if the typedef is private](http://dart-lang.github.io/linter/lints/avoid_private_typedef_functions.html)), and you can just declare the `doMath` function like this: ``` int doMath(int a, int b, int Function(int, int) operation) { return operation(a, b); } ``` This also works when assigning variables, like in your other comment: ``` int Function(int, int) doMath = add; doMath(1, 2); ```
Yes. Great tip!
It is a really cool update! If condition in collections and "?...", "..." operators were my dream 😊
I wonder if the spread operator will work for Maps as well.
Yes, it does! All the new syntax works across all collection types, including the new set literals. When you spread into a list or set, the thing you spread has to be an Iterable of some kind. When you spread into a map, the thing you spread has to be a Map: var stuff = { "a": 1, "b": 2 }; var more = { "c": 3, ...stuff, "d": 4 }; print(more); // "{c: 3, a: 1, b: 2, d: 4}".
Read more [here](https://medium.com/dartlang/making-dart-a-better-language-for-ui-f1ccaf9f546c)!
I find semi-colons really useful as they mark the end of a statement clearly, there is no wondering, if it is there, it means end of statement, this would be a huge waste of time to implement, focus on something more productive
Exception are part of your codes interface and contract. Also, exceptions should be exceptional
That’s a truism that’s not necessarily representing the totality of the problem. Exceptions and errors can and should be used for flow control, if that’s the best way to solve the problem at the time.
You don't need to create a widget Alert. You just need to call a function called showDialog and return AlertDialog on the build function. [Sample](https://docs.flutter.io/flutter/material/showDialog.html)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/flutterdev] [New to dart, need help with code](https://www.reddit.com/r/FlutterDev/comments/bfnx6k/new_to_dart_need_help_with_code/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Not an expert, but I think it doesn't make a difference other than code structure. Do note though, if the Future completes before there is something to catch it, it's still unhandled. This is more likely when using Future.catchError than async/await.
&gt; JSON does not limit its numbers to 64 bit I think a more accurate statement is that JSON does not specify whether an implementation limits numbers in any particular way. A valid JSON implementation can require numbers to be 64-bit, 32, etc. Certainly JSON does not *require* numbers larger than 64 bits because JSON was based on JS, which only supports integers with 53 bits of precision. You are calling APIs that are returning integers larger than 64 bits but encoded as numbers, not strings? That's pretty surprising. I think *most* JSON parsers won't handle that.
JSON does not, but JSON types are based on JS types and JS integers are limited to a number that is significantly below the number they wrote in the bug report.
&gt;JSON with integers that may overflow darts 64 bit integers. that's not JSON, that's something that looks like JSON but isn't actually JSON
&gt; JSON types JSON doesn't actually specify types, just a syntax. It leaves it up to the implementation to define what values the syntax maps to.
What the other guy said, but the reason this isn't working is the state is long lived, so it get created with visible=false and doesn't change. What you want is to use widget.visible and not recreate it in the state. (in fact, it should be stateless, and include a onDismiss parameter to the widget that the parent can use to set visible=false)
Can you please provide an example ? This is all just new to me. I have known react and this is way different than that so it's very hard for me to understand.
newbie question... how do we update dart? mine is stuck on 2.2.0. thanks!
So helpful
Thanks for reply! I have test and I think it does make difference. If I wrap `await someFuture();` in try/catch it handle error. But if just wrap call to method `await exampleMethod();` it not catch error.
The difference is the abstraction level. If you target the `http` package's API, your code can work multi-platform--on web and mobile, for instance. This is because the package supplies a wrapper around each platform's specific HttpClient implementation. So basically, your app code can target a platform-neutral intermediary and avoid becoming platform dependent. Make sense?
HttpClient is the lower-level API for doing HTTP stuff in command-line/server applications. It's built directly into "dart:io", which is part of the standalone VM (and I think Flutter has it?). It does not work in browser apps. The [http](https://pub.dartlang.org/packages/http) package offers a simpler, higher-level API for doing HTTP requests. Using some clever imports, it works on both the browser, server, and Flutter. I prefer using the package when possible. It's simpler and has a really nice, well-designed API.
Looks interesting, i will take a look
Why do you need a key at all? If you had a Data class, you could just do emitsInOrder([SomeStatus.a, Some status.b, Data("a")]) In your app, instead of testing the key, test the runtimeType.
Even though that may not occur often, the problem with that would be that if multiple streams had the same Type, then it wouldn't be obvious which stream a value belongs to. The error and done events should also be expectable and the same problem applies to them too or at least I don't see a different solution. But thanks, you're right that I could use the stream itself as a key.
Have you looked at the **mockito** testing library? Its got a way of checking verification in order: [https://pub.dartlang.org/packages/mockito#verification-in-order](https://pub.dartlang.org/packages/mockito#verification-in-order)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/flutterdev] [Isolate.send max amount of data](https://www.reddit.com/r/FlutterDev/comments/bhk3os/isolatesend_max_amount_of_data/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I haven’t seen any documentation indicating a message size limit, but maybe the mobile system just doesn’t have enough memory for that? You can, though, send it in chunks.
Or what about save it as a file and then pass the file name?
Ohh, by the way, first post :)
Whooo! Congrats
Would love official ffi for Rust. Dart + Rust would be absolutely insane.
&gt; I wonder, is this the time, that we — end-users — start seeing the benefits of this multi-year effort? That is the goal, yes. We still have a lot of technical debt to get on top of from the move to Dart 2.0, but our long term goal is to have a single clean front end so that we can evolve the language faster by not having to re-implement each feature several times (which is what we had to do before Dart 2.0).
Awesome! Keep up the good work. I really appreciate Dart.
Any reason to not use \`await\`?
Thanks for sharing that Anjan. I would suggest thinking of Tobe's suggestion on introducing \`async/await\` to improve readability. I would also suggest trying to display smaller code samples and building on top with explanations of the additions. Pasting huge chunks can seem overwhelming for those not familiar with Dart. I say this because its feedback I've received.
I don't think semicolon removal makes sense for dart. Specially not on flutter, where colon is so common and a good practice. Removing semicolons with all of those colons would be weird and hard to read.
Just a matter of preference I guess. My main language right now is Go, but I also write Kotlin and typescript (optional semicolons) so it’s what I’m used to.
Just a matter of preference I guess. My main language right now is Go, but I also write Kotlin and typescript (optional semicolons) so it’s what I’m used to.
Nothing special, but I should have used it.
Thanks Jeropp for your valuable feedback. It's really a good point that you've made, I should put smaller code chunks with a bit more explanation. Will try to put that into work on my next article .
Can you point out the problem?
Why is this embarrassing? Apart from the signature clash, it runs just fine.
It's considered a beginner's code to write \`if-return, else-return\`, as opposed to \`if-return, return\`. e.g. String playerName(String name) { if (name != null) { return name; } return 'Guest'; }
And this is relevant to point out on Reddit because? If you don't agree with the content on the webpage your could fill out a issue on the Github or make a Pull Request: [https://github.com/dart-lang/site-www/blob/master/src/\_guides/language/language-tour.md](https://github.com/dart-lang/site-www/blob/master/src/_guides/language/language-tour.md) [https://github.com/dart-lang/site-www/issues](https://github.com/dart-lang/site-www/issues) But I guess it is easier to just point out something instead of taking the responsibility to change it.
Wow you sure showed Dart by pointing out how embarrassing this little mistake (not even a mistake) is!
I wouldn't call it embarrassing. For the particular section, it might even improve readability. That section is intended for the programmer, who does not understand what '?:' means. The whole point is to flesh out what conditional expressions do, and that has two separate expressions of equal importance. But if you arguing for that pattern, you should have it the other way around, so your guard block for the error case comes first: ```` String playerName(String name) { if (name == null) { return 'Guest'; } return name; } ```` But then again, the whole section is trying to get you to only have one return statement...
Not sure what you mean, you should know where the value comes from because you specifically listen to a stream. Maybe I need the use case to understand what you mean.
Invoking `querySelector()` returns null since it cannot find the generated selectors, which is why attempting to access a `text` property on a null type throws. Whatever you pass into `querySelector()` has to exist already on the web page.
You could create them first by doing something along these lines: ``` var itemNameElem = DivElement()..id = 'item-name-$x' ..text = valuesMap['name']; querySelector('body').append(itemNameElem); ```
So after creating them using your above method, should I call them in the html side of things by using: &lt;div id="item-name-1"&gt;&lt;/div&gt; &lt;div id="item-name-2"&gt;&lt;/div&gt; and so forth?
Thanks for working on Dart! It is great to see it being so actively developed. Do you guys have any plans to publish or commission a book about Dart 2? Your documentation is pretty good, but an intro book would make the language more accessible to beginners. (Flutter's documentation is super confusing and I hate it with a passion).
No book plans that I know of. Writing a book is a ton of work, and it takes a special soul to volunteer for something like that.
Using the code sample above should give you those div elements.
I'm not sure if this is the best practice or not but I'm calling them through the above method. Unfortunately, the snippet you provided didn't work is it possible to iterate through a first loop that initializes them and then have a following one that populates it with the corresponding data?
Here's a working example: ``` import 'dart:html'; void main() { var itemsList = [{'count': 156, 'name': 'AA'}, {'count': 132, 'name': 'AB'}]; for (var x = 0; x &lt; itemsList.length; x++) { var itemNameElem = DivElement() ..id = 'item-name-$x' ..text = itemsList[x]['name']; querySelector('body').append(itemNameElem); } } ```
Nice list to have. I will bookmark it and try to use some on future
My guess is that the input is choking because when it first loads, the selections don't yet exist (they are `null`). You may need to load your data from Firebase, create you options, _then_ programmatically assign those options to the input.
Frankly there doesn't seem to be much curation in this list. Its largely a collection of samples much lick /r/flutterdev. &amp;#x200B; Here is a nice curated list that I go to often. &amp;#x200B; [https://github.com/Solido/awesome-flutter](https://github.com/Solido/awesome-flutter)
Thanks for the share! Appreciate it.
Just as an FYI, at a glance, if you build Dart from source, there should be a libdart_precompiled_runtime_for_linking.a that I think can be linked with one of the aot compiled assembler files.
Really nice article, most of it's content should be elevated to the Dart documentation :). Is there a way for interoperability between Bullseye and Dart, would kernel allow such thing? What about hot reload?
Your stuff is great for building backend API's when I'm designing and building my Flutter app. &amp;#x200B; Much appreciated, man!
When I first read it: Dart and Flutter in Facebook. RIP React? 👏😁
 allowedExtensions.any((ext) =&gt; fileName.endsWith(ext)) See [https://api.dartlang.org/stable/2.2.0/dart-core/Iterable/any.html](https://api.dartlang.org/stable/2.2.0/dart-core/Iterable/any.html)
`allowedExtensions.any(fileName.endsWith);`
[dart.dev](https://dart.dev) is pretty awesome
Indeed!
I wanted this. Great news!
Even more syntactic sugar
Everyone wants it, whether they know it or not. ;)
If flutter can compile into Web iOS Android it would be insane
Next is MacOS, Windows, and Ubuntu. Down with Electron!
*It can*
https://github.com/google/flutter-desktop-embedding
Yes, but still unstable, work places doesn’t like this idea of not enough online resources to support.
🙏
Oh, I never realized that method references in Dart worked with instance methods too! Very nice!
And desktop
It is really cool news. Android/IOS/Web, what will be next?
Desktop support. :)
If flutter will use native API for every Desktop platform - it will be possible for him to kill electron)
Yeah, coming from JavaScript it took me a while to get used to them as well. They're called "tear-offs" and are a tiny part of the reason why I prefer dart over JavaScript (or any JavaScript derivative).
Is it Hummingbird "rebranded" or a different approach?
Would dart:io stuff work the same? Where would a file go in a browser? Can you access raw sockets in a browser? Sorry not web developer.
I have a vision of something new :) like web browser is for web apps, Java Webstart is for applets, there could be a Flutter-browser for Flutter apps. You type internet address, an app is being downloaded to the client's PC (only a stub like SPA app, additional resources later) and ran inside dedicated cross-platform container/vm. Http replaced with something... fresh? for sure RPC instead of REST
Would it possible to write in example web-based platform game in it?
web JS has some file stuff, you can request files and hand files over. you don't have direct file system access but you do have a surprising amount of tools for file reading and writing (just no control of where in a file system it will end up). I don't think it's that much of a hindrance (wasn't dart originally intended as a JS replacement anyways?)
It is Hummingbird. That's just a code name for the project to adapt Flutter to the web.
I wonder if all the existing JS interop will work with Flutter Web like how it would be with AngularDart or bare Dart for web. Are there anything that Flutter Web just can't do, even in the future, that AngularDart has to be the one (like lot of big tables, lists, or simple, data on the screen) Disclaimer: I haven't get my hands on Flutter Web yet... will be very very soon. I really wish there are more words about the future of AngularDart with the introduction of Flutter Web. I am aware they might be 2 different thing that solve 2 different domain of problem. But as someone who started with Flutter and picked up AngularDart because of Dart, I can't be the only one who wish Flutter Web can gobble up AngularDart and become one single development tool for... everything!
I would also like to hear more about AngularDart's future from Google.
I'm torn. On the one hand, I'm a real big nerd and love managing my runners for Gitlab... On the other hand, it's just so _damn_ slick....
Oh, I see
I love the use of the dev TLD and pretty happy we get spreads now. Maybe I care about the wrong things, though, but I'd really like to be able to build the runtime/compiler from source like I can, say, Go. Go ahead and try to build release 2.2 from Git.
FYI the "Hummingbird" code name has been retired. "Flutter for web" or, on Twitter, #FlutterWeb
Oh, didn't know that... Thanks for the correction!
Its not a wrong thing to care about, a good one actually. In fact caring about semicolon removal is wronger lol. I care about null safety and unions, both of which are planned if I heard correctly in the Dart talk earlier tonight. And dataclasses which I am not sure about.
But tbh I love the way they are improving the language, carefully and selectively and after giving proper thought! I love how they're managing the process!
Can anyone explain why emacs and vim are moved to unsupported platforms? I am not sure why dartlang being an open source language support proprietary editors like vscode, indirectly forcing them to be snooped by Microsoft and others. Hopefully the team will give equal support to open source editors Emacs and Vim for dart language in the name of security and privacy as they were promoting it in google IO 2019.
https://github.com/microsoft/vscode
Putting code on github does not mean its not proprietary. The distribution comes with telemetry, proprietary license and sends data to microsoft, thats the reason there is a fork called vscodium (https://github.com/VSCodium/vscodium). Earlier dart has support for emacs and many core developers of dart were using it, now it seems all are gone from the team.
This class is pretty new https://www.appbrewery.co/p/flutter-development-bootcamp-with-dart There are also good flutter courses on Udemy. Most are very cheap. As far as a dart-only course Bryan Cairns has dart-only courses in Udemy but they were published before dart 2 came out so are probably a bit outdated. I'd take a flutter course instead of looking for a dart course because you'll learn dart as you learn flutter (and you seen to want to learn dart so you can learn flutter).
Because I already knew how to program, I didn't need much of a tutorial on that, but just to get up to speed with the language differences. I found this site to be extremely helpful. I read it like 3 times. https://dart.dev/guides/language/effective-dart/style
Could you clarify what exactly did not work when you tried to build it from source?
[disclaimer: I work on Dart team] Short answer: there are a lot of different editors in the world, but Dart team is not large enough and does not posses necessary expertise to develop top-notch integration with all of them. So it makes sense to focus on the very popular ones (and both VSCode and IDEA are very popular) and provide very good support for those. We hope that community can take and support other editors. That is why we provide tools (e.g. dart analyzer which has an LSP wrapper) that make it easy to build Dart plugins for any editor you like to use. There are plugins for both emacs (https://github.com/bradyt/dart-mode) and vim (https://github.com/dart-lang/dart-vim-plugin), which I think work relatively well, but they are not maintained by the Dart team. We also changed the language on the site to better reflect this stance, it does not say that VIM and Emacs are unsupported anymore - it says they are community supported.
This, if you have experience you don't really need a course. Just documentation that explains some of the 'new' operators and their use cases i.e. the 'null-check' operator `?.` is useful for data that may not be super structured (maybe the property will be there but maybe it won't). Common use is for parsing JSON
Sorry. I started here. https://dart.dev/guides/language/language-tour
I wanted to build a release. Which was 2.1 at the time, I think. Well by that point, the various third-party repositories, checked out by client, were no longer compatible. They'd moved on, and the SDK was updated, but only at HEAD.
Oh I see. yeah thank you for your help! do you know anywhere I can take a flutter course then? maybe udemy?
Thank you!!
That first link I sent is a flutter course Google made with App Brewery. Google also has a free flutter course on Udacity but I did not find it super accessible to beginner. Some good courses on Udemy are curses by Stephen Grider, Paulo Dichone, and Max Schwarzmueller. I would recommend the newest one from App Brewery since it is geared toward beginner and also made in partnership with Google. If you're going Udemy, I'd start with Paulo and then Stephen, then Max. Paulo is great for introducing new concepts, Stephen builds in those, and Max's course teaches you one large app.
Strange - third party dependencies are specified via `DEPS` and pulled at specific versions/commits. So the fact that they moved on should not be an issue. Did you run `gclient sync` after checking out SDK commit you want to build, to get the right versions of dependencies?
Aww, look at my dumb smiling face! And my partner in crime, u/kevmoo!
question for you guys. &amp;#x200B; You mentioned the web interface for the deep introspection (\~21.20) is written in dart. Is that in AngularDart or Hummingbird or something else? &amp;#x200B; Great talk. I think Dart and Flutter is so cool.
&gt; Is that in AngularDart or flutter for web (aka Hummingbird) or something else? I'm not sure, sorry.
Thanks for changing the wording on site and also providing the explanation. Can understand the good old editors are not for modern developers, who prefer bloated versions of software like electron based vscode. I am sure this will be reflected in language and run-time as well in the long run, as this reflects the way core developer think. I was experimenting with dart lang because I like Lars Bak and his work on VM's and V8. He no longer works for google and I am bit worried given preference for tools like vscode it reflects the quality of the current team maintaining dart. Also knowing dart team does not have enough resources does not instill confidence as I have seen this played out with another team in google called Polymer. As a small team and startup we suffered being an early adapter of Polymer.
If you want simple and easy example of Flutter then try this - https://diveintoflutter.blogspot.com
Here's the source: [https://github.com/flutter/devtools/tree/master/packages/devtools](https://github.com/flutter/devtools/tree/master/packages/devtools) &amp;#x200B; It's a home-rolled thing.
Kevin, could I ask you something unrelated about Hummingbird quickly? I wanted to know if packages on pub that do not have the "Web" specification (maybe just "Flutter" and "Other") will work for Flutter on the web. For example, I know lots of people use the _dio_ package for HTTP calls. Would something like that continue to work in a Flutter app built for the web?
Really enjoyed your talk and it's super nice that dart is getting nullable types and extension functions (these are some of my favorites in kotlin). Any plans for data class like functionality, today it requires to use a thrid party library (built_value) . Also wish dart has some form of union types 😉
I would like an easier notation for making simple classes, yes. I wrote up a few thoughts on that [here](https://www.reddit.com/r/FlutterDev/comments/bmbxjl/announcing_dart_23_optimized_for_building_user/emxgqp7/?context=3).
Ideally the Dart docs at [dart.dev](https://dart.dev) will do. However, there is a go-to Dart resource blog here https://creativebracket.com
This could be a simple order of operations mistake. It uses the DEPS file in the repo to tell which versions of the third-party packages to bring in. So, if you switch branches, you need to run `gclient sync` *after* that to then sync the third-party packages to the versions needed for that branch. Something like: $ git checkout 2.3.0 $ gclient sync
It should. We're going through a bunch of planning now – trying to figure out how things that depend on \`dart:html\`, etc will work. &amp;#x200B; Still cranking through details here...
I'm well versed in several programming languages spanning many different paradigms and was looking for a complete'ish guide to the language to get started running. I found this playlist on YouTube: https://www.youtube.com/playlist?list=PLJbE2Yu2zumDjfrfu8kisK9lQVcpMDDzZ It's great. Just 2x the speed and you're off to the races.
AngularDart doesn't get a lotta love out in the wild. I've been a solid user since its inception, but even I've begun to switch all my app dev to Flutter now that I've seen how quickly they've been able to get Flutter functioning on the Web. I assume you don't have that option... There's a hell of a lot more material on the TypeScript version of Angular out there, but lots of it can be of use, especially the stuff on HTML templates, etc. There are articles on https://dart.academy. They haven't been updated for AngularDart 5.0 from 4.0, so some of the details differ, but they still may be of value.
Greatly appreciate it. I'll take any help I can get. Flutter for the web is not totally out of the question; we are not far enough into development to rule it out. However since it was just officially announced, it's a bit too early for us to drop our current architecture decisions and switch to Flutter Web where there a few too many unknowns at the moment, but we're investigating it. Thanks again!
AngularIO is mostly a different beast compared to AngularJs. ignore the name and treat it like a completely new technology
Hey there, I have a six part web series on YouTube taking you through building an AngularDart application, including Firebase integration. I hope this can give you the foundational knowledge you need https://creativebracket.com/angulardart-tutorial-lets-build-a-bookmark-manager-1/ Check it out and let me know what you think :)
In regards to this, I was trying to get the following feature implemented (Template Syntax Highlighting): &amp;#x200B; [https://youtrack.jetbrains.com/issue/IDEA-212348](https://youtrack.jetbrains.com/issue/IDEA-212348) &amp;#x200B; It was closed and referenced to another issue though, which I don't think it solves my issue. For me, at least, this feature would help me a lot with transitioning between angular and angular\_dart projects.
Everything is an object in dart and since no two objects are the same, it returns false. To overcome this, you can use the ListEquality() method from collection package like it the answer [here](https://stackoverflow.com/questions/56151111/identify-if-a-2d-list-contains-a-list-in-dart-flutter/56152130#5615213).
If you remove the `await` in the loop, it will move to the next iteration without waiting like you want. Since you still want to parse the data, put this in the body of the loop: getData(list[x]).then((data) { // parse data });