I think this is probably the best answer. I decided to write all of the new largish frontend applications at my job in Dart (with Angular.). It's easy to make a convincing argument for Dart, since it's such a simple language with decent support. It's a little harder to justify Dart as a choice over TypeScript if you're writing Angular apps only. However, if you try to keep most of your code separate from the framework, it's a lot easier to justify, since you could port the code to a different (or no) framework at any time. I did a similar thing to justify using Elm for some applications.
Yes, it's harder to justify Dart over TS as a language, but the whole developer experience and tooling is a lot better for angular dart. 
I do. I have been doing a Flutter project at work for couple months now. I work as a mobile developer in a software development agency, making apps and websites for customers. I've been playing with Flutter for 8 months now. Last November, I was evaluating tech choices for a new potential customer case. The customer originally stated that they wanted native Android &amp; iOS applications, reason being that they it to be buttery smooth and delightful to use. I recommended Flutter. It fit the requirements nicely (no need for inline video / maps) and I already had a mental map of how to do the application. I also needed the company rubber stamp of approval to use Flutter in the project. I thought that I have to convince my mobile developer colleagues and couple web architects that Flutter is a viable technology, as not a lot of people knew about it in our company except me. So I prepared a presentation and sample app and held my "Introduction to Flutter" session to our whole company. Fast-forward some time and here I still am, doing said Flutter project at my work. Based on our experiences, we're recommending Flutter for other potential customer projects as well, provided that Flutter can match the client requirements. If you're interested in the detailed explanation how I convinced to use Flutter in real projects in my company, see [the blogpost here](https://www.codemate.com/considering-flutter).
&gt; Also, why limit your opportunities to just your city? What do you mean? Move?
Would love that! But I've seen zero ads on indeed for this, sadly. Do you think google would give me a job if i offered to work for cheap? I really love this tech.
I had a look around and found this from last year. You need to "Write Java code to invoke APIs that defined in aar file." https://stackoverflow.com/questions/41669038/how-to-build-flutter-project-with-android-aar-file
Where I work, I spend most of my time writing an AngularDart web app, and we occasionally do server-side/command-line tools with Dart, as well. We have an Ionic app, but I'm hoping to move that to Flutter one day. The best way to make this happen for yourself is to bring Dart with you. Apply for regular web dev jobs, etc., and once you've established yourself as indispensable and an expert in your area, you introduce Dart.
saw that earlier but it doesnt work. project structure in intellij is somewhat different from what it use to be
I managed to find a Dart job in Portland, and managed to convince our CTO to switch our mobile apps to flutter (using the web codebase) after about a year of friendly heckling :)
Anyone with Flutter chops can apply to Posse (goposse.com). We're hiring! Can be remote. Feel free to drop us a line at http://goposse.com/contact-us-careers and tell us your story and lay down some Flutter knowledge on us. Mention you came from Reddit, if you can, so we know where you're coming from.
I most enjoyed the talk given by Apptree, on how they get 70% code sharing between their flutter and angular dart apps. That's a huge value. Originally, they had 3 separate product teams, 3 different development languages (Swift, Kotlin, js). Now it's all reduced to one: dart. So instead of the manager spending the majority of his time keeping all the teams coordinated, there's only one team and they are iterating at a rapid pace. Build the business logic once, build the tests once, and they are immediately in all 3 projects. With the world economies getting tighter and tighter, you can see what a value proposition you can offer your clients. The speakers posted 2 blog posts about their experience, which go into a good amount of detail: Why we chose Flutter: https://medium.com/@matthew.smith_66715/why-we-chose-flutter-and-how-its-changed-our-company-for-the-better-271ddd25da60 Sharing Code between Flutter and Angular Dart: https://medium.com/@john.p.ryan4/sharing-code-on-ios-android-and-web-85e8ed7dfccd There's another talk on code sharing between flutter and angular dart coming on the 2nd day, too. This is exactly what I was looking for in this conference. Good stuff.
Here's the repo for the demo app on code sharing https://github.com/apptreesoftware/letsvote/
No talks about serverside dart? Its such a shame dart has literally no serverside projects gaining traction. What dart needs is something like sqlalchemy and a django like framework (batteries included). Right now theres a few projects out there, but they all seem more or less like a oneman show. Maybe join forces? Dart has huge potentital but it seems to be all directed (google pushing) toward the frontend (angulardart). And imho a react like style is much more pleasent to work with. And here TypeScript is clearly taking over. Dart is better, but not _that_ much... yet. Flutter seems to be really cool, but wont alone carry the entire language and its ecosystem. 
Agreed. It is unfortunate that server-side Dart doesn't get more attention. The team has decided to focus on making it a great client-side language for now, but a lot of us feel like Dart's isomorphic nature is a huge draw. We do have Fuchsia on the horizon, too, though. Could be interesting.
Is there any estimated date of releasing Dart 2.0?
Hehe... I don't think calendars are even allowed inside Google...
True. I am still kind of skeptical about fuchsia taking over android. I dont have all the details, but if fuschia will ever take off it must have 100% android support. Its not like all android devs will start writing dart, and it could be a hard sell towards the actual manufacturers (samsung etc) 
Check this out! https://pub.dartlang.org/packages/over_react
There is no market for server side Dart. There are already so many excellent choices available on the server side. 
None in my city either :( It's not quite the same, but I did kinda [just get a job working on something Dart related](https://twitter.com/MatanLurey/status/955872473202872320) all day! :-)
Google can start by supporting Dart as a language for Cloud Function. But it's likely Go will be supported first. 
I don't understand every languages fascination with removing the 'new' keyword... It provides information
It's 4 keys and conveys meaning. plus the syntax color of new breaks up the spaghetti soup of normal code. I swear people these days would rather it read your mind and type for you, which would make it super fun to debug other peoples' code.
Seriously, without `new` it looks like a static call at first. Was the four chars that you saved from typing worth the mental expense of continuing to ensure yourself that you're instantiating a new object? Rhetorical question.
I don't have a strong opinion about keeping or losing it, but Flutter was the driver here. In declaring a Flutter UI, you use the `new` keyword *a lot*, and removing it declutters the code significantly. Pretty sure the language isn't removing the keyword, though, just making it optional, so you can keep it if you like it. ;)
I agree with everything you said and I have no issue if it's optional. Hopefully you can enforce it (or not) in the analyzer though
This guy is great! 
Nothing on any road map I've seen. Dart appears to be majoring in mobile and minoring in web, at the moment, with all the web focus being on compilation to JS for now.
The work they've been doing to make flutter AoT compile should actually help. LLVM can target WASM already. I'd be interested in seeing the dart VM + client code compiled to wasm just for the technical challenge, but honestly unless Google themselves puts focus into it, I'm more interested in blazor for .net core. 
Very helpful indeed, thanks for the advice. I’ll experiment a bit and hopefully get my head around this better.
I agree. Blazor seems to hold a lot of potential.
If we have Dart to WASM, does it means then there could be a Flutter on WASM? Not too clear if it's stupid idea to have Flutter or UI framework on top of WASM. 
We have a stable and a dev channel for releasing Dart. We've been shipping a series of dev channel releases as we work towards the final 2.0.0 build. We aren't there yet, but we're getting closer and closer. There's a ton of moving parts!
Seems like they are targeting dart as a client side language after championing sharing code on client and server side. Are they giving up on server side dart?
I don't think it's a "focus" for the Dart team. That said, there are already a lot of apps and frameworks being built with Dart. Aqueduct, Angel, and Shelf are all good options for web servers. EDIT: grammar
I've been using flutter for a couple months now on a side project that I am working on. I'm going to throw out my opinion here: **pros** * It is ridiculously easy to set up, it can literally take like 5 minutes once you have dart installed * flutter doctor is great at telling you exactly what's not working. 90% of the things regular users get caught up in can be found through the doctor * It's very expandable. Adding a new native module to use is pretty straightforward and you can usually figure it out if you have your head on straight. * The community on GitHub is really active and helpful. If you have a question, there are people there who genuinely care and are extremely helpful. **cons** * It's in alpha and you can tell. Finding a plugin that does what you want it to isn't nearly as easy as it is for a more "mature" framework like react native. I was looking for google maps support for example, and the implementation hadn't been added yet. Things like this are a little bit frustrating, but they will definitely get better with time. * Little bugs here and there. I was working on a custom module to integrate with Spotify and the only way I could build was by switching to an unstable channel as there was a bug in the main branch All in all, I think it's an amazing framework and will help make cross-platform app development extremely straightforward and a lot easier. I think that when the community for it starts to grow, and people start to build plugins for it, it'll be one of the most popular cross-platform development frameworks out there due to its ease of use and it's expandability
The documentation isn't exactly beginner friendly, e.g. buildContext isn't documented nor properly explained, the concept of key, etc. 
It makes little sense for Dart to focus on server side development. This part of the work is saturated with frameworks, etc. It's the client side (mobile, web, desktop) that have huge gaps. I mean cross platform desktop development really doesn't have a lot of option at the moment.
That's definitely a good point as well
pwa are cross platform that is a good option
Can't use Flutter on the web, but there are plenty of options besides Angular. Using Dart's HTML library is kind of like using a cleaner jQuery. There are several packages for doing React or Polymer with Dart. There is Material Design Lite for Dart. I actually think AngularDart is really nice, but there are alternatives.
No official non-hackery way of doing it but there is a post [here](https://amp.reddit.com/r/FlutterDev/comments/7nf847/is_it_possible_to_make_desktop_or_web_apps_with/) that has some related links
Is it true that AngularDart does not support _any_ version of IE?
In the Dart web framework world, there's also [VueDart](https://refi64.com/vuedart/) (disclaimer: I'm the author) and [OverReact](https://workiva.github.io/over_react/) for Vue and React, respectively. 
I appreciate your work, but I tend to stick with the official solutions, because of bad consistent experiences. Even when I use Vue I do not use Typescript, as the author made it clear that they are against it.
Pretty sure it follows Google's standard policy: Works for the latest 2 major versions of every browser. So maybe Edge and IE11...?
I'll have to disagree there - I think Flutter has some of the best documented code I have ever seen. Take a look at the documentation they have online for [BuildContext](https://docs.flutter.io/flutter/widgets/BuildContext-class.html)
Yeah I've read that page and still understand nothing, especially this gem &gt; In particular, this means that within a build method, the build context of the widget of the build method is not the same as the build context of the widgets returned by that build method. 
People's attitude regarding Dart is weird. Usually when something cool like Flutter is implemented in other languages, no one would second guess "why not implemented in Rust/Kotlin/Elixir/Pony"? I am new to this community and I've seen three or four posts already of people questioning the justification of using Dart.
So weird... Almost no one who bashes Dart has actually used it. Hard to figure out why they bother.
PWAs still don't really work on iOS. Flutter does. :) I'm actually a web dev, so this state of affairs does not please me.
I would commit violent crimes to get this ported to Windows and the MacOS desktops.
For example https://news.ycombinator.com/item?id=16474327. The comment there is just toxic.
There's a repo here as a starting point for desktop embedding: https://github.com/google/flutter-desktop-embedding Though be aware: &gt; This is not an officially supported Google product. 
Also, https://github.com/flutter/engine/wiki/Custom-Flutter-Engine-Embedders
It is a magic token, or more technically "A handle to the location of a widget in the widget tree.". I think we are on the same page though. Some of these concepts need to explained at a higher level - especially why they exist and how they should or shouldn't be used.
Dart is cool. I suddenly lose all my respect for people who loves Javascript. I can't wait to see that abomination's doom.
But they are suppose to be eventually supported on iOS also right? Which makes me think about WebAssembly wildcard. Flutter is great but I just kind of feel like all of today's solutions - Flutter, Angular, AngularDart, React, ReactNative - are just placeholders for the next 3 to 5 years. I think once WA is fully tricked out with GC, multi-language support and great tooling then a lot of these stacks are gonna fall by the wayside. Wish I could fast forward 5 to 7 years from now. 
You just described the way our whole industry works, yeah. Since I have things to build in those 3 to 5 years, I have to choose something and use it. I'm actually mostly an AngularDart dev.
Any plans to introduce a template engine? Writing multiple nested widgets can be time consuming and hard to debug.
it seems to be said over and over it's now focused on client side code, what does this mean for us using dart on the server and other ways?
Don't think there are explicit plans for that, though I have heard of a community effort in that area.
I've heard that most dart code should just work in dart2, is there any info one how libraries should best handle this transition, could they support both 1 and 2 relatively easy?
Anyone get livereload to work? When I run pub get: Package dart_style has no versions that match &gt;=0.2.10 &lt;2.0.0 derived from: - angular 4.0.0 depends on version &gt;=0.1.8 &lt;2.0.0 - code_builder 1.0.3 depends on version &gt;=0.2.10 &lt;2.0.0 Even though dart_style clearly has versions between 0.2.10 and 2.0.0. Maybe this is a pub get dependency bug?
You can use tools like [pub_mediator](https://pub.dartlang.org/packages/pub_mediator) and [pubviz](https://pub.dartlang.org/packages/pubviz) to get a better idea of what the real problem is.
Is there a sub for flutter or is dartlang the place to be?
i am extremely happy with the quality of dart for visual studio thanks to whomever made this extension
https://www.reddit.com/r/FlutterDev/
I understand that although the emphasis is client, server-side stuff isn't going away... it's how pub.dartlang.org works, as well as all the command-line tools in the Dart SDK.
Hey there... You're doing the right thing using Dart. One of the most important things to remember is that when you use Dart, you have access to most of the JavaScript ecosystem too, so you have lots of options for each of your site's features. I bring this up primarily because I actually typically use JS datagrid solutions, since there's not a really great native Dart one that I know of. Other than that, check out the [code labs](https://www.dartlang.org/codelabs), especially those for AngularDart, and look over sites like [Dart Academy](https://dart.academy).
Will look. Thanks!
I agree that flutter might change things but the article isn’t really wrong, unfortunately. Just look at this sub compared to some of that other languages it mentions
Yup, OverReact is a strongly l-typed layer on top of react-dart
An article just to get some attention and being controversial, he is judging Dartlang based on how many people engage, and yes maybe there are not as many as in C++ or Python, Java or Javascript but that does not make one of the top 5 worst language, I am not a programmer, but in the learning perspective to me is a very logical and easy to learn and write, I believe it will attract more professionals.
Does these things that are mentioned makes Dart one of the top 5 worst programming languages to learn? Maybe is to early to jump straight to this conclusion. Maybe is one of the top 5 languages to learn, you see flutter how fantastic it is, and yet Fuchsia is not released, were Dart and Flutter are crucial.
&gt; While Dart's numbers were respectable even for its worst ranking, its relative ranking was far lower than those of Kotlin, Elixir, TypeScript, and Swift. That is probably the most important part of the article for Dart fans. Dart's numbers are still respectable. Some of those other languages, several of which don't even operate in the same space as Dart, have higher numbers still.
This is basically pointless to post now that Flutter is kicking off.
At the moment, Electron is it, but there are a few efforts underway to put Flutter on the desktop.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://github.com/python/cpython/blob/master/Modules/_tkinter.c) - Previous text "C" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Thank you DenuvoHater332 for voting on FatFingerHelperBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Good stuff! I, too, would like to see '!' on function names to indicate they mutate their input. A bunch of your points are really the same point: You like right-side types. I actually don't, really, but I see why you do. &gt; IMHO using = to assign a keyword feels more natural/consistent. This is actually possible in Dart for named and positional optional parameters now, I believe. Pretty sure the colon syntax is getting dropped. I also really like `if` as an expression and would love to see Dart adopt that. I don't really feel strongly about your other suggestions, but thanks for sharing that well-thought-out post! Hope to see more from you in the Dart community.
I would also like to see right-side types but I'm willing to bet that won't happen because it *would* break *all* existing code.
That closed email today made me irrationally upset.
AST transformations can be tricky but yeah it is possible. Would be a fun project. :)
Nice article but these are barely suggestions. Most are not implementable in the language anymore.
The Dart SDK has gotten way too big to only now become portable.
It's only portable to blessed platforms, apparently -- Android, Chrome OS, Mac OS X, Windows, and Linux. The main issue appeared to be that they didn't want OS-specific patches that weren't one of those. After a few months, someone thought that maybe a "third party" directory could work out, but no, apparently not that, either.
stating the obvious. nothing is stopping you from forking and doing the work yourself. 
One thing I'd like to point out: there's a difference between making Dart work on BSD and making sure it *keeps* working on BSD. I may do all the work to port Dart to BSD, but after that, the core team will still be responsible for both maintainance and making sure new features work properly on all supported platforms. 
I would like to be completely transparent: I closed the issue because no work was happening or anticipated to happen on this. The issue has been open since 2013 and last meaningful activity happened early 2016 when mulander tried to upstream his patch. Keeping it open does not make any sense. I understand that this might be an unpleasant truth, but it is the truth. 
Hi, I'm on the Dart team. I don't know much about this bug, but consider our situation in general. It's important for us to be able to freely change, refactor, and rewrite code in our repository. It's also vital, of course, for us to ensure we don't regress and break things when we do that. That means every platform we support requires automated bots to run all of our tests, and a human to maintain those bots and keep them happy. Adding a new platform isn't a trivial change of just landing a couple of patches. We can't get into the situation where we have code in the repo that no one can touch because we have no way to tell if a change breaks something. That way leads to monotonically increasing technical debt that can never be paid off. So, sometimes, we have to make the choice to not support some platform or configuration ourselves. :(
Misleading title. You are not giving up "everything" , you are just giving the only solution you have to create mobile apps, Xamarin. This type of clickbait article is midly infurianting. Also I wouldn't be surprise to read the same article in 2 years saying " Why I dropped Flutter for [Avalonia](https://github.com/AvaloniaUI/Avalonia)" if Flutter and the dart ecosystem is not taking off.
Couldn’t agree more with you. Unfortunately this practice to write misleading titles just to get more audience is becoming the de-facto way for a lot of people.
Not all heroes wear capes.
&gt; if Flutter and the dart ecosystem is not taking off. Of course. That's the nature of the technology treadmill. Unless one is working/writing for themself, it makes no sense to stick with a technology that is not widely used.
4 week attention span? What is he talking about?
Nope, that's reality. I switched from Xt/Motif to Java Swing when the Motif jobs started to dry up. Then from Swing to WPF, but WPF jobs never materialized in my area. So I switched again to JavaScript/HTML. If I had any control of the situation I'd still be doing Swing.
He gave his view on React Native in the comments section: But React Native still has the same flaws as Xamarin – trying to create a great app out of widgets from both android and iOS. With React Native your bridging with a custom javascript runtime onto native APIs from 2 different platforms. Your gonna end up with an app that regresses to the lowest common denominator. Anything complex requires you to create custom implementations on the native platforms which defeats the object. With Flutter there are no OEM widgets. Flutter draws it own widgets directly into each platforms blank canvas. THIS is the magic of flutter, and why it’s so much better than react native of xamarin ---- I haven't had much experience with RN, but from what I've read this is accurate. Or am I off here?
Who are these morons? I bet they are Javascript lovers.
And for you, too!
Not any more 🤷‍♂️
Actually, it's not sitting at the top anymore, but I'm not sure why. Flutter's numbers are still the highest.
_Dart_ will support D/JSX as much as _JavaScript_ supports JSX - that is, it will ultimately be community driven, and unlikely part of any formal language specification. There is a (occasionally heated) discussion over in the Flutter repo: ["Feature request: Support JSX like syntax inside dart code"] (https://github.com/flutter/flutter/issues/11609) with lots of arguments both ways. My personal opinion is that this isn't a great idea, and it's more likely with a few syntactical changes to the language Dart will be much more expressive, understandable, and tool-able than JSX. Imagine writing the following: Container(style: style, child: Row( children: [ IconButton( icon: Icon(Icons.menu), tooltip: 'Navigation menu', onPressed: null, ), Expanded(child: title), ], ), ) versus the equivalent JSX &lt;Container style={style}&gt; &lt;Row&gt; &lt;IconButton icon={&lt;Icon name={Icons.menu}/&gt;} tooltip='Navigation menu' onPressed={null} /&gt; &lt;Expanded&gt; {title} &lt;/Expanded&gt; &lt;/Row&gt; &lt;/Container&gt; I'm not sure the latter is more understandable, or shorter than the former. Sure, it might help a bit for transitioning from React Native, but after talking to a lot of devs that are former React Native, they tend to not care about the JSX anymore after writing plain Dart/Flutter code for ~a month.
Personally, I think the JSX is *slightly* better, for the sole reason that it's much easier at quick glance to tell where the beginning of each widget starts since you have the angle bracket '&lt;'. More easily discernable than uppercase/lowercase. I don't understand those who yell and scream that DSX would be terrible, like in that thread you shared. If you hate it, don't use it. Simple as that.
I wouldn't count on it. If it's not being used by teams in Google, it's pretty much up to the community (which is not that big) to build and support features. Case in point, web component support: https://github.com/dart-lang/sdk/issues/27445 Dart is a great choice if you can work with what's already available but otherwise, other options might be better
Agree there , JSX is better to read, but I think the Dart Team want to stick with Object Oriented Strongly Typed programming. JSX is basically enhanced HTML / Templating language , with JSX in Dart you would need either to transpile the entire the language ( which is mehh ) or to use a giant escaped string like Angular 2+ ( which is meh too )
that's good news - also the definition of 'flavor of the month'
I don't think the dart team will support it , they want strongly type stuff not Templating language. If templating language come , it will be driven by the community. They are a lot of JS stuff being ported to Dart these days , I wouldn't be surprise if JSX was ported to flutter or even some bindings for React itself.
There a lots... The dartlang groups on Gitter are quite active. Sites like [Dart Academy](https://dart.academy) are good.
I open Dart Academy everyday and also official Dartlang.org and other pages as well, but i mean a community where I can make questions and not bother Dartisans for my low level questions. 
Right... Gitter, StackOverflow, too...
Yes, Gitter, thank you. 
Flutter is on the path to making this no longer true. The Flutter community is growing fast...
Do you think it would it be feasible to write a transformer that digs through a project's source and converts JSX looking syntax in .dart files to an appropriate working OOP format before dart2js runs? I'm not at all familiar with what transformers are ultimately capable of. I imagine it would cause type problems with the analyzer... so maybe the JSX was passed to a factory that returned an appropriate Element object, strictly to fulfill the type contract during development. So something like: var component = JSX(``` &lt;Container style={style}&gt; &lt;Row&gt; &lt;IconButton icon={&lt;Icon name={Icons.menu}/&gt;} tooltip='Navigation menu' onPressed={null} /&gt; &lt;Expanded&gt; {title} &lt;/Expanded&gt; &lt;/Row&gt; &lt;/Container&gt; ```); react_dom.render(component, querySelector('#content')); I suppose you could just use the JSX object to generate the appropriate Element on its own, but using a transformer would allow the step to take place during the build process instead of at runtime, yes? I'm totally fine with using the OOP style, and I actually agree that it's syntactically better to my eyes. The only problem is converting from existing HTML and especially SVG and/or vice versa is a massive pain in the ass. 
Very nice, I love it! Though it's pretty small on mobile (Pixel 2 XL, webview)
Okay, now it's slipped into second place officially. :)
I've created one for pt-BR folks https://www.facebook.com/groups/dartlangbr/
Why not contribute these commands back to the actual pub project?
Because they don't want to https://github.com/dart-lang/pub/issues/1847
Wow, that's...um...silly? Seems like a no brainier to me...
Hey Mike! I'm wearing my Wake shirt today! Also: I'm super jealous that you get to work on Dart and I'm stuck using stupid React.
Awesome to see you here! And that's awesome!! We should grab lunch some time!
because even smart people can be dumb sometimes.
Thanks so much :) 
Probably how long it takes for me to get bored with any project ¯\\\_(ツ)\_/¯
Unfortunately I don't think the sublime package for dart has been updated in quite a long time. I did some hacking and got it working locally by removing a broken line of code (several months ago, so I don't really remember). I would open up the dev console and look for error messages.
Last I checked the sublime 3 package for dart was not supported. But you may want to check the [repo](https://github.com/guillermooo/dart-sublime-bundle)
So you will need: https://github.com/google/flutter-desktop-embedding. This replaces Xamarin. BUT: - Flutter dekstop project is moving very slowing. - Windows is not started at all yet. - Mac and linux is there but being rearchitected to not use GLFW. Plugins will have to be written i the native language for each desktop. Also this is a non committal project by google. I hope they get behind supporting Desktop but who knows. 
Its is happening ! https://github.com/google/flutter-desktop-embedding Windows has no had much attention yet. MacOS and Linux seems to be getting all the attention. I think that if more people try this out and respond that it will really work and be amazing 
As usual, an amazing piece of work by Natalie!
Having worked with Flutter day to day for almost 3 months now, I think the layout code is fine. I found it extremely confusing at first and would often end up 10-12 indents deep without even realizing it. Now it's usually no more than 3. Dart 2 will do away with the new keyword which will only improve code readability. Lastly, asking people to upvote just because you like JSX is a bit shit. How about have a conversation about it instead, much like the one going on in that particular issue. 
Union and non-nullable types are on the top of my wishlist too for Dart. Do you use Dart to make websites? If so, any review on how AngularDart stacks up against something like React?
You should also check out [OverReact](https://workiva.github.io/over_react)
Solved, thanks to [Cetin Basoz](https://stackoverflow.com/a/49758035/5083247). I needed to remove the first `/` and the last `/i`.
TypeScript has some super magical type system - but yeah, union types for Dart would be awesome + Copy and Update Record Expressions (for Redux). Also there's no need for semicolon.
I only wanted Dart syntax highlighting and nothing else so I ended up deleting pretty much everything in `Sublime Text 3/Packages/Dart` except the `.tmLanguage` files. It worked after that.
It can't possibly be the absolute worst programming language ever. However... its documentation virtually doesn't exit, and that's a huge minus for programmers.
yes. :)
I love it! It's quick to write and easy to grok
I think you meant to reply to /u/kabiir_'s post? 
Yes
No, you're not the only one. It feels very arbitrary. Dart's lack of explicit scope visibility modifiers (public, private, friend, etc.) is a pretty big annoyance to those of us used to Java where these controls are far more fine grained.
I like it a lot, myself. The code stays concise without having to write out accessibility modifiers, and I appreciate the language enforcing the prefix convention, because it eliminates any ambiguity. If you see that underscore, you know it's private.
&gt;The code stays concise without having to write out accessibility modifiers That's why I like Dart , but still the "_" makes code barely readable at time. I wish they had created a keyword like "private" that would be transpiled to "_" for better code reading
You don't have to affix a dollar sign to the end of anything; I have no idea why you would think that.
No!
I was used to do it in AS3 even with the `private` keyword.
This is a pretty normal thing to do for me, coming from C# :)
Right, and as a sane human being, I'm prefixing them with `_`.
&gt; And in the mean time, it no longer works when warnings are issued by the type checker. (Angular materials throws a bunch.) Not sure what you mean - it's true that in Dart 1 DDC is more strict about static errors than Dart2Js. In Dart 2 they are both strict about static errors. angular_components has been able to build with `build_runner` in DDC for a without errors for a while. &gt; They could have made this particular transition a little more seamless. Either both build systems should have been present for one version There have been dev releases for a while where both options worked, but angular did have a version which flipped to build_runner and disabled pub so it's definitely true that for some projects the transition has been pretty abrupt, and for projects sticking to the stable SDK it will be a direct flip when the Dart 2 stable SDK releases. We would have avoided that if we could but various pressures around timelines and breaking changes in the language made it really tricky. &gt; or tools like `pub serve` should just fail hard and offer a link to the new way of doing things. That's exactly what will happen soon! The current dev release prints a warning when you try to `build` or `serve`, and an upcoming release will fail.
&gt; angular_components has been able to build with `build_runner` in DDC for a without errors for a while. Good to know. As soon as I find how to compile Sass and replace my custom transformers I'll switch over. &gt; various pressures around timelines and breaking changes in the languages made it really tricky. I understand. Like I said, I hoped that this was an exceptional circumstance. Sounds like it is. I suppose I prefer this to Python's long transition to Python3. &gt; That's exactly what will happen soon! The current Dev release projects a warning... Awesome! I think I may have just been a little unfortunate in when I chose to upgrade to the next stable release. Everything seemed to break, and there weren't any obvious alternatives. I would have waited to switch to Dart2 until it was ready, but I got a new laptop and just immediately installed the latest stable release. Sorry for venting. I actually really like Angular Dart and Angular components. It's much faster to develop with them than with Elm. I just got a little frustrated when the stable release broke things. (It's partly my fault, I know.). I'm really hoping that the switch to Dart2 will make Angular apps a little more stable and reduce compile times. It will have been completely worth it if so.
Dart is considerably less verbose than Java, especially after the `new`keyword is made optional in Dart 2. Implicit getters and setters alone make Dart more succinct. Dart's concise class property initialization syntax cuts it down even further. Having no access modifiers like `private` and `public` comes with a cost in power, but again it's less verbose. I agree that creating Flutter UI with Dart code takes some getting used to, but most who stick it out learn to appreciate it.
Yep. I spent almost 2 months trying to wrap my head around the React Ecosystem \(Web \+ Mobile\) and I can testify that Flutter \+ Dart is easier to understand and to develop mobile apps. I started Flutter last week and I'm just amazed on the documentation and tooling \(Intellij IDEA is excellent!!\). Right now, I switched entirely to Vue.js for Web and Flutter for Mobile Dev. You can't go wrong with Flutter, hehe.
You'll probably get better answers on Stack overflow, but one solution would be to subclass DateTime and override the parse function. The override would do the substring work then pass the fixed string to the superclass. Then you can use your custom class in place of DateTime. Alternatively, you can see if you can configure the way Go serializes dates to match what Dart expects. I do agree that it's odd that DateTime parsing fails completely instead of just losing precision. I could see DateTime.parse having an optional strict precision parameter. Default it to true to keep the current behavior and keep it backwards compatible. If false, it would allow for precision loss. Maybe it's worth submitting a patch to the SDK?
I also twisted my nose at first, was too used with makeup for UI like HTML, MXML, JSX etc, but after the Flutter beta came out, I decided to give it another try, to look more fondly and today Flutter and Dart are my first development options, you really learn to like it and start getting all the benefits. Took me one day or two days to get stateless/full widgets, they aren't like React's, but you get it and its awesome. Dart is way more simple than Java and if you like to take a look under the hood, you would be mesmerized on how Dart VM and the ARM compilations works.
Pick up Vue for Dart or even AngularDart, and carefully written code can be used for both mobile and web.
Really?!! I've never thought on using Vue with Dart. Is there any tutorial to learn these 2?
Do you need nano precision? RFC3339 should be good.
I hate myself for choosing Flutter so early in its development.
Why not passing the timestamp directly as an integer, instead of serializing it through a DateTime (assuming Golang and Dart have the same representation of a timestamp)? final timestamp = int.parse(stringValue); new DateTime.fromMillisecondsSinceEpoch(timestamp, isUtc: true); ... And serialization is more efficient ... I always found date parsing to be a bit messy :P
And alternative would be using Ampllify TS typings https://github.com/aws/aws-amplify/tree/master/packages/aws-amplify/lib with https://github.com/dart-lang/js_facade_gen
You can't use JS interop with flutter, since it compiles to native instead of JavaScript.
Great minds think alike? https://github.com/kevmoo/json_jones.dart
Wow... Did you ever publish or promote that anywhere?
I don't think so. It's been almost 3 years1
I know it's a bit late, but I stumbled upon your comment today and I wonder whether the positions are still open? I really loved Posse's creations and the Hamilton app got me to start learning Flutter. What kind of experience you'd expect to consider hiring?
I think Dart is really great to have, but I don't think it should be your main language unless it's your job.
I decided to do my college assignment in Dart (Angular) so I don't have to do JavaScript. While I have limited experience, I mixed options so far. Pub is amazing, but then the language itself feels like improved Java. I might stick to it on the web, and maybe Flutter when I need to develop an app, but I don't feel its a great candidate for backends. But then I am a fan of Go, so it's hard for me to switch mentality from a super easy language to "improved Java".
I like Dart on the back end, myself, but my back end needs are meager. However, I really don't like Go, so I think if I needed extra power on the back end, I'd use something like C#.
How did you get into understanding all the UI development? I've been a commandline dev all my programming life. I'm trying to wrap my head around all the nested components etc, but I'm having a hard time.
Don't click run! Seriously. It slowly makes Chrome consume more and more memory for a little while. other than that, it just looks like a frozen tab. Nothing bad happens though
Probably shouldn't be saying this here, but maybe you'd like Swift + Vapor? 
Yep... `dart:io` is the problem. Can't import that in DartPad.
Oooh. Ok. Thanks. 
Dude! Vue newbie here. I started with the React ecosystem \(Web \+ Mobile\) and I couldn't wrap my head around it. Then I switched to Vue.js and I'm enjoying it! Now that I started with Flutter \+ Dart, I'm seriously thinking on using Dart \+ Vue.js for web dev \(Web Apps, PWAs, etc...\). I didn't know there was an alternative to angularDart. Thanks for the hard work! Flutter FTW!!!
Is the dart-pad team aware of that? Even if it doesn’t support dart:io or libraries from packages, it should show an error message instead on hanging and eating memory like that.
I have a hard time with HTML too, or I have never understood HTML. But, did you really try to build a medium website with React?
It's in the DartPad docs, but I am surprised to hear you don't get a warning or error in the editor.
I **highly** recommend this and Bob's other writings. He's super great at communication and very knowledgeable. Best part: the entire book is free online! (It's on my Amazon wishlist, a print copy **will** be mine!)
thx for the alert on syntax errors
Gives me some weird ideas. I think I'm going to make my users *very* uncomfortable.
I had the similar problem when I started. Just start with simply widget and work towards more complexity. It's doable.
You don't have to deal with JavaScript build tools with Flutter. That's a big massive plus for me.
"Today's Javascript" is just like Java. You can type out import, class, super, String, Int, and more as Java. 
Thx man, I will try this one out.
It's actually not quite like the one in Dart....
Things are getting interesting!
Finally! I don't know if you are the creator of those videos but thank you.
Yep myself an a friend drafted up some slides and presented this content :) enjoy 
Glad to see these videos are out there! It's incomplete, but I've got 20 lessons or so of an interactive tutorial covering the basics of Dart, too: [Dart Academy Boot Camp](https://dart.academy/dart-academy-boot-camp-start-programming-with-dart/)
Let me tell you a story. It is about Dart, Vue, and Google. There was a person working in Google found a Dart's framework which is very powerful but complicated to use. I don't know why he left Google. After he left Google, he started to build a new Framework that uses that Dart framework's idea, but it is easier to use. This new Framework is called Vue.
This is not quite accurate. That Google employee thought AngularJS was overly complex, and most agree. Angular 2+ and AngularDart are far simpler frameworks to the original AngularJS. Vue is nothing but a view library, not a full app framework like Angular.
It is not about a view library or simplicity. * It is about you don’t have to touch the DOM yourself if you use Vue. DarkGlow666, if you really read this, you will find out this idea is also the idea of why choosing Flutter rather than React Native. Isn't this funny?
`dart:html`, comes bundled with the Dart SDK.
But I still need to write HTML and CSS for that.
Not true - you can create elements and apply styles to them using the `dart:html` API. The minimum amount of HTML you will have to write is a single `index.html` file with a script tag pointing to your Dart code. If you really don't want to use CSS, etc., it's certainly possible to do it all in Dart.
AngularDart is used by Google's internal CRM which is probably one of if not their most important internal applications. They wouldn't use it if it was slow.
I use in my work. One word: fast.
angulardart is great for angular over_react is great for react
I've seen some talk about this, but it could be a ways out, still. The "fast table" mentioned on the [road map list](https://pub.dartlang.org/packages/angular_components) is intriguing, though.
Might be best to hold off until the new Material Design is released. There's been quite a few Google Android apps been updated recently to fit the new Material Design look.
yeah same thought crossed my mind also that they might be doing a refactor to accommodate MD2. Hopefully we'll find out more next week at IO.
Congratulations!!
Nice! I can use daily, it's awesome. It's my fault or back button don't close the app?
Thanks man! No it's my fault. I intercept the back button press in order to close the webview window (the window that shows up after clicking "READ MORE" on a news article).
Thank you!
Firstly congratulations! I want to ask how long did you take to build this in dart? 
Thanks, I appreciate it! In just 5 days I had a basic version working. Took about 3 weeks until I published the first version to the Google Play store.
[Info from Dart2JS]: Took 0:00:16.034560 to compile angulardart|web/main.dart. Build completed successfully Changed one string message in "hello world" todo app. 16 seconds is ok?
In development mode you don't need to run dart2js. Use pub serve and run in dartium.
Can you provide a small sample of code showing how you're calling it?
Hoping some here might be able to give useful responses to this question
I think flutter will be use to develop apps like front end web apps, though they will be on the new OS Fuchsia, I know, Fuchsia is for mobile devices or not, maybe it can work for desktops too :)
&gt; though they will be on the new OS Fuchsia What do you mean? What does web app has to with with a specific OS?
That package is provided by the dart team and is as close to a "standard" for dart testing as you're likely to find. I'd imagine most projects that need unit tests are using it.
I like it. I'm keeping it. Nice work!
Thanks, I appreciate it !
&gt; The package home page provides example tests. Are those not enough? No. Otherwise I wouldn't have posted here.
Sure, you can ask them here, but you may find more knowledgeable people over at /r/FlutterDev. 
Yeah, initially I did but according to their community guidelines it's not appropriate for posting such coading help related question. So I just deleted my post.
I've posted my stackoverflow link in my post. Just now saw one person has replied something at there. I need to check that. In Giitter also I'd asked. But, didn't get much luck.
This is really neat. Will you open source the app, or at least a blog post telling the process of getting this done?
They said dartium will go. They say use dart 2.0 and pub run build_runner serve. Should I rely on using dartium in development today with latest versions of angular_dart?
1) Yes, vector_math is likely of use. If you don't know why, then I strongly suggest reading up on Model-View-Projection matrices. Flutter and vector_math do not contain a full 3D rendering engine; you will have to do a lot of conversion math on your own. vector_math has some 4x4 matrix operations that are useful to the types of conversions (transforms) that 3D graphics use. For example, once you have a 3D position, you would use a matrix transform to convert it to a "view" position, and then another matrix transform based on the nature of the camera and the device screen to get on-device-screen coordinates. 2) You'll want to use an existing augmented reality library that does real-world object detection and measurement, or use some type of real-world marker (aka a fiducial marker) in combination with a library that recognizes the marker in the video stream and derives 3D data from it. Either of those strategies should yield you a matrix transform(s) that will allow you to render something on your screen matching a desired real-world point. 3) Look at the CustomPaint and CustomPainter classes. That is the primary way of drawing arbitrary 2D graphics within a Widget. 
Thanks for all these information. Seems like a lot of things to study. But, I'll check it out. 
That links to Part 2 of the series. Part 1 is available here: [https://itnext.io/building\-restful\-web\-apis\-with\-dart\-aqueduct\-and\-postgresql\-3cc9b931f777](https://itnext.io/building-restful-web-apis-with-dart-aqueduct-and-postgresql-3cc9b931f777)
I've been using RN for over a year and there's little i've needed to do, that could be considered complex, where I've needed device specific implementations. Only thing that comes to mind readily, that really shouldnt be complex, is that on android, there's no support in RN for allowing buttons to have native button sounds for custom components. It drove me crazy for my bottom tab bar. With a bit of searching, you'll notice its not a concern from the RN community; it doesn't exist in instagram either. People have made pull requests that weren't approved because they didn't like the impl but didn't care to do anything else about it /rant
Flutter is not an app, it's a framework.
But still killer!
Pretty sure mirrors are staying around, but you can't use them in Flutter and I think I read somewhere that they're dropping web support for them. My understanding is that mirrors are being kept around for server-side apps where output size doesn't matter nearly as much.
In my time with Python, I enjoyed having IDLE available for getting started and for having a quick feedback loop on code ideas. Dart has DartPad to help get you started, and Flutter has an incredibly quick feedback loop, especially for mobile.
shoutouts to /u/thosakwe! he's pretty active on this sub
Can somebody explain how this works? I see that some C libraty is used, so Dart is just a layer that delegates to the Tensorflow C API ? 
Thanks!!!
At least for the low-level operations, it's a wrapper to the Tensorflow C API. Theres also a code generator I wrote that builds Dart representations of Tensorflow's available Ops, so that you can hypothetically build to high-level constructs like neural networks. The next step will be porting Tensorflow's "func" type, as well as control-flow operations.
I am hopeful for flutter, both for dart's sake and its own. I like using both technologies. Flutter has certainly has [given dart a boost](https://insights.stackoverflow.com/trends?tags=dart) and I hope to see a steady healthy growth from here. I think it still has a long way to go though with user adoption before it is seen as a real contender. &gt; Some of the drawbacks: &gt; &gt;It requires learning [Dart](https://www.dartlang.org/). :\(
Some people don't like learning new languages, even nice ones. Of course, Dart is lacking a few nice features that languages like Kotlin have, but I expect Dart will acquire many of them once they've finished building out the foundation of Dart 2.
Don’t rely on/use Dartium at all. Use the Dart Dev Compiler instead, which supports incremental builds and is far faster. Also has the benefits of not being leaky, out-of-sync with Chrome, etc.
\&gt; I think the framework Flutter uses is in C\+\+ That's correct AFAIK \-\- which means Flutter as a whole, being C\+\+, could be run through LLVM and to WASM which is a very intriguing idea. This all has me wondering if compiling to native binary from WASM is possible and how much of a performance gain would be possible if it were done.
Could you please share the code? I need it to learn
I just have a gist for now. I need to figure out how to remove signing keys from Github history. The code organization is pretty terrible. https://gist.github.com/h4040/385a113b9d94cfaa5273a99a910df3d3
I just have a gist for now. I need to figure out how to remove signing keys from Github history. The code organization is pretty terrible. https://gist.github.com/h4040/385a113b9d94cfaa5273a99a910df3d3 
Managed to get it working after tweaked a little bit. Thank you so much and hopefully you'll figure out how to remove that signing keys!
thanks, I will. though no benefits can compensate the pain of javascript debugging. Oh google, first you create cool frameworks (gwt, dart), and later javascript hordes come into the project and destroy native language debugging...
That's what I figured, and makes it difficult to go with Dart and Flutter for that matter for our upcoming project. 
Personally, I would recommend going with Flutter, then sharing that Dart code in a new AngularDart web app! Easier said than done, though, I know. :)
This is amazing! I just recently (like this week) started playing with turning my Android phone into a "desktop replacement" using Sentio.com's app. I'm able to run all my node stuff (my work project takes almost 4 minutes to build! Yippee!). But last night I was curious about getting Dart and Flutter running on it. I downloaded the Linux package of Flutter and ran into the "Flutter uses a build of Dart that doesn't run on ARM" problem. I'll definitely have to play with this!
I am not on a team of 80, just myself and one other guy, but we are currently moving to flutter/angulardart and so far I am quite pleased with the decision. AngularDart is not as widespread as AngularJS, but it still comes with a decent support backing from Google.
congratulations 
I want a dart course from him. But not a bullshit course like the ones you find everywhere. Very detailed advanced course
About pure Dart, just the official website. For Flutter you have to visit Udacity https://eu.udacity.com/course/build-native-mobile-apps-with-flutter--ud905 
There are some on Dart: [Dart courses on Udemy](https://www.udemy.com/courses/search/?q=dart&amp;src=ukw)
I literally found this post because I googled "dart worst language". I hadn't thought about it in over a year, and it was because I saw a dart, a physical dart. And I'm one of the 12 people bothering to comment here. There are 11 online. There are 3000 subscribers here, the language apparently tops a lot of "worst language" lists... I'm sorry but it doesn't sound good. I think you've had too much koolaid. Javascript is the world.
Now, I just looked into Flutter and it seems like, other than having been made to used Dart, it has nothing to do with Dart. Sure, the speed at which it hot-swaps while you edit is based on the JIT feature of Dart. But V8 also has JIT and honestly, hot-swapping should never be something that is taking long enough that a 50% increase is a factor. Now to give Dart it's due, part of the teamworking on the Dart VM have come from V8, and due to what can only be described as more sane choices in the design of Dart vs Javascript, the compiler can produce code for the Dart VM which runs in certain cases 50% faster than equivalent code on V8. Then we have the fact that, for the browser, Dart compiles to JS. Google decided not to have Chrome ship a Dart VM. Now, mobile might be a different situation, since you can ship a Dart VM with your app, or somehow take advantage of one already installed and shared by all Dart apps on your phone (I'm not much familiar with low level details of mobile). Fundamentally, the problem is of adoption. Nobody gives a damn about this language other than a few people and a select set of diehard teams being coddled by companies who have so much money to throw out that they R&amp;D into 9 different competing ideas at once just to see which one sticks (see: Google). The whole industry is based on Javascript. All the tooling, all the existing codebases, all the *existing programmers*. It will take a long time, if ever, for Dart to carve space in the market for the reason of inertia alone.
Coming from Swift and started looking at Kotlin, Dart is just more typing compare to the other two. 
Do these courses have added value compared with reading the Dart doc? 
Honestly, I haven't taken them, but I imagine their pacing is very different, with more complete examples and such. The Dart Language Tour targets experienced programmer's looking to learn Dart as an additional language.
Very nice! Is this tool open source? It seems to be mentioned as such, but I cannot find links to a repo or source code.
I've seen the author make comments stating his intent to open-source it, but I don't know whether he's done it yet or not.
Perhaps. But many, especially designers, might appreciate one.
Right now, Flutter is best saved for building UI. It's still a long shot from being on par to the native frameworks. 
I'm not asking about Flutter. I'm talking about the Dart language itself.
In that case, you're trying to compare two languages made to target mobile to a language that was not. Without Flutter, there is no comparison between Dart and the other two. 
I've only been using Flutter/Dart for a few days, but I have some first impressions about Dart compared to Kotlin (purely as languages and the tooling, not Flutter or the Android SDK): - Dart has some odd quirks I don't really like. For example, the lack of access modifiers. I'm not really sure why they wouldn't include these in the language. THe whole `_` convention is kind of weird and an awkward workaround. - Named parameters are done confusingly in Dart. Why not just allow any parameter (optional or not) to be accessed by name, without requiring the `{}` syntax? Kotlin approaches this much better, in my opinion. I see that there's even a `@required` annotation for named parameters.... if you're going to include that, why not fix named parameters altogether? - The Dart plugin for IntelliJ is great given that it's a relatively young language, but it could use a lot of work. I'd love finer color scheme customization and the ability to enable/disable/tweak inspections via IntelliJ settings. - Package management is much nicer in Dart, I really like how simple and easy it is. - Factory constructors seem really useful. - Doc comment syntax is really nice, and I love that it fully supports Markdown. Unfortunately, the quick-doc view in Android Studio/IntelliJ doesn't completely parse the markdown, e.g. links such as `[ListView]` don't turn into clickable links, they're just treated as regular text complete with brackets. 
- a @required optional parameter looks weird for me too - really often I forget to end lines with a ; - I miss the nullable / non-nullable types from Kotlin/Swift
&gt; For example, the lack of access modifiers. FWIW this was inspired by Python. I personally like it; once you get used to it, it's easier to read that dozens of `public`s and `private`s thrown everywhere.
Here are the major differences I know of: - Swift and Kotlin both have stronger (and arguably more flexible) type systems. In particular, Dart doesn't have null safety, and it doesn't support anything like union types (like Swift's enums or Kotlin's sealed classes). - Kotlin really blurs the line between expressions and statements. Neither Swift or Dart really have anything comparable. - Swift's compile times can be kind of long. - Kotlin has the advantage of being able to use the entire Java ecosystem. - Dart has the advantage of being able to easily share code between mobile and web (Kotlin kind of does this too, but it's not as mature). - Dart is the only one that has code generation as part of its integrated build system. Swift doesn't support this at all (at least for now), and Kotlin has no official build system (though Gradle is close enough). - Dart has the most mature target platforms. It runs on Android/iOS (via Flutter), web, and desktop (though desktop GUI applications aren't really a thing yet). Swift only runs on iOS, macOS, Linux (with smaller community support), and Windows (with very little community support). Kotlin runs on desktop (via the JVM or the relatively young Kotlin Native; the latter has little community support), web (via the JS backend; this seems to have more community support), Android (via ART), and iOS (via Kotlin Native). IMO it's a bit of a disadvantage for Kotlin that you're using two different backends for Android and iOS. - Many Dart libraries don't support Dart 2.0 yet. Kotlin hasn't really had any major breaking changes thus far, and Swift's community gets over them surprisingly well.
I am also a big fan of Dart's privacy story. It's not quite as flexible or powerful as some other languages in that area, but the features it lacks are the more rarely used ones, and the benefit is far cleaner, more terse code.
&gt;THe whole _ convention is kind of weird and an awkward workaround. It's not a workaround though, `_` denotes an identifier as library private. 
Nice!!
Nice! 🎯
Anyone have any opinions? Is qop's critiques about the removal of gradual typing accurate?
https://pub.dartlang.org/packages/binary
I think you're mostly looking for the `dart:typed_data` library. [1] 1. You'd typically put an integer into a position of a byte list, for example an Int8List or Uint8List, for example with the `[]=` operator. 2. I don't think there is a Byte or byte type. 3. Mm I don't see anything either, perusing the API docs. Maybe just have to do your own shifting and masking to get a 4-byte int into 4 positions of an Int8List. 4. I don't think there is any Uint8 type. Just Uint8List and friends. 5. First create a Int*List large enough to fit your final bytes, then use the `buffer` member to access subsequences. E.g. $ cat a.dart import 'dart:convert' show UTF8; import 'dart:typed_data'; void main() { var c = new Uint16List(8); gatherFirstHalf(c.buffer.asUint16List( 0, 4)); gatherSecondHalf(c.buffer.asUint16List( 8, 4)); print(UTF8.decode(c)); } void gatherFirstHalf(Uint16List data) { data[0] = 0xF0; data[1] = 0x9F; data[2] = 0x98; data[3] = 0x9B; } void gatherSecondHalf(Uint16List data) { data[0] = 0xF0; data[1] = 0x9F; data[2] = 0x91; data[3] = 0x8D; } $ dart a.dart 😛👍 [1] https://api.dartlang.org/dev/dart-typed_data/dart-typed_data-library.html
Most of the popular Dart packages should be perfectly compatible with Dart 2.0 at this point. If you hit a compile-time exception or run-time exception type check failure, please open a bug against the package that needs to be fixed!
I tried it.. it is coooool.
A quick idea. Lately many languages and editors use LSP (Language Server Protocol). I know Sublime has an LSP plugin (https://github.com/tomv564/LSP) and Dart has a language server (https://github.com/natebosch/dart_language_server). Both had recent updates. You may be able to make it work together. I think that is way forward anyway.
I was able to get this sort of working, issue now is the Diagnostics Panel shows things like //TODOs for Dart's source. { "clients": { "dartlsp": { "command": [ "~/.pub-cache/bin/dart_language_server" ], "enabled": true, "languageId": "dart", "scopes": [ "source.dart" ], "syntaxes": [ "Packages/Dart/Dart.tmLanguage" ] } } } 
That's cool. I guess, you might ask around on /r/SublimeText or, better yet, on SublimeText forums. The author of Control Package is now employed by Jon AFAIK and could help with all kinds of integration questions. I was just lurking here and figured I could at least share whatever little I know. I use VSCode personally but run SublimeText as a backup.
Here's a sneak peek of /r/SublimeText using the [top posts](https://np.reddit.com/r/SublimeText/top/?sort=top&amp;t=year) of the year! \#1: [New Sublime Text Logo!](https://i.imgur.com/PaitXUM.png) | [25 comments](https://np.reddit.com/r/SublimeText/comments/6zumg2/new_sublime_text_logo/) \#2: [Sublime Text 3.1 Released](http://www.sublimetext.com/blog/articles/sublime-text-3-point-1) | [6 comments](https://np.reddit.com/r/SublimeText/comments/8ho83k/sublime_text_31_released/) \#3: [Just discovered alt+left/right](https://np.reddit.com/r/SublimeText/comments/6zk6df/just_discovered_altleftright/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Yeah. There are occasionally useful posts and very few comments or even upvotes. SublimeText own forums are better. I believe the Flutter team is mostly aiming at integration with IntelliJ IDEA. VSCode Dart plugin is pretty good though and gets regular updates.
Dart has stayed pretty consistent, but Dart 2 is coming with many other changes, including the death of Dartium. It's definitely a bit out of date, especially since this particular change has been around for a while now. 
This is a great list of comments on Dart. I'll address the shortcomings briefly: &gt; For example, the lack of access modifiers. I wasn't around back then, but I think this was a case of YAGNI: it's really easy to _over_ engineer visibility concepts (private v package private v protected...), so instead, a simple system exists today: universally public and library-private (`_underscored` variables). The [meta](https://pub.dartlang.org/documentation/meta/latest/meta/meta-library.html) package makes available some annotations that you can enforce via the dart analyzer, like `@protected`, `@visibleForTesting`, and `@visibleForOverriding`. &gt; Named parameters are done confusingly in Dart. Why not just allow any parameter (optional or not) to be accessed by name, without requiring the {} syntax? I actually cannot find an issue for this request (feel free to file one), but there are [a few](https://github.com/dart-lang/sdk/issues/30353) [similar](https://github.com/dart-lang/sdk/issues/30354) [requests](https://github.com/dart-lang/sdk/issues/30255). I'd +1 your idea though. &gt; I'd love finer color scheme customization and the ability to enable/disable/tweak inspections via IntelliJ settings. &gt; Unfortunately, the quick-doc view in Android Studio/IntelliJ doesn't completely parse the markdown... [Here's](https://youtrack.jetbrains.com/issues/WEB?q=Subsystem:%20Dart) JetBrains' issue tracker for Dart. I don't personally use IntelliJ, so I haven't perused the tracker for your issues, but these sound like good ideas. Disclaimer: I work on Dart.
Tooling has changed much more than anything else in Dart over time. What this means is that even older tutorials will be relevant when it comes to syntax for the most part, but they may occasionally walk you through the setup of tools that have fallen out of favor. For the most part, syntax has been added (async/await, null-aware operators, etc.), but not significantly altered, with the only big exception being that `new` and `const` for object construction recently became optional.
Yes, Eclipse and Dartium are out of date. There are better options for both now: To replace Eclipse: IntelliJ (or WebStorm) or Visual Studio Code To replace Dartium: If you're trying to learn web development, I would reccomend the latest stable version of AngularDart. There's a tutorial here: https://webdev.dartlang.org/angular/tutorial. AngularDart works very well with Dart 2, which has a new build system that runs in all modern browsers, so there is no need for Dartium. More info here: https://www.dartlang.org/dart-2. You can still use Dart 2 without AngularDart of course. If you are just trying to learn the basics of the language there are lots of great resources now. Consider https://github.com/johnpryan/dartbyexample for the basics.
Not sure, buy you could write Map mymap = {}; In Flutter they are making 'new' optional when creating Widgets
I guess the rule is: - **new** is optional - you should/must write **const** if you need/want something const &gt; As a general rule const is used whenever it is required, and otherwise new is used. This requirement arises from the syntactic context, based on the fact that a non-constant expression would be a compile-time error. https://github.com/dart-lang/sdk/blob/master/docs/language/informal/implicit-creation.md
btw IntelliJ has problems with autocomplition if you don't use new or const
Dart 2 is production ready at least for Flutter
I am using VS Code
Thanks ! And for Angular as well ?
Thanks, appreciate your reply!
Thanks!
Thanks!
We haven't shipped Dart 2 stable yet, but we're very close. All of the type system changes are done, and the language features are implemented. We're mostly chasing bugs and fixing up libraries and tools at this point. If I were you, I would start with the latest dev version of Dart 2. Starting with Dart 1.24 now is going to cause you a lot of unnecessary migration pain pretty soon, and Dart 2 is an all around much better language. &gt; OT: Is there any date for the release of Dart 2 ? No, sorry. We don't tend to announce release dates ahead of time since schedules tend to be pretty fluid. Soon though. :)
&gt; I'll definitely have to play with this! do you have an update on this. did you get luck getting it all working?
 Map myMap = {}; It has clear meaning (or intention) of creating new object. What I concern on is, whether removing 'new' (or optionally omitting 'new') gives users ambiguity between method call and object creation. 
Still not supported yet on IntelliJ. Thanks for you tip! For VS Code, the addon and its language server deduce optional 'new' well. However, when I removed all 'new' keyword from my code, Dart VM failed to run the code and threw an exception saying missing 'new' keyword on creation.
Dart VM crashes when I run my toy project which takes advantage of Dart isolation. In other cases, it seems okay and quite stable.
As long as conventions are followed, there is no such ambiguity. Method calls should not be capitalized, but class names should.
you need to update the environment variables in VS. https://imgur.com/MUlFKvL 
Unfortunately I haven't had the time to play with it yet. It's still high on my list!
It’s soon according to Dart team. I assume it means Dart 2 will be production ready when your new app is production ready. 
Thank you !
It's actually down to the Flutter version you use whether this works or not. The current beta v0.4.4 doesn't support this properly, but dev and master channels should (see [some info here](https://github.com/Dart-Code/Dart-Code/issues/1007)). So, if you don't mind switching to dev/master channels you can have this fixed (same for both VS Code and IntelliJ).
This is correct - while Dart 2 is default for Flutter, it's not for the VM. You'll probably also want to add it to `dart.analyzerAdditionalArgs` so that the analysis server uses it's Dart v2 rules too.
Methods can create objects and factory constructors can return existing instances; so I'm not sure the difference is all that meaningful :-D
 import 'dart:io'; import 'dart:collection'; import 'dart:math'; import 'web/common/Protocol.dart'; import 'dart:convert'; void main( List&lt;String&gt; args) { HttpServer.bind("127.0.0.1", 4040).then( (HttpServer server) =&gt; server.listen( ( HttpRequest request){ if ( WebSocketTransformer.isUpgradeRequest(request) ){ WebSocketTransformer.upgrade(request) .then( (WebSocket ws) =&gt; acceptWebsocket(ws) ); } else { handleRegularHttpRequest(request); } } ) ); } HttpResponse handleRegularHttpRequest( HttpRequest request){ print("Regular ${request.method} request for: ${request.uri.path}"); HttpResponse response = request.response; if( request.method=="GET" &amp;&amp; request.uri.path=="/playersraw" ){ response.statusCode = HttpStatus.OK; response.headers.add("Access-Control-Allow-Origin", "*"); response.headers.add("Access-Control-Allow-Methods", "POST,GET,DELETE,PUT,OPTIONS"); response.write( JSON.encode( [ { "name":"Johnny Server", "score":56}, { "name":"Rambo Server", "score": random.nextInt(100)}, { "name":"Alien Server", "score":78} ]) ); } else if( request.method=="GET" &amp;&amp; request.uri.path=="/getrooms" ){ response.statusCode = HttpStatus.OK; response.write( roomlist.toJson()); } else{ response.statusCode = HttpStatus.FORBIDDEN; response.reasonPhrase = "Unknown request"; } response.close(); return response; }
Can you do it? Sure. You can transpile your Dart into JavaScript, and then use that JavaScript in your web app, but what kind of web app are you trying to build? Why do you want to avoid Angular and other frameworks? The frameworks are there to make your life easier. That being said, if you are brand new to Dart, and just want to test it out with a toy project without complicating things with frameworks, sure go ahead and fiddle. While there is a lot of Angular centric content in the following link, it also contains info on how to get started on a web project that does not include any framework: [https://webdev.dartlang.org/guides/get\-started](https://webdev.dartlang.org/guides/get-started) If you are looking for a blank canvas, get webstorm, install the dart plug\-in and start a "bare\-bones" project.
https://dartpad.dartlang.org/49bde0c1ed780decc902f3d4d06d8f0c on the left-top corner you can switch between dart/html/css code.
Yeah, I'm basically seeing what Dart can do in the near term. Tackling Angular sounds like it will be time consuming. I'm following one Dart tutorial, and it reads like learning things you'd see in Python or Ruby (so nothing web-specific). And I thought Dart wasn't connected to Angular until recently, so was wondering what something more bare-bones looked like. In any case, I'll check your link and see what I can ignore.
Several of the tutorials on https://dart.academy walk you through building simple web apps without using a framework, too.
If you want to use Dart instead of JavaScript you can just use `dependencies: browser: '&gt;=0.10.0'` (not sure what version should actually be there but this works) in pubspec.yaml, `import 'dart:html';` in the .dart file and in the html file `&lt;script type="application/dart" src="main.dart"&gt;&lt;/script&gt; &lt;script src="packages/browser/dart.js"&gt;&lt;/script&gt;` of course replace "main.dart" with the name of your dart file.
Pretty sure the [Dart for Hipsters](https://www.amazon.com/Dart-Hipsters-Chris-Strom/dp/1937785033/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1529015160&amp;sr=1-1&amp;keywords=dart+for+hipsters) book has a full-on, class-based system for managing views and such in a regular Dart web app. The book's a bit older now, but most of the HTML package material really won't have changed much in that time. You'd primarily want to ignore chapters on tooling and IDEs, and just be aware that a few nicer elements have been added to the Dart language since then (`async/await`, null-aware operators, etc.).
Should be noted that this applies only to Dart 1.x.
Seems Dart sdk archive just has the api docs as a zip file. [https://www.dartlang.org/tools/sdk/archive](https://www.dartlang.org/tools/sdk/archive)
Thanks!
Thanks!
Thanks!
Thanks for the tip! That at least addresses part of my first question.
1 - Someone else answered this. However, in my 4 years of daily dart I've rarely needed documentation offline while writing a web app :) 2 - VSCode and IntelliJ/WebStorm can auto-complete or auto-insert imports. General convention for Dart is to import from the highest (least-nested) file possible, and public exports are usually included as "package-name:package-name.dart" on well-structured repositories. Check out the [dart style guide](https://www.dartlang.org/guides/language/effective-dart/style) and [pub package conventions](https://www.dartlang.org/tools/pub/package-layout) for more info. Generally snake_case is preferred for file names. 3 - The quality of the doc comments in the Dart API code are pretty good, so I usually go to definition (command+B in IntelliJ), or F1 to bring up doc comments for a method in a jump frame. I use OverReact instead of Angular though, and the doc comments in there are also pretty good. 
Yes you should check out vuedart. https://refi64.com/vuedart/
You can interop on any JS library. Personally I'm not a fan of using interoperability as a default engine, it's the kind of thing you should rely only when there no other way around. If you really want to use Vue, use JS. If you really want to use Dart, give AngularDart a try.
true maybe i just need a dart to js compiler. i basically want to do all modelling and services layer in dart and ui with vue i find angular dart too complex compared to vue
&gt; 2 - VSCode and IntelliJ/WebStorm can auto-complete or auto-insert imports. How do you get auto-insert (import?) in VSCode? I known it can auto-complete import statements, but auto import works? 
&gt; 1 - Someone else answered this. Someone else answered half of it. Their answer didn't address how to read third-party packages offline though. &gt; However, in my 4 years of daily dart I've rarely needed documentation offline while writing a web app :) I've on multiple occasions found myself wanting to work on code on a plane or car ride when I didn't have Internet access. A motivation for this post was that I was on a flight earlier and couldn't find any local Dart documentation nor figure out commands to generate it. &gt; 2 - VSCode and IntelliJ/WebStorm can auto-complete or auto-insert imports. But the documentation doesn't tell you what package URL to import? &gt; Check out the dart style guide and pub package conventions for more info. Generally snake_case is preferred for file names. I understand the conventions. My confusion is that `import "package:angular.router.testing.dart";` doesn't even work, and `package:angular_router/testing.dart` (the correct import URL) doesn't seem to appear in the web docs anywhere. &gt; The quality of the doc comments in the Dart API code are pretty good Yes, those are the docs I'm interested in reading in a web browser. :) Jumping to definition works, but then all the implementation details are there too cluttering up the screen. I'd rather read the dartdoc-generated documentation.
TFW other people are doing a better job of advertising your project than you are. 😐 I'll put out a little word of warning, though: the next version of VueDart is going to be moving to Dart 2's build package instead of the now-deprecated pub transformers. This is a good thing, but it's going to mean quite a few breaking changes (again)!
I am myself currently writing code that steps through JVM Bytecode and analyses it, so I know that feeling when you need to write complicated stuff even when it is obvious that 99&amp;#37; of the time your code will only be dealing with simple code, but the remaining 1&amp;#37; makes your life way harder.
Unrelated question, why did you choose to support vuematerial but not vuetify?
The closest tool I could think of is the Flutter Widget Inspector: [https://flutter.io/inspector/](https://flutter.io/inspector/)
To use await keyword the function has to be async, right? Try making main async
You're right, how could I miss that. &gt;.&lt; Thanks!
In the future consider using the analyzer (perhaps via an IDE like Visual Studio Code or IntelliJ), as it will explain errors like these in some detail as you write your code. Not to mention, the analyzer also does many other great things.
I will surely check that out. Thanks!
Visual Studio (in C#) does not highlight 'await' as a keyword unless you specify the containing method to be async. A most valuable feature IMHO
Now that is a handy feature.
As pointed out, you should get more help if using an editor that integrates the analyzer. Here's how this code appears in VS Code: [Imgur](https://i.imgur.com/m3TBjur.png)
It was mostly a practicality issue; the website currently uses VueMaterial (though the version for the next release is going to use directly use Google's MDC instead). If you [look at the code](https://github.com/kirbyfan64/vuedart/blob/master/vue/lib/plugins/vuematerial_legacy.dart), though, it's &lt;100 LOC of simple binding boilerplate, so it wouldn't be too tough to extend to Vuetify. I just haven't gotten around to it.
Wow, that's cool!
I surely check out VSCode. :)
Here is a good way to get started: [Dart Academy Boot Camp: Start Programming with Dart](https://dart.academy/dart-academy-boot-camp-start-programming-with-dart/)
This looks more at my level. Thank you 
Solid Vue bindings is the only reason I hesitated learning Dart, after discovering your lib, I'll be surr to check things out asap. Thanks for this!
This talk may be a bit misleading - the maturity level of the Dart version of Angular 5 is far behind the typescript version. I tried building the same app with Angular Dart - here are the differences I found from personal experience: - ngdart (angular_cli pub package) code generation is not as advanced - angular_components are far behind their angular/material counterparts - angular/material has advanced theming support, a larger user base, and more active development. They also have a data table widget which is crucial for enterprise development. - the angular_router dart version is more complex in its setup - the typescript version is more intuitive - harder to use integration with cloud services such at auth0 - along with abundant JWT libraries on the typescript side it is difficult to simply integrate using a vendor's JS library unless a dart wrapper exists for it - and very few do. If Flutter takes off then these 3rd party vendors may be more inclined to put out Dart libraries for easy integration with their APIs. Otherwise a modern app using cloud services is much harder. I found that for someone outside of Google building a MVP app the typescript version still remains the way to go. It may be productive inside Google but Dart has a lot of catching up to do maturity wise with its Typescript counterpart.
I certainly did not intend to mislead. Your reply is very helpful to complete the picture of the state of the two Angulii, and you make excellent points. As I said in the talk, if you're deciding which one to use--probaby Angular 6 (the TypeScript flavor) for many of those reasons. Hopefully I've helped to raise awareness of the options we have available to us. Thank you for your reply!
Dank.
Hey there! If you haven't already, you should ask this question on the dedicated Flutter subreddit, /r/FlutterDev. We are more than happy to help here, but you might find more expertise on your particular subject over there. ;)
Theres is still the dynamic type isnt it?
You need to have some server code that makes your code accessible through http requests. I'm not at my PC at the moment so I can't send you links (shitty mobile connection). But look up laravel, or even the slim php framework. They will allow you to create an api that your app can just send http requests to, and will handle your sql searches according to different api calls.
Thank u for your reply, any ressource would be mostly welcome :) As I said in one of the comment: I came to the same solution. I think it’s better to write a simple rest api on a Webserver wich communicate with my MySQL server in the background or I would have to find MySQL api libraries for dart and I don’t know if there are any or if they even work with flutter. But it’s difficult to figure out witch one, since everybody suggest a different one. 
Unfortunately everyone will suggest different frameworks because they are familiar or more comfortable with one over the other. For example I would suggest Django or Flask in Python over anything php. But if you know Dart and dont want to learn something new I would check out a Dart framework. I have not used any but it might be quicker to stay in the same language if you have to learn a new language or skillset. The best tool is the one you are most comfortable in as you will develop code quicker. HTH
You are doing a damn good job with the lib though. Once I get a little better with dart I would be down for jumping in and helping out anyway I can. 
So as it turns out, I left out the password field when I didn't use it for the xampp server. Hopefully I'll have an app to share with you guys shortly with maybe some other project I've been working on in my spare time.
Personally, I wouldn't recommend MySQL with Dart, as the drivers tend to become unmaintained, forked, and then unmaintained again... As evidenced by this being sqljocky5, and not 1, 2, 3, or 4. There are drivers for other databases in Dart, though, including PostgreSQL, MongoDB, RethinkDB, and a few others. If you can get MySQL going, though, then by all means, use it.
What would you say is the most stable to work with using dart? MySQL is what I've used for my projects in other languages like Java and php so I am comfortable using that however I am not opposed to trying something new.
I would definitely say that PostgreSQL, MongoDB, and RethinkDB are stable.
Thanks! I'll give PostgreSQL a try.
He, thanks for creating this, I just stumbled over Dart and was instantly searching for a Vue library. How is the generic support coming along? I want to convert an existing project I'm currently building, but I would at least need vuetify and vuex. Is there maybe a mailing list, where I could get an update, once this is implemented? Thx!
It's not Vue, but if you were interested in React here's a simple todo list example: https://github.com/leerob/dart-react-todo
I'd recommend contributing to the vuedart project. You could help implement the changes that you want so others in your position can use the package and maybe follow your example in contributing to it.
I'm just not sure I got the chops for that, but I will definitely look into it
Maybe reach out to the maintainer and ask them for guidance on how to get started. If something is confusing, you could request them to add comments / documentation to make it easier for others to contribute.
that's a good input, but maybe there is another project I overlooked so far
Dart itself already has something like Axios. What exactly do you mean by generic support? Vuetify support would be very easy to wrap. Vuex...not so much. In particular, the main difficulty has been that its API simply was not designed with type safety in mind. I was originally planning Vuex for VueDart 0.3, but it keeps getting pushed back... I have some ideas for how to approach it now, though. I just didn't want to rush in too much. Also, right now there's no mailing list. I *do* technically have a Discord, but it's largely dead beyond hope of recovery. I normally post new releases to /r/vuejs and /r/dartlang, and you can also follow the issue on the GitHub repo for Vuex support. Again, though, I'll warn you that the next release (0.4) will have some breaking changes. Once this is done, though, I don't see any major breaking changes for quite a while. 
Here's a sneak peek of /r/vuejs using the [top posts](https://np.reddit.com/r/vuejs/top/?sort=top&amp;t=year) of the year! \#1: [Vue has passed React in stars on GitHub, almost at 100k 🎉](https://hasvuepassedreactyet.surge.sh/) | [26 comments](https://np.reddit.com/r/vuejs/comments/8r7tb7/vue_has_passed_react_in_stars_on_github_almost_at/) \#2: [Vue official style guide](https://vuejs.org/v2/style-guide/) | [14 comments](https://np.reddit.com/r/vuejs/comments/73gd31/vue_official_style_guide/) \#3: [VueJS Cheatsheet - Everything you should know in one single file](https://github.com/LeCoupa/awesome-cheatsheets/blob/master/frontend/vue.js) | [9 comments](https://np.reddit.com/r/vuejs/comments/7uzcr7/vuejs_cheatsheet_everything_you_should_know_in/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
The advantage of flutter and something like angularDart is that you share client codebase, couple that with aqueduct and you’re basically full stack dart. If you’re doing a laravel backend with a ha front end, well, then there is really no reason to involve dart.
Hey there... Hopefully someone will have a great solution for you here, but if not, consider asking the dartlang community on Gitter. They are often very helpful with this sort of thing.
Here is my TLDR: Angular is the framework of Dart, PERIOD. If you want something more, No, it wont happen. Stick to JS. I have been doing Dart for 2.5 years, and every single reason DART was created has failed. They created flutter because otherwise the community would drop it. I do *KINDA* like Flutter, because it EXISTS to be transpiled. Ionic, Cordova, React native etc all exist which do the same thing, so dart doing it DOES make sense. The small community can say all they want that it is niche and special but come on now... look at things at a larger scope for once. Its really just OOP for web but since ES6 came out AFTER dart was created, I find that there is NO use for this language anymore other than Flutter... and even then so, the resources are sooo small and it isnt even in release. Source: 5+ years dedicated JS dev followed 2.5 years strictly Dart Dev (PolymerDart, and AngularDart). I will NEVER use this language again when I leave the company I work at... and for good reason. It just ISNT great... and because of that, what puts it ahead of other options out there. /endrant
Couldn't disagree with this comment more. I've been programming for 25 years, I did JS web dev before there was Dart, and now I've been doing Dart web dev for more than 5 years. As a language, Dart is infinitely nicer to work with than JS, or even TypeScript. Where I work, we have a large AngularDart project and a mobile project that uses Ionic (Angular and TypeScript). I can't stress enough how much better working on the Dart project is. Dart is cleaner, saner, and better-put-together than the organic mess TypeScript inherited from JavaScript. We regularly use JavaScript libraries in the Dart project when one fits the bill. It's not hard at all. So we miss out on exactly nothing. &gt; They created flutter because otherwise the community would drop it. This is totally inaccurate. The Dart team had nothing to do with Flutter's creation. Flutter was made by the Chrome team, and Dart was chosen after vetting more than a dozen languages for the job. Dart happened to have the right combination of features and ecosystem to work well in the framework. See [Why Flutter Uses Dart](https://hackernoon.com/why-flutter-uses-dart-dd635a054ebf).
Hey! VueDart maintainer here. Yeah, it's definitely a one-man project right now, though I'm trying to get a pretty major release within the next month (there are a few more things I want to tweak + I need to update the docs). AFAIK it's the only up-to-date set of Vue bindings (if there were others I wouldn't have bothered creating another one!). The plug-in scenario is...interesting. The majority of the problem is that Vue's plugin system is *incredibly* dynamic, in constrast to Dart's rather static style. The next release will have a few enhancements to this, but it's definitely something that will continue to be improved in the future. There could definitely be some more documentation for that, though! The biggest advancement will come later on when I add a the ability add transformation plug-ins to the VueDart source builder, but for now you can make it work (in the repo, there's a set of bindings for VueRouter and VueMaterial's legacy/0.8 version as examples). 
I know i would hit a string with some people. :) Heck, I am in a dart subreddit, so my distaste for it is counter the main stream of this community. There are nuances i do enjoy, some of which make things more clean than ES6 for sure. Some things that are intuitive as well. I look at a grand scope of why things exist, and why things dont, Almost philosophically. I see why dart was created initially and their vision, but the reasons for it generally failed (i dont need to pinpoint them, as they are all over the web). Theyve had to make some adjustments to account for it. AngularDart isnt bad, but the differences between doing Angular in Dart vs TS or JS really comes down to the analysis of the code and the intuitiveness of the language itself, so given that it Angular can just be removed from the scenario, as it is normalized across the board. Everything has its perks and flaws after all which makes 1 choice different than others. That is why Google is split so much internally on TS vs Dart. A lot of people I work with, including myself are test driven development. Especially in a component driven design paradigm, to ensure a component functions as designed it makes sense to be test driven. Dart has some testing functionality I enjoy. It reminds me a little of selenium in the functionality of setting up page objects and the like. I think my personal distaste for this is that since our component team isnt test driven, their components break all the time. This is obviously a company issue though, and recognize it so i cant talk bad about testing for dart, though I feel there are some holes which need to be addressed in it. It is coming along. For it being so middle of the road, and not jumping out at me, I thought "hey flutter looks like it would be great", and so far it isnt bad. I do find it better than some of the clunkier options out there. Now, I do think that the grandeur scale of the application I am working on makes it a little skewed. One key example which grinds my gears is that I can make a Component to work with and see how it is when I serve my app, but if i need to change anything in dart code (html changes are quick), it is a 5+ min build for the app. Sooooo... minor dart tweaks, QA, Test driven development, etc can chew up my day and hammer at my productivity (and my entire teams). I am not sure why the app takes soo long, but according to higher it is beyond my paygrade, which is fine, but it hampers most other things.
thanks for doing what you do. I hope, should I decide to go this road, that I can contribute too. What would help the most? on the other side, I was burned before, doing something super specialized, against the grain, just because I wanted to have the best of both world (e.g. Cordova)...
Thanks for your against the grain perspective. Since using Angular after using Vue really feels like a huge step i the wrong direction, I might stay away from Dart for some time and wait how it matures and use TS+Vue to finish the current projects
Thanks! But after working with Vue, React feels kind of overcomplicated. Vut still better than Angular though, maybe I give it a spin
He thanks for responding here too. I got the "generic support" phrasing from your website. What I mean is, I want to use other vue components, installed via npm. eg from my current project VeeValidate, flatPickr. Actually I don't need vuex so far. Or maybe there is a some more idiosyncratic way share state info in Vuedart?
I will watch vuejs than and look again once you update to 0.4
Note - moved to https://github.com/thosakwe/immutable_state
&gt; I got the "generic support" phrasing from your website. OOOOOOHH hahaha my bad. I should probably clarify that before the 0.4 release... &gt; What I mean is, I want to use other vue components, installed via npm. eg from my current project VeeValidate, flatPickr. Looking at those projects, they look like they'd be pretty simple to bind to Dart. Since they actually seem pretty cool (VeeValidate in particular), I *might* throw in bindings for them as part of 0.4. &gt; Or maybe there is a some more idiosyncratic way to share state info in Vuedart? Unfortunately not, though I have some plans. It's probably going to be based on Vuex but with a different, more static, DI-like API, inspired by some state management libraries I saw for Flutter.
Again, thanks for your effort, I'm really looking forward to 0.4! How hard is it to bind a library to Dart? What needs to generally happen? is it like with the type shims in typescript?
Sort of I guess? You'd basically use [the js package](https://pub.dartlang.org/packages/js) to bind it. You'd bind everything using the `@JS()` annotation, and anonymous types (think TypeScript's structural typing) would use the `@anonymous` annotation. You can see an example [here](https://github.com/kirbyfan64/vuedart/blob/master/vue/lib/plugins/vuematerial_legacy.dart).
and once you do this it also works if the package updates, as long as the API doesn't change/break? or do you have to do this for every version?
Now, I must say, Angular is pretty good but it depends on your use case and reason for having the framework. So it works pretty well with dart. Choosing dart is a large scale business decision. A person who is engrained in TS/JS would find it annoying as dart just compiles back to JS. It also optimizes it automatically, so attempting to optimize your code can be counter productive. As a larger business scale decision to use dart, I see it as a way to give people with Java / C# a way to do web dev work without explicitly training them in Javascript. JS just clicks for some people, and it doesnt for others. That being said, it allows a company to retain developers. I like solving the problem in the best way, disregarding "Keeping around good staff" because i want something great, not something meh at the cost of keeping my developers around. If a developer cant work and solve it the best way, then they leave by their choice or the company's. If your education was primarily Java etc, Dart would work well if the constraints you have for your application line up. I struggled at first learning JS because it was different. After spending day in and out in it for 5+ years, I love it. After you learn JS/TS you can sometimes see Dart as backwards. My current app, when visiting a site, has 1300 files which are referenced when going to the site. That is ridiculous, but also sometimes an issue when say using NodeJs to deploy something. When Dart used to Back Polymer, your deployable was 1 file, where EVERYTHING was baked into it. All components, all code, etc. It was disgusting. So it depends what you and your company are willing to do, at the implied costs of conversion and falling in line with Angular.
Yup, as long as the API doesn't change. You need to include the JS itself separately, so you can pick whatever version you want, as long as the API is the same.
&gt;I know i would hit a string with some people. I am on the fence evaluating Dart and flutter so its not a matter of "hitting a string" with me but when you stated Flutter was created by "them" otherwise the community would drop it you showed a profound biased ignorance that negates your point of view as being objective. As Danglow has pointed out that is just OBVIOUSLY untrue as they did no such thing. The language was CHOSEN by Google not only for flutter but their upcoming OS. Your point on ecosystem is however well taken but its apparent the way thing are going with flutter that it is here to stay and that should dramatically improve. It was a dead end language which was dying thats true but its hard to see google putting so much faith in it with nothing to go for it. I am leaning toward liking it but it IS a tough sell to go angulardart unless you are going all in on flutter (which many are). Thanks for the speed analysis on rebuild. I'll have to look into that as I test. Dart is no slouch. On the backend it is tearing up benchmarks as one of the fastest framework languages so whether thats something with configuration, something inherent to the language (dubious) or something they need to tweak or not is unclear.
Planning some material on this. Will update you soon.
That's my next step is to start benchmarking and comparing as well. It seems that outside our team but inside out product, there is still polymer dart code which may be a thing creating a lot of the issues. Fine turning development, adjusting locale strings, or random misc errors results in a 5 minute wait. It's not long enough to do other stuff and because of it compiling, I can't just jump to another branch unless I create an alt folder of the same repo. Usually that wait is where I help people on stack overflow etc, or change music or get coffee... But doing it 10 times in an hour for various incremental tweaks has turned 10 lines into an hour task. I am thinking it might be better when polymer dart is fully removed, or maybe our team is doing something wrong (possible though we follow examples). Before end of July it is suppose to be fully removed so we shall see how that results.
This is pretty awesome. 
The demo is only for Mac and the dev doesn't think of Linux as a primary platform. Pass.
I am trying to get started with dart, but the VS Code plugin cannot find the sdk. I'm on macOS, added a dart file to /etc/paths.d/, added the lines /usr/local/Cellar/dart/2.0.0-dev.66.0/libexec/bin &amp; /usr/local/opt/dart/blahblah to no avail. The plugin just cannot find the SDK. I tried the dart.sdkpath and dart.sdkpaths folders, and still nothing. I am hoping that this has nothing to do with the fact that my main account does not have admin privileges, and I su to a local admin account for all things homebrew. I can keep poking around on dartpad, but I wanted to write code on my own machine. I've currently uninstalled dart from homebrew for the time being.
For charts, check out charts\_flutter: [https://pub.dartlang.org/packages/charts\_flutter](https://pub.dartlang.org/packages/charts_flutter)
Would you mind raising an issue [on Github](https://github.com/Dart-Code/Dart-Code) and I'll add some instructions that'll help track down what's wrong. In the meantime, does clicking `Locate SDK` and browsing the the SDK folder (note: must be the real folder, not the `dart` symlink) get you working?
If it's a lot of extra effort, I agree that Linux shouldn't be a primary target platform. Now, it'd be good if it was at least a dev platform, but more than 90% of Flutter app users will be on iOS, Android, Mac, or Windows.
I attempted to use the Locate SDK button, but it didn't present the /usr directory from the HDD root. Probably doesn't help I'm still learning the ropes of macOS. The issue was the division between my account and localadmin account I used to install homebrew. Upon using pub, the issue got exacerbated due to where pub saves it's binaries. I ended up using the localadmin account to grant my account admin privileges, and it has been working. I wasn't expecting a reply to this, so I was slow to report back. I now have three directories in my paths.d file, the /usr/local/Cellar/dart/2.0.0-dev.66.0/libexec/bin, /usr/local/opt/dart/libexec/bin, and $HOME/.pub-cache/bin . Stagehand works, and a default console project works as expected. I am excited to start experimenting. It was going to be necessary to grant my account admin privileges due to pub (I'm using Stagehand, a missing step in the setup if using VS Code), anyway. Honestly, it was a long time coming. I get the security concerns, but everything about that setup was a hassle.
Is this anything more than shiny packaging on top of [https://github.com/google/flutter-desktop-embedding](https://github.com/google/flutter-desktop-embedding) ?
Guys! Could you please help me to find free MP3s with completely prefill (or for max) ID3 tags in v1, v2.3/v2.4 or both for testing the library?
&gt; Does Dart rely on DartVM like Java does on JVM? For Flutter, yes, more or less. "VM" is a *bit* of a misnomer because that tends to imply just-in-time compilation. Flutter doesn't use the JIT for deployed mobile apps. Instead, the Dart code is compiled ahead of time to native code. So the "Dart VM" is a little more like a "Dart runtime" in this case than what you'd think of as a full "virtual machine". It handles object representation and garbage collection, but it doesn't translate Dart code to machine code on the fly while it's running. For web apps, no. Web apps are compiled to JavaScript. &gt; And also how does the apps developed with flutter SDK work? Are Xamarin and Flutter similar in the way they work? (Because C# needs .net and in a similar way Dart code needs Dart VM right?). Yeah, that's a pretty good analogy. &gt; Apps created with xamarin are comparatively larger than the native apps because in the final build it includes the necessary .net library files for the app. Yes, Flutter has similar overhead because it needs to include the Dart runtime. The Flutter folks consider it a high priority to keep that trimmed down as much as possible. &gt; I'm confused because Flutter is advertised as an SDK used to create 'native' cross-platform apps. They are "native" in that the Dart code is compiled to machine code ahead of time. There is still runtime support needed for the application, and that runtime gets compiled into your app. In that sense, it is very similar to Go, OCaml, Haskell, and other compiled languages that have a GC. 
&gt; Does Dart rely on DartVM like Java does on JVM? Yes. &gt; also how does the apps developed with flutter SDK work? The DartVM is bundled into the package built for the platform, along with your code in bytecode form. &gt; Are Xamarin and Flutter similar in the way they work? I do not believe so. I believe Xamarin apps are cross-compiled into native code for the platform. I could be wrong about this. &gt; Apps created with xamarin are comparatively larger than the native apps because in the final build it includes the necessary .net library files for the app. .net core is provided for each of the platforms Xamarin targets. This is why the app is slightly larger than a native app. The difference should be fairly minor, however. For Flutter apps, the app is quite a bit larger than a native app, because it packages the DartVM. Personally in 2018 I don't think package size is going to be a primary concern for most developers. &gt; Flutter is advertised as an SDK used to create 'native' cross-platform apps. Both Xamarin and Flutter allow you to incorporate true native code alongside your platform-independent code. With Flutter, this means you can deploy JVM-built languages (Kotlin, Java) alongside your Dart code on Android, and Swift/Objective C code alongside your Dart code on iOS. Consequently if you already have an investment in native code you can leverage it with Flutter.
**Both!**&lt;br&gt; When developing, Flutter uses the VM so you can get nice things such hot reloading.&lt;br&gt; But for production it compiles down (AOT) to a native ARM library then uses NDK on Android and LLVM on iOS to embed on native apps (runners).&lt;br&gt; That is why you get a debug/slow mode banner on the top-right corner, to remember you that, you are using the VM. Check https://flutter.io/faq/#technology&lt;br&gt; Also: https://www.youtube.com/watch?v=FUxV4MIhS3g
Bare-bones for a Shelf Router!
 &gt;The DartVM is bundled into the package built for the platform, along with your Dart code in bytecode form. Your Dart code runs on the DartVM on the mobile device. Nope; Flutter apps are [AOT-compiled](https://flutter.io/faq/#run-android), especially since iOS doesn't even allow JITs. 
Most accurate answer here. 
Thank you for that link. I think it is slightly misleading, however - or, at least, easily misunderstood. It is true that, at package release time, your dart code is emitted as bytecode via dart aot. I personally would not call it "compiling", since a usable binary is not produced; you cannot run the emitted bytecode directly. However it can be executed by the dart vm. Because there is no just in time compilation occurring, this _technically_ compiles with Apple's restrictions. This is what your link refers to as "compiling" your app, which I think is slightly misleading. The link goes on to explain the packaging of the flutter runtime - this includes the dart executor. If dart was truly compiling to native code, there would be no need for the additional overhead of the flutter runtime. This description is based on notes from November last year, so it's possible the architecture has radically changed in the meantime - but I doubt it. 
Actually, [this is from one of the Dart developers](https://stackoverflow.com/a/50014282). The AOT compilation is actually why Flutter can't generate X86 release APKs; the X86 AOT compiler isn't ready yet, but the interpreter works. It probably just compiles into a Flutter-specific object format, which is why it needs the runtime (of course, there's also the Skia drawing engine + the rendering engine + all the other graphics stuff). 
&gt; It is true that, at package release time, your dart code is emitted as bytecode via dart aot. I personally would not call it "compiling", since a usable binary is not produced; you cannot run the emitted bytecode directly. No, the AoT compiler compiles all the way to machine code for the target CPU, not bytecode. The VM is used as a runtime — it has the object representation and garbage collector — but it's not interpreting bytecode for a deployed app.
As a member of the VM team, I can confirm this is the case. 
Udemy says "ILOVE-DLANG7 has sold out"
Wait I will create another coupon
LOVE4-DART
Thanks! This one worked, I'll give the course a try :)
Thank you! I will be waiting for your review :)
My eyes too old for the small font used in discord app on mobile. I’m not the only one who find it not usable. There is no way to enlarge the font. 
It's not small at all for me. Maybe it has to do with your phone's DPI settings or something?
On iPhone 6s Plus: https://imgur.com/gallery/9zuaDek Not for long usage for old eyes. Slack is perfectly fine. Just hope the app will render font dynamically based on user settings. Have requested the developers over a year ago. They are probably just like you who do not see this as usability issue. Most likely old people are not their target users. If only the app allows user to adjust the font size. Do not understand what’s so difficult to implement such. 
I believe Dart is very lucky to have Flutter. While the Dart language is pretty good in terms of compiler features, syntax and etc, it didn't get much attention. Flutter will likely change that eventually. Sadly I don't really have any project where I can use Dart, maybe someday.
Use anything from the library and click the lightbulb that appears next to the line. It should have an option to import the necessary library. 
You're just a victim of Apple deciding what you need for you. Switch to a more configurable phone. ;)
Planning to switch soon. Maybe year end. 
What makes Dart pretty good in terms of compiler features? The only feature it has that sets it apart is that it can be both AoT compiled and runtime interpreted. Otherwise it just seems to be a slightly better Java
&gt; What Makes Google Trust Dart Programming Language? They own it, haha
&gt; Dart editor That's been dead for a long time now... Seems off they'd say that and not the VS Code extension which is now officially supported by Dart
&gt; Otherwise it just seems to be a slightly better Java Yep, this is about right. It's not particularly "interesting", it's just a nice, reasonably feature-rich "modern" programming language.
I'm not sure who down-voted you, this was literally my first thought when I saw the title.
Thanks!
I like it! Any chance you'd share a link to the source code?
Sure 👉[https://github.com/graphicbeacon/memory-game-web](https://github.com/graphicbeacon/memory-game-web)
I've deployed a memory game written in raw Dart. The thread below contains the link and Github repo: [https://www.reddit.com/r/dartlang/comments/8x54lq/yet\_another\_memory\_game\_an\_emojimatching\_memory/](https://www.reddit.com/r/dartlang/comments/8x54lq/yet_another_memory_game_an_emojimatching_memory/)
Nice work! One small thing I would do differently, though: using underscores in function names is not conventional in Dart code. It would feel more "Darty" if your function were named `listChunk`.
Cool function! It's limited to List objects though. Nothing about the function actually requires indexes though; it would be neat if it accepted an _Iterable_, and returned a lazily generated Iterable, and would be a fun programming exercise!
very nice! I was looking for threejs bindings but they don't exists so I see the only approach is to make own engine yourself :D
Cool!
This is one hard game.
Nice! I had forgotten about package:react; initially I thought this was using package:over_react.
Congrats on the release - may it be the first of many!
I second that. Controls are pretty sensitive. Regardless, great Dart implementation.
Successfully add ReactRouter!!!
That's pretty odd. I would file a bug on GitHub and maybe Natalie or someone else would be able to help.
This is not an uncommon problem. You can typically fix it by narrowing your version ranges in your pubspec.yaml. Also, pub in Dart 2 handles these situations better and with better error messages, so trying that is an option too. 
As usual, Bob's stuff is /u/muncifent Sorry, I couldn't help myself.
You rang? :)
And it only took me 3 tries before I got it right! Nothing in particular other than noting that you're great!
Well, have an upvote.
How is Dart (my phone keeps correcting that to Fart) compared to Ruby for system scripting?
I've never used Ruby, but I write all my scripts in Dart. There is an article about writing command line utilities on https://dart.academy.
Those instructions make it seem like Dart requires a *lot* of boilerplate. Ruby is just sort of written like a shell script as you go.
Can't agree with that. Dart is one of the least verbose of the curly-brace languages. You start of with an `import` or two, a `main()` function, and that's it, basically. Just a few required lines. Optionally, you can add some code for parsing command-line arguments.
Those instructions start talking about using 'pub', boilerplate, and so forth. I usually just want to quickly write a script to do something. `pub global run boilerplate::main --name Jim` That makes it seem as though it's going to be incredibly complex as compared to, say, Ruby or bash.
Feel free to check out [my facade repo](https://github.com/jackd/threejs-dart-facade). Won't be putting a massive amount of effort into maintaining, but might be enough to get you started.
didn't know this one is maintained, thanks!
What would be the 'minimal' equivalent of that program? I want to replace Ruby, but I'm having trouble finding a terse and simple equivalent. Not find of Python or Perl. I'd use C++ or C#, but the latter has quite a bit of starting overhead and the former requires a substantial support library to make it work well for scripting and I don't want to spend the time on that.
Make a file called `script.dart` with this content: main(args) { for (var arg in args) { print(arg); } } Then, if you've got the Dart SDK installed and added to your system path, you can run it like this: dart script.dart a b c Personally, I prefer a bit more verbosity, because I like to be explicit with types, but Dart will infer them if you leave them out. So this is how I'd write it, myself: void main(List&lt;String&gt; args) { for (String arg in args) { print(arg); } } But if you wanna keep it terse, Dart can do it.
How is its support for maps/arrays and such? Ruby can basically jam anything anywhere into a map/array. Not always terribly useful, though.
Dart's Map and List data structures default to storing objects of any type, but it's also possible to restrict the types using generics. Have you checked out the [Dart Language Tour](https://www.dartlang.org/guides/language/language-tour)?
Looks like 4 more issues to close to reach Dart 2 stable 👉 [https://github.com/dart-lang/sdk/milestones](https://github.com/dart-lang/sdk/milestones)
Some of the most exciting news I've heard in a while, awesome work, Dart Team!
To round out this answer: the Dart team is very focused on Dart 2 Stable; that milestone is a good burndown to watch. Stay tuned for future plans after the Dart 2 dust settles.
Just cannot sense the url link in text.
Hi, I completely remember our discussion about hyperlinks. Just when I thought I was almost done, I hit a problem I couldn't solve. Other than that it was working pretty well. Here's a StackOverflow link of the problem: https://stackoverflow.com/questions/51404841/how-to-get-information-about-textspan-through-tapgesturerecognizer If your need for hyperlinks can be hard-coded, try to use TextSpans inside RichTexts for now.
hhh, recognized you, wishing for your marvelous work, let me have a look at your stackoverflow problem. 
BTW, what you down might has been implemented by someone wrote a markdown widget. I think there are slightly different between yours link embedded in text with what I thought: you don’t need specific the url response for that span but just the url itself. For example: I have a bunch of text and a url called baidu.com and it has been recognised, when I using it I shouldn’t worried about which link will it lead to, it’s just a link and so that it can be clicked and open. And I think the later one is most easy to implement. 
Link?
What was your final app size?
I don't think it'll be large compared to a normal Flutter counter app which is ~6.7 MB. If you want an accurate measure, I have put up the GitHub link for the project in the article, feel free to check.
Look through our recent pull requests to see a LOT of examples of how to do this with your own code: https://github.com/pulls?q=is%3Apr+user%3Adart-lang+sort%3Aupdated-desc+is%3Aclosed
I can comment some here; I work on the dart team, though I haven't worked on the docs you're referring to and I don't know about any exact decisions here. Dart is definitely close to dart 2 stable. I don't know a time frame but it's getting close. So that's part of it. Also it's taken us longer then we (or maybe just I?) expected to get here. So there's been a lot of work we are all proud of and excited to share with you guys since 1.24. So we're eager to get those willing on dart 2. The flutter SDK ships with dart 2, and that's partly because flutter itself is a beta, but also it goes to show the amount of trust we have in it. I think we're using beta as more of a, we-could-release-breaking-changes-still label than as a not-battle-tested-dont-use label. And any such breaking changes are opt in when you upgrade, and should be as slow as ever to come in these days. It's also likely a good time to get your codebase at least dart 2 compatible. Likely if it works with dev.69.0+, it will work for dart 2 stable, or at least, be really close. But still, we ultimately have the stable channel there for those who are especially cautious, and we are excited to get that group a dart 2 stable release when its ready. Hopefully another dart team member with a broader perspective will see this and answer before too long, but that's my almost-informed opinion and I did my best to say what I do and don't know rather than say something wrong, so hopefully they don't have to correct me in too many ways :)
Thanks I'll take a look. I'm new to flutter, so haven't got as far as build, but was wondering how much more is added in when you build a real app compared to the hello world app. Ie, as the app gets larger the space doesn't grow as much
thanks for your prompt response! that sounds pretty accurate, especially the bit on flutter. I, like many people, picked up dart with flutter. I didn't notice the version issue until i published a non-flutter library a few months ago. This question has been lingering in the back of my head for a while but only got around to asking it today while upgrading said library :) and indeed, dart 2 has seemed pretty stable for a while which was even more confusing. it never really felt like a beta since i have been using it
My question is: what is the smartest course of action when using packages that _haven't_ been explicitly updated for Dart 2 support, especially if said packages are unmaintained or haven't been touched in some time? For example, a side project I've been working is a JS interpreter, which depends on package:parsejs, which depends on package:unicode, which in turn depends on package:lists. The `lists` package produced some runtime errors, because it was missing type arguments on certain function calls. The real problem, though, was that the package hadn't been touched in 3 years, yet it was a transitive dependency for a recently-updated project (took a bit of digging to find it). The author had also disabled the project's issue tracker, and it took almost two weeks to even get a response via email, which as you can imagine put some delay on what I was doing. The only solutions I can think of for now are: * Send a PR and hope the author sees it/merges it * Switch to a different dependency (that is, if _your package directly_ depend on the package) * Rewrite the code yourself, in a fork or otherwise Is there anything I'm missing here? I have several outstanding PR's on some Pub packages which haven't been merged, and not interacted with by the authors in months (if ever at all), so I just want to know what my options are going forward.
I have [two packages](https://pub.dartlang.org/packages?q=email%3Alc%40leocavalcante.com) that depends on [PointyCastle](https://pub.dartlang.org/packages/pointycastle/versions/1.0.0-rc2) which depends on [Reflectable](https://pub.dartlang.org/packages/reflectable) which, despite belonging to [dart-lang team](https://github.com/dart-lang), isn't updated yet. PointyCastle author is even considering [removing Reflectable dependency](https://github.com/PointyCastle/pointycastle/issues/131#issuecomment-402031742). I'd also love to hear a following up on that!
We are **days** away from releasing Dart 2. We're pushing the preview releases because that's where we want new folks to start – if you start with 1.24 you'll have a lot to dig out of. FYI: I'm a product manager on the Dart team. :-)
[removed]
Could you post wrappers that you found? Dart guide starts with async programming (Future and Streams)
I found wrappers for various things, for example [this wrapper that works with javascript](https://github.com/google/codemirror.dart), but I seek simple http wrapper.
So look for http wrappers (REST) instead of what you linked. You posted link to wrapper for js lib not any http service 
Looks like a fine way to go to me.
Maintainability/cleanliness are the antithesis of functionality. Figure out what you want to support, and what you won't. Maintainability and code cleanliness scales in difficulty alongside adoption and scope. If you don't have users, take advantage of it by making changes freely. Otherwise... If only you need it, write for the current use-case. Once you have more than three separate use-cases, generalize the API. For inspiration, you should look at libraries that do a lot of data transfer, like DB layers or serializers. I think gson and jooq are pretty legit. A plugin/middleware system is necessary at that point. As far as specific critiques, if this is meant to be a robust, streams-focused, dart API, then you could have a `DomainModel&lt;T&gt;` inherit a single method `fromStream(Stream&lt;U&gt;)` from `StreamModel&lt;T&gt;`.
Thx! I wanted to use Dart Future and Streams to make it available for cli and flutter projects without any complex dependencies. 
I think you will find what you need in the [\`dart:typed\_data\`](https://api.dartlang.org/dev/2.0.0-dev.69.3/dart-typed_data) package. My initial impression is that you could use \`{Uint8List, Uint16List, Uint32List, etc}.fromList(List&lt;int&gt; elements)\`. You can then acquire a \`ByteData\` view of the data using \`list.buffer.asByteData()\`. The ByteData view has methods which allow you to read/write with specifiable endianness.
This looks promising, thank you!
Also, frequency of stack overflow questions is on a sharp upward trend [http://sotagtrends.com/?tags=\[dart,flutter\]](http://sotagtrends.com/?tags=[dart,flutter]) I'm sure it is mostly a piggy back on flutter, but I am just fine with that, and hopefully there will be some cross contamination into some non flutter things link angulardart and aqueduct
On the subject of Future and Streams, I added a comment to [this](https://dev.to/allanjeremy/explain-futures-and-streams-in-dart-like-im-five-46nd) discussion on Dev.to about it. [https://dev.to/allanjeremy/explain-futures-and-streams-in-dart-like-im-five-46nd](https://dev.to/allanjeremy/explain-futures-and-streams-in-dart-like-im-five-46nd) Hope this can clarify things.
Yes, I've always loved using the LINUX microkernel.
Angulardart?
[AngularDart](https://webdev.dartlang.org/angular) maybe?
You could try and create good JS bindings yourself by transpiling Typescript definitions to Dart with [js\_facade\_gen](https://github.com/dart-lang/js_facade_gen). I used it successfully with BabylonJS and Three.js, but had to fix a bunch of stuff manually. My personal pet project is a framework on top of StageXL that has similarities to Flutter's approach. While you can achieve great results, it is largely undocumented and ... well, a pet project. Github: [https://github.com/acanvas/acanvas-framework](https://github.com/acanvas/acanvas-framework) Demo: [https://acanvas.sounddesignz.com/acanvas-framework/](https://acanvas.sounddesignz.com/acanvas-framework/) (In the midst of prepping for Dart 2 right now, some examples might not work.) Architecture: [https://acanvas.sounddesignz.com/downloads/acanvas-spring-architecture.png](https://acanvas.sounddesignz.com/downloads/acanvas-spring-architecture.png) (slightly outdated) In theory, it should be possible for Flutter to run in a browser by using Canvas3D, but after looking deep into Flutter's sources, I concluded that I don't have the skills to make that happen.
Currently working with AngularDart 5 beta... complete pain... I have errors in the generated files, which I have no idea how to fix because I have neither that much experience in Angular or Dart. Every single time I look at the tutorials the instructions change, it relies on the very latest Dart version, which is not so stable. I guess I can go back to more stable version, but the instruction should not be for the bleeding edge. At least that's what I think.
AngularDart 5 will stabilize very soon (within the next few weeks), and then it'll be the recommended way to create Dart web apps. It's true that using it while it's still in beta can be rough, but that's beta for ya. Personally, I'm hoping that one day Flutter will compile to WebAssembly.
I'm confused. Last I saw, AngularDart was no longer a thing, and Angular was for TypeScript, JavaScript and Dart. It even had examples in all the languages. This appears to no longer be the case. What changed?
You should check out [OverReact](https://workiva.github.io/), it's a Dart wrapper for ReactJS 
Dart 2 isn't really bleeding edge at this point... What errors are you running into? You can check what the generated files are in Chrome's Sources tab. 
Dartlang website highlights AngularDart. I believe it has split off from Angular itself. https://webdev.dartlang.org
Do you have more complex examples? The problem with Redux in Dart is its verbosity. 
I thought Flutter supported the web?
I can build one. Can you brief me something complex you would like to see?
AngularDart would be the straight answer, but I think it's too verbose, a lot of writing to accomplish minimal things. Something more simple and with a component based architecture where you write the UI with code (like Flutter) instead of HTML/templates is React. You can also take the benefit of awesome rich UI libraries like Ant.design and Office UI Fabric instead of juggling with AngularDart Components (that hasn't something simple like a table component). Please, take a look at: https://github.com/leocavalcante/react_dart_example And handling state would be simple as: https://github.com/leocavalcante/React-ReduRx 
Nope. 
Quite a while ago now, AngularDart split off from the original TypeScript version, and it is now written entirely in Dart. The Dart version used to be transpiled from the TypeScript version, but that wasn't working out that well for Dart or TypeScript devs.
I'm really glad people are producing these kinds of state management options for Dart, so that there are lots of choices, but personally, I don't really like the Redux pattern for Dart. It seems like the dynamic nature of JavaScript heavily informed the Redux architecture, so for me, Dart and Redux just don't fit together all that naturally. I like the BLoC pattern that Google uses to share code between mobile and web, myself.
[removed]
A geo tag diary for example. * This is a personal diary. * You add an entry associated with your current GPS location. * You can add one or more image and caption them. * You can tag the diary entries with one word tag. * You can update entry, add/remove images and add/remove tags. 
Pailo Soares gave a good talk at DartConf that introduces a lot of how Google shares code. https://youtu.be/PLHln7wHgPE
#### [Flutter / AngularDart – Code sharing, better together (DartConf 2018)](https://youtu.be/PLHln7wHgPE) ##### 10,293 views &amp;nbsp;👍202 👎3 *** Description: Flutter / AngularDart – Code sharing, better togetherHow many times did you have to implement the same app on Android and iOS? Even though it might gi... *Google Developers, Published on Jan 25, 2018* *** ^(Beep Boop. I'm a bot! This content was auto-generated to provide Youtube details. Respond 'delete' to delete this.) ^(|) [^(Opt Out)](http://np.reddit.com/r/YTubeInfoBot/wiki/index) ^(|) [^(More Info)](http://np.reddit.com/r/YTubeInfoBot/)
Last I saw, [Codingame](https://www.codingame.com) supports Dart.
I hope flutter is being ported to WebAssembly. Would make it a very viable framework for real job. I think the litmus test for frameworks will soon be: * Cross-platform usable UI? (ie. Material) * Run everywhere/all devices? * Friendly/maintainable language?
&gt;Codingame oh cool. I love games.
Hi! Go to learn dartlang first, then AngularDart. Follows the Tour of Heroes. Then some Course in Udemy. Then Flutter. You'll be Amazed!
I struggled in the exact same way! it's like there's no good tutorials that explains everything from the ground up. I used Vaadin 7 for it, because it was much more like building a desktop app. After using Vaadin in production for the last couple of years I'm looking to switch our entire. stack to dart because Vaadin X changes too much. It did however help me get webapps out insanely quickly. 
I would learn Dart as much as possible without the use of frameworks. See my DEV feed below for Dart tutorials. I aim to post every 2 weeks. r/https://dev.to/graphicbeacon
Is ToH really that meaningful? Last time I did it it was pretty much copy-paste. 🤔 Yeah, I am actually looking forward to try Flutter.
I do took a look at your posts and I really liked them. I’ll make sure not to lose any.
FWIW just the milestone doesn't automatically translate to a stable release. There may be other things they're trying to tackle too that just weren't added to the milestone. Source: have fallen for milestones before. 
Yeh, its my first time falling for milestones :)
Looking good! Keep it up. Can't wait to see where it goes.
Thank you very much 4 the advice.
Not yet.
it's like waking up on Christmas morning but your parents aren't awake yet :-)
LOOOL...hilarious memes
I think this should add a disclaimer about the dart:io API. dart:io is for VM only - the corresponding HTTP calls in the browser live in dart:html. dart:io code can't be transpiled to run in the browser; dart:html can't run in the VM. There's an excellent [HTTP package](https://pub.dartlang.org/packages/http) that provides a uniform interface to both.
"bleeding edge" no longer applies to Dart 2. The SDK and the framework are VERY stable at this point. We're super close to releasing both as GA (Generally available).
Start here! [https://webdev.dartlang.org/guides/get-started](https://webdev.dartlang.org/guides/get-started) The links at the bottom to the tutorials and code labs are a great next step
Alright. I’ll see more about React after I feel more secure developing basic web. Thank you man!
The browser segment pulling `dart:html` was always there. The idea was to get to the point as soon as possible given its a quick tip. @CordialPanda Thanks for sharing that http package. Might do something with that in a future tutorial.
Yes. Futures and Streams are how you do asynchronous programming.
Code can be execute out of order on the same thread. So dart can jump around, executing a little bit of a function here and a little there, and in between doing something else. This makes it asynchronous.
i think these are good starting points: \- [https://da-bootcamp.firebaseapp.com/?course=start\_programming\_dart](https://da-bootcamp.firebaseapp.com/?course=start_programming_dart) \- [https://dart.academy/dart-computer-programming-for-beginners/](https://dart.academy/dart-computer-programming-for-beginners/) good luck !
Hey Martin, I would head over to Dart Academy's website [https://da-bootcamp.firebaseapp.com/?course=start\_programming\_dart](https://da-bootcamp.firebaseapp.com/?course=start_programming_dart) It's set up pretty well and do reach out if you need help with anything else. I also write about Dart at [dev.to/graphicbeacon](https://dev.to/graphicbeacon) 
Thanks
I'd start by getting a better grasp on JavaScript as there are more tutorials on that than Dart. Learn the basics of flow control (if, for, while statements), functions, objects, the basics. Then start looking at dart. After that there aren't a lot of tutorials but this one (and one other are pretty good which I can't seem to find right now) seems pretty good. https://www.tutorialspoint.com/dart_programming/index.htm JS and dart are similar in many regards but one major departure from JS is typing. In JS objects are objects and are treated equally. In dart objects are more strictly defined, there's numbers (int and double), there's strings and runes, booleans, and a variety of other structures and if a function isn't given the right data structure type it will not work, even if using the var or dynamic types which can be anything (sorta like JS objects). Just another ball you don't have to juggle while learning to program.
Got the same advice about learning Javascript before Dart. I'd give the link a look. Thanks 
Thanks, will give them a look.. 
If you want to just dive in and have any questions feel free to message me. If it paid better, I would've tried to be a teacher.
Here are a couple of free "Learn Dart" courses over on Udemy [https://www.udemy.com/learn-dart-2-in-90-minutes/](https://www.udemy.com/learn-dart-2-in-90-minutes/) [https://www.udemy.com/dartlang/](https://www.udemy.com/dartlang/)
Ohh okay then same as Java, the compiler executes the code sequentially, except if I use an asynchronous method
To add onto what /r/im_not_eric said, another significant difference and cause of confusion between JavaScript and dart is prototype-based OOP and class-based OOP, respectively. Since you're a beginner that probably won't mean much to you. Just remember just because they look similar, you can treat them the same. The dynamic nature along with the prototype-oop create the single most confusing with JavaScript: scope binding. I won't go into details here but it defines what `this ` refers to. I recommend this to just about everyone: ( my mobile browser isn't letting me paste anything but some reason. Just Google the title. It's free to read on github) You Don't Know JS 
Yes. Under the hood, it's two event queues: synchronous and asynchronous basically, though they have different names. Programs execute sequentially until the sync queue is empty, and then execute async. There's some big caveats, but that's the gist of it.
Really good. Keep 'em coming!
Get it into a DateTime object and you can use targetTime.difference(new DateTime.now()) which will give you a Duration that you can query to display the remaining time
Is there a difference between utc and Unix epoch time?
yes I understand, i thought it is all asynchronous language
Much of the work in 2.0 is to make Dart a statically typed language. That's a huge undertaking. 2.x and 3.0 will have more opportunities to add new features.
what are you talking about? none of those languages were built specifically for mobile. kotlin and swift are general replacements for java and objective-c, respectively. and im not sure what dart's original purpose was. either way, all three fill the same problem space with significant presence in the application layer. there is plenty room to compare the three
I believe that Unix epoch time is the number of seconds from January 1 1970 where as UTC is actually a date/time.
I think I come off as advocating something I believe in, is all. I don't profit in any way from people adopting Dart. I've been coding for more than 20 years, used something like 15 languages professionally, and run meetups and code camps galore. Dart just happens to be my current favorite for teaching beginners, for the reasons I specified in my comment. ;)
I did not forget you. I'm just doing it in a more instructional way for everyone. https://medium.com/@leocavalcante/tutorial-handling-state-in-flutter-with-redurx-b4d50c647e4a
Shameless plug: I've been working on a date and time library for dart called time\_machine. This is pretty easy in it. // This would be like your seconds from your API var seconds = (Instant.now() + Time(days: 5, hours: 4, minutes: 3, seconds: 2)).epochSeconds; var futureInstant = Instant.fromEpochSeconds(seconds); var difference = Instant.now().timeUntil(futureInstant); print(difference); // 5:04:03:02 print(difference.inDays); // 5 print(difference.hoursOfDay); // 4 print(difference.minutesOfHour); // 3 print(difference.secondsOfMinute); // 2 But, this is pretty much the same with Dart:core var futureDateTime = DateTime.fromMillisecondsSinceEpoch(seconds * Duration.millisecondsPerSecond); var difference = futureDateTime.difference(DateTime.now()); print(difference); // 124:03:02 print(difference.inDays); // 5 print(difference.inHours % 24); // 4 print(difference.inMinutes % 60); // 3 print(difference.inSeconds % 60); // 2 
Seemed like it would have been a good time to make it a null safe language then
This was very closely evaluated (see [1][2] for some details) - but it is not a simple change to make. Ultimately Dart 2 already had an absolutely gigantic scope, so it was decided to not include this sort of changes into it. If you are not a Dart user it might seem to you that changing something like that is zero cost. It is just a smallish thing. Especially if you have 0 code to migrate. However there are actually hundreds of thousands of lines of Dart code inside and outside Google (e.g. a company Wrike says they alone have 670 KLOC of Dart code internally!). At this scale migrating becomes really hard and painful and people quickly become tired of it. So something that seems small, might actually become a proverbial straw that broke the camel's back. Also null-safety is not a simple feature - it is all encompassing change to a type system, which would require changes to core libraries (and packages that Dart team maintains) to make APIs feel good. It also might have negative performance and code size implications if done/rolled out incorrectly. [1] https://groups.google.com/a/dartlang.org/d/msg/core-dev/nibahmEeiXE/oUzbg-H0BAAJ [2] https://groups.google.com/a/dartlang.org/d/msg/core-dev/IlZM4Ou8bYE/WuplB1tBCQAJ
Both are libraries; the only difference is that plugins make use of the \`PlatformChannel\` API to bridge to Swift or Java code, whereas any other Dart library is written solely in Dart.
I mean, I completely agree. That's why you don't want to design key things wrong from the beginning. Dart's overly conservative nature isn't really acceptable for how new of a language it is. I think Flutter is super cool, but when Swift or Kotlin developers have to take huge steps back, it becomes a much harder sell.
&gt; Dart's overly conservative nature isn't really acceptable for how new of a language it is. To be honest I have been always torn on this issue - I was advocating for some of these features since before Dart was even called Dart. However I also see a value in being a conservative language, as it is extremely easy for people to start writing Dart and it is extremely easy to read Dart code. Syntactic and semantic surface is extremely small and pretty cohesive. (especially Dart 1 - I feel that Dart 2 might be a "harder to enter" language than Dart 1 was). This is something that becomes valuable once you have large teams writing Dart, rather than individuals. &gt; but when Swift or Kotlin developers have to take huge steps back To be honest, I don't perceive either Swift or Kotlin as huge steps forward compared to Dart. Yes they have some neat features that would be nice to have in Dart, to cut down on boilerplate here and there or to make code safer and more explicit - but I don't see myself being considerably more productive in either Swift or Kotlin. It might be that I am atypical programmer - so where I spend 10m every week wrestling with boilerplate / bugs that could be eliminated by "fancy features", somebody else spends 30 hours wrestling with the same boilerplate or bugs. That's why I guess it is important to get feedback for Dart &gt;=2.0 language design from actual and potential Flutter programmers.
If this is about dart2js I believe it copies the whole contents, right? Since there could be variables in the root of imported dart file, that is not in a class or a function, etc? I think its easy to test though. Create a file with 100 functions, import it and only use 1 function. What does the generated JavaScript file contain?
\`dart2js\` performs tree-shaking (though afaik it's not very documented as to what is and can be tree-shaken), so at the end of the day, dead code elimination techniques will make it so that the outputted JS doesn't truly "copy the whole contents."
&gt; I don't perceive either Swift or Kotlin as huge steps forward compared to Dart. Both Swift and Kotlin were not designed as radical new languages. They don't push you into radical new concepts. They do encourage better coding practicing by making certain things easier to write - like creation of data transfer objects (data classes) or ADTs (sealed classes). They simply make coding more fun and faster to write. &gt; That's why I guess it is important to get feedback for Dart &gt;=2.0 language design from actual and potential Flutter programmers. I can tell you as Kotlin dev who loves the concept of Flutter, I am completely uninterested in throwing away both my JVM tool chain/Android framework for an inferior language. This is harsh, but I don't want Flutter to succeed because if it does, I'll have to start writing Dart code, which seems like a huge QOL decrease.
[Dart 2 actually is stable now](https://www.dartlang.org/tools/sdk/archive)
\0/ 💥🎉🎊
the reason you need a vm is because dart compiles to bytecode, not binary like C, etc. it's for many of the same reasons you can't compile Java to native binary, e.g. garbage collection. 
The VM is kind of big for shipping with a simple command line app :/ Is there a good strategy to ship Dart apps, without having to ask the user to install Dart or pack the ~30MB VM with the distribution?
it's a little more complicated than I made it seem, obviously.
&gt; Isn't Dart code supposed to be both interpretable and compilable? It is. You can use the interpreter or compile to JavaScript. You can't compile just anything to JS, though. For example, the `io` library can't be compiled. The JavaScript compiler is really just meant for the web. If you want a small binary and no interpreter, then using an interpreted language language like Dart is just the wrong choice. Go with C or C++ or Rust or Haskell or something.
I was thinking of compiling to JS since most of the app's users (web developers) should already have Node installed. Bummer, I used the `io` library XD I guess Dart is the wrong choice then, but I really like Dart and wanted to practice it. Maybe Python is a much better choice since almost everyone has it installed.
Now how long until flutter support?
The \`() {}\` syntax is an anonymous function in Dart. In Dart, functions are also expressions, so you can pass them as arguments to other functions, like \`setState\`.
Agreed. It would be a huge effort to decouple Dart's stdlib from the VM, especially considering how much is in the stdlib.
Dart 2 is now stable. No more mixed signals 🤞
yes so it is the same as I said in the question. It is like this [https://www.dartlang.org/guides/language/language-tour#anonymous-functions](https://www.dartlang.org/guides/language/language-tour#anonymous-functions) but the difference here is that there is no arguments.
Installing the SDK on Windows is super easy with [Dart for Windows](http://www.gekorm.com/dart-windows/), at least. I don't know if there's anything comparable for Mac or Linux.
Yea, I saw that this morning. Good job to the dart team!
Official announcement here: [https://medium.com/dartlang/dart-2-stable-and-the-dart-web-platform-3775d5f8eac7](https://medium.com/dartlang/dart-2-stable-and-the-dart-web-platform-3775d5f8eac7)
True, but Flutter doesn't yet use the stable release of Dart 2. I imagine that will come pretty soon, though.
🎉🍾🎉🍾🎉🍾 This has been a *long* time coming and a metric buttload of work.
For now, Flutter takes Dart engine rolls directly from the \`dev\` branch of Dart. But to all practical intents and purposes, the current Dart build in the master channel of Flutter at this time is the same as Dart 2 stable.
We're actually going to tear the new type system out and go back towards dynamic types. Basically, every even-numbered major version will be statically typed and odd numbers are dynamically-typed. This way, everyone wins.
What's wrong with [dartlang.org](https://www.dartlang.org) ?
Oh I couldnt find what I needed. It was under labguage tour. 
If you're a beginner programmer, this could help too: [Dart Academy Boot Camp](https://da-bootcamp.firebaseapp.com/?course=start_programming_dart)
We're actually going to add Trigonometric data types in 2.1.
It's absolutely suitable for user-facing apps – but we do optimize for long-running, interactive experiences over static content.
Just a little ignorant
how so?
Congrats! I use Dart on a daily basis but I have to say now I am less confident about its future than a year ago. While the team is clear about the priorities it rarely justifies them in public. There is no real communication (see nullable types issue for example https://github.com/dart-lang/sdk/pull/28619). Let’s hope that with strong mode behind the team will be more flexible and responsive.
I had used \`brew install dart --devel\` to install dart some months back. today I ran \`brew upgrade dart\` and I got dart 2.0.0-dev.69.5 Is that version equivalent to Dart 2 stable? Or is it ahead/behind? 
How about SSR for both search engine bots, and increasing initial rendering performance on client side? I think SSR for user facing apps is a most these days, a good example is the new React based Reddit. Also, Angular comes with SSR with Javascript server.
I've got some tutorials on [DEV.to](https://DEV.to/graphicbeacon) and would start with the below: [dev.to/graphicbeacon/learn-dart-before-you-flutter-2997](https://dev.to/graphicbeacon/learn-dart-before-you-flutter-2997)
Ok. I really like c# syntax so thats why i like dart. Im sure its even more simplified. 
The general answer for any "Why doesn't Dart have *" usually is "because Google doesn't need it"
I am not sure about anything about this but I think it is because this distributions don't want to maintain older version of the language. Distributions like Ubuntu and Debian are released in stable versions where software does not get any major changes. To do this, the distribution needs to maintain the older version (if the software projects does not do this itself) and ensure security and bugfix patches is ported to the older version. By providing an PPA, it is easier to release the newest version of the language and ensure all users are using the newest version. Also, since Arch Linux is bleeding edge, there are already a Dart package here in the official repository (still not updated to 2.0.0 but the package is marked for update and should be updated in the next few days). Since the Dart tooling is perfect for supporting older version of the language (e.g. [pub.dartlang.org](https://pub.dartlang.org) does not mark in the interface which version of a package support which version of Dart) I don't think it would be a solution to support the older version of the project. But then, we need to allow a stable version of Ubuntu Linux to change behavior which could also give unexpected problems for users.
Here are a couple of free "Learn Dart" courses over on Udemy [https://www.udemy.com/learn-dart-2-in-90-minutes/](https://www.udemy.com/learn-dart-2-in-90-minutes/) [https://www.udemy.com/dartlang/](https://www.udemy.com/dartlang/)
I don't really think that's true, necessarily. You seem to still be living in the past...maybe even the recent past...haha.... Thanks to Flutter's rapid rise in popularity, Dart and the Dart ecosystem are now starting to get lots more things than just what Google needs. The community is deepening. Rejoice!
That might be true for Flutter but I doubt it can be generalized to the entire Dart ecosystem. Case in point, the issue I linked to is a pretty important and relevant one for web development but was closed less than 2 months ago. You might be right but I've also given reasons why it's going to take a lot more to convince me that my perspective is incorrect.
Dart web dev is getting tons of attention thanks to Flutter. Once you've got a Flutter mobile app and decide you need to provide a web experience, it's only natural to look at Dart's solution for that. I've seen the traffic on https://dart.academy more than quadruple (and climbing), and it appears to be permanent, and that site is mostly about web dev. No one can see the future, obviously, but I'm pretty hopeful.
When I first saw this article from npr.org, its title was: &gt; West Virginia House Panel Votes To Impeach Entire Supreme Court : NPR Here are some other articles about this story: * wvpublic.org: [House Judiciary Committee Adopts Articles of Impeachment Against Entire W.Va. Supreme Court](http://www.wvpublic.org/post/house-judiciary-committee-adopts-articles-impeachment-against-entire-wva-supreme-court) * bdtonline.com: [Impeachment articles approved for West Virginia justices | News](http://www.bdtonline.com/news/impeachment-articles-approved-for-west-virginia-justices/article_d26f4b50-9aa7-11e8-9a88-a7829866fe76.html) * huffingtonpost.com: [There's A Lot Of Drama Right Now With The West Virginia Supreme Court](https://www.huffingtonpost.com/entry/west-virginia-supreme-court-appeals_us_5b69ec5ae4b0b15abaa7d968) * governing.com: [Why West Virginia Lawmakers Are Trying to Impeach Almost Every Supreme Court Justice in Their State](http://www.governing.com/topics/politics/gov-west-virginia-supreme-court-justice-impeach.html) * wvmetronews.com: [Plea hearing scheduled in Ketchum case](http://wvmetronews.com/2018/08/08/plea-hearing-scheduled-in-ketchum-case/) * news-expressky.com: [WV House committee approves 14 articles of impeachment against justices](http://www.news-expressky.com/news/national/article_9deaec11-3173-5f7d-8a51-656683c0c508.html) * newsmax.com: [W. Va. House Committee Votes to Impeach Full State Supreme Court](https://www.newsmax.com/newsfront/west-virginia-impeachment-state-supreme-court/2018/08/08/id/876082/) * wvlegislature.gov: [Press Release - West Virginia Legislature](http://www.wvlegislature.gov/News_release/pressrelease.cfm?release=2388) * wvgazettemail.com: [WV House committee approves 14 articles of impeachment against justices | Politics](https://www.wvgazettemail.com/news/politics/wv-house-committee-approves-articles-of-impeachment-against-justices/article_f4795b83-ba20-5ac8-a267-aeb4b10060fa.html) * npr.org: [W.Va. Supreme Court Justice Allen Loughry Is Charged With 22 Counts, Including Fraud](https://www.npr.org/2018/06/20/621836487/w-va-supreme-court-justice-allen-loughry-is-charged-with-22-counts-including-fra) * wvpublic.org: [Del. Pushkin Calls for Resolution to Investigate Supreme Court Chief Justice](http://www.wvpublic.org/post/del-pushkin-calls-resolution-investigate-supreme-court-chief-justice) * thehill.com: [West Virginia House committee votes to impeach entire state Supreme Court](http://thehill.com/homenews/state-watch/400852-west-virginia-house-committee-votes-to-impeach-entire-state-supreme) * wowktv.com: [Supreme Court Tour Sealed Justices Fate](https://www.wowktv.com/news/supreme-court-tour-sealed-justices-fate/1354827864) * wdtv.com: [What's next for the WV Supreme Court?](http://www.wdtv.com/content/news/Whats-next-for-the-WV-Supreme-Court-490358811.html) * upi.com: [West Virginia lawmakers vote to impeach entire state Supreme Court](https://www.upi.com/West-Virginia-lawmakers-vote-to-impeach-entire-state-Supreme-Court/6561533746386/?rc_fifo=3) * wvmetronews.com: [Del. Fleischauer calls state Supreme Court impeachments “shocking”](http://wvmetronews.com/2018/08/08/del-fleischauer-calls-state-supreme-court-impeachments-shocking/) * washingtonexaminer.com: [West Virginia lawmakers vote to impeach all four members of state Supreme Court](https://www.washingtonexaminer.com/policy/courts/west-virginia-lawmakers-vote-to-impeach-all-four-members-of-state-supreme-court) * abajournal.com: [Amid 'atmosphere of entitlement,' 4 remaining justices on top W.Va. court targeted for impeachment](http://www.abajournal.com/news/article/west_virginia_house_to_consider_impeachment_of_four_remaining_justices_on_s) * alternet.org: [West Virginia Lawmakers Move to Impeach Every Single Justice on State Supreme Court](https://www.alternet.org/west-virginia-moves-impeach-entire-state-supreme-court) * westernjournal.com: [Appalachian Justice: Here's How WV Handles an Out-of-Control Supreme Court](https://www.westernjournal.com/ct/appalachian-justice-heres-how-wv-handles-an-out-of-control-supreme-court/) * townhall.com: [West Virginia Is Impeaching What's Left Of Their State's Supreme Court](https://townhall.com/tipsheet/mattvespa/2018/08/08/west-virginia-is-impeaching-whats-left-of-their-states-supreme-court-n2507973) ----- I am a bot trying to encourage a balanced news diet. These are all of the articles I think are about this story. I do not select or sort articles based on any opinions or perceived biases, and neither I nor my creator advocate for or against any of these sources or articles. It is your responsibility to determine what is factually correct. 
I just don't understand why Dart doesn't produce zero-point energy yet. Surely you can squeeze that in for 3.0. I mean how hard can it be?
Here's our example app using Angular: [https://hnpwa.dartlang.org/](https://hnpwa.dartlang.org/) It's 100% client side with zero SSR. I agree, there are many sites – often content-focused sites – where initial load and SEO are essential for all content. Our tools were optimized more for experiences like gmail – where the user is likely to spend a lot of time in the experience.
oh right lmao, can't believe I got confused lol. Also in the await expression the method there should always return a Future right?
Yes, exactly - async methods will always return a Future type.
If it does not return anything shouldn't we write void before the function name?
If it's already marked async, it's implicitly returning a Future - otherwise it's implicitly void.
Hey, I work on the dart analyzer, and this isn't actually correct! It's true for closures, but for top levels and methods, there's no return type interence (they can reference each other creating a cycle). Rather it acts like Dart 1, and you get an implicit dynamic. And dynamic is all accepting -- `dynamic f() async` is ok and so is `dynamic f() {}` (no return statement). You can turn this off with: ``` analyzer: strong-mode: implicit-dynamic: false ``` Also if the function does async work but does not return a result, it's best to do: ``` Future&lt;void&gt; f() async { ... } ``` Then you can still await it, but can't use the result of awaiting it.
[quicktype](https://app.quicktype.io) converts JSON, JSON Schema, TypeScript types, and GraphQL queries to code. We just added Dart as a target language, which joins Swift, Go,Python, Java, C#, JavaScript/Typescript/Flow, Elm, Kotlin, C++, Ruby, Rust, Objective-C, and JSON Schema. We also have a pretty cool [VSCode extension](https://marketplace.visualstudio.com/items?itemName=quicktype.quicktype), in case that's your editor of choice. I'm sure there are a few kinks that need to be ironed out, so we’d love to hear your feedback. Cheers!
Unfortunately yes those are wrong! I looked for a solid new guide or announcement to the new async, the best I could find is here: [https://github.com/dart-lang/sdk/blob/master/CHANGELOG.md#200---2018-08-07](https://github.com/dart-lang/sdk/blob/master/CHANGELOG.md#200---2018-08-07) It should, as far as I know, be all up to date except that async functions run synchronously until the first await. This is useful because it lets some synchronization occur before the async code. Its also better for performance.
Hello, I'm quiet new to the language and have been having some trouble using quicktype. I would like to use debugPrint() method in order to see the deserialised parsed json data. Unfortunately i cannot use '${welcome['someField']}' in order to select a specific field from the deserialised JSON data I'm getting. Any idea how I can do this?
I've tried doing that, but i keep getting the following error: type 'List&lt;dynamic&gt;' is not a subtype of type 'Map&lt;String, dynamic&gt;'
 windows, Mac and linux now all work on Flutter desktop. Plugins is now being worked on.
I share thosakwe’s view. I think zones were ported to Angular for change detection und thus fact should prove the maturity of the api in an asynchronous environment.
Is the dart tour updated? [https://www.dartlang.org/guides/language/language-tour](https://www.dartlang.org/guides/language/language-tour)
This is just part of the syntax in dart. When you do list[0] You are saying "access list at index 0" When you do map[value] you are saying "access map at key value" ----- In fact, you are able to define the [] operator to do what you want in each type. 
But can this operator be used with everything? Is it like the indexer in C#? [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/)
https://www.dartlang.org/guides/language/language-tour#overridable-operators You can implement your own `[]` and even accept any type inside the brackets with `operator[](dynamic key) {...}`. 
It looks like it is! It talks about optional new/const and type interence. If you see anything in there that you question though definitely let us know! You can comment, message me, or hit the bug icon in the upper right to file a bug with us on GitHub.
Yes, it's like the indexer. The indexer is another operator you can define.
im not sure what you mean by "global." importing something doesn't make it global. that would be strange behavior. do you mean you want an alias for an import? like ``` import foo from './bar.dart' as baz; var instance = baz.SomeBarClass() ``` 
Sorry i was a but unclear. By global i did not mean app-wide global, but global for the file it was imported in. And by "as" i meant an alias indeed. 
i had edited my comment before you replied. see my update
Aliases are what i would use indeed, or even better just pick the methods/functions/etc with Show. With TypeScript i never use a default export, and always import only the stuff i actually use, making if obvious from where it came from // in TS or JS import { foo, bar, baz } from 'somelib'; Theres tonnes of code out there that dont use this approach, and many examples just import lots of libs and "magically" uses a a imported global function making it very difficult to actually know were it came from. 
Yeah, I just use `show` everywhere. It's the same as in Python; it's not difficult to get used to. It would be nice if you had to opt into importing everything. At the same time, you shouldn't have so many dependencies that this is to much of a problem, and namespacing is a good idea, anyway.
Waitaminute. You're posting this on the dartlang subreddit, and you don't mention Flutter? Why are you posting on the Dartlang subreddit? Obviously the best path for industry is to get a good grounding in both Swift and Android Java development. For the future, Flutter might be the best way to go. That being said, even when AirBnb was using React Native for cross platform development (which they have abandoned recently btw), at least 4% of their mobile app's code base had to be native to cover features not handled by React Native. I have made only a very simple app in Flutter, and I can tell that it breaks most heavily when trying to use extensions that don't quite work very well (like audio recording). There is extreme value in know to to write platform channels in Swift and Java to make native things work on a Flutter app.
Which version do you take out nulls? 🙂
Personally, I'm hoping for Dart 3.
aaaqqq – are you blocked by 24235? Please let us know! We are fixing bugs constantly. If a bug hasn't been touched in almost 3 years, it's unlikely to be causing anyone pain. We try hard to prioritize bugs that are actually causing issues now. We are happy to revisit a closed issue if that's the case.
AFAIK this is not supported, but you can enable *format on save* or *format while typing*. You should get familiar with the style rather quickly just by reading (your) correctly formatted code. And after all,[the official whitespace-handling rules for Dart are whatever dartfmt produces](https://www.dartlang.org/guides/language/effective-dart/style#do-format-your-code-using-dartfmt).
ive actually set it to do the formatting automatically every few seconds (i think a few seconds is the default for that feature). I suppose I will get used to it, and as you say, get familiar by figuring out what the formatting did. I was just hoping it could spell out what it was doing by recommending instead of changing. I tend to learn better by learning rules. thank you!
Teach yourself or via Udacity a programming language first (I would recommend Kotlin) - not the whole framework. Next stept is a testframework (Unit-Tests), then a build a tool like Maven or Gradle. As a last step take your way into Android which has better market share than iOS and it is easier to get your Dev machine up and running.
If you're looking for a job, choosing either native platform will put you on one of the two native platform teams. But if you dare not work for the man but for yourself, consider a more homogenous tech environment like Dart. I'm a Java developer for the last 15 years building systems how the employing corporate IT shop tells me to. But I'm looking at Dart now for server side, client side, and mobile development. If my end user clientele don't know or care how the software works, I'm free to choose my tooling. Hear this 2 minute advice and consider being the master of your own work domain - https://youtu.be/EPrNf4VquCw
have you tried making the path relative? `import './feature/part1.dart';`
You could take a look at LetsVote, which is a little out of date but shows how code can be shared: https://github.com/apptreesoftware/letsvote
You have a missing semicolon at the end of the line. What is the error?
Try making it a static method
There's [LetsVote](https://github.com/apptreesoftware/letsvote), as mentioned by /u/JPRyan00 in [this comment](https://old.reddit.com/r/dartlang/comments/99619z/flutter_with_angulardart_codeshare_examples_and/e4l98yq/) And there's [this aqueduct todo example](https://github.com/stablekernel/aqueduct_examples/tree/master/todo), which exposes a common API shared by the server and the Flutter client. You can use it to make an Angular2 client in the same way. Best of luck
Good eye :D It was a typo in my OP. The error is on the `foo();` line. It thought I wanted to declare a new function called `foo` and the error was there was no function body. I will test the relative path solution then report back.
Or the official website's [guide](https://flutter.io/get-started/editor/#androidstudio). Seriously, it even provides details for VS Code lol
You can check this resource suggested by Flutter itself. [Bootstrap Into Dart](https://flutter.io/bootstrap-into-dart/)
At this point, I prefer to not click on anything from Medium, as in 99% of cases, it's just blogspam and regurgitated information.
There are also examples of using Angel to share code between backend and frontends: [https://github.com/angel-example](https://github.com/angel-example) &amp;#x200B; They'll need to be updated soon (when Angel 2 comes out), but for now should suffice.
This is a fantastic, much-needed introduction to this topic. Nicely done!
Thanks for the feedback.
Man, this is awesome! Might help me in an upcoming project. Thanks a lot and best of luck developing it :)
The real answer is the original creators of the language didn't really care for interoperability (JS on the web, C/C++ natively), so not a lot of love was put into it. The [mechanisms for JS have improved a bit](https://github.com/matanlurey/dart_js_interop#examples), but they have not really improved at all for C/C++. I can imagine with Flutter growing in popularity something like a proper [FFI](https://en.wikipedia.org/wiki/Foreign_function_interface) might eventually be added, though.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://en.wikipedia.org/wiki/Foreign_function_interface) - Previous text "FFI" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
I would recommend checking out Tonic. This is the library that Flutter uses to inter op between C++ and Dart. https://fuchsia.googlesource.com/tonic/
A while ago, I was dismayed at the lack of concrete documentation and examples about Dart-to-JS interop so [I wrote a tutorial](https://medium.com/@thebosz/creating-a-dart-to-javascript-interop-library-c97da204c34a) as well! I really wanted to learn it and I figured it would help others if I wrote it down. Thanks!
Thanks for sharing @thebosz. I like the allowInterop() example. Would be great to update for Dart 2 and have content over at Dev.to. It's a bit lonely out there, myself mostly writing Dart tutorials.
Some of the style guide is covered by lints, so if you disable format-on-save/format-on-type/etc. and enable the lints, then you should get warnings in your problems view for them. As /u/elaru says though, you'll probably get used to the formatting by just letting it auto-format on save/typing :-)
Thanks for the info. Will look further into it. 
&gt; Do you always use Show or import "as" (aliasing) when doing imports? Or just leave everything global? As is the answer to most things, it depends! If the library I'm importing is really related to this file and it's convenient to just have everything in local scope, I wouldn't use an alias or `show`. If there's a high chance of collisions or the imported functions are only relevant to a small portion of this while then I'd probably use an alias. If I'm only using a tiny portion of the functions then I'd probably use `show`. It's worth noting that depending on your editor (I know it works in VS Code, I'd expect it to work in IJ/AS) you can invoke the `Rename` on the `import` and it'll let you add an alias to a package that didn't have one and update all the references. So importing the whole lot to start doesn't mean you have a load of work to do if you decide an alias would be more appropriate later.
Thank you so much for the sound advice. That's exactly what I was looking for. Appreciate it
I’ve put a lot of effort into [build_native](https://pub.dartlang.org/packages/build_native), a `package:build`-based solution for building native extensions with minimal extra steps. That being said, it’s not 100% a panacea yet, but I have a PR open on build_runner that will improve the workflow. Just depends on when I have time to finish it, but once there’s a “pub run build_runner run”, it’ll be easier to incorporate native extensions in a standardized way. In addition, it supports building from CMake, autoconf, and Make, as well as pulling dependencies from Git, archives/tarballs, And other Dart packages, so third-party dependencies are relatively simple to integrate. Stay tuned...
Currently tudying dart, both angular and flutter. I was looking for this too. Thank you.
Material design components are used by Google itself; they're a good way to build out the UI of your web app.
I was also thinking of using that together with bootstrap (ng_bootstrap).
There's already a Flutter community on Medium: [https://medium.com/flutter-community](https://medium.com/flutter-community) Any particular reason you're not working with them?
I do this, myself, and it works very well.
Nice. Glad it works fine with you. I hope it works fine for me too, lol.
What about default web implementation https://material.io/develop/web/ and just a little JS interop for JS components instantiation?
Didn't thought about that. I would give this a try tho. Using mdc for web and angulardart would be really nice. But would there be like some performance issues if I were to use JS interops compared to using purely dart?
Since it all compiles to JS in the end, there isn't much of a performance cost in using interop. Developing with JS code just sucks. :)
This is a confusing API, and one of the corners of the core library that doesn't feel right with the move to the new type system in Dart 2. &gt; The part that confuses me the most is that the pow function says that if the first and second arguments are positive ints then the return would be an int. The *runtime* type of the object you get back will be an `int`, but all the *static* type system knows is that it's a `num`(which is a supertype of `int`). To make the warning go away, you can add an explicit downcast: digits.fold(0, (start, element) =&gt; start + (pow(element, digits.length) as int)); 
Thank you for explaining this to me. It was driving me nuts. The lack of a proper book for dart 2 (I am a beginner programmer) isnt helping. 
Avoid using `as` whenever possible! Use the generic for better static analysis: digits.fold&lt;int&gt;(0, (start, element) =&gt; start + pow(element, digits.length));
dont know anything about generics, so will have to do some reading. [Generics](https://www.dartlang.org/guides/language/language-tour#generics) thank you! 
Not that I know of, but something close might be the [async pipe](https://webdev.dartlang.org/angular/guide/pipes#the-impure-asyncpipe).
Yes they do. https://medium.com/lacolaco-blog/bloc-design-pattern-with-angular-1c2f0339f6a3?source=linkShare-530ae08efaaa-1535684124
Yes they do https://medium.com/lacolaco-blog/bloc-design-pattern-with-angular-1c2f0339f6a3?source=linkShare-530ae08efaaa-1535684124
I'm impressed bro! Keep 'em coming.
Also, i believe the community would greatly benefit from a static code analyzer for dart 2 ( a SonarQube plugin ) for an automated Continuous Integration job with code-quality built in. I have only found an empty github repository, but no real project yet; maybe we could assemble a small group of like-minded individuals from this subreddit to produce an Apache-licensed ( *free as speech and beer* ) plugin. Just thinking out loud... would anyone be interested ?
There are some beginner classes on Udemy. 
Hi, I saw those, but each level (3 total) is only 2 hours long. I havent watched the videos, but in 2 hours I doubt I could get more from them than what I got from the dart.academy bootcamp, which is pretty decent, but short. I hope google comes out with a few of dart courses on their nanodegree series. There seems to be a lot more on flutter. Would it make sense to learn the beginner flutter courses as a way to learn dart? thank you.
Most material on Flutter assumes at least a baseline understanding of Dart syntax, but I believe most of it to be a decent entry point. The important thing to note in regards to Dart is that it is rather similar to a few other languages (Java and JavaScript, for example) and tends to feel like a mishmash of them, and so it will function much in the same way as well. I've been practicing syntax by taking simple JavaScript problems from sources like freeCodeCamp and rewriting them in Dart, and then referring to the Dart 2.0.0 docs on dartlang.org when necessary. Building little sites in AngularDart seems to be helping as well, no being able to untangle my brain and differentiate from TypeScript has proven to be a small challenge, though a very insightful one.
You can actually just the \`dartanalyzer\` command that comes with the Dart SDK. It can be easily invoked in a CI setup.
As a sane human being? That convention was bogus from the beginning and shouldn't be used in modern code. It is only useful in dynamic languages like JavaScript where there is no privacy, so you have to use some convention. Then again, in a dynamic language it doesn't hurt refactoring. But if you in C# (or in Dart for that matter) later decide to make a property public, you either have to provide a special getter (indirection) or you change the whole code of that class, or (even worse) of the class you inherit from. This is the same problem as in golang, where exported types and properties have to be upper case. So if you then later decide to make a property private, you start refactoring the whole code of the module. They obviously haven't learned their lesson.
No, you certainly are not the only one, and I cannot fathom why they thought this could be a good idea. Although C++ is described as being verbose, public and private blocks in classes are certainly not and I think that is the right way to do it. Also, this would have been something familiar to most programmers. Rust does a good job at module based privacy as well with a simple "pub" keyword. That would have been just fine. But no, saving two letters is so important that it is worth breaking refactoring. If one ever decides to make a property public, one either provides a very awkward getter or one starts refactoring the whole library! Also the work of a genius, making privacy not class based but library based. It just doesn't fit the class model. But the real fun begins, if one later decides to make a property private, because then a public getter won't do (obviously); then you have to do the refactoring OF THE WHOLE LIBRARY if you are lucky...
^The linked tweet was tweeted by [@oas_generator](https://twitter.com/oas_generator) on Sep 02, 2018 11:08:57 UTC (4 Retweets | 5 Favorites) ------------------------------------------------- Even though \#Dart2 was released less than a month ago, \#OpenAPI \#Generator now supports both \#Dart 1.x, 2.x \#API client generation thanks to the awesome work by [@swipesight](https://twitter.com/swipesight) 👏👏👏 [http://bit.ly/2LNHxCK](http://bit.ly/2LNHxCK) \#rest \#opensource [Attached photo](https://pbs.twimg.com/media/DmFZCuwV4AAIWTq.jpg:orig) | [imgur Mirror](https://i.imgur.com/MKcBGhZ.jpg) ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
hey, thanks a lot ! i didn't have the faintest idea about this. :)
Very good!
You're in luck! Dart has no `function` keyword and it has lexical scope, which means you rarely need to use `this` (but when you do, it makes sense).
Have you tried dryice? https://pub.dartlang.org/packages/dryice Plays nice with reflectable...
ouch!
If I'm understanding your requirements, then something like the following (apologies for the formatting): Iterable&lt;String&gt; alphabetize(final String term, final Iterable&lt;String&gt; possibilities) =&gt; possibilities.where((String p) =&gt; term.toUpperCase() == (p.toUpperCase().split('') ..sort() ).join('') ); void main() { print(alphabetize('abc', ['cba', 'fed', 'jih', 'bac'])); } The basic problem you have is that sort() is an in-place operation, hence returns void. That void is the source of your error.
Thank you for the explanation, I think I now understand the cascade operator a little better (hopefully I will find some examples that will confirm my new understanding....having said that...I now need to understand why you used `Iterable` , `final` instead of the a `List` and simple `String` and why you used `where()` instead of the `forEach()` Ive looked at their definitions, I think I understand what they do, my question is why are these preferred in this situation? thank you. &amp;#x200B; PS.- does Dart have a method that can see what is going on in the middle of a dot or cascade chain? (at some point I semi-learned Ruby and it had a method called `tap` which you could put in the middle of a chain and print out the current values of the variables if you wanted. That helped clarify what was returned, what wasn't and how things were being modified). &amp;#x200B;
I used Iterable&lt;&gt; because there was nothing in the function that required the more specific type of List&lt;&gt;. As a general rule, you should use the least specific supertype as a function parameter to maximise its utility. By using Iterable&lt;&gt; instead of List&lt;&gt;, you can use the function with sets, queues, streams, etc. - not just lists. final ensures that the value cannot be reset. It is just a way of having the compiler check to make sure that the parameters are not being reused in the function, i.e. that the function is (at least potentially) pure. The more checking you can offload to the compiler, the less you have to do yourself. I tend to mark everything as final (indeed, in most more modern languages it is the default) and then carefully review the situations in which I need a variable _not_ to be final. where() is a specialisation of forEach() that returns an iterable for you containing the iterable members that match the given test predicate. It's simply a more succinct way of expressing the problem in this case. forEach() would require you to assemble the iterable of matches yourself. I'm too lazy to do that :) There is no equivalent to Ruby's tap() operator. But in most cases your IDE can show you what the concrete types are at each step of a chained operation. Intellij does it nicely, for instance.
 Ok removing &lt;span *ngIf="!create" id="error"&gt;Fehler&lt;/span&gt; &lt;span *ngIf="create" id="success"&gt;Benutzer angelegt&lt;/span&gt; helped.
&gt; I thought the whole point of a strongly typed language was to avoid the genericity? The point of strong typing is to make compile-time assertions about type information in your program. But a type can be both general and specific. I would say that, in general, it is better for your functions to accept the most general types they can. This is line with the old programming philosophy "be generous in what you accept". Types can be both generalised yet still specific; Iterable, for instance, is a very general interface that is implemented widely. It is quite specific, however. Compare this with Object, which is the most generalised type, and dynamic, which is no type at all; these are examples of non-specific types and consequently they are of limited utility when strong typing is important. They are only used in situations where you _don't_ need your types to be strong, or where there is some advantage to type information being discarded. &gt; what is the difference between this and making it a constant? const is a compile-time constant. It cannot be used as a function parameter modifier because the function parameter value will not be known at compile time. However, from a practical perspective, both const and final assert that the value that they refer to cannot change, so you are right to observe that they are conceptually similar. 
Check out *Flutter Rocks* They've awesome tutorials, one for this too. ( *I haven't seen the video yet* )
That seems pretty cool. But, when I try to install it, it shows "not compatible with your VS Version( *1.25.something* )" 
I've done it before (without adding a view or router framework). It's easy, and pretty satisfying in Dart. The whole DOM API is pretty much the same as in JavaScript, so figuring things out is easy. &gt; Would using Dart be just as good as TypeScript for this kind of project? Yes. I'm not super familiar with TypeScript, but compiled Dart is pretty heavily minified and optimized. If you're not using a framework, size probably won't be much of a concern. It's not going to be as easy or enjoyable as writing with a language that is intended to be used without a framework, like Elm. But, if you follow reactive patterns and are disciplined with yourself, the difference shouldn't be huge.
I built a framework-less web app in Dart: [https://github.com/mehaase/encoding-tools](https://github.com/mehaase/encoding-tools) &amp;#x200B; I've used AngularDart in the past but it wasn't a good fit for this project, and I couldn't find anything else that I liked. Dart's DOM API is IMO much better than the JavaScript DOM API, and for the most part you don't need to worry about backwards compatibility.
Please post your `web/main.dart`
I've used both TypeScript and Dart extensively, and I can tell you that Dart is the far better experience in most ways. The language is so much nicer and cleaner, and the ecosystem and tooling are better put together and coherent. Compiling Dart to JS is a breeze and results in a very reasonable deployable. The only "downside" in using Dart is that the community is a bit smaller, but even that is changing now that Flutter is the flavor of the year. I use quotes because the huge JS/TS community isn't all good...there are a million options for anything you wanna do, but on the other hand, you've got a million options, and the majority of them suck.
You could be using an element in `app_component.html` that isn't a directive in `app_component.dart`.
As long as Google doesn't stop developing Dart, I think the quality of the language and it's tooling is more important than community if you're working solo. I'm running into a maintenance nightmare with my main project and want to start with a clean slate.
I'm not sure it would tell you much: import 'package:angular/angular.dart'; import 'package:sb_angular/app_component.template.dart' as ng; void main() { runApp(ng.AppComponentNgFactory); }
I don't see them in the material components gallery, so it's unlikely. Looking through the source code for the component (especially the template), I don't see where it could possibly be. You might check the source for the material input to get a good idea in the design. (I mean, you could probably extend the base input class and copy the template, adding your to little buttons.)
 &gt; nitpick - getEmployee can be simplified as Future&lt;Employee&gt; getEmployee(int id) async =&gt; Future.delayed(Duration(seconds: 2),() =&gt; Employee(id, "Joel", "Coder"));
I think I can briefly address most of these: 1) Flutter UI widgets are built to be customized. Since they're all written in Dart, you can examine, modify, and/or subclass any of them. Plenty of devs choose Flutter because they want to create a branded experience, as opposed to a cookie-cutter UI. 2) Even though Flutter is technically still in beta, Google has declared it ready for production, and Google is one of many companies with apps in the app stores built with Flutter. The beta designation is there only until they can get a few extra features polished, but what's there is totally stable. 3) Firebase support is great. I hardly encounter a Flutter app that doesn't use it.
1. Flutter UI is very customisable. A lot of widgets do use material design, but it is not hard to change them. One of core principles of Flutter is the ability to make your app look as you want (from Flutter FAQ: “Apps that need to deliver brand-first designs are particularly well suited for Flutter”). 2. In general flutter should quite stable, I haven't experienced any issues yet. 3. I haven’t worked with Firebase but the support should be solid.Especially because Firebase and Flutter are both Google products. 4. As for learning Flutter, I think the best way is to just try writing small apps and read the documentation (Flutter documentation is excellent). If you haven’t yet uses a reactive style of programming you might need some time to get used to it. You will also have to pick and learn a state management solution, Bloc patern seems to be quite popular these days.
Thank you for the response, I appreciate the insight!
Thank you for your response, I appreciate the insight! I'll definitely look a bit more into "Bloc" as well if that seems to be the way people are using Dart+Flutter.
1. Very customisable but you lose the quick development time when you start making your own until you get good at them. There are more material design widgets out of the box compared to Cupertino ones. 2. Stable enough. It worries me a bit when a new Xcode version comes out. The more plugins you use, the more this might become a problem. 3. Firebase is officially supported. The Flutter Team themselves author it. [https://pub.dartlang.org/packages/cloud\_firestore](https://pub.dartlang.org/packages/cloud_firestore) 4. Just dive right into it. Dart is easy to get. The concepts of widgets are easy to get. State management might be a concern since there's no "official way" of doing things. I personally went with ScopedModels but if you're into Redux a few plugins for those too. 
I am looking forward to read the next article.
This looks extremely interesting! My actual job is writing a web app in Typescript. I want to try this so I can secretly write it in Dart and then submit my PRs in Typescript.
How can I make a request without a valid SSL certificate?
Do you know why the code is different between command line application and web application? It is still Dart
Hey, thanks for your question. I couldn't tell *exactly* why they chose that approach. However, they have addressed these inconsistencies in the HTTP package mentioned by @CordialPanda: [https://pub.dartlang.org/packages/http](https://pub.dartlang.org/packages/http)
Awesome work. Would love to see this working for Dart 2. Stuff like this gets me more excited about the Dart community!
Have you worked with both? Dart is a far cleaner, nicer language. TypeScript is plagued by baggage it inherited from the travesty of JavaScript, while Dart was designed from the ground up to solve many of those very same issues.
I'll echo what darkglow said. Because Typescript is a superset of JavaScript, it has all of the bad parts. [My favorite image](https://pbs.twimg.com/media/CLWv31DWgAAvvsj?format=jpg) illustrates this nicely.
I'm new to dart so dont crucify me if I misunderstand this. I need the WebStorm IDE to build web apps with the new version? I cant just use VSCode?
Your **favorite IDE**, or WebStorm(recommended). 
Your **favorite IDE**, or WebStorm(recommended). 
if you're going to use webstorm, you need the version they specify 
Ok thanks. I was confused because the webdev serve in the quickstart guide doesnt work with Dart 2 anymore
I use VS Code without problems. And there's also Android Studio.
the quickstart example doesnt work on the newest version of dart though
True, but TS works flawlessly with JS. Darts JS intero is still poor.
That sentence is confusing. It means: &gt; *If you use WebStorm* and you want to run web apps under Dart *2*, you need WebStorm version *2018.1.3* or later. You don't need WebStorm, at all. But if you do use it, that's the version that gives you Dart 2 support.
Make sure to use the latest `build_runner`. There is a `1.0.0` out now.
The issue was that chocolatey installed dart-sdk 2.0 and dart VM 1.3.4. It worked with the installer.
Thanks for the reply. Yes, I tried that, and also followed this [guide](https://webdev.dartlang.org/dart-2) . I still get this error when I click get dependencies: “Because dart_chat depends on angular_components &gt;= 0.5.0-beta+1 &lt;0.9.0-beta+1 which requires SDK version &gt;=1.22.0 &lt;2.0.0, version solving failed.” 
Im not sure where that dependency comes from as dart\_chat is another project of montyr75 but I dont see the dependency over there... [https://github.com/montyr75/dart\_chat/blob/master/pubspec.yaml](https://github.com/montyr75/dart_chat/blob/master/pubspec.yaml) 
I meant dart_chat_ng_fb, I was typing it on my phone so I couldn’t copy paste it directly.
You could try setting angular\_components explicitly to 0.9.2 but `pub upgrade` should already grab the latest version :/ [https://pub.dartlang.org/packages/angular\_components](https://pub.dartlang.org/packages/angular_components)
Thanks, now I get another error: `Because dart_chat_ng_fb depends on firebase &gt;=0.1.1 &lt;=5.0.0-beta which requires SDK version &lt;2.0.0 or &gt;=2.0.0-dev.36 &lt;2.0.0, version solving failed.` This comes up when I do upgrade dependencies or get dependencies &amp;#x200B;
current versions: angular: 5.0.0 firebase: 5.0.2 &amp;#x200B;
[removed]
One of your best articles yet!
You can use `myList is List&lt;String&gt;` etc. There's also `myList.runtimeType()`
This will really help inform future tutorials. Thanks so much.
&gt;But pretty much everyone downloads JS libraries from NPM nowadays, in which case they don't attach as a global to the window object. Thanks for your feedback Jazoom. I would say that CDNs are still used as a distribution channel for JS libraries, like cdnjs.com. This will be an easier approach taken for a Dart web app. With serverside, there are good frameworks([*Aqueduct.io*](https://Aqueduct.io)*, Angel*) on Pub to help you build strong services without relying on the NodeJS ecosystem.
Oh, man... The list of topics I'd like to tackle is long, and my time is limited. If any of these ideas strike your fancy, please use them! * Using [MDL](http://www.material-design-lite.pub/) (Material Design Lite) for Dart. * Using regular expressions effectively with Dart. * WebRTC and Dart (real-time video chat, for instance). * Lessons about writing unit tests for Dart. * Tips for getting started with documentation using dartdoc. * Examples of using the HTML canvas with Dart. * "Getting started" pieces for various IDEs for Dart, or comparisons of those available. * WebGL and Dart. * StageXL lessons, examples, and articles. * Dart vs. ES6/TypeScript, etc. * Game tutorials for web or Flutter. * Using Box2D with Dart. * In-depth looks at popular packages, such as [quiver](https://pub.dartlang.org/packages/quiver) or [rxdart](https://pub.dartlang.org/packages/rxdart). I could go on, but maybe that's enough for now. :)
This type of question is best asked on StackOverflow, really. But I guess if there are elements in the list, you could maybe do `myList.first.runtimeType`. I'm not sure if there's a better way or not...
I use Webpack. I never manually link libraries. Actually, I use Vue, so Dart isn't really viable yet (I know there's a vue-dart project in the works). Regardless, the place I really want to try Dart is server side, to replace Node, where there is no \`window\` object at all. Of course there are alternatives and workarounds, but I want to make things easier for myself, not harder.
The [VueDart project](https://refi64.com/posts/vuedart-0.4-released.html) is up and kicking. Yeah, I really like using Dart on the server, too. There are a good number of fully featured frameworks for the server side, and between those and all the Dart packages that can be used anywhere, I think you'll find most of your bases are covered. Personally, I think using Pub beats the hell outta using npm any day, as well.
I'm sure I'd love it, but I wouldn't be able to get as much done since I'd have to implement and maintain many libraries. For example: nats-streaming. That's one example of many.
Thanks bro, I'm already asked this question on StackOverflow but still got no answers so far.
Great work! Any plans to make it available for Dart 2?
In the very few instances that I find I need to use JS at all, it's actually not difficult at all. But honestly, I really rarely need to interoperate. Dart's core libraries combined with the thousands of packages available do a good job of covering most bases, and that story is getting better every day.
Sorry...didn't get you. Could you please explain it? &amp;#x200B;
editors dont have programming languages installed inside of them. programming languages do not depend on development environments
Ahhhhhh....understood...good point....problem with terminology... It should be like "Configure dart in VS code"....right?
Ahh, got you. According to the docs, you can use `badCertificateCallback`: [https://api.dartlang.org/stable/2.0.0/dart-io/HttpClient-class.html](https://api.dartlang.org/stable/2.0.0/dart-io/HttpClient-class.html)
IMO Dart is a perfect beginner language. It's simple while powerful enough to teach you a ton of important programming concepts. It also has great tooling, meaning you won't get discouraged before you even begin while setting everything up.
Adding Angel to the server-side conversation as well. Many people seem to either not know about it, or just ignore it. Regardless, there are multiple options for Dart backends, also including the Jaguar framework, the pkg:shelf libraries, and plain dart:io: r/https://angel-dart.github.io
Angel 2 is in the works, but as-is right now, it'll take some time to release it. The main blocker is limited manpower (though PR's are more than happily accepted).
I wish I had more experience with Dart, so I could collaborate with your framework. I'll try harder. Can wait to add Angel-dart to my weaponry!!
I recently studied Dart, then the Angular Dart framework. Is that enough time to ask for more information what you're looking for? 
I've been using dart for past year, decent experience in angulardart and flutter. What are you looking for? 
Im looking for work and have been spending lots of time with Dart on the web and with Flutter. I have about a dozen packages published. PM me if interested.
Is there anywhere where we can find out how many sites are using VueDart?
We are looking for freelance work to work in some parts of a new angular dart app. Do you have some availability?
We are looking for some freelance work helping with building a angular dart app for our website veganbase.com
Unix shell scripts are normally only put in to bin when they are executable (with a shebang). A dart source code file without shebang will never be executable by itself unless there is some magic thing configured in the OS. As far as i know i have never seen a programming language that puts source code in the bin folder unless they have shebang. I just dont think it follows any kind of standard at all and is totally backards. But thats just my opinion. 
/bin isn't "the" place to put source code, it's the place to put files that are \*executable\* with the Dart VM. Typically, for example, if you are writing a server-side app, you will write a majority of the code in /lib (the directory most source code goes in). A small amount of source code that is intended to be executable by the Dart VM and serves as an entry-point to the main codebase (in /lib) is put in /bin to separate "library" code (code that provides classes, functions, etc.) and "executable" code (code that sets a VM program into motion).
But why wouldn't you add the shebang to your .dart scripts so that you can run them? That is unless you don't want to run them, but then why write them in the first place?
Another thing that bothers me almost every day is that everything under /lib is a "source" but the Dart-Team decided to add an additional folder "src" to lib. So according to their documentation source files should be under /lib/src. Makes in my opinion no sense. They should have named lib as src - this would make the dir-structure leaner and cleaner.
Source files are sometimes not ment to be executed. They are ment to be compiled. Some languages can run source files as interpreted and then then you usually start them with a command and the source as parameter. So shebang is not needed. The source file however is not executable in those cases. 
It's easier to see the sense in having the `src/` folder within `lib` when building packages. See this example below: lib/ src/ a.dart b.dart c.dart main.dart This will allow you in `lib/main.dart` to specify the files in `/src` to export: export './src/a.dart'; export './src/b.dart'; So now we aren't exporting `lib/src/c.dart`. Any project using your package will be able to do `import 'package:your_package/main.dart';` and have access to the a and b exports. Here's the documentation on [creating library packages in Dart](https://www.dartlang.org/guides/libraries/create-library-packages).
Looks right to me! One question, where did you see that "Webstorm" is the recommended ide for angular dart? 
Also, IntelliJ with Dart plugins can replace both Android Studio and WebStorm in this graphic. 
Well, hang on a second, it _does_ make sense. You may not like it, but it does make sense. Consumers of your library cannot import directly any file under /lib/src; they can only import files under /lib. This provides encapsulation of your library's internal mechanism. That's important. With your example, a consumer of your library could directly import subpackage/part1.dart. That's bad encapsulation. If your files (other than package-name.dart) were under lib/src/, then they wouldn't be able to do that.
If you ad a shebang and chmod it makes perfect sense to put it in bin . If you don't it doesn't make sense. If Dart is run as a scripting language it would make more sense to put it under src if no shebang is given. Scripting languages are essentially sourcecode that are interpreted or jitcompiled and then executed by the vm or interpreter. It's source code. Not binaries. You woudnt say "hey Mike send me those dart binaries of that tool you made!" You would however say "Hey Mike send me that dart code you wrote of that tool you made" . Code is in this case short for source code. Dart without shebang != binaries
Right. So don't put any files in /bin if they're not meant to be scripts. What's the problem?
People seriously underestimate IntelliJ 
vscode is also nice for angulardart and flutter
From the documentation you linked: &gt; bin &gt; The main files for a command-line app. One of the files must include a top-level main() function. &gt; lib &gt; Additional code to be used by your app. Could the documentation be clearer? Probably. Does it categorically state that all source code has to go into /bin, in the way you're saying. No. Put your source in /lib.
Further down &gt; bin Contains the source files for the app. &gt; Expand bin to see main.dart, which is the main Dart file for this example. Non of the docs says that a source file should be execuable. It only says that one of the files must contain a main function. Bin is usualy for binaries according to all known defacto standards. This has been loosened over the years to include scripts with shebang. A dart source without a shebang is still just a source code file. So it's just unessecary confusing. Source code usually goes in to src and executable or binary files in to bin. A defacto standard that almost the whole world stands by.. except Dart. Because why? What if dart starts to ship a compiler that generates binary execuables. Are they going to be put in the src folder because they could be considered source for the machine lol . Nice 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [There is a lesser known programming language called Dart that has the convention of putting source code in the bin and lib folder](https://www.reddit.com/r/programming/comments/9pagmy/there_is_a_lesser_known_programming_language/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
You're arguing over a point that nobody's disagreeing with. It's becoming tiresome. Multiple people in this thread have explained to you that your source goes in /lib. Only your shebanged scripts need to go in /bin. I don't know how to make this any clearer to you. If your complaint is with the documentation, which I agree could probably be clearer, then you need to take that up with the dart devs by filing an issue on github. This subreddit isn't the place for it.
Nice! But check the VS Code and IntelliJ options for IDE
Perfect then i know that you feel that the documentation is wrong because it is pretty clear what it says. Im glad that we agree that the bin folder is for suitable executable scripts with shebang. I dont agree that the src folder should be put under lib because that is also way out there when it comes to following any kind of defacto standard that has been used for the last 30 years but i can probably tell from your previous opinions where that debate will go so maybe its best to leave it like that. This subreddit is related to Dart programming language so discussing the official documentation is highly relevant to the Dart Programming language. If there is a bug request however it should be submitted to the correct place but for now its just a discussion. 
Speaker here: if you watched the talk and have any questions - just let me know.
No - the consumer can not import subpackage/part1.dart because part1.dart has something like '`part subpackage;`' in it's header. So the compiler complains... 
"Server runs on the command line" feels wrong. I get what you're saying but the wording could be better.
Thanks for the feedback. I read it [here](https://webdev.dartlang.org/) under “batteries included”.
Ok thanks, do you have a suggestion?
Ok, thanks, where exactly should I put it?
Android Studio and WebStorm are both IntelliJ.
You could add Fastlane in the the mobile development pipeline. It allows for continuous delivery for both iOS and android. 
Agreed. I use Visual Studio Code for all development for example.
Here's a curated list of [Dart tutorials](https://reactdom.com/dart).
Great idea! there are many great [Dart tutorials] but few good Dart books.
https://www.dartlang.org/tools/pub/publishing
I would use the Stagehand package to generate the scaffolding for a library. That should make a good starting point.
Made my day
I also use VSCode, works great. I agree that "on the command line" sounds odd, "headless" may be more appropriate. Also, you may want to mention some server frameworks like Aqueduct, Angel etc. I uae Aqueduct and its very good.
http://bfy.tw/KVQZ Looks like what you want...wasn't very hard to find. Most of the time in JS/TS projects you have to set up your build process anyway.
If you're buying into Dart, it seems reasonable to also buy into Bazel. It provides certain [advantages](https://stackoverflow.com/questions/29245787/what-are-the-differences-between-bazel-and-gradle) over Gradle. Here's someone describing the problems his team encountered with Gradle, and their [happy migration to Bazel](https://www.pgrs.net/2015/09/01/migrating-from-gradle-to-bazel/).
No. I think this is because Dart targets JS, where named groups do not exist either.
And it was even smoother and easier before the IDE was dropped.
You can subtract the current DateTime from the DareTime at which you want to run the task; this returns a Duration object. You can then use a Timer from dart:async. That’s probably the most straightforward way to run a task in pure Dart at a specific time, without using cron jobs, etc. There *is* a `package:cron` by /u/isoos that you might try out, though.
I will try it. Thank you!
Use a [cron-job](https://cron-job.org/en/).
Thanks for sharing Aaron. Consider blogging on your experiences at https://dev.to. I've got some on there.
I do like Dart but I still hope that it will have multi threading someday. Even if it’s just on the server. 
What's wrong with isolates? Check out how aquaduct use them for multi threading on the server. 
I might be mistaken but I thought Dart was single threaded and that isolates aren’t using other cores but behave like Python coroutines. 
Isolates can run on as many cores as you have! It's one of the reasons we give you the CPU count in dart:io Platform
Need some clarifications: * Shallow or deep copy? * Are the types of objects known? Personally, for the rare case when I have mutable objects, I simply implement either a copy constructor or method. If your objects are immutable, there is no point in cloning them.
Just use dart2ts and the ts build system.
Something in the form of F#(https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/copy-and-update-record-expressions) where you make a copy of your immutable object except for a few properties. There is built_in library but that is crazy verbose. The same with copy constructor.
Why though? Are there any benefits to targeting TS?
Maybe you want to migrate off of Dart?
* for leveraging ts js compiler if you're targetting different kinds of platforms instead of writing another one * for better js interoperability * and of course as @dsk wrote : as an emergency exit from Dart
Yeah, actually you're right. Yet I found that's the only way for having a reasonable interop between Dart and the rest of the world (i.e. js).
... and I forgot : * for having a modular build (you can build eash package separately) * for dynamic implementing real dynamic loading of dart modules * for supporting js string interpolation
People are getting more and more crazy about doing compilers. Why not do something like Dart to LLVM, or Dart to MSIL, or Dart to JVM? You know like some compiler that Dart community would benefit from. But no, they are doing Dart 1 (when Dart 2 is much better) to TypeScript (when both Dart 1 and Dart 2 already have decent transpilers to JavaScript).
Could you elaborate on these points? They're not really self-explanatory IMO. "Leveraging" the TS compiler can only downgrade performance, never improve it. Since Typescript is little more than Javascript with optional structural typing, there are no environments that run TS natively (maybe if Deno ever reaches stability and gets popular). TS is *always" just stripped down to JS, and presents a needless intermediary step for Dart. Does Dart not already support partial compilation to JS? I've only worked in Flutter, so I wouldn't know. What do you mean by dynamic loading of modules? Typescript uses the exact same module system that Javascript does, and that means no dynamic loading. I can see this being useful projects that mix JS and Dart, since it makes the compiled Dart code retain type annotations, giving your editor an easier time with autocompletion and such. Do you see any other applications. P. S. please use the edit feature, it makes things more readable :)
TS compiler can target different versions of ecmascript that's basically what I mean. Then you can actually use standard js optimization technics, those that you would use in any normal js/ts project. Dart supports partial compilation to JS ? No. Not really. It supports "incremental" compilation. But to compile a single project you still need all the dart sources of all the dependencies. And the first build will always build the whole thing. Also the final result is monolitic (I'm talking about dart2ts compiler that is the production compiler). Only a big monolitic js script (with the SDK) will be produced. There's the holy tree-shaking algo that will cut some unused branches but that's all. Dart2TS instead builds a single package and assumes it will get the other packages already translated to js using the standard js module system. At runtime you can choose to load everything or load some parts later. You can also choose to create a "loadable plugin system" and design your plugin contract API and then load thirdy party modules you didn't even have the sources. While in Dart you can use the "defer library" mechanism to somewhat "load on demand" the code you need this in no way allows you to load on demand unknown code (see [https://github.com/dart-lang/sdk/issues/10530](https://github.com/dart-lang/sdk/issues/10530) for more details).
Dart2 is only Dart1 + strong mode mandatory ... not that big deal IMHO. Actually Dart2 introduced the kernel thing that's something similar to LLVM. But it was far from finished when I started working on dart2ts and it was targeted on dart2. Eventually Dart1 (and Dart2) javascript transpilers are not that good if I had to build my own.
Are you working in Google? If your transpiler was better the Google's one, I bet you would already have a good carrier in Google.
[Dart on LLVM](https://medium.com/dartlang/dart-on-llvm-b82e83f99a70). [Dart on JVM](https://dzone.com/articles/run-your-dart-code-jvm). No CLR as far as I know.
Thanks Ron. Would be helpful to have some comments in the snippet to know what's happening, possibly explain CQRS.
Manually it could be like this, it's a little tedious but fun to learn dart Self-explanatory example: [https://dartpad.dartlang.org/dc1e7b2cbe45063e00b127daa9c0cb67](https://dartpad.dartlang.org/dc1e7b2cbe45063e00b127daa9c0cb67) &amp;#x200B; If you want to clone instancies of Map, List classes, these ones provide you with superb contructors and static methods for that task
because typescript is a cancer
Not saying that. Of course they did a great job. But in the last years they put all their effort on flutter and angular-dart for web dev. Javascript interop as never been a priority. While I think that's very important. At least it is for me. As well as modular builds. I end up writing this stuff (and I'm far from being satisfied with it because I had to write it in the spare time but it's working and that's ok for now...) because I really need it and the current dart system doesn't work for me. And because I still love Dart I did it instead of giving up. Maybe that's useful for others too so I'm giving it for free. That's all. Anyway : I can even be much better than many google engineer and even better than some that are in the Dart team. That's doesn't automatically buys me a job at google, unfortunately.
If I remember. Void will give you an error if you try to get the resulting value of the future. While Null will just give you a null. 
Yep! And then there *are* some interesting reasons why you stil would perhaps prefer `Future&lt;Null&gt;`, `Stream&lt;Null&gt;`, `Sink&lt;Null&gt;`, `List&lt;Null&gt;`, etc, covered in the article!
Oh. I thought this was a question. Misread the post. Great article, thanks. 
Oh, no problem! It's kinda titlegore in hindsight, haha. But you're TLDR is spot on, so I wanted to both validate it and also hint at what else the article has to offer! Cheers!
I tried codewars, but found it to be kind of messy. Some of the exercises were way to advanced for a beginner. Also the comment section didnt differentiate languages so it was hard to ask for help. I have never seen CodeSignal before, I will definitely register and try it out. thank you!
Excited to have finally produced a release from this package. A lot of people have asked when Angel 2 is coming out. Expect \`2.0.0-beta\` within the coming weeks. Most of the core packages have been updated, and soon, all that will be left is releasing the ORM and upgrading the other packages as well. &amp;#x200B; I have no specific release date, but as always, contributions are accepted. Find me on Gitter for more details.
I don’t understand why there is no body in the if statement, and is it assigning *_demo.tiles[pos].isVisible* to true? it looks like it.
How would that expression evaluate if isVisible is some voodoo property that doesn't always switch to what you tell it to? 
Here it is ;) [https://medium.com/flutter-community/part-2-code-generation-in-dart-annotations-source-gen-and-build-runner-bbceee28697b](https://medium.com/flutter-community/part-2-code-generation-in-dart-annotations-source-gen-and-build-runner-bbceee28697b)
In Dart, an `=` expression always evaluates to the value on the right-hand side. That's true even if it ends up calling a setter.
Interesting, thanks :) 
Ouch!
[removed]
FYI, I'm not a server side dev - I'm an Android dev who primarily writes Kotlin. &gt; I think Dart has potential to gain momentum Why do you feel that way? The only use case I see is "I'm a Flutter dev who wants to write server side code." That's a pretty niche use case. The bigger problem is that Dart doesn't have a big use case outside of Flutter. Flutter also needs to gain popularity first, which will be hard. The "try new things" crowd is already on Kotlin/Swift. Dart is a big step backwards from both languages. Flutter being a complete rewrite from the ground up means that most knowledge of iOS/Android gets thrown out the window. tl;dr: Flutter doesn't have enough dominance on mobile yet (or frontend web) to become popular server side
Have you ever tried to interop with JS libs? Don't believe the doc's. Try it yourself...
Don't forget that Dart is on the market since 2012/2013. It is/was a nice language. A language with batteries included but they made to many mistakes. These days we have better languages with better JS/native interop. 
Did you look at the link? That is my working demonstration of that.
&gt;Why do you feel that way? The only use case I see is "I'm a Flutter dev who wants to write server side code." That's a pretty niche use case. I feel that way because of the experiences I've had exploring Dart for the last couple of months. Having worked with JavaScript for 8+ years, the tooling here is simpler and straightforward when it comes to setting up a project, writing code and bundling for prod. There are very powerful utilities and classes that come with the SDK, which I find made me productive in a short amount of time. I've been writing on my learnings at [dev.to/graphicbeacon](https://dev.to/graphicbeacon). Read through some of them and let me know your thoughts. Thanks for the FYI caveat. Flutter dev wanting to write server-side code may be a common case from a mobile dev POV, but it's not the only use case. My knowledge is limited on Flutter, but your [Kotlin/Swift knowledge is not thrown out the window](https://flutter.io/developing-packages/#plugin). If you look at some of the DartConf videos on YouTube, you'll see other use cases leading to solutions from IoT, gaming to music streaming applications. Here are also [some of the companies using Dart](https://www.dartlang.org/community/who-uses-dart). &gt;tl;dr: Flutter doesn't have enough dominance on mobile yet (or frontend web) to become popular server side Flutter is currently at release preview, so hasn't reached v1 yet. That may be why that's the case. Flutter is also not for frontend web development, just native mobile apps. Thanks for your response and questions. I'm definitely not saying that Dart is a silver bullet, but experience tells me that it's worth keeping an eye on it. Would love to get your feedback also on building a mobile app with Flutter if you can :)
I know this link. I use JS in my own Dart packages and yes - there are a few other libs outthere using some JS libs. But pick 5 of the top 50 JS libs and try to work with those libs from Dart. Take 5 of the top 50 TS libs use them from Dart. I'm sure you will fail. Try to write something in ES 6 pack it with webpack and use it from Dart - I failed. To complicate d. The link from above is a tech demo but the whole thing fails in reality.
Webpack is THE standard, ES6 is on the rise, TS is a big competitor. If its not possible to talk with these libs than, at lease for me, all further investigations are meaningless. That's the problem in general with Dart. Everything works, somehow, but if you look a bit deeper you find all those glitches, problems and incompatibilities. I'm using Dart now since several years and it still feels like beta software.
Why pay for a course? There are excellent tutorials and codelabs on the angular dart website. After that I'd start a small project to get you further :)
I just want the best course, so don't mind if it's free or paid! I'd prefer a course that goes through building something / project though since that's the trickiest part.
Please report back if you find anything. I've looked extensively but turned up nothing. Doesn't seem to be a large AngularDart following on StackOverflow either 
Why do you think so?
By default streams are asynchronous, so when you add something to them the listeners are all processed asynchronously. Once the test function finishes, the event loop moves on to the next asynchronous event (in this case your listener) and processes them in the order received. If you want the stream to process synchronously you need to specify that in the StreamController's constructor, like this: final _pickedUsersController = StreamController&lt;List&lt;User&gt;&gt;.broadcast(sync: true); I don't know if you have some other need in your code to use the sink, but you can just use: _pickedUsersController.add(_pickedUsersList); and your listener will pick it up just fine. Did you copy-paste your output or type it by hand? It has a few points where it doesn't match what I had as output, or what should even be possible as output.
For the moment the documentation is quite poor but I try to provide examples for all packages. M4D is the successor of Material Design Lite. M4D works without Mirrors/Reflections and uses as very light weight IOC concept (Inversion Of Control) instead of Dependency injection. Today I finished the basis for template base components. Works nice... I think the best thing would be to wait 2 or 3 weeks until the port is complete. If the port is fished I'll write more tests and I'll provide a example that shows how m4d_router works with all the other m4d_xxx components. So stay tuned!
Thanks. Will be patiently staying tuned
Take a look at VueDart, Wui_builder
I doubt full support in Gradle is going to happen, more likely that full Bazel support will happen . Which I personally prefer to Gradle anyhow.
It's a bit of a mix. The base language was pretty strongly inspired by Java, but a lot of the higher-level features + basic typeerence are more reminiscent of Kotlin and Swift. I don't think there was ever really any major Objective C influence. 
might want to take a look at [https://medium.com/dartlang/darts-built-value-for-immutable-object-models-83e2497922d4](https://medium.com/dartlang/darts-built-value-for-immutable-object-models-83e2497922d4)
Phuuu, I hope you are wrong. My Bazel knowledge is very rudemantary but build systems these days are quite complex and I think we don't need another one for Dart. Using Bazel would also be bad for Darts Market acceptance. Dart is not in the position to define standards...
The truth is, that’s what dart is know for though, kinda reminds me of Scala in that sense, it’s an all or nothing type of language. My wish is that someone will make Kotlin compile to dart. Life will be complete then.
Could you post an example of what's not working? In general it's a bad idea to roll your own encryption simply because it's hard to do correctly, which is what you might be experiencing. To your problem, AES is a block cipher, which means the message you're encrypting must be a multiple of the block size, and it sounds like you need to pad your message. Why are you encrypting and over what transport? It would help others provide better answers if we knew what you're using and why. If it's traffic between servers, consider serving over HTTPS instead of rolling your own. Is this in a browser or the VM?
Really??? Why would you compile Kotlin to Dart? Kotlin is a great language. It compiles to Js, native and bytecode. Kotlin has a much better approach, its interop capability is far better and it is a cooler language than Dart... I would like to have the opposite. A Dart 2 Kotlin transpiler for migration 
One reason only, I’m not an iOS dev, the ONLY reason I started using dart is because of flutter and I can’t foresee any other way to do cross platform apps with Kotlin besides compiling to dart. There is of course NativeScript, and react native, but neither is as productive as flutter, it wouldn’t be the first jvm language that compiled to dart. https://github.com/jvasileff/ceylon-dart/blob/master/README.md
&gt;https://kotlinlang.org/docs/reference/native-overview.html That's not the case, you can't write the UI layer in Kotlin, you can write "some" of your business logic once in Kotlin native, which you then have to call from your swift view layer. [This](https://kotlinlang.org/docs/tutorials/native/mpp-ios-android.html) approach is nowhere near on par with the seamless dev experience you get with flutter. What you dream of with Kotlin and to be developed by Jetbrains is something more akin to [this](https://www.scade.io) . Then you have all you could ever need in one language, true X plat UI development. The only language I know of at this point you can do development for every platform in is C# , which I don't use.
I saw the whole video, it is very interesting, but there's so much boilerplate... Have you used vuedart? [https://refi64.com/vuedart/](https://refi64.com/vuedart/)
It is a bit verbose, although it does generate good and performant JavaScript. The alternative is to use the object creation methods in `package:js/js_utils.dart`, although not as performant. Haven't used VueDart but it looks nice. I'll keep an eye on that one 👁️
Well, flutter can talk platform specific code, see https://flutter.io/docs/development/platform-integration/platform-channels I like the flutter approach better then android or iOS sdk, and the dev UX is better. I just prefer Kotlin to dart though. 
A useful concept is *primitives* vs *objects*. &gt;A primitive is a data type that is composed of no other data types and can not be broken down any further. It is like the atoms in the programming scenario. I say atom because atom is a basic unit of matter and there is nothing that can be derived from it. By convention, primitives are cloned into new primitives when you set a pair of them equal to each other: `String a = 'Hello";` `String b = a;` `a = '$a World!';` `print(b)` Result: `'Hello'` `print(a)` Result: `'Hello World!'` By convention, objects meanwhile are not cloned. They make *references* to other objects. This is sometimes called a "shallow" copy. `List&lt;String&gt; cats = ['Whiskers'];` `List&lt;String&gt; furryBeasts = cats;` `cats.add('Furball');` `print(cats)` Result:`[Whiskers, Furball]` `print(furryBeasts)` Result: `[Whiskers, Furball]` The truth is there aren't any real primitives in Dart. Even an *int* is an object, since it has methods. However, "simple" objects like Strings are treated like primitives, in that they are cloned instead of being referred to. Lists can often be huge and complex, and they are rightfully not treated as primitives. Now that we've established what's happening, we can look into *why* we have these conventions. Here's an [article](https://www.agiledeveloper.com/articles/cloning072002.htm) on it. In a nutshell, sometimes cloning is bad, and we would much prefer references to other objects. For example: `City sanFrancisco = City(population: 10);` `City losAngeles = City(popuation: 12);` `City houston = City(population: 14);` `List&lt;City&gt; californiaCities = [sanFrancisco,losAngeles];` `List&lt;City&gt; americanCities = [sanFrancisco,losAngeles,houston];` `americanCities[0].population++;` Here, we probably want both lists to refer to the same City object, so that modifications to the City are understood by both Lists. Other times, we want to create a fully independent duplicate of an object (perhaps in the above example, we have parallel universes with different Houstons). Still other times, we want a mix of both -- references to some some properties, independent duplicates of other properties. It's impossible for the programming language to know in advance what you want, so Dart and many other languages try to strike a balance between making independent copies and making references. Primitive-ish things get independent copies, complicated things get references. Hope that helps!
&gt;julemand101 thank you, its still not perfectly clear to me, but you gave me some direction as to what to search for, in order to understand it more. &amp;#x200B;
It's indeed a convention. Methods that create something new return that new thing, whereas methods that change the object itself return nothing. (**sort()** changes a given List, so it returns nothing. **toString()** creates a new object, so it returns that new object). The value of this can be seen here: Chaining to create a new object: &gt;Book newBook= new Tree().cutIntoLogs().makePaper().writeOnPages(); Modifying an object: &gt;Book book= new Book(); &gt; &gt;book.correctSpellingErrors(); &gt; &gt;book.addPictures(); You can tell at a glance that a chained method is creating something "new", whereas the line by line methods are modifying the same book. **sort()** returns void in order to enforce this pattern. Make sense?
ok, so that helps a lot....i guess I will know when to use the double dot notation when i see the signature returns void. thank you very much! &amp;#x200B;
Thank you, that is helpful!
for decades people all around the globe fighting and struggling against unsupportable programming code through separating data and methods, markup, style and code. What we got finally in most progressive "edge" language? inline templates as examples.... 
So, perhaps I'm misunderstanding the point of this, but what are the selling points of this over using the AngularComponents package?
I think it's easier to understand than Angular. It's Dart from ground up. It's not tied to Google. I know the last point can be an advantage or a disadvantage. In my opinion one of the reasons for Darts low popularity is that some teams at Google lost their connection to the real world/to the Devs. Anyway - this is more a philosophical approach. The main reason is that I started with MDL4Dart way before they brought out AngularDart (2nd version) - M4D is MDL4D for Dart 2. My internal Apps are using my own package so I have to port it anyway.
Can Dart be used as natively compiled language for Desktop operating systems like Linux, Windows and Mac OS X? Since it is said that it supports AOT well, or is AOT only for mobile?
There is https://github.com/google/flutter-desktop-embedding, but I'm unsure what mode it's using. I _want_ to say dart AOT on desktop is technically possible today, but not really advertised. Not sure where I'd have come across that information though.
Unfortunately they are not discussing anything similar to data class
Not *yet*. We're still interested in it, but it's a big, murky problem. When you talk to different users, they have very different ideas for what "data class" means, so coming up with a single concrete feature that satisfies many of them is quite difficult.
The fragility of mixins in JS is because they aren't statically checked. You're imperatively mutating the prototype chain and and slapping new methods onto prototypes, so it gets really hard to tell what you can call and what you can't. Dart is statically typed, so its mixin system is fully statically checked. You can think of it as roughly similar to traits in Scala or Rust. The new mixin syntax in 2.1, in particular, was added to make it possible to do *better* static checking for some edge cases (`super` calls inside mixins).
Static typing was NEVER the issue. Nobody really cared about performance either. In addition, they were only sometimes used for prototypes. A great example here would be React mixins. You would mixin different handlers, statics, etc that you wanted to add. The problem wasn't with types. Instead, the issue was fragility. Once you started using mixins all over the place, they became hard or impossible to change without breaking behavior expectations across your application. Mixins (as you know) are a form of multiple inheritance. Fragile parent/grandparent classes or god classes are a big design issue. Mixins cause the same issue, but also distribute that issue across multiple parents. Socially, adding a mixin here or there wasn't considered a big deal, so they silently propagate until you wake up and have big issues everywhere and the cost to fix them is so large that they stick around forever. Even outside the JS world, OOP languages (including statically typed ones) have decided that composition is superior to inheritance. Why does the dart team believe mixins will be different this time around?
&gt; Fragile parent/grandparent classes or god classes are a big design issue. Mixins cause the same issue, but also distribute that issue across multiple parents. Yeah, the fragile base class problem has been a thing forever. Code reuse is hard. My intuition is that mixins help somewhat because they can lead to shallower hierarchies and smaller classes. With single inheritance, if there's some functionality you want to share between two classes that aren't already near each other in the hierarchy, you have to hoist that code all the way up to some common base class that may have little to do with the code. With mixins, you can just put that code in a mixin, mix it into those two specific classes, and leave the rest alone. &gt; Even outside the JS world, OOP languages (including statically typed ones) have decided that composition is superior to inheritance. Sure, composition is a better choice than inheritance most of the time. But inheritance and mixins have their uses too. Composition has the "lost self" problem where when you delegate to a subobject, you lose the context of the original object. When that context is important, you end up having to pass that around, which is annoying and can make for harder to read code. Also, mixins can implement interfaces, which is a useful capability. In general, mixins are a pretty rarely-used feature in Dart. Implementing interfaces and extending superclasses are both *much* more common. I'm not sure if it's because the feature just isn't that useful, or if a couple of decades of Java and C# have taught people to only think in terms of a single-inheritance mindset. Either way, I'm not worried about mixins being under-used. I haven't seen any problems with that so far, and I spend a lot of time with a very large amount of separate Dart projects.
All of the work for AOT is on mobile for now. No idea if they ever plan to work on the desktop systems. 
For me, it's two things: the development environment, and its simplicity. Pub us a pretty awesome tool, and I like it much more than npm or even yarn. I like that packages follow semantic versioning. I like how flexible pubspecs are, allowing you to specify build instructions and dependencies. Dart also feels like a more constrained language, which I like. Features are frequently considered, and put aside because they don't align with Dart's goals or identity. I would like list expressions, and algebraic types, but I would rather have a language with a consistent identity. Dart send to focus on stream manipulations and its strong typing rather than these features. (Oh, its strong typing is also a reason I would prefer Dart.) Incidentally, these are also the reasons I like Elm. But for a large project, I would probably still choose Dart, because it's easier to learn and can be used on the frontend and backed. If I have a project which needs to have as few errors as possible, I'll use Elm. 
Typescript has better typing and community. Unions types and optional types really makes easy to work around bugs. But dart might catch that soon.
Flutter is my main use case. So Dart for that obviously. I don't use Dart on the web so I can't compare there. 
I can imagine. It's just right now using Dart to implement pattern like Redux in flutter is painfully verbose and built_value is really ugly. 
I think Dart's syntax is superior. Example: https://dart.academy/typescript-vs-dart-class-constructors-part-1/
At the end of the day, TypeScript is just a band-aid for the awfulness that is JavaScript. A much needed, useful, band-aid, but the ooze is still there underneath. Dart has only one null-type (no such thing as undefined). I like Dart's Integer emulation/type-safety vs JavaScript implementing all numbers as floating-points. Dart actually has a standard library. I don't need to self-implement common (expected) apis, or download an npm package like "is-even". For that reason, I think dart's async/Future support is better than TypeScript's async/Promise implementation. Iterables are lazy/deferred, which is better for memory usage, and what I expect coming from C#'s LINQ. Personal preference: defining function parameters feels more like C#, which is most of my background. That said, until recently with Flutter, TypeScript has a lot more momentum and community resources. Being a "super-script" of JavaScript means its easy from developers that have an existing code-base in JS to easily transition to TS slowly. If starting a new project, I'd use dart. But, if I was inheriting a project that was already written in JS, I'd use TS. 
Data class? Do you mean a class without behavior? &amp;#x200B; Sounds like an OOP anti pattern to me ;)
That article is incredibly old, none of that syntax is still used
You might like this: [https://sourcemaking.com/antipatterns/the-blob](https://sourcemaking.com/antipatterns/the-blob) Let me know what you think.
What? I don't know what you mean by that. There are a number of different ways to approach the problem that overloaded constructors solve in TS, but none of them are as good as Dart's named constructors. This is a really thorough examination of the problem in TS: https://www.broculos.net/2017/10/typescript-constructor-overloads.html Are you saying TS has a better way? If so, I couldn't find it with some admittedly brief searching...
Try to "pub global activate webdev" 
I may have figured it out. I remembered that I updated WebStorm, and had to do so as root. Some packages in `~/.pub-cache` were owned by root. I removed the entire directory, along with `~/.stagehand`, and the warning/error went away.
sort is a destructive method that operates on the list itself, returning null. call sort on the list, then pass it to the function i.e.: a.sort(); b.sort(); whatever(a, b); 
that kind of worked, but it changed the original, which I wanted to avoid since I will make several calls with the same lists.. As you mentioned its destructive. I was hoping there was a way I could make the call without having to make a copy before each call. thank you.
Ok, I found something that worked. Seems like having to fight the language but it worked. `whatever(a.sublist(0)..sort(), b.sublist(0)..sort());` thank you.
dart 1.x requires the `new` keyword, so new List.from(a)..sort() 
&gt;new List.from(a)..sort() yup, that worked and is more what I was looking for. Again, thanks!
You can also do `a.toList()..sort()`. `toList` returns a copy in a new list.
I agree with you it's sad that Dart hasn't picked up on the web. I'm still hopeful it will still gain traction eventually. It went up from 23rd to 22nd on tiobe index this month.
On another note I feel like Google is messing with the idea of using Flutter for front-end web since angular dart is just not that popular. It appeared in the Flutter survey.
Quick note: AngularDart was not bad, and there is a good story for sharing code - I was able to reused API and Bloc code from the Flutter app with minimal changes (extract a Flutter specific library for a more generic wrapper). But we expect to need a few third party JS libraries (cough d3) and didn't want to deal with the JS2Dart interface.
Dart and Flutter are also being used pretty heavily in Google's Fuschia OS project. 
Stop whining, give it some time. Dart has untapped potential and there are too many stubborn JS devs in the world, but in time there will be a method to the madness. Dart is a great language, with good, usable libraries and frameworks for the Web and Flutter is very promising for mobile and UI in general. Being able to share data between web and mobile, and in the future even more platforms will bring attention to where it is deserved. &amp;#x200B; I don't care if it isn't "catching up" / "gaining traction" just yet (but actually according to trend analytics it is). &amp;#x200B; I'm all in with Dart, Angular Dart and Flutter these days, and having a blast of a time in the process! :) &amp;#x200B;
I’m getting into it for Flutter. Is it a waste to look into Angular Dart? I like the idea of sharing more code.
I'm a long time Dart user and I consider my decision for Dart as my biggest mistake in my whole career. Don't get me wrong I love(d) Dart as a langue but in my opinion Darts history was one wrong decision after the other. Dart entered the market with "Batteries included". These days all competitors have far more and better batteries than Dart. My biggest concern these days is Darts leak of interop to JS or to other languages. I have a huge codebase in Dart but I'm totally locked in. Using other tools like npm or Gradle is practically not possible. Angulars move to TypeScript instead of Dart should have been a huge warning signal but I couldn't see it - big mistake!
Just to name a two things I'm missing in Dart since years: Clean access modifiers like "protected" or namespaces. The Dart-Team decided this is not necessary. OK, their opinion - but TS takes another route. The same with Kotlin - they know what developers need. In the past the Dart-Team couldn't figure out what their audience was - maybe they found it now with Flutter, maybe??? If Kotlin or TS comes out with something similar to Flutter the game is really over for Dart.
thank you for this. I don't understand why it's preferable to use a method designed to convert to List instead of a method designed to copy a list, when I want to do is copy. But I guess I just have to go with it. (I do understand what they do differently, and why it's preferable I just don't understand why there isn't a modifier for the from() method so that it keeps the type).
It's not that easy to come up something like Flutter. The thing is, they don't need to replicate Flutter. They just need to come close and that would be enough to have people simply not consider Flutter. 
Very true. Especially Kotlins native approach is very promising and has a huge potential
Regarding Angular, unfortunately there are some crucial things lacking (SSR, data tables, probably responsive design with Angular components) that will take a lot of time to be implemented or doesn't even show up in the roadmap... what's a shame cause setup and tool chain are awesome, differently from TypeScript and Angular CLI with its schematics, huge JSON config file and hard-to-mess-with unit and integrated tests. You know, JS environment is a cancerigenous mess, every attempt to fix it is a patch and every time you have to learn how to deal with those patches, you have your life drained. Dart OTOH has linter, formatter and best practices out of the box. Dart is a good language with nice features. I think it won't die and also think 2019 it will get a lot more attention. Today I choose Angular + TypeScript because of its features (mainly SSR) but I don't know much I can take of it since I can't even find a standard way to write and publish a library with tests that doesn't look gross. TLDR: AngularDart lacks important features like SSR but tool chain and language are awesome compared to JavaScript / TypeScript.
I think that if the server-side were shown a little more love early on, it could have been a great selling point for people evaluating Dart. A large part of Node’s appeal was the possibility of using the same code on the client and server, or at least the same language. At this point, though, I’m not sure if there’s a chance at really unseating other languages on the server side, so maybe that might be part of why it’s not Dart’s primary focus (at least at this point). AFAIK not that many companies are using it on the server, even within Google, and the tragedy of open source is that people don’t like to even try things unless a Fortune 500 company has used it in production... I’d place my bets on Flutter for the future, at least in terms of finding new users. Having AngularDart available and officially supported is also attractive to enterprise users. 
&gt; why it's preferable to use a method designed to convert to List instead of a method designed to copy a list, when I want to do is copy. `toList()` has a couple of things going for it: * It is available on every type that implements Iterable. * Since it's a method call, it auto-completes in IDEs. That's one of the main ways users learn APIs. * Most importantly, it preserves the type of the list even when the type isn't known statically: copyList(List&lt;Object&gt; list) { print(list.toList().runtimeType); print(List.from(list).runtimeType); print(List.of(list).runtimeType); } main() { List&lt;int&gt; ints = [1, 2, 3]; copyList(ints); } This prints: List&lt;int&gt; List&lt;Object&gt; List&lt;Object&gt; &gt; I just don't understand why there isn't a modifier for the from() method so that it keeps the type `List.of()` will infer the resulting list's type from the type of the list you pass it. But it does that based on the *static* type of the list. Only `toList()` can preserve the *runtime* type of the list correctly.
It's a much better language than JS, but personally I found that interop with certain JS libraries was not working out for me. That and the massive build artifacts are the main reasons I dropped it.
I think I actually understood that. Maybe I am learning :) thank you!
We are building a production app that shares about 70% of the code. Once you have a ‘rule’ to share code it’s not just faster, but way easier to maintain.
Well, it will get a second chance no matter what. Flutter uses Dart and will make sure Dart itself has a strong future, and as long as Google's Greentea CRM (their biggest and most important internal app) uses AngularDart, that's not going anywhewre, not matter what the community thinks. I always liked Dart, and hope it'll get bigger on the Web, even though with TypeScript nowadays there is less need than there was years ago, especially before ES2015. Dart &lt;3
Any advice?
Yeah, it hasn't been handled by Google in the ideal way, to be sure. But there's still hope! Traffic to sites like Dart Academy has permanently tripled since Flutter was introduced. There really are a lot of Flutter developers who start looking at Dart/AngularDart for the web when they realize they need a presence there, too. And like some others have guessed, there is certainly a chance that Flutter will eventually be available for WebAssembly or something, which would make Dart one of the best options for a single code base across all the important platforms.
I agree with it being my Dart like now, but there are things such as NgXS, Rxjs, etc, that I think just work better in TypeScript than Dart. The community needs to get there for the tools is my only negative point. (And yes, there is RxDart, but it isn't anywhere near as well documented, and even though it works well with Dart streams, you also can't do some basic functionality that just works in rxjs).
are there any good dart for web tutorial or template that you recommend for learning? I am trying to learn dart for web at the moment, and jsut started with flutter.
I did one as part of exploring Dart a couple of years ago: [https://github.com/graphicbeacon/Simple-User-Authentication-With-Dart-AngularJS](https://github.com/graphicbeacon/Simple-User-Authentication-With-Dart-AngularJS) I'm planning on redoing this, but hoping it'll help inform your approach. The Aqueduct team also have an example with their framework: [https://github.com/stablekernel/aqueduct/blob/master/aqueduct/example/main.dart](https://github.com/stablekernel/aqueduct/blob/master/aqueduct/example/main.dart)
Yeah that's the conclusion I came to. Thanks for the advice and for the links too
You can also check out Angel's authentication support: [https://github.com/angel-dart/auth](https://github.com/angel-dart/auth) It works with SPA's, but also for simple server-side rendered pages as well.
&gt;I'm hoping to do something about it this! No books, bad documentation (way too terse for beginners) gives dart a very steep learning curve.
I would never have gotten that. It makes sense though. I will try it. THANKS
You could use my [piecemeal](https://pub.dartlang.org/packages/piecemeal) package, which has an [Array2D class](https://pub.dartlang.org/documentation/piecemeal/latest/piecemeal/Array2D-class.html) in it. It uses a single array under the hood, which is more efficient than an array of arrays.
can treat any 1d array as 2d with y\*width+x [https://processing.org/tutorials/pixels/imgs/pixelarray2d.jpg](https://processing.org/tutorials/pixels/imgs/pixelarray2d.jpg)
I initilly solved it by adding an array into the other one. Now I will try this option and also the one using generate that kvmoo suggested. thank you.
Very nice.
It's difficult to provide a rule that fits every case, but generally "exceptions are for exceptional situations", which is why I would recommend bound checking instead. 
Have a look, contribute if you can and want. I think this looks promising. https://aqueduct.io/
I assumed that would be the answer...well, then...i need to figure out a bounds checking approach I can generalize. thanks.
One big problem with try/catch is that it can capture unexpected errors. Some utility function you are calling might also throw an out of bounds error, and you'll never know since your error trap runs instead of throwing. Your code today might not have any calls to utility functions, but it might after a year of maintenance. Try/catch is pretty dangerous and should be used carefully. If you are interested, I've written more about the [benefits and dangers of exception handling](https://neil.fraser.name/writing/exception/).
&gt;benefits and dangers of exception handling will read now. thank you.
Additionally, please avoid returning null when possible.
I was going to ask you why I should avoid it, but I searched and found a bunch of articles recommending the same. :)
It’s a full-stack framework for Dart that’s been around since early 2016. The majority of components are server-side, but there’s a dedicated client library. Some features are support for multiple databases, authentication, WebSockets, and hot reloading. When Dart 2 stable landed, it was time to start upgrading most of the packages, and that turned into an effort to reworking it into a second major version. https://angel-dart.github.io
The title says “the ugly” but the article has the “not so good” category only. I suppose that means there’s nothing ugly about Flutter. 
Part of the appeal of using Dart is that you are using Dart's build system and not Webpack. There are some important differences between, for example, a Dart library and a JS module. &amp;#x200B; That said, there may currently be some pain points with Dart's new build system (package:build). The Dart for web story has been evolving since 2013 to better support Bazel, Google's open source (formerly internal) build system. &amp;#x200B; &amp;#x200B;
I have no idea about using Dart for web, but I’m loving Dart for Flutter and would want to stay away from anything webpack related
Probably not. My best bet is WebAssembly will be the next big thing and Dart among other languages will compile to WebAssembly. Rust can already do it. I believe there is work on this out there somewhere for Dart. 
I've been a Dart user since before the rename from "Dash". I love the language. However, the overlap between Dart and TypeScript is so large that there really isn't room for both languages. TypeScript's ascendancy likely means that Dart will remain in the shadows. The converse would also have been true, had Dart become more popular, TypeScript would have languished. As for replacing JavaScript, that language is immortal. Java was expected to replace JavaScript, but died on the client-side. Microsoft tried to replace JavaScript with VBScript, but that's dead. Flash was the next JS killer, but got killed. Dart was another attempt. Now there's WebAssembly, but that doesn't seem to have a lot of velocity. Never bet against JavaScript.
I have no real issues tolerating the problems with modern JS because I agree that it's a very powerful tool once you get up the learning curve, but Dart is just *so* satisfying to work with. The language and the whole ecosystem is so tidy. You don't get the feeling that you're haphazardly cobbling together a bunch of ill-fitting parts. 
Could be that Flutter might add WebAssembly as a compile target. Seems like that might be Dart's path there.
Dart on the web is awesome. I've had no issues using whatever pieces of JS I need, so I end up with the best of all worlds.
I believe that it'll be quite some time before WASM is a suitable compile target for anything other than C/C++/Rust. Until proper host bindings (synchronous would be nice) are rolled out, JS is still king of the DOM.
I don't miss it. I tried to avoid it since years and used Dart instead. If I have to look a ES5 syntax I'm asking myself how the heck could this ugly language become so important. Dart was really the only alternativ several years ago. But things are changing. Now we have TS, we have ES6 and we have Kotlin Native... The problem is that Dart's ecosystem doesn't integrate with anything on the market. They build their own universe. (It remembers me on MS several years ago...)
Thanks for sharing! It seems like there are a couple of apps listed under showcase: [https://flutter.io/showcase](https://flutter.io/showcase) But non of them is actually using the iOS-style Cupertino widgets. Was anyone found an app looking (almost) like a native iOS app but developed with Flutter?
I write TS for my dayjob, and its really a pleasent workflow. With modern TS the only thing you actually need is the tsc compiler. I have no need for webpack. The only setup i need is a tsconfig file for telling tsc what to output, this can also be skipped if you pass the options straight to tsc as flags. Basically src folder gets built to dist, then i can run it like a normal node project with node src/index.js, as a bonus i rarely have bugs and vscode makes for a great devexp. On the client i have a similar setup, but add an additional step for combining all files, here you have lots of options, including webpack, browserify, parcel etc. But i get your point, its easy to build overly complicated workflows, and specially with the js/webpack combo.
\&gt; I think Dart should open itself for bable like TS did. &amp;#x200B; What does "opening itself for bable" mean? 
What does compiling to a format that babel "understand" give you? Or to turn question another way: Dart already compiles to ES5 (with Dart2JS) and to ES6+ (with DDC) - Babel should be able to load that already because ES5 is a subset of ES7. What is missing for you? &amp;#x200B; Also why do you want to do the Dart -&gt; ES7 -&gt; ES5 instead of going directly to ES5? Direct translation to ES5 is likely to produce much better code anyway. &amp;#x200B;
I think the tools are necessary for such a complex environment. Nodes node_module handling is compared to Darts package management just a mess. I hope this will change in the near future.
It won't take long until the next huge stacktrace. I'll send you a screenshot an you'll know what I mean
So what you really want are just readable stacktraces during development? &amp;#x200B; You don't need to "open Dart to Babel" for that.
Was just one of my concerns. The main reason I'm moving away from Dart to TS is that JS interop is so bad in Dart. I mean both ways Dart &lt;-&gt; TS/JS. (The same with C++ interop btw.) Sure Dart has some nice features but TS is not far behind and it works much nicer with the JS/npm (and friends) infrastructure. I can choose the Testframework, I have the whole NPM infrastructure and so forth. node\_modules is a nightmare compare to Dart-packages but I think thats the price I have to pay...
Flutter is such a cool idea, but it's a shame it's hobbled by a highly mediocre language that few people are excited about, or even use.
Really? How long do you use Dart? How often did you interop with Js? Which JS libs did you use? Have you ever tried to interact with React/AngularTS/VueJS? Have you installed a node package in/for Dart? I'm not talking about real live... 
What is so mediocre about dart?
People really just like to hate on Dart. Things like NNBD and union types would be great to have. But even without them, Dart is more than usable, and still has a nice developer experience. The whole "Flutter is cool but I hate Dart and am too afraid to even try it" narrative is getting tired at this point.
Default billable types, runtime type errors that seem like they should have been caught at compile time. Lack of type aliases. Most of my issues are around the type system. Love Flutter, Dart is pretty okay.
Been using Dart since well before 1.0. For work, I've had to interop with several large charting packages, data tables...things like that. I've done interop with countless small JS snippets and packages, for things like toast-style alerts, online signatures, etc. Haven't found any need to interact with React/AngularTS/VueJS.
&gt; Love Flutter, Dart is pretty okay. This. Developers love Swift and Kotlin. Many of those devs aren't going to want to take a big step backwards in being able to express themselves. I don't think Flutter will take off for this reason. And it's a shame, because it has so much potential.
Dart is good enough. It's quite feature complete and saner than JS (React Native) or Delphi (Firemonkey). I have used both previously, both presented me with challenges i still have nightmares about now. Dart doesn't have many surprises, and only a few quirks. That allows me to do work more efficiently than the other two "cross platform" frameworks I've used.
r/flutter r/FlutterDev
I don't think Dart will replace JavaScript. Google have already tried that and gave up, instead concentrating on better Dart to JavaScript conversion for the web side of things. I don't necessarily see this as a bad thing, particularly with the interest around Flutter. As a language, I really like Dart. I hope it continues an becomes successful.
Yeah, this should be posted in those groups, too, but I think it's appropriate to have the occasional Flutter post in this group, as well.
There's a big discussion about this article happening on /r/programming, too: https://www.reddit.com/r/programming/comments/a2b8u4/flutter_on_desktop_a_real_competitor_to_electron/ Of course, it the typical hot mess you can expect from that subreddit. :)
It's actually a lot better this time around. imo
I remember when Sky first became Flutter, I posted the link and the comments were basically "hurr durr another Google project they'll abandon soon". I guess Fuschia gave it a bit more credibility... ¯\\\_(ツ)\_/¯
Yeah, I guess you're right.
Missing Copy on Update or any other way to clone object other than serialize/deserialize to JSON.
I don't know, Mike... Seems like the wrong move to me, especially right now, when Flutter is driving so much Dart adoption. I've spent the last two years working heavily in both a TS (Ionic) and Dart project, and the Dart project was so much better to work with. Working in TS, by comparison, made me insane. Everyone on my team hated the days we had to mess with the TS code base. TS is way, way better than JS, for sure, but not nearly as clean and easy as Dart. TS may have nearly as many features as Dart (and even a few Dart should get), but the syntax is terrible and wordy. I'm not sure why you're having so much trouble interacting with JS, either, because for me it all goes pretty smoothly (though I think that aspect of Dart needs a lot more and better documentation).
What quirks are you referring to? 
Hasn't flutter *been* taking off?
Yea, I remember that Sky demo - can't believe that was 3 years ago. How far Flutter has come :)
Thanks, learning a lot from your flutter and dart tutorials. Will you do tutorial on key and stateful widget about state ? Currently feeling confuse what key suppose to do and how to change state from another class? 
r/FluttetSDK
Hummingbird looks exciting to me. 
I think /r/FlutterDev is the more active community.
I know, but it shouldn't be. See my post [here](https://www.reddit.com/r/FlutterSDK/comments/a3582v/new_posts_are_welcome_here_community_building_in/)
I'm on flutterdev a lot. It doesn't seem heavily moderated to me. They just remove stuff that should go on StackOverflow, but that's a good thing imo. That's what r/AndroidDev does as well.
Here's a sneak peek of /r/androiddev using the [top posts](https://np.reddit.com/r/androiddev/top/?sort=top&amp;t=year) of the year! \#1: [The future of Android Development](https://np.reddit.com/r/androiddev/comments/9n88wv/the_future_of_android_development/) \#2: [When you change the code but forget to rebuild](https://v.redd.it/rq3argkri3411) | [25 comments](https://np.reddit.com/r/androiddev/comments/8r8ikt/when_you_change_the_code_but_forget_to_rebuild/) \#3: [More issues with Google Play (suspended for Hate Speech...)](https://np.reddit.com/r/androiddev/comments/96kpsf/more_issues_with_google_play_suspended_for_hate/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
I wonder how will Adsense and payment plugin work in web browser.
cant wait to try this out &amp;#x200B;
Is there somewhere more tech info to get? I'm not even sure if this is a Google internal project or if is this project: https://github.com/google/flutter-desktop-embedding 
That's a different project. It's for targeting native desktop application. (Like qt, gtk) OP is about web. (Like HTML, CSS)
So this is very impressive, but the one thing that I kept thinking about in relationship to desktop apps is will Dart somehow implement value types or just stick with objects?
Out of curiosity, how does this really affect desktop apps? GCs can be pretty efficient for most desktop app use cases.
Yes it's pretty important when dealing with things like layouts. If you don't have custom value types you'll end up like how the Android SDK is where a view class has essentially a frame object mapped into it and methods which have numerous arguments to compensate for the lack of custom value types.
OHHH you mean like ADTs? I thought it was C++ value types and was super confused...
I'd love to know how accessibility is handled. It's been awhile since I did anything with Flutter and a11y was still being figured out. I would assume that whatever a11y support exists for mobile apps ends up rendering with the necessary aria attributes?
It's a serious competitor to React, because Facebook has React + React Native and Google has Flutter and will soon have Hummingbird. I dislike JS so I wouldn't use any of the reacts, but if you like it and have a project in mind, then I recommend you use them while you wait for Hummingbird, because it'll be a while before it is released.
Join us at r/FlutterSDK
This is a very nice tutorial. However, Does this work for streambuilders too? Like pushing those images to a stream builder and the list should show them??
Yes, you can use it with a streambuilder :)
Wow. I was thinking compiling the engine to wasm would come before this. Also thought it would be a canvas-only implementation. Pretty surprised, but pleased, with the approach taken. Very excited for this.
I am sure figuring that out is a priority ;)
&gt; no recycling view system Have you ever taken a look at the flutter docs? ListView on flutter is not the same with ListView on Android, its closer to Android's RecyclerView but a lot easier to use.
I did and it did not mention view recycling. Also Android's recycler view is very easy to use. It's an extremely well done view recycler system.
Your code will print the sum before any of the events have been delivered to the stream. Remember, streams as *asynchronous* in Dart. They don't block execution. If you want to wait until the stream is done before printing the sum, you need to do that waiting explicitly. There are few different ways to do it. An easy one is: void main() async { Stream&lt;int&gt; stream = new Stream&lt;int&gt;.fromIterable([1,2,3,4]); var sum = 0; stream.listen((item){ sum += item; }, onDone: () { print(sum); }); }
By the time your program gets to the print statement, the dart VM hasn't had the opportunity to process the `listen` microtask. Then your program ends because it's hit the end of main. `await for` will block the remaining execution of `main` until it's able to consume the stream fully.
&gt; But can't you do that same using async/await so that the code listing is more procedural and readable i.e. Yes. &gt; So when do I use .then() and when do I use async/await? ["Prefer using async/await over using raw futures."](https://www.dartlang.org/guides/language/effective-dart/usage#prefer-asyncawait-over-using-raw-futures) &gt; It seems like I should use .then() when the function is not marked as async. You *can't* use await unless the function is marked async. But you can usually mark the function async to fix that. There aren't too many situations where you'll want to use `then()` directly. If you're defining a function that does async work but *shouldn't* return a Future (and thus shouldn't be marked async), that's one. Sometimes, if you're doing some tricky concurrency where you have a few things going at the same time and you want to coordinate between them, it might be easier to use `then()`. Await tends to work best when you just want to do a few async things in series. But, in general, use async/await when you can. If you see Dart code and docs that don't use it, the most common reason is that they are from before async/await was added to the language.
thanks, that definitely helps to clear things up a bit
You can't mark constructors as `async`, so you can't use `await` inside them. Also, sometimes you want to call several asynchronous functions from within a single function, but you don't want the second to wait for the first to complete, and so on. To execute them all closer to simultaneously, you'd need to avoid `await`.
thanks, definitely good points to be aware of
You could do a nested for loop then compare the entries of each at each index and break when you find a match. 
that's what I ended up doing. Since the sublist is length 2, it was a single loop a an if with 2 comparisons. but....is that the dart way? nested loops until you can do equality comparisons at the single element level? &amp;#x200B; thank you.
Come to think of it you could use the list.where function. You provide a test and it'll return elements. So like this (testlist is the list you're testing against): List.where((sublist)=&gt; Sublist [0]==testlist[0]&amp;&amp;Sublist[1]==testlist[1]); https://api.dartlang.org/stable/2.1.0/dart-core/Iterable/where.html
As an add-on to the above then test the restulting iterable length to see if anything is in the list. 
Yet another option is to extend the list class adding in a function to compare two lists at each index and use that in place of the ugly comparison in my original code but just swap it out for the regular list structure in your code.
this is basically what I compared with my loop, but I like this better. I will use this. thanks!
I havent done classes or extended stuff yet...will try to remember this when I get there. thank you.