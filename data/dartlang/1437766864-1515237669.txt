Might want to reduce the spawn count from 150 to 15 then: https://dartpad.dartlang.org/ae0f50e28e5c5826be47
 I am using Dart to make a Cordova App and Webapp. I like the fact I can hit all of these platforms with one code base that also includes a highly dynamic, easy to make, and modern UI system(HTML/CSS) I most recently wrote a Dart wrapper around [MapBox](https://www.mapbox.com/). Dart's JS integration is quite impressive. I had some serious doubts until I tried it, but there are no hiccups and it preforms flawlessly. I also learned today not to include main.dart.js in your index.html file. I kept having all these weird bugs from having things double initialize. I look forward to better compiled JS, the Ability to export JS Libraries, and AngularDart 2!
You mean, "What have you been up to!?"
lol yah...
Runs great, so long as you are using WKWebview and iOS 8. The UIWebView is terrible. Android runs flawlessly, honestly you can't notice the difference between a Native or Web app in Android. I don't use Canvas, so I can't say anything on that. If you are looking for a good xplat game solution, I would suggest [LibGDX](http://libgdx.badlogicgames.com). I think it would really be your best solution. I have used it several times and I highly recommend it.
I'm using Dart to build a telephony system. It sits on top of FreeSWITCH and allows receptionists to manage calls from their browser.
Cool. Are you use angular to create the app?
Cool, how do you structure your web app with out Angular(do you have a system or do you just do w/e)? Have you tried removing the 300ms tap from safari? I ask because I don't think AngularDart removes this.
No. I've never tried Dart plugin with IntelliJ IDEA Community Edition. But the core experience with Dart plugin should be similar on both IntelliJ IDEA and WebStorm if you are only concerned about Dart programming, considering WebStorm and it share the same IDE core. I use IDEA Community Edition for my Java development and it lacks Web development related features, which are available in WebStorm and IntelliJ IDEA Ultimate Edition. I've chosen WebStorm since it's cheaper and I don't write JavaEE or Spring codes for the server side.
Ah OK thanks.
https://en.wikipedia.org/wiki/AngularJS In software development, AngularJS (commonly referred to as "Angular") I think that reffering AngularDart as "Angular" is not correct. AngularDart is correct in all cases.
&gt; So what's your point? Angular (which means an AngularJS) are very, very popular software. AngularDart are not so popular (maybe even not a popular software). So, don't need to mix by the same name (which is not) two different software (popular and not popular). 
I've been using angular 2 dart (which is in alpha, and has virtually no documentation) to create specialized web components for a larger web app.
&gt; You are in the /r/dartlang sub, under a thread that is asking people what they are doing with dart. You are wrong. I am in Russia despite the fact where are you.
Yea! You are a brave wo/man. Do you think it ever will? AngularDart1 has terrible documentation to begin with.
There is also MySQL support I have used https://pub.dartlang.org/packages/sqljocky
&gt; Google Dart developers even does not provide such support in a some basic forms. You think all those other languages are shipped with all kinds of database drivers? &gt; Google does not reward third-party developers Who does that and how? Will Mozilla throw money at me if I write a RethinkDB driver for Rust? How will Microsoft reward me if I write some TypeScript or C# stuff?
&gt; You think all those other languages are shipped with all kinds of database drivers? Of course, no. But as all we know that Dart was announced and developed by Google as the Web Platform. Unfortunately, Dart Web Platform was degraded to only programming language, and did not become a full-fledged platform. If you talk about it in the form of what he has become (just a programming language but not a platform) then you're right. If you mean that it was and that is what is not there (the software platform), then you are wrong. Each software platform, not a language, which proposes features for developing a complex client-server applications should provide at least a standard database abstraction mechanism. The Dart, as it was a mush then this mess and still remains (there is no such things as the compatibility or portability of data between databases, there is only one headache, and disgust). 
&gt; Of course, no. But you still presented it as such. You were outraged that Google didn't do these things which no one else does either. &gt; Each software platform, not a language, which proposes features for developing a complex client-server applications should provide at least a standard database abstraction mechanism. Like? Do you have any examples of such a thing? How can there be a "standard database abstraction mechanism" anyways? Here is the list from db-engines.com: * Relational DBMS * Key-value stores * Document stores * RDF stores * Graph DBMS * Search engines * Object oriented DBMS * Time Series DBMS * Multivalue DBMS * Native XML DBMS * Wide column stores * Content stores * Event Stores * Navigational DBMS You think there is a way to abstract these? Even the databases from a particular category like key-value aren't interchangeable. What does a graph database like Neo4j have in common with a relational one like MySQL?
&gt; But you still presented it as such. You were outraged that Google didn't do these things which no one else does either. I means that for the Dart as the programming language it it's not obligatory to have such a feature but for Dart as the software platform it SHOULD HAVE such a feature (database abstraction for RDBMS). &gt;&gt; Like? Do you have any examples of such a thing? Yes. Java software platform has JDBC. https://en.wikipedia.org/wiki/Java_Database_Connectivity .NET Framework has ADO.NET. https://en.wikipedia.org/wiki/ADO.NET I compare only similar software with SDK. - JAVA SE is a software platform. - NET Framework is a software framework. - Dart Web Platform was an open web platform with support of the client and server side programming (now becomes a programming language with VM, SDK and tool, the same thing as the many other programming languages, limited in features in comparison with software platforms). &gt;&gt; What does a graph database like Neo4j have in common with a relational one like MySQL? Please re-read original question which was asked by the author. "Now, I wanted to use Dart for a really tiny web-project, that requires a server-side database, preferably SQL-based." Do you think question was about support of Neo4j in Dart? Or may be do you think that I mention about support of Neo4j in Dart? Or may be do you think that I mention about support Neo4j in .NET Framework? Of course, no. I only mention about Google Dart degradation as the software. 
&gt; Java software platform has JDBC. I'm aware of that. JDBC only supports some rational databases, however. Same goes for ADO.NET. &gt; Please re-read original question which was asked by the author. The author asked for database options. They also mentioned that they prefer SQL-based ones. They didn't imply that all databases are the same and that it's possible to have some kind of one-size-fits-all abstraction. You did that. That's why I asked you that (rhetorical) question.
&gt; So, any language which comes without a JDBC equivalent is just a toy? First remember that we talk not about the "language features" but we talk about the Dart platform as the complex software. If you change abbreviation JDBC on its meaning then your question will looks like: So, any software platform which comes without a "possibilty to provide methods for querying and updating data in a database" equivalent is just a toy? I can answer: Yes, this software platform is a toy. 
&gt; any software platform which comes without a "possibilty to provide methods for querying and updating data in a database" But you can use various databases with Dart. You just include some DB driver like any other library. Anyhow, what isn't a toy then? Java and C#? These two? Something else?
&gt;&gt; Dude your argument is so weak. Why are you so sour on Dart? Maybe because I am from Russia? Dart, in Russia, is a little more than nothing. Maybe programmers from other countries heavily uses Dart? I don't know these facts. I only know a lot of negative reviews.
&gt; Then why bother participating in the Dart subreddit. Maybe because my actions did not break the law?
Speaking of packages being in good shape, I really thing pub should have some kind of rating and feedback system.
&gt;&gt; Mods why have you not banned this person. I would not be surprised if you will cry like a little girl, or start screaming hysterically and splutter. If I childish then you behaving like a baby or a coward. 
I understand English is not your native language, but please read my statement more thoroughly. 
Ecmascript 6 is backwards compatible with current JavaScript. It's trying to make JavaScript better by addition. This is why I'm not particularly interested in using it, if I can avoid it. It still suffers from JavaScript's hasty birth. Dart is what I choose to use, because of it's more thoughtful design. edit: I'd also add that JavaScript is Dart's compile target for the web, so I'm happy to see it improving.
Is ES6's inheritance still prototype-based? Not sure how Dart's is implemented but I do like the way we write it compared to Javascript's.
I've read just about everything I can find about Dart online, and I'm not aware of any negative reviews that rely on actual facts. Could you point out any? (If they are in Russian, perhaps you could translate the main complaints for us.)
ES6 adds lots of Dart's great features to JS without removing any of the stuff that makes JS crap. Not good enough.
&gt; Is ES6's inheritance still prototype-based? Semantically, it's like using a particular flavor of prototype-based inheritance. The `typeof` your classes is still "function" and if one class extends another, its prototype will be wired up accordingly. What actually happens under the hood can be entirely different, however. V8, for example, has been using hidden classes for a couple of years. So, accessing properties and whatever doesn't necessarily mean that the engine has to follow some prototype chains.
The Dart SDK installation can be fully removed from the Cloud 9 system.
&gt; The Dart SDK installation can be fully removed from the Cloud 9 system. In this article I don't found anything new in comparison with standard way of such kind of installation (download &amp; unzip) except the explanation about that how to add path of extracted SDK to system PATH environment variable on different operating systems. P.S. On some distributions of Linux systems using the following option maybe not enough in some cases: export PATH=${PATH}:~/dartsdk-1-11-1/dart-sdk/bin/ 
Ignore him. He's the resident troll. He doesn't seriously care. He just wants to stir things up.
Extensive support of Async/Await functions which is not planned till es7. Streams.
Is there use in running the generated JS code through Google Closure compiler? Seems that could lower sizes a lot also. 
Ah, I found it. It's [part](https://github.com/dart-lang/polymer-dart/tree/master/bin) of the polymer.dart project. Cool. I didn't know about that.
I have created a ticket at them, and it seems like they are saying dart is the cause of this.
There is currently a discussion about this topic over at /r/gamedev: https://www.reddit.com/r/gamedev/comments/3hgxs7/projectile_interception_how_ai_lead_their_shots/ This implementation is based on /u/Clydeicus' comments, which I interpreted basically like this: http://i.imgur.com/5a2uKaA.png Seems to work well enough. It's not perfectly accurate, but a human won't do any better. The formula for the direction vector is surprisingly simple: var predicted = ( target.direction + (target.position - cannon.position).normalized().scaled(bulletSpeed / target.velocity) ).normalized(); Operator overloading is really neat for vector stuff. &lt;3
&gt; It's a bit strange, to me, that direction and speed are stored separately. Using direction vectors (i.e. vectors with a length of 1) isn't that uncommon though. &gt; I've made a "fork" Just hit the "share" button after you've made some changes and you'll get a new URL, which you can post here. &gt; more accurate Are you sure it's more accurate? If I write it like this: (target.direction * target.velocity + (target.position - cannon.position).normalized() * bulletSpeed).normalized() It produces the exact same results as this: (target.direction + (target.position - cannon.position).normalized().scaled(bulletSpeed / target.velocity)).normalized() https://dartpad.dartlang.org/8fa13964553966c46bfe The yellow and pink bullets overlap. Well, feel free to mess around with it. See if you can make the pink ones be better aimed. By the way, the inaccuracy doesn't really matter anymore if you increase the bullet speed and/or decrease the speed of the target. E.g. [this demo](http://gfycat.com/HighFrayedCoot) uses much faster bullets and much slower moving targets. If you set fireEvery to 1/20 and bulletSpeed to 1000.0, you get something which looks fairly similar. But even at the currently used speeds, trying to dodge those bullets while trying to move to a particular location is really hard. It also aims better than a human would. For game AI, it's more than adequate.
I don't know whether you're missing something, but my JS was down to a few hundred KB. Here's my `pubspec.yaml`: name: webatara dependencies: barback: any browser: any angular: 1.1.0 web_components: any dev_dependencies: template_cache_transformer: any transformers: - template_cache_transformer: entry_point: webatara|templates/app.html - angular: html_files: - lib/templates/app.html - lib/templates/input.html - lib/templates/roster.html - lib/templates/roster_menu.html - lib/templates/space.html - lib/templates/space_list.html - lib/templates/alerts.html - $dart2js: commandLineOptions: [--show-package-warnings] environment: MIRRORS: 'false' 
It's production ready and is used. Angular 2 should be better though
Uhh, how? When the minified file is at least 2 MB big, as the OP wrote?
Some examples: https://www.dartlang.org/community/who-uses-dart.html
Thanks!! Heres an updated one with your hints! https://dartpad.dartlang.org/1d8dab7e049a0f9c36b6 
Got another rather unimportant detail which, I think, is still worth mentioning. If you don't use an argument of a callback, you can use an underscore as parameter name to mark it (by convention) as unused: (int index) =&gt; new Star(/* not using index here */) (_) =&gt; new Star(/* not using index here */) You'll often see this in other people's Dart code. Using the "yea, whatever" parameter name tells the reader that you only put it there for arity reasons, but you aren't actually going to use it for anything. In languages like JavaScript, where arity doesn't matter, many people simply omit the unused parameters. Personally, I prefer being explicit about it. Calling a function with the wrong number of arguments might as well have been a mistake.
Soon Dart will replace Javascript.
Because HTML is complicated and slow as hell to render ? 
From what I've understood (and I could be completely wrong about this I just saw those two announcement videos) they want to write native/C++ rendering engine and then use IPC between DartVM and native code to build an application framework in Dart - this way you can write performance critical parts or native platform parts (like Java parts on Android) in different languages and talk to the VM in a uniform way. I like this idea. If it works out it could really make mobile development a lot better, it's much more simple than things like Xamarin but also a lot better suited for the problems I feel like most mobile devs are facing. At the same time I have 0 trust in Google products and this is just a research project - they kill stuff on a whim and I would hate to be the guy who depended on Google technology when they do. Hopefully it pans out and sees community involvement so it's not just a Google research thing, until then I'm just curiously watching from the sidelines. 
No, the app is done in plain HTML/CSS/Dart. Back when we started, Polymer and AngularDart felt way to unstable for what we needed, and since our interface is fairly simple, writing a plain old HTML/CSS client and manipulating that with Dart just felt like the best solution. We do plan on moving to Polymer at some point in the future. And sorry for the late reply. I went on vacation immediately after having posted. :D
Sorry but nowhere near close - for example I trust Microsoft to maintain their products even if they back off from them, with Google - seen people burned too many times by either dumping or radically switching stuff. I have no problem with experimenting - I'm just not going to base my business on something that can take down my project (or at least slow down considerably) along with it. 
Like what? I can only think of Reader, but the product was nine years old. Microsoft is also known for killing off products, sucks to have invested in windows RT, and Apple is the king of pushing the bar forward and breaking backward compatibility. Have you ever maintained an iOS app or run a old mac on a new mac os? lol
Well said. Lots of ignorant reactionaries on the web these days decrying the unreliability of Google. It's as pointless as it is stupid if you see the data. You really can't become successful or highly visible in this country (world?) without a bunch of wankers becoming keen to demonize you. Human nature, eh? Dumb.
Source here: https://github.com/rcagantas/kill9 Interesting demo. Hasn't had active development in 2 months. Lots of single-char vars in places, sparse comments, but simple enough that everything's clear.
I've been trying to find a domain name but settled into just using Github pages. Had worse performance with it because the connection goes from Github -&gt; Singapore hosted DigitalOcean domain (I think). You might want to give a try here: http://128.199.113.247/index.html Also, I'm very saddened by the death of the Dart Editor. One of the reasons I decided to go with Dart in the first place. Download *one* thing and then you are off. 
What's missing from Webstorm that you liked about Dart Editor? I use Webstorm/IntelliJ for daily development, and love it.
Doesn't seem to be able to connect anymore. You guys workin' on this?
Yeah, that one download thing was really nice, especially for those of us who teach Dart to noobs, but Dart Editor wasn't really full featured enough for serious development. WebStorm, while not free, certainly is. If you're on Windows, install [Dart for Windows](http://www.gekorm.com/dart-windows/) for a really easy way to install and update the SDK...or [Dart-Up](https://www.npmjs.com/package/dart-up) for Windows, Mac, or Linux. Those great new tools handle that part, at least!
Can you try again? You can use this to connect directly: http://128.199.113.247/index.html It's the DigitalOcean host.
Well, I really liked the one download thing. With Webstorm, I still have to download the Dart SDK separately and I couldn't get the intellisense to work properly. 
&gt; The Dart VM can optimize access to final variables, and if you mistakenly try to reinitialize argParser later, the Dart analyzer will issue a warning. `final` doesn't make anything faster. It's trivial for the VM to optimize any variable that isn't assigned to, `final` or not.
Soo Clean! Love it!
Thanks I have been wanting something like this for a while!!
When I first saw this in my feed, I though: "dart.. Stream Transformers?" As in steaming the movie Transformers... 
Ah, yea, you have to compare the gzipped sizes. That's what matters. I have a small game which is around 30 KB and a significantly larger one which uses Futures which is around 38 KB. So, can't really say that Futures significantly increase the size.
Looking forward to trying this out!
That's a fantastic looking library! Have you tried running it through the Dart Dev compiler? This type of thing is what I'm currently most excited about: building libraries usable from plain JavaScript.
If you are only going to learn one in exclusion of the other, then no. Learn JavaScript.
It's a valid strategy to write your code in Dart, then use Dart2js to convert to JavaScript, then know enough JavaScript to read and debug it. So you need to know both, but you don't have to write both.
It's more important to learn the relevant web APIs and techniques for building an app than learn javascript and all of its quirks. That said, JavaScript isn't going anywhere, and a lot of code has been written in it, so developers shouldn't be surprised if they need to learn some of it at some point.
If you have experience with https://github.com/dart-lang/dev_compiler it would be cool if you showed how the current project at the port to es6 and encapsulate it in a js library for browser.
yeah, I got the same result, and it is unclear how to run it in a browser.
This needed to exist a year and a half ago. It would have been killer before the es6/7 train started a-rollin'
I'm not sure that it's too late, but you're right, it would've been a stop-the-presses type project a year ago. Right now, it has to be more than just "Mobile Apps in Dart". Getting all of Observatory's features working over a USB or WiFi connection would be a good start. It needs to have a world-class build story, because if it's a pain to build apps with it, then it's no better than the other non-native frameworks (Xamarin, Cordova, etc.) Folding support for it into the JetBrains plugin, for instance, would be a huge win. Still, the project is quite young. I'm interested in seeing where it's going.
This looks good, especially the new JS interoperability. I would love a more detailed look at it tho!
Depends, if the prioriry is JavaScript interaction then go with Typescript, Dart is not there yet, with Dart 1.13 it is easier to consume JavaScript but JavaScript cannot consume Dart code, at least, not w/o hacks. Now, the tooling is even, Typescript with Visual Studio Code has the analisis server and debugging on the client, with Dart you need to pay a Webstorm license to be able to debug the client code. 
The javascript ecosystem is such a mess. It is big, much bigger than dart, and in some sense, this is a good thing, but I find this also one of the worst things of javascript, because there is no solid foundation of libraries or practices that every javascript devs use. I mean even such a simple thing as importing a library, everybody seems to do this differently. In Dart, there are many high quality core libraries written by the Dart team that everybody uses. There is no "jquery or no jquery" discussion in Dart. Everybody uses "dart:html" for working with the DOM. If you want to test, people use the test library. If you want to use futures, use "dart:async". The Dart language is nice enough, so you don't need something like underscore. etc. etc. You could say that typescript only adds another way to do something in the already rotten javascript ecosystem. While, in Dart, you enter a whole different ecosystem, which is a bit smaller, but is carefully designed from the very fundamentals. Of course, sometimes it hurts that Dart's ecosystem is smaller. But now with the new jsinterop, it is very easy to use many existing javascript libraries, and I'm glad that we don't have to rely on jsinterop for the core libraries of the language.
Question: there is also Atom Dart plugin which works really well for me. However not sure about the "debug the client code" piece. Have you tried it?
You can debug Dart code fine in Dartium the Dart development browser (a Chromium with integrated Dart VM)
You are preaching to the choir here, so expect only positive feedback (which I find justified, by the way. I also like Dart more than TypeScript). What needs to be asked are "reasons why I should NOT use Dart over TypeScript" and then address those (in time).
Rather, the strategy evolved, and for the better IMO. Why build your own IDE when you can leverage and build on powerful, popular IDEs like IntelliJ/WebStorm and Atom, the latter of which is free? Dart decoupled its analyzer as the Dart Analysis Server and it integrates wonderfully in WebStorm or Atom. Observatory is for deep insights into what's happening in your applications and that integrates nicely too. The Dart code formatter is a simple option in the WebStorm context menu. And so on. Then there's the pub package manager, pub build tools and more. It really does bring power and sanity to your tooling.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/webdev] [Give me your top five reasons why I should use Dart over Typescript](https://np.reddit.com/r/webdev/comments/3u6zpr/give_me_your_top_five_reasons_why_i_should_use/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
&gt; IntellIJ community Edition Which doesn't support debugging or CSS or HTML. There's a reason people are so angry at Google's decision. I was at the Dart Summit, since my company has invested about 10 man years in Dart projects, and there were a lot of very unhappy people.
It's true that losing the Dart Editor was a blow to easy adoption. But there is IntelliJ Community Edition (just add the Dart plugin). That's free! And for trivial stuff, you can always use DartPad (https://dartpad.dartlang.org). I'm actually a huge fan of WebStorm for Dart or JS coding, so I use that.
&gt; awesome IDE with Dart support. Does it really? According to: https://atom.io/packages/atom-dart Debugging will be supported "someday." The old Dart IDE supported it easily out of the box.
Still alive despite losing the IDE?
I'd guess that the bad keyboard support is because blink still doesn't implement DOM3 keyboard events. Other editors use nasty hacks to get around this. i.e. focusing an invisible textarea and copying text out of this. Anyways, sounds like blink will be getting support soon... https://code.google.com/p/chromium/issues/detail?id=227231 
Close. There is no *workaround* yet, because Chromium doesn't support the [UI Events](https://w3c.github.io/uievents/) spec yet. The underlying reason for this issue is much simpler: Their default shortcuts use Ctrl+Alt, which is simply something you shouldn't do. AltGr is the same as Ctrl+Alt and Ctrl+Alt is used as fallback for smaller keyboards which do not have a right Alt key. You can't use Ctrl+Alt for default shortcuts unless it's in conjunction with the cursor keys or something like that. All the other editors work fine because they don't use Ctrl+Alt for default shortcuts. The Atom team simply didn't do their homework. The Electron version currently used by Atom uses Chromium 45, which is one version behind stable. So, once the issue is fixed in Chromium, it will take 4+ version increments, which equals 24+ weeks to make its way into Atom. And then it will take some more time until they actually fix it. That's where my "at least a year" figure comes from. They could have easily fixed this with 1.0. Changing a few default shortcuts isn't hard. Prioritizing essential core functionality over some shitty shortcuts should have been a very easy decision.
Just sticking to the main proposition values of Dart like: * Static declarations, sealed classes and seal objects, allow for creating deployment packages that ship the minimum necessary code and the code can be mangled for minification and obfuscation without many surprises. This is more important for shipping executables than libraries, so it could be that TypeScript is better if you wanted to ship libraries instead. Although the future compiler promises to make Dart flexible in that regard as well. * Dart comes with its own unique syntax and semantics which can evolve at their own pace and have a much smaller scope than JavaScript's, since JavaScript while adding new stuff seldom removes the support for the old stuff, making JavaScript a growing challenge to match for TypeScript. * Both, Dart and TypeScript with optional types can be a tough pill to swallow for ordinary developers. Introducing a compilation step is always annoying for most developers. Dart has Dartium that can help to ease the pain so long as Google can give Dartium the proper support. Dart has other tools that can ease the pain like the pub serve for hosting the development files that are transformed on demand and the Observatory that can help to profile Dart code in loco. If the Atom editor can help to string those tools together it could help with the popular demand that was once served by the Dart Editor. * Dart has the Dart VM. While scripting with Dart is not too common, given the familiarity of reusing the language it is always a good option. Beside hosting server-side tools/sites. * Although initially Dart was meant as a good replacement to JavaScript, the Dart authors ended up creating something that they themselves would want to use. So they created a language that could be useful beyond JavaScript stuff. There are many Dart projects nowadays, some of which may be exceeding a million lines of code, and they continue to support Dart beyond the browser because of that. In future projects that targeted mobile, Dart could find uses that would increase its popularity and reuse familiarity. Reasons to use TypeScript instead: Closer to JavaScript in syntax and semantics, works for sites as well as for apps. TypeScript may be used more incrementally. But given the pain of introducing a compilation step and once ES6 features are supported natively in the browsers, many users would perhaps prefer to avoid using TypeScript when doing just some incremental improvements to web pages.
Sure! The Dart Editor was one of many options for Dart IDEs. The new "official" IDE is JetBrains WebStorm, but there is full support in Sublime Text, Atom, Vim, and Emacs. Check out the [Dart Tools](https://www.dartlang.org/tools/) page for details.
&gt; it was sad to see Google abandon Dart like this. The Dart team is as large as it has ever been. We just moved from Dart Editor (which had many many issues and many unhappy users) to IntelliJ (and Atom and Sublime) which are easier to hack on, faster, and have more and happier users.
Are you using Angular 2? I used Angular 1.3 and I didn't have any memory leaks, but it didn't feel production ready. I wouldn't be surprised if it had issues. If you want to use Angular with Dart you might attempt to tackle the 2.0. I hear it should be stable now. I have found that Angular is very much a JavaScript approach to web development. I've been just using Native Dart and enjoying it more. I would love for the Dart team to do something similar to what the GWT people are doing with their Angular clone, Singularity. 
This is a great discussion for our misc@ alias – It'd also be a great bug to file.
Is that the only problem? Why not just `!unset` the default shortcuts?
I'm not arguing that it's a good situation, only that it sounds like the fix is both trivial, and something you can do yourself without waiting for Atom to change it on their side. It certainly wouldn't be the [first time](https://medium.com/medium-eng/the-curious-case-of-disappearing-polish-s-fa398313d4df) American keyboard shortcuts collided with international keymaps.
&gt; sounds like the fix is both trivial Yes, they simply shouldn't have used Ctrl+Alt. They just didn't do their homework. http://blogs.msdn.com/b/oldnewthing/archive/2004/03/29/101121.aspx &gt; and something you can do yourself without waiting for Atom to change it on their side. Having a significant portion of your user base waste 30+ minutes with this kind of nonsense isn't feasible. https://en.wikipedia.org/wiki/AltGr_key It would probably tip over to "most users" if India wouldn't coincidentally use the US keyboard layout, too. They really should have fixed that with 1.0.
You can use cmd+P, that shows the name and type of the parameters, is that what you want?
TypeScript is a fine compromise and useful if you have to deal with a lot of third party JavaScript libraries. Dart is a better choice in some cases.
&gt;&gt; Dart is a better choice in some cases. Some cases? New touted innovation of Google Dart is improved JavaScript interoperability. This means that Google Dart mostly used with a lot of third party JavaScript libraries and practically does not used in other "some cases" due the fact of lack of libraries written in Google Dart language. And as you wrote "TypeScript is a fine compromise and useful if you have to deal with a lot of third party JavaScript libraries". 
If I understand correctly you can use `Future.wait()` for this: https://api.dartlang.org/1.13.0/dart-async/Future/wait.html This should definitely be faster then waiting for each one at a time. But you can also easily benchmark it and see for yourself.
&gt; I've read that they're asyncronous. Yes. &gt; Does that mean they take advantage of multiple threads? No. They are asynchronous, but they are not *concurrent*. At any point one time, only one piece of your code will be executing (within a single isolate). They are a way of organizing your code and interleaving execution, but not a way of running multiple pieces of code at the same time.
Gah that looks complex. What I would give for a Grand Central Dispatch in Dart.
Yea, the API is not so concise to use. But that's what we have right now. Implementation-wise, Isolates are quite lightweight. Unless you need to toss relative large amount of data between Isolates (data are copied), then the data exchanges via ports are quite efficient. You may set up a pool of prepopulated Isolates, and use the pool in a similar way as GCD.
Warning: even though all methods have been implemented, they haven't been properly tested yet. Things might break. [Contributions](https://github.com/jsayol/dart-tmdb) are welcome!
Are you sure Dartium doesn't work? It fully supports JavaScript in my experience. Just be mindful of slight differences when passing data between Dart and JS.
Oh, that's not the problem at all. The thing is, if I'm using Dartium I obviously don't have access to any of the Node or Electron APIs so I'll have to mock *those* while developing. Thanks for replying, though :)
Two Google made products work well together. Go figure.
That was an interesting read, thanks.
Escaping the inanities of JavaScript and working with a sensible language that behaves in a sane and predictable way pays huge dividends. The comprehensive standard libraries provide 90% of what you need without having to hunt down, vet, and include disparate libraries to accomplish common tasks. The Dart language and ecosystem work together to make web devs much more productive.
You said it. Speed and power consumption. That would be one of the bigger reasons to switch to Dart from something like Ruby. Whether compiled to JS or running in the Dart virtual machine natively, code written with Dart is much faster than Ruby.
there's a google group and a google plus? which one is more active?
I just started using Dart today, tried using the VSCode Editor, Atom, Sublime, and IntelliJ. The best is certainly IntelliJ for now IMO. Integrates well with Dartium, and more precise warnings and errors and such.
IntelliJ because I already own it and it's pretty good.
IntelliJ CE (free/open source) or Atom (free/open source)
thanks for this!
I think WebStorm is probably the best experience right now, but from what I understand, Atom is on its way up.
Got a link that works?
Sorry but the offer is over.
I know the offer is over, but I just wanted to mention that they do this every day at packt. I've got a ton of ebooks now, because I check back every day and get the free one. They're not necessarily trash books either.
My [tutorial on writing Dart console apps](https://dart.academy/writing-command-line-utilities-with-dart/) walks you through advanced distribution, which allows people to "activate" your script globally. This doesn't technically hide the code, but a user would have to go looking for it.
I think your developers are correct. According to: https://atom.io/packages/atom-dart Debugging will be supported "someday."
I only need to debug server-side stuff and it works fairly well.
Costs too much! The old IDE worked great. Too bad it was abandoned. 
Just out of curiosity, what do you think is a fair price for something like IDEA? I always thought they were well priced. 
As someone that writes software for a living, it's a bit depressing to hear that something like WebStorm for around $10 / month is seen as overpriced and a waste of money. 
I really enjoyed this talk. It clearly explains the creator's design decisions. Great slides too
Yeah thats the idea... var dev = new Developer(enabled) // enabled set by commandline... dev.log('') will print otherwise it wont print.
We're really focusing on JetBrains and Atom. Leveraging an existing IDE gives us an ability to really focus on a core feature set – and leverage existing support for things like GIT, CCS coloring, etc.
All while preventing newcomers from getting started. My company had a great first eighteen months with Dart, but not being able to debug has really hurt productivity. 
No way man, the more they integrate into IntelliJ IDEA the better. I guess they could package a prebuilt Atom for newcomers tho.
It looks like they renamed Fletch to Dartino, right?
&gt;&gt; Your tone is so toxic... Must be mezoni in disguise. Does it matter which tone is used? As for me, before asking such questions Seth Ladd was should to ask other more right questions. "People who uses isolates what do you think is there enough good documentation, articles and examples on Dart official resources about how to use isolates with high effectiveness?" Possibly, Seth Ladd, Product Manager at Google, member of Google Dart Team, even does not know about the lack of the good documentation, articles and examples on Dart official resources about how to use isolates with high effectiveness. 
Hey, I'm GMT+6 (Central Asia, Almaty). But actually being unemployed I'm free all day and night so I guess timezone is not an issue.
&gt;&gt; If that is your point, fine that is a valid point, but please leave out the toxic crap. My point is always would be the customer's point. The more intense I use the product the more I see in it shortcomings. My experience with Dart was started at 2011 and I wrote in Dart megabytes of the source code. The point of Seth Ladd is always was the seller's point. Seth Ladd was always interested in increasing the attractiveness of the product. Seth Ladd never asked questions about what Development Team can do to make the product is better. Do you think why they never ask such questions? Because they are well aware that this is very ugly to promise what they can not do. But what the problem? What is the problem to make product better? I think that the problem in that the software owner (Google) decreased investment in the project to a reasonable minimum. As for me, the reasonable minimum of the investment is a mark of the lack of proper interest. P.S. I remember very well how many years ago, developers of the right and left handed promises that everything is included in their plans. On the questions: "Did you plan to add this feature?" they always answer: "This is definitely on our radar". But alas, all is in the past. Many promises are not fulfilled.
If sense of humor would've directly correlate with intelligence I would think you are mentally retarded.
I hope that when they need to do crypto, they don't create their own implementation...
I disagree, the js interop has improved significantly with 'package:js'. And if you don't want to use WebStorm the plugin for Atom is very good, and I enjoyed using it. Also the dev_compiler is in the works. Which will be great!
Webstorm isn't exactly expensive. Theres also Atom which is free.
Well if a rando on github says so, and so emphatically, I guess it must be true. It was a good run Dart.
From https://atom.io/packages/atom-dart : "Debugging through the Dart VM's observatory wire protocol (someday)" The old IDE could debug code which was very nice.
&gt;dev_compiler Where can I read about this ?
https://github.com/dart-atom/dartlang/blob/master/CHANGELOG.md It seems that the debugger is enabled by default since 0.5.0. I've not used Dart-Atom plugin since happily using WebStorm.
Oh, that's an old plugin, not from the Dart team. You want https://atom.io/packages/dartlang Debugging works with that plugin.
[disclaimer: I work for Google] Google uses Dart for numerous projects, including Ads: http://news.dartlang.org/2015/11/how-google-uses-angular-2-with-dart.html There's a new JS interop solution: https://pub.dartlang.org/packages/js There's a new Dart to JS compiler (called Dart Dev Compiler, or DDC) that generates (imo, beautiful) code: https://github.com/dart-lang/dev_compiler Dart is used for Flutter, a new project to build beautiful, fast, iOS and Android apps from a single codebase: https://flutter.io
The project is here: https://github.com/dart-lang/dev_compiler Maybe file issues there if you have questions?
Flutter seems neat but I'm not convinced that it using its own high performance rendering engine is the way to go. I love the idea of React Native but in Dart though. Is there a chance flutter could evolve into something like that? I just don't see it being successful as is. Perhaps I'm being short sighted. 
Thanks for the response. I hope something awesome comes of it! 
I meant more along the lines of &gt;The Dart Dev Compiler (DDC) is an experimental development tool and transpiler. It is at a very early stage today. last touched 3 months ago - is this still true ? When do you expect it to be ready for use and stuff like that. I guess a blog post from someone on the team or someone who used it and a high level overview of what it will bring/expected timelines and such stuff would be nice :)
While this is true (me being one happy IntelliJCE+DartPlugin user myself) it is not clearly nor sufficiently advertised. I can understand that newcomers get the wrong message here, and de-motivates them to try out the language.
I see commits as recently as a few days ago: https://github.com/dart-lang/dev_compiler
I meant README.md wasn't touched in 3 months so maybe the "very early stage" is now just "early stage" or stuff like that you know - I'd just like if there was an overview post that would tell me what the aim of this project is and what are the planned milestones/rough timelines.
Sorry, I'm not sure what the plan is for Dartium. (I'm on the Flutter team now, so I'm not as plugged in as I used to be.) Definitely email web@dartlang.org mailing list, and ask them what the plan is for Dartium rolling to a new version of Chromium.
Dart is OVER - https://www.youtube.com/watch?v=YlGqN3AKOsA
also there is angular + dart combo
Oh I see, so all the results are decoded and then I am sending them to get decoded again, which doesn't work. Makes sense, thank you. Good catch on that runtime typo, too. I was wondering why that field was returning null but was just planning on looking into it later.
Got it working, thanks for the help! _parseSearchResults(String jsonString) { Map movieNames = JSON.decode(jsonString); search = movieNames['Search']; for(Map movieName in search) { Movie m = new Movie(); m.title = movieName['Title']; m.year = movieName['Year']; m.runtime = movieName['Runtime']; m.poster = movieName['Poster']; movies.add(m); } } I'm going to refactor it and probably make a constructor for Movie, but at least it's working now.
You cant compare a language and a framework
Good job man! You should definitely refactor that into a constructor or a method, but getting it working is always the most important part :)
Think you meant to write 'definitely' :)
thnx
Ooooooh yeah yeah yeah that makes sense. What is another alternative to Angular JS? Like is Node JS in the same category as Angular JS?
These are not mutually exclusive choices. Angular 2 is both a JavaScript [and a Dart](https://angular.io/docs/dart/latest/tutorial/) framework.
Ember and Backbone are two other popular JS frameworks. 
If you only depend on dart:html, you will get similar speed to vanilla javascript. If you depend on angular2 in Dart, you will get similar speed to angular2 javascript/typescript.
So NodeJS is not of the same category?
Angular 2 can be used from Dart. It's not an either/or situation. Angular.js (version 1) also has a Dart port, but unlike Angular 2 the Dart port is a completely separate project that is actually quite different. I've read that Angular 2 actually derives a lot of influence from Angular.dart.
i suggest you try asking on dart slack channel, more people there
Why Atom plugin and Intellij are not good enough IDEs for you, I'm curious?
Before making such statements, have you tried Atom with Dart plugin?
Probably skewed by Google being the dominant employer of Dart developers and small sample size. Dart popularity trends don't look good. Hopefully the new JS interop, angular 2, fletch/flutter/IoT applications turn it around - it's a really good peace of tech that started on the wrong foot with the "JSnext" ambitions.
&gt; Probably skewed by Google being the dominant employer of Dart developers Yeah, I was surprised to see Dart so high up the list and immediately thought the same. I really think Dart will be a big player in the future, though. Google (or the Dart team, at least) is playing the long game here and I think that's smart.
Yes, I've tried a lot of IDE. Atom with Dart plugin is very very good text editor with many features and tools. But Atom is not very good IDE. We're here talking about a very good IDE but not about a very good editor, is not it? Statement was "Losing the IDE was a huge blow".
&gt; Before making such statements, have you tried Atom with Dart plugin? But you are tried Atom with Dart plugin? And how it useful to work with Dart web projects? I look forward to your response, because I see that you are a great expert of the bundle of Atom with Dart plugin.
Just to make sure we are talking about the same thing. What defines IDE for you? Or at what point "text editor" becomes an IDE?
According the the JetBrains guys, you still can't even run, much less debug, unit tests. You could with the old test framework and IDE. Developing tests blind is no fun.
I think you have to admit that web projects is not the most important feature for Dart itself (at least anymore). It might be the most important feature for you personally, but that's not the same thing, don't you agree? Answering your question: Dart plugin already offers a good set of IDE features (static analysis, code completion, app launcher and debugger). The fact that it does not _yet_ support launching web apps does not make these features suddenly disappear. Debugger already supports running server side and Flutter apps, support for web apps is planned (https://github.com/dart-atom/dartlang/issues/585). All the other IDE features (static analysis, code completion, click-through, quick-fixes, code refactorings like "rename") works perfectly fine for web apps as well. If you really need the debugger feature, join the conversation on github, or (even better) contribute yourself. The whole community will only benefit from this. I'm actually in pretty much the same situation as you and there are some features that I'd really like to see in the language. The good news is that everything is open source here. I'm (and you're and everyone else) free to fork the repo on github and just make the thing happen. 
I'm fully supportive of any endeavors this community would like to make to increase activity and interest in Dart. I'm a very casual lurker to this subreddit, as Dart at one time was my favorite language to work in, and still could be if not for what seems to be a dwindling interest in the language. I'm a huge fan of the language spec, of the team behind the language, and the Dart community, and I'm glad that they're continuing to work on Dart as I hope to start another project soon that will use it on the front end.
Yes please! Maybe a video series!
Start pulling them from [Reddit Daily Programmer](https://www.reddit.com/r/dailyprogrammer/?count=375&amp;after=t3_pkw2m). In fact, if you guys would submit Dart-based solutions there, Dart would get some great exposure.
That is a really good idea!
Thank you for sharing that, I'll look into following the Google+ community more closely.
Angular 2 JS or Angular 2 Dart are MVC frameworks. JavaScript is a language while Dart is a rather a platform with all the tooling for developing, collaborating and deploying complex projects for front-end, back-end, mobiles and embedded systems. Dartlang ( the Dart language) is modern and contain all the ingredients to develop asynchronous and salable server side application. Since Dart is not supported by traditionel browsers ( but Dartium for development only), Dart front-end programs must be transcripted into JavaScript. During the transcription, your Dartlang program is optimized and unused code are removed, therefore it could run faster on traditional browser than your own JavaScript code. If you are familiar with Dart, choose Angular 2 Dart and Polymer, you will be more productive. You can better organize your project and develop your own web component. You don´t need to choose Angular 2, Polymer or Dart. You can use the 3 together. Leave data binding to Angular 2, Web component to Polymer and logic to Dart. 
It requires an account to vote? If so, sorry, I'm out =\
Thanks for the answer! I'm still a little shaky on learning it. I have a bit of a personal grudge against rails and JS, and I'm thinking of retooling my site with dart. Or Java? I'm mostly a Java/Android dev as it stands, but I'd like to delve into more web stuff. I'm wavering between Spark (Java) and dart. 
Im fond of Python. JavaScript isn't so bad, either. The job market for both is quite good. ... And I really like Python.
I like dart as a language, from what I've read. I'm just not in a place to be dictating the future. I'd like to bet on dart, but for now it seems like I'll be sticking to what I know: Python and Java. Thanks for the answer!
Yeah, I'm pretty set up in terms of basic languages. Java is really my main language, just wanting to diversify. You're right to assume I haven't really tried my hand at FP. I've been learning a bit of kotlin, but I haven't gotten into the FP side of it. Time to just do it. I didn't expect to find such negative opinions of dart here, but I guess that's just indicative of the state of things. 
I wouldn't say these are negative opinions about Dart; more like realistic. If I could I'd be writing Dart for both back and front end but the reality is I need to use what my company uses. I'm trying to increase interest in my coworkers, but it's an uphill battle.
I suggest you namespace only imports that you include via pub. For core dart libraries you will know where functions come from, which is not always the case with pub stuff.
Well that isn't answering his original question at all - while your suggestion might have merit, it isn't at all what the OP was asking...
Dart slack channel? Where?
It's a huge win. But every time Dart gets positive press, all you can do is sit back and wait for the trolls to roll in, as they have already in other subreddits. _sigh_
Why is python more marketable than Java? If you have a lot of experience with Java, learn spring and pick up a client side JavaScript framework or get better with android. Polish your portfolio and then put your resume on indeed, dice and apply to jobs.
This is more or less where I landed, as much as I would like to learn dart. Thanks for the advice
After reading that [dart and angular2 will be the tech behind the ui for adword](http://news.dartlang.org/2016/03/the-new-adwords-ui-uses-dart-we-asked.html) and looking at the [flutter commit activity](https://github.com/flutter/flutter/graphs/commit-activity) which seems quite active to me^(see_footnote) the future for dart might be less gloomy than it currently seems to me. footnote: flutter has about 20% to 30% commits per week compared to swift. This comparison is a bit apple to oranges because of different scope (ui vs language) and maturity (years since project start).
&gt; Dart sky framework demo Do you mean this [sky^now_called_flutter demo](https://www.youtube.com/watch?v=PnIWl33YMwA)? 
Yup. That's the one. 
Fair criticism would be a dream come true. We spend most of our time reacting to idiots who keep spreading the same misinformation about Dart over and over. As Dart users, we're well aware of the problems that exist (nothing is perfect, not even Dart), but it's not usually those problems the trolls whine about. Trolls say things like the following: * "Dart is dead. No one uses it. Google will abandon it, as they do everything else ever." * "JavaScript is good enough." * "Without a Dart VM in Chrome, who cares about Dart?" * "If Dart is so great, why is Angular 2 written in TypeScript?" (This one is more fair, but it's been answered hundreds of times online.) * "The Dart team is a bunch of lazy incompetents, because they did not prioritize my pet issue/feature." And many more. 
&gt;&gt; "The Dart team is a bunch of lazy incompetents, because they did not prioritize my pet issue/feature." Can you get here examples of the `pet issue/feature`? Or you like to act like a troll (spreading misinformation)? &gt;&gt; If Dart is so great, why is Angular 2 written in TypeScript?" (This one is more fair, but it's been answered hundreds of times online.) Angular 2 written in TypeScript because Dart is not suitable for such things and about this was written correctly just one time by the Angular author Miško Hevery. His words: Dart is semantically different from JavaScript. The resulting Dart2JS code uses JS as more of a VM than a language. The result is that Dart2JS code can not easily interoperate with JS code. Only primitive types (such as strings, numbers, arrays, maps) can be passed between Dart and JS. Complex things such as classes can not be marshaled easily. Existing JavaScript libraries can not be used from Dart in a straightforward way. Limiting reuse of prior art. * I just wanted to add yours words about Dart (Dart is so great), but I think it is not quite appropriate here. &gt;&gt; As Dart users, we're well aware of the problems that exist... But other potential users may not know about the potential problems if they decide to use Dart (about this was written hundreds times and will be written is yet enough, not only by the trolls but also by the normal Dart users. They constantly asks such questions and never get answers from developers - may be they embarrassed to answer, because they are very modest?). &gt;&gt; As Dart users, we're well aware of the problems that exist... As Dart user I never can understand how Dart developers can document some feature and do not write any line of the implementation source code for a such documented feature (proof you can find in Dart mail list). From your words possibly to understand that this may be was a potentially `not prioritized pet feature` but just a single question arrives: "Why was need to document this feature in the source code as if it was already implemented and did not warning about that it will be implemented not very soon?". Maybe the developers of Apple's Swift language also act similarly because it is common practice? 
&gt; The Dart team is a bunch of lazy incompetents, because they did not prioritize my pet issue/feature. I'm sorry that I did not understand the first time you what you're saying. Now I understand what you mean. I think that you mean the feature `implementing Dart VM into Chrome browser and later in the browsers of the other vendors`. Yes, I agree with you that this was (as you say) pet feature which was did not prioritized by the Dart team, which is (as you say) a bunch of lazy incompetents. P.S. My personal opinion is that this is a very bad mention about Google Dart developers from you. Yes, their work is not very good but they are not a a bunch of lazy incompetents. Dart Team only very poorly organized, as, indeed, and the development process (but most of them are professionals). 
&gt; I love Dart and the Dart team. I'm probably one of the world's most active Dart evangelists. I love only Dart and I don't love a Dart Team (and how they are organized). And, of course, I understood 100% you because you (as you say) a Dart evangelists. I am sorry but I does not very much love a Dart evangelists (at least most active of them). Why? Just because they are too fanatical. It would be much better if they are with the same fanaticism wrote code Dart because I had to (due to the scarcity of the code for the Dart), once write (for yourself) the following code in Dart: - PEG parser generator - C macroprocessor parser (for a limited puspose) - C language parser (for a limited puspose) - Glob pattern performer - File utilities (similar as in Ruby) - Build utilities (similar as a rake utilty in Ruby) - Binary interop (software to work with dynamic libraries directly from the Dart code, with binary types, marshaling, code generators, binary callbacks from the binary code to the Dart code, etc) - Reflection library (similar to as in .NET Framework) And other public and private packages (lists, unicode, text, examples of native extensions, semaphore, dartx, etc). I love only Dart and I don't love a Dart Team. P.S. How about to try their hand to implementing in Dart something similar to .NET Framework Linq.Expressions? I am trying and they works in Dart through the reflection (and maybe they will be useful for something similar to .NET Framework Linq.IQueryable). The IQueryable and Expressions can be useful for something similar to queries for SQL (ORM, query language similar to LINQ or any other thing for DB access you may wish and want to implement on top of them). Problem only in that the Dart Team does not need them... For me it will be just another fun - write it and forget about it. Unfortunately, for fun I do not have much time. 
Yes, but this means it's that much closer!
&gt; I've been waiting a long time for this! How much time you waiting (in days, months, years)?
From what i see in previous changelogs when changelog becomes bigger they get new version out. So lets hope 1.16 comes soon so we can try out that new compiler.
Not so sure about that one. I get the chance to talk to members of the Dart team occasionally. I'll try to remember to ask them about that.
&gt; Will DDC ultimately replace dart2js? Or will there still be a purpose to use DDC has the following project goals: - Effective static checking and error detection. - A debugging solution for all modern browsers. - Readable output. - Fast, modular compilation of Dart code. - Easy use of generated code from JavaScript. You can see that `replace dart2js` is not in a goal list. You can use what you want (ddc or dart2js).
Yeah, I want to know too. Great language without community attention :-(
I am using it for a client side build script at the moment. I have used it extensively for past work, both in the back and front end. The small community is the only thing preventing me from using Dart more.
Seems like the client integration of ClientSide dart is having issues. No browsers have the Dart VM and Polymer was cut for Angular2 being the base platform, so it seems some design issues are there when it comes to the usefulness of this language over others for clientside development. Still chugging along though with the help of Gunter in the Stackoverflow forums for obscure or weird questions. #GunterIsMySpiritAnimal
I'm using it for both server and client side. In fact, I've been almost exclusively using it for about a year now. I love it, I just wish it would get more attention so we can get the community to grow... 
Still no Dart support for Chrome? :(
&gt; Still no Dart support for Chrome? :( Coming soon... 
There is dartium but this looks like trolling to me..
Is it? Last I heard, they decided against it.
Community isn't there? I find it to be among the most helpful and responsive of communities out there! Great answers on StackOverflow, and it's easy to get real-time help on the dartlang Slack channel.
Yeah, they wanted a HTML5 interface and gave me the choice of tool. Chose dart. Pretty happy with that choice.
They don't need to add Dart support to Chrome. When the new WebAssembly comes out in all browser, they'll just make dart compile to that and use the Javascript and DOM hooks.
How have your coworkers received the internal tools being written in Dart, or are they tools that only you are using? I work with a group of mostly .NET developers who would I can't imagine would appreciate me providing them with tools that they would probably refuse to maintain in what they would consider an obscure language. I haven't kept my love of Dart (and Go, for that matter) a secret at the office, and try to subtly introduce what I love about each when I can. This week was not having to "build" server side dart, as we are getting frustrated with longer and longer build times with our C# app. 
Do you mind going into detail about how your project is using Dart? Are you using a server framework for Dart, Angular2 or Polymer on the front end? Do you have to refactor often when the SDK gets updating or are you maintaining an older version?
I've recently started a new Dart project that will be the foundation for any future projects and I've really enjoyed the development process in Dart. My biggest concern is that many of the libraries I'm not using seem to be updated/maintained less and less.
Dart works with Polymer quite well, if you want some Material Design action. Check out [Polymer Dart Code Lab: Your First Elements](https://dart.academy/polymer-dart-code-lab-your-first-elements/). I really commonly use [Dart, Angular 2, and Polymer Together.](https://dart.academy/dart-angular-2-and-polymer-together/) It's great!
I think returning a future won't work here. I usually just add expectations on the future. The simplest one which waits for successful result: test('it waits for future to complete', () { var f = HttpRequest.postFormData("url", {"data": "foo"}); expect(f, completes); }); Also note that in your example you might want to add expectations not on the `f` future but the one returned by the call to `then()`. For instance: test('it waits for future to complete', () { var f = HttpRequest.postFormData("url", {"data": "foo"}); var f2 = f.then((_) =&gt; _.statusCode); expect(f2, completes); }); 
This is the news or something else? For those who did not know - the information about the Dart has been added to the libraries.io a long time ago (several months ago). It seems to me that it has long been known for everyone. P.S. Reddit - User-generated news links. Where is the link to news (can the author clarify)? 
Would you just relax, man? The post is a reminder to those who may have forgotten about this resource, and news to those who didn't know about it.
&gt;&gt; Would you just relax, man? I already relaxed just because the Dard is outsider among the programming languages created at Google. Compare the Golang and the Dart (Dash) and you will feel the difference. Golang was announced in November 2009 and now has about 350000 projects. Dart was announced in October 2011 and now has about 4.6% (1610) projects comparing with Golang. You can look [here](https://github.com/google) how Google (practically do not) use Dart in their projects (maybe this is also news to those who didn't know about that?). 
So ? What's your point ? Is it relevant with the subject ?
Thank you for linking this, I hadn't seen it before. I know that there are few Dart libraries available compared to other languages but I've noticed that a lot of the things that I would write a library for exist already in the core sdk. For example, I'm a JS/C# developer by day. Many of the most popular npm packages like Lodash/Underscore, express, async, request to name a few have much of the same functionality written into the core libraries for Dart.
&gt; Dart doesn't need nearly as many community-created tools because so much of what is typically required is present in the core libraries You talking about the tools (which are not in the core libraries but they are in the SDK)? Or you talking about the some functionality (which are in the core libraries but they are not a tools but they are in a libraries)? P.S. If you talking about the some functionality (from the core libraries) then you should to know that Dart SDK are very small and contains only basic functionality. Most of the developed packages of Google Dart developers implemented as the outside of the Dart SDK functionality. Most of the developed packages in Dart Web Platform exists as the third party packages (and them not so much, at least for me and for other advanced programmers). So I don't agree with you that "Dart doesn't need nearly as many community-created tools". And nobody will agree with you that "Dart doesn't need nearly as many community-created packages". It is only because Dart ecosystem is very poor (by the amount of exists software in comparison with required software to feel itself comfortable, but do not feel itself as defective programmer when you implement some software in Dart language and cannot to find some functionality for your requirements). Over the past 36 days for Golang was added new 131000 (131K!) projects (statistics from the libraries.io). Dart develops a snail's pace (nothing interesting and useful can be found in the Dart packages and most of them are dead). 
&gt;&gt; The majority of Dart users are those seeking an alternative to straight JavaScript OK. This is for your primary interest (from given by you a link to libraries.io, what is a primary interest here because it is a subject - Dart and other languages in the world from the libraries.io) 36 days ago: - Javascript ~204000 Projects - Dart ~1610 Projects Today: - Javascript ~230000 Projects (+26000 projects, + 12.75%) - Dart ~1640 Projects (+30 projects, + 1.86%) Total activity (not a popularity!!!): - Javascript (12.75%) - Dart (1.86%) I would even say for Dart "passivity" instead activity. Activity 1.86% (30 projects) when a total amount of the packages is not so much (1610 projects) can be considered by me that the Dart are more dead than alive. 
Do I wish Dart were more popular? Sure. Will it be someday? Maybe. I hope you're doing all you can to promote it.
"do not need privacy" What?
Dart does not support tuples even as the types and as the literals (along with lists, maps, symbols, strings, etc). Only after that they (not supported currently) can be added to the function return types. I do not think it will happen in the near future (or ever). I have long been familiar with Dart (since 2011) and see how Dart evolves in comparison with other languages. This will happen (what all we want !!!) is not very soon. It's just empty talk on which there will no any reaction from the Dart developers (as usual, believe me this situations is known from the beginning of 2012). Dreaming is not bad, this is even useful (but not always this will happen). I also hope but I am realist (and I know Dart Team and I know their members and I know what they want and what they cannot even they also want). 
The ternary operator is also an abomination. If-expressions would free is from them. The other workaround, of course, is to put your if statement with assignments in a function, and assign the result of that to a final, but it's not a good workaround.
&gt; The ternary operator is also an abomination. Millions of programmers use it all over the place (including the Dart team). So you're wrong.
&gt; Oh. Well. If some crazy stranger thinks I'm wrong, I guess I'd better change my opinion. Do not need to change your opinion. I don't need this. But my opinion it is ugly to respond in this way (C-like a ternary operator is an abomination) on the work of the respected in the world people (C language developers). P.S. Your lexicon is very good (eg. crazy stranger). 
What happens if you do dart2js and run via chrome?
It seems to build &amp; run like it's supposed to.
Yes, correct. Here is my inspiration: http://demo.marcofolio.net/lights_off_canvas/ I found it prettier to turn the lights on in this case however. 13 and 11. 
I'm in no way an expert, but I think you can only refer to code in libraries that have been imported. You CAN import the library as a name like: import 'dart:math' as coolMath; And use it like: var x = coolMath.min(10, 34); Does that help?
I made it even simpler: https://dartpad.dartlang.org/20f176be0923e5f72ebc50ba45838d01
Good talk
Perfect! [Here's an answer](http://stackoverflow.com/a/19723473/1734975) on Stack Overflow that describes the different things you can do with imports including show, hide and as.
After more than a year of discussion. - Configurable Imports (Implemented?) - Union Types (Implemented?) - Generic Methods (Implemented?) - Generalized Tear-Offs (Implemented?) - Improvements to Type Promotion (Implemented?) Questions for the disscussion: 1. What means a Dart Language Evolution and when Dart will evolve in designated areas? 2. One year and a 4 months is not enough for the evolution? 
Isn't polymer like a customizable front end framework to build material design websites? What's the difference between angular2 and polymer?
Official Informatiom: - Flutter is an early-stage open-source project. We are still missing core features like accessibility, text input, localization, and more. However, you can build demos and examples today. Does this means that Flutter only ready (partially) for build demos and examples and completely not ready for use it for serious use? Who know when it will be ready for real use (but not only with playing with it) or this is a big secret? 
Polymer is for everyone! Angular is still in beta (technically release candidate), so there aren't many Angular component libraries out there yet. There are many, many Polymer components built, however. Just check out places like https://customelements.io. 
https://pub.dartlang.org/packages/firebase - Edit: It looks like it hasn't been updated for the V3 yet, but you could do it yourself wrapping the JS with `dart:js`.
But when angular2 is released what would* be the difference?
Not sure what you're saying here....
&gt; I really doubt Dart support is a priority for the Firebase team right now. Thank you for response. I trying to find any real support of Dart language in any areas, in any organisations, in any well known projects and I cannot find anything serious, no one open source project which intended for mass usage from big and serious companies which well known in the world (whose achievements are used everywhere). It is my personal problem when I cannot find anything (serious) implemented in Dart or it is a real life? How to use Dart if everything is: - Not present as such - Outdated (by some reasons) - Wrapped (but not the original) And besides all of the above there is not too much. 
I have yet to convince my company that it's worthwhile to consider using Dart. But I'd love to! The idea of using a language for both front and back-end development is fantastic and Dart's tooling is way better than anything I've used in Javascript land. I've shared [this article](http://antonmoiseev.com/2015/12/22/compare-ts-and-dart-angular2-beta0-upgrades/) about the differences upgrading Angular2 between Typescript and Dart and people have been impressed. In my perfect world, I'd use Redstone.dart on the back end with Angular2 Dart on the front end.
&gt; Redstone.dart Looks great, thanks for that.
I understand what you're saying, perhaps I choose to believe that Google is playing the long game here instead of trying to battle TypeScript head to head after teaming with MS to support it for Angular2. While Google does not "market" Dart, they have given their support in the fact that one of their biggest products uses it (Adsense) and they continue to support it in Angular2 even if it's a lower priority than JS/TS support (most certainly due to relative community size). I also believe that the Dart community should drive the "marketing" and adoption of the language. I believe that it would be nice to get occasional assurances from Google directly they they will support Dart, and maybe we're getting that with Flutter and Dart with IoT. But again, one project at a time and Dart and the community will continue to grow.
&gt; Dart is a commercial Google project with open source (that is, Google more or less benefit from Dart project and Dart project is not a donation from Google for the world). Can you please elaborate a bit what you mean by this? What makes it a commercial product? Do you mean more commerical than DotNet or more commercial than some Apache project? &gt; Google does not very much loves their Dart Web Platform with its own language. Googles teams choose the tools and programming languages they use mostly on their own. There is not a big strategy from one CIO what tools and languages are to be used or promoted by the whole company, like its done by MS, Apple, and others. The Flutter team decided to use Dart. The Angular team decided to use TypeScript as first language and support Dart and ESx as 2nd language. This has advantages and disadvantages. - A big advantage is that the Dart team will always strive to provide a compelling story to convince more in-house and external users to use it to not become obsolete. - A "disadvantage" is that even though Google has invested and still is investing lots of resources in development, if nobody wants to use it, it will die. The overall advantage is that not the whole Google or Alphabet company depends on a single tool or language. MS fully set on one tool - DotNet, and the result was a gigantic desaster - Windows Vista. They learned only afterwards that DotNet is to slow for what an OS or other large apps needs to provide. It took a long time for MS to recover from this huge mistake. I think the was a huge turning point that allowed Apple and Google and others to take over large amounts of MSs business. Googles strategy is more democratic. If one group makes a sub-optimal decision this doesn't necessarily hurt the whole company. This is like a five-year plan known from communism compared to democracy where from the municipalities or states are allowed to do many things differently. 
If you do plan to use Dart more, [Dart Academy](https://dart.academy/) can be a good resource.
You still seem to care about Dart enough to involve yourself in any such discussion maybe even still use it but you still try to make it look as bad as possible. No sane person would do that. So what's the matter with you?
&gt; I was blocked only because I forecast the Dart future. I guess you should change your name to dangling_oracle then :p So why do you use Dart when you only know bad things to tell about it. Are all other languages even worse than Dart?
Injustice because Google didn't respond to your wishes - poor thing! Could it be the tone you used or your poor English (improved a lot since 2012 though)
Thank you for responding, many of us are anxious to see Flutter grow and with it the Dart community.
Oh I see, but don't you also have to compile Dart into JS to put it into your web project? I know a while before there was a chrome version that allowed you to just run dart, but I forget what happened to that.
I'm using Dart for my internship, so far so great! It's a pleasure to use. Much more organized than Javascript. Easier too. I think development has slowed a bit while everyone is working on WebAssembly. I'm betting once it's finished, Dart will compile to WebAssembly and then continue as normal. Be super performant.
You chose the language to use in your internship or the company you're interning with was already using Dart? I haven't heard/read any news about Dart compiling to WebAssembly, but that would certainly be good news if it meant not having to compile to JS. However I would also be surprised by such an announcement (at least at this time) because of the strides that the team is making on the dart dev compiler and replacing dart2js. I imagine that work would be redundant if the plan was to compile to WebAssembly.
The Dart VM already exists. That's separate from javascript. They'd switch from Dart VM to WebAssembly. So we'd still have two paths, normal Javascript and WebAssembly. Not all browsers will support WebAssembly. Especially outdated ones. Javascript will be the fallback like how it already is when the Dart VM isn't detected. I had the option to choose the language. Now I have a team that uses Dart. We're just making browser based editing software.
Dart developer for the past year and a half with &gt;100 other devs. Background is 4 years Java, 4 years JavaScript &gt;100 devs, 1 year C#, 4 years Python. I use Dart for work and for side projects. Dart is easily more productive than JavaScript in larger developer groups, especially as code bases grow. The language is young enough though that you'll be upgrading a lot, and the language itself is still somewhat shifting, but not to a fantastic degree. I've really enjoyed built-in dependency management, building, serving for local testing, tool support in IntelliJ/WebStorm, Sublime, Vim, and Atom, excellent support for code transformers (though not so good with minifying that code without some extra work), and excellent frameworks for React and Angular make it familiar to new devs. Explicit but optional typing is a nice bonus for me, especially after so much Python. Less likable: while calling JS-&gt;Dart is easy, harder is calling Dart-&gt;JS, and there's a lot of performance caveats both ways that can be handled but can be tricky. Stack traces are a struggle in production code (since it's transpiled to js and minified, so it's like any other front-end app). Backend runs in a VM ideally. People coming from JS will love Streams/Futures for event handling with pub/sub patterns. People coming from C# should be able to build applications with similar patterns (I know Java/EE better than C#, but it lends itself well to MVC applications and annotation-driven frameworks with dependency injection). My server-side knowledge is more limited, and mostly relates to filesystem actions or HTTP requests. Both are easy. I have a docker container running a dart application on my fileserver that started as one fluent expression ~50 lines, so it's easy to write (using shelf and path). Now it can index ~3 million files on a Synology DiskStation in ~3 minutes (with hashing disabled, which is really slow on it), so speed is definitely possible. The community is small, but extremely active. I don't have anything else to compare it to, as my experiences with Python and Java likely aren't representative of the community as a whole.
I'm aware of the Dart VM. What I'm not aware of is any plans to compile to web assembly by the Dart team.
Talk to them on the Dart Slack channel.
&gt; No sane person would do that. &gt; So what's the matter with you? Not saying you answered your own question, but... Just FYI, I've got this user tagged as a possible troll for a few days now. Maybe that's not exactly the case but this user's behavior is really strange.
Polymer is a fine choice, I personally pair it with Angular2 but for what you're describing it will be fine on it's own. Look into something like: https://pub.dartlang.org/packages/sqljocky for connecting to your MySQL DB.
cool thank you :) And thanks everyone for the answers above!
I made my own. Wasn't very difficult. Not sure if I can share the code though. It was for work.
no problem. I think I can handle this :)
Just a couple of points, idly, to ponder: http://news.dartlang.org/2016/03/the-new-adwords-ui-uses-dart-we-asked.html Clearly, it is being used for some very serious stuff. ...but on the other hand, Goolge I/O was last week, and there was a lonely cold wind blowing tumbleweeds across the tundra on dart: https://www.youtube.com/playlist?list=PLOU2XLYxmsILe6_eGvDN3GyiodoV3qNSC Not a thing to be seen, except for a few 3rd party apps. So clearly it's not what you'd call, 'a shiny toy' to wow people with at this point; it seems to be falling closer in as a replacement for GWT; solid, performant, reliable, not widely used outside of google (just like GWT).
Whether Dart supports other popular frameworks? Eg. [React.js](https://github.com/facebook/react/), [Backbone.js](https://github.com/jashkenas/backbone/)? 
Hi, we're planning to release high-quality, production-ready, purely-dart Material Design components for Angular 2 Dart. I wish it was ready right now, but it's not. And we don't want to release yet another half-assed web widgets framework. The Angular2 Material project you're mentioning is trying to get MD components to the broader Angular2 JS+TS+Dart world. Internally at Google, though, we use the aforementioned Dart components that we hope to open source. I think it makes a lot of sense to de-duplicate and offer the components we're building upon ourselves. My recommendation is: assuming you're *not* releasing to production anytime soon (since you're just starting the process), go with Angular 2 Dart and focus on the app logic and higher-level components, using whatever there is for lower-level stuff. It will be easy to switch to the material design widgets when they're ready. If you *are* releasing soon, I'm afraid I don't have a good answer for you (but I hear good things about the Angular+Polymer way popularised by dart.academy).
As i understand its what dev compiler (currently in beta) is supposed to do. 
Nah more so - write my entire "app" in dart, run the compiler `dart2js` and be able to expose an entry point to use in Node apps.
That's pretty amazing!
Yes, I've done this. In the main dart file, I defined a map pointing to everything i hoped to expose. Then I injected that map into the js context as exportedName. I made a js file with module.exports = window.exportedName. I added both of those files to the web directory so the d2js builder put them in the build/web directory. The js file should be exported as your main from package.json, and any app that installs your package will have to import the compiled dart.js file so that your exported map is available. There are a lot of moving parts, but it is definitely achievable.
And who is increasingly using D recently?
The index doesn't necessarily reflect use. It seems to have more to do with "popularity," as defined by buzz. Check out the [index definition](http://www.tiobe.com/tiobe_index?page=programminglanguages_definition) to learn more about how they get their results.
I was just wanting to say the same thing. I wonder how this metric is made. I wish Github had statistics on this somewhere.
This paragraph from the TIOBE site might give some insight: &gt; The TIOBE Programming Community index is an indicator of the popularity of programming languages. The index is updated once a month. The ratings are based on the number of skilled engineers world-wide, courses and third party vendors. Popular search engines such as Google, Bing, Yahoo!, Wikipedia, Amazon, YouTube and Baidu are used to calculate the ratings. It is important to note that the TIOBE index is not about the best programming language or the language in which most lines of code have been written.
I imagine there will be some talk about plans for Dart 2.0.
If only! Perhaps you could make that happen. :) Though it seems like Flutter could be on this path...
This has been asked and discussed several time in the misc@dartlang.org mailing list. There is not and it is not going to happen from Google's side. So either the community builds it, or it won't happen But it seems like [Flutter](http://flutter.io) might be a better option to create desktop apps with Dart. It's also built on the Chrome engine, but it allows for much more performant applications than when creating Web Apps using the DOM. It's only focused on mobile apps for now, though. 
I'm really looking forward to Angular Material 2 for Dart and some sort of Angular Universal solution for Dart.
Hi and thanks for sharing the link Darkglow666. If anyone have any questions or want to discuss Sourcevoid, I'm here to answer. I'm the founder of Sourcevoid.
Are you the same people as DartVoid?
Does it also support easy Dart application uploading or Git-based deployments?
By and large yes, Sourcevoid can be seen as a continuation or a pivot of DartVoid depending on how you look at it. There is a longer explanation on the relationship between Sourcevoid and DartVoid at the beta landing page: https://www.sourcevoid.com/cloud/beta
I would say both, Sourcevoid support deploying directly from Github where you can select either a branch or tag and deploy it directly (branches will be updated on each commit to the Github branch). We also support archive upload (zip or tar.gz) for an easy no fuzz alternative when setting up a Github repo is too much hassle. Sourcevoid has all the Dart support DartVoid did and more. We have also made it so that we give the user a little more choice and flexibility. DartVoid like many PaaS like platform forced the user to have a specific directory layout for things to work, on Sourcevoid that is optional. You can still deploy a Dart client or server side project as is and our system detects the pubspec.yaml and setup accordingly though. Here is one client and one server project like that (ignore that fact that each project is an subdirectory and not seperate git repos): - https://github.com/Sourcevoid/hello-world/tree/master/redstone - https://github.com/Sourcevoid/hello-world/tree/master/angular-dart While that is something that works great for simple test projects, we found that often developers for various reasons needed a different file structure to fit their project, we can take this repo as an example (I believe it might be yours sroose?): - https://github.com/stevenroose/watch-with-me Here I assume it was just logical to group these for components into a single repo, the shared issue tracker might be a big benefit for example. On Sourcevoid you can deploy a project like that without changing the file structure, you would deploy the "gaze-backend" and "gaze-web" directories as separate environments as part of a single app and setup different source root's when you create the environments (you also need to add a public path to the static client). On DartVoid you could not have deployed that project without doing changes to your file structure. We don't think that is the right way to go, the platform should be able to adjust to your needs in this case and not the other way around. I tried to deploy that project just now as I described and it seems to works well. The only changes I did was to change a git submodule import (to a relative path import) and the url the client uses to connect to the backend. Going further on the subject of flexibility, DartVoid did not support tools like grinder where you want to specify a custom build process, it was pub build all the way. If pub transformers would have become "the thing" then maybe that would have been okay, but at this point pub transformers have a bit of a bad rep and they are not used a lot outside of some special cases. Sourcevoid allow you to use grinder or some other Dart or even Nodejs build tool for you build process. You can have both pub build and some Nodejs build tool working together if you want, each build step is completed in separate containers. Now all this flexibility and options might seem overwhelming at first, but there has been a lot of thought behind all of this and when you start using it I think most users will be up to speed very fast when they get some practical experience. 
Sounds good! When you get a moment, feel free to experiment a little with Sourcevoid, would love to hear what you think of the UI and the overall user experience. My test app is live here: https://frontend-watch-with-me-test.sourcevoid.net/ I'll probably take it down eventually, but for the sake of this discussion it could be nice to see that it works. Not sure what it should do but it keep changing the background images from some feed it seems. Ps. Not to nitpick, but for clarity I should say that it's "Sourcevoid" with a lower case "v", we changed that from the "DartVoid" with an upper case "V". It become simpler and less variations as we already have the all caps variation in the logo. Ds. 
Thanks for posting this! [Here's the link to part 1](https://medium.com/@thebosz/growing-away-from-gamemaker-de5fd4d39c7a#.1er7gv6sn) I'm happy to answer any questions!
Absolutely! I'm planning on doing lots of code samples and tutorials. These first few posts are just to set the stage and are prose-heavy because I've been writing them from my phone as I've been putting the baby to bed.
From everything I've read and looked at, they're directly comparable. StageXL is based on a Flash/Actionscript framework but I don't know what PixiJS is based on. I'm using StageXL WebGL renderer because it's faster than the Canvas2d one. I'm grateful that StageXL exists and it's definitely good enough for my fairly some card game.
So StageXL does have a WebGL renderer. That's interesting. I'm developing a game with Dart, but I'm not using any framework, just the game_loop package. I was planning of introducing PixiJS through JS interop for more eye-catching graphics, but maybe StageXL can serve my needs. I'll take a look at it.
There's not really any documentation for Polymer 1.0 in Dart though. It's almost all outdated. Are all the attributes/properties for pre-built components pretty much the same as what's documented for the JS version? And is there really a release imminent? Issue 682 is still open and there hasn't been a commit since April.
Looks a lot better than the old site. Good job guys.
Looks good, but why is there no "download" button/link on the landing page? I don't like having to hunt around the site to get to the goodies. :)
flutter is sort of like this - dart running inside of a native bootstrapper on android and ios. I took a look at the sample apps for android and unfortunately the performance was pretty underwhelming, which will always be the case with a hybrid approach like this unfortunately :(
Makes me wonder if a UI framework (like Adobe Flex) could be built atop the [StageXL library](https://pub.dartlang.org/packages/stagexl) for Dart, which uses canvas and WebGL.
I was hoping to install it via a package manager, but if I need to install it manually I guess I can do that...
Of course it could. In fact in Flash world, that's what the Feathers project did. It created a component set on top of Starling, which is a Flash 2D Display List implementation running on Stage3d. The analogy is: stage3d=webGL/canvas2d, Starling=StageXL, and Feathers=&lt;&lt;ToDo&gt;&gt; Starling and StageXL are so close you can probably just use Feathers as a guide. 
This is very good to hear. When I used Angular with Dart, it felt very odd and out of place. I eventually abandoned Angular with Dart because I felt like the base language worked better.
Anyone who knows typescript and dart, could you chime on the use cases and pro/cons for the two.
Is there object oriented syntax in dart like there is in TS? I'm especially new, but i heard that was the reason TS was the default language of choice with ng2
We use it both server-side and client-side. It is awesome, except the new test runner is crap. It runs on a different origin and usually things async tests stop before they're finished so they fail. We've been back and forth with Natalie about the bugs several times, and she always blames other people for the new Dart test runner problems. Other than that, Dart has been awesome.
Natalie W. always pretty hateful answers instead of solutions. The Google Dart team strongly recommended we buy ItelliJ, but we can't even get debugging to work. She always blames someone else: https://github.com/dart-lang/test/issues/409 She attacked us instead of attacking the problem. That was very unprofessional of her.
This. It was hard to find before, but it's even harder to find now. We hire a lot of contractors, and getting them started with Dart is a pain.
What you're talking about is called a dogmatic OO language, like Java, where all code must be in a class. In a pure OO language, everything is an object, even integers and boolean values, which are specially treated primitives in most languages. Dart is a pure OO language. I am also very glad Dart isn't dogmatic. 
So just to be clear this is laying foundation for Flutter?
Aww yeah. Cannot wait for the dev compiler to be ready for production!
Oh cool, will the AOT compiler be able to Target Android ARM/x86 as well as iOS? Have you guys been working on the JS compiler speeds at all? Its cool that theres a Dart VM, but I always wished I could just compile to JS super quickly. Thanks keep up the good work guys!
Sweet, the DDC compiler produces human readable js right? Is that easier to compile to faster vs minified js? Thanks for answering my questions it makes me a lot more confident about Darts future.
Can someone explain to me what `State` and `Store` are? I'm trying to understand what this is, but I'm drawing blanks.
This video should shed some light: https://egghead.io/lessons/javascript-redux-react-counter-example
Sweet!! Will definitely try it out
I don't know all the features the Atom one has, but please do raise GH issues for anything you think should be added (and how important). I'm trying to decide what needs to be done for v1 right now.
Why is Dart moving away from Slack?
I guess the move isn't assured. It's kind of being tried out. But one of the big reasons to do it is that Gitter is open, unlike Slack where you need to be invited. Gitter is like the IRC of GitHub, and if Dart is there, people can just run into it. Lower barrier to entry. Personally, I think I like Slack better, but we'll see what happens.
Why not freenode just like every other projects??? 
You use dart:io on the server side and dart:html on the client side. They are very different from each other. Check out a few examples of their use: http://stackoverflow.com/questions/22417566/dart-how-to-code-a-simple-web-socket-echo-app https://gist.github.com/mitsuoka/2969464
Sorry, I misunderstood your question. Server-side/vm WebSocket clients are supported. From: https://api.dartlang.org/stable/1.18.1/dart-io/WebSocket-class.html "A two-way HTTP communication object for client or server applications." There's an example at https://www.dartlang.org/dart-vm/dart-by-example
what about discord? :)
but no voice lobby iirc
I would assume changes go to the TypeScript version first, then applied to the Dart version just like before. We'll just have to wait and see. But part of the separate teams means the Dart version can be more "darty", so we may actually get updates faster or slower depending on the implementation decisions the Dart team makes.
I feel like dart works well with intellij?
Could you elaborate on the differences? I was almost about to buy webstorm, but i just can't agree with their price model as i'm going to be intermittently using some parts of that software while i use atom/vim for everything else.
Stagehand was what I was looking for, thank you. I think I can follow along in the book using Stagehand. 
Which still costs money and not everyone has it. I don't see all the hype surrounding the IDE, personally and I can't justify paying for it. It sounds like OP wants a purely free (as in beer) way to write code.
Check out [Dart Academy](https://dart.academy) for lots of great tutorials, including one on setting up Dart with Atom.
Nice! I'll check that out? Does it integrate with stagehand, or do you just use stagehand from the command line?
Might be not as good since community doesn't have web enhancements, but it should still work great for dart
Community edition
:) If you do check it out, please do send feedback for anything you don't like or think is missing! I'm still learning both Dart and Code so external input is invaluable!
I've not seen the gateway timeout. For your manual addition of the .js you need to use browser.js: &lt;script async type="application/dart" src="test.dart"&gt;&lt;/script&gt; &lt;script async src="packages/browser/dart.js"&gt;&lt;/script&gt; Also check out this transformer so you don't get that 404 on the dart script: https://pub.dartlang.org/packages/dart_to_js_script_rewriter
Until Dart starts to make progress with its test framework, I don't see many big companies adopting it. It's a mess.
Dart uses .dart
Geez , now I wonder why vim doesn't color code it..
Aaah sorry I can't help you. I'm not a vim user. For w/e its worth to you I use Intellij's IDEA and it works very well. The community edition is free if you want to check it out. 
It only says that if you're looking at the old 3.0 stuff. at the top of the page you can change the version: https://pub.dartlang.org/packages/polymer_elements/versions/1.0.0-rc.9 Scared me for a second though!
Gotcha! I didn't realize the versions were split like that on pub, it's a little misleading. Thank you (:
The error message is a little confusing here. (Natalie is working on improving it.) &gt; Why is it that I cannot get the 0.5.6+1 version? It means some other transitive dependency is disallowing it.
It is both serverside and clientside language. On clientside, initially Google intented Dart to completely replace Javascript in browser. Well, at least run Dart within its own virtual machine. Google hoped other browsers will catch this proposal. It hadn't happen unfortunately. &gt; why not then just write Javascript? If you like writting Javascript, then write Javascript. Dart for those, who wants sane language in place of js.
Dart is designed for building web applications. It can do much more than that - you can even write mobile applications with dart, servers with dart, CLI tools with dart. However, JavaScript was never intended to build web applications, where Dart has much more benefits when you are looking at designing a large scale system: Types, native SDK, tooling, analysis, standards, integration with Angular 2.
In my opinion, Dart is the best language to use for writing web apps, and among the best for server-side code.
&gt; As far as I understand it's being compiled into Javascript, why not then just write Javascript? Some people believe JavaScript is a poor language :) It has a lot of [unexpected](https://www.destroyallsoftware.com/talks/wat) [behaviour](https://twitter.com/DanTup/status/767395007254978560) and lacks type safety. The [Dart homepage](https://www.dartlang.org/) has a "Core goals" section which summarises fairly well.
Admittedly, the packages for SQL interaction need some love, but if you make heavy use of databases like Firebase, as I do, things are good. Dart's flexible types, awesome core libraries, async support, and built-in modularity make it easy to produce useful server-side and utility scripts at high speed. If I need a quick command-line utility, I always go to Dart first. Dart's relatively fast execution speed makes it a good choice, too. It trails languages like Go a bit, but for most applications, not enough to matter. On a side note, I'm in regular contact with the Dart team, and they are not unaware of the database driver situation. I have hope that it will be addressed.
Flutter tracks Dart releases very closely, so they probably already have it. I don't know about Brillo.
&gt;I code frontends in dart and its great, but out of curiosity.. what makes you say its one of the best for backend? I'd push back on that. Server-side developers have a lot of very good options. However, it is a nice fit for any use case that calls for Node. 
Finally, this is really awesome news!
Yes, that makes sense. I compiled a super-simple module to js earlier, and i could barely recognize what came out. My 6 LOCs came out pretty enormous, and the main() method was making implementation tricky. This DDC is very interesting. (Honestly, it makes me want to peek back at the FlexJS Project) Eh.... Till DDC is out.... Looks like I'm going to keep using TypeScript for my simples. :( It's such a touch spot for a dev. I'm happier in a js superset, but the better superset is Microsoft :(((( 
Yes. It's terse and the standard lib does all the usual things. DartPad works fine for small programs.
I used dart to complete adventofcode.com I find it to be nearly as productive for quick scripts/code challenges as Python is
oh wow that's really amazing. Could I ask you why you did so in dart?
Until the Dart team finishes their Material Design widgets and releases them, there are only a few options. First, you can use Polymer, and there's a [pretty thorough article](https://dart.academy/dart-angular-2-and-polymer-together/) for getting started on Dart Academy. Other than that, there's [Angular Material 2](https://pub.dartlang.org/packages/material2_dart), but that's pretty alpha.
in puzzles and what not, you can only use standard libraries though. In that case, which one would you use?
I'm actually glad to hear this. Google is already working on Brillo, so the Dartino thing seems a bid odd. I think they would have a better time porting Dart to JVM byte code or something so it could work on top of Brillo. A lot of embedded things already run paired down JVMs. 
NOOOOOOOOO
They will probably continue later. Flutter is really critical for fuchsia i'm thinking for the UI at least.
naturally the question is why develop this for vsCode instead of atom?
That doesn't seem like a very natural question to me (it suggests Atom is obviously better, in which case, why would anyone be using Code?) ;-P But that, aside, there are a couple of reasons: 1. Atom already has a Dart extension (created by members of the Dart Team) 2. I started work on Dart support for (Fat) Visual Studio many years ago and gave up because extending VS sucked; Code seemed like a good way to finish what I started 3. I prefer Code to Atom (they're not massively different, I just quite like Code) and I'm mainly developing this extension my own use (selfish as that may be ;-)) 4. The only existing Code extension for Dart is not great; so it seems liked a good opportunity for an OSS project that could do quite well :-) 
Hi, thanks for the awesome plugin you're working on. Just to point something. Sometimes the analyzer stucks and there's no other way to reset it than closing the program and opening it again. Or maybe there is a way and I don't know how.
mm i see, but wouldn't it benefit the community more if the dart crowd was unified on Atom? I guess what I'm asking is why do you like Code more?
Atom is a good editor but use a lot of resources compared to Code, also I had bad experiences with the editor. It crashes a lot. I love the way vsCode works, the left buttons panel (without the need to install extension), also per project configuration. Right now I have Atom opened and is using 300MB of RAM and vsCode just about 100MB.
Could you raise a case on GitHub with as much info as you can? To avoid restarting the program, if you open the command palette and run the "Reload Window" command, that will restart the extension without totally killing the app (though it's not much different to a restart). There's some debug logging that might help track this down; if you raise a GH issue I'll add some notes.
&gt; wouldn't it benefit the community more if the dart crowd was unified on Atom? Wouldn't it benefit the community more if they had more IDEs to choose from? It doesn't have to be one or the other; we can have all functionality in both! I doubt there's anything I could add to the Atom one, it likely has all functionality Dart Code has. Me spending time on VS Code does not mean the Atom one is missing out on anything; we can have everything in both IDEs! :)
What exactly are you trying to do? Prevent a Rectangle instance's member variables from being set? It looks like what you're doing would work, but you shouldn't need a second class to do this. class Rectangle { num_x, _y, _width, _height; num get x =&gt; _x; num get y =&gt; _y; num get width =&gt; _width; num get height =&gt; _height; Rectangle(this._x, this._y, this._width, this._height); Rectangle clone() =&gt; new Rectangle(_x, _y, _width, _height); static final EMPTY = new Rectangle(0, 0, 0, 0); } main() { Rectangle empty_rect = Rectangle.EMPTY; Rectangle empty_rect_2 = Rectangle.EMPTY; print(empty_rect == empty_rect_2); // prints true Rectangle third_rect = new Rectangle(1, 2, 3, 4); print(third_rect.x); // prints 1 empty_rect.x = 10; // fails: Class 'Rectangle' has no instance setter 'x='. }
I'll miss Dartino. I hoped that it would give us Dart that was a little more independent of async by default. Now we have to look forward to projects like Flutter, Fuchsia and Dart AoT. I was in fact just watching this video of Kasper talking about Dartino: https://www.youtube.com/watch?v=t4IUhsuhnXw As we lose Dart runtimes (browser and Dartino), it also means that the community has to wait longer to grow bigger. And we have to choose alternative platforms instead, further engrossing the already popular alternative platforms.
You've got to take Dart with you. I've used it at my past two jobs. The first was a gigantic corporation (thousands of employees), and my current job is with a very promising startup. In both cases, I personally championed Dart, convincing my employers that it was the best fit. I find that with enough exposure, most reasonable tech people see Dart's strengths and recognize that they greatly outweigh any weaknesses. 
Wowww. Cheers to you man. I've seen you around this sub really frequently. What do do you usually say to argue Dart for a certain project? What arguments do you get in return and how do you counter them? Not really confident, but I know for sure that I love dart
haha touche. I was going to do my own searching after reading your reply, but maybe you already know of a few dart project scaffolding tools that we can use for some quick prototyping?
I just used Polymer at first, and now Angular 2 and Bootstrap 4. With those, Dart makes it easy to get things working fast.
Really? I thought angular2 had little support for major CSS frameworks as of currently. Maybe that's the typescript version, because someone made a MDL angular2 thing that made the two work together fluently. So you use angular2-dart i'm assuming right? Man I can't wait to get to use dart in serious projects :)
Ok, so I found two other ways, I'll write them here if somebody feels them useful: So I've found that you can have *final* properties that are not final in the child classes. But it raises a *NoSuchMethodError* when trying to set the properties because in fact there is no such setter for them. That would happen also in the code I first posted. To solve this you have to handle `noSuchMethod` method. class RectangleBase{ final num x; RectangleBase(value):x=value; noSuchMethod(Invocation invocation){ if(runtimeType == RectangleBase &amp;&amp; invocation.isSetter) return; else super.noSuchMethod(invocation); } } class Rectangle extends RectangleBase{ num x; Rectangle(value):super(value); } The other way requires te use of abstract classes that act as interfaces. You will need 3 classes, the interface that have some common methods implemented (those that don't modify the properties), the other methods just declared; in the inmutable class declare your properties final and your constructor to set these values, implement the methods calling the super abstract class for those method that don't modify the object properties, the other methods just leave them declared. In the other class(that create mutable instances) don't create the properties as final and implement all the methods and call super if needed.
The ng_bootstrap package is for Dart only, though there may be a separate effort to port Bootstrap 4 components for JS/TS. I don't know of a Dart-compatible MDL package for Angular 2. Polymer is the most complete set of MD components currently available that will work with Angular 2 Dart, but using those does have a few challenges, some of which have been addressed in tutorials on Dart Academy. So right now, there's not a perfect solution, but many promising sets of Angular 2 components are on the horizon, so things are getting better every day. 
Yes. 
As of now, some of Polymer's more advanced styling options only work within the context of Polymer components, so if you're using those components in an Angular app, you can occasionally have a problem with styling. Also, as noted in some of the Dart Academy articles, you often have to create Angular directives to bridge the two worlds. With a suite of Angular components, you obviously wouldn't have any of those problems. Whether you should migrate any particular project depends upon that project's needs.
You may know that last year, Firebase joined Google. At that time, the era of Firebase 2.x, all the docs and guidelines were located here: https://www.firebase.com/ Since then, they've been hard at work updating their features, pricing, and APIs. As of this writing, the Firebase API is at version 3.3.0, and their site has moved here: https://firebase.google.com/ Both versions of the API still work, but 2.x lacks support for any of the new features. The 3.x API was released for JavaScript a few months ago, but only recently has Jana Moudra done the Dart community the fantastic service of wrapping the new API for Dart. Firebase is my favorite web database. I use it on many projects daily.
Firebase makes use of lots of Google's services behind the scenes, but Firebase is extremely easy to use, unlike the others. I don't use Google's cloud services directly, but I've read some docs, etc. And yes, Firebase has a very generous free tier.
Awesome! Then I'll have to pick up firebase :)
How do you use Material Design Lite with angular2-dart?
I use WebStorm, mostly. For now, when I want Material Design, I use Polymer components in an Angular 2 app, though I'm anxiously awaiting the release of MD components for Ng2 Dart from Google. I also regularly use the ng_bootstrap package, which is Bootstrap 4 CSS and components ported to Ng2 Dart. Aside from that, I'm a heavy Firebase user.
I'm just using angular2 mostly for the router and switching views for a web portal/SPA. Each view is an angular component, which can contain whatever HTML you want. So you can just include the MDL javascript file on your index.html and then use it's classes on all your views. I'm mostly using things like the cards, nav drawer, header, and the grid layout. Then using the Angular bindings and conditional HTML tags. There is an angular2_rbi package that has the MDL stuff as actual directives, which was much easier to use IMO than the primary MDL Dart package.
I'm sure there's probably some functionality that requires it (take a look through the package contents) like control of animations. 
Too bad its just another "why this language is great" instead of solving some common programming pattern video. But thumbs up for getting more people into dart.
You can use the CSS natively, but not the JavaScript. The ng_bootstrap package has Angular 2 components (dropdown, accordion, etc.) written with Dart. They're very nice.
what if at the very end of your coding, you transpile to JS and then you would be able to use bootstrap natively right?
oooh i seeee. thanks darkglow!
Thanks for the heads up! :)
I think I can shed some light on this, as I've spoken with the team and they've indicated that they want to get a few more major enhancements into the framework before calling it good. Here are the main points regarding the imminent release of Angular 2 for Dart: - it'll have a much better template compiler - it'll have significantly faster execution - app size will be reduced - the release of 2.0 will be in time for the [Dart Dev Summit](https://events.dartlang.org/2016/summit/) (late October), with all these improvements, plus some surprises
How are you so close with the Dart team haha. But there will be no breaking changes right?
I'm a Web Technologies [Google Developer Expert](https://developers.google.com/experts/all/technology/web-technologies) (GDE).
I've often had to resort to reading the core (or other) libraries' source code to figure something out. At least Dart code is so readable I've never had any problem doing that. Contrast that with having to read any Javascript source, which can be extremely painful.
I agree with the ranges. 
Just something I am interested in
No it has no connection to WebGL. It's actually running the DartVM. All the main rendering logic is written c++.
So are we talking complete custom open gl implementation then? Or creating the vr app in something like ue4 and hooking into it via dart? What's the gameplan?
To put it simply. I'm building my own game engine that uses Dart as the scripting language. Like Unity uses C#. However, I use the word platform because it is my hope that it will be web based. Very similar to a web browser but for VR. I know Dart failed to make it into web browsers. But I firmly believe that Javascript will not make the cut for VR.
Unity also runs in the browser via WebGL does it not? How are you planning on running your engine in the browser?
Is it just me or is anyone else super excited just by reading the **names** of the talks? I can't wait!
It's clear that for the past year or two, acceptance of Dart external to Google has not been a priority for them. They do seem to be slowly turning their attention outward again, however.
Haha, wonderful. &lt;!-- Why don't we use Dart here? This is a one-shot marketing-y microsite. The only scripting you'll see here is the simple distortion effect on top of the page, and 'smoothScroll'. That's not a job for Dart. It's a job for jQuery, at most. --&gt;
Where do you find this stuff? I'm just refreshing waiting for the next darkglow post
Some IDEs have trouble dealing with user input within their built-in terminals. I haven't tried it in Atom, myself. Have you tried running your script in a standard terminal? I realize that's not the ideal debugging scenario, but if it works there, you may have one more clue for solving the problem.
Yes. It works in a standard terminal. But while debugging with Atom, I can't even see how to enter standard input.
I got top 10 libraries from pub packages. dependencies: browser 277 path 217 logging 215 args 131 meta 123 http 117 google_oauth2_client 115 unittest 115 quiver 104 polymer 98 dev_dependencies: test 628 unittest 568 browser 203 hop 141 grinder 55 path 51 mockito 39 mock 37 benchmark_harness 33 http 32 more details: enter \*:\* at https://ouava.github.io and locate 'dependencies' on the left panel.
here is python, same as dart http://codepad.org/crR0XEGe
It is a serious language. Google uses it for a lot of internal tools, for adwords, their Fiber boxes, and it's the main language for Google's Fuschia OS. It may not be used by many companies outside of Google, but with the backing and use of the language by Google, you can be sure that this is a good, serious language
The company I work for uses it almost exclusively, and in the places where we have Go or C# code, we're just trying to find the time to port it to Dart (client and server side). There are some languages out there that get worse the more you use them. Dart is the opposite. We all find that the more we use it, the more we like it. Google's use of the language in AdWords assures its survival and even that it will thrive. Google has written millions of lines of code with Dart already. It has some popularity outside Google, but not much within the U.S. (yet). This isn't necessarily a big problem with the online, global community at your fingertips. In Dart's early days, Google expended lots of effort on outside adoption, but then it went quiet for a year or two as they concentrated on internal customers. There are whispers that the tide may be turning once more. And remember, Dart does _not_ need to unseat JS to be successful. It just needs to be one of many great options for web dev. On the desktop, you have lots of choices. It's great to have that on the web side, too. Try it out! [Try the Tech Stack Powering the Next Generation of AdWords](https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwiC-9KPprLPAhUM7mMKHZbuAzEQFggcMAA&amp;url=https%3A%2F%2Fcodelabs.developers.google.com%2Fcodelabs%2Fng2-dart%2Findex.html%3Findex%3D..%252F..%252Findex&amp;usg=AFQjCNGaM-jVv6VFpBF1YfQrFz_njQefCw&amp;sig2=_xp2PElX3QQdASqY0WF0eQ&amp;bvm=bv.134052249,d.cGc) [Angular Quickstart](https://angular.io/docs/dart/latest/quickstart.html) [Dart Academy](https://dart.academy)
It does tree shake so that's something to note. It'll drop all unused classes and methods. I've come from a Java and C# background and Dart feels right at home for web development.
Would you mind elaborating on a few things? &gt;massive productivity boost. How has it been a massive productivity boost for you? &gt;I no longer need to worry about what transpiler/test runner/coverage collector/bundler/etc to use. Can you just expand on that in general? &gt;Admittedly this is only a problem for people like me who want to test and play around with the latest tools that become available. How does Dart let you play with the latest tools that become available? Or is Dart just one such "latest tool"? &gt;I had been using TS (which had been a massive help in creating a maintainable code base) How would you compare Dart and TS in this area? Equally helpful, since they've both got options for static typing? Or is one better than the other for code maintainability for other reasons (and what are they)? &gt;Nothing spectacular (one reason why I chose it) You chose it because it's nothing spectacular? Thank you. I enjoyed your first response, and am very interested in hearing more about your experience with Dart thus far.
I'm really hyped for Dart Summit and between DDC, TS definition converter, and Flutter I think the Dart team(s) are really hitting the nail on the head here. 
Thanks!
Forget about polymer, angular2 all the things...
A 4 year old server side programming language, that doesn't have a mature Mysql driver yet. Dartlang is classic a story of good engineers doing only 'cool' things, not understanding their business, and ignoring all the 'boring' things that actually make a business tick.
At least you tried It?
Tons of people! Where I work, [Vutiliti](http://vutiliti.com/), our front-end and back-end stuff is done with Dart. Angular 2 on the front, of course. It's a fabulous experience. When we need the occasional JS library, like for charts and things, using the new JS-interop package is a breeze. Can't recommend it enough.
Are you hiring?
Wow, that looks incredible. Even angular2dart is on beta stage, the people are using in the production. Can not believe it. I am thinking to switch for frontend development to dart and back end elixir for sure. 
Look at Stream in dart:async
Isn't that just how Dart works? I love to use dart because of the async API and that you can choose to work with async/await or future/stream or even mix them up. Never heard of that "reactive" term, maybe just a hype way to say asynchronous API.
I found Angular2 in Dart to be a better experience than the JS/TS versions. There were decent Bootstrap and Material Design Lite CSS packages for Ng2 available as well, makes everything a breeze.
Dart has built in async support. Look at the 2 one hour code lab projects. The second tells you how to use async and await. You can also look at the documentation on dartlang.org
There's not even documentation about running Dart on RHEL or CentOS, you think they're going to support Alpine? You should be able to get it running though from source.
&gt; There's not even documentation about running Dart on RHEL or CentOS Oh well... I didn't know *that*
Anything else you can say about the summit? I can't afford to fly out :(
It is. But it's pretty popular for smaller docker images, so I assumed someone would have made an Alpine-based docker image by now.
The site is events.dartlang.org. We'll be recording all talks and there will be live streaming. 
&gt; Bootstrap and Material Design Lite CSS Where can I find it?
OK. I will start learning angular2dart.
Any value other than `true` is falsy (production mode) https://dartpad.dartlang.org/e65d2bb8a7ca6ff059f50646aac810ab From the [language tour](https://www.dartlang.org/guides/language/language-tour#booleans): &gt; When Dart expects a boolean value, only the value true is treated as true. All other values are treated as false. Unlike in JavaScript, values such as 1, "aString", and someObject are all treated as false.
Hey thanks, that's a much better explanation and it is on the language tour, don't know how I missed that.
I'm still learning as of now, but google made [this](https://ausvotes.withgoogle.com/?center=-26.539285,131.314157) website with angular2 and dart, and it's open source [here](https://github.com/google/election-au-2016)
This example has zero uses of CanActivate or Can Deactivate. In fact i don't think it uses routing at all.
Even with all this news of Google using Dart internally, I'm having a tough sell here trying to get management / client on board (SaaS product). They don't have to deal with the alternatives, and think Dart is some experimental thing where TypeScript is the future.
What would help you make your case to the management? 
Probably more external adoption?
Sounds like your management is not too bright. I feel you. I have dealt with retarded management before but I gotta tell you my patience for those types is close to zero these days. It's my experience that a company run by idiots like these is on it's way down and it's best to jump ship before it sinks.
That's really the crux of the matter. Dart's not really going to win over the mostly static, simple CRUD, fancy UI lib, fancy animations, web site devs of the Internet. I see Dart as more of a saner enterprise solution for managing big applications, and in the web world too many devs equate "application" with web site, so they see their JS tools and frameworks as all you need for big apps. Which only proves these people that are constantly switching tooling, refactoring their code, and using the latest and greatest frameworks are not really working on apps that are that big are they? If they were, they'd be criticizing JS and not Dart.
Can anyone elaborate on "strong mode Dart"? Strongly typed dart?
I'm not OP but I feel him. 
I was under the impression that Dart was already strongly typed, but I could be wrong. Would also like some elaboration on this.
Optionally typed (the best kind of typed, imo) -- you can declare everything `var` if you feel like it. Strong mode does more static checking to ensure that where you're using types you're using them correctly.
For people like me who came to Dart from languages like Python and Javascript you might not want to because you have tests and the code works and you use types essentially as documentation and whatnot, but I suspect the answer will increasingly be no and strong mode will become the norm. I've seen a number of commits in eg. quiver and other pretty core code from google to enable analysis options and make the code strong mode clean, and I haven't used it but as far as I understand the new dev compiler also requires it, so I think it's the future.
agreed! Swift and IBM are doing some stuff with Bluemix, I'm not sure how it will survive if Swift doesn't become strongly typed. But hey, javascript is loosely typed and look how big that is, not saying that popularity = success, but you know
Dude, the creator of http://reactivex.io/ is exactly the creator of Stream of Dart. Reactive is not merely a library in Dart, every base stone is built with Stream in Dart.
https://angular.io/docs/dart/latest/ https://github.com/dart-lang/angular2 https://dartlang.slack.com/messages/angular2/
what is native dart?
My stance: Practice tests are incredibly useless. The best way is to try and write a working program. Leave the [Language Tour](https://www.dartlang.org/guides/language/language-tour), the [Library Tour](https://www.dartlang.org/guides/libraries/library-tour), and the [API docs](https://api.dartlang.org/) open while you're coding it as a reference. From my experience, this is probably the best way to "practice" using Dart. I wrote [an esolang in Dart](https://github.com/kirbyfan64/zinc), and that was kind of my "learning exercise".
"OK Dart, write me a program that will reply to any Reddit comments with a super-cool AI." Nope, doesn't work.
Checkout codingame.com which supports Dart for their puzzles. By solving these, you will teach yourself the basics of the language.
https://plus.google.com/communities/114566943291919232850), most new tutorials get posted there. There's also the AngularDart tutorials which are good for doing web apps: https://angular.io/dart 
Was at the one last spring in SF, and while it was nice to meet a lot of fellow Dart users, there wasn't much promised from Google for the future of Dart. I don't expect they'll commit to anything new.
Was you disappointed about last time? I really want to use dart for my next project only frontend stuff(Angular2Dart). But I am really unsure, should I use it or not. 
Lots of stuff on Dart Academy, too (link in the right column).
Seconded. Codingame is great, and the Dart support is solid. Switch to advanced editor mode, and try Vim mode, too.
This is literally the only thing I don't like about dart2js. It just takes SO long to build, especially with Polymer.
I had hope for this language because I heard the VM could be theoretically faster and more resource efficient than javascript could ever be strictly on a theoretical basis. And judging from the benchmarks of their dart vm compared to v8 I am tempted to believe that this statement is 100% valid. We really need to start getting over the "ehhh, im fine with what I got" mentality when it comes to technology. Its like that quote by henry ford "If I asked my customers what they wanted, they would have said a 'faster horse'" being extended to the reply after being shown the car and they all reply "uhhhh, who the hell needs one of those when we got horses that run off hay and not that black gunk you gotta drill outta the ground. Plus my two horses can fuck and make two more horses. That's value appreciation right there. Your cars start breaking down as soon as they are driven off the lot." Javascript is a horse in a world that is too damn slow without automobiles. 
plus you gotta adopt automobiles to get to the flying cars from the jetsons. 
It's like Christmas. Lots of good stuff coming out of the Munich Dev Summit. Dart is a hidden gem. 
Dart does not really support creating a single binary applications and that's not a feature that Flutter FAQ alludes to. What FAQ alludes to is a newly added ability to compile Dart code ahead of time to machine code as opposed to compiling it just-in-time. Dart SDK does not (yet) come with binaries that handle this sort of compilation, so you can't really use it out of the box. If you build Dart from sources then you can build two additional binaries: `dart_boostrap` and `dart_precompiled_runtime` which you can use like this dart_bootstrap --snapshot-kind=app-aot --snapshot=out.aotsnapshot --use-blobs --ignore-unrecognized-flags main.dart dart_precompiled_runtime out.aotsnapshot The first command generates an AOT snapshot (which contains all machine code and data necessary to run your application) and next command runs your app from that snapshot. Notice that pure AOT compilation might come with a performance hit (because JIT optimizations are not available). There is an experiment now that combines benefits of AOT with JIT for applications where it might matter.
You're mostly right - Dart is currently targeting iOS and Android with Flutter. Could this be applied to other platforms? I'm sure some hacker could get this to work today :) It's just not a priority _today_. 
Where can i get an invite to the slack?
I've tried many ways but it seems that OP's way is the only way. Yours throws a SyntaxError because in javascript you have to declare functions with the function keyword. In dart `function main(){...}` is just a function that returns a value with type `function` even if you return nothing It will not throw in dart so its a valid function declaration.
because it is much easier to build AOT using our existing VM / compiler infrastructure. LLVM features required to compile managed languages are still somewhat gnarly and tedious to use and some are completely missing, e.g. there is 0 support for tagged pointers in the IR.
I've tried it myself, and it's a breeze. They've also tried something else than your usual widget library, it's quite an interesting concept.
Great question and no answers. I guess there is no way to make it so far.
Looks like we can render components from the server like with reactjs in nodejs using angular2 universal (isomorphic) tool... [https://github.com/angular/universal](https://github.com/angular/universal) [https://universal.angular.io](https://universal.angular.io) Considering they just released Angular2 for dart, maybe is too early to do this with it... or i'm missing some point =\ 
Not opening for me
Hmm... For me, the video is embedded above, and the link leads to the playlist on YouTube....
You can use it on windows yesterday https://www.dartlang.org/install/windows It's even the first option on their 'install instructions' page https://www.dartlang.org/install 
There's an issue on GH about this: https://github.com/flutter/flutter/issues/138 Sadly I haven't seen any timeline, though at the summit they did say they were working on it... I really think they're missing a trick not putting more effort into it (a huge number of devs are still on Windows, and changing OS isn't a trivial task). Seems like they're driving loads of people to Flutter for them to say "well, this looks really awesome; shame I can't use it" and may never return :(
Is strong mode going to be a "default" once it's mature enough ?
I don't even know why they bother putting any effort into a windows port. Windows already runs ubuntu apps so windows users can just use the ubuntu compatibility layer.
You should take numbers with a grain of salt - it's comparing Dart compiled from JavaScript on V8 vs Dart on Dart VM. This tells you nothing about pure JavaScript performance on V8. 
I've actually asked Leaf this question after his talk. Basically, as I understand it now, it's too early to make such assumptions, however it is a possibility. When you think of it, if 99% of users use `strong_mode: true` without exceptions, then why not? The only dependency as I see it is that all the Pub packages must be strong mode safe as well.
Not really a burn, Flutter is still just very new and there really aren't *any* apps out in the wild made with it at all afaik, let alone a game. People are writing games with Dart and StageXL (porting their flash games over) so Dart is definitely a viable platform.
&gt; No it's not. What percent of people use windows to code in anything other than .NET? It's probably less than 5% I fear you're just plucking random numbers out of the air that suit your argument. According to [SO Survey](http://stackoverflow.com/research/developer-survey-2015#tech-os) over 50% of devs use Windows. According to your stats, if 95% of them do not code in anything other than .NET, that would mean 47.5% of all devs don't code in anything other than .NET. Yet, [according to GitHub](https://github.com/blog/2047-language-trends-on-github) Java, Ruby, PHP, Python and C++ all rank as more common. These numbers don't seem to work out. 
&gt;I fear you're just plucking random numbers out of the air that suit your argument I said probably. But I think it's a reasonable figure. &gt;According to SO Survey over 50% of devs use Windows. I don't dispute that and that number is irrelevant. What we are discussing is what they program in. &gt; According to your stats, if 95% of them do not code in anything other than .NET, that would mean 47.5% of all devs don't code in anything other than .NET. Yea that seems reasonable. &gt; Yet, according to GitHub Java, Ruby, PHP, Python and C++ all rank as more common For decades windows developers have been hostile to open source so it's not surprising that they don't have a lot of open source projects on github. Aside from that I was told there are other sites where the .NET open source devs hang out and share code. The name escapes me right now sorry. &gt; These numbers don't seem to work out. Of course not. You are comparing oranges and automobiles. 
I have been reading about dart for over two years. I have never written a mobile app. My dart experience is limited to a hello world. If it were possible to develop a flutter-app on windows (for android, ios) i would give it a try to evaluate it. Now the hassle (set up a linux -&gt; either buy a new ssd and create a dual boot option or set up a virtual machine, ...) seems to much. 
Is there some reason you wouldn't just use Dart streams to accomplish what RxJS gives you?
RxJS is just an example. I am looking forward to use angular2dart. So if some nice typescript libs would be release for angular2, could I use it in angular2dart to?
&gt;I help run the site Dart Academy, and according to Google Analytics, anywhere from 40-60% of daily visitors are coming from Windows. Latest worldwide statistics show that mobile browsing is now greater than laptop browsing so your numbers seem a little high, perhaps it's because of your site. &gt;I use Windows, myself. Plenty of Android devs are on Windows, too, though I have no numbers for that. Maybe get some numbers and then we can talk. In the meantime using words like "plenty" doesn't really convey useful information. Anyway we are not talking about Dart in general, we are talking about flutter which is aimed specifically at mobile development. &gt;Macs are making inroads in some dev communities, but Windows still dominates...for now. Once again confusing the issue. Are you doing this on purpose? Are you purposely? I don't dispute that there are lots of windows developers, the world is full of C#, .NET, SSRS, SQL server developers. They are dime a dozen. There are tens of thousands in the city that I live in. You can't throw a rock without hitting one of them. But these people don't develop on mobile and they certainly would not ever use anything other than their current stack. 
&gt;Pretty much every dev environment used for non-.NET coding is available for Windows, and that just wouldn't be the case for 5%. Why not? Most of them are command line compilers or interpreters. For example there is a windows port of ruby but the number of ruby developers on windows is tiny. &gt; Atom, Sublime, the whole IntelliJ family (WebStorm, etc.), Emacs, Vim, Eclipse...it goes on and on. IntelliJ familiy is written is a real cross platform environment called Java. You may be familiar with. Emacs and vim and others are just curses apps. But again you are missing the point. The question is not "do open source developers care about windows" it's "do windows developers care about anything else". The answer to that is no. &gt;And that's because so many Windows people are using them! Define "so many". &gt;80% of my dev friends are on Windows, and only one of those is a .NET dev. I totally don't believe that. 
Other than the numbers you've made up, you haven't presented anything resembling data. Even though my analytics numbers don't tell the whole story, at least they were something. I think you need to bring something real to the table before you start talking about the word "plenty" being insufficient.
The 4% ios makes it an extremely unusual web site. That's just not the norm. Also flutter. 
I was curious about Linux around 1998; a lot of work to get stuff running, lot of hope that the desktop (kde for me) would thrive. But who knows after just watching [kde plasma 5.8](https://youtu.be/LgH1Clgr-uE) i might come back. [Msft even tries to help switching](http://security.stackexchange.com/questions/96713/) Do you know if Dart / Flutter could be developed inside a [windows docker container](https://docs.docker.com/docker-for-windows/)?
Dart is similar to Java/C# syntax wise so I wouldn't worry about someone not knowing what you're doing because they'll likely be able to follow along if you write your code like a sane person. Python likely has more tooling for it, would be quicker to get up and running, is more widely known. It's up to you really, but I'd probably opt for Python if I was in your position.
I still don't understand why a developer would be too scared to install linux in a VM and do some work. I mean every linux or mac developer I know runs windows inside of a VM so they can test IE and shit.
VS Dart specifically, theres almost no structure to Python. If you are going to write something thats 20-200 LOC it works great. I'm used Dart a lot more than I have Python, I just believe in using the tool that works best for the situation.
Could you elaborate? Dart's strongmode isn't enabled by default and there is still a lot of terseness in Dart. How does it work great? I haven't written anything serious in python so I wouldn't know
was thinking about doing the same thing but with with the dart components that will be coming out soon
awh :( then back to learning single app apps hmmm actually, if google uses angular2dart for their webapps, and they are championing progressive webapps since several years ago, wouldn't that mean that their web apps are progressive? Or are these angular2-dart apps an exception?
I don't believe Stagehand can currently create a PWA project.
Interview questions are usually short and sweet, Python (or JavaScript) are really great tools for solving quick problems. I 95% of the code I write is in Python and just because of "the way it is" makes it great for teaser problems. **Reverse a string?** &gt;&gt;&gt; 'blake'[::-1] ekalb **Only display even numbers from the command line?** &gt;&gt;&gt; filter(lambda x: int(x) % 2 == 0, sys.stdin.split()) **Read a file?** &gt;&gt;&gt; with open(some_file, 'r') as ins_file: ... ins_file.readlines() You get the idea :)
Wonder what Freddy made on Dart.
I felt the same way a year ago, but after getting bitten by library support (old polymer, polymer angular Dart port getting dumped and restarted under a different team) I gave up. I now use Typescript for new projects. I believe that Dart is technically superior and better to write in, however the real-world concerns of ecosystem health and compiled js brevity have lead me to avoid using it for the time being. One big way of looking at it is, if Microsoft abandoned Typescript, and Google abandoned Dart, which do you think would still have a healthy community in six months' time?
I can understand the frustration with those particular libraries, but since Google is ostensibly pouring resources into Angular 2, we now have a safe bet. The bulk of Google's income rests on several Dart/Ng2 apps now, so "abandoning" either is basically out of the question at this point. I won't be making any decisions based on the ludicrous scenario of TS or Dart facing abandonment in six months. Dart's community grows daily, and with the release of Flutter, should get quite a boost.
I don't see how another opinionated framework like Angular s a good bet. Polymer 2.0, more standards based, looks fantastic but Dart pretty much abandoned Polymer after 0.5. The fact that they used Angular2 internally over Polymer also makes me wonder if they take Polymer seriously at all. I've also had problems with all the Dart SDK updates, mostly because of abandoned packages I was using that have old dependencies on deprecated Dart changes. The updates are great, but it makes the legacy packages out there basically useless. I'm not touching anything unless I absolutely must use it, because I know I'll have to refactor and fix anything out there. Then there's Dartium being old as fucking shit. So now I'm doing release builds all the time instead of getting live updates. Yeah I know DDC might fix some of those issues, but the heavy support for Angular2 and abandoning anything Google isn't really pushing internally, with almost zero roadmap or forecasts, just "hey look at all this unreleased stuff we have in store for you...some day", is starting to really get old. I'm very, very close to abandoning this for TypeScript as well here. 
The big problem with TS is that it comes with JS' fragmented ecosystem. I use TS for my current main project. I've to do way more googling that I'd to do with Dart and I already have 10+ years experience of writing JS. It's kinda funny, really. I feel like I'm a much better Dart developer even though I haven't used it nearly as long. There is just a whole lot less pointless crap you've to learn with Dart. You also don't have to evaluate dozens of similar-ish tools for any tool category. Dart is shipped with everything you need and everyone uses the standard stuff. Google has an ever increasing amount of Dart and Angular 2 Dart code. It will stay around for a while. I'll use Dart again for future projects. It's just more fun to use.
no
:(
no service workers means your project can't become a progressive web app (PWA) from previous readings
Lazy loading support: https://medium.com/@matanlurey/lazy-loading-with-angular-dart-14f58004f988#.6pusg9io0
It's pretty much just another reminder for everyone that Dart is still here, still actively developed, still increasing in adoption, and still worth a look if you haven't given it one yet. You sound like one of those guys who craps on Marilyn Manson for being just another Alice Cooper. It's important to remember that not everyone seeing these posts is an industry veteran who has seen it all before. There are always new people here, and they haven't heard this story yet, just like today's kids have no exposure to Alice Cooper's brand of shock rock, so Manson seems fresh to them.
[package:js](https://pub.dartlang.org/packages/js) or if you're feeling adventurous [dart:js](https://api.dartlang.org/stable/1.20.1/dart-js/dart-js-library.html)
what is the difference? 
What do you mean by 'isn't supported any longer'? I use it in production and the 1.0 release candidate is readily available.
this should work https://pub.dartlang.org/packages/dev_compiler
I only know that Flutter Gallery is there. Which does not support my Nexus 5x...
I'm very curious about this as well. From my, admittedly non-exhaustive, searching, it looks like you'll have to build a plugin in the "native" code and then call it from Dart. Much like Cordova's system. One of the reasons [I use Cordova](https://medium.com/@thebosz/growing-away-from-gamemaker-part-4-with-cordova-a270e2acd779#.hgb6hbvq4) is because of the large number of plugins for things like Facebook, in-app purchasing and the like. *Edit: [Here's the docs I looked at.](https://flutter.io/platform-services/)
Cordova's plugin system wasn't so bad. I think since Flutter is using its own system and isn't tied to JS in the browser it could make it easier. However theres some things you'll want the native UI Widget for, for example the video player. You won't want to embed your own video renderer in an app. You can do this with VLC right now and it adds a lot of weight to your app.
Similar to devsquid's question, but does anyone know how mature using bluetooth/wifi in flutter app is?
ooooh i see. That explains it. I'll toy around with Jana's then
Wow that's strange, does it only support older devices Nope, works on my friend's pixel
Thanks for the info! I do want to add web stuff but I've been holding off with the hope of just using DDC (no Dartium) but I'm not sure how soon that'll be ready so maybe I'll end up adding Dartium support anyway.
Nice! But it looks slower in the native version. Is this expected?
Flutter is in alpha and totally unoptimized. According to the game's author, it is expected for now. Also, not sure what kind of mobile hardware that's running on....
Very cool! Would love to see some source! Edit: http://www.dannyhendrix.com/dart/platformgame/ https://github.com/dannyhendrix/Dart-platform-game
&gt; Our current users (both in Google and outside) have their servers in a different technology than Dart so for them Angular Universal is not a priority Maybe these users have servers in a different technology *because* AngularDart Universal is not a priority? ;) (I jest, but it's true that people can't use something that doesn't exist or that they don't know about - I didn't know what Angular Universal was before now!)
So jumping from google to microsoft. Yea that's real smart dude. 
Yeah? My F# runs on Azure, on Linux, on phones, and on GPUs, and I can use any of the THOUSANDS of C# libs. Dart fucking blows, and you'll have to learn on your own. Maybe somebody will develop another implementation that's not garbage, but I doubt it.
I am looking at sse compatibility and it says it doesnt work with ie. Any workarounds for this situation?
I wasn't able to test that. Could you try that? (I run Linux) All it does is create a long-poll HTTP request, so maybe it will work..
&gt; sintaxis I just fix the error, sorry by my english! And respect to the Google account, I'm going to try to register it without give the mobile number.
Other Dart pros you didn't mention: - Async/await support - High quality core libraries (much better than Swift) - Useful Method cascading - Great code analyzer (used by Visual Studio Code, Webstorm, Atom, DartPad)
Irrelevant, but this is the first gitlab repo i've seen. &gt; GitLab.com offers free unlimited (private) repositories and unlimited collaborators I've seen gitlab's logo before, didn't know they offered that. With bitbucket's free private repo collaborator limit at 5, and github's zero free private repos, it seems like gitlab trumps both of them in those categories. There must be some downside though, are they based on ads?
I also have linux, so no go .. http://www.w3schools.com/html/html5_serversentevents.asp
GitLab's actually really good, and no ads! Personally, I think GitHub's UI and performance are better, but GitLab is genuinely good.
I guess if you want to develop cross browser apps, you have a better IE testing setup than I have. I'd have to find a Windows ISO and host a VM. Not an easy task to do legally ;) 
Good question. Article author here :) If a collection is just used locally, the "simpler for publishing" advantage goes away, as do the performance gains from avoiding copying and other mutability-related patterns. Then the only reason for using immutable collections would be for consistency ... which is not an argument you can use if mutable collections are currently more popular, which of course they are. It's also not a very strong argument. In my own code I do use mutable collections locally for some cases where they're more convenient. So, you need both. Re: immutable collections in the SDK, we've had that discussion a few times. The Dart team was broadly against it, with the main point being the pragmatic one that it's much easier to iterate on a package on pub than in the SDK. Hence, built_collection :)
&gt; Try crystal and elixir too. Crystal is in alpha stage, and Elixir is a functional language (and I'm not experimented with FP). Anyway, I give permission to who can write the code in another language.
Damnit
You had reason; I could skip the mobile number part. The package already has been uploaded.
I made one too: http://rcagantas.github.io/kill9
Oh. It's not anymore. I killed the server since no one was playing. It's now just single player. 😔
but google cloud has this in beta already
&gt; Recently someone used Apache Cordova to build a card game for the play store, which is pretty cool. I'm famous! 
now port it to flutter! Or open source it so I can :D
Hope we'll see Windows support (as dev host) in the not too distant future. I'd really like to give it a try.
I think that articles like these do more harm than good (I use dart and angular dart and recommend both, btw) &gt; Everything you need to build your very own AngularDart app in a few steps — including links to code labs and documentation — is now available on AngularDart.org Just looking at the [section on routing](https://webdev.dartlang.org/angular/guide/router), I'm greeted with this message: "This advanced guide hasn't yet been written. To learn the basics of routing, read the Tour of Heroes tutorial" Things like these lead to questions like [these](http://stackoverflow.com/questions/40638265/dart-conditional-loading-of-angular-2-packages-modules). Articles like [this one](https://medium.com/@matanlurey/lazy-loading-with-angular-dart-14f58004f988) or repos like [this one](https://github.com/kulshekhar/angular-dart-routing-lazy-loading) help (thank you to the authors!) but you'd expect this information to be present in the docs if you're going to claim that 'everything you need is available' &gt; They are built with AngularDart. AngularDart can not fail. Not a good reason. Nobody believes it. Sounds ridiculous. &gt; AngularDart has a full set of core material design components available It's not a full set if you compare it with other packages offering material design components. &gt; Your app will still be fast Have you seen the size of an app that uses the components you mentioned earlier? It's absurd. In today's scenario when we're talking about building PWAs and targeting the next billion who will be on slower mobile networks with low powered phones, this just won't cut it (Dart doesn't even have good support for service workers) AngularDart is great for enterprise or enterprise like apps. But you don't mention, allowing users to believe that this statement is applicable for all sorts of apps. &gt; just in the last few months, AngularDart generates code that is 40% smaller If you mentioned the size in absolute terms, this wouldn't sound a fraction as impressive. At best it will come across as an attempt to mislead and at worst a deliberate lie. --- I would still highly recommend using AngularDart (or at least giving it a fair shot) but I would never present it in the manner done in this article. Sorry
I have no problem with the situation (that's why I'm using Dart &amp; Angular Dart). I know that the Dart team is improving docs, components, performance and the tool chain and I appreciate their work. I just don't agree with the way things were presented in the article. If I were to start using AngularDart after reading this article, I would be massively disappointed that such a misleading article was published by a product lead from the Dart team. &gt; I find it perfectly believable that the tech supporting the bulk of Google's income can not fail. They keep saying that Adsense and Adwords use AngularDart but I don't think this forms a significant part of their core business. It's just the front end. The decision to keep Dart alive won't rest on the fact that these two systems have their front ends built with dart. If Flutter were to fail &amp; Fuchsia fails to materialize into something real, I can't see any reason why Google will keep Dart alive. Unless there's a written guarantee that Google will support Dart as long as Adsense and Adwords are alive, statements like these are just meaningless. AngularDart doesn't have the same 'developed with the community' factor that other frameworks have. I don't think its main dev is done on Github. I think they don't even accept PRs for material components yet. Moreover, the components don't have tests published. Given this situation, it's hard to see how these projects will survive should Google stop supporting them. Like you said, it's still capitalism and I'm fine with Google killing Dart (although I would def. prefer that it doesn't and that Dart grows). I have factored that in and will switch my stack should it come to that. But users who start using AngularDart based on this article will take a while to realize this. 
Microsoft just announced that windows will be able to run anything Ubuntu does. I say let microsoft do all the work so the dart team can concentrate on other things.
Well that seems to be the issue IMO: "We should see a lot more of it soon." I keep reading that but the docs have not been updated. HTML package has not been updated. What exactly has been released since the summit? Not very much with very little roadmap transparency. The Dart news blog is always announcing things that are not even ready (just in time compiler, dev compiler, bazel). Google needs to quit announcing half-baked technology because by the time it's actually ready, everyone will have moved on. It's becoming a trend, look at Polymer 2.0, still not out. And the worst thing of all, JS interop. How long has the js interop documentation been utter shit? The answer? Wait, it's coming....6 months later...wait, DDC is coming...6 months later....still waiting.
Yeah, but not everyone likes Angular2. Leaving things like the HTML package in the dust does not bode well for others.
Explore it https://openui5.hana.ondemand.com/explored.html then you will know, what we are missing.
thumbs up for more dart examples
Currently, yes. Very well. Yes. Not sure about irc but the community is very active on https://gitter.im/dart-lang/TALK-general Good luck!
Is anyone here using dart for production apps? It so, how's the JS Interop? If you just stick to the dart community, with no JS, how do you like it? Any issues?
The company I work for uses Dart in production for almost everything, and we absolutely love it. JS interop is probably the only significant pain point right now, and even that isn't so bad with the new JS package on Pub. Our web apps make use of huge JS charting libraries, and they do so with the interop. Once you've done a wrapper or two, it gets really easy. Also, there is a tool out there for converting TypeScript definition files to Dart JS wrappers, but I believe that's still being worked on before being released. Obviously, we dodge JS when possible, but that's partially just because Dart is such a superior dev experience.
Do you use it in conjinction with angular2?
It is a dream! I left a very cushy job for this one largely because they said I could do everything with Dart. The Pi is just running Linux and using the VM. Since Dartino was unfortunately discontinued, we didn't wanna get too deep into that. We are very keen to start using Flutter, though, as soon as it's production ready.
where did you find such a darty company? I know you've said in the past that as a dart advocate you had to push the team to use it, but where you're working dart's everywhere!
The company found me. The CTO is someone I knew from a long way back, and we had reconnected on social media. He'd had some bad luck hiring developers for his new startup, and he saw that I was a Web Technologies GDE (Google Developer Expert) for Dart, so he tried to talk me into joining the company. A big part of what convinced me to join was that he said I could implement the software however I wanted to, including using Dart.
I should also mention, since this is a post about Firebase, that all my company's client apps make use of this excellent Firebase library, too, and we love it.
oooh google developer expert for dart sounds very prestigious! I hope I can have that title around my neck in a few months time :)
The title is mostly about evangelizing and exposing people to web technologies. So writing articles and blog posts, doing presentations...that sort of thing.
This one was written a year ago, but maybe it's helpful... https://dart.academy/deploy-dart-google-compute-engine/
The company is Vutiliti (add a ".com" to that for the site, which is not a Dart app). Our web apps aren't yet released, so there's nothing to see just yet. My beginner Dart tutorials on [Dart Academy Boot Camp](https://da-bootcamp.firebaseapp.com/?course=start_programming_dart) are presented as an Angular Dart app using Firebase, though it's quite a simple app so far.
The command line tools are completely free, and there are plenty of plugins for different editors. Atom Emacs Sublime Vim Visual Studio Code
what does it mean by "The following Dart plugins are unsupported and available as open source" my text editor is atom unsupported meaning not going to be officially up to date? I'm not a professional software guy
You can use whatever editor you want. Personally I use Emacs (and sometimes nano) with Dart. Dart itself has no cost.
The dev for the atom package is actually a Dart dev.
Dart for IntelliJ community is alright. 
Yeah, I'm not recommending it. But if you're just starting then notepad.exe is probably sufficient to find out if you want to do more.
Emacs = Lisp in the same sense that World of Warcraft = Lua.
Visual Studio code has awesome dart support and it's faster than Atom in my opinion if you're looking for a text editor. 
i'm using a mac
Me too the visual studios code is a text editor that is great on mac it's similar to sublime text and atom. Try it out and download the dart plugin https://code.visualstudio.com
This article talks about using Codeship: https://dart.academy/deploy-dart-google-compute-engine/
ahead of lily, amber, factor, chapel, golo, dylan and gosu
Sublime isn't free either.
&gt; Webstorm and IntelliJ are not free IntelliJ CE (community edition) is free, though. I use VS Code with a community-provided plugin.
Among those, chapel is the only thing I'm remotely aware of. 
people have been conditioned to press a button to express that they like something. On Github, 'star' seems the most sensible equivalent.
ctrl f: "dart", [no results](https://i.imgur.com/Tau57CT.jpg)
[Comparison table](https://www.jetbrains.com/idea/features/editions_comparison_matrix.html?utm_source=jetbrains.org&amp;utm_medium=Comparison&amp;utm_campaign=IDEA10_CE) The Ultimate is all-in-one. You can download plugins for the community edition to sort of complete stuff as you go. Some of the web technology specific stuff are available only on Ultimate. But you can go around that by using 3rd party editors. For usage with Dart, the only missing thing is CSS syntax highlighting. 
Mine copy of webstorm was free with my .edu email, so there's that.
This subreddit doesn't really have a sense of community, doesn't it? Also, the list isn't really an indicator of anything notable. 
Glad to hear it. Althought i don't think that dart is at top 20 (yet) I can comment with my own observations and those are based on rss feed from pub.dartlang.org. From what I see more and more packages are submitted daily which means people are using dart more and more. We are building our product with dart as frontend tech and so far no deal breaker complaints.
Professionally, the company I work for writes web-based software for monitoring utility usage (power, water, gas, etc.), and we do it all in Dart. Really great experience. On the side, I do games and apps that help you play games (board games, tabletop games, etc.). I use Dart whenever I can, for front-end, back-end, and command line utilities.
You're a pretty huge contributor to this subreddit. Do you have any open-source stuff in Dart?
All from scratch, we used mustache to get data to html, rest is dart. We created baseview that has render method that takes html (cached) and dict for mustache to show data on screen. That way we separate html from dart. All classes inherit baseview.
I believe darts future depends on the success of flutter. 
What about Fuchsia?
We all know what will happen to Fuchsia. 
Seems to be linux only at the moment
With all the effort going into strong mode, I can see Types possibly being used in a Dart compiler for optimisation. Then again, on the web I this is unlikely to benefit a business app much so that effort is more likely to spent on tooling? (Thinking out loud here!)
For sure. The strong types will only benefit developers as they write the code. Obviously, once you compile to JS, the types are history.
Yeah, that limits its usefulness significantly, doesn't it? Haha...
I am using Dart for http://np8080.win (web text editor). Dart is a nice fit on the Raspberry Pi too so I am going to be firing that up again soon. I'd like to get into Flutter and something server side with a DB back end this year. I need to repivot my blog so projects in 2017 will probably reflect that. :-)
&gt;It can be done because - Dart compiles to JS The current service_worker_api does use ES6 Promises. How it's going to handle in dart2js?
headline annoys me a bit because you don't "tweet using oauth", you tweet via an API authorized by oauth2.
I hope so. I am a novice and am putting all of my eggs into the Dart basket because I am too lazy to learn multiple languages. I just patiently waiting for native Dart support in Chrome then hopefully Firefox.
It has a future as long as Google needs it to have a future. If Google were to decide Dart doesn't fit in their plans, I can't see anyone else wanting to develop it further. That said, looking at the Github activity for the Dart SDK, I think it's safe to say that it doesn't look like Google will abandon it anytime in the near future. So it's a reasonably safe bet as of today.
Shame for the web aspect since angular2dart is so fast to set up. I would love angular2 and flutter to gain more traction though. Write app logic once, and the lots of copying and pasting to the web and mobile frameworks. Write once and run everywhere is just a dream for now, but hopefully it get's going soon!
Dart -&gt; JS -&gt; WebAssembly seems like unnecessary indirection. They might do it just because they've invested so much into the transpiler toolchain, but honestly I'd kind of like to see the importance of JS diminished. I like Dart in part because it's JS done right, not done in a weekend.
Oooh right. Thanks for the reply!
This is not completely true - you _can_ implement GCs in WebAssembly, for example you can use _shadow stack_ based variants. What you can't do is to implement GCs with minimal overhead. 
I think I would've placed it last even without the enforcement.
Agree. How many people would even be able to just pick up the Dart VM and start maintaining it even if Dart was a community oriented project? But there are a lot of people working on it full time compared to most languages out there, so it seems as safe as any other non-mainstream language.
Nobody knows, but it seems safe enough. Google isn't much more transparent than any other multinational and to Google's credit their people readily circle the wagons. For everything that you might say in its favor you can find a con and vice versa if you're really interested in prognostication one way or the other: Pro: Lars Bak and team are extremely valuable to Google. Con: Lars Bak and team could get bored with Dart and without institutional backing where are you? Pro: But it's used by Ads which makes all of Google's money Con: Ads used to be written in something else which is now 'donated to the community.' Turns out the thing making all the money can also find money to rewrite things when they want to. Pro: It's the 'fastest growing language at Google' Con: I can find you any number of startups growing much faster than Walmart and Coca-Cola...would you then pick the startup as more likely to be around in 5 years? Pro: Fuschia, Flutter Con: At one time Dartino would have been on that list too. Pro: TIOBE Con: TIOBE is kind of a joke and by the TIOBE logic Dart is above F#, Lua, Scala, and Erlang.
Full disclosure: I work on the Dart team. Dart has really taken off in the last 12 months internally, and was the language of choice over other alternatives on both the web and mobile for lots of teams that had other options. A couple of things are in progress that will raise Dart's visibility and usefulness for more users and make it more marketable: + **New sound type system** (strong mode) - Makes it possible to have even better tooling (best of class is the goal), generate better code for ahead-of-time environments (including `dart2js`) + **New dart-&gt;js incremental transpiler** (DDC) - Gives you the same frictionless recompile story as Coffeescript or TypeScript, but all of the benefits of Dart (including a sound type system, sane language defaults). It also has the potential of offering better support for something like hot module reloading. + **Flutter becomes more stable** (Dart for Mobile) - I've seen a lot of former Platform-specific mobile developers _quit their team_ to join a team using Flutter - the change in productivity and language is game changing for both iOS and Android. As Flutter becomes more stable and does its own promotion there will be an influx of more Dart users, more Dart packages, etc. (As always, no specific dates or guarantees on anything, but I'm optimistic!)
Really appreciate the honest write up and looking forward to part 2.
&gt; The web has been on a downward trend for the past several years Source?
What's your source for your claim that the web has been on a downward trend? And by what metric?
And another one I wanted to refer to. I've wondered how email has been affected by mobile. I mean, nearly all of us used to be on Gmail a lot. And Gmail on the browser. Not as an app. Anyway, this article talks about email as a whole losing user interest: &gt; Email is dying among mobile’s youngest users. [Source](https://techcrunch.com/2016/03/24/email-is-dying-among-mobiles-youngest-users/)
about size of project.. our project with around 20k LOC compiles down to 1mb minified source so you can see benefits there. 
Oh man, this is going to be awesome. So excited!!
Script snapshot vs app snapshot. The app ones are CPU-specific. This was news to me, too. It was added with 1.21. https://github.com/dart-lang/sdk/wiki/Snapshots#application-snapshots
Interesting, thanks!
It sounds like you're saying it has just as amazing a future as GWT does. O.O
This is awesome I was looking into streams the other day and this seems like a really promising library to get into them with.
I'm using 5+ AWS services. EC2 is important, but just one facet ***shrug***. Good to know though, thanks.
That was impressively insightful. I remain positive but your points help to keep some of my reasons for positivity in check!
What a great read! I had no idea about how Google did this sort of stuff. Looks like /r/webdev has some good comments.
Just for comparison, with AngularDart runs 74k potential tests per commit, does anyone know how many tests are run for AngularTS?
I'm sure they do but to tell you that would basically be to tell you what kind of adoption Angular TS has within Google, no?
You can see exactly what the tests are and how many of them like the author of the article, but I'm not sure how to count all of them like the author. I was just curious how the two languages on the same framework compared in terms of number of tests needed to ensure quality. I'd assume that dart has less testing due to strong mode, but I just wanted a numerical value for dart vs ts
They're not that hard to run: dallas@ubuntu:/tmp/angular$ ./test.sh node Compiling tools... Creating .metadata.json files... Watching: modules/tsconfig.json in /tmp/angular &lt;yadda yadda yadda&gt; 3138 specs, 0 failures, 2 pending specs Finished in 36.796 seconds But that only tells you how many tests of Angular itself there are. There are 1601 for AngularDart. The 74k is because when you change AngularDart you have to test not just AngularDart itself but everything that depends on it. There's no way for people outside Google to count that.
Sounds good; thanks for the advice. It's appreciated. I'll make other contributions than links from now on. ;)
Oh my god. The new "covariant" keyword just made my day. Strong mode in Dart is already great, but this is absolutely the icing on the cake. Thankyou dart devs!
Faster tools - always good! :-)
Thumbs up for asking. We work in dart daily and expanding web experience to mobile app without overhead of learning another language would be quite useful. btw i think g+ would be better place to ask :)
Flutter runs on the dart vm, while angular runs on the web. Dart2JS is basically a whole program compiler/optimizer so that adds a lot of time overhead relative to just running the code. Flutter is also running on a platform which is designed for apps, while Angular has to generate code to make html behave like components (css scoping, virtual dom stuff). Finally, I'm pretty sure flutter is not sent to the phone over http, while if you are running a dev server you have http overhead in fetching all the components. For compile times, the dart dev compiler is supposedly much faster. The other two are issues that aren't really able to be solved by any web based frameworks.
Alternately: 'a whole bunch of speculation from someone admittedly non-technical.' More interesting than the article is the hostility the project already generates from Linux fans(oh noes they're replacing Linux) and Java fans (oh noes they're replacing Java).
Pretty much. Personally, I still have doubts that this is replacing Android anyway...
as someone who uses both Java and Linux, who cares? they both have warts, and if Google thinks they can fix that I say good on em. 
Here's the follow-up: https://techspecs.blog/blog/2017/2/15/proof
You gotta try it to feel the dev cycle (its great). The one thing though is that flutter is still a moving target (lots of refactors) so you'll have to update your codebase time to time. The performance is already great from my limited testing.
What i would like to see is how to single source an application to also support a web ui... How that would be structured to reuse as much as possible. Or is this even possible? This is good stuff though. Thanks for always posting
Definitely possible. I often construct a model and services (business logic) of an app as a command-line project, with no real UI at all. Once that's all working, I move those classes to an AngularDart project to hook up a GUI. Written carefully, I don't see why that same code couldn't be used in a Flutter project. 
Speaking as someone with a lot of experience w/ Java/Swing, WinForms, and Xt/Motif, I really like this straightforward widget approach that Flutter is taking.
There's a port of [Angular Material 2](https://pub.dartlang.org/packages/material2_dart), and there is [ng_bootstrap](https://pub.dartlang.org/packages/ng_bootstrap) (Bootstrap 4 components). Edit: Corrected link to ng_bootstrap, as per rinukkusu's comment.
From my research there are not any options besides Material Design Lite, which is great, but I'd rather work with Angular. I'm really really hoping there will be a release with angular2_components soon, it would definitely be the make or break on whether I'll stick with Dart for my next few projects. Developing in Dart is bar none the best experience I've had with web development, it's unfortunate the developer community is still small, although my ambitioks are high.
Yes, to be frank, I feel the same. I guess for this project, I'll stick with Polymer-Dart and Redux.
ng_bootstrap looks great, but is still on version 4.0.0.alpha-5, and they can't upgrade until the bootstrap package they depend on upgrades. 
There is the [angular2_components library](https://pub.dartlang.org/packages/angular2_components), too.
I don't know of any, but if you find something, let us know!
I see "Analogs", and suddenly I get a visual of someone coding CSS3 on an 8086 with a CRT monitor...
Definitely going further! Gonna write at least one more lesson today, in fact. (Now I better really do it.)
I'll let you know when I'm ready :)
Pretty noble goal. If binaries aren't available, you might try building from source. 
&gt; 11,855 installs Either you were a little behind on your 10k count, or this thing is getting popular *really* fast...
I use it instead of Emacs for writing Dart and that's the highest compliment I can give to any other code writing tool. Great work.
Yeah, native extensions are pretty much your only hope. Unfortunately, Dart has nothing like node-gyp (no such thing as a postinstall script with pub), so the extensions must be manually compiled whenever the library is installed.
We rely on this plugin a lot where I work. Those on my team who don't like WebStorm typically use VS Code instead.
Have you checked out the Google Dart docker image? Kubernetes and containers might be what you're looking for
The author says this article is still useful: https://www.google.com/amp/dart.academy/deploy-dart-google-compute-engine/amp/ 
http://gsdview.appspot.com/dart-archive/channels/stable/release/latest/sdk/ Then download the: dartsdk-linux-arm-release.zip 
Noice. I was waiting for this. :D
It's from 2015, but Learning Dart, Second Edition by Ivo Balbaert and Dzenan Ridjanovic (Packt) is pretty good so far. It also mentioned that Dart Editor, so it's somewhat out of date, but its clean explanations more than make up for it, in my opinion.
Given that it's not a tutorial or a deep dive, but just an expression of an opinion, I don't think this matters too much. It would be interesting to see a true, in-depth comparison, but it might be hard to do the topic justice in an 8-minute video.
The details aren't perfect, true. ¯\\\_(ツ)\_/¯ 
There's a lot of these people now, it seems. Also the "I graduated boot camp three months ago, now I'll tell you how to build a career as a software developer" type ones. Worst I saw was a recent boot camp graduate telling people how to "get a senior developer job with only junior developer experience". 
Had to go look up what Spring Boot is, if that answers the question. :) It's routing/request handling/authorization/ORM/etc. - a general server framework. It borrows concepts from a lot of frameworks. For example, the ORM takes some things from Apple's Core Data/key value coding. HTTPControllers are inspired by .NET's ApiControllers. The two novel things Aqueduct has are its testing utilities and its query builder type - which Dart makes possible.
Perfect. I remember watching a video about Dart and the possibility of sharing code between the front-end and back-end -- likewise with tests. The only problem that I found is that there hasn't been a server framework, like Spring Boot which I've used professionally and personally and really enjoy how it's a one stop shop for a server platform. Now that there is something similar I will probably use Aqueduct for my next personal project to see if it's a viable framework. Looks very nice and feature rich, something I could potentially use in production
Sounds great. Please reach out via [issues](https://github.com/stablekernel/aqueduct/issues) or on the Dart Server channel in Gitter. Someone from our team is usually around. [Docs are here](https://stablekernel.github.io/aqueduct/). We've built 6 production servers with it, so we've caught a few things that our test coverage did not. Our primary experience is integrating with native mobile applications, so would love to hear your experience and suggestions with front end web dev.
Will do! What would be the recommended way of deploying to a cloud platform? Most likely as a docker container in GKE or ECS? There's actually a project out there for SpringBoot that enables the usage of a framework like this in a GCF/AWS Lambda environment. Is that possible currently with Aqueduct or is that something on your dev team's radar?
Great question. We have documentation for deploying to AWS, Heroku and locally located [here](https://stablekernel.github.io/aqueduct/deploy/overview/). Writing the documentation for Google Cloud deployment is assigned to someone on our team. There is some behavior in the CLI tools specifically for setting up Heroku deployments. Heroku is our platform of choice when we have a straightforward CRUD application, AWS otherwise. I know we toyed around with Docker on a project once, but we ultimately steered away from it - not because of Docker, but because of the behavior of the system itself. There is also a bit of guidance on deploying without using the CLI tools in that documentation. We haven't specifically put anything on the agenda for environments like AWS's Lambda; I'd be interested in looking into this, though.
Actually, there's no reason why AngularDart shouldn't be able to perform similarly to Flutter. Much of AngularDart's slowness is due to its compilation and then currently any hot reloading capability has to be offloaded to something like Webpack. That's a pretty round-about way to achieve HMR. But with fast incremental builds using Bazel and DDC, and considering that HMR is actually baked into dartlang, there's hope that AngularDart might reach parity with Flutter's dev cycle when running in Dartium. Discussion about this was started here: https://github.com/dart-lang/angular2/issues/160
I've made a [minimal working example](https://github.com/terrencepreilly/minimal_examples/tree/master/ng_scss_components) for this. You could clone it and run it as a sanity check. Things to look out for: - Make sure that your transformers are in the correct order. - In the component, reference 'iron-flex.css' (which it looks like you do), but only have 'iron-flex.scss' defined. - It looks like you may have a problem with your sass file itself. Will it compile if you run the command manually?
Try running pub get --packages-dir Then pub serve 
It was a problem of transformers in incorrect orders &amp; the PATH of sass not correctly setup. Now it works perfectly, ty!
Is anybody even using Flutter? Is there an active flutter subreddit somewhere?
It's being used internally at Google and they're starting to be more outward looking as they polish the framework more and more. It's still changing a lot, so random bugs can appear in your code because something has been renamed/deprecated whatever. I actually just requested control of a subreddit that I was going to set up for flutter: https://www.reddit.com/r/redditrequest/comments/61slpc/requesting_rflutterdev_no_mods/
Hello, Dart people. I would like feedback on this tool I've been coding, specially in the Dart support. The screenshots you'll see on the link don't actually show everything. `part` declarations and the popup with information about external modules directly in the source code files also should work. I would appreciate if you could take a minute of your time to install the extension and browse some Dart source code on GitHub to see it in action. It is important to say that I'm not a Dart programmer, never programmed in Dart, so I really want to know if this thing is resolving paths correctly or if it could support some other feature or whatever.
Yes.
That's actually amazing. I'll see if I can fix it, lol. 😂
PWA for dart! Since when could dart handle service workers?
whats the point in having both similar goal achieving languages? why not just fully adopt typescript and abandon dart especially since only a dozen ppl use this language
Don't take this as a derogatory comment, I'm asking because I'm genuinely curious: If you think so lowly of Dart, how come you're in /r/dartlang?
curiosity is what lead me here, why invest in two languages with so little fundamentally different.. I could see if there were groundbreaking differences but really there are not.. seems like a huge waste of resources to split these communities of developers. I don't have any investment in TS, so honestly i don't care one way or another, but seeing TS with so much more momentum i really can't understand why dart?
you've definitely convinced me that dart definitely holds no huge advantage over other languages; other than a weird cult following
Why write any language? We should all just be programming away with COBOL and Fortran on an 8086.
All of those advantages CordialPanda listed have resulted in a many-fold productivity increase for Dart's users. If you don't think that's a huge advantage, you may not know the meaning of the term.
He's actually a curiously dedicated troll. He pops up on most Dart posts at some point.
I think you probably know that if everyone adopted your perspective, progress would cease. Changes are not typically revolutionary, they are incremental.
not saying lets not write languages, i'm saying google seems to be inherently bad at doing it
sorry for the resurrect but can I confirm material design lite is not really compatible with angular2? I'm a beginner to dart, angular2 and webdev in general (I'm a C# developer, primarily backend thick-client stuff) and struggling to get my head around things. Coming from a C#/devexpress background where there's a widget for just about anything you can fathom (admittedly, they can be brutally painful to use at times) I've been a little shocked/dismayed at the seeming dearth of good components in the dart+angular2 world. I've seen some dated posts alluding to dart+ng2+mdl but several hours of attempting to mash these together has failed with esoteric messages that I'm simply not experienced enough to diagnose yet. It'd be good to know if I should just stop trying. 
are you using async/ await for your requests?
I have them in the code without much idea of how they work.
Yeah, it'd be more work than it's worth to get it to work. Sorry to disappoint, it was something that upset me as well.
You need to save the cookies the server sends with the login response, i.e. PHPSESSID, and then send them back with every request. Otherwise the server has no way of knowing who is requesting the resource.
I think I do not understand at all .. the best thing I could do was to leave the code here https://hastebin.com/ivamewejux.js
There is a `service_worker` package that is using the JS interfaces, and exposes them with Dart construct (e.g. using `dart:async` instead of Promise).
404 on the github link
I don't know what's different, but this works: https://github.com/angel-dart/angel
Has there been an official dev compiler release? Dartium update? HTML package update?
I am assuming rhetorical questions since you can see the change log on the site?
i'm hype for a CLI scaffolding tool
&gt; CLI scaffolding There is already one: - http://stagehand.pub/ - https://pub.dartlang.org/packages/stagehand 
Another one: https://pub.dartlang.org/packages/stagedive
Nice article, covering many details of async! I only wish for a simpler isolate API (e.g. all the `new ReceivePort()` boilerplate). Has anybody created a library for that?
They don't support perl, I think.
I'd be unhappy too if I had to wait several minutes to see the latest null pointer error...
&gt; a community for 4 years Lolwut.
Exactly why I chose Dart as well. Change is good, but after working with JavaScript for a while I was just tired of how the ecosystem develops so fast, and not always for the best of it
So far i have used [json_god](https://pub.dartlang.org/packages/json_god) and [dartson](https://pub.dartlang.org/packages/dartson). Both Libraries work decently well. Dartson offers Annotations to rewrite keys and has a TypeTransformer interface that you can use to serialize dates and other objects. While json_god doesn't have Annotations it does have the, at least in my opinion, nicer API. Shameless self plug at that point. I've started to write a Library that is basically a mix of dartson and json_god. It supports a few more Annotations than Dartson while being a lot faster compared to both libraries. Only Problem is that its not done yet. If you are interested you can check it out [here](https://github.com/Kemonozume/json_conv). The ImplAnnot Branch being the most recent one. Still have to finish up the documentation and provide Examples.
json_conv looks really cool, good work! I'm open to PR's on json_god, so hopefully we can a merge going. json_god is the default de/serialization library used in Angel (can be patched to use dart:convert, though), so supporting annotations would be a nice addition for people who are used to more declarative styles of programming. Also, how were you able to determine that json_conv is faster than json_god? I've never run any sort of benchmarks on it, so I'd be glad to see how I can make it faster.
Fixed link (from the Angel README): https://docs.google.com/forms/d/e/1FAIpQLSfEgBNsOoi_nYZMmg2IAGyMv1nNaa6B3kUk3QdNJU5987ucVA/viewform?usp=sf_link
I'll probably put some actual game on GitHub some day. Anyhow, you can try this one fairly easily. Just create a new Flutter project in IntelliJ and then paste the code above over the "main.dart" file. That's it.
This is thread is quite a bit old so I'm sorry for responding so late but if someone is interested in learning Dart and has absolutely zero experience in programming language, what would you recommend to start?
As a novice myself, what resources are you using to learn Dart? I have no background in programming language.
This is the best tl;dr I could make, [original](https://arstechnica.com/gadgets/2017/05/googles-fuchsia-smartphone-os-dumps-linux-has-a-wild-new-ui/) reduced by 90%. (I'm a bot) ***** &gt; Google, never one to compete in a market with a single product, is apparently hard at work on a third operating system after Android and Chrome OS. This one is an open source, real-time OS called &amp;quot;Fuchsia.&amp;quot; The OS first popped up in August last year, but back then it was just a command line. &gt; Unlike Android and Chrome OS, Fuchsia is not based on Linux-it uses a new, Google-developed microkernel called &amp;quot;Magenta.&amp;quot; With Fuchsia, Google would not only be dumping the Linux kernel, but also the GPL: the OS is licensed under a mix of BSD 3 clause, MIT, and Apache 2.0. &gt; In the public Fuchsia IRC channel, Fuchsia developer Travis Geiselbrecht told the chat room the OS &amp;quot;Isn&amp;#039;t a toy thing, it&amp;#039;s not a 20% project, it&amp;#039;s not a dumping ground of a dead thing that we don&amp;#039;t care about anymore." ***** [**Extended Summary**](http://np.reddit.com/r/autotldr/comments/6a0jus/googles_fuchsia_smartphone_os_dumps_linux_has_a/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ "Version 1.65, ~117649 tl;drs so far.") | [Theory](http://np.reddit.com/r/autotldr/comments/31bfht/theory_autotldr_concept/) | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr "PM's and comments are monitored, constructive feedback is welcome.") | *Top* *keywords*: **Fuchsia**^#1 **Google**^#2 **Android**^#3 **app**^#4 **project**^#5
here https://www.dartlang.org/guides/get-started
There's no way to directly do that, AFAIK. One workaround would be to transpile the Dart code to JavaScript and then use a tool like *pkg* to create the standalone binary: https://github.com/zeit/pkg
Sure, but "learning a programming language" isn't really what you start off with. You'll want to understand basic object-orientated programming concepts and just about **any** tutorial series for languages like Dart will give that to you. I started a series of tutorials that will take a complete beginning programmer from knowing nothing to building a game in Dart. You can start [here](https://medium.com/front-end-hacking/building-a-game-with-dart-and-stagexl-part-1-79bfd404490e). I'm aiming it at people like my 12 year old son who has no prior programming experience.
AFAIK there is no library to directly write PDF or PostScript files. I think your best option may be to generate a HTML page, and then convert that to pdf with a third-party executable like https://wkhtmltopdf.org/ I've used this method a year ago or so, and it worked for most use-cases, but the project may be an older fork of the webkit codebase and didn't have the modern HTML5/CSS3 formatting capabilities. Maybe the new headless Chrome could be used instead of that. Further third-party binaries: - https://pdfbox.apache.org/ - https://xmlgraphics.apache.org/fop/ 
Dude, this tutorial is really good. 
[Dart Academy Boot Camp](https://dart.academy/dart-academy-boot-camp-start-programming-with-dart/)
Yes, I am equally disappointed that Google has not made external adoption of Dart a bigger priority. Dart is well suited to Firebase (on the web and mobile with Flutter), and it'd be great if it were easier to use it on Google Cloud. Dart would be fantastic as a supported language for Firebase Functions.
I see. Thanks.
It probably would be semi-trivial to port something like `pkg` to Dart and bundle an [application snapshot](https://www.dartlang.org/articles/dart-vm/snapshots) and a version of the Dart VM. I'd be happy to help anyone who would like to take t his on.
&gt; Can you elaborate on this? What would you use the actual number for? Then you could initialize "previous" with Duration.ZERO. Well, I guess it doesn't really matter. I prefer to simply cap the delta anyhow. So, I can just initialize it with Duration.ZERO, get some ridiculously large delta, and just clamp it to 40 ms (25 Hz). &gt; FWIW, we had a demo game written in Flutter a year or so ago. This one? https://github.com/vlidholt/game &gt; It had audio and a sprites library. Looks like it used the built-in audio stuff which has been removed in the meantime. https://github.com/flutter/flutter/issues/7482 - Plugin: Audio / Media https://github.com/flutter/flutter/pull/5995 - Remove sound.dart Checked the diff. No idea how that "mojo:media_service" stuff works or if that's still there. I guess I could hack something up for Android, but I don't have access to iOS devices.
Until the Dart team steps out of its ivory tower and prioritizes developer ergonomics and flexibility over the purity of its VM, it will never be more than a niche language. Doing anything interesting in Dart requires literal backflips, and junk like strong mode only makes it more tedious.
I think that if `new` would be optional, and `const` redundant to write out, then flutter UIs would already look kind of similar to xml
Hi, thanks for replying. I want to learn Flutter.
Thanks this is helpful.
`new` being optional is my number one request for syntax sugar enhancement I want for the language. If you use Flutter it's very obvious why it is needed.
This. Danny really doesn't have the time/energy/motivation to work on Flutter support himself, where I see it as a big seller for Dart and subsequently Dart-Code (which works far better than IDEA, imo)
Will those make sense with no background in web or dart lang?
I really like Polymer, but yes, AngularDart is an officially supported framework, and so it's miles ahead in both reliability and maintainability.
I discovered codelabs at Google I/O this year. I didn't know there was one for Dart. Thanks for sharing!
Seems like it is used pretty heavily for how new it is
I agree with knowing jave being helpfull. Started with flutter this weekend, reading about an hour everyday and building pretty nice looking apps already. Looking better then 80% of the apps in the store, still haven't taken any time to learn dart and trusting on my jave knowlegde. Not that different, if you've seen a few code examples you good to go and can start reading about dart later on. 
Thanks for this link.
For Dart, the javascript version is used heavily, check out the new youtube website for example.
Flutter is based on the Dart VM, not a browser. You won't be able to use JavaScript unless someone creates a JavaScript to Dart compiler. Fuschia is an operating system. The only language that really matters is C or C++.
If you can do JS, you can very easily switch over to Dart. There shouldn't be much learning curve.
&gt; V8 engine is much faster My benchmarks from last year disagree. I encourage you to do your own, non-microbenchmark on broader feature set, and it is very likely you will find that Dart VM is faster than V8 in most cases. &gt; ES2015 also supports classes That is a pretty low barrier to compare the two. There are several items that are really behind in the JS/TypeScript world, for example: - Consistent async API, incl. Future, Streams, async* for Streams, async/await support everywhere. async.js is nowhere near to this. - Type inference and analyzer toolchain that works and don't need to fall back on grep. The moment you start using lodash or similar you will lose your ability to explore the code reliably. - Isolates and Zones as higher-level constructs for dealing with complex concurrency and parallelism constructs. Nothing comparable in the JS world. - Cascade operator. - 1 != "1" (have been burnt by JS several times, and even TypeScript won't provide a break from it) Of course you could decide that ES2015 is good enough for your use case, but I'd encourage you to explore what Dart can offer.
No, you can't use an npm package directly. If you can describe what packages/features are important for you, we could try to figure out what are you alternatives in Dart. 
But since Flutter is the UI layer for Fuchsia, yes, you'll be quite a bit better off learning Dart. :) By the way, it's a tough word, I know, but it's crazy that people more often misspell "Fuchsia" than don't.
This isn't entirely true. Using JS-interop in Dart isn't that hard anymore.
&gt;But since Flutter is the UI layer for Fuchsia, yes, you'll be quite a bit better off learning Dart. :) Than JavaScript? Certainly. &gt;By the way, it's a tough word, I know, but it's crazy that people more often misspell "Fuchsia" than don't. It's a common accepted spelling of the same. However, since it's used as a proper name in this case, and Google spells it "Fuchsia", you are correct.
Keep up the great work!!!
I've cross-posted your question on [StackOverflow](https://stackoverflow.com/questions/44120149/android-lock-screen-widget-in-flutter), which is monitored more by the Flutter team than this subreddit. I suspect you'll get an answer soon enough :) **EDIT**: Did you mean desktop widget? As pointed out to me: &gt; The Android lock screen has not supported app widgets since Android 5.0
No, not yet. I have filed an [issue for you to track](https://github.com/dart-lang/sdk/issues/29690), though.
Quick Google yields this: https://www.jetbrains.com/help/idea/2017.1/running-and-debugging-dart-web-applications.html I've not used Dart for web apps, but it work well for Android with Flutter.
For web applications I would just use the debugger in Chrome, it's really much better than any of the IDE based debuggers. For non web applications, you could read up on Observatory https://dart-lang.github.io/observatory/. This allows you to do things like set breakpoints and inspect code, all the normal debugging goodness. 
Personally I prefer WebStorm as it works nicely with JetBrains debugger extension. I think its around $100 a year which is worth it to me. You can also use Visual Studio Code which is free and there is the [Dart Code plugin](https://marketplace.visualstudio.com/items?itemName=DanTup.dart-code) that provides auto-complete and debugging support. 
That page looked helpful, until I got to the step "Click the Add New Configuration toolbar button, and choose JavaScript Debug on the context menu." - There is no "JavaScript Debug" value on the context menu for the Community Edition.
If I was doing web development full time, I would have no problem paying for tools. I really can't justify $100-$150 a year for occasional use. 
WebStorm does some of this for me when I'm developing AngularDart apps. Most HTML changes result in an automatic refresh of the browser. (Can't say I always like it...haha....) Clicking refresh isn't a big deal, though. That seems like a strange reason to avoid working with Dart, given all the huge advantages it brings otherwise.
Have you got the Dart plugin installed?
Yes. I've already developed my application's model in Dart. I now want to build a web app for it. 
Ok, the answer seems to be no, you can't use Community Edition: https://stackoverflow.com/questions/30205650/how-to-debug-a-dart-client-side-application-using-intellij-idea-community-editio
Are you referring to the third party app, [Lefty](https://lefty.io/)? The other Google I/O Flutter talk, [Prototyping to Production: Bridging the Gap with a Common Tool](https://www.youtube.com/watch?v=BJCqRpvvTrM), mentioned it offhandedly.
I may have to start one. I wonder if I can record while I'm asleep, because that's the only hours I have left. :)
&gt; Also, would it be possible to wrap the web app in a desktop shell that behaves "natively" for Mac OS and Windows respectively? Electron
Thanks, will do.
Greetings! I'm the author of this blog. I saw some traffic come in from reddit, so I made an account! If ya'll have any questions or comments, feel free to ask here or on the blogs comment section! 
&gt; Could not reserve enough space for 1572864KB object heap Btw, I had this issue too, and installing 64bit Java also seemed to fix it. I'd seen the fix you included in the post, but I wasn't sure if there was a reason it had such a high max heap size!
Yeah that definitely warrants some further investigation. Funnily enough, when I first read the error, I thought it was referencing the Emulator's allocated memory which threw me for a loop.
Yeah, I was trying to run on my real Android phone and at first thought it was my device that was the issue! What's even weirder, is that I ran Hello World a few days before on my device and it worked; then when I came back days later, it was 100% broken with this. I've no idea what happened between those days that meant the same Flutter project, same JVM, same Gradle, same Dart, same everything, was now broken!
I agree 100%. Go right to AngularDart. Don't bother with JS. Learning JS will only torture you. Dart is a fantastic general-purpose language, and your life will be 10 times better if you just start there.
Dart's syntax is extremely similar to JS's, but Dart lacks many of JS's horrible idiosyncrasies. If you understand Dart code, you'll understand most JS code, too. That said, you may eventually have to learn a bit of JS to do something outside Dart in your web app, but avoid it if you can, and tackle it if/when it comes up.
 &gt;I guess I was naive to assume that there would be an efficient way to make an app cross-platform this day and age. Unfortunately, that's still kind of a pipe dream. :(
I only installed Gradle just before the first time this worked, and haven't done anything at all since running the Flutter Hello World app. If something got broken, it was nothing complicated I did, I literally just ran "flutter run" from the same folder two weeks apart, without anything else doing anything in between! :/
It may not be apparent to people raised on PHP and Javascript, but these are horrible languages; they making coding pretty darned awkward. I can see someone who entered in to coding that way enjoying it, because they don't know better, and delving in to the depths, mastering it and being content. Programming is so enjoyable, after all, and the bar to entry on php and javascript is so so low. And the almost instant gratification satisfaction in making things, so so high. But once you've had exposure to modern, coherent/finely-crafted languages, you realise the squealing pigs they really are. And you may not be content to put up with the cr*p any more; now that you've identified what it was that smelled. ES2015 and even Typescript are just lipstick on a pig, unfortunately. Dart, object pascal, c# etc etc, these are neat languages that are good to program in. It's totally understandable that Google talked of replacing Javascript as it needs replacing. The idea that we'll be stuck with it for another couple of decades is just horrifying. (However, transpilation and web assembler may herald a way out of that.) For me personally, the ideal combo is fundamental neatness, tooling (ie, great debugging, code completion etc) and exception handling. No exceptions in Swift was a big disappointment. The arguments against Dart and for remaining with javascript were really quite weak and self-justifying, probably more a result of too many coders who had got in to the industry by the javascript backdoor and felt indignation at their first love implicitly being called an ugly cow. I was surprised they prevailed, but really it was the other browser makers that were just using them as an excuse to say no to google, which is understandable. But once you've tasted the nectar of a decent language, there's no going back.
(I should add that php is far worse than javascript; javascript actually has some measure of language design.)
Another server-side framework you may consider is Angel (https://github.com/angel-dart/angel), which is my project. From what I can gather, it seems most people in the Dart community aren't aware it exists. It is absolutely possible to reproduce what you have created with Flask within Angel. Angel provides a lot out of the box, including authentication, robust validation, templating, and WebSockets. As jcstk mentioned above, you can definitely use package:mailer to send e-mail notifications. Angel supports service hooks, a mechanism that makes it intuitive to run code as a reaction to events within your application. If you have experience using Express or FeathersJS, you'll find Angel's API's familiar and easy-to-learn; it also uses very similar API's on the client and server, so that the framework's learning curve will not be as daunting. There is a Gitter chat, and every aspect of Angel is well-documented, whether on video or in text. If you do try Angel, please be sure to leave feedback! I don't think you will run into problems implementing your server in Dart, mainly because the ecosystem is rich, and there is already functionality out there to achieve everything you listed above, and more. 
From my own experience, i have no idea about js and im fluent in Dart for 2+ years. Never missed anything from js , and if i had to patch something up fast in js there is always more or less intelligent copypasting 
As a beginner, I love articles like this, that show patterns that you may not realize are bad, explain why you shouldn't use them, and offer alternatives. For example, I had no idea string interpolation was such a costly operation. It shouldn't matter in my current project, but if I were to write a library, it would be extremely important to know.
Note that post does not actually quantify how expensive string interpolation is. Post just highlights that one should not be doing string interpolation that is not going to be used. Even cheapest operations can add up to a massive overhead if you are doing a lot of them for no reason. 
Thanks! I'm checking Angel out now. This below answers my question. I really appreciate the advice! "I don't think you will run into problems implementing your server in Dart, mainly because the ecosystem is rich, and there is already functionality out there to achieve everything you listed above, and more."
If you're used to Flask, [Redstone](http://redstonedart.org/) is a very similar framework. I don't know how mature it is, or if it supports everything you need, but it's​ worked for my simple projects.
not really 100% relevant but we have frontend made with dart that has 1000+ users, works fine
Thanks for the info, hopefully it will happen sooner than later.
If you want more information or contribute, take a look at the "angular_analyzer_plugin" (https://github.com/dart-lang/angular_analyzer_plugin) repo. On the readme.md, you have an overview of which features are working (or not) for a particular IDE or in general.
There are a few I know of, most of them busy coding and pushing their product and talk very little about the tech they are using. Are you looking for a dev team, or ad-hoc consulting/contracts?
Can I ask what's your use case for JSX?
I've found that I like writing nested components better using JSX. It just seems more natural to me. When I first started using it like a year ago, I hated it but it's turned into my favorite React feature (previously I was using Angular only).
Have you tried Flutter? I'm confused as to why you need a JSX-like language? From my understanding you use JSX to imbed logic into HTML templates to build them? In Flutter you have Dart as the programming language that will be used for creating Widgets that are then displayed.
Interesting. We ultimately decided to go with React Native (team of two devs working on a mobile app prototype) but maybe we will look back into Flutter.
A 5 year old server side programming language, that doesn't have a mature Mysql or any RDBMS driver yet. Dartlang is classic a story of good engineers doing only 'cool' things, not understanding their business, and ignoring all the 'boring' things that actually make a business tick. . After a groups discussion made five years ago, something still has not changed. Why Dart does not care about data? https://groups.google.com/a/dartlang.org/forum/#!topic/misc/Uv05GvFTsLU
If the use of someone from outside is not very desirable, then why are they making so much product promotion? I really do not understand what kind of strategies they have.
I'll be throwing my hat into that ring, although most of my efforts will be developing dart/flutter training/books initially.
The best thing going is for someone to fork Flutter and create a shell that can run on windows, OSx, and linux using something like GLFW for windowing. I've personally done it for my project I'm working on, it's entirely possible. Unfortunately, my project isn't suited for submission. I've hacked it into some of the Chromium base source code. Where Flutter has transitioned to more of the Fuschia base.
Randal, you're actually a Dart developer? I've been watching FLOSS weekly for years. 
Strong mode is great! But there are many issues with the DDC, can't wait for those issues to get fixed
No electron equivalent yet, however, you can package the dart code into executable: https://github.com/filiph/dartbin
I'm becoming one, with the help of a lot of new friends.
Did you mean to direct this comment to me? If so, we may be crossing wires somewhere... As far as external adoption of Dart goes, the community does most of the heavy evangelizing. The evolution of the Dart language and packages created by Google are mostly driven by internal needs. Thankfully, Google does occasionally produce an article or blog post on what they're doing, but even when they do, it's left to the community to get the word out and spread the links. If adoption of Dart outside Google were a big priority of the Dart team's, they'd probably allocate lots more time, money, and resources to responding to community needs, developing popular packages and plugins, and preaching at conferences. I'm hopeful that priorities will shift this direction, but even if it doesn't, Dart serves most of my needs admirably.
I'm pretty sure the flutter team wants to have flutter apps run in OS X, windows and linux
I have several years dev experience on Android and Angular/Polymer/HTML, For me personally, I always avoid to use those XML style coding and DSL thing, because they looks anti-standard and hard to remember to me. So I personally prefer the "Flutter Style" over the JSX style. But there seems more votes for JSX style as far as I can see. I am just curious how many people like me is much prefer the "Flutter Style".
He isn't actively on my radar. Last time he popped up he was pushing Smalltalk/Seaside.
Flutter is maybe not the best solution for every needs, but you can use native views and flutter views side by by side ( cf. https://github.com/flutter/flutter/tree/master/examples/flutter_view ). From what I heard, inline native UIs are currently explored, and could be an option ± soon....
Hi, I'm the creator/maintainer of the Angel framework. I'll keep this short, and list the major pros: - Angel was designed with full-stack in mind, so a large amount (validation, models, etc.) can be used on both the client and server. - Angel provides a large amount of functionality out-of-the-box, including a static server, WebSockets, CORS, and response compression. - The core is lightweight, and is designed to not put a lot of runtime bloat on your application. - Dependency injection! Yay. - Supports any database. - Angel is incredibly easy to extend, and has a straightforward plug-in system. - There's a lot of documentation available, and as time progresses, I will add more. - Angel is inspired by Express and its modular design. The router is modular and supports complex groups and patterns, and Angel instances can even be nested within each other, with scoped dependency injection. Of course, there are some cons, but fortunately, not nearly as many as the pros: - I'm currently working on a PostgreSQL-based ORM for Angel, but it's not yet done. So until it's complete, PostgreSQL-specific functionality won't be 100% stable. I plan to be done before the end of July**. - Because of its age (1.5 years), no companies have used it in production yet. However, one company has expressed to me that they have committed to Angel for an application, so hopefully they'll come up with a testimonial that might please you. - The user base is currently small, again, mostly due to its age. This will grow with time. I personally haven't run benchmarks against Go or Node, but a man named Istvan Soos has. He's found Dart to perform well on the server, compared to (if I remember correctly) Java and Go. You'd have to ask him about his results, however. Angel is more than ready for building a complex application like a social media site. I hope that the examples and documentation will serve as an adequate guide for you. I'm always available to answer questions in the Gitter chat: https://gitter.im/angel_dart/discussion Check out the project website for more: https://angel-dart.github.io Thank you for your interest; it's greatly appreciated.
is Angel framework multi-threaded?
It can run in as many isolates as you want, yes. Here's a simple tutorial (less than 1min read): https://github.com/angel-example/multithread
Hi, As thosakwe mentioned, I did benchmark Dart vs Java vs Go vs Node vs Python about a year ago. I shall re-do that soon, but the numbers were roughly in the order of: JVM (X = 100% throughput), Dart VM (90% throughput), Node and Go (80% throughput), Python (&lt;70% throughput). There are other benchmarks that show Dart's good performance, e.g. here, the multiple queries benchmark puts Dart in the first place (Round 14, Multiple queries): https://www.techempower.com/benchmarks/#section=data-r14&amp;hw=ph&amp;test=query Overall, it will depend on your use case, some small detail could influence the results heavily. I encourage you to do your own benchmarks for the specific need you have in mind. An important note that Dart and Node have very different performance characteristic than the rest due the their single-threaded nature, and tuning the performance there is a bit different than in Java or Go. I believe it has many benefits that you don't need to worry about locks and conflicts, on the other hand, if you are obsessed with the performance, you will need to take a close attention to the details on how to make sure you are on 100% of the potential capacity.
For the frameworks: I think this is as subjective as it can get, so maybe you should try them out, by implementing a feature of your app end-to-end in one or the other. One nice thing about Dart is that its low-level APIs are actually nice and usable. If you keep it simple, you can go a long way before the need to choose any framework, and it allows you to get some coding experience with Dart, and you can choose the framework with some insight.
Thanks for the informative reply. I have never worked on Dart before so I am quite curious. I did have some issues with the cli which I have logged in Github.
Thanks. Thats the plan right now. I will be doing some simple prototyping in a couple of frameworks to get the feel of dart.
Sounds great. Darts performance is quite surprising. By the way, i thought that the Dart VM (and as such all the server side framework) is multithreaded. Is there somewhere i can read more on this?
Dart VM can have multiple isolates (think of it as threads), but each isolate is essentially on its own, cross-isolate communication is only with message passing (no shared memory or locks). Each isolate gets its own event queue and processes its events, so for best performance you shall have around N isolates where N is the number of CPU cores, and for each isolate you shall max out its throughput of its event queue. (It is easier than it sounds, but need to be aware of the details.) Old article, but good intro: https://lucamezzalira.com/2013/06/11/isolates-how-to-work-with-multithreading-in-dart/ Some info on the API docs: https://api.dartlang.org/stable/1.24.2/dart-isolate/Isolate-class.html 
Thanks! I'll check it out. There'll be better docs for the CLI eventually.
Here's a pretty detailed guide on that: http://aqueduct.io/docs/http/threading/. The tldr is start with N-1 isolates (N=processing units) and tune from there. You'll get IO-bound out of the gate, so there are diminishing returns as you increase isolate count.
Hi, I've been looking into Angel too. Currently I'm using Go Echo on the serverside, but would love to be able to use one language for front and backend. On suggestion (not a critique, the work you are doing is amazing) - please take a look at Labstack's documentation. It's cookbook style makes it so easy to use. https://echo.labstack.com/cookbook/hello-world . 
Thanks for the feedback! I like the look of those docs... Right now, the main thing in the way of moving the docs to a more attractive site (no offense to GitHub wikis) is money. I have no job (student), so paying for a host is currently not much of an opinion. Eventually we'll get there, though.
Hey there! I am a maintainer of the [OverReact](https://workiva.github.io/over_react/) project. It is a wrapper around React JS. We use it to develop our product and it is a real pleasure to work with. And it is completely strong mode compliant! If you don't know what that is it is the, opt-in, sound typing system for Dart. And it allows you to use the Dart Dev Compiler (DDC) for faster compilation! If you have any questions about using the library feel free to either hit me up here or open an issue!
Thanks for the note. Will check it out.
As awesome as this is, I really wish Dart 2.0 was slated to have null-aware types, too. I mean, while you're breaking everything, might as well add am extra crack or two...
You can try using Sphinx + ReadTheDocs. Sphinx is used for the documentation for Python, the Linux kernel (!), LLVM, CMake, GHC (the main Haskell compiler), the Ubuntu packaging guide, and a host of other projects. ReadTheDocs provides free automatic documentation builds, hosted on their domain (you can also use a custom one), and for all your branches, too. It's insanely flexible, too. Some samples: - https://docs.python.org/3/ - http://mypy.readthedocs.io - https://project-rootbox.github.io - http://kernel.readthedocs.io/en/latest/kernel-documentation.html
Do we know this is not happening?
Yeah I'm pretty sure one of the Dart team members has stated it's not happening in Dart 2
They may be able to do it in a non breaking way. So it could land in 2.x
Q1 2019 I read somewhere. I'll try to find the source..
I doubt it's that long. Sure you didn't mean Q1 2018.
I remember thinking the same when I read it. It could've been a typo
It's Flutter [https://flutter.io/](https://flutter.io/)
Maybe overreact? https://workiva.github.io/over_react/
I believe flutter is exclusively mobile right now. The Dart React package implements react JS bindings in dart using classes, and over_react mentioned below adds strongly typed props and state and uses the dart react package under the hood.
Flutter is react-like and the framework is pure dart (though it only makes sense in the context of the Flutter engine, which is a Dart VM with bindings for 2D graphics). You don't say what platforms you're targetting; Flutter right now does Android and iOS (not desktop). HTH.
Hola, @rishav_sharan I have been using [aqueduct](https://aqueduct.io) while developing a webcomic and CMS. The CMS and webcomic backends are both powered using Aqueduct. I have found it to be straightforward to use and pretty wonderfully testable. There's a pretty good body of documentation available for it and is in use by a number of different folks in the dart community as well as commercially. One of the nice things about using dart is the ability to share code between a compiled to JS angular application and the backend. I run my servers on an AWS stack behind a load balancer and let aqueduct handle everything else. What are your use cases? What do you want out of a framework?
Hey! I am one of the maintainers of OverReact. And while it is not pure Dart we think that leveraging ReactJS makes the library that much stronger. You get basically everything ReactJS offers but in a Dart-y way. If you have any questions around OverReact shoot me a message. Also we have a [gitter room](https://gitter.im/over_react/Lobby) where the rest of the team is listening.
As you can imagine it's [hard to provide](https://en.wikipedia.org/wiki/Forward-looking_statement) that information, and timeframes can also change at any given point. The best next thing is following [our milestones](https://github.com/dart-lang/sdk/milestones).
Thanks. The corporate backing behind Aqueduct does makes it a nice prospect.
Really great extension!!
Regarding (1), I believe that is only referring to the material_components library. [This](https://webdev.dartlang.org/faq) page claims that Dart support goes back to IE 10. I wasn't able to find anything specifically for Angular Dart however. For (3), I would highly recommend the style guide links on the sidebar (Dart Mastery). 
3) I found their docs and codelabs to be sufficiently helpful. If you're stuck, use stackoverflow (primary) and the gitter channel to ask your questions. I think most questions are responded to fairly quickly 4) It's a great option if you're building an app that will mostly be written in house with very few external dependencies (js/ui libraries). Very scalable and very productive. 5) Not the best option if you have a lot of external javascript dependencies that you'd like to import and use (UI widgets, etc) 
Dart went to shit in the Routing section btw. In the earlier sections it was just slow. I guess nobody followed the tutorial that far yet.
Always annoying when something doesn't work :-) AngularDart is going through radical changes right now so tutorials may get out of sync. My personal ngDart project has a smooth edit/refresh cycle - the above does not sound typical. If you have specific issues (routing), you could raise them on github and save someone else some pain. https://github.com/dart-lang/site-webdev
&gt; are obviously a lie ...or they just bizarrely didn't work for you? I've used Dart tooling for a while now, and I've never seen anything like this. It definitely sounds like a random bug, so I wouldn't go as far as to say it's a *lie*.
Idk if this ever occurred to you, but maybe these might be user errors. I've been using Dart for two years, and have always had the smooth tooling experiences that the Dart team describes. If you need help, join one of the Gitter chats, or ask on StackOverflow. Just shitting all over it isn't going to bring you much in the way of solutions. Just saying.
Are you sure you don't have something already running on the port that pub serve uses? This really sounds like user error not a Dart problem.
Is there any reason pub couldn't be updated to output more useful info like this by default? (other than someone needs to do it)
Blaming the user is a great way to have no users. Currently, Dart has (roughly) no users. If he can get up and running with TypeScript and ng2, but has issues with Dart, then Dart must suck. People aren't going to give it more than an hour or so before saying f-this and moving on.
I'm not part of the Dart team; me telling him he's doing something wrong is me saying that as an individual who has had my own experiences with Dart and its ecosystem. I really have no idea what point you were trying to make.
I'd never call someone's trouble with a tutorial "user errors." They might *technically* be user errors, but they're really failures in documentation. 
And that is why OP can turn to the chats or StackOverflow to seek help, and address documentation inefficiencies, like I mentioned above... Just shitting all over it isn't going to do anything. I hope this is clear now, because I don't plan to respond after this.
I think that's the main reason. haha Edit: Looks like Natalie is has a plan for it, https://github.com/dart-lang/pub/issues/912.
Yep... Never had any issues with Dart tooling like that, and I've been using them daily for several years. Definitely better make sure the tutorials aren't out of date...
I'm so stoked for the livestream.
Glad to see a tutorial that shows the Server Side and Client side benefits of Dart.
I'm excited that this is a thing. I've been wanting something like this to digest upcoming changes.
`Future&lt;void&gt;` is a great change. It's not exactly well documented that `Future&lt;Null&gt;` should be used instead, and it's not my first instinct, when changing a `void` function into an async function.
Pardon my ignorance, is there a way to watch the Newsletter folder to be notified when an addition has been made? 
It's a good start but I would like a regular community Hangout on G+. Even the ASP.net folks do it.....
I heard about this from the [dart-misc](https://groups.google.com/a/dartlang.org/forum/#!forum/misc) Google Group. I imagine they'll always post there with new updates.
dart has most of people in gitter channel, found lots of answers to my questions there
This and most other Dart news of significance passes through the [Dartisans community](https://plus.google.com/communities/114566943291919232850) of Google+, typically while it's still very fresh.
I know I'm a bit late to the party, but I thought it worth mentioning that while debugging within IDEA Community Edition is not an option, you can still debug within the chrome developer tools and Observatory. The console that pops up in Dartium when you inspect something will output any debug print commands you have running in the client. Breakpoints are not the most intuitive in Dartium, and Observatory might be more power than you're looking for, but the tools exist, even if they are external to IDEA. My biggest frustration with IDEA CE is the lack of CSS support, but I guess that's a small gripe. I should emphasize that my experience with Client-side apps mostly relates to an Angular client for a game I'm working on, and YMMV with different frameworks and the like... Hope this helps at all, or that you've already sorted it out! :D
I did some tests to see how interpolation compared to concatenation and StringBuffer built Strings. It became pretty dramatic once I cycled through the tests a few thousand times, but that difference nearly disappeared when I compiled to javascript. I'm not sure if this is a result of how I coded it, or if this is expected behavior, but I thought it was interesting.
List concatenation is pretty cool!
You could learn Dart right away, and it wouldn't be bad. What are your goals and what experience do you have with programming languages? If this is your first language, learning Dart may not be a bad thing, since it's a pretty simple language that looks like a lot of other languages. It would be a good stepping stone to other languages. Plus, you can write backend and frontend code in Dart. That said, the documentation is light for many things in Dart, so it may be slightly more tedious at first. (Unless you're good about asking others -- Reddit / slack / irc -- for advise.) If you're looking to get a job as quickly as possible, learn JavaScript, followed eventually by a backend language. (Depends on where you want to work. You could learn PHP off you're freelancing, or ASP.net if you're looking for a Windows shop, or Python and Django.) If you're heading to the university eventually, I'd say learn Dart followed by some language with a different approach. Like Elm or ClosureScript. That way you can make something usable with multiple modalities. It all depends on where you're going next and where you're coming from.
Thank you for such detailed answer. I was working as network admin and was planning to try freelance. Have some experience with C#.There are some orders for front-and-backend. So was getting info. Hope my question and your answer will be usefull to not only me. Looking at your answer, I think it will be worth learning Dart first and js &amp; php later. (Hope i will not be thrusting my nose at too big projects XD ) P.S. can you post link to most active Dart communities? And what IDE have good Dart support ?
Personally, I use vim with the Dart formatter and syntax checker. I believe in the Angular tutorials for Dart it mentions the main IDE they support. (Webstorm, maybe?) Angular is pretty active, though not as much as the Typescript version. (I personally wouldn't recommend starting webdev with Angular, unless you've got a really solid drive. There's a steep learning curve. It will teach you good structure, though.) Flutter seems really active and had a lot of potential. I've been working on a small project in Aqueduct, which is a pretty nice backend. It seems pretty active, and they're great about accepting merge requests and answering questions. It's pretty easy to get started with Aqueduct, as far as backend frameworks go.
Atom and VS Code both have great extensions for Dart!
Great material for learning Dart as a newbie: [Dart Academy Boot Camp](https://dart.academy/dart-academy-boot-camp-start-programming-with-dart/)
Do you have any recommendations for specific places to ask very newbie questions about about Dart/Angular? I've been asking on gitter's dart-lang/TALK-general and dart-lang/angular but a combination of timezones and newbishness has produced somewhat mixed results. My experience in playing with AngularDart (I have a day job as a C# backend/thick client developer but dart/angular/webdev are all new to me) is that it is quite an uphill experience. This is not to malign anybody - the community is nice and the language is amazing, but it doesn't have the critical mass yet to have a community that can largely self support (compared to what I've seen with .NET/C# on e.g. the stackoverflow et al) newbies like me. And/or maybe I'm just a dummy! 
Gitter is the place for that, pretty much. Have you done all the [code labs](https://www.dartlang.org/codelabs), too? It needs a bit of updating, but [Dart Academy](https://dart.academy) has a lot of stuff, as well.
I've done the Material Design AngularDart Web App and the Firebase Web App. I've also done the Tour of Heroes, which was fantastic but IMO doesn't really go deep enough. After doing that, I thought to myself "time to build an app!" and promptly ran into several brick walls. I've not done the Flutter labs - the framework is very exciting and I want to take a look eventually... but at the moment I given the pain involved with the current trifecta of 'new' I don't want to add to that and just add another potential dimension of confusion. I'm aware of dart academy and have gone through a couple of the tutes there. Perhaps if I knew dart, learning angulardart wouldn't be so bad. Or if I knew angular/webdev paradigms, learning dart wouldn't be too bad. But the combination feels brutal. Sometimes I'm reading documentation in typescript and trying to map it over. Or reading documentation and then later realising it was for angular 1.
Yeah, that is a lot of new stuff to absorb at one time.
I'm at work, but i can't wait to see this. Hope it's good
What's that weird outro all about? [-_-]
Let me know if you guys have any questions about Flutter! happy to help! (i'm the guy from the video)
+1 for const functions! Looking forward to use them in annotations :)
[removed]
Ugh, I use Sublime and that plugin hasn’t been updated for flutter at all. 😕
Thanks! Though the title is slightly misleading; it's for Visual Studio Code and not Visual Studio :-)
Time to switch then! ;)
[I like my text editor lightweight though. ](https://medium.freecodecamp.org/why-i-still-use-vim-67afd76b4db6) 
Yeah, I know what you mean. I like the convenience of a lot of these electron apps, but they tend to feel kinda bloated even when they don't do a lot! ;(
Right! Yeah, I wish I could edit the title... Visual Studio Code, guys. :)
I like the ideas presented for Mixins. I remember when reading The Dart Programming Language, as a novice programmer and a complete Dart beginner, I was more than a bit confused by the mixin section.
Why I didn't use a descriptive title.
It's it. What is it.
Can you contrast it with AngularDart, which seems to have a much larger community? What does VueDart intend to give me that I can't get with Angular?
Many of the points [on the official Vue vs Angular comparison](https://vuejs.org/v2/guide/comparison.html#Angular-Formerly-known-as-Angular-2) still apply to the Dart world. For me at least, my personal reasons are mostly: - Lightweight-ness. Vue is really small; IME it's significantly lighter than Angular. - AngularDart's material widgets don't have IE support and lag quite a bit on my phone. In contrast, VueMaterial has better performance and works on IE. - Vue is *much* simpler than Angular. I got started building my first Vue app around 20 minutes into the documentation. - Vue is also less opinionated; your applications don't necessarily need follow an MVC pattern. I mean, at least these were my personal ideas when I was writing VueDart!
I work on AngularDart and I love seeing alternatives in Dart!
Cool.
I had no idea Dart had a call method. Operator() makes way more sense to me, but I do understand there could be reasons people can't use it. Waiting for 2.0 makes sense, as people will be expecting breaking changes anyway.
(When?) Will they update their tutorials to account for breaking changes, if used/mentioned anywhere? Tiny nit but just curious what it's been like in the past. Getting into Dart and AngularDart now so dont want to learn something/get used to something that may no longer exist!
I'm using, little changes in code to adapt, but very stable! I felt optimizations too, more quick apps.
This is a great use of your package!
Thanks!
Can anyone comment when to use firebase vs gcp?
We've worked hard to make sure all of the tutorials and examples have been updated. If you find anything outdated, please let us know!
Use Firebase or GCP for what...?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [In Record Time: How we Quickly Built a Serverless app with Firebase and Flutter (GDD Europe '17) • r\/dartlang](https://np.reddit.com/r/programming/comments/6ybae5/in_record_time_how_we_quickly_built_a_serverless/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
no specific project in mind, just wanted to know which was good for each situation I know there's an official firebase wrapper, but i'm not sure what gcp has for dart
Appreciate the response and thanks for all the hard work. Looking forward to delving deeper into the world of dart and angular dart 4! 
I'd be happy with automatic type promotion on finals. Who even uses mutable variables anyway? **Edit** Okay maybe I can see wanting promotion in `if (json['key'] is String) { /* ... */ }`. Generics, though necessary, seem to cause no end of problems. Unless, perhaps, they were built perfectly from the start; refactoring complex type systems in painful. I can see why the Go community doesn't want them.
nice and useful, i wish there were more articles with real word examples like this 
Yup! Dart has [snapshots](https://github.com/dart-lang/sdk/wiki/Snapshots). You can run: dart --snapshot=program.dart.snapshot program.dart This will generate a new file program.dart.snapshot. This will essentially contain a "compiled" Dart program. You can now do: dart program.dart.snapshot --some-arg A snapshot file contains all of the Dart script's dependencies and such; this is actually how the Dart tools (e.g. dart2js) and the Flutter binaries are distributed.
Thank you.
Note however that unlike Java jars, that snapshots are not guaranteed to be compatible across Dart VM versions. The VM that creates them stamps them with an identifier; that identifier is read by the VM that runs the snapshot, and if it’s incompatible exists immediately with an error message. IIRC the identifier is basically a hash computed from the sources of the snapshotting code in he VM, so it doesn’t change with every VM version, just when things change with snapshotting. 
There is the Image package: https://pub.dartlang.org/packages/image ... and a few others.
Thank you - this looks like exactly what I want!
Just want to comment: that library is absolutely fantastic. I've been using it for one of my web apps, and I love it!
cool stuff, new async looks useful. 
&gt; Note however that unlike Java jars, snapshots are not guaranteed to be compatible across Dart VM versions. There was "dart2dart" (dart2js --output-type=dart) in the past, which created a single tree-shaken Dart file. Seems like support for that has been dropped ages ago, though.
Yep. Way back in the day, dart2dart would have produced a smaller, slimmed down script, but was never fully-supported, and not particularly reliable. I can't remember how well mirrors or native extensions were supported, but my guess would be somewhere between 'not at all' and 'incomplete'. I can't remember when we eliminated it, but my guess would be `dart2js --output-type=dart` was ripped out somewhere around 1.10.
This is really cool! I'm really excited to hear that there are people who are using Dart for backend/server-side applications; I see a lot of potential there. I also didn't even know about the pool library. Awesome article. Thank you for sharing.
Arent isolates going away in dart 2?
I'm pretty sure the latest Dart Newsletter details their plans for minor changes to the Isolates library. I don't see indication that it's either changing significantly or going away.
I've not actually used Angular TS but it seems to me that they're rather similar. Both seem to use the `@Component` annotation for components. I'd recommend reading this [tutorial](https://webdev.dartlang.org/angular/tutorial/toh-pt1) to get some examples of what AngularDart is like.
Isolates are only going away in dart2js. They will still exist on the VM.
Thanks so much!
They used to be pretty much equivalent, but at this point there are many differences. The general gist of it is the same, though. Things like @NgModule() only exist in TypeScript, though, so keep that in mind.
I often use the Typescript documentation for more obscure things. However, anything that can be replaced by the language generally seems to have been. (For example, EventEmitters were replaced by streams.). If you have a solid grasp of Dart, it will probably be easier. You'll probably want to look at examples in Dart at least, just to see what's different.
awww method extensions...&lt;casts evil eye at Dart team&gt; jk all in good fun, dart is still great!
Maybe if they hadn't made the install process such a painful job then everyone would have tried it.
How was the install process painful for you? I literally installed it in like 10 minutes...
I don't know. But I tried it countless times for 2 weekes pulled my hair asked on stackoverflow, their github, gitter ... no solution. Tools like this is how you get brain aneuyrism. 
Have you setup many dev environments before? What OS are you using?
When did you try it? I set it up recently and found the "doctor" a great help. However, I did have an android dev previously setup, so that made it easier. 
I'm so intrigued by this. If only I had the hardware. Props for creating!
Dartifact link isn't working right now?
Sorry, fixed the link. It was https, but only http worked.
Got my answer for MacOS at least. &gt; $ ./bin/cache/dart-sdk/bin/dart --version &gt; Dart VM version: 1.25.0-dev.11.0 (Wed Aug 23 04:49:43 2017) on "macos_x64" 
Your building a VR engine using a language the compiles to native and works great on mobile platforms. You might look into the Nolo VR for building VR applications that run entirely on the mobile platform, with no need for a PC.
&gt; Lots if interesting tasks.
I'm not sure how I feel about the new syntax proposal. I do agree, to an extent, that defining immutable variables in the local scope should be easier, since immutable variables are more common then mutable ones in the context. However, I'm not too convinced about the syntax that's being proposed. Perhaps a different 3-letter declaration keyword would be better.
If they were the only two guys working on Dart, than i guess yes. Otherwise i don't really see a connection.
Yeah no.
&gt; Because Dart is both expressive and fast As an Android developer, Dart is a huge step backwards from Kotlin. Otherwise, this looks great. Sigh.
Can you elaborate on why Dart is a huge step backwards from Kotlin? Or alternatively what is it about Kotlin that makes it so much better?
no concept of algebraic data types/union types/enums with associated values/sealed classes. Kotlin's sealed classes are a game changer. I don't think Dart has DSL support either. It's a shame, because otherwise Flutter looks like a very attractive option.
Can you elaborate on why sealed classes (or some of the other features that are deal breakers) are important to you? If there's a good use case I can bring it to the Dart team and see if they can add it. :-)
Sealed classes allow you to represent multiple return types for a method. Then the consumer of that method can control flow accordingly. Ex: A database call could succeed, or fail because the disk is full. If it fails, I may want to hop on to the main thread to display an error message. Kotlin's sealed classes allow you to representation the success or failure of an operation is a DTO (data transfer object) or pojo. Traditional programming would encourage the creation of a listener. But that is usually defined by the method, not the caller. A DTO can be easily handled by the caller and passed across threads. This also encourages a more reactive approach.
Sounds cool, I'll bring it up with the Dart team. Reading up on it, I especially like the way it can be used by static analysis tools to tell when you've verified every possible class, similar to enums in switch statements. Fundamentally, if Kotlin is making you more productive, then I strongly encourage you to keep using it! No solution is for everyone, and we're definitely aware that Flutter's approach isn't everyone's cup of tea.
&gt; no concept of algebraic data types/union types/enums with associated values/sealed classes. Thanks! ADTs and pattern matching are on the radar to add. Maybe give Dart/Flutter a try before we add them? I do miss ADTs myself from time to time, because they allow to write very concise class definitions. Here is what I am using instead: sealed class Result data class Failure(val error: String) : Result() data class Success(val value: Something) : Result() fun unwrap(res: Result): Something = when(res) { is Failure -&gt; reportFailure(res.error) is Success -&gt; res.value } becomes this Dart: class Result { } class Failure extends Result { final String error; Failure(this.error); } class Success extends Result { final Something value; Something(this.value); } Something unwrap(Result res) { if (res is Failure) { reportFailure(res.error); } else if (res is Success) { return res.value; } } seems to be close enough (one missing thing is "exhaustiveness check").
FYI there is a [Dart implementation of redux](https://github.com/davidmarne/built_redux). It's being actively developed and used in production at [Workiva](https://www.workiva.com/).
There are a bunch...
I think Flutter's approach is AWESOME. just the wrong language :-\ But thank you for listening!
We did consider a number of languages. Kotlin unfortunately wasn't really ready when we started working on Flutter so it wasn't an option. But we can evolve Dart (that's one of the things we liked about Dart), so there's still a chance for the features you like to become part of our ecosystem. :-)
The article mentioned "We would love to experiment and come up with something similar for Flutter" so I was just throwing out something similar. Not sure if you're the author. What redux package do you use? Edit: There are flutter bindings as well https://github.com/davidmarne/flutter_built_redux
Nope, not the author. I've only done toy apps with Flutter so far, so I haven't gotten deeply into the world of Redux for it just yet.
1. Does Dart have something like extension methods? I found https://github.com/dart-lang/sdk/issues/13, but maybe it has changed since then? 2. Receiver lambdas seem pretty unique to Kotlin and have been _very_ nice to use in practice for me. E.g. instead of cascades being part of language the same job is done by a library function. 
[Official API reference?](https://api.dartlang.org/stable/1.24.2/dart-collection/dart-collection-library.html)
One of my favorite references is [Dart by Example](http://jpryan.me/dartbyexample/). [forEach](http://jpryan.me/dartbyexample/examples/for/) [Collections in Dart](https://www.dartlang.org/resources/dart-tips/dart-tips-ep-5) 
Coming from flutter, I'm definitely finding AngularDart way to heavy and "Enterprisey" for me. And I'm looking for something more lighthearted. But Angular has the full-dart thing, instead of just being bindings to a JS library, and it has all those wonderful material components.
I understand that with the tree shaking ability of dart2js you'll end up dropping everything you do use. So even though angulardart might provide everything in src, it doesn't mean it'll be included in your final build
FWIW I use VueMaterial 0.7 (and VueDart comes with built-in support); both this site and the main VueDart site use it. In the JS world, there's also Vuetify. Before I wrote VueDart, I was actually considering using AngularDart for my website, but the fact that their material components don't work on *any* IE version at all was a deal-breaker for me.
Oh don't get me wrong. I'm sure Angular Dart is very, fast and optimized. Thats not what I'm trying to say. Here let me give an example. While reading the docs, I kept thinking to myself, the next page was going to go like this. ------ # Letter A Handling Now, if you are using any instances of the letter A, in your application. We've also broken that out, so you can create an &lt;app_component&gt;.a file. And put all your A's in there. Such as this. ### my_app_component.a `AaaaAaaAAAaaAaAAaaaAAAAaaaaaaaaAaaAaAAAaAAAAAAAAaAaaaAAAaAaaaAAaaAaaAAAAAaAA` ## Referencing your A file. Now you need to let your component know how to find the A file associated with it. You can add this key to your @component annotation ``` @Component( aUrl: 'my_app_component.a', directive: [AFiles,UpperAndLowerCaseAs], ) ``` But of course, hard-coding the A file such as this would make the component completely untestable. So a preferred solution is to create an A factory to be injected into your component, such that your component can ask for any sort of Letter A's that it needs. Without having to hard-code them into a content file. example code of: 1. creating a factory for generating the letter a. 2. annotating your components, so that it can receive an injection of an A factory. 3. Registering the A factory with the component. 4. Refactoring the example code so now your registering the A factory with some parent component instead. 6. Add directives for right to left As. # Letter B Handling ...
You make a good argument
I write all of my Crome apps and extensions in Dart (with the hope, they'll one day include the Dart VM in Chrome).
If it won't trouble you, could you share a hello world extension on GitHub?
Yes, it's possible. There's the [chrome package](https://pub.dartlang.org/packages/chrome), and it's constantly updated. I've used it to write an extension that un-incognito a tab.
Yes! I've written two. https://github.com/JaceHensley/verter https://github.com/JaceHensley/blt_ext
Thank you. I guess I'm having issues with my manifest files. Is it possible for you to share your manifest files?
Yup, they are in the src/ directory. Everything in the src besides the manifest file gets generated by the tool/build.sh file
Yup, they are in the src/ directory. Everything in the src besides the manifest file gets generated by the tool/build.sh file
It's official. I'm so stupid I can't even make the example in chrome package work.
Thanks!
Good tutorial! Thanks, Lee!
No problem!
Loving Hackernoon on Medium. Newsvoice are doing cool things with Flutter, too: https://steemit.com/news/@crypticwyrm/newsvoice-an-app-using-google-s-flutter-framework-that-lets-you-see-news-from-different-perspectives-to-combat-bias 
Good stuff, deserving of its own post. On it. ;)
Could be easier for example just “brew install flutter” on macOS. 
I'm interested, but I'm not sure if I can apply. cons: - have experience with many server-side frameworks, but not with rails. - no haml experience (but does it count? I mean it's just synthetic sugar) - less skills, but no scss skills - Bitcoin n00b. Only lost money on Bitcoin trading until now :/ - only 4 years of experience - no impressive SO or github page pros: - I'm proficient (and in love) with linux/mac. - I'm proficient at English (I speak English it at work in an international team). - I do lead the Front End at my current job (es6, try to have to code as Dart-y as possible) - Can do wire-framing, data modelling, user stories, process diagrams - MSc degree in CS - Always program in Dart for a hobby since a couple of years, and would murder for a job in Dart. How does a salary work with BC and its fluctuating price? How does a salary in BC cope with taxes? Let me know if you're interested, and I will send a more serious application.
Nice - lots out there about Flutter at the moment, big question is if they'll move from alpha to beta next year? https://medium.com/@seenickcode/why-flutter-will-take-off-in-2018-bbd75f8741b0
Yep, that's another good one.
So besides documentation. How is it better than TypeScript + React / React Native? There is a huge ecosystem around react and react native (simply because of the JavaScript world) that I don't really see with dart or flutter. Targeting your points directly though... 1. This point has no relevance? It isn't arguing to use flutter over any other framework... 2. Documentation is not that great but the community is amazing. 3. You can use React with TypeScript and that fixes a ton of issues or even using the latest ES standards is better. This seems more of a dig at JavaScript itself instead of a reason to use flutter over some other framework. 4. JavaScript is stupid simple to learn as well as TypeScript so not sure how this is a pro for flutter or dart (I already know JavaScript and Typescript and dabbled in dart and I prefer TS over the other two). 5. I actually have never used their docs so I have no issues with this statement. Honestly, your quick 5 bullet points don't seem to give me any reason to use flutter over react native... 
Note: I posted this article, but I'm not the author. As someone who works with both TypeScript and Dart every day at work, I can tell you definitively that the Dart workflow is far, far superior to what TS offers. Don't get me wrong: TS is so much better than plain JavaScript, but it falls well short of Dart in simplicity and tooling. None of that is TS's fault, exactly...its JS legacy is what holds it back. Every developer at my company feels the same. They all sigh when it's their turn to update TS code. For just one of many, many examples showing how Dart makes life easier, check out [TypeScript vs. Dart: Class Constructors](https://dart.academy/typescript-vs-dart-class-constructors-part-1/).
This article does a bit more thorough job of comparing Flutter to frameworks like React Native:[ Why native app developers should take a serious look at Flutter](https://hackernoon.com/why-native-app-developers-should-take-a-serious-look-at-flutter-e97361a1c073)
Framerates of RN vs Flutter’s rendering engine. I Completely forgot to add this in the article.
Just installed Newsvoice and very impressed with the design and performance of the app. Especially like the transition from the news list -&gt; selected article -&gt; back to news list. Makes me want to go Flutter something into existence!
This is a sweet step by step! Thank you very much, keep up the good work!
This technique will work at preventing any registered callbacks from firing, but the underlying Future and any resources it is holding onto will exist until it is completed or errors out. This is because `asStream` does not convert the Future to a Stream (it can't, the SDK future is immutable), it just creates a new Stream and pipes the future response to it. For example, the following program will still print hello world, even if you cancel the stream subscription. var a = new Future.delayed(new Duration(seconds: 1)); a.then((_) =&gt; print('hello, world')); var sub = a.asStream().listen((_) =&gt; print('goodnight moon')); sub.cancel(); // ... 1 second later // =&gt; 'hello, world' 
True. Using `asStream()` in this manner does not stop the Future from completing, but as illustrated in the article, the purpose is just to prevent the callback from firing in certain instances. Thanks for the extra insight! Another astute reader mentioned that we could use CancelableOperation from the async package on pub.dartlang.org, too.
Awesome work!
Thanks for posting. I'm new to all things Dart, but I'm eyeing it (and Flutter) for an upcoming venture. Videos such as this go a long way to help spread the word. Really looking forward to diving in (as soon as I get a couple of current projects out of the way...). 
As someone who has been doing Dart Development for the last 2 years... I will say firmly that Dart has some utility but is incomplete. It feels like it is barely out of alpha and to add on yet another component which is also in alpha on top of it just sounds "Eh". Maybe one day it will have use but not in the near future for large scale application development. Everything we can do in dart is easy to accomplish in other languages (sometimes easier in other languages), so I with 2 years of experience with this platform, still see little to no use of Dart. That brings up Adoption. After 2 years of working fulltime in it, I am quite capable at saying: After my work day ends, I have and will never use dart for developing private development. This brings me to the article. Google creates things just for the sake of creating them. That is what they do. They will then see things succeed and things fall all the time. To believe there is incentive to develop dart is kind of a "eh" statement. Yes, they use it on some major key products, but they have followed that design through many facets of products. What works today will not necessarily work for tomorrow. The thing I can closely see as a parallel though, is that Dart was suppose to be in all browsers and failed. They have a Dart2Js to handle it for the front end for now. This product is just something they can control, as opposed to browsers which were pretty much unanimously denied. Will it take off? Ehhhh, maybe, but you still have to address the issue of "how do you create more people interested in dart when everything it does, can be done in other languages." It just reminds me of that old Javascript XKCD: https://xkcd.com/927/
As someone who's been using Dart professionally and on side projects for several years, I could not disagree with these comments more. For those of us who've been on board since the beginning, there certainly have been a few annoying pivots in focus, and obviously we were sorely disappointed when Google abandoned plans to put the Dart VM in Chrome. But Dart remains an easy-to-use, easy-to-teach, and very friendly modern programming language that's suitable for many tasks. You mention that it's hard to create interest in Dart simply because other languages can do what it does. That is the case with almost any language, and in my book, that's a good thing. Programming is a big field. There is room for lots of options. In my opinion, certain tasks are far easier with Dart, such as web apps and now mobile apps, simply because the language is nicer in many ways than options like JavaScript and Java. I have yet to encounter a professional requirement that Dart couldn't fulfill, even if that meant making use of JavaScript interop libraries and bringing in a JS solution for a feature. It really is quite easy to do, though I admit that is one aspect that could use a lot more documentation. Where I work, we develop and maintain a couple of very big apps, one using Ionic (TypesScript), and the other an AngularDart web app. We all strongly prefer working with Dart. In fact, we'd be using Flutter instead of Ionic if it'd been a bit further along when we began the project, and we plan to migrate as soon as it's feasible. Between Flutter and Google's new Fuchsia OS, I think Dart devs have a lot to be excited about in 2018. As with anything, only time will tell.
I've always been of the mindset of 2 points: "just because you can, doesn't mean you should" and "What is the best way to solve the problem?". I have definitely seen improvements in the language, so I am not saying it is bad, but I havent seen anything which make it stick out over its direct competition. It does have some key points which in fact make it somewhat easy to learn, but those exist regularly in other languages as the evolve. I just got reacquainted with the new ECMAScript. Wow, that was nice and smooth. Though, I understand that there is not a program requirement dart cant fill, you could be right. It has some versatility, but so do many other languages, Compiled, Scripting or otherwise. I have just seen a regular trend throughout the history of the language as you too have seen. It has shifted from "The New Standard for the Web on all Browsers" to "It will be on Chrome" to "Hey Guys, we will just compile into Javascript making non-readable bloat" to "Well, the trend isnt picking up, lets create something we can control, Native App Dev, from our own tools where no one can deny us!". It isnt the best look, but i understand the shifts. It is needed for a blooming company just as it is for a blooming language with its usecase. Dart is trying to really push and find its footing and its particular use case, and as both you and I said, *only time will tell*. I will look into this sure, and test out Flutter to see how it is in order to see how it is blooming, the continued releases of Alphas and business layers of alphas depending on alphas, just creates needless unpredictability and instability. Enterprise companies cant afford this, and therefore has to be marketed so smaller companies of sub 500 pax in order to properly mitigate the volatility to grow better.
Flutter is new and still alpha. I don’t think you’ll find any job anytime soon, unless Google hires you 
Most frontend in company written in dart and afaik mobile division is experimenting with flutter