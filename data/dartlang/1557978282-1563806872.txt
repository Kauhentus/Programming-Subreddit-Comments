Or just keep a list of futures front the getData function and create them first then await on them in a 2nd for loop
Something like this should work? ` void main() async { var list = [1, 2, 3, 4, 5]; await Future.wait(list.map((x) async { String info = await getData(x); //parse data })); } `
It is such a shame AngularDart doesn't get a little more attention. The company I work for wanted to use Angular to build a new project and I would have loved to have done it using AngularDart. In the end though, I went for the TypeScript version as there are so many more tutorials, plugins and themes available.
Which new features of 2.3 is it using now?
The enhancement simply makes the Dart API client compatible with Dart 2.3. If there's any particular new feature of Dart 2.3 you would like to see in the Dart API client, please let us know by opening an "issue" (ticket) via http://github.com/openapitools/openapi-generator/issues/new
You might wanna look into the Duration class. Here's something I tried doing: [https://gist.github.com/code-shoily/f15b9a4ff1536561c2d2d221aeff1333#file-timediff-dart](https://gist.github.com/code-shoily/f15b9a4ff1536561c2d2d221aeff1333#file-timediff-dart)
Here is some play with Duration and DateTime [https://dartpad.dartlang.org/b80015d60808802412b3e635b95001b4](https://dartpad.dartlang.org/b80015d60808802412b3e635b95001b4)
Hey, I'd say it makes sense to use Dart for the server-side since its the same language. Check out my channel should you need ideas on approaching serverside Dart [https://youtube.com/CreativeBracket](https://youtube.com/CreativeBracket). Reach out to the people at [gitter.im/dart-lang](https://gitter.im/dart-lang). You'll find people using Dart in production.
The duration class is definitely the way to go, but if you'd rather have something direct, try: &amp;#x200B; int minutesSinceMidnight(String s) { return int.parse(s.substring(0, 2)) \* 60 \+ int.parse(s.substring(3, 5)); } String timeDiff(String from, String to) { var diff = (minutesSinceMidnight(to) - minutesSinceMidnight(from)) % (24 \* 60); return '${'${diff \~/ 60}'.padLeft(2, '0')}:${'${diff % 60}'.padLeft(2, '0')}'; }
https://aqueduct.io/
Thanks a lot! I’ll definitely do it
There is this angel framework that gives you graphql out of the box. It is a very good server framework to use. Aqueduct is also very nice. Jaguar is also well known and supported. I use dart for both front and backend and I am very happy with it. Being able to share code everywhere is incredible
What kind of code you share? Models?
On top of my head I remember of models with metadata, validations, utils functions
Another thing is that you can read the server and front end code as the same. So if you are using promises with async and await in server you will also understand it's usage in the frontend. There are other packages that work in all platforms, like the http package. You can fetch stuff in the serverm front and mobile the same way.
I think you want `on SomeException catch (...)`. This works for me: Future&lt;void&gt; willThrow() async { throw InitException(); } Future&lt;void&gt; init() async { try { await willThrow(); print('will never get here.'); } on Exception catch (e) { print('init failed: $e'); rethrow; } } Future&lt;void&gt; main() async { try { init(); } on InitException { print('main() failed gracefully'); } } class InitException implements Exception {}
I think it's probably because you need to `await init()` in the try catch.
That was it!
Is your code running in a browser? Or is this server side or Flutter? If it is in a browser, the browser itself handles the cookies, so you must set it on your document: https://api.dartlang.org/stable/2.2.0/dart-html/Document/cookie.html
Code is running in a browser. Could you clarify what you mean? I've done print(document.cookie); which returns nothing as well as: document.cookie = 'xtoken=1234567890' and both of these do not work for properly using the cookie value in the xtoken field.
I wish if half of every blog post was not about how to install Flutter and Xcode...
Yeah, that's already written well on the main site. There's no need to rehash it.
I actually am going to use the Flutter GraphQL package for my AngularDart project, I looked into the source code and if I don't use the widgets and replace it with services I can do away with it. I have time in my hand right now so I can "risk" it. Working on a small PoC right now.
I am started gaining experience with it since yesterday. Decided to use AngularDart for a side project of mine (help desk app with Phoenix + AngularDart) and the backend is GraphQL. I decided to spend a week or two behind checking out if I can tweak the Flutter GraphQL client to be used by AngularDart (since only widgets are flutter specific, I could add a component/service there and inheric/inject it on my app components?). I am working on a PoC to see how it works and it will be open sourced, expect to see it by next week if it goes well?
You're doing exactly what I was thinking of doing, let me know if you need help on anything.
That'll be great! Thanks.
Well, but that's required to start with Flutter :) What would you like to read?
Flutter specific architecture, design patterns, general practices, the Flutter site has all the info on getting started with the environment...
As someone brand new to dart and flutter I wholeheartedly agree. The Dart website takes me through installing and hello world. And the flutter website also does a good job of walking through install and creating the hello world app. The one confusion I had was accepting the licenses. The areas that aren't covered are after I've built the app and run it successfully the first time... Making a list of counters with their own button. Have a text field that lets the user type their name and dynamically update the hello world message. Download 25 random cat images from Picasa in the background and delay them in a grid as they load up. Every single Dart and flutter tutorial I've come across seen to assume setup is there hardest part and once done everyone will just mainly start making awesome apps. If I've missed the good ones, please reply and link them! :)
I'd love to see posts from codemagic that have more substance than "reworked install procedures for popular OS. Please buy our software." At this point as soon as I see that url I assume it's an advertisement.
Thanks! It's good feedback!
Thanks! We will take it from here:)
I don't believe there's an official one, but various server-side frameworks have them, I think. Maybe Angel...
There are several [orm](https://pub.dev/packages?q=orm) solutions for dart. Most of them work out of the box with PostgreSQL or SQLite. If you need another driver though, you might have to add another package: SQLServer: [dart\_mssql](https://pub.dev/packages/dart_mssql) MySQL &amp; MariaDB: [mysql1](https://pub.dev/packages/mysql1) &amp;#x200B; I do not have any experience with any of those packages, so I cannot describe the quality. &amp;#x200B; Another solution which you might have to invest more time into is the following: Use [js\_facade\_gen](https://github.com/dart-lang/js_facade_gen) to generate interop facades for [type\_orm](https://github.com/typeorm/typeorm) &amp;#x200B; I do not have any experience with all those proposals, but that's how I would tackle it. I have done an example project with typeorm and liked it.
Question is if any of them is officially backed by Google, so it doesn't fade away after some time.
None is officially backed by Google, but IMO that's not really a good reason to entirely avoid using something...
none of them are officially backed by Google... afaik
i was reading about both of those yesterday. i don't have any links because I'm on mobile, but if i remember correctly, extension functions are in progress, but nullable types are not planned please correct me if I'm mistaken
Check out this video at 33:00: [https://youtu.be/J5DQRPRBiFI?t=1986](https://youtu.be/J5DQRPRBiFI?t=1986) They talked about new features including extensions and also non-nullable types. At least it sounds like both are currently in development. 🤔
https://github.com/dart-lang/language/issues/142 check the final comment from two months ago: &gt; not planned
I would trust the google io video since it more up to date. But this means that they didn't spend much time on it and it will take a while :(
i haven't watched the video yet, but as a compromise we can agree, at best, they have only planned nullable types for two months or less
True! i am happy if i get this feature at the end of this year :D
Both of those are currently being implemented. Check the language funnel for updates, here's the link: [https://github.com/dart-lang/language/projects/1](https://github.com/dart-lang/language/projects/1)
Have a look at Andrew Brogdan Twitter. I think he mentioned something. About it moving out of being spec’d into being implemented
Both of them are being implemented now. [https://github.com/dart-lang/language/projects/1](https://github.com/dart-lang/language/projects/1)
This is just a very specific piece of non-nullable by default (NNBD) project - an operator over types that cancels out nullability (eg `int?!` is `int`) You might need it occasionally when writing generics, but consensus on the language team apparently that it might be not so useful after all. The umbrella issue for NNBD from the language design perspective is this one: https://github.com/dart-lang/language/issues/110 (as you can see adding non-nullable types to the language requires figuring a lot of things out - and it has been going for a while).
You can already test nonnullable on dev version. It seems it is already working. Only indentation is getting messed up with type?
Definitely lots of people on Gitter...
This is an ad
I'd place it more in the "infographic" category than an ad, but only barely. While they have their branding, they aren't shoving their products in your face with it.
How can I check out the dev version?
&gt; they have only planned nullable types for two months or less I started prototyping non-nullable types in Dart in 2017. That work got tabled for a while. We started working on it seriously again at least before October of 2018 when [this bug](https://github.com/dart-lang/language/issues/71) was filed. The [current proposal](https://github.com/dart-lang/language/issues/110) which is being implemented right now started around last fall. A good chunk of the Dart team are currently hard at work implementing it (mostly folks on the analyzer team who work on the IDE support and static analysis, since it's mostly a static feature).
We don't generally put out roadmaps with precise dates since schedules tend to be fluid. But the team is actively working on both of them. One segment of the team is working on non-nullable types and another is working on extension methods. There are a couple of open design questions around extension methods but both proposals are pretty solid at this point.
that's great news. im glad im wrong :D
depends on your OS: [https://dart.dev/get-dart](https://dart.dev/get-dart). Go for dev channel when installing. then you add on your analysis\_options.yaml: analyzer: enable-experiment: *- non-nullable*
Just curious. Why would you use Dart for scraping?
Not OP but I would assume because an API isn't available
Probably when making a flutter app and an api is not available
I do all off my scraping in python and dump to mongo and consume that. I never thought to scrape from the frontend. Seems dirty...but if one needs to or has no other options.
I do all off my scraping in python and dump to mongo and consume that. I never thought to scrape from the frontend. Seems dirty...but if one needs to or has no other options.
We'll if you're just making an experimental app and don't want a centralized server you could do it in the frontend. I agree though, having a bot that scrapes and stores results in a DB is a better solution.
I am relative new to scraping and to dart/flutter, thought it would be a way to learn both at the same time.
Fair enough. Good luck!
Do you know if angular Dart supports Dart 2,3?
any error msg? I upgrade to 2.3 without problems
Yes, when I create a problem blank todo project it works.
it does, but your reasoning is incorrect. you should check the pubspec to verify version compatibility
I've got just the right tutorial for you – [https://creativebracket.com/write-your-first-web-scraper/](https://creativebracket.com/write-your-first-web-scraper/)
What problems did you run into?
Yes, so long as the data exchanged is understood by both parties, it doesn't matter what language the service is written in.
Yes as long as it’s the same protocol. I.e. Anything Tcp/ip can connect to anything tcp/ip
So i can just write the whole server stuff in dart and use flutter just to presebt the photo right?
Isnt your server in Python?
Yes - server in python, I confused
Strange... I have quite a bit AngularDart project (though I, too, am converting it to Flutter), and the Dart SDK upgrade didn't seem to affect it.
Might want to check out package:async and package:buffer.
This is the full log: &amp;#x200B; `dart_sdk.js:100510 EXCEPTION: No provider found for dynamic: DashboardService -&gt; dynamic.` `**NOTE**: This path is not exhaustive, and nodes may be missing in between the "-&gt;" delimiters. There is ongoing work to improve this error message and include all the nodes where possible.` `STACKTRACE:` `dart:sdk_internal 4556:11 throw` `package:angular/src/core/change_detection/packages/angular/src/di/injector/injector.dart 20:3 throwsNotFound` `package:angular/src/core/change_detection/packages/angular/src/di/injector/injector.dart 92:14 get` `package:angular/src/bootstrap/packages/angular/src/core/linker/app_view.dart 313:28 injectorGet` `package:angular/src/bootstrap/packages/angular/src/di/injector/element.dart 23:16 [_injectFrom]` `package:angular/src/bootstrap/packages/angular/src/di/injector/element.dart 31:7 provideUntyped` `package:angular/src/core/change_detection/packages/angular/src/di/injector/hierarchical.dart 123:14 injectFromAncestryOptional` `package:angular/src/core/change_detection/packages/angular/src/di/injector/hierarchical.dart 36:16 provideUntyped` `package:angular/src/core/change_detection/packages/angular/src/di/injector/injector.dart 90:20 get` `package:angular/src/bootstrap/packages/angular/src/core/linker/app_view.dart 313:28 injectorGet` `package:DMS_Working_Copy/src/administration/packages/DMS_Working_Copy/src/dashboard/dashboard_component.template.dart 108:57 &lt;fn&gt;.dart.test.src__di__errors.debugInjectorWrap.dart.fn` `package:angular/src/core/change_detection/packages/angular/src/di/errors.dart 43:22 debugInjectorWrap` `package:DMS_Working_Copy/src/administration/packages/DMS_Working_Copy/src/dashboard/dashboard_component.template.dart 107:11 build` `package:angular/src/bootstrap/packages/angular/src/core/linker/app_view.dart 244:12 create` `package:angular/src/bootstrap/packages/angular/src/core/linker/template_ref.dart 28:9 createEmbeddedView` `package:angular/src/bootstrap/packages/angular/src/core/linker/view_container.dart 99:32 createEmbeddedView` `package:angular/src/bootstrap/packages/angular/src/common/directives/ng_if.dart 51:22 set ngIf` `package:DMS_Working_Copy/src/administration/packages/DMS_Working_Copy/src/dashboard/dashboard_component.template.dart 60:15 detectChangesInternal` `package:angular/src/bootstrap/packages/angular/src/core/linker/app_view.dart 404:7 detectCrash` `package:angular/src/bootstrap/packages/angular/src/core/linker/app_view.dart 381:7 detectChanges` `package:DMS_Working_Copy/src/administration/packages/DMS_Working_Copy/src/dashboard/dashboard_component.template.dart 177:17 detectChangesInternal` `package:angular/src/bootstrap/packages/angular/src/core/linker/app_view.dart 404:7 detectCrash` `package:angular/src/bootstrap/packages/angular/src/core/linker/app_view.dart 381:7 detectChanges` `package:angular/src/bootstrap/packages/angular/src/core/linker/view_container.dart 67:15 detectChangesInNestedViews` `package:DMS_Working_Copy/packages/DMS_Working_Copy/app_component.template.dart 747:16 detectChangesInternal` `package:angular/src/bootstrap/packages/angular/src/core/linker/app_view.dart 404:7 detectCrash` `package:angular/src/bootstrap/packages/angular/src/core/linker/app_view.dart 381:7 detectChanges` `package:DMS_Working_Copy/packages/DMS_Working_Copy/app_component.template.dart 1135:17 detectChangesInternal` `package:angular/src/bootstrap/packages/angular/src/core/linker/app_view.dart 404:7 detectCrash` `package:angular/src/bootstrap/packages/angular/src/core/linker/app_view.dart 381:7 detectChanges` `package:angular/src/bootstrap/packages/angular/src/core/change_detection/host.dart 189:13 [_runTickGuarded]` `bla bla bla......`
This is very helpful, thank you
Not as helpful you as yo momma! *** ^I ^am ^a ^bot. ^Downvote ^to ^remove ^and ^help ^me ^learn ^what ^not ^to ^say. ^[PM](https://www.reddit.com/message/compose/?to=YoMommaJokeBot) ^me ^if ^there's ^anything ^for ^me ^to ^know!
I had no problems upgrading to dart 2.3. Strange; perhaps the build got messed up somehow. Assuming you already tried `pub upgrade` and checked the dependencies of your pubspec file and it still throws the exception, this is what I would do: Delete the .dart_tool directory and get a clean state with `pub upgrade`. `pub get` could also be sufficient if your pubspec dependencies are correct.
Since Flutter for the Web is still new and in early development stages, and you don't want to build a mobile app, I'd suggest to use Angular Dart. If you are curious about Flutter in general though, this could be a nice exercise to learn about the Flutter framework.
Since I want this site in production, it’s probably better idea to avoid flutter for web. I’ll learn Flutter with a proper project. I was thinking a to-do app for that.
Yeah, good decision. Flutter for web seems promising but for now it's not a great alternative to the existing technologies. To-do apps are always a good choice to learn mobile app development. :)
If you do end up using AngularDart for now, you can save yourself a lot of work in the future if you use the BLoC pattern or something similar for your business logic and data modeling. Done properly, that code will work unchanged in a future Flutter app.
Yeah, right now, Flutter is a mobile framework that also does web. Angular is a web framework. If you want to make a website, use the web framework. There is nearly 0 support for web with Flutter currently.
To get a string to be interpreted as a regular expression, you need to wrap it in a RegExp: "a:b,c".replaceAll(RegExp(r"\[:,\]"), '-')
Ah, this makes sense. Thanks!
&gt;BLoC pattern What is the "BLoC pattern"?
One of my primary tasks at work over the last 12 months was analyzing and prototyping with mostly web GUI frameworks. of react, vue, extjs, angular, and flutter, angular had by far the steepest learning curve. for a sufficiently complex application, you will need to know the same concepts and have the same tools for each of them, but with angular you have to invest the time upfront before even getting started. just be aware that angular is a monster, so dont let it frustrate you too much
Yes I’ve heard that Angular is a monster because of all features. But since I want to learn Dart because of flutter, Angular is the only option. I was wondering what would you recommed from your research? I heard that Vue is by far the best choice, but I eant to hear your opinion.
Business Logic Component. It’s one of the state managements in Dart. It was recommended by Flutter team until recent Google I/O. It’s awesome but it can be complicated.
I didn’t know that. Huh. Nice. Thank you.
If it was the far future: flutter But since it's now, I'd choose vue for small projects or even native web components if browser support was selective For large projects or projects with an undetermined future / scope, i'd choose angular. And I say this formerly hating Angular. But since I was forced to learn it in depth, I have much more respect for it and understand why it is so verbose and complicated. I used the typescript flavor of angular, so I can't compare that to dart's, but the features / concepts should be similar ExtJS is miserable. stay away from that garbage pile
I have no answer but I appreciated the format and thought that went into the post.
This is just a wild guess, maybe the client needs cookie support? Perhaps the server expects cookie to be set after redirect (most browser allow setting cookies during redirects). I'd advise to dump all the headers you get during each request to see what exactly is going on.
In order for people to help me, I tried to make it easier for them to understand and avoid unnecessary and repeated effort. That’s what I thought.
Is it possible to enable cookie with http package to test this hypothesis? If this is true, it means that curl and postman are both using cookie, which is unlikely the case.
curl has support for cookies. I don't think dart HTTP client has support for cookies. Maybe this would help [https://github.com/flutterchina/cookie\_jar](https://github.com/flutterchina/cookie_jar)
Hey there, how are you doing. Having any progress with the GraphQL Client conversion?
I am currently working on the backend portion (login and registration), will get on with the Angular part on Saturday.
that was a terrible article even by medium standard's. no idea if the package is worth anything, but that article convinced me not to even give it a try
I'm using Angular too with Typescript instead of Dart . Why? Because the selection of UI components seems to be quite slim in comparison. I'm using PrimeNG and I could find anything like it for Dart (Material is lacking the Table component, for example).
Thanks for the feedback. You are correct: in v1.0, an entire component (though not the entire document) is re-rendered after a state change in one of its children. This is definitely not a best practice compared to more mature libraries, but was done for the sake of simplicity, since I'm still uncertain whether others will find the "reactive Dart" concept useful at all. I'm hoping to introduce a more precise diffing/reconciliation algorithm in v1.1, but fortunately even a big change like that should be an implementation detail, so the API won't be affected and is safe to use in the interim. The name was intended more as an allusion to the reactive style than one particular project.
You can try out my package scrapy on pub. I'd love to have some feedback. You can also find it on github.com/Sach97/scrapy.dart
I actually found it and used it while I was learning these few days :) However, I got stuck at the point where I keep getting `redirect limit exceeded` for one of the page I want to practice scraping. I tried also tried @jeropp 's suggested tutorial [link](https://creativebracket.com/write-your-first-web-scraper/), which uses only `http` and `html` package, but still getting `redirect limit exceeded` for some pages. &amp;#x200B; These are the three I tested and got stuck at the last one: &amp;#x200B; **Succeed. Got the html, works for the domain** https://news.ycombinator.com **Succeed. Got the html, works for the domain** https://www.ebay.com.au/itm/10W-12V-SOLAR-PANEL-and-2-amp-REGULATOR-RV-camp-marine-TRICKLE-BATTERY-CHARGER/172058512436?_trkparms=pageci%3Ac2411dc4-811e-11e9-8e21-74dbd1803149%7Cparentrq%3Afd751ccc16a0abc05acfffa2ffee9352%7Ciid%3A1 **Redirect limit exceeded, same for all other pages** https://detail.tmall.com/item.htm?id=577812405625 &amp;#x200B; Do you know what is the reason? and could please point me to the right direction for the solution? &amp;#x200B; many thanks
It is possible that this website is protected by cloudflare anti ddos protection. Try with this node package : https://github.com/codemanki/cloudscraper
Thanks for asking, for now I rolled back to 2.2, can't spend time trying to break down the App to find what's causing it. I need connect the front end with the back end I'm developing in 2.5 weeks for a customer demo next month, after I pull the rabbit out of the hat I can go back playing around and figuring out what is causing it. Can't wait for Flutter Web to be released, I would rather move everything there and just focus on 1 front end for everything, it sounds too good to be true.
Good thing my app isnt bound by any promises or deadlines, I am using 6.0.0 alpha, so far it worked but let's see. I am also quite hopeful of Flutter Web. Hopefully by this year we can do something more than trivial with it. I'll be working on the GraphQL client tomorrow.
Thanks for taking the time to put this together. But pay attention to how it compares to the other similar posts out there that cover it to the same depth, by which there isn't much. You can try showing something with more meat, like database integration, multiple views, or other level of interaction which would make your content have more ability to stand out.
Thanks for the constructive feedback. I'll take this into consideration for my future articles.
Not sure if it is related but google and youtube are acting funny. Maybe all google servers got affected
Google's having some major network issues right now across many sites and cloud services, I imagine this is the same issue.
I had a 502 installing a flutter plugin around the same time. Seems to be resolved.
It's true that there are a lot of intro articles like this, but there's always room for more that are this well written. Looking forward to seeing more from you.
You are in fact correct. I attempted using cloudscraper and got some success, when I found one type of url (of many) that is working. However, I was hit with capcha right away after a few testing. The site i was trying to do is taobao, I guess my level of scraping is still too low to understand how to beat the system.
Thanks very much, definitely more on the way.
I never used angularDart 2/4 but in angularDart 5 you can use the ComponentLoader class to add components at runtime. The [FAQ](https://angulardart.dev/note/faq/component-loading) explains how to do it.
Thanks for this, it looks useful! Let me go figure out how to to rewrite our Angular4 components using ComponentLoader instead of ComponentResolver
I'm sorry, but I don't know that it was ever written down. :(
The face of the Dart development team does not change. For them, writing documentation has always been something optional.
oh, i see..
There is: [https://github.com/dart-lang/pub/blob/master/doc/repository-spec-v2.md](https://github.com/dart-lang/pub/blob/master/doc/repository-spec-v2.md) &amp;#x200B; Beyond that there is no stable API. We have an issue you can track: [https://github.com/dart-lang/pub-dev/issues/2142](https://github.com/dart-lang/pub-dev/issues/2142) &amp;#x200B; There are other HTTPS end-points that return JSON, but as we advance the service those are going to break.
thanks, a couple questions; * just to clarify, i saw the website using `/api/documentation/&lt;PACKAGE&gt;` endpoint, that endpoint *is* going to break sooner or later. Is that correct? * Is there a known way of retrieving the information of only the latest version of a given package, or am i bound to pull every version ever?
I do not have answers to your questions but: &gt; For example, I know some JIT compilers will produce faster execution times for long-running processes because they can optimize for the right fast-path based on actual runtime execution. do you have any sources on this about Dart?
I don't have any sources for Dart (I guess that's the question I'm hoping to get answered), but I know the JVM has this: [https://aboullaite.me/understanding-jit-compiler-just-in-time-compiler/](https://aboullaite.me/understanding-jit-compiler-just-in-time-compiler/) &amp;#x200B; I'm not a Java developer so I can't speak to the amount of impact the JRE's JIT compiler has on long-running processes.
Can't say I'm glad to see you back here...haha... But I think anyone who uses Dart or Flutter will agree that the documentation is stellar. Great docs always make the list of pros when comparing these tools to alternatives.
For what it's worth, here is the relevant benchmarks game page: https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/dart-dartsnapshot.html . It seems that there aren't major differences in terms of overall speed, but AOT compilation yields improvements in terms of memory usage and startup time.
Are you referring to something specific? Just legitimately curious which parts do you think are not documented enough.
I don't thing the claim that JIT can be faster because it can do profile guided optimisation is really true in the vast majority of cases. PGO rarely makes much difference. That claim is just a way for fans of JIT'd languages to avoid performance criticisms. "It's not slow! It can actually be *faster*!"
Agreed. The usefulness of JIT compilation comes from the requirements of language itself. There is little to be gained by adding a JIT to the C language. On the other hand, LuaJIT compared to standard Lua can yield 100x speed improvements. Dart (and Java) leans much more on the C side of languages, which means that a lot of optimizations can be done using static analysis (which unfortunately often becomes a second-class citizen). From what I've seen, the JIT of DartVM is mostly concerned with polymorphic method calls (something that AOT compilers could do really well).
I've been working on a tutorial system for new programmers who want to learn the Dart language. It's incomplete, but what's there may be useful. [Dart Academy Boot Camp](https://da-bootcamp.firebaseapp.com/?course=start_programming_dart)
dart.dev
Here's the go-to resource for Dart tutorials with detailed step by step tutorials. https://creativebracket.com
Add one of these https://dart.dev/guides/language/analysis-options#the-analysis-options-file
thanks!
Bob Nystrom (also known as munificent) wrote (especially for you) about the documentation for this (quite important for the dart-lang ecosystem) project: "I'm sorry, but I don't know that it was ever written down. :(". As a matter of fact, it was not a secret for anyone that the documentation is often not developed or updated. One more example from [dart.dev](https://dart.dev) web site. [https://dart.dev/guides/language/spec](https://dart.dev/guides/language/spec) \`\`\` Dart 2 A formal Dart 2 specification is available in PDF format: Dart Programming Language Specification (Version 2.2) \`\`\` The documentation is very outdated. What does this mean? Is it really so difficult to update the documentation in accordance with the software? This version (2.2.0) was released almost 100 days ago. &amp;#x200B; In later versions there were changes in the language: &amp;#x200B; [Making Dart a Better Language for UI](https://medium.com/dartlang/making-dart-a-better-language-for-ui-f1ccaf9f546c) Author: Bob Nystrom \`\`\` As with any language change, you never really know how it will work out until it gets into the hands of users. These features should fall into your grasp in the upcoming Dart 2.3 release, and I’m really excited to see what you make of them. \`\`\`
Instead of a factory constructor, use a static method: class BlocState { DataObject dataObject; BlocState._(); static Future&lt;BlocState&gt; BlocState.initial() async { var jsonString = await rootBundle.loadString("assets/data.json"); return BlocState._(DataObject.fromJson(jsonDecode(jsonString))); } // ... } Honestly, now that `new` is optional, factory constructors aren't very useful.
Here is a simple example that I usually give: ``` int sum(List&lt;int&gt; arr) { var sum = 0; for (var el in arr) { sum += el; } return sum; } ``` JIT would be able to specialise this code for a concrete implementation of `List&lt;int&gt;`. (PGO would also be able to do that - but the code would need to contain the fallback implementation, which would be really bad for the code size). AOT in general would not be able to do that - because static types don't give enough information here. Even more - JIT would be able to specialise for a particular size of `int`, e.g. by observing that `sum += el` is always within 31-bits and avoid using full blown 64-bit arithmetic. This might be rather relevant on 32-bit platforms. Sometimes AOT can compensate for this by doing some global analyses (e.g. Dart AOT does some global type flow analysis), but these analyses have to be conservative where JIT does not. &gt; PGO rarely makes much difference. PGO and JIT are playing really different games. If you are JITing you can produce code specialised for the exact runtime state, the discard and replace it with another version - if runtime state changed. PGO can't really do that - as it happens statically.
&gt; From what I've seen, the JIT of DartVM is mostly concerned with polymorphic method calls (something that AOT compilers could do really well). It's not very clear to me why AOT compilers would better at handling polymorphism than JITs. JIT at least has a type profile to try and compensate for polymorphism at call sites with low degrees of polymorphism, but AOT just has to give up and emit the most generic call sequence if it can't monomorphise call site statically.
From what I can see this does not actually measure Dart AOT. It uses `--snapshot-kind=kernel` which is equivalent of old script snapshots: in this mode VM would produce a snapshot that contains Dart code in preparsed binary AST form. There is no executable code in such snapshots and to run these snapshots you still need a JIT mode VM.
Short answer to you question would be: peak performance of some workloads can be slower (2x or more) when they are AOT compiled. However this only matters if you have long-running process that actually gets warm enough to benefit from optimizing JIT. We are working on bridging the gap - but there are some fundamental challenges here (see my other comment on this post it has a simple example why AOT is hard).
Is there a way to watch this without installing anything?
I suggest using a stream builder, create the bloc in the page you need and call loadFile() in the initalizing method of the page. On complete, the loadfile sinks the data to the stream. So everything is async &amp; should work.
Apparently you can watch it with chrome: [https://it.umn.edu/zoom-join-through-web-browser](https://it.umn.edu/zoom-join-through-web-browser)
Ah, there's a link to "join from your browser" that I hadn't seen before. Looks like I missed the Q&amp;A though.
it make sense from the first glance, as a long time iOS dev. Loading information in the "page/view/widget" would, however, likely defeat of the purpose of the `BloC pattern`. This is because now the model/database/json (part of the business logic) is mixed with the interface. The idea of going through the sink/stream make a lot of sense. To follow the BloC pattern, this is better be done within the bloc. I wonder it is a good practice to do a sink/stream withing a bloc (which is a stream/sink itself of some kind). Lastly, agree with the idea of using a DB. I am doing it this way because data.json will be small and use a lot more often than some default.json. For time saving purpose, I am just writing the json -&gt; DataObject. This likely give me two options in the future: no SQL database or file base.
This way the `bloc` returned will be a `Future`. That requires the Widget Build to be an `async` as well. As shown: class _MyHomePageState extends State&lt;MyHomePage&gt; { final _bloc = BlocState(); @override Widget build(BuildContext context) { return BlocProvider( bloc: _bloc, child: SomeWidget(widget: widget), ); } Unless I am missing key knowledge. This doesn't seem to be a viable solution either. A bloc is a stream, a data reading is a future/stream. There should be some way to resolve the inner future/stream such that the bloc can stay consistent.
[https://aqueduct.io/](https://aqueduct.io/) is backed by Stable Kernel. It's not Google but they seem to be quite commited to the framework.
App engine flex provides good support for dart backends and is pretty easy to setup. I believe pub is running on it. FE wise flutter humming bird might be the way to go, angular dart is another option. Good success!
Hi, I've got some written tutorials on my blog with a YouTube channel teaching full-stack development on Dart Check it out and let me know your thoughts https://CreativeBracket.com
I use dart for backend with mongodb, elasticsearch, cassandra, redis and rabbitmq and so far so good. For frontend I am using AngularDart, also, so far so good. Gotta say that I am enjoying it a lot. Have been years that I have this kind of satisfaction with programming.
I saw this website when researching. Thanks.
Does that mean dart for backend and angulardart (I guess it's a js file) for frontend? Also happy to hear that. Because mostly people prefer node.js.
Yes, thanks.
Actually, on second thoughts, you're right. I'm going to edit that bit out.
That's because a lot more people started on the web where Javascript dominated and they needed to extend their skills to the back-end.
Are you running this on app engine flex or k8s? Would love to hear more about your Backend architecture.
I wonder if Aqueduct https://pub.dev/packages/aqueduct would work for what you're trying to build. Seems like it is one of the more popular Dart web-application frameworks.
Dart at this point has more than enough in its ecosystem for you to be able to use it full-stack. Things you might miss might be support for things like Kafka, depending on what you're trying to do in your application. There are drivers for Mongo, Postgres, and MySQL, though. There's a list of server-side packages/libraries you can build with on the Dart site: https://dart.dev/server/libraries One of them is Angel, which I maintain: https://angel-dart.dev/ On the frontend, there is SPA infrastructure, like AngularDart, OverReact, and VueDart. Plain `dart:html` is also a good starting point if you're not trying to learn yet another framework to build an application.
I suggest you reading this article: https://medium.com/@vaygeth/reactive-flutter-todo-app-using-bloc-design-pattern-b71e2434f692 It discribes how to load data from a db to an ui. And when something in the database changes, the ui will be updated automatically. You could substitute sqlite with sembast (nosql) https://pub.dev/packages/sembast if you want to store the data in a json like style. Sembast offers a query language etc.
I would be very interested to hear what you are running this on too.
IMO, if why not just turn map into class and override the equality and then turn the list in to Set then you can turn it back into map later.
Thanks for the reply, the information in my maps needs to read as a single line of text and also be returnable as 4 separate values. I have used Set.from().toList() on a list of Strings to remove the duplicates then I used .split(' ')[0] etc to make a list of maps from the unique strings. There is no need for spaces anywhere else in the values I'm starting with I will just need to make sure there never is!
I have some alcohol in me so many things could go wrong. Maybe something like this is quite simple. And you don't have to worry about the safe String ``` // import 'package:quiver/core.dart'; void main() { List&lt;Map&gt; myList = [{ 'name': 'Bob', 'age': 30, }, { 'name': 'Bob', 'age': 30, }, { 'name': 'David', 'age': 26, }]; final set = Set&lt;Person&gt;.from(myList.map&lt;Person&gt;((person) =&gt; Person(person['name'], person['age']))); final result = set.map((person) =&gt; person.toMap()).toList(); print(result); } class Person { const Person( this.name, this.age, ); final String name; final int age; Map&lt;String, dynamic&gt; toMap(){ return {'name': name, 'age': age}; } bool operator ==(other) =&gt; other is Person &amp;&amp; other.name == name &amp;&amp; other.age == age; // int get hashCode =&gt; hash2(name.hashCode, age.hashCode); int get hashCode =&gt; name.hashCode^age.hashCode; } ``` You will get this ``` [{name: Bob, age: 30}, {name: David, age: 26}] ```
Thanks, I will take a look in a second. This is currently working. it will only fail if I allow a string as long a 'splitMark' from a user and then they enter exactly what 'splitMark' is... &amp;#x200B; &amp;#x200B; List&lt;Widget&gt; result = List(); List uniqueFullShifts = List(); List uniqueShiftsMap = List(); String splitMark = '*********//******AA**gg*dvrgrsdgr*********//*******'; for (var i = 0; i &lt; roster.length; i++) { uniqueFullShifts.add( '${roster[i]['original']['on']}$splitMark${roster[i]['original']['off']}$splitMark${roster[i]['original']['dia']}$splitMark${roster[i]['original']['hrs']}', ); } uniqueFullShifts = Set.from(uniqueFullShifts).toList(); uniqueFullShifts.sort((m1, m2) { var r = m1.compareTo(m2); if (r != 0) return r; return m1.compareTo(m2); }); for (var i = 0; i &lt; uniqueFullShifts.length; i++) { uniqueShiftsMap.add({ 'fullShift': '${uniqueFullShifts[i].split(splitMark)[0]} ${uniqueFullShifts[i].split(splitMark)[1]} ${uniqueFullShifts[i].split(splitMark)[2]} ${uniqueFullShifts[i].split(splitMark)[3]}', 'on': uniqueFullShifts[i].split(splitMark)[0], 'off': uniqueFullShifts[i].split(splitMark)[1], 'dia': uniqueFullShifts[i].split(splitMark)[2], 'hrs': uniqueFullShifts[i].split(splitMark)[3], }); }
They also have deep equality checks if you want to compare. I've found that in dart, {} is not equal to {}. Check out https://api.flutter.dev/flutter/package-collection_collection/EqualityMap-class.html
\&gt; I was can't believe there isn't a debug-print method or something to view an object's properties. This doesn't exist in most languages, whether Java, C++, Dart, C#, etc... You might be able to find this in more dynamic runtimes, but Dart is getting as far away as from reflection in the past several years. Your best bet is to simply override \`toString()\`. Dart's \`print\` function eventually calls this.
Yeah I'm not saying it *can't* happen, just that it seems to not happen in practice. How many JIT engines actually do that optimisation? And how many programs have performance critical code like that?
The answer to your question is "most" two times: most JITs perform optimizations based on concrete type information, and most programs have something to do with interface types like List.
I totally understand you. for my case when I'm using a class with json\_annotation I just use toJson() function to see the data. In the case I'm not using json\_annotation (dose't happend very often) then I'll print the specific property I need. But now you're cod is great for when I'm debugging so defiantly a keeper, tnx!
Hey, Kwaig, just a quick heads-up: **happend** is actually spelled **happened**. You can remember it by **ends with -ened**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey /u/CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". And your fucking delete function doesn't work. You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
 import 'package:queries/collections.dart'; void main() { var query = Collection(myList).distinct(CustomEqualityComparer( (e1, e2) =&gt; e1['name'] == e2['name'], (e) =&gt; e['name'].hashCode)); var newList = query.toList(); print(newList); } List&lt;Map&gt; myList = [ { 'name': 'Bob', 'age': 30, }, { 'name': 'Bob', 'age': 30, }, { 'name': 'David', 'age': 26, } ];
AngularDart (frontend) Aqueduct (backend)
I have two personal hobby projects in Dart. One is an HTML game which used to have a game server also in Dart. Another is a mobile app on IOS and Android.
I've created multiple simple [browser games in game jams](https://ldjam.com/users/kayz).
There are several applications since Dart is a general-purpose language. It's just that Flutter seems to be the usual suspect. Got a variety of applications on my blog–[https://creativebracket.com](https://creativebracket.com)
thank you for the answer.
I'm using it with a blockchain project. Dart...is very beautiful with so much potential. I remember a university in Japan that is using Dart for research projects. I had stumbled upon it while I conducting my own research on a specific nerdy topic for DHTs. Ugh xD those guys are just a "little" farther ahead than me 😱😩
Really anything at this point, frontend, mobile, Web backend (see Angel @ https://angel-dart.dev), CLI tools, and much more. The ecosystem has steadily grown over the past couple of years, and the more recent updates to the Dart homepage mention a few different packages you can get started with.
All bot spam is annoying, and spam.
Thanks, glad it could help.
We use Dart/DartAngular/StageXL to build our product.
I know of a messaging platform running Dart on the server.
I worked on 2 separate projects in Dart. One is web, the other is BE+web. Both currently live and in prod. Minor glue apps are also in production currently at multiple companies I know of.
If it is something you can put on a repo and share here, you can do so. There is always someone who is interested.
It's private. I would like to hire a company or something.
i was going to offer to do it for free, but if you insist on paying, that's fine as well
Could you share a bit more detail? For example, is this a Dart or Flutter project?
I have some modules in dart witch are all linked to a flutter project.
I have some modules in dart which are all linked to a flutter project.
that's literally the bare minimum amount of information you could've provided to technically answer the question yet provide nothing helpful
And what is it about your code you wish to be evaluated? Coding style? Architecture? Be specific.
I think both. I've been writing code for my own for a long time. I want to improve my skills, so a code review could be a big help.
I don't know how I missed this four days ago when you wrote it, but I really appreciate the information. &amp;#x200B; Would you say that the TLDR version could be summarized as "short running processes should be AOT compiled for quick startup and long-running programs will probably benefit from JIT?" &amp;#x200B; For me, "short running" would be tools I write to make my development life easier such as build/install/upgrade scripts. Long-running would be REST APIs and microservices. &amp;#x200B; Of course, these are always subject to exceptions and changes as the world matures, but using the current stable builds, is that a safe, broad-strokes guide to use?
Cool. Have you read the Dart style guide? https://dart.dev/guides/language/effective-dart
Of course.
Initially, the plan for Dart was to get the language supported directly by browsers. In order to be a good citizen of the open web, that meant having an official standard, which is why we went through the trouble to have an ECMA committee and go through the standardization process. Now that that isn't the goal for the language, having an independent standard is a lower priority. We do still maintain the specification itself, and we are of course completely open source and would love to have more independent implementations. But, pragmatically, having an *ECMA standard* right now doesn't seem to help users directly, so it hasn't been a priority for the team. If we ever find ourselves in a situation where there are multiple competing companies with independent Dart implementations (as there are for, say, JavaScript), it may become more of a priority to ensure users get consistent behavior across implementations. But for now, that doesn't seem to be a problem.
https://github.com/dart-lang/sdk/projects/13#card-16918433
&gt;just to clarify, i saw the website using /api/documentation/&lt;PACKAGE&gt; endpoint, that endpoint *is* going to break sooner or later. Is that correct? Yes, that is correct, I'm not prepared to promise stability on this end-point yet. Basically, we need to review all of these and decide which ones we keep, what we make stable, and enforce the output format with some sort of schema, before we ready to promise they'll stick around.. &amp;#x200B; However, you should be able to reproduce anything from the site using our packages. &amp;#x200B; &gt;Is there a known way of retrieving the information of only the latest version of a given package, or am i bound to pull every version ever? No, there is no such end-point. But you should really just use the "list all versions of a package" API from: [https://github.com/dart-lang/pub/blob/master/doc/repository-spec-v2.md#list-all-versions-of-a-package](https://github.com/dart-lang/pub/blob/master/doc/repository-spec-v2.md#list-all-versions-of-a-package) It's what the pub CLI client uses, it should be really fast... and generally speaking the payloads are fairly small.
Just curious, if it generates native x86 machine code, why do we need another runtime to execute it.
I think you'll need to post some code in order for anyone to diagnose why there are so many events being fired.
maybe itsn't fully AOT like Go, it needs runtime to execute AOT compiled code which isn't fully in binary &gt;The AOT-compiled code runs inside an efficient Dart runtime that enforces the sound Dart type system and manages memory using fast object allocation and a [generational garbage collector.](https://medium.com/flutter-io/flutter-dont-fear-the-garbage-collector-d69b3ff1ca30) [https://dart.dev/platforms](https://dart.dev/platforms)
I'd actually love support for dart
As mentioned there is no official certification on Dart, Flutter. But you may join an online course and get a certificate, you may go for edx, udacity, vskills. [Certified Dart Professional](https://www.vskills.in/certification/mobile-application-development/dart-certification-course)
Aqueduct should serve it up just fine. Have you built a release version of the web app? It needs to be compiled to JavaScript to work as a static site.
I ran 'build' from the set of actions that WebStorm gives when viewing `pubspec.yaml`, as well as running `webdev build --output web:build` manually from the terminal and then manually copying over the files to the server's public folder. Also made sure to change the base ref to '/'. Same behavior both ways :/
When you load it up, do you see errors in the Chrome Inspector console?
Nope and that was throwing me off, I was seeing 200s for everything. &amp;#x200B; After some more digging, I figured it out. I didn't have a redirect to my main component so it was just loading up a blank page. Fun issue, haha. &amp;#x200B; Thanks for your time and help, I appreciate it!
&gt; Would you say that the TLDR version could be summarized as "short running processes should be AOT compiled for quick startup and long-running programs will probably benefit from JIT?" Yes, I think this is correct summary.
&gt;Dart Academy Boot Camp Nicely done! Your explanatory style seems like it would be very helpful for those completely new to programming. That style would be particularly useful if you continue the project to include more advanced subjects where beginners often start to get glassy-eyed and overwhelmed.
I love this
Happy to hear!
what does this have to do with dart?
They are using Dart to make all these.
GoF authors lamented, years later, that it wasn’t advice to employ every design pattern when they were not there in the app codebase before. In particular, and although they didn’t say it, “Singleton” was the one they were lamenting the popularity of.
Yup! Totally agree. This is just an exercise in kicking the tires of a language and not a recommendation in any way. I included more controversial patterns out of completeness sake and in no way endorse everything here. Thanks for viewing and sharing your opinion!
Thanks for putting in the work and sharing your take on GoF patterns with the community. I love seeing someone else's views on things. They really help expand my perspective.
What version of VSCode do I need? I got this message: Unable to install because, the extension 'azmoza.aqueduct-helper' compatible with current version '1.33.1' of VS Code is not found.
So currently the extension works on v1.35, however, after testing the extension it also works on v1.34. I would need to update the extension to allow it to work on that particular version of VS Code. Sorry if this is an inconvenience.
Encapsulation and separation of concerns. Actually if you have access to StreamController then you can add items directly to it. But usually you want to control who can manipulate your data. So you expose [StreamController.stream](https://StreamController.stream) to let other classes to listen to data but not modify it. And you can expose StreamController.sink if you want to let other classes to add data without exposing whole StreamController.
Fair enough
A wild guess would be that you do not clean up your listeners. Eg every render attaches a new listener.
I'm rusty on dart but maybe if you add some comparable interface https://api.dartlang.org/stable/2.4.0/dart-core/Comparable-class.html . This is how it works in other languages
The values need to be compile time constants so the compiler can optimized the switch into a binary search.
https://dart.dev/guides/language/language-tour#switch-and-case I would have hoped that `Number(int, int)` was a constant, and comparable with `==`. But I don't know Dart all that well :(.
I don't think it works like that in other languages? Why would it need to call anything other than equals() method?
it should work if you put a "const" in front of every constructor call in your code. You might need to also override operator== and hashCode, I forget.
You've got a couple of syntax errors. You need a `:` after each case, like: class Number { final int a; final int b; const Number(this.a, this.b); } test(Number number) { switch(number) { case Number(0, 0): print("zero"); break; case Number(0, 1): print("one"); break; } } You can write the above, and it works if you do this: void main() { test(const Number(0, 1)); } Note that the number being passed to it is `const`. But if you do *this*, then it doesn't work: void main() { test(Number(0, 1)); // No const. } Switch compares each case using *identity*, not *equality*. So a case only matches if the object you pass to it is the exact same object in memory. When you use `const`, the language is specified such that all constant constructors with the same arguments produce the exact same object, so the first example works because `const Number(0, 1)` always evaluates to the exact same object. But if you don't use `const`, you'll get two distinct Number objects that have the same field values but occupy different places in memory. Since switch statements only check for identity, none of the cases will match. You might think, "I know! I'll override `==()` on number so that it can have the equality semantics I want!" That would be a great idea. Except that the switch statement is *also* specified that it is an error to switch on a type with a custom equality operator. The original language designers really really wanted compilers to have the ability to compile switches down to an optimized jump table or binary search. In order to allow that, you need to know that testing a case can't possibly have a side effect. User-defined equality operators could do potentially anything, so they would break that optimization. To avoid that, the designers simply disallowed it entirely. The result is that switch statements are much less useful than they could be. It honestly doesn't make a lot of sense because for the types that *could* be optimized this way, the compiler can tell that the `==` operator is safe. And for any type where the optimization doesn't apply... now you can't use the switch *at all* which is strictly less useful than having it simply be a little slower. My hope is that we can add a pattern matching construct to Dart which will be more expressive and subsume use cases of switch like this.
Ignore syntaxis error, I didn't copy paste it from the editor, was just trying to \`pseudo-code\` it. &amp;#x200B; That's very weird optimization. How often people require number switch cases that would need a binary search? I really hope they will do something about it. I was trying to replicate kotlin's "when" behaviour: data class Number(val a: Int, val b: Int) val a = Number(1, 2) when(a) { Number(1, 1) -&gt; println("NO") Number(1, 2) -&gt; println("YES") Number(1, 3) -&gt; println("NO") }
&gt; How often people require number switch cases that would need a binary search? For large switches, it's important to have constant time dispatch to the right case, and compiling to a jump table will do that. But the language feature was unnecessarily limited in order to enable that.
the optimization makes sense if you wanna be performant as a jump table is 0(1). I wonder if a when and switch would be too much.. I love kotlin's when to assign a val
if it results in a binary search you need to know order
Coollllll
I don't know how AoT compilation works in Dart, but in Java it's a list of "addons" to compilation process that scan source code before converting to byte-code. It's like another linter that fixes your bad code, inefficient code, replaces loops with streams etc. so depending on number and size of your source files and number of AoT addons compilation will be slower, sometimes significantly slower.
I would go DTO. Much more readable, debugable and type safe.
I usually do (and have seen a lot of) a slightly different version of the latter. This is what a handwritten DTO would look like in my production apps: ``` class Employee { const Employee({ @required this.id, @required this.name, }) : assert(id != null); factory Employee.fromJson(dynamic json) { return Employee(id: json['id'], name: json['name']); } final int id; final String name; Map&lt;String, dynamic&gt; toJson() { return { 'id': id, 'name': name, }; } @override int get hashCode =&gt; id.hashCode ^ name.hashCode; @override bool operator ==(dynamic other) =&gt; identical(this, other) || other is Employee &amp;&amp; id == other.id &amp;&amp; name == other.name; } ``` Hope this helps.
With the map, nobody else can use your code without having to read and understand the implementation. With the object, they need only know the interface. It's why classes exist.
As a soundly typed language, Dart works best when you don't bypass all the advantages thereof. DTOs would typically be the way to go.
Thank you to everyone who replied. It was all helpful. &amp;#x200B; In particular, thanks for this reply. This is much more similar to how I would do it in C#, but I didn't know about the @required decorator for creating required named parameters or "factory" constructors. Very cool stuff. &amp;#x200B; I'm still early in my Dart journey, but I keep coming across "where have you been all my life" moments.
Glad I could help 👍🏻
This guy posts this to every subreddit, it's an auto generated page with bunch of referral id book links
There is the package json_serializable or a few online converters if you Google json to dart I'm sure they will pop up. I would like to some if I wasn't out and on the move. Will edit this if I get a chance to send the links directly.
thanks i already have that plugin use it in Go, but it seems to generate wrong Dart result for my example
I would try the online one then. Worked fine for mine and I had some really nasty deeply nested Json.
thanks the online version works - thats great
Glad to hear it.
The `Scaffold` widget has a `floatingActionButton` parameter that you can use. Just give it a `FloatingActionButton` with your callback and an icon. (If you wanna use text instead of an icon, I recommend you use the `FloatingActionButton.extended` constructor instead.)
 - Authentication is too complex. Do we really need to setup the passphrase even if our phone has fingerprint? - The order of the buttons to cancel and next seems wrong. - I deleted and image and the alert did not dismiss, but the chat screen closed. - the fab animation should not be played when going back from the settings. I liked the theme and it seems to work well. It has push notifications and giphy support which is nice! Congratulations.
Can you please raise an issue and how to reproduce it? The passphrase is used to identify you. Because there's no way to store a particular fingerprint. It currently allows the stored fingerprints so if after any other guy gets the OTP and log in he will be asked the passphrase which only you know. If it wasn't there, the other guy's fingerprint would have authenticated it and we wouldn't want that do we?
Nice! Will we see a Google Play / App Store release?
Here you go: [https://play.google.com/store/apps/details?id=com.enigma.amitjoki](https://play.google.com/store/apps/details?id=com.enigma.amitjoki) since Flutter is a cross-platform development tool, deploying to iOS is entirely plausible too. &amp;#x200B; But iOS's licensing fee is a bit costly compared to the one-time payment of $25 that Google asks for. If this project gets enough love, I will go ahead and deploy it to the App Store as well :)
KISS. Just pass the context to your model through a function. No fancy pancy code.
Is self-promotion allowed, mods?
From taking a quick look with my phone, I noticed that you’re using positional arguments in your constructors and functions a lot. In Dart, it’s quite common to use non-positional arguments and make them require if needed. Instead of the constructor `User(this.name)`, use `User({@required this.name})` instead. Only use positional arguments where it makes sense to do so, such as the Text widget (e.g. `Text(“myString”)`).
My view on this is that it depends. I think disallowing self-promotion in all forms is stupid. If the content is free and relevant, we're all better off knowing about it. If there's too strong a profit motive, that can taint things, and that's when it becomes a problem.
Maybe because of the empty `path` in `all` ?
Try stopping the web dev, removing the .dart folder completely and then start webdev again.
I believe that's a redirect command if no routes are entered, so hitting localhost:8080 should redirect to localhost:8080/#/login. Not to differently to how AngularTS works.
I can't see a .dart folder. I had .dart\_tool, I deleted that and I have the same error where would .dart normally be found? I'm just trying to repair my cache see if that does anything.
I figured it out guys. Turns out developing on Firefox is a no no, it blocks your source map from being fetched. Switched to Chrome and everything's fine. I don't get why Firefox blocks the sourcemap but it makes sense devving in chrome works I guess. Thanks for your help though.
Thanks for your feedback and having a look!
Does it mean I can compile Dart into dynamically link library / shared object (dll/so) which can be linked from other FFI?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/flutterdev] [Sqflite + Jaguar ORM migrations](https://www.reddit.com/r/FlutterDev/comments/c9rem1/sqflite_jaguar_orm_migrations/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Never used jaguar but sqflite has some documentation on versioning. Depending on the version u can run sqlite statements. Under the point migration https://github.com/tekartik/sqflite/blob/master/sqflite/doc/opening_db.md
[https://toastguyz.com/dart/dart-introduction/](https://toastguyz.com/dart/dart-introduction/)
Installing the dart SDK will install the 'dart' command which will let you run the scripts you write in vscode. Flutter is a separate entity as far as basic scripts are concerned. After installing, just navigate in the console to the folder containing the script and type 'dart file.dart' and your script should run.
Thanks
You might find this article useful: [Writing Command-Line Utilities with Dart](https://dart.academy/writing-command-line-utilities-with-dart/)
Thanks!
What is that `print()` function that you are using? Are you confusing it with `console.log().` If that is the case, I am not sure if calling an await on it would change anything, considering that console.log returns nothing and async / await is a way to use `Promise`. To be honest, I'm kind of surprised that the output is not THIRD &gt; FIRST &gt; SECOND. But to try and explain that simply, if your `main()` calls for an `async` function and do not `await` it, well it will not wait for the function to return before calling the rest.
The print command is pretty common in Flutter debugging. He's using it correctly.
You're getting a race condition. Async functions execute in their own Isolate, and if you don't await the function call, the function will run and main() will continue at the same time.
yep, misread the sub, thought I was in /r/learnjavascript. The color theme is pretty similar, my bad.
If *async* functions execute in their own isolate, what do they mean when they say &gt;"Dart code runs in a single “thread” of execution. If Dart code blocks — for example, by performing a long-running calculation or waiting for I/O — the entire program freezes." here [https://dart.dev/tutorials/language/futures](https://dart.dev/tutorials/language/futures) &amp;#x200B; &amp;#x200B; I also tried this main() { task1(); print('THIRD'); } void task1() async { sleep(const Duration(seconds: 1)); //I added this line await print('FIRST'); await print('SECOND'); } //=&gt; //FIRST //THIRD //SECOND but the result is the same. I don't see how the `print` statement in `main()` is taking longer than the 1 second duration in `task1()`. What am I missing?
Hmm afraid I don't really know exactly how it works under the hood, just that if you don't await, it will be executed 'sometime'
thanks for trying. I guess if you must "await", as cool as it would be to understand the why, its not completely necessary (to understand). thank you.
Actually my explanation isn't complete - what you should understand is how Futures work and that async functions return a Future (even void ones, I think)? There may be instances where you want to use or save the actual Future of the async function instead of the result, and in this case you wouldn't use await.
Not a language team member, this is just my best understanding of how this works. Happy to be corrected by a Dart team member! This is not a race condition, this is how Dart's event loop works. `async` functions are now executed synchronously until the first `await` statement ([https://github.com/dart-lang/sdk/issues/30345](https://github.com/dart-lang/sdk/issues/30345)). At that point, Dart will evaluate the expression to the right of the `await` keyword to begin the necessary async work (in this case, `print('FIRST')`). It will then "exit" the `async` function and wait for a signal from the event loop to continue. In the meantime, the program will perform any synchronous operations while it waits for the signal from the event loop. In this case, `print('THIRD')` is such a synchronous operation! The event loop will then inform the `async` function that it has finished processing the `print('FIRST')` statement, and the `async` function will then continue to `print('SECOND')`. That's why you see FIRST, THIRD, SECOND. Essentially, FIRST and THIRD are printed synchronously, and SECOND is printed asynchronously after the event loop informs the `async` function to continue. For a more in-depth explanation, please see the following page: [https://dart.dev/articles/archive/event-loop](https://dart.dev/articles/archive/event-loop)
TS had better tooling on start, syntax is closer to JS and integrates with JS from dev perspective.
Yeah I get that, I mean TS is a lot easier to integrate in an existing project and overtime switch all JS files to TS and it'll still be valid. I just don't see why Dart isn't being used in more Greenfield projects. I don't really feel that it looks too much like Java, it's definitely more productive than Java and is a lot more flexible but I see both of your points.
it can take languages many many years before they get a standard library and public library good enough to really take off. for now, the javacsript family is percieved as being as ahead in that space - libraries are the real drawcard for popular support, syntax features and whatnot are only nice to haves.
There's a few reasons. To me the most obvious ones are: \- User base, Dart is much smaller than typescript, vanilla JS and such. Which means less open sourced content, less resources, less documentation; \- Ability to incorporate external modules. Want a charting module? There's a bazillion in JS, and really only 1 in Dart which has mostly been abandonned. Yes you can add an external JS module to Dart, but unless they changed something about that recently, it's a major pain in the ass to call Javascript functions from Dart, let alone pass a Dart callback to a Javascript function; \- Documentation and content is somewhat lacking in Dart. You want to encrypt something using AES, well you are going to use pointycastle as Dart core does not have encryption algorithms. Now good luck understanding rapidly how you are suppose to use everything. Whereas in NodeJs, you'll use crypto which is in node core and there are a ton of examples. I used to love Dart, but was unable to transition from 1.24 to Dart 2. Many of my applications used very elaborate Data structures and I couldn't see myself declaring a new class for every one of them. For now the only selling point that I see with Dart is the strong typed variables. Which I fell that mostly only help when you work with junior developers. Yes Javascript have it's faults and you can commit atrocities if you'd like with it. But good programmers know how to avoid them.
TS is approachable for a lot of js devs. It's an easier jump. And there are A LOT of young js devs that don't know other languages, or only php. Most are only familiar to css and html. Dart would be slightly more intimidating for those folks. Corporate teams would embrace TS for the same reasons.
It's a very easy answer. &amp;#x200B; Why hasn't Dart taken off on web? Typescript has better tooling. My IDE (VS Code) doesn't know what a pipe is in AngularDart (it gives me a false error). No issue like this in TS. Take a look at [angular.io](https://angular.io) and then at [angulardart.dev](https://angulardart.dev). [Angular.io](https://Angular.io) (AngularTS) looks way nicer and has better documentation. Angular is not the only web framework. React seems to have a bigger marketshare. Try to write a React app in Dart... yeah, no thanks. And no, Flutter Web won't help Dart here. I really don't see Flutter Web being a thing because if you want to be a web developer in Flutter, you first need to throw everything you know and all your tools away, because it works totally different. I don't see web developers doing that. &amp;#x200B; Why hasn't Dart taken off on backend? No big names are using Dart on backend, how can you know it is reliable? A big company has to give Dart on backend a try, but who will take that risk? Not even Google took that risk. Also, I am hesitant to say if Dart on backend will ever be a thing, because Google promotes it as a "UI-language". &amp;#x200B; Why hasn't Dart taken off on mobile? I think Dart is starting to take off in this space. Flutter is becoming more and more popular and it's the only reason why Dart got any attention at all. I really like Flutter on mobile and I expect it to grow more.
My guy Dart looks almost EXACTLY like Java.
Because there is JS. But think with Flutter we will see it take off now.
thank you for this explanation. I will read the article you recommend, hopefully it clears things up.
Most c family languages look the same, c# and typescript included.
Google uses Dart on the back end extensively, though admittedly mostly for Dart-related projects. Having used it a lot, myself, I can say that it's a lot like using Node, but faster and better, except for the relative lack of available packages.
With the newer `js` package, it's actually very easy to call use JS code from Dart, and very easy to execute Dart callbacks from JS. I use it all the time in my AngularDart projects. Even so, I'm finding I like Flutter UI generation a lot better, so I'm holding out hope that Flutter for Web will be awesome.
Google uses AngularDart a lot internally, but honestly, they never really bothered to push it much outside the company. They seemed content to have it make their lives easier, while the rest of us got stuck with JavaScript+. I've always found the Dart dev experience to be superior, so I've been using AngularDart since its inception, but it's been lonely. :)
It's a good thing, because back then the only way that I found that worked for me was to egister a JS function for the js callback which would emit an event, which dart would have a callback registered on that event. I wasn't proud.
Right... The core Dart package `dart:js` was a bit awkward, because it was build in the days when a Dart web project had to be able to work as native Dart (with the Dart VM in a browser) and when compiled to JS. Once Google abandoned the idea of embedding Dart in browsers and embraced the compile-to-JS approach, things got simpler, and they wrote the `js` package for that. It works fine, but they didn't ever document it very well.
&gt;Async functions execute in their own Future/Isolate, That's largely incorrect because: * async functions will generally run in the same Isolate (unless it's actually run by spawning an Isolate explicitly). * Future is very different from Isolate (I assume you wrote Future/Isolate as if they were interchangeable). It's important to understand the distinction: Isolates share no memory with each other, which means you can't, for example, set a global variable in one and see the change in the other. Isolates only communicate by sending each other messages, which are basically objects passed around by-value (with several limitations) - this is commonly known as the Actor Model. &amp;#x200B; Check the Isolate class docs to learn more about Isolates: [https://api.dartlang.org/stable/2.4.0/dart-isolate/Isolate-class.html](https://api.dartlang.org/stable/2.4.0/dart-isolate/Isolate-class.html) &amp;#x200B; Future are something else entirely: they are just wrappers around values that you will get back asynchronously. Check this out: [https://dart.dev/tutorials/language/futures#what-is-a-future](https://dart.dev/tutorials/language/futures#what-is-a-future). So, if you want an \`int\` back, but the function you called is async, you can only get a \`Future&lt;int&gt;\` back. &amp;#x200B; Isolates actually run in parallel (maybe on a different OS Thread or even CPU core). async functions don't normally do that, they just run in the Dart Event Loop: [https://dart.dev/articles/archive/event-loop](https://dart.dev/articles/archive/event-loop), always on the same Thread.
It's not used in greenfield projects because the cost is high. If my greenfield project is TS, then I could hire any JS dev off the street and have them still help by writing JS code while they learn more TS. Their existing knowledge about JS frameworks like React and Ember is more directly applicable as well. If I pick Dart, I have to either find Dart devs to hire, which isn't easy, or train everyone up in Dart before they can meaningfully add to the project. From a single dev's viewpoint Dart can be an equally (or better) option to TS, but from the viewpoint of a project manager, picking Dart over TS means accepting a lot more cost.
It needs a killer app. Flutter. Using it as a JS replacement is great when all other things are equal but they aren't. There's a massive hill to climb first up. When there is a big community of darters then dart to js development becomes a real thing. (If that happens, then a native Dart VM in the browser becomes possible, especially if there are eg security benefits.)
After editing the .bash_profile you should need to re-open the terminal. Also I'm not sure if zsh uses the .bash_profile as I've never used it.
You will need the Dart SDK to run Dart locally. Once you have it, and either add the `bin` folder to your `PATH` environment variable, or select it in VS Code when it asks you to locate it, it should be as simple as creating a `.dart` file inside a folder named `bin` or `tool` and then just pressing `F5` (or clicking `Debug -&gt; Start Debugging`). If you have `dart` in your `PATH` you can run the scripts from the terminal (either standalone, or the one integrated into VS Code), but you won't get features like debugging and breakon-exceptions that might help you track down issues as you're learning.
Which framework do you use? Angel/Aqueduct/other?
Aqueduct.
I've had similar thoughts lately. &amp;#x200B; I've been writing some smaller applications with Dart of the last few weeks. Right now, its primarily tools that make my development life easier (running page-based linters across an Elm codebase and aggregating the results, a more flexible file watch that checks compilers output for errors that doesn't need to restart for, setting a development API token on my pages, etc.), but I'm also trying out my first production app in Dart. &amp;#x200B; It's going to be an auth server that authenticates against LDAP and authorizes against some MySQL tables. I'm debating about using REST or gRPC for other services to communicate with it. &amp;#x200B; I've really enjoyed working on the project and I'm at the point where I'm confused as to why it's not extremely popular. I'm starting to view the Dart VM as a "typed NodeJS done correctly." &amp;#x200B; I'm the type of developer who really likes types. I can understand why some people prefer dynamic/loosely typed languages, but I just can't get there myself. JavaScript embraces concepts that go directly against the way I like to code. I admit TypeScript is a really good layer over JS, but underneath, its still JS and no matter how disciplined I am about my code, the 1,000 npm packages that I pull in might not like types as much as I do, so it's not trustworthy. Their ecosystem is one of its greatest strengths and weaknesses. They have so many packages available, but tomorrow there will be the "next hotness" which will invalidate today's hotness. Are they really moving "forward" quickly or nothing lasts long enough to truly be valuable. &amp;#x200B; Long story short, I'm personally slowly wading into the Dart waters, getting more and more confused as to why I haven't done this sooner. I'm hoping that the success of Flutter can help raise awareness for server-side Dart and jobs can start popping up. I think there are a good number of people who would like a strongly-typed NodeJS alternative. Dart can fill that role. Maybe Ryan Dahl will pull another rabbit out of his hat and [deno](https://github.com/denoland/deno) will. I'm cheering for Dart though.
Solid, concise overview of dart features!
nope, zsh uses \`\~/.zprofile\`... and you don't need to re-open the terminal after editing it, just \`source \~/.zprofile\`.
Hi there, do you mind to share your AngularDart project structure? For example, I'm thinking to be like this: lib/src/bloc/\*.\* all blocs dart files are here lib/src/html/\*.\* all html files here (probably got sub folders for different modules like user/account/stock/warehouse/etc) lib/src/services/\*.\* all dart API service files lib/src/model/\*.\* all model file - like UserModel, AccountModel &amp;#x200B; Thoughts?
I tended to keep my component files together. For instance, your home page might be an Angular component with an HTML, CSS, and Dart file. They might be stored in lib/src/components/home, while the files for MyCustomNumberPicker would be in lib/src/components/my_custom_number_picker. Once I converted fully to BLoC, I usually didn't have many services...just BLoC files and repositories (which are basically abstractions for database access). BLoCs use repositories to acquire data. This way, your components do nothing but dispatch events that cause state updates, which BLoCs provide to your UI. Each time there is a state update, the UI rebuilds in reaction.
Expect newer languages don't require semicolons and have more natural type declaration.
Semicolons is a weird hill to die on but fine, some languages require them, some don't, I don't see lacking them as a feature of 'modern' languages. And dart has modern style typing, you can still do old-fashioned String myString type things, but final myString = 'some string'; is perfectly fine and valid dart. It is also completely typesafe since the type is inferred at compile and your use is able to warn you about mismatches at Dev time.
I'm talking about this. https://medium.com/@elizarov/types-are-moving-to-the-right-22c0ef31dd4a
We don't have that precise syntax in dart, but with inference you can eschew most types in places they get super ugly like constructors, yeah your field declarations are ugly if you choose to not let the type be inferred, but that's fine, how often do developers actually peruse the field list of a class? Also I'll make the counter argument that putting function return types at the end makes them harder to read, so both styles are trade offs one way or another and personally, choosing between easier to read functions or variable declarations, I'll choose functions every time.
I went from 0 knowledge of dart to creating an app in one day. My background is in making api's in Go and knowledge of java/ object oriented programming for desktop apps.
&gt; So it waits the result then returns nothing. It doesn't "wait" and "*then* return". It's asynchronous. That means it returns *first* and then later at some point, the code after the `await` will execute once the pending asynchronous operation completes. Also, technically, it does still return a Future, but the *static type* of the return is `void`, which is the function's way of telling you "you shouldn't use my returned value". &gt; When i'm using this should i await this function or just call the function? The person who designed the function chose `void` as the return type, so they are telling you you should just call it. However, most of the time I think this is a bad design. If the function does asynchronous work, it should return a Future. That way, the caller can tell when the operation has completed and catch any errors it throws.
Hey there! :) I just created a package for handling migrations in SQFLite! Feel free to PM me if you find any problem during the setup or with Jaguar ORM (there shouldn't be any). It's called [sqflite\_migrations and here is the pub link](https://pub.dev/packages/sqflite_migrations).
Looks good, thanks!
Really good article. Thanks for writing/sharing. Hoping to see some advanced Dart write-ups from you :)
Thanks, I am writing a few more :)
Why does the left navigation bar disappear
I think you've got it there. One of the biggest problems is Google just doesn't push it; there is little resource around to learn it and the supporting libraries, themes etc are just not there. I also think with Flutter Web it just muddies the water even more.
As a lot of other people have said, TS has better tooling. It also has better third party support. I had to start a greenfield project last year for my employer and we settled on Angular. I really, really wanted to use AngularDart, but in the end after a lot of time looking at what was available in terms of support, third party libraries, themes and documentation I had to go with the TS version. TS does make Javascript tolerable - just, but Dart is a lot more enjoyable to work with.
So it seems like the general consensus is that even though we all agree Dart is a great language, there are just too many niggly things to work around (JS inter-op has been mentioned a few times), tooling, lack of libraries, lack of community. I guess it would be hard to compete against an eco system that is Rich and has a huge community backing behind it. I really hope that Dart kicks off someday soon because I honestly find it superior to JS. This thread has actually been really useful :) thanks guys
I've actually switched all my dev to Flutter now. I plan to do all my web dev with it too, and the experience so far has been amazing. I will not miss HTML and CSS.
I answer with a question: Why should you use Dart? Dart came up with "Batteries included" - and yes, this was true when Dart arrived but these days... Dart has much less "Batteries" than e.g. TS. Dart has a slightly!!! nicer syntax than TS but overall nothing speaks for Dart these days. TS decided for the integration with JS, Dart on the other hand cooked its own soup and lost.
Especially these days
\&gt; native Dart VM in the browser becomes possible They've abandoned this several years ago. \&gt; Flutter I think we will see a Kotlin-crossplatform-UI for Android + iOS in the near future...
the stack widget is probably your best bet
function1 and function2 work in exactly the same way from running/scheduling perspective and you can't await for any of them as they both return void. However if you change the function1 to return Future&lt;void&gt; (instead of just 'void') it can be awaited then. function2 can also be changed that way but it would require adding a return statement.
When i set different delay times to each function, the first one with await runs async. For example function1 delay is 7 sec and function2 is 5 sec. The function1 runs async and before delay finishes, function2 delay finishes and prints. So i guess no matter return type if function body have async in front that means that function runs async.
Well I might mistake but it seems like a simple 'async' without 'await' won't make the function to behave asynchronously, consider this example: Future&lt;String&gt; asyncFunction() async { return new Future.delayed(const Duration(seconds: 1), () =&gt; "1"); } Future&lt;void&gt; function1() async { print("function 1 start"); var s = await asyncFunction(); print("function 1 " + s); } void function2() { print("function 2 start"); asyncFunction().then((s) { print("function 2 " + s); }); } void function3() async { print("function 3 start"); int i = 0; while (i &lt; 1000000000) {i = i + 1;} print("function 3 middle - counter = $i"); while (i &lt; 2000000000) {i = i + 1;} print("function 3 end - counter = $i"); } main() { function1(); print("in main after calling function 1"); function2(); print("in main after calling function 2"); function3(); print("in main after calling function 3"); } The output is: function 1 start in main after calling function 1 function 2 start in main after calling function 2 function 3 start function 3 middle - counter = 1000000000 function 3 end - counter = 2000000000 in main after calling function 3 function 1 1 function 2 1 So the function3 is working like a normal non-async function (even thought it is marked as 'async') unlike function1 and function2 that are scheduled to continue later.
Please format your code properly, at the moment it's completely unreadable and very hard to diagnose.
Why are you making it log in every second?
Just for testing to see how much time the request takes as sometimes the request takea alot of time and sometimes not
Hey, Hadyelzayady, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Could you be using a deprecated package or an older version of Chrome? It seems that you are using some Javascript functions that is not supported by your Chrome browser. From the error message I would guess that the dart intl package version that you are using is the culprit. But it’s honnestly hard to tell with so little information
Well, I'm afraid I can't see any other oddities here. If it helps (it won't), I make many, many REST calls from AngularDart and Flutter apps all the time, and I've never seen any strange delays...
FWIW I'm currently running Chrome version 75.0.3770.142 I was only using the dart intl package in one spot so I took it out but still getting different Script errors: Uncaught Error: Script error for "packages/source_span/source_span", needed by: packages/http_parser/http_parser
that's a server issue and nothing to do with dart...unless your server is written in dart. if you are not in control of the server, then it's probably overloaded or you are possibly being throttled for hammering an api too much because you said elsewhere that sometimes it is slow and sometimes not
At a glance, Node js seems to outperform Dart on the problems that have multi-threaded solutions. The more restrictive memory model of Dart is safer, but also slower, since data needs to be copied between isolates.
According to the test site they are running Dart VM version: 2.2.0 (Tue Feb 26 15:04:32 2019 +0100) on "linux\_x64" &amp;#x200B; 2.2 is a little older. 2.3.0 added support for native binary compilation. It might change the results, maybe not though. [https://github.com/dart-lang/sdk/blob/master/CHANGELOG.md#240---2019-06-27](https://github.com/dart-lang/sdk/blob/master/CHANGELOG.md#240---2019-06-27)
JS can run almost as fast as C in tight numeric loops, but that type of code basically doesn't exist in the types of programs one would use JS to write. In the real world of JS (speaking as primarily a JS dev), most code isn't anywhere that fast. Polymorphic function are everywhere and instantly deoptimize the function. Objects passed around are dynamically changed which deoptimizes them (and the code around them). Arrays and lists are often of mixed types which also deoptimizes. Sure, you could solve these issues with typescript to some extent, but then you run into other potential issues like having an unsound type system. Plus, IMO, if you're going to switch to a typed language, ReasonML or dart are much better options because they remove the pain points while providing actually sound types.
We changed the type system in Dart 2 to add sound static types, but it will take a while for the compilers to take full advantage of that.
It's great to hear. Dart seems great, i currently use Typescript and Go mostly and love both. Dart makes feel at home for JavaScript/Typescript devs. Dart ecosystem is but lacking for back end development but would love to use it as goto general purpose language.
In at least some of these the Node version uses multiple threads, while the Dart one is implemented without Isolates and could be made much faster with a better implementation. For instance the [Dart implementation for fasta](https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/fasta-dart-1.html) does not use isolates, while the faster [Node implementation](https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/fasta-node-5.html) uses worker threads. If we compare against an earlier [Node implementation without threads](https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/fasta-node-4.html) the Dart one comes out slightly ahead.
As-in "Always look at the source code." Over the last few weeks, someones contributed a bunch of JavaScript programs that use multicore.
*fwiw* updated Dart VM version: 2.4.0 (Wed Jun 19 11:53:45 2019 +0200) on "linux_x64"
Don't see any major difference in benchmark results thought
Isaac, could you rename Dart AOT into something else? Cause it does not actually do any ahead-of-time compilation - it just does AOT-parsing essentially?
As some people already pointed out some benchmarks are simply comparing different implementations: JS uses multithreaded solution, Dart does not - hence the difference. However there is some more confusion to dispel here. A "statically typed" does not mean "fast", like "dynamically typed" does not imply "slow". Similarly AOT† does not mean "fast", while JIT does not mean "slow". You should check my comments in [another thread](https://www.reddit.com/r/dartlang/comments/bwqe7r/downsides_to_aot_compiling/) where I try to explain why. † In reality the page you are linking does not even measure performance of AOT compiled code. It still uses JIT despite being called "Dart AOT".
The needle has already moved a lot but Dart 2 static types only take you so far. We are still facing the problem with interfaces like `List`, with boxed primitives, and ironically with runtime type checks required to ensure soundness of the type system (covariant generics say hi). (On 32-bit there are also some challenges with 64-bitness of int). There is some juice to be squeezed (e.g. around more efficient method calls, some yet better use of types) but in general I don't think there is much left from Dart 2 itself. I think the next big jump will come from NNDB (in fully opted in programs) and ability to specify invariance (exactness) for type parameters.
Is the [wiki page on snapshots](https://github.com/dart-lang/sdk/wiki/Snapshots) out-of-date ? "… *application snapshots*, which include all the parsed classes and compiled code generated during a training run of a program." "There is also an app-aot variant that does not use a training run, but compiles the entire program starting from main."
Is the problem that [AOT compilation pipeline is currently not packaged into Dart SDK](https://mrale.ph/dartvm/) ? In that case, does `-snapshot-kind=kernel ` do anything more than `--snapshot-kind=app-jit ` ?
&gt; I think the next big jump will come from NNDB (in fully opted in programs) and ability to specify invariance (exactness) for type parameters. Yes yes yes.
It is in SDK. Check this doc how to compile and run AOT: https://dart.dev/tools/dart2aot
I follow the commits on https://github.com/dart-lang/sdk, but as an outsider, it's hard to glean progress from it on some fronts. I see there is lots of work being done on NNBD, but I'm guessing release is still a ways off? As in sometime in 2020?
Yes, that wiki page is out of date. I have updated it. Note that you were passing `kernel` as snapshot kind - which creates snapshots that contain binary form of the AST for the whole application, but nothing else. Which is even less than what `app-jit` would give you. You can you create true AOT snapshots by using `dart2aot` tool - results would probably would be much worse performance wise than JIT mode for the kind of code that shootout contains.
I don't fully understand what you're doing, but it could be a CORS issue. when accessing a different domain in the browser (even if it's a different sub domain or port), browsers issue an OPTION request first.
This is most likely the correct answer.
That was what i suspected, but i tried logging out the Method from the request and both of them are GET requests.
One is the request for `/`, and the other one is `favicon.ico`. Just look into the network tab of your browser.
Aaaahh, makes sense, thanks!
&gt; confusion to dispel Now [vs Dart aot](https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/dart-dartaot.html) does show `dart2aot` `dartaotruntime` measurements. Now [vs Dart snapshot](https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/dart-dartsnapshot.html) does show `app-jit`.
favicon is trying to load
A lot of work happens in [the language repo](https://github.com/dart-lang/language) too. In particular, [#110](https://github.com/dart-lang/language/issues/110) is the main tracking issue for non-nullable types. &gt; I'm guessing release is still a ways off? As in sometime in 2020? In general, we don't provide estimates for upcoming features. I know that can be frustrating, but it gives us more flexibility without risking disappointing users. &gt; Also, will NNBD allow dart2js to generate better code? It should, yes. Right now, dart2js spends a decent amount of time trying to infer which variables are non-nullable so that it can generate smaller, faster code. With NNBD, the compiler shouldn't have to spend time inferring that and it should hopefully generate more precise results.
if i understand you correctly, you're running the app directly from intellij. you can edit the run configurations. im on mobile so i forget the exact field, but there is something like "extra arguments" where you can pass the auto restart flags
Thanks
The left side bar still disappears on chrome