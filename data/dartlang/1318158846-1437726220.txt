I used Inkscape -&gt; Path -&gt; Trace Bitmap on the available Dart logo PNGs. Here's a vector, it could use a touch-up. http://www.yellosoft.us/public/images/dart.svg
I'm excited to see where this can go!
I'm not sure why anybody would downvote this. Is he missing something obvious? Is Dart really that hard to build? I wont be able to try it out myself until tomorrow.
I didn't realise that "+" is still both concat and add... Dammit, that's pretty much my main JS hate. 
I came across his blog separately which then linked back to reddit when googling a compilation error I'm receiving, seems to be buggy to build in some cases.
I've just put up versions of dartcombat, slider_sample, spirodraw and sunflower on my blog: http://dartwatch.com/ - see the downloads page for download link. I've zipped them to save bandwidth - you can run them locally in google chrome. These are the samples from google code repo: http://code.google.com/p/dart/source/browse/#svn%2Ftrunk%2Fdart%2Fclient%2Fsamples Cheers, Chris.
Dart supports `+` for strings mainly because people would complain if it didn't. We discourage people from using it. Whenever possible, use string interpolation. If you need to concatenate a lot of strings, use a `StringBuffer`.
Thanks! I don't have Chrome installed right now and indeed &gt; the samples probably only run in chrome which worries me a little bit...
This just in: spirodraw does not work with FF5. Will test more when I get home. EDIT: None of the samples work in FF5, updating now. EDIT2: None of the samples work in FF7. Should I even try IE?
Just to be clear, the fact that they only work in Chrome right now is just a reflection of how immature the current Dart -&gt; JS compiler is. We don't have any nefarious plan to have Chrome take over the world, and we definitely *do* intend the compiler to compile to JS that runs in a bunch of browsers, we just haven't gotten there yet.
Good to hear, and thanks for the response! Of course, now that it's open source, I should really just stop complaining and try to fix it myself... Too bad I know pretty much nothing about compiler-writing and such. Great opportunity to learn though!
&gt; Dart supports + for strings mainly because people would complain if it didn't. That is a lame reason to do something that is so clearly a bad idea.
The team had two programmers. I was the other one. *Somehow* one of the judges identified that we were redditors.
Wow, you guys have probably written the largest Dart program outside of Google so far. We'd love to hear your feedback on how it went. Would you be interested in throwing some notes at us either here or on the misc mailing list at dartlang.org?
UPBOAT
I stopped reading after this: JavaScript is already there.
Should I set some environment variable to the path to the `lib` directory?
Ah, Options has a `script` accessor. http://rosettacode.org/wiki/Program_name#Dart
http://api.dartlang.org/dart_core/String.html#splitChars use it like this: "abc".splitChars().forEach((c) { print(c); }); 
Windows installer available. http://www.yellosoft.us/helpers
Currently, no, it doesn't. We had rest params and the spread operator (in JS lingo) in Dart for a while, but we took it out when named optional parameters were added. Getting those two features to play nicely together is quite a challenge, so to simplify things, we stuck with just named params for now. We may add it back at some point, but so far we haven't missed it too much.
Dart doesn't use environment variables or have anything like a search path for locating imports. Instead, you have to use a URL that will point directly to the library you're importing, either relative or absolute.
And here is part 2 - building the client side: http://dartwatch.com/index.php/2012/03/building-clientserver-app-part2/
I personally find the ability to change a constructor into a factory without changing dependant code quite compelling.
I have never had an urge to do this...
I haven't tweet in dart, but I've had to change things over to static factories in c# and it's a pain.
This would be a good question for the mailing list: https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/misc Dart is awesome, but still doesn't have quite a big enough following to really get good answers outside the mailing list. Being so early in development, it could possibly be a bug and they may actually ask that you submit a ticket.
&gt;How so? You're using onload. The actual scenario is a bit more complicated. I've created a resource loader, and my game started using the resources in the constructor instead of the init() method, that I specifically created for pulling out loaded resources... :) Also, in the resource loader, I don't set the src property before adding the event listeners. I already ran into that problem! :)
I don't think you can, it's really just a browser. You can ssh into a computer that can though
As well, there is not a Dart VM for Arm based systems yet. So the best you could do is run the generated dart2js code in the browser. But no DartEditor, DartVM, or any of the Dart SDK.
What exactly is your end-goal here? Most people will probably be deploying their dart apps using dart2js, so you could use your existing JS tools to do what you were saying. If you want to evaluate a dart applicaiton, why not just run it in the DartVM. There is already a command-line version of the DartVM (that could be used to write a webserver in), so can't you just use that?
So sorry you felt the pain of being on the bleeding edge. We know things are changing now, as we race towards a 1.0. Once we hit that magical 1.0 mark, we want to respect backwards compat and so now is the time to take all the feedback we're getting from the community and update the language and libraries. The M1 release, about a month ago, solidified the language and we don't expect major backwards breaking changes there. We do expect to add some features, but we think the language is fairly stable. Now we've gone to work on the libraries, and unfortunately, this means there will be some breaking changes. However, we've tried to add functionality to Dart Editor to "Clean Up" your code. It sweeps through and does a pretty good job at automatically updating the code for you. Here's a very short video to show you how it works: http://www.youtube.com/watch?v=P7htQQQmpGM You can track our changes at http://news.dartlang.org where we post the notices, and in some cases tips on how to update your code. Our mailing list is a good place to ask questions, don't hesitate to join misc@dartlang.org so we can help you through migrating your code. Again, apologies your code got caught in these changes. I hope you'll keep watching Dart and jump back soon.
Hi again, I forked your project and cleaned up the code. This was mostly an automated job by Dart Editor (yay for Clean Ups!) I did have to go in by hand with the change to the requestAnimationFrame callback. Here's the pull request: https://github.com/Plornt/Iso-Game/pull/1 Hope that helps!
Sounds like a bug. Can you file a ticket? Thanks!
Thanks for the reply. I just submitted it. http://code.google.com/p/dart/issues/detail?id=7482&amp;thanks=7482&amp;ts=1355850620
Dart is fantastic. It just "makes sense" to me, not having years of JS behind me I'm finding JS very hard even with JQ. Usually it "just works" in dart. 
Yeah, Dart is very much JavaScript done right. It's very intuitive and the tooling is already superior to many considerably older languages. Dart's gotten a lot of things right so far. Give me AppEngine support and I'm 100% sold.
Broken link?
For now I'm using Python on the GAE back end and using JSON to communicate to the dart pages I'm statically serving. It would be nice to use the same language on both but for now it's working fine. Unfortunate that {{ }} for templates was used in both languages but I guess it's actually a blessing really as mixed dart/jinja2 templates would soon drive me crazy I expect re: debuggin. 
Dart website. Maybe pickup a book: http://www.dartlang.org/books/ I've been reading Dart in Action and it's a good book for people that already know Javascript, C#, or Java.
Thank you
As a java dev, this is interesting to me.
The current focus of the Dart team is on making it a replacement for Javascript in the browser. It can be used on the server (dart:io) but that part of the product is receiving very little attention right now from the team. That may change as the Dart web components are more flushed out, but expected them to be focused on the browser for a while still. I'm looking at Dart because I'm a GWT coder and I see google abandoning GWT, which means it won't be progressing much as a framework going forward. As well, I'm taking the gamble that Dart may actually replace Javascript in the browser, and if that happens, I'll already know the language. Even if Dart doesn't take off, I like learning different languages to see what else is out there and how things can be done better. Google is putting a LOT of resources behind Dart right now, which is pretty amazing for us as users of that language. Most of the recent "popular" languages out there have been piggy-backing on existing VMs (Scala, TypeScript, CoffeeScript). I think the only language to come out in the last few years that is really a stand-alone product is Google Go, which has been slowly picking up speed. There was actually a discussion on the DartLang mailing list a few days ago about learning Dart vs Javascript, you may like some of the comments in there: https://groups.google.com/a/dartlang.org/d/topic/misc/aJNzvMS0rEg/discussion
Full list: https://github.com/languages
One thing I've wondered is, if using mirrors, how does the tree shaker know what's safe to get discard during compilation?
That's a good question. There's been some ideas floating around, but I haven't seen anything concrete. Mirrors can run at compile time or during runtime. At compile time, you can mirror all you want and you won't affect the output size. Mirrors at runtime, though, that may be different.
I believe the idea is that there will be an annotation you can place on a member that says "this will get called through mirrors". That tells the compiler that it's explicitly reachable so it and everything it reaches doesn't get shaken. 
Very nice overview of tree shaking. That's one of the reasons I'm excited about dart.
If I were doing a large Dart app, I would be testing in Dartium so I wouldn't have to hit the dart2js compiler. When I was closer to "go live" I'd start doing some tests in other browsers when I wouldn't be annoyed by the "fix something right quick and then wait for a second of two for recompile" cycle.
off topic: I have no intention to troll, but why dart compiler is written in Java, doesn't it make necessary to have JVM in browser? At least, the browser with Dart VM installed. (I know Dart VM is written in C++) 
Nice, maybe i try out with my go table game project.
Cool! Let me know how it goes.
Cool but it's almost like using TypeScript and EaselJS only with added Dart runtime overhead (TypeScript has no runtime)
Looks really interesting. Was the talk recorded?
I've been using the second one you listed, but it is not exactly feature rich, I'm checking ou the first one now.
OK, but this is VM only. Not for JavaScript. Is this the direction Dart is heading to? Were we mislead into thinking we could learn Dart and write web apps for all browsers? 
Eh, yes. Some JavaScript code can't just magically add SIMD optimizations to the VM which executes it. This stuff makes it run faster inside the Dart VM, but it doesn't negatively affect the performance of the generated JavaScript. Vectorizing code is very difficult, doing the opposite is not. You just take those computation steps and do them sequentially... just like you always did.
Try the Dart tutorials: http://www.dartlang.org/docs/tutorials/
Well, on top of that the form that dart spits out can be "SIMD friendly" if that makes any sense. In other words, if the JS VM does do auto vectorization, then dart2js could spit out javascript that is more likely to be transformed into SIMD than something a lay programmer would produce.
Still got that, even though i just start the darteditor.exe, the javaw.exe used around 600mb in an instant. Btw i'm using m3.
From the FAQ: [Should I write my web app in Dart?](https://www.dartlang.org/support/faq.html#should-i-use-dart-yet) *… If your web app is something that needs to be ultra stable, we recommend waiting until Dart is more mature. …*
This functionality is now in the dart:uri package. http://api.dartlang.org/docs/releases/latest/dart_uri.html
Thanks, I don't know how I missed that because I did a search on the docs and the source.
Cool anyway. :)
I expect some kind of announcement at Google I/O about Dart and hope that it is that they are building the Dart VM into Chrome. However, that's going to take awhile, especially if they experiment first with moving the DOM into the JavaScript engine (maybe the two can happen in parallel)
Meh, I don't think the DartVM being rejected from WebKit was one of the major points that made Google create Blink. It's fairly obvious that some engineers within Google aren't happy about the idea of the DartVM being added to Chrome and would prefer Dart2JS be the primary way Dart is deployed. 
If you stay away from the latest features such as Web UI, you'll be fine. I'm finding my app to be less error prone that native JavaScript. 
I would have disagreed with you until I watched that video I just posted. They pretty much laugh at the idea and clearly don't want to incorporate the Dart VM. (https://www.youtube.com/watch?v=TlJob8K_OwE at 17min 26 sec in case it gets deleted)
This has already been discussed: http://www.reddit.com/r/programming/comments/nkkcm/why_not_a_bytecode_vm_in_the_browser/
Thank you for sharing that, it's great.
youtube link with starting time set: https://www.youtube.com/watch?v=TlJob8K_OwE&amp;t=17m26s
It's going to be awhile before the Dart VM gets in Blink it seems
I'm waiting for the [video](http://html5devconf.com/videos.html).
The author of the benchmarks doesn't seem to care that his methodology is incorrect.
I enjoyed this one [Dartisans ep. 16: Dart and Web Components Reloaded](http://www.youtube.com/watch?v=CqS4lnO_dqs) which is only a few months old.
Could you elaborate? Do you mean the VM startup time? That is 0.1s out of 2.8s. Do you mean warmup time? That is even negligible as there are 1000 sudoku in the input. I don't see how these affect the general conclusion.
Yes, really cool.
You are lumping dynamic languages which must parse, compile, optimize, generate code and execute with static languages which only have to execute. The benchmarks lack any timing code, which means you are measuring how long it takes from the time the process launches until it returns control back to the parent process (probably 'time'). You should only measure the time to execute the benchmark code itself not the surrounding OS and language runtime overhead.
I have increased the input size to 10000 sudokus to reduce the concerns. In general, comparing implementations is somehow like optimizing code. All that matters is if ~95% of running time is spent on the target. A tiny fraction of warmup/startup/input/output time won't change general conclusions.
I found this part interesting: &gt;Dart’s new approach to constructors aren’t discussed as much but are a big win for me. &gt;Dart makes object construction atomic and deterministic. Some common initialization idioms are outlawed – for example initializers can’t reference ‘this’. But it is so great not to have to deal with revealing partially constructed instances or non-deterministic class initialization order. A related feature is compile-time constant object instances with interning. There is also nice support for factory constructors. Dart’s creators are VM experts, and I think it shows in the way they have rationalized the insanity of laissez-faire construction.
They [claim here](https://github.com/bp74/StageXL) that they developed the linked game in 6 hours. If that's true, I think it's really impressive.
Correction: M2 &amp; M3 changes. http://jamesslocum.com/post/44259278296
Lovely optimization. A very nice benefit of having a compiler. Even with a mutable list, this optimization should happen as long as the list doesn't change in the loop.
That podcast is pretty old, though, huh?
It is, but some parts of it are still relevant today. For example, Lars answers the question about why not a new multi-language VM that is being discussed over at Dart Discussion https://groups.google.com/a/dartlang.org/forum/#!topic/misc/RzvEDZG9cnI%5B76-100-false%5D
Thanks. This is very timely for me.
Uhh. Ok, point-by-point breakdown: &gt;Instead of utilizing the huge JavaScript developer community, Google decided to create its own front end development language, which the chances for other browsers to adopt are zero. False dichotomy. It's also really ignorant. V8 made people care about javascript again. They've contributed a ton to the javascript ecosystem. &gt;JavaScript ES Harmony is an evolving language which the community is willing to adopt. It may be evolving but it still has a lot of baggage to go along with it. Dart is a clean break. &gt;Mozilla has its own variant, but eventually Google is the one who controls the web, and so far we haven't seen any plans to support the future JavaScript version. Why is that? Any reasonable amount of research into Google's intentions with Dart, and the author would know that Dart isn't a replacement for javascript. To imply that google would stop supporting future javascript standards is absurd. 
Google invests in JavaScript. Our V8 engine is going strong, we have people working on the TC-39 committee, engineers working on JavaScript polyfills for the latest web specs like Web Components, and a very large pool of engineers writing JavaScript (closure, and non-closure code) every day.
&gt; Almost all computer science students liked it [50% of class or about 30]. Those who had programmed in Javascript found the structured, object oriented approach a welcome change from regular web development.
Part 2: http://www.informit.com/articles/article.aspx?p=1925233
i really want to like dart but honestly it sucks hard. the editor is also a steaming pile of shit. dart/go will never catch on and i think devoting any amount of time or resources to learning them is a total waste of time. i copied and pasted some code for how to make a SIMPLE httprequest in dart in a command line script and the editor doesn't even throw exceptions/errors, it just links me to a 'patch' file that has code highlighted about method not existing. there are also barely any places online to read about this language or tutorials or anything besides seth ladd's videos which are pretty much irrelevant to dart but relevant to programming in general. 
I can understand your frustration. Google announced Dart really early and open sourced it so the wider community could work on it, but things back fired somewhat and there was a backlash. It's still in development and a date for Dart 1.0 has not been announced afaik. You might try alternate editors like Sublime 2 and WebStorm with the Dart plugin, or just wait a year until 1.0 and try it again. Dart has a lot of potential, yet to be realized. I'm already productive with it, but I have a lot of patience for things still in development.
Ok good. Iterators are an interesting subject. I remember when I first time I understood the yield keyword that I thought it was the neatest thing since if-then-else. If you read Brendan Eich's comment further down in the mozilla link above, it sounds like they are regretting not doing it the C#/Dart way and instead doing it the Python way. It does seem kind of weird to use an exception for flow control. Thanks for writing about the subject.
Ooo... ouch. I was trying to figure out how to do builds on Windows and the process seemed so convoluted that I gave up. My advice? Wait until it hits 1.0 and then maybe it'll be stable enough to build.
Oh man. I wish I was going! I'm especially excited about the "Mobile Web Apps" one. I'm trying to push for using Dart with Cordova around my office. So far, no traction, but I can still dream!
Optional types made me slap my forehead b/c it's such a fucking good idea.
&gt;But I don't particularly care for the import/library/pub package format, unless I'm just doing it wrong. I'd really like to do &gt; import "ui:search"; &gt;for a local, custom library ui.search instead of doing the relative path to the dart file &gt; import "../../ui/search.dart"; If you've defined "ui" as its own package, you can reference it like this: import 'package:ui/search.dart'; Which is more ideal than a relative url. As far as things I like about dart: - Implicit interfaces. Any class you define also defines an interface with the same name. Allows you to easily plug your own implementations in if you so choose. - Factory constructors. Provides a built-in way to do something that is always being done manually in other languages. It's one of those things that makes code more self-documenting. - Final variable initialization. This is me just being pedantic, but dart gets it right. In C#, you can actually assign and re-assign a readonly variable multiple times in a constructor. In dart, initialization of final variables is done in its own construct outside the constructor body. - Reactive pattern *everywhere*. Dart calls them streams, but it's essentially the high-level abstraction that allows event subscription and LINQ-like behavior. Great for composition. 
Ah perfect, thanks!
Do you really want to rebuild that every few weeks? Dartium apparently complains if it's too far out of date, which is why I created the dartium-bin AUR package, so I didn't have to manually redownload every few weeks.
It would have been cool to build it period, but I gave up after four days. The dartium binaries from google are compiled with ubuntu libs, as far as I know. It would be better to compile the binaries in an Arch Linux environment. Once you get the PKGBUILD going, building the binaries shouldn't be a problem... usually. But dartium is so complex and changing so much, it would be an commitment to maintain that PKGBUILD.
Discussion links: [Google Groups](https://groups.google.com/a/dartlang.org/forum/#!topic/misc/ib5HVV9f-Mc) [Hacker News](https://news.ycombinator.com/item?id=5687226) [Reddit Programming](http://www.reddit.com/r/programming/comments/1e2jhr/dart_vs_java_the_deltablue_benchmark/) [Google+](https://plus.google.com/+dartlang/posts/A37r2xiupbq)
If you don't get this working, I may try to tackle it. I'd like to see PKGBUILDs for dart-vm, pub, dart-editor (from source) and dartium, and if nobody beats me to it, I'll tackle them in that order. How committed are you to getting this to work? If you've made any progress, perhaps you could post it up to a github repo or something? I can't promise I'll be able to work on it any time soon, but maybe someone else could.
Rikulo Gap is also worth a look! http://docs.rikulo.org/ui/latest/Rikulo_Gap/Fundamentals.html
Hacker News didn't like this article. It's got flaws, as noted: https://news.ycombinator.com/item?id=5431894
I think it is, not seen it in a while.
Well, then, what language *is* it?
WooHoo, finally! 
This is a complete misunderstanding of both Node and Dart. 
In order to understand better, I think it's appropriate not to compare Dart to Node, but rather to recognize that the appropriate comparison is between Dart and Javascript. Node is a VM for Javascript. Dart is a language that includes a VM. Node has been around for a while now, and has a ton of contributions and libraries. Dart is still new and has much less in that regard. But Dart promises to be better than Javascript, and largely because you won't need all those fragmented tools. In my mind, it's no contest that Dart is *better*, but the question is whether or not you're willing to take a gamble on Dart's ability to gain a foothold on the web, in browsers, on servers, etc.
dart works on browser and server
The standalone "dart" executable can do I/O just like Node. It's like Node from the very beginning. You can use it to write command line tools or web servers. Like V8, the VM itself is a library which can be embedded in other applications.
&gt;Node is a VM for Javascript. Node is V8 + I/O. It's a thin wrapper around V8 which exposes some additional I/O APIs ("host objects") to the runtime.
Who will rescue dart from browsers?
Zeus is a language neutral programmer's editor/IDE for the Windows platform. Based on some discussions on the golang forum I put together a set of simple instructions of how to configure Zeus to work with Dart. Those instructions can be found here: http://www.zeusedit.com/zforum/viewtopic.php?t=6923 These instructions show how to configure Zeus to syntax highlight and code fold Dart code and provided the Dart SDK has been installed, it also allows you to compile Dart code from inside the IDE. To get the intellisense to work do the following: http://www.zeusedit.com/zforum/viewtopic.php?t=6924 NOTE: Zeus is shareware, runs natively on the Windows platform and runs on Linux using Wine. *Jussi Jumppanen* *Author: Zeus IDE* 
I wish these headline writers would stop writing such confrontational headlines. No one needs rescuing.
Well, we all need rescued from IE.
This is great stuff (obviously the future,) along with Polymer for JavaScript. For a great presentation about web components I recommend [Web Components: A Tectonic Shift for Web Development - Google I/O 2013](https://www.youtube.com/watch?v=fqULJBBEVQE) 
[g.co/dartisans](http://g.co/dartisans)
It looks cool. I actually wanted to write something similar to learn about some of the needed algorithms. :-)
...you gave me a hand cramp. Harrumph. [My score.](http://i.imgur.com/WKZXgLv)
Don't mention it. :D
The code's available on github, it's my first though, so don't expect gems. :D
It won't. Web UI is radically different from any of those MV\* frameworks. It uses [MDV (model-driven views)](https://github.com/toolkitchen/mdv) and [Web Components](http://www.w3.org/TR/components-intro/). Angular is interesting for people who are already familiar with AngularJS or people who don't feel that adventurous.
&gt;mdv is one of Angulars' main selling points I think you're mixing that up with something. Angular doesn't use MDV. There is no `node.bind` and it also doesn't use `template` tags. I also think it doesn't work in IE8 while AngularJS does support IE8.
Isn't there some kind of universal UML format for modeling classes? Some kind of Dart code generator for that might be swell, so one could use their favorite modeling tool.
https://github.com/Plornt/CursorDiscoServer https://github.com/Plornt/CursorDiscoClient Syncs users cursor, music and background colour. Took the best part of a day to make. EDIT: http://86.31.106.190/cursordiscoclient.html Whilst the server I am using for plornt.com stops being DDOSed EDIT: Please dont connect via iPad. I have no idea why but it causes the server to crash. Edit: WebSocketException: Invalid WebSocket upgrade request #0 _throwDelayed.&lt;anonymous closure&gt; (dart:async/stream_impl.dart:7:5) #1 _asyncRunCallback._asyncRunCallback (dart:async/event_loop.dart:9:15) #2 _asyncRunCallback._asyncRunCallback (dart:async/event_loop.dart:13:7) #3 Timer.Timer.&lt;anonymous closure&gt; (dart:async-patch/timer_patch.dart:9:15) #4 _Timer._createTimerHandler._handleTimeout (timer_impl.dart:99:28) #5 _Timer._createTimerHandler._handleTimeout (timer_impl.dart:107:7) #6 _Timer._createTimerHandler.&lt;anonymous closure&gt; (timer_impl.dart:115:23) #7 _ReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:81:92) Is someone able to help? I have no idea what that actually means in terms of how to fix it.
And so begun the framework war has.
Hey BasBeuk, Dart has an excellent API for doing any DOM manipulation (inserting and removing HTML elements among them). Check out http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dart-html-using-html5-apis
cool, I like how it's a fractal.
Thanks - wonder if I could combine it with the fractal tree demo from last week :-)
Groovy has something like this. It executes a closure containing the object's namespace. object.with() { beginPath() moveTo(ax, ay) lineTo(bx, by) lineTo(cx, cy) fill() } It's not really a language feature. It's a feature of groovy's base object type. Still, it's useful to improve code clarity.
this crc ..beginPath(); ..moveTo(ax,ay); should be this crc ..beginPath() ..moveTo(ax,ay); notice the missing semicolon. Continuations work fine, no need for a with statement.
Thanks for that - a couple of other people pointed that out on G+ so I have updated the blog post. Great to know it is already there - going to clean up a lot of code :-)
No the talk is up to date with details of Polymer and Polymer.dart :-) The description is misleading...
"Web Components" is the umbrella term for a set of specs and APIs. Web UI made use that this fancy new stuff and so does Polymer. http://www.w3.org/TR/components-intro/
--output-type=dart Output Dart code instead of JavaScript. This option is useful when deploying your app, because it generates a single file containing everything the app needs. https://www.dartlang.org/docs/dart-up-and-running/contents/ch04-tools-dart2js.html
Great! Thanks very much.
StackOverflow is your friend for these types of questions. :-) http://stackoverflow.com/questions/tagged/dart
Anyone has an idea about UDP support? The linked bug has just low priority :(
I thought I read something about a new protocol from google that's some kind of UDP but I have no idea if it was targeted for dart.
yeah I think that was it, and I agree that they need basic UDP support.
There aren't that I know of, though I have built a few little blog engines for my own experiments. I've been thinking about doing a blog series on building a blog :) I would probably cover a server using the route package and either Mongo DB or PostgreSQL (maybe both and go into services abstraction), and a client using route, Polymer and markdown. If I can start this Thanksgiving weekend, I'll let you know.
That would be amazing. Yes, please do. Thanks!
Check this one out, its a bit outdated but not too much: https://github.com/sdeleuze/polymer-dart-blog And I am busy making a couple of web-apps with polymer on the front-end and a dart webserver with Redis as datastore. Which I guess I could share here as well.
I managed to make a Dart server and client using Websockets achieving speeds fast enough to not need UDP. I package all the packets each loop into a single packet and sent it out. Packets are in binary for optimized transfer. In a real world test using a server and running a client 30 miles away, I achieved 30ms ping. A friend 500 miles away achieved the same consistent ping. We had many moving objects and real time controls. There was no prediction engine and it worked flawlessly. UDP would be nice to spam update packets but I've gotten WebSockets to give me the performance I need for my low-latency, real time space game.
Will you put it on Github? I'd like to see how you implement it.
I spoke to one of the core devs at Fluent Conf last year and he said that a project "Oil Pan" (or some car-ish name like that) that was uniting the garbage collection and memory of the Dart VM and the JS VM. Until those are unified, Blink won't put the native Dart VM in. The dev estimated that this could be done as soon as August 2014 but also to not get our hopes up. He said there some pretty serious hurdles to get over.
That's super exciting. Thanks for sharing.
This is awesome. I'd really like to know what notch thinks of Dart so far.
i'm in pretty much the same boat as OP, so thanks from me too! :)
what experience did you have before? I'm just curious because to say you'd "never go back" you've obviously got your reasons i'm just starting with dart and web development in general and have nothing to compare it to but i already feel quite comfortable with it and i was wondering why you think it's so much better?
Experience with JS? Sheesh... It's horrible! You need a hundred disparate libraries, each with its own way of doing things, to get a decent app going. The language itself is so bad, it inspired the book *JavaScript: The Good Parts*, which details how you need to strictly discipline yourself to use only the parts of JS that aren't *too* bad. Complex typecasting, crazy rules for truthy/falsey, the strange bugs you can produce because of optional semi-colons, terrible tooling because of a lack of strict types...and on and on. The list of improvements Dart has over JS is so long, I won't have room for it all here, but here's a taste: True object-orientation, unified approach to everything from promises to streams, comprehensive standard library with consistent paradigms, optional types that enable great tools, push-button builds with concatenation, minification, and tree-shaking, predictable typecasting, a cool name that doesn't get confused with some other language, immutable objects that enable VM optimizations... *And* it's shiny and new, imparting all kinds of geek cred for the pioneers who can use it while smugly proclaiming their superiority over lesser creatures stuck with crappy old JavaScript. "JavaScript is so 1995," they can say. "Try programming for *this* century." Dart runs faster than JS when its own VM is present, and it runs great when you compile it to JavaScript so that it runs everywhere else. For frameworks, you have Polymer and Angular for Dart. There are something like 500 pub packages already available for even more free code. **pant, pant** There's more, but can I stop now? 
This goes a long way towards legitimizing the language outside of the Google developer world.
And a month later, still no update to: https://code.google.com/p/dart/issues/detail?id=11920 
I really wish he blogged or something- would love to find out about what he thinks about Dart. 
https://news.ycombinator.com/item?id=6905701 ;-)
there are some game helper packages on pub. http://pub.dartlang.org/search?q=game but it's probably a little too early to expect game tutorials in dart/canvas. If canvas is your thing, then any js canvas game tutorial or book will still be relevant. 
Have you programmed games before? Check out StageXL http://www.stagexl.org. Similar to AS3 so made for games. 
Yesterday was my first time using Dart, but I already built a simple snow demo in the canvas... https://github.com/Codingbean/Snow. Maybe take a look at that for some ideas on redrawing. 
Good job mate, I guess that's a step towards a better Dart.
Where is the source code he promised. Haven't seen anything about that yet
Very misleading, he still is singing it's praises. "Funnily enough he was referring to the fact that doubles are proper nullable objects, the inverse of a common reason for people saying that Java sucks."
View source..
http://test.notch.net/ld28/shader.dart I found that by noticing he referenced it from the dart file. So this matrices file you're mentioning is either not used or it ended up getting rolled into the main source file. It's all there somehow - you can play it, after all.
Always great to see posts like this from actual developers with actual projects.
I love you. Seriously. I could hug you. Thank you so much
This also brings up an interesting question though. How does one hide dart logic? is it possible?
On the web, the only kinda-option you have is to compile to javascript. It's compiler generated so it's a bit messier, but it's still reverse engineerable for the dedicated. What you see here is a runtime compiler. It reads the dart file then compiles it to js and then `eval()`'s it. Or something along those lines.
So how does this have a leg up over PHP if I cant hide the logic? **Edit**: Mainly code that needs to be behind the scenes
Have you tried webstorm? I believe it has dart support. 
It is a replacement for PHP. PHP is a server-side language, Dart is a server-side AND client-side language (by compiling to JS). It's impossible to hide client-side logic, besides obfuscating the javascript code. It's impossible to use PHP for making a client-side game like the one Notch did. Unless you compile PHP to JS, the same approach Dart uses. 
You're missing what I said wolf. How do I hide the server side dart if it's included in the wbepages. If ryeguy was able to snag the other part of the code, how does this have an advantage over PHP. Like I need to be able to hide business logic, not obfuscate the code which can be un-obfuscated I just want it explained, dont have to down vote, someone else may be wondering this as well. I was confused by this because the shader.dart file was not immediately located on the page like the main ld28.dart file. So how to use that back end logic with my front end script without someone snagging the back end file?
Sorry maybe I misunderstood, I reworded my statement I didnt realize it caused some shock and awe. &gt;Dart can run on both the frontend and the backend. On the backend, it runs in its own VM just like java, C#, or PHP would. On the frontend, it either compiles to javascript or it can run natively if the browser has a dart vm embedded in it (right now, just Dartium does). I get that, but how do I hide the backend code if you were able to pull out the other .dart file that was part of the thing? as a console program? I am not understanding. I get that it has an embeded VM but what does that have to do with the source code being able to be found via script tags in the browser. Basically how do I reference a back end script to use objects from it in a front end script without the user being able to access that file like u did with the shader.dart file? How do I make my code unavailable to the public (except for the client side stuff obviously). Sorry maybe I've been wording my questions badly. &gt;This is just a frontend application, delivered to your browser, so of course it's exposed: there's no other option. But on the backend it works the same as any other language in terms of security. I get that, maybe im confused but how to I combine the front end part of dart with the back end and keep those backend files out of the public view?
A better way of asking this may be asking: If notch wanted to put this same game up there in the web browser, but HIDE all the game logic and just say have a few things on the client side script that executed the game. How would he have done it? I am only trying to understand this. I apologize if my questions sounded like I was jumping the gun but like I said, I don't understand.
To seeing source code would be great if its not commercial.Great job btw.
&gt; You're getting down voted because your asking the same question and seem to be missing the answer that people keep giving you. At any rate, allow me to try... I'm not allowed to miss the answer? Usually that means it wasn't being explained very good... I'm not going to feel bad for asking the same question if I did not understand his answer. I am glad that he is trying to answer it for me, I just am not getting it... Let's see if I can see why this is flying over my head. &gt; However, Dart can also be used to build application code that runs on the server (back end) like PHP. Back end code executes its logic on the server itself which creates some sort of "result" (a page, an HTTP response of some sort, etc) and therefore doesn't need to send its actual source contents to any client (the client's not going to run it anyway, so there'd be no point). I mean I get that. I've ran a few servers with PHP and Apache (maybe I didnt understand them as well as I should have, but getting them up and running is a different thing). So is it the same pretty much as "requiring" a file from a different part of the server. Example, I Import it in as a library? &gt; If you're creating a back end application, you'd simply setup your server to not serve files of the *.dart type, or you'd simply not have your dart application files in a publicly served directory (much better). In that case, a client simply would never be able to download or view your source. Make sense now? How am I referencing those back end files in the client side dart script? Import statement? Thats more the heart of my question I guess Edit: Let me re-iterate guys. I am **glad** you are trying to help me, but please don't down vote me because I am not getting it.
&gt; Let me re-iterate guys. I am glad you are trying to help me, but please don't down vote me because I am not getting it. Don't get too upset over the imaginary internet points you're losing. People are very trigger happy with the down arrow these days on reddit. 
The server side bits are not visible. Only the client side bits can be read via "ld28.dart". Same way node.js server side files cannot be read.
The thing you're missing is that the shader *is* client side code. Just because it is not directly referenced in a script tag doesn't make it server-side logic. If you look at your network traffic using chrome's dev console, you'll see that your browser sends a request for the shader code, because the main script asks for it. It is impossible to create a browser game in js and hide the code, because the client needs the code to execute it. The only option is to make the game client/server, where a lot of the logic resides on the server side and the client is 'dumb' and contains minimal logic. 
&gt; I mean I get that. I've ran a few servers with PHP and Apache (maybe I didnt understand them as well as I should have, but getting them up and running is a different thing). So is it the same pretty much as "requiring" a file from a different part of the server. Example, I Import it in as a library? ... What? Now you're confusing me as to what you're missing. You run a Dart application on a server machine, and then route requests to the Dart app through a server software like Apache or Nginx, your Dart app does some work, and then it returns a response to the Apache/Nginx layer which finishes the HTTP request/response lifecycle. What are you trying to import? If you're relating it to PHP, then Dart imports are very similar: PHP's `require` simply includes a piece of code into another piece of code in a PHP application. A Dart `import` does a similar thing. I'm not sure how imports help answer your initial question, though, as its unrelated. &gt; How am I referencing those back end files in the client side dart script? Import statement? Thats more the heart of my question I guess Ohhhhhhh!!! I see what you're asking now. No, no, no, no. Not at all. Client side code can't simply "reference back end files" with an "import" in the way that I think you mean. Just as JavaScript can't just run code on a server and "import it", Dart can't either. There IS, however, a way to run some code on the server and use its response in your client side code.... that's just called XHR/AJAX. I think you're confusing yourself because the language has the ability to run on both the backend and the front end, but that doesn't mean they run in the same contexts. Dart (or ANY language) that runs on the backend is running on a machine in a specific process, while Dart (or JS) code that runs on the front-end is running in your browser on your local computer in its own process and knows nothing about the backend. The only way to have the two "link up" is the same way that all HTTP works, through request/response messages. I think you're more or less just fundamentally misunderstanding how client-side and server-side code interact.
&gt; I think you're confusing yourself because the language has the ability to run on both the backend and the front end, but that doesn't mean they run in the same contexts. Dart (or ANY language) that runs on the backend is running on a machine in a specific process, while Dart (or JS) code that runs on the front-end is running in your browser on your local computer in its own process and knows nothing about the backend. The only way to have the two "link up" is the same way that all HTTP works, through request/response messages. &gt; I think you're more or less just fundamentally misunderstanding how client-side and server-side code interact. Ok, I get what you're saying here. Thanks for clearing that up a bit. I may still be missing a bit here and there but I think i'm better understanding how this works. Gonna go do some more research into it. Thanks for the help! 
&gt; It is impossible to create a browser game in js and hide the code, because the client needs the code to execute it. The only option is to make the game client/server, where a lot of the logic resides on the server side and the client is 'dumb' and contains minimal logic. Ahhh ok understood. Thank you Ryeguy
No problem, man.
So help them make new and improved documentation! Haha, I know that's not the answer you want, but you DID make a whine post ;)
That's true, for sure. But one person alone could never write correct documentation. I know what you mean, the documentation is pretty tough to read. Lots of scrolling and uncertainty, and what at first glance appears to be duplicate content Truthfully, it might just be its format that is so bad. Maybe we could scrape it and reformat it into something a little friendlier. In Dart of course! I'd be interested in such a project if you are. What better first Dart project than re-creating its documentation? ;) Have you checked out the tutorial videos by Seth Ladd? Try these out: https://www.dartlang.org/dart-tips/
The formatting needs to be improved, for sure, but I don't think that's the real problem. I think that's someting that can be fixed... after we have more documentation. I feel that the information that's there is inadequate. And, I'm not just talking methods without autodoc information. The biggest problem is that the *intent* of the APIs are not clearly conveyed in the documentation. The modules themselves need high-level documentation to describe how their components are intended to work together. See: much of Python's documentation. I don't always agree with Jeff Atwood, but he hit the nail on the head in this respect: http://www.codinghorror.com/blog/2007/01/if-it-isnt-documented-it-doesnt-exist.html
Hi, I work on Dart. I wrote the initial version of the doc generator that's used for api.dartlang.org. Some other people are in the middle of rewriting it. That will give it a brand new, hopefully much better user experience. But I'm guessing that's not your concern? Is it the documentation itself that's unclear or missing? If so, *please file bugs*. The more specific you can be, the better. Thanks!
Dart server is called a 'console application' when you create a new project. There's a package called [start](https://github.com/lvivski/start) that reads a lot like express.
Do you realize that start(https://github.com/lvivski/start) is missing response.render? In the README it says it has it, but look in the source. I had to write the function myself. Its now in a pub package call webstart. Start hasn't been updated since Nov, so IDK if my pull req will even get seen.
Yeah well it's a young library. I have submitted issues before and the maintainer is active (just a bit slow). I have used it before for easy websocket access. There are express ports in dart so you cna have a look at them, but they are less popular.
That's a pretty broad question. I've been doing front-end work for a long time. When futures (deferreds, promises, etc) came along it was a huge "Ah ha!" moment. I love that Dart has Futures baked into the language. As for advantages and disadvantages, I can't really think of a situation where callbacks would be preferable to futures. If you haven't spent much time with them, check out some JavaScript tutorials and see for yourself.
The source is ugly, as I'm just working on the core right now, and I'll organize later. :P
Seems like nowadays minecraft clone is the hello world of 3D games. :D Do you plan on making it multiplayer in the future? What kind of server do you use to run it?
Trying to run it on my WAMP server and it just sticks at the loading screen, never moves to the game.
cool, thanks for sharing
Try and just run it in the Dart debugger mode until I get around to testing more. 
I may make it multiplayer, but it would be somewhat slow as everything would need to be a request to the server as far as other player names and locations are concerned. 
It requires: - three - vector math ___ After you download those, just open the source code in your Dart editor and debug it. It should bring up the Dartium with Craft. Give it a while to generate, as it needs to create 10,000 blocks. :P
If the singleplayer is stable enough, i could help with it. I made a multiplayer board game with node.js and websockets, but i'm really interested in real time games like this and Dart. :D I think the best framework for the job would be start. It has really good websocket handling, but it's still a young framework. 
Hold on, isn't the documentation written by the people making the functions in the form of comments? Wouldn't it be as simple as making sure the Dart programmers are more thorough in their explanations when they write new functions?
Since it compiles to javascript it's not like it can't be used for clients right now. Yes it sucks but not using console apps on servers is hardly the end of the world for it.
I get that, but trying to figure out how to get it to communicate between the 2. Example, most of the game logic thats obv needed on server side, but rest like (game.run()) on client side.
You have either socket communication or webform communication (HTTP requests) such as POST or GET.
Direct link to demo: www.hotengames.com/life Created a Life simulator over the weekend to help familiarize myself with Dart. So far, I'm really liking this language. I'd love to hear any feedback you might have on this - I'm sure I may be doing something wrong. Enjoy!
hey, just out of curiosity, what's your preferred language? just curious what kinda backgrounds people are coming from when they jump into dart.
looks cool. I just jumped into dart myself and also convinced my brother to come along for the ride.. so far we're both digging it too. 
For what it's worth, I work with C, C#, PHP, Python, and JavaScript. The first three are my "preferred" languages. I'm going to jump into Dart in the very near future.
Junior in college here. Started out with programming in ActionScript about...must of been 8 years ago? Got most of my bearings from AS3, and then Java. Just recently I took a course in Programming Languages which opened me up to a whole new worlds of programming - fell in love with Scala and it's great balance of functional and imperative style. My favorite thing about Dart has to be that it compiles to JS. I've yet to really "get" js - I can hardly do idiomatic js. Second favorite thing, has to be stagexl. I absolutely *love* Actionscript's graphical and event system. I'm also very happy with the anonymous and higher-order functions.
Thanks! So far, I plan on making extensive use of it :)
As much as I dislike JavaScript, it really is worth learning how it works, especially with to-JavaScript compilers. When issues crop up, you'll be better equipped to figure out what's happening. An idea: reimplement your game of life in raw JavaScript without referencing the compiled Dart code! The things I find the most esoteric, but important to understand are prototypal inheritance, modularity, closures and variable scope. Good luck!
Sounds like a good exercise. I'll tackle it sometime in the near future. All burned out on Life at the moment!
Post on dart discussion forum or ping the original porter. I'd be interested in this as well. 
They look really good but are quite similar to the HTML5 logo.
I assure you [the source material](http://angularjs.org/) looks much more like the HTML5 logo ;)
Good call
Dart editor works fine with java 7
I'm using OS X and I've verified that my current version of java is v7, but when I try and run DartEditor, I get an alert box telling me to download v6 or exit
Hmm, I wonder if this is os x specific
Where do you think the problem originates--Apple, Google, Oracle, or Eclipse? I'll try contacting them
Does this project still exist on github? I get 404....
apple
I'm glad to see you were able to install Java 6 and solve your problem. The newer versions of OS X do not come with Java pre-installed. Some people have encountered situations in which they were not prompted, as you were, to install Java 6. Just in case someone else has this problem and is not automatically given the prompt to install Java 6, you can find a download link and instructions in the support document at Apple. [Link Here](http://support.apple.com/kb/DL1572)
&gt; webstorm Many IntelliJ IDEs share the same base IntelliJ platform. There is only one Dart plugin (as far as I know).
Nice! Kind of OT: I've always felt slightly repulsed by Scala (I did some work with Play and messed around a bit in Akka) because of the "be different" drive the Scala development team seems to have. To me, it felt alien (coming from C#/Java) even though there was no real need for it to be different. This is one of the reasons why I like Dart, it's similar to Java/C# in many ways (so there is no need to reinvent the wheel and you can start very quickly) and only builds on the basic similarities when it needs to.
Not bad, two things: 1. Clear doesn't seem to clear the board in memory only on the display and so it is useless 2. You should include the dart files as well as the dart2js compiled version. If the page is loaded on a browser with a DartVM (like dartium) it won't work
Nice work. I like the full screen user interface!
It doesn't seem like it's working quite right. When I make a glider it ends up exploding rather than gliding as it should. EDIT: Playing around with it, sometimes a glider works, other times it doesn't. Might be an odd/even bug?
https://github.com/Hoten/blocks One thing I had trouble with: Apparently, dart2js has trouble with multiline strings. It tends to toss in a quotation mark in the actual string value. Other than that, I had very little trouble using Dart :)
I put everything from the /build folder up
Actually I like neither. I like green threads/isolates/actors. After programming for 5 years using Python Twisted (which is a an advanced deferred/future based framework), I can positively say I do not like that style of managing concurrency. I found small examples like demos and tutorial work ok in that style, large systems not so much. Not saying it is not going to work for you, it is just that for me it is not the correct answer.
Moved to: http://blog.christoffer.me/post/2014-01-11-my-new-dart-lang-t-shirt/
I feel the same way about Scala although my view is slowly improving on it.
Thanks for letting me know! I wasn't deleting elements form a hashmap correctly so if you accidentally made a cell and then deleted it, there'd be no effect
I disagree. This syntax is totally unclear. As a non-python dev, I have absolutely no idea what this means, and couldn't figure it out without looking it up.
I'd liked to hear about this too
It also requires some special syntax voodoo, because this isn't covered by Dart's set of overloadable operators.
Awww man I want a Dart t-shirt but with that joke all it will do is make people think I have a virginity and that it also needs defending. A spray paint style in white t shirt would be cool or something like that.
I have a grunt script that takes my dart code and compiles it for me with Dart SDK to a js file.
True. We need to make this less true. Step it up, Redditors!
You will need to use the JavaScript interop provided by dart detailed [here](https://www.dartlang.org/articles/js-dart-interop/)
Im not familiar with XDK but dart2js outputs js so if the XDK is for packaging JS then i guess it should work. 
yes it is, https://github.com/emergent-design/pixi.dart
Frameworks are heavy, using a JS framework in Dart defeats the entire purpose of using Dart in the first place, unless they're ported to the Dart language. If you have little JavaScripts that you can't properly replicate in Dart yet, then you may want to use jsinterop but it's going to add a lot of overhead that once again is going against the purpose and complicating what is a beautiful language.
I agree, but this kinda thing has been preventing me from really trying out dart. There are many good javascript libraries I use and depend on. Because of that, dart doesn't really make sense to me. I'm sure as the language grows, people will either port or create good dart libraries as well.
technically possible. It's possible, using the https://www.dartlang.org/articles/js-dart-interop/ libraries, but they're syntactically awkward and you incur some pretty severe penalties for interacting with regular javascript. - the size of the generated code is huge using dart2js - the 'native' js calls are slow - minification of dart2js js with interop is broken (tracked in a ticket tho) Dart as a platform is at its least useful when it interacts with native javascript; very little effort seems to have been put into supporting that. You're better off using the pixi.dart port, or various other 'natively dart' libraries. Alternatively, consider having a look at typescript. It's a fundamentally different approach (javascript extension/macro language essentially), but it interacts with the existing javascript ecosystem (including node) much better. 
Those problems aren't as severe as they once where, since we introduced dart:js. dart:js uses very low level implementations specific to the environment (different for dart2js vs. Dartium) so the performance is very good, and because dart:js doesn't use noSuchMethod() or mirrors in any way, the generated code size isn't effected. The tradeoff there is the somewhat awkward Map-based syntax. package:js is now written on-top of dart:js to provide a better syntax, but it does use noSuchMethod() and wraps the dart:js proxy, so there's a bit more overhead, but it's much faster than the previous, non-dart:js-based version.
On the inverse you can't really grow your JavaScript code base past a certain point while still maintaining manageable/pretty code which is what Dart is trying to solve. If you're not building big applications maybe you should stick with JS and some small libs until widgets for Dart are finished.
One can maintain large applications with javascript. The key is not falling into bad coding practices. Languages like Dart no doubt make it harder to fall into the traps, but that doesnt mean javascript is impossible to utilize in such a way.
I agree with you there. Just this dependency I guess you could say has kept me from exploring it. I'm currently a core contrib to a javascript game framework for example. So using that with Dart really wouldnt yield me many benefits. Of course Notch using Dart with WebGL makes more sense, since it's all provided functions off of a gl context object. You can just write your code around that completely. I am glad to see people using it, and maybe when more tools are built, I'll feel more ready to jump in. Hence why I'm subscribed to /r/dartlang :)
Yea, of course it's a catch-22 because if we don't all embrace a better platform we're never gonna be rid of javascript =].
 list.add(new GameObject(image["star"], 20, 17, 48, 38, 38, () { // this here just refers to enclosing object })); Like your comment says, `this` here refers to the enclosing object, and not the new instance of `GameObject` being created. For example: class OtherThing { void addGameObject() { list.add(new GameObject(image["star"], 20, 17, 48, 38, 38, () { print(this); })); } } Here, `this` in that closure will be the instance of `OtherThing` that you're calling `addGameObject()` on. Constructors can refer to `this` in their body. If you wanted to make that accessible to a lambda that you pass to the constructor, you'd make it a parameter, like so: class GameObject { GameObject(void fn(GameObject obj)) { // Call function, passing in this explicitly. fn(this); } } new GameObject((obj) { print(obj); // Prints the new GameObject. });
Been writing the game in Java over my usual html5 ways. Some ugly code, but I feel like the language has prevented me from being my usual game jam stupid-code self. Would love to see the source if possible.
There is a "source file download" ([direct link](http://ggj.s3.amazonaws.com/games/2014/01/26/1507/Peace%20&amp;%20Outer-space.zip)) at the bottom of the page, and all the `.dart` files are at `"Peace &amp; Outer-space.zip\Peace &amp; Outer-space\src\source\"`.
Ah i missed that thank you. I think the site may have been a bit slow on loading, given so many are probably submitting over the next few hours.
Now is about the time England hits the submission ^not-so-dead deadline. I just added some "highlights". Don't try this at home. (try, only when you got 48 hours to do something that you don't have to touch again)
The art on it looks great, judging the screenshots. Yes, i have also written super terrible code during game jams, ludum dare, etc. It's part of the fun :D. Really though going through a game you want to continue and improving the code is a good learning experience.
The art is by my teammates. There are 1 beginner programmer and 3 Adobe wizards in my team, and the game becomes extremely beautiful, somehow and somewhat functional, but gameplay a bit flat.
Just reading this with your edit, you could have probably used: https://github.com/johnmccutchan/vector_math for matrices instead of the nested list craziness.
Can you do just this? document.querySelectorAll('.foo').forEach((e){e.click();}); 
Does jquery work with Dart? 
You can shave off a few more characters if you want: querySelectorAll('.foo').forEach((e) =&gt; e.click()); Document is not required unless you are working with multiple documents, so you can just use the top level querySelectorAll() function. For short functions I find the fat arrow syntax more readable. Edit: Even shorter - you can also use the queryAll() function, but you will get a warning in the meantime. Long story. 
Ah crap, I thought I was in the javascript subreddit!
There is a Dart port of it (http://pub.dartlang.org/packages/jquery). Alternatively, you could use the js jQuery through Dart's js-interop (https://github.com/dart-lang/js-interop). That said, it's probably better to use the native Dart methods for this.
Hey Seth, As someone who really wanted and tried to make an angular+polymer app, it just isn't a good idea in its current state. For starters, [polymer doesn't support DI](https://code.google.com/p/dart/issues/detail?id=15804). This alone is a compelling reason to not use polymer. There is also the mental overhead of working with two different templating syntaxes, and quite frankly, angular's is just cleaner. Then there's [this](https://code.google.com/p/dart/issues/detail?id=16163) bug, which is a showstopper for anyone attempting to do anything production worthy.
I was quite impressed by the speed I could get with dart and webgl for a simple 3d landscape renderer. This is my first dart program so the code is probably awful, but I like the language a lot so it won't be my last. (And I might do more with this demo, you never know)
I meant to add a link to the source, I'll do that tomorrow
Seems like an interesting trick. Any reason why you'd need this check done if you have already setup the launcher to run in checked?
Looks good so far. Things you could do next: * Make the texture loading code less repetitive. * Add a skybox. * Improve the collision detection/response. * Add mouse-lock. &gt;WEBGL and DART. WebGL and Dart. Also, you don't need that Completer in that loadTexture function. There is already a Future floating around. You can just use that one: Future&lt;Texture&gt; loadTexture (RenderingContext gl, String url) { var image = new ImageElement(); var texture = gl.createTexture(); var future = image.onLoad.first.then((_) { ... return texture; }); image.src = url; return future; }
yup, this year for me is going to be focused on WebGL + Dart + Chrome. It's going to be a race to see which happens first, between my "app" ready for public consumption and the Dart VM getting shipped with Chrome. OpenGL &lt; OpenGL ES &lt; WebGL &lt; Three In a year or three mobile will handle WebGL 2.0 good enough. Dart is the icing on the cake.
very nice thanks for sharing
Thank you for the comments. It was intended as an exercise to learn dart so I don't know if I'll add more functionality like a skybox. As for the code, I know it's ugly in places (for example the movement code should NOT be in the terrain class...). Although it is really tempting now :) The collision detection was a quick hack to make it work at all, I do need to improve that. Not sure how I'd make the texture loading code less repetitive. I wanted to do that, this code is ugly. I need somehow to trigger the async load and specify where to store the result. If this was c++ I could simply pass in a reference to the location to store it, but that doesn't seem to be possible in Dart. Any suggestions would be welcome. Ah right, I didn't know about the .first member of the stream. Thank you, that simplifies it all. 
Take a look at this also http://svype.com
&gt; eems like an interesting trick. Any reason why you'd need this check done if you have already setup the launcher to run in checked? I don't use the Dart Editor, and I didn't know any other way to figure out of I actually started Dartium in checked mode :-)
Ah good point.
We have this in the uri package. It's called UriBuilder. http://pub.dartlang.org/packages/uri edit: although it's missing the parse, fromUri, and toString. Would you like to contribute to package:uri?
* [3D solar system example](https://www.dartlang.org/samples/solar3d/) on dartlang.org * [learningwebgl.com rewritten in Dart](https://github.com/jtmcdole/dart-webgl) on github * [three.js rewritten in Dart](https://github.com/threedart/three.dart) on github
What you're looking for is the JS interop library: https://api.dartlang.org/apidocs/channels/stable/#dart:js
Here is an example to show you how it works. http://pastebin.com/BFHyZxf7 I don't know if it's the best way to do that, but it works well.
Here is how you can deploy a Dart app to Heroku. https://www.dartlang.org/codelabs/deploy/ You will certainly need to do some changes in ~2 week because the way user-env-compile works in heroku will change (I received an email about that, 4 days ago).
Ok I'm checking it out. Many thanks!
Your fear is right. From the browser you can't get to "any old thing"on the client computer.
what would be in packages/browser/dart.js?
So, a dart script can use functions defined in js, but its not quite the same if I tried to call a dart function from inside a js script. Do you eventually think that calling a function, say foo(), from *anywhere* (whether its in js or dart script) will run the function no matter if it is a dart or js function?
It's the javascript file that says to the no-dart browsers to load the dart2js version of the code. You need the browser and js packages (via pub) tu use my example. 
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [Angular and Polymer Data Binding, Together! \[/r/dartlang\]](http://np.reddit.com/r/webdevnews/comments/1yh4v3/angular_and_polymer_data_binding_together/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
This kind of thing can be only done in command-line/server applications. This application can of course be also a web server which offers some web interface.
Thank you. There are a number of clients, and one server, and each client needs to take data off the serial line. So I have to think what to do. (I think Mozilla enables me to write an in a C library ([?XPCOM?](http://en.wikipedia.org/wiki/Mozilla_application_framework)) but it may be too hard for me.)
Bots will be the end of reddit.
The "master" is added because you are downloading a copy of the master branch from github. If you were to clone the file in git you wouldn't get the name. Just ignore that part, it isn't what is causing your issue. Looks like there is an issues with Eclipse on Linux that may be causing your greyed out files problem. Take a look at this thread for a description and workaround: https://code.google.com/p/dart/issues/detail?id=7950
Well, there *is* [express](https://pub.dartlang.org/packages/express) ([github](https://github.com/dartist/express)). I don't know the current state of things though...
Thank you. The problem described there as "grayed out" does sound like the problem I am having. I'm not so in love with the solution of editing a .so. But at least I know it is not me (been me lots of times in the past!), it is common. 
Spark ([repo](https://github.com/dart-lang/spark)) is being actively worked on by a combination of folks on the Dart team, the Chrome Apps team, and the open source community at large. It's definitely making progress but it's still early days. You can build/install as a Chrome app using the [instructions](https://github.com/dart-lang/spark/wiki/Development) on the wiki. EDIT: you'll probably need to enable experimental web features in chrome://flags
Interesting idea
I apologize but I'm going to make a comment that is likely unwelcome, but in any event is not related to the link (which won't come up for me at this moment). I thought to try Dart, as I have a web programming task and I like to try different things. I have Ubuntu, so my platform is pretty standard, I would think. I followed the instructions on the web site. It did not work (some interaction between Eclipse and a toolbar), to the extent that I could not proceed. There were some files that I was supposed to hello-world with and I could not access those files. A question here, which resulted in a helpful answer (thank you), yielded that it was not my fault, it was a bug. That I could tell the bug had existed for several years. Now, of course I could use my regular editor (emacs) and of course I could work around glitches. But you know, to a person looking to try something,the concern is that there are a lot of dead ends out there and that person wants to avoid them. An outstanding bug on the how-to-get-started page that exists for several years seems a lot like a dead end, no? So I hope I'm not seeming insincere or obnoxious but I'd suggest, if folks want people to try Dart, to make the initial tutorial page work.
I've been considering using Dart, and I watch this subreddit for recent news. Your comment makes me wary of Dart. I'm at that point in my career and life where I don't want to hack at things to get them to work. I just want them to work so I can get other things done. If this is the state of Dart, then I'm not ready to pick it up. Thanks for the info.
'Such things as fragmentation, the lack of a good standard library, and the limitations of the language itself are getting more and more attention as JavaScript applications get bigger.' Seems like a bit of an arbitrary assertion, but whatever. The issue here is that the javascript ecosystem ***is flurishing*** at the moment, and its not struggling with any particular problem that dart solves. How can you honestly recommend dart as better choice under the circumstances? here are some *real* reasons you might recommend dart, if they were true: its faster than javascript its easier to embed the dart vm than v8 it has better tooling than javscript it works transparently with your existing javascript makes things more awesome somehow. its better for large teams cause you dont have everyone doing different things in different ways. ...i suppose the last one is true. 
Oh I know. I wouldn't be thinking about using Dart if I didn't think it was viable. Your comment just provided more information about *when* I'll actually dive in.
js is not good for large or mobile projects - it was not designed to be. For most mobile apps we work for small improvements in speed and resource consumption - js is in a total different world of awful on these metrics. Google is pushing the mobile web pretty hard, and js is holding it back - hence Dart. I compare this to Go, which Google is pushing for no discernible good reason. At least with Dart the need is clear and the design responds to that need. I haven't used either yet, but Dart makes sense to me and Go doesn't.
&gt; the javascript ecosystem is flurishing at the moment If by flourishing, you mean fragmenting, then yes it is. But seriously, we've been looking for a JavaScript developer where I work for past 45 months. I'm a waitress, but I'm the closest thing we have to a JS dev since I maintain our web sites so I've been doing all of the screenings. It seems like nearly every JS developer I talk to has a different favorite framework. Other than jQuery, I haven't heard much commonality. Already this month we gave an offer to one guy that said he required us to use jQuery UI and another one that said he wouldn't take the job if he had to use it. How is that flourishing?
I found few things easier than trying out dart. Download [dart editor](https://www.dartlang.org/tools/editor/), unpack, start, open hello world app, run in dartium takes 5 minutes. Writing your own apps and using other packages is almost trivially easy, there is no trial and error stage like with js. 
&gt;Seems like a bit of an arbitrary assertion, but whatever. Fragmentation is a very real problem for JavaScript. There are dozens of ways to do classes. There are dozens of libraries for promises. There are dozens of ways to take care of dependencies. There are different ways to write doc comments (e.g. "@return" vs "@return**s**"). Problem is, this does of course introduce incompatibilities. Dart standardizes most those things. The language offers `class` and `import` keywords. Its shipped with a package manager. Its shipped with a doc tool. The type annotations are baked-in. The standard lib includes futures (~promises). With Dart (or Java/C#/etc.), you have a much higher chance that things will just fit together, because all of this basic stuff is standardized. That's a very big advantage. &gt;its faster than javascript Depends on what you're doing. If you can make use of SIMD, it will be a lot faster. If you want to use big ints, it will be *drastically* faster (even though Dart's big ints aren't properly optimized yet). Regex, however, is still super slow. Well, compared to V8's regex implementation everything looks kinda lame, but Dart's current implementation is really terrible. This will get fixed in the future, but right now it's just not good enough. The performance of the generated JavaScript is generally very close to handwritten JavaScript. Surprisingly, there are even some cases where it outperforms handwritten JavaScript. With snapshots, startup is about 10 times faster. A browser, for example, would just cache this serialized token stream instead of the actual file. &gt;it has better tooling than javscript Yes, it does indeed offer vastly superior tooling.
You didn't even link to the bug. All I can say is that it works for other Ubuntu users. It also works fine for Windows users (Vista or better, XP is not supported) or Mac OSX users. I also used it with Ubuntu. It worked just fine. Did you check the troubleshooting page? https://www.dartlang.org/tools/editor/troubleshoot.html
OK, I'm happy to link. [Here](http://www.reddit.com/r/dartlang/comments/1yqgb3/onehourcodelabmaster/) is the thread.
That's not a link to an issue. That thread isn't even related to "some interaction between Eclipse and a toolbar".
OK, I'll remember that.
Heavens, you seem upset. The issue, as listed in the sole response to the most I cited, is https://code.google.com/p/dart/issues/detail?id=7950 The bug, that I can tell is https://bugs.eclipse.org/bugs/show_bug.cgi?id=330563 (found in the discussion of the issue), which dates to 2010. You have a good day, now. 
OK I'm happy for you.
&gt; Heavens, you seem upset. Heh. Nah. I was just drunken and tired. Usually, I'm a bit more eloquent. Looks like the issue is caused by Unity. I'm surprised that you actually like using Unity. https://bugs.launchpad.net/ubuntu/+source/unity-gtk-module/+bug/1208019
I actually use Mate, but my point was less about the details of the particular bug than that it doesn't take much for a person only casually interested to move on to something else. Anyway, enjoy!
The issue was caused by your particular setup. It also isn't something which could be fixed by those who made the Dart Editor. It isn't even a bug in Eclipse. It's a bug in that global menu thing (or whatever) of Ubuntu. It doesn't behave like it's supposed to behave. If you would use a browser which ignores margins, most websites would be broken, too. Would you still put the blame on the web developers even though its your browser's fault and that browser's share is below 0.1%?
I'm sure you are right. But, I (and people like me who have been convinced to become casually interested in this tech) don't care. All I see is that Hello World didn't work. That makes a person far less likely to make the jump from casually interested to interested enough to try it on the next project. Anyway, I've gone on too long-- hope you enjoy it. 
?? Since mm and concurrency are not built into C/C++ there is a rich ecosystem of libraries with solutions ranging from terrible to great. You can just use what is provided by the platform or chose from one of the libraries. Also, when Google introduced Go they said that the problem it solved is the long compilation time when building massive systems. The problem Dart solves is js - if you really think js is great just the way it is then we really aren't going to agree on anything.
&gt;All I see is that Hello World didn't work. Yes, and if you visit Reddit with IE5, Reddit won't work either. Maybe you should use a Mac. Ubuntu apparently isn't the right choice for you. Ubuntu does have some rough edges and not everything works perfectly fine out of the box.
I don't have a specific fix, but a quick note, the most recent two versions of the Intellij Dart plugin require the 13.1 Early Access Preview to work [13.1 EAP](http://confluence.jetbrains.com/display/IDEADEV/IDEA+13.1+EAP). You might try installing that and upgrading your plug-in to see if it resolves the problem. 
Hrm, yeah I am seeing the same issue that you mentioned above. Looks like the Intellij IDE browser plugin is disabled with the 13.1. Sorry I don't have any help to provide. You might try cross posting to the Intellij forums with your original issue: (http://devnet.jetbrains.com/community/idea). I had a previous issue with Postgres database connection in Intellij 13 and they made a fix and added it to the EAP within a few days. I really like the development experience with Intellij, but I was running in to issues previously with the fact that it's plugin wasn't keeping pace with the rapid updates to Dart and its various components. My solution for now has been to go back to using the Dart editor. I occasionally jump in to Intellij for a useful piece of functionality, but the debugging integration, error detection, and overall stability seems to be much better in Dart Editor for now. The fact that it doesn't create any project files makes it fairly straightforward to move back and forth between the two. 
One last small thing to check. I noticed my port number on my old Intellij build was 63342, however when I run a localhost build from the EAP I am getting them on port 6334**3**. Not sure if that helps, but you might double check and see if a difference in port number in your debug configuration could be causing a problem.
Looks like the problem might have been in Dartium. When I changed the Dart setting in IntelliJ to use a Dartium profile directory inside ~/.IntelliJIdea13, the problem went away and I was able to use the original name. I'm guessing that Dartium was heavily caching something. Maybe later I'll take a look through its cache. 
There is http://www.dartosphere.org/
There's a [dart weekly newsletter](http://dartweekly.com/)
The last issue was from November 22 though.
My blog http://www.divingintodart.com/ has a recurring 'TWID' post. Been a little slow this year but hope to get them more frequent again.
I should mention that I haven't actually done this myself yet (although I keep meaning to give it a go) but taking a leaf out of building and testing JS browser apps, I think you will need more than a Dart VM. For unit testing (something like Jasmine+Karma from the JS world) you can run a Dart VM with the test code as that is essentially what the Dart Editor does. When it comes to testing against an actual DOM (I.e. end-to-end or e2e testing) you need something that provides the DOM such as a browser. There are a number of such things available, for example PhantomJS runs a headless WebKit which provides the DOM and allows you to execute test scripts (there are a number of JS frameworks which do this). I believe it will be possible to run this in a build environment such as Jenkins. Finally I should mention Angular (JS or Dart), they really know their stuff when it comes to testing, so check out what they do and recommend.
&gt;Does the Dart VM offer any built in support for DOM access from the "server"? No. However, you can use Content Shell for that. You can install it by running: &lt;Dart SDK&gt;/chromium/download_contentshell.bat
Yea, i should have mentioned that i am familiar with PhantomJS/Selenium/etc, but have never really been happy with them. I was hoping that since Google was implementing their own VM, that perhaps they added a Virtual DOM of sorts.. similar to React. With that said, i decided to give React a try, which is semi-related to this discussion. The virtual DOM ends up meaning that A: you can test on the server, and B: You get free phantom-like rendering of your dynamic html for crawlers/etc. We'll see how well that goes. I'm also unsure how well it plays with Dart, but cleandart.github.io/react-dart/ seems promising.
I really hope this is true :-)
As of now, it is 'true' (aside from the final sentence which is just speculation). But Google could change their minds, of course. The guy in the video was commenting on current plans, not making a promise.
&gt; Also, when Google introduced Go they said that the problem it solved is the long compilation time when building massive systems. No, that was just one of the big features. Go is a systems language. Not only is it doing well at filling this niche, it is absolutely thriving. Docker is a really good example of a high profile systems-oriented Go project that is shaking up how we deploy and run applications. C/C++ *can* be used for these purposes, but you'll probably develop at a much slower pace (for systems projects) than if you were to just use Go. You can make use of most C/C++ libraries from Go, too.
You say that developing will be much faster then with C++, but I haven't really seen a good explanation why. With Dart, it is clear right from the design: js was not designed for what it is being used for today, and Dart is.
Read some of the Docker and CoreOS blog posts. There is some really good stuff there that I think you're missing. There's a slideshow on the decision to use Go for the former on there somewhere.
StageXL is awesome. Very helpful maintainer, too.
&gt; No, that was just one of the big features. No, that was a principal design requirement. That was heavily emphasized in the initial documentation and mandated many aspects of the language. 
It's just one of a number of big features. It is not the principle feature of the language. What are you arguing, here? Or are you just looking to argue for the sake of argument?
Quick compilation is nice, but I wouldn't even rate it in the top three of Go's best features. Channels and goroutines are far more important to most, aside from those with massive codebases.
It seems pretty dead. I mean, there are 6 users here right now. 
Yeah, it was kind of active when it was first created, but it hasn't remained so. Disappointing.
StageXL is awesome, though.
Likely as part of the effort to create a GAE runtime (managed VM) for Dart.
Of course that doesn't help on a server so it doesn't answer the original question. That might help you if you still have a developer still stuck on Windows, but it doesn't help in the general case. Google makes it hard as hell to find content_shell. One of my coworkers has spent more than a week looking for it. 
Nice series of articles, I just read them all.
One of the authors major points for why TypeScript isn't the answer is because `this` might mean something else depending on context. Dart, apparently, isn't the answer because they made deviations from JavaScript. So, what is the answer? What is even the question the author is trying to answer? 
I've run away screaming from Dart/WebGL and going back to C#/OpenTK. OpenTK came back to life this year, which is encouraging, and Xamarin seems to have established some actual forward progress and is in a totally different place it was post-Novell flame-out. Web for me is a non-critical platform, only nice-to-have, and I think I can get it via Unity5 eventually. What I do want is desktop (OS X/Win/Linux), mobile (iOS/Android), and console (xb1/ps4) and C# seems to be the One Ring here, while JS is sketchy at best. https://github.com/threeDart/three.dart seems a year out of date, which is really discouraging, since Typescript has a much better interop story than dart.
I think the more or less that we're starting from scratch on libraries is the main issue with going to dart. It's the main reason i haven't. We might not have an answer yet, but really I'm fine with javascript, especially for web apps.
That's a fair enough point. TypeScript, at least, resolves this concern. Interoperability is one of the primary design components of TS. Personally, I feel JavaScript falters beyond the scope of a single library. JS for a slider? Sure, why not. JS for a full-on CMS backend? I'd rather not.
yeah i havent gotten into the whole node js back end for a web app yet. That said, node has led to some great tools built in js for applications, such as grunt.
My main problem was reflections weren't quite ready for primetime, came back 6 months later and decided I can deal but I see the Polymer project still hasn't been fully ported to Dart. For something that is starting from scratch with everything, there isn't enough effort/money being put toward pushing it to a working order and way too much reliance on the community to just adopt it because 'javascript hate'. If you really want classical inheritance that much just use TypeScript, you get your classes and you don't have to give up all the libraries.
Yeah for sure. I haven't gone to typescript either, as I also fear i'd have the same issues that i did with coffeescript, which was debugging. Translating the lines of code in the browser in your head to your typescript code is another bit of overhead.
From what I saw in both TypeScript talks at Build, the majority of the outputted JavaScript is your TypeScript code with the type arguments removed. It translates almost 1:1. Anders Hejlsberg also made it a point to explain that the only code `tsc` *adds* is for `extend`, and it's all of a three-line function. http://weblogs.asp.net/dwahlin/archive/2013/01/07/extending-classes-and-interfaces-using-typescript.aspx
The complaint about being optionally typed is odd. While the language might allow incorrect types, the tooling (including dart2js and the analyzer used by the Dart Editor, WebStorm and the Spark project) provides static warnings. The warnings are standardized in the language spec, so you will get the same warnings from any spec-compliant tool. Also, checked mode, which is the default for development, enforces the type annotations at runtime. This seems to me to provide nearly all of the benefits of static typing, while letting you write in a dynamically typed style if you just leave out the type annotations. If you really want compile-time errors, then treat warnings as errors. The GWT comparison it common, but ultimately not so informative. GWT brought good tooling and static typing to the web via Java, but at the cost of a fairly annoying developer experience when it came time to run the program, and of course it forced you to use Java, which deserves most of it's reputation for being verbose. You either had a long compile, or a slow and finicky dev mode. Debugging was also difficult since you either had to debug the compiled JavaScript, or use the IDEs debugger against dev mode. With the Dart VM integrated into a special version of Chromium, the developer experience is light-years ahead of GWT. You get a fast edit/refresh cycle, plus great debugging tools, both from the Dart Editor and with the Chrome Dev Tools which have native Dart support. Dart also brings most of the tooling advantages of Java while being much, much more lightweight in terms of syntax and improves massively with features like getters, mixins, implicit interfaces, top-level variables and functions, fixed constructors, and on and on. GWT's still fairly popular (and useful for groups with lots of Java), but Dart's already showing much better community participation early on in its life. The main valid complaint seems to be JavaScript interop. Currently the dart:js library let you access JavaScript objects and functions, and publish Dart functions to javaSccript, but it's a little cumbersome. We are working very hard this year on improving interop and things should get a lot better. Once that's done, I wonder if he'll reconsider if Dart's at least _an_ answer. For us in the Dart community it already absolutely is.
&gt; but really I'm fine with javascript, especially for web apps. You might be fine but js, but user's on mobile devices will not be - js is a resource pig. Also, anyone who has to maintain your code later won't be so fine with it either. 
One of the big differences between TypeScript and Dart is that Google, in spite of the success of Android, really wants the mobile web to progress and succeed. MS has always viewed the web as the enemy and their contributions always seem intended to forestall progress and concensus. Just like with SPDY, when Google seems to be making progress, MS comes up with an alternative that is more about politics then progress.
Yes we're starting from scratch, but we're doing a great job so far, IMO, especially with the core libraries as a real foundation. That eliminates all the busy work and incompatibilities of multiple low-level libraries just to make up for JavaScript's lack of any. It also helps that the browser platform has gotten so much better that it requires less libraries just to make development bearable. dart:core, dart:async, dart:collection remove the need for, and are much better than, libraries like Backbone, and every Dart application uses them, so there's no fragmentation. dart:html is like a version of the DOM from the future where collections are really collections, async operations return Futures and Streams, and browser differences are smoothed over. The Web Components set of standards, especially Custom Elements and Shadow DOM, make the multitude of incompatible UI component frameworks in JavaScript completely unnecessary. What's left are the truly useful libraries that do something the platform shouldn't be, and those are getting filled in at a pretty good pace.
Let me put it this way... Dart is about improving web tech for the developer, and eventually for the user too (when they get the Dart VM into Chrome). The second part will be much harder to get people to accept - it's a more fundamental change - but I believe that it is necessary for the mobile web. html/js/css just aren't efficient enough. So now MS has put forth something that does the first but skips the second. This dovetails with the fact that they have no interest in seeing the mobile web succeed. I believe that dotNet is an excellent platform in general, and that MS current strategy with dotNet has a real chance of success, so it is quite natural that they just want a band-aid on web tech, not something that will allow it to compete with native proprietary platforms. I'm not claiming they are evil - I think each company is doing what make sense for them. So I don't trust MS with the web, and history supported that.
Dart isn't really getting around that problem as it compiles into JS. It can definitely help you in avoiding performance pitfalls, but the JS vm is still running it.
Yeah trying it out would definitely give it fair judgement. Coffeescript didnt change things too much, but it sometimes was enough of a difference to matter.
The idea is to include the dart VM in browsers. This is certainly a bigger and more controversial change, but it is necessary to save mobile user's batteries (if sophisticated mobile web apps are too become common).
Right, but since it's not right now, it's taking on more of a burden to learn the language and the tools around it. As supposed to using javascript which more developers are familiar with. Javascript devs are easier to find for hiring. JS is definitely something to consider when it comes to mobile apps feeling fast, however images &amp; unnecessary operations &amp; DOM are what really take up memory space in a mobile browser.
Well, Yes, I agree that js is a more practical choice right now. I also agree that using a faster and more efficient VM (Dart) instead of js, is just one piece of creating an efficient mobile app. 
I really don't feel like dart's javascript interop story is that bad. That is probably because I've experienced GWT's and COM's interop story which are both nightmares. Also, I agree. The critique about typing is crap to the highest order. The author has clearly never used dart because if he had, he would realize that dart2js fails to compile and that the dart editor/environment will fail to run when there are type problems.
I would encourage you to join the group if you're interested. It's definitely possible that we'd hold the occasional meetup in SLC if there's enough interest.
Typescript doesn't have a native vm so you're stuck with a compile step while iterating during development. This is a pain in the ass where you're used to instant ctrl-F5 as in Dartium and JS. Another feature that Typescript is missing is a checked mode for development which adds runtime type annotation checks into the compiled code. This is really helpful for catching bugs early. I imagine this is being worked on, and will get added at some point. 
nope. use go.
I see it as not trying to take the space that go now has, but the space that javascript now has. It doesn't look like they are pushing hard for server side, however, it does look like they are trying. IIRC, it is primarily because of node.js that they are trying to give dart server side functionality.
Yeah why not. You get nice type checking. It is pretty fast. They made great improvements. You can use isolates as channels. Do it.
&gt; You get nice type checking. I think you mean: you get nice "type" checking.
note: I am not the author
It has a lot of advantages to be able to use the same language (and libraries) for both the backend and the frontend, so personally I'm very interested in server side Dart, but in the end choose what works best for you.
After reading this, I had one impression: I suppose it's natural to compare Dart to things like CoffeeScript, but for me, the Dart VM makes Dart the clear winner. I also strongly prefer Dart's syntax, but when you can run your code in that VM, nothing that runs only as JS can compete.
"RangeError: 3" means you're trying to access the element at position 3 of a List with 3 or fewer items. E.g. this example will also print "RangeError: 3": foo() { var a = ['a', 'b', 'c']; return a[3]; } main() { try { foo(); } catch (e) { print(e); // RangeError: 3 } } The issue should be somewhere in that "buildView" function.
Right, so the .catchError() function catches errors from the .then() function. I thought it was going to catch errors around the HttpRequest failing. In buildView I was looping through the json object using a for loop like so: void buildView(String jsonString){ contentBlocks = JSON.decode(jsonString); DivElement wrapper = $['content-modules-wrapper']; for(int i=0; i &lt; contentBlocks.length; i++){ Element element = new Element.tag(contentBlocks[i]['module']); wrapper.children.add(element); } } Which is wrong, because .length takes the JSON string length which i think is a bit weird since I've converted it to an object.. anyway, i fixed it buy changing the function to this: void buildView(String jsonString){ contentBlocks = JSON.decode(jsonString); DivElement wrapper = $['content-modules-wrapper']; contentBlocks.forEach((block){ Element element = new Element.tag(block['module']); wrapper.children.add(element); }); } Sorry, I'm new to this and thanks for the help! Is there a way to get the number of items in a json object like I was trying to do or should you always just loop through it using forEach()?
I am, though =)
A JS replacement was actually my motivation for looking at Dart. Being one of the core developers of Python means I have no need for Dart and its VM as a standalone programming language outside the browser as I would choose Python over practically everything (and then Go when I can't).
It will be interesting to see where dart goes in regards to performance. In some ways the VM is still in its infancy.
Interesting, thanks for posting! Have you thought much about other control operators should appear in your library? For example, conditionals and loops? How does `if ("x" == console.readLine()) { console.writeLine("y"); }` appear when translated into your library's operators? Is that translation convenient? Also, is this: goWait(req.close()); }, () { HttpClientResponse res = $; ... really more convenient and/or easy to read than: req.close() .then( (res) { ... Also, you might like reading about how SmallTalk tackled control structures. I think that could translate well to promises, but strangely few have done this beyond just sequencing (`then` or `go`).
Thanks for the feedback! You can read about control flow constructs in the section "Control Flow" in the file README.md. The code req.close() .then( (res) { ... has many limitations. For instance, it can't appear in a loop because it's just a callback, no matter how you write it. Also, to be fair you should have written req.close() .then( (HttpClientResponse res) { 
True, but how does your `go([])` get used with loops? Edit: nevermind, I see now you've got loops too. Interesting!
Great write up! I am in the planning stage of a dart project of my own that will need a bunch of other javascript libraries, I have considered porting some of them entirely to dart.
I might suggest looking here https://pub.dartlang.org/packages/js It does use reflection (which may bloat up the output javascript code size), but the syntax is pretty nifty. Instead of having context[''] stuff everywhere, you simply do context.doJavascriptThing(1)
Out of curiosity, what libraries are you planning on porting? (I only ask because there a good number of ports that already exists, trying to save you time!)
I think you'll be pleasantly surprised with the dart/js interop story. Especially if you have ever dealt with the GWT interop story.
Yes please! AngularDart especially!
Sure that would be great :)
I'd highly recommend against using package:js, the costs on code size and performance are too high. We might even deprecate it at some point, once we have a viable typed-interface interop story.
Sign me up as interested, too!
That's definitely doable. Anything in particular you'd be looking at, or just a standard internal business application?
Go, go, go! By the way, I'm not sure the activity (or lack thereof) in this subreddit is very indicative of the size of the Dart community as a whole, but rather its current makeup. For now, and to my disappointment, all the action seems to take place on Stack Overflow and Google+. Don't get me wrong...I love both of those places, but I'd really like to see this subreddit kick it into gear, too.
Yes. As for me I'm an ex .net dev and aspiring node dev. Specifically: structure of app vs server, db connections SQL/Mongo, application structure with multiple modules and description of program flow, and any must have community a respected modules.
The project we are looking at using Dart / AngularDart for is an administration website for one of our mobile applications. It will need data grids and value editing, along with Google sign in integration, and integrated calls to a few outside web services. Most of the AngularDart http samples I see are just to a local json file. Would be nice to see a real call with some futures. Like, if authorized succeeds then call this service to load the user, etc. I've dabbled in making a data grid with an edit form when clicked, but it would be great to see some real examples, using a grid, especially with columns that support multi-selection (roles check box, etc)
That sounds like a good first idea. While I formulate something, take a look at [Streamy](https://github.com/google/streamy-dart), which is a pretty good RPC library for Dart and works well with Angular.
Would be curious to hear your opinions on Dart given that you work on it 40 hours a week!
I'd be interested in that. 
Nice framework, I like the simplicity of it and the fact that it's in Dart. I never heard of Flask before, maybe because i find Python's syntax weird, but damn, when i looked at how many github stars it has. [Reaction](https://www.youtube.com/watch?v=SiMHTK15Pik) 
Unfortunately, the title is pretty misleading.
Please do! Especially Dart and Polymer (web components).
Here's another Dart related session: https://www.google.com/events/io/schedule/session/3888155e-32b6-e311-8491-00155d5066d7 Talks about The Chrome Dev Editor, which is presumably the same editor that has been in public alpha for a while. 
It seems like the Dart related sessions won't be streamed live, but I still think this I/O will be great and we will see a lot of new stuff for Dart. 
I have never got lucky with phpstorm, so i think you should try out webstorm or dart editor. They have built in support for Dart and so it's easier to use it. If Dart Editor fails too, then try out the dev version of it.
Unfortunately the IntelliJ-suite of editors, while excellent, are not very useful for Dart right now. I recommend using Dart Editor for the time being.
I agree. I won't touch Eclipse for anything, but for Dart it ends up being worth it just to actually get IDE support. Plus Dart Editor actually strips out 95%+ of the bloat of Eclipse (it's a custom build, not a fork).
In my AP Comp Sci, we were supposed to make a project, and everyone was doing Java games, but I wanted to learning something "bleeding edge" and at first, I was going to do Golang since I know that pretty well, but I think it was annoying for web develop, so I saw dart and gave it a shot! Also, kllrshrk is my twitter name, for the explanation Please tell me any annoyances or look at my code if you want and tell me how terrible my code is and how I should learn to improve it. I would greatly appreciate it. The puzzle has probably changed if you've been working on it Here's the [codereview](http://codereview.stackexchange.com/questions/51778/a-sudoku-game-made-from-googles-dart-language) if you want to help!
Which resources did you use to learn the language? I'm interested in starting it when I'm done getting my python basics down, and some resources would be nice. :) thanks for your time, and nice job on the game! 
There isn't actually any resources if I'm honest. Stackoverflow will be such little use as of right now, but it doesn't mean it's hard to learn! I would make sure you have experience with maybe a language like Java or C like language because the syntax is close to the same. And if you can read Javascript by just how it looks, that'll help when you google things and try to convert it to Dart. It's not the easiest of things, and I can't wait til the Dart VM is implemented in modern browsers, so it becomes more picked up https://www.dartlang.org/ has all the resources you'd need!
Thanks! I have some Java experience, so hopefully it'll work out! 
and it loads fast too! Which can be a problem for dart apps. 
Dart as a language should work fine on IE/Safari/Firefox, so I'd say something must be up with your implementation :) What exactly happens?
IE doesn't seem to load the JS. The Safari looks more like a CSS problem, and Firefox has doesn't really work with my HTML hack with the onkeypress hack to limit it to one character. Of course, this is all new to me, and I'll be working on a more proper rewrite :-) And for all of them, if you hit enter, the content is no longer editable
The name of the JS file should be *sudoku.dart.js*, not *sudoku.js*. There is no need to include this yourself via a script tag. *dart.js* automatically adds the matching *whatever.dart.js* file if Dart isn't supported.
Ooh, thanks!
Obviously I disagree. =) And I really disagree if you claim Python is "slower than hell" and you're using PyPy.
Dart works pretty well. I've had a few annoying(re-occuring) bugs with the Dart Editor and debugging tools but nothing too show stopping.
Client: Perfectly viable choice if you don't care for old versions of IE. Server: Works fine, but it's not very mature yet. The frameworks are fairly young and your favorite database might not be supported yet. However, some of the server-related stuff got faster with 1.3. Also, 1.4's experimental ServerSocket references which can be shared across isolates should help quite a bit.
I've been working with Dart most of my time for about a year now, and I have nothing but praise for it, sure it is young and some resources are a bit outdated. But even though Dart is pretty young I find the debugging experience superior to JavaScript. It took me a long time to grok JavaScript on my own, and I wish I could have started out with Dart. Which to me syntax-wise is the thought through version of what JavaScript should be nowadays. As for difficult problems, even the Google guys working on Dart are very helpful towards the community so you get proper feedback/help if you ask for it in a thoughtful manner.
I'm just learning web development myself with dart. It's worked well for me so far. The "problems" that occur aren't actual problems so much as incompletions or ommisions. In my experience, everything that is out works well, and I have yet to encounter a single instance of any of the Dart SDK doing anything it shouldn't. Instead, there are a few features such as reflection and automatic serialization that are not yet avalable in the browser, and the documentation is mostly upfront about this. My favorite thing about dart as opposed to javascript is that (practically) everything is built in. Networking, package managment, Html selectors/modifiers, 3d graphics, and the whole system is easy to understand and consistent.
There is a [Dart library](http://pub.dartlang.org/packages/sqljocky) for interacting with ~~SQL~~ MySQL on the server.
My favorite thing about Dart is the idea of checking types that don't exist. Others laugh at it, but I think it's brilliant.
Thanks all for the info. I'll go with Dart.
Dart is dropping support for MSIE 9 this month! Make sure a large portion of your customers aren't still using it or lower versions before you proceed. The chain of restaurants I work for has a locations in buildings owned by Microsoft so we have a lot of customers that wouldn't have been able to use our site had we decided to finish the project we started with Dart. I was sad to see us have to give-up on it, because we made more progress in three months with Dart than we did in over three years with JavaScript. Dart is that awesome. Edited to add link: http://news.dartlang.org/2014/05/dart-support-for-internet-explorer.html 
Thanks for that - this is a personal project and I think I can live with not supporting IE 9.
&gt;there are a few features such as reflection and automatic serialization that are not yet avalable in the browser Reflection is definitely available in the browser.
Could you elaborate? According to ["Reflection in Dart with mirrors: an Introduction"](https://www.dartlang.org/articles/reflection-with-mirrors/), the text right after caveat 1: &gt; At this time, only part of the planned API has been realized. The part that exists deals with **introspection,** the ability of a program to discover and use its own structure. The introspection API has been largely implemented on the Dart VM. **In dart2js, a similar implementation is under development, but is still incomplete.** This paragraph leads me to believe that reflection is not avalable in the browser.
I'd say totally. Dart, even though being "young" is a really nice language, (clean very clean), the community is full of ideas, creativity. I think that Dart, will boost your productivy compared to JS (don't get me wrong I love JS) and in large code bases it clearly makes it easier to maintain or refactor. I've been working with Dart for about 2 years, but that's just my 2 cents 
It may be easier for you to elaborate on what specifically isn't working... I know angular DI relies heavily on mirrors (for development) and they work when compiled to JS.
&gt; Dart Editor I've been using IntelliJ IDEA. It's mostly pretty great.
I haven't written any reflective code yet, I was going to fgure out what features were avalable and then learn about how to use them. In my search to find out, I found [This post](http://blog.sethladd.com/2014/01/how-to-shrink-size-of-your-dart-app.html) by Seth Ladd, where he talks about the effect of reflection on js compilation. In particular, he says the @MirrorsUsed annotation is used by dart2js to enable tree shaking at compile time, which means that reflection is avalable in the browser. This also makes sense because all of the sources that say reflection doesn't work are from 2012 or 2013, but Seth's blog post is from January of this year. So... I stand corrected. Your statement and Seth's blog post are the only sources that say so, so hopefully other resources will be updated soon enough.
Yeah, there is definitely a lot of outdated material out there which can be confusing, but the official docs are really good, and the dart tag on SO is pretty active. WRT JSON serialization, a mechanism exists to serialialize/deserialize map and array structures to/from JSON. See https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/dart-convert.
Awesome :) I'm on the Dart team, and we're on the public mailing lists and G+ communities pretty constantly. Feel free to ask questions or just start general discussion there. We also have a good StackOverflow tag going. Happy Darting!
DartRocket give these: * Gives a basic starting point of a game. For example the Game class initialize a lot of thing for you to use(Stage, ResourceManager etcc.) * State Machine, which help you to break down your game into states. For example: loading,menu,level1,...leveln,end * States are really easy to use and has a really good example * It has some really good basic game objects: Sprite,Sound,Button,Background (although the background still needs some work) * Sprite container called Group, which only goal is to store Sprites and behaves like a List * Space Invader example, which i try to make really simple My plan for the near future is to add more good stuff to it. For example: GameObjectFactory, Arcade Physics and to make it cocoonjs compatible.
Why doesn't Google do that much to promote Dart?
So... any news on these tutorials?
How so? We do quite a bit: speak at conferences, hold hackathons, host and participate in online communities, help 3rd parties with their own presentations... I'm sure we can do more, but it's not like we don't promote.
Yeah, filed a bug. Very frustrating. Don't know if I can trust the language. :-( **EDIT:** Filed for Firefox, too. Not clear at the moment if this is a Dart bug or Firefox bug.
What is the Bug? Whitch example did you tryed?
https://www.dartlang.org/codelabs/darrrt/ Typing something in the input field gives errors on the console. Nothing appears in the badge. Firefox 31 Beta. Mac OS X 10.9.3 `TypeError: J.getInterceptor$x(...).get$target is not a function piratebadge.dart.js:6588` Dart 1.4.2. Tested with the code of step 6 of the tutorial.
hmm, works fine in firefox 30 on windows 8 x64.
Me too, Aurora channel on OSX.
Can you give me the version of Firefox and exact version of the SDK? I'd like to look into this. Thanks!
The app code for https://angulardart.org/demo/ has 1024 KB. `examples.dart.js` 
I was able to reproduce the problem on (moz 31.0, Mac OS 10.9.3). I tried regenerating the samples, but the problem remains. In case you want to try it yourself, the new version is staged at: https://newjs-dot-dart-lang.appspot.com/codelabs/darrrt/ The CL, in case you're curious: https://chromiumcodereview.appspot.com/339243004/ **EDIT**: I filed a bug. https://code.google.com/p/dart/issues/detail?id=19509
Do you by any chance have extra plugins etc in firefox? Have you tried opening it using a private browsing tab? (cmd + shift + p I believe) edit: ok, I just moved to the beta channel on windows 7 with my work computer. I see the issue happening now in both the privacy tab and the regular one. Looks like a bug in firefox beta (given that the versions before and after are bugging out but everything else does).
Looks like a bug in firefox 31 beta.
It's not minified or even gzipped. It was also generated by dart2js 1.2.0-dev.4.0. It should be around 200kB with more recent versions of everything.
You're using a Beta version of Firefox, but blaming Dart.
Bug is here: https://code.google.com/p/dart/issues/detail?id=19489
&gt;Don't know if I can trust the language. :-( ^ This is a ridiculous statement, given that you were using an unreleased browser, when the same browser's stable release doesn't have the bug. That's why I commented. 
It's currently unclear if the bug is in Firefox or Dart(2js). Just because it only manifests in FF31 doesn't mean Dart is bug free in this regard. A bug is filed for both of them. People on both sides are looking into it. And before posting the stupid meme (sorry for it, was a bit frustrated) I've read about this (unresolved) bug: [dart2js: compiled html apps are not forward compatible: new browsers can break deployed apps](https://code.google.com/p/dart/issues/detail?id=13285)
And perhaps here: https://code.google.com/p/dart/issues/detail?id=13285 Quote: *We must have a way to deploy apps that is not going to need recompilation whenever a browser vendor releases a new version...*
1.2.0 is too old for Dart apps. You need to recompile and deploy after every minor update or it could break in some browsers. See https://code.google.com/p/dart/issues/detail?id=13285
Wow thanks!
&gt; Looks like a bug in firefox 31 beta Nope. At the moment it looks like a Dart bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1027011#c10
It seems to be a Dart bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1027011#c10 
Just follow the style guide. You don't need getters and setters since Dart has real properties: https://www.dartlang.org/articles/style-guide/ As it states: "AVOID wrapping fields in getters and setters just to be safe." 
Nope, use camelCase for properties too. Since Dart has closures and tear-off methods, a method is can be used like a function-valued property, so the difference in naming style breaks down.
Stick with the [official code conventions](https://www.dartlang.org/articles/style-guide/). Stick with Java's if you write Java. Stick with C#'s if you write C#. Stick with Dart's if you write Dart. If you do not follow the most popular conventions, you'll have a harder time working with other people's code and others will have a harder time working with your code. Also, third party libraries will of course not follow your conventions. Naturally, the result will be very inconsistent. I prefer tabs (tab-size: 4) over spaces. However, when I write Dart, I use 2 spaces, because that's what everyone else does. When I write Dart/Java/JS, I use 1TBS. When I write C#, I use the Allman style. I also wrote quite a bit of C in Whitesmiths style, because that was the style we were using. Personally, I prefer 1TBS. Anyhow, personal style preferences are secondary. Consistency is way more important.
i think this is what you are looking for http://pub.dartlang.org/packages/google_games_v1_api
Author here - sorry for the shameless self promotion (I didn't see a rule against it in the subreddit). Feel free to pm me questions about the book.
I'll take a look at it. Thanks.
That's good to know, thank you. And yes, we will see want happens at Google IO. :)
FYI, the exit status from dartanalyzer is screwed-up. It returns 3 for certain valid files and now also returns an error status if you run it on a file that is a part of a library. Don't upgrade if you depend on dartanalyzer working correctly. 
I don't think you can do monkey patching. According to this page: https://gist.github.com/spion/7999149 it isn't supported, and I've seen that mentioned in several other places. 
&gt; Or would I have to do something like, create a pub transformer that generates these classes beforehand? Yes, that's probably the best way to approach this.
https://code.google.com/p/dart/issues/detail?id=13285
Well the way I see it, the situation is this: **Pros:** * Dart is available under a permissive open source license, so it can survive as long as someone is interested in maintaining it * Google is putting a lot of resources into it * Large dev team that is very active in the community * Compiles to JavaScript, which is widely implemented, and not going away * Decently large community considering its age as a language **Cons** * Small community (due to being a young language), but see above * Unlikely to have a native VM in any browser other than Google Chrome * Lots of negativity from several extremely vocal groups (language feature snobs, JavaScript fanatics, anti-Google people, etc.) that dampens enthusiasm around it * Lots of competition in the compiles-to-JavaScript language space, such as CoffeeScript, TypeScript, ClojureScript, Scala.js, Emscripten, etc. I'm still quite optimistic about Dart. We're starting to see some Google dog-fooding, such as the excellent [Chrome Dev Editor](https://github.com/dart-lang/chromedeveditor), and that's just what is visible to those of us outside of Google's firewall. I can only imagine the number of internal Google apps that are being written in Dart. The community also feels like it is growing at healthy, steady pace. I have also been extremely impressed by the members of the dev team that I have interacted with. I say go for it. There is an excellent chance that Dart will be with us for a long time.
pros: not javascript cons: buggy, too conservative, and subject to change, too dependent on google land .. I most likely wont even think of using dart seriously until it is at least a first class citizen on android along with java. Polymer (yes not dart but currently being heavily pushed along with dart)gives me the creeps like googlexaml or something.
&gt; first class citizen on android You should read: http://news.dartlang.org/2014/06/dart-15-makes-it-easier-to-develop-for.html You can now run Dartium and debug Dart on Android devices. I just haven't tested it because I don't know anyone with an Android phone. 
Dartium makes it a 2nd class citizen -- full citizenship is Dart code in a WebView running on the Android device indistinguishable from a normal app.
Dart team member here. Dart's sticking around. At Google we're building very large, very important applications in Dart, and it's definitely proving it's worth for developer productivity. We're very committed to it, as a client-side web application language, and expanding it out to other environments like servers and general scripting.
&gt; subject to change The language has been stable since 1.0. The core libraries have also been stable for quite a while. The language will be expanded in the future, but there won't be any breaking changes.
It is a huge risk. See this bug: https://code.google.com/p/dart/issues/detail?id=13285
See https://code.google.com/p/dart/issues/detail?id=19489#c12 &gt; … we have to backport it to 1.5 stable and get the word out to **recompile affected apps** …
https://code.google.com/p/dart/issues/detail?id=13285#c23 &gt; … It is essential that we test against dev versions of supported browsers and we need to treat those breakages as critical bugs. We have to fix those bugs ahead of the vendor's stable release. … 
https://code.google.com/p/dart/issues/detail?id=13285#c23 &gt; … It is essential that we test against dev versions of supported browsers and we need to treat those breakages as critical bugs. We have to fix those bugs ahead of the vendor's stable release. … 
And you would have to wait at least 3 years until enough devices have this version of Android installed. Android isn't a good place if you want new features and technologies for developers.
Unrelated to the language itself. This is the language: https://www.dartlang.org/docs/spec/
It still isn't a language issue. It's a Dart2JS issue. That's why it's tagged as such.
I have noticed it on the Chrome Store this morning and tried it out with a hello world example and it truly works, and this is only on the Chrome Beta build.
&gt; cons: buggy, Do you have specific bugs in mind or have encountered any (and of course filed issues for them) ? 
I hope this becomes more than just a text editor with syntax highlighting and file organization. One of the reasons I use Java (and more recently, Dart) is that the tools work *for* me. I make mistakes, and I like it when my IDE points them out immediately. I like that the editor has a semantic understanding of what's going on. If I just wanted a pretty text editor, I'd just open an SSH session and use Vim. 
As if this could never be addressed? 
They released a 1.0 without addressing it. And one of the currently proposed solutions is to host a JavaScript file at Google that every App should include. Next month everybody needs to recompile their Dart app when Firefox 31 gets released. If there is a fix for the FF31 bug and it gets backported to 1.5.
I don't see a problem in using a CDN form Google. Recompiling a Dart app is like clicking on a button and if you use CI, then it became even less of a problem. 
Yes, but it is open source. Google Web Toolkit, for example, still has a vibrant community made up of several diverse corporate and individual contributors.
Ok friend, I get it. It was still silly to say you didn't know if you could trust the language due to a bug that was only relevant to a single browser's beta version.
It has a dart static analyzer built in already so it does certainly look like this going to be more than a text editor.
I love in Columbus! When's it going to be and where? Is there an age limit? 
hot damn you guys are moving fast. The debian package and the reduced memory footprint (for the editor) are much appreciated. (EDIT: where exactly is the debian package? I don't see it on the download page or in the repositories... oh well I still got it)
I think useful languages are designed around particular use-case assumptions, and languages that work best for those assumed use cases will last as long as the assumptions are valid. With dart, the assumption is that people will be writing dynamic web apps that share code between the client and browser, need to interface with standard web technologies, have a type system/editor that supports/helps with it, and fully supports both object-oriented and functional techniques. None of the other js frameworks or cross-compiling languages can do that, so I think it will last until someone comes along with a major new idea that either makes dart or the web obsolete.
Misleading title. It's always worked on the server. It just now is being added to App Engine.
You certainly did at Google IO! It did convince me to investigate but i must say that I'm a little saddened that Traceur doesn't get as much love. Outside of the VM benefits, I dont see that much gained with Dart over ES6, at least from a language point of view. Time will tell. I will be using both. 
yay! 
I have a question, I don't know why I haven't thought of it before: What is the benefit of developing competing implementations of dart? I mean, technically we have two implementations (the VM and dart2js) but... they're both open source, they're both cross-platform... And if they work... do we really need other implementations?
It's more than just competing implementations. I remember Gilad mentioning that Dart was designed to be analyzed by third party code analyzers. That's intractable without an objective definition of the language. The implementation is unsuitable as it continues to be improved regularly.
This sounds like a job for a preprocessor... unless it really really needs to be at runtime. In that case, I would use a map.
I will be working on this web app, and will ask some colleagues to help me build it. I'm thinking about getting this book for them. I have a few questions: When people with no programming experience reviewed the book, what did they say? Were they asked to write any code? If so, do you know if it was good?
Another question: Are the examples recent? Or at least 1.3+?
I'm guessing that they were hoping to have this finalized and be able to announce it at IO.
The Dart lib is at http://pub.dartlang.org/packages/appengine, and it seems it supports Datastore, memcached and more! More at: https://www.dartlang.org/cloud/
I've [got a meetup](http://www.meetup.com/Utah-Valley-Dartisans-Dart-Programming-Meetup/) I recently started in Utah, and it's been pretty rough-going so far. There isn't really a Dart community here as of yet, so my meetup isn't so much a bunch of Dartisans meeting up (as I intended)...it's been more about me trying to convert people to the cause. This means I have to solicit pretty aggressively to produce a reasonable turnout. It also means that I'm the lone presenter. It's early yet, so I'm hoping I can get some traction as time goes on, but as I said, it's been rough so far. :)
Are any efforts being made for native like experiences on Android when apps are written in Dart?
Companies such as Sony (with the Playstation 4 UI) and Netflix are using Dart, so whatever risk-assessment they've done didn't ring enough alarm bells. I've been using Dart exclusively for a few years now, and of all the languages I've used extensively (15 or so of them), it's my favorite. If JavaScript remains the only viable choice for web dev, I may have to abandon web dev. :)
Awesome stuff!
Thanks - didn't know netflix used dart.
Make the game core into a library and import it into both projects, just as you would any other shared library.
Easier said than done because if you need anything in the library from either dart:io or dart:html, then using the library in both is no longer allowed.
Sounds like a job for the Strategy pattern. Factor out any I/O or other environment-dependent operations into a common interface, then pass a concrete implementation of that to the library at run time.
Okay, that works and runs, but the game core library can't load any libraries itself, including dart:core. Do I need a main() function? Sorry, I'm not really grokking libraries. edit: never mind, works now! thanks
In light of [recent events](https://medium.com/code-adventures/farewell-node-js-4ba9e7f3e52b) I'd be curious to see some comparisons of Dart to Go. For example Go is often criticized for its lack of generics, which Dart has. OTOH, Dart doesn't have as rich a set of numeric types as Go from what I've seen. People seem to really like goroutines, whereas Dart has isolates and will supposedly soon have async / await capabilities, which many people wish JS had. I'm not an expert on either language so it would be interesting to see an unbiased comparison.
It does it by default! If you include the src in the HTML file, anything in the init(?) class will run. Haven't worked with dart in a while. That may not be the exact name. 
Just include this in your html &lt;script type="application/dart" src="mydartfile.dart"&gt;&lt;/script&gt; It will run whatever is in main()
Fuuuuuckkk. I have that. That means my problem is something else... thanks anyways. I appreciate your time.
Have you also included the /browser/dart.js ? Look at the example here: https://www.dartlang.org/docs/tutorials/connect-dart-html/#about-html-code
Chromium doesn't run Dart. It has to be [Dartium](https://www.dartlang.org/tools/dartium/). Logo is the same but the internals are different and it's started with some flags. 
I learnt the basics of Dart by following the documentation that Google have [provided for us](https://www.dartlang.org/codelabs/darrrt/). I consider it to be actually a very comprehensive start to what the language offers. Unfortunately due to low adoption by the browser developers (in terms of supporting Dart applications) there is no real reason for developers to invest heavily in the language yet. I expect this to change once Google officially supports Dart in the Chrome browser and Mozilla gets on board too, and then you'll see more community made resources. The good news is that the [packages](https://pub.dartlang.org/) that are out there are quite simple and therefore quite easy to pick up conventions, style and tricks. Eventually this will change and the ecosystem will change into more complex packages that do lots of 'magic', but for now it's small and simple for the majority.
"Dart for Absolute Beginners" is the latest book to come out, so it's likely the most up-to-date. However, as the title implies, it's aimed at people with little or no programming experience. I picked up "Learning Dart" some time ago and found it to be pretty good. Covers the 1.0 version of the language, and covers a lot of the ecosystem as well. 
Thank you, will take a look at Learning Dart.
I'll go through the basic tutorials this weekend, thank you.
Dart compiles to JavaScript, so browser support for the language is actually pretty good. CoffeeScript doesn't run in any browsers but is considered a pretty powerful and popular language. It also has to compile to JavaScript just like Dart.
plus getting Dart onto AppEngine is a pretty big evolution . . .
D2js is good but it hasn't overtaken v8 benchmarks as of yet so there is no reason for javascript developers to switch just yet. CS is a bit different so I'm not quite sure why you're mentioning it - it's a convenience language for JS to make development faster, it does not have its own set of benchmarks as it can only be compiled to JS.
It really depends on your priorities. If your priority is performance, then I wouldn't recommend Dart (2js). But if the structured programming and powerful toolset is valuable to you, then I'd recommend Dart, especially if you're coming from a Java/C# background. The current performance of Dart2JS is still fast enough to accomplish a vast amount of projects without worry. As far as CoffeeScript: For a developer trying to create native JavaScript that works across browsers, it's possible to look at both CoffeeScript and Dart as possible alternative languages. Though Dart was designed with a Native VM in mind, it was also designed to compile to JavaScipt, just like CoffeeScript.
That is perfectly normal as far as I can tell.. I get that warning too and have no problems.
Not sure what you mean about being asked to write any code? Of course you will write code throughout the book - the style is in the vein of Zed Shaw's Learn Python the Hard Way in that it uses a lot of example programs. But speaking in terms of reviews of people who I did not know previously who read the book (not friends or family or colleagues) I have received 5 good reviews and 1 bad review. So take that as you will. Sorry for the late reply.
All of the examples are compatible with Dart 1.5 (the most recent version). If the examples become incompatible with a newer version of Dart, I will post updated source code on the GitHub site: https://github.com/davecom/Dart-for-Absolute-Beginners Again, sorry for the late reply.
Yeah, Dart for Absolute Beginners literally came out 2 weeks ago (author here) and the Kindle edition is dropping July 15th. If your PHP and JavaScript experience is extensive, then yeah it's probably not for you. If it's only rudimentary, then it's probably a good fit. All of the source code is compatible with Dart 1.5.
Thank you, just got it from apress. Cover some basics of programming that I already know, but seems a very nice starting point. If I found it to beginner maybe I'll pass it to my wife who's beginning her steps in programming, although she was thinking to start with python, but Dart seems a good starting point and your book seems fitted for beginners. Thanks for your work.
Just an FYI, the Kindle edition has now launched on Amazon in addition to the paperback.
Looks like you may be constructing your OptionElement wrong. Here's how I do it: querySelector("#testHere").append(new OptionElement(data : 'TestSucceeded', value : 'test1', selected : false))
Well, let me ask this. Is Dart going to survive? Promotion would mean trying to get everyone to use it (at Google, even). Perhaps find a way to make high schools teach Dart, etc.
But then now, is it going to be re-written in Dart? I would love that such page were in Dart. Besides, it would be a great example to create a web app in Dart
Those differences are small IMO, compared to the fact that Dart was designed to be an efficient browser based VM, and to map well to js for browsers that don't support it natively. So, Dart has a huge leg up as a client side language, and will similarly have an advantage for those that want to use the same language on client and server (the motivation for node, I believe). Go, on the other hand, is better suited to systems development and for the development of massive systems (one of its original primary design goals). But I don't think that describes node.js, so Go isn't really a replacement for node.
To the degree that Dart is successful as a client side language, it would also make an excellent replacement for Node.js. Really, js was not designed for its current usage of client or server. People like it because it is universal, and they use node.js cause they like using the same language on both ends, but few argue that it is actually a good language or well suited to either task.
Yes, we plan to rewrite it in Dart once the Dart AppEngine support is a little further along.
With a limited amount of experience, I would say it is quite pleasant to develop a server running on Dart VM. Its Future/Stream based APIs help me write concise yet safe asynchronous code, compared to node.js which is geared toward the callback hell. [A recent benchmark](http://www.techempower.com/benchmarks/#section=data-r9&amp;hw=peak&amp;test=query) also shows that Dart VM based servers can be as performant as those based on any other languages. 
At some point using a "package" doesn't make sense. Be a good programmer and write a method to do the regex replace. This is not difficult.
To be fair, if you look at the source it does have a pretty extensive list of substitutions for non-standard characters, which might be better maintained as part of a package rather than as a per project thing. That said, this still doesn't really do all that much.
A what? What is a slug?
&gt; I'm wondering if anyone's investigated using this as a hack to run a Dart VM (even with the inherent performance issues) on platforms like iOS that prevent you from running a JIT. Totally. What you're looking at is an *emulator*, an interpreter for a language that's normally implemented in hardware. However, Dart already cross compiles to an optimizing JIT -- JavaScript. If iOS provides access to a JIT compiled JavaScript, you're probably better off targetting that than any emulated instruction set.
I interviewed at the mothership earlier this year and asked that question. I was probably talking to the wrong people so couldn't get a real answer, but my feeling is "they" don't want Dart's program risk to infect Chrome. So "they" forked off Dartium to give the Dart team a browser environment. One thing about talking about companies is that you have to identify *who* exactly is making the decisions and doing the actions. To ask "why doesn't google introduce Dart into chrome" you are really asking "why doesn't the Chrome team integrate Dart?" and the answer to that I guess is that they've got other stuff on their plate. Getting AppEngine support for Dart will be nice at least.
Dartium is apparently a bit of a hack and to actually integrate Dart into Chrome would need more work. One part of that work is [Oilpan](https://docs.google.com/a/google.com/document/d/1y7_0ni0E_kxvrah-QtnreMlzCDKN3QP4BN1Aw7eSLfY/edit?pli=1#heading=h.kdaozmfj2412) that adds a garbage collector to Blink (Chrome's rendering engine). Once that is done it should be possible to properly integrate Dart. That said, it's still up to the Chrome team to decide if they want to do that. I'm not sure what the current thoughts are. In the past I don't think the team had decided on this yet. At least they hadn't in 2013 [when Blink was announced](https://www.youtube.com/watch?v=TlJob8K_OwE#t=17m26s).
I believe that is the ultimate plan, but they have to move carefully on this. Adding it now would make Chrome a little bigger, with little gain to the average end-user since Dart is so new. I predict that they will start by adding it to Chrome for Android this fall. Mobile is where javascript is the most wanting - Dart was designed to be efficient for mobile. Dart is what is needed for chromeapps to really run efficiently on Android. 
Of all the reasons I can think of, I think that "making chrome bigger" is no brainer. We can see in Dartium that it's not the case, and your reasoning with "little advantage to the average user" is wrong, since Chrome comes with developer tools which are HUGE. if it was a concern, the Chrome team would detach the developer tools and offered it as a standalone plugin, or in a special version of Chrome. But the gain in having Dart in the browser is huge - sites that have dart, as well as it's compiled JS, will run significantly faster for Chrome users...
If you're going to make a CASE tool, why make it specific to Dart?
I like Dart so I wanted to try to help this new language by doing my part of the job. I knew that I could build some tooling for Dart so I started to work on this a couple months ago. And since the official Dart Editor is already based on Eclipse, I know that it will be quite easy to interact with it.
The Dart VM is being integrated into Chrome. It's right there on Chrome's public dashboard: http://www.chromestatus.com/features/6682831673622528
I'd feel much better about this if it was built as a plugin to Dart Editor directly though.
tldr: it's quite complex :) I completely understand your point but let me explain why it is not in the Dart Editor, why things are the way they are, why some things won't change and why there is room for improvement. The Dart Editor is built on top of the Eclipse platform and it contains the Dart plugin for Eclipse (I am not sure that it is an "official" name). I am also including this Dart plugin for Eclipse in Dart Designer, it provides all the tooling for Dart developers (editors, menus, views, etc). Since nobody is communicating about this plugin but only about the "Dart Editor", I am saying, as a shortcut, that I am including the Dart Editor in Dart Designer but it is a bit untrue. I am always integrating the latest available release of the Dart plugin for Eclipse. If you take a classic version of the latest release of Eclipse and if you install the Dart plugin for Eclipse, you will **not** obtain the Dart Editor. The Dart Editor contains a specific branding (it's not written Eclipse anywhere anymore) but the Dart Designer has also its specific branding. Truth to be told, this difference in branding (icon, splashscreen, about page, etc) between the Dart Editor and the Dart Designer is not very interesting for the end users. On the other side, the Dart Editor also contains two "features" for Dart developers that Dart Designer does not have: * The Dart Editor team has tried to make it as small as possible. Downloading a 100MB application to start coding is believed to be a dealbreaker for the Dart Editor development team. Given the fact that the end users are web developers more used to notepad++, sublime, atom or brackets which are very light in comparison, I fully agree with them. The Dart Editor cannot work if it stays as heavy as the default Eclipse IDE. * The Dart Editor not only removes tons of elements from the Eclipse IDE, it also hides a huge number of additional elements (menus, actions, contextual menus, wizards, toolbar, dialog, view, etc) and it provides an alternate behavior of some existing elements. As an example, if you create a project in Dart Editor, you won't have an Eclipse's ".project" file in your project. If you try to do it with Dart Designer or with Eclipse + the Dart plugin for Eclipse, the ".project" file will be there. They have created a system which store those ".project" files somewhere else. It is not part of the Dart plugin for Eclipse because there is no need to mess with Eclipse's default behavior for users who would install the Dart plugin for Eclipse in a regular Eclipse. I have seen some members of the Dart Editor development team (Eric Clayberg and Dan Rubel) during [EclipseCon US this year](https://www.eclipsecon.org/na2014/session/developing-dart-editor) and the work that they have done to reduce the size of the Eclipse platform and to remove all the elements that are useless for a Dart developer should not be underestimated. It is something supported by the Eclipse platform but it is tricky and complex to get right. In order to provide graphical tooling I need some dependencies (I am using Sirius which is using GMF which is using EMF etc...). Those dependencies come with a cost. Right now, Dart Designer has a size of 112MB. I am only providing with this, the Eclipse platform, the Dart plugin for Eclipse, Sirius and all its dependencies, the Dart Designer plugin and [EMF compare](https://www.eclipse.org/emf/compare/) to compare ".dartspec" files with a great interface ([details](https://github.com/dartdesigner/Dart-Designer/blob/master/releng/org.obeonetwork.dsl.dart.target/dartdesigner-luna.targetplatform)). By doing the same work as the Dart Editor development team, I may be able to lower the size of Dart Designer to 100MB maybe 80MB if I am very lucky but I don't see how I could go further than that (since I want to provide additional features in the future, I know that I will need additional dependencies so this number may never go down). It also has an impact on the launching speed of the application. I will **never** be able to be as small or as fast (to launch) as the Dart Editor. Regarding the second point, I have an [opened bug](https://github.com/dartdesigner/Dart-Designer/issues/7) for this. It is a bit tricky to do but it's not impossible, I could remove most of the useless menus that are available in the user interface. I don't think that it could be possible to have exactly the same user interface as the Dart Editor because some features have been modified in the Dart Editor (like the location of the files ".project") and it could create some issues with some of the dependencies that I am using (I don't know how Sirius would react). In order to be able to have exactly the same user interface as the Dart Editor I would need to ensure that my plugins and all their dependencies are not confused by any custom behavior of the Dart Editor. Finally, I don't see how my project could ever join the Dart Editor. The Dart Editor project may be open source but since their goal is to create a lightweight and fast editor for Dart developers, I don't see how they would accept a contribution which could create compatibility problems and multiply by three or four the size of their product. They are building a small and fast tooling that you should be launching and using all the time, I am building a (rather) large tool that you should use when you want to document or specify what you are building. One could even say that Dart Designer is aimed at software architects while Dart Editor is aimed at software developers.
As /u/Hencq already mentioned, Dartium was somewhat crudely hacked together. As a development tool it's alright, but it's not quite the quality you want for a piece of software with like a billion users. There are also a bunch of requirements which need to be met before this can happen: * The language itself needs to stabilize. This happened with 1.0. * The language needs to be standardized. This happened in July with TC52. * The dev tools need to support it. This seems to work these days. * Having more than one VM in the browser does make a few details a bit more hairy. Oilpan (a garbage collected heap for the DOM) tries to address this. I'm not quite sure about the exact status of this though. Work on it started over a year ago. I think it's mostly done now. There are probably a few more loose ends which need to be addressed. But, as you can see, it's clearly getting there.
Is this pretty much an inline callback? I'm not 100% clear from the review.
Now that dart is an ecma standard its in the realm of possibility, but its still not any kind of priority. Adding another language to chrome is much larger than it sounds. It doubles the amount of possible security, speed, and battery life issues. And should not be taken lightly. Datr2js runs well enough that its not even close to worth it yet.
this should help! https://groups.google.com/a/dartlang.org/forum/#!msg/misc/xFj2kuiC0fs/qqt_kD2ZSIQJ
Very cool! I see a couple places where you're doing static T fromJson(...) These would be good candidates for factory constructors, ie factory Hook.fromJson(...) It just happens to be more idiomatic dart. I instantiating the class from json would use the new operator new Hook.fromJson(...) 
Shame he gave up, it was pretty cool watching him put together a 3D engine. On the plus side he inspired me to start my own game, and allowed me to focus on it more. It won't be near done in time to submit, but still a fun exercise!
I would do that, but I pass it as a function to stuff, so I would rather not :)
Yes, there could be some useful sidebar info. We'd have to ask /u/knome and /u/corvette about that.
Sadly, this subreddit doesn't seem to be too enthusiastically maintained.
I've noticed that most of the Dart action is on Google+ these days.
Well, Dart has more in common with C# than with Java apart from the small syntactic difference of extends, implements and the different style guide. Most important difference is the functional programming part which totally lacks in Java (although Java 8 has it). 
Google [once considered](http://www.fosspatents.com/2011/07/judge-orders-overhaul-of-oracles.html?m=1) making C# the basis of Android instead of Java. C# is a well-designed modern programming language which was developed as an alternative to Java, borrowing its strengths and fixing many of its weaknesses. Why shouldn't Google take inspiration from it? It would be pretty narrow-minded to turn a blind eye just because it was developed by a major competitor.
Definitely more C# DNA than Java DNA in dart.
Dart has definitely been influenced by C#. In fact, one of the biggest features on the horizon is async/await. &gt;C# is (mainly) used by Microsoft, not something Google would look up to I don't think any of the extremely intelligent people designing these languages engage in mindless brand allegiance.
I haven't meant that in the way "no this is microsoft, we will ignore that", but rather than in a way to avoid any copyright infringements. My wording was poor.
My wording was bad, I've edited the post. I haven't meant that C# is a bad thing, just something google might avoid copying not to run in any legal issues.
Didn't it get await some days ago?
The theme for this ludum dare was REALLY bad so I don't blame him. It should have been just "Connected", not "Connected Worlds"
Looks like the update is now available. Still in the early stages though: https://www.pragprog.com/book/csdart1/dart-1-for-hipsters
Nope, seems unlike something Anders Hejlsberg would do! :)
&gt;I find that very hard to believe Eh. Just check the citation then. Here is a screencap from that presentation: http://i.imgur.com/8fMfgqN.png Dart is closer to C# than it is to Java. It got things like `var`, fat arrow functions, optional named arguments, operator overloading, SIMD, and soon also async/await.
Now when I am learning it, I see that. I was too fast to judge and was asking questions before trying it first.
Looks like you're a victim of the gigantic amount of FUD (and plain simply lies) spread by anti-Microsoft fanboys about C# (and MS technology in general). C# is an open-source language, with an [open source compiler](https://roslyn.codeplex.com/) (under Apache 2.0 License), whose Language Specification has been standardized under [ECMA](http://www.ecma-international.org/publications/standards/Ecma-334.htm), which is also covered by a legally-binding [community promise](http://www.microsoft.com/openspecifications/en/us/programs/community-promise/default.aspx) issued by Microsoft, basically stating that they can't sue anybody for providing alternative implementations of the technologies covered by the Promise. In addition to that, Microsoft has lately been [collaborating with companies who provide alternative C#/.Net implementations on Non-Windows platforms](http://xamarin.com/pr/xamarin-microsoft-partner) rather than fighting them. Contrast this with the ongoing oracle versus google lawsuit about google using "java" on Android. I'm not familiar with Dart, but given the current state of technology, "borrowing" from C# seems like a much more interesting idea than borrowing from java, which at this point is still struggling to get basic stuff in place (such as Value Types and proper Generics), and playing catch-up with C# 3.0 from 2007 (lambda expressions and LINQ). IMO, Google should really learn from their mistakes and get rid of java once and for all, not only because (in contrast to C#) it's NOT as "open" as many people claim it to be (otherwise the oracle/google lawsuit wouldn't have happened), but also because there are much better, well-designed technologies out there which could be leveraged. Also, regarding your statement that: &gt; C# is (mainly) used by Microsoft Yes, but not exclusively. Non-Microsoft C# implementations include: - [Xamarin](http://xamarin.com/), which is the #1 cross-platform mobile development provider in the world, providing the only Cross-platform-to-Native, MVVM-capable, XAML-enabled UI toolkit currently in existence. - [Unity](http://unity3d.com/), which is a high-quality cross-platform game engine which powers the vast majority of 2D and 3D mobile games for Android, iOS and Windows Phone out there. Bottom line: pay less attention to utter bullshit put forward by anti-Microsoft fanboys ;)
OK, fixed with Dart 1.6. 
At the very least, we whould link to dartlang.org. Perhaps we could link to some books that teach dart as well.
Dart hasn't (or hadn't) become a standard yet. Chrome doesn't want to put a language into its browser that hasn't been standardized.
This is not accurate at all. Google is strongly sold on Dart and full integration is just a few months away. Before Christmas.
Replace: print(one); with: for (var element in one) { print(element); }
It prints everything in one line because you issue one print statement to the .toString() method of the list one. If you want multiple lines, one for each item in the list, you need a for loop that iterates over the items and issues a print statement for each one. Of course, this begs the question as to why you are storing your strings in a list in the first place when you could just print them out directly and get the output you want, but I guess you have a reason for that :) 
In that case, what about this? main() { int n = 1; for (int i = 0; i &lt; 10; i ++) { print("${n}*${n}=${n*n}"; n = n * 10 + 1; } } In short, there's no need for a list at all. (Note: not tested, might need to check the string interpolation) 
Pardon the ignorance, I'm just finding out about CocoonJS right now, aren't all HTML5 apps compatible already? What would it take to make DartRocket compatible with it?
CocoonJS is really tricky to work with. Even one of the most popular JS game engine has problems with it. DartRocket is already compatible with CocoonJS. I just had to dynamically make the canvas and I made the canvas renderer the default option, because the WebGL support at the moment is poor in CocoonJS. Although I have not tested it out, but I made this changes based on how Behnard made it work with StageXL. 
I don't know what you're doing or why you're getting your error, but I tried using Polymer for a web application I'm developing, and had to stop because of problems just like yours. In my experience, the polymer library in general was opaque and confusing. The execution path (in contrast to standard dart) is extremely complicated and none of the tutorials or guides even try to explain it. You need to somehow invoke a giant js file, even when testing inside dartium, and when your code incorrectly expresses Polymer directives or erroneously calls anything polymer, you get a stack trace from hell and you have no clue what went wrong. (However, if your code is simply inconsistent or violates standard dart syntax, the editor helpfully points out your mistake). Moreover, tutorials on polymer were all very limited and there was no help or working examples of anything other than simple todo apps. Bits and pieces of code from stack overflow, depreciated demonstrations from blogs and simple examples from the scant few books avalable, when I tried to apply them to my project, stubbornly refused to compile or at least they confused me in any attempt to build useful abstractions. I should say; I'm a novice web developer. I've never developed anything grand or been part of a Fortune500 software team, nor have I developed enough for the web to have enough experience to see why many design decisions and API behaviors for Dart and Polymer are intuitive, unlike Google developers. So I decided to ditch polymer and finish the app in vanilla Dart. If you are constantly having trouble like I did, perhaps you should too.
I run a Dart meetup in Utah, and my meetup page has a great list of links to Dart resources that this Reddit should feel free to copy: http://www.meetup.com/Utah-Valley-Dartisans-Dart-Programming-Meetup/pages/Links_for_Dart_Resources/
The only feedback I have right now is: awesome :) You probably already know, but in case not, there are serial_port and firmata packages on pub. It'd be nice to have Arduino libraries like Johnny-Five that can work across serial ports or to the emulator.
Thanks! Didn't know about the libraries, I'll take a look! Serial is not emulated yet, I'll try to get the basics to work soon :)
Well then. I hadn't heard of your package before, but it looks pretty good. I would say it looks like a managable size and uses lots of Dart built in types, so I imagine it leverages the standard library pretty well. A couple things: First question: when you were developing it, what general process did you decide on for handling requests for static content vs XHRs under the hood? Also, I'm looking at the ``Usage`` section and I see maps with regular expressions as keys. Can you explain to us what source text the regexps are being matched against? And also the functions the map points to: What are the expected arguments and return values? Also, wanted to add: earlier today, I heard of another package called [Shelf](https://pub.dartlang.org/packages/shelf). Shelf also looks like a server toolkit. So my question: how would you compare Shelf and Rest? Do you think they do the same thing, or might it make sense to pick and choose from both?
I think [shelf_rest](https://pub.dartlang.org/packages/shelf_rest) is a closer parallel to this package than "raw" shelf.
This is silly. Dart isn't even supported by Chrome. Why would Microsoft support it? The only organization that deserves any pressure about this, right now, is Google.
I completely agree. Putting pressure on other browser vendors can't hurt though.
I'd like a good answer myself. I know there's a bunch of database drivers and support code but I'm still unsure on how to do back end stuff. I'm used to a lamp stack but I'd like to change from php but I don't know how. I've even ported my favorite [ORM over](https://github.com/TheBosZ/dabl-dart).
I'm working on a full-stack application in Dart. Being able to share code for models, logic, etc. is absolutely brilliant. But it's fair to say that library support on the server side isn't as mature as, say, php, node, etc. But I'm really enjoying the productivity benefits of staying in the same language for the entire application. It's great.
Very cool! Is the source code available somewhere?
Thanks :) I don't have game code uploaded, I do have the engine on [Github](https://github.com/VikramN/Coat). Engine was done in 3 or 4 days, so its buggy. But I think it would be better if you used [StageXL](https://github.com/bp74/StageXL) or something. They are better, more complete and well maintained. --- If you don't mind going through JS, then u can probably check out [CutJs Sample](http://play.cutjs.org/examples/game-orbit/). The source link is on the page.
I run a gaming community on my spare time. It is written in full stack Dart, meaning Dart in both front- and back-end. The webserver/back-end is running on a DigitalOcean cloud server, and it connects to a MySQL server via Dart drivers without any problems. Since the site is an SPA, the layout is generated in the front-end. Between the front-end and the back-end is a websocket that sends JSON. Standard setup, nothing fancy. So yes, Dart is really cool to use in both front and back-end. If you have any specific questions, I am glad to answer.
What does Chrome have to do with this? Dart is an ECMA standard; it's not owned or controlled by Google. I doubt Microsoft will add the Dart VM anytime soon, because their engineers have already commented negatively on it. But browser vendors don't need to follow Google on this. Dart isn't in Google's hands anymore.
You can see a simple full stack Dart application here: https://github.com/luizmineo/io_2014_contacts_demo It has a polymer frontend and uses Redstone.dart (http://redstonedart.org) for the server. It also uses MongoDB to store the data.
Dart being an ECMA standard doesn't mean anything. Eiffel is an ECMA standard language. Should all browsers support Eiffel? Why doesn't Chrome support C#? C# is an ECMA standard language. Why not CLI, for that matter? Google is sponsoring the development of Dart, so they are responsible for setting the example. If Chrome never implements it, I cannot blame anybody else for not implementing it. This is a silly argument.
The Dallas Area Rapid Transit is popular.
What's really interesting is that JavaScript fell during the same period. I wonder if this is just a fluke and next month will bounce back but it's interesting to say the least.
The TIOBE index is ridiculously flawed. I don't know how, but I am 100% sure of it. Any index that shows Javascript below Dephi and Perl cannot be taken seriously. Anyone who does any sort of recruiting knows that the top 3 are Java, C# and Javascript ...then there is a long break ...followed by maybe Ruby, Perl, Python, C, C++ .....then a very long break followed by everyone else (i.e. miscellaneous).
&gt;Anyone who does any sort of recruiting knows that the top 3 are Java, C# and Javascript As much as people on reddit will complain about it, PHP is up there too. Less so for advanced applications, but it's everywhere.
True, I may have forgotten PHP. But still... C/C++ above Java/C#/Javascript? If that was true I wouldn't be interviewing C++ guys all the time who want to switch to Java 'cause they can't find any jobs in their language.
Sure it's flawed, but without getting statistics from all programmers in the world, it's the best source for this sort of information.
Maybe people are realizing that JavaScript actually does suck ass.
It actually depends on how you define language popularity. * How job friendly it is? * How research friendly? * How much fun is the learning? * Or how much hype around it * Many more I guess For example, if you go to HN, most of posts are about some functional languages. So it's popular only in some regards, like how Java is very popular for getting a mobile dev job.
Is it possible you could give a link to the repository/index.html so I can see what happens? 
Hmm, yeah. However, it is quite outdated. Pub build doesn't create those symlinks in the build folder anymore. But is there any way to tell pub build where to put the build files? It would simply be convenient if pub build could do it direclty. Otherwise I can do it with a bash script very easy: pub build cp build/. / -R 
This looks like a bridge to make AngularJs more AngularDart. The later is not a one to one port and introduces Dart paradigms. These features have been getting ported back to AngularJs. So if you do AngularDart you're more on the bleeding edge.
For now.
No, AtScript is just a light wrapper around javascript, a la TypeScript. From the [AtScript Primer](https://docs.google.com/document/d/11YUzC-1d0V1-Q3V0fQ7KSit97HnZoKVygDxpWzEYW0U/edit), the goals are: * Type Annotations * Field Annotations * Metadata Annotations, and * Type Introspection 
I think the more interesting use case for Dart is the server anyway. Dart is never gonna make it into all browsers and the results from compiling it to JavaScript are [not that great](http://stackoverflow.com/questions/8815437/why-is-javascript-files-generated-by-dart-is-so-huge).
Your link is really old. The same example compiled in dart today is 6k (with minification turned on). 6k is nothing now-a-days. Any library javascript library that does anything semi-useful is going to blow that number out of the water. On top of that, the 6k that dart produces here is mostly bootstrapping code. if, for example, you copy and paste that "hello world" print line several times, you don't see an additional 6k added for each line. Rather, you see pretty proportional code size increases.
It's just a programming language. Do whatever the fuck you want with it. Web server, client side, internal tooling. Whatever. E: node.js is not a language, it's a framework. Dart cannot be compared to node. 
**1. What can you do?** Whatever you want to do. It's a language. It's like asking a painter what to do with paint. **2a. Is it similar to Node.js?** That's like asking if JavaScript is similar to Ember. Node.js is a framework to use if you want to use JavaScript outside a browser. On this vein, Dart can be used outside of a browser. Much like most other languages. **2b. Is it similar to Go?** All I know is that Go is a language tailored for system software designed to run on multi-core machines. Dart is not tailored for that. **3. What similarities does Dart have with Node.js** They both allow the use of one language and shared code on browser and server. **4. Can you create a real-time simple chat in it.** Yes **5. Any resources?** * The Dart Google Plus page has more activity than this subreddit. * [Sample pages](https://www.dartlang.org/samples/) are alright to start with. * [Pub](https://pub.dartlang.org/) lists 3rd party libraries you can use and also publish to. It has some chat stuff in there if you like to check. * [StageXL](http://www.stagexl.org/) if you want to write a game. 
Dart *can* be compared to node. Javascript is just a languange. Node is a language running on a particular vm with a standard library and package manager. dart is the same -- a language, a vm, standard library, and a package manager. Both are built on languages that run in a browser or on a server. They are in fact so similar that it could be said that dart is the only true competitor to node. 
Which do you prefer between them?
Node isn't a language though. JavaScript is the language running on Node with Node being the VM, library and package manager. Dart, on the other hand, is the language, VM, library and package manager. 
Yes, dart is both a language and a platform -- Dartlang and Dart, respectively. Node is also a platform, just like dart, with better names to distinguish the language from the platform. 
I much prefer dart. In fairness to javascript, google had the benefit of learning from javascript's mistakes and shortcomings, which was the reason for dart in the first place. 
I thought shared nothing distributed memory model scales well (in theory) regardless of the multi CPU setup. It's hard to find concrete details on dart's implementation and I've just been casually checking it out lately. I did read that an isolate is 5mb which is heavy. I would hope it would be scaled down. 
Last time I looked the VM implementation had a 1:1 thread to isolate mapping. I think there are plans to make isolates lightweight and scheduled across a thread pool, but I don't this is being worked on yet - other priorities.
Please take a look at [the code](https://github.com/karan/dart-hn) and help me improve it. What are the best practices that I screwed up?
Looks fine, although you should have a look at [stagehand](http://stagehand.pub/). Stagehand generates sample Dart apps with a pretty good basic structure. The dev version of DartEditor already use stagehand for generating Dart apps. You can find it in the [archive](https://www.dartlang.org/tools/download-archive/). Based on what stagehand generates you should have a lib folder for the library stuff. In your case you can move getTopIds, getStories methods and all of their dependencies to your library. This way your main file will only have your library as dependency. You could also consider using [http](https://pub.dartlang.org/packages/http) package, because I thinks it's easier to use and also looks better. 
Nice thanks for sharing. + You could use fat arrows for the `main` and `getTopIds ` methods since they're one liners. + In the `getStories ` method, I'd put the code that renderrs the stories in other method to separate "getting the data" and "rendering it". + You could add some tests (sorry don't mean to sound like a hipster) + You could check the [Idiomatic Dart](https://www.dartlang.org/articles/idiomatic-dart/) article for more tips &amp; ideas + My personal preference is to use static typing for method arguments and return type but not in the method body, but that's just my preference. Obviously that's all just my two cents, good stuff for a first go at Dart. 
Surprisingly reflectedType and runtimeType don't always return the same answer. See Gilad's answer here: http://stackoverflow.com/questions/20245748/reflecting-primitive-types-such-as-double-results-in-unexpected-output/20253047#20253047 Note sure why a one-liner should get it's own package. Sometimes copy and paste is the right solution. String typeOf(dynamic obj) =&gt; reflect(obj).type.reflectedType.toString(); 
Careful, don't use mirrors with dart2js. I'm curious what you need the name of the reflected type for anyway? There may be another way to accomplish what you're doing.
A VM is your best option. I've published a few small dart apps without too much trouble. Google App Engine/Docker both do indeed complicate things, but they are designed to reduce other complexities that small/simple apps don't have to worry about. The steps are simple enough: 1. Connect to a command line shell of your virtual machine 2. Use whatever tool or system you're using to upload your dart client/server directories to the VM (the following steps are all from the command line of your virtual machine) 3. Use `wget` to download the dart SDK from dartlang.org (depending on your processor 32/64 bit) 4. Use `tar` to extract the dart VM (and everything else) (optionally delete everything else) 5. Use `cp` (with sudo if necessary) to copy dart (the VM) to /usr/bin or add the directory the VM is in to your $PATH (so you can run dart as a command) 6. Use `nano` (if necessary) to check your server scripts &amp; make sure they correctly point to your client data files 7. type `dart main.dart &amp;` where `main.dart` is the name of your server's main script. (Don't forget the &amp;) And that's it, your application is now up and running.
Would you be able to recommend a VM? I know my way around a *nix box so I understand most of those. BUT I've never dabbled in web tech before this so when you say "server scripts", I don't really know what these are and how they start the dart server. As I understand it, the Dart Editor has it's own web server and it's all I really used to run my server and my client. What would the equivalent be in a VM? Would it be Apache or the like? Apologies for the noobishness. 
The first issue is actually getting your hands on an actual VM. I don't know exactly how it compares with all the others, but [chicagovps.net](http://chicagovps.net) is what I use and it's cheap and good. So for my setup: I used the [http_server](https://pub.dartlang.org/packages/http_server) dart package. This is a library that allows you to use a dart script to serve web content. [Here is a tutorial with examples on how to use it.](https://www.dartlang.org/docs/tutorials/httpserver/) You'll have to copy the sample code, modify it as necessary, and put it on your server. Since the http_server package not running on the client, you don't want to declare it in the client-side pubspec.yaml; you have to create a new pubspec.yaml for the server. So do that, and put it in the same directory as your main dart server script. That way when you run `dart main.dart` it knows what packages to load. So far so good?
I've actually used stock HttpServer from dart:io. I think I'll keep using that. I've got a separate dart file for the server and another for the client + .html. I think I can manage from here. I'll basically get a VM and work from there. I'll figure out the DNS stuff later, I think. Thanks for all the help! I'll show my work here when it's done. 
Interesting. You may want to consider using https://github.com/dart-lang/benchmark_harness
Well, in JS, you might do something like: if (typeof foo === 'string') { ... } However, in Dart you can just do: if (foo is String) { ... } It's somewhat like JS' `instanceof`. However, since there aren't any primitives, you don't get this kind of weird behavior in Dart: &gt; 'foobar' instanceof String false &gt; new String('foobar') instanceof String true In Dart, everything (except libraries) is an object. Well, from the users point of view, anyhow. So, you can do that kind of check simply via the `is` and `is!` operators.
YAY for tutorials! I've had this same question for years but have multiple other priorities that never let me look for anything beyond a "dead simple" solution as sought by the OP. Thanks for linking a tutorial, will be checking that out. P.S. If you make a video of you uploading so we can follow along, everyone will love and admire you.
Apparently Dart now runs on Google Cloud: http://news.dartlang.org/2014/11/dart-on-google-cloud-platform.html
I mentioned it in my post above when I said App Engine. It requires usage of Docker and VirtualBox. Additional setups I don't really want to learn and get into at the moment. 
The "'long': true" thing should be a separate function. Also, Dart has optional named and positioned arguments. Using an "option" object like it's usually done in JavaScript isn't necessary. In fact, it's actually a very bad idea since you won't get autocomplete and call-tips for that. https://www.dartlang.org/docs/dart-up-and-running/ch02.html#optional-parameters By the way, you can use '///' for one-line doc comments. You used '//' for your "plural" function. '//' is a regular comment.
Apple shoulda adopted Dart instead of going with Swift, sigh.
Sweet! Enums! :O
And it's done! The package is now complete and ready for use by anyone.
Why would you put quotes around Dart? 
Dart actually isn't very close to Java. It's somewhat closer to C# which has things like named arguments and operator overloading. However, it's a dynamic language. The type annotations are 100% optional and completely ignored at runtime. The types are only checked in "checked" mode which is only used for development. Some people think it's "just like Java", because it has classes. Well, so does ES6. Others think it's because of the type annotations, but they don't realize that those are very sparingly used. You only put them on the things which are visible from the outside like function signatures and fields.
Because they were actually talking about Java. They seem to be under the wrong impression that those two languages are very similar.
The problem is that there is just One. We should be able to use many different languages on the front end just like the backend.
Can't argue with that!
It's kind of a "thing" for me. . . really pisses me off. One day I woke up and realized that we have the most fucked up lock-in with browser development and no one seems to care about it.
Questions on StageXL are better asked and answered [on the official forum](http://www.stagexl.org/forum.html). The answers come fairly quickly and it's authoritative. Please do post back here for the answer to that question when you have it. :)
I don't believe this is strictly related to stagexl. Stagexl has support for up to 10 simultaneous touches, assuming it's maxTouchPoints variable is accurate. Even when using the multi-touch dart sample (which did not use stagexl) which let you draw on the screen, it wouldn't support more than two simultaneous touches. I'm wondering if this is a hard limitation of the dart language or if it can be subverted.
Does it work for you with JS? Which browser did you use? Did you also try it in Dartium (as Dart)?
I think you mean "Dartisans". ;-)
I don't like the options either. The 'simple' web app has 20 dependencies. I usually spend a few minutes deleting stuff so I can start with 1 html file and 1 dart file with a main(). There definitely needs to be a minimal project added.
Thanks for the feedback! Agreed, we should add a super-duper minimal template to Stagehand. http://stagehand.pub
Thanks Seth :-) https://github.com/google/stagehand/pull/178 
If you need some assets, take a look at /u/KenNL's: http://kenney.nl/assets You don't have to stick to colored rectangles if you don't want to. Is there a way to play this without adding it to Chrome? Adding/removing apps is kinda inconvenient.
You can play it through the browser at http://www.differentcircle.com/Eric/ The choice of coloured rectangles was to keep it like the game I used to play in the 80s, I'm still deciding whether or not to upgrade it to use more interesting assets.
Интервью ни о чем. Интересно, когда Google выпустит Dart 1.9, то они тоже дадут интервью. Что-то типа этого: Вопрос: ​Вы действительно считаете что внесение необратимых изменений в версию 1.9 было неизбежно несмотря на то, что это нарушает совместимость с Semantic versioning? Ответ: Совершенно верно. Это в очередной раз доказывает что Dart платформа настолько зрелая (mature), что ей не страшны никакие необратимые изменения, даже если они (исправления) вносятся повторно (и регулярно). Вопрос: А как же пользователи тех программ, которых это затронет? Ответ: Пользователь у нас "закаленные", им не привыкать к подобной заботе с нашей стороны. Вопрос: Что нового, самого ожидаемого, вы предложите в этой версии? Ответ: Надежду. Надежда умирает последней. Кто надеется и верит, то у того все получится. Вопрос: Да, это пожалуй самое сокровенное на что можно рассчитывать. Вы всегда так щедры на сюрпризы? Ответ: Конечно. Наше основное правило заключается в том, чтобы дарить нашим пользователям надежду и постоянно делать сюрпризы (как с версией 1.9). Мы принципиально не раскрываем своих планов чтобы дарить всем надежду, надежду на светлое будущее в web.
Are you asking if dart has database support? If so, yes, it does. I am currently using [This library](https://github.com/xxgreg/dart_postgresql) to interact with postgreSQL on the server for an application I'm writing, and there are [A bunch of SQL libraies](https://pub.dartlang.org/search?q=SQL) as well as [NOSQL database libraries](https://pub.dartlang.org/search?q=NOSQL). Are you asking if it has ecommerce support? Because I don't know what you would need, I've never built an ecommerce site or interacted with credit card companies or payments. But I do know that dart allows you to send client and server side requests to third party servers, just like any other framework, so it should be a matter of reading VISA or paypal APIs and implementing them in your functions.
I am sure the real issue is a combination of priorities and the need to make isolates lighter. Dart is still pretty new. As for conspiracy, I was frustrated in my web search and, for me, in a rather strange mood. (I had never used that word before, publicly or privately.)
I host my dart server on a desktop pc in my house.
You can run server-sided applications written in Dart (or whatever) on any VPS. Digital Ocean is a popular choice, for example. PaaS options like Heroku or GAE are more convenient but also a lot more expensive. Whether or not you can scale horizontally (that is, across several machines) depends on your architecture. Check this website for some hints: http://12factor.net/ **Edit:** See also: https://www.digitalocean.com/community/tutorials/5-common-server-setups-for-your-web-application
I happen to be visiting here just before Christmas. No sign of this happening.
Code-wise its not hard to get a web server up and running with dart. Here is a simple web server I have written that provides static files: https://gist.github.com/corgrath/b3d1f750350d82b96f1a I also use DigitalOcean as a host. There as well, it is very simple. Once you have created a "droplet" all you need to do is do a wget of the latest dart for linux. In the "\dart-sdk\bin" folder is where Dart executable lives. I know this is a bit lame, but when I "deploy" my dart app, I bundle both the dart VM + app into one. Meaning in Windows (where I do my development) I download Dart for Linux, unzip it, and then in "\dart-sdk\bin\" I put my own project, for example "\dart-sdk\bin\my_project\". Then I can zip it all together again, and in my droplet I do a wget to my custom zip file, unzip it in linux, with a terminal navigate to "\dart-sdk\bin\my_project" and there execute the command ".././dart myapp.dart". If you want to make things even simpler, you could also install Dropbox on the droplet, configure it with selective sync towards a specific folder, in that folder you have both dart and your app extracted (same folder structure I mentioned above), then all you need to do is wait until dropbox has synced all and then go ".././dart myapp.dart". If you want to update your app, kill your app, wait until dropbox has synced all files and then hit ".././dart myapp.dart" again.
All the answers are in this tutorial section: https://www.dartlang.org/articles/improving-the-dom/
Thanks! Is it easy to install Dart via command line?
`querySelector` and `querySelectorAll` are the primary means of accessing DOM elements.
I would just go with 1) querySelector('form element') 2) querySelector('[name="myForm"] [name="foo]') 3) querySelector('#foo') 4) I'm confused about getting myForm by id, when it has no id. Why would you try to do this? Basically, querySelector is the answer to all your problems.
Convert the anonymous function to a JsFunction with the withThis constructor: f = new JsFunction.withThis( (t) { t.callMethod('field', ['title', {boost: 10}]) t.callMethod('field', ['body']) t.callMethod('ref', ['id']) }); You will have to experiment with the callMethod stuff in the callback. I don't know if lunr is already a JsFunction in context but you provide f as the callback: JsObject index = context['lunr'].apply([f]); I can not test this right now, but the withThis constructor is the trick.
&gt; Exception: constructor not a function Are you using the `new` keyword?
Yes, this is what I have: class LunrSearch { JsObject index; var _f = new JsFunction.withThis((t) { t.callMethod('field', ['title', { 'boost': 10 }]); t.callMethod('field', ['body']); t.callMethod('ref', ['id']); }); LunrSearch(Map fields) { index = new JsObject(context['lunr'], [_f]); //addDocument([{'title': 'test', 'tags': 'more tests'}]); } void addDocument(List&lt;Map&gt; documents) { for (Map m in documents) { index.callMethod('add', [new JsObject.jsify(m)]); } } Map search(String input) { return index.callMethod('search', [input]); } }
Call is not a method from JsObject. I can only do `.callMethod(String name, args)`. 
Download the zip. IF you want dart to be global command, you need to put that into the OS' PATH.
Great to see this, Ananth. Take a look at our package layout conventions for your project: https://www.dartlang.org/tools/pub/package-layout.html Having your code defined in libraries will make it easier for folks who want to measure performance or (eventually) use your code in their projects.
also, don't forget you can do this: HTMLElement $(String query) =&gt; querySelector(query); Then you can just use the $().
Take a look at the layout conventions for packages - https://www.dartlang.org/tools/pub/package-layout.html Put most of your code in 'lib'. It will make testing easier since you can use 'package:' urls instead of relative paths. Consider using lowercase_names_with_underscores instead of CamelCasing files. This will make collaborating with folks on case-insensitive file systems (Windows) easier.
Hey thanks for checking it out. Ive only been working on this project for a little while and the client even less time so not everything is flushed out. Your first few points about strings make sense, I'll make those changes. However your points about how the datasource/mediator/models are setup not as much. I do have reasons for not having the models or datasource do much. How I see it: * **Web Server** - Provides an api to gather or push data. * **Base Datasource** - Encapsulates POST and GET calls while providing one entry point, my makeRequest() function. * **____Datasource** - Provides endpoint specific functions. * **___ModelFactory** - Parses all the JSON into models specific to that endpoint. * **__Model** - Holds strong properties that match what JSON that created them and also serialization/deserialization functions. * **___Mediator** - Control the flow and/or state. In this case I have not created a model factory but I will as part of my refactoring. To your point though, I don't let models or datasources hold any logic. Lastly the login() function's complexity is also on purpose. I wrote it that way because each step needs to be done in order and instead of splitting each part, which is simply a network call shoved into a few if statements that check the current state of the usermodel, I saved the state and called the same function recursively until the user was signed in. My login logic is 4 steps when its a new user and 2 steps if they have finalized their account before (re-login). I guess the only refactoring that could happen is to split the different if statement cores into functions and pass around the completer instance. What do you think?
These are some great points. I figured my files were in the wrong place when it was giving me the "Both of these files are under the same library name" or something along those lines. I added the *library NAME;* line but it felt hacky the way I used it.
Just kinda curious. Have has working with Dart been?
So far working with Dart has been very satisfying. I really enjoy it's feature set, the standard library, module support, and that I can work in such a structured language while building web applications. Other than one issue where I couldn't quite get a network call with Futures to work, everything has gone smoothly. I'm still grasping all the conventions and trying to utilize the built in functions more wisely but I've enjoyed developing in it up to this point. As far as this project for this post, its been me porting Objective-C code and it translates quite well, not perfectly but I've been able to accomplish a lot of the same tasks one way or another.
That sounds great. Sounds like Dart is serving the exact purpose it was designed for: to be familiar enough to developers from multiple backgrounds. Hopefully more developers realize this and the ecosystem gets a little stronger.
What browser are you running in and have you tried others? Is this when running in dart or in javascript? Without seeing the code, I'm not sure of what else might be going on.
Nice suggestion. Here are the tests. Dart + Chromium Single Image Render: 60% CPU and 50% CPU (2 processes) Safari Javascript Single Image Render: 7% CPU Chrome Javascript Single Image Render: 10% and 10% CPU Then I did the full graphics render test, instead of the single image. Dart + Chromium Full Render: 75% and 60% CPU Safari Javascript Full Render: 40% CPU Chrome Javascript Full Render: 30% and 20% CPU
Interesting - would be worth raising on the Dart mailing list. I've noticed my minimal Dungeon game burns a lot of CPU in Dartium even when off screen (and it does use AnimationFrame). I have not looked into it in detail yet though :-)
Ok - I went ahead and posted to the mailing list.
I haven't tried it yet, but check out Heroku's new Dropbox deploy feature.
Go to chrome://gpu/ I find under my Linux install canvas is software only. Also chrome://flags/#show-fps-counter
The JS interop with Dart is a little bit frustrating right now. I'd stick with JS for anything serious. If you are just wanting to learn and play without necessarily worrying about being serious, Dart is great.
For now, sounds like: * JS: no question * Dart: sure, if you have time
Client? Dart Server? If you're going with client-side Dart, might as well do server-side Dart because you get to re-use code and you won't have to learn another language. I came from a desktop background. C++ and Java. Learned HTML, CSS and Javascript to make my first web app. Told myself I need to learn Python for the server-side. Couldn't make it work. Forced myself to do Javascript on the server-side. Told myself it's too complicated. Discovered MeteorJs that allowed me to do Javascript server and client with shared code. Thought it was awesome until I realized that I can't use Meteor knowledge outside of Meteor and the Javascript I learned to do was pretty much useless. Dart turning 1.0 was a breath of fresh air. **Learning Javascript** I don't think you'd have to learn Javascript so long as you know Dart. The Javascript part is only there as a final piece before deployment. **Assembly of the web** Yeah. I do believe that Javascript is the assembly language of the web. But we have Assembly itself as the Assembly language of the desktop. It doesn't stop us from coding in Java or C# or what have you. **Is there a point to Javascript** To a point. Much like learning Assembly will help you understand how things work under the hood, Javascript will give you a better understanding of why things are the way they are now. But other than deeper knowledge, it doesn't help much in the making of apps that work now. 
Wow that sounds somewhat familiar, I started diving into node/js for a bit but realized I'd rather not use javascript if I don't have to, so then I started playing with Python and Ruby. Started to commit to Ruby (I really like Middleman as a static site generator, and rails seems quite good). Yesterday I listened to some interviews with Lars Bak and figured I should consider Dart as well. I'm curious what the speculation is on the probability of Dart actually replacing javascript in browsers. With the ECMA standardization of Dart it seems like that's at least a possible direction for Google to go, but there's a lot opinions based on a lot of investments/situations so it's really hard to figure out. I guess most likely it's just too early to tell. Keeping javascript around as an assembly for the web seems like an unnecessary abstraction, I'd rather use an improved version of javascript or something like Dart that runs natively (but standards, I know...) 
JS has soooo many libraries and nodes npm makes them so easy to use. Go with Javascript for everything. Don't let others fool you into thinking .js is a pile of steaming dung. Its actually a beautiful language especially when scoped properly with node and its require statements. 
Dart currently doesn't have as much support or as large a community as you would find with another language. That's why I would recommend starting somewhere else. Something like nodejs, Django, or ruby on rails will all get you going a lot faster and smoother. If webapps are your goal. 
I'm not aware of anything regarding async that won't transpile to Javascript properly. The big warning areas are is the use of mirrors (reflection tends to not work as well if the code being reflected was changed) and relying on anything that wouldn't survive minification (regardless of transpiling) such as `Object.runtimeType.toString()`
It's worth noting that a lot of Javascript's warts can be / have been patched over with the wealth of libraries out there like jQuery, node, Backbone, Ember, etc. It's also worth noting that these patches are not part of the language proper, which means that to use them requires overhead not only in including the library into your project, but also in learning the library and in CPU time to perform the libraries functions. Whether these costs ultimately matter is going to be a case by case thing, but it's something to consider when choosing an environment for your project.
An old article, so some of the points are out of date but when I first read it, I thought it gave some good pros and cons for both languages.
If you want to follow along, here is the link the mailing list post: https://groups.google.com/a/dartlang.org/d/msg/misc/Rw3jviagaOA/APqy-fY_EgMJ
I agree entirely. I think JavaScript ES6 classes should behave like this too.
Rust does this, `new` is just a function, so code is like this let obj = Vec::new(); obj.append(12); println!("{}", obj) // prints "[12]" (without the quotes)
Very informative post. Thanks for posting... /s
Dart is dead. If Google were cool, I think it would have succeeded, but who wants dedicate time and effort to learning and using Dart given Google's history of banning developers? If I use Dart will my account be banned? Will my business be shut down? Will Google just one day cancel the project and I'll be stuck with a bunch of useless Dart code? Yes. Don't trust Google.
?
Right now the momentum is behind ES6 and CommonJS/npm. There's really no point in using Dart when the ecosystem is so immature.
Why do we need a VM to run the Dart VM on app engine ? Java runs fine on AppEngine without a wrapping VM... 
You say it is wonderful that developers have choice, but that is kind of my point, we don't have a choice in the browser, we only have JavaScript ( and maybe asm ). I would love it if I and my users could run Python, CoffeScript, Dart and TypeScript natively in the browser, but for some weird reason we can't... It seems like adding another language choice to the browser takes a huge industry consensus and I fear it won't be on Dart...
&gt; "If you are going to transpile, why not go with a new language?" because of lack of JS interoperability. All JS libraries and tools are not accessible with Dart, it's sad truth. 
I just think it started with the wrong premise. Start with a clean sheet of paper, rather than a layer over javascript. If javascript is the problem, Dart can't be the solution.
Hi. I am really hoping for Dart gaining popularity. Where do you see that Dart is gaining? I can't find any numbers on Dart popularity. And indeed we are waiting for Google to give a push. Is there an expected release date for Dart VM in standard Chrome?
Could you elaborate a bit more on that ? I do think that Dart could be the solution to all of JavaScripts problems, I just feel that Google itself does not believe in it.
i think everyones eyes is on Go.
I think it is far premature to proclaim Dart dead. Languages often take years to catch on and you have to remember that Dart was *announced* in 2011. Right now only early adopters are playing with it but as the tooling and community around it grow it will become much more attractive. Until then, a bit of competition will only do JS good.
Dart is the solution, what other languages have their own VM that runs in the browser?
I actually hold an opposite opinion on the maturity of the ecosystem: * Tools that are available address packaging and distribution very well with bonus point of addressing build pipelines (personally I prefer separate tools for each thing though). * Dartanalyzer is pretty good and that is why IDE developers can easily add support for the language. * High quality libraries that address most common needs Another thing to note is that Dart comes with batteries included (e.g. async and deferred support are part of the standard library) so I don't buy your argument, or lack thereof. 
That's a fair assertion and a good point. However I think that once oilpan lands in Chrome and native Dart being a possibility will be the true litmus test of the viability of a language other than JS working in the browser. On the front of Google, I would not worry too much about it. Google does a lot; they don't force their divisions to dogfood from other divisions. This argument comes up a lot with Angular; most of Google's products are not built on it despite the fact that Google pays people to work on it. The guy that does VueJS also works at Google and some Google projects are built on that. So I'd say you don't need to be loyal, just patient. What /u/sethladd and other Dart members are doing is super cool and I think given time it could potentially prove to be a viable language of the future; until then just keep an eye on it.
You have a choice in what language to develop in, as long as it compiles to JavaScript. Luckily, there are many many choices there: https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS Sorry I wasn't clear in my above post. JavaScript is the assembly of the web, and there are many many choices for how to get to JavaScript.
Here's a list of things you can use with Dart today: * Travis CI * drone.io * Coveralls * Redis * MySQL * Postgres * Oracle * MongoDB * Angular * Polymer * Run in Heroku * Run in App Engine * Edit in WebStorm * Edit in Sublime * Edit in Eclipse * Edit in Vi Here's some of the things you get out of the box, so the ecosystem can build on top and not have to reinvent: * unit testing * mocking * package manager * build system * task runner * new project creation * Futures and Streams * Libraries * formatter * analyzer The ecosystem is growing. :)
By that argument, people should write web applications in Go. It checks off 90% of those items too. But people generally don't write web applications in Go. Edit: Just to clarify, I am referring to writing front-end applications for browsers in Go, like with [GopherJS](https://github.com/gopherjs/gopherjs).
I looked at ES6 and it's basically a new language with more quirks than ES5. Look at [classes](https://github.com/lukehoban/es6features#classes). To me this does not look like Javascript at all. If I want to use a language which I need to compile to ES5 then I think Dart is way better choice than ES6.
Please do email vm-dev@dartlang.org with your questions on embedding the VM. Thanks!
True. Perhaps people write Dart for the web because you get all those things, plus a nice language, plus strong core libraries, plus HTML bindings, plus Web Components, plus is compiles to JavaScript. Lots of languages have drivers for databases, core libraries, etc. Definitely not trying to say only Dart has those things. Dart is good for web development because it has all that plus deep bindings into HTML/DOM. You asked about the ecosystem, just tried to answer that the ecosystem is developing.
Seems it might Go
You can run anything in the browser. See GWT, ClojureScript, and EmScripten. http://bellard.org/jslinux/
ASM.JS is a surprisingly workable hack to accomplish that. It sounds bat yodeling insane at first but when you really look it's actually pretty efficient, since it generates JS that can be almost transliterated into efficient AOT-compiled code. It's backward compatible, yet it could be supported in ways that would make it far more efficient.
So ES6 standard will be done maybe June of this year (maybe). Then you wait another several years for browsers to support it. It'll be forever. Deal with it...?
The problem with Dart is that it did not have a coherent story to tell and the marketing machine at Google was doing a terrible job of selling it. Then there was the nonsense with AtScript and Angular.js making the whole mess even more confused. It's really too bad because the language itself is kinda nice. My current favorite compile-to-js language is TypeScript mostly because Anders is involved with it and that man knows language design and partly because I really like how readable the resulting js ends up being.
I think Javascript definitely benefits from development done in other languages and VM's such as Dart. It is insanely hard to implement new features for Javascript due to the backwards compatibility constraints. Developing other languages and VMs give opportunities to try out new ideas. If these ideas are proven worthwhile then they can be incorporated back into the Javascript standard and production Javascript VM implementations. Some interesting examples are Dart's SIMD support is being standardised and brought to Javascript. Another example is "for (let..) { ... }" loops in ES6 are now using Dart's scoping rules - if you look at the Ecmascript mailing list you can see that Dart's semantics are discussed as part of the standardisation process. Also on a purely personal level, maybe the initial developers behind Dart got bored working on V8, and wanted new challenges and to push the start of the art. Had the only option been to continue work on V8, perhaps they would have burned out and gone back to work on the family farm - and the world would have gained nothing from them. I say let innovators innovate. 
You won't have choice in the browser unless the W3C decide to standardize on some kind of bytecode. I kind of feel like of they were going to do that, they would have started by now.
I don't think your mental model of App Engine is correct. What wrapping VM are you referring to? Dart and Java both run in their own "virtual machines", and the GNU/Linux *they* run in is also referred to as a "virtual machine", so maybe that's the confusion?
&gt; no sense to reinvent the wheel Somewhat ironic saying that about JavaScript, which is renound for doing just. Hundreds of binding frameworks and UI libraries. Even in the short life of npm I see build tools rise and fall; developers completely abandoning projects to rewrite them again. 
Running Dart on AppEngine requires a linux virtual machine instance. Java does not.
no dart-mode in Emacs? 
I love dart as a language and I hope it has some good success. However, to be frank, the UI story is painful right now. There is a lack of polish that makes dealing with things really annoying. Polymer, for example, requires a lot of mental juggling "Do I put a script tag here? Where do I point it? Is the path relative? etc". In the end, it is hard to really fix up with a learning curve that is steeper than I would like. AngularDart was just frustrating and disappointing. It has the same problem as polymer (especially when it comes to the annotations and tutorials. Half of learning it seems to be learning exactly what sort of project layout AngularDart wants). On top of that, before it was even finished, it was practically abandoned for Angular 2. It did bi-weekly releases and then, all of the sudden, development came to a near standstill before hitting 1.0. Unfortunately, it stood still in a really weird position. It had a controller, but you weren't supposed to use the controller, yet no other alternative was really given. The tutorials were 3 versions behind and didn't work. It was just all around frustrating. After that, 1.0 was release and support was basically dropped. These sorts of things make it REALLY hard for me to recommend that anyone use dart. It may make sense to use dart as a library language, yet the problem is that dart doesn't want to be just a library that javascript can call. It wants to be the language that might call down to javascript. Oh, and mirrors really need to be fixed. They are used in almost every one of the UI libraries out there causing your js size to explode. I don't know what the solution is, but it would be really nice if every dart application wasn't gigantic. I mean, at this point you might as well remove tree shaking because it is so easy to stumble over a library that uses mirrors which will remove all tree shaking benefits. "MirrorsUsed" might be what you are thinking, but I would argue that is an inherently broken solution mainly because it introduces a runtime failure if someone forgets to add a library used as a mirror to the list of "MirrorsUsed". I get that it isn't an easy problem to solve, but it is a painful one none the less.
They mean that it has it's own VM.
a lisper would never lower themselves to dart
From what I can see SoundScript brings TypeScript into the V8 VM, which brings much of the same speed-ups.
Even if the consensus is to go down the SoundScript route Dart will work towards transpiling for it.
Yes of course. But I'm just pointing out that the biggest gain of dart, having the faster VM, is something that is going to go away.
Everyone knows that; the question is: can you run everything *well* in the browser. Dart's tagline: &gt; End-to-end productivity with Dart How much time/money does it take to get from prototype to production with GWT, ClojureScript, EmScripten and are they performant?
A fast VM is really nice, but to me the biggest gain for using Dart is higher productivity and better development experience. I'm personally able to write better code, code that's easier to read by other humans, code that's easier to understand for tools, and more often kept "on the rails". There dev experience is the biggest gain of Dart, in my experience.
Dart was announced as a technology preview in 2011, and here we are in 2015 and there's more Dart developers in Google than ever, building business critical production apps.
You're right that is rude of me, dart has made incredible progress in that short time. I think people are just confused by some things like AtScript and are interested in seeing more public investment choices in dart (from google, internal apps are really not enough). DartVM in chrome seems unlikely, DartVM in other browsers seems insurmountable; We have this great language to use, and people would like to use it natively on android too. If the only strides dart intends to make is targeting javascript, well there are also other great technologies to do that with too...the pool of choices is vast. Do you see why at least the OP might make the thread he did, asking to put dart to rest? BTW, I have nothing but respect for the DART team, and I think you do a incredible job too...a bit frightening because you literally seem to be _everywhere_ i see the word DART. :P 
Dart is closer to C#, actually. As a C-like language, it's familiar to anyone who's coming from C#, Java, AS3, or JavaScript. TypeScript also has classes and types. Do you think TypeScript is just like Java, too? Anyhow, you shouldn't dismiss Java entirely just because the language is fairly verbose. Java actually did many things right. It had good tooling, a language specification, official code &amp; documentation conventions, standardized documentation syntax, and it also got shipped with a tool for generating documentation. The JVM is pretty fast, too. By the way, Ruby already has classes and it may get static typing (or Flow-like inference) at some point. Will those tooling improvements turn it into Java? :)
&gt; Deal with it...? Using a to-JS language is a way to deal with that. Currently, ES6 is one of those to-JS languages, too. There is no VM which actually supports it yet. You have to transpile it to ES5. Anyhow, native Dart support will be probably available for several deployment targets. Also keep in mind that Dart also exists outside of browsers. You can also use it for servers, command line tools, and application scripting.
ES6? A subset of TypeScript/AtScript? Certainly not. Dart has excellent tooling. ES6 does not.
&gt; dart doesn't want to be just a library that javascript can call Apparently this is being addressed in this new package: https://github.com/dart-lang/js-interop/ But the development doesn't appear to be very active at the moment. 
V8 support for ES6 is coming quickly. Many features are already done.
Of course every man and his dog ships minified code these days - so even with ES6 support in the browsers - ES6 itself still has a compile step. If you're going to compile for production anyway, then why not use a language with a few of the gotchas removed?
Well, I was thinking of some compilers from other languages (eg: fpc), which do indeed do that. I've remember clang does has a "-no-integrated-as" switch that can be used to disable the internal assembler and instead use the system assembler, which is why was thinking such intermediate step was done, or is it used only for supporting inlined assembly code?
[Chris Lattner's chapter in AOSP](http://aosabook.org/en/llvm.html) shows that there is just a "back end". The assmbler you're talking about, I think, is used for handling in line assembly. If you don't want to use LLVM's flavour of assembly language you tell it not to use the integrated one so you can built with some other tool. I guess LLVM did previously shell out to an assembler so you may have been right a few years back but your info is just out of date. From the llvm blog: &gt;[Beyond lack of elegance, it has been a goal for quite a while (for example, see Bruno's 2009 devmtg talk) to directly integrate an assembler into the compiler. Doing so would solve a number of problems: For fast compiles, it is incredibly wasteful for the compiler to carefully format a massive text file, then fork/exec an assembler, which then has to lex/parse/validate the file. In fact, since the rest of Clang is so fast, the assembler takes ~20% of compile time for C code at -O0 -g. In addition to winning back this performance, not relying on an external assembler is attractive for several other reasons: the compiler doesn't have to worry about lots of different buggy assemblers which have similar but inconsistent syntax, Windows users typically don't have assemblers (and MASM is not fully-featured enough to be targeted by a compiler), some systems like FreeBSD have old versions of binutils that lack modern features, etc. ](http://blog.llvm.org/2010/04/intro-to-llvm-mc-project.html) It's actually a really good blog post and I wouldn't have found it if I wasn't looking for something to show you that LLVM writes directly to machine code. So, thanks for pushing on this. :)
This is a follow up to a Top 5 list I made in 2013 that is still getting lots of hits. This is part one in a series. Hope you find it interesting!
Look at Android. Its a complete disaster. Buggy phones. Terrible sdk. App store lockdown. Malware and low quality everywhere. Material design was a flop. Sundar os an idiot. Cant believe he shipped lollipop. Way too buggy.
Everyone wondering 'wow whats this guys deal?'. He seems to be rather frustrated about having an android app he made rejected and then having his publishing account banned on Google Play. He's got a chip on his shoulder so large even Samsung are struggling to find a piece of glass big enough to cover it.
Is this a collection of sites using Dart servers? Or Dart2JS in frontend? Any info?
Yes. It's a rich internet app. Backend is on AWS, Frontend is Dart. Thanks for the question!
Are you looking for someone official associated w/ Google or not, or either?
either will be Ok, Googlers bring higher attendance but I understand the schedule is hard sometimes.
You can also reach Dartisans at g.co/dartisans. Hope that helps!
Looking forward to null-aware operators - https://github.com/dart-lang/dart_enhancement_proposals/blob/master/Meetings/2015-02-25%20DEP%20Committee%20Meeting.md#other-dep-proposals
Here's [the proposal](https://github.com/gbracha/nullAwareOperators).
Awsome. I'm particularly happy to see the meeting notes so accessible. Great work here.
This argument came up very often already. The main Angular user base is still on JavaScript by far and there was no way to ignore them. Would they build Angular in Dart it wouldn't be possible to use it in JavaScript applications. Dart builds to JavaScript but the entire app needs to be built to JavaScript at once for now (that may change in the future). There is no way to build Angular.js from Angular.dart to be used in JS applications. They could build Angular.dart AND Angular.js as two separate projects but that's a huge amount of work and not fun to do it twice. Therefore they went with AtScript (with now merges with TypeScript) and the strategy is to generate Angular.dart AND Angular.js from the same AtScript source code. This seems to work because there is already an Angular.dart 2.0 alpha release available.
Dart currently generates machine optimized JavaScript, minified, and all the other optimizations already done to it. It also compiles all the niceties of the Dart platform that your code uses into the JavaScript. This is not easily consumed as a Javascript library, and while there is an experimental compiler being worked on that outputs human readable JavaScript, it is not ready for prime time. Yes, Dart can consume JavaScript libraries. I understood that AtScript was supposed to transpile into Dart, but I don't know if that is still the plan.
I thought it might be interesting that the Angular team chose to work with Dart's closest competitor instead of in-house. I thought that would be relevant to this sub. 
Yes it does. It doesn't require you to actually deal with it, but it does require a linux virtual machine instance.
Since both firefox and Dart are open source, can't we implement a version for firefox with Dart?
I don't think type script is a competitor to Dart. Type script is more like a temporary fix to javascripts issues while Dart represents a more long term complete solution. They each have their place.
I think people are looking into this to much. I think type script was the better solution for angular. Dart represents a longer term solution to the js problem. Don't expect it to be adopted over night, just begin producing better and quicker made products than other people.
No it doesn't generate a version someone could easily read or edit. You could produce the library in Dart, but it would force the other contributors to edit the code in Dart.
What are JavaScript's mature "web UI" libraries? jQuery UI? Kendo UI? That kind of thing? [Riculo UI](http://rikulo.org/projects/ui) is something like that, I guess. Things like Bootstrap, Foundation, or Skeleton are primarily CSS. Using some of that works just fine. Interacting with Web Components should also work just fine. I'm really not quite sure what you're looking for.
There's [grinder](https://pub.dartlang.org/packages/grinder). I haven't used it but it looks like it will work. Or just use make.
Ohhh snap!
I don't definitively know the answer to your interesting question, but my intuition is that automated translation from JS to Dart will also be ugly, just a lot less ugly than from Dart to JS. Frameworks, like Marionette.js for example, have their own constructs of classes and mixins. But technically, classes and mixins are just JS functions doing all kinds of dynamic things to prototype chains and whatnot. The automated translation of such JS frameworks into Dart will result in those constructs being uglified. In TypeScript, those constructs are explicitly made, so that JS "classes" can be translated directly into Dart classes. Overall, I would agree that a JS to Dart translation is still cleaner than a Dart to JS translation. To translate from Dart to JS, some polyfills are needed. For example, there is no direct JS analogy to the noSuchMethod mechanism. Also, for performance reasons, the dart2js compiler is designed to add many other ugly things to it.
TypeScript is basically a fork of JavaScript which is used for experimentation. All experimentation has to be done outside of JavaScript. If some features/concepts works and if they are popular enough, these things are "merged" back via the standardization process. Being temporary is the best case scenario. That's what happened to AtScript. TS 1.5+ is AtScript.
&gt; Good for you that you don't feel like using a ui library, but that doesn't prove that dart is production ready. What is "production ready"? In JavaScript, this returns false: NaN === NaN Do you call that "production ready"? I call that "fundamentally flawed". Dart is production ready because Google has stopped doing major experiments that would break the language, Google tests the language across multiple browsers, even down to IE9, for each feature and more and more developers are switching over from JavaScript to Dart. Dart is more production ready today, than JavaScript was when it was the same age as Dart is now, but yet JavaScript was used everywhere giving everything major headache. &gt; Or maybe having a ui library is deeply needed for modern web development, and maybe there are no good stable alternatives. I understand what you are going for. But this is a personal taste question. You don't believe that Dart is production ready because you expect there should be more mature libraries of your choosing - just as JavaScript has today. If that is your defnition of "production ready" then so be it. I personally run a fairly feature rich website with both Dart in the front end and the back end. Back end has around 130 source files, a la 516 KB. Front end 90 files, 436 KB. I don't miss frameworks like Angular, because I am more an OO programmatic web developer. I like classes, methods, static types, etc. I like when I add a searchbar component to part of the page, I can specify what I want to tweak from the default implementation, using the language built in feature of optional named parameters. Meaning if your function signature is: SearchBar appendSearchBar(HtmlElement parent, {bool showSearchButton: true, int this.minNbrOfCharsUntilSearch:3, String placeHolder:”Search for anything!”}) { ... } Then I can write: appendSearchBar( body, showSearchButton:false ); appendSearchBar( body, placeHolder:”Search for a product”, minNbrOfCharsUntilSearch: 0); In my opinion, thanks to optional named parameters, Dart makes the source code less boilterplaty, more readable and it becomes blazingly fast to write what exactly you need. And as x-skeww wrote; you can still use everything else in web development, such as CSS frameworks. As I said, I understand what you mean, but I think unfair to call Dart not production ready because you expect more. I would recommend you to try programmatic Dart web development and then see if you actually require more.
Since you are not a coder, I wouldn't suggest starting with Dart. Since it's very new. So I'm not sure this statement is super popular, but you are going to find once you learn a coding language picking up another one is very easy. It's less about the language but about the how it can be used to solve the problem. So what's your web app idea? Maybe you should start by making a simple native app first. 
Interesting, is your project open source ?
Oh ok! Well then use dart but whatever it is, keep it very simple
Nope.
&gt; Is Google Dart dead? No.
I think Google Dart is fantastic as a first language, especially as a web language. I only really started understanding JavaScript fully after learning Dart. And no, the language and its platform are not dead at all. Same question was asked here last week. And if you'd look on the frontpage you'd find the other questions answer too: http://www.reddit.com/r/dartlang/comments/2tz1yy/is_dart_a_good_option_for_a_beginner_wanting_to/
Damn really? Was Javascript your first serious language? What other languages do you code in?
Not any more than alternatives. It runs in a browser which everyone has after all?
Build tools is a build automation tool with a built-in command line shell https://github.com/mezoni/build_tools Example: https://github.com/mezoni/unsafe_extension/blob/master/tool/project.dart dart tool/project.dart -- list &gt; List of available targets: &gt; *default git status &gt; git:add git add --all &gt; git:commit git commit, --m "message" &gt; git:push git push origin master &gt; git:status git status --short &gt; log:changes log changes, --m message &gt; prj:changelog generate 'CHANGELOG.md' &gt; prj:readme generate 'README.md' &gt; prj:version display version All command user defined (handcoded) in script. The same for building native extensions. https://github.com/mezoni/native_extension_with_build_tools/blob/master/bin/makefile.dart dart bin/makefile.dart --list &gt; List of available targets: &gt; build Build 'sample_extension'. &gt; clean Deletes all intermediate files. &gt; clean_all Deletes all intermediate and output files. &gt; compile_link Compile and link 'sample_extension'. &gt; *default Build and clean. 
A lot of interesting questions. I am just an ordinary Dart-developer, so I can't give a detailed overview and / or a comparison between these two languages. Perhaps someone else can. I can however give some personal comments. &gt; Are there major features/functionality/synthetic sugar that Dart 2.0 probably will have , but Typescript 2.0 is likely not to have ? I can't give a comparison, but seeing that TypeScript is a superset of JavaScript (hence it should be somewhat backward compatible with JavaScript, while Dart is an entirely new language, I would bet that TypeScript will always be more constrained than Dart. I can also say that Dart is packed with features, which some I am sure will never come to TypeScript. Some of Dart's feature are, but not limited to: * Classes and abstract classes * Constructors (default and named) * Interfaces * Generics (&lt;T&gt;) * Creating and importing libraries (controls scope access) * First-class functions * Closure functions * One-line functions * Anonymous (lambda) functions * Futures, built in (Dart’s name for promises, for better async programming) * Streams (standard way for continuous async callbacks) * Mirror (Dart’s name for reflections) * Mixins (using another class’ functions without inheritance) * Isolates (concurrent programming) (similar to threads) * Annotations (for example @owner or @whateveryouwant) * Enums * - and much much more! https://www.dartlang.org/docs/dart-up-and-running/ch02.html &gt; Besides that, Javascript of course has some fudemental flaws that are never going to be fixed. As mentioned before, seeing that TypeScript is a strict superset, to provide the "syntactic sugar" to JavaScript, I would believe that as well. &gt; I feel like Microsoft is a bit more in love and proud of typescript, than google is in love with dart. I get this impression too. However, I have never seen Google being proud of anything apart from Google Glas and Android :P &gt; But as it comes to using existing javascript libraries, then the roles are reversed, dart will always loose, but will dart 2.0 close the gap here ? I don't know if Dart 2.0 will make this better, but I agree with you here. I know its possible to use JavaScript in a Dart-application: https://www.dartlang.org/articles/js-dart-interop/ but I have never personally done that. But seeing that you need to use wrappers (obviously) to manipulate ordinary JavaScript code, personally, it feels like a last resort. Meaning if there is something I really need the JavaScript version, maybe its worth the hassle. But I have personally never had a reason to use ordinary JavaScript from Dart, unless I really wanted to use the browser's built in prompts: http://stackoverflow.com/questions/20058426/how-to-make-window-prompt-in-dart &gt; Dart 2.0 I have actually never heard of "Dart 2.0". Does that even exist or is rumored? Same goes for Angular 2.0 and Dart. Is Google working on an Angular 2.0 for Dart? Anyone know and can share a link? Just curious. 
My point wasn't about the language. The language it's self is excellent, just like java or c. I could see where the build process could get a little confusing for a noob and since it's very new there exist almost no resources for them to learn from.
There is a step by step guide on the Dart homepage. There is also a "get started" tutorial, a free HTML version of a book which explains the fundamentals, and browser/server-centric tutorials. There is also Stack Overflow (~5k questions so far), G+, the mailing list, and IRC. I'd say that's more than enough to get started. When I started with C, I only had one small book. And boy was I bored in those pre-internet days. :)
I don't see it as Typescript VS Dart. Typescript fixes some immediate issues with JS but remains basically JS. Javascript was just a simple little scripting language hacked together in a very short time. It has taken us very far, but when compared to the immense beauty that is CSS and HTML its almost offense. Dart is a language built and designed to be a web programming language. Dart was not hacked together to fill an immediate need and it contains all of the important major coding paradigms(omg inheritance and polymorphism :D). And one of the best parts Dart code can have structure to it. All of the JS supersets are great for pushing Web Developers in the right direction and once they start seeing other Devs producing webapps quicker and much cleaner using Dart, my hope is they will switch over.
They are experimenting with readable JavaScript in [this](https://github.com/dart-lang/dev_compiler) repo. I'm not sure if this will fix the interop problem though.
Don't expect clean output and native JavaScript interoperability anytime soon. The semantic difference between Dart and JavaScript is too big for this. Typescript gets this for free, because its semantically identical to JavaScript. Dart stands a better chance competing with Python, Ruby, Perl and friends. Dart could kick butt in that space. I really think that the best thing the dart developers could do is decouple the idea of the web browser from dart itself.
The other day an interesting point came out - Dart doesn't generate consumable JS as of now. People using your library need to develop in Dart. Typescript generates human readable JS for the most part. As for me, I don't understand how ActionScript 3 get's all the hate and Typescript, which is almost the same get's so much love. 
Yeah AS3 had it bads, but Typescript is essentially AS4 to me. What I don't understand is why Flash, haxe and that eco-system never got so much involvement from the web community
Yes, Angular2 works with Dart. https://angular.io/docs/dart/latest/index.html
ack no code completion!
Very nicely done too!
The "build_tools" also inspired by "rake". https://github.com/mezoni/build_tools Only in Dart language but not in Ruby language. Useful if you need access to Dart SDK from "build automation tool". Useful if you need the tasks (including files) that depends on other targets (tasks, files). - Runned just once tasks - Reusable tasks - Dependencies (main concept) - Files as targets (out of date, up to date) - Directories - Rules (path substitution, eg %.hmtl =&gt; out/%.md) 
Google Dart was a very fun language to build a online web game and my own website in but the editor is still buggy(been that way for a long time) and it's still very slow. And sometimes the debugging is pretty bad. I switched my online web game to be an online desktop game written in D-language. 80% CPU usage went down to 10% CPU usage. D-language, just as easy to code in as Dartlang and as fast as C++. What can you expect from a browser based execution environment though... gonna take a lot more time for it to catch up to native. Woulda been cool to have my game running in a webpage though.
The clock is cool.
Groovy \ (•◡•) /
Wow, async await so soon! That'll be wicked fun
Wow, this just blew my mind. With a bit added love to the UX this makes an impressive low barrier demo for the power of dart and its toolability. Great job.
Dart's VM is pretty fast. It easily beats Python, PHP, and Ruby by a factor of 10. It's one of the fastest scripting languages. The only problem was its horrible regexp performance, but this has been addressed recently. It now also uses an Irregexp-based implementation. [Reddit is written in Python](https://github.com/reddit/reddit), by the way. Facebook grew really large before PHP became a problem. Server-sided stuff is generally I/O-bound. Anyhow, the VM also supports SIMD which can be quite useful in some scenarios. And, if you really need it, you can even use native extensions. The VM allows you to load and communicate with native libraries. Having said that, there are some real downsides to using Dart on the server-side. The libraries and frameworks aren't very mature yet and the whole ecosystem is comparatively small. The basics are covered though. There are drivers for most databases, Sinatra-style frameworks, and things like that.
Apart from a very niche set of use-cases like rendering react on the server-side for bootstrapping, I never found much value in the paradigm of "code reuse" from client to server. In fact if you are reusing code from your client on the server, something is wrong and you might be better off keeping that code on the server. 
&gt;In fact if you are reusing code from your client on the server, something is wrong and you might be better off keeping that code on the server. Wow. If your application consists of a hefty amount of client-code and server-code, how the fuck do you a) not see the benefit of sharing/re-using code and libraries, b) see something wrong with sharing/re-using code and libraries??? Here's one niche use-case, that never ever ever happens: you write a client-side form/input validation library. Because you never want to just do client-side validation, wouldn't it be nice to re-use that same library on the server for validation as well? isn't it nice that you just had to write that validation library once. Isn't it nice that if you find a bug in that validation library, you just need to fix it in one place? Isn't it nice that you only have one set of unit-tests, instead of two, written in one language instead of two different languages? Isn't it nice that you don't have to serialize between one set of data-types and data-structures in one programming language to another? I think that's pretty beneficial. Isn't it nice to re-use your domain objects on server and client? I'm not saying that you absolutely need to work with the same programming language on server and client, but I think it's obvious, all things being equal, that it is a pretty good benefit.
Fair enough, I think your points are valid. Though i'm not 100% sold on the serializing benefit. Since almost always I'm sending JSON over the wire, but again those are valid points. Ordinarily, I like to keep both the backend and front-end very decoupled and avoid any code sharing. The React or AngularJS app communicates via a REST api and the backend can be whatever it needs to be.
&gt;Unfortunately the browser-side and server-side have some possibly important packages unavailable in either. Yeah? So? What does that have to do with anything? 
If you don't use those packages, you can easily use the same code on server and client. That's what it has to do with anything.
&gt; no sane developer would have ever deployed a dart only website Why would you anyways? Compiling to JS is one line in your build script. It looks just like the "dart2dart" line.
I'm glad they finally came and said it outright. Anyone doing serious Dart development knew this wasn't going to happen, ever. I'm not even talking about political issues, I'm talking about regular day-to-day issues: like, how exactly were you going to deploy a Dart application in this mythical two VM world? Two script tags? How are you going to make sure that Dart-supporting browsers know to load the Dart script but not its dart2js counterpart for non-Dart browsers? What happens when you _want_ to inject a dart2js compiled Dart application into a web page along with your own Dart code -- like, say, using a third party widget that's only available as dart2js produced JavaScript? That's a mess. No one wants to deal with that. It just isn't practical.
This is a step in the right direction, /u/Ihategeeks , I don't think this kills Dart at all. Dart is much more than a VM in a browser. All this does is let the Dart team focus on making better Dart2JS, Better Js-interopt functionality and focus on the VM for server-side deployment. DartVM in Chrome was always ambitious, it would have actually killed Dart if Google did all that work, put it in the VM, and no one used it. Thats wasted effort right there. /u/torokunai - I do believe getting the VM on mobile is part of the roadmap. But thats all as I can say right now about that. Bottom line is, Dart is not dead. Dart is an amazingly productive language, and keeps getting better. They just launched 1.9 yesterday with async/sync generators and other cool shit. 
&gt;All this does is let the Dart team focus on making better Dart2JS, Better Js-interopt functionality and focus on the VM for server-side deployment. That's great, except it was never the objective, it is also not what people want. I don't care about "better" 2JS, I don't even want 2JS. If that were my interest then I already have a lot of options that are more established and just as good. I have no interest in javascript at all, none. That is why Dart interests me. It "was" an alternative. It would have made it far easier to do real development in the web using an entire framework start to finish that never had to deal with javascript. Without the VM in Chrome, it is just another one of hundreds of 2js languages and just as irrelevant. https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS &gt;DartVM in Chrome was always ambitious, it would have actually killed Dart if Google did all that work, put it in the VM, and no one used it. Thats wasted effort right there. If you remove the VM from your statement, you have exactly what is happening now. Which is exactly the purpose of my comment. The VM in Chrome would have served 2 purposes. First, It would have shown Google was very serious about Dart and drawn major attention to it. Second, it would have allowed for actual development in a successful browser immediately. How you arrive at the conclusion that attention and immediate development aren't inevitable just baffles me. Almost as much as it baffles me to consider why you think people want better 2js instead. The entire appeal of Dart was to get away from javascript, not embrace it further. No language actually dies. There is a niche for everything I guess it is more accurate to say this language is never going to get a chance to live and thrive. So why should I invest time in it? Unsubbed. 
I was hyped when i heard HEY, cool, i'll be able to live edit, i can throw GWT away and gain a lot of productivity, and, until the VM comes to chrome, i'll only have to compile once. ... now i'm back to GWT. i'm very dissatisfied. The price of learning a new (cool) language was counterbalanced by the promise of reactivity when developing. it's now lost.
When Dart becomes mainstream, we will crush the evil JavaScript empire!
Dartium won't disappear. This productivity advantage will continue to exist.
What are you talking about? The benefit of using Dart on the server is exactly the same as using Node. You _can_ run the same code on the client and server. Only difference is that it gets compiled to JS on the client. I have many projects where all my value objects and utilties (written with Dart) are shared across the client and server sides, and it's amazing!
I've just updated my dart editor, but it doesn't seem to be recognizing await. Anyone else having this problem? I'm on (k)Ubuntu.
`await` can be only used in async functions. Hello World: import 'dart:async'; Future&lt;int&gt; willBeInt() =&gt; new Future.value(5); main() async { int x = await willBeInt(); print(x); }
Hopefully someone can update the Wikipedia article. That statement came from a leaked memo and is incredibly out of date and now incorrect.
sky is an experiment, and incredibly early at that. Still, pretty interesting to follow along.
Try [codio.com](codio.com), you can either use a blank environment and install dart yourself or they have a preset environment for dart.
Some libraries use Dart's factory constructors to give you different implementations of certain interfaces depending on whether your are on the client or server. Some imports are exclusive to either one, you get a static "red" warning on the editor and a runtime error during import.
I think the what's important about Dart it that it both scales thanks to good OOP (plus has some really nice goodies like async/await, cascade operator, terse syntax, etc) but it is flexible enough when needed. The problem with Node is JS (no news). Playframework looks fantastic, but has a lot of configuration and many options. Routes are not defined in the same file as the functions they execute (not fun going back and forth) and there is some optional (almost mystical) way of coding html straight from Scala, the learning curve seems high.
This is really cool. Thanks!
I agree with that the Seth Ladd puts pressure on those who is not pleasing to the Google Dart organization. Me personally, he tried to influence.
Of course, everybody can express their opinion(We are on reddit), but it should be done in a more a appropriate way. The problem with his/her opinion is that it's nonconstructive and just want to destroy with it. 
&gt; his/her You can just use the gender-neutral them/their. This isn't about feelings or opinions, by the way. He got kicked from Google's app store after multiple warnings for using the trademarks of others and impersonating other companies (e.g. Khan Academy). Posting this kind of bat-shit insane smack is his brilliant revenge.
&gt; Is this like the equivalent of nodejs for dart? The standalone Dart VM is the equivalent of Node.js. Node.js is V8 (Chrome's JS VM) plus libraries for doing I/O. The standalone Dart VM can do I/O out of the box. Like V8, the VM itself is just a library which you can embed in other applications. Just like Node, the standalone Dart VM is an application which embeds this VM and which then exposes some APIs to scripts running inside it. It's kinda like the DOM stuff you get in the browser. This too is something which was exposed to the engine. Redstone is a small framework for writing things like small web servers or web services. It's somewhat similar to all those Sinatra-style frameworks or Node's Express. The direct inspiration was Python's [Flask](http://flask.pocoo.org/). The basic idea of all those frameworks is that you just have to define some routes (with or without arguments) and their handlers. Those frameworks will then take care of calling the corresponding handlers whenever there is a request. For a simple service, you only need a few lines of code.
I think it's fine. In fact, I consider using it as a scripting language for different projects (as I really like the language), but it all hangs on the viability of embedding the VM. Right now it seems a bit cumbersome, perhaps, because it lacks good docs from devs themselves on how to embed the DartVM. Would really like if the devs actually put some effort in this area.
I don't think it's a bad move, because it's easier to make a good plugin than make a good IDE. It's all about not wasting precious resource, which is the developer's time/work. Why make yet another IDE, if there is already a great one which has really good support for Dart. Java has netbeans, but almost nobody use it(at least not where I work). The conference is all about using existing solutions instead of working against it. Using others power for our advantage is not a stupid thought.
gonna miss it, last year I prepared for my on-campus google interviews by doing toy problems in dart all day for weeks : ) 
In a way good. It's the same pattern they followed for android. They made a deal with intellij to create a nice development experience. I guess they'll let them make a smooth experience for dart too.. It makes sense.. IntelliJ knows their shit.
At the conference they made the point that the Dart Editor was trying cover the entire range of newbies to power developers and not doing a great job at it so they're moving tools to where you can use them from Sublime, Webstorm, Emacs, vim, etc. which is the Right Thing to do in my opinion (as an Emacs user).
Consider it like this. Right now, JavaScript is so much popular than Dart that even Dart developers have to answer JavaScript questions and probably support some JavaScript developments. In fact, some Dart users said before that they were using JavaScript for the "front-end" and Dart for the "back-end". If Dart had been made into the browsers alongside JavaScript, then it would be possible to both use Dart for the "front-end" and for Dart developers to answer more Dart questions given its higher popularity then. When I say deployed Dart I don't mean Dart that is packaged up in a JavaScript bundle file. I mean that the Dart runtimes are present. With the Dart Editor the Dart runtimes were present. It is possible that the alternative editors will pick it up from where the default editor left it off. But I'm not sure how integrated with the Dart site those options will be. Will a "Download" button on the Dart site lead to a packaged up alternative editor that includes the plugins by default? Anyways. It is possible that the changes will bring some benefits. And ultimately with Dart not making it into the browsers we have to deal with the fallout one way or another. It could be that Dart could help with more deployment opportunities by making the command-line tools more central. After all, Node.JS has come a long way with just command-line tools.
This was a great summit. There were a lot of really interesting topics this time. Gives me some good feels about the future of Dart.
The plugin for Eclipse is also still being actively developed. They are deprecating the standalone dart editor that is *based* on the eclipse.
Now Sky is what I've been talkin' about! Screw Cordova and all that stuff.
Not 100% sure, but I think IntelliJ is only missing support for CSS, HTML and YAML editors. All of the other analysis, refactoring and jump to definition features are there.
Yeah, pretty much something like that, but with proper strong typing, as opposed to ridiculous javascript magic string based crap which offers no safety and has no autocomplete support or proper tooling. And NO I wont use alpha crap, I only trust established products or at least anything that has reached version 1.0 status.
It's all open source. Anyone can go fork it and make a Google independent version. http://en.wikipedia.org/wiki/MariaDB http://en.wikipedia.org/wiki/LibreOffice
pffff.... TL;DR? I'm not going to watch a 30 minute long video about a technology I don't give a fuck about. I'm already using Xamarin to create cross platform mobile apps. I don't need this shit.
&gt;&gt; Javascript &gt; Good luck with that. There is no JavaScript. &gt;&gt;It's just like a Web browser &gt; Which means it isn't really an "Android app" anymore, but a stupid HTML website. There is no HTML. It uses XML fragments to create trees. Well, *some* of the demos do that. One &lt;sky&gt; element with the "main()" entry point seems to be all you need though. The [stocks demo](https://github.com/domokit/sky_sdk/tree/master/examples/stocks) is like that. The Sky engine is C++ application which uses Dart for scripting the UI stuff. The framework comes with a set of Material Design widgets which are written in Dart. While you can generate tracing files which are compatible with Chrome's dev tools, there is no browser running on the device. This also isn't sandboxed. You can use anything the OS provides and you can have additional business logic in any language you want.
actually Dart is a much better language than C#. I love just declaring arrays like [] instead of calling a constructor and stuff. What Sky is basically an interop layer very much like Xamarin's binding projects so Dart executables can call into ObjC, Java, etc. Combined with a tight rendering loop approach, this is very appealing to me. C# could use a few more iterations towards where Dart is, and Dart could use C#'s universality, which is what the Sky project is working towards.
&gt; And NO I wont use alpha crap Uh. No one would suggest to use it for anything other than toying around. It's purely experimental at this point.
&gt; There is no JavaScript &gt; There is no HTML &gt; The Sky engine is C++ application Now I'm starting to take it seriously. Thanks. I'll delete my previous uninformed trolling. &gt; Dart for scripting the UI stuff Looks nice and usable, much more so if the tooling (a proper IDE with Intellisense) is capable of supporting this and giving a pleasant dev experience. For instance, the `import` syntax really needs autocomplete.
Unfortunately, the "free" alternatives have yet to create a compelling platform. Corporations are concentrations of capital, management, and labor that create salable products. Without corporations we would still be in the middle ages. Apple productized both the microcomputer with the Apple II and then the GUI with the Macintosh. These were very expensive for the time but gave its userbase and developers great, immeasurable utility. I'm not the world's biggest fan of Microsoft, but the best that can be said for them is they forced Apple off their sky-high margins with their Mac-knockoff Windows 3 and 95 consumer OSs. Google, they're an odd beast. I had no idea 10-15 years ago that search would be so profitable to anyone, but in retrospect it makes perfect sense of course. They bought Andy Rubin's follow-on company to give them their own foothold in mobile, and when the iPhone came out they realized they needed to pivot and copy iPhone OS just like Microsoft copied MacOS twenty years earlier. Google has yet to do anything all that compelling for me -- I have yet to buy an Android product, but I think they're moving in the right direction with ChromeOS and Dart/Sky. When I interviewed at Google last year I tried to pitch to my interviewers the need for a more universal and performant PC platform -- that Google had the pieces of what would amount to this millennium's version of the Amiga 500 but they needed to focus on putting together the full package. I'd love to see a Kickstarter of a "Free" project from the ground-up putting together a compelling, competing platform to the iOS / Android duopoly. Something at the $300 pricepoint that would plug into a TV and give people a decent PC, more performance than say a PS4 for gaming yet good API to let ISVs make great apps for customers. (Ironically I think this is exactly what Apple is going to announce next month at their WWDC) But to answer your question, yes, I like App Stores that are locked down and policed, since the alternative is just scammers and shovelware overwhelming the good stuff. Perhaps Google was too heavyhanded with you, lord knows they are not a responsive company to people they step on, but this should have been something you were aware of when you first joined on as a Google ecosystem developer. Their ecosystem, their rules.
&gt; I'll bully the community until my account gets back on. Again, no one here has anything to do with that stuff. Secondly, you are a legal risk. No one in their right mind would reenable your account. Ever. &gt; I fight back when bullied. You got kicked because you impersonated other companies and violated their trademarks. 3 times. You do realize that you forced their hand, right? They *have to* act or they'll be held liable. YouTube is also like that. If your videos violate some copyrights or whatever, they'll be taken down. If that happens a few times, your account will be suspended. This is something they have to do. If this were completely voluntary, they could make tons of money with pirated content. Any app store is like that. They all have to play by the rules.
The summit was amazing, glad to see all the talks got recorded and put online so swiftly. Unfortunately the break-out sessions and lightning talks didn't get recorded this time. Hard to say what was most awesome, I especially enjoyed the real-world Dart usage talks and the tooling related talks. Observatory is very impressive, would have loved a talk by the analyzer team or a trivia talk about language design and how Dart relates to other languages (like Bob's talk from StrangeLoop). Looking forward to the next Summit already :D
I'm using the IntelliJ Community Edition (actually even an early preview version) and it works well :)
One of my main take-aways from the summit is that the Dart team is huge and the people are absolutely brilliant and that they've made a bunch of strategic decisions to put their talent to better use like you said. These shifts in focus are tough to make but can make a huge difference.
At Blossom we *do* use Dart on the front-end (and right now Python on the backend, but also looking at Dart here). We also use IntelliJ/Sublime/Atom for writing Dart code. Now that the analyzer is written in Dart and became a stand-alone service we will see more and more support for various IDEs/Editors going forward (eg the analyzer is being used by DartPad and Sublime).
My dad works at Nintendo. I already got the next Pokemon game. LOL. &gt; Also, to clarify I never impersonated anyone. You used the names "Kahn Academy" and "Vice TV" (for vice.com). How's that not impersonating them? You used their names. You created apps which, going by their names, looked like official ones. Also: *"No one told me there is a 3 strikes and you’re out policy when it comes to app suspensions. I thought I could get maybe 20-30 apps suspended without repercussions."* You had 10 apps like that, 2 got suspended, and you didn't bother to take care of the other 8 which were just like those 2 which got suspended. *"I thought I was innocent. I was accused of trying to impersonate another company and in my mind I was in no way trying to give that impression. If I misunderstood what impersonating means, well sorry I’m not a lawyer and don’t know exactly where the line is drawn. Fair use, is this fair use?"* No, it's not [fair use](http://en.wikipedia.org/wiki/Fair_use). Anyhow, the content policies do explain what impersonating others means. They also mention that your account will get terminated for repeated violations. You simply didn't bother to read it. And then you didn't bother to figure out why they said you were impersonating others.
Honest question - what extra features does IDEA have, over and above Webstorm that would be useful for Dart development? Note - I don't need any Java features. I've also heard that Webstorm has some simplifications about project setup etc, and that some find IntelliJ more complicated to use. But I have only used IntelliJ CE, so I am not aware of the differences. https://www.jetbrains.com/idea/features/editions_comparison_matrix.html https://www.jetbrains.com/webstorm/features/ Edit: SQL editor support is missing from WebStorm - that would be useful for me 
based on websockets
I don't think they exist, but you could start coding new parts in Dart
Going forward it should become easier to provide Dart code that can be consumed from JavaScript. The Dart team is working on better interop :)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**AtScript**](https://en.wikipedia.org/wiki/AtScript): [](#sfw) --- &gt; &gt;__AtScript__ (now defunct) is a [JavaScript](https://en.wikipedia.org/wiki/JavaScript) based [scripting language](https://en.wikipedia.org/wiki/Scripting_language) extending [Microsoft](https://en.wikipedia.org/wiki/Microsoft)'s [Typescript](https://en.wikipedia.org/wiki/Typescript). AtScript is created by [Google](https://en.wikipedia.org/wiki/Google), it was announced in late October 2014 at the [ng-europe conference](http://ngeurope.org/). &gt;AtScript was created by Google's [AngularJS](https://en.wikipedia.org/wiki/AngularJS) team as the language of the upcoming AngularJS 2.0 web development framework. &gt;The public language specification is currently a [draft](https://en.wikipedia.org/wiki/Draft_document). It states that plain JavaScript code ([ES5 or ES6](https://en.wikipedia.org/wiki/ECMAScript)) is valid AtScript code. AtScript is a [superset](https://en.wikipedia.org/wiki/Superset) of Microsoft's TypeScript. AtScript builds on ECMAScript 6 with types (through TypeScript), and extends it by [annotations](https://en.wikipedia.org/wiki/Java_annotation) (type annotations, field annotations, metadata annotations) and type introspection. To sum up, AtScript is ECMAScript 6 with types, annotations and introspection. &gt; --- ^Interesting: [^JavaScript](https://en.wikipedia.org/wiki/JavaScript) ^| [^Adscript](https://en.wikipedia.org/wiki/Adscript) ^| [^Scripting ^language](https://en.wikipedia.org/wiki/Scripting_language) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+crj27ws) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+crj27ws)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I would like to have the knowledge to say "Wow, its better than the other language because of this and this bla bla..." Haha :( someday...Maybe
dart-js-interop (`dart:js`)
A lot of features got added and improved over the last few days since Devon (DartPad) started to contribute: https://github.com/radicaled/dart-tools/blob/master/CHANGELOG.md
Would this work with Nuclide?
Big props to those that have been working on this the last few days to improve it! So much stuff going on that it finally got me to disable email notifications from GitHub (I'm watching the repository). I used it in the past and it seemed to work pretty well at the time. I haven't tried it in the past few days, but I'd recommend it.
Its a thought I get from time to time. My reason is that my backend is also in Dart, so I share libraries, clases and some functions.
Wow, if you want to get a job at Google, this public repo is a great open door of opportunity!
Contributing directly to a Google project is a good way to get on their radar though. Especially if it's a meaningful contribution.
GitHub over time became *the* platform for open source projects. It used to be all over the place but it seems like almost all major projects are consolidating on GitHub. This means it gets way easier to follow and contribute to projects on GitHub because you don't have to learn new tooling, workflows and concepts. For me it is a major UX improvement and that's why I am excited about it.
I also think it is a great way to get on the radar of many companies beyond 'just' Google (in the Dart space and in general). People (recruiters, devs, team leads, founders, …) browse GitHub profiles and open source projects and look at contributions and many other things (e.g. how people behave in code reviews, discussions etc etc). People showing interest in and contributing to newer languages are interesting because it can be an indicator that they are passionate developers (who don't only look at what they *have* to know because of "work"). Related Paul Graham article: http://www.paulgraham.com/pypar.html
I don't know if I understand your logic. Google like any other company has an interest in hiring talented people. There are a lot of ways to contribute to open source projects in meaningful ways (meaningful to "Google" (whatever that might mean), meaningful to the "community" etc). Kevin Moore was a contributor to Dart and its ecosystem and is now a Googler. I also guess that Google hired people who used to contribute to Chromium or WebKit or other open source projects that are interesting to Google. Why wouldn't you?
There are companies who use Dart and who are hiring. But even companies who are not using Dart yet should find people interesting wo contribute to open source projects like Dart &amp; packages on pub don't you think so? I know quite a few people who got hired by companies because they were contributors to new programming languages (unlike Dart with virtually no use in production) and their ecosystems (that's how the companies found them). I'm not saying it is *the* strategy to get hired but you could definitely do worse :) How do you define "good job" and "popular software project"?
That url gives me a "That post cannot be found"
http://crossdart.info CrossDart Cross-referenced Dart's pub packages This is about it? Good. But looks not very nice. 
Oh, that's bummer, wrong link :( Let me recreate it.
Wow, this is amazing. Like a code-wikipedia for Dart.
&gt; If "Date" is the constructor, what's the class? Just like JavaScript: `Date` and `Date()`. Nice and simple. &gt; So, there really is a good reason why this looks different. new doesn't really have anything to do with this. I don't care about passing around references to arbitrary language elements, though. This is a general purpose solution looking for a general purpose problem. The issue is that this whole thing came about because people wanted to be able to pass constructors as if they were functions, because there are some codebases that use static methods instead of constructors because static methods can be passed around directly and constructors couldn't. EG, I have tons of method signatures that look like this: ``` static Model fromJson(Map data) { /* ... */ } ``` Passing around a static function instead of a constructor lets you integrate cleanly with Stream-based programming, but now you have the upfront burden of deciding whether something that returns a new instance of an object should be a constructor or a static function that calls a constructor. With this new solution you still sort of have that issue, because now you need to decide if you want a codebase full of `Model.fromJson` or `new Model.fromJson#`, and one of those is both harder to read and harder to follow. Theoretically fantastic, but realistically not what I wanted to see.
&gt; Just like JavaScript: Date and Date(). Nice and simple. Well, there won't be a Date type in JavaScript. There aren't types. Date is a constructor function. That's all it is. So, naturally, there is no difference between the constructor and the class because there is only that function. Speaking of "nice and simple", JS got things like `document.querySelector.bind(document)` or `::document.querySelector` (ES7 proposal). You don't have to deal with that in Dart. &gt; I don't care about passing around references to arbitrary language elements, though. Why are we talking about his particular language feature then? &gt; but now you have the upfront burden of deciding whether something that returns a new instance of an object should be a constructor or a static function that calls a constructor. Something which creates a new instance should be a constructor, because that's what constructors do. A static function which calls a constructor is obviously a workaround.
&gt; x is a Type. Instead of a `Type`, it could be the instance of Date's metaclass. That metaclass could in turn implement `call()` to construct new instances.
No info about the IDE disappearing?
http://news.dartlang.org/2015/04/the-present-and-future-of-editors-and.html The Eclipse plugin still exists and they will continue to support it. Eclipse with that plugin is essentially the same as Dart Editor except that the menus are more cluttered. If you want to try the Eclipse plugin, make sure that the SDK is in *eclipse/dart-sdk* and Dartium needs to be in *eclipse/chromium*. Then it will work fine.
&gt;&gt; Last commit was 4 days ago. O, yes. One byte was changed from "http" to "https". Very hard work. But prevoius was 14 days ago and 50 lines of code was added. Very very hard and ptoductive work. Previous previous commit was 26 days ago and two (2!) lines of code was added. Very very very hard and ptoductive work. I agree work in full swing. Jun 23, 2015 (4 days ago) 1 brilliant bytes was changed Jun 12, 2015 (14 days ago) 50 lines of code was added. May 29, 2015 (26 days ago) 2 lines of code was added. 
All of the heavy lifting is now done by the analysis server. The plugin is pretty much done at this point. Also, if it contains so many bugs, why didn't you file any? There is only one issue filed by you where you complain that there aren't more commits. Of the 7 currently open issues only 3 are bugs (#4, #5, and #9).
&gt;&gt; Also, if it contains so many bugs, why didn't you file any? I already report more than 200 issues to google.code (prevoius Dart hosting). And what happens? Nothing. Google Dart developers are reluctant to fix bugs, if they does not affect a large number of users (this is their words but not my, they can be found in the mail lists). It is useless to report bugs because you will be wasting your time for nothing (because a Dart plugin has a small number of the users and bugs will be ignored as always by Dart developers). P.S. Most of the bugs related to Dart Editor also related to Dart plugin. All my bug reports and not fixed bugs to Dart Editor (read to Eclipse plugin) now safely forgotten when Dart SDK was moved to Github. Why I should re-report them again in new repository? This is job for Dart developers to filter them and move to the new repository (to successor of Dart Editor).
Full disclosure: I wrote the article, so it's a bit of tooting my own horn. Fun fact: The original version of the tutorial used Jetbrains WebStorm as the editor, but SitePoint's editors rejected that because WebStorm is commercial and a large download. They were willing to publish the tutorial if it used Sublime Text, though.
What do you want improved? 
I want it to be more aware of Darts libraries and how projects are structured. Right now it gives me errors for random little things. I want it to scream at me a lot louder when it detects an error. I want a much improved auto complete. I heard they are overhauling it, so i have hopes all of these will come true.
Oh ok thanks that makes more sense. 
Unmodifiable Lists are something like the Built Collection package?
Dart is a fantastic and fun language... for people already very familiar with web programming. I'd use a more mainstream language if you don't have much experience. Python and Ruby are good choices, since they have large, active communities and lots of documentation and resources. JavaScript is a little wonky, but since you have to do it anyway for web programming, it's not a bad choice, either. Besides, you computer is already setup to work with it :) If you're a novice to programming, I'd stay away from fringe technologies like Dart, Go, Rust, etc. Pick something mainstream. Later, after you've written enough code to have strong opinions, you'll be in a much better position to evaluate fringe languages on their merits, and deal with the problems associated with fringe technologies.
Honestly as long as you pick a good language to start from, I think you'll be fine whatever you pick. Dart is a fine language to start from. Other fine languages include C++, Java, C#, ObjectPascal, Python. You want to avoid bad languages like Basic, PHP, or JavaScript as your first language, because they'll give you a bad intuition. You also want to avoid complicated languages like Perl or Bash, because while they are able to be used in sane and powerful ways, they have no handrails and thus it's hard to really _learn_ from them. Go is a reasonably language to learn early, but be aware that it does things a bit differently than the other ones so maybe wait until you're comfortable with one of the other mainstream languages before going there. I'd recommend learning Lisp, Scheme, Haskell, or other more "academic" languages as a second or third language, because they'll introduce you to concepts that are very useful. However, as languages themselves they are rarely useful in the real world. (I don't personally have enough experience with Ruby or Rust to know where they would fit in this scheme.) Edit: Regarding Dart specifically, I wouldn't recommend using it in the "dart2js" mode. If you are specifically looking to code for the Web, I'd recommend sticking with JavaScript. You want to limit the number of unnecessary layers involved when writing applications.
The [Dart Pirate Name tutorial](https://www.dartlang.org/codelabs/darrrt/) would be apt for you. I would say that if you wanted to know or understand programming concepts, you'd be better off served by Python. **BUT** if you wanted to be productive and get things going *immediately*, then Dart is an excellent choice because of the tooling provided (Dart Editor). 
I'd say exactly the opposite. Dart is a well-designed language with a nice type system and it supports object oriented and functional paradigm. It is easy to build asynchronous applications thanks to dart:core's Future API, whereas Python defaults to blocking API and requires some magic like coroutines to build a nonblocking app. It can run on both browsers and servers, which is a plus for those who want to study programming on different environments. But if you want to make something and get thing done quickly, Dart cannot beat the productivity of Python. Python has broad and mature choice of libraries (PyPI has 62359 packages as of now), but Dart pub lists only 1730 libraries and I wonder how many among them can be considered "stable". There are tons of Python resources for beginners to find, much bigger community wherever in the world. Although it has In terms of tooling, Python has a whole lot more diverse and stable editor support, IDE integration, CI integration, test tools, linters - virtually everything. It's not that Dart cannot win Python and I love Dart, like million times more than Python, but it's just that hard for a 1-year-old Language to beat a 20-year-old one. FYI, Dart Editor is a clumpy Eclipse plugin which is now [obsolete](https://www.dartlang.org/tools/editor/) and the Dart team recommends JetBrains' WebStorm which has Dart plugin, but JetBrains has a separate product for python- PyCharm. 
Learn python first, then Dart, then JavaScript.
I see. If you don't mind me asking, how does it compare to Go in turns of a long term survival? 
Except JS semantics are even more bonkers than Python. Dart is design to not have bonker semantics (unsupring language or something like that I think it was called)
&gt; Dart is client side There are two Dart VMs and a to-JS compiler. You can use it everywhere and for whatever you want. The standalone VM which is shipped with the SDK is basically like Node. It can do I/O. You can use it to write command line tools and web servers. You can even load native libraries if you want. The other VM is for restrictive environments like iOS which don't allow JIT. Both VMs are libraries which can be embedded in native applications. &gt; if Google doesn't keep [dart2js] current you're left in the weeds to deal with a machine translation of your Dart code in order to move forward. You can just continue to use the current one for as long as you like. All of Dart is open source, too. So, that kind of risk simply doesn't exist. Secondly, the new dev-compiler produces JS which is closer to handwritten JS. &gt; hand modifying machine translated code There will never be a reason to do anything like that.
&gt;&gt; if Google doesn't keep [dart2js] current you're left in the weeds to deal with a machine translation of your Dart code in order to move forward. &gt;You can just continue to use the current one for as long as you like. All of Dart is open source, too. So, that kind of risk simply doesn't exist. You have to accept that modifying a Dart VM might be beyond the capabilities of many developers. Google does drop projects, and if Dart does get dropped you have to weigh that cost vs the cost of simply using Javascript. &gt;Secondly, the new dev-compiler produces JS which is closer to handwritten JS. &gt;&gt;hand modifying machine translated code &gt;There will never be a reason to do anything like that. Depends. Assume Google abandons Dart, bugs are discovered that cause problems and dealing with dart2js is beyond your means. For small bodies of code, rewriting into Javascript is easier. Large code projects have to face the possibility of modifying the code generated by dart2js. You might say this is a lot of ifs, but I've faced this with other technologies. Google has decided not to bundle the Dart VM with Chrome, so you can forget about Dart being an alternate language for the internet. Does the FUD of using Dart outweigh any development efficiencies over just using Javascript? 
If dart has dropped support for IE9, is it a good idea to choose dart for an office where the primary browser is IE9? Even if there is a workaround that would work for now, there is no guarantee that it would work forever. You could be left with a project that couldn't be developed further.
Agreed. Dart is not a good choice if you have to support older browsers.
It's a great language, and we've built several nice web apps on it, but Google's giving up on it and not including an IDE in the newest version has meant we've had to give-up on it too. Google gave-up on it, so new users giving-up on it too isn't to be unexpected.
Just use vi and look at the warning "pub build" gives you. Yes, it's annoying to lose the IDE, but I don't think most developers were using it anyway. Losing the debugger is a major blow, but you can get by without it.
I am really really sad to hear that Dart is IE10+ now. I wanted to push replacing our traditional jQuery+Mustache setup with Dart in our product, but we need to support IE9+ for business reasons.. crap.
Yeah. I know about the editor because I'm still actively using it. Didn't see why they'd want to stop producing it if the plugin is based on something they still make the Dart Analysis Server. 
WTF dude, this comment is 2 months old. Also, what makes you think I'm not a programmer?
México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ =================================== México vs Cuba en vivo online @ http://mytvlive.me/ ===================================
AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4 AFL TV Link - http://www.edigitalplace.com/amember/aff/go/jawarder/?i=4
Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html Watch UFC 189 Live Stream &gt;&gt;&gt;&gt;&gt; http://tunetong.blogspot.com/2015/07/ufc-189-live-streaming.html
http://www.slideshare.net/RandalSchwartz/a-brief-introduction-to-dart is the slides.
Y U NO HD?
I started learning about erlang/elixir and I think a Supervisor tree for Dart would make using isolates easier. Althoug Dart's isolates model is more basic and flexible then erlang's actor model, so I'm not entirely sure about it. I think Dart needs parallel programming helper libraries, because it's really important, when even the cheapest computers are quad core by default.
haha this is going to sound mean, but stable bug free ones. The language itself is completely solid. I haven't had any problems with running my code, but most third party libraries I have used are riddled with bugs.
Reliable MySQL driver (sqljocky is still buggy and throwing internal exceptions from time to time), good typesafe SQL builder (like JOOQ in Java) and some ORM on top of that (like Skinny ORM on top of ScalikeJDBC in Scala). Really, lacking of good SQL ecosystem in Dart is the main blocker preventing using in on the servers widely. 
The equivalent of ActiveRecord: a slim ORM that generates optimal SQL for most basic queries.
I can empathize with your situation. In the past I had to support a vast user base with quite outdated OS + browser combinations. Is there a way to get your office to use Firefox or Chrome for using your application? I know it is not always possible. In some corporate environments it is hard to update the version of IE that everyone is using because of important intranet applications but at the same time they are quite pragmatic when it comes to using additional (more modern) browsers. YMMV of course but might be worth looking into.
Agreed. Dart desperately needs an Akka-like framework for concurrency.
This looks more like Polymer than a library to build desktop apps. I'm talking about building apps that don't run in the browser, but as a stand alone application.
It would really help if someone would make a swig output for the dart vm. You'd see a lot more wrappers for native libraries.
The Sky project's aim is to bring Dart to mobile devices, but I attended this year's Dart Summit and had a chance to talk to some of the developers, and they told me there's no reason it couldn't be used for desktop too. Sooo...it's coming. Hard to say how soon.
Yea honestly the MDL in general (not just the dart V), does really seem that 'lite' I was hoping for 90% of MDL to be pure CSS. What are you using it for? Random site Q, do you use AngularDart?
Is IntelliJ IDEA preferable to WebStorm? I just assumed since they're both Jetbrains products they'd behave similarly with Dart. Is this not the case? 
They behave the same as far as I am aware of. I used WebStorm before I used started using IDEA. Webstorm is cheaper and if you are only using it for web stuff it makes sense. I highly suggest you just purchase the IDEA instead of Webstorm. You can use it for soooooo many things!
I use WebStorm 10, which I recently purcharsed for Dart and Web development. It still has some rough edges but considering DartEditor also has quite annoying problems, WebStorm is more pleasant to work with. As others mentioned, it is possible to use Dart plugin with IntelliJ IDEA community edition, which is free of charge. As a long time Java developer, Dart plugin is still not in the same level of using IDEA for Java, IMO. But it keeps improving. I've filed a few bugs and enhancements to it, and responses were generally prompt.
Almost all (maybe all) of JetBrains' IDEs are based on the same infrastructure (IntelliJ Platform) open sourced under Apache 2 license. On the same base IDE, JetBrains ships different premium functionalities depending on the products. Such functionalities are implemented directly on top of the base IDE platform or as a plugin. Dart supported is implemented as a free plugin, so you may use any edition of IntelliJ IDEA or WebStorm to use Dart. But IDEA community edition lacks HTML/CSS/JS support. If you work with Java in addition to Dart, then IDEA Ultimate edition is the way to go, since it has most of functionalities in WebStorm together with plenty of Java support. Otherwise, I think WebStorm is quite good choice.
Emacs. :-D
We're still using 1.10.1 for the IDE. IntelliJ was just too slow and everyone refused to use it. I don't know what we're going to end up using. There aren't any good options.
Moving over to elm since they discontinued dart editor. Don't stand by me, I won't stand by you... 
Elm doesn't have an editor and there is only syntax highlighting for four editors. I don't really see how that would be a step up.
Love using Dart in WebStorm, myself. I was using WebStorm as much as possible even when Dart Editor was going strong, since WebStorm's HTML/CSS support was so much better. I'm not happy that Dart Editor was dropped, but since then the experience in WebStorm has only gotten better and better.
Atom is a fantastic editor. There's Dart tooling as well for Atom, but I'm moving my code over (just a few little games and such) because they had a good thing going, and are dropping support just to offload the labor of maintaining an IDE to somebody else. From here on out, Google will be able to shift more blame to IDEA whenever tooling isn't up to par, or broken, or outdated. I'd like to move away from Web development entirely, to be honest. Dart is nice, but webdev sucks. Never once have I finished a small app or game or something and thought "Well that went smoothly." It's always a mess, and the tooling is always shit. Another option, (not that I've explored this) would be to host your application locally, use Dartium and use an editor that interfaces through Chrome, and at least that way the entire process is contained in one window like with Dart editor.
&gt; From here on out, Google will be able to shift more blame to IDEA whenever tooling isn't up to par, or broken, or outdated. The heavy lifting is done by the analysis server which is also used by the Atom, Sublime, and Eclipse plugins. Dart Editor also used it and so does DartPad (remotely). TypeScript also does its tooling like this. The tricky stuff was done just once. Not only does this make it easier to get top-notch tooling for other editors, it also means that it's easier to keep them up-to-date.
`dart-mode` recently added support for Flycheck integration
Yeah I sadly haven't set up either syntax highlighting or flycheck yet. :-(
Did you try it? I couldn't get it to work. Flycheck kept saying it couldn't find the dart analyser
This is cool, good job!
I use Neovim with official dart-vim-plugin. :)
\o/
So much for that - https://github.com/nex3/dart-mode/commit/e338148bdb5ee190c30bb0fbea100b9806ea7108 EDIT: oh, that's flymake not flycheck EDIT2: Boom. I got it to work! Look at the errors in the Backtrace buffer (set debug-on-error and dart-debug to non-nil value). Updating to the latest master of dart-mode and the correct versions of flycheck and dash fixed the issues for me.
Wait are you saying the Dart plugin is better in Webstorm??
Nice addition! :) I did the visualization because I expected it to be a tad redder. Well, for a formula I just shot from the hip, it does a pretty decent job.