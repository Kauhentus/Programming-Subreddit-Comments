Sorry about that. Is there a list of things one should avoid using?
Fixed. Thanks for the comment, it led me to the [GhostText](https://addons.mozilla.org/en-US/firefox/addon/ghosttext) Firefox add on, which (for me) replaced the much missed ItsAllText add on.
Donald Knuth, is that you?
Email::Stuffer is dead simple. Then you need an SMTP server to actually relay the email to the intended recipient; you can use something like Gmail for this part.
Haha, I wish! 
Your Linux VM will have a mail server like sendmail or exim installed. Or, if not, it will be easy to install it.
It has sendmail. But I thought it wouldn’t be powerful enough. Do you think sendmail can handle multiple emails at once? 
Is it hard to setup an SMTP server? 
Yes, very. I really wouldn't go that route. Just use somebody else's managed SMTP service (e.g. Gmail).
If I don’t have an SMTP am I screwed? Just considering my option 
Sendmail can probably handle more emails at once than you're likely to send per day.
You've been very cryptic and vague about what you're trying to do and what your requirements are. My guess is that it's just because you lack a lot of the foundational knowledge needed to do something like this, so you may want to do some basic "Google research" to gain some clarity. I'm not trying to be rude, but it's difficult to help someone when they can't tell you what they're trying to do. SMTP is the protocol used to send email. Configuring an SMTP server that can relay email to other domains is very difficult. Most people just use somebody else's email relay, even when they're using a command line tool like `sendmail` (see here for an example: https://tecadmin.net/send-email-smtp-server-linux-command-line-ssmtp/). Perl can't help you get around this.
Thanks. I am lacking knowledge in this. But I will take your advice. I tend to jump the gun and look for solutions rather then doing research 
Yes, especially for someone of your level of knowledge. To preempt the peanut gallery – *installing* a server is easy, *configuring* it to: * operate in a abuse-safe manner * not getting immediately shitcanned/blackholed by the Internet janitors * make it more likely than not that messages are accepted by the remote server and delivered to inbox, not spam is so work intensive that many shy away from it even if they are technically qualified. It is better for you to delegate the problem to experts who know what they're doing: 1. You could befriend a postmaster in your local Linux user group who might help you out. 2. There are paid services who specialise in sending mail on your behalf, the recent HN discussion has some recommendations: &lt;https://news.ycombinator.com/item?id=19084525&gt; Consensus ist that Mandrill and Mailchimp are disqualified because they fucked up once too much. 3. Depending on some details you have not told yet, you might get away with sending messages through the mail server operated by your ISP. First read their relevant information on the Web or contact postmaster@, though. ---- Bonus for those who diligently read my ramblings to the end: [email hates the living](https://www.youtube.com/watch?v=4s9IjkMAmns) edit: apparently davorg is the peanut gallery. I am disappoint.
No problem. I know how it goes. If you're really curious about setting up your own SMTP server, arstechnica did a nice writeup of the whole process a few years ago: https://arstechnica.com/information-technology/2014/02/how-to-run-your-own-e-mail-server-with-your-own-domain-part-1/
FYI, code fencing (```) doesn't work for those of us on oldreddit, only indenting by 4 spaces unfortunately.
Anything in the [commenting format](https://www.reddit.com/wiki/commenting) page should be fine.
&gt; apparently davorg is the peanut gallery It's a fair point. But I was assuming `sendmail` running on a VM where only local processes can connect to it to send email.
[GoodData](https://gooddata.com) has a large part of the backend written in Perl.
Don’t do that.
Hehe, now let the parsing-html-with-regular-expression-argument begin, preferably ending with a link to the good old [stack overflow response](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags).
https://en.wikipedia.org/wiki/Cron
I use cron for a lot of things already but for some reason I had it in my head that cron was not about precision, which is sort of what I'm looking for. If anyone knows different I'll try to use it. I had just hoped to contain everything within the script.
that is correct, cron only guarantees that the job will start no sooner than the time specified. a number of factors can affect the start time of the job, such as system load, and even after the the job is started, the script startup time (think Moose) can add further delay. you might want to make your script a daemon and use Time::HiRes to sleep the required time before polls.
You could structure your script to run as a daemon that just loops with a Time::HiRes sleep and at the top of each minute forks itself. The child does the work of forking another child to do the ping and itself gather the result and exit. Your main process loop would need to include some child reaping. 
&gt; child reaping It would also get this off of my bucket list!
Check out [IO::Async::Timer::Periodic](https://metacpan.org/pod/IO::Async::Timer::Periodic).
Any of POE, AnyEvent, IO::Async can do what you ask. However, if your function call lasts exactly 60 seconds, offsets can compound. You'd be better converting your script to one that runs fully asynchronously. Can you post it?
Instead of this, check out [ojo](https://metacpan.org/pod/ojo).
Something like this: #!/usr/bin/perl -w use strict; use Time::HiRes qw(gettimeofday usleep); while(1) { my (undef, $usecs) = gettimeofday(); my ($sec) = localtime(time); # Sleep until the start of the next minute, down to the fraction of a second # Overshoot a tiny bit to ensure it wakes after the minute has started. usleep( ((59 - $sec)*1000000) + (1001000 - $usecs) ); my (undef, $nusecs) = gettimeofday(); print "Now it is: " . localtime() . " + " . ($nusecs/1000000) . " seconds\n"; } This will try to sleep until it's :00 seconds, and try to do it right until the start of the second as well. It intentionally sleeps one millisecond too long to try to ensure that the script doesn't sleep until some time like 10:45:59.999, and do a second loop at 10:45:59.001 
So why dont you run it in cron for a time slightly before the exact time you want. And then run a tight loop on your shell script and poll down to the exact moment you want to continue. Then you escape the loop and you are there.
That's clever. I hadn't thought of that. 
Or you can just use Time::HiRes in a loop. When the work is done, sleep the difference between now and the top of the next minute. If the timeout takes longer than a minute the set an alarm and eval the function that times out. 
If you want to deal with your command line options, use Getopt::Long. For splitting text, use Text::ParseWords. 
Thanks, I think Text-ParseWords will do!
yeah, perldoc -f split
[split like shell](https://stackoverflow.com/a/3212171/46395)
Sorry, I want to extract (unquoted) shell command line args for "another" application, not my script itself. That's why I needed another module or function than split or String::ShellQuote. (I don't need to escape a string and not split nor regexp was succinct to fulfill my need) Thanks.
You can add `$x =~ s/^\d+: (.*)/$1/;` right above the `print $out;`... like so $x =~ s/^\d+: (.*)/$1/; print $out; but, r u sure the number comes from this script? the quick skim through, and I don't see any numbers being added to the output :-/
It's my workspace names in i3 config, but if I remove the numbers in the config it randomly orders my workspaces
by adding: `$out =~ s/[\d:]//g;` &amp;#x200B; before: `$out .= "\n";` &amp;#x200B; I have it working pretty well.
This will remove any digits and colons in the string, no matter where they are. But as long as you know your data it can be good enough.
&gt; $x =~ s/^\d+: (.*)/$1/; No point using a capture group here. $x =~ s/^\d+:\s*//;
Why `$x`? There's no `$x` in the original code. And your substitution is more complex than it needs to be. I'd use this: $out =~ s/^\d+:\s*//;
yes, it was already mentioned. and for $x - it's a copy-paste error, I just did a quick test in console b4
&gt; I know some people will react to this with an automatic response 'never parse HTML with regex'. I wonder though, why talk in absolutes? Because for almost all cases, there is no need for the monumental complexity of trying to parse it with regex, and it's easier to start with the absolute then consider the alternatives once you know why you need them, especially when giving advice to newbies who don't know any better.
I would start with examining data in Excel -- are the datetime cells' format - a date or a text? you may need to do the conversion with extra modules, like DateTime::Format::Excel or something like that.
&gt;In another forum this Perl behavior is lambasted as "what a horrifying interpreter" &amp;#x200B; That's an opinion. Opinions are subjective. &amp;#x200B; &gt;while this may be *true* &amp;#x200B; Opinions are not fact, so they can't be "true" or "false". &amp;#x200B; &gt;I'm sure that this being Perl there are valid hysterical reasons for this behavior. &amp;#x200B; If you mean "historical", the reasons are outlined in the article - the Kernel will not correctly handle shebang lines of over 128 characters. So Perl had to. &amp;#x200B; &gt;Would it be correct to refer to it as an explanation? &amp;#x200B; Explanation of what?
I apologize for the flippant tone of my submission. I was irritated by the comments about this Perl behavior, however, I believe that a solid technical explanation coupled with an overview of the *historical* reasons for this behavior is the best way to proceed in the discussion. &gt; the Kernel will not correctly handle shebang lines of over 128 characters. So Perl had to. Great, that was my guess too! But I didn't know enough about it to state that in the discussion. So to restate my question: is the linked SO discussion a good pointer to the technical explanations on how Perl handles the 128 character limit of shebang lines in Linux? Or is that discussion general to Perl, and there are specifics on the Linux behavior (and maybe other Unixen?)
&gt; I'm sure that this being Perl there are valid hysterical reasons for this behavior. As far as I can tell, the first parts of this shebang parsing were added in Perl 3... and it's kind of hard to find information from 1989. I suspect it's because shebang processing across various Unixes was even worse back then than it is now. Even now, not all platforms do shebangs natively. Windows doesn't, for instance, so any native Perl for Windows would have to parse the shebang line itself. One nice thing about Perl handling it is that it works _consistently_ on all platforms. Fun fact, Perl even knows to parse non-Perl shebangs: &gt; If the `#!` line does not contain the word "perl" nor the word "indir", the program named after the `#!` is executed instead of the Perl interpreter. This is slightly bizarre, but it helps people on machines that don't do `#!`, because they can tell a program that their SHELL is _/usr/bin/perl_, and Perl will then dispatch the program to the correct interpreter for them. It would be fun to find out what led to that being added!
&gt;is the linked SO discussion a good pointer to the technical explanations on how Perl handles the 128 character limit of shebang lines &amp;#x200B; Yes it is.
Thanks for your answer and patience. I have incorporated your feedback (as well as that from /u/aioeu ) into a comment on the discussion in question. Perhaps typically, the main thrust of the article (that far-reaching changes to the Linux kernel are backported into previous versions without scrutiny) is lost in the comments in favor of dumping on Perl. Hopefully I have done my part in defending its honor.
nice intro, gives an overview and examples to get started the code for `-p` is slightly different than shown in the article, from [perldoc](https://perldoc.perl.org/perlrun.html#Command-Switches), it is while (&lt;&gt;) { ... # your program goes here } continue { print or die "-p destination: $!\n"; } for those interested in more detailed tutorial, I have one with [hundreds of Perl one-liners](https://github.com/learnbyexample/Command-line-text-processing/blob/master/perl_the_swiss_knife.md) on github as part of command-line-text-processing tools
Format is mm/dd/yyyy h.mm \a. So it looks like it’s a date. 
is it in this format when you print it raw to console? 'cause it could be stored in different format, and Excel just displays it in this format to you... 
Nice overview of CPAN / PAUSE. What is missing is the fact that PAUSE is also being used for Perl 6 distributions. And when you do `zef install P5localtime`, it will actually download that Perl 6 distribution from the nearest CPAN mirror. I think this is one of the better results of cooperation between the Perl 5 and Perl 6 parts of the community.
It's great to see a well written fresh introduction to the CPAN system. Perhaps you stopped where you stopped because it was already long but fwiw I was surprised you didn't have a paragraph or two about [cpantesters](http://cpantesters.org/).
[perl pie](http://technosophos.com/2009/05/21/perl-pie-if-you-only-learn-how-do-one-thing-perl-it.html)
Thanks. I did run this past #toolchain on [irc.perl.org](https://irc.perl.org) before posting, but you raise a good point. I was aware of Perl 6 distributions being uploaded PAUSE, but I did not know that they were already installable from CPAN.
This is helpful feedback. With all of the Perl-related CPAN services, it's hard to know where to stop. cpantesters might actually just need a post of its own...
Right. It would be great to see something fresh about it. The last blog post on the cpantesters site is from 2017. Btw, do you strongly prefer that stuff you write appears on your blog, or would you consider doing one or more writeups explaining CPAN, and how it's different from the analogous systems of other languages, for [opensource.com](https://opensource.com), despite it being a redhat vehicle?
Yes, I'm on UNIX and the output is the same as my .csv file. I did some research it has to do with how Excel handles dates and time, it stores them as a number representing the number of days since 1900-Jan-0. In my above code I changed any occurrence of "Value" with {Val} to get the unformatted value of the cell if it has an excel date. Now the issue is just converting it to MM/DD/YYYY...... For example '10/31/2011 0:00' becomes 40829 when I run my script.
I'm not too worried about where my writing appears. This latest one (and the next article) will be on my own blog because they were written for meta::hack sponsors as part of their sponsor level. Are you involved with opensource.com? If so, maybe PM me and we can figure something out.
To save a little typing, you can use `say "thing"` instead of `print "thing\n"` but you need to use `-E` in place of `-e`. For example, here's one I use to summarise a web server log by site section (the first part of the URL): `perl -nE 'm{ "GET (/[^/ ]*)} &amp;&amp; say $1' access.log | sort | uniq -c | sort -n`
ok, so this looks right. for example: C:\Users\usr&gt;perl -E "use DateTime::Format::Excel; my $dt = DateTime::Format::Excel-&gt;parse_datetime( 40829 ); say $dt" 2011-10-13T00:00:00 so, maybe in your loops check the current [cell type](https://metacpan.org/pod/Spreadsheet::ParseExcel::Cell#type()) and try to convert using `DateTime::Format::Excel` to the needed format?
&gt; This latest one (and the next article) will be on my own blog because they were written for meta::hack sponsors as part of their sponsor level. Huh. I didn't notice the "This post has been brought to you by ..." line till you've mentioned it. &gt; Are you involved with opensource.com? If so, maybe PM me and we can figure something out. No. To be clear, I'm not at all happy about redhat's behavior in relation to Perl. I just accept it for what it is, and have the sense that it would benefit Perl if opensource.com published good *fresh* articles discussing Perl's various moving parts. I've no idea how it works to get articles on there. And I'm now questioning whether I'm imagining things when I think to myself that u/liztormato said she got worthwhile exposure for P6 thru her article series there. But the latter is what prompted me to suggest it. Assuming I'm right (Liz?), perhaps u/liztormato could share here, and/or PM you, and it could work for you to publish a few CPAN related articles there?
[Neat.](https://i.kym-cdn.com/photos/images/newsfeed/000/714/215/281.jpg) Can someone package that up as distro Regexp-VLLB? Proposed synopsis: use Regexp::VLLB qw(pvllb nvllb); 'foobar' =~ /(?&lt;=foo)bar/; # true, 'bar' preceeded by 'foo' 'foobar' =~ /(?&lt;=fo+)bar/; # uh-oh # Compile error: Variable length lookbehind not implemented in regex m/(?&lt;=fo+)bar/ at … my $lookbehind = pvllb qr'fo+'; 'foobar' =~ /${lookbehind}bar/; # true I would do it myself, but I'm out of tuits and the expression needs a little bit of further research and polishing: * Capture names `a` and `b` are prone to collisions. Renaming them to something unlikely like `__vllb_rest_of_the_string__` and `__vllb_recurse__` does not look like a substantial improvement to me. What happens when you stick several of these into one big expression? I haven't tried, but if it's the worst case, then I think it's safest to use [gensym](http://p3rl.org/Symbol) internally and as a hidden side-effect create new strings used as capture names each time the procedure is called. * Bug: the last expression in the synopsis should just return a boolean value similar to the first expression, but it unexpectedly leaks a capture list.
Does the name "zef" have an interesting back story? I could not find anything browsing the GitHub readme. 
There is actually a feature in development to do this properly for 5.30 by Karl Williamson. He would appreciate any testing. https://www.nntp.perl.org/group/perl.perl5.porters/2019/02/msg253645.html
I remember that Ruth https://opensource.com/users/druthb encouraged people at YAPC in Amsterdam to publish on opensource.com. Here's a page on how to participate: https://opensource.com/participate
It isn't an acronym, nor is the name directly tied to package management. Its name is based on South African subculture -- I like the (vague) explanation given in the first 60 seconds of [https://www.youtube.com/watch?v=oXNDo5OZ8-E](https://www.youtube.com/watch?v=oXNDo5OZ8-E) &amp;#x200B; &amp;#x200B;
No mention of [PrePAN](http://prepan.org/)?
A way to avoid starting more than one process at a time: use Fcntl qw(LOCK_EX LOCK_NB); die "Another instance is already running" unless flock DATA, LOCK_EX|LOCK_NB; Will this work with the fork strategy?
I would need to see your code and the error but this works fine for me: `perl -MLWP::UserAgent -le 'print LWP::UserAgent-&gt;new-&gt;get("`[`https://example.com`](https://example.com)`")-&gt;content'`
That works to [example.com](https://example.com), so I guess my error is with the remote website. &amp;#x200B; LWP::Protocol::https::Socket: SSL connect attempt failed with unknown errorerror:1407742E:SSL routines:SSL23\_GET\_SERVER\_HELLO:tlsv1 alert protocol version at C:/Dwimperl/perl/vendor/lib/LWP/Protocol/http.pm line 51.
Any particular part of ActiveState? Do you mean https://www.activestate.com/products/komodo-ide/ for example? ActivePerl? Personally I'd rate it as zero, I don't use ActiveState anywhere - many years ago ActivePerl was partly useful on Windows, perhaps, but it's since been superseded in overall convenience by http://strawberryperl.com/, and with WSL presumably you can just run a Linux build of perl now.
Zero. When I have to run Perl on windows it is strawberry or running in Docker or the like
Good call. I will add this. Thanks!
&gt;SSL connect attempt failed with unknown errorerror:1407742E:SSL You might try updating Net::SSLeay, which contains OpenSSL. &amp;#x200B;
About perl: Long ago there was no alternative. And it was very tricky to build native libs. But now we've got docker, wsl and strawberry. Each is better than ActivePerl. I don't know if they provide something to their commercial subscribers, but it's hard to imagine what it may be. About Komodo: it was the best from my point before 2015. But it was just not enough. So now it's Intellij IDEA.
It's negative value. Anecdote documenting a waste of time: http://redd.it/8zmdcs#e2qmee9 It used to be good, now it's just a trap to extract money from fools who don't know better. Compare the following: * upstream Perl versions offered: any * upstream Perl versions supported: http://p3rl.org/policy (the current 28 and 26, older than that is out of support) * AS Perl versions offered: https://www.activestate.com/products/activeperl/downloads/ (24 and 26) ---- Modules * generic CPAN: unrestricted * AS PPM: &lt;https://code.activestate.com/ppm/dmake/&gt; modules for 16, 18, 20 are free to use. Versions 8, 10, 12, 14, 22, 24 are ransomware. Modules for 26 and 28 are not packaged. 
Adding to the zeroes :-) If I need Perl on Windows, I reach for [Strawberry Perl](http://strawberryperl.com/) (actually, I'd be more likely to reach for the [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/about) or a VM).
This Just Works for me: $ perl -MLWP::Simple -E'getstore("https://perlhacks.com/", "perlhacks.html")' Included in the LWP distribution is a file called [README.SSL](https://metacpan.org/source/ETHER/libwww-perl-6.36/README.SSL) which says this: &gt; As of libwww-perl v6.02 you need to install the LWP::Protocol::https module from its own separate distribution to enable support for https://... URLs for LWP::UserAgent. &gt; This makes it possible for that distribution to state the required dependencies as non-optional. See &lt;https://rt.cpan.org/Ticket/Display.html?id=66838&gt; for further discussion why we ended up with this solution. So there's a good chance you just need to install [LWP::Protocol::https](https://metacpan.org/pod/LWP::Protocol::https).
Wget or curl. No Perl required.
I wonder how many of the "zeros" officially use Perl in corporate environments :) AS exists, because corporations require tools to be supported, they need someone external to blame in case things don't work. There are so many bad products exists just because of this. ActiveState Perl is not a bad product, btw. But they are how they are because they will take responsibility when the stuff they provide doesn't work. And we all know that Perl and modules on Windows... let just say need some extra love to work sometimes. So, it would be awesome if you'd also add where you are coming from in your replies.
Some of my clients have preferred ActiveState because they develop on Windows and distribute to other Windows users. They don't want those user to install Perl on their own. Pointy-clicky stuff for people who don't know the application in in Perl is one such use case. &amp;#x200B; We really can't answer your question, though. You don't really care if it's worth it to other people; you care that it's worth it to you. Many people who will answer here are quite adept with Perl; they can handle much more than you'd expect normal people to handle. &amp;#x200B; As with anything, you need to figure out where your own pain points are. If one of the features or services from ActiveState match up with that, it may be worth it to you. Productivity is up to the personal tastes of your developers. Licensing value comes from your particular risk profile.
Didn't work. :( Thanks for the tip though. Same error
Thanks for the tip. Didn't work though. Same error. :(
see https://metacpan.org/pod/distribution/cpan-outdated/script/cpan-outdated
thanks! didn't know about this option, will try it out :-)
&gt;Minimal to no design, not responsive, etc. yes please. more of these websites
Another option is [Spectre.css](https://picturepan2.github.io/spectre/). Personally I usually end up using bootstrap because I need some prebuilt component it provides.
&gt; ActiveState Perl is not a bad product Sure, and that's why you can't have Catalyst-Runtime from the package manager. Or DBIx-Class. Or Moops. Or XML-LibXML. Or Plack. Or Log-Any… &gt; they will take responsibility when the stuff they provide doesn't work [Stuff can't not work when one doesn't provide it in the first place.](https://cdn.elgrupoinformatico.com/img/w720/Noticias/2017/02/roll-safe-meme-720x389.png)
Granted that most websites have crap CHI considerations. I don't think perl has a monopoly on this. I'd much rather use a "Minimal to no design, not responsive, etc." web site on all my devices including my mobile device than most of the shit "apps" or "mobile specific" sites I find in the wild. High on the list is blatant ignorance any kind of "accessible design" considerations. Second are assumptions about speed of connectivity and local processor power. Third is intrusive use of interactivity and deep nesting of frequently used actions. It seems that most people that have a UX title got their qualifications off the back of a cereal box. Let me get my job done. If you can convince my users that you can preserve and improve the utility of the UI by adding round corners and pictures of smiling hipsters then I'm happy to support it. 
No, they're crap if you're reading the internet on a phone 
like the google interface ?
well, yes - but if you don't try to read all the internet at once, they're usually good enough: mobile browsers are quite capable of handling text-heavy pages that allow the usual scroll/zoom functionality, for example.
Google interface is clean, responsive , designed specifically this way. That's why its looks nice and easy to use on mobile devices. The "no design" plain html is not: fonts dont scale, text may not fit on small screens, etc.
I'm not saying use the stuff u dont like. Im saying find the stuff you like, and that doesn't turn away other people. Otherwise all your efforts are wasted. You wont have any users to convince when your stuff will get so messy looking that its easier to walk pass it than take a look at. 9f course, if you are just practicing at something or doing stuff just for yourself, its fine, I guess. If you claim doing stuff for others, then dont think plain unstyled html will fly well. Tools exist to make your job easier to present your content, and if dont like some little thing a small customization will go a long way, yet you wont need to create stuff from scratch.
I understand that there are perfectly good reasons for not wanting to reveal the site here, but if you're willing to pm me the url, I'm willing to see if I can figure out what's going on. 
Couldn't agree more!
does anyone like material design...i cant stand it.
woooo
what is freenode. sounds like java scripts to me
[IRC network](https://freenode.net/) ... long predates Node.js
nah man, you want irc.perl.org #perl
Ok. Well, without seeing more of your code and the URL you're trying to fetch, I don't think there's much more anyone here can do to help.
* &lt;http://perl-begin.org/FAQs/freenode-perl/&gt; * &lt;https://webchat.freenode.net/?channels=perl&gt; Freenode is the IRC network dedicated to all kinds of Free and Open Source software projects and programming languages. ---- * &lt;https://irc.perl.org&gt; * &lt;https://kiwiirc.com/nextclient/irc.perl.org/#perl&gt; irc.perl.org a.k.a. MAGnet is the IRC network dedicated to Perl programmers and enthusiasts. There are a few social channels and numerous Perl-related software project channels.
Not when it results in teeny tiny font sizes, or constant back and forth scrolling.
&gt; teeny tiny font sizes zoom &gt; constant back and forth scrolling let the browser reflow text according to current size HTML+CSS have had a few years' experience at dealing with text, left to their own devices they're really not that bad at it.
Zoom causes back and forth scrolling. &gt;HTML+CSS have had a few years' experience at dealing with text, left to their own devices they're really not that bad at it. Right, this is responsive, which was being argued against. There's no need to have a newspaper and a paperback formatted the same.
You really don't.
Absolutely. I'm an absolute design doofus. But since I discovered Bootstrap all of my web sites look at least vaguely acceptable :-)
"State free queries" are good for a REST application; they are useless, at best, trolling at worst for a post. What is your context? Are you a Perl guru, novice, in between? Is this for your own tasks or for you job? Are you working with your IT department or trying to end run them?
By "not responsive", you mean a website that a mobile device assumes is expecting 800/1024 pixels of width. The mobile device does this by rendering the site as though the window was that large and then "zooming out". So, the only way to read the text on that site on a mobile device is to zoom in, requiring you to scroll horizontally for every line. No. Indeed many of the problems with viewing a text-only website on a mobile browser can be solved with one single line of HTML (`&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;`), but that would make it "responsive" (which you don't like).
Mobile browsers do not zoom by increasing text size. This problem can be solved with one line of HTML (`&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;`), but that makes the site "responsive", which you said you don't want.
I guess that I'm confused about the websites you are focusing on. Can you share a couple examples of "Minimal to no design, not responsive, etc." web sites? Then maybe we can have some meaningful dialog.
Why are you telling me what I mean? I don't even know what the OP intended when he said "non responsive". I'm guessing he is talking about page layout in mobile browsers on pages using semantic markup with no custom css. I'd have expected that even mobile browsers would try to do at least a passable job of page layout of semantic html. You are telling me that's not true? I'm shocked.
"Responsive" is a word with a definition. If you don't know the definition, then how do you have an opinion on it? Here's an MDN article about the `&lt;meta name="viewport" ...&gt;` tag that explains what mobile browsers have to do by default: https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag
I prefer the appearance of depth, myself. Material is too flat, with too much emphasis on shadows (which only provide contrast on some parts of the element).
i see you dont disagree with minimal.
it's a place where you can pick your nose and no one will know you are even doing it!
man I wish some of the female shirts were male, esp the green one - maybe I should change genders...
Woo only one of mine is in this group. I’m going to take that as mine are collectors items and not to be sold because they’re too awesome to get rid of.
You should try my ultra-freenode where you can pick someone else's nose. 
"Minimal to no design" is not the same thing as "minimal". Plenty of design thought went into the minimal Google front page.
Komodo was one thing I was curious about too, since it's hard to find good Perl support in text editors/IDE's these days. How does Intellij do?
Just fine. Writing it myself. See [https://github.com/Camelcade/Perl5-IDEA/wiki](https://github.com/Camelcade/Perl5-IDEA/wiki)
Did you run cpanm with -v for verbose? If so where did it pause?
Maybe try with just cpan instead of cpanm see what output you get. 
The question contains no information that would enable us to reproduce the problem or guess at the help. Please provide the cpanm log. ---- To make better help requests and bug reports in the future, please read: * &lt;http://www.chiark.greenend.org.uk/~sgtatham/bugs.html&gt; * &lt;http://www.catb.org/~esr/faqs/smart-questions.html&gt; * &lt;http://sscce.org/&gt; * &lt;https://web.archive.org/web/2013/http://support.microsoft.com/kb/555375&gt; * &lt;https://web.archive.org/web/2010/http://msmvps.com/blogs/jon_skeet/archive/2010/08/29/writing-the-perfect-question.aspx&gt; 
Please add http://xyproblem.info to your URL list, I find it invaluable.
Platform? Despite Perl being pretty cross-platform, installation typically is not.
Obvious questions: what is are you on, what user are you running as, and what command are you running (options, etc). 
Sorry for being too vague. I’m trying to install this package https://metacpan.org/pod/IO::Async::SSL. I installed perl via arch repos. I’m running arch Linux x86_64 on kernel 4.20. I’ve tried installing via both cpan and cpanm and neither can install this package. 
Post the log if you know where it is (on build failure it will tell you, but your build is stuck so this might be more difficult to figure out) and try again with \`-v\` in your cpanm args so you have a better idea of what's going on behind the scenes as its happening. &amp;#x200B; Also, this is anecdotal, but I've seen a modules where tests will freeze indefinitely when installing normally but suddenly finish and pass when cpanm is called with -v.
Oh, I think that is where t froze: with tests. I’ll make sure to try that as soon as I can. Thank you for your help. 
Please provide the cpanm log. [Last time](http://redd.it/adl0w8#edsfp1j) it took only about a quarter hour to identify the problem and answer with the correct solution.
Where can that be found? The build didn’t fail, it just never completed (on a package that should not have taken that long to build). It was stuck during testing. 
See directory `~/.cpanm/` and fish out the correct file. ---- You can also abort the stuck processes and start over in verbose mode: cpanm -v IO::Async::SSL The output will go entirely to terminal, where you can save it as a file or copy to clipboard.
Alright, I did that, and got this which seems like it might mean something: ``` Configuring Net-SSLeay-1.85 ... *** Found OpenSSL-1.1.1a installed in /usr *** That's newer than what this module was tested with You should consider checking if there is a newer release of this module available. Everything will probably work OK, though. *** Be sure to use the same compiler and options to compile your OpenSSL, perl, and Net::SSLeay. Mixing and matching compilers is not supported.``` Here is the full output: https://pastebin.com/LT1kwWKS.
Confirmed, I also see it with 1.1.1a. Test file `t/local/07_sslecho.t` hangs after test #19: &lt;https://metacpan.org/source/MIKEM/Net-SSLeay-1.85/t/local/07_sslecho.t#L80&gt; Report this bug: &lt;https://rt.cpan.org/Public/Dist/Display.html?Name=net-ssleay&gt; ---- Meanwhile, ask your fellow Archers whether it's possible to downgrade OpenSSL to a version that's delectable to Net-SSLeay (my system installation has 1.1.0i, no problems); or failing that, what they would recommend to temporarily install your own OpenSSL in such a way that you can get rid of it later cleanly.
&gt; # $_-&gt;{array} contains an arrayref &gt; @x = pairwise { $a + $b } map { $_-&gt;{array} } @array_of_hashes Then you need to dereference that arrayref. @x = pairwise { $a + $b } map { @{$_-&gt;{array}} } @array_of_hashes
No, it's prototype is `&amp;\@\@`. If you just pass two unnamed list there's no way for it to tell where the first one ends and the second one starts. https://perldoc.perl.org/perlsub.html#Prototypes
Unfortunately, I've tried that and gotten the same result :/
ugh, that's unfortunate. Means that I'll need to just write this by hand, I guess.
You can do this if you're sure your array has two things: my ($first, $second) = map { @{$_-&gt;{array}} } @array_of_hashes; @x = pairwise { $a + $b } @$first, @$second;
Oh, sorry. The error is right there: &gt;Type of arg 2 to List::MoreUtils::XS::pairwise must be array (not map iterator) **Type of arg 2 to List::MoreUtils::XS::pairwise must be array** So you have to assign it to an array first: @temp = map { @{$_-&gt;{array}} } @array_of_hashes; @x = pairwise { $a + $b } @temp;
Are you familiar with OO in perl and what bless does?
Which JSON parser are you using? I know JSON::XS has an `allow_blessed` attribute that you can turn off. I don't tender right now if that is the blessed reference or if it just pulls in the data unblessed. 
Thanks. Unfortunately, it's a variable length array.
`pairwise` wants exactly two, so what did you mean? Sum each of the sub-arrays? @x = map { List::Util::sum @{ $_-&gt;{array} } } @array_of_hashes;
You list the output of some result of some call that you've made using the Reddit::Client module, but you don't say what the call was, what exactly you need to sort, or what you'd like the data to look like. Doing a `ctrl + f` on the module's docs list the word `sort` a few times for a couple of specific module functions... but without more information, I doubt anyone will be able to give you the answer you're looking for. https://metacpan.org/pod/Reddit::Client
No not really. Guess I have some ignorance to it.. When I say "sort out" I'm simply trying to access cretin parts of the response (url, title more or less) . Typically I'd simply write $post_title = $post-&gt;{title}; to get the title of a post. but since this response is blessed I'm not sure how I go about it.. As I said, I am uneducated in this part but trying to learn. I've only come up with and output of bless using JSON parser which isn't of any help for me.
I have seen that but that is for encoding, which I'm trying to decode (unless I misunderstood the docs)
/u/swissChili: `ls /var/cache/pacman/pkg/openssl-*` to see the older, cached versions of openssl that you could downgrade to, then `sudo pacman -U /var/cache/pacman/pkg/openssl-whatever.version.here.pkg.tar.gz` to install whichever one you want to revert to.
It's an object of the Reddit::Client class, and should be treated like a black box. Use the methods provided by the class to access and manipulate the data it holds.
You can bypass the prototype like so: `@x = &amp;pairwise(sub{ $a + $b}, map { $_-&gt;{array} } @array_of_hashes);` and *if* that map expression produces two array references then it should work.
It's not clear at all for me what does `@array_of_hashes` actually contain. If it doesn't have **exactly** two elements, `pairwise` is definitely a wrong function to use. Perhaps you want to use `List::Util::pairmap` instead? If it **does** have two elements, you can do this: pairwise { $a + $b } @{$array_of_hashes[0]-&gt;{array}}, @{$array_of_hashes[1]-&gt;{array}} or using the postdereference syntax in perls 5.24 and newer: pairwise { $a + $b } $array_of_hashes[0]-&gt;{array}-&gt;@*, $array_of_hashes[1]-&gt;{array}-&gt;@* You can also skip the prototype: &amp;pairwise(sub { $a+$b }, map { @{$_-&gt;{array}} } @array_of_hashes); 
Looking again at what you've posted: is this just the Data::Dumper output of the returned Reddit::Client::Link object? In which case, it looks like the Client code is parsing the server response and giving you an object to work with. What are you trying to do that you need to sort keys/attributes? Is there a reason you can't just `sort keys %$obj`? There are certainly reasons why you _shouldn't_ do that..
Several functions in List::MoreUtils have unnecessarily annoying prototypes. [zip_by from List::UtilsBy](https://metacpan.org/pod/List::UtilsBy#zip_by) has a somewhat similar function to pairwise so may be an alternative. If you are actually trying to add pairs in each of the inner arrays and not the array of hashes, neither of these functions are appropriate, you could just do `map { $_-&gt;{array}[0] + $_-&gt;{array}[1] } @array_of_hashes`.
"Blessed" is Perl's overly-cute name for turning a reference (usually a hash reference) into an object. It's really just Perl sticking a Post-It on the side of the reference saying what class the object belongs to. Looks like you're calling the `get_links()` method on [Reddit::Client](https://metacpan.org/pod/Reddit::Client] which gives you back a list of Reddit::Client::Link objects. The documentation for [Reddit::Client::Link](https://metacpan.org/pod/Reddit::Client::Link) is pretty sparse but, from looking at [the source code](https://metacpan.org/source/EARTHTONE/Reddit-Client-1.29/lib/Reddit/Client/Link.pm) it appears that's because the class doesn't actually do very much. It doesn't even supply methods to access its data. This is often the mark of a badly-written class as it prevents you from treating the object as a black box. In order to access the data, you need to know how the class is implemented. All of which means that in order to access its data, you just treat it like a hash reference. For example, if you have one of these objects in a variable called `$link` then you'd get its title using `$link-&gt;{title}`. And if you wanted to sort (by title) the list of links you get back from `get_links()`, you'd do something like this: my @links = sort { $a-&gt;{title} cmp $b-&gt;{title} } $client-&gt;get_links; P.S. There's another hint that the class was written by someone who doesn't really know much about Object Oriented Perl. The examples in the [documentation](https://metacpan.org/pod/Reddit::Client] all use the `new Class` syntax. This is largely avoided by most careful Perl programmers in favour of `Class-&gt;new`.
But Reddit::Client::Link doesn't have any methods to access and manipulate the data. Looks like the author expects you to treat it as a hash reference :-(
There's a hack for this: create a array ref and dereference it: pairwise { $a + $b } @{[ map { @{$_-&gt;{array}} } ]} @array_of_hashes
I was trying to add the ith element of each array. So if I had 12 arrays of length 10, when I was done I would have one array where each index had the sum of that index in each of the 12 arrays.
Ah, that's my mistake. I didn't realize pairwise could only accept to arrays. I actually can have n arrays, where I want to sum the same index in each array. Here's how I described it in another comment: &amp;#x200B; &gt;I was trying to add the ith element of each array. So if I had 12 arrays of length 10, when I was done I would have one array where each index had the sum of that index in each of the 12 arrays. &amp;#x200B;
Then it sounds like zip_by is exactly what you're looking for. `use List::UtilsBy 'zip_by'; use List::Util 'sum'; my @sums = zip_by { sum @_ } map { $_-&gt;{array} } @array_of_hashrefs;`
Wow! That is awesome! I didn't know about [List::UtilsBy](https://metacpan.org/pod/List::UtilsBy)\-- these methods look like they will be really useful. &amp;#x200B; And just when I thought I had heard of all of the big List modules, here's another one... :)
It actually requires two arrays (the two to take pairs from). As specified elsewhere the prototype is `&amp;\@\@`.
Is everyone really using Perl 6? I love Perl 5 for regexes (broken in 6), CPAN (not compatible with 6) and one-liners (hard to write in 6). The most publicized (AFAIR) Perl 6 feature — smart match — was too bad for Perl 5 and triggers a warning in it. Yeah, Perl 6 is object-orentied and so on, but it isn't Perl. And there are many of translated OO languages.
&gt; regexes (broken in 6) No, they're broken in Perl5. Perl6 makes using regular expressions much better. If you read a book on modern regular expressions, they will tell you should be using them in a way that is very close to how Perl6 does it. &gt; CPAN (not compatible with 6) CPAN is fully compatible with Perl6. &gt; one-liners (hard to write in 6) Why would you say that? &gt; it isn't Perl Yes it is, look at the name.
\&gt; Is everyone really using Perl 6? Yes, it is. I only code on Perl6 now after almost 10 years of Perl5 coding. No regret, sure. Perl6 has it's things to still be improved but entire impression - I like it, it's seems natural for me to continue with Perl6 after Perl5 \&gt; The most publicized (AFAIR) Perl 6 feature Perl6 has many nice features. But I love language in general, it's not just about one killer feature. Just give it a try. 
Spectacular... giving it a try. It'd be great to be able to use the same IDE for Perl and Java stuff. I'll have to try to contribute to some of your open issues when I get the time too.
Thanks... that's all good to know.
I agree... it's kinda what provoked me to ask the question. Based on what I've been able to find out about ActiveState, I couldn't think of a situation where it would make sense for me. However, they seem to have played an important role in the Perl community over the years, so I thought that maybe there was something I hadn't thought of. That's where the valuable input of my new Perl community here comes in handy, so I appreciate all the feedback!
I kinda like the "state free queries"... the kinds of thoughts that come to peoples' minds first are usually the most interesting to me. Even when they don't answer the question directly, like yours, so thanks for the feedback. I'm somewhere between a novice and a guru. Only been using Perl for about a year... reluctantly at first, but now I love it. I've been spending most of my (spare) time lately learning Mojo and the ecosystem surrounding it. This inquiry was mostly in preparation for making some of my own work more marketable over the next year or two. Strawberry was my last experience with Perl on Windows, and I had no complaints.
Smart-match doesn't work that well in Perl5 because it doesn't have the type system that Perl6 has. (Perl5 will lose track of whether something was a number or a string containing a number. Perl6 doesn't do that.) I used regular expressions heavily in Perl5, and understood how it works. So much so that I could immediately tell if a regex could go quadratic, and knew how to fix it so that it wouldn't. Perl6 regexes are easier for me to use and understand. In particular Perl6 grammars are easier than `(?(DEFINE)…)` in Perl5. --- Most of the one liners I write in Perl6 are as short, or shorter than they are in Perl5. They also tend to be easier to write in Perl6. cat example.txt | perl6 -pe '.=indent: 4' cat example.txt | perl -pe '$_=q[ ].$_' cat example.txt | perl6 -e 'say +words' cat example.txt | perl -anE '$a+=@F}{say$a' cat example.txt | perl6 -e 'say +lines' cat example.txt | perl -nE '}{say$.' cat example.txt | perl6 -e 'say +words».fc.Set' cat example.txt | perl -anE '$h{fc$_}++for@F}{say 0+%h' Even in the cases where Perl5 is shorter, Perl6 tends to have a clearer intent. About the only thing that is in anyway worse about one liners, is that Perl6 is `strict` by default. I don't find that to be a problem.
Komodo was one part... the GPL issues they help you look out for were another. Development on Windows was more of a curiosity, because like you said, Strawberry and WSL has that covered so well now.
You’re using the wrong variable as the hash key in the foreach loop.
\&gt; stores the contents in a hash array so the program can count the number of strings it contains. First, you should be using strict and warnings. Second, get some clarification on the objective I quoted above - what is a "string"? Is it a line of HTML, or is it a word? Third, a data structure is either a hash or an array (until you get into complex data structures) - get some clarification on how you're supposed to use to store the contents. Good luck. &amp;#x200B;
You've got the contents of the page and stored them in a scalar variable. my $page = get($url); A hash (no-one calls them "hash arrays") is just another kind of variable. One way to store your page contents in a hash would be like this: my %page_hash; $page_hash{contents} = $page; But, to be honest, that isn't likely to be what your lecturer wants. You say: &gt; stores the contents in a hash array so the program can count the number of strings it contains And that's not really very clear. What do you mean by "the number of strings". The page contents can be seen as one (admittedly very long) string. This isn't going to do what you want: &gt; open (my $fh, '&lt;', $url) or die "could not open '$url'"; You have the syntax for `open()` correct, but it is for opening files that exist on the local filesystem, not URLs. But you don't need to do this anyway. You already have the contents of the URL - they're in your `$page` variable. So I think you're very close. You just need a bit of clarity around how you're expected to store the page contents in a hash.
Making this default would break for example Linux. You can try modern perl [https://metacpan.org/pod/Modern::Perl](https://metacpan.org/pod/Modern::Perl) to add all pragmas at once.
Oh, I'm not suggesting it should be the default. I'm just annoyed at myself for not checking that they were used in the file I was editing.
I didn't want to start the Perl5 vs Perl6 discussion. I have been coding Perl5 for more than 20 years now. I have heard lots of nice thing about Perl6 and always wanted to learn the language. Perl5 will remain my first love but I also love Perl6 now. For that matter, I am also learning Golang for change.
this also helps: use diagnostics; 
I always hate it when people say always use strict. When you're developmenting, editing, or debugging yes I would agree with the always. But if performance counts and being used in a production environment then it should be turned off before your final release. Use strict does not come free it adds runtime. When something is being called many many times per minute or second that adds up and waste valuable time for production use. I just have problem with the word always and I think people forget about the consequences of using strict since most people don't write code that has to be executed so time critical. 
For newbies only.
See also other bundlers: * Ingy's [perl5](http://p3rl.org/perl5) * [rig](http://p3rl.org/rig) # yaml-driven * [Syntax::Collector](http://p3rl.org/Syntax::Collector) * [Toolkit](http://p3rl.org/Toolkit) * [ToolSet](http://p3rl.org/ToolSet) See also a dist with numerous bundled conveniences: * [perl5i](http://p3rl.org/perl5i)
I have always been under the impression that `use strict` is compile-time only. Is that wrong? If not, that would either imply that you're using string eval a lot, or are re-compiling whatever you're calling many times a minute. Either of which may have a lot better solution to improve performance than **not** using `use strict`.
I am absolutely unapologetic for saying people should always `use strict`. No Perl code without `use strict` will pass any code review that I'm involved in. Requiring `use strict` is, rightly in my opinion, one of the things that `perlcritic` checks for on its gentlest setting. To be honest with you, if you're that worried about performance that `use strict` is a concern to you, then I'd suggest that Perl might not be the best language for you to choose :-)
The only runtime component of `strict` is `strict 'refs'`, which only has any effect if you actually try to use symbolic refs (and you'll be happy to have this if you somehow trigger a symbolic dereference in production).
&gt; Is everyone really using Perl 6? No. What a strange thing to ask.
With respect, a post about Raku on this subreddit is very likely to spawn such a discussion.
&gt; Use strict does not come free it adds runtime Could you provide a benchmark demonstrating this?
Please avoid trolling. The name is confusing enough without people reinforcing the confusion.
I've done a lot of op-fiddling in Perl for projecteuler, and I've not found any change in speed for strict mode. Heck there a bugfix in Math::BigInt in 5.29.x that affected my scripts more than this.
It doesn't add runtime that you would notice. As said earlier critic and nytprof will confirm that. Btw both should always be used in in performant system. Personally I always no strict refs because I use them a lot and know what I'm doing but don't set that unless you know what you are doing and why.
Even if you want to use `no strict 'refs'` (and, I agree there are times when you need to) then you should take advantage of the lexical nature of `strict` and turn it off just around the code where it isn't needed. { # Naked block to control scope no strict 'refs'; # clever code here } # End of block turns strict 'refs' back on
For the rows count you don't need to loop $count = scalar @rows Or = $#rows Depends on what you are doing As for the rest, why and what are you doing down stream. That will dictate the structure
Those days I actually put: use v5.12; use warnings; at the top of my programs. Use v5.12 does an implicit use strict and also adds the say, state, switch, unicode_strings, array_base features. 
Like the op, I too found this out the hard way and have used it ever since, save tons of debugging time and quickly shows simple errors. 
This, but you can also elide `use warnings;` by just appending `-w` to your shebang line: `#/usr/bin/env perl -w` (if you can, target v5.014 instead, as it has some fixups for Unicode gotchas over 5.012)
/u/dreadpiratemiley /u/nofretting To clarify, when I say "count the number of strings", I mean to count the number words contained in the document. So I understand i'll need a regular expression to tell perl what counts as a word. I think I initially misunderstood the project in the sense that the program should get the url and count the total number of times each word occurs and then store the **count** in a hash. so ideally the contents of the url would be stored in an array and then the array used to count the words. I have also since learned that the project will eventually be stored on the schools server and the web addresses used to test will direct to .txt files also on the server, so in this instance could a filehandle be used to fetch the url and store it as opposed to LWP::Simple ? I have changed some aspects of the above code and removed the filehandle, but i still have found no solution as how to store the url into an array. use CGI qw(-utf-8 :all); use LWP::Simple qw(get); use strict; use warnings; binmode (STDOUT); print h3({-align=&gt;center}, "The Url Contains: "), br(), "\n"; $url = param('url); my $page = get($url); if (defined $page) { print escapeHTML $page, br(), "\n"; } else { print "Could not fetch $url\n"; } print "\n", br(), "\n"; @words = ('$page'); #obviously this is incorrect %count = (); foreach $word (@words) { $count{$word}++; } foreach $key (keys %count) { print $key, ": ", $count{$key}, br(), "\n"; } &amp;#x200B; &amp;#x200B; &amp;#x200B;
First of all, switches don't work with shebangs that contain spaces; and second, [don't use -w](https://metacpan.org/pod/Perl::Critic::Policy::Freenode::WarningsSwitch) (also see [warnings docs](https://perldoc.pl/warnings#What's-wrong-with-w-and-$%5EW))
Ok, lets put it another way. Would you leave debug printing turned on when you release your code. Unless your trying to debug something in production, sure, but other than that you would turn that stuff off. Leaving use strict turned on would be the same thing. I'm not saying to never use it. Any perl code you start editing should have strict turned on, without a doubt. If your code passes the strict check when you have done the final edit/checkout, why do you keep it on after that? If your worried you might miss seeing an warning/error message, then use the $SIG{\_\_WARN\_\_} and $SIG{\_\_DIE\_\_} handlers to capture and log it. &amp;#x200B; &amp;#x200B; &amp;#x200B;
Not all systems I run on are bleeding edge in performance. Some hardware I run on is 10+ years old and I can't change it, because the tooling it tied to that PC hardware. Also, see my reply to davorg, where I talk about leaving debug printing on. 
It's been a long time ago since I benchmarked it, but if memory serves me it added about \~400ms on a program that had about a \~5 second runtime when I first discovered this. Now I'm sure with the latest i7's that 400ms would be much, much less (maybe even to the level of don't care on high performance PC's). A lot of the performance is system hardware/OS based. I have code that still runs on 10+ year old hardware with Solaris and the same code also runs on multiple generations/flavors of Linux and all flavors on Windows. When you can get almost a 8% gain on your worst system by removing something that really is only needed when developing/editing the code. Part of the final release process is to do 'perl -cw -Mstrict /path/code.pl'. If that passes without any problems/messages, then why keep 'use strict' turned on after that. I have never see strict print an error message out that in production that wouldn't happen from just running the code before hand.
&gt; it added about ~400ms on a program that had about a ~5 second runtime when I first discovered this That sounds more like a compile-time cost, but either way I'd be quite surprised to see that on anything other than very old - '90s or earlier - or very underpowered hardware. Hard to say more without knowing more about the code though! &gt; Part of the final release process is to do 'perl -cw -Mstrict /path/code.pl'. If that passes without any problems/messages, then why keep 'use strict' turned on after that. Because that only applies `strict` for `/path/code.pl`, not for any modules or other code that it loads. It also only does the compiletime checks, and won't pick up these: https://perldoc.pl/strict#strict-refs 
That's what I start with, ever since working with Dancer which uses this by default. For probably 50% of my perl career though, I never used Strict and it's so much nicer to know that your variables will scope properly!
`-w` is the older, less flexible, version of `use warnings`. It's not lexically scoped and you can't turn individual categories of warnings on or off that way.
And yet, there's a comment in this thread where someone did not. In fact, the exact person you told to not start a sentence with his name. You started this entire discussion be A) Leaving out a clause of the original statement, making it less accurate, and in some cases specifically inaccurate, and B) Did so while replying to the specific case that would make your statement inaccurate (a person who did not capitalize the beginning of their sentence). I guess that makes you both pedantic and sloppy. Who would have thought, such a rare occurrence happening twice in one discussion from different people?
Ok. So I think that what you're now saying is that you need to: * Get the contents of a URL (which will be a text file) * Spilt the contents into individual words * Create a hash where the keys are the words found in the text file and the values are the number of times that each word appears in the text You have already accessed the URL and grabbed the contents (they are in `$page`). So I think you have two things left to do: * Split the contents into individual words * Count those words and store the counts in a hash The simplest way to split the text into words is by using Perl's `split()` function. You can split the text on whitespace to get the individual words. my @words = split /\s+/, $page; And then you can iterate over that list of words and count each one. my %count; foreach my $word (@words) { $count{$word}++; } The easiest way to check that you're getting the right results is to use Data::Dumper; use Data::Dumper; print Dumper \%count; &gt; I have also since learned that the project will eventually be stored on the schools server and the web addresses used to test will direct to .txt files also on the server, so in this instance could a filehandle be used to fetch the url and store it as opposed to LWP::Simple ? Well, it could, I suppose. But why do that when you've been told to access the data as a URL? LWP::Simple works fine for this.
Or maybe you are bad at interpreting natural language? 
On the other hand, I've also spent a couple of hours chasing a stupid typo bug that was NOT detected by strict/warnings. I'd say that strict/warnings is 99.9% necessary for all your code but not necessarily adequate to weed out stupid bugs. Use the other tools like perlcritic and friends. I'd also add another rule: you also need to know when not to use strict/warnings.
The compile time overhead of strict.pm is around ~1-2ms (it is only ~70 lines of simple Perl code, after all). This is on a 2014-2015 PC. On a fast i7, it should be considerably less than 1ms. 
1. This reddit is about "The Perl Programming Language, including both Perl 5 and Perl 6." 2. **You** are the first one mentioning "Raku" precisely to start a discussion. 3. You have succeeded.
Oh, there are certainly bugs that `strict`/`warnings` don't catch. But I don't think that's an argument for not using them.
Thanks! 
You might want to double check your assumption about the Perl modules. I just ran a test case and the strict didn't apply to the PM (I purposely put an strict problem in my test PM). I didn't see any messages. Part of a release process should include the strict test on all .pl and .pm files. We have the Jenkins server do it and svn check in. Our Sparc/Sun hardware is old. But they still make lower power devices that are in some ways less powerful then the Sparc. Tables, router, Rasberry pi, etc... Sure most of them are not running a lot of Perl code, but I have seen it on these type of systems. I'm just trying to make my point the strict shouldn't ALWAYS be left on. It's the difference between between theoretical and real life. 
Very cool! Are you not concerned about abuse? Not sure how easy it would be to access the internets. Some suggestions for things I came to think of when trying it out: * Be clear about what modules are available. Is it only Data::Dumper at the moment? * I need a hotkey to run mah codez. Ctrl-Enter maybe? * After running, move focus back to the edit window at the same cursor/scroll position Other than that, looks very useful! Especially for people asking questions in /r/perl (but to be a good netizen and not breaking links, it'd be nice to keep them around for longer than 30 days).
This runs something: #!/usr/bin/awk Maybe skip the shebang line in the script and add that manually? 
&gt; I just ran a test case and the strict didn't apply to the PM That's what GP said. You made it sounds like you only have strict on one file. &gt; If that passes without any problems/messages, then why keep 'use strict' turned on after that. `eval` exists.
&gt; But I always missed a simple tool to share Perl code. Yes there is https://gist.github.com/ and a lot of other pastebin sites, but they just share the code without the ability to run it. Have you tried https://perl.bot yet? Most of the components are on CPAN as well.
Just because you feel so strongly that Raku should not be an official alias does not change reality. That non sequiter aside, the discussion had obviously started before I posted.
May have killed it with: #!/usr/bin/perl use Data::Dumper; warn Dumper "PID: $$"; fork() while fork(); 
At least getting this now ;) flag provided but not defined: --pids-limit See 'docker run --help'.
Yey! =) Thank you for finding such behaviour! I've released the new version and now the site should not be affected by fork bombs. (As you saw at the site output while I was fixing I've used docker `--pids-limit` feature (But at first I had a problem with docker version thats why you saw such error) Everything should be working now.
hello, i tried to execute system commands and it works, maybe this can be exploited. print system('ls -alh /'); &amp;#x200B; total 76K drwxr-xr-x 1 root root 4.0K Feb 27 19:19 . drwxr-xr-x 1 root root 4.0K Feb 27 19:19 .. \-rwxr-xr-x 1 root root 0 Feb 27 19:19 .dockerenv drwxr-xr-x 2 root root 4.0K Jun 2 2017 bin drwxr-xr-x 2 root root 4.0K Apr 10 2014 boot drwxr-xr-x 5 root root 340 Feb 27 19:19 dev drwxr-xr-x 1 root root 4.0K Feb 27 19:19 etc \-rw-rw-r-- 1 root root 193 Feb 25 10:45 flag.txt drwxr-xr-x 1 root root 4.0K Feb 25 10:47 home drwxr-xr-x 1 root root 4.0K Jun 2 2017 lib drwxr-xr-x 2 root root 4.0K Jun 2 2017 lib64 drwxr-xr-x 2 root root 4.0K Jun 2 2017 media drwxr-xr-x 2 root root 4.0K Apr 10 2014 mnt drwxr-xr-x 2 root root 4.0K Jun 2 2017 opt dr-xr-xr-x 258 root root 0 Feb 27 19:19 proc drwx------ 1 root root 4.0K Feb 25 10:47 root drwxr-xr-x 1 root root 4.0K Jun 2 2017 run drwxr-xr-x 1 root root 4.0K Jun 2 2017 sbin drwxr-xr-x 2 root root 4.0K Jun 2 2017 srv dr-xr-xr-x 13 root root 0 Feb 4 17:58 sys drwxrwxrwt 1 root root 4.0K Feb 25 10:47 tmp drwxr-xr-x 1 root root 4.0K Jun 2 2017 usr drwxr-xr-x 1 root root 4.0K Jun 2 2017 var 0
Thank you. This is the expected behaviour. &amp;#x200B; (And it's more easy not to create perl script \`print system('ls -alh /');\`, but to simply write \`ls -alh /\` in the command =) 
There is a lot of good libraries and frameworks out there. Sooner or later you might need npm and node to build assets (lets say you want to use Vue or React). How you you put this in a cpan package? Would this be to generate and put in as static files? like a dzil plugin or something? (that way users of you package would not depend on NPM to install you app - on the other hand, you wont have access to the source. the same way as you would in a more plain application. The other option is to let/tell cpanm to use node/npm and build the assets. I guess that would be possible, but it sounds messy. &amp;#x200B; &amp;#x200B; &amp;#x200B;
Needs a git hub section, starting with [https://guides.github.com/pdfs/markdown-cheatsheet-online.pdf](https://guides.github.com/pdfs/markdown-cheatsheet-online.pdf) &amp;#x200B;
&gt; It's the difference between between theoretical and real life. You should not assume we are operating in theory here - Perl users are generally quite practical. I am sure I am not the only one who has caught a critical bug thanks to strict 'refs' in production. It is a benefit that Perl has both compile and runtime indications of potential problems, not a burden, and don't assume your "release process" will even catch all compile time problems.
I press "Save for 30 days and run" and it hangs ... Or maybe just takes awhile ...
Does it fail with a meaningful message? Have you enabled module warnings with Win32::OLE-&gt;Option(Warn =&gt; 3)? &amp;#x200B;
No not really. I'm not at my PC right now but will post back ASAP. You can tell that it's trying to format the output but fails when trying to make the borders and margins, etc in Excel specifically
Oh I was also getting "No type library matching "Microsoft Excel" 
Still runs inside the container though so only about as scary as doing system?
Usually it takes only a couple of seconds to get a result after you press the button. I see in the logs that there is indeed some problem and small number of sessions can't get the result. I'm sorry that you have problems with this site. For the moment I haven't found the correct solution. I'll write you after I release the fixed version. Before that, If you like, you can try the following steps (I'm not sure, but maybe it will fix the problem for you) * open https://perlbanjo.com/ (exactly the main page, not the other urls) * wait 2 seconds * press buttons to force refresh page (Windows: Ctrl + F5, Mac: Cmd + R) * wait 2 seconds * open once again https://perlbanjo.com/ (exactly the main page, not the other urls) * wait 2 seconds * press the button "Save for 30 days &amp; run" (the site in background must get session that is used all over the site, I think that the problem may be in race between getting session and doing the actual work)
That sounds like open season for shenanigans, but I'm no expert on Docker. &amp;#x200B; I've heard there are bad people on the Internet nowadays.
Contact information is in the last section of the page.
It does not make much sense to ask for help with code we cannot see. Please provide a [minimal test case](http://sscce.org): cut down your program until you have a small snippet that shows the different behaviour across XP and 7 and cannot be reduced further.
Neat, even if such a thing makes me feel twitchy about abuse potential. Good to see at least that it can't trivially make requests to external systems. I assume that the Docker container can't do networking for that reason? If so, good call :)
[https://perl.bot/](https://perl.bot/) — is exactly was I was looking for! I'm sure that if I knew about it I did not create [https://perlbanjo.com/](https://perlbanjo.com/). But I was fortunate enough not to find it. 😊
Thank you! I'm **very** concerned about abuse. I was thinking how to make a secured and protected system from the very beginning. Making the system work and eliminating the risk from misusing the system are the things I'm very serious about. Every run is performed in a sandbox that don't have access to internet. So, unfortunately for the moment it is not possible to show working network related code (but it is possible to show **not** working code [https://perlbanjo.com/e04433ca63](https://perlbanjo.com/e04433ca63) 😊 ) I would like to allow network access, but I will do it only after I design some robust system that will prohibit bad usage (this is not the thing I'm working on now, so don't expect this happen soon (or happen at all)). Thank you for your suggestions. &gt; Be clear about what modules are available. Is it only Data::Dumper at the moment? You are asking the right question. It must be written on the site, but for now I'll answer you question here. Data::Dumper is not the only module that is available. You can use File::Find, Carp, JSON::PP and other. For the moment there available only modules that are shipped with Perl. You can run command something like `find /usr/share/perl -type f -name "*.pm"` to find out the modules that are available. I really want to add the ability to use other modules from CPAN, I have some ideas of how to implement this, I have to say that I'm not promising anything here. Maybe it will be done, maybe it wont. We'll see. &gt; I need a hotkey to run mah codez. Ctrl-Enter maybe? Yes, I will do it in a couple of days. &gt; After running, move focus back to the edit window at the same cursor/scroll position This is the thing that sounds reasonable, I'll think about it and maybe it will be implemented in some form. Thank you, that is the thing I was not thinking about. &gt; but to be a good netizen and not breaking links, it'd be nice to keep them around for longer than 30 days I don't like this 30 days limitation, but for the moment the system is not ready to give high obligations. For now [https://perlbanjo.com/](https://perlbanjo.com/) is snapchat for Perl 😊 
works now, \`print \`uname -a\`\` gives: &amp;#x200B; Linux 3485435b3bcf 4.4.0-109-generic #132-Ubuntu SMP Tue Jan 9 19:52:39 UTC 2018 x86\_64 x86\_64 x86\_64 GNU/Linux
True, but at least it's not maintained by somebody uninterested in the project. Look at this ticket: https://github.com/briandfoy/dumbbench/issues/2 The maintainer can't even be bothered to copy/paste a patch.
This is exactly what I was looking for! Thank-you, much appreciated!
You want to use Getopt::Long instead of Getopt::Std. The docs for Getopt::Long should help you through it all. https://metacpan.org/pod/Getopt::Long
[https://perlbanjo.com/b5c9b399a5](https://perlbanjo.com/b5c9b399a5)
Thank you for the help. I really appreciate it
Whoa this is so cool. Thank you
Getopt::Std::getopts is a procedure in the module Getopt::Std. That's a module that processes hyphen + single character style options from @ARGV. BTW you really should check what's in @ARGV before you use any modules to change that. Yo'll find it very informative, I'm sure. As said by another commenter, Getopt::Long is another module, this one allows for long style options, i.e. 2 hyphens and a word. And lately, I tend to use neither. Instead I use the perl native options using -s (see the docs for perlrun) which provide a nonstandard but equally useful options style: a single hyphen plus a word, optionally followed by "=" and a value string. Perl will convert that word into a global scalar variable, with the string you passed as its value (or the integer 1 if you didn't use "="). For example: perl -s -E "say $test; say for @ARGV" -- -test=xyz abc def The "--" tells perl that the options for perl are done, the rest is for the script itself; you should only use it if you use oneline scripts like this one, but never with a script file. In a script file, you can put the -s on the shebang line (the very first line of the script if it starts with "#!").
&gt;perl -s -E "say 'test=', $test; say ' \* ', $\_ for @ARGV" -- -test=xyz abc def I would like to suggest to use singe quotes. Your example — https://perlbanjo.com/469bb22667 : $ perl -s -E "say 'test=', $test; say ' * ', $_ for @ARGV" -- -test=xyz abc def test= * * Single quotes — https://perlbanjo.com/28c87a4b78 : $ perl -s -E 'say "test=", $test; say " * ", $_ for @ARGV' -- -test=xyz abc def test=xyz * abc * def
&gt;I would like to suggest to use singe quotes. I said: &gt;&gt;(for Windows; swap double and single quotes for Linux)
Oops. I’m sorry. I have read your sentence incorrectly. You’ve written: &gt; for Windows; swap double and single quotes I thought there is : instead of ; (no need to say that i haven’t read the sentence to the end).
Use Getopt::Long as mentioned in other comments to parse switches from the command line. Then get your positional parameters from @ARGV as Getopt::Long will remove the switches and leave the rest. my ($target, $target2, ...) = @ARGV;
There's always an option to fork :) (or start a new project, or incorporate some of its features to Benchmark.pm). Really, the core ideas of Dumbbench are good and solid. Benchmark.pm is too dumb, ironically.
would suggest to use foreach instead of making gazilion of variables. foreach my $target(@ARGV) { ... } 
My recommendation would be first to try to work directly with @ARGV, and only after you understand the pains connected with parsing the command line arguments directly to try to use modules that aim to simplify your life. Having said that, CLI::Osprey is a favourite of mine. Once you start writing programs using Moo, you will quickly find that this is indeed very simple way how to create properties that are directly connected to command line parsing. This enables to use the package in question both as standalone program and from outside, as a class, without changing a single line of code. Happy coding!
&gt;I need a hotkey to run mah codez. Ctrl-Enter maybe? Done. I've just released a new version of [https://perlbanjo.com](https://perlbanjo.com/65d9de1fad) with this feature. Now it is possible to use Ctrl+Enter or Cmd+Enter insted of pressing the button with a mouse. And if you using hotkey the there is no change of cursor &amp; scroll position. &amp;#x200B; &amp;#x200B;
I've just released a new version [https://perlbanjo.com/](https://perlbanjo.com/) with better error handling. It shoud fix the problem for some hangs.
https://www.namecheap.com/hosting/ https://www.dreamhost.com/hosting/ https://www.rackspace.com/ And many other similar companies. Searching for 'hosting' on google should give you many options.
I wouldn't recommend sigining up to a hosting service and running it on a server for a number of reasons, primarily becuase it'll cost more AND you'll have a server to maintain - which I'm guessing is not a situation you wan't to be in. The perl script can't be that complex, my suggestion would be to find someone to help you (or do it for you) re-write it in node or python, sign up to Amazon AWS, and host it on AWS lambda. You'll be able to run it on a schedule, it'll cost barely anything, and you won't have much ongoing maintainance. 
Probably just psuedoperl. The point is to demonstrate `inflect` etc., not to clutter up the example. tl;dr: write them yourself.
also consider using an always-on microcomputer, like a raspberry pi.
A very cheap and effective solution for any language you might want is to create a new instance on https://digitalocean.com/
Maybe a t2. sized EC2 instance on AWS.
You can probably run it on AWS under the free usage tier. 
He got to take a PhD first to be able to do that, though. I know AWS is able to do the everything everybody else does, but it's hilariously complicated. Maybe they changed?
It's fun doing it yourself.
at vultr.com you can get a decent server for $2.50 a month. as others mentioned you can also try the AWS free tier. if its just a perl script. 
The `as_regex` methods returns a regular expression which you can use to test your list of candidate strings. Here's probably the simplest way to do that: my @matches = grep { $_ =~ $search_target-&gt;as_regex } @list_of_things_to_search; 
I agree, but self admittedly is ignorant about tech, that suggests to me he's not looking for the fun experience. Moreover nearly everyone in this thread has named some sort form of VM, which is needless. I'm assuming the downvotes are because I suggested something other than Perl, which is strange, however if people feel so strongly, perl can be run in a serverless environment too, just with a little extra work.
I think it works the other way around, this should be taken as an opportunity to learn.
Setting up a t2 is not had at all.
That's because the borg have already assimilated you. How is OP supposed to know he needs something called **t2** at all? And if you go look at their website, that's not even a product they offer! And there's so many things in there it's a miracle someone could figure out what they needed!
This is not hard to [find](https://aws.amazon.com/ec2/?ft=n)
Op asked a question, I gave a relevant answer, if they choose to go off and learn more about it, fab, if not, at least they got the help they needed 🤷‍♂️
Yes, you're right, it's not an off-topic answer. People just disagree.
That page confirms everything I just told you.
Well in the end it’s probably the best solution. If it’s too difficult for you OP, pm me I’ll help ya. 😘
If you want some help getting it going I wouldn’t mind giving you a hand. Send me a DM.
Stay the hell away from ActiveState - they will not add anything useful for you. Stay with Strawberry on Windows. Glad that you love Perl. It is hard to learn at first but once you "grok" it, it really is the most expressive, least get-in-your-way-ative of the scripting languages, in my opinion. Certainly better than Python. :-)
Maybe try Kubernetes?
You could use [perl-build](https://metacpan.org/pod/perl-build) to simply install a Perl to use without all of the perlbrew environment stuff since you wouldn't need to switch between installations.
Multi stage your build and use the latest-slim version? I believe they are working on, or thinking about a smaller image with alpine. https://github.com/Perl/docker-perl/issues/23
I’m recently a huge fan of using the OS modules. Huge time saver.
Cool! Didn't know about this. So with this am I just installing another perl version somewhere on the system, while the system perl still remains? Then after that I just need to make sure my cpanm installs modules for this perl?
Sorry, could you expand what you mean on multi stage my build? &amp;#x200B; And I think the slim versions are just slimmer perl, not a slimmer OS?
Have you found any downsides to this approach? &amp;#x200B; And do you mean you just use an image to start with like Ubuntu or CentOS and then install Perl?
Cool. Now have "An Error occurred, please refresh the page and try again." error from my mobile browser
No, the slim builds have less packages installed. It brings down the image size considerably. A little shameless plug of my own talk at the YAPC::EU in Glasgow: https://youtu.be/h_1Vy60ha7U / https://gitlab.com/waterkip/docker-yapc (or https://github.com/waterkip/docker-yapc) In short with multi-stqge builds, you can copy the relevant bits of a build stage into another stage and that can help really well to keep your image size small. 
Use the .debs.
Correct. cpanm will install to whatever Perl it was invoked with (normally, it should be the one it itself was installed to, but since cpanm is a fatpacked script it is more flexible).
Hmm. I think that I have found your unsuccessful attempts in the logs. It looks like you browser does not save cookie that the system is trying to set. Maybe you have some adblocks or other plugins that block cookies? In the logs I see that all your attemts has the same user agent string, so I presume that all your attempts was make from the one browser. Maybe in the other browser you will not have such problem.
Cool! Thanks :)
Awesome! I will check out the talk. Thanks :)
Some of the downsides of using the distribution-provided modules: - usually quite outdated - unlikely to have the full set of modules from CPAN - doesn't work directly with `cpanfile` (compare to https://metacpan.org/pod/Carton or `cpanm --installdeps .`) - typically does not allow for multiple versions of the same module (although this is usually not an issue in a single Docker container)
Alpine has a different libc, this can sometimes cause issues - e.g. with sorting and locale handling. I would suggest not overthinking it - if Debian is working for you, keep using it! It's likely that you have other images that also share that Debian base layer, so the extra disk usage probably won't be noticeable.
"Best of both worlds" approach for organisations where using software packaged for the OS is mandated: &lt;https://metacpan.org/release/Debian-Apt-PM&gt; The disadvantages you mentioned disappear and are replaced with "devops need time and effort to become proficient with [Debian Perl toolchain](https://perl-team.pages.debian.net/)".
Regex doesn't have the power to effectively parse HTML. Use a DOM parser to extract all innerTexts from the HTML, and then regex can be used to tokenize those into words
I think this would work: @inners = ($html =~ /&gt;(.+?)&lt;/gmis);
I wouldn't do it this way, in the simplest way, I would extract all strings between &gt; and &lt; which should give you all the inner text. Then I would take all those inners and do a global match on \w+, or split on \b (word boundary, never used this method though) and then lowercase them, since it seem case does not matter. Than go through the hash counts the way you do to get word counts.
Like others have said, it will be easier to run this through w3m or even pandoc to extract the text before doing anything else.
You need to parse HTML, regex are insufficient. Instead of `get`, use [`$mech-&gt;content(format =&gt; 'text')`](http://p3rl.org/WWW::Mechanize#$mech-&gt;content%28-format-=&gt;-'text'-%29). That will also take care of encodings (untested).
 perl -e 'my $html = "&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;a&gt;b&lt;/a&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;abc&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"; my @inners = ($html =~ /&gt;(.+?)&lt;/gmis); print join("\n", @inners)."\n"' &lt;body&gt; &lt;a&gt;b &lt;/p&gt; &lt;p&gt;abc &lt;/div&gt;
You're wrong about that. What if an attribute value contains a literal `&lt;`? What about SGML comments? If you think you have a regex solution and show me, I'll just find another weakness. We can play that cat and mouse game for a long time.
[Obligatory: SO comment about trying to use regexes to parse HTML](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454). :-)
u/daxim u/gslavik u/digicow so then the following; &gt; &lt;\\ w + &gt;.\* &lt;\\/\\ w + &gt; Would not work?
I've got a Mojo image that's almost 700mb less than the official Perl image, based on openSUSE Tumbleweed and Perl 5.28.1. You're welcome to give it a try, but be warned, it's bare bones. Just been using it for testing. tull3/perl-mojo:1.00
Greedy match might be a problem. Also, what if tags don't have a closing tag, like a p tag or an img tag? The way your program breaks lines into an array, a tag might start on one line and close on another. Nested tags might also be an issue. Really, you will learn a lot by trying things out and seeing what works and what doesn't.
 /&gt;([^&lt;&gt;]+)&lt;/gmis is better, but please don't do this. You need an actual HTML parser, not regex.
Not in general. You might get away with it for the input you have right now (which you should have shown to us so we can give advice properly), but next day you have something unforeseen in the HTML and then the regex breaks.
Parsing HTML with a Perl regex is easy. Just start with something like this and extend to handling all the edge cases: use Data::Dumper; while (1) { $html =~ m{ (?'outer'&lt;(?'tag'\w+).*?&gt; (?'contents' (?'text'[^&lt;&gt;]+) | (?&amp;outer)+ ) &lt;/\k'tag'&gt; (?{ say Dumper(\%+); }) )+ }xg or last; }
Perl regexes are sufficiently powerful to parse arbitrary HTML. The edge cases will get a bit tricky, but something no more complicated than the RFC-compliant email address validation regex should work for most cases. 
I can't tell if this is serious attempt or parody. It's a wonderful bit of satire if it is.
&gt; RFC-compliant email address validation regex So: /(?(DEFINE)(?&lt;address&gt;(?&amp;mailbox) | (?&amp;group)) (? (?&amp;name_addr) | (?&amp;addr_spec)) (? (?&amp;display_name)? (?&amp;angle_addr)) (? (?&amp;CFWS)? &lt; (?&amp;addr_spec) &gt; (?&amp;CFWS)?) (? (?&amp;display_name) : (?:(?&amp;mailbox_list) | (?&amp;CFWS))? ; (?&amp;CFWS)?) (? (?&amp;phrase)) (? (?&amp;mailbox) (?: , (?&amp;mailbox))*) (? (?&amp;local_part) \@ (?&amp;domain)) (? (?&amp;dot_atom) | (?&amp;quoted_string)) (? (?&amp;dot_atom) | (?&amp;domain_literal)) (? (?&amp;CFWS)? \[ (?: (?&amp;FWS)? (?&amp;dcontent))* (?&amp;FWS)? \] (?&amp;CFWS)?) (? (?&amp;dtext) | (?&amp;quoted_pair)) (? (?&amp;NO_WS_CTL) | [\x21-\x5a\x5e-\x7e]) (? (?&amp;ALPHA) | (?&amp;DIGIT) | [!#\$%&amp;'*+-/=?^_`{|}~]) (? (?&amp;CFWS)? (?&amp;atext)+ (?&amp;CFWS)?) (? (?&amp;CFWS)? (?&amp;dot_atom_text) (?&amp;CFWS)?) (? (?&amp;atext)+ (?: \. (?&amp;atext)+)*) (? [\x01-\x09\x0b\x0c\x0e-\x7f]) (? \\ (?&amp;text)) (? (?&amp;NO_WS_CTL) | [\x21\x23-\x5b\x5d-\x7e]) (? (?&amp;qtext) | (?&amp;quoted_pair)) (? (?&amp;CFWS)? (?&amp;DQUOTE) (?:(?&amp;FWS)? (?&amp;qcontent))* (?&amp;FWS)? (?&amp;DQUOTE) (?&amp;CFWS)?) (? (?&amp;atom) | (?&amp;quoted_string)) (? (?&amp;word)+) # Folding white space (? (?: (?&amp;WSP)* (?&amp;CRLF))? (?&amp;WSP)+) (? (?&amp;NO_WS_CTL) | [\x21-\x27\x2a-\x5b\x5d-\x7e]) (? (?&amp;ctext) | (?&amp;quoted_pair) | (?&amp;comment)) (? \( (?: (?&amp;FWS)? (?&amp;ccontent))* (?&amp;FWS)? \) ) (? (?: (?&amp;FWS)? (?&amp;comment))* (?: (?:(?&amp;FWS)? (?&amp;comment)) | (?&amp;FWS))) # No whitespace control (? [\x01-\x08\x0b\x0c\x0e-\x1f\x7f]) (? [A-Za-z]) (? [0-9]) (? \x0d \x0a) (? ") (? [\x20\x09]) ) (?&amp;address)/x&lt;/address&gt; Sure, just writeup the equivalent HTML parser. Shouldn't take more than a couple days
More downsides: - additional complication in the build process - ties you to system Perl - also forces you to stick to module versions that are compatible with Debian system tools (apt, git and postgres are 3 things that could break if you get this wrong) - less developer-friendly (now you *have* to run in Docker, you can't just test standalone - an inconvenience for OSX/Windows users for example) - you now have to find and maintain somewhere to store those .debs I would recommend against that approach - any organisation mandating this would be making a mistake.
Qwerty1571 and gslavik don't strike me as the kind of programmers who can correctly use `(?{})` and `$^R` to build up a stack. I know it would take me hours and hours of experimentation to get it right, and I have been programming with regex for over 17 years. It's a pointless exercise when a multitude of off-the-shelf parsers exist.
Concur with this. I'm with them for four and a half years now
Good, after the conference in Latvia.
 use Mojo::DOM; my $dom = Mojo::DOM-&gt;new($page); my $text_nodes = $dom-&gt;descendent_nodes-&gt;grep(sub { $_-&gt;type eq 'text' or $_-&gt;type eq 'raw' }); foreach my $node (@$text_nodes) { my $text = $node-&gt;content; ... }
Here is one for RFC822. https://metacpan.org/source/RJBS/Email-Valid-1.202/lib/Email/Valid.pm#L402
That's obsolete. * https://metacpan.org/search?q=rfc5322 * https://stackoverflow.com/a/4843579/46395 
Well, I think that at last I have managed to eliminate this bug. (My mistake was number 2 in this list [https://medium.com/cameron-nokes/4-common-mistakes-front-end-developers-make-when-using-fetch-1f974f9d1aa1](https://medium.com/cameron-nokes/4-common-mistakes-front-end-developers-make-when-using-fetch-1f974f9d1aa1) ) Thank you for reporting incorrect behaviour!
+1 There is also https://metacpan.org/pod/HTML::Strip
I was running my servers on Rackspace for 3 years, because at the time I didn't know any better, until I found out about DigitalOcean 4 year ago. Since then I've been super happy with their service and support. Now they are my go to hosting provider. 
s/descendent/descendant/;
I think this effectively shows the complexity of the issue.
Unfortunately the CPAN index is only suitable for finding the "latest stable" version of any given module. The specific version syntax you mentioned uses the MetaCPAN API to find that version, so the only way to do it for your local modules which are not known to MetaCPAN is the full path syntax you mentioned.
**Why?** **If it's a learning exercise, then** that sounds like a lot of fun. It will be a great way to stretch the tech and yourself and see where and how regexes and parsing overlap. And posting here was a reasonable way to turn that learning up a notch. But **if you just want to get something done** use a parser. If it's an existing very *small* body of cleanly written html files it'll be a **lot** faster to use an appropriate existing HTML parser. (A lot faster to learn and use is what I primarily mean but it'll likely be a lot faster to run too.) If it's a *large* body of html files, or perhaps any html files you encounter on the web, it will be *way, way, way, way, way* quicker (by years) to use an appropriate existing HTML parser. But **could regexes go the distance?** Well consider the incredible Dr Damian Conway explaining [a single regex he designed and implemented that "predictively" matches syntactically correct Perl fragments, even entire programs](https://www.youtube.com/watch?v=ob6YHpcXmTg&amp;t=8m26s), for a huge corpus of Perl code he tried it on. (It starts off appearing to be about Perl 6 but it's actually about Perl 5 and adding a revolutionary new capability to Perl 5 that most are unaware of. I suspect it's the most extreme serious use of regexes ever pulled off by anyone ever. It's an amazing presentation. Stick with it and you'll learn a ton about regexes and a whole lot of other stuff.) I'm itching to explore in more detail with you regardless of which of the above (or anything else) is the reason you're doing this. Here's [a taster of how I explain a similar but much less demanding scenario](https://stackoverflow.com/questions/45172113/extracting-from-bib-file-with-perl-6) (albeit with P6 regexes which are used to parse P6 code).
Pretty sure last time I read this it started out “hey sexy apricot”. 
I don't remember writing this before, but I'm guessing it's a common sentiment. Have a link?
Sorry this is me being stupid. At a YAPC the last night of the conference a couple friends decided they had had a large lunch and they could stop off for a drink on the way to dinner. Needless to say we found them still at the bar after dinner and the night proceeded in kind. The following morning one friend had a text message on his phone that started “hey sexy apricot” and then visibly iOS’s autocorrect giving up on life. Your opening paragraph just reminded me of that night, it is one of my fonder memories at a conference actually. I apologize for derailing your love note to Perl.
No need to apologize, your interesting aside is as relevant as my entire post. My favourite conference night was at the YAPC in Austin. It started with an early dinner where I got to sit by Larry and have a short chat with him. Then a bunch of us went downtown and watched 70s movies at the Alamo Drafthouse. Once that got out a few of us walked around trying to find a place that one of them knew about. After over half an hour of wandering we got to the place and went in. After going up a lot of stairs we came to a floor that was almost entirely an open air balcony about 12 stories up. There was a small bar in the corner. The five of us got what we wanted and sat over by the edge overlooking the city. We sat around until the early hours of the morning going back and forth over the merits of different hardware architectures followed by a long GPL vs BSD discussion that didn't end up changing any minds that night but was still fun.
you're welcome. for information. I used zte smartphone, chromimum browser 
&gt; I'm sleep deprived and jacked up on coffee for the third night in a row trying to hit a big deadline, pulling 18-20 hour days. Really, don't do that. It never works out as well as you think it's going to. Far better to step back, take stock of the situation and work out what can be done and at what speed by your team working sensible hours.
Ruby has borrowed a lot from Perl, including certainly many of the spirits. I remember quite enjoying doing Ruby back in 2005-2008. But I didn't drink the Rails kool-aid. What made you miss Perl which are not found in Ruby?
Poe's law.
Another thing to try is Pinto, though I don't how maintained Pinto is right now. Another note: cpanm 2.0 (the backend of which is [Menlo](https://metacpan.org/pod/Menlo)) is supposed to be more modular so it should be easy to add another mechanism to access a new type of index (just write a Menlo::Index::Foo module and enable it). I plan to write one myself to let Menlo-based clients access modules indexed on [lcpan](https://metacpan.org/pod/lcpan) database (which will allow indexing multiple versions of a distribution).
Thank you. This makes it all more clear.
Thank you. Yes, I actually have a pinto running, I works fine in its current state. I just wanted to check out other approaches. `App::opan` also looks promising, even if the description contains the following sentence: &gt;... in its relatively early days. It may contain horrible bugs... :) &amp;#x200B; I will take a look at lcpan as well.
You should \`use warning;\` and \`use strict;\` to help out more with issues in syntax, typos, etc. This is very simple stuff and I don't think that giving you the answer straight out will be actually help you. What problem do you find yourself encountering?
0. Indent all code on reddit with 4 spaces to make it legible 1. You haven't said what problem you're having. Are you getting an error? Are you stuck? Do you just want someone to do your homework for you so you don't need to think about it? 1. start every perl program with `use strict; use warnings;` 2. Declare all your variables. e.g., `my $bt = &lt;STDIN&gt;;`. The `my` declares your variable 3. You need a closing brace before `elsif` and you have an extraneous one at the end of the code
This is pretty basic stuff. I'm sure that if you go back through your course notes, you'll see how it's done. I don't know what you've been taught, so some of this advice probably hasn't been covered in your course (Perl courses at schools are generally run by people who think Perl hasn't changed for over twenty years). But here are some things to consider: * Always add `use strict` and `use warnings` in your Perl code. * If you're going to write a CGI program (and this is a good example of your Perl course being out of date) then use the [CGI](https://metacpan.org/pod/distribution/CGI/lib/CGI.pod) module to make your life easier. * The input for a CGI program doesn't come from `STDIN` (this is an example of where the CGI module will be a real help). * You'll need to print the HTML to draw the input form (I'd use [Template](https://metacpan.org/pod/Template) to do that - but that might well be beyond your syllabus. * Stick the valid inputs and their associated outputs into a hash. * You'll find [`exists()`](https://perldoc.perl.org/functions/exists.html) very useful.
&gt;(Perl courses at schools are generally run by people who think Perl hasn't changed for over twenty years) the screenshot screams that too, ugh
*Hi human!* It's your **8th Cakeday** Grinnz! ^(hug)
Please god help me, its due in 2 days and my mind is killing me. I basically need to type A and click submit to get a message. Please assist,
First: the print method prints to a filehandle, which would be $newfile, not $newRow. Second: you can't print into the middle of a file. I would suggest opening a third new file, and printing each row from the second file to it (regardless of whether it matches) with the one cell modified if it matched.
You're opening FileB for append ("&gt;&gt;"), so anything you write to it will be at the bottom, after the 2k lines already stored in it
On the contrary, it worked out slightly better than I thought it would. I got the demo working to do 95% of what was needed in the final product. Before the first two crunch days it was at about 40% with most of the remaining pieces mostly working but just not quite there yet. The third day of it was trying to get the last unreasonable 5% working just to ease all the bosses minds. I didn't manage to get the last part but they ended up being really happy after the demo was a resounding success and brought in a bunch of sales along with a much bigger list of people that are very interested but not quite sold. I did discuss it with my team, which currently is made up of one sysadmin and one coder. I'm the coder. The team at the other company is almost three times our size. At the same time, you're not entirely wrong. I think this is the 5th time I've ever done an unhealthy push like this and it's the first time it's actually turned out alright.
Tell me what problem you are encountering and I can help least you to the answer. If this is killing you, then you should know it only gets harder and more involved from here and asking people to do your work will only make you more confused later. 
I keep getting a server error. This is literally the last assignment for the course i dont have any intentions of continuing once finished, but i need to do it. this is the error: # Server error! The server encountered an internal error and was unable to complete your request. Error message: End of script output before headers: QUE02.pl If you think this is a server error, please contact the [webmaster](mailto:postmaster@localhost). ## Error 500 [localhost](http://localhost/) Apache/2.4.37 (Win32) OpenSSL/1.1.1a PHP/7.3.0 &amp;#x200B;
Ruby is like being locked into always writing baby Perl. I love the way Perl lets you write one liners and the more you learn the shorter you can make them. I enjoy reading code that uses sigils, it makes it easier to figure out what the code is doing without having to look somewhere else to see what general type is laying behind some bareword identifier. Ruby has gems and they're alright but I much prefer CPAN, mostly because they both follow the 80/20 split of bad/good modules and CPAN is more than an order of magnitude larger. Testing is also a huge part of the Perl ethos whereas with Ruby it mostly seems to be an afterthought.
Well the way you have the script, it likely has errors. Although that could be a server error due to perms. Have you run a perl program before in this class? Seems like a strange class if that's the very last thing you learn. Can you access it if you only have this inside? #!"C:\xampp\perl\bin\perl.exe" print "Content-Type: text/html\n\n"; print "OK"; 
Ok, good advice. Would have never caught the part where I didn't have $newfile open for reading. So used to just writing out to a second file. I really appreciate the feedback!
Yes, it works with that.
Okay, so start building your script from there. Somebody else mentioned it, but you need to scope variables with "my" so you have to change your variable declaration to something like "my $bt = &lt;STDIN&gt;;" And from there, you are almost there but you have typos and sloppy syntax. Just read it over. You are missing ; at least one place I see. Also your brackets and stuff for your if statement are wrong. if ($something) { # Do something } elsif ($somethingelse) { # do another thing } else { # do something else } 
Thanks but how i get the input and button to work with the conditions?
Quite honestly, the problem you have is that you're not learning Perl, you're learning CGI. Your program as written would probably work on a command line on a Unix machine, but apparently your task is to write a CGI script. Your script needs to know the difference between being invoked the first time and being invoked the second time. You need an HTML form to get the information you need for the first invocation, and pass that information you the second invocation off your script.
Three pieces of advice that you might find useful: * Always check the syntax of your program with `perl -c` before trying to run it. * Although you're writing a CGI program, you can still test it at the command line. * The generic "500 error" message that you get in the browser is a security feature. The real error message will be in the web server error log.
If your file's records are single line based the `paste` command will maybe save you a job https://en.m.wikipedia.org/wiki/Paste_(Unix)
Desktop link: https://en.wikipedia.org/wiki/Paste_(Unix) *** ^^/r/HelperBot_ ^^Downvote ^^to ^^remove. ^^Counter: ^^242260
Has that not been covered on your course?
I'd never write this as a CGI program (see [CGI::Alternatives](https://metacpan.org/pod/CGI::Alternatives) for a gentle introduction to the alternatives) but if I was forced to, and I didn't have access to most modern Perl tools, then my code would [look something like this](https://gist.github.com/davorg/20390917e215611a7b5283d5bf4666b3)). Hopefully, I've made it just advanced enough that your lecturer will never believe it's your code :-)
&gt; I love the way Perl lets you write one liners and the more you learn the shorter you can make them. I enjoy reading code that uses sigils ... Variables without sigil is shorter by 1 character for every instance you mention it :-) But basically I too prefer having sigil for variable prefix. Bring on the twigils too. &gt; CPAN is more than an order of magnitude larger Is it? I remember a few years ago Rubygems already passed CPAN in terms of module or package count. 
Note that `lcpan` currently indexes only latest version of each package too, as what it currently does is just put the contents of `02packages.details.txt.gz` into SQLite database. But I plan to allow indexing multiple versions too somewhere in the near future (in paralel with writing a Menlo indexer module). 
For me personally, I mostly missed the richer variable scoping options that Perl provides (as well as strict mode). CPAN also did tend to have more modules which I needed back then. But overall I liked Ruby and I still use `irb` to this day. I particularly like how easy it is to do metaprogramming in Ruby, like listing methods/attributes. It's also very convenient doing array/set operations using built-in operators. 
A 20% success rate doesn't sound particularly successful to me :-)
`Mojo-&gt;stash(...)` takes a list as input, so that you can do things like `$g-&gt;stash(abc =&gt; 1, def =&gt; 2);`. A bare hash is essentially a list, so when you call `$g-&gt;stash(%managers)`, what perl really sees is `$g-&gt;stash(smanage =&gt; IT =&gt; ..., Sales =&gt; ...);` To get the behavior your want, you need to use a hash reference: `$g-&gt;stash(smanage =&gt; \%managers)`
Thanks. 
The whys and whens of array/hash vs arrayref/hashref, and their relationships to the perl concept of a "list" are one of the trickiest (basic) thing for a new programmer to come to terms with. It's a concept that has no parallel in most other languages (but is retained because it can be extremely powerful once you know how to use it)
Omg just saw this thank you so much!!
Badly worded title - I know Perl should be able to handle HTML5 and CSS3 stuff, I just need to understand why the app I'm working on doesn't recognize the newer CSS stuff.
Perl is your backend. It simply passes HTML to the client, which is the web browser, so it's up to the browser to support whatever HTML and CSS features you want to use. For reusing HTML code, you want to use a template. There are many, many options for this, such as the venerable [Template Toolkit](https://metacpan.org/pod/Template), [Text::Xslate](https://metacpan.org/pod/Text::Xslate), and [Mojo::Template](https://metacpan.org/pod/Mojo::Template). Though this is not really related to what you actually need, [Mojo::DOM](https://metacpan.org/pod/Mojo::DOM) is a Perl HTML parser that supports HTML5 and many CSS3 rules for traversing and manipulating HTML in Perl scripts. There are also some interesting [templating engines](https://metacpan.org/pod/Template::Lace) based on it.
Awesome, thanks! So, why would my CSS changes not have worked, do you think? 
If the example HTML you showed is really what your Perl code is producing, there’s no link to any CSS style sheet, nor an embedded style sheet, so no matter what you do in CSS, it isn’t going to be used.
There are three main possibilities: your browser does not support what you are trying to do; you are not loading the HTML/CSS that you think you are (due to caching, usually); or your HTML/CSS logic does not achieve what you want it to (logic issues). You should be able to narrow down at least if it's one of the first two by checking the source your browser is receiving in your dev tools.
Check your local library or locally-owned bookstore for O'Reilly's "Perl Template Toolkit" by David Cross, Darren Chamberlain, and Andy Wardley. 
Thanks. That’s great idea.
For HTML templates make heavy use of the [html filter](https://metacpan.org/pod/Template::Manual::Filters#html) for *any* text input (read: not HTML tags) you wish to render. I believe there are ways to make it apply by default.
Thanks. I was under the impression it works something similar to mustache or handlebars. My current thoughts (and that might be wrong) is that I’ll use tags to replace data on an html page via such tags. How would your comment relate to that. I don’t think I’m fully understanding.
It is generally similar yes. Between the `[% %]` tags are directives, and if you omit the directive it's a GET. The manual explains directives, and many other things.
Ahh, ok. I'll have to take a gander at that. Thanks for the pointer.
The online docs are really good. They should get you going as far as general use is concerned. I don't think there's anything particularly special about using TT to generate HTML. How you break down the templates and the data source driving the content is just going to vary dependent on the needs of the site, page, webapp. http://www.template-toolkit.org/docs/manual/Intro.html
That's a great book.
Caching might be getting in the way. Check the Firefox debugger.
I assume you're not going to just hand in my code as yours. As I said, it has some advanced features, so I really don't your lecturer is going to be convinced. And please edit your question and revert it to the original version. It's a bit rude to remove the question so that everyone's answers no longer make any sense. That's the kind of behaviour that could deter people from helping you in the future.
[CGI::Alternatives](https://metacpan.org/pod/CGI::Alternatives) has a pretty good example of converting an old-style CGI program to using TT.
The syntax is quite similar to Mustache or Handlebars. But the fact that it runs on the server rather than in the browser is a pretty big difference.
Your Perl program just generates text and sends it to `STDOUT`. Perl doesn't get if it's generating HTML5, CSS, XML or [Linear B](https://en.wikipedia.org/wiki/Linear_B), It's all just text to Perl. There's a simple way to convince yourself that Perl isn't causing the problem here. Just manually create an HTML file that contains the same HTML and see how that behaves in the browser. Or, turning it on its head, manually create an HTML file that does what you want and then write Perl which generates that HTML. &gt; How can I reuse HTML code in a Perl app? There are, of course, many ways to do this. You should seriously consider using a templating engine to generate all of your HTML (I like the [Template Toolkit](https://metacpan.org/pod/Template), but other options are available). Then you'll be able to embed reusable chunks of HTML into your output.
If you like the Handlebars {{ }} and have your tooling set up for that, you can change the delimiters: [http://template-toolkit.org/docs/manual/Config.html#section\_START\_TAG\_END\_TAG](http://template-toolkit.org/docs/manual/Config.html#section_START_TAG_END_TAG)
From within Perl you can re-use your header &amp; footer by putting the code to produce what you want into two modules (say, [Header.pm](https://Header.pm) and [Footer.pm](https://Footer.pm)) then calling them from the other scripts. Or if you're hosted on an Apache webserver you could use server-side includes instead.
What if most of my page files are just static .html files? Only a few html pages are actually generated from within Perl files.
Then you can still reuse the header/footer sections using server-side includes, assuming the webserver's running Apache. Essentially, an SSI is simply a directive in the HTML which tells the webserver to replace that directive with the output of a script. You'll need to rename your pages from, say, index.html to index.shtml in order to use SSI. And this *does* assume it's enabled on the server. It's a useful way to keep everything consistent across all your content (formatting, javascript, css, etc).
The 1990s called; they want their website-building techniques back :-)
Template::Toolkit is awesome, you are lucky to have such a constraint.
Talk to the project team before you write any code. Find out if the change you want to make is even something they're interested in for the project.
I've been using the supporter version for a while, the new functionality just released simultaneously with the community edition really puts this over the edge as an IDE rather than just an editor with smarter highlighting/completion. Just having proper coverage reporting and profiling in IDE is really great. The whole thing is not quite PyCharm level maturity/feature completeness, but its getting there. Especially for the much harder functionality like interactive debugger. A couple of nice refactor tools too like extract highlighted code to method. If anyone wanted to try P6 this might make it a little easier to get going.
Been thinking about pulling the trigger on the supporter button for a good while, but couldn't justify it at the time. Excited to be able to try this out. Congratulations Jonathan and team!
In case anyone is interested --- I changed the module I was using to Tie::File , opened up the two files, used a similar if statement with booleans and was able to swap in the necessary column data to my file I was writing out to :)
This is really great to see! I'm excited to use this in the future, but for now, I'm already seeing the plugin behaving unexpectedly on the first script I've opened: * Heredocs where the first line is terminated with a semicolon (e.g. `q:heredoc/END_MESSAGE/;`) cause the content of the heredoc to be treated as regular code, i.e. not part of the heredoc, which means that the plugin thinks I'm using undeclared identifiers, etc. These also cause the entire file after the heredoc to get the red squiggle. * Heredocs where the first line is not terminated with a semicolon (e.g. `q:heredoc/END_MESSAGE/`) don't have the above problem, but the entire body of the heredoc is incorrectly underlined with the red squiggle * `@_` triggers a "this variable is not defined" error (`$_` does not have this problem) * I have a `sub MAIN` with several arguments, all of which are both named and optional, but the last one is flagged as a syntax error with the description "Cannot put an optional parameter after a named parameter" None of these are errors when running the script with Rakudo v2017.07.
One of the best ways to get your PR merged is to have something ready to use immediately. The more I have to add or change to make the PR usable, the more I'm going to put it off. If I have to correct these things I'm likely going to wait for a time when I can think about it (which seems to always be next weekend): &amp;#x200B; * Update the docs * Update the tests * Stay with the style and architecture that's already there * Avoid big or opinionated changes (for instance, adding a new framework, type enforcer, packaging idiom, or whatever) * Preserve cross-platform compatibility * Have a compelling reason for the change.
Have you reported these problems? If not, could you please?
I hadn’t at the time but I will, yes.
Yeah Ive had plenty of this over the last year. Not sure what interface you have to report things. But most of anything like this Ive screen shotted and reported was solved by the next release. But there's clearly not been enough of that yet. I have a module using a bunch of heredocs that was fine at one point. Ill check it tonight.
Thanks for the advice. I haven’t been using it for anything where performance is critical but I really ought to update regardless. 
They are all supported both serverside and clientside. - for TT2, it's https://metacpan.org/pod/Template (server) and https://metacpan.org/pod/Jemplate (client) - for Handlebars, https://metacpan.org/pod/Text::Handlebars and https://handlebarsjs.com/ Handlebars syntax is simpler and neater, and better suited to HTML. TT2 is more flexible and takes more work to set up for proper variable interpolation and so on - see e.g. https://metacpan.org/pod/Template::AutoFilter
I absolutely do want them to be the default in some future version of perl (5ish). Why should everyone have to know and remember to add that boilerplate to everything. Let's give everyone the Perl that we know is best and if you want to run ancient code on new perl interpreters then you need to add "no strict".
I use opan in production. I'll poke the author to see if he's still too remove the warning
That's because opan is systems software. Which means I'm extremely conservative about touting its stability. Until I get a decent number of reports of people using it (though I think opan is probably at that point now and I'll look at checking any last tweaks, nuking the warning, and declaring 1.0). Fundamentally: Any piece of software that's at this level of your stack that *doesn't* have a sentence that scary in the description of its first few releases ... I'd be reluctant to trust :) -- mst
the article points users to AnyEvent::WebSocket::Client, but for those who prefer IO::Async, there's Net::Async::WebSocket::Client
Very cool, and playing with \[websockets in Mojolicious\]([https://github.com/mojolicious/mojo/wiki/Writing-websocket-chat-using-Mojolicious-Lite](https://github.com/mojolicious/mojo/wiki/Writing-websocket-chat-using-Mojolicious-Lite)) is quite fun.
&gt; Perl support / documentation for WebSockets is still somewhat lacking. This is not true, [Mojo::UserAgent](https://metacpan.org/pod/Mojo::UserAgent) and [Mojolicious](https://metacpan.org/pod/Mojolicious) have supported websockets natively since it was first released 8 years ago, and there are cookbook examples for [server](https://metacpan.org/pod/Mojolicious::Guides::Cookbook#WebSocket-web-service) and [client](https://metacpan.org/pod/Mojolicious::Guides::Cookbook#WebSockets). The [Mercury](https://metacpan.org/pod/mercury) message broker utilizes these to communicate between processes.
Thanks, I will add that. I go by the highly reasoned selection process of "what modules already have ports available on FreeBSD", so that's why I highlighted the AnyEvent version :)
Hmm, I had a hard time finding information when looking for WebSockets clients in Perl, which is what started me on this path. Maybe it's because Mojolicious does so many things, so it's not easily findable when looking for one single feature :P I've added a callout to Mojolicious in the article, thanks.
A couple more pieces of feedback: * IO::Socket::IP (core since 5.20) is an IPv6 aware replacement for IO::Socket::INET so you can use it instead in nearly any case. * Don't bother mentioning Net::SSL, it's an abandoned ancient implementation for HTTPS for LWP which is totally broken (SSL is a fast moving target). Net::SSLeay and IO::Socket::SSL (which uses Net::SSLeay) are what you want to be using.
I think it would be worthwhile to mention Mojo::UserAgent as another alternative for the AnyEvent and IO::Async clients, it is slightly higher level in some ways but it is what you want to use as a websocket client with the Mojo::IOLoop event loop.
Obligatory: [https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answers-header](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answers-header)
[Austin Powers](https://en.wikipedia.org/wiki/Austin_Powers:_The_Spy_Who_Shagged_Me). The earlier releases had methods such as `-&gt;shagadelic` instead of `-&gt;run`.
Thank you!
The "licious" suffix was a brief website naming trend. So that might have been a factor as well.
True story: I suggested Mojo (look for Hicks in the credits). He (sri) was soliciting names for his new project after his break with the Perl Catalyst project. So that is where the "Mojo" part came from. It's literally my only contribution to Mojolicious. The Mojolicious name came a little bit after that and as suggested came about because of Austin Powers and the naming trend at the time. :) 
Ha nice! Cool to hear it from the source.
Interesting, any big ones I may have heard of? None spring to mind.
The big one was del.icio.us. The only other I can think of is cyclelicio.us. Perhaps "licious" wasn't so much a trend itself but rather part of the larger trend of abusing ccTLDs to spell words.
Mojolicious originally used the mojolicio.us domain along those lines, but it was changed to mojolicious.org as .us is generally reserved for US citizens.
also, reddit bug? &amp;#x200B; [https://i.imgur.com/JYDPXJc.png](https://i.imgur.com/JYDPXJc.png)
Look at the subreddit you're in. It's "perl", not "pearl".
https://en.wikipedia.org/wiki/Pearl_onion
? the pearl onion is the official logo of the Perl foundation :) https://en.wikipedia.org/wiki/Perl#Onion_symbol
I think [this](https://www.youtube.com/watch?v=bBBrqBmeILc) is what you're looking for... :)
Interesting... so wikipedia suggests that the pearl-onion was used as a visual pun, so why does the Perl-onion logo have multiple storage leaves, whereas real pearl-onions have single storage leaf? Is it because the Perl-onion is not a pearl onion?
If you search for perl onion, you get results.
You essentially have to write XS to create the hash structure and return it. See https://metacpan.org/pod/Inline::C::Cookbook#Complex-Data and the below Hash of Lists section.
🖖🏽 Hey; I recently released this project I've been working on for a few months. It's my attempt at a framework which provides and demonstrates a bunch of modern Perl programming concepts and best practices. The elevator pitch would be that it integrates the object system, type system and subroutine signatures such that everything is type-constrainable (should you desire that) in a way that feels native to the language. Additionally, it provides classes and methods for native Perl data types, etc. The framework is designed such that you can bring your own type library and the system will integrate it along side the core type library in the current scope (package space). If you're the slightest bit interested or curious please give it a look and provide feedback, and give it a thumbs up if you like it on CPAN and/or GitHub. I would love any help in further developing it, e.g. pull requests, bug reports, suggestions, etc. - iamalnewkirk (irc: alnk)
He also talks about the layers there: &gt; Now the thing about the onion is that it teaches me something about my own importance. Or lack thereof. Namely, that while I may have started all this, I’m still a little bit of the onion. Most of the mass is in the outer layers.
Man, what a great read, thank you for the link. I'm probably just misremembering quotes from that talk.
For some reason metacpan is showing "not found" on that one, and not indexing the POD when going directly to the content... Assuming this is https://metacpan.org/source/AWNCORP/Data-Object-0.91/lib/Data/Object.pm, it looks like an interesting project indeed. Perhaps worth emphasising this part a bit more? &gt; If you're familiar with Perl, this framework is in-part the wiring up of L&lt;Moo&gt; (with L&lt;Moose&gt; support), L&lt;Type::Tiny&gt;, L&lt;Function::Parameters&gt;, L&lt;Try::Tiny&gt; and data objects in a cooperative and cohesive way that feels like it's native to the language. That's an important point, and it feels a bit buried in the documentation: this isn't just Yet Another NIH framework, but if I understand correctly it's more a way to get some of the commonly-used quasi-standard pieces without having to load everything explicitly? some other comments from a brief glance: - not wild about the barewords in the `use` lines, understood it's that way for conciseness but it also means things break when you start with `use strict; use warnings;`... - `lzy`? :( - the type safety from having objects rather than scalars is appealing, but other attempts at that have shown significant performance degradation - nice that it's optional, but maybe worth including benchmarks so people can get an idea of what sort of hit they'll take if they design a large application this way - overriding `do` is a brave choice...
What's the performance hit you take by using all these boxed data types?
I think your approach is very interesting. In fact, you have joined the same distributions I use (Moo + Type::Tiny + Function::Parameters) most of time. I'll try it. &amp;#x200B;
Not sure what happened with CPAN not loading the new release, yes that's the correct release and main module though. Thanks for giving it a lot. That's a fair point about emphasizing what Data-Object offers people who are already familiar with many of the core concepts. I'm going to add that and what you said verbatim to the intro, i.e. "a way to get some of the commonly-used quasi-standard pieces without having to load everything explicitly". ++ I agree that I probably shouldn't promote using barewords with the `use` lines. In fact, once any of the Data-Object config modules are loaded `strict` and `warnings` are enabled and you can't use barewords anymore, so the multi-import syntax doesn't actually work using barewords. The three-letter shorthands in the class attribute declarations are just sugar, you can still use `lazy` if you prefer over `lzy`. It needs better documentation but all directives have three-letter variants. Thanks for the feedback, and you're right, others are asking about benchmarks too, so maybe that'll be my weekend project. p.s overriding `do` is fun, and may eventually get phased-out depend on overall feedback
You don't have to use them, but if you do understand that they're just Moo classes, so they're fast and memory-efficient (which is why Moo was created). That said, I haven't benchmarked object creation and usage yet. Maybe I'll do that this weekend and get back to you :)
Thanks for checking it out and let me know if you have any questions!
You know that's TCL right?
Yes, but isn't Expect based on TCL or a subset of it. Of course, I might be saying something even dumber. still learning.
You could do everything in one regex, but in the interest of clarity I left kept each expression simple. while(&lt;$fh&gt;) { chomp; # remove the newline character next unless($_ =~ /^\s(\d|Port/); # skip lines that don't start with numbers or the word Port $_ =~ s/\|//; # replace the \| character with nothing $_ =~ s/\s+/\,/g; # replace blank spaces with commas print $_,"\n"; } 
Something like this should work: foreach my $line (@my_input_data){ if($line =~ m/^(Port|\d)/){ $line =~ s/(\s|\|)+/,/g; } }
@ErikTheRed1975 - Wow. Quick response. I get this error: invalid command name "while(&lt;file8&gt;)" while executing "while(&lt;$fh&gt;) { chomp; # remove the newline character next unless($\_ =\~ /\^\\s(\\d|Port/); # skip lines that don't start with numbers or the wor..." &amp;#x200B; Do I need to set the fh variable in a different way? I do want to see the output to the screen but I'm also exporting to .csv for export needs. &amp;#x200B; Here is my current code: `#!/usr/bin/expect -f` `set timeout 20` `spawn ssh -l manager` [`192.168.1.10`](https://192.168.1.10) `expect` [`"manager@192.168.1.10`](mailto:"manager@192.168.1.10)`'s password:"` `send "admin\r"` `expect "Press any key to continue"` `send "j"` `expect "sw**"` `send "conf\r"` `expect "sw*"` `send "no page\r"` `expect "sw*"` `send "exit\r"` `expect "sw*"` `log_file int.log` `send "show interface brief\r"` `expect "sw*"` &amp;#x200B; `set fh [open output_data.csv w]` `while(&lt;$fh&gt;) {` `chomp; # remove the newline character` `next unless($_ =~ /^\s(\d|Port/); # skip lines that don't start with numbers or the word Port` `$_ =~ s/\|//; # replace the \| character with nothing` `$_ =~ s/\s+/\,/g; # replace one or more adjacent blank spaces with commas` `print $_,"\n";` `}` `close $fh` &amp;#x200B; `send "logout\r"` `log_file` &amp;#x200B;
I put your code in like this but getting an error still: `send "show interface brief\r"` `expect "sw*"` `set fh [open output_data.csv w]` `foreach line [split $expect_out(buffer) \n] {` `if($line =~ m/^(Port|\d)/){` `$line =~ s/(\s|\|)+/,/g;` `print $line . "\n";` `}` `}` `close $fh` Error msg on line 20 -= foreach statement: show interface brief "if( " while executing "if($line =\~ m/\^(Port|\\d)/){" ("foreach" body line 2) invoked from within "foreach line \[split $expect\_out(buffer) \\n\] { if($line =\~ m/\^(Port|\\d)/){ $line =\~ s/(\\s|\\|)+/,/g; print $line . "\\n"; } }" &amp;#x200B;
You need to check your syntax. Try [this link](https://www.thegeekstuff.com/2011/01/expect-expressions-loops-conditions/)
@charrcheese Ok. So, I have tired a gazillion changes in hopes of using your example code. I'm still getting various errors but I think this one may be close. Can you tell me what syntax I keep missing? &amp;#x200B; `set fh [open output_data.csv w]` `set line output_data.csv` `foreach my $line (@output_data_csv){` `if($line =~ m/^(Port|\d)/){` `$line =~ s/(\s|\|)+/,/g;` `print $line . "\n";` `}` `}` close $fh
you are in wrong sub. perl is not TCL or Expect. Those are totally different scripting languages. perl does have different syntax.
/u/nathanpc /u/toyoda_kanmuri I use vultr, its a (the only?) DO competitor. Obviously no reason to switch or anything, but just FYI about DO alternatives. I think vultr is a tiny bit cheaper and has a cleaner API. DO probably has a better infrastructure. 
hmmm will check that out
Yes, but you're asking in a perl subreddit. 
Option 1. if you need to use Perl and expect then make two files...one with your expect script that generates your command line output. Then create Perl script that calls the expect script, capture the output into an array. #!/usr/env/perl my $fh=`expectscriptname`; ##then follow this with Eric The Red's Code Option 2. use Perl only...perl has a module that wraps around expect #!/usr/env/perl use Expect; # Expect.pm must be installed my $cmd = qq/ssh -l manager 192.168.1.10/; my $session=Expect-&gt;spawn($cmd) or die "Error calling external program: $!\n"; unless ($session-&gt;expect(5," password:") ) {}; $session-&gt;send(5,"$passwd\r") ; $session-&gt;expect(5,"Press any key to continue"); $session-&gt;send(5,"j\r") ; $session-&gt;expect(5,"sw**"); $session-&gt;send(5,"conf\r") ; $session-&gt;expect(5,"sw*"); $session-&gt;send(5,"no page\r") ; $session-&gt;expect(5,"sw*"); $session-&gt;send(5,"exit\r") ; $session-&gt;expect(5,"sw*"); $session-&gt;send(5,"exit\r") ; unless (@my_input_data = $session-&gt;send(5,"show interface brief\r") ){}; # captures the output $session-&gt;expect(5,"sw*"); $session-&gt;soft_close; ## then follow this with charrcheese's code 
Sorry the quick and short tone offended; I was at work and rushed. That said, I would imagine that many people looking at this will wonder why they’d want to box strings and arrays and I’ll bet that the majority will assume that the larger objects are built on these basics and therefore also slow and just dismiss the whole thing. It would help you to have some benchmarks in your documentation to cut off peoples’ assumptions, assuming that, indeed, Moo is fast enough that the gap between Moo’s performance and native entities is worth the enhanced functionality. I hope it is. Good luck. You gonna present this at TPCiP?
Thanks for the reply. I'm not sure if I'm going to present at YAPC this year, mostly because I didn't consider going until recently and I have too much going on to properly plan the trip and talk. &amp;#x200B; While I recognize that you weren't asking the question necessarily, I'll respond with an answer here so that others reading this who may actually have held this thought which you posited will see a reasonable response. &amp;#x200B; Boxing non-objects (e.g. strings, array, etc) with a standard wrapper provides methods for operating on its value(s) so that users don’t have to reinvent the wheel for common operations, and, provides an API which acts as a standard, especially in a system that uses or enables strong-typing.
Because a few people asked for benchmarks, and wanted to know what the performance hit of using a framework like this is, I sat down to do just that this weekend. &amp;#x200B; While beginning to write up benchmarks it occurred to me that doing so at this stage violates the "make it work, right, fast" principle. &amp;#x200B; Currently, the framework works and is considered stable, and so it works. I'm now in the process of cleaning things up, tightening the documentation, and making it "right". &amp;#x200B; Once I've achieved that, I'll move on to making it fast and producing benchmarks as evidence of that.
I admit I upvoted this one before following the link. 
Learning Perl 7th Edition is a good book and actually pretty new, only a few years old. On "is perl still used today", it is used but not in the same way it was 20 years ago. Learning it can be quite useful, especially in devops and systems administration. But it very much depends on what you want to do. For example, if you want to get a full time robotics developer position you will probably be better off learning Python. 
The 7th edition of *Learning Perl* is two and a half years old. There have been a couple of new versions of Perl since it was published, but it's still a good guide to the current state of the language. Perl really doesn't change that quickly (and that's generally seen as a feature).
While it is a great book, [I would not recommend it as a tutorial](http://perl-tutorial.org/rejected/learning_perl_6th/) for learning the basics of Perl. (The 7th edition has not, to my knowledge, corrected these issues.)
In my web apps I do the exact opposite of this module. Preload all the modules, since locking the process down removes all unneeded access to the filesystem. I can see myself using this to speed up some of my command line tools that take a couple seconds to load before running.
Oh yes, this makes no sense for a long-running application. So just CLI and test suite. There are `no Module::Lazy;` and `PERL_LAZYLOAD_DISABLE=1` switches for exactly that reason. 
Thanks!
Glad to hear :)
Thanks a lot! It seems that ' [Minimum Viable Perl](http://mvp.kablamo.org/) ' and ' [Perl Maven Tutorial (Gabor Szabo)](http://perlmaven.com/perl-tutorial) [for Perl Programming](http://perlmaven.com/perl-tutorial) ' are the latest. I mean, i see older books, like 'Modern Perl' that's from 2015 and covers perl 5.20. The first two covers per 5.8 instead. Strange. I'm missing something maybe. Anyway the Perl Maven seems weel done. Could be a good start?
The perl version listed there is the *minimum* that is covered by the tutorial, not the version it was written for. Even some of the tutorials that are several years old show modern enough practices (that's why they're still listed there); modern practices haven't changed a whole lot over the past decade, but unfortunately bad information from before then still gets repeated. Minimum Viable Perl, Learn Perl in Y Minutes, and Learn Perl in 2h30m are all quite good short-form tutorials, and Modern Perl is the go-to book once you've learned the basics.
Yep, sorry for that. Thanks for the clarification :) &amp;#x200B; You named all of them except the one that caught my attention the most. The Perl Maven. What you think about it? &amp;#x200B; &amp;#x200B;
A neat idea but I think a modicum of caution is advised, as people like to take things like this and apply it everywhere in the name of "optimization", and then they've got new problems. In most cases loading modules at compile time is more optimal (both because it is guaranteed to happen at startup rather than later, and because any forking will share the preloaded module as copy-on-write), and you can always do runtime loading with `require` or Module::Runtime where it's appropriate.
It has a lot of information covering a large amount of topics, but compared to the other options I am not sure it presents the most important information.
Hacker news discussion of the perl script here, https://news.ycombinator.com/item?id=19423036
Cool article, thanks for posting. Not sure if I want to believe the author though when he says "many programmers today may have never heard of Perl".
Oh, I believe. EMCAscript usage has been prolific. 
&gt; *modules get documented or they get ignored* So true. As we prepare for the **[AI Manhattan Project](http://ai.neocities.org/JAIC.html)**, **[ghost](http://ai.neocities.org/perlmind.txt)**.pl AI has fifty well-documented Perl **[Mind Modules](http://ai.neocities.org/AiTree.html)**. 
And yet it still works. Unlike the idiot who wrote this article.
And some large software systems are at least partly written in Perl, plus lots of the Linux infrastructure. It's not going anywhere.
Just as dumb [last time it was posted](https://www.reddit.com/r/perl/comments/99a1l6/article_perl_doomed_to_extinction/).
Heh. Lots of the SNMP extends used by LibreNMS have been written in Perl. Also not something likely to change any time soon. 
Totally believe it nowadays. People do sometimes ask "Perl? What is that?" when they chat/talk with me.
Sign of a clickbait title: the first paragraph contradicts it immediately. "Here are five languages that won’t disappear tomorrow, but the long-term trends definitely don’t look good."
"Weeks later, a funeral was held. All of Ireland was in attendance, including John Jameson" (c) Jameson commercial.
Easy to misuse, it's true. I spent a fair amount of time with NYTProf to determine the exact `use` lines to tackle with. And there's still a cluster of interdependent modules in our repo that I never managed to lazyload without breaking. But reducing build time _by half_ was worth it anyway. 
Good catch. I actually didn't read the entire article, I skipped to the section about Perl.
Agreed. Thanks for pointing that out. It popped up in my feed so I figured I'd share but I never looked at the date. I collect article on "Perl Hate", either because I'm a masochist or because I intend to write articles to debunk these things eventually.
I'm not sure if it's the best way to deploy a mojo app. nginx unit is a psgi server which means that it can't make use of mojo's async capabilities.
Would this potentially reduce memory use in forked processes? For example if a module isn’t loaded until after the fork occurs. 
That's a good thing, it means Perl will pick up. When Perl was the only usable game in town for CGI the Perl versions were 3 and 4, and those were not exactly appropriate for large scale web applications. Perl 5 came after and it was really good for very large codebases but people still remembered Perl 3 and the pain of "require"-ing files in the middle of a function and having to deal with a lot of global variables etc. &amp;#x200B;
It is a trade-off. Memory used in the forked process will be reclaimed when it exits, but loading a module before forking means most of the memory will be shared due to copy on write.
It wouldn't be my first choice, but it's good to have options.
&gt;Conor Myhrvold wrote for Fast Company in **2014**. Not much has changed since. Exactly. [OpenHub](https://blog.openhub.net/about/)'s stats show ***Perl's*** ***relative*** ***share*** *among the languages used in all the projects they track has remained* ***roughly stable since 2014.*** Here's an aggregate chart comparing [C#, Go, Haskell, Perl, Rust, and Scala](https://www.openhub.net/languages/compare?utf8=%E2%9C%93&amp;measure=commits&amp;language_name%5B%5D=csharp&amp;language_name%5B%5D=golang&amp;language_name%5B%5D=perl&amp;language_name%5B%5D=haskell&amp;language_name%5B%5D=rust&amp;language_name%5B%5D=scala&amp;language_name%5B%5D=-1&amp;commit=Update) over the last decade. And [C, Perl, PHP and Python](https://www.openhub.net/languages/compare?utf8=%E2%9C%93&amp;measure=commits&amp;language_name%5B%5D=objective_j&amp;language_name%5B%5D=c&amp;language_name%5B%5D=perl&amp;language_name%5B%5D=php&amp;language_name%5B%5D=python&amp;language_name%5B%5D=-1&amp;commit=Update) (I included Objective-J to set a near zero baseline). Perl is no more dying or doomed than anything else in tech no matter what prognosticators have said for two decades.
I'd believe "never seen", just like many people never saw a simple Cobol division, but know it apocryphally. Which makes Perl the Rosebud/Thus Spoke Zarathustra of programming languages.
Never underestimate the value of working code. I consider "boring" and "stable" a language feature. I have Perl 5.x code I haven't touched in over a decade. Just keeps quietly and reliably chugging along, all dull and boring. 
The best engineered machines are the ones you never notice.
perl6 != perl. Larry should have used a completely new name for that project.
Reads like it was written by someone who flunked a rudimentary programming elective in a 3rd rate college. As soon as he cited the TIOBE index I knew this wasn't a serious at article. 
LOL programming as a blog fashion statement. What is Perl going to vaporize from /usr/bin/ while I'm asleep? I've never understood the fashionability for languages. I don't think I've ever looked at a problem that needed to be solved on a Unix machine I've used where Python was even a choice over Perl, unless you just wanted to mandate it. Also as much as I freaking hate VB and having to declare anything as an object before you can do anything, VB is still the only game in town for thousands upon thousands of Windows IT departments corporate or military. Powershell was dead long ago, it just didn't know it yet. &amp;#x200B;
To be fair, you could say the same thing about most of the code that's out there. Computers are deterministic machines so the same code will keep running in the same way unless something changes. 
I wrote https://metacpan.org/pod/Mojolicious::Plugin::RequestBase to solve the same problem 🙂
Could you compare this to [Class::Autouse](https://metacpan.org/pod/Class::Autouse)?
In what ways would you benefit from running a Mojolicious application behind a web server like nginx, as opposed to having hypnotoad listen directly on the external interface?
[removed]
* Load balancing * Caching * Serving static files more efficiently Also, as the article explains, hosting multiple separate applications under one domain.
Oh my, I missed it when looking for prior art. The idea is basically the same, but Class::Autouse has more features (recursive loading, checking for file to exist). The only extra thing that Module::Lazy has is a fake $VERSION in case someone wants to "use Foo 3.14;" (this fails with Autouse). Also Lazy has environment variable support and handy unimport shortcut instead of :devel argument. Both can probably be backported.
Very true. I’ve flirted with other languages and nothing has come close.
Thanks for the reply. It sounds like I should start experimenting with a reverse proxy setup.
2017 is fine. Many of us are working on 5.14, 5.8.8 or worse. 
Strawberry Perl for Windows.
Look at the -i and -p switches. Specifically: $ perl -pi -e's/\s/\n/g' myfile.txt
It has some sort of package manager like Active Perl to download and organize CPAN modules?
Thank you for your comment. I get "Can't do inplace edit without backup"
Ah, you’re on windows. Change '-pi' to '-pi.bak'. The original file will now be saved with a “.bak” extension, which you can then remove.
It has the actual CPAN, which is even better.
Thank you! perl -pi.bak -e's/\s/\n/g' myfile.txt - did not work perl -pi.bak -e "s/\s+/\n/g" myfile.txt - this one did!!!
Download VMWare and your are FREE from windows. If you want to enjoy your learning then Windows is not the best platform, in my humble opinion. You will find plenty of articles how to setup VMWare in windows.
Yes. It has ppm and you can directly install with cpan, even if it requires a C compiler, as it is included.
Thanks! 
Thanks for the suggestion! 
That's the Windows command line. Not perl.
Really well supported, great supporting libraries, available on almost every platform ever. Ya I'll stick with Perl.
Oh, I see. Yes I'm on windows cmd
My sense is that ActiveState, the company behind Active Perl is going in another direction with their business. Looks to be cloud building, that won't build a perl distro, so useless to me. We're right now doing a port to clean Perl.org's Perl + CPAN to mitigate the risk of them just abandoning the product.
No idea; I just use cpan.
perl pie is your friend.
It's my favorite kind of pie.
**[Artificial Intelligence](http://ai.neocities.org/ConJoin.html)**uses **[Perl](http://strawberryperl.com)** to think in **[English](http://ai.neocities.org/EnThink.html)** and in **[Russian](http://ai.neocities.org/RuThink.html)**.
Check out [Twitter::API](https://metacpan.org/pod/Twitter::API), it's a redesigned API client by the same author.
Thank you, will do.
Hey we're actually still building our ActiveState distros but created a Platform so you can build your own distro as well. Although still in Beta, you can test out the Python functionality. You can even get a free account to pick up the perl distros here, you get your own fork of the project so you can also get updates as to changes. Note that you can use free functionality but we're still in Beta, feedback welcomed: &amp;#x200B; (ActiveState) Perl 5.26.4 here: [https://platform.activestate.com/ActiveState/ActivePerl-5.26/auto-fork](https://platform.activestate.com/ActiveState/ActivePerl-5.26/auto-fork) (ActiveState) Perl 5. 24.4 here: [https://platform.activestate.com/ActiveState/ActivePerl-5.24/auto-fork](https://platform.activestate.com/ActiveState/ActivePerl-5.24/auto-fork) &amp;#x200B; Our goal is to automate the building, certifying and resolving of all languages. And work with dev's workflows, ie not make any new changes. &amp;#x200B;
Is there no mechanism whereby the Congress, err, Parliament, errm: Community, can override a rare instance in which the benevolent dictator errs?
From the module literature: XML::Bare::forcearray( [noderef] ) Turns the node reference into an array reference, whether that node is just a single node, or is already an array reference. So I would try that, if it it didn't work as intended I would make a small function elsewhere that would turn a value or a array reference and return a list (or array ref) no matter what, using UNIVERSAL::isa to inspect the input.
I think on Windows by default the command line closes when the program in it closes, you can turn that off in the preferences but it's been years since I used it I'm afraid.
You have encountered the fundamental issue with attempting to convert XML to Perl data structures. The data format does not map cleanly, as any tag in XML can contain text interspersed with zero or one or more tags, as well as attributes. So attempts to convert it "usefully" results in different structures when the structure of the XML hasn't actually changed, but it has a different amount of data. The more appropriate way to handle XML is with an XML parser that parses into an internal tree and allows access usually via XPath or CSS. [XML::LibXML](https://metacpan.org/pod/XML::LibXML) is an example of the former and [Mojo::DOM](https://metacpan.org/pod/Mojo::DOM) the latter. For example: my $dom = Mojo::DOM-&gt;new-&gt;xml(1)-&gt;parse($xmltext); foreach my $i ($dom-&gt;find('mylist &gt; item')-&gt;each) { # $i is a Mojo::DOM object as well, representing the item tag }
Open a DOS window and run it from there.
In the preference of windows? 
In the preferences of the command line, i think maybe right click on the black background?
I agree with Grinnz in general and since I am an old guy that has been using perl since the very early days, I prefer XML::LibXML. However, it and similarly more comprehensive XML parsers are more complex to use and usually are much slower than XML::Bare or XML::Fast. Consequently, at times I have used both when the XML structures are sufficiently simple and/or performance is an issue. Both require handling edge cases at times, as you have learned. If you want to keep you current parser, insert something like the following at 46 If (ref($root) ne 'ARRAY') { $root = [$root]; } Assuming $root is a single instance of your XML. Hth, lbe
I am using a parser though. That's why I included lines 45 and 45 again (oops screwed up my hand numbering).
So the thinking here is that it's not a perl issue, but an XML::Bare issue? if the list has one item, XML::Bare is not returning it as an array? I'll investigate this, it seems simple and easy. Thanks.
On reading it seems that is for manipulating individual nodes? I'll have to investigate more. Thanks for the reply.
You could do something like `my $line = readline(STDIN);` On the last line of your script to pause and wait for you to hit enter before the prompt closes.
Hmm, very interesting. ref ($root) is always HASH on both the big list and 1 item list. So I had to go deeper into the structure. It wasn't until I got to the item level that a difference was seen. When the list is large, ref ($root-&gt;{mylist}-&gt;{item}) is an ARRAY. When the list is only 1 item, then ref ($root-&gt;{mylist}-&gt;{item}) returns HASH. So, adding the square brackets around like in your code suggestion turned the hash into an array and it works. I don't understand why it all works, unfortunately. Much of this is beyond me, such as I really don't get what the @{ } is doing in my original posted line 46. I thought that made an array, but here we already have arrays. Taking it out just errors out, so it's needed. Thank you for your help.
Or Powershell
If I were on a PC I could test, but I'm on a phone. My first thought is the module returns a scalar when there is only one, but/and an array reference when more than one exists. So I would handle it testing the return with UNIVERSAL::isa before blindly un-referencing an assumed array ref. 
Normally developers run their scripts via the command line instead of double-clicking them.
Glad it helped. To understand the details, Google perlref, perlreftut and perldata. A hash is just an array with an even number of elements
Or git bash.
Windows is kind of like cobbled together crap which never fits right when it comes to most things open source. You can do it but it's just an exercise in frustration. Bite the bullet now, learn a little Linux and avoid a billion hours of frustration later. &amp;#x200B;
Your program prints "hello world" and exits. Once it exits, the window closes, so like the above comment says, you can read a line from standard input to block until you're done with the program. 
Yeah, just like my sledge hammer with solid steel handle. Yet anything something breaks it's the first tool I pull out. &amp;#x200B;
CLI tools could make this task simpler. Something like: % t update \`shuf -n tweets.txt\` Ref: [https://github.com/sferik/t](https://github.com/sferik/t)
That is perfectly normal behaviour. Any batch file you would have written on Windows would behave identically. The script prints out and exits immediately. Just spawn a new command window, and run your script from there.
That's not right. Hashes and arrays are distinct data structures: `use Devel::Peek 'Dump'` to inspect. What you mean is that a *list* can be coërced into a hash by assignment, and if the list has an even number of elements, there won't be a warning. It is very important to understand the concept of lists in Perl.
It's sometimes difficult to find every bit of prior art. I don't know if CPAN supports keyword tagging of modules; that would help. 
Excellent writeup!
Not untrue, but "unless something changes" is the key phrase. In my experience, some code is more resilient when the environment changes than others. Maybe it's just that the environment tends to change more frequently with newer languages, or those changes are more likely to break old code. Perl isn't unique in this, but some are just downright finicky.
I'm not a fan of these. Yes I can "solve" them, thank you very much, but so can anyone else who's used perl for long enough to find themselves here or on that page. The blog posts about perl suffer from an eternal newbie syndrome. Over at r/programming people show off with advanced algorithms, and here you ask people to find the operator that does exactly what is asked. A better challenge would be: Take the test suite of Config::Std and write an implementation without Class::Std or any other underlying inside out classes that passes it. Bonus question for the people that are the target of the original challenge: What are inside out classes?
:( I for one am happy to see it here.
They do need better advanced challenge suggestions. You should send them yours, otherwise it's not gonna happen.
Why? Whats wrong with system libxml2?
Nothing, and it is used if available.
Many systems don't have libxml2 or at least its headers (required to compile against it) by default, so this requirement created additional non-obvious steps for installing this module with a CPAN client. Also many versions of libxml2 are not appropriate for building against. Alien::Libxml2 will use the system version if its headers are present and it's an appropriate version, and install libxml2 for its own use otherwise.
I dunno who's told you that liz but I love seeing the weekly updates.
Thanks for all your writing efforts, and sorry that you got any negative feedback. Surely there is enough room for all of Perl here, it takes but a second to hide a post if it's personally uninteresting.
Speaking as a moderator here, it's been many months (probably well over a year) since I've seen any complaints about Perl 6 material being posted on this subreddit. The description of this page says "The Perl Programming Language, including both Perl 5 and Perl 6" and I want to see both languages represented here.
I don't see a problem with having it posted here. I'm a long time Perl 5 user and have never used Perl 6 in anger but I'm still always interested to see how the project is coming along.
I do wish to be able to use this subreddit for Perl 5 related content only, the occasional related news about other languages is not a problem but as I have previously mentioned I prefer to go to /r/perl6 for regular Perl 6 content. Regardless, I still appreciate the work you do writing these up and do read them from there.
Someone else will submit the link here.
I did note earlier today that the point score for the latest update post was very low, so I'm guessing that's part of it.
The 40% upvoted was the final push for me today.
That wasn't me. But I totally have no interest in Perl 6, the same way I don't care about Scala.
I would guess that many people who still object to Perl 6 material have stopped reporting the posts if they did (it's not a great use of the report function anyway) and simply downvote.
I've been away from the community for a while. Has there been some sort of a schism that I'm unaware of? It seems like Perl 6 is now considered a wholly separate language.
It has been a wholly separate language for quite some time.
The "v5" idea was not dropped because `Inline::Perl5` became available. It lost its only contributor, after it became clear that `Inline::Perl5` solved a lot of the issues. Also, may I remind you about https://www.perl.com/article/an-open-letter-to-the-perl-community/ ? If there are no people with this itch, it will not happen. Saying **the 'v5' idea was dropped** implies some mastermind deciding that it was time to ditch Perl 5. I wish there was a mastermind.
It is not in my book.
I made no such implication.
Why not use `File::Find` and do it all in perl?
Good question, that the article should have answered. In my case I wanted to use find to drive the Perl program because I consider it slightly easier to edit and fix on the cli than in a program. Also, I wanted to learn a bit more about find and the speed difference between \; and \+. Finally, I can imagine that this solution is faster, and can be modified easier (with cli tools) by other users. 
There’s a site for just such as this.
ask in Freenode #slic3r https://webchat.freenode.net/?channels=#slic3r
I didn't know about the `--exec` option (actually there is a lot about `find` I don't know) so I would have done something like `find ... | xargs perl ...`. For the in-perl solution, I like [Path::Iterator::Rule](https://metacpan.org/pod/Path::Iterator::Rule).
The summary doesn't solve the problem correctly. When a number is divisible by both 3 and 5 it's supposed to print "fizz buzz", yet here it prints "fizzbuzz".
Anyone used this extensively?
I know about `-exec`, but I didn't know there's a `-exec COMMAND \+` variant, which alleviates the need to use `xargs`. Furthermore, glancing at the manpage turns out there are also `-execdir COMMAND ;` and `-execdir COMMAND +`. Nice to know. 
True, whipping up `find -mtime +10 -maxdepth 2` is many times faster than writing an equivalent in Perl using File::Find. Even so when we want the equivalent of `-mount`, `-H`, and so on.
So basically this is about the script compilation overhead, which matters if you need to run a script many times. I have this problem too when I need to run awstats.pl (a gigantic script with &gt;= 1s compile overhead) thousands of times (once for each subdomain on a shared hosting server). We looked at solutions like CGI::SpeedyCGI or PersistentPerl to keep script running in memory, but the success depends on how "clean" the script is.
Yep, around 8k ppl. But seems they are not here :) &amp;#x200B;
These are really cool! Thanks!
Given that `popularity-contest` is written in Perl, this is entirely unsurprising.
Also, isn't a vast majority of Debian's toolchain written in Perl? Shit like dpkg and friends?
It's the one installed by default and it's impossible to remove (the packaging system itself uses it), so the popcon isn't at all surprising.
Here's a solution I just came up with #!/usr/bin/env perl use strict; use warnings; use feature q(say); use Scalar::Util qw(looks_like_number); my $stop = @ARGV &amp;&amp; looks_like_number($ARGV[0]) ? int shift : 100; foreach (1 .. $stop) { my @fb; ($_ % 3 == 0) and push @fb, 'fizz'; ($_ % 5 == 0) and push @fb, 'buzz'; (@fb) or push @fb, $_; say join q( ), @fb; } 
IIRC, they've been slowly trying to replace it, but that's a huge undertaking.
Being more used than glibc itself should give people a hint. Clue: Perl uses glibc.
I like the fizzbazz one. I'd recommend to make it abit stricter forbidding to use the `%` operator. 
SQUEEEE!!!!!!
Yeah. Ask me how many times we see “*I deleted Perl on my Raspberry Pi because nobody uses it and now I can't install packages*” questions on the Raspberry Pi forums.
Similar to another solution posted yesterday, it bothers me that solutions being proposed print fizzbuzz instead of "fizz buzz". The space is clearly part of the requirements.
Well, I guess I could do this: &amp;#x200B; perl -E'@a=((fizz)\[$\_ % 3\]//(),(buzz)\[$\_ % 5\]//()), say @a?"@a":$\_ for 1 .. 20'
How many times?
At least once.
Golfing slightly, and converting it to a command line script: $ perl -E'$_%15?$_%5?$_%3?say $_:say"fizz":say"buzz":say"fizz buzz" for 1..20'
As a longtime Bostonian, I love [scala (plural: scali)](https://en.wikipedia.org/wiki/Scali_bread)! Oh, you mean the language…
dpkg and apt-get themselves are C, but a lot of their support scripts are Perl.
&gt;Write a one-liner to solve the **FizzBuzz** problem and print the numbers 1 through 20. However, any number divisible by **3** should be replaced by the word ‘fizz’ and any divisible by **5** by the word ‘buzz’. Those numbers that are both divisible by **3** and **5** become ‘fizzbuzz’ The space is clearly \*not\* part of the requirements.
It *was* part of them, the site was updated
That's a big assumption I suspect. I wish I saw this earlier, I attempted to help them in /r/phphelp, but same entitled and rude attitude
There was a direct complaint about the Perl 6 weekly being posted here less than a month ago. It was the first comment on the post and set the tone for any of the others. 
Slight compression perl -E 'say $_%15?$_%5?$_%3?$_:"fizz":"buzz":"fizz buzz" for 1..20'
I think you're confusing this with a different initiative ([YaST =~ s/Perl/Ruby/](https://news.opensuse.org/2013/10/10/coming-soon-opensuse-13-1-with-yast-in-ruby/)). I'm on pkg-perl and there's a good amount of traffic from maintainers of both Debian infrastructure written in Perl and Perl-based non-CPAN packages in the distro. AFAICR across half a decade only one said the plan is to rewrite a thing in something different.
Try: perl -E 'say+(fizz)[$_%3].(buzz)[$_%5]||$_ for 1..20' 
Are you using the [Switch](https://metacpan.org/pod/Switch) module? Perl doesn't have a `case` statement built into the language. There was an attempt to port in `given/when` from Perl6, but it had some issues rooted in the smartmatch operator and is now marked experimental. Your best bet is to use a good ol' fashioned series of `if/elsif` statements.
You seem to be mixing up Perl and Bash. They aren't the same language.
Thanks for posting. Might try to attend this.
Surround the var in quotes: system(qq{sh /tmp/send.sh "$searchName" });
Thanks a lot! worked like a charm!
When the `$searchName` gets to the shell it looks like this: sh /tmp/send.sh Test Name - Name Test Which isn't really what you want. The problem here isn't your Perl, but how the shell is interpreting your arguments. You have two ways to fix this problem: Put quotes around the variable name that gets sent to your shell: system("sh /tmp/send.sh '$searchName'"); or bypass the shell and call `system()` with [an array](https://perldoc.perl.org/functions/system.html) instead of a string. my @args = split(/\s+/, $searchName); system("sh", "/tmp/send.sh", @args);
which will of course fail if the search name contains quote characters, or other shell metacharacters.
If you can install CPAN modules, the IPC::Run module is your friend for easily *and safely* running shell commands: use IPC::Run qw( run ); run ['sh', '/tmp/send.sh', $searchName] or die q(couldn't send); Alternatively, use the multi-argument form of system(): my $exit = system('sh', '/tmp/send.sh', $searchName); if ($exit != 0) { ... # handle error } &amp;#x200B;
&gt; bypass the shell and call `system()` with an array I'm glad I didn't have to be the one to say it. This is the right solution.
Don't do this, use [String::ShellQuote](https://metacpan.org/pod/String::ShellQuote) (or the list form of system as mentioned elsewhere)
*nitpick* it's a list, the array is inconsequential.
It's kinda funny you say "bypass the shell",as his his command explicitly calls the shell. But yet an another alternative might be to use open, with a pipe,in case he wants to read the output of the script, instead of just calling it. See perldoc perlipc. And, in this case, the problem of the quotes in the command line remains.
It works like a charm until, as /u/latkde pointed out, it doesn't. Please use any of the other suggested solutions besides this one.
They've been in core under a flag since 5.20 without significant changes, nearly five years...I'd give pretty good odds it'll stop being marked experimental in another revision or two. I mean, if people hated it, or if it had fundamental implementation problems, it would have gotten beaten up by now and either been removed or had some major incompatible changes (which has happened a few times with other features). Neither has happened for signatures, and it seems to have the approval of a few big projects. So...I'd say, use them if you have confidence your code won't be deployed on pre-5.20 Perl versions. I can't use them for a few more years (installable software that needs to work with the distro-provided Perl on all currently supported versions of CentOS, Debian and Ubuntu), but I'm looking forward to it eventually.
/u/pre_action, as someone who is still relatively new to Mojo and Perl, several of your blog posts and your work with Yancy have been really valuable, so thanks!
I believe the experimental policy is that features that have gone 2 (or 3?) stable releases without major changes can be moved into core. When signatures were first introduced in 5.20, attributes came before the signature. This was changed in (I believe) 5.22 so that attributes came after the signature. This was to improve readability, and truthfully it is more readable in most cases, except that it's incompatible with the `lvalue` attribute, which needs to be resolved first, as that can change how the signature behaves. Unfortunately, this means that in 5.28, the order was swapped again so that now attributes have to come first. If the order was never swapped, signatures probably would have gone core in 5.28. As it stands, we'll probably need to wait another few stable releases.
Does intellij allow you to work on remote Perl files via ssh (e.g perl file is on a remote server you would normally connect to via ssh and edit with vim as an example). 
not yet. An workflow differs anyway. It downloads remote project to local machine, works with local files and synchronizes them with remote.
I believe this is correct. It's also very, very frustrating because signatures are heavily used by a number of my clients because of how useful they are. This is one time that I would like P5P to "bend the rules a little," though I suspect they won't. 
question? example? link?
The missing link is https://github.com/NYgramps/dirtree.
If they aren't urgent issues (which it sounds like they aren't if the last releases were in 2012), you might try slapping some hacktoberfest labels on some of the issues. You might pick up some Perl hackers trying to score some commits in October. I made a couple pull requests to issues labeled hacktoberfest on XML::Feed last October. Depending on the issue, you might also want to label some of them [up-for-grabs](https://up-for-grabs.net/) or similar labels. Some people do use those labels to find projects to contribute to.
Is there a guide for how entries on GitHub should be structured?
It's pretty safe to say at this point that it's in experimental status to allow for breaking syntax changes, not for the possibility of removal.
That's a very good suggestion. To be honest, we could even use help with someone adding labels. At this point I'm happy for pull requests, but they do create \*more work\* in a lot of cases. I'd be happier to have folks helping with triage of issues and existing pull requests to start with.
I feel like if your parallelism code explicitly deals with fork you're very much reinventing the wheel - there are a lot of good abstractions for that on CPAN already. [https://metacpan.org/pod/MCE](https://metacpan.org/pod/MCE) is one, there are many more.
If you're still having trouble understanding the @{} stuff, I recommend reading [perlreftut](https://perldoc.perl.org/perlreftut.html), which is a short tutorial on references. Like other posters, I recommend using XML::LibXML. To help people switch, I've written a tutorial called [Perl XML::LibXML by Example](http://grantm.github.io/perl-libxml-by-example/).
Parallel::Process
Good question, I will write up a short note about it.
With the code in GitHub, you might try to offer their repositories to [Pull Request Club](https://pullrequest.club).
Nice. I've written [perl-etags](https://github.com/choroba/small-scripts/blob/master/perl-etags.pl) for Emacs' etags, but it only works with regular expressions.
Nice. When this gets released in ctags, please post an announcement.
Except we shouldn't just tell people "don't learn how to use fork, ever".
The tutorial looks well written. But I'm reticent to change libraries, because the current one is working. I'm old school that way. :) Thanks.
Neat. The only Perl extension that works well with VS Code (on my machine at least) is ctags based, and Moose/Moo is a big part of what makes Perl the superior choice to other scripting languages in my decision making process.
Hum. My company firewall rules block *.club Go fish!
I'd like that too, though p5p generally err on the side of caution... but if _all_ that's changed is the ordering of attributes, and nothing else major changed in the implementation, then one could make the reasonable argument that apart from parsing order, the feature is stable. Side note: I also hope we get support for declared refs in signatures. Being able to do `sub diff(\@one, \@two) { ... }` would be pretty sweet.
Thank you, this is great. Any idea if the syntax is similar enough that this would apply to `Mojo::Base`, which also uses `has` for attributes?
Perl binding for OpenSSL (Net::SSLeay?) is not a dependency (direct or indirect): https://metacpan.org/source/DTOWN/Net-SNMP-v6.0.1/META.yml#L68 Can you please show the full log of what you did?
Order of Operations: * Download net-snmp source code from sourceforge. * Run "./configure --disable-debugging --enable-ipv6 --with-defaults --with-persistent-directory=/usr/local/db/net-snmp --with-logfile=usr/local/log/snmpd.log --without-rpm --with-perl-modules --with-openssl=/usr/local/opt/openssl" * net-snmp successfully installs, but the compiling of the perl modules fails &gt;ld: library not found for -lcrypto.35 &gt;clang: error linker command failed with exit code 1 &gt;make[2]: *** [../blib/arch/auto/NetSNMP/default_store/default_store.bundle] Error 1 &gt;make[1]: *** [subdirs] Error 2 &gt;make: *** [perlmodules] Error 1 I've only had this issue on Mojave. Initially, net-snmp wouldn't compile at all, but that was due to a missing header file. These perl modules are needed for use with SNMP::Info; I am not using Net::SNMP from cpan. 
matthewpersico asked: &gt; If you’re not worried about fork failing, I recommend using Parallel::ForkManager, ... &gt; I don't understand the comment; does Parallel::ForkManager not handle failed forks well? I wondered if anyone would ask about that. I did have a longer explanation in there, but the article was getting long, so I cut it out. Parallel::ForkManager's `start` method dies if the fork fails. Which leaves you with zombie children that will keep running until they are killed or exit normally and are reaped by init. For many cases that's fine. However if you want to handle a fork failure with specific behavior (like executing a cleanup routine), then you need to wrap `start` calls in eval, and store the pid(s) it returns. Then you have to implement your own blocking waitpid call that reaps those pids. By this point, you've implemented almost everything you need to handle the concurrency yourself, and Parallel::ForkManager isn't needed, unless you want to take advantage of it's data sharing feature (or some other behavior it provides).
If I understand right, you could use a nested hash. &amp;#x200B; `$tree =&gt; {` `Professor =&gt; {` `Cubert =&gt; 1,` `Hermes =&gt; {` `Dwight =&gt; { Fry =&gt; 1, Bender =&gt; 1},` `Leela =&gt; 1` `},` `Zoidberg =&gt; 1,` `Amy =&gt; 1` `}` `};` &amp;#x200B;
i didn't even think of a nested hash! so much easier than trees :) &amp;#x200B; thanks!
You can escape the quotes, or use single quotes for the string, and double quotes for the quoted text *in the shell*. You can use backslashes for escaping, which isn't fun at all. I think the best is to use **system** with an array, as described here: https://perlmaven.com/running-external-programs-from-perl Something like system('my_program', 'arg1', 'arg2', 'arg3 has spaces', 'arg4'); and there is no problem with escaping.
Memories, not good ones. At one job, the parser expected quote marks in strings on the command line - legacy code, don't ask me why it was done that way. Anyway it was a mess until **ShellQuote** was discovered.
In other words, P::FM needs some love...
Exactly. Everyone should use fork so they understand the various abstractions’ inadequacies..
In particular at https://metacpan.org/source/YANICK/Parallel-ForkManager-2.02/lib/Parallel/ForkManager.pm#L94. The new() call should have an option that tells the object whether or not to die or return. If return then the parent could decide not to try any more forks but still wait for any kids. You could also accomplish the same thing with no P::FM changes, but eval black in the parent. Either way, smells like a PR to the maintainer;code in the former case, doc in the latter. Have to check that the internal structures for any successful forks prior to the failure are still viable after a failed fork.
By the way your example tree/hash does not match your ascii art: Zoid’s parent is inconsistent between the two.
Maybe you can get Mohammed S. Anwar involved; he’s the Pull-a-day guy, right?
As a guess, install [zlib1g-dev](https://packages.ubuntu.com/search?keywords=zlib1g-dev)
I also recommend [IO::Async::Process](https://metacpan.org/pod/IO::Async::Process) as a wrapper for this, despite the possible learning curve for how event loops work, it makes extending your program much easier.
Very nice in depth tutorial. You can perhaps [simplify the install instructions](https://www.reddit.com/r/perl/comments/b5h9z7/xmllibxml_can_now_be_installed_without_system/) a bit now.
This use case benefits from a little bit of OO. Instead of having a hash with just something like `{ Professor =&gt; { Cubert =&gt; undef, Hermes =&gt; { Dwight =&gt; undef, Leela =&gt; undef } etc... } }`, do it the more orthodox way. I'd suggest that you define a Node class with name and list of children property, so you can do this: `my $professor = new Node("Professor"); $professor-&gt;add(new Node("Cubert")); my $hermes = new Node("Hermes"); $hermes-&gt;add(new Node("Dwight")); $professor-&gt;add($hermes);` and so on.
Good work!
I initially thought that too. However, that gets installed when you install command line tools via "xcode-select --install". I'm currently on the latest revision and have reinstalled it twice, so I don't think that's the issue.
Is there something wrong with GD::Graph or Chart::Gnuplot? I have used both successfully.
Awesome! Always nice to see cool things being built in Perl. The best way to show people Perl is still relevant is to build cool things with it.
Nice work - quite like the style/look of Plurrr (and your main site). Enjoyed your previous article too! 
There's nothing wrong with them, but compared to R's ggplot2 they're limited. Seriously, ggplot2 is the best data visualization package I've ever seen... getting a version of it for perl is a Good Thing (Myself, I've been using perl code to generate R code to run ggplot2.)
I'm about ready to remove this because it has nothing to do with using Perl.
? The first line: 93% of Paint Splatters are Valid Perl Programs
Which has nothing to do with using Perl.
The article looks entirely Perl-related to me, though perhaps a bit of an out of control april fools joke.
No fun allowed! It's not in the Perl spirit at all! /s
How is that possible? If this is about Perl programs, how is it *not* about using Perl?
Perl is the unique ~~tool~~ able to understand Paint Splatters
The /r/programming thread on this is sad and depressing.
Source was not credited. https://docs.google.com/document/d/1ZGGNMfmfpWB-DzWS3Jr-YLcRNRjhp3FKS6v0KELxXK8/preview page 6
The percentage drops radically if you insert `use strict` as you should.
A fanciful and interesting paper, but the short story is that they abused an OCR engine to make random shapes into ASCII characters. Had they chosen the Unicode Character Database, their number would be quite different.
Thank you very much. Comments like this keep me writing ;-).
You keep reusing the same variable for each new socket object... What else did you expect? Put them in an array or something.
I'm new to this language, I have no idea how to do that.
 my @sockets; for (1..$sockets) { my $socket = ...; push(@sockets, $socket); }
Oh it's that easy? Thank you! &amp;#x200B;
A simple (not necessarily best) solution would be a lockfile. I believe there are several packages and best-practice examples. The logic would be something like the following (extremely simplified, **with zero error checks**, for an example). exit_with_message() if -e $lockfile open (my $lock_fh, "&gt;", $lockfile); # do your stuff close ($lock_fh); unlink ($lockfile);
I like Proc::PID::File. https://metacpan.org/pod/Proc::PID::File use Proc::PID::File; die "Already running!" if Proc::PID::File-&gt;running(); # do your thing
I would opt for a pid file instead. Reasoning being that if process dies in the 'do your stuff' phase, you have a way to check if the other process should be and still is running.
I suggest using a PID file, that is, a file with a specific name that, if existing, contains the Process ID of the running instance of your program. At startup the program must check if the file exist, and if so, check that the PID contained is valid (I normally use kill -0). If the file exist and the PID is valid, the new instance of the program must terminate. If the program can run, the first operation must be the creation of the PID file; the last operation before it quits must be to delete it. Of course this implementation is subject to a lot of race conditions, so it is not sufficient if the program must be executed very often. But for a cronjob that is executed at most once a minute it should be enough.
I don't know if it's the best approach, but a good approach is to check for the presence of a temporary file that contains the currently running process's PID. If the temp file exists, read the PID inside and look to see if that process is still running. If the temp file does NOT exist, use `File::Temp` to safely create the temporary file in such a way that it's locked as it is created. (This prevents two copies of the program from starting up and one clobbering the other's PID as they both try and write to the temp file.) Where exactly to create the file might vary from OS to OS. At the time I used this solution, I put the file in `/var/run/`. However that might not be the right place any more, depending on which OS you're using. https://www.effectiveperlprogramming.com/2017/09/dont-use-posix-to-create-temporary-files/ I looked, and there are a couple of `Proc::Pidfile` type modules that automate most of this for you. However, I haven't used any of them myself. So I can't vouch for their quality. Do your homework. :]
Agreed. Also, I completely ignored the lock() and flock() builtins.
A simple solution is to lock the actual perl script itself. There's a module on cpan that does this, but it's simple enough without: https://perl.plover.com/yak/flock/samples/slide006.html
In addition to the programmers' answers, here the sysadmin's perspective: use systemd timer units. https://wiki.archlinux.org/index.php/Systemd/Timers An already running unit means that another job cannot be spawned. https://unix.stackexchange.com/questions/203254/does-systemd-timer-unit-skip-the-next-run-if-the-process-hasnt-finished-yet
Or run your script via [flock(1)](http://man7.org/linux/man-pages/man1/flock.1.html) and/or use with [timeout(1)](http://man7.org/linux/man-pages/man1/timeout.1.html). Use a lock file on a ram disk (e.g. /run/lock on Ubuntu) for the case where the system crashes or reboots while the task is locked.
I was about to suggest this but didn't know the details. If systemd is available it can make things like this much simpler to manage.
Here's an example of a classic hack that I use for a script that gets my mail: #!/usr/bin/env perl use Fcntl qw(LOCK_EX LOCK_NB); die "Another instance is already running" unless flock DATA, LOCK_EX|LOCK_NB; sleep 20; __DATA__
I use https://metacpan.org/pod/Sys::RunAlone
It's [Sys::RunAlone](https://metacpan.org/pod/Sys::RunAlone). There's also [Sys::RunAlone::User](https://metacpan.org/pod/Sys::RunAlone::User) and [Sys::RunAlone::Flexible](https://metacpan.org/pod/Sys::RunAlone::Flexible).
But File::Temp's main value is creating a temporary file with random name. If your program wants to coordinate with another instance of itself, it needs to agree on a predefined name, hence not using what File::Temp offers. You'll want to just flock() a specified path or use modules like [File::Flock](https://metacpan.ord/pod/File::Flock) or [File::Flock::Retry](https://metacpan.ord/pod/File::Flock::Retry).
There could be a proggram running with that PID that yet is a different program. After all, if a PID is a 16 bit integer, PIDs are going to be reusdd, eventually.
Yeah they're such a welcome change from Perl's original way of handling subroutine arguments. But you gotta love being a programmer in a language that is flexible enough to allow for these types of syntax changes in the first place.
The argument basically boils down to: minimum syntax (only @... for Scribble, letter&lt;...&gt; and =directive for POD, compared to a plethora of symbols used by Org-mode or what-not). And that the syntax is "surprisingly unobstructive and readable enough". Agreed.
POD is decent, but it fails at two things: * Escaping `C&lt;...&gt;` for inline code. When your language uses `-&gt;` and `=&gt;` for a bunch of things, pointy brackets weren't a great choice. * Numbered and bulleted lists. It's cumbersome, and doesn't look right in its raw form. Nested lists are even worse. Markdown figured out better syntax for both.
I don't see why escaping of `&gt;` should be classified as a failure. Maybe you are not aware: * alternate delimiters exist: `C&lt;&lt; $instance-&gt;method &gt;&gt;` * escaping exists: `C&lt;$instance-E&lt;gt&gt;method&gt;` See &lt;http://p3rl.org/podspec#Pod-Formatting-Codes&gt; and &lt;http://p3rl.org/perlpod#Formatting-Codes&gt;.
[https://www.UnmaskParasites.com/security-report/?page=www.activestate.com](https://www.UnmaskParasites.com/security-report/?page=www.activestate.com) regards it as suspicious, with a long inline 'eval' script: &gt;eval(String.fromCharCode(118, 97, 114, 32, 100, 100, 32, 61, 32, 83, 116, 114, 105, 110, 103, 46, 102, 114, 111, 109, 67,... If ActiveState or the site owners are here could they look into this, or if anyone has contact details for them please let them know.
I'm quite aware. The problem is, if there's a character that's commonly used in the language, then it shouldn't need to be escaped in the docs.
Yeah, all of this is not right. The actual code portion of your one liner is: `print "$. $_"` All the extra stuff you included are not existing functions, so that's why Perl is spitting back bareword issues. It doesn't recognize them because you haven't told it what those words mean. To breakdown the one-liner, "perl" is the interpreter program. If you did `perl --help`, you'll find what `-ne` (this is interpreted as `-n -e`) means: -e program one line of program (several -e's allowed, omit programfile) -n assume "while (&lt;&gt;) { ... }" loop around program So, the command line is taking care of some of the work for you. To emulate the same in a Perl program file, you'd write: while (&lt;&gt;) { print "$. $_" }
Great answer! Thank you!
It looks like perl was just not an option on any of the lists. It doesn't even appear on the "related technologies" section, heavily implying it was ignored completely from this survey.
Damn. Perl is no longer the top language it's trendy to hate to signal your insider status. What are we going to do?
Hate python
Why are they basically all the same list
So it's official then, as far as stackoverflow is concerned anyway. Perl is irrelevant. We'll that's just fucking great.
https://griddb.net/en/faq/#q1 &gt; What is GridDB? &gt; GridDB is a highly scalable NoSQL database best suited for Big Data and IoT (Internet of Things). GridDB is designed to handle time-sensitive IoT data across numerous sensors while maintaining consistency and durability.
bwhahhahah. NAILED IT.
Yes, it was left out of the options and manual entries were left out of the survey results.
The one thing that POD does which markdown cannot is proper section links. You can write `L&lt;Foo/section (with ~really~ complicated name!)&gt;` and since the POD renderer is responsible for rendering both that link and the section anchor it will work. With markdown you have to write the link yourself, so you have to guess how the anchor will be rendered, and it's not portable between renderers. The first class support for module names is also nice of course, but that's Perl-specific.
All we can do is continue to show that it's relevant.
Too bad you the Perl 6 variant was not mentioned: &amp;#x200B; say "Hello"; await [Promise.in](https://Promise.in)(1); say "World";
Because there are two types of languages: the ones people complain about, and the ones nobody uses.
Ah; does Perl 6 have an async/await? When I looked around for examples in other languages, I got the impression it was doing something different from the others. Do you have some docs links that I could include then, that show it similar to the ES6/Python/C# examples?
ITT, a bunch of people concerned about what others think.
use 5.6; ?
&gt; Would I have to install and run perl 5.6 in a virtual environment? Hard to say without trying, but probably not. Chances are that this code would run just fine on a current version of Perl. &gt; Can I separate the yin and yang bits to compose two different perl scripts? Yes. The white one is reversed and won't run as written. Note that it is _not_ the literal reverse of the black one. &gt; It shouldn't matter which script runs first, correct? Unlikely. Looks like both scripts just print some text.
Hello, (I work at ActiveState, as VP Marketing) Thanks for the call out to notify us. Our website is secure. Wordpress communicated a vulnerability in a plugin today, as such we responded immediately to have the plugin removed and ensure the safety of our visitors. Please let me know if you have any other questions. &amp;#x200B; Best, Sandra
Aside from a few incompatible changes that aren't feature-gated (notably the removal of . from @INC, which is unlikely to be relevant here, and [some other things that were deprecated or removed](https://metacpan.org/pod/Perl::Critic::Policy::Freenode::DeprecatedFeatures)) any perl code that ran on 5.6 should run unchanged on the latest versions.
I find this corporate response lacking, we're all programmers here in this subreddit, but it's tailored to the audience in neither substance nor style. I feel it gives off a bad vibe: what's *not* said is more revealing to me more that what's said. &gt; as VP Marketing Why does marketing handle security incidents? You *do* have a security team, right? Or at least a data protection officer? Tell them to look for the Canadian equivalent of NIST SP 800-61 and get help from OpenCERT.ca. &gt; Our website is secure. How do you know? Are you competent in making that assessment? &gt; Wordpress communicated a vulnerability in a plugin today, as such we responded immediately to have the plugin removed Why does it take a third party to find the cause of infection? After the report of the suspicious behaviour reached the company, wasn't there an independent investigation kicked off? &gt; let me know if you have any other questions The thread neighbour mentioned he can't tell whether downloads have been compromised or not. You ignored that. Why did he not already receive assurance in any form? Apart from the front-facing Web site, what else was affected? Are there forensics results to share with the public?
See: * https://docs.perl6.org/language/concurrency#Promises * https://docs.perl6.org/type/Promise * http://jnthn.net/slides.html
An additional copy in text form would be much more useful.
I guess you could argue that \`async\` is called \`[start](https://docs.perl6.org/syntax/start)\` in Perl 6. If schedules asynchronous execution of the given block and returns a \`[Promise](https://docs.perl6.org/type/Promise)\`. Whatever the block returns, will be available with that Promise: So saying "Hello World" asynchronously, and returning a value, looks something like this: &amp;#x200B; my $promise = start { sleep 1; say "World"; 42 } say "Hello"; say await $promise; # 42 &amp;#x200B; From the article, it is not clear to me which parts are running when: on first sight, it appears to indeed run things asynchronously, but still block prematurely, so all benefit of running things asynchronously is lost?
How can your website both be secure, and have a malicious plugin installed at the same time? That sound like a contradiction to me.
Would it be possible to have a global flag and/or ENV variable to turn all async/await operations into blocking ones if this starts asploding in your runtime environment? (Or is that fundamentally a nonsense idea? Maybe it would require changes to lower level modules?) That could reduce the risk of starting to use this in e.g. tests or smaller scripts.
Great article! (Could have done with a trigger warning on Daylight Saving 😂)
I think every developer needs nightmares about DST sooner or later.
`=over` and `=back` :(
Yes I found the promises part; that explains the `await` keyword, but I couldn't find anything about `async sub`. The `async sub` part is the other half of the puzzle, and is vital to how the whole thing works. It causes the function to return a future/promise/whatever you want to call them, and thus allows the suspend-while-pending mechanism to work. Put simply, ```perl async sub give_me_three { return 3; } ``` does not return an integer, but returns a future containing an integer. It's quite an important part of the overall mechanism. I couldn't see a Perl 6 equivalent of that.
In general it's not a good idea, as it might turn things that work into things that are now impossible. One big use-case for doing (deferred) asynchronous operations by futures, is to allow a unit test that plays "both sides" of a middleware function, by just interleaving lines of code. It becomes a lot easier to do that when you're operating in the deferred nature of futures. If you switched the deferral mechanism off, the test might become impossible. I've written more about the idea here - https://tech.binary.com/unit-testing-with-futures/ That article predates the use of `async`/`await` syntax, but the overall principles still generally apply.
[removed]
Why did you not audit 3rd party code for inclusion to your website?
There isn't one required. Subs don't need to be marked as async, [which I find outstanding](https://domm.plix.at/perl/2018_04_things_i_learned_at_gpw2018.html). If the sub wants to return a promise, it does so explicitly: $ rlwrap perl6 &gt; sub give-me-three { start {3} } &amp;give-me-three &gt; my $p = give-me-three Promise.new(scheduler =&gt; ThreadPoolScheduler.new(initial_threads =&gt; 0, max_threads =&gt; 64, uncaught_handler =&gt; Callable), status =&gt; PromiseStatus::Kept) &gt; await $p 3 ---- &gt; It's quite an important part of the overall mechanism. I have the opposite opinion. Until today, I didn't even know that in ES6 const give_me_three = async () =&gt; 3 is a short-cut for const give_me_three = () =&gt; new Promise(keep =&gt; keep(3)) I thought the async keyword only exists so that the await keyword becomes available. &gt; let p = give_me_three() undefined &gt; await p await p ^^^^^ SyntaxError: await is only valid in async function &gt; ( async () =&gt; console.log(await p) )() 3
[previous discussion](https://redd.it/b9husp)
And we haven't even got a Mars colony yet!
Another nice touch is that - yes your subs can return a Promise explicitly... sub give-me-three { start { sleep 0.5; return 3; } } my $p = give-me-three(); say await $p; or you can decide later that you want to call a sub asynchronously. sub give-me-three { sleep 0.5; return 3; } my $p start give-me-three(); say await $p;
BAHAHAHAHA &gt; when random paint splatters were processed by OCR software—character-scanning tools that are typically used to turn analog words into digital text—it resulted in valid Perl code 93 percent of the time.
If [this](http://colinm.org/sigbovik/splatters.html) is the paint splatters, and associated OCRd text, how is that valid Perl? How is `giauullif` or `lerzfijglpFiji-j` valid Perl?
Great article. Not completely sure I agree with the “store dates in UTC” though. I always use TIMESTAMP WITH TIME ZONE and by making sure you are dealing with time zones from day one you don’t fall into the common traps. That and making sure that the database is always responsible for handling time/date calculations seems to keep me out of trouble. If I need to process in the application I get PostgreSQL to give me epoch seconds and work with that. Maybe I’m missing a case? I do love the convenience of having database timestamps be relatively “human readable”. Out here in +9:30 land, UTC is awkward :-)
pragmas are usually lowercased, so to find the core pragmas: `$ gzcat 02packages.details.txt.gz | grep S/SH/SHAY/perl-5.26.3.tar.gz | awk '{print $1}' | grep -v '[^a-z:]'` charnames deprecate diagnostics filetest integer less locale open ops overload::numbers overloading sigtrap strict vmsish warnings::register
Is that all their is for pragmas? I thought there would be more.
Hmm. That's somehow managed to overlook a bunch of really important pragmata like `base`, `vars`, and `utf8`. There's a full list in [`perldoc perlmodlib`](https://perldoc.perl.org/perlmodlib.html#Pragmatic-Modules).
there are others that aren't in core but available on cpan
It doesn't result in a compilation error, because it's not using strict. It doesn't mean it actually does anything useful.
A pragma is generally defined as any module with a lowercase name - there are many that aren't core. They also generally have a lexical effect, but there are enough exceptions in core to this rule, notably `lib` and `base`/`parent`.
I see all of them in the list though perhaps it was edited. `version` is missing, oddly. The [perldoc.pl version](https://perldoc.pl/modules) is parsed directly from perlmodlib.
The original version of the post had a much shorter list that they generated themselves. `version` isn't a pragma, it's just a module with a lowercase name.
"A module with a lowercase name" is the way that perlmodlib differentiates pragmas (it's a generated file) and thus it does list `version` as a pragma. Though it tries to define them more specifically, there are plenty of exceptions.
sqitch looks awesome I can't wait to try it out! Nice article! I've recently been down the enable strict mode on a legacy mysql app. It was enlightening if nothing else.
&gt; Not completely sure I agree with the “store dates in UTC” though. I always use TIMESTAMP WITH TIME ZONE The type `timestamp with time zone` **does not store any time zone information**. On insertion, it instead converts the given time to UTC according to current_setting('timezone'). On retrieval, it converts from UTC to the offset time with current_setting('timezone'). You fell into the classic trap described in the article, ~~starting a land war in Asia~~ misreading the documentation. In order to not silently throw away information, use a design along the lines of: create type enum_tzversion as enum (…, '2018i', '2019a'); create type enum_tz as enum ( -- union of zones across versions 'Africa/Abidjan', …, 'Pacific/Wallis' ); create type datetime as ( dt timestamp, -- not null default now() tz enum_tz, -- not null default current_setting('timezone') tzversion enum_tzversion -- not null default '2019a' ); In practice, separate columns work better than row types because they can be properly constrained without triggers.
I agree wholehearted. There's nothing here but handwaving and ignoring the hard questions. It would be healthy to give details, 1. What plugin? 2. How long? 3. Were cookies / sessions / signin / user accounts compromised? 4. Were downloads compromised/infected/altered? 5. Would you have discovered this without being notified? 6. What measures are you putting into place to detect this (reactive security, monitoring), and prevent this (audits? static code analysis?) How can I have any confidence in the content of the site? Without answers, I'll not be able to use anything from ActiveState in good conscience. What if it's something less obvious next time? Bitcoin mining via Javascript? Turning visitors into a botnet to attack other sites? It's all possible, and it's your responsibility to guard against this. You're a tech company, providing dev tools. You should be better than this.
I do understand that the time zone is not stored :-) (Glad you pointed it out though - it is a very common trap for beginners) Just in case anyone is confused over why it exists - WITH TIME ZONE means you can insert data (that has a valid time zone as part of it) and be sure that it is stored correctly (no “local time” problem). If you’ll excuse me, I have a land war to start.
Same as `base` then.
We want to make sure that we do everything possible to mitigate security of our website visitors, our downloaders and our customers. We have put in practices in place to do so. Marketing doesn't handle security, but Marketing oversees the corporate website (based on our own internal InfoSec policies). We want to make sure to underscore this point and address any questions, so I'll defer additional technical information to one of our Senior Engineers, Dave Rolsky.
Hi Everyone, This is Dave Rolsky. I'm a Team Lead and Senior Engineer at ActiveState. We appreciate your feedback and criticism. First, I apologize for the unempathetic corporate response. Our intention was to let the community know we discovered the issue and fixed it. I’ve discussed this with our CTO and we wanted to share a much more detailed response. I’m posting this here, rather than our CTO, since many folks in the Perl community know me personally. Here's what we know so far: * There was a zero day exploit in a WordPress plugin we use on our marketing site ([www.activestate.com](http://www.activestate.com/)), Yuzo Related Posts. While the plugin was deleted from the WordPress plugin archive on March 30, the author did not actually announce the issue until April 10. See [https://wordpress.org/support/topic/remove-this-plugin-immediately/](https://wordpress.org/support/topic/remove-this-plugin-immediately/) for the author’s post on the plugin support forum. * ActiveState was not specifically targeted, but all those using the plugin, including us, had unauthorized JS code injected into our web pages. See [https://www.zdnet.com/article/mailgun-hacked-part-of-massive-attack-on-wordpress-sites/](https://www.zdnet.com/article/mailgun-hacked-part-of-massive-attack-on-wordpress-sites/) for a write up. There are also a number of other write ups on the web if you search for “yuzo related posts exploit”. * The exploit itself added malicious JS code to the site. * The offending plugin was removed and we have verified that the injection is no longer present. * **Most importantly, our language distributions and the ActiveState Platform were not impacted. They do not use WordPress for hosting or distribution, they use a different technology.** * **In addition, we do not believe that links to downloads for any of our Active\* languages were affected.** * Our WordPress hosting provider is constantly monitoring our installation for vulnerabilities like this. We are also in the process of actively looking for vulnerabilities in our other systems. We want to let you know we take security seriously, especially as we move forward with our ActiveState Platform development. Should our investigation turn up any further details we will communicate them as we find them.
This is why I will never be a good developer. When I see questions like these, I have no idea what the fuck they're asking me for so I have no idea how to approach a solution. I just need more explanation and maybe a visual of what the given input and expected output should be.
The first problem was easy enough to get how his solution worked, but I don't get the second one at all.
Agreed. The questions make it difficult to understand the solution. For the second problem, I believe it meant that you are given a path where going down(south) or right(east) are your only options. The goal is to get to the same destination as the path given to you but by using different directions. Meaning in the solution given, whenever we go down first and then to the right (SE), we will instead go right first and then down (ES) which satifies the criteria of the question. I hope that helps a little.
I have been encountering these kind of questions a lot since I'm looking for a job and I usually only get them if I've already seen the question. Feels bad.
After the hatchet job that Gizmodo did on James Damore, this piece is no surprise at all. There's no smear too low for them.
 $ perl -e'giauullif'; echo $? 0 Funny how omitting `use strict` makes such a difference :p
Parallel::PreFork takes care of this issue and some other edge cases as well. I have used Parallel::ForkManager in high-performance production code and found that Parallel::PreFork handled it better.
Check this out https://www.perlmonks.org/bare/?node_id=341017
It looks like this link is on how to store regex patterns using \`qr//\`? I'm looking for how to negate the actual regex itself. I just used \`$negated\_regex\` above as a place holder to show where it would go with the \`=\~\`.
Probably a negative lookbehind. Would need to match an extension and then look back and make sure it's not one of the bad ones. Something like (untested) `/\.[^.]*$(?&lt;!pdf|jpeg|jpg|gif|png|webp)/i` Might need to break the lookbehind into a few pieces because it's very limited. In the worst case, you'd have a single lookbehind per extension `(?&lt;!pdf)(?&lt;!jpeg)` etc.
But the two paths aren't supposed to overlap. Is there a way to prove that they never intersect except at the start and end points?
From memory (again untested, I'm not at a computer), negative lookbehind has to be a fixed width. So you'd probably need to expressions, one for all the three character extensions, and one for all the four character ones.
If you don't know about `(*SKIP)(*FAIL)`, then you know regex only superficially. use 5.028; use strictures; say "negated binding operator"; say 'x.txt' !~ /[.] (?:pdf|jpe?g|gif|png|webp) $/ix; say 'x.pdf' !~ /[.] (?:pdf|jpe?g|gif|png|webp) $/ix; say "negated expression"; say 'x.txt' =~ /[.] (?: (?:pdf|jpe?g|gif|png|webp)(*SKIP)(*FAIL) | .* ) $/ix; say 'x.pdf' =~ /[.] (?: (?:pdf|jpe?g|gif|png|webp)(*SKIP)(*FAIL) | .* ) $/ix;
I didn't know google was organizing code competitions! Seems to me that the first round was pretty straightforward but I guess that it becomes hard to the point that knowing the Knuth by heart is not enough in the last rounds. Fun stuff for childs and rich people!
If there's anyone who would like to help out remotely with CPAN Testers during the toolchain summit, let me know! There are lots of things to do and not enough interested people to do them.
Is there a way I can claim the article so I get the karma? The bot is a lot faster than I am when I'm coordinating with the blog's owner while I'm trying to work.
There's not a way, no. Perhaps whoever it is that runs the bot could have the bot sit on the article for an hour?
You could report to a moderator to remove the post and then post it yourself.
Does it have to be regex? If you're trying to check whether the extension is valid, there are various other ways of doing that - for example: use Path::Tiny; print "unknown extension" if path($string)-&gt;basename eq path($string)-&gt;basename(qw(pdf jpeg jpg gif png webp));
Hi Dave. Thank you for sharing the details of the event, and especially for highlighting that the downloads and links to downloads remained safe. This is part of the problem with trusting 3rd party code, and the brutal effect it has when it's compromised. I guess you got lucky that it was a broad attack on multiple sites and not a targeted penetration that would have had a greater impact. If I may be so bold, I strongly recommend you investigate and implement CSP headers. Aside from the other benefits, this defeats attacks that use Javascript 'eval' and would have rendered this exploit toothless (probably).
I learned something new, and for that I am grateful, but did you have to include the condescending remark?
I don't condesce.
Thanks for the suggestion. CSP definitely seems like a good idea here.
Thanks! I didn't know about that feature :)
It doesn't have to be regex, it is more of a learning exercise and me trying to get better at regex. I realized I have no idea how to really negate anything that isn't inside of a character class. &amp;#x200B; But thanks for pointing me to Path::Tiny! That looks useful.
FWIW, this [will work in 5.30](http://blogs.perl.org/users/tom_wyant/2019/03/native-variable-length-lookbehind.html).
Shame that they ignored all the great work with Perl 6. Anyone else remember the infuriating “Perl 6 is not Perl” response to the idea of nominating members of that fine community?
No one nominated for Perl 6 efforts had the impact the work the chosen recipients had. Various people were nominated for various technical achievements, but those are specifically excluded for this non-technical achievement award. But, don't forget that Wendy and have a White Camel Award.
I knew I was easy to forget :-)
As someone who is exploring how to write their first web app, this is a great read. Thanks!
Very good list of things to do for a solid foundation. &amp;#x200B; Since 5.7 MySQL has sane defaults that alleviate this pain (though I think it still defaults to latin1). &amp;#x200B; I do question baking in i18n from day one. While not bad advice should be accessed on a case-by-case basis. Additional development/longer timeline for something that \_maybe\_ will be used...
But if you store in EDT or UTC-4 what happens when the zone changes to EST or UTC-5? How do you or TIMESTAMP WITH TIME ZONE deal with this?
As long as you are inserting with the time zone or offset attached, the Right Thing will occur. The time zone information is lost, but the correct timestamp is stored (internally in GMT). How to deal with time zones in the other direction is generally a presentation issue. There are plenty of ways (I documented above) to output the timestamps in whatever time zone is appropriate. For example, it’s easy to produce a “list of transactions per day” where the day rollover is defined by whatever time zone is desired. This list would be different depending on where the user is - as expected. Once they are in the database, there is usually no use in knowing what time zone they originally “belonged to”. In the cases that there is a use for that information, it can be stored, as another poster demonstrated. I have never found a need for that myself. Lastly (and possibly most importantly), if you are explicitly thinking of timezones like “EDT” or “EST” in the context of outputting dates, you are doing it wrong. You should always use symbolic names like “America/New_York” so you never have to explicitly deal with daylight savings manually ever again.
&gt; ... if you are explicitly thinking of timezones like “EDT” or “EST” in the context of outputting dates, you are doing it wrong. You should always use symbolic names like “America/New_York” You insert them using the IANA zone name? I cannot recall any functions returning a time with this zone (though my Perl module knowledge is a bit rusty). ISO 8601, for example, does not support it. Do you convert a zone name or offset to IANA before inserting? Just curious. Thanks.
[Perldelta](https://perldoc.pl/perl5282delta)
Hopefully this release fixes the [perl build failures due to GDBM-related tests](https://rt.perl.org/Public/Bug/Display.html?id=133295). That one has been plaguing me for a while on several machines. I guess I'll be able to find out soon enough.
I was thinking more in the context of getting them out. When inputting a timestamp, “EDT” has meaning for a single point in time. PostgreSQL will deal with storing it as GMT internally automatically by passing the literal with time zone (EDT in this case) to a TIMESTAMP WITH TIME ZONE column. In the output context “EDT” meaning becomes very murky when you start to consider ranges of dates/times. I’d never want a user to be able to say “my timezone is EDT”. That’s when the zone name should apply. Sorry for not clarifying that better!
Unfortunately it was not voted on in time. It should be in 5.28.3. https://www.nntp.perl.org/group/perl.perl5.porters/2019/04/msg254455.html
Ok, so to be clear, you have reversed your earlier statement and now consider the Perl 6 community eligible for White Camel awards for work done solely to promote Perl 6? Is that correct?
\&gt; This leads me to believe that the MAMP instance is attempting to use the system perl install. Why? Am I right about this? Looks that way to me. &amp;#x200B; \&gt; If I can get this instance to use MAMP's perl, I think I'll be good. &amp;#x200B; Instead of #!/usr/bin/perl as the top line in the program, try #!/path/to/mamp/perl
I stand by my earlier statement. I think that the Perl 6 community should come up with their own award. This fight isn't doing anyone any favors, but carrying it on is hurting Perl 6 more than it's going to hurt Perl 5. If we measured the merit of the nominations just on the impact of the contributions, Perl 6 work has yet to match the impact of activities going on in Perl 5. When you look at the number of people affected by the contributions of the award recipients, the Perl 6 community just isn't there yet. It simply doesn't have the scale. But, someone can make the case that some contributions do. So far, no one has.
You just need to get rid of line 6 with the print statement and the change the next line to: my $filename = $ARGV[0]; That should work ok.
You can just do ```perl #!/usr/bin/perl use open ':encoding(UTF-8)'; use strict; use warnings; my %count; while (&lt;&gt;) { $count{lc $1}++ while /(\w+)/g; } ```
Thank you for the quick answer! That works great but I probably worded the question weird. I would like the script to do both, if the user doesn't enter any .txt file as an argument the script should ask the user for the filename.
Ah ok, then: if (defined $ARGV[0]){ my $filename = $ARGV[0] }else{ YOUR EXISTING CODE HERE TO ASK FOR A FILENAME }
Perfect! Thank you so much!
I suspect hard to read code is intentional, rushed or it just doesn't matter to the coder. If someone cared about how the variables lined up, they would already be lined up. It's a good idea, though.
&lt;a href="[https://github.com/dnmfarrell/Perly-Bot](https://github.com/dnmfarrell/Perly-Bot)"&gt;Perlybot is in GitHub&lt;/a&gt;. Perhaps we need to configure a delay into the blogs.
Tutorials are for the beginners, and containers are not so much. But you are right, you can get as cheap as $2.5/mo. Plus domain name $10 - $15/yr. Yeah, "hosting" should not be a blocker here.
FWIW, one of the votes against this proposal, was because "Perl 6 isn't ready yet". So the "hosting" was definitely not the only issue people on the Grant Committee saw. Very disappointing, I agree.
Get ye to stackoverflow.
Also see: * https://github.com/catchorg/Catch2 * http://testanything.org/producers.html#c
Zero documentation and usage/examples.
That's seems really self-defeating to me. I tend to agree that Perl6 isn't ready, but a good tutorial series is one of my reasons for that opinion.
True. Here you can see some examples: https://github.com/h2o/h2o/blob/465143846f2425ae8cdb164c1b38daff1dd951c6/deps/picohttpparser/test.c
Important because this is arguably one of the strongest points of the Perl community / CPAN ecosystem. I can't thank enough whoever established the SYNOPSIS section as a standard thing in CPAN POD.
&gt; Perl 6 isn't ready yet Do you know what makes it not ready?
No, I don't. I think it is as least as ready as Perl 5.004 was at the time. That was not a blocker for creating course materials or writing books at that time.
Unfortunately the rendering of this page is broken due to a [long standing bug](github.com/metacpan/metacpan-web/issues/1228) in metacpan.
Seems pretty ready to me. But what do I know. But yeah shit, if it ain't "ready" at this point then damn, damn...
isn't that fun !!!
Odd, renders fine for me.
to be fair it’s like, 3 lines, not the entire page.
So. Are perl partisans ... Perlacks?
I was sure it was TIMTOWTDI.
Here's Test::More for bash, btw: https://github.com/ingydotnet/test-more-bash (with examples ;-) The cool thing is it literally does "use Test::More"
Sorry, I don't see it. Please explain. Perhaps we can bring this to the attention of the Perlchain folks since they are currently having a summit.
Ah - never mind. Bang Bang and Eskimo Greeting.
I believe "Perler" is the accepted term.
While it's non-core so it won't show up on perldoc.pl, I have it installed in my [sandbox instance](https://perldoc-sandbox.grinnz.com/perlsecret).
https://github.com/ingydotnet/bashplus 👀
Hi. If you haven't installed Test::CheckManifest yet .. as of this moment I can only advise you to install version 1.38 as succeeding version/s have a bug that doesn't recognise that entry in MANIFEST.SKIP file for exempting the folder .git in the manifest consideration.
They can cross, the paths just can't coincide along an edge.
They're not wrong. The camel book is full of whimsical references to Lord of the Rings and other such nerdy things. Python poindexters try to pretend they're having fun but it's almost always serious business with them.
What used to be my "blog posts" are now in my comments.
Omg, "goatse operator".
As has previously suggested, Perl Weekly should look at perlmonks, stackoverflow, twitter, etc. The Perl content is there, maybe less in the form of blogs nowadays, but still...
Yes, I do have more fun in Perl than other languages, but not necessarily by using these perlsecret operators. I used to slap the inchworm "~~" wherever I had "scalar", thinking it can replace it in all cases... Now I use these perlsecret operators in moderation. A lot of them *are* the enemy of readability, even for fellow Perl programmers.
Thanks for all the hard work, much appreciated.
Indeed - there's plenty happening, the toolchain summit just finished yet there's no mention of that at all, plus all those other sources you mention, ongoing p5p development, CPAN uploads, Perl foundation grants and activity on the various larger projects such as Mojolicious. "Filling with content" seems a bit directionless... if that's the goal, why not use existing aggregators such as Reddit or resurrect ironman.enlightenedperl.org? Curating articles takes more effort, but would make Perl Weekly more valuable IMHO.
Site's down boss.
Perl is the most fun!
Thanks Neil for your persistence in solving this source of confusion!
&gt; Where else should we be looking jobs.perl.org , there's also Facebook group "Perl jobs"
It might be worth checking out London Perl Mongers meetups - [http://london.pm.org/](http://london.pm.org/) &amp;#x200B; I'd advise being a bit less generic in the messages you send btw - also I'm not sure how but you sent me messages on linkedIn to both my personal email (which is fair enough since I signed up with it) and somehow my work email with which I've not used with LinkedIn at all.
Your Perl looks good. Glad to see Perl at that top of your list speedwise.
I have sad news. See update1 and update2 :(
&gt; all benchmarks now assign the list to a variable to avoid optimizing away split creating an array Perl was smart enough to automatically optimize your program, so you lobotomized it? :(
http://blogs.perl.org, http://perl.com, http://neilb.org, http://blog.afoolishmanifesto.com, and then http://perlweekly.com to pick up things I miss.
Many of the popular blogs are polled by \_perly\_bot and posted here. Go back through this sub to see that (or look at its [feeds.yml](https://github.com/dnmfarrell/Perly-Bot/blob/master/feeds.yml).
You could double your Perl performance; while (&lt;STDIN&gt;) { $count += split /\t/; }
Yeah :( I did go back and make it a bit more real life [though](https://github.com/sstadick/bioinfo_benchmarks/blob/master/count_lines.pl).
I remember reading a quote once that read something along the lines of *'using a regular expression to check a substring is like using an Apache helicopter to kill a cockroach'*. Python is using string ops to check if `bc` is in the string, yet in Perl you bust out the regex engine. If I change the assignment to `$count` to the following my $count = scalar(grep {index(lc substr($_, 1, 5), 'bc') &gt;= 0} @vals); Speed is equivalent to Python on my machine. &gt;Caveat! I'm testing in 5.28 which received an optimisation to the `index` op. Your results may vary This is a good tip in general. Search your code bases for `=~` and think "can I do this using some combination of `index`, `rindex`, `substr`, and `length`."
Side note... acting on `@_` in `create_records` instead of copying to `@vals` drops my runtime from ~15s to ~12s. Not that I think you should necessarily do that... I rarely use `@_` directly (and where I can use the new signatures which copies anyway) but it's a cheap little optimisation that can be used as needed.
Given the design rigor around Perl6, I'd bet against finding any such gems in the language.
Yeah, that's unfortunate. It's also why I didn't share this at work...
I am thoroughly confused - Perl has the largest number, hence the slowest time, no?
I added both of you optimizations! When I have both python and perl using a hash, they are about the same with Perl having a slight edge. However, I wanted to test object creation / usage, and in the other three languages, creating a type would be an advantage, so the perl version in the repo us creating an object with Moo, which is slow. I did include a litthe explainer though saying that IRL, I would never do that in perl AND perl beats python when basic data types are used.
You have this in your code return new Record-&gt;new(...) The `new Class(...)` syntax is referred to as indirect object, and is not recommended as it can confuse the parser. Best practice is to create a `new` method and instantiate your classes with `Class-&gt;new(...)`. You've managed to do both, which is really bad for performance. Just switch to the later syntax. On my machine it shaves off a whopping 5 seconds. Also, Moo is popular, but Perl classes are pretty bare bones, there's plenty of alternatives on CPAN. One of my faves for simple classes is `Class::XSAccessor` which, as the name suggests, creates fast accessors in XS. You're using a pretty modern Perl so no need to do the fake package in BEGIN block, just use a package block directly in your script. Since I'm creating fast accessors, I may as well use them when `sum`ing by count. Lastly, in v5.10 and later, there's now a `say` function that's just like `print`, but it automatically appends a newline. Here's my code. use v5.26; use warnings; use List::Util qw(sum); package Record { use Class::XSAccessor constructor =&gt; 'new', accessors =&gt; ['name', 'count']; } sub create_records { my $count = scalar(grep { index(lc substr($_, 1, 5), 'bc') &gt;= 0 } @_); return Record-&gt;new( name =&gt; $_[0], count =&gt; $count ); } sub main { my @records; while (my $line = &lt;STDIN&gt;) { push @records, create_records(split(/\t/, $line)); } say sum(map { $_-&gt;count } @records); } main();
Yes, Perl is the slowest here! The Perl script was updated to reflect that the other languages keep the result of the split operation around, but consequently made it much slower – probably because Perl doesn’t have immutable strings…
Another option which is slightly more featureful/Moo compatible and still pretty fast despite being pure perl is [Class::Tiny](https://metacpan.org/pod/Class::Tiny). Also note that Moo will use Class::XSAccessor if it's available and your attributes are simple enough (which is uncommon).
You can use types with [Type::Tiny](https://metacpan.org/pod/Type::Tiny), which has some [optimization options](https://metacpan.org/pod/Type::Tiny::Manual::Optimization) and a [Moo-specific optimization](https://metacpan.org/pod/MooX::TypeTiny) which may be automatic in the future.
https://mojolicious.io/blog/ has great content for Mojolicious and modern Perl.
I've been adding updates to the perl code in the repo. It's now slightly faster than the Python code.
This is great! Thank you! I learned a bit just reading this. I've updated the repo, It's now slightly faster than the equivalent python, and that make my heart happy.
You forgot [http://preaction.me/](http://preaction.me/index.html) as well. For reasons I fully understand but if you're gonna call out neilb and frew individually ...
Pfft. That guy hasn't blogged in like a year. He's been blogging on http://mojolicious.io/blog this year though...
Surely you can't expect any kind of useful answer with such a vague and cryptic post... I can't even begin to understand what you're asking.
[removed]
Nice, didn't realize this existed. Thanks for posting and creating this content!
https://www.google.com/search?q=auditd+perl
An RSS aggregator to replace the endgame'd Ironman would be welcome.
Mathematically speaking, given the high number of operators, I'd bet on the creative (mis)uses of them.
Hi, Im interested in remote work. Problem though, I’m from the Philippines.
Oh thanks to remind me that I haven't include your [blog](https://perlancar.wordpress.com/) in my feeds :)
Hmm. That could be.
Hmm. That makes sense.
&gt; Easy as Six. Why write a lot of code when you can let Perl 6 do most of the job for you? Good title. Can't wait to see its contents.
Do you want something like this? &amp;#x200B; \`\`\`perl use strict; use warnings; use Sub::Quote qw(quote\_sub); &amp;#x200B; my $sub\_string = &lt;&lt;'SUB\_CODE'; my $var = shift; return if $var eq 'string one'; return if $var =\~ qr/regex one/; return if $var eq 'string two'; return 1; SUB\_CODE &amp;#x200B; my %captures; &amp;#x200B; my $sub = quote\_sub $sub\_string, \\%captures, {no\_install =&gt; 1, no\_defer =&gt; 1}; &amp;#x200B; foreach my $test (('string one', 'this is regex one', 'string two', 'unmatched') ) { print "$test had no match\\n" if $sub-&gt;($test); } \`\`\` &amp;#x200B; I added the loop and the \`return 1\` in the sub just so I could test it.
 -i=4 # Indent level is 4 cols -ci=4 # Continuation indent is 4 cols Maybe? Also, look at the -cab option.
it seems to be something enabled in the `-pbp` bundle that makes the difference here. if i run with that i see the same issue, and i also see the issue when i run with _only_ `-pbp`. but without: ```perl is_deeply $object-&gt;method, [ {key1 =&gt; 'val1', key2 =&gt; 'val2', key3 =&gt; 'val3'}, {key4 =&gt; 'val4', key5 =&gt; 'val5', key6 =&gt; 'val6'}, ], 'test foo'; ``` there _is_ a note in the docs about `-pbp` having both `i=4` and `ci=4` vs adding `ci=2` for better formatting of complex statements: https://metacpan.org/pod/distribution/Perl-Tidy/bin/perltidy#-pbp,-perl-best-practices honestly this is one of the places where interactions between options get kinda _weird_ to me. you're probably in for a little more experimentation to find what you like best
FWIW, after the Swiss Perl Workshop this year, I will not attend any conference that only has "Perl" in its name.
Why, what happened there?
Despite the "sister language" meme, too many people (including esteemed members of the community) \*\*still\*\* prefer to use the term "Perl" when they mean "Perl 5". E.g., does the Perl 5 distribution come with a symlink to the "perl" executable called "perl5"? &amp;#x200B; Another example: this reddit says it is about "Perl 5 and Perl 6", but effectively it isn't. Any Perl 6 content here is politely ignored at best, systematically downvoted by at least a third of the readers. And let's not start about Perl Monks. &amp;#x200B; So, a "Perl" event effectively markets as a "Perl 5" event. The name then in itself bars potential interest in Perl 6, because it is "clearly" about Perl 5. The fact that there may be also interesting Perl 6 presentations, is lost on the many potential visitors interested in Perl 6. And that means in practice that such Perl 6 presentations are only visited by former Perl 5 users that are interested in Perl 6. Which is a small part of and smaller and smaller demographic. &amp;#x200B; For me personally there is no point going to "Perl" events of this form anymore. I'm generally not interested in the Perl 5 presentations (which is usually 80% of the presentations). The Perl 6 presentations are interesting, but generally do not bring much news to me personally (being a core Perl 6 developer). &amp;#x200B; The reason I will be going to PerlCon and SPW, is that I've already committed to going there. &amp;#x200B; I will miss my friends. I hope I will be able to see them at other events, which I \*\*will\*\* attend.
does it make sense to cover Perl 5 and Perl 6 in a single conference? presumably a Perl 6 conference wouldn't be expected to have much Perl 5 content?
this is a pretty dramatic post, you could have said it a lot clearer in the first place
&gt; Instead of birthing a whole new organiser team for each venue location, establish an experienced core team that remains the same over the years and who remotely directs a handful of local people for each venue. The result of doing this to YAPC::NA wasn't good. I was just looking at my shirt from Edinburgh last year and thinking "well, at least we still have Europe doing it right"...
It makes as much sense as how many talks are already not Perl specific as noted in the OP. However I can definitely see that trying to focus on two very different languages cannot please everyone.
[removed]
It's almost like "Perl6" should have a different name to indicate that it is not the language you have always gotten by invoking `perl` … =sigh=
[removed]
Indeed. I think the problem really is that "Perl" conferences have become more about socializing and reminiscing. And most Perl mongers rather socialize and reminisce than organize an event.
I guess I could have. This would also have meant only one opportunity for downvoting :-)
&gt; Despite the "sister language" meme, too many people (including esteemed members of the community) **still** prefer to use the term "Perl" when they mean "Perl 5". That's because the vast majority of Perl users equate Perl with Perl 5. &gt; For me personally there is no point going to "Perl" events of this form anymore. I'm generally not interested in the Perl 5 presentations (which is usually 80% of the presentations). The Perl 6 presentations are interesting, but generally do not bring much news to me personally (being a core Perl 6 developer). You're not interested in Perl 5, and you know pretty much everything about Perl 6, so what *would* you like to see at a /Perl.*/ conference?
Now that's an event I would go to! :-)
YA.. er, TPC::NA has pretty much divested from ACT. I was at the last BOF in Europe where we talked about roads ahead for ACT, and there was no clear course. TPC is using [sched.com](https://sched.com) for scheduling and eventbrite.com for handling ticket purchases. They let you do generic donations, and most importantly accept money without forcing the ACT programmers to go through multiple hoops to comply with regulations. Not to mention the ACT server setup was ... well, if there was ever a single installation that looked like another installation in any way it would have been a bloody miracle.
Seconding Liz's comment, I'd love to get down there; I like what you're doing with integrating other communities, it's a great opportunity to get out of the silo mindset that these bloody social sites seem to work you into.
For the PTS we have a core organising team of three people: Laurent Boivin, Philippe Bruhat, and me. Some years we will have one or more additional local organisers, if it's not in one of the core team's home towns/cities. I think continuity of organising team is important for a number of reasons: (1) you learn and evolve, both getting more efficient, and hopefully running a better event; (2) you get continuity between the event and past/potential sponsors: you get a better idea of what they want to get out of it, and you learn together how to satisfy both camps; (3) it gives the organisers and the event some credibility when talking to venues, potential sponsors, etc; (4) no doubt others.
I will admit that while I have throughly enjoyed and learned a lot during my past conferences, the perl5/6 debacle is really off-putting to the point of me prioritizing other conferences. The fact that any mention of either language has to end in this bickering is so toxic I'm reluctant to invest anything into the community surrounding perl - be it 5 or 6. The broader consequence is that my employer won't be sponsoring future events (I paved the way with MojoConf and we were ready to ramp up).
As nice as bouncing around cities is, many benefits to finding a good city and sticking with it. Maybe extend LPW to two days, as that’s where most of the Perl employers still are?
&gt;does it make sense to cover Perl 5 and Perl 6 in a single conference? &amp;#x200B; I would say yes, but it depends on the length of the conference and the target audience. It is now difficult to fill a three day schedule with talks only about Perl 5/6. Just look at the last couple of years' schedules for TPC in both the US and EU - they are not receiving enough talk submissions to fill all tracks on all days. The same is happening for smaller workshops, we struggled to fill the LPW schedule [last year](http://act.yapc.eu/lpw2018/schedule). &amp;#x200B; As already stated TPC sees a significant number of non-Perl talks and we should make more effort to advertise that fact. I agree with Liz's point that having "Perl" in the name narrows the scope not only to "if you're not interested in Perl then this conference probably isn't for you" but also to "if you're not interested in Perl 5 then this conference probably isn't for you". For many people "Perl" is synonymous with "Perl 5", which is an unfortunate consequence of ... well [I'm not interested in that debate](https://leejo.github.io/2017/12/17/tpc_and_the_end_of_language_dominance/). &amp;#x200B; FWIW the Swiss Perl Workshop has been one of the more balanced events for covering Perl 5, 6, and general open source stuff since at least 2015. We also had the Perl 6 hackathon in 2015. I looked at the talks/workshops that we have held in previous years and the counts are as follows (note: doesn't include lightning talks, or 2016 as the workshop wasn't held in Switzerland in that year): &amp;#x200B; |Year|Perl 5|Perl 6|Other| |:-|:-|:-|:-| |2015|11|7|2| |2017|6|6|3| |2018|3|4|6| &amp;#x200B; Perhaps we have missed a trick by not advertising this fact, calling the workshop something like "The Swiss Open Source Programming Workshop" or we artificially limited our potential audience by having "Perl" in the name of the workshop? I know there is a little bit of history repeating here, with the original Perl Conference turning into OSCON then YAPC as an alternative and so on, but I don't think there's a danger of that happening again. &amp;#x200B; I have a lot more to say about this but will leave it for another time as reddit isn't an ideal place. The Swiss Perl Workshop organisers are having a meetup, which is open to anyone to attend, next week in Bern. If you'd like to join us then feel free to come along: [https://www.meetup.com/Swiss-Perl-Community-Meetup/events/260694899/](https://www.meetup.com/Swiss-Perl-Community-Meetup/events/260694899/)
At the end of the Rugby PTS -- the first one I organised -- I spoke to all attendees individually, to ask for feedback on what worked well, what hadn't, and how we could improve for the next year. There were some very strong common themes in the feedback, and that led to us nailing down the model for what PTS is and how it works. And that model is strongly aligned with the sponsors' interests, because they're typically companies that are using Perl in production. &amp;#x200B; Maybe at this year's EPC, someone could do a similar thing, to find out what is that attendees want it to be. Not what the peanut gallery thinks, but the people who are already making the effort to attend. &amp;#x200B; This does kinda presuppose a consistent organising team.
Thanks! Maybe I will go through what pbp provides and just pull out what I like.
Thanks for the suggestions. I will take a look at those options :)
I've been trying to express this to both /u/liztormato and a bunch of perl5-side people for years. Unfortunately, I've not had as much success as I'd've hoped in convincing people that intra-perl poo flinging gains us exactly nothing and mostly causes time wasted on drama. Though, also, I'd note that the bickering is strongly from our Too Online people, and attendees to conferences and the wider community are generally much more focused on actually doing stuff - it's worth remembering that on a long enough timeline, any political statement on twitter will result in an alt-reich versus tankie circlederp, and yet neither is a particularly popular position outside of the Too Online crowd. -- mst
This doesn't seem like a sound design. Learn how to work with WordPress. It can probably do what you are trying to do here itself.
It can. I've got WP doing it all now. But PHP doesn't do well with persistent memory, and there's only so much one can stick into OpCache before one is at a quarter GB of memory consumed, just so that WP doesn't hafta open and close its dB a bunch of times to retrieve data. And its scripts aren't compiled, so they're sloooooow in doing what Perl does in milliseconds. And the dynamic pages just are too many (millions possible) to "cache" statically. I feel like I've exhausted efforts to make WordPress function in this way, but I'm open to any suggestions, and maybe I need to put more time and effort into finding a WP solution. I just figured that since WP was so slow at handling such things -- a content server with dynamically generated templated pages with lots of variable fields to calculate and fill based on the URI structure, thus most ops must be performed after the request is received -- well, I figured that somebody out there in the Perl or Python world would have figured out how to use a compiled language to do the intensive stuff without the overhead of a relational dB and resource-hog PHP... and somehow use Perl/Python/something to handle the really hard work in CGI. Maybe it has to be done with a simultaneously started process when the request arrives? That's no problem for a powerful multi-threaded server. And there's zero chance WordPress would ever need to "wait" for Perl even if they started handling their respective portions of the workload simultaneously. Maybe you're **exactly right** that I need to stick with a **single dev platform**, but maybe that platform should be Perl, and I should be looking for libraries that help me deliver more WordPressy, gimmicky pages that are all the rage. **I never looked into it from that perspective... Making Perl put out "prettier" pages that approximate the look of WordPress**, but at 50x the speed given the processing load. Food for thought. I'm listening to **every suggestion** I can get. Thanks!
&gt; But PHP doesn't do well with persistent memory, and there's only so much one can stick into OpCache before one is at a quarter GB of memory consumed, just so that WP doesn't hafta open and close its dB a bunch of times to retrieve data. So use an out-of-process memory cache, like memcached. &gt; And its scripts aren't compiled… Huh? This is literally what Opcache does. (And Perl CGI scripts aren't compiled either!)
While Perl certainly is up to the task as an engine and has much better options than CGI, it doesn't have anything with the widespread adoption and ecosystem of WordPress for the front end. So consider that you're probably going to have to set up a lot of the infrastructure and styling if you want to use Perl for everything.
&gt; Despite the "sister language" meme, too many people (including esteemed members of the community) still prefer to use the term "Perl" when they mean "Perl 5" Which was annoyingly inevitable because of how humans use language, and was why there was an intention to be able to say 'raku perl' (which I was planning to follow by reviving my 'pumpkin perl' plan). Which you crushed by bullying the core developer trying to actually solve the problem into leaving the perl6 project entirely. When most of the mentions of perl6 in this subreddit's comments are you being actively hostile to the perl5 people, yeah, it's not honestly surprising the stories get downvoted. All you're really achieving here is polarising otherwise potentially friendly perl5 people against perl6, and then blaming them for a situation that you're currently the most visible and well known member of the community actively making worse. It's not honestly that constructive. -- mst
[HTTP::Proxy](https://metacpan.org/pod/HTTP::Proxy) to receive the request, munge the template, pass it off to Wordpress, then pass its response straight back?
Use nginx as the frontend, dispatch to your perl app, have the perl app send back an `X-Accel-Redirect` to a nginx internal URL which proxies to worpress.
As a System command, I guess you could just use backticks e.g : - $userActivity = `ac -p`; $dailyActivity= `ac -d`;
Not just the "use of language", it's facts vs delusion (aka identity politics). Perl5 is Perl not only because Larry made it so, but also because of the millenia of effort put into it and its ecosystem by countless other people. It is an established technology that actually runs critical infrastructure. Now, 30 years later, Perl6 may want to be Perl but it can not be unless it runs all existing Perl code as-is ideally with the same speed/memory as the latest and greatest Perl5 or better. It may want to be Fortran, or Python4000 or TCL-NG, but the same rule applies. If it can run no Perl code, then it is simple. It is not Perl. It is *extremely* egotistical to instead try to redefine what Perl means, standing on some old joke about the BDFL. It's just pissing on everybody who put work into Perl. So of course that forcing itself with identity politics instead of playing by the rules will only alienate and eat what's left of these tiny communities. I don't think "raku perl" and "pumpkin perl" will work at all, for the same reasons.
maybe I don't understand what you are trying to do, but sounds like all you need is a cache plugin for WP, which there are plenty of grate ones. whatever you want to do won't beat the serving of static pages...
Thank you, person I've never heard of, for jumping into this thread where I'm pointing out that intra-perl infighting serves nobody and pouring more gasoline on the intra-perl infighting, AND for some reason dragging culture war crap that was unrelated into it by mentioning identity politics. That was incredibly helpful and exactly what I had in mind, thanks! -- mst
Sorry for the trouble, Your Grace. :) I'm nobody, this isn't facebook. Just a reminder that redefining things issues warnings in Perl, consider running it with no warnings 'redefine' to suppress those. :)
Somehow `trim` it's built in to Perl so I use this: sub trim { if (wantarray) { my @ret; foreach (@_) { push(@ret,scalar(trim($_))); } return @ret; } else { my $s = shift(); if (!defined($s) || length($s) == 0) { return ""; } $s =~ s/^\s*//; $s =~ s/\s*$//; return $s; } }
Everything in [Mojo::Util](https://metacpan.org/pod/Mojo::Util).
Text::Trim Works directly on $_ like chomp so: trim $mystring; trim @myarray; Trims it up. Also has a left and right trim.
I'm well aware of `Text::Trim`. It's not a core module. Seems silly to install a module for such a simple function.
&gt; Despite the "sister language" meme, too many people (including esteemed members of the community) still prefer to use the term "Perl" when they mean "Perl 5". Wasn't that the reason why Zoffix was trying to push for the alias "Raku" who unfortunately was chased out of the Perl 6 community with the all nonsense accusations? I cannot still fathom how someone who invested so much of their time into the project was also allegedly trying to sabotage said project. It makes no sense. As others have suggested, one cannot change the way people use language and for people who aren't involved in the community, "Perl", "Perl 5" and "Perl 6" do not strike that much of a difference as far as names are concerned and that's where the alias came into place. The alias could had been a win-win situation for both Perl 5 and Perl 6. However, it's clear that it takes a good amount of stubbornness to reject and campaign against what was a well intentioned endeavor. I honestly don't understand the romanticized idea of Raku needing to have Perl in the name.
Definitely. For it primarily being a web framework, it sure has a lot of handy features that can be used virtually anywhere... Even just `use Mojo::Base -strict, -signatures;` is handy boilerplate for me.
The fact you attempt to claim “every” complaint against the alias was nonsense says a lot about your knowledge of the situation in general. Do you honestly think not a single valid criticism was brought up, or are you just trying to stir drama was strong language and assumptions?
[`perl -Mojo -E'.....'`](https://metacpan.org/pod/ojo) comes in handy too.
On several mojo projects I found myself using several routines over and over. Ended up putting them in [Mojolicious::Plugin::MoreUtilHelpers](https://github.com/sshaw/Mojolicious-Plugin-MoreUtilHelpers). I think a couple of them _should be_ (maybe they are now...?).
`use [Modern::Perl](https://metacpan.org/pod/Modern::Perl);` `use [aliased](https://metacpan.org/pod/aliased) 'Some::Long::Module::Name::Here::Okay'` --- My own that _may_ still be handy: - `Makefile.PL`: Create README.pod from package's POD: https://gist.github.com/sshaw/889041 - Filter which test methods `Test::Class` runs: https://gist.github.com/sshaw/1650517 - `Makefile.PL`: Use code in `t/lib` in tests without `use lib`: https://gist.github.com/sshaw/1622783
The word "nonsense" was specifically used to modify "accusations", which seems to me an accurate description of the useless drama. Whether criticism or debate, valid complaints, etc occurred is unfortunately unrelated.
The Mojo:: namespace in general is full of modules that can be used as a general toolkit. Mojo::Util specifically seemed pertinent to this post.
Sorry to say but those still look pretty case-specific, I don't think they would be well suited for the general utility module (with the possible exception of sanitize). But that's the great part of Mojo: you can use it with anything and plug into it in many ways. (Roles are great for customizing the object classes)
The sentiment and spirit of their post is quite clear. If we want to play the word lawyer game then I don’t see why these accusations are anything more than misinterpreted legalese either.
That's not how this works. Assuming bad intent is how this topic and conversation goes downhill every time. Discussing these things constructively is difficult enough on the internet as it is.
Using strong language will result in as much. “Can not fathom”, “all nonsense”, “stubbornness”, etc. This is language inviting assumptions to be made, or for blind acceptance of it as fact.
only because my past conferences were half-metioned, here are some references: * [YAPC::Asia Tokyo 2015](https://medium.com/@lestrrat/the-10th-and-final-yapc-asia-tokyo-6bf15dae1ab4) * [talk on this topic at YAPC::EU 2015](https://www.slideshare.net/lestrrat/yapceu-2015-yapc-asia-tokyo-behind-the-scenes-wo-notes) * [unofficial recording of above talk](https://www.youtube.com/watch?v=Hws9o-A7e68) * note: much have changed since then. e.g. I don't use MT anymore, I use a different ticketing service, etc. * [builderscon](https://medium.com/@lestrrat/builderscon-tokyo-2018-main-dates-sep-7-8-3c609f4265e), which I'm organizing since 2016. For the record, where I felt was a dead-end, others have picked up YAPC::Japan at a much smaller scale. My contribution was to not contribute at all. Younger folks are doing their own thing, which I think is good. I hope you all get to build the conference that most of you can agree to be fun in Europe. But I also feel that as more people experience the ever-more glitzy conferences, expectations towards conferences have been changing, and it's becoming harder and harder to keep the "good ol'" ways without adapting, perhaps radically, to the current climate. And no, I don't have the answers. I'm pretty lost as well :)
Don't do it. Use DBIx::Class.
I'm not going to defend every emotional comment. I'm just pointing out that the first part of the post was not about complaints or criticism.
&gt; The fact you attempt to claim “every” complaint against the alias was nonsense says a lot about your knowledge of the situation in general. I never implied that all complaints and criticism against the alias were invalid. In fact, I agreed with some of them. My comment did not label the complaints/criticisms as "nonsense", I particularly was talking about the accusations that sprouted during and after an alias was chosen. &gt; Do you honestly think not a single valid criticism was brought up, ... No, I do not. However, as I said and wrote in my OC, I was not talking about the criticism. &gt; ... or are you just trying to stir drama with strong language and assumptions? No, I am not trying to stir drama. In fact, I think we have had too much of that.
I think you're reading too much into this. For lack of a better word, you first accuse me of "strong language and assumptions" and now you're assuming things where there's nothing to be assumed. &gt; The sentiment and spirit of their post is quite clear. How do you know this? If you don't mind, what's the sentiment and spirit of my comment according to you?
As I wrote, *personally* "I cannot still fathom how someone who invested so much of their time into the project was also allegedly trying to sabotage said project" unless there was something else going on that I don't know about. Again, "all nonsense" accusations, not criticisms/complaints. In fact, for conversations to prosper and compromises to be reached, we need valid criticisms/complaints, for how else do we know that we might not be as right as we thought we were. I don't see “stubbornness” that of a strong word but if it makes difference, I apologize.
&gt; Assuming bad intent is how this topic and conversation goes downhill every time. Thank you for this. Unfortunately, assuming bad intent seems to be the norm. I think if people had sat down and reached some consensus, instead of throwing rocks at each other whenever this same situation first came up, this would have been a non-issue a long time ago. Certainly I don't have total "knowledge of the situation" but I do know that if those who have enough knowledge talk about it, compromise and reach some consensus, things wouldn't be as crazy today.
Oh, sure. Easy for _you_ to say.
True. I found it after looking over 20-30 scripts which all had the same trim function copied and pasted in them. I needed to write a few more scripts and figured it would be more convenient in the future to use the module. :)
I haven’t written sql for years. My Celko is getting dusty.
It's even simpler if you copy paste around a version like this and assume it will always be used on one defined string: `sub trim { s/^\s*//, s/\s*$// for my $str = shift; $str }`
I don’t want to go to facebook. I use DBI a lot, what’s wrong with it?
It's generally too low-level. Better is to use interfaces higher up, like DBD::Pg, Mojo::Pg, or DBIx::Class.
Nothing wrong with it, but at the very least I recommend using a connection manager like Mojo::Pg or DBIx::Connector as manual connection management with DBI is a mess. I also prefer Mojo::Pg and similar interfaces because the DBI API is pretty terrible. If you find an ORM appropriate for your needs then DBIx::Class can cover all the bases.
Woot!
Those are both great books, I have them both. I also have more recent editions, those are both about 20 years old!
"87 used from $2.21" -- that's where I end up going.
It appears that the value returned by `$data-&gt;answer` is not an object, but rather the value '1'. So the interpreter is trying to call 1-&gt;address and can't find that method (as it doesn't exist). This appears to be a "classic" list context bug: from the documentation, `$data-&gt;answer` returns an array, but you are assigning it to a scalar on the left hand side. This means that you are storing the number of elements in the list rather than any members of the list. Two solutions: `my @addresses = $data-&gt;answer;` `if (@addresses &gt; 1) {` `// handle edge case of having more than one address returned` `} else { ... }` or just ignore anything that is not the first returned address: `my ($address) = $data-&gt;answer;` This is *absolutely* one of the more frustrating aspects of Perl 5 to learn, but once you get the hang of it you'll more or less forget what all the fuss was about in the first place :) A side point, but keep in mind that including @record\_type in your string will interpolate that array into your debug statement.
The underlying point still stands. Raw DBI syntax is not a very clean API for your applicaition level code.
Regardless of whether I agree with you and whether you see parallels, lumping the concerns of the those involved into the political minefield of "identity politics" to invalidate them mostly takes away from what you're trying to say.
Welcome to Perl! Your question was very nicely posed by including the text of the error message, including the source code. Very impressed with your having included "use Modern::Perl" at the top!
You are right, although i thought it was toned down already, compared to what i had in mind. :) Imagine Hoare going to Apple and calling Swift Rust2 then just Rust, because it took things from Rust and they share a designer. Or Go calling itself C2 then just C, since Ken did parts of both. Typescript C#7 then Delphi2 then just C# ? What's with all these questions if not identity politics and why is it that taboo to speak that for what it is. Is calling a bully out bullying ?
Yes, and once you get `$address` as above, you will find that only "A" records return an object with the `address` method. Rather than look at `ref` for the object type, however, it's probably better to use a more role-based approach, and ask the object what kind of data it would like to provide: if ($address-&gt;can('address')) { say("Found ".$address-&gt;type." record: ".$address-&gt;address); } elsif ($address-&gt;can('nsdname')) { say("Found ".$address-&gt;type." record: ".$address-&gt;nsdname); } elsif ($address-&gt;can(…
What can I say, I'm old...
Pivot to devops? People who can script integrations and workflows are in high demand.
There is definitely more then one way to have fun!
Pick up another language or two. You ideally want to be a "Developer," not a "Perl Developer." "Perl Developers" can only get jobs in perl shops. "Developers" can get jobs anywhere.
It seems p6weekly has been in [perly_bot's feed](https://github.com/dnmfarrell/Perly-Bot/blame/c21a8282e17b8489d0720127a2244b1d66b94326/feeds.yml#L55) this whole time, it's just been manually posted to /r/perl fast enough before now.
Nothing is wrong with it. I don't get this desire to add layers and layers of ORM obfuscation and indirection just to avoid writing some SQL. (`DBIx::Connector` looks useful, though)
Try turning buffering off on stdout.
"subset intersection table.splice &amp;&amp; inverted.transaction_rollback == right.sqlite.clone" and I am without a doubt the biggest doofus to have ever thought computer science was for Blep Bleppelin laser light shows.
Glad to see it's the content that causes the downvoting, and not the poster.
that was it, thank you!!
On the other hand, just for laughs, if you didn't unbuffer, with your output of five characters per 'say' call and ten seconds between calls, with typical output buffering of 4k these days, if you left it running and went for coffee, I think you'd print 813 lines of output in one go every 8130 seconds.
quickly without testing: $input = &lt;&gt;; # read a line from STDIN (with "\n" in the end) $input =~ tr/abcd/1234/; print $input; # no need to add "\n" since it is already there
thanks alot!
One way in P6: prompt('enter phrase: ') .trans('abcd' =&gt; '1234') .put
Kinda unrelated, I've actually stopped putting daemonization code in my programs now. All the modern init systems don't require you to fork (and if they do, they come with tools to handle forking, creating PID files, etc). I'd take a look into not daemonizing, and letting your init system (systemd, upstart, whatever) handle all that stuff.
hehe
I'm a Windows guy, and not very familiar with all the Linux tools available. But I need to run this on Raspberry PI. When I was searching for examples I found many examples when all code -- the daemonizing and the actual script, and start/stop logic -- is all in the same Perl file. But I liked when its all in separate files, at least the actual script: its clean, easy read code/debug/run, and when it's ready just run it with the other script as daemon.
No word about subroutine signatures in that changelog. Any chance they'll be non-experimental soon?
Raspbian uses SystemD. Concerns aside, it's pretty easy to get a daemon running: https://www.raspberrypi.org/documentation/linux/usage/systemd.md. Then it'd start up with the system.
awesome, thank you!
You don't need a variable on 5.14+ that gives us `/r`: print &lt;&gt; =~ tr/abcd/1234/r;
Cool; do you have the source somewhere?
[https://github.com/ablakely/shadow](https://github.com/ablakely/shadow) &amp;#x200B; I've been working on it here and there for a couple of years, not nearly as much of an IRC user as I was when I first wrote it.
* Switch to IO::Socket::IP, that way the software is not restricted to IPv4. See https://tools.ietf.org/html/draft-howard-sunset4-v4historic-00 * The screenshot was a poor choice in many ways: file too large/irrelevant desktop wallpaper, text nearly unreadable because of lack of contrast, bg blotches, font size and weight/colour fringes
just a note: try to use Perl::Critic for whole source tree.. it will force you to use modern perl practices.
I recommend [Perl::Critic::Freenode](https://metacpan.org/pod/Perl::Critic::Freenode) as many of the default PBP-based policies are now quite unmodern. (Disclaimer: I wrote this policy theme)
What’s your concern? They all do similar things.
Instead of working in a language, consider working in a problem domain, Get known for domain knowledge where programming is a tool. DevOps is such a thing, but that's very general (as is "web developer"). In any business, the trick is to figure out what people want and what they aren't getting. Look around to see what sorts of problems people have and are willing to pay to have solved. Learn about those domains and the reasons things are the way they are. As I tell many of my clients, things are a way for reason. It might not be a good reason, but there's a reason. (Often that "reason" leaves and can't block change anymore ;) That's transferrable knowledge and experience that doesn't care which tool you employ.
[IPC::Run3](https://metacpan.org/pod/IPC::Run3)
I have a relevant [new module](https://metacpan.org/pod/IPC::ReadpipeX).
The exact same, in fact.
You could just export it as a function, see how [ojo](https://metacpan.org/release/Mojolicious/source/lib/ojo.pm) does for example in its import method. Rather than making it conditional on oneliners I would either always export it or create a oneliner-friendly shim like ojo that always exports.
I’ve just replaced a bunch of quick with a library function that pretty much does the same. Hey, I get to eat.
I think you read the "or" as "vs.", while I think they're just offered as alternative syntaxes. His concern, in the article, is that while it captures STDOUT, STDERR bypasses the capture and goes straight through to perl's own STDERR. It would have been nice if he pointed towards alternatives to address that, but that is an enormous rabbithole, and each alternative has its own problems.
Function export is a much better idea. Seems like hubris to use another top level namespace for my niche package?