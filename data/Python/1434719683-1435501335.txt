ltree does something that JSON can't?
It should be doable in Linux; you just have to figure out the magic settings. Find out which program is doing the downloading (pip? or something that pip calls?) then google for how to set the proxy settings for that program. You'll also need to know the address and port of your company's proxy, and possibly a userid and password depending on how it's set up. 
The beauty of wtforms is that it makes dealing with form data super easy. It's not really a data (de)serialization library, though it needs to do *some* of that. Really, what I think you're looking for is [marshmallow](https://github.com/marshmallow-code/marshmallow)
&gt; pip a library Sounds like something that would be illegal in some states.
Totally worth learning. It doesn't output HTML, but it does produce dictionaries that you can feed to templates or consume with Angular or whatever.
+1 for where do you pull the score from? 
You did something wrong if you update scores with selenium
I'd recommend a DataFrame. More than likely you are going to need to do some cleanups and/or calculations. My experience is that a dataframe is going to be faster and more flexible than rolling your own with lists/dicts. The added bonus is that dumping the data out to Excel is as easy as doing df.to_excel() 10,000 records with 20 fields should be pretty easy to manipulate in your dataframe.
Thanks a lot for referring me that library! I have already implemented drag-drop for the foreign-keys, but drawing the connectors on the canvas from scratch would have been a hectic task. This library has all we need to place the SVG connectors between the two fields.
As /u/Zifendale already mentioned use a smaller subset of the data and run the python profiler. The profile will give you information which part of the code takes the most time at the cost of longer runtimes when using the profiler. My first guess is the frequent use of all_data.iloc[i]['loser_name'] / all_data.iloc[i]['winner_name'] in the loop. For both better readability and less calls, you may save the results of this in a variable at the start of each loop iteration. Did you check how much RAM the datastructures are consuming? Maybe your computer is constantly swapping the datastructures to the disk because they are to big for the RAM available in your computer.
https://github.com/Pylons/deform ?
Thanks for your response :) I suppose I just hit the limits of the scope of WTForms and needed to use something else. The concept I was going for was (obviously) much broader but perhaps could be thought of as "data comes in, gets validated, and goes out". The schematics project looks very similar to what I was thinking of.
 It would mean that [PyPy.js](https://github.com/pypyjs/pypyjs) would become much faster (maybe 23x!), and smaller most likely. See [this issue](https://github.com/pypyjs/pypyjs/issues/145).
Using backend? 
I'd go with a dataframe unless the data is really heavily nested. In many cases those APIs have some sort of NoSQL database behind them and it gets ugly when you're forcing the source data into a flat RDBMS-style table. If that becomes a problem I'd get what I needed from the API, hold it all in mongo, rethinkdb, whatever, then get the main flat-file subset into pandas (you could do this at the same time). Then if you need to pluck a particular data point quickly across many records and it's not in your dataframe, you can still query the local nosql storage with the same speed.
Sorry for my ignorance, but I'm not sure what that means. I know to get live scores you usually have to pay absurd amounts of money to get it from a few select services. 
you mean probably goes beta, right?
Dog wanna go down to the river and pip a library? We got some good shit right here
Yeah, I looked into it. API's for live score updates cost $$. I got around it and did a front-end work-around using browser automation.
The whole game is very rudimentary, from the rules down to the score updates. It was made just for fun. Unfortunately it's not live scoring. I pull the scores the next day from the MLS stats website using Selenium on an automated task. I wanted to do live API calling, but any service that gave live scores cost lots of $$
In the newest version of pip you can use the **pip wheel** command to generate binary wheel packages of a package and all it's dependencies. Then just copy the entire wheel directory to flash or your download server. Finally give the pip install command the wheel directory to install from.
Have a look at [schematics](https://schematics.readthedocs.org/en/latest/) and [Django example](https://github.com/schematics/schematics/tree/development/examples/django)
Or you can just grab whole page using something like urllib2 and then parse data. 
Use a **redis-collections** module dictionary with the **redislite** module and a specified rbd file. Then the dictionary will persist between runs and there is no need to install and configure a separate redis server. Also the dict can be shared between multiple web server processes and threads. Just **pip install redis-collections redislite**. Then this example code will get you a persistent dictionary named mydict that is stored in the redislite. from redis_collections import RedisDict import redislite redis_connection = redislite.StrictRedis('dbfilname.rdb') mydict= RedisDict(redis=redis_connection, key='mdict')
From [awesome python](https://github.com/vinta/awesome-python#forms): * [Deform](http://deform.readthedocs.org/) - Python HTML form * [voluptuous](https://github.com/alecthomas/voluptuous) - A Python data validation library. It is primarily intended for validating data coming into Python as JSON, YAML, etc. * [colander](http://docs.pylonsproject.org/projects/colander/) - A system for validating and deserializing data obtained via XML, JSON, an HTML form post or any other equally simple data serialization. * [schema](https://github.com/halst/schema) - A library for validating Python data structures. * [Schematics](https://github.com/schematics/schematics) - Data Structure Validation. * [kmatch](https://github.com/ambitioninc/kmatch) - A language for matching/validating/filtering Python dictionaries. * [valideer](https://github.com/podio/valideer) - Lightweight extensible data validation and adaptation library. I'm personally using [flatland](http://discorporate.us/projects/flatland/) to handle my form stuff but I would not suggest it since it has been abandoned a while ago. If I were to do it again, I would probably go with voluptuous since it follow the same principles and it keeps things somewhat simple. In any case, you always need to adapt your form data submission into your model somehow. It is possible to automate some part of this adaptation (django does it to some point I believe), but it is still needed and can lead to complex situations that will always be hard to automate. Check these other libraries.
(Author here) Yup. You can also still use NUTS if you provide a gradient for your black box function.
Yeah I might convert it to that. I wanted to get some Selenium practice in anyway because I'm starting a new test automation project at work, so just wanted to see if I could do it.
Can you explain to me why are you adding a constant to your simple linear regression with SAT Scores and Study Hours?
If you're going to try for one liners on Ruby, be at least fair and compare it to Python's: [fn for root, _, fns in os.walk(basepath) for fn in fnmatch.filter(fns, '*.pymr')] Or map(func, (fn for root, _, fns in os.walk(basepath) for fn in fnmatch.filter(fns, '*.pymr')) "Ruby is better" my ass. How the fuck are you going to know backticks `` are shelling out? Author didn't even try the 'sh' package, which is meant to provide the power of subprocess in as few characters as possible.
Oh wow, it seems they've improved the documentation on this a ton in the past few months. I asked how to do this a while back and was directed to some examples by the devs, but there wasn't really a whole lot of info there and there also ended up being some bugs. Glad to see how much it has improved. Perhaps I should go pick my side project of adding a DREAM sampler to PyMC back up...
uhh ok... that sounds like a lot of subtle and annoying bugs potentially... Thank you, I wasn't aware of that.
This is the correct answer.
add_constant adds the X variable to the linear regression model. For example, imagine we had a dataframe, df, with variables x1, x2, and y. If we wanted to regress y on x1 and x2 with the standard statmodels API, we’d code something like the following: Xmat = sm.add_constant(df[['x1', 'x2']].values, prepend = True) yvec = df['y'].values ols_model = OLS(yvec, Xmat).fit() See (http://slendermeans.org/ml4h-ch2-p2.html) for more indepth explanation
It's clearly a configuration problem. Report it to the issue tracker page. I doubt anyone here is going to know.
bonus points if job is programming/IT related
FWIW, most people think R users prefer ggplot2 because it has prettier graphs. But its the api and the way you build charts with ggplot2 are the reasons people like to stick with ggplot2. There is even a Python port of ggplot and this [blog](http://blog.yhathq.com/posts/ggplot-for-python.html) highlights why it is more than just about prettier charts.
This is really *the* killer feature. It means that I can add a command line argument to a script in a workflow that, say, generates all the figures for a paper, and have it automatically style the same figures for a presentation or poster instead. 
Matplotlib can be quite intimidating and if you have a background in R/ggplot you'll obviously prefer the ggplot2 API. As someone with very little R experience, I don't find it pleasant or easy to work with though.
Exactly. I haven't actually tried doing what you suggested, but I don't see why it shouldn't work. You would just need to spend some time tweaking and coming up with your preferred style templates.
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
I've also created a nice "Tableau 10" style that uses Tableau's color scheme: [link](https://gist.githubusercontent.com/rhiever/d0a7332fe0beebfdc3d5/raw/205e477cf231330fe2f265070f7c37982fd3130c/tableau10.mplstyle) You can find an example of the style [here](https://camo.githubusercontent.com/d3a7f175855a89d80271651edff10302d365cefd/687474703a2f2f7777772e72616e64616c6f6c736f6e2e636f6d2f77702d636f6e74656e742f75706c6f6164732f70657263656e742d62616368656c6f72732d646567726565732d776f6d656e2d7573612e706e67). You can use it as a matplotlib style with: plt.style.use('https://gist.githubusercontent.com/rhiever/d0a7332fe0beebfdc3d5/raw/205e477cf231330fe2f265070f7c37982fd3130c/tableau10.mplstyle')
it is my understanding when using fabric that `linevich` needs to be able to be logged in externally. Meaning fabric doesnt do a `sudo su linevich` and then executes your whoami. it does a new linevich@127.0.0.1... and then a whoami. Needless to say, the user linevich needs to be setup with the proper key to accept login. Hope that helps.
What I would do is just: * create a new venv * pip install the libraries (which will this include the dependencies) * copy the venv to the sandboxed system
**Edit: I'm totally wrong.** I uninstalled numpy, installed libatlas3-base (debian), reinstalled numpy through apt-get, and now my results are much better: In [9]: then = time.time(); C=np.dot(A,B); print time.time()-then 0.326290130615 In [10]: begin = time.time(); C=linalg.blas.dgemm(1.0,A,B);print time.time() - begin 0.354342937469 **end edit** Yeay! I think I know the answer! It's because the arrays are too big to fit in your cache, so you're getting lots of memory lookups. I think? I used [this SO answer](http://stackoverflow.com/a/21096605/724375) and removed the array copying (since they were working with arrays not in RAM already) to try doing the dot in blocks. In[78]: then = time.time(); C=np.dot(A,B); print time.time()-then 7.83576488495 In [79]: for x in range(10): mel = 50+50*x begin = time.time();blockwise_dot(A,B,max_elements=mel);print time.time()-begin ....: 4.04236602783 3.76524806023 3.67713308334 3.77806997299 4.09278798103 5.46733283997 6.41243219376 6.83912301064 7.60976004601 8.09877181053 So, this is twice as fast with the right block size... Edit: not the speed you were looking for, so I assume blas just has a more cache efficient algorithm. Thanks for pointing this out to me. Please let me know about any updates because I find this very interesting.
Are there any recommendations here for this book? 
and this is how security breaches happen......
Wonder if this can help with non theano functions: https://github.com/LowinData/pyautodiff Compiles numpy to theano
I designed it so that you would be forced to update the patch if the target function in the other library breaks. In a way, patchy is a defense mechanism against changes which should be reviewed more throughly. At work we had a couple monkey-patches on Django where the functions were copied out into our code base and modified, which means that we might upgrade django and not even know that the target functions had changed, or even moved. Patchy-patching seems like it will be easier in the long run.
Agreed, I think "intermediate" should indicate that we know how to invoke the Python interpreter, we know if/else, we know for, etc. I think the author should also explicitly state which version of Python the book will be using. One section in there uses Python 2.7. Personally I say do 3. People picking up Python who don't need to maintain projects written in 2 should be using 3. Guido mentioned this at PyCon 2015, we need to be making a better effort to move to Python 3, and I think one way to do this would be for new literature like this to start writing based on Python 3. There are a few typos and grammatical errors, but I assume that's to be expected in a sample for a book that hasn't been completed yet.
That sound like quite good if not slightly hacky or at least more hacky than monkey-patching aproach. 
Don't use nested dicts. It'll cost you a factor of 5 on memory. I made that mistake. I use numpy arrays now.
It's one third done by some random guy. why are you all upvoting this
This unfortunately does not work with some corporate proxies likes bluecoat...
Fuck off and/or do your own homework.
It doesn't mean anything, it's just the name of a constant, one which is an option given to the pack manager to tell it to fill both sides. The module exports a number of other constants with uppercase names: &gt;&gt;&gt; import tkinter &gt;&gt;&gt; [sym for sym in dir(tkinter) if sym.isupper()] ['ACTIVE', 'ALL', 'ANCHOR', 'ARC', 'BASELINE', 'BEVEL', 'BOTH', 'BOTTOM', 'BROWSE', 'BUTT', 'CASCADE', 'CENTER', 'CHAR', 'CHECKBUTTON', 'CHORD', 'COMMAND', 'CURRENT', 'DISABLED', 'DOTBOX', 'E', 'END', 'EW', 'EXCEPTION', 'EXTENDED', 'FALSE', 'FIRST', 'FLAT', 'GROOVE', 'HIDDEN', 'HORIZONTAL', 'INSERT', 'INSIDE', 'LAST', 'LEFT', 'MITER', 'MOVETO', 'MULTIPLE', 'N', 'NE', 'NO', 'NONE', 'NORMAL', 'NS', 'NSEW', 'NUMERIC', 'NW', 'OFF', 'ON', 'OUTSIDE', 'PAGES', 'PIESLICE', 'PROJECTING', 'RADIOBUTTON', 'RAISED', 'READABLE', 'RIDGE', 'RIGHT', 'ROUND', 'S', 'SCROLL', 'SE', 'SEL', 'SEL_FIRST', 'SEL_LAST', 'SEPARATOR', 'SINGLE', 'SOLID', 'SUNKEN', 'SW', 'TOP', 'TRUE', 'UNDERLINE', 'UNITS', 'VERTICAL', 'W', 'WORD', 'WRITABLE', 'X', 'Y', 'YES'] 
It means the widget should fill both the horizontal and vertical axis. Also this sub-reddit makes the following suggestion in the right side bar: &gt;If you are about to ask a question, please consider r/learnpython. Homework-style questions will be removed, and you'll be encouraged to post there instead.
Are there any good intermediate books out there already?
Normally, a library is put up on PyPI, and you install it with `pip install &lt;packagename&gt;`. If your code needs it, you specify it as a dependency in a requirements.txt (if you're writing an application) or in setup.py (if you're writing a library). But it looks like [textteaser](https://pypi.python.org/pypi/textteaser) on PyPI is a different thing, possibly meant to be an API client for that service. So that won't work in this case. Since it's fairly small, you might want to just download it and copy it into your own code for now.
The first command clones the git repository. It will create a directory `textteaser` as a subdirectory of the current working directory. The second command installs all the modules that the authors of the `TextTeaser` module consider dependencies for using their code. `pip` by default will install in the system location(*), which will fail unless you are running this as root, which you probably shouldn't be doing. A better option would be to run this from within an activated virtual environment, in which case `pip` will install the modules into that virtualenv and not into the system location. (*) The exact location depends on the operating system and how/where Python was installed. `pip` also takes a `--user` option which installs stuff under the home directory somewhere. &gt; Wouldn't the user need to install DataTeaser as well? If your program depends on a given module, then yes, users of your program have to install that module, just as you had to install all the modules listed in TextTeaser's `requirements.txt` (which is just NLTK apparently, but that's a biggie) to use that module. &gt; Could we instead just download the whole program and then place into our program directory? There is no "whole program". Modules are designed to work as separate, independent units. The whole point of the system is that each module is written and maintained separately by different groups of people. Nobody would ever get anything done if they had to write and maintain everything themselves. The TextTeaser authors are certainly not interested in maintaining an entire fork of NLTK in their own repository; that would be insane. There are programs that can bundle an application and all its dependencies for distribution as a single unit, such as cx_Freeze, py2exe, py2app, etc. But unless the project specifically goes out of its way to offer those kind of builds (and hardly any do), it doesn't change the situation at all. If you want to offer users of your program a bundled build, then feel free, but it's too much trouble for too little gain for most projects. 
it seems to be flightdey's book. too many books out there and not all are of decent quality
what does PIP mean and how do I actually install things that way? this is another library/extension I've seen with PIP install as a choice. 
I am just trying to go hand in hand with an online demo, and I type the following lines, and I get a slew of problems, and I have no idea why it throws up, because I have a green checkmark all the way down. If I could figure this out -- I'm sure it's a library issue -- I could move on from there: import requests from bs4 import BeautifulSoup def trade_spider(max_pages): page = 1 while page &lt;= max_pages: url = 'https://www.thenewboston.com/forum' + str(page) source_code = requests.get(url) plain_text = source_code.text soup = BeautifulSoup(plain_text) for link in soup.findAll('a',{'td': 'class'}): href = link.get('href') print(href) page += 1 trade_spider(1) C:\Python27\python.exe C:/Users/nypr13/PycharmProjects/untitled/.idea/webcrawler.py Traceback (most recent call last): File "C:/Users/nypr13/PycharmProjects/untitled/.idea/webcrawler.py", line 1, in &lt;module&gt; import requests File "C:\Python27\lib\site-packages\requests\__init__.py", line 58, in &lt;module&gt; from . import utils File "C:\Python27\lib\site-packages\requests\utils.py", line 26, in &lt;module&gt; from .compat import parse_http_list as _parse_list_header File "C:\Python27\lib\site-packages\requests\compat.py", line 7, in &lt;module&gt; from .packages import chardet File "C:\Python27\lib\site-packages\requests\packages\__init__.py", line 3, in &lt;module&gt; from . import urllib3 File "C:\Python27\lib\site-packages\requests\packages\urllib3\__init__.py", line 10, in &lt;module&gt; from .connectionpool import ( File "C:\Python27\lib\site-packages\requests\packages\urllib3\connectionpool.py", line 37, in &lt;module&gt; from .request import RequestMethods File "C:\Python27\lib\site-packages\requests\packages\urllib3\request.py", line 4, in &lt;module&gt; from urllib import urlencode ImportError: cannot import name urlencode Process finished with exit code 1
command prompt. Such a magic phrase. Thank you. I had no idea where to actually go to install. Thank you
[Three tools?](http://cdn.meme.am/instances2/500x/362421.jpg)
You might need to install pip for windows.
it sounds like you're question is less about flask and more about building a front end. Check out jinja2 templates and and how to upload a file in HTML and post to your flask method that will handle your working process. jinja2 templating is wonderful.
Wow, never heard of any of these! Will definitely check these out - autoenv and cookiecutter especially sound great!
And it's sample is the same beginner style tutorial stuff. I was hoping a Hettinger style book, discussing clever things to do with classes, good pythonic design patterns and dealing with python2 and python3.
Thank you. This worked. I find, honestly, what's harder than learning the language of the code, is learning the language of the errors. I know I'm going to have errors and problems in my code, but if they are explained in Japanese when I'm typing in French and only really speak English, I'm in trouble. 
what exactly is difference between web scraping and crawling?
&gt; I do have the naive question of how to add what I need to from the github link to merge intervals Ah, that link was just me citing my sources. I pulled the part you'll need (the `overlap_intervals` function) into the snippet. &gt; And thanks very much Happy to help! :)
So i've been working on a python project on and off for a year now. . .and totally forgot what modules I had to install using pip. Anyway to find out?
Those instructions are simply wrong, they won't work. One because of the absolutely strange placement of requirements.txt in the package itself, and 2nd because that won't install the whole project, just make that clone usable as a project workdir (which is a different thing from "installing").
A (context manager) related advantage of stylesheets is that they are composable. So if you want a global color scheme, for example, but want to alter the font and tick density depending on if the output is intended for publication or presentation, it is easier to use stylesheets: have one for the color scheme, and two others that define the context-specific changes.
Verbose errors aren't there just for you. You are supposed and encouraged to show them to others, like you just did. This way somebody who knows better has a much easier time to understand what's going on by just looking at the pasted error, rather than watching you trying to explain what happened with your own words. You might find this reading useful http://catb.org/~esr/faqs/smart-questions.html
I would think you'd only want to use is when you're talking about meaningful objects. Like, if loggedInUser is creatorOfPost (forgive the clumsy naming)
You can set 200 different properties in a matplotlibrc file, which can be a bit overwhelming, depending on your level of experience. So starting from a predefined style, that was created by people who know something about visualization and customizing that is probably easier for most people than starting from scratch. Maybe not for you though.
Often by 'crawling' people mean 'traverse a web site' - in other words, 'download pages, find more pages to go to, repeat'. 'scraping' usually means 'extract information from the pages'. If you're writing a regex or XPath to find page title you're doing web scraping, if you're writing a regex or XPath to find an URL of a next page to follow, and then following this page, you're doing web crawling. Often you need both; also, often these terms are used interchangeably, or 'crawling' is considered a part of 'scraping'.
Hello. I know I'm a bit late but I'm hoping that you're still answering questions. Firstly, great module. I've been playing with it, and incorporating it into some of my scripts and it's been working great, so thank you. But I was just wondering how does yagmail know when to close the connection? If I want to send multiple emails with the same connection object will it always be ready, or can it timeout? Thanks
You're right that it is easy to traverse a web site and extract data from it using e.g. requests and lxml or beautifulsoup. It is still doable, but a bit harder once you want to do download data in parallel, maintain politeness, handle retries, etc. But with scrapy it is not any more complex than a basic single-threaded requests/BS version once it 'clicks'. The code needs to be structured differently because of Scrapy async nature; in the return you get efficiency, robustness, and lots of helpers for common use cases. Likely you'll be writing less code and have more edge cases handled out of the box, even for very simple spiders. I think that a large part of a perceived scrapy complexity is in how it was introduced. In Scrapy 1.0 (released yesterday) the introduction was rewritten - check e.g. an example from http://doc.scrapy.org/en/1.0/intro/overview.html#walk-through-of-an-example-spider. Another reason people think Scrapy is complicated is that Scrapy API used to be more complex than needed. This is being improved - you no longer need to create arcane HtmlXPathSelector instances, you can avoid creating projects, defining Item classes, wrestling with CrawlSpider rules, you can use familiar CSS selectors instead of XPaths, etc. Did I convince you? :) I could be missing something. Why do you think scrapy is over complicated?
My current setup is VIM + jupyter. I may switch to [rodeo]( https://github.com/yhat/rodeo/blob/master/README.md) + jupyter since then I would just need to open a browser. Rodeo isn't quite polished and doesn't yet support allowing input() which I need for prototyping purposes. I've heard good things about PyCharm but just never got around to checking it out.
Dude, if your employer doesn't want you downloading and installing unsanctioned software at work, then **don't download and install unsanctioned software at work**. Seriously, what are you thinking? You could get fired with cause. Not to mention that it is unethical. If you are permitted to download and install Python libraries, then the right way to do it is to go to the IT dept and say you need access to these sites, please unblock access.
Gray text with blue links on a black background? I did actually want to read it. Edit: opening it in the external browser used a different style sheet with a white background. Totally legible. 
I also like SublimeText. My setup is damned simple: - Sublime Text 3 (with Anaconda plugin) - iPython in a seperate terminal That's it.
Wow, I didn't expect Flask and Django to be so close together. I figured one would have a major lead over the other.
Also, for those who want easy nice graphics, either do import ggplot or import seaborn (assuming you have them installed) and you'll get their stylesheets automatically. For those using ipython notebooks, make sure your %matplotlib inline is before the import otherwise it get's funky. Finally, does anyone know how to access the default colour palette when using a stylesheet. Say I'm trying to add two lines that I want to be the same colour. I would normally do `plt.plot(x,y1,'g')` and then `plt.plot(x,y2,'g')` but I'd get the default green which can look really out of place, as opposed to the seaborn or ggplot green
FWIW, my completely non-quantitative analysis is that number of stars is *sometimes* a close reflection of actual popularity and ubiquity...but not always. In the [complete rankings](https://github.com/search?p=1&amp;q=stars%3A%3E1&amp;s=stars&amp;type=Repositories), bootstrap has twice the stars of the second-place repo (free-programming books)...which, no matter your opinion of bootstrap for webdev, you can't argue against its incredible utility to a wide variety of people. On the other side of the spectrum...most Python developers couldn't live without [pip](https://github.com/pypa/pip)...and yet it only has 2,163 stars. Jinja2 is essential for web templating yet has &lt; 2,500 stars. Matplotlib underpins most of Python's visualization and has just 2,586 stars. Meanwhile, [sampsyo/beets, a MusicBrainz tagger and library manager](https://github.com/sampsyo/beets) has 4,000 stars...it's not a knock against beets...I just had never heard about MusicBrainz until seeing this repo just now. 
Aaaaaand Django is second. No surprise there.
/r/learnpython and /r/linuxquestions are places to ask questions, not so much here. It's running your python script under bash. I don't think `su` cares about shebangs and just assumes that its arguments are shell scripts. I have to wonder why you're even using `su`; `sudo` can choose users too: sudo -u odoo /opt/odoo/openerp-server That said, the right way to do this is to properly configure your init system to start the server for you.
Ohh! This looks like fun! I'm gonna try them out and then report back. EDIT: **SPOILERS AHEAD** -- **SPOILERS AHEAD** -- **SPOILERS AHEAD** eval_filter.py is evil and I can't figure it out. --- safe_pickle.py is also evil and I also can't figure it out. --- tree.py is a bit easier: it's semi-obfusticated code which translates to this: if sum(ord(char) for char in raw_input('&gt; ')) == 1337: print 'You win!' else: raise ValueError("Bad value") Basicly you have to input a series of characters who's ASCII values total to 1337. My solution was "~~~~~~~~~~M" --- trust.py is pure evil and I can't figure that one out either... --- value.py hurts my brain and I can't figure that one out.
Nice use of web scraping. Would [BeautifulSoup](http://www.crummy.com/software/BeautifulSoup/) have been more appropriate in this case though?
Great hint, I struggled with that bit and cutting n pasting wore me out. 
Is the screenshot [in your post](https://www.reddit.com/r/Python/comments/3a5vf8/python_performance_for_ini_to_database/csavgme) before you used pypy? I'm just wondering why pypy gave you such a huge speedup if 90% of your time was used for ssdeep (which seems to be written in C?). Although.. that was test data, wasn't it? Maybe you have a different bottleneck (that was "tacken care of" by pypy) like a non-fuzzy hash check done in pure python. Great that you could solve your problem!
Wow! That introduction is waaaaay better. The first version was inaccessible enough that I had just been rolling my own with requests and beautiful soup, handling connections and throttling myself.
I do. I use vim to put my code into final production form. I use jupyter to prototype because of the literate programming nature of it.
On Linux you can also use "advisory locking" with [flock](http://linux.die.net/man/1/flock).
They moved from Bitbucket to Github 4 fours days ago. 
Deployment is also pretty easy for simple sites on Google app engine, using webapp2 and jinja templates.
About time. I hate using bitbucket
If your refering to the use of pathlib in the actual source I just reverted that. It was not meant to be committed as a I was testing changes per [this](http://www.reddit.com/r/programming/comments/37x1o0/python_ruby_and_golang_a_commandline_application/) comment. Thanks for the note!
That's a lot of dependencies for something so simple... Makes it hard to use for stand-alone scripts (you might not want to have to install virtualenv, create an environment and install stuff to run your own 5-line-long Python cron job).
On the flipside. I've used Django extensively but I haven't ever used Flask. Django is much more complex and scalable than Flask seems to be. Django can be used for small projects and easily scaled up to very large ones with less effort than Flask. But if you're going for small projects than Flask probably has *way* less overhead. At least that's how it seems to me. Flask looks really interesting because it's much smaller and presumably faster. I've considered using it as a static site generator with Frozen-Flask. 
Thanks for your comments. The point of this article was not to point out that one is better than another, rather to point out that a developer should not be dogmatic about there choice of languages and should rather choose the best tool/language to solve the problem at hand. As stated in the article I provided a personal opinion based on my preferences which are obviously different than yours in this case (but thats great!). Thanks!
This seems like a file based mutex, which can be done pretty easily with the standard library.
i use projects within virtualenvwrapper, but sometimes I open another terminal forgetting to start the venv again. This would save one small step 
Because?
These tools deal with very minor annoyances, if they can even be called that.
I would make a loop and put player_choice() in there. This is a much safer way to do it. For example: # start the game, ask for player choice and random computer choice def player_choice(): choice = "" while choice == "": choice = raw_input("Chose Rock, Paper, Scissors or Exit: ").lower() computer_choice = randint(1,3) compare_choices(choice, computer_choice) # compares choices def compare_choices(choice, computer_choice): while choice == 'rock': if computer_choice == 1: print "Computer chose rock. Tie game." elif computer_choice == 2: print "Computer chose paper. You lose." else: print "Computer chose scissors. You win!" playing = True while playing: player_choice() #You can even ask if they want to play again in this loop playAgain = raw_input("Play again? y/n ").lower() if playAgain != "y": playing = False This is the best way to repeatedly call functions. A loop is also the proper way to make a game.
Ok, makes sense. Thanks.
Have you worked on experiments with zTree? I am wondering how programming experiments in Python is different. I like how simple the I/O is in zTree, but I really dislike pretty much anything else.
I think flask is better in both small and big projects (did the tutorial on django and reading alot about it). You know why it's good on small projects. I think it's better also on big projects because: 1. sqlalchemy is better on big projects (more custom exotic features) 2. sqlalchemy-alembic is more mature than the django alternative 3. jinja2 is better than django-templates (i know you can use jijna2 on django) 4. less overhead While django has bigger community + more jobs + more libraries.
http://ipython.org/ maybe
What advantage does this provide over nosetest?
Yea i think beautiful soup makes more sense here, nice job though. Edit: also i play hon so i may be wrong, but i think guardian greaves are OP.
I have never heard of it. Taking a look, it seems to be for a very specific kind of experiment. It would be relatively straightforward, I think, to write the UI for that type of experiment in Python, either using something like blessed for a command-line UI for PyQt or whatever for dialog boxes and other GUI elements. The tricky part would be the communication between all the clients. For that I would look into pyzmq but that's not the kind of thing I have any experience with. In any case it would be quite a challenge. On the other hand I do hate designing experiments through wizards and other GUIs when I am sitting on programming ability. If you could write a library to facilitate that kind of experiment, but designed for people who wanted to program their experiments rather than design them in a GUI, it would be *a big deal*, both in the sense that it would be a challenge and significant time investment, but also a great accomplishment if completed that you could put on your CV. I would consider it an advanced project. My experiments are very different, always one person at a time (or sometimes multiple people but only one PC), so no network stuff is involved. In some experiments the user is just interacting with a computer, either a little game with shapes or something, or even just showing images and pressing a button. Other experiments occur in the real world and I use my Python scripts to guide me. So it would say "adjust the height to 20 in., instruct the participant to reach for object C. Press space bar when they complete the task" or whatever. So basically it just saves me the trouble of relying on printouts and pencil and paper. I can throw in breaks at the appropriate spots, time certain parts of the trial, play audio, etc. But it's still not that complicated since it's a linear stream of steps with no communication between clients like you do in ztree experiments.
Stars are kinda like upvotes. I think a lot of it comes down to right place at the right time. For instance, [my silly little project](https://github.com/chriskiehl/Gooey) is pretty high up on the list with ~3.5k stars. In reality, probably a super small percentage of those stars represent actual users. The bulk of those stars were generated over a few day period where Gooey was at the top of Hacker News. Now that the "social" effect is over, I get a star every few days or so. All that is to say, I really doubt my project is *actually* more popular than web.py! : ) 
pytest supports "setup_method(self, method)" while nose only supports JUnit-style "setUp(self)". A very minor difference, but enough to prevent 100% compatibility. There are some other similar differences but that's the one I actually noticed in my code.
&gt; I was referring to calling the player_choice() function inside of a while loop. Ah, you're thinking of recursion, then. &gt; It doesn't seem right because that function itself would just dig deeper and deeper into while loops until the player quits the game. Unbounded recursion has a nasty habit of doing that - each call to a function consumes some memory, to store things like local variables; the stack is where all this per-call information is stored. What occurs at some point is that Python's internal stack counter (which increments when a function is called and decrements when it returns) will exceed a certain value, causing an exception to be raised - this avoids the nastier problem of using memory the OS has banned you from using, and getting a hard crash.
I might be misunderstanding the point of safe_pickle.py but isn't something like this sufficient? pickle.loads('csmile\nc\np0\n.') with a file smile.py that contains: class c: happy=True def __init__(self,*args): pass Also value.py is pretty tame. [Spoiler](/s " func.__closure__[0].cell_contents")
The function isn't invoked until you actually call it. So when you use "def function():", you have a layout for what the computer should do, but it won't do it until you tell it to do it with the function invocation "function()". Before you defined an empty function and then executed the rest of the code, and called the empty function at the end. Now you defined a function. Took the integer input, called the function and then that code executed with the variable you defined.
Hmm, can you show me the code? 
 def cubeRoot( x ): ans = 0 x = int(input("What is the value you want cubed?")) if x &gt; 0: while ans**3 &lt; x: ans += 1 elif x &lt; 0: while ans**3 &gt; x: ans -= 1 if ans**3 != x: print(x, "is not a perfect cube root.") elif ans**3 == x: print("The cube root of", str(x), "is", str(ans)) cubeRoot( x )
Ah, because you are calling cubeRoot( x ) without any x defined. Similarly if you call print( x ) The print function won't know what to print, because x was never defined. For example def cubeRoot( x ): # Begin cubeRoot scope ans = 0 x = int(input("What is the value you want cubed?")) if x &amp;gt; 0: while ans**3 &amp;lt; x: ans += 1 elif x &amp;lt; 0: while ans**3 &amp;gt; x: ans -= 1 if ans**3 != x: print(x, "is not a perfect cube root.") elif ans**3 == x: print("The cube root of", str(x), "is", str(ans)) #end cubeRoot scope cubeRoot( x ) # Can find no variable named x, Error! Edit: When you go out of scope, you lose all variables defined within that scope
Jinja2 templates are great and I use them in all my Django projects rather than the Django standard templates. I've only read a little bit about SQLAlchemy but what makes it better than say Django + PostgreSQL?; which I use for most of my Django projects.
But it's being declared with an input? x = int(input("What is the value you want cubed?"))
But the way your function is called, it's called with a variable x that is never defined. It can't see within cubeRoot's code to use the x declared within there. So within the "global" scope that your call to cubeRoot( x ) lives in, there is no variable named x.
Pytest as some unique features: [fixtures](http://pytest.org/latest/fixture.html), [hooks](http://pytest.org/latest/writing_plugins.html#writing-plugins) and [assertion helpers](http://pytest.org/latest/example/reportingdemo.html#tbreportdemo). Also, there are lots of nice plugins and most of them are better than the nose counterparts.
It's a community driven decision but personally I like GitHub cause it has better interface and better service integration (like CI/QA services). Having [Travis](http://travis-ci.org/) run the tests automatically for PRs helps a lot during contribution. I suspect other people have similar perspective.
But it was in cubeRoot's code in your corrected version aswell(which worked)? The only difference I see is instead of putting it at the bottom, I put it at the top. I'm confused. 
Think of it like this. The way that you can read the program, and the way that the computer can read the program are different. You can look up and see that there's a variable named x already defined. You may notice that it's indented, and that may not seem to mean anything, but that is significant to how the computer sees it. The computer treats everything indented after "def cubeRoot( x ):" as if it's a black box. It can't go looking inside of that black box unless it has the key. It is your job as the computer's programmer to provide a key, or else you can't get into that black box. You can use any variable, a, b, c, ..., x, y, z. You just need something defined to put in there.
Pyenv will do that (the pyenv local command), as well as manage your virtual environments
I can second this. I used codecademy to learn the basics, then I ended up using Vpython to remake Pong. You learn all about hit detection, movement, and shape coding
But that's not a feature that "nose has failed to copy", is it? It's "only" that the syntax is different? Or did you mean with "copy" actually copying in a way that both are compatible?
Have a look at the [official documentation](https://docs.python.org/3/).
Ahh I understand the concept now, but... Why is it when 'ans' is defined in the forced indent blind spot, it isn't voided in yours? def doesntMatter( x ): ans = 0 if x &gt; 0: while ans**3 &lt; x: ans += 1 elif x &lt; 0: while ans**3 &gt; x: ans -= 1 if ans**3 != x: print(x, "is not a perfect cube root.") elif ans**3 == x: print("The cube root of", str(x), "is", str(ans)) # retrieves the value from user outside of the function x = int(input("What is the value you want cubed?")) doesntMatter( x )
Why is the title not just "pytest is now on GitHub"?
You don't seem to be in position to learn all ins and outs. Not that time you have is not enough (it took me one article and 2 hours to learn enough python to start using it on a daily basis, not much more to go through standard library and language reference), but if your goal is to find a job quickly, then focus on learning enough to do it, and figuring out which parts are needed for that. However if you truly want to learn it, here are few tips: 1. First thing to learn is how to learn quickly. Learn about ipython, and those functions: help, dir. Keep python shell open all the time and use help to get at least overview of all the functions/modules/concepts you'll use. Try to use them immediately in various ways, to see if you know them really. If you learn something new, try to use it with the things you learned before and think how they could be connected. 2. Now you can get language basics. Official tutorial is good for that. 3. Go to bookstore and look at few books. Pick one and read it whole. Don't skip things you don't understand - understanding will come later, but concepts and terminology will be useful immediately. With time you'll learn to connect things you understand with things you didn't understood before, and that's really helpful. 4. You got the basics now, so you can go to python standard library and language reference and fill the gaps. 5. Whatever you learn, learn fully, Do not leave a line of code you don't get entirely. This is usually the hard part for beginners, as it means that to understand one line you need to understand exception, to get that you'll need to understand error handling and various ways of doing it, and to get that you'll need to understand... and so on. This is often massive time sink, but that's how you learn. If you have a problem with that, you may reconsider if programming is for you, really. 6. If you got that far, congratulations, you know python now, go and use it. You may start learning sql.
What financial software you're expert on ?
Thanks for the detailed answer! Yup, the communication between the clients is the crucial aspect of these experiments and this is what zTree makes really, really easy. I've been thinking of developing some (very simple, probably without interaction) experiments in python, that I could let students play in the classroom using their cell phones. It could be a simple and fun pedagogic tool. 
So this only happens when it's an input?
This happens when the variable is being accessed before it has been defined. Id you look ans it is never being used until after it has been given a value.
Describe again what exactly the form needs to do. I dont quite understand. Do you need to upload a file via the form ?
Are you using gmail or some other email service? If you are using something well known it might be worth it to look and see if there is an API already out there. If not, you can checkout the official python docs on the email module. https://docs.python.org/3.5/library/email.html 
you're calling it a lock, but it isn't. you'd be much better off using an actual unix lock; man 2 flock and https://docs.python.org/2/library/fcntl.html "those who don't understand unix are condemned to reinvent it, poorly" -Henry Spencer
It sounds like the difference is that the method pytest supports actually gives you a reference for the test method that is being run. If that's the case, I think you could accomplish the same with: class MyTestCases(unittest.TestCase): def setUp(self): method = getattr(self, self._testMethodName) 
`value.py` `func.func_closure[0].cell_contents` That seems a little weird. Did I go about it in the right way? #----------- `truth.py` Don't think I'm understanding this one right. Closest I ever thought I got was either: lambda *x: x Which is apparently a builtin, or type("penis", (), {"__nonzero__": lambda self: False}) Which won't let me use `type`. I'm sure the other answers will make me feel stupid. #--------------- `tree.py` &gt;&gt;&gt; chr(1337) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; ValueError: chr() arg not in range(256) &gt;&gt;&gt; chr(1337 % 255) '&gt;' &gt;&gt;&gt; chr(255) '\xff' &gt;&gt;&gt; print(chr(255)) ÿ &gt;&gt;&gt; 1337/255 5 &gt;&gt;&gt; main() &gt; ÿÿÿÿÿ&gt; You win! &gt;&gt;&gt; That one was quite cool. Never looked at ASTs before. Here's hoping I never do again. #--------------- `safe_pickle.py` `c__main__\na\np0\n.` I had to change the `main()` function, 'cause `sys.stdin.read` throws `AttributeError: '_ReplInput' object has no attribute 'read'` in PTVS, so mine looked like this: &gt;&gt;&gt; def main(): ... print 'Please provide a pickled payload: ' ... pickle_data = "c__main__\na\np0\n." ... check_opcodes(pickle_data) ... load_payload(pickle_data) Dunno if that circumvented anything. #------------------ `eval_filter.py` `u"[].__class__.__class__"` DEFINITELY felt like cheating. Time to see the other answers.
Aha, my solution to `eval_filter.py` pointed me towards `truth.py`. [].__class__.__class__("penis", (), {"__nonzero__": lambda self: 1==0})
It's not actually *that* mysterious. It's well documented that CPython creates a table of the numbers -5-256 [and uses those](http://stackoverflow.com/a/11476240). Though I suppose it's mysterious if you've never come across any place it's mentioned 
Because "is now on GitHub" is a generator expression?
Ahh well thank you very much for the help. You seem extremely knowledgable, where did you first learn how to program? Any particular videos or books?
i would say 6 months isn't still enough. If you have years of programming experience, you can learn it easily and apply what you learnt. Learning just python would not get you far in any programming jobs. There is a reason why people hold a computer science degree
No problemo, you'll get there. I only started programming like 2-3 years ago. I first started by watching open courses from Harvard for their intro to programming course "CS 50." If you google it, you should be able to find it. I then started taking courses in Java then C++ at Community College, then I made Computer Science my major. I am now at a University of California, and I start an internship as a Software Engineer this coming Tuesday. You can go far in this field rapidly if you put your mind to it. I am from the Bay Area so Your Mileage May Vary, but it's still pretty great, and just getting better!
I don't think there is any one "right way" to learn a programming language. Here's approximately what I did/should have done/recommend: 1. Download and install python from python.org if you don't already have it. Which version you use will probably depend on which learning resource you decide to go with. 2. Pick a book or online tutorial thing to start with. I would recommend Learn Python the Hard Way (sidebar) if you like getting bossed around (Type this exactly how it's written. Don't worry about what it means right now, just make something that works.) or [codecademy](http://www.codecademy.com)'s interactive python course if you want something a little more hand-holdy. After that you should have a pretty decent grasp of the basics and syntax. 3. Find a MOOC you like to get into some more advanced stuff. Coursera has some pretty good classes that come and go. Personally I like MIT's [Intro to Computer Science and Programming](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00sc-introduction-to-computer-science-and-programming-spring-2011/) because there are extra homework projects and everything is downloadable. 4. Check out the online exercises in the sidebar. Also codeabbey which is pretty good but not on there for some reason. For real world examples, look on github for python projects. Maybe even start your own if you can. Most importantly, whenever you come across a concept you aren't familiar with, google it, especially if it seems to pop up often. == Probably the best advice I can give in general is to write some code every single day. It's important for you to actually use the concepts you read about or you'll get out of practice and/or burned out.
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
Use virtualenvwrapper and set it up to cd into the directory when you `workon` a project.
Make something.
Nice, I totally overlooked that solution to safe_pickle.py. I used a namedtuple, and learned way too much about the pickle protocol in the process :-)
Good work! I'm not sure about your solution to the pickle one, since I don't think `__main__.a` exists? Everything else looks good. Hope you enjoyed them.
Yes, take a look at the source code. 
How would you collect process information on multiple platforms using the standard library? There's a reason psutil exists. 
The example you have chosen to demonstrate your point is a bit disingenuous, a fancy edge case demonstrating how far you can take interactivity with an MPL plot. I have used mpld3 successfully without implementing any additional JS. Are you going to do your data analysis in JS? In Python you have Pandas, Numpy, SciPy, scikit-learn, and the great interactive environment of IPython Notebook. mpl3d is a light-weight add-on to Matplotlib that allows the user to quickly, easily and flexibly make their plot interactive on the web.
how is this easier than just running the ifconfig command myself? 
Thanks for your feedback. :]
Please do! Here's an issue about that: https://github.com/pymc-devs/pymc3/issues/585
How thorough is the restriction? Would it block [Portable Python](http://portablepython.com/)? That runs straight from a folder. 
Well, it runs 3 ifconfig commands so there's that.
ifconfig eth0 hw ether &lt;mac&gt;
I'd start in /r/learnpython.
ignore the naysayers. this is great work for someone starting out with python
It was not inside the function. A function is simply a block of code that you first declare and then can call anywhere in your program. All the code belonging to the function is **indented**. x = int(input("What is the value you want cubed?")) was not indented so was not part of the function. You actually made it part of the function by indenting. Also r/learnpython is where you want to ask your questions. 
how can you improve? write some docstrings, obviously
I didn't use flock because I knew there was no way it would operate the same exact way on all operating systems. I believe that it is a lock because it's one atomic operation dependent only on the file system.
It doesn't seem to work, i type Shift-Ctrl-B and the output field opens but it's empty, if i try to run another python file it says "There is an active running task right now. Cancel it first before executing another task." so something it's happening but the output field is always blank (but no errors or warning). For example, pyg translator: http://i.imgur.com/I8noYr4.jpg
I would suggest going with Django. It has the most things you need build in so you can get started quickly. Plus, if you don't have experience with build web apps, you can just follow the tutorials and best practices. Plus you get an amazingly powerful and useable admin interface for free.
Sorry, what's the risk of running a subprocess? (I'm especially unsure in this case, where no new shell process is made.) 
Thanks, i didn't understand point 1. (just started with python), from the thread that i have linked this seems to work so it's a problem related to the type of code or something else? (now i have tried to print something and that works but everything with an input doesn't work, it's what you are saying?
the bigotry in this thread is outstanding. Thanks OP, this was an awesome example of why python is awesome :)
You can run jinja on separate subprocess, start a timer before, and if the process take too much time, kill it.
Worked ok in PTVS. I actually did enjoy them. Didn't expect to.
same principles apply -- and python is calling libs, written in C Good, safe programming = good, safe programming Test it out. Change the PATH variable to point to a local directory FIRST. Then drop a "sudo" program there. See what happens with this Python script!
No inherent risk in forking processes Its the subshell So, as a user, you inherit an environment: PATH, etc. Since you haven't controlled for them, then you get what you get. e.g., what sudo is going to be run? what ifconfig? -- the one in /bin, /sbin, /user/joe/bin, /tmp ? ... Does this script run from a web/cgi-bin? or forked from php? or something else (insecure) ? its stuff like that.
You latter assumption is correct. This happens all the time.
Gotcha. But OP never created a subshell, right? Or am I missing something?
Say you are an attacker and you are using this script to attack by creating your own 'sudo'. What does this script buy you ? You read the source and see it's calling sudo ... and then ? You could just run your own sudo without this script ... It is not going to run with elevated permissions unless you have real sudo !
Not at present.
Make an open source project on Github and make it good.
&gt; Dear god yes, never assume sudo. I believe you mean "Always assume sudo, and never use the command in a script" (*). Popping a password prompt out of the blue is a big security antipattern, conditioning users to blindly enter their credentials whenever something asks for them and thus making them more susceptible to phishing. (*) Exception should be made for `sudo -v` with the intention of checking if user is root and then showing a friendly message "Run me with sudo!" if they're not.
Docstrings; for those that don't have the patience to read and understand code before commenting on it. i.e. the TL;DRs. Perhaps try to make the code a bit less repetitive - i.e. the klass = self.__class__ dikt = self.__class__.__dict__ klass_name = klass.__name__ mangled = '_%s__' % klass_name Additionally, I'm not sure if the .format() method is in Python 2.7, but I think mangled = "_{}__".format(klass_name) looks a bit better :D 
I'm not sure I understand how this script handles root permissions. The `get_root()` function looks to see if the present executable was run as root, but I don't get why that's important, since all of the commands that require superuser privileges in `set_mac()` invoke `sudo`. So why should you have to be root to call `sudo`? Also, is it possible the shell command invoked in line 54 invokes `sudo` twice, since it's both the first argument to `os.execlpe()` as well as the first item in `args`?
The problem that autoenv tries to solve can be approached from the opposite direction, too. Rather than making directory switch activate virtualenv, make activating virtualenv change the directory by putting an appropriate `cd` command into `bin/postactivate` script of the virtualenv. This is especially handy with virtualenvwrapper: `workon foo` will now land you in the proper directory with virtualenv active, so that you can, you know, work on foo :)
that's exactly how I use it. However sometimes I'm working on other things and end up in a directory to test something. It's not a regular occurance. It's just annoying enough that a 30 second install of autoenv will probably solve it.
\&gt;`ifconfig` \&gt;2015 \&gt;mfw
I need help with the 'good' part. I've heard that Kaggle is a good place to see good projects and competitions. Still looking to find a good project to create...
A malicious sudo could call the real sudo and then use that elevated privilege to email your /etc/shadow somewhere or something.
I'm trying to understand the concern because I want to learn. Are you saying there is a greater risk in running this script than in typing these ifconfig commands into your terminal? It seems like if subprocess is getting a compromised environment, it's because it was run from a compromised environment, right? If a user is running this script in an environment where ifconfig is aliased to some malicious code, they have much bigger problems than this script.
Thank you! It worked perfectly!
?
I gotta ask, why a VMware address? Are you using this to solve a problem with vSphere?
You call yourself a "power user of Excel"? Do something in Python that you would otherwise do in Excel. Once Excel sheets start getting sufficiently clever, it's usually a Bad Thing, and should be a standalone program instead.
if we're talking about best practises... cmd = [ 'ip', 'link', 'set', 'dev', dev, 'address', mac ] `ifconfig` is deprecated.
Which part is *awesome*? Have you lost all sense of perspective?
Yes. 
So what he's saying is do stuff that you would default to doing in Excel in Python instead. This could start of just being rewriting some macros you have already created (and therefore - in theory - understand the logic behind and so can focus on the new syntax rather than the thinking) in Python.
Since you work as a Data specialist for a global finance company, what about some form of visualisation for financial data - i.e. stock prices or market trends? It's a good way to show a multitude of skills from web-scraping or database knowledge (depending on whether you get the stats and data from a website or from a local database) and the financial analysis is something not many programmers would know how to do. Additionally, visualising data is a very interesting and creative topic, since there's many ways to interpret and present data. Just an idea, hope you liked it. Would be cool if it was open-source, I'd love to help develop it :D
It needs to use ip, and also it might be cool to add in a MAC address generator, and a list of known MAC addresses, etc.
Thank you for clarifying! I will do this!
I will! Thanks for your time reading! edit: I fixed the code
I'm open to you being involved with it - great idea!
Maan, in a better world Reddit.com would be mixed with codepen
FYI: You don't need an explicit list comprehension.`set(p.category for p in preguntas)` will do the same thing using a generator expression which might be slower, but won't eat up your RAM in case the list is super-large.
I've never tried this, but I think the reason is stated in the post. This: &gt;"You are having a single Ubuntu system and for the project’s sake , you will install many database servers and other applications in it. The dependencies for your applications will cause trouble , when you are installing both your favorite games and working projects in a single system." And this: &gt;"Why Docker? What if something went wrong in your working project and everything in your system is messed up. So I always suggest you to separate your work with personal things. " So it's like a super `virtualenv`, because it handles more than python package dependencies (database-related stuff is one example). I have at least one personal project that may benefit from using a container, but everything else is so small it would seem like too much overhead.
Well, you can't *really* assume `sudo` either, right? After all, there is a possibility someone doesn't have it installed (Arch doesn't have it by default), or doesn't have sudo privileges. It's much safer to assume they have some method for accessing root, be it a particular program or just logging in as a root user. But yes, a random password prompt from a program not explicitly called as root is an iffy condition at best.
Just a note, you fixed the code in the *__getattr__* method, but not the *__setattr__* method. Additionally, could you explain why you did mangled = '_{klassname}__'.format(klassname = klass_name) and not mangled = "_{}__".format(klass_name) as the latter is more *efficient*; no memory has to be allocated to store and then immediately retrieve the variable. If you're worried about readability, you could do this: mangled = "_{0}__".format(klass_name) because the arguments passed to the format method are treated as elements in a list/tuple and can be called as if they were enumerated.
&gt; Do something in Python that you would otherwise do in Excel.
If you're asking someone else for good ideas then you need to focus on coming up with some ideas and implementing them yourself. That's part of the point of programming rather than just doing what's already been done. Most companies today will care more than you can come up with an original idea and implement it rather than just proving you know a specific language. You seem to already have a mix of skills so if you're looking to add Python to your resume why not combine Python in some way with your existing skills to make something useful?
Fixtures are like a killer feature of Pytest
Scrolled down to find this advice. Then upvoted :) I got a computer engineering degree but it took me a very long time to realize the scope of programming...including things I knew already how to do, but doing them in a manual way. Like opening (i.e. downloading a webpage), which then leads to learning how to scrape (i.e. a faster way of reading and copying) from webpages, and then storing that data into a database (i.e. a faster way than copying/pasting into a spreadsheet). Today I spent a couple of hours writing some functions and a couple of command-line tools to: 1. Detect faces in photos (via [OpenCV](http://docs.opencv.org/master/d7/d8b/tutorial_py_face_detection.html)) 2. Resize and crop (if necessary) a photo to fit a set of given dimensions. Obviously, I've done all of these before, via Photoshop. I've even done some of this by code. And there may already be some Pillow function that does #2. And of course OpenCV face detection using the default training files is nowhere near what you'll get with commercial programs...but this is what I needed to do: Given 1,000+ photos in which I know there's a prominent face, find the boundaries of that person's face, add some padding around the forehead and chin (because the face-patterns are typically bounded at the eyes and lips), resize those dimensions to 400x300, and crop if the given facebox is too big. Even if it took me 5 days to write the scripts, I would still be saving time...but being able to crop all those photos for this project is not even the main point...I wanted to freshen up on argparse and numpy, for other projects. And if I ever have any other face-detection/auto-cropping needs (which is quite frequent, actually), I have this good-enough tool to work from. Getting a computer engineering degree gave me confidence in being able to tackle programmatic problems...but figuring out to use programming to make my life better is what made me a real programmer. 
Subprocess may or may not -- I need to check the code or man page. sudo does (or do you need SHELL=true?) ifconfig ... don't know and I don't know if subprocess passes on env variables. I bet it uses whatever PATH variable is set in the environ. It has to find sudo and ifconfig somehow
Or a set comprehension... {p.category for p in preguntas}
I feel like this is actually poor advice. When I got excited about using python to do everything, I started taking all the things my co-workers would usually use excel for and put them through pandas with python. Most of the time this ended up being an overly complicated and opaque way of working. Excel is really good at what it does, and if you need to see/sort and edit the data while visualising it in real time in excel charts, it is better to leave it in excel. Especially if you will receive data in excel, show your working to others in excel and send it off in excel format. Python is good for anything more complicated than simple equations but excel really shines in representing the data as you use it. 
mention magic methods?
Post it to GitHub, then post to /r/codereview/ to ask people to take a look at your code.
You go girl !
I remember an assignment like that. Make sure you handle the "ends with a vowel" case for your pig-latin. Banana should be banan-ay, not banana-ay.
He wants to get better at python. There is no better advice than "write python". I gave him a pointer of what to write, and a fantastic one; something he knows inside and out, and uses every day. I never said he should use that in production.
Yeah I was gonna say. Simple subprocess and strings, great example. Very educational.
Man, I am on a sloppy sleepy mode... I'm gonna fix all of this tomorrow.
I use cx_freeze with python 3 on windows, couldn't get pyinstaller to work with 3
Get the visual studio c compiler working, you'll need it at some point - even the some things will cause you problems and not work at all when you try and install them. 
Wait, what do you mean "includes a lot of binaries"? Does it come with a set of packages on first install?
because most Windows machines don't come with compilers (FORTRAN, C++) and dependencies to install packages like numpy, scipy, etc from source. At some large companies, it can be a pain trying to get admin rights and getting IT people to understand why you need compilers and the needed tool chain.
Ahh! That makes sense!
The is might be better suited for /r/crypto
It is worth mentioning you can use the MinGW GCC compiler instead of Visual Studio. Just google for *mingw vcvarsall*. It has solved all my pip problems.
Not specific to Python, but I can't live without: * [clink](https://mridgers.github.io/clink/#). * [GNU on Windows](https://github.com/bmatzelle/gow/). Specific to Python on Windows... If you can't install some package, try with one from [this site](http://www.lfd.uci.edu/~gohlke/pythonlibs/).
numpy, scipy, etc. don't sucessfully install through pip unless you have visual studio installed and running as a cpp compiler (and even then sometimes not), so you need to install precompiled binaries. You can either download them by hand (from sourceforge...) or install them through conda, which has the added bonus of also working as a virtualenv. That said conda is like python 3.3.5 atm, so it lags behind by a version and a half.
I use pycharm intsead of notepad++. It works a treat.
You *could* just point pip to a precompiled binary, but I get what you're saying.
I'm OK with that. The OP is learning to code and this is part of the process: posting, feedback, and learning. Absolute paths to executables, control of environment variables ... these are secure programming basics. Downvotes don't make it better.
Looks like you need to google "html tables". Have &lt;table&gt; [data] &lt;/table&gt;. Inside the table each row needs a &lt;tr&gt;&lt;/tr&gt; and each value needs &lt;td&gt;&lt;/td&gt;. ex. &lt;table&gt; &lt;tr&gt; &lt;td&gt;Jill&lt;/td&gt; &lt;td&gt;Smith&lt;/td&gt; &lt;td&gt;50&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Eve&lt;/td&gt; &lt;td&gt;Jackson&lt;/td&gt; &lt;td&gt;94&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;
I too would like to support this. I started python due to my hate for Matlab and have gone quite deep into scientific python. In the process I've learned a lot about programming in general and it's a superb idea to do what you already know in another language. 
Start with a udacity or coursera course. They got me started and gave me a good overview of software design. 
Follow a python tutorial. Any of them will do. You'll come across analogues to those within minutes. Once you get up to the section in the tutorial about using other people's code (`import blah`), you should be in a strong place.
Conda install just works on Windows. I rarely have had a problem with it. Pip install almost never works for packages with C bindings, I always have to use Windows binaries instead. 
Python has some of the best official documentation I've ever seen. Might as well use that.
Heh, I'm fine with HTML. In the "colleagues version" the one thing I did add was the HTML. I even tried a for loop in the index function that returned each row in the cursor appended to table elements but I think the syntax I used was for Python 3+ and I'm obviously using 2.6. Some big changes happened at 3 that don't like how I was trying to append &lt;tr&gt;{}&lt;/tr&gt; to my output.
Why don't just use Git Bash?
I've being using DOS since 3.0. I'm just an old dog that learned a few *nix tricks, that's why :-D (besides, I hate git, I only use it when I have to thanks to TortoiseHG that includes hg-git)
Any opinions about Enthought Canopy?
Two suggestions: 1: Allow for some level of discovery. The network devices should be the canonical source of data as much as possible. It really sucks when the data in your system and what's actually on machines is inconsistent. 2. If following my advice in the previous post, use tornado. Having an event loop (async) is a /very/ large advantage when your application is IO-bound.
Your question is very high level but you have some more fundamental issues that are tripping you up. You should try to understand exactly what your colleague's code is doing before dismissing it as complex. Let's start with a simple question: What web library are you using? I don't see anything being imported.
Just a matter of taste, really. I got exposed to early versions of both git and hg and, specially on Windows, hg was miles ahead in both simplicity and deployment. Even so, I might end up ditching mercurial and jumping to Fossil one of these days :-D
I haven't used conda but my last experience trying to do stuff on Windows (which was granted back in 2011 but still) was like pulling teeth. I remember spending something like 1.5 hours trying to get the scipy stack installed on Windows...I eventually just gave up. Doing stuff on my work-provided Mac (that *nix underpinning) has been *way* nicer. I think conda comes with a bunch of important packages and makes further package management a lot easier...if it avoids a lot of the issues with doing stuff on Windows, totally worth it.
If you don't want to get totally dependent on an IDE, I like Sublime. Granted I really don't like Notepad++ (but that seems to be the most common thing to find preinstalled by IT) and it hits my productivity when I have to work on machines where I can't just install Sublime and have to use Notepad++...but I can only imagine trying to go from Pycharm to Notepadd++. It's at least less of a shift coming from Sublime. My personal workflow (on OS X) is edit with Sublime, run programs in Terminal (I'm fairly certain I'm neglecting some capabilities of Sublime in this regard). I think you should be able to do something comparable in Windows. I'm sure there's more efficient workflows but it's pretty decent in terms of not being totally dependent on my normal setup when running on another machine. Of course if you *know* you won't have to worry about working on machines you don't have the ability to set up your favored IDE on, this is all moot.
Has anyone noticed that Pandas loads much smaller datasets on a windows than a similarly capable linux box?
I don't think Python is the only thing that tends to be a lot more of a headache on Windows than elsewhere...people don't put up with Cygwin just for shits and giggles. At work they give me the option of taking a Macbook Pro and certainly from a programming angle, running on a *nix system (Sublime for my text editor, Terminal for running things) is way nicer than dealing with shit like package management on Windows. I still remember just giving up after 1.5 hours of trying to get the scipy stack installed on Windows 7 a few years ago.
The part where I said I haven't done much dev work on Windows? Or the part where I'm actually employed as a python dev and therefore wouldn't touch Windows+Python with a 10ft pole?
If you've got 2 and 3 installed side by side, you can use the python launcher for Windows to choose to invoke 2 or 3 just like NIXes and BSDs. py.exe -2 my27script.py py.exe -3 my35script.py Handy for running one-offs without fussing with virtual environments.
as far as i know this might be the wrong section to post for help
I just realized how awful cookiecutter is from a DRY perspective, thanks for pointing this out. We use it at work currently, and I think I'm going to try and figure out exactly what it gives us that a library wouldn't. I even had to fix a bug in like 8 projects because the bug existed in the cookiecutter template we used, and then had to port the fix back up to our template as well.
Seems like the crux though is: &gt;"/sbin/sudo" "/opt/gnu/ifconfig" "usr/bin/ifconfig" **(or where ever they are for you)** If path is hacked, how can you know? You could define a couple of variables up at the top and the "user" could set their own path, but that's a PITA install compared to just using path. in both "user execution" and "passed environment", a hacker has compromised an account with sudo access. If they can edit .profile on your account, you're owned anyway. ifconfig, apt-get and everything else is compromised, not specifically OPs script, which justs asks for sudo like anything else. The hacker probably has the password for the account in sudoer anyways, and wouldn't need to bother with aliasing ifconfig or changing the path. And in "Multiuser", If you don't type ./thisprogram, the path is searched but not the current directory (just confirmed this for myself, even with subprocess.Popen). So root executing `ifconfig` while in /tmp would not execute the malicious script unless root meant to with `./ifconfig`. So I don't see a security hole with assuming $PATH is okay, assuming a hacker didn't get the password of an account with sudo access.
and cron users will just have to make sure the cron user has the path set up. install to /usr/bin and it shouldn't be an issue. not having /sbin and /usr/bin in the cron user path is just going to be an issue for cron in general.
You need to start learning python language which looks quite similar with VBA but actually are very very different. Then you need a project to keep your excitement. &gt; I currently know HTML, CSS, JavaScript, VBA, and basic-intermediate MySQL. Also, I am a power user of Excel, Outlook, Internet Explorer and Windows OS. here the project's idea: using python, try to query some data from mysql (or perhaps start with sqlite?), display it to the web and have a button to save to an excel file or mail out report/excel attachment. Some libraries you'll need : * sqlite or mysql libraires. Note: sqlite are built in python standard library. * Flask/Bottle/Pyramid/Django/etc web framework. * xlrd and xwlt for reading/writing excel files. These one are the one i'm used to. There're other excel libraries with their pros/cons. * email (this one also built in). All of this can be done with vba, but some thing like poin 2 is hard to do in vba. 
/r/cscareerquestions [Yes they exist.](https://www.google.com/search?q=entry+level+python+jobs&amp;oq=entry+level+python+jobs&amp;aqs=chrome..69i57j0l5.3749j0j7&amp;sourceid=chrome&amp;es_sm=122&amp;ie=UTF-8)
Good question as I'm in kind of the same situation. I guess looking into Django is not a bad idea. Since you already know a bit of html/css/Javascript it should not be that hard to pick up and you can use the sites you build as portfolio. Another option to answer this question is to phone companies that employs python programmers and try to find out what they look for in their employees. 
I'm fairly sure that this is the correct answer
I spent a lot of time using Canopy and though it isn't bad, it's not great and there are better IDEs out there. It comes with a nice module manager but that's about it. I recommend PyCharm or Spyder. 
Thanks for #5 above! We've had the hardest time scheduling a python script where it was important it ran as a particular service account, and it used COM interop via pywin32. It was so convenient to get the script done and tested, but hell to get it scheduled right... The COM server started up fine but it "hung" and we got no feedback or errors, just a Win32 COM timeout error a while later. Scheduling compiled .NET apps worked fine... Scheduling an EXE "launcher" sounds like an interesting pretty hack free solution, and especially a solution! I really do want to get out of this world of compiled applications since.
I wish it was so simple. Just one example of the sad situation: about a thousand computers without a domain controller. 1500 phones with a 12 years old PBX. And the worst part: the budget of a lemonade stand.
Keeping this link for future reference. Thanks.
https://github.com/IonicaBizau/reset-your-facebook-account &lt;- anyway to integrate these script features into your python script ?, the way this is looking your script only deletes post ive made, not comments or messages, etc.. these jquery injectors work well using the console but its pretty tiresome! thanks.
I'm genuinely confused by people that suggest not developing on Windows at all, or to use Cygwin. Here's my two cents: * Installing a compiler isn't that difficult. Once you have one set up, all of your pip problems will go away. * The main gotchas I've seen on Windows are a lack of `fnctl`, and the differing terminal formatting APIs, but libraries like asciimatic can help with this. * PyInstaller and such can be a great way to distribute your Python app later on, if you don't expect a user to have a compiler, but if you don't have a large number of compiled requirements you can always write a setup script that downloads binary installers and runs them for users on Windows.
thanks
I don't recommend Conda. Conda has the problem of compiling packages with MingW which isn't binary compatible to many less used C extensions. If you discover a package which isn't compiled for the Python compiled with the MS tools there is a web page of an University which has most of them available. Use WinPython.
&gt; numpy, scipy, etc. don't sucessfully install through pip unless you have visual studio installed Which isn't true. 
http://www.reddit.com/r/Python/comments/3912dn/installing_numpy_is_not_working/crzwo8o
That's good to know. 100 emails exceeds my use case (I hope), so it doesn't sound like I'll have problems. I do have messages sent on separate threads without a problem. I'll try and force a collision but I think gmail will be able to handle multiple connections at once. Thanks. And thanks for the cool library, it's certainly made my life a lot easier. Yagmail ftw.
No, whenever a package relies on a library, conda will take care of installing that dependency. Wheels does not handle those.
Nobody has mentioned the python tools for Visual Studio. https://pytools.codeplex.com/ And a good overview on the features http://www.hanselman.com/blog/OneOfMicrosoftsBestKeptSecretsPythonToolsForVisualStudioPTVS.aspx 
Really, how did you manage it. I've always struggled with numpy on Windows. 
You certainly don't want to *focus* on a single language for the entirety of your career, but you surely have to *start* from a single language.
In theory, you can use any of the Email APIs In practice, they won't work so well. Due to spam problems, providers like Gmail have been clamping down. I found that most instructions on how to access Gmail with Python don't work, as Google refuses access. You maybe better off using other tools. Have a look at Zapier
So many times I've tried this combination and always end up running Ubuntu in virtualbox. My main tip for that is to also run the dev tools in the vm, don't try and run things over a share from the vm for your sanity... just install pycharm, git etc in it and work from there.
I don't trust it's stability. I've had it blue-screen my Win 7 laptop at home when mounting a share on a Digital Ocean droplet.
Well, that's true. If you wanna work on windoze you'd better be knowing how Py works on it. Some registry hacking needed, and you need to know the directory structure of python. With that said I never had problem installing any package on win that claims it can be compiled with Mingw.
We use the ZODB for most projects. Or Postgres for sql-only projects, ie Django. Using the ZODB boils down to: db_root = get_root() # get the 'connection' to the DB and return it's root. from persistent import Persistent import transaction class Friend(Persistent): # Just a normal Python class, Persistent makes the ZODB aware of changes. def __init__(self, name): self.name = name you = Friend('pvkooten') # make an instance db_root.friend = you # store it in the db jos = Friend('Jos Henken') # make an instance db_root.another_friend = jos # store it in the db transaction.commit() # Commit/save all changes Getting the data back again is just getting the right attribute: db_root = get_root() print db_root.friend.name &gt;&gt;&gt; pvkooten ZODB is used in every Plone installation in the world. Plone serves millions of users daily, see http://plone.com/about/they-use-plone for more on that. Chris McDonough (from the Pyramid framework, http://www.pylonsproject.org/) uses the ZODB in the application server Substance D (http://www.substanced.net/) For more info on how to use the ZODB check http://zodborg.readthedocs.org/ and http://blog.startifact.com/posts/older/a-misconception-about-the-zodb.html. The transaction module also works with SQLAlchemy (zope.sqlachemy), so you can mutate the ZODB and you relational database of choice in one transaction (the changes are commited to both the ZODB and the relational data, or none). There's also no *need* for ORMs, or for DB migrations scripts. If you need a data migration, just write a python file or add some properties to your classes :) 
Can second pip working perfectly out of the box in python 3.4. Also the #!/usr/bin/python3 at a start of a script is really important in windows as often if you have both 2.x and 3.x installed, and 3.x IS your default installation, running python scripts from command line (cmd.exe) will still cause them to be executed in a python 2 environment.
Getting code reviews is a great tip. Sadly there's like a catch 22 where people get nervous about their code so they don't want people to review it. So they can't improve as easily.
I'm nervous, but want to keep learning - so [I'm looking for a code review](http://www.reddit.com/r/Python/comments/3a5pfz/generate_realistic_raw_datasets_with_optional_dq/) WARNING - contains many instances of os.sep and it is Alpha so changing frequently. If anyone spots any other general coding issues I'd love to hear about them
Interesting... That should actually be a pretty easy feature to build in.
Web
I've used it a little and it seems amazing (personal projects). I really believe in storing "objects" and in the transaction method. It would just be nice if I can convince others that using ZODB is a good choice (over some language independent database systems).
I've added emphasis to 'no need'. Also, please read 'DB migrations scripts' as in the stuff Django generates.
Don't unless you have to.
This might be overkill for your purposes, but I'd track errors and successes in influx then use Grafana to create a simple dashboard.
I know I shouldn't probably be using this without being a programmer, but I'm going to ask anyway: Can I run this under Windows? I'm installing Python atm but I'm kinda lost with "Selenium" and "BeautifulSoup", don't really know what they are or how to install them :c I'd really love to use your script, any help would be really appreciated!
Use a proper parser, there are too many edge cases to parse URLs robustly with regexes. In [8]: url = 'http://www.youtube.com/results?search_query=legend+of+hercules&amp;page=&amp;utm_source=opensearch' In [9]: from urlparse import urlparse, parse_qs In [10]: parse_qs(urlparse(url).query) Out[10]: {'search_query': ['legend of hercules'], 'utm_source': ['opensearch']} In [11]: parse_qs(urlparse(url).query)['search_query'] Out[11]: ['legend of hercules']
Or use https://github.com/takluyver/pynsist
Yeah, Anaconda/conda makes it absolutely painless to install pretty much all the packages you would need for any regular scientific computing work. Pip install and conda install also work pretty painlessly. If it hadn't been for Anaconda, I don't think I would have taken the effort to get into Python for scientific computing. I predominantly work on Windows machines and I need to be able to share my code with other colleagues and need for a way to have a simple and reliable way to have them install the Scipy stack on their machines.
&gt;I don't know anything about whatever you wrote Don't let that stop you. Go read about those things. Jump on mailing lists/Stack overflow and demand answers. Each one is a self-contained concept and will have 2-3 dependencies. When you encounter something you don't understand then switch gears and read about that. You can follow that train all the way back to core Computer Science/Engineering course work. Knowing how to write some trivial python might be enough to get you a job. Understanding the context of everything will get you a job that is worth having.
Windows 7 here, got the "api-msi-win-crt-runtime-l1-1-0.dll is missing" error. But the conemu worked fine. I have been using Console2.
Haven't seen this before and looks interesting, but I do like cx_freeze's use of a python setup.py as its config, giving you a little more power over what it does. 
Did you read my next line? &gt;you need to install precompiled binaries Which is exactly what you linked to, the .whl files are just precompiled binaries which is why they have the disclaimer that they won't work with a bunch of things. `pip install xyz` won't work so you have to manually link pip to things you already downloaded.
Your situation is exactly the same as mine right now. Sounds like we have the exact same level of experience in Python, html, css and javascript. Reading things like [this job advert](http://www.indeed.co.uk/viewjob?jk=2114b6132436e101&amp;q=Junior+Level+Python&amp;l=London&amp;tk=19odmo9va9napf8m) is exciting though and gives you (and me) a good idea imho.
If you want to stick with the official Pyhton distribution, http://www.lfd.uci.edu/~gohlke/pythonlibs/ has binary packages for for most packages that don't install cleanly with pip.
And by extension, a list: urls = ['https://www.youtube.com/results?search_query=emma+stone+crushes+fallon&amp;page=&amp;utm_source=opensearch', 'http://www.youtube.com/results?search_query=legend+of+hercules&amp;page=&amp;utm_source=opensearch'] from urlparse import urlparse, parse_qs queries = [parse_qs(urlparse(u).query)['search_query'] for u in urls]
Oh for sure. I was more or less just making a point that I know nothing (john snow) :D There is just so much information, so many terms and what not, that I dont even know where to start. I feel like if I look into everything I'll end up losing my main focus :( I would definitely prefer to become a programmer who actually understands what is going on rather than someone who can just spit out code 
Yeah, I'm not quite sure why the implementation of pypy was so significant, but yeah I think I read ssdeep was written in c or at least I had to install some c dependencies earlier on for a package or two. Either way it was a significant speed difference, so I am currently just using pypy and no I'm creating a front end to handle the script instead of the pyqt gui I originally created. 
&gt; there are too many edge cases to parse URLs robustly with regexes. Technically, that's not true. But from a practical standpoint: you don't want to have to maintain that regex once you have it correct. It will be impossible to understand at a glance. Edit: since I was downvoted, let's take a look at this: https://mathiasbynens.be/demo/url-regex The "winning" solution is god-awful, but it can do the job. I'm 99% sure there are no capture groups in this expression, so its utility is limited to validation only: &gt; _\^(?:(?:https?|ftp)://)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\x{00a1}-\x{ffff}0-9]+-?)*[a-z\x{00a1}-\x{ffff}0-9]+)(?:\.(?:[a-z\x{00a1}-\x{ffff}0-9]+-?)*[a-z\x{00a1}-\x{ffff}0-9]+)*(?:\.(?:[a-z\x{00a1}-\x{ffff}]{2,})))(?::\d{2,5})?(?:/[\^\s]*)?$_iuS A "robust" solution an be achieved, but it ultimately comes down to how much time you have on your hands. You really don't want to do this.
If you are using 3.4 already, don't use os.path.join either. Just use [pathlib](https://docs.python.org/3/library/pathlib.html).
&gt; I want people that live it and would write code in a mildew crusted basement for peanuts given no other option. Ouch. Sounds like grad school.
With biology knowledge and a want to get into python you should look into bioinformatics. Basically all I use is python (a little bit of R), personally I had no coding experience before I started but because of the want for bioinformaticians my supervisor accepted me and was willing to teach me the coding skills.
clink is awesome and there are some places that open up cmd.exe (like totalcommander).
just some helpful hints, when using the comment deletion script from ionicBizau i typically have been letting it run for 5 minutes refreshing the page and running it again, for whatever reason facebook starts to throw errors about 5 minutes into the script running. maybe that is something you can integrate on your side ?
It's possible this might help with Unicode rendering in the Windows console: https://github.com/Drekin/win-unicode-console
I had a very similar career path. I was taking computer science classes in high school and by my freshman year in university I had programmed (small-medium projects) in Java, C++, Fortran, Pascal (lol), etc. but for some stupid reason I didn't go into comp sci, I went into Civil Engineering...and fucking hated it. I basically ended up getting a bullshit degree with a B.S. to get my ass out of there with a degree and no more loans. I just started taking any jobs that could put experience onto my resume that I could spin for IT. I was an admin assistant in an engineering firm, but on my resume I only listed the IT related stuff I did for it (networking, SW, etc.). Eventually, I got on as a tech writer and web-developer for training material on an IT project, and now I'm a developer and head of QA on a great project. TLDR; Get a non-related degree and then &gt; 1. Pad your resume &gt; 2.Get your foot in the door on an IT project. &gt; 3. Prove you can do technical things and take on more responsibility &gt; 4. Pad your resume &gt; 5. Get the job If you're meant to do something and have the nous and determination, you can break into this field. People care more about what you can do, , than your degree.
Actually, I just realised... It's not more efficient ~ as Python's Garbage-collector will do the work... But still - looks cleaner :3 
PITA for the *user*. It's easy to write two variables to have the user change.
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
Miniconda is a light weight distribution of Anaconda. http://conda.pydata.org/miniconda.html 
That looks pretty good too, a bit simpler which is nice. Does VS work well with Kivy development? 
Or even better, [PathLib](https://docs.python.org/3/library/pathlib.html)
Apply for jobs. Write out a resume that is "programming" oriented. See how far that gets you. If you find that you don't have anything to include, or don't get replies, then study job postings to see what kind of skills you can acquire. It's not up to you to decide "Are you capable of landing an entry level position", it's up to you to apply for jobs and see if those companies deem you worthy. I do believe that github and personal projects are enough to land you jobs, as long as you discuss them with passion. The fact that you are self-taught and super motivated is going to help you a lot. For what it's worth, I am a self-taught, newly employed software developer, and your story is similar to mine. Now that I've been working, I've seen lots of co-op students with zero github and very minimal coding experience, and they are in computer science -- you can easily differentiate yourself by doing lots of personal projects. Also, I agree with the (idea behind the) very downvoted comment below: you don't want a "python job", you want a programming job. That would be like a carpenter saying he wants a circular saw job. I know you spoke about HTML, CSS, JS, etc... so I know you're not trying to pigeonhole yourself, but do keep in mind that you can just as easily start writing Node.js, or PHP, or whatever, as you can Python, if you take even a small amount of time to experience those languages.
I probably have to fix that then, because it still isn't running on win :(
Good in what way? Faster? Cryptographically secure? Easier to use? Your question is way too vague. The random module has several options available, which you can find by reading its documentation. Scraping a webpage is not a great way to get random numbers.
&gt; You really don't want to do this. 
True true. I guess I am sort of wondering; at what point can I say I am "skillful" enough to really put a language on a resume. Sure I can put together a website (front end at least) but will it run? Maybe... I feel like knowing the basics really isn't enough to put on a resume but then again, I know there are a lot of people with jobs who are pretty terrible at what they do (maybe not terrible, but definitely not as good as I figured they could be). My software developer buddy asked me a few common interview problems and he told me that I know more than enough to land a job but it definitely doesn't feel that way.
http://superuser.com/questions/143119/how-to-add-python-to-the-windows-path
Every time I have to install numpy on a Windows machine using a simple `pip install numpy` I get an error involving MS Visual C++. I have tried going through Stack Overflow answers that walk through solutions, but they usually don't just say "Download the .whl from the link on [scipy.org](http://scipy.org)" which is always what I end up doing. The conda distribution helps new people avoid finding solutions on Stack Overflow/Reddit/etc. and just have it work right out of the game.
Makes sense, I think either will work for us, we just need a good random number generator and I think pythons should work. Being able to predict the number, we have to decide on that still.
java math.random() has that negative stigma against it, since its not very good for a good random number. I would say a balance between speed and cryptographically secure because that will give a good random number.
What I'm trying to say is that focusing on a single language will make you a bad software engineer. Learn software concepts in python, don't learn python software concepts.
Well I have found it very relaxed and supporting, whilst yes it is mainly university labs and so it's best to do a PhD but there are also companies around but they may want previous experience so I would suggest doing a masters or PhD to get the experience
WinPython looks interesting. Hrm... ruh-roh. Their homepage is on github, but the actual downloads are on sourceforge. (whyyy? if their homepage is already on github, why not just have the downloads there too?) So, do I dance with the denizens of the damned in the hope that I am not corrupted? decisions decisions. :)
PTVS is the absolute sweetest shit. I rarely even load IDLE up nowadays.
Sure feels good to be on the winning side.
Yeah, sourceforge has been behaving very poorly lately. I'm sure winpython will get moved at some point. At least, I hope so. 
It's odd that they put their main page on github already, but not the download page. The question is if I want to risk an install from sourceforge. Decisions decisions. Ah, sure, why not. What's the worst that could happen? How bad could it be? (gleefully tempting fate there. Muahahahaha) \*click\* :) But yeah, I guess will give it a try. Thanks for pointing out winpython, btw, seems interesting.
I have the same issue. I see the programmers and bioinformatics guys banking all day while I press on a pipette and do spreadsheets. It's not only the money because I make websites in my spare time (for little to free) and know a lot of front end development skills, but damn it would be nice. Science only goes so far when you're not the Ph.D. or C-level biotech guy. I could do sales but I'm not a sales guy at heart. I have plenty of friends who could't and still can't find steady work in the field. I'm lucky to have been hired on at a successful start up, but there is no where to go here. It's lab work everyday, all day, plain and simple and there is no where to move around and grow.
I know, it's tough. But if you don't stand to lose much by interviewing and failing. I personally made a few websites with a bit of back-end work, using Django, with a buddy. For pay. It taught me a lot. For a junior developer position, as you say, you might find that you can learn a lot on the job. The pressure will be on, but it's hard to learn without direction.
&gt; That would require web scraping [Never fear!](https://www.random.org/clients/http/) There's a HTTP API.
&gt; What do you think about a software developer who would stand up and walk away right after he hears this from you? The keyword is "given no other option". It implies this is a hypothetical. My inner socratic dialogue is asking "Would this person be doing this if it weren't so lucrative" In reality, depends on whether they are qualified or not. If they are not. Then good riddance. If they are a technical and cultural fit. I'd offer them whatever I could but can't get blood from a stone 
Which is why I suggested just checking for UID 0 and informing the user this program needs root. Let's assume some intelligence on the part of the user. (dangerous, I know, but have faith)
&gt; I'd offer them whatever I could This is another red flag. Because there's a market with a range of salaries and if you lean toward the lower end - you're out as employer.
This information is incredibly useful, to more than just OP. Thanks! 
Thanks Lucas. Hopefully that will sort out the Kivy to Exe issue too.
You asked to not give you the answer, so: think in math, not in code. The answer is a single line. 
Good enough :D Thanks
 Another suggestion: draw a number line, choose your three numbers and highlight the parts you need. 
Thx
This isn't restful. You need use the hateoas constraint to achieve the glory of rest
Never mind: it was as simple as doing (hi-low) * fraction + low. Thanks for any of the help anyway :D
/r/learnpython
http://martinfowler.com/bliki/MonolithFirst.html 
search_query=(?:(\w+)\+?))+
Ramses dev here. HATEOAS seems pretty cool and I think eventually it might take off, but it requires clients/consumers of APIs to know how to dynamically browse and I haven't been able to find an existing toolchain to help with that. Once that is a more popular reality, we would totally add HATEOAS to the backlog. I would also be really interested to know how implementers deal with stuff like versioning and redirects. Props to projects like Eve that score A+ on the Richardson Maturity Model out of the box. I'd say the killer features of Ramses are RAML-defined spec &amp; Elasticsearch-powered views, not theoretical concerns. 
When I was just starting out, I got the most benefit out of doing relatively small programming problems. You can post your solutions online, which others can evaluate to ensure that you have good programming style and can solve non-trivial problems. Also, if you're still learning the language and haven't done so yet. I recommend picking a course or book and doing it from start-to-finish. It's tempting to try to learn by browsing examples and doing, but books/courses do a really good job of explaining things and ensure that you don't miss/misunderstand any core concepts. Plus, they can be fun =P. Check out the resources at http://www.reddit.com/r/learnpython/wiki/index (also, that's a great sub.)
Thanks for the reply! How much traffic were you handling when you were building/using the microservices? How did you make your API gateway, and how did you do discovery?
&gt; For instance, the pythonic way insists on not using a loop as much as possible (since python is interpreted and loops will slow it down). This isn't true. Often the Pythonic way is to use a loop even when another construct is available, because the loop is often clearer to understand. Python definitely isn't designed for optimal *processor* performance, it's designed for optimal *programmer* performance. &gt; Hence you have shortcuts like slicing `list[x:y]` that allow you to crop a part of your list based on indices. That's not there to avoid a loop, that's there because it's a readable, concise way of representing a very common concept. &gt; Another popular example is the python list comprehension Again, list comprehensions aren't designed to avoid loops for performance reasons, it's because they are a readable, concise way of representing a very common concept. 
I like:: # reading a file, x bytes at a time f = open(filename) for bts in iter(lambda: f.read(x), b''): # do stuff This works because if you pass a callable to iter(), next() cause to call it untill it returns the second iter() param. # poorman pluralize fruits = ['apple', 'pear', 'banana'] l = len(fruits) msg = 'You have %s fruit' + ('s' * bool(l)) print(msg % l) It works because bool() will turn any non zero number to True, and 0 to False, but False is 0 in multiplication, et True is 1. Since multiplication on strings multiply the occurence of the string, 0 * 'string' removes it, and 1 * 'string' does nothing. # append an element to a list which is a value in a dict # without checking if the key exists dico.setdefault('key', []).append(elem) It works because setdefault will try to get the value for this key, but if it can't, it creates it with the second parameter and returns it instead.
I'd like to know the answer to this question too :( I recently just started doing the lessons in this book. 
Alright, that's been said, but **why**?
Interesting, How does it compare to lets say cornice or just plain colander? it seems to also handle the persistence which makes it both interesting but also very opinionated :-) Not that it is a bad thing.
I do cross-platform Python dev on Windows and have for quite some time now, and none of these things have been problematic for me at all. Of course, that's just my experience, but.. It's Python. It's not that hard.
I use Windows 7 as a desktop with PyCharm as an IDE and Bitvise to handle consoles and certificate config to my remote *nix servers on AWS. With this I have my convenient &amp; corporate friendly Windows environment, automated code upload to the dev box, automated unit test execution, and a bunch of handy little things I'm used to. Not saying you couldn't do it on a linux desktop, or 8.1, but I really feel that the administrivia gets out the way and I can just lay down the code.
If you want classes in modules, then do it.
Is that something people generally do? Then why not just use a module?
This is pretty good, but will start to choke on bigger inputs. Are you looking to optimize your library, or was it just for fun?
&gt; I interview for entry level positions, but the last thing I want is a person that expects to be taught. I honestly think you have no idea what you're doing.
This is true of almost any science. A scientist who can code quickly becomes indispensable to any small lab or company. You could replace biology with geology, biotech with geotech, and it would be just as true.
The way you have to defend everything you've said speaks loads.
Hi, I'm the author of the library. I'm definitely interested in optimizing it. When you say bigger inputs do you mean that it'll be slow if the collection of files is really large or if the user_input is really large? Do you have tips for optimizing it? 
+1 for installing the compilers
Noob question: why does he do regex = re.compile('%s' % pattern) instead of regex = re.compile(pattern) 
 with open(path, "rb") as f: data = f.read() This is underused? Really?
What? See Apache httpd and any web browser.
&gt; A "robust" solution an be achieved Does "robust" have a specialized meaning in software engineering? Because by the common meaning of the word, that does not look robust at all to me. That regex looks like it will break the first time anyone touches it, which is basically the opposite of robust. It's like saying a house can be built out of popsicle sticks. That may be true, but the result will not be "robust" by any reasonable definition.
a little bit of both. you could memoize the collection and prune it so you don't have to search every item after you've eliminated part of the set.
&gt; My software developer buddy asked me a few common interview problems and he told me that I know more than enough to land a job but it definitely doesn't feel that way. I remember feeling that way and I can tell you it's nonsense. Quit holding yourself back. Everyone "fakes it til they make it". You can probably go out and find a job right now. The industry is in need of people. Job "requirements" are rarely set in stone. Just get out there and try to get hired -- it probably won't be that hard. I did it with no degree of any kind. I started programming in summer of 2002, got my first (but REALLY shitty) programming job in early 2003, and over time moved to better and better jobs and made it into a legitimate career that I enjoy doing.
it's less obvious in python, but regular expressions aren't usually considered traditional strings. In python a regular expression is often denoted with `r'&lt;contents&gt;'`, and is canonically noted as a *raw string literal*, which allow non-escaped back slashes. I believe both cases would work in this case, but since he's building a regular expression off of user input it makes sense to explicitly rebuild the expression as a string before compiling. *edit: -7.. really? lol you guys are awesome.*
Yes. That was my biggest concern. But memoizing has to be extra clever to account for users pressing backspace or moving through the input and deleting a char in the middle. So for the first rev I'm not doing memoizing but once I figure out a way to do it reliably, that'll be a nice optimization. :)
&gt; The numbers truly are random, except it is possible to predict the numbers. Wait.... How can you predict random numbers?
I'm definitely a fan. It's inspired by Django's admin, but nicely de-coupled and DIY like Flask.
Why not put all your classes that work together in a module?
Yeah, I would create a task (POST /api/tasks -&gt; HTTP 201) and then your task can do its thing in the background. It can even create other objects for you (POST /api/&lt;other_objects&gt;).
Alternatively, if PyCharm is too heavyweight but Notepad++ is not quite enough, I find myself using PyScripter often. It has code completion, integrated interpreter, all that good stuff, but has a memory footprint and load time similar to that of Notepad++. PyCharm is good and all, but sometimes I just want something that loads fast and where I don't have to deal with projects and build settings and releases and such, and PyScripter fills that role. I believe it's Windows-only, though.
Could some kind person please explain the purpose of the underscore(s) in return [x for _, _, x in sorted(suggestions)] Is it just a dummy variable?
I read the book last year and would say it's a little outdated, but you can certainly get a lot of knowledge out of it. 
Flock has a timeout, so it not as simple as hanging forever: http://linux.die.net/man/1/flock
Why are you importing it with an underscore prefix?
I'm with you here. HATEOAS sounds promising, but I've yet to see an actual app, in production using it.
Likewise if you want to do a for loop and you want to make it explicit that you don't ever care about the value of the iterator: for _ in range(10): print("stuff") You want to do that ten times but you don't otherwise care what value the iterator is at. 
Yeah, I think of list comprehensions as being for situations such as, I want to manipulate a list and return another list, but I can collapse this down to a line of code, which can help maintain readability (in the sense of making it easier for someone else reading the code to not get sidetracked about what the main point of the code is). But if you're nesting several list comprehensions inside of each other...you probably ought to just write out the loop. 
I looked at ZODB for a personal project I am working on. I liked the look of it and the way it functioned. I decided to use [OrientDB](http://orientdb.com/) though via the [pyorient](https://github.com/mogui/pyorient) driver, and it can function in a similar fashion. I actually setup a dictionary/key based access system much like ZODB, so I could access a record via dictionary[cluster][record_id], and it would either load it from the database or from a cache. OrientDB being a graph database, each vertex record acts similar to a ZODB object instance, and the edges that link vertex records act just like references between object instances. The ZODB article on wikipedia basically says this too... &gt; A ZODB storage is basically a directed graph of (Python) objects pointing at each other, with a Python dictionary at the root.
They aren't. The Python module is named `sqlite` which imports the C module named `_sqlite` which contains the parts that actually talk to sqlite. This is a common naming convention used in the standard library, it also applies to `socket`/`_socket` and `ssl`/`_ssl`, etc. 
I do have that installed though [ec2-user@ip--- ~]$ sudo yum install sqlite-devel Loaded plugins: priorities, update-motd, upgrade-helper amzn-main/latest | 2.1 kB 00:00 amzn-updates/latest | 2.3 kB 00:00 Package sqlite-devel-3.7.17-4.11.amzn1.x86_64 already installed and latest version Nothing to do 
Did you re-run the configure/make process after installing that? The Python build process prints a list of the modules that it failed to compile due to missing prerequisites. Post the complete build output. 
Your response got down votes because without any other context it came across as insanely elitist.
That's what I get for not reading the stack trace sufficiently. This seems reminiscent of the naming convention for "private" class methods.
Yes, I did. Literally minutes before I posted this :/
&gt; Post the complete build output. 
What in particular? 
I paid for PyCharm, and it's worth it, but you can always try the community edition first.
Random isn't cryptographically secure at all. However, it does provide SystemRandom which uses `urandom` and produces secure numbers with the same interface.
Should that really matter though? The idea would be to maintain an n-length dictionary mapping the last n inputs with corresponding pruned collections.
Pycharm is good, but I regret not just getting full blown InteliJ, when I realized that, I tried Eclipse and fekking hated it. Vim was a little too 'customizable' for me so I just went with SublimeText. ST has a paid version for ~$70, and has some ok plugins. Honestly using a text editor for python should be fine, I'm not doing things like tracking artifacts or garbage collection, or tracking builds with something like Maven or Ant, so the added overhead of a fully fledged IDE just isn't worth it to me. ST helped me keep it simple, it stays out of the way while I get to code. Now, I've only used this on projects that are probably less than 10k lines of code, and don't really have an opinion on the best way to manage larger projects, but even in that case I could see ST being good enough if the code isn't simply atrocious and poorly arranged in its project structure
https://i.imgur.com/B5BSVqH.png
Paid for PyCharm after many years of using editors. I'd got my Sublime to be an almost-IDE and realized I should just make the jump. Could not be much happier. I still wish for a simpler UI at times but that's the trade off. 
I paid for Sublime Text out of my own pocket for personal use. Haven't regretted it. Only thing I don't like is the fact that it's proprietary. 
Also worth considering is correlating the max size of the dictionary with the length of the collection.
I use emacs, so if you put a value on the time I spend trying to get it just right.... I've paid a lot.
Wow, that was easy. Thank you so much. this is working awesome. Now I'll be able to get down to the SQL stuff that I'm way more comfortable with. I really appreciate the help!
too soon :(
My favorite is using the `any` and `all` functions with a generator expression. Since they both short-circuit and both can take an iterable as argument (not just a sequence), you get the beautiful result that they stop iterating and return as soon as a result is found. For example: if any(field is None for field in row): discard(row) This will stop iteration and return `True` as soon as a `None` field is found. Note the difference between this and using a list comprehension: if any([field is None for field in row]): ... In the latter case every field is tested whether it needs to be or not. The use of a generator expression could save a lot of time, especially if a complex function is being evaluated on each iteration. 
Have you tried it recently? They worked a lot on improving performance.
Is there any example of "custom stuff"? It would be also great if one could use swap out components for read/write operations.
Both modules and classes provide namespaces (=independent containers of names that help you organise them and avoid collisions with other names. e.g. when you import a module and use module.name). So at first they might seem that they offer the same thing but there are at least 3 big differences between them: - Multiple instances : You can have only one module object (when you import a module you create a module object). But with classes you can have many instances of a class and each will be different object (aka have different state) - Customization via inheritance: classes can take advantage of classes(namespace) inheritance which support a much more customization code (e.g. class SubClass(SuperClass) ) - Operator overloading : hooks that classes can use to intercept and implement any built-in type operation which can make your user-defined classes behave like built-ins (e.g. \_\_and__ method responds to "+" operator -if your object is on its left) So, although now that you put many classes in a module it seems worst that just having just modules, when the codebase gets larger and more critical (or even more people start to contribute) using classes (the OOP tooling) will give you better structure and more tools to express your mental model into code. Plus everyone uses OOP so it will be easier to use other people's code.
There are a few around: * [Paypal](https://developer.paypal.com/docs/api/#hateoas-links) * [Github](https://developer.github.com/v3/#hypermedia) * [Amazon Appstream API](http://docs.aws.amazon.com/appstream/latest/developerguide/appstream-api-rest.html)
&gt; I'd say the killer features of Ramses are RAML-defined spec &amp; Elasticsearch-powered views, not theoretical concerns. There's nothing wrong with this, but if it doesn't follow HATEOAS, it isn't REST. Call it an HTTP/JSON API or something if it doesn't follow HATEOAS.
No. I've stayed away from PyCharm, community edition or no, on principle. Why? Since I started with computers in the 80s, I've fallen into the **lock-in trap** quite a few times, and I know how difficult it can be to get out of. I've become wary of anything that resembles lock-in, be it format lock-in or familiarity/know-how lock-in. These days I'd rather take the upfront bother of learning a truly free tool, even if it has a steeper learning curve. PyCharm might be okay though. I see that it uses the Apache License for the CE, which is good. JetBrains is privately held, which is also good, as long as it lasts, since it allows for less focus on monetization and focusing more on a more long-term vision. They still have to find a balance between openness and money-making though, and the incentives they have are all wrong. For example, JetBrains has no incentive to make it easy for external developers to implement functionality which competes with their extensions. Quite the contrary. It would be easy to just skimp on the documentation of the plug-in API, for example, or fail to keep it current. Incentives nonwithstanding, they might be on the ball on these issues. I haven't looked into it. If they are, then kudos to JetBrains for doing the right things. But it might not stay that way. Chances are it won't, given enough time. Me, I'd rather take the safe route with a completely free tool. For the record, I've gone with Eclipse/PyDev, but YMMV. 
Python 3 support? Hell yeah :D
He already said he's using emacs. 
I don't see how an IDE can lock you into anything. I code in Eclipse, PyCharm, and Visual Studio regularly, and there isn't really that much depth to any of them that I've ever felt locked into one or the other. 
Great 
Company paid for Pycharm. Though I must admit, it is pretty dandy. As I mostly do Django, I can't get away with the free version. Would I pay for it myself? If I was making money from it, yes. Otherwise, I would look in to something else, like NinjaIDE.
Maybe I don't get it but where's the Fuzziness involved? Typing 'rodent' will return _only_ those results starting with 'rodent' and not those starting with, let's say, 'rudunt', 'rident', or 'nodent', will it? 
I thought of using pygame initially. Will it help me with Django too? I know both are totally different
I paid for PyCharm and Sublime Text personally. With how much time I'm programming, it was definitely worth it.
What are the advantages of the paid version? I use the community version for my work.
Quite a few: https://www.jetbrains.com/pycharm/features/editions_comparison_matrix.html
Legit question: why is the stack an abomination? I've been experimenting with Electron-based apps and am an Atom user after being on Vim for 7 years.
I go back and forth between emacs and PyCharm depending on my needs at the time (and whether or not I'm at work), never once felt locked in, dependent or anything like that.
I think detection and recalculation isnt unreasonable in that case, optimise the common path first. Amdahl's law and all that. Memory footprint is also worth considering with caching.
Wow this seems very useful for social media gurus.
I have paid for intellij idea and sublime text out of my own pocket. I spend all day coding so if I can get more done with the help of this investment its worth it to me. I chose Intellij instead of Pycharm though more expensive as it covers more or less all programming languages I am likely to come across and want to develop in and not just python so felt it was worth the investment. So far I have used it for Java, Python, Ruby and Javascript development. To me the personal license costs these present is definitely worth it. 
Thanks for that, I don't really need those features when I'm mostly dealing with sklearn/matplotlib/numpy/pymongo.
It's a Javascript web app running inside what I'd be willing to describe Chromium. To me, that's the wrong direction. We're trying to get rid of Javascript because of how horrible it is, not the other way around.
Useful! Github it, I have an IP webcam made from an android phone that could use this
If you have bought IntelliJ Ultimate you can just install the Python plugin and basically get all features from PyCharm in IntelliJ. However I wouldn't recommend it since you still have all the Java related settings and features there getting in the way.
Paid fro PyCharm since about version 2 and never regretted it. I still use Sublime Text for regular text editing though.
Cool, thanks. I've got a student email address and so got both for free!
I get the professional edition of PyCharm for free through their education program, but once I graduate I'm definitely going to buy it. I've gotten really comfortable with it over the last 8 months. The price is worth it alone for the debugger.
I have. My last company had us test drive PyCharm and offered to purchase it for us if we wanted. I was the only dev that passed on the offer. PyCharm is pretty damned great. I own a personal license for IntelliJ Ultimate, so I'm a fan of that ide system in general. That said, nothing let's me manipulate text as quickly and with as much power as Emacs. The Python packages out there are quite good, I have on the fly syntax checking, auto complete, etc. So the tradeoffs were worth it for me. I'm also a Java dev, and I find that I can't bend Emacs to be a decent IDE for that platform, so I stick with IntelliJ.
Why would you set aside years of learning to turn to an IDE? Most of them are so painful to extend that doing so is not worth it. Have you tried to write a Visual Studio or Eclipse plugin? It's awful. Compare that to altering emacs, which you can do in a few lines.
the samples or tasks that the author gives in the book will work correctly ONLY for python 2 You may try to do it with python 3. but you will have erros all the time
de-coupled? 
I use vi/vim stock when doing my python/bash/c/c++ coding. A simple, strong editor that can be found on almost any box I hop onto. Sure you don't have some of the flashy features, but it sure helped me learn regular expressions to make up for it. I have used IntellliJ stuff before. Those IDEs are awesome. 
Yep! For ramses you can extend the underlying nefertari app with custom processors before or after validation and also subclass models, views, serializers etc. For example for one of our clients we implemented a custom view that uses events from a normal ramses model and renders them as an ical feed. Ramses is just Nefefertari + RAML, and Nefertari is just Pyramid + ES + DB. We have designed the stack to be extensible at any layer in the obvious ways. See ramses-example: https://github.com/brandicted/ramses-example/blob/master/ramses_example/__init__.py See nefertari-example: https://github.com/brandicted/nefertari-example/blob/master/example_api/models/story.py
I paid for PyCharm, with my own money as in my day job I'm a Java developer. :) I think PyCharm is really great, one of the best IDE (Python or non-Python) out there.
Emacs is not an operating system
And again the exception handling is not pretty at all :(
Is it even possible to have integrated debugger support inside VIM? 
100$ for a license and 60$ for renewing your license.
Something like [this](http://i.imgur.com/dy0daiz.png).
This sounds like everything I hate about Facebook. I can't wait for more low effort 'funny pictures' to show up in my feed now. Thanks.
That's a warning, not an error. Those are not fatal.
I usually use Spyder which is free with Anaconda Scientific Python. Doesn't have quite all the bells and whistles of some of the others, but works well for me. 90% of what I do beyond basic text editing is mass indent/dedent and commenting blocks of code.
Unlike the pages posting the images you dislike and you no longer see such images :D
Yeah..... But there is the almost as good free version! EDIT: If your just doing normal Python, then it is perfect. The pro version is only helpful if you are using flask/django/etc. (or databases, apparently)
I guess I have the opposite opinion. Regular expressions are so powerful and simple to use that I often overlook better and more performant operations like string splitting and simple parsing. 
I've paid for Sublime Text and have recently paid for PyCharm. I'm super impressed with PyCharm and it has increased my productivity. I find it surprising that fellow software developers don't pay for the software other developers make. Why not support your own? If you can't pay for it (you might be starting off in your career) then pay for it when you can. You never know when you might find yourself in the same position. 
You just have to download the 2008 express runtime for vC++ I thought. link: https://www.microsoft.com/en-us/download/details.aspx?id=29
Do you have compilers configured? 
If and only if you specify a timeout. Like I said in the F.A.Q. its default behavior is to hang forever and that is dumb.
I'm the literal definition of a polygot developer, most days I do C# in Visual Studio, but frequently I'm also writing Java, Python, Puppet, Bash and a *LOT* of SQL. I continue to pay for IntelliJ IDEA every year, because outside of the two .Net languages I use (C# and F#) it supports everything, and having a single consistent IDE for everything else I do is worth its weight in gold. Consistent code-completion, refactoring tools, integrated debugger and killer database tooling make IntelliJ worth it for me, of course if you're not a polygot then you could just go for PyCharm as well.
This is pretty neat. I'd like to see support for Long/BigInteger type.
Yeah that, and im not trilled about the: `s3 = boto3.resource('s3')` don't get me wrong i didnt like the `from boto.s3.connection import S3Connection` either, just seems like too many layers, too much abstractions that you need to do to just pull a damn file. I would like a cleaner approach. Someone needs to make a "boto-python: boto for humans!!" or "amazon-python: we finally got it right guys!" or "amazonpy: we saw that video Raymond Hettinger did and we wanted to not suck anymore!" (rant) 
It is, but it's got a limited set of plugin extensibility compared to InteliJ, and you can install the equivalent of pycharm within inteliJ and effectively get Pycharm, while still having access to all the full featured InteliJ stuff you don't get with just Pycharm. Confusing right?
I've been trying to use Py2Exe when I switched to PySides instead of Kivy. Py2Exe keep giving me errors and Cx-Freeze did the same. For some reason it doesn't like OpenSSL along with pyftpdlib. Anyone dealt with this before? I'm using Python 3.4.
A few observations: * Is the counter really needed? You can easily name each file with a UNIX timestamp (`int(time.time())`). Sorting the files will still work and you also get the added benefit of timestamping your pictures. You also don't have to re-initialize the counter every time you restart the script. * Instead of waking up every second to check the time, it's better to calculate the number of seconds until 50 seconds past a minute, and sleep for that duration. If waking up at 50 past the minute isn't really important, you could just do a `time.sleep(60)` after each image. The way you've done this now, it isn't guaranteed that your script will fetch an image every minute. It may skip at arbitrary moments, considering the following: Say your script wakes up at 49.999... seconds past the minute, it sees the `time.second` value to be `49` and goes back to sleep for 1 second. The way your OS scheduler works is based off of a best effort principle. You are not **guaranteed** a wake-up in exactly one second when you call `time.sleep(1)`, so the next wake up could actually be 1.001 second later, i.e. at second `51`. Your script will blissfully move along for another minute without downloading your photo.
So those of us who have been using vi/vim for 22+ years, it's hard to switch
You may want to avoid situations where you have a really large collection and too many copies of it in the dictionary.
I don't have a lot of experience with python3, but in 2 you pretty much had to use [codecs.open](https://docs.python.org/3/library/codecs.html) to get any kind of consistent encoding handling for opening files. Is that not still the case? 
Yes, you can. Except that you can't in code that needs to be compatible between py2 and py3. And in code that uses open elsewhere, which is quite common actually. 
Well, that seems as if it hasn't changed, obviously ;)
- I initially did it with timestamps in the form of yyyy-mm-dd_hhmmss.jpg, but since I did not know about the `os.listdir`, I needed the names to be easily reproducible for making the video. MoviePy can take a list of names to build an ImageSequenceClip (it could in theory also take the folder with all the images, but that didn't work for me). So I needed to regenerate the list of names and did something like `names = [directory + '{0:07d}.jpg'.format(i) for i in range(700)]` (I just manually entered the number each time I made the video). Additionally, the images themselves are timestamped both on the image (when it was taken) and in the metadata (when it was saved). However, now that I use `listdir` to get the names I might switch back to timestamping the name. - I looked into using launchd which is basically cron, but I figured that the situation you're describing is a) too unlikely to care about and b) it would likely be unnoticeable in the output video. I did initially just use `time.sleep(60)` after each iteration, but it drifted off quite fast. Also the upload times fluctuate between :03 and :10 so if my download drifted into that range, it would randomly skip a frame or display the same one two times. Right now there aren't any missed frames as far as I know, but I'll have to improve it anyway. (I also thought I could check for the current time two times or more a second, so that it's guaranteed to be equal to 50 every minute, but then I'd have to check if I already loaded an image or if it's within the 50th second for the 2nd or 3rd time.
I don't often upvote but you have one from me. I likewise don't understand why people try to turn good editors into broken IDE's. 
https://pypi.python.org/pypi/matplotlib-venn It looks like this creates a matplotlib figure that you could probably plot points on top of. Sorry I don't have time right now to test this out for you.
 &gt;PyCharm might be okay though. I see that it uses the Apache License for the CE, which is good. JetBrains is privately held, which is also good, as long as it lasts, since it allows for less focus on monetization and focusing more on a more long-term vision. Actually I look at this as a good thing it means any fees for PyCharm end up feeding developers. In some places this is a bad thing, but at least with a privately held firm a greater percentage of your fees go to feeding working programmers. As it is I currently use Eclipse and PyDev for the little bit of Python programming I do. I simply don't spend enough time programming in Python to go IDE searching. Eclipse works sort of OK and supports many other activities that I engage in. As a side note I keep Vim, in some form, around on all machines that I use. This mainly for its ability to open, highlight and format so many different file types. Even this capability is needed less these days. 
 &gt;It's a curious objection isn't it? Source code isn't locked to the IDE in any way. It is the result of a locked mind! Often the supporters of free software get so wrapped up into the idea of access and openness that they fail to see the failure in their logic. If you generate code it is very hard to say that it is locked to the IDE, after all it is your code. Now there are issues where an IDE might help the developer out with IDE specific make files and the like. Assuming you understand your code and how it is to be built this isn't a lock in either. 
I just use Notepad++ myself.
I'm currently using and enjoying Pycharm professional with a license I won at Pycon. The full version integrates the functionality of Jetbrains' web IDE as well - HTML, JS, CSS, which is pretty nice if you're doing something that needs it. Pycharm is the only IDE I've tried that seemed worth the effort, though I've heard some good things recently about the Python Tools for Visual Studio. I also need a simpler text editor, though, because not everything fit's the IDE worldview of *projects*. I was using [Geany](http://www.geany.org/), but I've just started trying [Atom](https://atom.io/). I like the idea of Atom, but I haven't installed many extra packages yet, and it can be a bit slow to start.
Yes, IntelliJ IDEA using my own money. Before I bought PyCharm but since I like to learn new language I decide to buy IntelliJ IDEA instead because of it's plugins. No regret.
PyCharm doesn't lock you into anything. It doesn't use proprietary file formats. It is just Python code.
I use Emacs, But I also pay for PyCharm because it is awesome!
And if you need a CMS o create a website, ecommerce, portal, blog etc there is http://www.quokkaproject.org using Flask-Admin as its dashboard! 
This is more of a backup plan. I have no idea where to start though. Just learn python, keep writing programs that resemble websites and then upload it on github? Could you tell me how you started out? How did you get an intern in the first place anyway. Edit: Do you recommend Django or Flask
file a bug
For those unacquainted, PyCharm has also had this functionality for a little while.
What did you find lacking in Sublime Text that was in PyCharm?
For consistency between python 2 and 3, always open files for reading and writing in binary mode, and encode before writing, or decode after reading. with open(FNAME, 'wb') as fd: fd.write('foo'.encode('utf-8')) Python 2 unicode and Python 3 str always need .encode() called before leaving your code via a file, socket, etc. Python 2 str and Python 3 bytes always need .decode() before entering your program and being treated as text. If you get in this pattern of operation your code will not run into encoding or decoding errors unless the data is invalid.
I got my internship by going to PyCon and meeting the company president there. Conferences and meetups are a great way to meet potential employers. If you haven't done all of the Django tutorial (ALL of it!), then I'd start there. After you've done it, start work on some project that is interesting to you. Designing an application like a forum is a good place to start. You also need to have a basic understanding of version control with Git (to use Github) and an understanding of the fundamental parts of modern programming languages (if you dont already have programming experience). Getting experience working with other developers is essential, but when you're just starting out thats not so easy. It's important to understand that while Django is incredibly well designed and full of features, you WILL have to get your hands dirty writing pure Python code. Because of this, it's essential to learn the core elements of computer programming if you don't already know them. This should be a focus as much as learning all the internals of Django. I reccomend http://www.checkio.org/ for programming problems to help you learn. Hope this helps.
The plot doesn't show up though. I see it starting up and right when it appears it goes away.
Why? Are you not using it for business?
I have a bachelors in English. There are lots of issues that you have to grapple with in order to do web development. The most salient ones are managing databases and managing DOM interactions. Pygame does not teach you any of these skills to my knowledge, although I could be wrong.
Where do you recommend I learn managing Databases and the interactions from? 
I've never liked any IDE for any language. `vim` is my goto for everything.
Not true. I work a lot with databases and pro features really are helpfull. Like, export query results as csv, insert or update statement. And I don't work with web at all. 
The integrated debugger did it for me. I'd try to solve a particular problem with Sublime but was frustrated so I decided to give PyCharm a shot. Its been two weeks now and I couldn't be happier with the change. Still love Sublime and its home is still in my dock. 
Well said :-) Emacs is awesome ^_^ For example, every code I eval in Emacs gets a time stamp automatically. Whenever I eval a code block it understands when I'm in a class or function, or I want to eval just a line. I can fire up Python 3 with C-&lt;return&gt; prefixed by 3, and with prefix of 2 it will do Python 2. Can't live without emacs....
Also they missed out waiters for CloudFormation but that's probably work in progress.
ahw, I do like that expression: "It's home is still in my dock" :)
For Django, i'd say about six months of on-the-job training. I still don't feel proficient in Python, and I started learning about a year and a half ago. Python is really complex. It would take me years to be able to say that I'm proficient (I have high standards).
A company I consult for had a very manual process of printing out 3 types of reports and combining them for posting to their clients. (600+ at last count) The program, takes in two excel sheets with the client details and a couple of zip files containing other relevant documents, and generates the necessary word documents and combines them into a single batch report to be printed. Normally this would take 4 people roughly 2 weeks to get all the reports sent out to the clients. My program processed the work in under 30 seconds. Now, they complain about how slow the printing is!
Don't give up before you've even started! Think about what your end goal is... You mentioned you're doing it as a hobby, so if you enjoy the time you spend programming/learning then who cares how long it takes? Some people learn faster than others as well. There are a lot of free courses on line to learn from as well. Personally I like the structure of an online course over following a few tutorials on line, but do what works for you. Start with a small project you're actually interested in, doesn't matter if a million of them already exist since you're just trying to learn. However, programming is like anything else... you learn by doing. So go do!
Yeah, it's a matter of finding the right plugins 
You said it. Pytest can [launch the interactive debugger](https://pytest.org/latest/usage.html#dropping-to-pdb-python-debugger-on-failures) for a failing test.
If you want italics and other text formatting things that are *not* included in the character set (which they aren't, by the way), then you need some kind of *markup*. HTML would be the most well known standard. A quick [google search](https://www.google.com/search?btnG=1&amp;pws=0&amp;q=convert+docx+html+python&amp;gws_rd=ssl) yielded [this](https://pypi.python.org/pypi/docx2html/0.2.3) as the first result.
I built a media server for my home using a raspberry pi and built the front-end using Django. Sure there are way better and easier ways to accomplish this task but I wanted to fool around with some Django and Linux and this helped me learn a lot.
PyDev + Eclipse. Apparently I'm the only one. Does what I need it to. *shrug*
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
How did you get the proficiency to do such a thing. I am well versed with all things arduino. How much time did it take you, both for the project as well as the learning process.
Yes. No regrets. Remote debugging and remote execution was worth it. Not being Eclipse based was also a major justification for the price.
Like which applications? 
Yeah, initially, the code was actually using the "recommended" way of doing `config.read("filename")` but that changed to make the example work in py2+py3, and yes, py3 adds an encoding=? parameter to read as well. What's happening is really that in py2 it doesn't matter what the file encoding is, there is no validation, you just get a read out string, that's not a proper unicode string, `u'Räksmörgås'` but a normal string containing unicode. This shouldn't ever have worked, but it did. Mostly by accident. But the Python3 behaviour is insidious and dangerous, not because it fails on writing unicode to ascii files, but because it _changes behaviour_ in places where you don't expect it. Really, using the locale settings to decide how to parse and decode your files? Just stinks. 
Came here to suggest pycharm, but everyone else beat me to it. :D
I couldn't agree more. Its my goto for any type of heavy text manipulation.
Autodesk Maya, SideFX Houdini, Cinema 4D, Nuke, etc, etc.
My main problem with the above is as said, not the difference between py2 and py3. Py2 to Py3 porting is fine, and something I've done quite a lot. But when Py3 behaves _differently_ in different deployments, you end up with a big stinking bag of "what the FUCK went wrong?", which turns even worse when your code isn't local, and in an embedded system that's ~16 hours away. ( Now that part, stinks. Fortunately there's SSH ) in this case, the problem was a provisioned ini file that the software had written itself (controlled input) that it suddenly didn't want to read ( after upgrade ). Because a unicode character in a comment. In fact, this is a bit more insidious than only being about the environment. Because even if you set a UTF8 locale, if you do not have the locale specific files that cause setlocale to function ( collation rules ), setlocale will fail, and that in turn will cause it to return (None, None) as the active locale, even when the systems locale is UTF8, and _all software is capable_ of UTF8. The above is an extremely simplified testcase that shows the difference in environment settings to what your current application will do. This can also happen to be fun in case you have different locale settings for system started daemons ( LANG=C tends to be common ) versus when you run it from a terminal (LANG=en_US.UTF8) . Behaviour differences like this is one thing that I _really_ hate, because they end up being bug fucking difficult to find, Impossible to track down in testing and test for ( because when you run unittests you run it in your locale, which is unicode-aware) and its impossible to make open fail hard in case an encoding isn't passed in. (Which would be a good canary)
I'm fairly experienced with Linux systems (intermediate level at best) and I just wanted to get familiar with Django (I was at a beginner level at best with Django). As for timeframe, it's hard to say. It was operational within about a month of me putting in a couple of hours here and there in my spare time. Because I did this project as a labour of love and curiosity, I allowed myself to make mistakes and experiment with different things I wouldn't dare experiment with on a "real" project. I highly recommend this approach because now, instead just knowing what to do or not do, I know WHY I should or should not do something.
I attended that tutorial. Brandon is a great speaker, and the preprepared notebooks of exercises were excellent, providing a slow but steady gradient of difficulty -- each little step seemed easy, but you quickly found yourself doing interesting and complicated bits of data analysis. Well worth the effort.
Agreed! The tutorial was great in person.
D: its not so much the speed for me as much as the lack of moving my hands from their default position for pretty much every action. and any action where I find myself moving my hand in weird ways, I do a &lt;leader &gt; combo or something
You wont with that attitude. If you don't want to put the time into learning Django and you aren't passionate about learning then don't do it and leave the potential job you may get to someone else.
Damn I don't even think you could debug 9600 baud RS232 with that thing. You need at least 2x sampling rate, right? 
Do you know that websockets are bidirectional? Using a websocket to answer an HTTP REST request seems superflous to me. Why not answer in the http answer? Do you have a specific reason to do it this way?
Cannot upvote /u/TomBombadildozer enough! Also don't underestimate how writing testable code ~~can~~ will improve your code quality (especially modularity/coupling). As for the start: "spiking" (I think thats the TDD term) interactivly to get a first idea of the problem and solution is not forbidden. But having even just a few **easy to run** testing routines will make your life so much easier. Bringing up the REPL and typing the same 10 commands is not easy because you will not do this before every commit (I've been there). The same for bugfixes. Ever have done the same ugly bug years after because you forgot that little detail? Write a specific test and it will be saved. If you start simple, you soon will get to the point where testing solutions like py.test/tox and TDD will be something you want to use/do. As for the changing tests. I don't really understand what's the big fuzz about changing your tests to fit to your changed design. Maybe it's because for me tests are much more than just a "contract". They show me where there are problems in my design and therefore eventually will someday. And its satisfying to see the 30 lines with several clauses shrink into 5 easy to understand lines.
meh, whatever. that's what pull requests are for :)
Haha alright, I'll upload it sometime this week
Alright alright, enough leg pulling. I'll upload it to github later this week
cool! let me know when you post it
You're right. I was thinking there would need to be some initial manner to ask the server to expose the websocket to connect to. But that might not be necessary if I can just make it always available for connection.
Every talk by Rhodes is fantastic.
But `1 - - - - - 1` is 0.
What about '`raise BarException() from e`'?
For learning, I'd start with either Flask (build from the ground up) or Django (top down). Flask gives you enough basics to let you get up and running quickly, and has a huge ecosystem of third-party plugins and extensions to let you build out from there. Django, on the other hand, has quite a lot in the way of plugins and features you'd expect, and is very dogmatic about how things should be done. Starting with Django would give you a good perspective on what goes into a web app, pieces you may want/need, and it's all rolled into Django (whereas with Flask you'd have to pick them up). I've taken a couple of stabs at working with Pyramid, and the strength it really brings to the table is extremely powerful configuration. For very bespoke apps that need to be "lived in" for extremely long times, an approach like Pyramid is nice. It's also a nice choice e.g. for internally hosted apps at a huge company, where it can be built around existing data and existing authentication methods. However, I don't really see the power of Pyramid's flexible architecture being relevant to a beginner in web programming. See https://www.airpair.com/python/posts/django-flask-pyramid#7-summary for what I believe to be a very nice summary of the relative merits of the major strengths of each.
I am a fulltime developer who started with django! :D YES you can do it from home! It will be hard but SO rewarding. All I did was follow this: https://docs.djangoproject.com/en/1.8/intro/tutorial01/ And then from there you can think of ways to modify it!! If you get stuck feel free to ping me. 
I was there too and also agree it was an excellent tutorial!
Thanks!
I'm really happy to hear that, please hit me up on twitter once you've given it a whack!
Most parsers will attribute the first plus to addition, then apply all the remaining pluses as making the operand positive. 1 + (++++1) &gt;&gt;&gt; eval("1" + "+"*999 + "1") 2
In many programming languages, there are two kinds of unary increment operators: prefix (++x) and postfix (x++). They do exactly the same thing (add 1 to x) but the effect occurs *before* the value is used with the prefix operator and *after* the value is used I the postfix operator. In single statements the difference doesn't matter: x = 5 a = ++x b = x++ if a=b then print "same" else print "different" However, if you use them in an expression: X = 5 c = 3 * (x++) d = 3 * (++x) You find that c=15 and d=18 because the postfix operator increments after the multiplication but the prefix operator increment to before. So, back to the original statement: 1 +++++ 1 Lets rewrite it: ((1++)++)+1 Since the postfix operators don't increment anything to until after the expression is evaluated, this comes back as ((1))+1=2. 
This isn't at all true of Python, though, which doesn't have pre/postfix increment operators. To add 1 to `X`, you have to say `X += 1`; `X++` by itself throws a SyntaxError.
Well, I will try to make it to PyCon 2016 after seeing this. anyone headed to SciPy 2015?
+1 for title alone tilLover...I'm also a lover of Selenium (and also paried PhantomJS)
Yes
Ahh k thanks!
Really wish I had the financial means to attend this. I started getting serious with python about 6 months ago and I've never been to a tech conference before. Alas...not this year. Here hoping for 2016.
in any case, always remember - XML is horse$&amp;@* .
For Flask can I better use this one:https://realpython.com/blog/python/python-web-applications-with-flask-part-i/ or this one : http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world 
I didn't see this at all in my searches. Looks very promising! I was poking at redis pubsub + tornado. I wonder how this compares. Thanks!
I see! Thanks for the explanation. 
Thank you for the encouragement, it really makes sense!
I have no problems with lxml ever. Have you any examples of the non working code?
If you are not familiar with Python, this can be puzzling: &gt;&gt;&gt; 1++1 2 &gt;&gt;&gt; 1--1 2 &gt;&gt;&gt; 1**1 1 &gt;&gt;&gt; 1//1 1 
It was a very good talk. 
Heh, jeeze people. FYI to the the massively downvoted replies to this comment, referring to [emacs as an OS](http://c2.com/cgi/wiki?EmacsStandsFor) (and therefore implying bloat or unnecessary features) is a joke nearly as old as the [editor war](https://en.wikipedia.org/wiki/Editor_war) itself. Now you know!
you can't jump straight into ORMs and expect it to be easy having some general background about how relational databases work helps a lot
writing a plugin for Sublime is also not a difficult task. But it is more of a text editor. With plugins and stuff, it's pretty good
After some research, I planned to generate the sign the JWT with the users password and a secret key. So when the password changes the old signature gets invalidated. I don't know weather it's a good idea or not.
The ZODB does not position itself as a "NoSQL" DB, nor does it claim to be "NoSQL" :) The ZODB is a Python object persistence system, and it does an exceptionally good job ;) Need references? Sure: just point object A to object B. Done! Need type validation? Sure: use your favorite schemalib + formlib. You do need to tell your users they typed 'a' instead of 345, right? ;) If this doesn't work for you, thats fine, but please relax a bit ;)
There is a financial assistance program that might be able to help you out. Details [here](http://2015.pycon-au.org/grants).
It's 2
/u/joyeusenoelle didn't define their example in terms of integers but in terms of arbitrary `&lt;expr&gt;`. `+1` returns `1` but `+value` does not necessarily return `value` unless bounded as `value :: int`, hence my objection.
Question: why do this instead of making something useful out of it like making `+x` equal to `abs(x)`?
wow awesome timing, thanks for posting this
ZODB is primary a transactional way to store python objects. The filesystem or ZEO-server based way to store the already pickled objects with its ids and transaction information is decoupled from the actual storage implementing code. So there are different storage backends possible. If its difficult to sell the "python-database" there is also a storage backend for ZODB called "RelStorage" storing the ZODB into MySQL, PostgreSQL or even Oracle. RelStorage is complete transparent. Client side nothing changes (except configuration). From my experience the customers problems with ZODB are more about the "exotic" ZEO-Server (even if this software is mature) than about storing python pickles. So telling customers "We just need your DB-admin to create a new database in your existing PostgreSQL" lowers the barrier a lot.
I can now see myself one day overwriting that function and really annoying my coworkers. Love it. (No I won't actually, but it is a fun piece of knowledge)
The documentation properly specifies that the behaviour it describes only holds for numeric arguments.
Would -x with x as -4 be equal to 4 since -- = +?
&gt; 1 - (-1) = 1 + 1 = 1 Ummmmm.......
Also, lately they have separated the pub/sub part from the client. So autobahn is the client and [crossbar](http://crossbar.io/) is the server portion. Not sure how it compares to redis pubsub, but it appears that redis pubsub is more generic, while crossbar/autobahn are focused on cross platform function calls via [WAMP](http://wamp.ws/).
I still see the 404. If it is a notebook, why not just link in comments to it? Github now renders notebooks as well, but I don't think it works on the mobile site.
It will be, in the right hand expression it is in. Not outside it. You're using the negative of whatever its value is. 
If you scroll all the way down you see that that isn't a solution.
Find a problem and solve it. Want to order pizza from your couch without speaking to anyone? Build a mobile site that sends the local pizza company an email. In practice this might never work because they're quite happy to receive phone calls, whatever, but the point is that just messing around without a clear product you're trying to build, or problem you're trying to solve, will not challenge you enough to really learn. It's like saying "I want to run a four minute mile but I'm just going to go for walks in the evening as practice". 
As well as the financial assistance program, if you're willing to volunteer for the conference, there can be a free ticket in that.
Hosting that website costs you right? 
The trunk version of twisted and autobahn now supports python 3 \o/
Actually, the redis pub/sub is not generic, but very specific to redis while WAMP is a standard protocol and is implemented in various language (C#, php, python, c++, etc)
If bar will always be contained in foo, then you could have a factory function in foo that creates bars and then automatically sets the parent. 
1+-+-+-+-+-+1 is also 0 but the number of + and - operators after the initial plus should cancel out, making that last 1 positive... But it doesn't
Is there a reason I can't keep the crossbar piece totally separate from the routing and other parts of tornado if mh app is simple enough? Ie. Front end connects to the websocket independent of REST and other server offerings? It's a LAN app so the front end doesn't have to be super thin. Django feels like it could become a monolith as my app grows. I like the idea of microservices, if that is feasible. 
To explain a bit more about the project. I use virtual box + vagrant to house the virtual server that I use for development on my computer. Then I do have a server for hosting the deployment server. I have credit with Digital Ocean (Virtual Private Server) provider because I am a student, but it cost about $5 per month. For the most part, you will learn the most from the development server alone. It is just a few extra things that you might learn for deployment. 
&gt;As far as integers ... does nothing. Is there any case where it does *something*? 
I'd go with passing foo to bar to set a reference from bar to foo. This is conceptually what Pyramid does: http://docs.pylonsproject.org/projects/pyramid//en/latest/narr/resources.html#location-aware class Foo(object): def __init__(self, data): self.foo_data = data self.bars = [] class Bar(object): def __init__(self, data, parent): self.bar_data = data self.__parent__ = parent # &lt;- This is a reference to the Foo instance passed in as 'parent' @property def crazy(self): # So self.__parent__ is reference to the 'foo' object a few lines down. return self.__parent__.foo_data * self.bar_data # First foo foo = Foo(data=1) assert foo.foo_data == 1 foo.bars.append(Bar(8, foo)) foo.bars.append(Bar(2, foo)) assert foo.bars[0].crazy == 8 # second foo foo2 = Foo(data=2) assert foo2.foo_data == 1 foo2.bars.append(Bar(8, foo2)) foo2.bars.append(Bar(2, foo2)) assert foo2.bars[0].crazy == 16 # But try this: foo3 = Foo(data=3) assert foo3.foo_data == 1 bar1 = Bar(8, foo2)) bar2 = Bar(2, foo2)) # bar1 is the same object as foo3.bars[0] assert bar1 is foo3.bars[0] # so bar1.__parent__ is the same object as foo3 assert foo3 is bar1.__parent__ assert bar1.crazy == 24 
No. In the past I've used a combination of jEdit, PyCrust, and xrced to develop. More recently I've started moving to Visual Studio and QtDesigner. 
It's a template based on bootstrap.
Yeah, I think it's normal for some projects that doesn't need more features over time. I mean, those projects that all you have to concern is about the security, not keep coding or adding more stuff over time.
We use https://pypi.python.org/pypi/zc.buildout/ using either https://bootstrap.pypa.io/bootstrap-buildout.py or a virtualenv. Add something like this to buildout.cfg: [buildout] index = http://myprivatepypi.local parts = myapp [versions] my_app_egg = 0.1 dependency1 = 1.0 dependency2 = 2.342 [myapp] recipe = zc.recipe.egg eggs = my_app_egg And then run: curl https://bootstrap.pypa.io/bootstrap-buildout.py -O python bootstrap-buildout.py Or if you really want to use virtualenv instead of bootstrap-buildout: virtualenv . bin/pip install zc.buildout bin/buildout 
Hi, many thanks for the link you provided. I was trying to find something along the lines in django, but failed to do so yet. Problem with being newbie is that you do not know the name of what you are looking for. In the lines past 18, have you meant that? If so then I understood you perfectly. # But try this: foo3 = Foo(data=3) assert foo3.foo_data == 3 bar1 = Bar(8, foo3) bar2 = Bar(2, foo3) foo3.bars.append(bar1) foo3.bars.append(bar2) # bar1 is the same object as foo3.bars[0] assert bar1 is foo3.bars[0] # so bar1.__parent__ is the same object as foo3 assert bar1.crazy == 24 Thank you very much.
This exactly is the reason I don't use any of those. "Oh, you miss feature X? Just use your favourite..." times ten. No, thank you, I'll just use my favourite RDBMS instead, that has all of this OOB. Also, "Python object persistence system" is a lie. You don't persist objects. You persist only the data. You don't do any pickling of the code. How did you fix the issue, when the code changes and the unpickled data don't match the object code anymore?
Do you have any examples of this used in real software?
Alright, thanks for the explanation!
Since `if` statements can contain arbitrary conditionals, every condition has to be evaluated in order until the first match is found. The average number of conditions that must be evaluated to find a match is linear with respect to the number of conditions in the entire block. On the other hand, a dictionary is a hashtable. The key is hashed and used to look up the value in the table, which is a (roughly) constant time operation.
You're effectively implementing a jump table. In fact, I assume this programming pattern is the reason why Python lacks a switch/case statement -- the argument being, "you can just use a dict." See: https://www.python.org/dev/peps/pep-3103/
If you're saving fewer than 1 microsecond (in this case 0.00000026 seconds) per task you should use what's more readable, not what's faster. Unless it's an extremely rare case where a micro-optimization would trump that.
Did you think about the security implications of allowing arbitrary code to be executed? Eg. The user submitting a program to delete all the files on the server?
I mentioned a schema-/form lib because somewhere you'll have to do user interaction and data validation. You might as well put all business logic and validation in one spot ;) But enough of this; RDBMs have pro and cons, OODBMs have pros and cons. You like RDBMs, I like OODBMs. Let's drink a beer and enjoy Python :) The docs says "Python **object** serialization": https://docs.python.org/2/library/pickle.html. So shush, my friend :) It's pickles all the way down. So, your object is picked and that data is stored in a file. Then the data stream is unpickled and you'll get an instance. If your class definition mentions an attribute that does not exist in the DB, then you'll get an AttributeError. This is normal expected Python behavior, ie when obj.\_\_dict__ misses an entry: &gt;&gt;&gt; class Foo(object): ... this = None ... &gt;&gt;&gt; foo = Foo() &gt;&gt;&gt; print foo.this None &gt;&gt;&gt; print foo.that Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; AttributeError: 'Foo' object has no attribute 'that' &gt;&gt;&gt; foo.__dict__['that'] = 'hi!' &gt;&gt;&gt; print foo.that hi! &gt;&gt;&gt; I hope this sheds a bit of light on how the ZODB works! This video might be of interest too: http://pyvideo.org/video/430/pycon-2011--zodb--a-python-persistence-system
Try this in a language which has the increment operator (++), even more fun :)
Django doesn't need have to become a monolith and can be used to build microservices. Each django app can be an microservice, and you can start a different django process for each of them. And yes, you can separate crossbar from the tornado part, but there is not really a a good reason to use tornado if you use crossbar. You are better off mixing crossbar with flash or django since they provide a very good HTTP handling while tornado only provide the basics. One thing though, is that you'll need to craft an authentification system that will work on both your framework.
I'm sorry, I don't understand what your question is. In your example: You don't need lines 8 and 9 because you give foo3 to bar1 (line 5) and bar2 (line 6). My example was incorrect on line 45. It should say: assert foo3 is bar1.__parent__
/r/learnpython for future questions please.
It would be however, I do not need to do what flask supports. I just want a website to execute a script.
Does anyone know how much a ticket costs?
Last year it was about 400 zł (~100 EUR) for 3 days.
PEX (for "any"), platter (for Linux), and dh-virtualenv (for Debian-like).
Short version: No. IDLE is a pretty bare-bones and light-weight 'IDE', built using the Tkinter GUI toolkit for Python - which is notorious for being somewhat... bland. You can tweak the colors somewhat if you go into 'Options' &gt; 'Configure IDLE' and select the 'Highlighting' tab. Other editors and IDEs, ranging from vim to PyCharm, have varying degrees of custom color schemes / themes. After you finish your course, I'd (personally) recommend you check out PyCharm (they have a free 'community' version). But while you're in the course, it might be best to stick with what the instructor(s) are using, even if it is IDLE, for the sake of following along, etc.
Platter makes this more robust, by packing up wheels and installing them on the target. Still no-download installs, but more robust against minute details of the target (like an updated Python).
You wanted crazy: derive Foo from list, overload append() and extend(), and in there set a reference to the container in the added elements (see other posts).
Neat :-)
[/r/learnProgramming](http://www.reddit.com/r/learnprogramming) would be a better place to ask starting questions, but quickly: yes, python is generally considered to be a great language to start on, for various reasons. C++ is much more complicated, leaving you with a bunch more responsibilities as a programmer (memory management, etc.), so if you're looking to get your feet wet, Python's a great place to start. Don't want to discourage you if you feel like you'd like to do some C++, but python's probably where you'll want to start. As for learning it, you can go through youtube tutorial series, grab a book, or take a class, it's all good. My personal advice is to try to use everything you learn to test yourself to see if you can apply it in actual problem solving. It's really easy to read a book cover-to-cover and not retain any of it if you don't use it.
Web.py does just that and nothing more.
^ would be the better route to take
That wouldn't be hard to test... 
Ok, that was what I was asking about. Thanks.
I'm looking at flask now. So far it seems like I can get it to do what I want. Thanks!
Operating system?
No need, I tried something out on a whim to see if it was the case. Turns out, the reason pip install didn't work is that on Linux, you need to turn it into a "sudo" command. I just installed urllib3 and bleach testing it out. **TL;DR: I made a rather simple mistake.**
I really like it. It is simple to install and use. I made a python script that scraps the reddit gold value from reddit.com and put it on plotly with date. [Here is the plotly graph](https://plot.ly/~bobbiy/41) and [here the python code](https://github.com/bobbiy/Reddit-gold-rate)
Try "py -2".
This is how I would do it: Go to `C:\Python27`, right-click the `python.exe` and create a shortcut with the name. The you need to move it somewhere that is in your `PATH` or [set some directory to your `PATH` environment variable](http://www.computerhope.com/issues/ch000549.htm) Then you should be able to type `python27`and get Python 2.7 open
Doh wow, I'm an idiot. Thanks!
Ah makes sense. I've been reading so much and exploring new things that it's becoming a blur! Thanks a lot for the advice. 
I just `svn update` as necesary into a virtualenv, which i keep up-to-date with `pip install -U -r requirements.txt` as needed.
True, but my priority is presently implementing and stabilizing the features. Once the features are stable, I'll do an aesthetic round for UI finesse. The default Bootstrap theme can also do with some CSS customization.
Docker, as mentioned. It really is a powerful tool that can save a lot of time and headache. 
There's no reason the Bar instance should know which instance of Foo to use. You've defined a Foo that knows about Bars, but you have not designed a Bar to know about any particular Foos. Which is fine. Why does a Bar *need* to be in a Foo's list of Bars in order to function properly? Design properly by delegating responsibility properly. Let each class handle the part of the job that it's best equipped to. class Foo: # ... other stuff as before def crazy(self, index): return self.data * self.list_of_bars[index].value class Bar: # you get the idea @property def value(self): return self.data
Thanks ;) Btw, isn't there a way to change the contents of a cell already built into IPython? IIRC you actually once mentioned this on gitter. I'm still using the hack copied below which works well enough but I'd like to change it. js = """ var cell = IPython.notebook.get_selected_cell(); var content = {0}; cell.code_mirror.setValue(content); """.format(js) DisplayMagics().javascript('', js) An unintended feature of this is that ctrl-shift-enter will send the code into a new cell below, so it's useful for cases where you still want the original (despite the fact that ctrl-z works perfectly well).
Short answer is don't use idle. Use ipython or ipython notebooks. IDLE was a great tool back way back when. You also said you are a graduate in neuroscience meaning you have a lot more booksmarts then me. Ipython notebooks couples really well with scientific modules like sciclpy, machine learning libraries, plotting libraries etc. With ipython notebooks you can also can use it with other languages. Here is a gallery of ipython notebooks https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks there is a section of notebooks that have stuff about neuroscience. You can also install ipython notebooks on a server and then run it there. I saw one post by some scientist where he runs ipytjon on amazon cloud and then bids for cheap computing time. He then runs clusters with ipython. Honestly I didn't understand exactly what he was doing, but it was super cool 😃
Yep, you can do `get_ipython().set_next_input('new code here')`. By default it adds a new cell below, but if you do `replace=True`, it will replace the current cell instead.
yah that was copied from py2 code. In this case it should actually just be a function or class method, not a separate class.
running script.py only works if python is the default program for .py files. Also, `script` doesn't work in my experience and can produce unpredictable results.
It's true that it doesn't contain the solution, but it does contain the most up-to-date information regarding this bug: and that is that there is currently no easy fix.
I use VIM. This is like you have a set of basic colours and you can create any new colour you want from this set, but with IDE you have only a basic set and have no ability to create something new (new colour) that you need. 
That sounds like 100% a perfect case for a dictionary. What am I missing?
You can't assign outer-scope variables from a lambda.
Okay, thanks for the reply and I'll be sure to ask any other questions of this type over there. 
http://stackoverflow.com/a/134709 Lambda is unpythonic in the first place. I, and the rest of the community, don't consider building upon lambda as a good idea, nor a good way to demonstrate issues.
...which is almost exactly what flask can do for you. Very easily. 
Fire up your python can then look inside the sys.path variable to see where python is looking for modules. If you can not set the PYTHONPATH environment variable you can edit sys.path it is just a list. Editing sys.path is hacky but it works in a pinch. 
On a phone, so I don't have the energy to type a long explanation, but the thing you want to google is "virtual environment."
I thought maybe I just didn't know how to use it properly. My experience was that every time I used it for real life operations it would somehow end up getting corrupted. 
The github syntax highlighter bravely entered the m.py file, not sure what to expect from the mention of "python-like" posted on the readme he passed getting there. The first line seemed ok, a decorator that he quickly painted purple. He wanted out of here. Carefully stepping down to the second, he felt an uneasy chill down his neck. Something was wrong, something was unholy about this place. He slowly walked forward, pulled out the red then purple for a function definition. Then, out came black for the parameters. "(", he took a step forward, seeing something in the distance. "f", Was he being watched? He couldn't go back. It wasn't allowed. He paused for as long as the scheduler would allow him. ":", two colorless vertical eyes staring at him, behind, a field of gore. Angle brackets like scythes, letters trapped in cages, characters being stabbed by arrows, and then the eyes, the horrible vertical eyes. He tried to turn around but didn't know how. He never had to before. He had never *needed* to before.
Except that docker won't solve any of configuration issues, it has a lot of bugs, security vulnerabilities, networking issues and implementation issues. I'd suggest to use a configuration management system instead. For example, ansible.
Also interesting: piprot https://github.com/sesh/piprot to see how rotten our requirements are + offers paid email notifications when a requirement is updated https://piprot.io/
... or a polite way of saying: "You REALLY don't want to do that, even if you don't recognize it yet". It's great to see OP think about the possibilities, so I did not want to say "Stop now!", but rather make him think a bit further. And I don't mean to be condescending; it's just a mistake a lot of people have made, and it's best to learn from someone _else's_ mistakes.
I mean, I didn't hear that OP wanted to be able to upload .py files and then press execute. They want a website that runs the code they wrote, which is what flask, django, etc do in every situation (they run the code that the developer wrote). I gathered they wanted users to input variables, not code. In the off chance that they were thinking of running exec on a text field or uploaded file though, as I said, you made a good point. 
Did you find any?
Children learn about physics long before they start to go into formulae. They learn about force, heat and buoyancy before they learn english and before any of the variables and symbols have any meaning to them. In the same way it is way easier to teach a 6 year old programming without having to memorize words from a foreign language. Programming is of course learning the symbols. But much more than that it is also learning a certain way of thinking/problem solving. For any advanced stuff english is fine, but that comes later.
stackoverflow and see if you can help solve other peoples problems? 
Did you remove the autoconf cache file before rebuilding? ./configure might've cached the decision to build without sqlite support since it didn't find the devel headers the first time.
You are right. I missed the part where he said this. &gt; I see my new path when I print sys.path, but it's behind the old path in the list. I suspect the two versions of python are each attempting to modify the PYTHONPATH but the other version of python is modifying it afterwards. 
Ok, thanks. Will look into it.
crying from laughter
You could replace most of your OS with emacs... [Emacs as /sbin/init running standalone on a Linux kernel](http://www.informatimago.com/linux/emacs-on-user-mode-linux.html)
Well done indeed but maybe lay off the bong for a couple of days.
I've been looking through the source that gets output by your tool and I noticed a few things: 1. There are unused functions being generated in C(division of integers in a program that only does addition - add4.py.c). 2. In the implementation of HString, structs are passed as values which means there will be additional memcopy operations, while with pointers they will be "free". 3. You don't use memcopy and instead you use "for" to copy strings from char* to HString. Memcopy would be faster. 4. You could use inline functions and macros instead of normal functions for simple operations like addition, division, etc in the C generated code. I'm wondering what is your plan with this tool, is it a proof of concept or you want to make it into a optimizing compiler for Python? In case your want to do more than just a PoC I would be happy to contribute.
Maybe this will help: https://bpaste.net/show/f70817206b90 &gt; Why is it that my satement prints out True with brackets but without them i get false. In [10]: 'black' in colors Out[10]: False In [11]: False == False Out[11]: True Once python can get a result (False) reading from left to right it does not try to evaluate the rest This is known as a 'short circuit' This link is for the 'and' and 'or' operators but the behavior is the same in this case. https://docs.python.org/2/library/stdtypes.html#boolean-operations-and-or-not
Yeah I found the same thing. The documentation lists that all comparison operators should have the same precedence... So yeah. https://docs.python.org/3/reference/expressions.html#not-in https://docs.python.org/3/reference/expressions.html#operator-precedence
The reason is described here: https://docs.python.org/2/reference/expressions.html#comparisons As others have said, `==` and `in` have the same precedence. But for comparison operations, Python uses something called "chaining". So for example, `5 &lt; 6 &lt; 7` is `True`, which wouldn't be the case if you used a normal left-to-right or right-to-left order. This is because `5 &lt; 6 &lt; 7` is treated as `(5 &lt; 6) and (6 &lt; 7)`. This rule applies to all comparison operations. So in your example, `'black' in colors == False` is equivalent to `('black' in colors) and (colors == False)`, which resolves to `True and False`, which is, of course, `False`.
I linked to that part of the docs since it speaks directly to short circuiting but the behavior is similar in chained comparisons: - https://docs.python.org/2/reference/expressions.html#not-in - http://stackoverflow.com/a/14892812
r/dailyprogrammer ? Not specifically Python, but you can solve the problems in Python and you can see other people's solution too to learn from. The website Code Wars also has a similar set up.
Yeah, chaining's the correct answer
Surely! I could really do with help from some front-end/usability expert to improve this thing. Can you think of improving something in the CSS/JS ?
The c output is still not supposed to be optimised at all. The first goal was to just get it up and working, so passing almost everything by value was the simplest way. (Also, no tree shaking/detection of unused core/user-defined functions is performed) All those sugestions make sense. Until now that was a proof of concept indeed. However I'd like to develop it further(however I am still not sure in which direction: - An optimising compiler for Python(probably a restricted part of it. That means using a type system closer to the current Python spirit, annotating stl(or developing a tool to annotate stl and existing package code) etc - A python-like functional language(the current language) - because right now it has different semantics(and the type system's hardly compatible with existing python code) - Another language using light and clean python-like syntax and type annotations(right now I am working on prototype of one - it's really close to C, but it adds sum types, generics, function overloading and a lighter syntax(it's supposed to be akin to a CoffeeScript for C): https://github.com/alehander42/minotaur
Devpi for local repo, virtualenv on host for isolation and pip to install seems extremely easy.
I wrote them down because I use them as well. :)
I'll try again and double check 
Sure thing dude, I'm out right now, I'll PM you with more details later. 
What are your thoughts on the Nuitka project? While it compiled to C++ initially, it is moving closer to plain C. Would you ever consider helping that effort, or do you see the goals as too different? 
If the concern is about having the virtualenv inside the project directory, you can do that with virutalenv. I know a lot of people keep them in their home dir but I keep my virtualenv in an env dir inside the project: $ virtualenv env New python executable in env/bin/python2.7 Also creating executable in env/bin/python Installing setuptools, pip...done. $ source env/bin/activate (env) $ env/bin/python -c 'import this' The Zen of Python, by Tim Peters ... If it ever gets messed up you can deactivate and then rm -rf the directory and start over.
I agree it is a Wat, but I am having trouble coming up with more consistent rules that wouldn't involve raising exceptions in certain cases of chaining.
just gotta make sure you try and always run pip without sudo in most cases
uh I got 2 branches of a program that can use merging....
&gt; What can I do with Python? Write programs. &gt; I want to make a game, but I don't think that's possible in python, is it? That's a kind of program, isn't it? There's no reason that you wouldn't be able to, and in fact, there's a popular library called PyGame specifically for that task. &gt; Something fun to have that I wrote and could run off a flash drive or give to people to share? The deployment gets a little bit more tricky- they need a Python runtime, but yes, you could do this. &gt; wants to make fun projects If you want to work on a "fun" project, I recommend avoiding games, personally. In my personal view, they're the least fun kind of programming to do.
This is also fragile in environments where eggs and whatnot modify the sys.path. I think it's a nice hack to make some simple cases simpler, but I don't think it's for me, at least.
A game is what I want to do, the carrot on the stick of having a game that I can call my own is what will make writing it fun.... **I think**.
If you want to make some cool and simple games using python,I really recommend this free course from Rice University on Coursera: https://www.coursera.org/course/interactivepython1 To get an idea of what games you can build, check out this link:http://www.codeskulptor.org/demos.html#tabs-Hall-of-Fame I would also recommend python web development which is pretty fun. Take a look at Django or Flask. 
Oh wow! Thank you so much!
Anything you want except maybe embedded systems (where a python interpreter doesn't exist). You can write command line utilities to get the tedious tasks done quicker using stdio. You can also write something like the Django platform which is a pretty nice web app development environment.
I like the idea for simple solo projects, but I can't see it scaling. How do you prevent your own system packages from being included in requirements.txt? `pip freeze` doesn't isolate the local .pip directory that I can see, even using the `--local` switch.
Subscribe to /r/somebodymakethis I've written a few scripts for people who needed help implementing an idea.
Is that a question, or are you recommending this Sailfish thing?
Only the brave.
[Python(x,y)](https://code.google.com/p/pythonxy/wiki/Welcome)
http://pygame.org/news.html r/pygame
Personally I find it more clean to have a standard env/ in the project's folder (excluded from source control, of course). With ~/.virtualenvs folder you need to sync envs with projects. While that's not hard, I feel it's un-needed and an extra potential source of error, and I like keeping things as uncomplicated as possible. Less chances of Murphy's Law to pop in and say "Hi!" :)
I'm a beginner Python coder (more familiar with php), and I was asking if there might be some people with experience on this platform. Sorry for being unclear, should I edit the text?
Sure I guess we're not peddling it as a solution to every problem - more just a lightweight solution for simple use cases. It doesn't stop you from switching to virtualenv as soon as you start using one of libraries you mention. But personally I like to keep things simple - libs modifying the sys.path is already a bit of a warning bell for me.
Yes. The body is confusing. Make it clear what you are asking for.
Yes, it's not a command line tool but I'm considering in open source some tools I've made to make it work. I decided to start with dependency management, but I'll be adding other features along the way, that will help you to maintain your project.
Thanks, edited now!
I suggest using matplotlib. It can be used with most gui libraries. It also plays well with NumPy and SciPy.
piprot is interesting, but Codenizer makes more than this. It tells you the newer version (and license) but it can also tell you which version is more appropriate based on all your requirements. For example, you're using Django 1.6 and wants to upgrade to Django 1.8 but some of your dependencies does not support Django 1.8, but Django 1.7. So yes, Django 1.8 is available, but some of your dependencies are blocking you to upgrade to this version. But upgrading to 1.7 is fine.
&gt; The deployment gets a little bit more tricky- they need a Python runtime, but yes, you could do this. Not that tricky at all. You can use tools like [pyinstaller](https://github.com/pyinstaller/pyinstaller/wiki) or [py2exe](http://www.py2exe.org/) to compile your Python programs into a folder or file that contains all required libraries, so they don't need to have Python installed. I've used pyinstaller to create small self-contained programs for my students and have never had any major issues. The only thing to keep in mind is the target architecture. If you want the portable file/folder to run on a 32-bit machine, it should be compiled with 32-bit Python.
Do you know of some good resources to learn matplotlib? I don't have a lot of free time right now so something quick I can do every so often would be great.
&gt; That's the same as if you would ask: "Won't virtualenv break if I run code without activating the virtualenv? Which it won't, as long as you're using the python interpreter from the virtualenv, e.g. by specifying it in your script's she-bang line.
I have not seen or really looked for something like codeacademy for matplotlib. Their website seemed good enough for me.
&gt;virtualenv is overkill And why would that be then?
Thanks a lot. I will take a look at their website today.
https://github.com/bliker/cmder/issues/501
Are you sure this is the right sub?
And BTW, "== False" is a code stink (it's way beyond a smell), and should be replaced by "not".
Side answer: https://github.com/jhermann/awesome-python-talks#being-pythonic
I seconds this, there are a wide array of scenarios to choose from. 
The nice thing about this tool is that I can use it on Windows. I think there's a cmd tree as well, but I'm not sure if it can output to file.
Main answer: https://youtu.be/5JnMutdy6Fw https://youtu.be/O5OvOLK-xqQ 
I like [Project Euler](http://projecteuler.net), a website where there are many problems that require programming to be solved, It’s mostly mathematical questions, I don’t know if you’re into that sort of thing, but it’s worth mentioning.
Yeah, quite a welcoming for the first post here :/ Maybe I should'v used different nick, as I also blog about Jolla. But this one is definitely not related to that, except for using their platform. Thanks for the comment!
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/python] [Seaborn crashing still unanswered!](https://np.reddit.com/r/Python/comments/3b3mkb/seaborn_crashing_still_unanswered/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger/wiki/) ^/ ^[Contact](/message/compose/?to=\/r\/TotesMessenger))* [](#bot)
I've got an upcoming lightning talk at our PyDataLondon meetup (for August) to demo Python 3.5+numpy+@ to convince my data science colleagues that it is time to upgrade from 2.7. Stories like this are super-useful evidence that the rest of the world is moving on too.
The new matrix multiplication operator is enough to convince me.
Checkio.org is really great if your just looking for interesting little problems to solve. You can also look at a lot of others solutions.
I'm a data scientist, and I upgraded from 2.7 to 3.4.3 months ago. The jump was actually really easy.
The top answer gives the byte code for 'if not foo == bar' as: 0 LOAD_FAST 0 (foo) 3 LOAD_FAST 1 (bar) 6 COMPARE_OP 2 (==) 9 POP_JUMP_IF_TRUE 16 and the following for 'if foo != bar': 0 LOAD_FAST 0 (foo) 3 LOAD_FAST 1 (bar) 6 COMPARE_OP 3 (!=) 9 POP_JUMP_IF_FALSE 16 So the number of operations is actually the same within the context of an if, which I found surprising.
Well, it's time to switch to Python 3. I was waiting for Ubuntu or Debian to set Python 3 as default.
With Python you can: - build a scientific computing libray (SciPy) - build an entire Networking framework (twisted) - build an IDE (Eric, IDLE) - build a game engine (pygame, kivy) - build a web framework (Flask, Django) - build a Project Management Web App (Trello) - build web crawlers and spiders (scrapy, beautifulsoup) - build an elegant Social networking site (Reddit) Note: Don't reinvent the wheel unless its a hobby or side project. Build upon the libraries and frameworks already tried and tested.
I suggest going with the one that is closest to English. So it's "if not x is equal to y" vs "if x is not equal to y". 
I guess I've just eliminated most of that friction. virtualenvwrapper by itself does most of the work (`workon acme`), and with autoenv I don't have to remember to activate the environment, let alone where it is. Personally don't feel very dogmatic about it one way or the other, but since I have more virtualenvs than I do projects using virtualenvs (and occasionally multiple virtualenvs for a project, e.g. testing different Python or library versions), I don't like coupling their disk location to a project folder by default.
That's the biggest drawback to this idea. It doesn't create a truly isolated environment (if a package exists in the global `site-packages`, it will still be picked up, even if it is the wrong version), and the output of `pip freeze` won't be correct.
I guess it's a double edged sword. Means better interop but man could I benefit from a lot of the python 3.5 stuff
What about bbfreeze, pyinstaller and other useful tools for packaging? I was installing one of them recently, and as far as I remember no 3.x support. I saw "new" python few times, but don't see the reason why to switch. PS. Maybe I miss something, as I do not write programs, but scripts (small tools for testing HW/SW and automate some tasks). I am on 2.6 something now, as this is what comes with RH6. Sometimes I have to do something on RH5 and then python 2.4.x is so nice..
Project Euler is pretty much entirely about math and other algorithms, hardly anything on there is in any way related to most real-world programming. I haven't seen many of them, perhaps, but the best "code challenge" site I've seen was spoj.pl
and here we are still floating with 2.7
This is a poorly-written article. The difference between "the default Python" and "the default Python 3" is significant, and the author uses both seemingly interchangeably. As best as I can figure from this article, making Python 3 the *default Python* in 16.04 LTS is still the plan, but they are upgrading the supported version of Python 3 one release ahead of that, so that when Python 3 becomes the default it is the most modern version of Python 3 available, and they have the time between the two releases to iron out the last of the issues with the version bump.
Function Decorators?
The first version is like asking if not x, so everything in the universe that isn't x, is equal to y. Haha
Wish I'd seen this tutorial before I lost my Jolla Sailfish.
Maybe a good list for beginners but matplotlib [gallery]( http://matplotlib.org/gallery.html) is pretty comprehensive and for something beyond just plotting, Chris Albon's code [snippets]( http://chrisalbon.com/) are pretty good also.
Debian is working towards python3, there is one hell of a drive to get there.
what operator is that?
if you mean as “the thing that runs when you type `python` in the command line”: not going to happen due to backwards compatibility. at least for debian, `python` will always refer to python 2.
Why is this infidel not using ipython notebooks which is free and you can use the free online viewer 😃 
Firstly, this is better suited for /r/learnpython Secondly, what version of python are you using?
 &gt; a='foo' &gt; b='foo' &gt; a is b True &gt; a == b True &gt; id(a) == id(b) True So strings constants are handled differently than numbers 
The one on the right since there are no doubts what it means. 
If you are going to learn python start with a traditonal OS first and then work on mobile devices, it is hard to debug on a mobile device. I have no used sailfish OS but I tried python kivy on an android device. The biggest obstacle was the startup time for kivy on android. Once the app was started it worked pretty good. I don't know how sailos handles the python interpreter and the startup time for python apps on it. Find out the startup time and then let us know, i am interested.
i heard they were going to 2.0 after 1.9. better this way!
https://i.imgur.com/ULWUPTp.jpg if the answers you got in your previous posts were unsatisfactory, then you can take it to the seaborn issues page https://github.com/mwaskom/seaborn/issues
What you need is s.encode("utf-8"), because the established standard is www-urlencoded UTF-8 byte strings in URLs.
Are there any packages missing in 3.3 that you miss? I'm a data scientist too, and our it guys make us go through hell anytime we try and change anything. 
I think the biggest line of reasoning is Technical Debt - https://en.wikipedia.org/wiki/Technical_debt Granted 2.7 will be around for a good long time but at some point in the future, 3.5+ is going to be where the excitement happens. If it is relatively easy to convert and you have the time and resources, then you should do it. I'm sure there is some opportunity cost too. Right now, your manager is thinking about all the other things that could be done instead of a back-end python version upgrade that would be transparent to users. You will need to convince your manager that it is going to have to be done at some point and it is best to get it done now or at some point in the future. If there are some really cool python features you get for free, that's great but I think you need to argue that it's about keeping the code maintainable and stable for the long haul. 
Nope. Not one.
I've used this argument, already. Glad to see I'm not out to lunch.
Specifically, the goal is to get rid of python2 entirely within 3 years.
Fair point. For the simpler types like ints maybe.
You're less likely to gain productivity (that wasn't the point of python 3) than to lose time due to having to recreate in 3.x what's already available in 2.7. Counting your own existing code and community packages.
what about numba? That one def has issues with Py3.
Well it doesn't work for base Python lists according to the beta version I tried out, so I'd assume you just overload @ for the particular matrix class you're working with and set whatever algorithm you want internally. [There are already plans to implement @ in a bunch of numerical libraries.](http://legacy.python.org/dev/peps/pep-0465/#adoption)
So all the standard stuff works.. numpy, pandas, scikit-learn, etc..? Did you every try scrapy? I use it quite frequently to scrape data before doing anything with it. I've used Python plenty, but nothing outside of 2.7. Not really sure what the big differences are as it relates to data science.
Yeah, this is one of those things that would confuse the hell out of me and send me running back to R.
Then again, the final version of 3.5 comes out in September so you could easily upgrade to it once you have 3.4 installed.
So far, annoying matrix multiplication has been the main thing preventing me from using Python. I love R's package ecosystem, but actually writing code is so much more pleasant in Python. The new @ operator, if anything, makes Python more like every other scientific computing environment on the planet.
One of the most underappreciated advantages of Python 3 is debuggability. Here are a couple examples: Do you ever have an exception handler that raises an exception? Wouldn't it be nice if you could see the original exception, without having to change the code of the inner exception handler and do traceback surgery? Python 3 shows you both exceptions. It just works. You probably read string representations of things like lists sometimes. In Python 2, if those string representations contain strings that aren't 7-bit ASCII, they're going to be full of `\x` and `\u` bullshit, and you'll have to paste them into a Python prompt just to find out what your log is trying to say. Python 3 knows your computer is grown up and can handle Unicode*, and shows you the real characters as long as they're printable. \* You said you're on Windows, so you might want to make sure this is actually the case. I'm not familiar with WinPython but I assume you have an environment that's better than flailing around in `cmd.exe`. 
The best business reason I can think of is that you're going to have to do this eventually regardless, so you might as well get out ahead of the issue now so that you're not forced to do it in a rushed panic later. Python 2.x will reach end-of-life at some point in the near future(*) and will no longer receive security fixes, which means it will be the software equivalent of criminal negligence to continue using it. And if on top of that you can also point out that you have a lot less code to port today than in a few years, well, bonus. (*) As it stands now, that will be the year 2020, although Red Hat might take over the reins at that point and provide security updates for a few more years, but only if you're a paying member of the RH support network. (Although they should flow downhill to CentOS as well; but that's not much consolation if you're not using Linux and/or CentOS.) There are of course tons of bullet points that you could list in 3.x's favor, including fancy new language features and cool new standard libraries. But from a business manager perspective, I'd point out the long term planning aspect. 
I'm familiar with list comprehensions [expr(x) for x in collection] And set comprehensions {expr(x) for x in collection} And generator comprehensions (expr(x) for x in collection) And dictionary comprehensions {x: expr(x) for x in collection} (I personally wish we had `collections.OrderedDict` comprehensions as [x: expr(x) for x in collection] But this probably won't ever happen) What you're actually using is syntactic sugar for generator comprehensions, it's not special to the `.join` method on strings. It's syntactically equivalent to ' '.join((x for x in d)) Whenever the only argument to a function is a generator comprehension Python allows you to drop the redundant parentheses, so if you have func((expr(x) for x in collection)) This can always be written as func(expr(x) for x in collection) This goes for the `str.join` method, and any other function or method out there: def example(collection): for item in collection: print(item) example(x.upper() for x in 'hello world') will output H E L L O W O R L D to STDOUT
One word: `mypy`. Yes, it still has bugs, and you'll have to write some unnecessary stub files. But it is *so* worth it.
yup same here. im sick of pyenvs/anacondas , just make it be the default.
I prefer print(*(x for x in d))
If you care about whether "!=" is faster than "not ==" then you probably shouldn't be writing Python.
I always feel like if you're writing code so fast you need to worry about typing efficiency then you're probably not writing good code at all.
Have a think about it - if your boss is a die-hard Python 2 holdout then the answer is - don't attempt this. Just leave if it matters to you. Diehard Python 2 holdouts CANNOT be convinced. It's like trying to talk someone out of their religion.
I'd argue that this is against the zen of python.
All of this is really stupid code to write in the first place, of course it's against the zen of python.
You run it on objects from a third party library, who have overloaded the operator with code running a fast implementation. ...not rocket science. 
Your company someday will be a big big multi national multi languange company. And someday Thailand &amp; Hongkong branch will send their master customer maybe in a csv file :p. So can we upgrade now Boss? 
But will it turn back to Python 2.7 on a full moon?
That's not really true. Python is a language which emphasises readability. In this case, the question of which is more readable is reasonable. We don't write code just for ourselves, we write code for others to read too.
The `typing` module is only enough for your program to *run*, it is the `mypy` script that does all the important stuff.
I don't drink. Except that, I don't see what's so magic about saving a dictionary to a disk drive that people call it pickling AN OBJECT. I really respect Zope/Plone people. Zope is a large project, one of those projects I wasn't intelligent enough to learn. Other example of such projects is Emacs :) Have a nice day, it's been really a great time having this discussion with you (no irony).
That makes sense. For some reason I thought it's some kind of special operator that only works on lists, but this is really good news indeed.
Very nice! Are you going to submit these to the official matplotlib gallery? Some other possible plots: 1. Heat map plot 2. Double axes 3. Shared axes 4. Annotations 5. Filling under curves with transparency 6. Put a violin plot in "box plots"
It is happening, people. With a bit of luck, in a couple of years we'll finally be able to talk about python stuff without someone going "I'm never going to upgrade because library YourMom doesn't support py3".
Agreed for new projects. For non-text projects it is pretty easy (print statements, / is now float divide not int divide on ints), for text projects dealing with bytes (e.g. web scraped/API results) it is harder but totally worth sorting out (else the encodings are implicit and...that'll bite you in the arse in the end). The built-in 2to3 helps, the six module helps, the future module looks interesting too. Strong unit tests and coverage (I suggest using py.test) are mandatory but then...they should be anyway, else I can't trust my code for my clients.
If you have Anaconda you can test Python 3.5 easily enough: "conda create -n py35 -c antoine python=3.5" (https://twitter.com/ianozsvald/status/613325633721118720), but I don't believe there's a public repo of numpy built for py35 yet (but you can build it from source easily enough, if you're happy at the cmd line). You end up with: https://twitter.com/ianozsvald/status/613360574903283712 You could always nudge Continuum here https://twitter.com/ianozsvald/status/614004267016392704 to ask for earlier builds, if you're testing this simply makes sense
[**@ianozsvald**](https://twitter.com/ianozsvald/) &gt; [2015-06-23 12:40 UTC](https://twitter.com/ianozsvald/status/613325633721118720) &gt; .@gmarkall indeed "conda create -n py35 -c antoine python=3.5" works nicely, cheers :-) &gt;[[Attached pic]](http://pbs.twimg.com/media/CIL4adNWwAE32Og.png) [[Imgur rehost]](http://i.imgur.com/mpuMUtR.png) ---- [**@ianozsvald**](https://twitter.com/ianozsvald/) &gt; [2015-06-23 14:58 UTC](https://twitter.com/ianozsvald/status/613360574903283712) &gt; \#w00t &gt; Python 3.5.0a0 &gt; \&gt;\&gt; import numpy as np &gt; \&gt;\&gt; arr=np.array([[1,2,3], [2,2,2]]) &gt; \&gt;\&gt; arr @ arr.T &gt; array([[14, 12], &gt; [12, 12]]) ---- [**@ianozsvald**](https://twitter.com/ianozsvald/) &gt; [2015-06-25 09:36 UTC](https://twitter.com/ianozsvald/status/614004267016392704) &gt; @asmeurer not earlier to help maintainers test for compatibility? I can understand why not, but eg an RC build might help folk? ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Agreed, I use Numba+Python3.4 (and teach this in a course), I haven't seen any issues
I've not given it yet, come to my meetup http://www.meetup.com/PyData-London-Meetup/ and I'll do this lightning talk in August. Also maybe see the talk I gave at our 300-person PyDataLondon conference a week back: http://ianozsvald.com/2015/06/21/pydatalondon-2015-write-up-and-my-ship-it-talk-on-publishing-data-science-products/
"There will be no 2.8" -- Guido
More important: pypy support!
Doh, thanks!
Yep, `numpy`, `scipy`, `pandas`, and `scikit-learn` all work great on Python 3. I've never used `scrapy`, but [Beautiful Soup 4](https://pypi.python.org/pypi/beautifulsoup4) works great for scraping, and is Python 3 compatible. According to the [Python 3 Wall of Superpowers](https://python3wos.appspot.com/) and [Python 3 Readiness](http://py3readiness.org/), most of the most popular PyPI packages are compatible with Python 3, and a lot of those that aren't have alternatives (eg scrapy vs Beautiful Soup).
I don't use Anaconda (and the creators of `numba` seem completely uninterested in supporting any other Python distribution), so I've never used `numba`.
For supporting Vimrc you would basically need to rebuild vim, wouldn't you?
Is the support covering all of the functions of gevent?
As a caveat, generators work worse than lists with `str.join` because it has transform the iterator into a list first. Join has to iterate twice: once to determine the size of the new string and then once to put all the string pieces into it.
you have a bunch of good answers already, but I wanted to add that if use python for http requests, asyncio and aiohttp are so much faster that I have part of my workflow in python3.4 now, just for that part of the process. Everything else is in python2.7, but once I saw the difference in speed on requests I had to make room for python3.4.
Greenlets let you do the same pooling, and are typically faster than full on processes. On the other hand it's really only useful for asynchronous input. If your application is heavy on file or socket management gevent is great. But yea, multiprocess if you are doing CPU stuff.
Maybe just a 2.7.999
Marvelous sights may be quite difficult this year, since it's not going to be in the middle of Beskids again :)
With all the (actually) good stuff from 3.x back-ported ;)
No because of user scripts breaking. However all system scripts will be using python3. The new best practice is to stop using "python" as the command and to explicitly use "python2" or "python3". All shebangs should also point to the specific version. This is meant to prevent any confusion on what should be running. (Zen of Python: "Explicit is better than implicit")
Qt. i.e. PyQt. looks native on all OSs (not completely on OSX but still as good as the best alternatives apart from directly coding against cocoa)
Miguel Grinberg recently did an excellent 3 hour tutorial at PyCon 2015 on developing lightweight web applications with Flask. It's available on YouTube (https://www.youtube.com/watch?v=DIcpEg77gdE). He also wrote an O'Reilly book on the topic that is very solid. I would recommend the video for getting started. 
Soooo its not necessarily a simple answer. pyQT/PySide -- These are built off of the Qt C++ library that is the backbone of a very large number of desktop applications. Out of the box it looks like any GUI framework will. Its blocky and looks old. However you can customize *everything* (remember you are in python right?) If you wan't it to look modern you can either meddle with the class properties or use their QtStyleSheet (which are just *.css files under the covers with a few tweaks). (note I believe they are hanging out in Qt4 not Qt5) These will primarily inherit your OS's stylings so your application will look slightly different in OSX, Linux, and Windows unless you manually deal with it. There is also a visual designer for this but honestly avoid it like the plague. It will generate code that will make your eyes bleed. Kivy- Kivy is more "modern" and tends to look the same on various systems. Its a little more "pythonic" than Qt but still not perfect. One thing you will see from people is "why make it a desktop app?" 99.99% of things you want to do can be done with a HTML/Javascript front end. Even if its not running a remote server you can use your local host and control your application via the browser. In reality if you want something to look "really modern" this is the way to do it. The only place I have seen this break or not hold true is if you are trying to display *massive* amounts of graphical data.
lightweight and barebones lends itself to the Tk framework which you probably came across already - its built into nearly every python distribution ... alas its a bit... ugly. Qt via either PyQt or Pysides looks leaps and bounds better than Tk in my opinion, has a much steeper learning curve, but gives you far more options for customization. Qt is a C++ framework that's been around for quite some time and has a lot of references and resources to dig into. The python bindings (PyQt4/PySides) are generally pretty great. However Qt can be a pain to install on some OSs. It comes standard in the Anaconda Distribution of python however - so if you're interested that may be one route to go. Qt has an app called Qt Designer where you can graphically create your Ui and save it as a .ui file or something like that - then there's a command-line method for translating the .ui file into a python file. I have not yet bothered to learn the ins and outs of using Designer in this fashion but in the long run could probably save you some time. I have never used Kivy but it seems to have a more modern feel to it and seems to be the goto if you have anything 'mobile' in mind like developing for Android or iOS.
gevent doesn't do async file access
thanks for the tip. Given what everyone's said it does seem the best option (although I'm tempted to try html/js)
In fairness the support requirements for Numba are non-trivial (you need the exact version of llvm and related tools). I once spent &gt;4hrs compiling Numba from source before giving up, I installed it in 15 minutes with Anaconda and never looked back.
The easiest thing to look at are just the basic flask/django tutorials. They are both fameworks that allow you to generate the code, provide templates, and then deal wih the data on the backend. The front end is anything you can throw onto a web page. http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world is a great walkthough for flask. You can use all the kind of plugins they provide or you can use things like googles polymer project to give some cool functionality. You still have to glue those yourself but flask makes it really really easy.
Same here: I run Windows host and Linux VM in vagrant so having it outside the project folder is a must.
&gt;anybody here making heavy use of tmux for development I've been using it for years. I absolutely love it. I probably discovered `tmux` in much the way you've described. I was using terminator/iterm and a bunch of tabs. These tools may have gotta better since I last used them. I switched to `tmux` primarily because it allowed persistent state beyond the terminal process and it allowed me to mix and match panes/windows. &gt; Does it already do all you need out of the box? A number of my colleagues use `tmuxp` and love it. I might give it a try because I'm sick of rebuilding my panes and windows manually. Otherwise it works great right out of the box &gt;How easy is it to work with this gem install stuff? Not sure what you mean. If you are talking about installing `tmux` most linux distros and `brew` have tmux packages that are relatively up to date. &gt;having a chance to script the creation of everything so that I don't have to manually open everything every time I start my computer. I think you'd like `tmuxp` because it lets you describe all this in a markup of your choosing. 
The `is True` is useless. If that statement is true, your basically saying `if True is True` rather than `if True`. Let the if statement do its job. If you only want it to trigger on `False`, use `not`. EDIT: Unless your checking whether the value itself is actually `True`/`False`. if x: do.shit() For your average if statement (`bool(x) is True`) if not x: do.shit() If you need it (is basically `is False`, but instead of saying `if x is False` which compares whether both conditions are the same (Which requires translating your value to a boolean, else you will never trigger the if statement), you just flip the Boolean value of x. 
Well, you may want to stay consistent in your code, ie. no `if not x == 1 and y !=2:`, but other than that any speed differences would be barely worth the effort of changing a few characters. 
This is only one reason I remember from quite a few years back: they wanted to be able to support as far back as python 2.5. This made covering python 3 very difficult, especially in exception handling.
You can add 'libs' to the PYTHONPATH environment variable or modify `sys.path`, but if you can get away with *not* doing either of those things, it would be better, as this is highly discouraged. The accepted best practice is to use virtual environments, and install dependencies there, and keep a list of dependencies in requirements.txt so the virtualenv can be rebuilt.
Fun and impressive, but definitly not almost flask. Not templates, not pattern matching, no json, no blueprint, no app isolation, no wsgi... This name is a bit of a stretch.
tempfiles on Windows will make you cry. Well, specifically, Windows won't let two or more processes access the same file without all kinds of hairy magic. So if you want to do: import subprocess import tempfile with tempfile.NamedTemporaryFile() as f: output = subprocess.check_ouput(['some_command', f.name]) Sorry, it's not going to work, unless some_command is really really nice. You actually have to close *your* filehandle first, then run the command, then open and read your file back in.
yeah ok 5 lines... get rid of all the ; ; ; ;
An interesting idea! What do you feel is your primary use case? Or are you pretty much doing this for the fun of it?
In arch linux the default is Python 3. ***@arch-linux:~$ python Python 3.4.3 (default, Mar 25 2015, 17:13:50) [GCC 4.9.2 20150304 (prerelease)] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; The system works fine without any breaks.
I haven't finished reading it yet, but I am really liking the tutorial. I'm an "enthusiast" at best, and the way you break things down is great. Thanks for putting this effort in!
Github used to do something even uglier. They ran one python interpreter by ruby interpreter, just to use pygments. https://github.com/tmm1/pygments.rb
Thank you for this kind reply! I hope I can get the next part out soon
ask at /r/datascience
Yup...PHP is shelling out to Python, but we already shell out to other programs like imagemagick, djvu, etc., so it's not a new thing. The Lua integration is actually a [PHP extension](https://www.mediawiki.org/wiki/Extension:Scribunto#LuaSandbox) so we don't shell out for that. &gt; Maybe one of these days they'll stop using PHP altogether. One can dream :)
The code might be slow, at least the main thread should be kept clean of extra calcs according to the tutotial... I'll study the debugging part in advance, let's see how Qt and Python interact on that side. There is SDK for Sailfish OS, but not rated too high among Qt coders
If this is the case then, and this opinion will be unpopular in generic programming circles where reliability is not a primary concern, we should depreciate versionless 'python' in a shebang as it encourages ambiguous or incorrect code. `#!\usr\bin\env python` should halt with a "version unspecified" error (or more likely, just not link the interpreter to that, requirng the user to put 2 or 3). At the very least, linting tools should pick up on this. Mine do not, which I regard as an issue with the linter.
I don't completely disagree. But that would kill a lot of scripts. For stability I don't think that'll happen anytime soon. Could you imagine some corporation that have scripts running that were written in 2005, 3 generations of senior programmers ago, all coming to a standstill? That would be a disaster. Yes it should be deprecated, along with appropriate warnings. But I'm not entirely sure about halting with an error.
[PEP 394](https://www.python.org/dev/peps/pep-0394/) tries to address this: - python2 will refer to some version of Python 2.x. - python3 will refer to some version of Python 3.x. - for the time being, all distributions should ensure that python refers to the same target as python2 . - however, end users should be aware that python refers to python3 on at least Arch Linux (that change is what prompted the creation of this PEP), so python should be used in the shebang line only for scripts that are source compatible with both Python 2 and 3. - in preparation for an eventual change in the default version of Python, Python 2 only scripts should either be updated to be source compatible with Python 3 or else to use python2 in the shebang line. 
I need that onesie... And congrats! 
In the example you give, I would imagine they would not auto-upgrade without first testing the patch.
I like the idea of using a Web page as a python GUI. My only concern with something like this is that I'd have to ask users to install node.js and other dependencies. I'm worried the extra effort would turn off some people. 
yeah, except that some official people from debian said it would never happen there.
Someone linked the actual pep [above](https://www.reddit.com/r/Python/comments/3b2w96/ubuntu_1510_wily_werewolf_to_switch_to_python_35/csjug70) It's [PEP 394](https://www.python.org/dev/peps/pep-0394/) and you'll probably find the actually answers there (as opposed to my guesses)
Your link is also down now :(
No, by then it'll be Python 3.x vs. Python 4.x...
I'm sure /r/telegrambots would appreciate this! :D
I don't know about pytest as I am a nose + unittest.mock user, but when you are using the builtin unittest.mock library for python 3 (or mock library in python 2), you can just use PropertyMock. I have done this a few times before, but you have to backup and restore your property at the end of your test, as PropertyMock seems to be set on the class itself, not the instance of an object you are testing. That basically means if you don't restore the property at the end of the test, it can affect other tests that run after.
Thank the lord, finally.
I'll probably do what I do to host Haxebot : a simple script for systemd because it's the only solution it came to my mind. And yeah, cron is not a bad idea neither, thanks.
There are potential issues with licencing of pyqt that is often difficult in commercial applications.
Very nice.
I'm a little confused by the app - there doesn't seem to be any way to play notes in two different chords at once.
1. why are there baby pics on /r/Python 2. did you really name your kid fibonacci
You, sir gave me a reason to sleep very late. Thanks for the review! :D Edit : with some patience and checking stuff, most of these problems are corrected. I'm going later to investigate about why I had a wonky indentation and how I could improve Message.init. Still thanks for pointing my mistakes! :D Smallish edit : I used pip's pep8 utility to clean the whole code. Still thanks for the link, I now have a neat tool to know how much I drifted away from the standard!
It's slow, still doesn't have a python3 language spec, and focus a bit too much on the superficial. Here you can see the 1.0 release being announced with fanfare, an introductory video, and custom artwork. I'd rather have proper python support than pretty blog posts. http://blog.atom.io/2015/06/25/atom-1-0.html 
I'm not a physicist; I just studied physics for undergrad. I'm employed as a computer programmer. Insofar as I had a specialty as an undergrad it was trying to understand relativity and put it into simulations. I also dabbled in condensed matter. I'd be happy to talk about anything you might want to know about physics education. I don't know if I have any tips about getting into grad school, but I do have pointers about things that will keep you out of grad school.
Does this use the new bot API, or some other method?
Yeah it does uses the new API.
&gt;desktop [web dev shit] Can we not? Not everything has to be saturated with javascript and css.
Oops sorry, in that case I do like the 8 month release cycle instead of 6, and also 2 yearly LTS releases sounds good
&gt; ... it does not offer anything which emacs can't do. Is there anything emacs can't do? ;-) I think atom is intended to be something like a modern-day emacs or vim in terms of extensibility, but with a gentler learning curve. If you like IPython, have you looked at [hydrogen](https://atom.io/packages/hydrogen)?
Don't wait until 1999 to fix possible Y2K issues. Same applies here 
`is True` is not useless. 1 is True -&gt; returns False bool(1) -&gt; returns True 1 == True -&gt; returns True You can use it if you want to ensure that a value is actually a boolean True and not true-ish.
my favorite was when they made their ssh keys non-random. how anyone could trust them after that is beyond my understanding.
No, literally curious. I was looking for tkinter examples to see whether or not I would want to use it in a project and all the examples showed controls that looked like they were from mid-90s programs. Is it possible to easily provide a more modern look to things? On the other hand, there are plenty of Web frameworks that make it fairly easy to give a website a modern look. 
There's also this which uses Py3/asyncio, but I haven't tried it yet: https://github.com/breach/thrust
&gt; Have the user install docker Uhhhhhhhhh
PyPy support is the most exciting news.
I second pyQt. Here is a very simple short video playlist on you tube that will give you the basics of pyQt gui, and a little on its versatility. https://www.youtube.com/playlist?list=PLQVvvaa0QuDdVpDFNq4FwY9APZPGSUyR4 Video 10 is on style sheets. Video 11 is on the font widget. Verdi 12 is on color picking. Video 16 is on the designer. But honestly they are very short, and super informative, and I'd recommend you watch all of them in one sitting.
give it another 8 years
Let's have a look! 
The node.js runtime is bundled with Electron, and the Electron docs describe how to customize and distribute an Electron app: https://github.com/atom/electron/blob/master/docs/tutorial/application-distribution.md I am beginning to think about whether it would be worth it to figure out a way to bundle a python interpreter inside the Electron app, to create something that is truly dependency-free. I can't shake the feeling that there lies madness, however.
Maybe I am missing something. Find out where the value is set in the firefox profile, then change it before you start the profile with selenium. It has to be changed before you start firefox, because firefox selenium copys the custom firefox profile to the tmp directory before it starts. So it is running off this profile. I have not used the above techniques to set proxy password, but I used a similar idea to change greasemonkey scripts loaded into selenium. 
throw it up in a github or bitbucket repo - and share the link.
very interesting representation of the scale. Is there an easy way to get a sharp 7 in minor? Other than messing with the key signature. 
This looks awesome for testing scientific code! In the past, I've run into trouble with this sort of thing because matplotlib generates slightly different images on different platforms (especially Linux vs OS X). Do you have a good solution for this? In particular, I wonder if some matplotlib backends produce more consistent results. 
It has a crazy backend, too. I wanted to like it but it's very strangely built.
Fucking Jesus, the comment section... An idiot felt offended by the phrase: Which version would you like today, Sir? It **obviously** "exclude[s] half the population". The worst part? The authors CHANGED the line!
The easter egg already there is much better, IMO.
It would be really awesome to allow students to expand on this with object oriented code. E.g. let them create a robot object (perhaps using some pre-made parts objects such as wheels, which the robot would need to control in order to move etc.) and have them compete to make more and more efficient robots for solving a maze etc. If you do find the source, I'd love to see it.
It's one of the harder ones. Even competes with compiling Atlas + numpy + scipy from source and having it work with everything else you have. I was talking about using Python3 that comes with your distro, not one from Anaconda.
&gt; making the learning of Python programming more interesting What!? Is this article implying that python is _not_ interesting enough?
If you want normal non-technical users to install docker, it's probably not the user who is intellectually challenged :P
There are four kinds of JetBrains licences: community, personal, corporate and open source. The last three give you the pro version, the very last one for free. The only legal limitation is that you are not allowed to use it for proprietary code.
WTF ?! use Bottle over flask .... use angular over jquery .... use a simple browser over electron ... and you are done ! high-end gui ... A lot simpler, a lot faster, a lot ... better ;-) 
&gt; Using processes also adds the overhead of serialization. What's being serialized? Genuinely curious.
Yes, probably the second best python easter egg (after `from __future__ import braces`)
The upcoming Scipy conference is supposed to have a hiring area.
[Relevant xkcd](https://xkcd.com/353/)
It supports out of the box multicursor support. Not as well done as sublime though. Obviously this is something you *can* do in emacs, but sublime/atom make it substantially easier.
On Mac OS, it will work fine if you start it from the terminal. If you start it from Launchpad/F4 it won't find the linter, and you need to open edit the init script to add whereever it is. For me this is `/Library/Frameworks/Python.framework/Versions/3.4/bin/` instead of `/usr/bin/` or `usr/local/bin`.
Kivy now is really, really good. In my opinion, it's the best Python GUI library and it works on Android
My intention was to make a GUI library where you can make little python scripts have GUIs quite easily. It's not intended for really complex GUI programs, though I've tried to keep the raw TkInter methods exposed as much as I can. It needs to be rewritten to use grids (the layout using stacks and flows is a bit unpredictable atm, as it simply uses TkInter's "packing" methods), and I'll probably just rename stacks and flows to columns and rows when/if it's finished. But as it stands, I'm just keen to hear what people think; The main thing that makes it unique is the way it uses context managers (the 'with window:' e.t.c. blocks) to create windows, rows and columns. Where an element appears in the GUI depends on where in these blocks it is defined. There's also decorators for various elements - e.g. adding @button to a function creates a button which triggers that function when pressed (which I think is GENIUS!), and where the button appears depends on what context manager the function is defined in i.e. it's location within the window, stack and flow blocks. The text on GUI elements is made much more pythonic, so they can be read and changed by simply doing element.text = "whatever" rather than all the messing about you usually have to use with TkInter (you need to create a StringVar and manipulate that). I've also changed a few other elements like radio buttons, where the value of them can be accessed and changed in the same simple way (e.g. radio.number = 5) By the way, if you're interested in branching out, Ruby is a really cool language and the [Shoes](http://shoesrb.com) library is the easiest to use GUI library I've ever used, which is why I tried to make a Python version of it.
Any data that you want to share between processes.
http://stackoverflow.com/a/9061024/3330853 From Raymond Hettinger. It's not like it's a significant amount slower (at least with his example), though I'll admit I had remembered wrong and thought it was. It makes sense though, since it needs to make multiple passes through. 
 import tkinter.ttk as ttk style = ttk.Style() if 'xpnative' in style.theme_names(): style.theme_use('xpnative') last I looked I think I also noticed a Windows 7 look n feel now too. May as well plug my [little collection](https://github.com/rutherford/tikitiki) of tkinter widgets too In general, there's a lot to be said for a cross platform widget framework like Tk. Documentation is light in places for the python conversion but usually it's intuitive enough that you can guess your way around it. It's relatively simple, reliable and I'm a fan.
Today modern ui is something more than just using one solution. Modern ui is something more than standard Qt widgets. Doing standard application and styling with css is in my opinion **not enough**. You just can't ignore all that nice looking GUI's based on html5 and javascript. So, for Python best looking solution to modern UI for desktop systems is PyQT5 and using QML. You can have your GUI done completly in QML or there is **QOpenGLWidget**, it can be used to implement some QML elements into standard Qt widgets application with GUI created in QT Designer. So You can do some basic stuff in QtDesigner, add some code and styling and then implement QML views in that parts where standard GUI is not enough. I have made example how to mix standard GUI and QML here https://github.com/nuncjo/memento . There is also nice Google Material library: https://github.com/papyros/qml-material And my favourite example of QML GUI: https://github.com/Swordfish90/cool-retro-term QML has some nice features by itself but also allows to implement Javascript, Html5, etc. 
I think that the situation is better than one might think - at the moment I'm running tests with pytest-mpl (including the pytest-mpl tests themselves) on MacOS X, Linux, and Windows with a very low tolerance and the tests are passing. However, I do want to make sure that (a) the tests are resiliant to local matplotlibrc configuration (https://github.com/astrofrog/pytest-mpl/issues/10) and (b) we have a way to cope with changes in matplotlib in future. To answer your original question, I think that the PNG plots produced using Agg seem to be pretty stable.
My primary use case would be to replace shell script as much as I can. The ability to pipeline things in python is a big lack for this use in my opinion.
You are doing it right. Setting the default value to `None` and then testing for `is None` to handle special cases like this is the recommended, idiomatic approach (unless you want to be able to handle None is a valid input, then you need to find something else).
Okay, great, thanks!
Congrats!
Pretty cool. I like it. Looking forward to the grid layout.
This is how I imagine GUIs should work. No irrelevant and boring hassle with constructing a window and attributes and stuff... I like this. Realy simple and intuitive! Now I may finally make GUIs for my scripts. Thank you!
I use atom as my go to text editor. I use it sometimes for light python work when it doesn't make sense to use pycharm or ipython/ipython notebooks. Their autocomplete-plus adoption has made atom provide pretty good suggestions. One thing I use atom for a lot is markdown editing. These chromium/node editors work much better for markdown editing than sublime. Another thing I like is the amount of plugins being developed. The only downside is the max file size that I think they are still working on and it can run up the memory usage over time. If you have plenty of ram, this is less of an issue.
I happened to find your writeup, independent of your reddit post yesterday. I really am interested in being able to package up python/electron apps, and/or being able to split them up and run the web/python side in a traditional way. I did get something working in a similar way that you did, using this [react/electron starter](https://github.com/airtoxin/Electron-React-Boilerplate). I'd like to get a template setup like this for compiling the python requirements as well in the build process.
Cons: - Lots of implicit/magic state - Goes against [the Zen](https://www.python.org/dev/peps/pep-0020/) - Doesn't look like you can create reusable components easily (code is not data) - Can't be manipulated after initial definition? - Once the `with` context goes out of scope, there seems to be no way of accessing and modifying the UI state (e.g. deactivate a button) Pros: - Nice for quick / throw-away stuff - My #1 complaint about Tk is how the parent&lt;-&gt;child relationship is inverted in the API (child has a parent, not parent has children). This is kind of fixed here. 
I personally was thinking Angular might be a better choice than Electron, since it is already very commonly used.
Output: B is -1 b is 1 [^source](http://ideone.com/pcQHIf) ^| [^info](http://www.reddit.com/r/CompileBot/wiki) ^| [^git](https://github.com/renfredxh/compilebot) ^| [^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20http%3A//www.reddit.com/r/Python/comments/3bat52/how_to_have_default_values_dependent_on_other/cskkfsc%20Include%20your%20reason%20for%20reporting%20here.) 
Here are my suggestions: 1. On the line where it says `for file in os.listdir('/Users/kylehampton/Documents/python'):` The path should use os.environ["USERPROFILE"]+"\\FlickrDownloader". That way the folder is set and the same accross platforms. However, if you really want it in he same folder, you can use `os.path.dirname(os.path.realpath(__file__))` 2. If you are downloading a bunch of photos, the user probably wants to know a) how many photos and b) how big the total size is. 3. Finally, it is often better to prompt for the api key. If you really want to save it, write it to a new file. Going in and editing is less elegant in my eyes.
unfortunately, not as it's written. You could play around with the setting under gear, with Scale="Freehand" and Complex="True". and make your own scales -- but i haven't found a good way to represent the harmonic minor scale.
Thanks for your feedback, I'll try and address some of the cons; &gt;Once the with context goes out of scope, there seems to be no way of accessing and modifying the UI state (e.g. deactivate a button) Yes you can, because the classes inheret from the relevant TkInter classes, so you can always fall back on TkInter (which isn't super elegant, but it does work) For example, try this (for Python 2.7); from sandals import * from Tkinter import DISABLED def showMessage(): showInfo(message = "You clicked the button") with window(): with stack(): with flow(): label("Here's a button:") myButton = button("I'm a button", command = showMessage) @button("Disable button") def disableButton(): myButton.config(state = DISABLED) This will create a window with two buttons, and the second button disables the first, despite being out of scope (the first button is part of a flow - a row - which the second button is not a part of) &gt;Lots of implicit/magic state There aren't too many magic states (if I'm understanding this correctly). The only real hidden variables are to do with the GUI layout, and the way using stacks and flows lays them out. Using "with window:" can always be rewritten as "with window as w1:", and then you can access w1, which derives from tkinter.Tk. Similarly the stacks and flows derive from TkInter Frames, and you can access them the same way (e.g. "with stack as column1:")
No, now I've re-read the Zen of Python, it isn't really Pythonic. I was honestly trying to replicate the way Ruby uses blocks, which lead to me using context managers. So it's more "Rubyish" than "Pythonic", but for a simple GUI wrapper I think it's quite elegant :)
there might be an option in GIS software. can't dig up a solid answer right at the moment, but ArcGIS has address recognition ability, though its spotty sometimes. Arc is expensive though. QGIS is free version, but not sure on the methods. check out r/GIS - they might can help. 
It does turn out to be pretty handy, considering the industry use of things like Pyxl and JSX.
Thanks, yeah this was partly made out of the frustration of working with existing libraries, which have lots of boilerplate code, and have classes for things that seem unnecessary, making it unintuitive and just a pain to make even a simple GUI for a script. When I used Shoes for Ruby it was like a revelation - "THIS is the GUI library I want to use!"
You can use the google api to translate them. You get something like 2k free calls per day. I suggest writing something to cache the string you pass &amp; the return from google - could be like a sqlite db, or just a json file. It took me ~2 hours to translate 1800 addresses b/c it is slow (http). When I re-ran my script, I had everything already cached and the same 1800 records took a few seconds.
Awesome suggestions! Thanks!!
Well if you try to open that, pretty much everything other than vim is slow. Including Sublime Text and PyCharm.
the code is a terror
No prob. Instead of "USERPROFILE" you could also use `os.getenv('temp')`, and save the data in a temp folder. It depends on how long you expect the user to store the data. Temp is really only for temporary stuff.
I do agree that it is elegant.
Cool, thanks! 
is it really that bad? I mean, I understand why you would say that when it's formatting the date, but in other places it looks OK.
No. You can get a Licence key for PyCharm for Open Source projects for free if the project fulfils their requirements.
&gt; There are completely free IDEs and compilers out there. They're just worse than the paid ones, I wouldn't say that. They are just with different features. For example I personally use PyCharm but I also don't use a lot of its features. Heck I actually use things that it includes like linters and profilers externally rather than internally because they are more efficient that way (for me). I could go get a bunch of VIM plugins and replicate nearly everything I use with 0 cost to productivity, or hell just use something like Spyder. If you think paid IDE's are required for efficient python dev than I know a good number of developers that would like to have a talk wth you. Price != better or worse.
on minor mode just have a button or menu system to toggle between natural, harmonic, melodic 
A better question would be, "why isn't a compiler included in Windows?" Every other OS includes one.
jup, this is pretty much the only point where i consider R superior to python: reciprocal.defaults &lt;- function(a = b^2, b = sqrt(a)) { if (missing(a) &amp;&amp; missing(b)) stop('you have to specify either a, b, or both') foobar(a, b) } will work flawlessly there. ES2015 aka ES6 is also OK: it basically treats function withDefault(a, b = Math.sqrt(a)) { ... } *exactly* the same as function withDefault(a, b) { if (typeof b === 'undefined') b = Math.sqrt(a) ... } i.e. will let you depend later parameters on earlier ones, and passing `undefined` works like not passing anything.
How are you running this?
I'm running this on Spyder 2 which uses python 2.7.9 as the console.
That's not really what they were asking. What arguments are you giving the program when you run it (i.e. the command line)? If you aren't giving it any, then `sys.argv[1]` won't exist, and hence the error.
I've never heard anything about None being weird.
Again, we're not asking about the content of the script, but *how you are running it*. `sys.argv` contains the arguments you provided to the script on the command line when you ran it. If you are not providing any such arguments, then `sys.argv` is a list that contains one item, the path of the executing script, as you have seen. In other words, you are not providing any arguments to the script, so `sys.argv[1]` does not exist. For example, if you were running this from an actual terminal or console: python your_script.py some_arg In this case `sys.argv` will be `['your_script.py', 'some_arg']`. If you are running it from an IDE, there should be a configuration option somewhere to set the command line used. Or maybe you should just run it from a terminal. 
This isn't specific to an IDE, but it might help: http://pre-commit.com/
The example you gave is addressed in my blog post. Simply put, certain strings are "interned" in Python, meaning that the objects are cached and reused. Knowing when they are and aren't interned is something you're not likely to know, and which is implementation-dependent. So you're probably not going to want to use "is" to compare strings in most cases.
If you are running this from Spyder you probably look at http://stackoverflow.com/a/18523487 . It is a stackoverflow answer about how to run with a python script with arguments is spyder. 
Ok thanks. I will take a look at this. Was not sure because I am new to python. 
I realize this is not specific to the IDE. My query is about whether or not PyCharm has any facilities to make it any easier to use of those hooks. There are already several usability extensions for git. Was wondering if the same sort of thing had been done for the various hooks.
Because if b is 0 or False (or anything else falsey), it will be reassigned to a. You could get away with it if b is never falsey, but you're better off always using "b is None" instead
So much recursion! 
I use Disqus for my Wordpress blogs. I also use it (as a consumer) on other sites. I've never noticed any issues with lockups or crashes. If comments aren't your primary concern, I would go with Disqus. I have never experienced issues with spam.
You can use the link_error kwarg to attach another task that Celery will call if the task fails.
David Beazley's Python Cookbook has plenty of advanced topics. Also check out his talks on pyvideo.org and YouTube; they are mind blowing.
The name "sandals" comes from the Ruby library - Shoes?
"Repetition" is the word you're looking for.
[Uh...](https://github.com/robbiebarrat/Stock_advisor/blob/master/Stocks.py#L30) It might not but be intentional recursion, or helpful or anything approaching passable, but it is recursion. 
Cos I want to find some parts searching by regex? and it's a log file
&gt; My research online keeps leading me to python GUI options that look like windows 95. *Windows 95?* What's your research program like? That's probably not been true for at least a decade for all the most used GUI toolkits.
I was in a similar position as you a year ago. I am an Excel power user, but entered the MS in Predictive Analytics program at Northwestern University and I was first exposed to Python in my first class. We delved into machine learning (supervised, unsupervised, etc) using Scikit Learn. We also used Pandas, which was very comfortable for someone used to working with spreadsheets. I immediately saw the value in Python and I then had the idea to automate some of my existing business intelligence solutions (previously in Excel) using Python. Since going down that path almost 11 months ago, I have built a fully automated business intelligence solution using Python (pandas, numpy, etc), Tableau, and a Ubuntu VM on my company's internal cloud. I created the data pipelines using our existing ETL tools (SAP business objects) and created schedulers to send data via FTP to our Ubuntu server an a recurring basis. We also pull data from various APIs that come in JSON format as well. The work we used to do in Excel was essentially data wrangling/cleansing/munging by combining multiple datasources into datasets the executive team needed to manage the business (lots of VLOOKUPs). By creating schedulers sending our data to the server and performing the data wrangling via python, we were able to increase the frequency in updates to our existing dashboards and eliminated the need to hire more data analysts to build new reports or dashboards (allowed us to scale exponentially vs linearly). We then created some helper functions to work with Tableau's Data Extract API to create our TDEs and pushed the extracts to Tableau Server leveraging the tabcmd utility. Reports/Dashboards that only were updated quarterly are now updated hourly due to the automation python afforded us by going down this path. The reason for me providing my story is to show you the possibilities learning Python can have on your day-to-day job. Before I would say I was an Excel jockey (as many B school graduates become), but Python really changed my job and provided immense value to my organization. My business intelligence solution has been getting attention from other areas in my company and I am now in the process of helping others architect my solution for their organizations as well. Python has changed my career for the better and I can honestly say I love going to work every day because of it. Best of luck!
 **Realm of Racket: Learn to Program, One Game at a Time_** |||| --:|:--|:-- Current|$28.77|Amazon (New) High|$28.77|Amazon (New) Low|$22.43|Amazon (New) ||$28.67|(30 Day Average) [Price History Chart and Sales Rank](http://i.imgur.com/VxAlxNy.png) | [FAQ](http://www.reddit.com/r/PriceZombie/wiki/index) 
Python for data analysis is an excellent guide to the scypy packages 
Cpython internels by philip guo on YouTube is a nice series.
Apparently there is another project which does similar things but in far better way https://github.com/nojhan/pyxshell
Have you seen [tkRAD](https://github.com/tarball69/tkRAD) - Tkinter Rapid Application Development (RAD) library - Tkinter XML widget building Have a look at his other [Tkinter repositories](https://github.com/tarball69?tab=repositories). 
Radar plots with straight grid lines like this: http://macroblog.typepad.com/macroblog/2013/04/labor-market-update-muddy-waters-continue-to-run-deep.html
Completed it. I used it to fill slack time at work, waiting for a meeting to start, boring meetings, lunch time, conference calls, etc. 
Hi! I have a hand-picked list of python codebases with superb quality I keep at https://github.com/tony/.dot-config/blob/125d1f96d66bff25227b258f08277b749dc6fee4/.vcspull.yaml#L179. Some of my favorites are [requests](https://github.com/kennethreitz/requests), [werkzeug](https://github.com/mitsuhiko/werkzeug) and [flask](https://github.com/mitsuhiko/flask). I keep them up to date with a tool I made called [vcspull](http://vcspull.readthedocs.org/en/latest/index.html) because I like reading code. I think I'll expand on a few of the picks and why I like them as examples to study. All 3 of them all well unit-tested, documented (with sphinx + [sphinx.ext.autodoc](http://sphinx-doc.org/ext/autodoc.html) for API docs and python docstrings), they conform to PEP's, notable PEP8. They have integration with CI like travis, are python 2+3 compatible. - Requests is nice to see how they lay out the public API and modules. - Werkzeug, for how it works with WSGI and how it works with Middleware. The debugger. - Flask: for it's unit tests and blueprint system. Looking at [tests/test_blueprints](https://github.com/mitsuhiko/flask/blob/master/tests/test_blueprints.py) and [tests/test_basic](https://github.com/mitsuhiko/flask/blob/master/tests/test_basic.py) is a great way to see plain-vanilla [unittest](https://docs.python.org/2/library/unittest.html) in action. I created a [cookiecutter](https://github.com/audreyr/cookiecutter) package at https://github.com/tony/cookiecutter-pypackage-pythonic that adopts patterns in werkzeug/flask. Another codebase to look over is [SQLAlchemy](http://www.sqlalchemy.org/). You see the [SQLAlchemy section](http://www.aosabook.org/en/sqlalchemy.html) by the creator (Michael Bayer) in [The Architecture of Open Source Applications](http://aosabook.org/en/index.html). I like SQLAlchemy for how it abstracts the differences in various SQL languages, how it approaches various technical abstractions pythonically (engines, dialects, etc.) Edit: link fixed
Tried to complete it but it keeps freezing and failing to work. Can't complain, it's free and I've learned a lot.
Hey, I use IPython Notebook + Matplotlib + Pandas for my plotting. Usually the code for my plots evolve from various snippets. I started with the normal IPython console but I found it much more comfortable to handle these snippets with the Notebooks since you are able to change a cell and then execute this cell again. Also the markup enables me to annotate my snippets. I do not use the inlined matplotlib, instead if I hit plt.show() the normal matplotlib figure viewer pops up for each figure. Thus I'm able to view multiple figures side by side. 
I must say I got taken up by the IPython Notebook. You can develop your code in chunks cell by cell (including plots and assertions). This helped me formulate my ideas (especially when I knew what I wanted in the end, but now how to get there) step by step. And well, nice way to document and annotate your workflows....
 $ ssh -L 12345:localhost:8888 awesomely.powerful.mainframe.com $ ipython notebook --no-browser And then you go to http://localhost:12345 and have all the power of awesomely.powerful.mainframe.com right from your browser. Not to mention built-in directory browsing, text editor, easy starting/stopping multiple kernels and the fact that you can do that from every computer with ssh client and browser. 
I can confirm this works. I am a millionaire now. source: me. I was billionaire earlier.
last update was in 2012. great book though. I am waiting for the update now :)
Thanks, do you think it's important to have a job where you use it? Do you have any suggestions of how to keep busy challenging myself with new projects or tutorials? we have two kids and I work in an unrelated field. I was surprised how much I enjoyed 'coding' in an excel spreadsheet recently and thought something like python might be my passion. EDIT: I should add that I mentioned all of that intending to explain that I get very little time at nights before I fall asleep (2 hours maybe) that I've been devoting to codecademy. I haven't been so excited by learning in a while. The model feels great because it's just enough to keep getting it right..but I still feel like it's my code. It feels very creative. Getting it wrong also feels awesome which I don't find in many places. It's kind of like chess in that I even feel like my thinking in every day life is changing as a result
I'd appreciate your comments and suggestions for other solutions.
My workflow looks like this: * spend some time in meat space hammering out ideas. Whiteboard, dead trees, carve it into my flesh whatever. * pop open a notebook in my environment and prototype some code. * Once I'm satisfied with the prototype, I actually put it in a file (I have been lazy enough to do `ipython nbconvert --to py mynotebook.ipynb`) and clean it up some. * back to notebook to play with it, prototype some tests * make changes, add tests to proper file, run the whole suite. * repeat last two steps ad infinitum unless work or the girlfriend or the heat death of the universe stops me 
I haven't really used online tutorials that much. There are a ton of good MOOC courses on programming on sites like Coursera and EdX. If you want to get into Python programming, I would very, very, very much recommend [Rice University's introductory course](https://www.coursera.org/course/interactivepython1). They've created their own online programming environment at [Codeskulptor](http://www.codeskulptor.org/), which makes is very easy to get into Python programming without having to hassle with setting up anything. In terms of challenging myself, I've been using [Codeeval](https://www.codeeval.com/) quite a lot. I'm a competitive person, so the idea of being ranked against others appeals to me. Beyond that, there are sites like [Rosalind](http://rosalind.info/problems/locations/) and [Project Euler](https://projecteuler.net/). Once you become comfortable with Python, I would also recommend watching PyCon presentations (Hettinger's especially), perhaps reading books on the subject, learn about testing (I personally find test-driven development interesting), branch out into things like Django, etc. Obviously a real coding project would be best, but it's difficult to find anything that hasn't already been done and contributing to existing open source projects can be daunting and fairly difficult in the beginning.
+1 for prototyping, though I do it with ipynb for brand new things only.
For multiple plots in a notebook you can use matplotlib's subplot feature to put them in a grid. You can combine this with IPython's interaction widgets to play around with the data and have the effects show up simultaneously on each plot.
Thank you, I will check all of that starting with Rice. Thanks again
That's what I use it for to. While I'm trying to translate my scattered notes into code, I find it easier to be able to edit a single cell and rerun it, then kill an interpreter and reload it (or worse, just use `importlib.reload`). Once it's actually somewhat stabilized, I just edit it in vim and use either the ipython shell to play with it or import it into a notebook.
Likely a hardware bottleneck. Your reading from the same drive and it can only deliver data to memory so fast. 
Try to measure first how long time it takes to just read the whole file, page it in, and purge the cache first. My guess is that reading the file from disk is slower than parsing it.
try typing a 10 line function with multiple indents into the ipython shel... notebook is easier to execute code snippets and also to see charts maps etc inline. I typically start initial exploration in a notebook, fill up a couple cells with pieces of code and get them running. then move that over to a normal script. 
The problem isn't the processes. The problem is that this is an I/O bound task. It is reading something from the disk, which is inherently slow. Splitting it up into processes won't make the hard drive read the data any faster.
Your `.dot-config` link is down.
Personally I think 2x slower than raw read is pretty bloody good considering all the validation etc that pandas is doing.