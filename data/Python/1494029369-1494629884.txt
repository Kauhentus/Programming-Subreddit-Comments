All I know is it stopped working and I had to factory reset it. Maybe I did something else to anger it. 
Do you run the Python Hub twitter as well? https://twitter.com/PythonHub/status/860649363294564352
When I got the house to myself I ain't using no bathroom.
One suggestion I would make looking at your source is split your modules out into their own library files. Like you could have a viking_games.py that has all the game things, and viking_chats.py for all the chat-related stuff. Then you can just do imports and make your main program a bit easier to read. I might fork and put some pull requests on your todo list ;) Edit: Question, I see 2 decorators, @Viking.command and @Viking.event but I don't see classes/functions to go along with them? Am I missing something? Are those decorators generated from one of your dependency imports like the discord api?
https://pypi.python.org/pypi/pyxkcdpass/0.2.0 https://pypi.python.org/pypi/xkcdpassword/0.6.6 https://pypi.python.org/pypi/xkcdpass/1.9.5 https://pypi.python.org/pypi/python-ninethreesix/0.1.1 https://pypi.python.org/pypi/dpassgen/1.2 https://pypi.python.org/pypi/dicepass/V1.0.1 https://pypi.python.org/pypi/xkpa/0.1.4 That was just from a quick search. Is this some sort of tradition I am unaware of? :)
Sure, here you go :) num1 = float(input("What is your first number you would like me to calculate?")) num2 = float(input("What is your second number you would like me to calculate?")) calculation = input("How would you like me to calculate this?") def body(): if calculation in ["+", "add", "addition"]: answer = num1 + num2 print(answer) elif calculation in ["-", "subtract", "subtraction"]: answer = num1 - num2 print(answer) elif calculation in ["/", "divide", "division"]: answer = num1 / num2 print(answer) elif calculation in ["x", "X", "*", "multiply", "multiplication"]: answer = num1 * num2 print(answer) body()
 import random foo = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'] print(random.choices(foo, k=8))
There is nothing more practical about python's syntax for lambas than arrows. It is all about the cohesiveness of the syntax (namely close-to-english as possible) with the rest of the language. Consider haskell which uses `\x -&gt; x+1` compared to `lambda x: x+1`. 
Python is not an aesthetic language, it is based on being as-close-to english as possible. If you want aesthetic, use a language based in mathematics. That said, I use python for its incredible ecosystem and share your concerns. I wouldn't phrase it as *aesthetic* reasons, but rather I take issues with its terseness. Check out this blog post https://ekaschalk.github.io/post/prettify-mode/. It is only for emacs but satisfies your issue, and future issues you will certainly have given your priorities, using python.
When you only want to do something that doesn't block, threading is ok. Asyncio is better for when you want to have thousands of concurrent connections, where threads would be too inefficient.
I'm a java guy
This brings up another educational point that a string can be treated as a character iterator... while it is clearly more concise to import from string as done above, if you want to explicitly declare your own sequence of characters, 'abc' is more concise than ['a', 'b', 'c'] and works with random.choices().
But for things that doesn't block I should use processes because python can only run one thread at the time
I suppose in retrospect it's totally obvious that this would have been done before. Honestly, my motivating case was an ongoing frustration with "traditional" good passwords, as generated by password managers like KeePass. The xkcd thing was just the first algorithm that came to mind. If you'll indulge a bit of bragging, though, I've been through every library you linked, and mine is the only one with the feature that appends a digit to the password, which I saw as critical for real-world usage, with sites that require "letters and numbers"
you could use [schedule](https://schedule.readthedocs.io/en/stable/) or cron
Okay thank you! It was just so i know what im doing(im a beginner :3 )
Would this not be extremely easy to guess for a dictionary attack?
Write a separate process that performs the login and interaction with twitter. Keep it simple. Keep it secure. Use public key encryption. The web-facing part of the system that, presumably, lets users enter their twitter credentials only holds the public key. It encrypts the password, stores it in the database and removes it from memory. The process that connects to twitter has access to the private key required to decrypt the passwords for logging into twitter. Ideally, it will run on a separate machine with no incoming ports and no swapping. If it sends tweets it should rate-limit them and add a short identifying string. This way, even if the web app that tells it what to do has bugs or is taken over by someone the damage would be limited: they cannot get the credentials, send too many messages or send messages with arbitrary contents.
Thanks, i stumbled on your post looking for python training on reddit so this is perfect. I used the 372 key.
What is there to answer? It's common sense. OOP is just one way to write programs and not all programs benefit from an OOP approach. Are you guys not capable of googling something yourself? Why do I have to breastfeed you? Sheesh!
It's no wonder you feel that way, but you mistake me for the source of your issue. vOv i told you to look it up. Apparently you feel you know better... now you project your superiority complex onto me. Grats, man. It's noz me, it's you. Unlike you, though, I don't give a fuck, because this childish nonsense doesn't affect me ... so you can have the last word. It'll make you feel better. :)
I don't know how Python can interact with the API, I only know the APIs themselves. Presumably someone has written Python bindings for UWP APIs.
[Relevant video series](https://www.youtube.com/playlist?list=PLQVvvaa0QuDcOdF96TBtRtuQksErCEBYZ)
The gil doesn't work like that. You won't get any speedup by using threads unless during IO or C libraries that yield the gil. Your threads will still not block each other.
Using attribute-access for key-access is convenient for lazy programmers (and let's be honest, who among us aren't sometimes lazy?) but its also an abuse of notation and quite risky. Attribute access is intended to refer to fixed fields of the object, not arbitrary data keys. `dog.tail`, `car.engine`, not `employee_records.bob`. "bob" is not a part of the employee_records object, it is a key in a database. For all but the quickest and dirtiest of scripts, it is a good design to keep those categories separate and not conflate them as the same kind of thing. It is a poor design choice, since you cannot use attribute access to look up keys that aren't legal Python identifiers: `obj.class` or `obj.1234` will fail, as will `obj.` (empty string as key). You can't use attribute access for non-literal keys: # key access is identical, whether you have a literal or not obj['key'] obj[(mykey + '!').upper()] # attribute access is completely different obj.key getattr(obj, (mykey + '!').upper()) And it is risky too: key = 'update' setattr(obj, key) = 42 # later on... obj.update(new_records) 
Best practice is to not know or store the password. https://dev.twitter.com/oauth
Which wifi enabled switch did you use?
I think pipeline arithmetics should be mult not add. It could be non-comutative.
It is inspired by [dplyr](http://dplyr.tidyverse.org/), you can checkout the [documentation](http://plydata.readthedocs.io/en/stable). At moment the manipulation verbs only work with Pandas dataframes and support for other data stores (sqlite, postgresql, mysql and maybe more) will follow.
"formatting help" is available right under the box for comments.
The method behind XKCD-like passords is called "Diceware". The original Diceware wordlist is 7776 words long, so the article that you read, probably refers to that method. http://world.std.com/~reinhold/diceware.html Although I do agree with you on using random passwords and a password manager, you could use Diceware for everyday passwords. It should just be long enough. In 2014 the author of the Diceware method suggested 6 words for reasonable security.
https://bitbucket.org/ligos/readablepassphrasegenerator/wiki/Home https://sourceforge.net/projects/pronouncepwgen/ https://github.com/fireout/keepasssequencer/wiki
 - [Pypy embedding](http://doc.pypy.org/en/latest/embedding.html) - [Pypy sandbox](http://doc.pypy.org/en/latest/sandbox.html) 
 - `import requests` - discord.py uses asyncio. Requests is not async. This kills the bot. See: https://discordpy.readthedocs.io/en/latest/faq.html#what-does-blocking-mean - Why are you doing command processing in your `on_message` event AND commands ext command processing? Use ext only; move the guessing game code into the `guess` command. - `commands` command: d.py already comes with a help command (in your case you would do \*help). - `add` command: `await Viking.say(sum(int(x) for x in args))` - Other mathematical commands: Ignoring that using really big numbers kills the bot, just use a for loop or comprehension; not a reduce call. - Forecast command: The OWM API sucks. Use an OWM library. Don't include your app ID in the call either. Wrap the library in an [executor](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_in_executor). - `clear` command: You do no permission checking. Anyone could purge your channel of messages. - `status` command: You do no permission checking. Anyone could change the game of the bot to whatever they want. - `guess` and `summon` commands: Don't do command processing in on_message AND use these as commands. Just use commands ext command processing. 
As an alternative to something like LastPass, I would suggest checking out [LessPass](https://lesspass.com). It doesn't actually store any of your passwords. Instead, it derives a password for each site from your login and a master password. You can configure which characters it uses to generate each password, and you can increment a counter to get new passwords for each site. Those settings are the only thing stored on their servers.
2 times. One time here and one time in the Arduino subreddit. It's not an ad. They're useful info for the community.
It is if you don't save the result. The name of the function is wrong. If you're gonna pick get (what you did implicitly) or create bar, you should create bar because it has a side effect. The more time consuming the result, the more imprtant it is to cache the result. You're wasting memory and time.
CPython only runs one thread at a time. Here are some quick rules for CPython concurrency: 1. I/O Bound -&gt; threading, asyncio and multiprocess all work (some better than others, I tend to prefer asyncio) 2. CPU Bound -&gt; only multiprocess works (because of the GIL) Extensions *should* release the GIL when they're not interacting with Python objects, but there's no guarantee they will so you need to feel your way around that. With that said, I believe in Jython and IronPython you can use threads just fine to do IO or CPU bound work (but take that with a grain of salt as I've not used either).
&gt; From what I know async/await are made to replace promises Depending on if you're talking about Python or Javascript this wavers between "ehh, I guess" and "no". If you're talking about Javascript, this is no because that async/await is just a replacement for the `.then.then.then.then` that promises encourage (which in term was a replacement for the `cb(cb(cb(cb())))` that non-promise code uses). You can await a promise but not a generator. In Python, this is ehhh because you can await many things, including Futures/Tasks but also coroutines (either native coros or `asyncio.coroutine` decoratored ones) and anything that implements the `__await__` special method (which is what Future/Task does). In this case, `await` doesn't replace futures, it just expands the natively supported async toolbox. &gt; what's the benefit of using promises in python if we already have async/await? I can't speak to this library, but the `asyncio.Task` class can be used to run a coroutine in the background of an event loop. I've used this in aiohttp applications to do some long polling on a service and notify consumers or set a value in storage as needed. Futures can be generated in sync code, attach a completion callback so something can be triggered in sync land, and then completed in async land.
TIL about single dispatch. This will clean up a few of my methods so nicely. However, I agree with you than using the overload decorator would be better.
Or the pipe.
Reminds me a lot of pandas, altough I haven't used it that much,
God, I hope not. They're exactly the same as lambdas. &gt; There should be one-- and preferably only one --obvious way to do it.
thanks for the answer, pretty clear
Here is a speed comparison I ran vs. Pandas. The Jupyter notebook is on GitHub so you can run on your own machine if you would like: http://raccoon.readthedocs.io/en/latest/speed_test.html
The IDLE maybe? I think it's the same.
Anaconda Jupyter python notebook
A lot of programs allow you to execute code from within the IDE (anaconda, jupyter, pycharm... Other comments have more listed). The thing is, they are just emulating a terminal shell from within the program. It's still technically just running from a console shell, it just looks a little prettier. 
IoT Botnets usually install malicious software into systems by exploiting security holes in "pc-like" devices. This happens when the device has an ip address and some sort of high level operating system like linux or android. Microcontrollers, the target hardware of Zerynth, don't have linux-like operating systems, so it is very difficult to "install" something on them remotely unless the attacker gains access to the over-the-air update server (if the particular iot deployment uses one). In particular, Lora nodes don't have an ip address, so they can't be accessed remotely and, given the low bandwidth of the technology, are almost impossible to update remotely.
It's using pandas
/u/DontBeABadPerson is slightly positive. [view results](http://ruadick.com/user/DontBeABadPerson/) - Ranked #56179 of 83219"
To make things clear - do you want to get a tool or to make one?
Depends on how you want to present it, but maybe [Flask-Admin](http://flask-admin.readthedocs.io/en/latest/) will fit your needs. Take a look at the examples for inspiration on the [Github](https://github.com/flask-admin/flask-admin) repo.
Any language without function composition, function application, or piping infix operators I will have trouble considering aesthetic. What python does have going for it is its rich function signatures, * unpacking, its self/cls/static methods, and decorator syntax. Your english like languages examples aren't convincing. Those languages forgo any developed syntax/language constructs but are no more readable than well-written python.
If you're just looking for a sqllite management tool, there's a Firefox plugin. 
My friends and I are working on a project involving web scraping and analysis for NFL stats of the upcoming season. We started it two years ago and do it every year from scratch to see how much we've improved in our skill sets. Super pumped about it !
The author of a Python IDE intended specifically for beginners recently made an announcement post here about a new version http://thonny.org/
It needs a read-evaluate-print loop: import cmd import readline from math import * class CalculatorREPL(cmd.Cmd, object): prompt = "&gt; " intro = "Enter ^D to exit the calculator." def __init__(self): super(CalculatorREPL, self).__init__() def default(self, line): try: print(eval(line)) except (ValueError, ZeroDivisionError) as e: print(e) def do_EOF(self, line): print("\nBye.") return True CalculatorREPL().cmdloop() 
Just use an application for databases with a GUI. Navicat for example.
Just joking with you :) 
/u/EricAppelt is a great and through overview of the state of concurrent programming in Python. If you wish to read further with examples, I recommend Fluent Python's chapter 16-18. It covers coroutines, concurrency with threads and async. 
LMAO
Hey, just a heads up, if you put four spaces in front of each line, the formatting won't get messed up. Like This
SPAGNOLA DI AMARENA! My favorite.
A variation I often use is: class Foo @property def bar(self): if not hasattr(self, '_bar'): self._bar = do_heuristics() return self._bar
https://drill.apache.org or http://openrefine.org
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [mattigilmore/py3/.../**LoanCal.py** (master → 8ef19e1)](https://github.com/mattigilmore/py3/blob/8ef19e171fd910f1110c914b060f296c178adbc9/LoanCal.py) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dh7tqnp.)^.
Cool. Does anybody here use Sage? What's your experience?
I'm currently writing a similarly trivial app. I'm doing Django and tri.table and tri.form. But I'm one of the authors of those libs so it's easy for me :P
That is interesting. A quick glance over the documentation and code, you walk a tight rope. There are certainly many use-cases where this limited approach would be sufficient.
Pandas is specifically optimized for set-based/vector operations, if you're iterating your entire data sets often then you're possibly 'doing it wrong'. Try using apply where possible. One area that I also recently found optimizations was updating based on a second data set, where I wasn't able to use apply. I did find however, that I could build the updated data into a third data set, and then merge it en masse to the first for a massive speed increase. I use this same approach in SQL all the time, just hadn't thought of it with pandas. Iterators are rarely performant with data manipulation, and this same issue affects many SQL developers as well. In SQL the 'iterator pattern' is often referred to as RBAR (row by agonizing row) because of how slow it is. I often still have to iterate subsets of my data though, like split data into sets based on a unique column value, etc.
Over the air update via lora is officially supported only by linklabs symphony link proprietary network. You can find a lot of info about symphony security layer on the linklabs dedicated page https://www.link-labs.com/symphony. 
Seems to be proprietary.
Can I do something​ like import sage then use it in a regular jupyter notebook?
With GIL in picture, almost in every use case using asyncio should be better than multithreading. One thing that multithreading might be good at is that it might seem like simpler to use, but that often turns out to be false.
People shoot up with heroin of dubious quality and purity too, doesn't make it a good idea.
Link labs make good noises but fall short too. PKI for device authentication is good but a search of their technical documentation returns no details. Maybe since you are building on their systems you know someone there and can get them into this conversation.
Am I missing something here, or does the decorator-based single dispatch seem over-engineered to begin with? The example provided requires way too much cognitive load. Wouldn't it be simpler to do something like def fun(some_param: Union[int, str]) -&gt; str: arg_type = type(some_param) func_for_type = { int: _int_fun, # defined elsewhere str: _str_fun # defined elsewhere }[arg_type] return func_for_type(some_param) That pattern has worked fine for me with mypy.
It's not really a meaningful benchmark if you loop manually over the Pandas DataFrames instead of using them properly. If you want to add to a Pandas DataFrame like this, the way to do it is to build up a list of dicts, then append them all at once using `DataFrame.append`. If what you're after is an in memory database though, I don't see why you would use use a DataFrame instead of an in memory sqlite database.
I just want to say that mypy has been a great tool for me. Looking back at non-mypy-checked code, I'm always wondering what type(s) an argument might be. Even though mypy is still not anywhere near the maturity of, say, typescript, any non-trivial Python 3.5+ project would probably benefit from using it.
Maybe it isnt belongs to me? :) 
I am converting some java code to python. I am just getting started with Python, but I used Datasets for disassociated resullts from queries, or loading data from maps, lists, csv and marshalling to another table, or a spreadsheet or to CSV. When doing such things as forecasting, I have to iterate over the entire set and in simulation mode many passes over a subset. For my use cases, DataFrames has much functionality I don't need and is orders of magnitude slower in my use cases.
Honestly, I would throw it into Excel for filtering or a charting tool like Tableau for visualisation. The time you spent duplicating their functions in code could be spent doing analysis instead. Unless you have a special need they don't easily serve. 
Correct if you have the data prior to constructing the DataFrame there are a variety of smart ways to build a DataFrame in Pandas. The problem is that once the DF is built, adding rows is expensive because the underlying data structure is numpy arrays, which are fixed length. Any add to a numpy array requires a copy of the entire array. My use case was for recording stock data. At each step in a loop I need to grab the latest data points, append to the DF and then do some calculation (say an average). By definition I don't have all the data before hand because the data doesn't exist yet. Regular python lists are quick to append so that was the motivation to crate this package. Again each for its proper uses. Pandas is meant for analysis of static data sets, not dynamically growing them.
I process data in Python and then dump the processed data to json. Rendering it with React is easy and convenient for quick and dirty data set navigation. I use D3 for any visualizations. No server required so it's nice and portable too.
I would run cron jobs via Django to scrape the info. Here is a project I did for fun a while ago. Not very good but an example. https://github.com/imoran21/newzaggregator/
Thanks, this is helpful I will check it out. Just to be clear, there are 3 steps. 1) Log In 2) Select the report parameters (a url, followed by a drop down) 3) then you click download. Additionally would there be a way to use these modules to delete say the X number of oldest entries in the folder?
You would use a different module, but yes, Python can look into directories, find the dates associated with each file, and delete files.
I used to use it about 3-4 years back (for my bachelors thesis on computational number theory), but it was huge, hard to set up and would crash every 4-or-so minutes. It felt like a huge amalgamation cobbled together from a dozen or so different languages, libraries etc. UI was also pretty clunky, I think. As much as I dislike wolfram research (and closed-source software in general), I have to admit that mathematica is a far more well-thought-out and well-engineered alternative. The UI is less clunky, its faster, more stable, the syntax is less awkward (its still really awkward though), etc. At least that was my experience then.
That's what I figured. I really want a good Python module that can do symbolic computations.
Yeah. Everyone keep in mind that was 4 years ago. It's been polished and used it is used in pure mathy stuff. My main beef is that it's still on py2.
I don't think so. Its more of a bigger ecosystem. It's not really a single module.
[SymPy](http://www.sympy.org/en/index.html)?
Tried it. Nowhere near as good as Mathematica. I think there's just not enough open source developers working on this kind of thing. It's the one field of scientific computing where open source software is still behind proprietary. 
Because heroin of goof quality is so much better for you... I care far more about ease of use. I don t see a problem with it. Yes, it has limirations, but so does pandas. You can work around them.
Quite a nice picture for the post.
Agreed, I'm afraid.
No worries I completely understand! I appreciate it, this is super interesting. I've been coding awhile but the web stuff still is a little complicated to me. This is super interesting. 
No worries, yeah interacting with the web is a big enough jump. If you want to get some practice with some webscraping or anything just give me a message. What are you trying to do with Python at the moment? 
thanks! I ended up having to dig around for an update to my txt file. I'm messing around with comments now and running into another issue, but I think I need to also play with placement of my parameters for this. :D
Off the top of my head, PyCharm has marked things as unused even when I have initialized them in my code.
You really should ask this in /r/learnpython. Without seeing the erroring code there is little anyone can do. Post your question on /r/learnpython with the section of code that errors (formatted for reddit). At a guess, the source code contains what looks like a quote character but is actually a Microsoft "smart quote" which is not ASCII.
These are two good options because they don't require any additional work. Because your scraped data should follow some reasonable format, you should be able to search it ad-hoc via these tools. Drill is great because you can run the binary locally or later move to a distributed setup. If you can get your data into parquet via drill/dask/spark, you can use aws athena or dask/drill/spark to perform more efficient ad-hoc querying of the data. Another good option to something like drill is using dask as a poor-man's spark. ElasticSearch/Kibana is also a good option as an interface, but will definitely take more work to setup initially.
web scraping is easy. im still confused as to what you want to do. im guessing, you want to develop a scraper which allows you to not have the same 10 questions, but a vast array of questions. 
I think the best question is: is there a way to take advantage of this? Not necessarily a python thing, but a programming or concept in general.
I would really like to see this one.
Nice!, I've been dying to put something together in Sanic, and this is a great example. Were you able to do any performance metrics on it?
I was all set to travel back in time and help Guido get Unicode right the first time around, and then I read the page and discovered the "time travel" feature wasn't what I'd hoped it was. :-(
How did you get around this warning? https://www.gutenberg.org/wiki/Gutenberg:Information_About_Robot_Access_to_our_Pages At one point I was interested in making a Project Gutenberg related script but gave up because of that. Just curious.
Great question. The gutenberg-http API doesn't query the gutenberg.org site, as such there's no problem with gutenberg.org's no-robots policy :) The metadata queries are served from a local database (via the [gutenberg library](https://github.com/c-w/gutenberg/)) and all the queries for text bodies are served from one of the mirrors. Basically, gutenberg-http is a fairly thin wrapper around the gutenberg package which has been in use by various people since mid-2014.
Most of the operations are disk-bound since we're reading metadata from an on-disk Berkeley DB database. As such, the API's performance is necessarily limited. Sanic for sure helps, as do the SSD disks in the VM that I'm hosting this on. To answer your question more directly: I put together a [load-testing script](https://github.com/c-w/gutenberg-http/blob/af88a6ae813cbfbd0ab88b77125e34afd58d063a/loadtest.sh) which simulates N requests from M simultaneous users. Running the script tells me that the API can consistently serve about 20k requests in 40 seconds on a cold cache.
That preview looks like PHP or perl... Also is it actually normal to do `if(condition)` instead of `if (condition)` in C-like languages?
Well. I want to scrape the definitions and words from websites basically 
Ah ok, thanks.
Nice work! Filmed in shul? 
Augmented reality dreidel...
Nice. Thanks
Check your Python version. I'm guessing you're running Python 2? Edit : I say that because urllib.request doesn't exist in Python 2, it is Python 3 library. In Py2 you just use urllib, it was spit into urllib.request, urllib.parse, and urllib.error in Py3. So you're failing your import because you can't import urllib.request, and then if you fix that your request itself will fail because in Py2 you don't use urllib.request anyway, you just use urllib.urlopen() Edit edit : And to further that point, did a quick edit to your code and ran it on my machine. With those changes, it works fine. def get_page(url): try: import urllib return urllib.urlopen(url).read() except: return "None" def get_next_target(page): page = str(page) start_link = page.find('&lt;a href=') if start_link == -1: return None, 0 start_quote = page.find('"', start_link) end_quote = page.find('"', start_quote+1) url = page[start_quote +1: end_quote] return url, end_quote def print_all_links(page): page = str(page) while True: url, end_pos = get_next_target(page) if url: print(url) page = page[end_pos:] else: break print(print_all_links(get_page('https://processing.org/')))
Thanks for your interest! Can't really claim to be a law expert but maybe create some files/databases yourself and examine the data it extracts? for example use it on your own computer and see if you get your Firefox browsing data, Skype data, or document/image metadata...etc
I'm on Mac, and I compile and run the code through nano, in which the initial line to point out that you are coding in python 3 is #!/usr/bin/env python3 &lt;----- This is supposed to ensure it, however, I will just write the code in real time just to make sure. 
I have class factory methods for instantiating from JSON, Python objects yaml database queries, CSV and marshalling to same and to excel worksheets with defined or inferred column widths, a sqlite table. I am converting my Java class for crosstabbing. What operations are frequently performed that DataFrame is well suited for? 
OK, but that shouldn't have any influence over its presence in Python, should it? Regardless of how it may make sense in languages where there may be structural constraints to justify it, I'm feeling like it's inclusion in functools may be a mistake in Python.
Also here is a link of a pic of my code http://imgur.com/a/9Ceru
Nah, you're fine. As I re-read my comments I felt I was coming off as kind of dismissive lol. Anyway, were you able to get the code to run by just running the py directly in terminal? I'm on my Win10 laptop now, original code you posted is running fine there in Py3 when run directly from cmd prompt. Maybe try editing the try/except block to see exactly where it is failing? For testing purposes, can do something like... def get_page(url): try: import urllib.request return "Import Success" except: return "Import Failed" From there you can at least see if it is the import that's failing, or the call. Alternately, you can just ditch the import in the try statement and import urllib.request at the beginning, below the shebang line. If you do that and get an error on import, you'll at least know that your script is failing at the import... and if you're failing at the import, it's almost definitely down to figuring out why your shebang isn't being respected.
"still on py2" I feel like there should be a more up-front warning of things like this.
Nah shebangin Fine, lol. Alternatively, through your test I figured out that it is actually not the try and except statement, but its returning None under the if statement of start_link in the get_next_target function. I guess start_link must be equal to -1, which must mean that there are no a href tags?
well, writing a dumb implementation of both styles with the following requirements * Works for subclasses or similar * reports an error if used incorrectly I've come up with the following @singledispatch def dummyfunc(x:Union[int,str]) -&gt; int: # the signature here is incorrect to trigger errors on misuse raise ValueError("Input can only be int or str!") @dummyfunc.register(int) def dummyfunc(x:int) -&gt; int: return x+10 @dummyfunc.register(str) def dummyfunc(x:str) -&gt; int: return dummyfunc(int(x)) # convert and handle as int #--------------------------------------------------------------- def dummyfunc(x: Union[int, str]) -&gt; int: # we need to handle using isinstance to accept subclasses func_for_type = { int: _int_fun, # defined elsewhere str: _str_fun # defined elsewhere } for k in func_for_type: if isinstance(x, k): return func_for_type[k](x) raise ValueError("Input can only be int or str!") def _dummyfunc_int(x:int) -&gt; int: return x+10 def _dummyfunc_str(x:str) -&gt; int: return dummyfunc(int(x)) # convert and handle as int I'd personally opt for the former
How long do they give you to develop and send back the code?
If it's dictionary definitions you want, I'd suggest using an API. like [Pearsons](http://developer.pearson.com/apis/dictionaries) or any other api that might suit you ([link](https://www.programmableweb.com/category/dictionary/api])). Check PyPy for existing Python packages for you api of choice or just build one with [Requests](http://docs.python-requests.org/en/master/).
forget this garbage and do: import requests from bs4 import BeautifulSoup
I like the midi shooting stars.
Wait... Python for AR??!
Okay, I see what you are saying in regards to the exception portion of this. However, my only question then, is why would this code work for you and not for me. I mean, you ran it in python3, from what I believe you told me. So its interesting that it would throw me an error and not you. Seems like I am really missing something here. I even wrote the code in Idle just to make sure it wasn't due to terminal. Hmm....curious indeed....
At this point, I'm guessing it's a network issue of some sort. Honestly, I'd just try something simple like import urllib.request html = urllib.request.urlopen('https://processing.org/').read() print(html) and see what error message (if any) kicks out. If it's an issue with the call, we could be talking about anything. Firewall issue, proxy issue, router issue, etc.
would you please share your idea to make this document better and more useful?
Okay, here we go, and you are right. Here is a link of a picture of what is going on http://imgur.com/a/JcrdK Oh...I don't know if you are in another timezone, but I'm in United States Eastern Timezone, so if you are too tired, we can always try and figure this out tomorrow. Just putting it out there, haha. 
https://groups.google.com/forum/#!topic/pyglet-users/i5MLMrbPz-E 
What do you mean? How Python 3 looks like? Its available in python 3
Awesome use of Open CV
Wow awesome work! I wanted to do the same thing but hit a bit of a wall with downloading data from the bank itself. Is that bit still manual?
This is more like the strangest way to set a list. In the end you're calling sum(self.nums) which is the simplest way to add up a list of numbers.
I'm not sure. What is your overall goal for this site? 
&gt; I'm curious to see what interesting ways python can be abused. Then you will probably enjoy [this talk](http://www.youtube.com/watch?v=H2yfXnUb1S4) ([slides](https://www.slideshare.net/r1chardj0n3s/dont-do-this-24000445)).
You're welcome! Are there other tools out there that perform one of the many things your program does? If so, maybe a comparison of extracted data between the two would help with validation. Like, if there is already an industry standard(validated) tool to extract Firefox data (but maybe more complex than yours) and if both programs find the same data that could work to help validate it?
IIRC it was a six hour window.
well this is dope
.replace("{date}", datetime.strftime("%Y-%m-%d %H:%M")
I once had this problem. For what you want, beautifulsoup seems the best, not always use an API if possible as websites change their structure often and can be tricky to mentally scrape data from them. Here's an example of super easy scraping: https://github.com/neelkamath/hack.chat-bot/blob/master/commands/youtube.py And here's an example of super hard scraping: https://github.com/neelkamath/hack.chat-bot/blob/master/commands/get_poem.py As you can see, using an API would be better in both the short and long term but if you must use beautifulsoup
well done, boys :) would love maybe a follow-up blog post on what you did to get that
Does that comment come with a free piece of crustless white bread? Where's the fun in that?
It shouldn't matter, though. So long as my selection of a word from that list is sufficiently random, there's still enough entropy to prevent password guessing with today's hardware.. A hacker could know that I used this exact algorithm and still require many hundreds of years to find it.
I am using Beautiful Soup 4. Am I missing something?
Upvoted for a combination of python and s3rl.
I think I found the solution. The problem for me is not the code, but the link itself. Thank you so much for all your patience and help. 
try looking into PyPDF2 PDF formats are not the easiest to deal with (giving you fair warning) My thoughts would be to loop over all of the files, loop doesn't move to the next file until data is entered in your popup box If you or someone tech-savvy is assuming the role of the data entry operator, I would skip the popup box and just have a command line interface popup - personally i don't find making guis in python all that easy.
Actually, python has something called "sched" and its cross platform, same idea as cron.
[removed]
holy crap this is terrible
A lot of what I'm working on currently is data science stuff. Pandas, manipulating excel files and whatnot. I'm used to SQL, R and Tableau and seeing if I can replicate the same skills in Python. Basically trying to add some skills to the old resume before the big job hunt. 
The image it makes with hexagons and triangles is amazing! I just wanted to say I really really like your project, I hope you are doing well!
This. Or, use getaddrinfo, the example in python socket module shows how to iterate over its results. https://docs.python.org/2/library/socket.html#example 
I own two projectors, a webcam, and a computer that can run the program. I'd love to have billiards on my floor that I can roll away.
Brilliant! Well done Sir.
I'm a freshman
Did it do the trick?
I think so. The tricky bit will be how you build &amp; index the 1D array - I can't think of a fast and Pythonic way off the top of my head. Good luck! It's an interesting problem. 
I totally agree, I will make sure to add that sometime
More like... Python for computer vision? This is cool, but nothing particularly new.
It's because without really big training data the classifying of boundaries with opencv can be a bit crap, but give it time and it would get better
Something that works better than Reddit Overwrite. 
Look at BeautifulSoup. I've built a scraper from it.
* [Link to the Arcade Library](http://arcade.academy/) * [Example Code](http://arcade.academy/examples/index.html) * [Outline of the class](http://arcade-book.readthedocs.io/en/latest/)
These kind of algorithms don't vectorize at all and are usually very slow in pure python. I don't now if the operation you describe is at all common (to where someone would have implemented it already), but I'd recommend using something like Numba. Basically, you write the function to do this (the 2d to 1d transform and the reverse) in pure python, using very simple loops and what-not, then slap the @jit decorator (from numba) on it, and it'll compile it down into C code, making it run real fast.
Oh so like if i accidentally put in 2 quotation marks? What if i put in an apostrophe? Is that ok? This is really helpful ty
For box what happens when an attribute isn't available? movie_box.movies.Real_Genius Or is close movie_box.movies.spaceballs
You can also use telegram bots. (Telepot python lib)
This is the tutorial i used to get started http://www.pythonforbeginners.com/python-on-the-web/web-scraping-with-beautifulsoup/ As for getting sent to Yahoo, do you mean it scrapes data from Yahoo instead of the website you told it too?
&gt; Upon reading this I became enlightened. Different reaction than I had. Upon reading this, I had an aneurysm.
🐍
Ok, I think I need an advice. I just downloaded a kivy package for MacOS, precisely Kivy-1.10.0-osx-python3.5.dmg, copied the file to Apps folder and made symlinks. In the terminal I typed kivy and imagine my surprise, when I saw: mbook:venv jabbson$ kivy Python 2.7.10 (default, Feb 6 2017, 23:53:20) [GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin Type "help", "copyright", "credits" or "license" for more information. Why Python version 2.7? Any thoughts on this are welcome. Also mbook:/ jabbson$ cd Applications/Kivy.app/Contents/Resources/venv/ mbook:venv jabbson$ ls -al | grep .Python lrwxr-xr-x 1 jabbson admin 63 May 7 19:12 .Python -&gt; /System/Library/Frameworks/Python.framework/Versions/2.7/Python This was not the case for 1.9, it used to point at the right Python location.
Wowwww love this
54k lines of code is an indication you hate all humans. It's not code, it's a Unibomber manifesto.
TY FOR HELP. Found it
There are two *way* better options here. First, you could create a list of [namedtuples](https://docs.python.org/3.6/library/collections.html#collections.namedtuple). That saves you a ton of hassle when you're creating your "list of dictionaries." Alternatively, you could just use a [structured array](https://docs.scipy.org/doc/numpy/user/basics.rec.html).
Hey thanks. I am finally able to run but I still have problem importing the python packages.
&gt; Because heroin of goof quality is so much better for you... Lots of people manage the recreational use of heroin for decades, safely with no ill effects, and no worse an addiction than you or I probably have towards coffee. They're usually rich enough to be able to afford private doctors and a known source of good quality heroin, and to pay somebody else to take all the risks of being caught performing a criminal act. &gt; I care far more about ease of use. I care more that code is correct, rather than whether it was easy to write. Easy to write is nice, but not as important as it being correct. Good programmers should be lazy, but lazy programmers are not necessarily good. Prioritizing something that makes the code *less clear* for the sake of a few less keystrokes is lazy, bad programming. Working around problems with something that shouldn't be done in the first place is just making things worse. And for what? Just to save three characters on the rare occasion you look up a literal key: `d['something']` versus `d.something`. 
If the structure of the PDFs is predictable, could'nt you automate it so there is no operator input required at all?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Well, sure, *first* I had an aneurysm, and *then* became enlightened (apparentlly the aneurysm took out my "monkey mind", like a blow from a zen master's staff.)
Feedback is absolutely requested. I've got lots of coding experience, but much less experience writing libraries that are usable.
&gt; (Start on Upwork/Freelancer, charge a flat fee for the first couple projects) Is this good advice for starting out as a contractor/freelancer? 
I think that's pretty neat. It's a game coded by configuration. Not easy to parse visually of course. Maybe the creators used a tool to generate this code from other data sources.
Don't you think it might be better to find the difference between the current time and the alarm time, and then wait for that amount?
The general idea of making things more data-oriented here is always good, but putting it all in one 54,880 line Python file is sadistic.
I'm not sure how the guy above uses it but where I work we import sample data into the notebook and create interactive toggles with ipywidgets which controls the analysis calculations for the data which is then displayed in graphs created with matplotlib. We also use the LaTeX markup capabilities to document the analysis calculations.
Good job. How would you compare this library to the others, like networkx, graph-tool and igraph?
Yet another clueless contribution from somebody who clearly knows nothing about Python. &gt; In case of strings, if you want to manipulate content of a string. A work around is to convert string into a list, make changes, reformulate list into a string and return the string. String methods anybody?
Isn't Pillow the "preferred" fork of PIL? If you are restricted to PIL, you probably need to update it.
Neither. Research Institute. But I have helped TSO/DSO associated with our institute with some automation as well. It's so rewarding to see people so amazed at the power and efficiency of computers and code to do stuff "automatically".
Sorry. It is Pillow. I misreaded the message error because it talked about PILImage. Also, I think my problem is indeed because I updated too much stuff. I send a command to PIP to update everything. And then my app didn't run anymore. Maybe it's a path problem, since I'm using SDL2: http://stackoverflow.com/questions/40697876/kivy-unable-to-get-a-window-abort
print('URGENT') voila
You can't even write a proper for loop. Any use of range in a loop is a code smell, just have:- for ch in string:... Just in case your "tutorial" doesn't say it clearly, Python is pass by object and that's it, values or references don't enter into the picture.
There are Python libraries that don't?
This was a really good writeup. I like your casual writing style and that you went over the stuff that you tried that didn't work. And TIL about keras
If you want to change the actual value in the list, then you can't just iterate over the characters. You could however use `for i, ch in enumerate(my_list)` to simplify things a bit.
That's your view. There are many ways to solve a problem. And just in case you didn't bother to read Official documentation of Python , Python is Pass by Assignment. So I will recommend reading official documentation first .. here's the link https://docs.python.org/3/faq/programming.html#id17 
Thank you. Appreciate constructive suggestion! 
My implementation import time def fast_sum(*nums): for num in nums: if num &lt; 0: raise ValueError('fast_sum can only sum positive numbers') start = time.monotonic() for num in nums: time.sleep(num) return int(time.monotonic() - start) if __name__ == '__main__': print(fast_sum(2, 4, 6, 8)) 
You can do anything you like with the elements of a list as a list is mutable, provided that you leave the length of the list unchanged. You can't do that with a string which is why there are numerous string methods which always return a modified string, not the original.
Yes.
How does it compare, in terms of functionality and efficiency, to Networkx, which is also pure python graph library?
It's a framework that allows you to write apps once then export to desktop, android and iOS.
I just started with kivy, so this is very nice. Does this new version work with the existing buildozer and python-for-android systems? 
The `Image.tostring()` method was [deprecated in the 3.0.0 release of Pillow](https://github.com/python-pillow/Pillow/blob/6e7553fb0f12025306b2819b9b842adf6b598b2e/docs/releasenotes/3.0.0.rst#deprecated-methods) in favour of `Image.tobytes()`. Perhaps your Pillow version needs updating?
&gt; Does this new version work with the existing buildozer and python-for-android systems? Yes, actually these have been using Kivy master for a while due to Android-specific improvements in Kivy. We'll probably do new releases shortly, and these will go back to using the stable version (now 1.10) by default.
graph-tool and igraph are both implemented in C/C++. This immediately puts them in a separate sphere from PyGraph, since the core goal of PyGraph is to have a pure-Python implementation of graph functions. Additionally, their licensing is GPL, whereas PyGraph is MIT licensed. Networkx is probably the main competitor for PyGraph. It's pure-Python (AFAICT), is BSD licensed, and has a massive library of algorithms implemented. The only real selling point PyGraph currently has over Networkx is planarity testing.
It's a nice presentation that completely misses the point that many people *can't* upgrade to Python 3. New projects, sure, large existing projects that have existing maintenance budgets; no. **Python 3 fascism must end**
Oh shit you misplaced a comma!
Flask : 4 Django : 4 Nice !
Most of the truly big projects had plenty of time to move to Python 3, and they did. The lazy ones are stuck with an obsolete version. And they deserve it. Guido warned them 
Thanks a lot :)
&gt; Python 3 fascism must end This is the most ridiculous thing I've ever heard. You should go read about *real* fascism before comparing it to people saying "Let's get everyone we can on the latest, greatest shit" But what the hell do I know, I'm just another Python 3 Fascist coming for your rights to run 2.
Including DropBox, where Guido worked. So I guess having Guido ON THE TEAM wasn't enough to make them go Python 3. That's pretty damning I think.
&gt; If you somehow are writing for a Python 3 only codebase, I highly recommend making all your keyword arguments keyword only, especially keyword arguments that represent "options". What does that mean? "make _all your arguments_ keyword arguments only"? I can get behind that though...
Fun fact, I've been writing python 3 only code for so long now I actually forgot some of the features I use all the time just aren't in python2! There's some things you really just get used to as normal, like advanced unpacking - it's so good you forget how good it is, because it feels 100% natural. So for any holdouts out there: Python 3 is just python, only better.
Uhm, the [official dropbox package](https://pypi.python.org/pypi/dropbox/) has Python 3 support.
Overloading the / operator for use in Path is pretty smart. Well done to whoever thought of that
Working on a [dotfile manager](https://github.com/SuperCuber/dotter), I think its pretty kewl :)
Why is it that lru_cache will fail after 332 recursive steps?
What OS are they running? I think more people are locked by old systems than legacy codebases. If it's just a question of porting to Python 3, the threshold is lower than if you have to install an unsupported version of Python first, then port your code.
What does this offer over NetworkX?
Did you just assume my python version?
Considering it isn't the only way of doing it, and it makes sense aesthetically, I don't think it's as huge of an issue as the print function. In my mind, operators are mostly for convenience to begin with: calling `add(x, y)` or `x.add(y)` seems kind of silly when we can just use the + operator to get `x + y`. Similarly, we use forward slashes already when navigating directories via the terminal, so having to assemble a path by constantly appending `join()` seems redundant and silly. Using / is arguably cleaner, faster, and more closely relates what we say to what we mean. I'd argue that the main purpose of operator overloading is that: to increase both aesthetic, practicality, and logic. The / operator, with regards to pathlib, seems to follow all of those conventions. Print has no such symbolic representation, and given that it focuses on output, as opposed to program logic/structure, it makes more sense - to me, at least - to make it a function, as opposed to a keyword with the same precedence as `if` or `for`.
I actually use pathlib all the time and just use the joinpath() method because PyCharm understands the types better that way. I'm almost never chaining together more than folder.joinpath(file) anyway and I'm very often wrapping that with str() in order to pass it to something expecting a file path string. 
I'm not sure that's what the author meant though. Because in that case he would have written "make all your arguments", not "make all your keyword arguments". Because there is no such thing as "keyword arguments" when defining a function in python 3 really (excepting C extensions).. there's argument (which can be used as keyword OR positional) and there's keyword ONLY which can only be used keyword style.
Technically, we went from a print *statement* to a print function.
Really the only one of those I'd go through a significant amount of pain to upgrade for is asyncio. The rest just make things mildly nicer, if that (I use python 3 most of the time and I've still never gotten around to using extended unpacking). They also missed type annotations. 6 is good, but this principle doesn't go nearly far enough even in python 3 :(
`inspect.signature` and `inspect.getfullargspec` are the standard library references for this. To summarise: given `func(a, b=2, *, c=3)`, `a` is an argument, `b` is a keyword argument, and `c` is a keyword-*only* argument. It's possible to call `func(2, 3)` and the author thinks you should make people write `func(2, b=3)` to avoid confusion. If it was possible to use this in an API that still supports Python2, I think it would be a lot more popular - it's a great choice for internal libraries I guess.
I think you are maybe reading too much into that statement. My take on it was that keyword arguments are usually options (since they are indeed optional when you call the function) and as such calling them with their keyword is best both for readability and avoiding bugs. Therefore, if you have a function `def foo(x, y, foo_arg=None)` it should be written as `def foo(x, y, *, foo_arg=None)` to force that behaviour.
Ah, OK, then I see your point.
I hear python 2.7 is quite popular
Great to find someone with such a strong opinion, why would you never use BS and what advantages does parsel have?
probably this is the project :P https://github.com/tldmod/tldmod/blob/master/ModuleSystem/module_dialogs.py https://tldmod.github.io/
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [tldmod/tldmod/.../**module_dialogs.py** (master → 3c2dcfa)](https://github.com/tldmod/tldmod/blob/3c2dcfaa94b670da1a005a58dcfb90be723cfafc/ModuleSystem/module_dialogs.py) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dha6r9s.)^.
No, that's why there are distro maintainers.
I guess that would be a lot more efficient than checking every second... I'll give it a try, thank you very much
You have misquoted the OP. The OP said "making all your keyword arguments keyword only" and not "make all your args keyword args" This is OK: `def save_file(filename):` But this is not OK: `def save_file(filename, line_endings, enforce_acsii):` What the hell are all the arguments, and in what order to they come? This is what the OP is suggesting: `def save_file(filename, *, line_endings, enforce_ascii):`. The filename is obvious in `save_file` (what else would the first arg of `save_file` be?) and all the non-obvious option args are enforced KW so you can't screw them up. Of course if you have `save_json_to_file(jsondata, filename)` that's probably OK too (what else would the args and order be?), but the extra parameters for the JSON encoder should be KW.
Look like we fail our osx/py3 release. Sorry about that, we're checking about it.
Great! For you and for everyone reading this, such problems are very common when cutting/pasting code from web pages. Often web frameworks automatically do these changes. EDIT: This can also happen with some text editors, usually you can turn it off with a setting someplace.
Last I did scraping, I didn't know about Scrapy, so I used Beautiful Soup on my first projects and later on used [PyQuery](http://pyquery.readthedocs.io/en/latest/api.html) since it has more familiar selectors. Looking at Scrapy now, it looks like it has similar syntax. I'd probably try that out if I needed to scrape something, but I haven't had the need to in a couple years. The thing I disliked about Beautiful Soup is that it wasn't a syntax / api that reused a lot of the concepts from other syntax I already knew well.
Oh shit. TIL about pathlib. I've been using os.path...
op considers it good to read an entire file line by line just to get the first and last lines?
I love how people are downvoting you for the utter obscenity of such a frivolous suggestion.
Okay fine, then nearly *all* Python programmers are "confused" about this, because I've never seen code written as: def something(a, b, *posargs, **dfltargs): pass But I've *definitely* seen code written as def something(a, b, *args, **kwargs): pass Also, if keyword arguments really *were* all about *default* arguments, how would `**kwargs` even *work*?? The *entire* point is that keyword arguments get sent into the function as a dictionary and the function can then snatch the values from that dictionary input. Whether that's not what is actually happening under the hood is immaterial.
I knew about most of them. The only one that gives me the willies is using division as path joining.
Me too! I've been using Python3 for years, how come I just found out about this now?
&gt; The first argument could be A FILE. Just use duck typing by seeing if the object has a write function otherwise open it.
A composable print *operator* has never existed. And that's where your analogy's downfall lies.
It's a slideshow presentation that relies on a javascript library to display the slides
As someone who uses Python to do a lot of text processing and logging, I'm extremely happy about Python 3.6's string interpolation. Mostly so I can fit log and output lines under 80 characters. # python 3.6 logging.warning(f'Gotta retry the thing {thing} that I did: {error}') # python &lt;=3.5, good for pumping up the SLOC for performance review logging.warning('Gotta retry the thing {} that I did: {}'.format( thing, error )) When I hop back to a 2.7 codebase this catches me like every time.
I noticed that.
How would you do it otherwise? (Just to know)
It's a bit of a gear shift, isn't it. I think it's maybe trying so hard to be readable, that it actually gets less understandable, like [XTalk](https://en.wikipedia.org/wiki/XTalk).
any decent language will let you set your pointer to the end of a file, then you just read characters back from there
Actually learned new things from that presentation!
&gt; why would you never use BS The selectors system lack in flexibility, it is slow and its HTML parser is not really good for the modern world of opening a page in a browser and looking at what's there to know what to do. &gt; what advantages does parsel have? It uses lxml under the hood so that's good, except it uses lxml's built-in HTML parser which is even worse than BS. What I'd use is lxml directly (it can do [CSS](http://lxml.de/cssselect.html) and [XPath](http://lxml.de/xpathxslt.html#xpath) querying just fine, sure it lacks some convenience methods but overall it's much more broadly applicable and more useful some bit of syntactic sugar) [with the HTML5Lib parser](http://lxml.de/html5parser.html) so that you get the same tree you see in your browser and can properly use e.g. "Copy XPath" or "Copy Selector Path" from your inspector without having the entire thing fail before you've even started trimming it.
Yes, you have to read character-by-character to construct the line. I wouldn't call that trivial. (compared to e.g. `f.readlines()[0]` to get the first line)
I recently wrote a API client library for one of our internal products. I used this technique and I have been really happy with it. Very cool feature. 
Me three
Why then create a whole new graph library and not contribute to networkx, which is an awesome Python graph library?
Ever since I was a dev I dreamed of soaring over the Internet dropping hot sticky loads on disgusting Rust users.
ftfy: 10 awesome features of Python that you can't use because you still use legacy version
&gt; You'd have to back up the "keyword arguments are usually optional" part with statistics I think. I think it sounds either wrong or it should be wrong because using keyword arguments all the time would make code bases better. I don't have that statistics, but from experience the main reason to use keyword arguments are because the argument in question has a default value that is rarely changed. Are you actually suggesting that we should never write or call functions using positional arguments? Because that sounds incredibly annoying to me, and I don't see any gain from doing so.
In recent BS4 you can specify which parser to use; html5lib, lxml or some others.
Because it's BS
Beautiful Soup because it can also manipulate and output the HTML, so it is handy as a multi-purpose HTML processing tool. Scrapy does a lot of stuff for you, like automatic spidering, which can be handy if it does what you need. If you want it custom and flexible go BS4 and glue it to requests and maybe some concurrency code.
https://www.reddit.com/r/Python/comments/69ba93/how_have_you_automated_your_life_with_python_if/ 
I can't upgrade to python 3 because the modules I need don't support it. It has nothing to do with my preferences.
Primarily because it never hit my radar when looking for other graph libraries. Everything I looked at when initially looking at graph libraries had restrictive licensing or used compiled modules, which made them unsuitable for the uses I was envisioning.
I liked this [Data School Machine learning in Python with scikit-learn ](https://www.youtube.com/watch?v=elojMnjn4kk&amp;list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A)
Ah, you're referring to how node ids are constructed. A few thoughts there: 1) It's not documented anywhere yet, but generated node ids are honestly intended to be black boxes. They currently function as incrementing integers, but a future need could mandate they change to UUIDs, as an example. 2) Typically when looking at graph labels in the literature, indexing starts at 1. That makes starting from 1 for integer labels a bit more reasonable, because then you're not always running a mental transformation when implementing algorithms. 3) I actually already started using itertools and a build_complete_graph function to replace the existing code for K5, so your suggestion isn't out of sorts at all. Realizations after digging deeper into the code and trying to document things resulted in a number of implementation tweaks here and there. It's nice to know someone else is seeing the same sorts of improvements.
&gt; So for any holdouts out there: Python 3 is just python, only better. Isn't it slower than python 2.7?
&gt; They also missed type annotations. It doesn't have a chapter of its own, but it's mentioned in slide 66.
OP thinks they run a youtube top 10 lists channel
From what I remember that was only early versions of 3.0, and the recent versions are faster than 2.7.
Very cool project. However, it will probably need to factor in head tilt or other things. I wear glasses always. And while driving during the day, these are sunglasses. I haven't seen a video yet on eye detection through normal glasses and sunglasses. Might be very possible. Might not. That is one big hurdle for this. I was wondering of uses when I saw the blink detection a while back. This is certainly a cool use case.
According to the benchmarks it's slower in more tests than it's faster. https://code.activestate.com/lists/python-dev/143690/ I know for the application I use it for it is much slower in 3.6 than 2.7, but I have an unusual use case.
Thanks for the correction. I generally don't care much about my Python performance for low traffic CRUD apps using Django/DRF, as long as there isn't an egregious regression.
Fair enough. I use python for co-ordinating numerical code between fortran and C, so there's a performance advantage to using 2.7. Also, I prefer the print statement.
You can do stuff in them. i.e. `f'my name is {name.upper()}'` 
Sure but why even use BS at this point? It's not faster, it does not have a great api, it has neither powerful nor widespread selectors, what's the value-add, nostalgia?
Minor performance difference: keyword arguments take slightly longer to lookup than positional arguments.
No it's not slower by any practical definition - you can find some micro benchmarks, some are faster and some are slower, but on any real world program you won't notice a difference. On the other hand, Python 3.6 reduced the memory use of dicts significantly which is a pretty big deal. 
You said "surprisingly non-trivial" ... and now you've shifted to "not as trivial". &gt; Urban dictionary: Non-Trivial is sometimes used by engineers / scientist to (jokingly?) describe the extremely difficult problems that they are faced with. I would say that 4 lines to get the last line without having to read the whole file is still trivial. 
zed\_shaw\_irl
Ah good point, wasn't aware of that.
Someone said that the first argument was obviously a file name which indirectly pointed out that it wasn't obvious. Whether or not the hypothetical API could be made to handle an argument like that based on the type isn't the point because the point was about obviousness of positional arguments, not API design. 
Right, but those versions were compiled for different platforms with different options, etc. If I can't control what version of the LinAlg libraries I'm using or the JVM handling the arithmetic, how can I be sure that one version won't accumulate numerical error differently than another? Hence, this thread, as Matlab is closed-source &amp; proprietary, so revealing it's numerical "secret sauce", let alone others controlling it, is against MathWorks' interests.
It's smart, but I hate it. It's the only case of operator overloading not doing what you expect it to do. Whenever I see code like I always think "Why are you dividing things?!". Feels really unpythonic. I'd expect something like that in Perl. Still, it's only a minor wart on an otherwise excellent successor to Python v2.
Cool! As a user which would just make simple graphs, I'm more interested on how they would look like first :)
python 2 is officially supported until 2020. it's not legacy.
Sort of depends on what you're doing with it. One off thing? Yeah, why not. Pervasive use throughout the system? Nope. I, personally, find it harder to reason about code that does too much implicit passing of values and state. I've wrote code like that and am now regretting it rather often.
 def (positional_arg, keyword_arg=default, *, keyword_only_arg=default) &gt; [make] all your keyword arguments keyword only ⇒ avoid the second type of argument, use only the first and the last.
Two things, first numerical noise build-up is also being tested by those libraries as much as possible on different architectures so that's hardly ever a problem unless you link say LAPACK to OpenBLAS which has admittedly a somewhat less predictability. But still pretty solid. The other thing is that you might be confusing algorithmic stability or ill-conditionedness of the algorithm with numerical stability. If your algorithm is forward and/or backward stable, these effects are under control. Otherwise they would be a problem even if you ship it via Matlab. 
 1 point by highraja 1 day ago | link | parent | on: Applying Microsoft Cognitive Emotion Recognition M... Hi All in this Blog article, I used Microsoft Cognitive Services Emotion Recognition machine Learning Api to do emotions analysis of a video of Pakistan's Prime Ministers address to the nations. Found some pretty interesting results which I showed as visualizations, have a look and comment. Thanks
In the main application I use it for, it's about 8% slower than 2.7. 8% is a practical difference. It's great that 3.6 has some nice new features, but it's not the silver bullet people say it is. I know amongst my co-workers, there is a strong preference for 2.7 due to performance benefits as well. As long as there is disparity in performance, 2.7 will holdout in certain use-cases I think.
Except in cases where there is only one argument and in some few other cases, yes. Look at Swift for other people thinking the same. The gain is that if the function argument lists is changed all call sites that are not updated correctly will crash with a very nice message. Instead of silently doing something wrong. 
The generator examples missed the ultimate elegance def dup(n): yield from ((i,i) for i in range(n))
May I just ask why, out of curiosity? I can see disabling it for web *pages*, such as articles or wikipedia or other text-based sites. But there are legitimate applications on the web that don't fit into that category, and literally require JavaScript because that's how you add logic to websites. Disabling JavaScript altogether is like disabling runtimes for desktop applications. There are things, like this site, which literally can't work without it. 
1. There are keyword parameters, arguments and keyword only arguments. There is no "keyword arguments" that is different from those three. One can of course be sloppy with language but that is another thing. 2. See 1 3. That's not what I said. I said the reverse: that a lot of people are confused and think that there is some correlation between keyword arguments and optional arguments. 
There's way worse things than max line char length. Just imagine being a javascript developer...
Having experience with both, I find Djano's ORM much easier to use. As an example I find the whole declarative base thing a very odd construct of SQL alchemy, I don't like having a global variable floating around that all my models need to inherit.
There are a few operations that happen in python.
I've been trying to settle on an editor on Windows for a few months now. Work is Windows, home projects Linux, so ideal cross platform. Notepad++, Sublime 3, Atom and VS Code are all installed on my work box right now. I'm liking Code better than I had thought. The Python support is really good so far. I agree with you on the M$ thing, but Visual Studio is a good IDE, so I guess it isn't too surprising.
Quite frankly, what's the additional logic here, except fancy transition effects? I perfectly well agree with you, I'm fine with whitelisting any website I see an additional functionality in when enabling JS, but where's the point in making it mandatory if all you do is adding some fancy animations? In that specific case it would have been totally possible to build that fancy bling-bling thing on top of a low-fidelity site. Sure you couldn't just use the arrow buttons on your keyboard to navigate and would need to click actual hyperlinks on a website, but just displaying a text box makes the whole thing entirely unusable for anyone who *can't* use JS right now, for whatever reason. Most of todays web browser users don't realize this anymore, but technically it is possible to build websites so one could at least use a subset without granting someone code execution on their machine, especially since I need to enable JS just to see the link to the PDF version.
Since I've just clicked through the first 30 pages: Most of the pages are redundant, they will just show an additional enumeration list entry within just the same bulleted list, so why do I even have to click for this? Also there isn't even any fancy animations between pages. May I just ask why you think this couldn't work without JS? I could even display those lolpics entirely without it in pure HTML...
if you can meet the job requirements and solve business problems with good code and solid communication then you are good.
This is EXACTLY my point. Your first "keyword argument" is an argument with a default value. Not a "keyword argument". 
Just to be clear -- I am not stating preference of one over the over [just stating a fact](https://gist.github.com/anonymous/90b5a63137f07cda2b50682a3de83e23).
As per Edit2, honestly, in my opinion everything is good but I can't help but think of all the nitpicky stuff: it should be modified to support both Python 2 and 3, whitespace corrected in accordance with PEP8, and scapy/dnet dependencies satisfied with a virtual environment (accompanying requirements.txt file) instead of a try/except block. \* In terms of **actual content**, there's nothing not to love. \* Oh and for that matter, if you insist on using a try/except, catch a specific exception (ImportError), not all of them.
Again: that's my point. Confused and sloppy language is extremely bad in our industry. 
I sexually Identify as an unoriginal joke. Ever since I was a boy I dreamed of surfing reddit dropping shitposts and derailing actual conversation. People say to me that this has been really going on for far too long and and it trivialises gender identity but I don’t care, I'm a massive asshole. I’m having a plastic surgeon install a mountain dew dispenser, a catheter and and a poop shoot on my body. From now on I want you guys to call me “Logical Gamer” and respect my right to freeze peach. If you can’t accept me you’re a god damn tumblirina sjw cultural marxist liberal and you triggered lol?. Thank you for being so understanding.
Yeah i refuse because it's fucking 1,3 million lines of working code. DO YOU HEAR ME GUIDO, WHY DID YOU NOT MAKE YOUR SHIT BACKWARDS COMPATIBLE?! YOU FUCKING IDIOT!!
It's never being updated again... that makes it legacy. "Supported" just means bug fixes. It's 2000 years old; not likely you're going to find a new bug in it. 
You get down voted because most people on reddit are a bunch of junior non professionals who don't know what they are talking about. 
Now we need a "100 awesome features of Python that you can't use because you refuse to use Python". 
he's more like a python3 nazi
what? python3 runs just fine next to python2
That's slightly different than what they were doing: def dup(n): yield from ((i,i) for i in range(n)) &gt;&gt; list(dup(3)) [(0, 0), (1, 1), (2, 2)] Versus def dup(n): for i in range(n): yield from [i, i] &gt;&gt; list(dup(3)) [0, 0, 1, 1, 2, 2] 
jesus christ that was an obnoxious presentation. i think you managed to combine the worst aspects of UI in one swoop, so congrats?
This is worse than driving w/ my ex wife. &gt; No... just... just cut the wheel to the right. No... No your other right. just CUT... .omg... no... no now you're on the sidewalk... would you... no... no I'm sorry I was yelling...
Since when has the definition of legacy been unsupported? According to google: "denoting software or hardware hat has been superseded by is difficult to replace because of its wide use", fits perfectly to me. 
This was so confusing, since my mouse was unable to interact with the site. I just thought it was broken and checked the PDF, before I thought of using the arrow keys... Highly unintuitive. Does this work on mobile?
I made a script that converts video files with FFmpeg. The script downloads the files from my mega.co.nz folder, and uploads back the converted files. &amp;nbsp; My other project is downloading a list of ip's from blocklist.de and adds the ip's to the iptables rules for dropping the connection from these ips. &amp;nbsp; https://github.com/Readdeo?tab=repositories
Yarl does the same thing for URLs, I love it.
If they want to avoid the names `a` and `b` being a visible part of the spec and want to change them at will that seems like kind of the way to do it no? Maybe underscore prefixes instead wouldn't be the worst idea. 
Did you mean "pseudo injection"? I had a brief moment of terror at the thought of buggy Python 2 code auto-escalating to root.
This is done for clarity. Using it everywhere is obviously a bad idea. In c++ `foo(ture, false, true, true)` could really use keywords arguments.
Hey when you get this working perfectly so that it never loses money let me know ;)
a good sysadmin will tell you how
I just copied the snippet from the "Feature 3" slide.
Cool. Love seeing simply projects I can relate to
This is a very good example but I would argue in that case you should fix your code / make a settings class to make it clear what you are doing.
The python code is often changed, whereas the c / fortran code is static. The write time of the python code is more valuable than writing in a language that takes longer to implement. It makes no sense to use a slower version of python for no apparent reason.
I mean there are plenty of reasons, so "no apparent reason" is a strange thing to say. There is always a cost with using legacy versions. I would consider a language like Haskell instead of Python. Write time is just as low if not lower than Python, and much much faster than any and all versions of Python. I realize that right this second switching is probably not viable, I just like Haskell a lot lol.
pycharm
I will certainly do #1 but it kinda feels *wrong* to do #2. Is my fear justified?
why would you change def f(a, b, *args) to def f(*args): a, b, *args = args it reduces the number of required arguments to 0. granted it raises an exception when you don't pass enough arguments, but the exception is not the one you get when not giving enough arguments to a function: you get ValueError: need more than 0 values to unpack instead of the better TypeError: g() missing 2 required positional arguments: 'a' and 'b' which is misleading
Honestly if you care a lot about speed python is not the language for you.
You can just return the generator expression directly, no need to use `yield from`.
That's exactly right. I [just helped someone else with a similar problem](https://www.reddit.com/r/learnpython/comments/69z9fs/error_main_thread_not_in_main_loop/dhakdge/) which uses a global variable for the data, a loop in the child thread to update the data, and a loop in the main thread to show the result as a graph. 
Unreadable on mobile :(
Don't forget the libraries written in FORTRAN 77.
Pycharm is good but a little heavy. I recommend visual studio code
Are you telling me you never googled **Python networks** or **Python graphs**?
&gt; I mean there are plenty of reasons, so "no apparent reason" is a strange thing to say. I'll rephrase. It makes no sense to use a slower version of python when none of the new features are useful for the application and security is not a concern.
It's a piece of software that runs physics simulations; I'm the only person who uses my code. With the turnaround time on publishing papers often being tight, I need a nice mix between fast writing and reasonable performance. Python 2.7 fulfils that nicely enough at the moment for me. 3.6 was too slow when I tried porting over Christmas.
I started working on a project inspired by yours and it's almost done! I'm trying to get smoother driving by using controller data and a different model (nvidia model with batch norm), recording data from the controller and screenshots are already done (using code from your project for the screenshot!), training the model and predicting from new data too, but i'm having a very hard time actually sending what i predict to the game, only way i found to emulate a controller was by using a program called vjoy and interacting with the c api, but it emulates directinput instead of xinput and games seem to ignore or not work properly with it, once i find a way around this it should be ready for release :) Getting tensorflow + tflearn to work with gpu on windows was quite a pain, but working on the project itself was very cool, thanks for the inspiration and for the awesome videos!
This is a key point. Python isn't about code performance it is about developer performance. If you start talking about Python being slow, you really need to ask if it is the right language to begin with. 
In the video you mention that you only feed the current frame to the convnet and that in the past you tried taking the mode of the predictions on the last 5 frames. Instead of that, you should try feeding the last 4 or 5 frames to the networks as input at each time-step, this way the network has some indication of where the car is going, right now as you have it the network needs to extrapolate the future direction of the car from a single frame.
Best wishes with your project, I'd like to see it when done!
+1 for vs code
It's impossible to state definitively what I did years ago (if you note the repository history, PyGraph was started 2 years ago), but it's not that odd to think that it didn't show up in my search results, that it slipped through the cracks when I was looking through the results that did come up, or even that I rejected it at the time for some reason I can't recall anymore (for instance, I could have read outdated information about its licensing, which changed from LGPL to BSD in 2008, and rejected it based on that).
&gt; You can recover that 8% and more simply by buying new hardware. The code already runs on a couple of last gen Xeons so, that's not particularly feasible at the moment. I use 3.6 at home for side projects, and there may be things that improve productivity but I've not come across any that are useful for my purposes at the moment, and to be honest whilst I understand the argument for consistency, the print function is so damn annoying to type compared to the print statement. Old habits die hard. I've looked into Rust and Julia, but neither have as developed a scientific library as Python. Swift I haven't looked at because I don't think it runs on Windows.
Bill Nye the Python Guy
&gt; "annoying having to run python files that require it through the terminal instead" Man, if you don't like using terminal, Python may not be the language for you. Usually the better environment is a simple editor (VIM, emacs, vscode) and a good terminal emulator opened within the virtual environment of your project. Development in Python requires a lot of terminals and other ways of doing it will not be good for learning or evolving with the language and platform. Don't be afraid of the console! 
I'm just learning Python from a c# background, this has been helpful for learning some of the tricks and nuances. Thanks for including example code!
 #Django from django.db import models class Person(models.Model): name = models.CharField(max_length=64) #Flask db = SQLAlchemy(app) class Person(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(64)) Do you really think Django version is much easier to use? Or were you using Flask without [flask-sqlalchemy extension](http://flask-sqlalchemy.pocoo.org/2.1/)?
I've done similar things to get a `singleton` object with some added class scoping. I don't think I ever changed a value, they were more likely constants. In a simliar vein you should also look at `@staticmethod`. 
Exactly. Which is part of the reason why I have generally moved away from Python. Turns out most things I make can always benefit from being a little faster. Now for a long time I still picked Python as I did not enjoy working in Java or any similar faster language, but once I found Haskell and realized I could have faster dev time and much faster performance I pretty much abandoned Python. 
It was fine for me. Just swipe to change the slide. 
Sorry I meant I had experience with SQLAlchemy as well as Django's ORM, I haven't used flask. However the way Flask does it from your example is pretty similar to what I meant with the SQL alchemy's declarative base. I guess I shouldn't say Django's is any easier, because it isn't their both quite easy, however I still think Django's way is cleaner. Importing the model class from the framework itself is much nicer than having to create a weird variable that all your models must share IMO. With flasks way you would have to create some database.py file and within that have # database.py db = SQLAlchemy(app) and then in each of your models from database import db class Person(db.Model): ... Unless you throw all your models into one file, which isn't bad if you only have a few models, but after a while it might make sense to split them into different files. Its just odd to me that SQLAlchemy makes you create a variable that will most likely need to be made globally available to all your models. I'd much rather just have it built in to the framework and importable from there.
[Freelance] Looking for a Python developer with Django experience to help us out with a new project we're starting in the next few weeks. Ideally, developer will be located in Canada, but open to other locations as well. Start date likely late May, 20-30 hours per week, 8-10 weeks duration. Successful completion of this contract may lead to either continued project work or alternatively full time employment. http://domain7.mytribehr.com/careers/view/56
I have not used Bokeh much or looked at the code to see how it handles the scaling, but I think I could be used in some capacity. I tried to avoid classes so that it would be easy to wrap around for a full scaling system or just use some of the isolated functions.
Could you elaborate a bit more? Are the people from these training programs getting placed and hired and are a lot of the training programs poor?
Apologies, I didn't realize you operated with a whitelist. You seemed to be suggesting that you were unable to use the website because you had sweepingly disabled JavaScript across all websites. I thought it was more commonplace to use a blacklist so that sites such as news sites with annoying ads or long page load times could be added to remove all that bloat, which is certainly a valid use case. The "additional logic" I was referring to is present in advanced web applications, such as Facebook, GitHub, etc. where there are user inputs that need to be validated, additional requests to be made without reloading the entire page (such as infinite scrolling in Facebook), or user interaction logic to make the site easier to use; basically I'm talking about logic you'd have in any other user-facing application. Also, many of these kinds of websites are built using frameworks like Angular and React, where the entire content of the page is built using JS. I'm not just talking about "fancy animations", which are a very small and unnecessary part of client-side scripting. I do agree that web developers should probably handle the case when scripts are disabled. For things like web frameworks, using server-side rendering or a static page wrapper can alert users when they need to have scripting enabled to be able to use the site. And requiring JS to get the PDF link is really stupid and counter-intuitive. However, the amount of people who disable scripting is so small that most developers don't even think about them. I do not agree that there is any significant number of people who literally do not have the ability to run client-side scripts. All popular browsers have had JS enabled by default for the last ~20 years. The only people who disable JS are people like yourself who have concerns that make them want to disable it manually, and are perfectly capable of reenabling it when it is required. **TL;DR**: I have no beef with disabling JS under certain circumstances; I just want to assert the difference between a web *page* and a web *application*, where the former doesn't require scripting, and the latter most certainly does.
How is this better than the official pandas [documentation](http://pandas.pydata.org/pandas-docs/stable/visualization.html)? The examples look suspiciously similar.
Even then, it's not Python's performance you're really dealing with.
Then can't you throw db = SQLAlchemy(app) into a global settings file somewhere?
I have been using this very handy table diff/comparison based panels in pandas. But panels are deprecated! Any idea how to port this? http://stackoverflow.com/a/23088780/2230844
Python really needs its own certifications like Java, I'd say keep all your programs or scripts you make to show to people, also it all depends if you can do what a employer wants. Say they need a web dev for a website,, it would be good for you to go into the interview with a mock up site you made using python and showing all the cool stuff you did or how you can improve there site, style and security. Because Python don't have certifications its always good to show what you can do.
I would use: ``` def f(*args, a, b) ``` Given that `a` and `b` are meaningful names. This won't work ``` f(foo, bar) ``` But this will ``` f(a=foo, b=bar) ```
If you need something to work on, I was planning on adding an hhtp request to print the name of the song from the YouTube video, would be great if you could help
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Please post in /r/forhire or in the monthly job board.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I do admire your sense of humour. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
If this is something you're doing all the time, then maybe it's worth the time and effort to recreate `readlines` for reverse, but it's likely not worth it when you can brute-force it in like 2 lines.
I can help you, I'm still learning too though. I'm quickly finding the best way to learn is just to try making stuff using different libraries etc. Take a simple program you understand how it works and mess with it. Basically if you know the syntax for opening and closing files, you'd pull the HTML from the page, then use string manipulation to get only the text between &lt;io&gt; text &lt;/io&gt; or whatever tag YouTube uses for the title Import requests R = requests.get(YouTube url) R now contains the full (messy) html from the page, then I would look up how to search a text file for specific text. Let me know if you need any help with any of your projects 
Unless you are talking about a function that you are passing a point, I would want longer variable names for clarity. ;)
clearly....
I appreciate your response and i understand that you have invested your time in this. However, I strongly suggest merging any novel algorithms into networkx and continue there as a contributor. As it is, you are just replicating a portion of networkx functionality.
 (lambda a, b, *, c=3: None)(4, 5, 6) # Fails (lambda a, b, *args, c=3: None)(4, 5, 6) # Works... but c=3, oops! Style one gives you keyword-only arguments, and does not silently discard extra positional arguments. Style two will silently discard them unless you `assert not args`, which makes mistakes easy.
Master, what is this?
My boss don't let me do no Python 3. That's why I don't do Python 3. When my boss says ok, then I do it. I refuse because I like getting paid.
You don't get it. Keyword-only arguments should not be used most of the time. And it is not unnecessary code if it tells us what code does. In c++ I would make enum with flags. Settings class or enum with flags - still more typing than keywords.
Things which would also cost more money for Dropbox to admin and support, and the entire point of something like RHEL is that you outsource those costs to the OS vendor. Are you perhaps an idiot?
I want to make a good documentation about python for other programmers
The operator overload is really stupid, but it's the only bad part I've seen (and are completely optional). The IO helpers are really practical as replacements for the cumbersome C-style os.path functions. 
most laptops are still 1366 pixels wide, which only fit 80 chars on half the screen at a readable dpi.
&gt; Note: you can change the format to use the brace style Unfortunately this is a program-wide matter of logging configuration, so in practice you usually have to stick with `%` interpolation.
Well my macbook pro fits ~110 ok, and that with a reasonably big font that can be made smaller.
I said "most laptops", which is kinda the opposite of​ "the most expensive laptops"
I have seen the series. While your tutorials are generally giving awesome ideas, I'm considering most of your tutorials as not that good for starters. In this case already the recognition of the streets doesn't get enough love. It could have been a complete own series. Since this is hard work for many months, a simple game like flappy bird or Super Mario would give a beginner a better success. In the case of downloading finance data, you haven't use classes which prevented a reuse of the code. I found your tutorial because I searched for an idea to download stock data. I made for myself immediately classes which updated and cached stock data transparent when necessary and offered the plot of a stock. This was simple and would have been a great demonstration for use of OOP. Most of our problems are problems which are well solved with OOP and you should really use more classes. 
And the site is crap on mobile... 
On my mobile it doesn't always register the swipes and sometimes go back a slide instead of forward... 
When you use ( ) instead of [ ] in a comprehension statement it creates a generator (generator expression) there is no tuple comprehension in python.
It's currently driving against a tree. As in full speed against a tree...
There are no tuple comprehensions in Python. The expression (int(x) for x in argv[1:5]) is a generator expression. It creates an iterator object that is essentially the same as calling `iter()` on the equivalent list, however the advantage is that values are calculated lazily as needed and not all stored in memory at the same time as they would be with a list. To actually create a tuple, just use tuple(int(x) for x in argv[1:5]) `tuple()` accepts any iterable as an argument, and the generator expression does not have to be enclosed in an extra set of parentheses if it is the sole argument to a function. As for your specific problem, those two lines should be equivalent as long as `argv` does actually contain at least five elements. Is it possible you ran it with less arguments when you got the error? I might do something like this: if len(argv) != 5: raise ValueError('Command takes four arguments') left, top, right, bottom = map(int, argv[1:5])
Always wanted to buy a mass amount of energy drinks, a couple pizzas and see if I could push through one of these 10-15 hour videos in a day.
&gt; So the whole thing takes overall O(n^2) time. You mean without lru_cache? lru_cache acts like a storage in dynamic programming in this example.
Nope, I mean because you need `O(n)` additions, and each takes `O(n)` time. Addition isn't `O(1)` for integers that aren't fixed size.
If you need to check the type of something, it's not duck typing. Duck typing is programming against an implicit interface so that you don't need to check the types.
Two things: 1) Resolution isn't the important thing, unless its VERY low, screen size is what matters. 2) Idgaf about the entire world, I care about the people that will likely be contributing to the same project as me. Which is mostly my peers (pretty much all can handle 100), or the general open source community (generally also can handle 100, because they aren't randomly distributed within the world)
Thankfully I've never had to read a file from the end.
Nostalgia? Or legacy? It is not apocalyptically bad so why replace something that gets the job done? It doesn't have to be perfect.
Does anyone know of a pandas subreddit? 
Interesting presentation, once I figured out how to advance to the next slide. Scrolling didn't work, and there was zero indication how to go to the next slide. I finally guessed correctly that the arrow keys would work. I can only imagine what mobile users have to do. Non-discoverable interfaces are an abomination. Even if you don't want to mar your visual purity with buttons that users can click, there should be some instructions on the first page on how to advance. Having a PDF version is nice, but does not absolve this UI crime.
Except they didn't say to check the type they said to check the presence of the write method, which is definitely duck typing. Is this case the type of that argument is a string or anything with a write method.
I finally learn how to use the evil that is .ix for good and then they deprecate it. FML
People are asking what tool they should use, why would you suggest, nay, recommend, a library which is visibly and unmistakably worse than the alternatives?
(Notice that inspect.signature() doesn't return anything with a name "argument". It has "parameters". So I'll ignore that function going forward) Let's take a concrete example: def foo(a, b=1, *, c, d=1, q): pass inspect.getfullargspec(foo) returns FullArgSpec(args=['a', 'b'], varargs=None, varkw=None, defaults=(1,), kwonlyargs=['c', 'd', 'q'], kwonlydefaults={'d': 1}, annotations={}) I don't see how you can argue that b is a "keyword argument" based on the output of that function. The documentation for getfullargspec has only ONE mention of "keyword arguments" and the full thing it talks about is "arbitrary keyword arguments" which ONLY applies to a parameter (or "formal argument") of "**kwarg_name_here". To summarize: you just pointed to a source to back up your position that directly contradicts what you said. That's not a good idea!
Keep up the good work sentdex!
It's a bit hard to explain, but for me the rule generally is: Use a tuple when the number of elements is known, elements don't need to have the same type. Use a list if the number is unknown but all elements have same type. Generally these days I don't use tuples at all anymore though and just use https://attrs.readthedocs.io/en/stable/.
[Hiring] Software Engineer (Python), Full Time, Amsterdam Are you thé new software engineer pro at a technology company in Amsterdam: * Develop and maintain our real-time bidding platform: 100 servers in 2 continents * Face scalability and high-performance challenges every day * Work in very short development cycles with a small team GET THIS JOB: https://blog.mobpro.com/software-engineer-python-eng/ Are you a experienced Software Engineer with Python skills, **living in The Netherlands**? Check the job function here. Pm me if you're (or know) the right woman or men for the job.
Interesting. I didn't realize the inertia of infrastructure is so great even in the Linux / startup world. I incorrectly assumed this was more representative of large traditional corporates and/or Windows world.
Does it have to be better? At least these plots have the added value of being suspicious.
While fibonacci is universally used as the prime example for recursion, the recursive version is not very efficient. If you care about speed or memory usage, an iterative version would help def fibonacci(n): f1, f2 = 1, 1 for _ in range(n-1): f1, f2 = f2, f1+ f2 return f2 
&gt; What should I be able to do before I apply for my first programming job with python? Highly depends on the field. Python knowledge is not enough to do the job, domain knowledge is the key most of the time. Be it web dev, be it dev ops, be it testing/quality etc. Python is but one tool in your toolbox. If you can show that you have the skill needed for the company, they will hire you for the position. 
Yeah, maybe one could use `-&gt;` as a func chaining op.
try ast_literal
"Passing An Argument" I accept my bad ! Regarding question about interview, as I mentioned it's just a trick. The reader took it like a universal solution even after saying it's a trick, that's why I asked the question. Of course interviewer asked to replace characters in string without using string methods
pm me about what you need and I'll give a you a quote
It seems very promising to me, although a bit confusing initially. I wish they supported HDF5 in the same way pandas does. 
Just to point out: `--no` and `no--` do *not* do the same thing in C and C++. They decrement the variable `no` certainly, but the first one does it before using the value in a statement, and the second one uses the value first in the statement and then decrements. They are thus called the *pre-decrement* and *post-decrement* operators. Using them on their own does achieve the same goal, but you can't assume they do the same thing.
I remove these things because we had a big vote about it and it was decided as a community that those is what we'd do. I get no enjoyment out of it; it's the equivalent of being a garbage collector. In the scenario you cooked up, there's nothing that would prevent you from following the rules of the subreddits you post in. I understand that you're mad that your rule breaking post got removed but that's no reason to act so poorly.
I'm glad it's gone. There are too many ways to index dataframes. 
Thank you! I guess I have to learn what ast module actually does. Do I understand correctly that I can use it to implement my own syntax or did you just mean literal (safe) evalualtion ? ( sorry for potentially stupid question, but I have very little experience/knowledge in this area ) 
&gt; For obvious reasons I don't want to evaluate JS nor Python Syntax. What are those reasons? I can't come up with any. The example you gave is valid in both Python and JS and `eval` is *not* evil unless you use it extremely carelessly. I'd say it really depends on what you define as "simple math formulas". If you're only going for basic operators (+-*/) there's no reason to create a new language. It wouldn't even be much of a language in the first place. Instead you can just clarify which features you want to allow and apply some simple checks to reject input that won't work in both languages. Things get a little more complicated if you want to use common functions (sqrt, sin, log, etc.) but you can easily wrap/alias them in both languages to make them available under the same name and signature. There's an [interesting talk by John Resig](https://www.youtube.com/watch?v=H4sSldXv_S4) who did something very similar to evaluate users' JS-code on the learning platform Kahn Academy. He goes into some technical detail about how to do this safely using a combination of eval, the with-statement and web workers. On the Python side of things `eval` and `exec` already offer parameters that ensure that the user input can only access what is explicitly allowed. For example `namedtuple` in the standard library's `collections` module uses `exec` in a smart way. Bear in mind that "defining a language" is a lot more work than building a couple of filters around `eval`. Writing a parser + interpreter is an error prone process and you're essentially reinventing not just the wheel but more importantly things that both Python and JS can already do very well by themselves.
Their [documentation](https://pandas-docs.github.io/pandas-docs-travis/io.html#io-feather) makes it sound like the feather format is stable, but the [feather GitHub](https://github.com/wesm/feather/blob/master/README.md) seems to state that the format may change this year. Anyone have a better idea of using Feather for long term data storage?
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [wesm/feather/.../**README.md** (master → 8872294)](https://github.com/wesm/feather/blob/88722946a93d03469a943a59e2300e0c9efeb79d/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhbpsfx.)^.
What problems does Grab solve that Scrapy doesn't?
The future is literally RIGHT now. 
Bringing another dependency just for diff output seems too much.
Good clarification, I should have mentioned that more explicitly. Thanks!
There is https://www.reddit.com/r/datascience/
You may be right and thanks for your post. I will give it a second thought (and see what John Resig has to say). I very much like the idea of replacing/unifying syntax before evaluation. What I don't like is dealing with stuff like brackets and oder signs that you can't always filter out. &gt; On the Python side of things eval and exec already offer parameters that ensure that the user input can only access what is explicitly allowed. For example namedtuple in the standard library's collections module uses exec in a smart way. Didn't know that. I'll check it out. I guess I'm a bit paranoid, but there are actually some reasons why I aim for a simple meta language: * "carelessly" is a little bit to close to "unintentionally". I work with a team of coders and not everyone is on the same level of comprehension (as it usually is in most teams). We work mostly with personal data and simple "no eval rule" just leaves one less thing to worry about. Space left for code injection is almost never intentional. * we want to give it to the end-user. It's maybe not an obvious reason not to use 'eval' but giving the user to much power may cause mayhem. * Third party language seemed to me like an reasonable solution for abstraction layer. (Rather than translate find something that both languages already understand) * Big enterprise systems do that - I know , I know ... This argument sucks. But almost every bigger application does that for large amount of different reasons. Be it dialog scripting or calculation - you usually see some sort of framework or language.
Not to start any sort of flame war here, but the spirit of the both operators are the same and you can always work with one (mentioning edge cases is probably meaningless). We know they are not the same on all sorts, but the primary work of both is __same__.
default argument. def f(a=4): pass
I use R for pandas-like visualizations.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Wait wait wait...I can't compare everything to everything in Python 3?! And that's considered an *improvement*? So now I can't simply pass sort() an arbitrary list and know it will succeed? I have to sanitize every list??? Somebody must be crazy. Is it...is it me? Seriously, this seems so terrible to me that I feel like I must be crazy.
Even beyond a PEP8 thing, the new line suggestion originally comes from the [posix spec](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_206) defining what a "line" is: &gt; A sequence of zero or more non- &lt;newline&gt; characters plus a terminating &lt;newline&gt; character. At one point lines not terminated by a new line could have been ignored.
What about using something like [plastex](https://github.com/tiarno/plastex) to evaluate LaTeX to python? https://www.sharelatex.com/learn/Mathematical_expressions 
There are examples on the net how to use it. ast.literal_eval handles arithmetic in Py3 Or there are examples on stackexchange how to handle the error in py2
You talk about "keyword argument" when you call the function. See https://docs.python.org/2/tutorial/controlflow.html#keyword-arguments
If you don't have to deal with Python2 code you don't need to learn Python2 and it's probably better to invest your time in something else. Maybe bookmark [Porting Python 2 Code to Python 3](https://docs.python.org/3/howto/pyporting.html) just in case you need it one day.
&gt;Honest question: Should I learn Python 2? Honest answer: No. Python 2 is dead except for some late adopters. Kinda like IBM mainframes which are still running well and doing their thing yet it would be stupid for a newcomer to learn zOS and its assembler. 
If you ping 7.7.7.7 within the response, it returns 100% loss at the end: Ping statistics for 7.7.7.7: Packets: Sent = 1, Received = 0, Lost = 1 (100% loss), Thanks for the answer!
Do you know of any tutorials or the likes for implementing my own? 
Interesting. The only time when I've felt like using Python 2 was for a machine learning course. Everything was soooo different
Grayed out just means it's unused. Once you actually invoke it in your code, it will stop being grayed out.
With that much passion involved one would think you ran a flower shop.
If you care about performance then you are using wrong language.
that's still checking the type in the case where the interface doesn't match, which makes for an unintuitive and fragile API. The saner option would be defaulting to a file-like and having an optional string argument: def save_file(file=None, *, filename=None, ...): if file is None: with open(filename, 'w') as file: return save_file(file, ...) # do actual writing
Because sometimes the details you hyperfocus on aren't that important. 
Of course in a closed environment that would be the case. But for a general rule, like open source projects that could have people from anywhere working on them, 80 chars is still the best. Even big screen laptops have the same resolution. Only the VERY expensive ones are shipping with full-hd or higher resolution (and most are only available in the US or Europe). Using small fonts with low resolutions makes the fonts very pixelated (anti-aliasing only makes it worse) so it's very hard to read.
This is terrible advice. eval/exec in Javascript might be safe thanks to Javascript's powerful sandboxing (and even then I wouldn't trust it, there are far too many Javascript exploits for my liking, sandbox or no sanbox), but I can all but guarantee that the same is **not** true for Python. Using exec or eval to evaluate mathematical expressions from user-supplied code is a quick way to be exploited unless you are *really, really careful*. You might be able to secure Python by using features like an OS chroot jail, in combination with all the other tricks for avoiding code-injection attacks, but at that point just writing your own arithmetic expression evaluator is **much** simpler and far less likely to end up with your server owned by spammers in Russia. Your estimate of the difficulty of these things are backwards: [writing a parser in Python is easy](http://effbot.org/zone/simple-top-down-parsing.htm), but [securing eval and exec against code injection attacks is super-difficult](http://tav.espians.com/a-challenge-to-break-python-security.html). &gt; apply some simple checks to reject input Again, that is completely the wrong approach. Do not use a blacklist of input to reject. You should reject **everything** unless it matches a whitelist of input which is safe. 
This is insanely slow, hours in and they are only teaching the basics. I didn't watch it to see how much detail they go in to but I don't think they can go into that much detail. 
Is this what people that work on Jerry Lewis' telethon do during the rest of the year?
i've taken the first course and it's great. going to take the second one soon! 
It's a slideshow, in which multiple slides are used to show step-by-step processes. It could be written as a long single page article but would require refactoring the content.
Everyone knows bing is for porn
Please check out /r/forhire or our monthly job thread.
That would be a question for the PyQt/PySide developers. In theory, you can use Swig to wrap your C++ code to make it callable from Pyrhon. It seems like a bad idea to wrap a GUI. Typucally, you wrap some computationally intensive thing.
&gt; Do not use a blacklist of input to reject. You should reject everything unless it matches a whitelist of input which is safe. That's exactly what I meant by "simple checks". For example, a couple of regular expressions can ensure that only input that matches a very straight-forward format will be evaluated. The advantage of this approach is that you actually *can* use regular expressions, which is not possible if you want to write a complete parser + interpreter. Consider the following simplified example: import sys import re from math import log, exp, sin, cos inpt = sys.argv[1] functions = {"min": min, "max": max, "abs": abs, "log": log, "exp": exp, "sin": sin, "cos": cos} pattern = "(?:[0-9j,.+*/%() -]+|" + "|".join(functions) + ")+" if re.fullmatch(pattern, inpt): result = eval(inpt, {"__builtins__": {}}, functions) print(result) else: raise SyntaxError("Expression not allowed: " + inpt) There's not much harm you can do with this. The whole point is that you only need to allow a very minimal subset of the language which isn't able to access any functionality that hasn't been explicitly added. The talk was about evaluating simple mathematical expressions, you don't need access to the file system for that. The checks are simple because you don't actually have to worry about the validity of the expression, you just make sure it contains only things that are definitely harmless. Of course you can't just blacklist a few random cases and then feed anything else straight into eval. That's not being "really, really carefull", that's just common sense.
Yes, you can build your C++ as a shared object, and Python can link that in using ctypes.
Holy Jesus H on the cross is it ever, can't zoom in to see the tiny text without moving a couple pages back or forward.
&gt; Let's take the previous example further. Instead of using the default print() statement, we can use click.echo_via_pager() Python stdlib has a solution for this, `pydoc.pager()`, it's what help() uses. I went to reimplement this function in a program a while ago then I realised that help() loads a pager on its own, so it must be in stdlib. Unrelated note, something else that python has? functools.lru_cache, a decorator that caches the result of a function based on its arguments. Something else that I've reimplemented in the past. stdlib has so much cool stuff.
An eleven hour video should probably be a little more detailed than that. Maybe start with sand. Where does sand come from and how does it turn into a CPU? I have a hard time believing this video would provide more value than 90 minutes on learnpython.org. 
&gt; It's the only case of operator overloading not doing what you expect it to do. The only case? How is the `%` in `"%d" % 1` a modulo?
It sounds like you didn't read the rest of the comment thread, you should have a read of that before making stupid remarks. 
For anyone with a little previous programming experience I absolutely recommend Derek Bananas videos. No bullshit, straight to the point, understand the fundamentals of any language in an hour. https://www.youtube.com/watch?v=N4mEzFDjqtA He's always my go to whenever I want to learn a new language 
This is [the second entry in the r/learnpython faq](https://www.reddit.com/r/learnpython/wiki/faq#wiki_python_2_or_3.3F). :)
kiosk browser for my unis pc pool. we've been using chromium for that for years but i got fed up with it not behaving es expected. first thing i've ever built in python but pyqt really makes it simple.
Use the reply button instead of creating a new comment.
This looks cool. Do you have any benchmarks comparing to the usual culprits (e.g. pure numpy, cython/numba)?
PM'd you
One of my few approaches to Python 2 was in some Machine Learning course. People said most of the libraries and real life applications where available only for Python 2, since the research made for them came from many years ago. Is that actually true? I mean, if I make some big research project in Python 2, would it be that hard to port it to 3?
I forked [this gist](https://gist.github.com/Azeirah/9611830) a long time ago for stuff like that. I don't think I ever actually tried it TBH. 
Do you actually read the guidelines or try to solve problems on your own before posting anywhere? This subreddit is not for this, by general decree of the people who are part of this subreddit. If you want these kinds of posts to be allowed, get most of the community on your side. I only remove them because we got an overwhelming number of people asking us to do it. To be honest, I don't think it's useful to do so, but I do it because the community made a decided effort to make this rule happen. I'm just a caretaker, friend. I try to do what's asked of me here. You are in the overwhelming minority; people do **not** want to see posts like this.
Sir, website doesnt provide an api for development. which will be the best language that can be used?
Dude 900p is fine for 100, the sceeen just can't be too tiny. 
I started playing around with a Raspberry Pi and made a Tetris game on a small 11x5 LED matrix Code at the bottom https://martinfitzpatrick.name/article/scroll-phat-tetris/ Was a lot of fun, nice break from serious coding. 
&gt; Do you actually read Did you actually read my message? So, imagine I was in various ways disabled + almost blind + cerebral palsy + disabled in some manner + "internet poor", ie, typing this in on an old slow phone and not a desktop on fiber fiber That you can say the people in my message could just resubmit suggests you didn't. And you missed the point of the message too, which is that a pythonista would write a bot to shuffle messages, while a mentally ill mod would arbitrarily willy nilly delete content. So what to do? That would be to: a) let inappropriate posts stay with a warning and guidance b) write a bot to reshuffle and resubmit them Heaven forfend some poor schmuck forget that r/python IS NOT ABOUT ASKING questions re: python. Of course their posts should be removed! So yeah, I am more interested in telling moderators who remove content they acknowledge was good content off, then playing by their idiot stackoverflow sociopathic moderator wanking rules. 
HDF5 might be your best bet for now if you're primarily using pandas. I'm curious about parquet, I can't seem to find much information about how it differs from feather.
What do you mean by this? &gt; a pythonista would write a bot to shuffle messages, while a mentally ill mod would arbitrarily willy nilly delete content Are you under the impression that we can move things between subreddits? Because "a pythonista" would probably know the limitations of the system that they're using (this isn't possible).
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Yeah, I misread. That was my bad.
There are at least three ways of doing this: 1. Ask the admins to be able to do it from the mod console 1. Visit /r/redditdev and add in the ability yourself 1. Write an Android/iPhone/AWS lambda function to do that for you. &gt; It would then be useless, because that person wouldn't get replies. You have as little imagination as you do competency. "Dear foo, your question, though very interesting, was in the wrong reddit. Rather than just delete it like a bunch of automatons would, we have resubmitted it here, ___, so that others in the appropriate forum can read it and answer it." &gt; All your issues could have been solved by merely reading the instructions and rules. However, you participated like an idiot and now you're angry because I'm not holding your hand. I'm not angry. I am always saddened to find what clueless moron fucksticks "rise" to the level of moderators. Asshole arrogant unimaginative moderators are truly what make reddit suck.
That would be a default keyword argument, I believe. Looking at that syntax, are you coming from Matlab/Octave? 
Sure, you just have to ensure that your app can use the same version of Qt that is bundled with PyQt5, and then set up your app to load the Qt libraries from the PyQt5 folder instead of the ones you've been bundling yourself. Then you can remove those so the only Qt libs are the ones that belong to PyQt5.
[This](https://pypi.python.org/pypi/keyboard) is what you're looking for.
&gt; Now let's look at your suggestion: a bot to inform people that you've posted on their behalf. We would certainly want to clear that with any other subreddit that we post to. In general, this would be met with a lot of other moderators banning the bot, and the bot would then be useless. So you write yourself a nice letter addressed to the mods of learnpython. &gt; Dear r/learnpython mods &gt; &gt; We at r/python would like to write a bot that would let us "resubmit" questions about python that we feel are more appropriate to r/learnpython. &gt; &gt; We want to do this when the questions are good questions that deserve answers, but right now all we can do is delete them. &gt; &gt; We've written this bot, here, as a start, feel free to examine it, play with it, and criticize it. &gt; &gt; We would like to let this bot go live, but before we do so, we are asking for your permission, and would like to know what additional requirements you would have for it. Do you still complain to mumsy when you run out of toilet paper? Jebus.
Additionally Python 2 is the way to go if performance is primary concern. The standard Python 2 interpreter is faster than the Python 3 interpreter in many cases. And PyPy better supports Python 2 and the Python 2 based variant of PyPy is faster than the Python 3 based variant.
Self? Don't think it's quite right but it's the first thing that comes to mind.
Working on a Webscraper, that brings back stock news via a keywor d from specific stock websites.
He has excellent videos. But in this video he did classes at the end totally wrong. Not pythonic way at all. Just saying... - He set `__name = None` outside of the class instance. - He's created `get_name() ` and `set_name() `. These types of setters and Getters are for another languages. Not python. Python has `@property` decorator. The point is, everything in Python is visible, nothing is private as he said. You can, without a problem, set the `__name` to anything without the `set_name() ` method. - He used `toString()` method that 1) violates PEP8 for naming functions (this is each persons decision, just mentioning) but mainly 2) is totally wrong because `__repr__() ` method should be used that returns what you want just printing your class instance like `print(dog)` and not `print(dog.toString())` Again, he's got awesome tutorials, brilliant presentation, but beware of this part :-)
Building a new monitoring system from scratch. Focused on consuming data from APIs, not system level checks (ie, RAM, CPU). System is plugin based, checks are defined with yaml config files. Tired of not having a monitoring system written in Python that doesn't do what I want it to do and isn't crufty.
As far as I have seen, py2 &gt; py3 in speed is an unsubstantiated opinion based on something stupid like the speed of 1+1. Do you have anything to back that claim up?
What are the benchmark results? Seems like an incredibly bloated implementation, but I'm prepared to be surprised/impressed.
ubuntu has supported apt-getting py3 for *nine years* so saying that python 3 support for linux is just coming online isn't reasonable.
Yeah I think he comes from more object oriented programming languages. I like his videos because they give me a basic overview of all the important syntax. When I'm just getting started with a language I don't care much about the stylistic details. But yeah I agree those are some fair criticisms.
Cool. Also, I would check out http://dedalus-project.org/, which uses a very similar syntax to specify a PDE. It uses pseudo-spectral methods however, which my advisor dislikes, so I have always wanted to see an FD version.
I prefer pydoc documentation.
I certainly prefer to use pydoc to view documentation. However, too often the pydoc version is missing a lot of detail. :( I'm surprised there are two versions. I can't understand why all the documentation isn't uniform.
Sounds right. My use-case: I'm more familiar with numpy, so when I go to pandas, I have to remember about the differences between `df[i]` `df.ix[i]` `df.iloc[i]` or `df.loc[i]`. Even when I think that's right, sometimes nothing makes sense until I first throw in a `df.reset_index(drop=True)`. My feeling is that both numpy and R's data.table have a simpler and more consistent interface. That said, pandas is an amazing tool! Far, far better that working with numpy rec arrays. 
Finally got my Python package up on PyPi. [Here's the GitHub page. ](https://github.com/josephacall/polypoint) It's a very small tool to map large amounts of coordinates to polygons (you can use any polygons you want but the 50 states of America are the default). I've been using it for some geotagged data I've been messing with. 
*detection
No, recognition. The program doesn't just detect that a face is there, it identifies whether or not your face is in the image. 
This is what usually is being done by Linux distributions in their packages, so yes, it is possible.
 for key, value in table2.items(): if key not in table1: table1.update({key: value})
thank you! i knew it was something simple.
Fair enough, so its just an image loader for rekognigion which does the actual recognition then? Edit: don't mind me, I've been stuck in code review hell all day and am being overly harsh 😁 welcome to the boundless madness that is AWS
'Tis the beauty of Python :)
The cool thing about programming Risk is that the actual games consume more time than the programming :D 
Yeah that's right, the program itself just calls a CLI tool to take a picture and asks Rekognition if your face is in that picture. Ha, no worries. I don't envy you being in code review hell! My hack week is over, so back to normality this week. AWS is fantastic though, I've barely scratched the surface. 
Buddy you came in here with a bunch of entry level ideas and called me a moron and a sociopath repeatedly. One of us is the problem with Reddit and it ain't me.
Not when I'm programming it!
&gt; Buddy you came in here with a bunch of entry level ideas So you started off by saying if I were a pythonista I would know it was impossible to resubmit threads. Then you stated that my ideas were all good. Except for perhaps human factors created by reddit, their admins, and their mods, something a pythonista would not know. Then you concluded by calling all those ideas entry level anyhoo. Dewd bro, you change positions so quickly and reliably NIST considered switching to you, except cancer.gov tells them to avoid.
Very interesting approach to CLI argument parsing - thanks for the link! Just when I'm thinking about writing a few scripts for work, too.
You can also use the `.format()` style with a [simple wrapper class](http://stackoverflow.com/a/25433007).
No worries, I'm just a huge Click fanboi, and was sad to skip down to that section and see it so bare. I know how hard it is to write content like this, so definitely congrats on finishing it, I totally understand.
Yep, I commented on that: &gt; Note: you can change the format to use the brace style It's probably best to use the built in for that though, since it is supported by default (see [formatting styles](https://docs.python.org/3/howto/logging-cookbook.html#use-of-alternative-formatting-styles)): bf = logging.Formatter('{asctime} {name} {levelname:8s} {message}', style='{') You will need to make sure that all your codebase uses this style as /u/PeridexisErrant mentioned (it's best to do it on a specific logger instead of the root logger, however).
And, it's good you remember me dedalus project for the comparison. I have quickly done that notebook to reproduce the tutorial of dedalus: http://nbviewer.jupyter.org/gist/anonymous/921825d8cc19f2a9445d0bdad89de8b5 It reproduce the tutorial http://nbviewer.jupyter.org/urls/bitbucket.org/dedalus-project/dedalus/raw/tip/docs/notebooks/dedalus_tutorial_problems_solvers.ipynb (It's a very quick job, so do not mind the text around. I will clean it and put it in the cookbook page.)
I've been following this series closely since you started it. it's been a great learning experience and a lot of fun. Thanks!
Or use SimpleNamespace.
Yes! 2D would be very useful. Also, staggered grids are commonly used in CFD.
You may not have wanted to push the email list. There are also better twitter APIs than rolling your own webscraper. Check out the [websocket options](https://blog.twitter.com/2014/connecting-to-the-pulse-of-the-planet-with-twitter-apis) to get them to push updates to you instead of scraping every five seconds.
Okay. Yeah I'm stuck on how you install the packages listed in requirements.txt I guess. I've got python and image magical already on my pc.
What benefits does odo give you over pandas' io functions?
The command shown is `pip install -r requirements.txt`. Did you run that command?
To write a Python program from scratch, you must first invent the universe. `import universe` OK, what's next?
 from __future__ import absolute_import, with_statement, print_function, unicode_literals You have now just learned Python 2. At your skill level that's all you're going to need. I wish I could hire a dozen Python 2 programmers right meow to get a bunch of work done.
Looks very cool. Looking forward to try it.
I meant more along the lines of iterating through the groups (or unique values) - a good example is splitting a log into something like unique IPs and dumping each to a separate sheet in Excel. You could of course do this with groups, but it's just as easy to filter the main dataframe for the unique value and .to_excel that.
Damn, I got all excited reading through this. I wish we could upgrade to Python 3...
&gt; I can write a benchmark for performing linear regression but that too involves iterating over all the data. I guess that's where I'm confused, because I don't see why or how you'd iterate the dataset for training a model. I'm by no means an expert with sklearn (or any other ML framework), but when I have used it I'm fairly certain I was only ever feeding it a series of X,Y at most and the model itself was doing the iterating. For the more basic models I believe it was just treating the underlying series as an array (or ndarray), but it'd likely work just as well if you passed in the Series.tolist() instead. I mentioned apply because the most common case of iterating dataframes I've seen is when someone has to do something more complex than col[c] = col[a] + col[b]. That doesn't like your case though...
 coded in 100% pure Python, using the tkinter GUI toolkit cross-platform: works mostly the same on Windows, Unix, and Mac OS X Python shell window (interactive interpreter) with colorizing of code input, output, and error messages multi-window text editor with multiple undo, Python colorizing, smart indent, call tips, auto completion, and other features search within any window, replace within editor windows, and search through multiple files (grep) debugger with persistent breakpoints, stepping, and viewing of global and local namespaces configuration, browsers, and other dialogs 
Then I'd imagine you haven't seen [this](http://igordavydenko.com/talks/by-pycon-2017/#slide-16). The state of pypy compatibility for py3 is well pretty well documented by that project.
Oh, so style={ is the same thing as what the wrapper is doing? I had thought it was a subset but I guess I should read the source code.
Wut. There's nothing of any value whatsoever on that page other than assertions in line with what you said. I asked for something to back the claim up, not "someone" to back "you" up. Ok, found a more relevant slide: http://igordavydenko.com/talks/by-pycon-2017/#slide-18 As far as I can see, bar the two big outliers (startup), it's essentially even between 2.7 and 3.6 I'd nearly go as far to say that if you removed the two startup benchmarks^1 then py3.6 looks to be the winner. ^1 and I think we should. We care about application performance not total language performance. If that was always taken in to account python would be considered faster than any compiled language in many cases, which is stupid.
[Its PC](https://www.dropbox.com/s/ex0dg8zrllbmkbp/Pillow%20Error.txt?dl=0) but there's the text file
Well at first, the universe might not be fully structurally sound. We might need some braces. Wait, wrong language.
Those should both do the same thing, but if there's a problem then the command line way will let you see the error while double-clicking the script will just appear not to do anything.
the extract_cell.py extracts [this image](http://biochemical-pathways.com/#/map/2) versus extract_metab .py does [this image](http://biochemical-pathways.com/#/map/1). all the Sub layers are named the same but the images are wildly different. It seems that when i fed command it got an error as well : C:\Users\zipo2\AppData\Local\Programs\Python\Python36-32\Scripts&gt; extract_cell.py Traceback (most recent call last): File "C:\Users\zipo2\AppData\Local\Programs\Python\Python36-32\Scripts\extract_cell.py", line 84, in &lt;module&gt; download_tiles(zoomLevel, l) File "C:\Users\zipo2\AppData\Local\Programs\Python\Python36-32\Scripts\extract_cell.py", line 40, in download_tiles url, 'images/' + filename) # 1024x1024px File "C:\Users\zipo2\AppData\Local\Programs\Python\Python36-32\lib\urllib\request.py", line 258, in urlretrieve tfp = open(filename, 'wb') FileNotFoundError: [Errno 2] No such file or directory: 'images/background_3_00_00.png' C:\Users\zipo2\AppData\Local\Programs\Python\Python36-32\Scripts&gt;
understood, but I downloaded this zip file as is from github so it was never in a python folder to begin with. sooo. I am not exactly sure which sub folder it should go in.
Wait.... Ur writing a browser in Python. Is it on GitHub? I'd really like to see how it worked. 
No worries! it needed to be in Lib! i think i have it figured out. 
I would love to hear your reasons for this answer.
nvm it doesnt seem to be causing that problem anymore 
The appdata files were all removed i realized that after wards...
Trying to download 30+ years of daily climate data (Tmax, Tmin, precip), create a script that does this and automates it and tandardizes the data and gets it ready to be imported into arcmap for spatial analysis. Having hardly used Python, this will be quite a challenge. 
I guess at this point just need to see if ImageMagick will do the trick! Well i have restarted and this is my current error code. Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\WINDOWS\system32&gt;cd\ C:\&gt;cd\Users\zipo2\Desktop\biochemical-pathways-poster-master C:\Users\zipo2\Desktop\biochemical-pathways-poster-master&gt;extract_cell.py 'montage' is not recognized as an internal or external command, operable program or batch file. Traceback (most recent call last): File "C:\Users\zipo2\Desktop\biochemical-pathways-poster-master\extract_cell.py", line 87, in &lt;module&gt; tempimg = Image.open(filename) File "C:\Users\zipo2\AppData\Local\Programs\Python\Python36-32\lib\site-packages\PIL\Image.py", line 2410, in open fp = builtins.open(filename, "rb") FileNotFoundError: [Errno 2] No such file or directory: 'assembled/background_3.png' C:\Users\zipo2\Desktop\biochemical-pathways-poster-master&gt; could the scripts syntax need updating? 
Ah. So I read a little and apparently ImageMagick works a little differently on windows. What you need to do is go into the script and find the line that looks like this: command = 'montage -mode concatenate -tile ' + \ Change it to this: command = 'magick montage -mode concatenate -tile ' + \ I'm sort of guessing here because I don't use windows and can't test it myself.
So true! I once implemented a method to convert an integer into an IP address but of course it turns out there's already one in the stdlib.
[I think it worked!!](https://www.dropbox.com/s/9zs3qb1jnwq1xc5/finalimg.png?dl=0) thank you literally for all your help. Its extremely rare to find people with the patience to trouble shoot something with someone like this. I am usually the one helping with PCs but with my schedule this may have took weeks for me to realize silly things. Again thank you for all the help.
0. use python3 1. avoid spaces in filenames 2. exclude *.pyc from repo 3. use os.path.join() instead of hardcoded directory separators 4. document functions 5. remove unnecessary fp.close() after "with open() as fp" …
 def dup(n): return itertools.chain(*zip(range(n), range(n))) `yield from` is lovely, but give `itertools` some love too :D (Of course, you'd better not try this on Python 2 with large `n`...)
You are forgetting about stack size, which is the real limiting factor here. Fib(10000) will fail in recursive solution, but will succeed in my iterative version. Recursion is a beautiful semantic construct, but with linear processors (e.g. the kind that exist today) any recursive operation needs to be turned into an iterative program by the vm/compiler. Starting out with an iterative version is typically going to be more efficient in terms of processor time and memory size. Iterative solutions may be more expensive in terms of developer time, but fibonachi is not a good example of that.
Depends on what you want to return. That's all. Example: class Dog: def __init__(self, nickname): self.nickname = nickname akainu = Dog("BenTheMighty") print(akainu) # the same as print(str(akainu)) &lt;__main__.Dog object at 0x00000272A10296D8&gt; But I want to print more specific information. The way it was done in the youtube video is non-pythonic: class Dog: def __init__(self, nickname): self.nickname = nickname def toString(self): return "I'm: {}, ({}) class.".format(self.nickname, type(self).__name__) akainu = Dog('BenTheMighty') print(akainu.toString()) I'm: BenTheMighty, (Dog) class. Which should be more simpler, pythonic way: class Dog: def __init__(self, nickname): self.nickname = nickname def __repr__(self): return "I'm: {}, ({}) class.".format(self.nickname, type(self).__name__) akainu = Dog('BenTheMighty') print(akainu) I'm: BenTheMighty, (Dog) class. Like I said. It depends what **you** want. You can always print this string by: akainu = Dog('BenTheMighty') print("I'm: {}, ({}) class.".format(akainu.nickname, type(nickname).__name__) I'm: BenTheMighty, (Dog) class. But in my opinion, that's just ugly :-) One of the more real examples is something like: &gt;&gt;&gt; small = Triangle((0, 0), (2, 0), (1, 1)) &gt;&gt;&gt; big = Square((0, 0), (6, 0), (0, 6), (6, 6)) &gt;&gt;&gt; print(small) "[Triange]: Points [0,0], [2,0], [1,1], Area: [4.2]" Without the need of specifying what exactly I need to print. And if I want, I just write it too :-)
I first just used Textmate, now switched to Atom, which is more IDE-esque. It is extremely extensible, has pretty good autocomplete and has Hydrogen, a iPython notebook/Jupyter like inline code executer. 
Is """split string into List""" supposed to be a comment? Because it's just sitting there for no reason, your code definitely isn't going to run. Edit : Aside from that, you have a lot more problems going on, but that's going to be the one relating to your error.
The correct way to do anything in Python is always to look in the stdlib first :) Either a complete solution already exists, or parts of one does that you can piece together. And if worse comes to worst you can always write a wrapper to make it more pleasant to work with the stdlib stuff :)
Also use lowercase (for modules) and snake_case(for functions) instead of camelcase. Regarding #4, In py3 you can use `/` to join paths, which is equivalent to os.path.join, whic is pretty cool! from pathlib import Path loc = Path("/usr/bin") / "python3" print(loc) "/usr/bin/python3" 
Actually, because it's almost 4 and I'm going to sleep soon... some tips without just giving you the answer right away, going to go piece by piece and point out things that you need to work on. def censor(text,word): text.split() """split string into List""" for i in range(len(text)): if text(i) == word: text.replace(word,"*"*(len(word))) " ".join(text) print text return text censor("My name is Joe","name") --- text.split() """split string into List""" Two things here: 1. """string""" can be used in one of two ways. It can either be a docstring (which is what it appears you're trying to do there), or to define a string literal. If you're doing it as a docstring, it can't exist on the same line as actual code that runs. In this case, you should be using a # comment. 2. Your text.split() is doing nothing. Just calling text.split() splits the text, but it doesn't actually mutate the original text object. For example: try text = "Hello world" text.split() print text &gt;&gt;&gt; "Hello world" vs text = "Hello world" text = text.split() print text &gt;&gt;&gt; ["Hello", "world"] You're basically making a change to the variable, then disregarding that and working against the original variable pre-change. You need to actually store your changes. You can do that by defining the changed version as a new variable, or by redefining the original variable as the new version of itself. --- if text(i) == word: text.replace(word,"*"*(len(word))) 1. You need [] here, not (). Indicate positions in lists by brackets, and what you're trying to do is say "for the word in this list of words at this position". 2. You're going to error here because you're trying to call .replace() on the list itself, NOT on the item you just found. So where you just did text[i] to get a specific word in the list, you now also need to replace that specific word. As in ```text[i].replace etc``` 3. As with the previous part, you need to actually save this value. You're modifying text[i] (the word in the list), and then doing nothing with it. So once again, you don't want to just take text[i] and do something to it, you want to do something to it and replace the original with the new version. --- " ".join(text) print text return text 1. Same issue happened again. You're doing the " ".join(text), and then right after you're completely disregarding that and printing the original text object that you started out with. 2. For your purposes here, the return is useless. Use return if you're wanting to send data back to where it's called from. So you could either do... this def foobar(foo, bar): print foo + bar foobar('foo', 'bar') or def foobar(foo, bar): return foo + bar print foobar('foo', 'bar') --- Aside from all that, if you want something to look at in the future, you would do well to look more into list comprehensions. Could try something like the following for more compact code: def censor(text, word): print ' '.join(['*' * len(word) if w == word else w for w in text.split()]) censor('My name is Joe', 'name')
If you want the tl;dr version of the mass of shit I posted, this is it ^ Also good call on the lower()
Once you get the basic concepts of the async workflow, you can apply them to work with any async library. And asyncio is the most important because it is now a standard python library and most of the modules rely on it.
Trying to wrap my head around Flask and Web Development in python these days. It's definitely an uphill battle but I'm looking forward to a sweet, sweet victory in the end! 
Hi! Correct me if I'm wrong but LaTex is a tool to render mathematical expressions (not to read or solve them?). At least that's what I get from their first page ? Thanks for sharing!
Yeah, I know it was kind of a long shot. I was fishing for something obvious that I don't know about (sort of library or a standard). Thanks for the link! 
Devops / Backend Developer at Dunbar Security Solutions https://djangojobs.net/jobs/683/devops-backend-developer-dunbar-security-solutions/
your fork thing would be `git`. My favorite IDE is, of course, `vim`. Not easy to learn but more powerful than anything else (i guess emacs is ok too if you have flexible fingers)
1. You don't need: else: pass 2. I would recommend writing docstrings for methods and modules. 3. Read about tests. At the beginning I was omitting this step, however now I really praise them. 4. Might be a good idea to include setup script (how shall I install it?) and more extended README (how can I use it?). 5. Json is getting more popular so you might consider putting things like configuration, emails not in txt files but in json. Although for a list of emails simple text file is enough (rather as an advice for future). 
Could it be git? or some other VCS may be? 
pythonprogramming.net
Awesome site, has something for everyone.
&gt; Would be cool to disperse the parameters with some random normal variability so that each tree can vary a bit within a family. Can you give a example, cause I don't understand what you mean exactly? At the moment you're able to add a little (or even more) randomness to the origin tree with modifying the sigma tupel (length sigma, angle sigma). Example: Tree(sigma=(0.2, 5/180)) But I'm sure you mean something different, probably it is too early for stuff like that :D
How does this compare to FiPy, SfePy, Fenics, etc.? Were you inspired by this tutorial in TensorFlow :) https://www.tensorflow.org/tutorials/pdes
Here's how: YOU DON'T. Pickle is, by design, a serialization format for arbitrary Python objects, including methods. In other words, unpickling is a form of running code from an external source in the context of your host application; and that external source is, in most cases, untrusted. In short, pickles too often end up producing code injection vulnerabilities, and guarding against those is really terribly difficult and brittle. Most likely, what you want to serialize isn't code anyway, but just data, so the obvious solution is to use a serialization format that does exactly that, such as JSON.
thanks!
Since Python has the Requests library, learning how to make HTTP requests and playing with free public APIs could be fun. I'm a fan of the ones NASA has for playing with. It all starts with print! Make something cool! And don't forget about r/learnprogramming, they can help if you get stuck. 
I faced the same thing and chose asyncio since it's in the standard library and works well. If you will be scraping you need to use aiohttp and asyncio. If you use asyncio and requests, it will be blocking. My recommendation is to read the asyncio docs and watch some of the hour long tutorials thats out there.
Is there an existing test suite for the 2.6 code base? If not, write one so you have a reference of the expected behavior.
Tornado + Twisted will do just about everything you could ever want to do. These are definitely more advanced modules but at the moment, they are most battle tested asynchronous frameworks and has the most polish of all the async frameworks.
There's starting too be too many arg parsers...
&gt; Thanks /u/RonnyPfannschmidt I am also looking deeper into "comparisons to None" as "if var == None: ..." which were heavily used and are now not behaving the same anymore I'm pretty sure those work the same, the one which does not work anymore is `a &lt; b` where e.g. either value could be `None`. But it's going to be pretty noisy about it as that's an exception. Other bits you may want to look at: * In Python 2, text strings (`unicode`) and byte strings (`str`/`bytes`) were an interchangeable mess, in Python 3 text strings (`str`) and byte string (`bytes`) have been more strictly separated. In many situations this will fail loudly though not always in clear or expected ways, but there are more subtle differences e.g. in Python 2 `b"foo" == u"foo"` is `True`, not so in Python 3, which means: &gt;&gt;&gt; d = {b'foo': 1} &gt;&gt;&gt; d.get(u'foo', 0) will print "1" in Python 2 but "0" in Python 3. Furthermore, in Python 2: &gt;&gt;&gt; d = {b'foo': 1, u'foo': 2} &gt;&gt;&gt; d {'foo': 2} but in Python 3: &gt;&gt;&gt; d = {b'foo': 1, u'foo': 2} &gt;&gt;&gt; d {'foo': 2, b'foo': 1} * like `map`, `filter` and `zip` return iterators in Python 3, so if you iterate them multiple times iterations 2+ will get no elements *but the iteration will succeed* (no error) * `round()` was changed in 2 ways: - in Python 2, round() always returns a float. In Python 3, it will return an int if called without a precision argument (so `round(1.1)` returns `1` but `round(1.1, 0)` returns `1.0`, the Python 2 behaviour is the latter in all cases) - in Python 2, `round()` uses "half away from zero" tie-breaking so `round(1.5) == 2`, `round(2.5) == 3` and `round(-2.5) == 0`. In Python 3, `round()` uses "half to even" (banker's rounding &amp; IEEE754 default) so `round(1.5) == 2`, `round(2.5) == 2` and `round(-2.5) == 2`. * in Python 2, iteration order on hash collections (sets and maps) was undefined but mostly coherent, in Python 3 it was randomised so it *will* be different than Python 2, it turns out to be surprisingly easy to rely on iteration order without knowing it, especially for "organic" code bases
Make it with sans-io style, so you will have chance to use any io-backend.
Did that in my earlier years on Python. Seems so nice for a naive eye. Take my upvote
Can we close the window automatically by python shell prompt?
No. I mean that I want to know the language that I will see the next time the user types.
"Python really needs its own certifications like Java" https://www.youtube.com/watch?v=umDr0mPuyQc 
Thanks everyone for your help!
Engineer coming from Matlab: - jupyter to prototype - Spyder to develop. 
Are you using elpy on emacs? If not, try it. You might not want to switch.
I'm sure others will answer the rest, but I'm typing on phone so I'll just answer the setting question - it is possible, through git. However not machine specific. I think that they are specific to a project - I tried it, it was weird and didn't do what I expected, so I removed it and just set those thing individually on each PC
I'm not currently, though on your recommendation I might give it a shot. I've been using `anaconda-mode` since that's the default python mode with spacemacs.
Very awesome - one of my favorite. But don't forget places like CodeAcademy either. The in-line coding might be helpful for initial learning.
no, it is not worth the switch. source; emacs user / python developer there are no facilities available in pycharm that are not available in emacs
I've done some projects with chromedriver to automate searches pulled from an API. The python docs weren't great, but I made it work. If you do anything in that direction, I could lend some advice.
With Vim (natively and through plugins) you can have a robust Python editor. Those things you mention, syntax/autocomplete and spacing checking, are easily attainable with Vim.
I use the settings repo, and it works perfectly. 
I used to use vim for C development, now I use pycharm for python development. I find the ideavim plugin good, I don't think I miss anything from vim. Pycharm takes a while to start, but when it's running I find it quite fast.
What is the biggest problem with Packaging?
I don't want to sound ignorant, but please ELI5 the relationship between POSIX and Python.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
If you think old-skool tools like vim and emacs are fine for modern development and want a single simple settings file to share on your dotfiles github repo and you like twiddling your tool and messing with your plugins or whatever people do with vim and emacs then you will find nothing in a fat IDE like pycharm except pain about your precious RAM. If you want something modern as IDE and usable that works out of the box on your development workstation and lets you focus on work instead of your editor then by all means use pycharm because life is too short. 
It was last year, but that _was_ a computer from 06' that wasn't all that powerful back then. PyCharm was still the thing that ran *worst* on it though. 
Build upon what you have already. Do a google search and see if you can figure out how to capture input from the keyboard. For example you can have a print statement that asks "What is your name?" Then prompt the user to enter their name and save it as a variable in Python, then have another print statement that says "Hello [name]!" Where it replaces [name] with the user input. This should be good next challenge for you. 
It's definitely a beast, but I don't know how far back you'd have to go that it was unusable. It runs fine on my [6 year-old machine](https://www.amazon.com/exec/obidos/ASIN/B003ZUXX4M/). I made the switch to PyCharm from Komodo a couple of years ago and am glad I did. The code insight and refactoring are really impressive for a loosely-typed language like Python.
I use it every day on a oldish 6GB Windows 10 laptop together with a Vagrant Linux VM and a browser with 100 tabs and everything working on fat django projects for years. Makes you wonder why you even bother with your 16GB do-it-yourself Linux.
So what's your reason for building this? Just for fun? Is this part of a larger thing? Are you using the trees in something?
That's awesome dude, do you use any particular library? 
It seems entr will run a command when a file changes. That seems powerful, but Im having a hard time thinking of examples of what you would use this for. What would you use this for?
[Sympy](http://www.sympy.org/en/index.html) is pretty cool. 
&gt; If you think old-skool tools like vim and emacs are fine for modern development BACK OFF MY OLD-SCHOOL TOOLS!!!!
FYI, and this is only related because you mentioned settings file and github repos. You can put .idea/ in your global gitignore (`~/.gitignore) and that way you'll be sure that you never commit your jetbrains project config to a repo, or someone else's repo. Sure, pycharm and friends have a gitignore template for the project, but if you're submitting PRs, upstreams might not want to except a change to .gitignore just to accommodate your editor. SOURCE: Early days of contributing, tried to do a PR that included a `.idea/` addition to .gitignore. Got rejected.
If you have access to a university email, I think PyCharm Pro is still free. Tbh, I loved PyCharm but as a hobbyist it was much easier for me to just us vim and get things done. If I had to do "real" work, though, I'd switch back to PyCharm+ideavim in an instant.
Not literally everyone.
First of all: thanks for your verbose feedback! The basic idea of whitelisting is that by default you do *not* allow anyone to execute arbitrary code on your machine just by visiting a website. I have no beef with enabling JS under certain circumstances. The website in question does *not* have any feature that goes beyond a basic web page as it displays *nothing* but text. The problem is not the web developer here, but is even rooted a layer deeper, even. With JS frameworks, disabling JS leads to an entirely un-usable website without any functionality, at all. Don't get me wrong, I mostly entirely agree with you - I just think one should respect people refusing to accept execution of arbitrary code on their systems, which is a security concern even more than just personal preference. I have many friends who actively just close their browser tab if the website does not deliver any functionality at all with JS disabled, and their reasons for refusing to go all YOLO and enable this seem quite sound to me.
I couldn't agree more with /u/bwanab on Elpy. I'm not a proper "dev" in the sense that most of my work with python is simulation data analysis, a bit of analytical modelling and that kind of things, but I've never genuinely felt the need for anything else than Elpy. It does syntax highlighting, project management, refactoring, code completion, you can interactively browse documentation… so unless I'm missing something crucial, it does everything I need. And the best part is I don't have to move my hands from the keyboard.
haha that's what I did all last year in Algebra 2 (I'm 13 this year) Check out SymPy
It is current enough for me.
Hey there, long time emacs user here, I've also been using PyCharm/IntelliJ for a few years. . . on that note PyCharm is just a re-skinned and crippled IntelliJ, it's basically IntelliJ but only for Python. I'm using the full version of IntelliJ right now, with the Python plugin. I use IntelliJ with Python, Java and Go currently. If you just need Python, then PyCharm is perfectly fine. OK, now all that being said, I use emacs key bindings in PyCharm/IntelliJ, just a heads up, you'll probably want that. Note that you can't do everything that regular emacs supports but most of the basic key strokes will behave the way you expect them to. For short scripts, I often just use emacs because it's easy and quick. I define short as anything less than ~100 lines and consisting of just one file. Anything bigger and more complicated, I switch to PyCharm. Note that you can use pdb from the command line but PyCharm is just easier and more pleasant. It's more like a Cadillac compared to a Honda. Yes, it's bloated and slow but it's comfortable. You may want to try the suggestions mentioned here: http://stackoverflow.com/questions/2324758/debugging-python-programs-in-emacs EDIT: try out PyCharm and see what you think. IDEs can definitely be a pain in the ass compared to a lean and mean editor only setup. 
PyCharm has great stuff that probably is not in Emacs. OTOH, Emacs has great stuff not in PyCharm. Either way, you *will* miss out on something.
I just cant give up pycharm for django dev. The debugging in templates is worth it alon. For me pycharm has a lot of nice to have things - nice data view if you work with things like pandas/numpy, amazing capabilities to run/debug remotely including docker. It understands django's models very well as well as other django things like templates I mentioned above. For example if I am working on a view I can go directly to template since pycharm understands that this view is for that template and so on. 
I am glorified IRC client and you shell call me Slack and I shell consume all your RAM!!!
The web framework doesn't matter at all for this decision, it's only the input/output middleware (input being the search term and output being the results). Besides that it all depends on how big you expect your index to be. In most cases Whoosh will do a fine job. If you make sure that you have a nice, clean, abstract interface to your search engine you don't have a big problem later if it really comes to switching to another engine.
If you're doing 'regular' Python development (read: not using web frameworks), you can have PyCharm Community Edition free of charge. There are ways to sync a settings file, but I've never worked with it. I've also never tried making independent settings for each machine I run it on. The real value-add of PyCharm Professional Edition (which isn't brutally expensive but isn't cheap, either) is if you're doing web development with Django or another framework. PyCharm CE explicitly *does not* have the ability to debug these frameworks. It is *incredible* how much time you save debugging templates and requests using PyCharm PE's debugger. 
It can be slow. I have a core i5 4690k, 8GB RAM, and it's all running on a SDD, and PyCharm can still be slow from time to time, especially when accessing data from my HDD. I don't think I'd ever call it unusable, but there are many occasions where I'm just updating or making a quick edit to a small script and will just launch it in Notepad++ or Geany instead of waiting for PyCharm. That's just impatience on my part though. Wanting something to load instantly instead of in... I dunno, like 20-30 seconds or something.
I swapped from Emacs to Pycharm about 6 months ago, after years in Emacs. Swapping isn't really an investment. It took me about a week to get up to speed. I wouldn't worry about that. I mostly work in PyCharm now, but I swap back to Emacs when I need stuff like macros. "Switching" is a false dichotomy. Use both! In answer to specific questions: &gt;How good is IdeaVim? I use spacemacs in Emacs, so I'm used to bopping around inside and between files with vim-style shortcuts. I don't use it myself - I use Emacs IDEAs. Emacs IDEAs is great, so I assume IdeaVim is too. I believe EIs is a clone of IV. But I would just spin up PyCharm and test it out. &gt;Is there an easy way to sync settings between machines? I do development on 2-3 different computers (home, work, laptop), and I'd like to keep everything synced up between the three. [Yes.](https://www.jetbrains.com/help/pycharm/2017.1/synchronizing-and-sharing-settings.html) In a lot of ways, it's easier than Emacs. &gt;What are the killer features I should switch for? There are *loads,* but the biggest one is refactoring. 1. Rename commands take about a second to process and are *really* smart. Much better than Rope and Jedi. 2. You can move functions and classes around arbitrarily. 3. You can extract pretty much any code into its own, separate function and PyCharm will intelligently derive input parameters (this is seriously useful). The main thing is that in PyCharm, advanced commands just *work.* You don't need to screw around setting up some new package - you just click a couple of menu buttons and *bam,* your problem is solved. It took me a year to get my Python setup in Emacs up and running, and aside from raw text editing, I was blowing it out of the water with PyCharm within a few days. *Edit: [This](https://www.youtube.com/watch?v=iutkLjeGc6w) is a great overview of some of the coolest features.* &gt;Is it possible to have machine-specific settings in addition to syncing general settings? For example, my laptop is super small, so I usually use a slightly smaller font size there so I can see a bit more code. According to the Q&amp;A page, this stuff is machine-specific by default: *What is synched?* *Settings Repository stores almost all of the IDE and project settings, except for some platform-specific ones, and those containing local paths.* ***This includes code style settings, keymaps, fonts*** *and colors scheme, inspection profiles, and others.* &gt;I also want to start using Python for more of my data analysis. Does Pycharm work well for that, or should I use a different package for the stats stuff? Data analysis lends itself to a different development methodology which PyCharm isn't really designed for. It works, but you wouldn't want to develop as though you were developing a project. I would use Jupyter Notebooks or Emacs IPython Notebook. Jupyter is quick to learn and has more notebook-specific features (and it's prettier), while EIN allows you to leverage to other tools of Emacs. *** Edit: One thing I forgot to mention - debugging in PyCharm is *amazing* compared to Emacs. Everything is intuitive, it's all presented graphically and you can jump between threads and examine variables and delve into complex data types etc.etc. with a couple of clicks. And as with the other features, it just *works.* You don't have to screw around setting up a new debugger and linking it into your file buffer, yadda yadda - you just click the little bug and *bam,* you're stepping through your project. Edit 2: I added a video to the "indespensible features" section. It's about 8 minutes long and shows off the coolest features.
&gt; For short scripts, I often just use emacs because it's easy and quick We truly live in the future! 
Check out numpy, scipy, and pandas for data analysis. Also anaconda if you want a whole package that works well together.
I think we mostly agree. I definitely think that web *pages* whose sole purpose is to display text should work with scripting disabled, and that when using web *applications*, it should not be unreasonable to expect a person to have scripting enabled. At the very least developers should be accounting for this by providing feedback when the site will not operate without scripting. I notice that you mention "arbitrary code". This is definitely a valid concern and people engaging in social engineering can use JavaScript as a tool to that end, but JS is run in a sandbox. It does not have access to your machine beyond the scope of the current website. Allowing a website to run scripts is no different than downloading a program from the internet and allowing it to run on your machine, except that the client side scripting is actually safer because of the sandboxing. But we could argue about this nonstop. I will respect your decision, I just wanted to clear things up for both of us. 
&gt; for what I do, the controls/UI was not readily available. Some of the simplest things (like font selection) is buried. I guess no one told you about Control+Shift+A. ... [Image](http://i.imgur.com/u0eUK5L.png). No one really uses the menus; they honestly shouldn't even be there. This window is one of the best 'killer features' of PyCharm, in my opinion, and I can't believe it hasn't been replicated in a huge variety of tooling across domains. Mostly what I'm curious for developers who don't use IDEs is how much of their mental energy is spent configuring their tools instead of actually doing work. With some coworkers I've worked with previously, it seems inordinate- but that's not useful data. It's just incredibly annoying to need help on something and have a coworker be like "hey, look at this script I wrote to do this awesome thing when I press Control+Shift+X three times" and the only reasonable retort is "yeah cool, PyCharm has done that automatically for like four years".
I run Pycharm 2016 even on a single core 2gb ram vm. Jetbrains is absolutely the best in the IDE business, worth switching to it 
Oh sorry, is that not OK with you?
What sort of data analysis?
I think it is important to mention the data scientist perspective. My colleagues use PyCharm and they are jealous of my Emacs setup for using the REPL.
Interested in it, we are also working on a project which is involved with numpy, pandas, nltk and genism lately. 
I like it. I get it free because I am technically faculty with an educational email address, so why the hell not.
That window is basic component of emacs as helm or ivy. Since you haven't used emacs, a better way to phrase the discussion is not through the hostile, naive "well configuring your editor is not actual work" line but rather, "what useful things can be accomplished in emacs/vim that are not available in Pycharm?" Examples to consider: 1. https://github.com/timcharper/evil-surround for surrounding any text block in parenthesis, brackets, quotes, etc. For surrounding a word its `y s W )`. 2. https://github.com/Dewdrops/evil-exchange for selecting any two portions of text and swapping them. To swap two arguments all I need to do is: `g x i a (move to other arg) .` 3. https://github.com/abo-abo/avy Jump to any line, any spot in not only the current file, but any file you have open on the screen, trivially. It's also integrated with evil (emacs vim). 4. https://magit.vc/ The easiest, quickest, most feature-complete git interface. 5. http://orgmode.org/worg/org-contrib/babel/ Jupyter notebooks on steroids that can be used with any language towards anything. 6. I wrote a blogpost about how to change how you see your python code in emacs: https://ekaschalk.github.io/.
0. `counter = counter + 1` raises the value of the 'counter' variable by 1. Presumably this is in a loop of some sort, and every time the loop runs the counter is incremented, so that you can keep track of how many times the loop has run. 0. It's an old-school way of string formatting. The `%` after the string tells python to replace the fields in the string that are marked, in your case `%f` is replaced with the values from "miles" and "kilometers". We use the newer `format` style now. 0. A long number is a type of integer. Remember computers have a limited number of bits to store integers, so when the value gets too big to fit in an integer, python automatically switches to a long type which has more bits available. Python 3 no longer has a long type. [A complex number is a mathematical concept](https://en.wikipedia.org/wiki/Complex_number). Your book seems very old. I suggest you find a modern book that teaches python3. We have [a pretty long list of learning resources in the wiki](https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_programming.3F) if you want to browse. --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Yeah your codebase has to be like 1M LoC or more _and_ your computer would need to be pretty slow for it to take tens of minutes. Most of my projects take on the order of 1-2 minutes max. 
Aye aye ayyye... I'm not trying to turn this into an e-argument. I'm saying this as someone who used Elpy for years. I wrote libraries to enhance it. I don't have a dog in this fight. [Have a look at this overview](https://www.youtube.com/watch?v=iutkLjeGc6w). Elpy can't compete with this stuff. A few specific examples: 1. **Renaming** - Elpy's renaming is brittle and doesn't work across files. Renaming intelligently across files requires rope, which is *really* slow. In PyCharm, renaming is intelligent, takes about 2 seconds, and provides with much better feedback on what you'll be changing. 2. **Error checking** - Elpy's error checker doesn't work for large files (it makes Emacs almost unresponsive). 3. **Code generation** - Elpy's code generation is extremely limited. I believe the maintainer actually removed it because it was unreliable. PyCharm's is extensive. 4. **Finding things** - PyCharm has an incredible search tool. You can find any symbol or file in your project with one dialogue, and it's extremely snappy. Elpy only allows you to find files, otherwise you have to use grep. 5. **Code completion** - slow, and limited. You can't code-complete on an active object, which means completion only works for documented types, not dynamic code that acquires members at run-time. 6. **Viewing project structure** - Elpy has very basic tools for viewing conceptual aspects of your project, such as "all the defs in the current file." PyCharm gives you an entire abstract syntax tree you can browse graphically. There are a lot more though. 
Disclaimer: I haven't used pandas hdf5 interface. 1. Its api is better, odo was built for hierarchical tabular data stores. Importantly instead of `data["k1/k2/k3"]` it is `data[k1][k2][k3]` or as I do fp, `tz.get_in([k1, k2, k3], data)`, which will yield a blaze descriptor on the table which can then be called via `odo(data, df)`. 2. It's generic, in the future I expect to move to dask arrays/frames, the IO component will be entirely the same. Similarly if I need to move away from hdf5, the same code will operate on postgres or a distributed store. 3. Mocking via nested dicts can be passed into odo the same as a file-path. I'm not sure if pandas could accept such a dict and operate over it in the same manner as it does hdf5 files.
Thank you very much 
I'd reccomend starting with PyTorch, you can jump into some tutorials here: http://pytorch.org/tutorials/
You have made very few points about the argument, and made many ad hominem attacks, yea your very mature. 
Is there a reason you started using 3.4 instead of going with the newest version 3.6? There's not much difference at a beginner level, so you won't be missing out on any significant functionality differences, but I was just curious.
this in r/shittyrobots
er TBH, my primary language is not python and I really only use it for managing AWS infrastructure, mainly as scripts so take this with a grain of salt . From a general standpoint, yes. OO is used in many languages (including python) so understanding OO concepts will make you not only a better pythoner but a better engineer overall. 
Okay, so I'm a daily PyCharm user, and I'm a big fan of the software, so know that before you read further. I absolutely love it. Most editors can look nice, Sublime Text is pretty great and has some great plugins, but for some reason it never feels as cohesive as PyCharm does. I only use vim on occasion, but I feel pretty certain that I would feel the same way if I tried extending it to the degree that I know some people do. To me, a lot of the love comes from the small daily things. I mean, code completion, syntax highlighting, etc are pretty standard. Here's some of the things that I love about it: - Search anywhere. Double-tap Shift, type in a class, function, file, file within a specific module, wherever it is in the project, it will be found and you can open it. I must use this a hundred times per day. - Stacktraces in the dev console have clickable links to each file and line in the stacktrace - Excellent Django support (I develop Django applications, so this is why I care), like integrated manage.py consoles (shell_plus does need some love though), syntax support for Django templates, etc. - Comfortable and consistent dark UI skin, available by default - Easily customizable inspection profiles, you can hand-pick which versions of python to check for potential errors under. If you're developing for python 2 and 3, this can be very useful - Generally customizable UI and color options. I like my separator signs (for example . to denote member attributes) to be bolded. No problem. Set a custom color for a given symbol? No problem. - An awesome database browser, with both GUI and CLI tools. - Very handy popups for function documentation, as long as the function has a decent docstring, it can be very helpful to ensure your arguments are correct. - Remote run configurations can be pretty handy. You can have the entire virtualenv on another server, and you can just sync your changes to that server and run it. Some of these things are a matter of taste, and I know that quite a few of these probably are available through plugins in other editors, but I like to not have to set things up too much. PyCharm allows me to get up and running on a project pretty fast. Cons: - Heavy as shit. It does take ages to load, it can burn your CPU and RAM pretty heavily depending on what you do. - Some people have less success transitioning from other editors and workflows, I'm not sure if this is a weakness in PyCharm or the good old 'can't teach an old dog new tricks' thing. I started using it early in my Python career, and I hadn't yet found a good workflow, so this probably contributed to my easy switch. - Not free. But I think some things are worth paying for. - Some people thing it's ugly. They are welcome to, and if that's stops them, it doesn't really concern me. These are a few of the things I've noticed, note that quite a few of these are for the paid version. Your mileage may vary, it might not be a fit for you and your workflow at all. But I would suggest you try it, just in case it was just what you were looking for. 
Atom also has the same type of window, Ctrl+shift+p and has a lot of features, add-ons, etc, without being overbloated with a bunch of stuff I don't need or want. I think atom is the best halfway between an editor and an IDE. Your comment about pycharm doing something automatically for 4 years, what if you didn't want that to happen, what if you want to understand everything that's going on. Having all that automatic stuff isn't good for a developer that doesn't know what it's doing, in my opinion.
Power consumption is high. There is a power save mode which turns off a lot of features though. 
I'm going to put this one annoyance I have here in hopes that some smart person will fix it: WHY CANT I TOUCH-SCROLL? Related: why are the scroll bars sooooo small?
&gt; with programming you can do literally anything Give the halting problem a go. 
What does a graphical debugger have to do with bug turnaround? (genuinely curious) Are you using live unit tests?
In my experience (mac i7 2.6ghz from 2012) pycharm will take from 300mb to 1.2gb of memory, depending on what you do, and the slow bit is definitely startup when indexing happens. Apart from that, it's all pretty snappy, which is impressive if you think it's all java.
I use both actively. I prefer emacs for text editing, and "typing", when I'm going to be primarily using the keyboard. I like PyCharm for the file browser, and when I'm switching back and forth with a mouse-based task I find it easier to work with PyCharm, so I use that. I use emacs keybindings for both, there are some annoyances on PyCharm I haven't really looked into (absence of the mark ring). So overall I like PyCharm and use it a lot, but I don't see it as an emacs substitute. 
The facility emacs lacks is discoverability: pycharm gives you icons and sane menus, so it's usable from day 1 without having to forcefully memorise gazillions of shortcuts from a scratch of parchment README you found somewhere on the net. 
EMACS lacks discoverability? That is a very profound statement, typing C-h + ?, t etc will give more information than you know what to do with. I would say that Pycharm lacks discoverability 
&gt; I don't think you should get hung up on what someone else says is the "best" tool. You should pick the tool you feel most productive with and master it. This is probably the best advice any time someone asks what the best ___ is. I started programming 10 years ago using gEdit and the Gnome terminal. Apart from a couple of extra plugins and switching to byobu, nothing has changed. I feel comfortable in this environment and get all my work done properly. Each new relaese of Pycharm I see the news and try it out, but it's just not for me. Same with other IDEs tried over these years. So, yes, use what you're happy with.
Yeah, I meant more in non-programming domains. For example, why isn't that menu in iTunes or another music player? Or in reddit itself? And etc.
I started using VS Code in place of Emacs for all my projects. Everything got a lot easier, really. Would recommend.
Have a look at [this](https://github.com/ContinuumIO/anaconda-issues/issues/542) still-unfixed bug from 2015, where they say, in essence, "don't use pip in a conda installation". People repeatedly point out that it's them packaging setuptools as an egg that seems to be the problem. Their answer? It's pip's fault. We'll submit a patch to them... eventually. ¯\\\_(ツ)\_/¯
That is a good question. For more experienced people than me, I'm afraid. I'm used to do it this way because of some tutorials I took in the past. Some things I found: - this [http://www.geeksforgeeks.org/str-vs-repr-in-python/](http://www.geeksforgeeks.org/str-vs-repr-in-python/) - better [http://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python](http://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python) Summary from the second link: &gt; Implement __repr__ for any class you implement. This should be second nature. Implement __str__ if you think it would be useful to have a string version which errs on the side of more readability in favor of more ambiguity.
I think one person from the second link states the difference particularly well. &gt;My rule of thumb: __ repr __ is for developers, __ str __ is for customers. i.e use __ str __ if you want to display an object to a user, __ repr __ for debugging/testing purposes, or really any in code operations on a string representation of an object.
I feel like I've had the opposite experience with atom. It feels like atom is several magnitudes less responsive than pycharm. I use jetbrains ides on a daily basis.
I switched from a combo of customised BBEdit and vim to PyCharm Pro (and the rest of the JetBrains tools esp WebStorm and DatagGrip) about two years ago - my productivity increased dramatically with the switch. Most work is Django (python 3) and React. I run it on a 2013 MBA (i7 / 8GB) w/ OS X 10.11 and an external monitor - startup takes a minute or so sometimes, but other than that I don't have any speed issues. Currently I think I am barely scratching the surface of what it offers. I had previously tried to get Eclipse going (which I had used a lot in previous Java work) but I found it slower, much buggier and not nearly as tightly integrated with my environment - but YMMV. 
I'm also an anaconda fan, and I agree that it excels in provisioning python environments, particularly when it comes to otherwise hard-to-install packages like qt and scipy. ...which is why I'm so disappointed in how they've handled this bug. It seems like there's some kind of silent conflict going on between pip and anaconda, and the users are caught in the crossfire. 
&gt; It seems like there's some kind of silent conflict going on between pip and anaconda, and the users are caught in the crossfire. I hear you. I've gotten so spoiled with Anaconda always just 'working' that it I assumed it was some error I was making, and not with conda itself. And saying 'don't use pip in a conda installation' is just silly on their part. Even with conda-forge there are plenty of really useful packages that are only available on pypi. My biggest issue that I repeatedly run into is trying to link the internal pycharm terminal (or even a basic command-line script) to the specific anaconda environment it was written in. Pycharm has gotten much better in recent releases, but I still run into times when I absent-mindedly pop open the integrated terminal window in a new project and pip install some esoteric package only to discover that I'm interacting with a completely different environment. Or run a command-line script and completely forget to initialize the appropriate conda environment. That's only caught me about a million times. 
1988 - workstations with 2 to 8 Mbytes, servers maybe 32MB, but shared with 10 to 20 others developers. Hence the acronym 'Eight Megabytes And Continuously Swapping'
I know this is a few days old, but thanks for the suggestion! Used schedule and it worked perfectly. 
&gt; Pycharm is definitely PyDev + Eclipse Having actually used PyDev on Eclipse, and also Pycharm, I can tell you that Pycharm is leagues beyond PyDev on Eclipse.
Yeah, have been considering Udacity too. I'm just not sure if I have the time and money to finish a nanodegree when working a full time job. I wouldnt be able to pay for it without my job and taking one with my job would take quite some time. That being said I've been oogling the robotics degree for quite some time... EDIT: Plus it doesnt help that I suck at higher level maths... 
I've had the luxury of doing some basic c development for car's self navigation at university... but fudge, as if I'd have £150 pm... xp
I also like, "Exclusively for Middle Aged Computer Scientists"
I work in Biotech and the Bioinformaticists all swear by Jupyter. I'm data plumber running code across platforms and do everything by log files. Attaching IDEs to anything is pain in the bee hive. If you need to look at Makefiles, Python, Java, HTML, CSS, Javacript and lots of other languages like a data plumber then Emacs is the one place to hang out in. I have no idea how good Pycharm is looking at HTML, CSS and other stuff. I strictly use Eclipse for Python. I use Eclipse with Pydev for PEP8 compliance only. I've never used a debugger in my life. But then I work on code across platforms. 
A function is a chunk of code that is often used to save retyping things :-)
Would you please be kind enough to stand up as your voice is rather muffled, thank you.
For those kinds of things I personally find the vim macros in IdeaVim to work fine. So maybe there's an emacs emulation/plugin for PyCharm that can do that.
This is a great place to start with: https://dbader.org/blog/python-intro-statements-variables-and-loops
I've never worried about it. On the other hand you can do all sorts of smart things formatting wise with %r, %s or %a, especially if you're aware of simple little recipes like this [format_iter: easy formatting of arbitrary iterables](https://code.activestate.com/recipes/577845-format_iter-easy-formatting-of-arbitrary-iterables/?in=user-2035254).
Is that really a good thing, though? Seems to me the number of questions on SO is a product of a language's popularity and the number of bad design decisions made in the language.
I'm having a hard time isolating the mp3 file in the HTML. Any pointers?
Agree - it's hard to go past emacs recordable macros. Like you, I use both - PyCharm for the main coding effort, and emacs for specialist editing jobs. I also tend to use emacs for non-Python file types as the major modes tend to be better than PyCharm.
For syncing, you can use git. Just remember to commit and push (somewhere) at the end of each session (or keep all your machines on so you can push/pull between them if you want to be decentralised).
Might be a bit anecdotal, but I can see this firsthand in eastern-europe here. PHP is on huge decline to Python, Ruby and Java(mostly in android context), hell Python wasn't even a thing here 5 years ago now there is a sizable community of python developers. I don't like saying it but seeing the start of demise of PHP makes me really happy, that language is just wrong on so many levels and in my honest opinion just hurts the industry and the community.
Just starting Python, working on a project to use Watson API to compare Twitter accounts. (Loosely based off of codecademy project).
The community edition is both free as in beer and speech.
It's probably because a lot of people suggested to be someone's first language Edit: and because the raspberry pi exists
A lot of multi-edit stuff like that can be done using PyCharm's multi-cursor editing (alt-click in multiple places, then any editing happens at all cursors, and middle-button-drag to set multiple cursors in a vertical line trivially, or perform a text search which matches multiple places). I would perform both of the edits you mention above with multiple cursors, no need to create a macro.
there is also setuptools extension, it simplify distribution of rust extensions. https://github.com/PyO3/setuptools-rust
Yes that too! Apparently the author doesn't care if the material gets read. 
Even as a slide show it sucks. I don't think i got beyond 1/4 of the way thru before say screw it. 
&gt;&gt;Renaming &gt; &gt;Renaming things breaks backwards compatibility, so why would I want to rename things across files? &gt; &gt;&gt;Error checking &gt; &gt;Do you mean running tests? &gt; &gt;&gt;Code generation &gt; &gt;If you need your IDE to generate code for you, you're writing very different Python from me. Fix the language, use better libraries. Don't use code generation, it's a solution in search of a problem. &gt; &gt;&gt;Finding things &gt; &gt;This is what the command line is for. Use `ripgrep`. &gt; &gt;&gt;Code completion &gt; &gt;Again, not sure why you need or want this in Python. Make your interfaces intuitive, use standard names for things, make your names concise. &gt; &gt;&gt;Viewing project structure &gt; &gt; ls -l 1) Is useful for internal API changes where the meaning of an attribute doesn't match the name. 2) sounds more like the static analysis it does tbh.. 4) or I can use a search that understands the languages I'm searching in and can search specifically for a method or class called XYZSomeShitIForgotWhatItsNameWas instead of just the term XYZ which may have millions of results if it's a common substring... 5) one of the two hardest problems in CS is naming things, also I'd love to live in your world where every API consistently adheres to my mental model of how it should work, but for those in the real world with stuff to do, we like being told this method needs X, Y, Z without needing to go look it up.. even better when it also tells you the types it's expected as well! 6) difference being, in Pycharm it's always there, always up to date, collapsible, doesn't require context switching, and tidier. 
I said goodbye.
Agreed, argh is a godsent. 
I've used the Python GPSD library, it works pretty well. The only drawback with GPSD on the SBCs is its 1-second update is fixed and there's no configuring advanced setup. I bought a NEO-M8n module and wound up going straight to USB-Serial and reading it like a serial port within Python. 
Please. Just use Zappa
I use the free edition myself. Don't pay a dime, although I'm more than happy to upgrade when I need to.
Thanks! I had found the enclosure tag but I don't understand how to soup.find_all function and the print link ['url']. What is "url" here? How do I know what tags to specify in this code below? for link in soup.find_all('enclosure'): print link['url']
Oh, sure. No worries. It sounded like you wanted to turn it into a battle, I apologise! :) In response to these: 1. This isn't really what I mean. Intelligent renaming isn't a matter of search-and-replace, it's an abstract tree modification. Emacs has no way to represent the abstract code tree, so performing conceptual modifications is very difficult. 2. I tried every option, but the error checking in PyCharm is much better in general. I don't really have time to go through it in detail (edit: I realise this is kind of a gimpy answer). 3. I don't mean boilerplate code like snippets. I mean intelligent code generation. Stuff like "extract these lines into a separate method" or "implement the abstract functions from the superclass" or "extract these lines into a variable". 4. This is fine for text searching, but what if you want to search for a concept? For example, let's say I want to search for a specific method using fuzzy search. In PyCharm, that's very easy. How about Emacs? 5. Can you invoke completion on an active object in the interpreter? How smart is it at deriving types? Does it parse docstrings and type hints to give you predictions? 6. These aren't conceptual project managers, they are file trees. Some can be shoehorned into giving you a "leaf" view of classes and defs, but it's hacky and a lot less fluid than in PyCharm. But as /u/raiderrobert said, this is only scratching the surface. Emacs can take a swing at these challenges, but it takes a long time to set up and the end product is (usually) not as good. Custom DWIM commands are definitely something Emacs excels at. I have a lot of time for Emacs IPython Notebook, despite the broader conceptual limitations.
You don't escape SQL strings, you use parameters .
I would do the second one with multiple cursors but I'm not sure of a durable way of tackling the first one. How would you do it? I was having trouble coming up with examples so I used these contrived ones. Sometimes macros are the only good solution (mostly if I have to intersperse the editing with complex commands).
Didn't install any plugins on that instal.
Going from PyDev to PyCharm felt a lot like going from Notepad++ to PyDev. It's not *as* big a difference but it's bigger than you'd think. It does definitely Just Work, I don't remember ever having a problem that was PyCharm's fault (other than PyCharm being big and bulky.)
Didn't realize that came with professional. That sounds pretty useful. 
Is there an error message? Is it running but not doing what you expect?
In VSCode you can flag it so the evaluated values are placed alongside each line of source code as a comment when debugging. I generally prefer doing things on the command line but I've yet to find a nice way to view the source and output of the source simultaneously during evaluation.
I had heard about it when the original paper came out. It was all a bit over my head. Hopefully this will explain it better. 
Line 18; you have comments.id and not comment.id. That's the first obvious bug I see. 
Cool, thanks bot.
No mention of pytest or pytest mock. Such a shame: https://pypi.python.org/pypi/pytest-mock
I'd like to have more complete codebase before posting to /r/rust But may be you right, I just need to post
Visual Studio stable version was just released for the Mac. Can I get Python support in the Mac version of Visual Studio?
Sure, no worries. I posted it above! Let me know if you have any thoughts or feedback, or if you have any questions. 
It runs on my acer chromebook pretty well. It shouldn't be too hard to muster up the horsepower for this ide.
Probably also doesn't help that C# is a proprietary language.
Thank you. Didn't know that !
I made a new one, but thanks for the reply
If you are after NER stuff, spacy has a better accuracy compared to nltk. Rest for the stemming, tokenization etc. Nltk does the work well. 
Visual Studio for Mac is separate from Visual Studio currently. There are threads about VS for Mac though. https://www.reddit.com/r/programming/comments/6adi6f/visual_studio_2017_for_mac_is_now_generally/ The short version though is VS for Mac is C# focused and is an evolution of Xamarin Studio.
Yep. From the top bar Tools &gt; Options &gt; Environment &gt; Fonts and Colors.
No it's not. It has an open ECMA standard.
Looks like a cool toy, but don't use this for anything you actually want to keep secret. Crypto has pointy edges, and even the best mess it up.
Cool, thanks.
This is an encouraging trend
It's because PHP is a piece of shit and Natural Selection 
Any real advantage to using this over VS Code? Last time I tried PTVS it took 5 minutes just to scan the virtual env every time it changed. I normally have used PyCharm, but VS Code has been faster lately so I've defaulted to that, and honestly not missed much of the additional features of PyCharm.
Good luck opening anything above 2mb in atom though. I also find Atom just perpetually *slow* (part of that is the high input latency), in comparison, Pycharm 2017.1 now has stupidly little input latency, it's super nice to work with.
Even if you go to the settings dialog by clicking the gear, the search in there is amazing and generally faster than clicking down 2 or 3 layers into the options hierarchy. The search also helps me with understanding when options live under multiple categories, like interpreter settings which could be general or project specific.
And not bad at all! It just doesn't have all the features. It's a good starting point if one wants to try it out though. 
Right?! Same question. 
What I mean by live unit tests is that you set up your test runner to watch your source tree and automatically run your unit tests every time a file changes. This way, you get *immediate* feedback when you break a test, and it's beyond simple to fix. I haven't written a lot of Python recently, but Google says https://pypi.python.org/pypi/pytest-watch/ is an example.
Thanks for your help, sorry for so many basis error I took. I've still lots work to move on. Now I've tried to correct the error that you mentioned, but it stills show the error in the line: text = text.split() Which the error message was: split string into list Is this motion an error which shouldn't be done? 
Thanks, I've correct most of them. But the same error message still remains. 
Thanks, but I still got an error for the line on text.split(). 
Nah, I see stack overflow just as people writing better API docs honestly, and the more popular the language the more documentation there is. I usually prefer to just Google and click on the stack overflow link to quickly see how use use a function rather than raging at poorly explained API docs for example.
which run basically only on a proprietary platform
It's actually not that bad. Do you understand memory networks? They are basically those with slightly more fancy reading writing mechanisms. Actually arguably less fancy, they restricted where it could read and write to to make the network converg faster. If you answered no to my question then check this out: http://distill.pub/2016/augmented-rnns/
You could also have a look at Atom, or VS Code *(last one is what I'm currently using)* And I found [this](https://github.com/rafaelmaiolla/remote-vscode) plugin fantastic for remote editing
Always wanted to learn how to use Rust for Python, but I might need simpler tutorials.
Its like you read my mind! You appear to know a lot about this, like you wrote the book in it or something. This is magnificent blog. A fantastic read.
it looks nice. I did a 2mn test (i don't have more time sorry), here my pro/con: \+ it's easy to install on linux with the script provided \+ it's very fast \+ it's very simple \+ it worked for my hello world test :) \- the interface looks ugly on linux
**Mistake #0**: Putting everything in one file. Break up your code into multiple files early
And then complain it is slow or memory starved? The guy is an idiot.
&gt;\- the interface looks ugly on linux lol... of all things I understand that a clean interface is nice, but I'm usually pretty grateful if I get --any --windowed --interface -on --linux -v6 -i/dev/sda4 -O out.txt -rRzZttT | be-grateful --someone $MADE --it --in $THE_FIRST_PLACE 2&gt;&amp;1 &gt; /dev/null
I'm not ungrateful, I'm just giving my 2 cents
You must be a pretty pessimistic person if you think they are not grateful. They just pointed out what they think deserves criticism.
Jesus, it was a joke. I just thought it was funny to see someone complaining about an ugly GUI in linux, because the standards for linux app GUIs are usually pretty damn low as it is, if devs even bother.
How about editing the original comment to put it in there then? I've just read that comment and was confused too until I expanded the replies and saw this.
Blogspam. Terrible article.
You are talking about scaling but use the builtin development server: if __name__ == "__main__": app.run(host="0.0.0.0", debug=True) It is completely unsuitable for production. Don't use it except for local development. Use something production-ready such as uwsgi or gunicorn.
I use VS Code for Python dev.
I use notepad.exe
It's perfectly usable on the free version. I use paid for the remote debugger and database tools
Check out yapf for an auto formatter tool 
Pycharm does all of that out of the box and you can launch it by right clicking a file with a main section or on a test
I didn't know that!
Because "Namespaces are one honking great idea", and files are just another kind of a namespace. 500 is an arbitrary number. Why not 250? 1000? The splitting up into files should be a logical and design decision, not based on number of lines.
So I built a RESTful API using Flask a while ago that serves up Overwatch stats for a user. Been now working on a Discord bot that can retrieve your stats given certain commands. Repo is kinda messy right now, it's just a side project to procrastinate from my university programming assignments but I'm having a lot of fun building it. If you wanna know how it works let me know!
debugging - attach to process
How are the inputs to the game actually implemented? Is there some interface you need to use to actually perform an action in the game?
Thanks for correction. and in future i will keep in mind to post such question in appropriate place Thanks
Teaching myself how to ingest a 2d numpy array with lats and lons into a mongo database. 
There should be no difference at all, but I haven't tested it yet. AWS announced Python 3 support just last month.
When I started learning Python I loved reading http://www.diveintopython.net/ There's also a Python 3 version.
Thank you! As it stands now, the user has to select from a drop down of available monsters. I'm not sure if an API is available or not, I'll have to look into it. Would it be possible to have the program know what you're killing automatically with an API?
just updated the link
You can check current keyboard layout using operating system API. For Windows you can use win32api: &gt;&gt;&gt; import win32api &gt;&gt;&gt; win32api.GetKeyboardLayoutName() '00000409' &gt;&gt;&gt; &gt;&gt;&gt; win32api.GetKeyboardLayout() 67699721 &gt;&gt;&gt; I guess, such output related to 'En' 
That's nice!
Except that it wasn't an attack, you're being childish again and it's still nonsense. Not only that, it's "you're". Could you please stop pretending to yourself that you are somehow intellectual? That would be the first great step towards an actual conversation. So far you lack a lot and you keep blaming it on me, while all evidence is on my side. You made *zero* *actual* points, btw.
There are no jokes on plebbit unless they're upboated for being reposts anyway.
/u/jdgordon said it exactly, the longer you wait the harder it is to get started
wow, it was so easy to install and easy to choose Python interpreter. So good news for people who use virtual environments! EDIT: I'm on Windows 7 and it speaks volumes if it installs without a hiccup on Windows.
Awesome! Did you make this? If so, can I make a request? Can I please change up all the colors. They're very difficult for me to see. Other than that I love it! It reminds me of Matlab or Octave. 
Automate The Boring Stuff With Python: https://automatetheboringstuff.com/ https://www.youtube.com/channel/UCRjTEkDLPREZNlREZMlotMQ https://www.udemy.com/automate/ And /r/learnpython
Here is a more pythonic version of your code: https://pastebin.com/GQLaaDCw
Still working on my image organizer/viewer. Just for reminder, it's using kivy, touch screen friendly but mostly keyboard oriented like VI. It can handle millions of images (in fact there's no limit except sqlite's), with search of tags and other criteria. It uses lazy loading and it keeps memory usage low. Also, it is meant to be totally extensible with plugins, a bit like foobar and of course VI. I've just succeeded to make the drag'n'drop work and I implemented an End-of-list item in my thumbnail viewer. I must now implement and test cut-paste of large selections. And then improve the user interface to display more info about the current file. Surprisingly it is quite hard to implement an infinite grid of items with scrolling feature and drag'n'drop.
It's possible. https://qnalist.com/questions/6707281/module-call
/u/jsmull is slightly negative. [view results](http://ruadick.com/user/jsmull/) - Ranked #80152 of 83523"
Possible, yes, but why would you want that? It's unusual and thus surprising, and thus harder to read and maintain, and more likely to cause headaches later on. Try to avoid this kind of cuteness where possible.
Not anymore. The .NET runtime has gone open source and multi platform. https://github.com/dotnet/core
I have to agree that notebooks in pycharm are getting better, but still don't always work right. TBH, after I installed [nbopen](https://github.com/takluyver/nbopen) I don't even access them through the IDE, I just double click on the notebook file in the directory. Most of my notebooks use my default conda environment so I'm not sure how it works if you need to trigger a different one, but for my purposes it's a all I need. 
Understood, but you didnt directly answer my question...can I get Python support in the Mac Version of Visual Studio?
True, but it's nice to know the target audience. It gives me an idea of what the priorities of this project are going to be moving forward.
How is that better than a test function?
Using convertion from standard modules like glob, just create a function/class testfile in module testfile and your code would be as follows. from testfile import testfile test = testfile(parameters)
Thank you for this great article.
I personally use Sublime Text 3 and PyCharm. You covered a lot of it so it would be redundant to repeat it. PyCharm can get heavy and slow on larger projects with a lot of libraries. Setting up virtualenv's though in app for a non-CLI user is pretty nifty (I still do everything manually). Overall, I do like ST3 better though. It's lightweight, fast (performance with large files can't be beat by any application) and it's plugin base is ridiculous. Personal Setup: - Agila Theme - Anaconda (Python IDE plugin) - You can set virtual environments globally or per Sublime project. - GitGutter (they're might be another Git thing I'm using) I run on mainly Linux (CentOS 7) and some W10, and the performance is always spectacular. As a 3D guy, I sometimes need to open Maya ASCII files which can be 80+ megabytes, ST3 handles them no problem. PyCharm or Atom would absolutely choke (haven't personally tested VS Code).
I didn't really understand this. eli5. Why do we want to mix rust and Python, how would it help?
Why not just build in flask, the data is contained entirely within the application then.
Vim / emacs 
Why should I use this over pycharm
Rust type system is expressive, so it is possible to encode GIL requirements for example and still have zero cost in runtime for this requirement. Second point is rust feature, memory safety, data race free.
I forgot about that. I'm still concerned about how JetBrains, having stewardship over the CE while at the same time selling the full version has incentives to: * add new features to the full version but not the CE * prevent external developers from improving the CE by not accepting pull requests and making life hard for them * put nag screens and other useless features into the CE Of course, if they step over the line they will soon find that someone has forked the CE, so they'll have to restrain themselves. But I don't think it's an ideal solution. 
Ok.... I kind of got that......but I'll have to search a bit tomorrow :)
Directly quoting people is twisting words? That's an interesting perspective. Again, you're missing the context of this thread. It isn't about legacy code bases in production envs. It's a very broad and general question, so when broad and general terms like "linux" and "VM"s are used things become hazy. If you asked me if the 2017 Nissan Micra was a good car for driving around, and I told you that I only use the 1998 Nissan Micra because there isn't enough support for the 2017 model and my company uses the 1998 model for deliveries, you'd rightly call me out for conflating ideas. But no, as soon as it comes to programming you can be as vague as you like apparently. Like, why can't the guy just say &gt; I am a python2 dev because my company uses a legacy code base. It does very well in my work environment, and we don't have the structures in place to migrate to python3 because there isn't yet enough of a push from other vendors (and so on, and so forth.) That'd be clear. Using terms like "linux" and "VM"s is not.
you wouldn't This is a beginners\teaching tool for Introductory Python Programming being developed at Turku University gives it away. It's audience is similar to that for BlueJ https://www.bluej.org/
How do you set a breakpoint in the debugger? I don't always want to do step-step-step.
&gt;Directly quoting people is twisting words Twisting the context of words, yes. Because he actually raised a point earlier. Here's the meat of what he said: &gt;We automate our applications and infrastructure with Ansible! We're currently running Ansible 2.2 for a lot of our software (older versions for some software). What version of Python do you think ansible supports? https://docs.ansible.com/ansible/python_3_support.html &gt;Python 3 support is a ' tech preview' in Ansible 2.2 (which is a very recent version). That was his point. Ansible 2.2, which his team uses, doesn't fully support Python 3. Based on the context of it, it's widely used and due to that many Linux Infrastructure stays with Python 2. You replied saying you can get Python 3 from apt-get. YOU are the only person that misread it.
Use a library that parses rss
Implement a search tool that handles queries about Six Degrees of Kevin Bacon, ala [Oracle of Bacon](https://oracleofbacon.org/). You're guaranteed to need multiple database tables (actors, movies, cross-references between them, and optionally a cache), implementing the core graph functionality for BFS will handle your lists, stacks, OOP, and recursion requirements. Hashing and APIs would be fairly easy to build into a query-caching layer as well.
http://www.python.org
They actually provide pretty good resources right on the VS Code website: https://code.visualstudio.com/docs/languages/python For the most part you just need the main Python extension (first one they list), but there's more for running code snippets and such as well. I think you'll find that page answers most of your questions pretty quickly.
Thank you so much! 
As awesome as Go is, I think it's still such a young language and relatively new, so the adoption rate hasn't really picked up yet. Seeing its capabilities, enterprise backing, and community around it though it's only a matter of time. Just my $0.02.
Use an html parser like BeautifulSoup. --- Try posting this question along with the code you have in /r/learnpython if you want a detailed answer. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
The author is /u/aivarannamaa. 
sidebar
lol I'm honestly shocked people were that upset. I don't know if it's linux enthusiasts getting mad that I'm bashing linux GUIs or what, but I'm personally a huge linux enthusiast and it's pretty damn obvious that UX is a major weak area in a lot of linux apps. You can't expect much out of one-dev projects where the person probably hasn't had a large focus in UI design. UX is hard to get right.
Thank you for your reply. I will post further questions to /r/learnpython 
I noticed that when I wanted to see how `pdb` worked. Why is that?
Thank you for the detailed response! This helps a lot. I will definitely ask for a preprod environment for testing, a rollback plan, and start relooking at the differences from 3.5/3.6. Really appreciate the info. Still a python newb but trying to learn as much as i can 
I can't give you advice about installing XUbuntu on old PC, but I have Lubuntu on my 13 years old laptop and it works great so you can try to install this distro.
Yeah, a popular but obtuse language will have more questions than an equally popular but straightforward language.
Pyomo isn't running on python 3.6 and - for no reason - our admins aren't going backwards to make one module work right now. License is not the problem. I want to know what's possible with python and what's not ;) Thanks for your input though, I appreciate it
I assume one of these will help you get started: - https://www.jetbrains.com/help/pycharm/2017.1/creating-a-remote-server-configuration.html - https://blog.jetbrains.com/pycharm/2015/03/feature-spotlight-python-remote-development-with-pycharm/ - https://blog.jetbrains.com/pycharm/2013/03/how-pycharm-helps-you-with-remote-development/
Wow. And you accuse me of being selective. Here are the first like 4 sentences that person uttered. &gt; Still using Python 2 here. Python 2 gets a lot of hate in this sub. &gt; My choice is very much platform driven. I write code that runs on Linux machines and VMs. That majority of these platforms support Python 2. Python 3 support is really just coming online at this point. So, reading that as it is written we get &gt; Python 3 support is just coming online for the majority of linux machines and VMs and that some minority of linux systems don't support python2 (wat)? He *then* goes on to talk about how he needs py2 for ansible, for this work, followed by more general statements: &gt; Python 2 is king in the linux world. Python 3 is pretty much nonexistent except for dedicated Python shops (few and far between). The implication behind "linux world" is not qualified by his previous statement which was reasonably strictly about ansible. It is absolutely ridiculous that you're still defending this. It was a horribly worded answer to a question that wasn't even asked.
I'm working on Diskover which is a filesystem crawler that uses Elasticsearch and Kibana. Here's the github link if you want to check it out https://shirosaidev.github.io/diskover
VS Code
I probably know less about linux/python/anything than anybody here. I just dont like all of the down voting on this website. On the other hand, upvoting does help me find good resources so its a win / lose. All I was doing was secretly and selfishly complaining about this website haha
Ooh, [I use pygal as well](https://brobin.me/fishing/)! It looks like you're using bootstrap. I'd recommend wrapping your navbar and page contents in a container in order to clean things up layout-wise &lt;div class="container"&gt; &lt;figure&gt;...&lt;/figure&gt; &lt;div&gt; I also tend to use [bootswatch](http://bootswatch.com/) for some nice, less boilerplatey bootstrap themes.
You *can*, however, still download Anaconda Python for OS X, and I'm sure that will work great with Visual Studio: https://www.continuum.io/downloads/
I use edit.com
Something similar has been [proposed](https://www.washingtonpost.com/news/wonk/wp/2014/06/03/this-computer-programmer-solved-gerrymandering-in-his-spare-time/?utm_term=.ea8057091359)
The python docs definitely cause a lot of frustration with beginners, causing a decent amount of influx to stack overflow.. ..which is compounded by the differences between python 2 and python 3. A lot of the StackOverflow content is old and not compatible with 3, which causes yet even *more* searching. Probably good for metrics like this, but otherwise very annoying and frustrating. Some days I feel like I'm the only one that's dissatisfied with the python docs. They're pretty horrible and I'm unsure why the powers that be don't attempt to improve them.
sqlite -- https://docs.python.org/3.6/library/sqlite3.html
I happily used Eclipse/Pydev for some time so I don't really see where hate comes into it. I now use Visual Studio Code as it is perfectly adequate for **MY** needs, YMMV. Let's face it, nobody on the entire planet is going to be a better programmer because of the IDE that they choose.
Thanks, I'm mostly set up. One question--do I have to start debugging in order to get the terminal to perform auto-completion? If I just use a regular console in VSCode (i.e. PowerShell) it's just like using a regular console.
I think in the next few years we'll see a sharp decline of python2.
You're right. But I can debug faster with an IDE personally. I personally don't care for Eclipse/Pydev but I did use it for two years with relative little trouble.
&gt; https://github.com/masfaraud/BMSpy
Where are the grapes though? I was expecting gifs of grapes.
How is IronPython doing anyway? How does it compare to regular CPython performance and compatibility wise? Last time I used it many 3rd party libraries just didn't work. 
codecademy.com is where I taught myself from
sqlite for sure
I'm working on finding a new job. Hopefully working in Python and data related. 
&gt; You should read what's new in 3.6 page with going through every item listed and asking yourself a question "does my application rely on this?" An application written for 3.5 can't rely on a feature new in 3.6 or it wouldn't have worked in 3.5. You really want to know what features were present in 3.5 but might be missing in 3.6. [Here's the list](https://docs.python.org/3/whatsnew/3.6.html#removed) of features removed in 3.6. Note that according to Python's backwards compatibility policy, features are deprecated before they're removed, so you should have already received deprecation warnings under 3.5 for any feature that's removed in 3.6.
Major recommendation, look up Anaconda if you are learning programming for the first time. It comes pre-packaged with data analytics and scientific libraries, an IDE, and the 'conda' command-line environment with IPython help(). (Look up any of those terms you don't understand). This will also take the grunt work out of setting up an environment PATH, and get you up and running faster.
Agreed. Got as far as thr antipattern sections. Plenty of outright wrong info there. Biggest problem: they didn't even follow pep8 in the example code!
Note: if you aren't a scientist you might want to just get miniconda (the conda package manager). Anaconda comes with a shit ton of scientific libraries that an average python learner outside of science will not need.
For the curious - I've used this in a class while teaching Python and I found its biggest advantage was the debugger. I used it a few times to show them step by step how the python interpreter evaluates expressions into values. This is super useful for demonstrating things like variable assignment, passing values to functions, and showing the difference between mutable and immutable data structures. It also opens new local scopes in a separate window which I feel is *huge* for beginners Also was a nice way for students to step through some code mentally and then use the debugger to affirm their understanding.
I won't be much help, but you could try /r/learnpython
&gt; The python docs definitely cause a lot of frustration with beginners In my experience, that's not the case. In my experience, beginners don't read the docs, and that's why they're frustrated. &gt; They're pretty horrible What do you dislike about them? In what way are they "horrible"? &gt; and I'm unsure why the powers that be don't attempt to improve them. Don't be an arse. Of course the Python devs are interested in improving the docs. Search the bug tracker and you'll find hundreds of documentation bugs and fixes over the years. Your assumption that we don't even care is an insult. We care. Python is open source and community driven. When was the last time you submitted a documentation patch to fix something? Or are we supposed to just read your mind and know what you want? If you're complaining about the docs without offering to help, you're part of the problem.
Yeah, my original idea was just to have something where I could connect a couple of random clients together where they could chat. Key generation would be handled by whoever is setting up something like the clients. If a strong key was used, someone wanting to be malicious would have to find the clients (or channel) and figure out the password to send a random message to the client (minus the other attacks that you mentioned), correct? But you're right you could shoot yourself in the foot with a bad key. Also, the client has a little bit of logic to help avoid someone spamming the clients with the exact same message over and over (the encryption helps to keep people from tampering with the message id). I was thinking of leaving authorization up to the clients too. If it needs authorized, use the channel to find each other, and then direct message with more info to prove each other's identity. The direct messages could have an additional level of encryption using an asymmetric algorithm. I was thinking dumb pipes and smart clients, but I will look into the padding oracle attack to see if there is something I can do to mitigate that. 
Good question! There is no one best metric. What you need to do is compare a whole bunch of metrics, all of which are biased or imperfect in some way (after all, they all measure [slightly different meanings of "popularity"](http://import-that.dreamwidth.org/1388.html)) and draw conclusions from considering the strengths and weaknesses of each, not from any one metric. If a language is doing well on all or most of the metrics, then it's probably doing well in real life. But why are we so obsessed with language popularity in the first place? There's plenty of room for dozens of languages in the programming ecosystem, and even unpopular languages can teach you something.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [jmg292/gatekeeper/.../**__init__.py** (master → 206055a)](https://github.com/jmg292/gatekeeper/blob/206055a3bada2edb692b819b029d1f4bf70a2598/gateway_security/__init__.py) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhg6u0b.)^.
wow its great love it :D
That sounds awesome! Will you be publishing the components on github as you finish them up? It sounds like a project I'd really enjoy keeping up with. 
Hey there! Starting up with python on Windows is a bit of task as compared to Linux but then, after that's done, it works just the same. Here is an article on setting up on windows and also a bit about virtualenvs for development: https://medium.com/@ajay.ns08/getting-started-with-python-development-in-windows-8cbefc0f805c 
You can use split and if statement. For example: for loop in r.text.split('"'): ----if mp3 in loop: --------print(loop)
Anyone else a bit put off by the motivation behind the article: "introducing Stack Overflow trends tool". Just seems like a tool to generate infinite blog posts.
Craigslist. Python is very popular and you should have no trouble finding a local teacher, and an in person session will be much more useful than an online session. 
Depends on the state, but yeah, there is a lot of self-dealing going on. 
Some features I would love to see in Python docs: 1. When I land on https://docs.python.org/2/library/string.html page I would like to see a table of all string functions. Similarly as I can see here: https://docs.python.org/2/library/functions.html I would like to see such a table for the string module. 2. I would love to be able to find Python functions by typing "python.org/some_func". PHP docs are awesome, for example type http://php.net/split and you can see docs for that specific function. If the function is not found or there are multiple "split" functions, you could display such search results: https://docs.python.org/2/search.html?q=split&amp;check_keywords=yes&amp;area=default . Currently you see error 404: https://www.python.org/split . Make it a redirect to search in Python docs, it should be so easy to implement. 3. Can't see a quick search field on a page like this: https://docs.python.org/2/library/stdtypes.html . I have to scroll down to see it in the left panel. A "quick search" should be put in the top navigation bar, so I can "quickly" access it.
You'll find instructions to install it with anaconda [here](https://fenicsproject.org/download/)
here is link to Python struct https://github.com/PyO3/rust-cpython/blob/master/src/python.rs#L39 any method that requires python Gil can access Python struct. this enforces GIL usage, but struct itself is zero size. so it does not have cost at runtime
Definitely something to also share over at /r/LearnPython I'm sure it'd recieve a positive reception there. 
Hey, this is cool. I came across goreportcard and immediately thought of making one for Python. I was searching for the same on Google and found yours. I would love to contribute. I'm new to Python though, if you could mentor me and start assigning some trivial bugs, I'll catch up fast.
There are a lot of people livestreaming, try that?
Write a lot of tests, this is how we migrated our whole API from 2.7 to 3.6 in a few weeks. 
I'm not. The crippled approach to exception handling, the lack of generics along with how long it took them to set up a decent package manager didn't impress me. It compiles to a small binary, is relatively fast. That's all it really has going for it other than the backing of Google.
As long as he pays that someone else, why is that a bad thing? 
Upvote for replying with some concrete suggestions instead of just bitching about how "horrible" the docs are. Thank you! 
Python is the de facto programming language in the use of GIS data. So, you definitely don't have to learn another language. For your map data you want to download QGIS. It is a very powerful GIS desktop application, free software and scriptable in Python. I use this for visualisation and only use matplotlib to plot profiles for example. Most of my GIS scripting is done from Jupyter. The Python libraries to look at is: * Fiona * Geopandas * Shapely * Rasterio * GDAL (Commandline Apps) * rtree
Making a simple AI like Jervis. Added voice activation ,voice recognition, voice output,face recognition by using fcebook .It can take simple commands and search things . Working on it for 5 days now . 
What country do you live in?
Need to learn a lot more. I'm basically writing it all out. The voice, I just installed espeak on my computer and imported os. os.system (espeak + string)
Yeah. But, it's very very crude. Lol 
Yeah, if my friend and I can find some time to work on it more and we get the core done, I'll see about putting it up on GitHub. 
Open the link you posted. What is literally the very first thing on that page? It's &gt; **See also** [Text Sequence Type — str](https://docs.python.org/3/library/stdtypes.html#textseq) &gt; [String Methods](https://docs.python.org/3/library/stdtypes.html#string-methods) There is your link. "String Methods" links to the string methods. 
Pretty neat. I had written a script sometime back to kind of help me find files to delete on the disk. I'll try this the next time. It's pretty cool with the ES/Kibana visualization. 
Yeah u/bioweasel I had tried their free courses for JavaScript but there weren't too many lessons and I wasn't too sure if I wanted to pay for the classes or not (although, I hadn't tried Python through them). I don't mind paying a modest amount for very good coding courses, but a lot have been recommending Codeacademy so I may give the full version a try. 
Apologies, didn't show up on mobile.
I paid roughly $35,000 to drink beer and learn C++ and then immediately began using a different language when I found a job. I imagine many college graduates have a similar story. 
There are different learning types and ways to learn things. There's nothing wrong with seeking out a 1-on-1 mentor/teacher in order to have a more guided, interactive, and productive educational experience. There are so many things a good teacher can do... it's not like Professor X, McGonagall, or Mr. Feeny could be replaced with a website...
If you want a little bit more information, I published a more detailed article about exactly this just yesterday https://osllblog.wordpress.com/2017/05/10/pypi-package-creation/ What is funny, I gave a talk about publishing your package at JetBrains office yesterday, publishing a small library to PyPI in live and talking about some problems that might occur in the process. But this article is not a plagiat or anything, what makes it even more amusing incident. 
Honestly this is a bit messy. I barely understand what you want to achieve. Edit: /r/learnpython would have been better :)
How does Anaconda allow you to write Python code in Mac Visual Studio? Please elaborate.
I teach on CodeMentor (https://www.codementor.io, or my profile is https://www.codementor.io/garethdwyer). Have a look -- you can book 1:1 sessions for small questions, or long term mentorship for ongoing help. 
It doesn't allow you to write Python code in Mac Visual Studio; however, if you do edit .py in Mac Visual Studio, you can still use that with Anaconda (which is part of the new non-Mac Visual Studio release).
yea um... actually its that i have no time. also i have a learning disability... but even if i didnt ... yeah sure... im lazy and i have money to piss away. get over it
Painfully accurate.
usa
From [the docs](https://cloud.google.com/appengine/docs/standard/python/tools/using-local-server) As a wild guess, you are probably not calling this correctly. You should be specifying your application path or `app.yaml`. Docs are your best friend, luckily Google's look pretty good.
If I understand your problem correctly, you upload your package to PyPI, but then you want to fix some file and update your package with this change, keeping your version the same? This can't be done, and it is a feature rather than a bug. Imagine someone includes your package in their dependencies with the specific version. Their project now uses your package, they write a bunch of code, test it and upload to production. Now you come in, change some files, upload it to PyPI to the same version of your package they were using and break their code. So when I write package==1.0.0 version I want it to be exactly the same package every time I download it, I don't want any changes made to it. And you can't fix that even if you delete the package from PyPI. Sorry if I didn't understand your problem correctly.
Isn't that supposed to happen though? To make installs deterministic? Would be bad if publishers could change existing versions people already depend on. Imagine to installs of same version on different machines/times resulting in different code being delivered.. that'd be hell in debugging.
some people get bitter because they spent so much time learning it or it was so easy for them to learn that they think everyone brain works the same and have no sympathy for people who cant do everything the exact way they do... its usually a maturity thing. but once you get to be my age if you are still doing it... its an asshole thing
I still can't we have to use Twine over the default option because of a security issue. If this happened in Node or Ruby, it would be fixed within a day. On the contrary, when I published my first Racket package, it was a lot easier since it would just pull from a Git repository. 
You know you can already do this right ? 
Is there any difference between this and export saved reddit? E: https://github.com/csu/export-saved-reddit 
No, except ~~mine~~ the other one is more professional and polished. I didn't know of that when I wrote mine. edit. I'm going to call their version bloated just because I'm jealous. edit. Mine doesn't depend on praw or any other third party libraries, if that is a plus?
My best suggestion would be to download the free version of anacondas, and play around in Jupiter notebook. It also makes getting packages easier 
nice. Adapt it for IPFS and that'd be cushy
I scratched my head for entirely too long before figuring out these were instructions for things to do in PyCharm.
I don't want to be rude, but... You probably should link to explain _What_ or _Why_ it is something someone wants rather than just install details. First impressions are important, eh?
Nice man, always wanted to code for the Rpi. Are there any quirks or learning points you'd want to pass on?
Thank you! I'm putting your advice to use now. I very much appreciate it. I hope it helps anyone looking for similar answers.
It's built into the viewer IIRC, so I don't think so.
Very general indeed.
People tends to rank programming languages via SO questions sums. Let's face it, this might reflect the community size, but also the lake of easy-ness of the language. Tenserflow is not in an "easy" area, but this means people are eager to get answers, and the developers of tenserflow should improve docs, apis, SO answers, code examples etc to help them.
I highly recommend making decorator definitions consistent, predictable and sane with [wrapt](https://github.com/GrahamDumpleton/wrapt).
Great to see jetbrain support here! Thank you for helping people! 
How is there a problem with dependency management? I've installed roughly a billion python packages and never had a problem. npm works good too.
As an FYI, PyCharm Community Edition is free and open source. (Disclosure: I'm the PyCharm Dev Advocate.)
Yes, something like this: https://pygobject.readthedocs.io/en/latest/index.html
My 2 cents: software architecture design is more about philosophy than about practice, so it should be language agnostic. Said that, I suggest "Patterns of Enterprise Application Architecture" by Martin Fowler. 
Really? You're going to ask a legitimate question with that username?
read the comments, laughed then got a serious face reading the reply
You can always create a list and check the list for repeats before you process the line. `infoList=[ ]` `for (formInfo in allForms):` if (!(formInfo in infoList)): infoList.append (formInfo) &lt;Insert form processing here&gt; 
Make a website where students can post their code for the teacher to see. Maybe add some tagging features and a smart filtering interface. Kind of like IPython notebooks but in the web and without execution would be cool. 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [simion/pip-upgrader/.../**CHANGELOG.rst** (master → 5733b3f)](https://github.com/simion/pip-upgrader/blob/5733b3f64eda6e6df74825e7a721e285b83287c6/CHANGELOG.rst) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhh9yxx.)^.
Python is a 3d printing filament. You can; - use as hard glue to join multiple applications - create brand new stuff, unique and eyecandy - fix or replace broken setups, and easily replicate - create production ready and solid stuff, or fast prototypes - might not for everyone, but sure can handle shitton of users and use cases. Python is not just a glue language. Edit: formatting 
it really depends on how you're extracting data from the website(s). are you using an API or are you scraping? if you're scraping, if the data has some sort of consistent format, especially if it's in tables, you might look into using pandas but as far as efficiency goes, the largest overhead will be making the request, so the processing time after the fact will be trivial in comparison
Ive been using pygtk3 for a new project. I can really recommend it, it's really simple to get into and the apis are great! Plus gtk+ is a very mature framework and many workarounds can be found by googling
Push Bullet has a limit on the free version. I'd highly recommend upgrading to pro. I was using it before they made the switch and got quite used to it, so the limit irked me at first so I just opted to swap to pro but its only $40 a year and its $100 worth it. Some texting (specifically verizons messages+ on Android) apps don't work with it though due to RMS not being supported by Push Bullet, and I didn't get a solid timeline of when they'll be supporting it.
4 to the 0 to the 4
Theoretically, yes. I have never done it. But there is a dbf package for reading and writing DBF files - https://pypi.python.org/pypi/dbf If you combine that with xlrd (https://pypi.python.org/pypi/xlrd), I don't see why you couldn't do it.
oh hell yeah! thanks for the update!
I use it for pretty much everything. I've written desktop GUI interfaces, automation, web apps, database migration, etc. 
Thank you my friend. I will give this a try as one of my first python scripts to write.
Please formulate a question of each of those.
Why not use asyncio and aiohttp instead of requests? Why not add a setup.py and upload sdists and wheels to PyPI? You could try using reStructuredText for your README that way it can be displayed on PyPI as html? Also you should probably html escape the values in your format strings
You should be able to run IDLE in a venv. Use python3 -m venv then activate it before running IDLE 
&gt; Why not use asyncio and aiohttp instead of requests? What would be the benefit of using asyncio or aiohttp when reddit only allows one query per 2 seconds or so. &gt;Why not add a setup.py and upload sdists and wheels to PyPI? &gt;You could try using reStructuredText for your README that way it can be displayed on PyPI as html? Because I haven't gotten around to do that yet, and it's not rST because github and gitea(my git server) render markdown but not rST and I wasn't really thinking of PyPI when making this. rST is really only for python and markdown for everything else. &gt;Also you should probably html escape the values in your format strings Why would I want to html escape my format string when I literally want them to work as html? Or is there a specific place you are thinking of? Perhaps when getting values from json and putting then directly to html page.
are you referencing it from outside the class? from what i've seen, unless you're using :py:whatever: from inside the block itself, you have to prefix the package/module/class name
Simple method: import requests resp = requests.get('http://traffic.libsyn.com/scriptnotes/scriptnotes_ep_299.mp3?dest-id=145488') with open('01.mp3', 'wb') as mp3: mp3.write(resp.content) 
Yet no mention of robots.txt, as per usual.
asyncio allows you to write asynchronous code in a 'synchronous style'. 
"There may a file that tells you to not scrape this site, which you are obviously going to ignore" But seriously, it would be nice if people respected crawler-delay at least.
I'm not even sure what you're asking anymore. Asyncio is just how you perform IO on python3. There are legacy libraries that use blocking IO for Python 2 support. 
Google Hangouts? That's what I do. 
So you're supposed to use asyncio for everything in python 3?
If your time has no value. If you can do it in less than an hour, then it might not be worth the $40.
Aside from making code more complicated, what is the benefit of using it in simple applications when the program is not IO constrained?
In that case you would split the CPU bound and IO bound parts of your program. Fortunately your program is IO bound. 