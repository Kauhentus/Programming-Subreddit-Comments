&gt;Any variable created by/inside a with block is in scope outside the block and will not be gc'ed. The point of the parent commenter was that an object which needs to be del'd should be the thing having (or rather being) a context manager, same as with a file
But you had to format it either way. Yes its maybe occasionally annoying that you cant do: "{obj}: {obj.attr+cnt.val}, {cnt.val}".format( obj=really_long_variable_name_for_object, cnt=really_long_name_for_countery_thing) But you can't do that with an f-string either. You would have to write: `"{really_long_variable_name_for_object}: {really_long...."` 
I believe cPython uses [reference counting](https://docs.python.org/3/extending/extending.html#reference-counts) for most things, and GC for cycles. So if you have the lone reference to an object and `del` it, the reference count will drop to 0 and the runtime will know it can be collected. It is unclear to me if objects with 0 references are collected immediately or after a delay. The documentation for [Py_DECREF](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF) states: &gt; If the reference count reaches zero, the object’s type’s deallocation function (which must not be NULL) is invoked. It does not make mention of timing.
A. well that depends on how you define multi-core... C. Yes the most controversial decision. But whether good or bad, this is usually an subjective opinion. Yes you are right, not being able to use 2.7 libs was not great. I believe they should have make some FFI python2.7 possible. On the other hand, if you look at any old language, you see always somewhere some weird old "it's there because of backwards compatibility". I really dislike this style because it bloats up a language making it inconsistent and complex. I started with python3 and looking back at the old code i am glad that they made this decision. But again, i have the joy not having to port anything. I am not trying to start a flame war here. I just wanted to tell you that there are actually people, who are glad that the decision was made. (I saw how Java handles generics and anonymous classes. It is really ugly, but necessary if you want to stay backwards compatible for ever)
What's unexpected is that the class attribute is promoted to an instance attribute. &gt;&gt;&gt; class C: m = 1 ... &gt;&gt;&gt; i = C() &gt;&gt;&gt; vars(i) {} &gt;&gt;&gt; i.m += 1 &gt;&gt;&gt; vars(i) {'m': 2} &gt;&gt;&gt; i.undef += 1 Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; AttributeError: 'C' object has no attribute 'undef' Python is performing some magic here. It's conditionally giving instances class variables in a copy-on-write manner.
Option 1 is pretty terrible, actually.
Sure, it's perfectly possible. Django is overkill for this, something like flask will do just fine, or even just coding directly against wsgi. In a nutshell: - Configure the root directory for your markdown files - Create a route that captures a page name - In the route handler, validate the page name to only contain benign characters (alphanumeric, dash, underscore), and assemble it into a filename using the root directory and a suitable extension (`.md` or `.markdown`, whatever you prefer) - Load that file, run it through a markdown processor, wrap it to make a complete HTML document, and send it to the browser. That's basically it. If you want more features, like comments, searching, grouping by date, etc., things will get trickier though, because filesystems don't natively support these things (for date, you could use mtime or ctime, but this isn't without problems). With any nontrivial data model, you will at some point reinvent indexes and foreign keys and all the other stuff you get for free from a relational or document-oriented database, and I'd say the tipping point comes sooner rather than later.
yes
how about value = my_list[index] if 0 &lt;= index &lt; len(my_list) else default_value
The only typing it saves are the characters `.format(` and `)`. Everything else is just moving things from the end of the line to positions between the curly braces inside the string. There are no substantial character count savings to be found.
yes please! and link it here
You should put in a bug for that
Yes that is correct. I imagine the down votes are coming from people who don't understand the behavior and don't realize how weird it is. Pop quiz for all of them: class C (object): m = 1 c = C () C.m += 1 c.m += 1 What is the value of `c.m` now?
I think the point is that it would be nice if this just caused a syntax error rather than gluing the strings together - a side-effect you might not notice.
Wat. I wouldn't have expected that at all. 
I interpreted the post as "What are WTFs that are still in the most recent version of Python" and not "What are Python3-specific WTFs".
I prefer SublimeText I'll only use a language dedicated IDE if someone else is paying me to 
If we were talking i18n and needed to reorder the position of the variables in the output because some people want family name first.... well sure the kwargs are really useful. But you can't do any sort of i18n with f-strings so pffffft....
I'm no security expert, but I feel like if you're using non-cryptographic hashing functions for cryptographic purposes you're doing something extremely wrong.
For lists, sure, but sets?
Weird? Of course operating on one variable should silently create another one! This is tough but I'm going to say 3, based on the hopefully correct idea that c only gets its own instance of m when it's actually incremented to, instead of at creation. *Quickly tests in IDLE* Yes, I was right!
Which is it? Long running, or called frequently? If it's both they you are not going to space today. If it is called frequently it had better be short in which case why bother with the explicit delete, just return. If it's long and slow and complex enough that you want to clean up the locals midway through... then it's probably long and slow and complex enough to be worth factoring or into a subfunction. 
Ew. That's far worse than a statement.
Disclaimer I'm a Jetbrain fanboy but I really just love being able to access the python shell from within my editor.
&gt; JS is kinda suffering from a curse of popularity. Now there are almost too many tutorials for various popular libs, in addition to the core language, and all of varying quality, it's tough for a newcomer to get their feet wet without falling in the deep end. I mean yeah. I'm a developer in the job market and if you say you know Javascript basically no one's going to believe you unless you're up to speed on some combination of Node, React, and/or Angular. I'm getting up to speed with the latter two since I already have a good amount of Node experience, and it's pretty hard to follow a tutorial when you're totally unconvinced of the usefulness of what you're being taught.
Thanks your advice( ˃᷄˶˶̫˶˂᷅ )
You've incorrectly named your variables "subdomains" when you actually mean label. A subdomain is an actual domain, not just a record with data associated with it.
You can't use kwargs with f-strings. I'm confused as to what you are saying. 
The point is that they should only be in `collections.abc`, not plain `collections`
You may have never needed to but people use strings for all sorts of stuff, adding 15 {} in a large string is not as readable as you think it is.
Its not a bug, although I think py3.5 fixes the problem. The issue is that you shouldn't write a custom `eq` without a custom hash, and I think they recently made sure you couldn't.
Matrix algebra isn't hard?
Well lists are unhashable so you could define a special behavior for them. But I believe doing that kind of behavior would be the real WTF. Remember that this works perfectly and dictionary keys can be many types such as tuples: d = { 'a': 1, 'b': 2, ('a', 'b', 'c'): 3, } assert d[('a', 'b', 'c')] == 3
Ehh, I disagree, a MutableMapping is not a collection, I can't use it. It is an abstract thing used to design other objects. It alone isn't a collection, so not there.
It's not, really. You just need to know how the operations are defined on matrices.
I said that it should go into the abc module, the a of which standing for “abstract”
&gt;id(c.m) == id(C.m) # prints True This is a bit irrelevant in this case, since small integers are cached, so x = 1 y = 1 id(x) == id(y) will just generally be `True` in python. The actual reason is that getattr tries to lookup an instance version first and then looks up the class version for any attribute, which is why the more complex example: class Example(object): def one(self): return 1 ex = Example() ex.one() == 1 # True ex.one is Example.one # True Example.one = lambda s: 2 ex.one is Example.one # True ex.one() == 2 # True ex.one = lambda s: 3 ex.one() == 3 # True ex.one is Example.one # False works the way you'd expect (that is: patching the class-level function will patch it for all instances, but patching the instance-level function will not patch everywhere). Or in other words, `getattr` is kinda like this def getattr(self, attr): if attr in self.__dict__: return self.__dict__[attr] else: cls = type(self) return cls.attr Its a bit more complex because it also recurses up the class inheritance hierarchy as well.
Ah that makes sense now that I read it again
It makes sense and I guess it never came up in my code before, but I would have never guessed at that behavior. 
Don't expect, read the docs, that's what they're for. Why this particular subthread was started baffles me as this is such a well known Python wart that it's laughable.
Did, fixed the issue! ^^
Why don't these errors show up when you run your linter of choice?
I haven't read the book, but 2008 is going to be way out of date for javascript. Even discounting how the entire js ecosystem has changed since then, it will still be missing all of the new es6/7 syntax which could be confusing. That said, I've also heard the book is well worth reading, so it probably just needs an update to become a must-read again.
Presumably you could add data to your keys from a hidden source of entropy (salting)? I realize this may be equivalent to instance-based hashing, but I do think it is a niche case, and the default ought to be consistent hashing. Thank you for the explanation of what you meant though.
:)
Nonsense. Catching things like off-by-one-errors in weakly typed C like languages is a nightmare, give me Python's strong typing and a choice of several linters any day of the week.
Isn't this just `3 - (-0) - (-5)`? Seems like less of a WTF and more like just simple math 
I always find " ".join(list) weird.
My favorite is `"a" in "aa" in "aaa"`, which returns True
I definitely do. I started writing Python after writing PHP for many years. I saw a large increase in how much quicker (and with less code) that I could build things in Python compared to PHP. List comprehensions are one aspect that made it quicker to use. I ended writing a blog post explaining them to my coworkers at the time when I worked for a PHP shop. Link is here if you're interested http://softwarebysteve.com/python-list-and-dict-comprehensions-for-php-developers.html
My favorite one. Not new to Python 3, but still a nice WTF that could really trip up the unaware. &gt;&gt;&gt; a = 256 &gt;&gt;&gt; b = 256 &gt;&gt;&gt; a is b True &gt;&gt;&gt; a = 257 &gt;&gt;&gt; b = 257 &gt;&gt;&gt; a is b False
You've got to be careful with "bar = bar or {}". For example, this will discard an empty dictionary - better to explicitly test "bar is None". 
I do exactly, I think it's totally legible. Or at least as legible as kwargs are. I also reuse format strings in loops, and pass them to row generating functions, and dynamic construct them, and a bunch of other use cases that preclude my use of fstrings.
Good point. Edited.
Lambda function binding interacts strangely with list comprehensions and `for` loops: In [1]: funcs = [lambda: i for i in range(10)] In [2]: [f() for f in funcs] Out[2]: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9] (This is equally true in Python 2 and 3)
This only applies for mutables and is by design. Set the default to an immutable value (such as a tuple) and then call *list()* on it, if it's absolutely required. But if you're using a mutable value as a default, you're probably doing it wrong.
That's not the behavior I want though.
Yes. https://scrapinghub.com/
What about index -1?
No, this is a mutability issue and is by design. The real solution is to refactor to an immutable value. So use tuples or do a list call on a tuple, if you need a list. If you're setting default values to a mutable value, you're probably doing it wrong anyways.
Sure, they're not ordered right? But, the data exists in some way you can iterate through it, so you could say that's the index.
&gt; Recently, I've found the issue in a state-of-the-art open source API
&gt;I disagree on nothing is copied though. Nothing calls .copy certainly, but the value of m enters a CPU register, is modified, and then written out to a different memory address. If that's not a copy... No it isn't. Like I said, getattr first looks at the instance, then it goes up the class hierarchy looking for the same attribute at a class level. So looking at your example and modifying a bit: class Ex(object): m = "Something" e = Ex() e.m is Ex.m # True Ex.m = "something else" e.m is Ex.m # True e.m == "something else" # True Nothing is copied, the string "something else" is only ever stored in one place ever, there are just shared references.
This. https://github.com/wamdam/zonefile/blob/master/config.py#L3 But basically wherever you used "subdomain" and meant "name" or "label". A domain (or subdomain) can contain other records. A regular label can not. So, an `A` record with label "www" and data "1.2.4.5" is a record and can not contain any other records beneath it (so, like, no foo.www.) Basically, what I'm telling you is you're using the word subdomain wrong, and you should change it in your scripts.
 &gt;&gt;&gt; def eggs( spam=list((1,2)) ): ... spam.append('boop') ... return spam &gt;&gt;&gt; eggs() [1, 2, 'boop'] &gt;&gt;&gt; eggs() [1, 2, 'boop', 'boop'] wow edited comment
Ah, in that case I'd actually agree. 
sort-of-safe: https://news.ycombinator.com/item?id=13292350
Unpopular opinion, but I really think Python should have a null-coalescing operator. 
Pass the arguments positionally not with keywords. ---- I think you are improperly thinking that fstrings are comparable to format with keywords. That's not true. Format with keywords is strictly more powerful, so it's not surprising it may require more typing. Example: `f"{x}{y}{x}"` and `"{a}{b}{a}".format(a=x,b=y)` both print xyx. But if you want to print yxy you have to change three chars in the fstrings but only two in the format string with keywords: `f"{y}{x}{y}"` vs `"{a}{b}{a}".format(a=y,b=x)`. Compare this with: `"{}{}{}".format(x,y,x)` and `"{}{}{}".format(y,x,y)` 
It's so that it works with anything that supports the iterator protocol. 
You didn't try to modify the value of m, you just replaced it. I'm saying += copies on write.
Sorry for the confusion. I've first encountered this issue in our own software. Recently, I've also seen it in an otherwise bespoke API.
Thanks, enjoyed that.
In Python land I think this makes a lot more sense than putting the join method on list like Javascript does, since it is inherently tied to strings but could use any type of iterable object.
Invalid syntax. Both of those.
You *can* do `alist[2:6] = []`.
Yeah I think that accurately describes my confusion :~)
&gt; I'm also curious what you mean by "guaranteed to be safe". You can only use them on string literals. You can't treat formatting code that you got as input as a f-string (at least not easily). An issue with C is when you type `printf(user_input);` to print out user_input. Problem with that is that if the user_input string is hostile, then you can pretty easily attack a program that way. Python has similar issues with .format, which *can* be run on untrusted input.
The whole `typing` vs. `types` vs. `collections.abc` (not to mention `numbers`) mess really needs sorting out.
Isn't that consistent with what happens with scoping in functions? Variable reads fall upwards into broader and broader scopes until the variable is defined, whereas writes always create a new variable in the current scope.
Okay, invalid syntax right now. And there's perfectly *good* syntax to do it. And it would be a pretty big change to let you do alist.delete[5:10], so it would have to be the first one. Though I guess somehow allowing slices to be treated like tuples and then being passed in functions would be cool.
You'd have to execute code to be sure about it though. One of the methods might be defined in a patent class while the other in the current class. Or Some Mixin, or god forbid it's added elsewhere dynamically. It'd be easy enough to do with a compiled language, but not with Python. It'd be pretty simple to extend ABCMeta to add `__eq__` as an abstract method if it's not defined but hash is, the problem with that is that object defines a default hash and eq so you need to account for that in the MRO.
Hmm, well this is why we get warned about the dangers of mutable default args
I mean, we already have `lambda` and can do much more weird stuff. I hate people giving -1 to ideas because they *can* be abused. It's the programmer's duty to not write shitty code....
&gt; Sure, they're not ordered right? ...whatever it happens to be, like I said: `Sure, they're not ordered right?` Can you iterate over them?
I hate it's usage to delete a key from a dictionary. It seems so weird. I prefer the pop usage so much more. 
There's always frame hacking, at least for bound names. Subscriptions are a different beast altogether. 
I actually kind of like it. What I do really miss is the do while loop construct that has been deemed illegal in cs
That's not the point. format is strictly more powerful than fstring because format is dynamic while fstrings are static. The point of fstrings is that they save a LOT of character for the very common use case of: descriptive_name1 = thing1() descriptive_name2 = thing2() descriptive_name3 = thing3() return (f'{descriptive_name1}, something {descriptive_name2},' f' something {descriptive_name3}') I don't want to type: descriptive_name1 = thing1() descriptive_name2 = thing2() descriptive_name3 = thing3() return ('{descriptive_name1}, something {descriptive_name2},' ' something {descriptive_name3}' .format( descriptive_name1=descriptive_name1, descriptive_name2=descriptive_name2, descriptive_name3=descriptive_name3, )) And I'm not going to want to swap the names around, that defeats the purpose of using good variable names (you DO use good variable names, right?) descriptive_name1 = thing1() descriptive_name2 = thing2() descriptive_name3 = thing3() return ('{descriptive_name1}, something {descriptive_name2},' ' something {descriptive_name3}' .format( descriptive_name1=descriptive_name2, descriptive_name2=descriptive_name1, descriptive_name3=descriptive_name3, )) 
The feature is useful, the naming is WTF. I've come across this exact scenario and assumed there was an indentation error (back before I knew of for-else) and corrected it. It should be something more descriptive like `nobreak`, but not the same `else` keyword that if blocks use.
The ideas of iteration and subscription are ultimately unrelated. If one implied the other, we'd be able to subscribe to generators and iterate over django caches. It just happens that some things that implement one implement the other (list, dict, etc). 
So you want dictionaries to check if a key is hashable or not, and if it is then try to iterate on it and construct a list of a series of gets? That's totally a wtf.
This. It makes sense if you know it, but if you don't know what it is you see it used, you might misinterpret what is going on.
TIL python 3 has no wtf's but some people want to introduce wtf's into it.
i hate that strings are iterable. `'a'[0][0][0][0][0]` 1. give me a function to iterate over a string (on the off chance i want to iterate them), but the fact that strings consist of strings means they nest infinitely 2. and strings aren't useful in the same way other iterables are, so not being able to use "iterability" to distinguish them is annoying
For those wondering, *all* chaining operations are interpreted like this: "a" in "aa" and "aa" in "aaa" While it feels silly here, it's fantastic with stuff like `a == b == c` and `0 &lt;= x &lt;= 100`
But the point is that they are magic methods, they have magical stuff going on. If you had something like: class Foo: def __getitem__(self, x): ... def __len__(self): ... It would feel really weird to have `Foo().iter()` work since it looks like `Foo` doesn't have `iter()`...
&gt; Set the default to an immutable value `def eggs( spam=list((1,2)) )` does not set the default to an immutable value. I believe /u/deaddodo meant def eggs( spam=(1,2) ): # do work here return list(spam)
Yeah this works with normal functions too: funcs = [] for i in range(10): def f(): print(i) funcs.append(f) There are many workarounds for this, one of which is to provide it as an argument and either using `functools.partial` or default value: funcs = [] for i in range(10): def f(i=i): print(i) funcs.append(f) One I also see commonly used is to set the value as an attribute to the function: funcs = [] for i in range(10): def f(): print(f.i) f.i = i funcs.append(f)
Yeah, security demands better hashes than md5. Good point.
Oh, I do it all the time too. You just have to keep it in mind when looking for bugs! For the curious reader: using the `bar = bar or {}` and later returning bar, we have created a situation where you can ignore the return value, because `bar` is mutated in place... unless it's empty. Special cases are bad! 
Nah it's correct, it's due to how `+=` works on lists and not tuple's fault. It both appends the values and returns the list itself, i.e. def __iadd__(self, it): self.extend(it) return self So if you'd try to do: tup[2] = tup[2] + [4] It would *only* raise an error. Using `+=` raises the same error as expected, but the list object has the new elements appended into it due to how `list.__iadd__` is implemented. Notice that you can do `tup[2].append(4)` just fine, but you can't do `tup[2] = tup[2] + [4]`. Using `__iadd__` is just combining those two.
I suppose being able to log in using a GitHub account or getting special perks for having a GitHub account would be nice. 
the wording that was used at the time was roughly "set the default value to an immutable or list((1,2))", but they have since edited it
Ouch. 
Uh no, this definitely violates the principle of least-surprise. It's a common gotcha, but still surprising. Edit: &gt; I don't think you or OP actually understand what the principle of least-surprise is. &gt; &gt; If you think that means they understand it, you don't understand it either. ...and that's the end of the conversation here. /r/python isn't a place for comments like this. Edit 2: Oh and the next time you wanna go toe-to-toe over python (or anything programming / computer science related for that matter), may I suggest not trying it with a Bay Area Engineer. Whoever you are out there, thanks for the gold!
I misread the first time I read the post then. Sorry about that and double sorry about implying that you had sneakingly tried to hide it with an edit. In conclusion, we all make mistakes :)
Thanks! That's why I couldn't get sounds working on my chromebook! Makes a lot of sense, now that I think about it.
Java does the same thing but its even more confusing. '==' is to java as 'is' is to python. For object comparison you need to use Object.equals() e.g.: SomeRandomObject.equals(SomeOtherObject); The different in Java is that for primitive types (i.e. anything you don't need to new) it works as expected. Typically this is fine as new Integer(1) == new Integer(1) will return false since they are technically different instances of the Integer class. What bites people in the butt is auto-boxing public static void main(String[ ] args) { Object x = 10000; Object y = 10000; System.out.println(x == y); } will print out 'false' but: public static void main(String[ ] args) { Object x = 1; Object y = 1; System.out.println(x == y); } will print out 'true' for exactly the same reason as 'is' in python. This throws newbies for a loop with strings since they're not primitives, but can act like primitives in simple cases. For example "Hello World" == "Hello World" will be true, since string literals are cached. Because of optimization even "Hello World" == "Hello" +" World" will be true since the JVM is smart enough to realize that concatenation at compile time. **BUT** If you construct a dynamic string though, oh boy, you will fail because you really wanted to use .equals() String x = "Hello World"; String y = "Hello"; y+= " World"; System.out.println(x+ "==" + y); System.out.println(x == y); will print: Hello World==Hello World false There's a reason I prefer using python whenever I can :/ 
I usually do: def foo(a, bar=None): bar = {} if bar is None else bar bar.append(a) return bar I thought it was more descriptive and less magical than using or. Is there a general style preference?
Wouldn't be all that terrible except it doesn't differentiate between `None` and other false-y values, such as empty collections.
/r/learnpython has some resources in the sidebar and the wiki. There are also some project ideas you can find through a Google search. Start with small projects and keep increasing the difficulty and complexity. Find what you enjoy working on and code everyday.
it doesn't affect the gc
Here's a [**list of posts/resources**](https://www.reddit.com/r/Python/comments/5x6xxl/help_learning_python_for_real_world_jobs/defvdeg/) I've put together that covers different approaches of learning Python.
I don't think you or OP actually understand what the principle of least-surprise is. 
I think they do, they're just surprised by different things than you
Which linter is able to tell you that a method can return None and that your calling code isn't handling it? Which linter is able to tell you that your function is operating on an input value in a bytes context that will trigger an implicit unicode conversion if passed text data instead of binary data? Which one will tell me all exceptions that can get raised from a method I'm calling that aren't being handled by an enclosing try/except block? If you have one I'd certainly be interested. pylint doesn't do it.
I'll take a look, thanks!
It also has [`ossaudiodev`](https://docs.python.org/2.7/library/ossaudiodev.html) for Linux and BSD, but there doesn't appear to be support for a more modern Linux sound API like ALSA.
What? It doesn't. 
Note that this only applies to mutable objects which _makes complete sense_. So it has nothing to do with the fact that they are default arguments as that they are mutable types. Example: d = {'k': 'v'} def change_d(x): x['v'] = 'k' change_d(d) print(d) Nothing was returned by `change_d`, but the dictionary, `d` was changed.
Not if you know what mutable vs immutable types are.
&gt; Sure. I get that some people like inline. However I am personally scared of inline. Maybe, just maybe they have multiple ways to do it for this exact reason.
This returns True on repl.it (Python 3 obv), but not in my machine. Aliens?
I ran into a consequence of this a few years back, but with strings. I was new to python, having done java before I assumed that you might have to use "is" to compare strings, much like .equals(). So I had a dict of colours to assign to biome names like: "TEMPERATE GRASSLAND":(0xa8,0xd4,0x89). For some reason, I was never seeing certain biomes in any maps I had generated, even where I should, "MOUNTAIN" would work using the is operator, but "TEMPERATE GRASSLAND" would not. &gt;&gt;&gt; x = "TEMPERATE GRASSLAND" &gt;&gt;&gt; y = "TEMPERATE GRASSLAND" &gt;&gt;&gt; x is y False &gt;&gt;&gt; x == y True &gt;&gt;&gt; z = "MOUNTAIN" &gt;&gt;&gt; w = "MOUNTAIN" &gt;&gt;&gt; z is w True 
Bahaha! I wrote a class that does exactly what `types.SimpleNamespace` class does not too long ago. At least I know I wasn't the only one who did it :D
&gt;if dayExpected != dayExpected: Super sneaky. 
String behavior in python is a huge selling point for fields like NLP/computational linguistics. Funny how it all depends on the context where you are using string data.
Who said anything about C? I'm talking about strongly and statically typed languages. C is nothing more than Assembler in disguise. Strong typing by itself does nothing. Static typing is where it's at.
PageRank. Go to the networkx website and look at the source code for their implementation of the function. Also, the published article introducing pagerank is free online.
Ah, I thought they made `==` mean `.equals()` for `Integer` instances for some reason. It's been a few years since I've used Java, but I didn't remember using `intVar.equals(42)` at any point. I guess that's down to rarely using `Integer` since the primitive `int` is there, rather than them special-casing it.
Doesn't OOM trigger the garbage collector? I'd be shocked if CPython just barfed, rather than checking first if it has anything it can free.
And, in my opinion, the solution still leaves a WTF code: In [1]: funcs = [lambda i=i: i for i in range(10)]
If you still write your Python 3 like it's Python 2.7, you don't get the benefits of writing in Python 3. I write primarily in Python 3. It's a nice language. Python 2.7 with `__future__` imports is *not* Python 3. Getting to actually use Python 3 means you really do have to leave Python 2 behind at some point.
The jvm is really heavyweight and memory-inefficient, and also doesn't interface well with the operating system. It's also not "performant". Tracing jitc not only improve performance in only a few niche use cases (in which you'd be better off using C++ instead of an interpreted language anyway), but also degrades performance in most of the other cases, and I didn't even mention the compulsory GC. Those are only some of the technical issues which may not bother you, but they're there anyway. There's also the social issue that the jvm already comes with loads of libraries written in java that no one will ever rewrite, so you'd have to use their horrible java APIs. I didn't know about the llvm compiler, and missed that bit from the op comment, sorry about that part. It would be really interesting if it ever gets more widespread adoption​ :)
Django is old and clunky. Flask is the way.
C++ is just as strongly typed as python, unless you break the type system by using legacy C features like casts or naked pointer arithmetics. If you stick to idiomatic C++, you'll be fine.
mypy
but that's not a wtf? If it's only confusing cause you don't know the language, that's just you don't know the language. To be wtf, it still has to be confusing/stupid/surprising even after you know the language.
&gt; is only intended for use in indexing (e.g. dicts) where order is mostly irrelevant. Order matters every time you iterate over the dict. I don't care specifically what order it is, just that it's the same each time I run the program. It just feels weird to have a programs be non deterministic by default. And before somebody mentions `OrderedDict`, you still have that issue with `defaultdict`
Because maybe I want to calculate elements in the fly instead if storing them explicitly. This is what the `range` type does, it implements the sequence ABC but doesn't actually store its elements explicitly because all the methods can be implemented much more efficiently with a small amount of math. I also might want it to be backed by another collection object that is transformed in some way.
Oh for sure, but it is easy to see a situation where someone has if x is y: which could be true for a reasonable range of test cases... but still be a terrible bug. The key bit of info is the difference between "==" and "is".
how is it slower than MATLAB? The only thing better about MATLAB is the linear algebra notation. Everything else is way better in Python. 
That's a beautiful way to implement, say, a cache shared across all instances of the class. 
Or spin up a spot instance and crunch away 👍
&gt; It just feels weird to have a programs be non deterministic by default. But that's the entire point of dicts and sets; they sacrifice ordering for speed. Anyway, to save you the manual hashing/sorting step, you could look into using the OrderedDict object: https://docs.python.org/3/library/collections.html#collections.OrderedDict
Non-Mobile link: https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^44051
I find the real bug here to be modifying in place and then returning it. It might be surprising to you as the guy writing that function, but you're also abusing everyone who uses your function by modifying bar like that. They probably don't expect you to do that unless you return None.
&gt; But that's the entire point of dicts and sets; they sacrifice ordering for speed. I care about determinism, not order. Programs doing something different each time you run them is rather unusual. Putting `sorted()` all over the place is probably something I can get used to, but it does cost some performance. All that aside, the fact that there already is a switch to disable randomized dicts (`PYTHONHASHSEED=0`), but that you can't toggle it nicely from within Python itself is annoying. It's the same with `PYTHONIOENCODING`, in that case you can get the same effect from within Python, but it gets a lot more verbose than that environment variable. That kind of functionality should really be part of the language, not just magic environment variables. &gt; you could look into using the OrderedDict object There is no ordered version of `defaultdict`. That's the whole crux, the randomized hashes slip into other classes and you can't get rid of them easily.
I came in here to also say I'm faster in Scala and (where use case permits) R than Python. I love deploying my jars on other machines because I don't have to do anything special besides just build it. The strong typing is fun too. The JVM is great for what I do and Scala keeps it fun. 
It's the programmer's duty to write reasonable code, if the defaults are shitty you can't expect them to dig through every single possible usecase
Yes
PyCharm Community Edition is worth a try, and its free.
Your example is about issues with .format(), precisely issues that f strings alleviate. So thanks for proving my point.
You know I tried this web stuff. I really did. No way on Earth it is easier. It gets complex so fast with that snake nest of dependencies that I just want to die on the spot rather than figuring it all out. Tools are supposed to make our lives easier. It might be easier to write some HTML and CSS, but rest of js ecosystem makes it so much more complicated to the point it really makes me think twice and think hard before using any of current hot frameworks. And I did not get to the ridiculously fast pace of ecosystem which mandates me to update my code weekly if I have enough right dependencies. Thanks but no thanks. I had my software started in Qt 4.6 and upgrading it to 4.8 didn't take effort. Upgrading it to Qt 5 was minor effort. So much less drama than I had with web stuff. This is funny because in order to be overwhelmed with madness web ecosystem is I didn't even have to make anything serious. It's crazy. :(
I didn't say anything about C, I actually said "Catching things like off-by-one-errors in weakly typed C like languages is a nightmare". Static typing is highly overrated IMHO, as some people seem to think that as the code has compiled there's no need to test it.
Would not necessarily be a oom Does swap tell you something? Your system will just crawl to a halt but not die
Because they are mutable.
The real WTF is why would you ever try to compare numbers by identity.
One of many reasons I prefer Haskell, no pointer equality to fuck around with, everything is based on actual values. Unless you count `Eq IORef`, but at that point you are being very explicit and it is unlikely you will get tripped up.
"Solution" :-) For some reason I much prefer this formulation: funcs = [(lambda i: lambda: i)(i) for i in range(10)] Similar effect, avoids invoking subtleties of default argument binding. I suppose it's very un-Pythonic though.
That chunking thing is neat. What situations do you use it in, though? I'm having some hard time thinking of when it would be good besides asynchronous programming.
Java overloads `==` to mean something different when working with primitives (such as `int`, where value equality is used) than with objects (such as `Integer`, where reference equality is used). You might be thinking of C#, where there are even more operator overloading rules -- e.g. == on values with static type String also performs value equality, but == on those same values with static type 'object' will get reference equality comparison.
&gt; Note however that +(-5) != --(-5) Really? &gt; +(-5) != --(-5) =&gt; False -- [repl.it](https://repl.it/GYDU/0)
Im crunching through a Coursera course on Python (Programming for Everyone), and am learning about parsing XML &amp; JSON with Python. Its pretty cool stuff. This past weekend, I learned how to do very simple html webpage browsing via Python/CMD. I really hope I can be as cool as many of you guys doing cool stuff with Python.
IMO the typeclass approach is best, that way the thing you are polymorphic in not tied to how you call it, it's just a function with arguments in any order you desire: interc :: (Monoid m, Foldable t) =&gt; m -&gt; t m -&gt; m interc x = fold . intersperse x . toList Now you can do: interc "," ["foo", "bar", "baz"] &gt; "foo,bar,baz" interc "" ["1", "2", "3"] &gt; "123" interc [0] [[1, 2], [3, 4], [5, 6]] &gt; [1, 2, 0, 3, 4, 0, 5, 6] interc (Sum 1) [10, 20, 30, 40] &gt; Sum 103 So you can use any iterable, as well as anything that can be combined (so concatenation for strings, but you could also use numbers where combining is addition or multiplication).
Wait what? Ordered by what? Because depending on the ordering that seems like something that could mess with asymptotics.
I like IDLE and the interpreter. 
IIRC you are supposed to use `is` with `None`. So you generally don't completely avoid it even if you don't care about pointers. And the issue is that in Python you do care about pointers, because of mutability, basically I just think mutability is generally a premature optimization, and that Haskell does this right (and yet ends up being much much faster than Python, without any added verbosity, and with a lot more safety and code reasoning ability).
I mean at this point I am unlikely to go back to Python unless forced, so I'm partly just complaining and hoping that more people will learn Haskell so that it can eventually become a mainstream language. But yeah pointers, mutability (particularly when combined with sharing) and object identity are very unmathematical and I have seen tons of bugs relating to them that are completely impossible in Haskell.
Well, if you want people to learn another language, griping about minor things in their favourite language is probably not the best way to get them on your side. You might want to try a new tactic.
120? You savage
Gah, now I have no idea what language or library that *was* true for. Thanks though, better to know I can forget.
That's even worse
Python is not type-less, it has a rigorous type system, it's just dynamic not static. It's a very powerful feature.
Floating point numbers are a standard used by every major language, this is not unique to Python remotely. Also, Python provides the decimal type which behaves how you want, but is far more expensive.
This a legit WTF. Why the fuck would you expect this? 
But that won't be html ? So it won't be great for referencing ?
Whoa, that's so interesting, I love that kind of stuff :D
Thanks mate, I will go for option 2, it's better for seo. What framework do you suggest among these 3 ?
But maybe a warning? I can see why it's legitimate to not want to have that throw an error but I also don't think it should just be assumed to be the desired behavior. And personally if I have to multi-line a string like that I prefer to keep going with += on new lines until I'm done. In a case like this I'd set it equal to a variable and then plug that into the list. It eats up more lines and isn't necessarily the most elegant way of doing it, but to me it's nice insofar as you're making it extremely clear what you're doing. 
I thought about it, but in the future, I would like to add more stuff which require a bit of database (a shop), and I don't want to generate the site and upload it each time I want to add something
Unfortunately, I want more features ... :/ So I guess I have to use a database. The thing I hate about those is that I have to make a back-end... Thanks you answer, really helpfull !
what do they mean? an african or an european swallow?
I'll make sure to note that somewhere
Seems great, but heavy ? Would it be a pain in the ass to create my own theme like wordpress ? 
Haha. Also share on /r/programmerhumor
The word you are looking for is 'evaluation'.
Disclaimer: I've never used any of them. From what I know, Django is everything and the kitchen sink. It's a complete framework. Meaning it includes authentication, an administration panel, an ORM, etc. That also means it takes longer to learn. It's the most popular web Python framework for user-facing sites. This is what Instagram was built with. The other two are smaller in scope and less opinionated, forcing you to create the structure instead of following the structure. That makes it closer to a normal Python app. Apparently Flask has extensions that makes it come close to Django in features. If this is just a hobby project, I might start small with Flask with no extensions, but learning Django will make you more employable. 
Go watch Monty *Python* and the Holy Grail like, right now
Lol I should have figured it was a reference, I guess the joke's on me
Ok I see, I think I will go for Flask, creating my own structures is really a great thing for what I want. I will go for Django only if Flask is too light, oserwise it may be a waste of time to learn it since I don't want to be more employable. For now, my project is a hobby, but I have project for the future that I would like to attach/join to this website easily. Thanks for your help !
You are correct, it is the due to the CPython's implementation decision to cache mentioned integer range. For example, pypy works differently: `&gt;&gt;&gt;&gt; a = 256` `&gt;&gt;&gt;&gt; b = 256` `&gt;&gt;&gt;&gt; a is b` `True` `&gt;&gt;&gt;&gt; a = 257` `&gt;&gt;&gt;&gt; b = 257` `&gt;&gt;&gt;&gt; a is b` `True`
some proper identation for the code snippets wouldn't have hurt :/
Explaining how the implementation works doesn't make it any less WTF. We all know how it works under the hood. The increment works but the assignment doesn't. However operations that are exposed as a single operator must be atomic. The WTF is that this one isn't.
I've actually used it for that, but one should beware that it interacts badly with pickled objects since this doesn't get carried over to the instances.
Nevermind, you are right
 &gt; (well at compile time anyway) It seems as though I acknowledged that in my original comment, but thanks. &gt; rigorous type system &gt; very powerful I mean it's better than JavaScripts sure. But it doesn't support even 1% of the things you can get out of System FC or similar, despite the fact that it is unrestricted by any notion of "correctness" or "coherence" due to it not actually being verified or checked in any way until your program crashes with a TypeError.
[You shoot yourself in the foot very elegantly, and wonder why the whole world isn't shooting itself this way.](http://www.toodarkpark.org/computers/humor/shoot-self-in-foot.html) :&gt;
Visual Studio Code was the best choice for me. I usually use my MacBook Air or my home computer (which is running on linux). * PyCharm is slow and humble. * Vim or emacs just couldn't fill my expectations. * Sublime Text and Atom are good but, it's like a curse to try running scripts inside them. SublimeREPL might be a good option but meh. Here's why I choose to use VSCode: * Free. * Multilanguage support (if you need to edit other type of stuff) * Extensions, and no nonsense packages. They're good. * Running script in terminal is as easy as clicking the left mouse button 2 times. This feature comes out of the box. Plus, it's a full and functional terminal. * Vim/emacs mode if you're fan of it (same as Sublime's *vintage* mode) * Integrated git support out of the box. * Multiplatform support It's worth giving a try.
I'm using that functionality to my benefit. Saving calls of how often a function is called, storing HP as the default value of the function that modifies it. I like it, though I agree it can take one by surprise when they're even fresher than me. 
Good repositories for people who learn, thanks..
No, because i.undef = 1 doesnt work. Its similar, but with more conditions.
I've never watched any of the Monty Python films, I guess it's time to fix that. Any suggestions on where to start? 
Quest for the Holy Grail.
Depends on the features, really... many common features can be offloaded to third-party services: Google for search, Discourse for comments, Youtube for embedding video, ...
it's really not, and it's not efficient either. The actual differences, when it boils down to bytecode: using del: &gt;&gt;&gt; def x(y): ... del y[2:6] ... &gt;&gt;&gt; dis.dis(x) 2 0 LOAD_FAST 0 (y) 3 LOAD_CONST 1 (2) 6 LOAD_CONST 2 (6) 9 BUILD_SLICE 2 12 DELETE_SUBSCR 13 LOAD_CONST 0 (None) 16 RETURN_VALUE using y[2:6] = []: &gt;&gt;&gt; def x(y): ... y[2:6] = [] ... &gt;&gt;&gt; dis.dis(x) 2 0 BUILD_LIST 0 3 LOAD_FAST 0 (y) 6 LOAD_CONST 1 (2) 9 LOAD_CONST 2 (6) 12 BUILD_SLICE 2 15 STORE_SUBSCR 16 LOAD_CONST 0 (None) 19 RETURN_VALUE using y = y[:2] + y[6:] &gt;&gt;&gt; def x(y): ... y = y[:2] + y[6:] ... &gt;&gt;&gt; dis.dis(x) 2 0 LOAD_FAST 0 (y) 3 LOAD_CONST 0 (None) 6 LOAD_CONST 1 (2) 9 BUILD_SLICE 2 12 BINARY_SUBSCR 13 LOAD_FAST 0 (y) 16 LOAD_CONST 2 (6) 19 LOAD_CONST 0 (None) 22 BUILD_SLICE 2 25 BINARY_SUBSCR 26 BINARY_ADD 27 STORE_FAST 0 (y) 30 LOAD_CONST 0 (None) 33 RETURN_VALUE now the number of lines isn't -just- what's wrong with it, also look at the amount of array accessing... with a small array this might not be -that- bad, but if you've got an array of thousands of items, and you're trying to remove stuff from the middle of it, the first and second approach only slice once, and only the first approach doesn't try to put data back in
Thanks for the research. I think that reassigning a variable when you mutate it (treating it as immutable) makes it more obvious that something is changing and prefer to do it that way where reasonable for code clarity's sake.
That doesn't do in-place deletion of items. Rather, it creates a new list and binds it to the same item. That difference is very important if this isn't the only reference to the list, and since the OP specified in-place deletion specifically, that's probably relevant here. 
The JVM is only about a 20 to 30 MB overhead. Most of the size is actually Java core libraries, which are not present in scala, jython, jruby, clojure etc. The JVM takes higher memory for more speed and safety which is a great trade off.. There is a reason the JVM is used so much in hft. For non trivial projects, as in million plus lines of code, the JVM performance will beat c++ in most cases since most people are not having as efficient of a memory freeing process as the jvm, which is very hard to beat. Cliff click has a good talk on this. If you get custom jvms you can get JVM with no GC. You can also get concurrent and Pauseless GC.
Though really, you don't actually need `del` for that usecase. `obj = None` accomplishes exactly the same in terms of allowing resources to be freed. The reason you'd prefer `del` in this (or other) scenarios is namespace cleanliness (ie. you'll get an exception if you try to use the same variable after the del unless you assign to it again). Though there aren't really that many situations where this matters too much: it tends to come up more in funkier metaprogramming scenarios. 
I prefer Github's Atom. It's basically a text editor but can easily be transformed into a full fledged IDE since there's TONS of extensions which it's active community keeps churning it. https://atom.io/ https://atom.io/packages
I found 'The Meaning of Life' followed by 'The Life of Brian' the funniest. Holy Grail didn't do it for me
What to gain from switching to an IDE ? Refactoring capacities like "add a default argument to all occurrences of this method in the project", i.e. we manipulate *code* instead of text, and advanced navigation, like "show me every place where this method is called", which is different than a recursive grep. Now this can be acomplished to a certain extent with plugins in a mere "text editor" (like [emacs](http://wikemacs.org/wiki/Python)).
- http://kate-editor.org/ kde, many features - https://www.geany.org/ (gnome) - https://www.kdevelop.org/features - http://www.ninja-ide.org/
So your comment starting off with "Nonsense..." and then a bunch of gibberish actually had nothing to do with my original comment then. Good to know.
Correct place for this post is [/r/learnpython](https://www.reddit.com/r/learnpython/). You will have a higher chance to get a detailed answer at there. [/r/python](https://www.reddit.com/r/python/) is about news, projects etc. Good luck!
Mypy still doesn't catch the last class of bugs a it's very hard to start using on a codebase that wasn't started with it. It does help some though
And we are right back at the top of the thread: "one obvious way." If the great wisdom of the BDFL is that I'm doing it wrong and that inline is the right way to do things, then he needs to say that and disable `.format` with anonymous positional args. 
How f-strings help with that problem?
Well then I fart in your general direction! Your mother was a hampster and your father smelled of elderberries! Also: happy cake day!
Reflected methods (like `__radd__`). They are very useful if you don't have multiple dispatch for operators, but also highly unintuitive. Whether they are called or not depends not only on whether the left operand's corresponding non-reflected method returns `NotImplemented` but also on whether the right operand's type is a subclass of the left operand's type. Also, `a+b`, `a.__add__(b)` and `a.__class__.__add__(a, b)` are three different things. Observe: class A: def __init__(self): self.__add__ = lambda other: 2 def __add__(self, other): return 3 class B(A): def __radd__(self, other): return 1 a, b = A(), B() print(a+b) # 1 print(a.__add__(b)) # 2 print(A.__add__(a, b)) # 3
with respect to the context, too true. But even so, I feel like it wouldnt be THAT much different to have to do `'string'.iter()` or `iter('string')` (though from an implementation perspective I'm sure it wouldn't be quite so straightforward). Where the benefits are (imo) much more ergonomic interaction in all cases except for explicit iteration over a string. Unfortunately its a done deal at this point, so my dream will never come true.
Because the left side must be a literal in your code. 
Yes but I don't want to use these third parties which stores everything. Unless there is some open-source ones
The ending was a total cop-out
Ok nice, but in the long term, I would like to add more stuff like a shop and a tutorial/forum, do you think this is possible on top on Grav ? Thanks for your help
What? `i.undef = 1` has to work -- that's plain attribute assignment.
One issue is that it could hurt introspection, in that you wouldn't be able to see the default arguments via `help()` or similar, since they may not actually exist at function call time (and actually evaluating that could now do something that mere introspection shouldn't). 
You're right. My mistake. I have taught classes as nested namespaces in this way, but ive never given this example of how accurate that is. 
&gt; Yes I am using ElementTree I am going through this sample by checking if it matches with sample:EventNumber and value 100. Also sample:LogIter and value 999 So you just want all the Log elements with an EventNumber of 100 and a LogIter of 999? &gt; if so write it into a list. Write what to a list, the Log element?
I would say that the Ruby language is no more magical or less readable than Python. Rails on the other hand is level 10 mage sorcery. It felt very strange for the first few weeks of using it, probably akin to giving over control to a self driving car. The upside is that you can build things very quickly, and you can quickly get to speed with someone elses code.
I think I will go for grav, the thing you said at the end makes me consider things differently. Thank you ! And if Grav don't allow me to do some stuff, I will go for a framework then.
And now, for something completely different.
Not really - that's pretty much the standard ways function creation works, and doesn't really have anything to do with C: you'll see the same in pretty much every functional language, it's just that it'll generally not matter if you're programming functionally (i.e. not *changing* values) The reason this happens is simply because closures capture **variables**, not **values**. IE. `lambda: i` does not create a function that returns the value of `i` when it was created, it creates a function that returns the **current** value of `i` - ie the value the **variable** holds.
Then what you want to do is iterate on the Log elements and check their content individually. In fact since the root only contains Log items, you can just iterate on root directly, maybe with an assertion to make sure the current item is a Log if you want for log in root: number = log.findtext('{Uri}EventNumber') it = log.findtext('{Uri}LogIter') if number == '100' and it == '999': resuts.append(log) # or whatever formatting you need There's no cause to "determine a", you don't care, just iterate on all your Log items and process them on the fly.
Ah, I see, thanks, I read the what's new in py3.6, and it was simply stating that f-strings are formatted with the .format() protocol, but I failed to notice that they only work on literals.
I know what it does, but I don't desire the behaviour, so I'd disagree. I agree with OP that it's generally a bad idea - the potential for bugs outweights the very minor convenience cases (and the same is true for C, where this comes from). Pretty much *everyone* has dropped a comma at some stage or other, and it can be very annoying for it to bite you down the line instead of failing fast.
It's functionally equivalent and there's nothing preventing you from doing it.
No problem :)
https://xkcd.com/1053/
[Image](https://imgs.xkcd.com/comics/ten_thousand.png) [Mobile](https://m.xkcd.com/1053/) **Title:** Ten Thousand **Title-text:** Saying 'what kind of an idiot doesn't know about the Yellowstone supervolcano' is so much more boring than telling someone about the Yellowstone supervolcano for the first time\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1053#Explanation) **Stats:** This comic has been referenced 9881 times, representing 6.4801% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_df0338s)
Eh, I definitely wouldn't want it to default to decimal. I agree with Tysonzero that rationals would be nice as a default (they were considered but rejected for performance reasons), but decimals are the worst of both worlds really: slow **and** non-exact. Their usecase is really just certain areas where we're deliberately aligning to historically accepted inaccuracies (ie. accounting), rather than the *different* inaccuracies that binary-based floats have.
There's also https://github.com/spacetelescope/asv
So related to this, has anyone written up a post-mortem for Unladen Swallow? What it succeeded with and why and the opposite and so on? *Googles* Oh here it is, http://qinsb.blogspot.is/2011/03/unladen-swallow-retrospective.html
Videos in this thread: [Watch Playlist &amp;#9654;](http://subtletv.com/_r5zpe9e?feature=playlist&amp;nline=1) VIDEO|COMMENT -|- (1) [Monty Python - Dead Parrot](http://www.youtube.com/watch?v=4vuW6tQ0218) (2) [Cheese Shop Sketch - Monty Python's Flying Circus](http://www.youtube.com/watch?v=cWDdd5KKhts)|[+32](https://www.reddit.com/r/Python/comments/5zpe9e/_/dezyhyk?context=10#dezyhyk) - Like seriously. Python being named after Monty Python means there are jokes everywhere in the docs. For example, these sketches: and shows up in the official tutorial as examples: (1) [Monty Python-Coconuts](http://www.youtube.com/watch?v=JHFXG3r_0B8) (2) [Airspeed Velocity of a Swallow](http://www.youtube.com/watch?v=y2R3FvS4xr4)|[+4](https://www.reddit.com/r/Python/comments/5zpe9e/_/dezz2cl?context=10#dezz2cl) - Python, coconuts, swallows: Airspeed velocities: (1) [Monty Python - Unladend Swallow](http://www.youtube.com/watch?v=liIlW-ovx0Y) (2) [Monty Python- The Bridge of Death](http://www.youtube.com/watch?v=_7iXw9zZrLo)|[+1](https://www.reddit.com/r/Python/comments/5zpe9e/_/df03g78?context=10#df03g78) - As noted, it's a Monty Python reference. The reason it shows up when you search for CPython is probably that there was a branch of CPython with the code name "unladen swallow" that has since been merged into CPython. Here's the relevant bit from the... I'm a bot working hard to help Redditors find related videos to watch. I'll keep this updated as long as I can. *** [Play All](http://subtletv.com/_r5zpe9e?feature=playlist&amp;ftrlnk=1) | [Info](https://np.reddit.com/r/SubtleTV/wiki/mentioned_videos) | Get me on [Chrome](https://chrome.google.com/webstore/detail/mentioned-videos-for-redd/fiimkmdalmgffhibfdjnhljpnigcmohf) / [Firefox](https://addons.mozilla.org/en-US/firefox/addon/mentioned-videos-for-reddit)
I definitely wouldn't like this, since it would prevent the very useful capacity to use tuples as dict keys. It's pretty nice to use dicts as essentially multi-dimensional unbounded sparse arrays. Ie `d[x, y] = 5`, or `d.get((x, y), 0)`. Changing the meaning for sequence parameters to mean something different would break this, and it'd be pretty ugly to just special case lists or something. 
I think you just need to get more comfortable working with strings! String slicing is made possible by their 'iterability' and so is the ability to cast strings into lists. I remember being very confused by string behavior when first starting out with programming in my comp ling class, and then I noticed in my purely cs classes how confused by strings the other students were because it isn't a data type encountered too often in traditional cs settings &amp; that I took my familiarity with strings for granted. Your dreams are what I call my nightmares :P 
Real thing is they made go which is like a cyborg of python/java and php/c. I think it was called for to replace java dependencies in android at the time but that's just my speculation
Works great unless you actually need to mutate `bar` at some point.
Double this. 'The Meaning of Life' is the best.
I guess I'm one of today's lucky 10,000!
I wasn't implying it should be default, though. Just that it's an option.
Thank you.
I wasn't saying it was a bug in Python...but it sounded like a bug in their API
The second one is 100% valid syntax. class Deleter: def __init__(self, collection): self.collection = collection def __getitem__(self, key): del self.collection[key] class MyList(list): @property def delete(self): return Deleter(self) alist = MyList(range(15)) alist.delete[5:10] print(alist) # [0, 1, 2, 3, 4, 10, 11, 12, 13, 14] I think it's pretty awful syntax, but it sure is possible.
For the "del list[index]" or "del dict[key]", what you say does not apply, it can be just a normal method of the list and dict classes. For the just "del variable" case, I know it couldn't be a "normal" function, but it still could be a special function defined by the language, respecting the same syntax, just as the "seq" example from Haskell that /u/Tyzonzero mentioned below. I insist: my issue is with its **syntax**
The internal angles should be 108°, if all side lengths are the same then it should join up 
Some of the scripts on https://github.com/neozhaoliang/pywonderland use numpy (along with other software/libraries) to do some pretty cool stuff! 
The question was about writing code. Matlab is still faster for me. 1. I don't have to worry about indentation. Control-I auto formats. 2. ```0:0.1:2``` notation is faster to type than ```np.arange```. (Side note, It's Inclusive. Why in the world does arange not include the endpoint?) 3. No namespaces. It's not 'proper' coding but for quick and dirty it's faster and less typing. It's also a lot easier to explain to engineers.
I was assuming it had to do with the Code Academy intro to python video, but that makes more sense 
If it was Python, then it'd have to be some custom type that does funky things for `__neg__` or `__pos__`.
Working on debugging the signal processing algorithm I've ported over from matlab
thankyou very much , that clears things up :D 
It's back up again.
Monty **Python**.
I think indentation is a wash - you still have to worry about brackets. I'll give you the "0:0.1:2" notation. That is faster. slices etc don't include right endpoint because it yields cleaner, simpler code (e.g. not having to add 1 to indices when slicing an array) you don't have to use namespaces - you can easily "from package import function" I get the feeling you don't actually know how to use Python that well. So, those are either nonexistent or minor. The real time saver isn't using a slightly more terse range notation; its: "wow, loading, parsing and writing that csv took 5 lines of simple code rather than 20 lines of ugly code" which would be the case with Python.
The Python Package Index (https://pypi.python.org) is also known as the cheeseshop because of that sketch.
Almost any use of "is" is tied to interpreter/module internals and as such is dangerous to rely on. I think python should not make it something commonly used and taught as basics feature for this reason.
 from types import BookProxyType
I think the first time I used it was for implementing a Vigenere cipher for some challenge, but I've also used it for turning flat lists into 2d matrices It's not a pattern I use a lot, but I like it more than the slicing method (e.g. `[ seq[i:i + chunklen] for i in range(0, len(seq), chunklen)] `, which also doesn't work on anything of indeterminate length) 
In the past, I found myself in many situations where people rejected/dismissed Python just because they thought that it's "only a scripting language" or a "toy language". Those people probably still think that Python is not suitable to write long-running, large-scale programs. There are certainly use cases where Python is not the right tool for the job. I just think that most arguments brought *against* Python are based on no evidence, and they only reflect people's preferences. But Python is probably not an exception; I'm sure that other languages are the target of similar complaints.
Do you want to know a Python fun fact? Spam is often used as a variable in Python tutorials as a reference to Monty Python's "spam" sketch. Here is a link for your convenience: https://youtube.com/watch?v=anwy2MPT5RE. 
Good WTF of Python 3, for sure..
You shouldn't be doing integer comparison with is, so I don't see the issue. Use is for None and booleans.
Do you find it surprising that c = C() C.x = 3 c.x = c.x + 1 is setting a different c.x than it is reading? By extension, do you find it surprising that the function C.do_a_complex_thing is not copied for each instance, but is stored only once and referenced through attribute lookup everywhere else?
How would a vm be faster than native? it still needs to run on real hardware. It may be faster than naive C++, though. As for memory freeing, if you're using too much dynamic allocation that FREEING memory is your bottleneck, you are doing it very wrong already. Most c++ should not need heap allocation anyway. Java already starts on the inefficient side, like python, forcing you to heap allocate everything. Unlike python, it doesn't allow easy, low overhead, interoperability with native code. It also offers no easy way to free other kinds of resources, like c++ and python do. Garbage collection is an excuse to sloppy resource allocation patterns.
You're welcome. If you don't mind me asking, why did it have to be a Python library specifically?
No - pretty much every one (at least that allows rebinding so you'd be able to notice it). It's just that most either don't allow modifying, or at least strongly discourage it, so it never comes up. But if you *do* change such a variable (eg. create a loop in scheme that defines function closing over a variable that is incremented in the loop with `set!`), you'll see the same thing. I hadn't been aware C# changed things, but it looks like they've simply made it so the for variable is created in a new scope each iteration - the same behaviour of binding to the variable is still going on, it's just binding to a different variable each time. You get the same behaviour in python if you explicitly create a new scope to store the binding, it's just that functions are the only thing that actually do this in python (which in many ways means it's actually due to how it's **different** from C, rather than due to a similarity)
NO
Yup, the first few seasons are a great starting point for the Pythons
Looks cool. Kind of reminds me of Flask but I might toy around with this a bit.
Oops. Yes that's what I meant.
And then at least 7 seasons of Flying Circus
Spoiler: Python has a lot of references to Monty Python, even the language itself is not named because of Guido's love of large snakes, but rather a homage to the Monty Python television show and movies.
That was actually something that made me really like Python. My code was always written with the whitespace structure of Python, so I got frustrated with all the braces everywhere. Getting skip braces was a perk for me!
Last person who asked me that ended up in crevasse.
but linspace doesn't let you set the spacing, only the number. It's still easier to do ```arange(a,b+c,c)``` if you want to do a fixed interval but fastest yet to do a:c:b.
This is what I'd do if I had to that: long_string = "b" long_string += "c" long_string += "d" foo = ["a", long_string"] It's not the most elegant thing in the world but I like to try to make it as explicit as possible what I'm doing.
I guess insertion ordering is probably fine. That seems like it would have some upkeep though. As an efficient set implementation does not preserve order.
&gt; You can also set attributes on functions Wow. I've often jammed unrelated things into various objects, but never thought of doing it to a function.
Python is not de facto functional. It's imperative / OOP as fuck and doesn't have anywhere near enough support for real functional programming to deserve that title. Plus the FP features it does support are usually pretty verbose and clunky. Also you just can't be an FP language without TCO. 
So currently I can't get it to document.write anything inside the script tag, it just doesn't work. Also trying to document.write the equations at the end for total sums just makes the script not work at all.
***HE SAID WHAT IS THE AIR SPEED VELOCITY OF AN UNLADEN SWALLOW***
Yes, and its too bad 3.6 is taking so long to get into Ubuntu as default 3.x.
Yes.
I'd imagine that dict and set are using the same strategy, and apparently 3.6's new insertion order dict is the most efficient yet. 
Like @ThatJoeInLnd, I initially thought that those indentation rules in Python were weird. I was used to Java/C++/.NET's curly braces, after all. But after a few years of using Python, I find it just weird when I go back to another language. In my opinion, Python's indentation rules are one way to force us to write consistent, readable code.
Use js or Python to load the markdown file and convert it to HTML.
I can't imagine it is more efficient then just dropping the insertion order tracking, and I mean it is still orders of magnitude slower than any statically typed language's dict and set.
Oh wow, I never got that joke 
Are you suggesting that coconuts migrate?
You'll probably get more recommendations for Holy Grail, as that's kind of their masterpiece. But I think Life of Brian holds together as a movie, start to finish, much better. Holy Grail is wildly absurd, so if you're not sure that's going to appeal to you, Life of Brian might be a slightly less wildly absurd introduction. 
Okay, first thing: tidy up your code (meaning indent it correctly). It's quite hard to read, which makes it hard for you and me both to understand. :)
Haha can do. I've worn down so give me a few minutes and I can make this much better to help with xD
Just for you: def foo_inplace(bar=[1,2]): bar.append(3) return bar
So then do you find it surprising that c.do_a_complex_thing = 5 does not overwrite `C.do_a_complex_thing`
Check line 26, why is it indented like that?
That should only really happen on Python 2, in Python 3 local imports will start with a dot. What we did a few years back at work while still on Python 2 projects, is put "from \_\_future\_\_ import unicode_literals, print_function, absolute_import" on the top of every file in order to make porting to Python 3 easier one day. The absolute_import one in particular makes Python 2 import behave more like Python 3. Off course if your project is quite small, you might as well start off with Python 3 in the first place, I know that Python 2 is still used a bit in the scientific community, but if you can then you should always start new projects in Python 3, at least that is what we do at work.
Hah. You have a lot of good movies and sketches yet to see!
But there are only two cases. `method` and `attribute` are the same thing, both are names for objects, but in one case the object has a `call` method and in the other it does not.
I've written code for a 2D version of this problem, but 3D should be pretty logically similar. Decide on a metric to compare every point to and store the points that meet or exceed your boundary condition. If given a point in 3D space, find its radius from the origin and compare it to the radii of two spheres (one a little outside the original sphere and one a little inside). If the point's radius is within those two radii, then you have a match. Iterate over all the points and store the ones that match. Hope that was helpful!
Dunno, I didn't think the indentations actually made a difference except for readability. Fixed though
Yes, that is exactly what I'm looking for! you've just saved me so many unnecessary "except: pass"-es 
Now that it's fixed, can you see the problem?
Good question! Using different addresses for every transaction doesn't actually increase your security, only your privacy.
Given an address can I use bit to find when the Bitcoin(s) were mined?
Unless the time limit is more, its a really bad choice. You'll encounter many TLE's. Even so, you should still use a more "native" language. Python is fast in terms of "time to write code", not execute it. If your aim is to write solutions but not necessarily have them AC, then by all means, python is a great choice.
I'm currently learning more about competitive programming in college and wanted to try out python because its the language I use more often but whit the same algorithm for the 884 problem in c++ I had a 0.14 time while in python took far more time.
You mean a list of [coinbase transactions](https://bitcoin.org/en/glossary/coinbase-transaction)?
Is there some sort of extension that allows you to enter user input when you run a program? 
Given an address find the coinbase transactions that "created" the Bitcoin in the address. 
Are you checking points systematically or are you iterating randomly through the sphere? There might be some room for optimization if it's systematic. 
The first thing you see on that PEP is that it has been withdrawn.
You mean take input from user when the program runs?
Woah, this is both wtf AND cool as hell.
But no tutorial or doc tell you to use "is" to compare numbers. Actually many explicitly tell you not to. Who would do that and why ?
Again, why in hell would you use "is". Ever ? No tutorial or doc tells you to. Some even specifically tell you not too. Everybody, and I mean everybody tells you to use "==". What happened ? Why did you use "is" ?
Ah ok, I see. Bit can't do that. Doing that would involve access to the full blockchain and some very specialized algorithms if taint analysis is what you want.
A DUCK.
i do use the end thing and this does seem right. As i said i am pretty new to this coding thing, how would i go about flushing the buffer? Don't get me wrong it does still print fast around 9 characters per second however on the school computers it is around 3x that Edit: i did google around and i found the command sys.stdout.flush() to put after my print statement, however it hasn't changed the speed of the output at all, i also tried setting flush=true on my print statement 
Yes 
Im the opposite. I use del because using pop always seemed odd to me on a randomly ordered structure, and when popping out an element that is not the top item like a stack a queue. I want to delete a key. So del. It does look odd in terms of syntax, but conceptually it fits better.
F-strings have a lot of praise from the community, but I will prob hardly use them. I can't build them programmatically and I can't pass them as arguments either. So the feature seems redundant to me given the existing ways to work with strings.
It's 118 in my setup. There a long uninteresting story as to how that number came to be, but I can't do less that than heh
I'm actually pretty new To Python, I've only started learning it in the last couple of months, thus why I was googling CPython because I didn't know what the difference was lol
I get griped at for adding lists and strings with '+', but making an empty anonymous string just so I can call a join() method feels bad to me.
As an analyst this is my experience. I prototype a simple program to evaluate an idea or accomplish a specific task and then, if it looks like it's a winner, pass it off to my programmer who actually builds a proper application out of it. It saves money as most of the time I have no idea what I'm going to end up with when I start following a set of data breadcrumbs and I don't want to waste his time on a wild goose chase. It saves him time because it only takes him a short time to digest my code and refactor it into something that fits into our app framework (which is mostly java). 
composing mutable types with immutable containers is a grey area in programming my stance is to blame the dev, not the language on this specific issue and I don't think it should be prohibited because you might wrap a list in a tuple just for transport (as a return composition, for example) and then never attempt to change the list state after that, which of course should be doable
'I hardly use this so its bad' no
this is a common problem in computer science and has nothing to do with python specifically
Yeah. It is expected in the same way finding a half drunk cola bottle is in your newly booked hotel room.
lol no
You're going too high in your inner loop. You're going up to `i/2`, but you only actually need to go up to the square root of i. After all, if x is a factor of i, then there must also be a factor that is `i/x`, and one of these must be smaller (or equal) to the other. This means the smaller one must be less than (or equal to) the square root of x (since sqrt(x)*sqrt(x) =x, anything bigger that sqrt(x) must multiply by something smaller than it or the result would be bigger than x). Also, it seems a bit odd to be exiting early, rather than just setting the bounds in the loop. You can make use of the `for: else` construct to detect the case where the loop was never broken from. It also doesn't really seem worth it to special case 3 here - you're not really covering any special corner case as with 2. Also, instead of a while loop, use something like `itertools.count()`, which can give you an infinitely incrementing value generator. Though note that if you want to do this faster, you're generally better off using at least something like the sieve of erastothenes, rather than simple trial division. But sticking with this implementation I think I'd rewrite your second version as: import itertools def primes(): yield 2 for i in itertools.count(3, 2): for j in range(3, int(i**0.5) + 1, 2): if i % j == 0: break else: yield i
To test for existence in an dict you can use "in" as in: for i in s: if i in parens: count += parens[i] 
pycharm is awesome
I am a software engineer with 20 years experience, and I've been coding exclusively in Python for the last 3. I've previously used just about everything going. I have worked almost exclusively on open source projects. I hate Python for a bunch of reasons not given in this straw man list, but to pick 2: 1. As a dynamic language it has no effective tooling for automatically enforcing correct use of internal interfaces and data structures. 2. I have found that the python community is uniquely introverted and tribal. It is also irritating that these 2 particular issues are frequently combined in a belief that automated tooling is redundant if your unit tests are perfect. Incidentally, I thought this link was an excellent example of issue 2. I have more.
oh, you're new! well hell much is forgiven!
Burn the witch!
Since my comment above, I've coded a simple personal notes/wiki program. As intended, it's pretty flask-like to work with, but the routing makes more use of regexes. I haven't really tried to do anything hard, and I'm not doing any database access as I'm storing everything in the filesystem. Authentication isn't really an issue for me in this case, so I can't really comment. If I needed to do it, I'd use an encrypted cookie like I have done in the past with flask. Sanic *does* feel like it's more focused on APIs than interactive web, though. It's not restrictive, and it *is* in its infancy, but it doesn't seem to *feel* like it's biggest strength is building user interactions. Overall, I'm quite pleased with how it's worked. 
this is probably because you havent had to analyze a dataset that would crash your repl if you loaded anything else.
I've seen his talks, and you are undoubtedly correct, but what is it this time that calls for his wisdom?
answers: https://www.reddit.com/r/Python/comments/5y71gh/xweb_a_new_python_web_framework_with_no/
VMS are often faster unless the native code is meticulously optimized for the specific system. Memory usage in exchange of performance is extremely common. The reason is that sys calls can sometimes be slower or inefficient. The other is that a jit can speed up code execution and eliminate code that can not be optimized away in aot. The big reason is concurrency and parallelism. JVM means you rely on Doug lea to have done concurrency right on your system. Native means you had to, and few people are going to do it better. What happens if you switch architecture? Your parallelism could be screwed. Then the other is that the jvm gives you additional protection from all of the other software running on the server. The other dbs, containers, VMS, etc can affect code performance a lot. Last, while native could theoretically be optimized to run perfectly for a system. Most real world code gets that chance. The JVM is already very near that limit since a bunch of very talented engineers already worked on it, and your optimization often ends up being a rehash of what is done. Real world software engineering is not so simple as oh it's native so is faster. There are serious benefits to native code. Most of those go away on large platforms compared to VM and gc languages.
Well, Holy Grail at any rate. Life of Brian can be a bit offensive to certain people, and does have that out of nowhere​ scene with full frontal 70s bush.
Actually it does increase security, since less information is known about your key (only the Hash160 of the public key, not the actual key).
As a long time developer on a large-scale, long running Python program, I am firmly of the opinion that Python is not suitable for large-scale, long running programs. Sure you can make it work, but that's not the same thing. In fairness it's a fundamental issue of dynamic languages. They just aren't good once your codebase is big enough you can't remember all the ways a particular data structure or interface is used. Computers are way better at that than we are, but you have to design your language to allow automated reasoning about it.
You certainly live in a different "real world" than I do. In my world whenever the JVM boots up everything freezes to death, OOM errors start popping up everywhere until the system starts swapping and dies. I haven't even been able to use scala, since its compiler was not compilable in my machine because it was written in java. (8GB of RAM isn't enough even to play minecraft...) If your idea of "high performance" is needing a supercomputer to run your stupid web app, you need to reevaluate your life decisions...
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/bestof] [Python Developer hasn't seen any Monty Python](https://np.reddit.com/r/bestof/comments/5zuif9/python_developer_hasnt_seen_any_monty_python/) - [/r/woooosh] [Wut is the airspeed of an unladen swallow?](https://np.reddit.com/r/woooosh/comments/5zts9w/wut_is_the_airspeed_of_an_unladen_swallow/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
No one expects the full frontal 70s bush.
He said knowingly...
Probably depends on some other factors. Having spent fifteen years running long-running python programs, it mostly hasn't been an issue for my teams. I'm finding that static &amp; runtime type analysis of my python code is helping though.
&gt;I hadn't been aware C# changed things, but it looks like they've simply made it so the for variable is created in a new scope each iteration That's what I was trying to say - python is the odd duck that *doesn't* create a new variable each iteration. Afaik, Python is the only language with list comprehension that rebinds an existing variable each iteration. &gt; the same behaviour of binding to the variable is still going on, it's just binding to a different variable each time. Yeah, pardon the confusion. That's precisely what I was trying to say. 
You'd find that your static and runtime analysis would work better in a language designed for them. Once your codebase gets so big, though, the inertia is a huge factor. Incidentally, did you switch to Python 3, yet? How much of an issue was/is it in your codebase? 
The only real reason to use a try without an except block (which is legal), is to do cleanup no matter what. An example would be if you didn't know about `with open (path) as fh:` or `with closing (something) as frob:` (these are called context managers, by the way): try: fh = open(somepath) # do stuff finally: # oh god an exception, let me clean up `finally` is *always* executed, even if you successfully return out of a try block. 
I think you might like: [The Genuine Sieve of Eratosthenes](https://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf). 
Your question is be better suited for /r/learnpython Something you might be able to do have a variable that keeps track of what room you are in, and then call a function that lists current items in the room. From there you can have it swap out items in the given room. Cur_room = 1 def Get_items_in_room(Cur_room)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
If you're looking to get on the scoreboard / compete in things like TopCoder, then don't use Python as /u/Thomas1122 said. There are performance optimizations you could try with your Python code, but the ROI is much lower than switching languages.
Meaning of Life would be better. 
I like that you can iterate over strings although I agree that getting strings is a bit of a WTF (although often convenient). The worst part IMO is that when you iterate over bytes, you don't get that behavior (you get `ints`). Some imbalance between bytes and strings makes sense, but that's just annoying. Might be nice if there were a `chararray` like byte's `bytearray` (mutable, and yielding ints/chars) and `bytes` acted like `str` (yielding bytes/str), but IDK.
thanks! I posted the korean version here -&gt; https://mnpk.github.io/2017/03/16/python3-data-structure.html 
There was a fun Pycon talk recently that delved into a number of Monty Python jokes that has made its way into the language https://youtu.be/gJ4duC-V6Xw
Better just to do `map(label_nums.get, ...)` on a normal dict in just about any possible case I can think of, although both your code and that have a problem as they probably shouldn't return None by default. I guess you could do `label_nums.__getitem__` or `functools.partial(operator.getitem, label_nums)` if you want to get a function. Instead of creating a weird hybrid type, it would make more sense just to have a simple helper function like def gets_from(indexable): return functools.partial(operator.getitem, indexable)
Without Windows you're not going to get a working exe.
On second thought let's not go to Camelot, tis a silly place 
Yeah, I guess that makes sense, but since that's not how Python's dict-like-mappings normally work, it seems the problem you are really trying to solve is "how do I create a callable that gets from a dict-like-mapping?" I would just use `.get` or something like that `gets_from` function. I think scattering something that acts almost like a normal dict except for one little unnecessary quirk all throughout a codebase is just asking for confusion.
That is so odd, yet almost impressive in a way.
&gt; resumes execution with the first statement following the end of the with statement Well, it has the same behavior as try/except then, how is it not exactly what the title of this question asks for?
Whoa this comic has almost been referenced 10,000 times
A service listening on an open port that evals strings sent over the network, is like the security nightmare to end all security nightmares. That is *really* dangerous.
We're stuck using 3.3.6 at work because we're tied to an older version of RHEL 6 and unable to upgrade on our current hardware spec, Rackspace only certify certain version of RHEL against certain hardware, and we're tied to Rackspace for now. I'd love to be able to upgrade to 3.6 as I know our code base will work on it, as I've tested it, but currently not do-able. So yes, some of us are stuck with older versions of 3.
I don't understand. You saw "==" everywhere, in every tutorials and documentations, and maybe "is" in a few places. And you choose "is". Why ? I sound harsh but believe me I ask it with the utter most respect. I'm a Python trainer, and I see people doing that all the time in my classes and I don't understand why. Which means as a professional there is something I missed, because clearly a lot of beginners are falling into this trap. Which means I'm failling as a professional. I must identify why and find a way to counter that. 
Depends of the type of work and the lib you can install. If you need asynchronous task and can install uvloop, you will crush the competition. If you need to process arrays of data and can install numpy as well. 
7/3
It's great to see 3.6 support in such an important module
Whats the difference to IronPython?
First, let's improve the style of your code to make it more readable: def valid_parentheses(string): # better name for your variable parens = { # 4 spaces indentation is the standard '(' : 1, # format your dict so it's more readable ')' : -1 } count = 0 for char in string: # i is for numbers, use a better name try: count += parens[char] # don't inline try if not in a shell except KeyError: # never, EVER make an empty except block pass if count &lt; 0: return False return count == 0 Then, let's improve the mechanics: def valid_parentheses(string): parens = { '(' : 1, ')' : -1 } count = 0 for char in string: # return parens[char] or 0 on KeyError count += parens.get(char, 0) if count &lt; 0: return False return count == 0 But really you don't need any dict: def valid_parentheses(string): count = 0 for char in string: # return parens[char] or 0 on KeyError if char == "(": count += 1 if char == ')': count -= 1 if count &lt; 0: return False return count == 0 This code will actually run faster: no need to hash the key every time. Careful though, if you are tryng to validate parenthesis, I hope the string you validate is not code. Indeed, in code you have strings and comments, which can contains closing parenthesis.
[Image](https://imgs.xkcd.com/comics/ten_thousand.png) [Mobile](https://m.xkcd.com/1053/) **Title:** Ten Thousand **Title-text:** Saying 'what kind of an idiot doesn't know about the Yellowstone supervolcano' is so much more boring than telling someone about the Yellowstone supervolcano for the first time\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1053#Explanation) **Stats:** This comic has been referenced 9887 times, representing 6.4803% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_df1l7gc)
You should NOT. Either you need a try, and then you should have a clean except. Or you don't need a try. If you want to avoid the except, you are doing it wrong. Ask for help.
No, we all met last month and it was decided that from this day forth Python 3.6 shall be the One and that there shall be no others beside it. Praise the 🐍!
There's an Ubuntu LTS on 3.2, that's all I know of. It might have gone out of support as well though anyway. If asked, I'd generally advise a project wanting wide compatibility to go with 2.7 and 3.3 up for the moment.
I use python for data analysis and prototyping, while I use C++11/CUDA for the heavy lifting. Python I can just write and the REPL helps a lot, while in C++ I often know what I need, but need days to figure out how to actually write the code ... I have still written more Python, so my C++ will hopefully improve ;-)
I often think that if I could have any superpower, it would be the ability to experience anything as if it were for the first time.
Thanks for that one!
I don't think template counts since it's a library feature. I mean if you start counting that then you also need to count array and Jinja and Mako.
Because for optimisation purposes they don't necessarily delegate to the base method so there's no guarantee `dict.update` will call `dict.__setitem__` whereas that's part of MutableMapping's contract. Also you may not want to store your elements in self e.g. you might be building a Mapping interface to a filesystem.
I do like closures, but because of the way python deals with objects and scoping it can be real tricky to reason about how closed they are. For instance I think that: x = "hello" def hello (): print (x) x += " world" hello () del x hello () Actually prints "hello world" the first time it is called and just errors out the second. Which is why it is often recommended that you define lambdas with that weird default "x=x, y=y, z=z" bit to ensure that your args get to the lambda as you would expect. 
Reference counted. CPython simply keeps track of the number of references to each Python object (and you've got to be very careful about getting it right if you develop a C extension), if an object's reference count falls to 0 it's collected more or less immediately. That's got the advantage that it's a pretty simple, deterministic and low-latency scheme but it has fairly low throughput and can't deal with cycles (when two elements refer to one another — without using weakref). This latter problem is increased in high-level languages as it's easy to create cycles via closures and the like. Other implementations such as PyPy use more "advanced" garbage collection schemes where once in a while (based on various criteria and heuristic) they basically traverse the objects tree and somehow collect anything they didn't see during traversal (unreachable objects).
Right! I didn't realize PyPy wasn't reference counted. Thanks for the explanation!
Nope. We use Python 2.7 for Odoo work; 3.6 for everything else.
Maybe include at the bottom an `if __name__ == "__main__":` section followed by some demo code. Then your module is still importable, but also can be a free-standing demo of itself.
Why not install 3.6 in the app user's directory with pyenv?
What does this let me do?
Given python's object model for enabling slicing, you would be able to keep everything else about strings the same (I'm fairly sure?), and `list('asdf')` would turn into `list('asdf'.iter())`. What I'm suggesting isn't all that different from what we have now; but it makes it easier to write code which e.g. recursively traverses a structure (without special treatment). As an intermediate measure I could also be okay with strings consisting of `char`s instead of strings, the wart (imo) of which is most easily demonstrated by my original `'a'[0][0][0][0][0]` example. EDIT: after reading one of the other responses, maybe most of the problem is that iterating a string yields more strings, as I can't see *any* reason why (if you *were* iterating over a string) you would want to then iterate over each item in the iteration.^(Though I'd probably still say moving string's iterability to a function would be a less invasive change tbh.)
Can you summarize what it does? Maybe give an example?
Interesting. I haven't experienced this schism as of yet. I started on Python 2.4 and only recently have started playing around with Python 3. I don't really have a problem with the new version
It's worth to say that python 3.2 is not receiving any updates from February, 2016 (according to the [release schedule](https://www.python.org/dev/peps/pep-0392/#lifespan)) and python 3.3 will stop receiving any updates in [September, 2017](https://www.python.org/dev/peps/pep-0398/#lifespan).
I really like Wing. They have a nice free personal edition, but the killer debug features are in the Pro version.
Whenever I need user handling and database/ORM I just go with Django. I'm sure the are 3rd party libraries for Flask/Bottle to do the same, but why bother if Django has those out of the box.
Yes, it is well-documented and well-known. And it can be convenient. I still think it has some wat-potential.
It's just an example for people to learn. Was studying algorithms and came across the algorithm and the C++ implementation. 
Ah right, seems much better this way then.
Thanks!
As a python dev, adopting a new web framework is quite a big commitment. Over the years I've coded against Zope, Django, and now Tornado. Zope had a massive learning curve. Anyone remember ZODB and acquisition? Django was much simpler. And Tornado is simpler still, while having support for important stuff like websockets, py2.7 coroutines and authentication. It works beautifully with RethinkDB too :) So I wouldn't use xweb for an Internet facing production server. But I can see a role for it with quickly hacked dev test servers, internal services etc.
Tornado is DB agnostic and much more lightweight than Django. Don't know Flask or Bottle so I can't compare. But if you want to take the NoSQL DB route, Tornado works beautifully with RethinkDB.
Yeah, I haven't had much luck so far. Our Oracle drivers don't appear to be in the structure that cx_Oracle wants. I might have to set up a different ORACLE_HOME for python.
Still new to programming, but this means that we can call .net functions from Python, and also call Python code from VB.net and such? Vs. IronPython is taking the Python code and converting it to something Windows can read?
They're really not that different. Bottle is a single file with no required dependencies, which can be awfully convenient sometimes. Flask is more popular, so there's a lot more community around it. They've both been around for a long time, though, so you won't be missing anything either way. Both require you to select the different plugins you want and put them all together. Go with Django if you don't want to do that, but expect to have to do everything the Django way. Personally, I prefer Bottle, and I've built a wide variety of small and large apps on it and never felt restricted. In my experience, most webdev is spent on the clientside anyway (JS/HTML/CSS).
Yeah, we use both 32-bit and 64-bit drivers for our apps. So that's already hacked in. Fun times.
I'm not entirely sure how to demo it... I wrote it for automated conversion between different writing systems, but it's also great for tokenizing. Maybe a tokenizer for python math expressions or something? I gave some examples of how it might be used [here](https://www.reddit.com/r/Python/comments/5zx10i/i_wrote_a_a_prefixsuffix_tree_implementation_that/df1tnaf/).
I'm not stuck on 3.2 or 3.3. I'm actually stuck on 3.4 because of MySQL not moving forward yet. Once they roll a 3.5 or 3.6 plugin update out, that'll get upgraded the same day.
Wow, that's what -- a decade or two too late?
I don't even try to install cx_Oracle on windows machines any longer.
This might be handy for a project of mine. But in any case, split it out into a package and upload it to PYPI. What's the harm?
I'm not big into foreign alphabets so I'm still having some trouble understand all the use cases. You're talking about a tree although all I'm seeing are lists. I can implement both of your examples with a fairly simple function. Is there more to it that I'm missing? (For example that left-to-right parsing) def tokenize(string, tokens): """Iterate over substrings (tokens) in a string.""" max_token_len = max(map(len, tokens)) offset = 0 while offset &lt; len(string): for length in range(max_token_len, 0, -1): if string[offset:offset + length] in tokens: yield string[offset:offset + length] offset += length break else: yield string[offset] offset += 1 # demo mapping = {'sh': 'ש', 'a': '', 'l': 'ל', 'o': 'ו', 'm': 'ם' } result = tokenize("shalom", mapping.keys()) print([mapping[tok] for tok in result]) # ['ש', '', 'ל', 'ו', 'ם'] tokens = set((r'\s', '^', '*', '.', ')', '(?=', '(?&lt;=',)) print(list(tokenize(r'^\s*\w.*hello.*\w$', tokens))) # ['^', '\\s', '*', '\\', 'w', '.', '*', 'h', 'e', 'l', 'l', 'o', '.', '*', '\\', 'w', '$'] 
A README should be your next priority, imo
### +1 Also - a functional demo, or at least screenshots.
So... is the project dead, or you know... resting?
The tree is in the inside. You don't mess with it directly (unless you really want c.f. Guido on privates and consenting adults) What the tree means is that you don't have to search through all lengths when you want a match. It's significantly faster because it's one and only one dictionary lookup for each character (plus one failing lookup at the end of each token which is not also the end of the string). In your example, the maximum token length is a performance bottleneck. But yes, the output is the same.
But they didn't do it intentionally. It was just an unfortunate side effect of caching small integers. 
But the thing I like about Haskell operators is that multiple symbols next to each other is just one symbol, so `---` is some custom operator, not some combination of infix and prefix subtraction / negation. 
I never claimed Python wasn't strongly typed, I know all that stuff. Just that calling its type system "very powerful" when system FC and others exist is a bit silly. 
Not that I've seen but I've considered making one. Just something that inspects a function and spits out a NumPy doc skeleton for use as starting point would save some typing.
&gt; being a huge PITA getting it to work on Windows As is tradition. Same with getting psycopg2 or ODBC working on windows.
Excuse my lack of understanding, what do you mean by "released it here as a wheel"? I've tried using Conda and stuff but it is way beyond my knowledge. Thanks so much for your time!1
+1 
Thanks i'm working at the Readme and include some Screenshots of the Application 
That's a good point, *though the kind of code golf I'm playing is more for succinctness in terms of lines (barring huge one liners) than characters
Pretty cool project.... import clr from System import Console from System.Windows.Forms import Form Console.WriteLine("Blabla") form = Form(); form.Text = "This is Title"; form.ShowDialog()
thinking more about it, this is probably the best practice for readability and what I have always done for simplicities' sake when writing actual software rather than just solving internet problems
Code: https://github.com/ibm-cds-labs/pixiedust Docs: https://ibm-cds-labs.github.io/pixiedust/ disclosure: I work for IBM
How large of a file? I think you need to justify jumping to dask from pandas+apply.
"Alas" means "sadly."
Oh. Well, I built a backwards prefix tree or something. Is there a name for what I built?
Oh I see, so basically you tried to build a dict with faster lookup for string keys. Do you have a benchmark comparing this to native dict/set lookup? Because those are implemented as hash tables and thus already have an average O(1) lookup, so I'm not quite sure how your version would be any faster…
It's a crypto library whose only reason to exist is that it's in Python. Given how hard crypto libraries are to get right that's not a good enough reason in my book. I would always use Python bindings for a more mature library.
Right, I forgot the sentinel. That's what I get for commenting from my phone. Thanks for pointing that out! 
Neither, go with pyramid. It is as easy as flask but without globals and flaws that flask carries. You will end up with cleaner codebase. Reddit is based on pylons which is was developed by same people.
PyInstaller is your friend, --onefile option. If the script is really simple and small `pyinstaller --onefile script.py` should give you a working executable.
and violating the license terms. Ask SAP if that may be an expensive idea. https://en.wikipedia.org/wiki/Oracle_Corp._v._SAP_AG
You can ship WinPython Zero with a .bat file that runs python yourscript.py
The worst case for publishing it *on PyPI* is that the author doesn't maintain it, and one more entry in the package namespace gets forever taken by [a package that's perpetually stuck at version 0.1.1.](https://pypi.python.org/pypi/trie). And then people search for "trie" and build their project around the first result in the list. So, ceteris paribus, I'd rather OP added a `setup.py`, but otherwise kept his package on Github. `pip` can install packages directly from Github, so nothing is lost in this regard.
I just updated it, so it's now on part with django 1.10. It's still a wonderful and handy project to get a grasp of django basics. Hope you like the fresh up.
&gt; I like my programs deterministic and hash randomization prevents that or at least requires to splatter a lot of sorted() through the code. From the docs: &gt; A set object is an unordered collection of distinct hashable objects. In all Pythons prior to 3.6, dicts were also unordered. 3.6 changes that, but says: &gt; The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon You cannot depend on set or dict ordering, ever, regardless of Python version. You _must_ sort their items before comparing them, always. If you don't, you're pretty much guaranteed to see breakage the next time you upgrade to the next point release.
I wish it was that simple. The project I'm on does use Postgres, but it also needs to integrate with multiple legacy behemoths that have an equally monstrous Oracle database as the only interface. 
&gt; In all Pythons prior to 3.6, dicts were also unordered. 3.6 changes that, but says: I am looking for determinism, not a specific order. `sorted()` or forcing a hash seed with `PYTHONHASHSEED` is the only way to archive that now, formerly it was unordered but deterministic by default. 
A heavily commented django project, with each app demonstrating a django feature so you can see how they all fit together. It runs out of the box with zero config. You can test each app in the browser, and then read the commented code to understand how it all work. I use it for the trainings I give. I still have to add a lot of things to it, but the first 8 apps are already very useful.
Fair enough
I have moved several large enterprises OFF oracle and on to better systems. Saved millions of dollars.
Yeah, I don't doubt it. I don't work for the companies that use Oracle, though, we just integrate with their products. SAP is a big one. 
I've had the opposite experience, where in python one of the main reasons I love it is because there usually is 1 obvious way to do things. There might be a few bleeding edge libraries that do that same thing fancier, but there's usually 1 main pythonic way to do it. This whole subprocess shell thing is an example of that not being true, and I really wish the standard lib handled simple things like this better. However if you look at most things you want to get done in python there's 1 good way to do it for most people. It's actually one of the big differences I see between Ruby and Python. I dislike how in Ruby it seems to be encouraged to do things in a clever new way using a fancy trick. At least compared to Python. But god forbid we look at the javascript community! It's a mess!! Every question I've ever looked up on SO for js has 10 answers that all do things wildly differently and all look horrible to me. And the comments usually boil down to kids bickering about the speed of different types of loop iterations, but I digress...
I'm tinkering with the web app for my enigma machine simulation, particularly in adding the state memory and trying to figure out how I'm going to implement the WIP section of the app. http://enigma.spgill.me
This post got a ton of negativity! I got here via googling "delegator python reddit" because I wanted to chat with people about how awesome it is that we can finally run shell commands and get the output nicely. This lib is awesome. Screw having to look up how to run Popen and subprocess.check_output. 
Your `__len__` implementation would be faster if you kept a running count of the number of items.
No joke I was on your website just a few minutes ago. Nice work.
I did something similar with QBasic when I was 15-16 except that it was all ascii based. I miss being able to easily work with the text terminal for UI's.
Thank you ! I don't really want to build this for the experience, I like programming, this is my main activity, but I was looking for those setups because I wanted simplicity, speed and evolution. I though of using a CMS but I don't know what is available on python.. :/
Because Django is harder/longer to learn and is too complex ? I don't know this is just for saying, I haven't any experience in this.
Nice ! Thanks a lot ! But it smees that there isn't that much extensions for this one :/ Could I use a cms with it ? Or I would have to create it myself ?
You're right, I exeperienced this situation with PHP on Slim and Cake. But I'm afraid to have something really complex to configure and setup with django.. 
But it's 5GB per file, right? I'll be honest: the easy thing to do is to simply run your analysis per-file on a machine with 8-16GB of memory. I'm not sure it makes sense to iterate over rows of dask Dataframe... that's the equivalent of building a task graph with a function applies to every single row, right? Or, can you think of a applying jobs *column-wise*? Just spit-balling. But I'd focus on the per-file approach here.
HD Wallet support is coming soon!
https://www.django-cms.org/en/ :)
I've been using `pyodbc` on windows for years without any problems. AFAICT, it literally *is* just `pip install pyodbc`. I've never had to compile anything.
&gt; This whole subprocess shell thing is an example of that not being true, and I really wish the standard lib handled simple things like this better. I used to think Python's documentation was terrific, but now I agree with those who think it is terrible. And since I wrote my response a month ago, I saw one code example that was absolutely beautiful and really showed how to use subprocess as is, something the official doc lacks. But then there are other aspects of the language that fail the one obvious way to do things test, for example, building up a list, using: + explicit loops + list comprehensions Here's a conversation from a week ago regarding the horrors of list comprehensions for many developers. https://news.ycombinator.com/item?id=13835657 Yet there is a sense that "don't use them at your own peril". Don't use a list comprehension and you open your code (and you) up to criticism that you're a noob. Use them and you open your code (and you) up to criticism that you write incomprehensible code. It's ironic, the "obvious pythonic way" to build up a list is with a list comprehension, but the criticism is that "obviously pythonic" and "obviously comprehensible" are conflicting goals.
For sure your application could be built as part of emacs ;P After all, we are talking "EmacsOS" here.
I'm looking at Travis and Circle. This link has some interesting comparisons: https://hackernoon.com/continuous-integration-circleci-vs-travis-ci-vs-jenkins-41a1c2bd95f5#.sx6me5pc0 A slightly less useful site but gets you info on who is using what, if that matters to you: https://stackshare.io/stackups/travis-ci-vs-circleci-vs-jenkins P.S. Jenkins is free... that is likely going to be the deciding factor. :)
I suppose we've had different experiences and backgrounds then. Personally I never use a nested comprehension and find most comprehensions very easy on the eyes as long as they're short. Like anonymous functions. Everything in moderation. It's all very subjective but I think it mostly boils down to practical readability, as in "is it easy to read on the first pass?" I'm interested, do you find short comprehensions pretty? 
I like something that figures out stuff for me. Skynet! ;-)
yea I probably shouldn't have suggested `iter` itself, as it would have to be a special case
good catch. i'm on it
&gt; Use Spark, without having to RTFM Spark You lost me at this. I am 90% sure whoever uses this without any knowledge of spark wont really get to run successful jobs in any production environment. Dont get me wrong OP, i am sure someone like me could benefit of the speed up and utility functions that PixieDusts provides, but that is because If I used it and it gave me an error, I would probably know how to fix it.
That's only effective for a particular binary. Python can (and has) changed hash algorithms before, and they're not really obligated to point this out since it's a behind-the-scenes implementation detail. Again, you simply can't count on any unspecified behavior to give you a consistent set of results. `sorted()` is the only repeatable way to get what you're asking for.
IMO as someone who's not a professional Python dev, but uses it as a support language, it's a good choice to cover all those bases. It's the broadest language there in terms of things you can do, it has a huge ecosystem, and it's relatively simple to use to boot. Nothing you listed is done much easier with other languages, and none have as much "coverage" for the things you want to do. That said, you have a lot of custom things there, so it won't happen overnight. I'm also not sure what you're really trying to do, and I don't really feel like asking for details. It seems like you'll need: 1) Basic web scraping to get those job posts. The 'requests' library helps there. For email, I'm sure there's an imap library you can look up. 2) A web UI to show things, and let you take actions such as writing a response. I'll let someone else comment on what to use 3) Custom text manipulation to parse messages, and detect which canned reply to use based on keyword. This can be as elaborate as you want.
Maybe I am flipping it around. Is pyodbc a pain to install on linux? I remember it being a pain somehow.
I don't think the `venv` built into Python 3 has this problem (though `virtualenv` does, even with Python 3): $ python3 -m venv /tmp/venv $ /tmp/venv/bin/python -S -c "import optparse; print(optparse.__file__)" /usr/lib/python3.5/optparse.py 
Just curious, are you using free DBs like PG, mySQL, etc. or proprietary ones like MS sql? It seems like there is a wide selection of viable and free SQL DBs out there, but I'd be interested to hear if you've had a lot of success with a particular one.
Also, here is a direct link to the YouTube video explaining how the Python script works (explanation starts at 5:40)! https://www.youtube.com/watch?v=8G3mvy-2taM
PG is what I prefer, and generally try to end up there. MySQL is good if you only do inserts and reads by PK.... Then for really large amounts of data I use Cassandra
kind words. thank you :)
Yep that's what most people told me, thank you for what you said, that will push me to try django :)
Ok thanks for your help, I will go for the official tutorial :)
You're really just looking up the method, '' is a constant so it's reused, and is also actually a singleton object. With a new method calling optimisation in Python 3.7, actually no objects will be made to do the call except for arguments and the return value.
Thanks I will ! :)
There is Kotti CMS - http://kotti.pylonsproject.org/ if you want "deeper" integration with CMS, I think there are others too. https://trypyramid.com/resources-extending-pyramid.html https://pypi.python.org/pypi?%3Aaction=search&amp;term=pyramid&amp;submit=search - I'd say there is plenty of packages.
You should post on r/learnpython.
This could be a wtf if you believe that "all()" and "any()" can always replace chains of "and" and "or". It's common to harness lazy evaluation when you know that later terms might blow up. For instance, &gt;&gt;&gt; False and None/2 False No problem here, works as advertised. None/2 makes no sense but the "and" short-circuits evaluating that nonsensical value. But if you start translating these into "any" and "all", you're in for a bit of pain: &gt;&gt;&gt; all([False, None/2]) Traceback: (...) TypeError: unsupported operand type(s) for /: 'NoneType' and 'int' This happens because the values are evaluated when the list is built. I keep wishing for a lazy version of "any" and "all".
I can echo the part on the flask globals. I had so much trouble with "g" and "current_app". Sometimes, just trying to move some code into other files is hard, because of the tight coupling that flask introduces.
why not just use regex instead of bs4?
just `pip install gcc`!
Nice! I wrote a stat tracking bot in Python too, and I might take you up on that "real life CSGO stat tracker" idea when I have time this summer. Had no idea that Valve's web API stats were so off though.
nice writing however as almost all of the write ups about "basic socket programming" one of the most important pitfalls is not discussed at all: the fact that ``recv`` and ``send`` sometimes may *not receive / send all bytes from the buffer you supply*. When this happens, the code breaks because almost all the time they assume that a single recv call gets all the data in one call, and even that a single send call sends all the data. They don't. You'll have to take care of that. There's a reason they return an ``int``.
I'd love that too. Or even just a nice TUI library that's not a major pain.
Thanks! You're right, it was actually pretty clear once I just looked at the apps folder, having it at a glance like that helps though.
You and me both! Naming is the hardest part. Good thoughts on debugging, I agree that it's a pain with comprehensions. 
EDIT: /u/sli beat me to it, but here are 6 other sources telling you not to do this. http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags http://stackoverflow.com/questions/590747/using-regular-expressions-to-parse-html-why-not https://meta.stackoverflow.com/questions/252390/the-famous-tag-regex-answer-should-its-title-be-edited http://stackoverflow.com/questions/6751105/why-its-not-possible-to-use-regex-to-parse-html-xml-a-formal-explanation-in-la https://www.johndcook.com/blog/2013/02/21/can-regular-expressions-parse-html-or-not/ 
It's pronounced "sex". It's for getting down with the oracles yo.
I guess the real question is why? 
A wheel is basically a package file of file extension .whl containing the various source files and sometimes pre-compiled bits (as in this case) My above text is a link to here: http://www.lfd.uci.edu/~gohlke/pythonlibs/#pybox2d Where you can get the wheel, then you can simply pip install PyBox2D with pip: `pip install filename.whl` as you would any package. The version might not make sense at first, for example if you wanted PyBox2D for Python 3.6 and a 64bit OS you would download: `Box2D‑2.3.2‑cp36‑cp36m‑win_amd64.whl`
So much hate .. who cares if it's regex or bs4 , regex 1 line vs xx lines bs4 If the site changes both ways will fail 
I am familiar with sql alchemy. I still prefer to work at the higher level of abstraction that Django orm provides. Personal preference though. Not because I consider one superior or inferior to the other. 
I only posted 6 more links so that some one stumbling upon this in the future will know how much you are wrong such that they will not fall to this.
You are correct, hence the abrupt ending.
Still finishing up my recipe scraper and emailer from previous weeks. Slowly but steadily coming together!
I'm making a python implementation of seam carving of images. I'm gonna use dijkstras algorithm. Does anyone have a concurrent way to use dijkstras algorithm, when you have multiple starting points and multiple ending points to gather the shortest paths upon?
People still play L4D2? Awesome counter
Cool! First I've heard of this. I once tried to build and algorithmic trading app using Interactive Broker and felt their API and architecture was horrible. 
Excellent! I will check it out. Thank you!
Very neat, I saw this in my RSS feed this morning! Nice work, dude.
Use Composite Software to proxy all the data sources. 
Does massive offer any way to get that info?
Not the parent, but here it is: $ python3 -c "import sys; print('\n'.join(sys.path))" /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python35.zip /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5 /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/plat-darwin /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/lib-dynload /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages $ python3 -S -c "import sys; print('\n'.join(sys.path))" /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python35.zip /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/ /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/plat-darwin /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/lib-dynload $ python3 -m venv /tmp/venv $ /tmp/venv/bin/python -c "import sys; print('\n'.join(sys.path))" /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python35.zip /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5 /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/plat-darwin /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/lib-dynload /private/tmp/venv/lib/python3.5/site-packages $ /tmp/venv/bin/python -S -c "import sys; print('\n'.join(sys.path))" /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python35.zip /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/ /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/plat-darwin /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/lib-dynload
[removed]
Use http://ius.io to get python version you need that doesn't conflict with the rest of the system. It's a bad idea to tie yourself to version that comes with the system, unless you're writing your own version of yum etc.
Not anymore.
Well... according to your feature list I think it's not too big but really the right size. But the size does not matter (ahaha) as you can use just what you need. For your cms needs, look at django-wagtail. 
Sure SA is better than django ORM... but from a productivity pov, integration, available tools and support make the difference. 
Thank you.
Great ! Rellay helpfull thanks a lot :)
Red hat and centos support 5.x
Sure, don't change what works for you and what you know best.
Could be, but then again by having very powerful ORM + migrations at least personally I had all the tools I ever needed to build applications that support millions of users. There are lots of additional tools for SA - after all it is the best ORM python has to offer. This might really depend on what you started with. I feel I'm very proficient with SA.
Why `containsnode` instead of `__contains__`, or am I misunderstanding what this does...?
Does jython count?
Not that I'm aware of.
We use python 2.5 at my company (ThyssenKrupp) , it does do job.
That really surprises me too. I wonder where Steam gets their information from to populate your profile!
Government contracting. 
People who work on closed systems are stuck with whatever system python they have. That being said python is a great tool for these folks regardless.
We have stupid ~~Centos~~ Oracle linux boxes at work.
This was a little saturday morning scripting fun. Inspired by the two famous lists, [remote-jobs](https://github.com/jessicard/remote-jobs) and [hiring-without-whiteboards](https://github.com/poteto/hiring-without-whiteboards), I was curious to see which companies existed on both of these lists. Ultimately given "remote-friendly companies that possibly hire without whiteboards". Better living through code! Maybe some people out there that have these two desires while searching for a software development position can get some use out of this.
Ahem. Centos 6 still 2.6 as well
No, you still SQLAlchemy for dealing with the database in whatever capacity you want (ORM, core or just straight sql) but your data models are just data models, the only thing they deal with is getting your data in and out of the database. They become dumb objects that have very little logic of their own (at least in comparison to yoyr domain models). 
You are overwriting the Session you create with a response object. The way to use a session would be: s = requests.Session() r1 = s.get(url) r2 = s.post(url) 
Centos 6 servers at work. We're going to get an upgrade to 2.7 out of our migration to Centos 7.
All of the above is possible with Python. In reality though, I think that 1, 2, 4, and 5 are probably easier combined than 3. Natural language processing gets harder as the variation in input increases. You might still be able to use it as an aid though. It could provide some canned sentences/paragraphs in response to keywords in the input which you then arrange, as a human, into the final response. It would be my advice, because these responses impact on your job (/livelihood), not to make it completely automatic (sans human oversight) as it would be very unfortunate if the code bugged out and sent an evidently canned and auto-generated message to a potential client. 
IronPython was embedded as the scripting engine for one of our software solutions back in 2007. It is still the easiest way to automate that solution.
This usually happens when your PyCharm project isn't tied to the right Python interpreter. Try checking Preferences -&gt; Project -&gt; Project Interpreter and linking it manually to your Python executable of choice. If it works you will see all your libraries installed listed. If you are 100% sure you have the right interpreter in there and don't see your libraries listed, your pip that is in the PATH of your system might not be for that Python.
Was there, now I'm not on site and it's glorious. Leave, leave now!!
Sles 11 and rhel 6. Upgrading Enterprise Linux Python is not supported. Compile from source in an alt dir is an option but a nightmare to manage. 
Please be kind with me, how do I find Preferences in PyCharm? Or do you mean settings?
Thank you so much, you saved my life!!
This is my situation. Corporate environment and no sign that CentOS 7 is on the horizon.
It's unsupported by the vendor, and a lot of their tools are Python based, so if you have a support contract and switch to a non-standard version, you've thrown that out the window. Also, a lot of people use RHEL in an environment where accreditation and standardization are a big deal - using a custom package for such a major component raises red flags.
Might be organized differently under Windows or I could be wrong. Going by memory here. But yeah look under settings. There should be a filter bar and you can type in 'interpreter' to find the relevant section.
&gt; nightmare to manage. Really, how so? at it's most basic it's ./configure &amp;&amp; make &amp;&amp; make install. On top of that you can create your own distro .deb, .rpm or whatever. And or use configuration / management tool like Ansible. I'll assume if your using ancient stuff and thinking it's hard to deploy your own cpython then LHX, Docker containers with your own Python are right out.
This. Our customers are firmly entrenched on RHEL/CentOS 6 and I'm opposed to installing a non-distribution Python binary with our application. I tried the SCL version of Python 2.7 but didn't have the time to figure out how to make `sudo` work and still use the SCL environment.
It didn't help that C6 -&gt; C7 is a fairly large overhaul. Systemd, firewalld, etc. We're in the process of migrating, but the amount of changes required to our automation platform is non-trivial
Get off my lawn!
I installed Anaconda and the problem was gone sometimes, but also came back. I don't know what to do know.
Thank you for this, exactly what I was looking for! I will post in the correct place next time, please forgive me.
what about using virtualenv? 
So instead of an interpreter based JVM python, it's compiled correct? That's pretty cool!
I'm still wrestling with a max7219... Show me the temperature, dammit! 
Nice, thank you very much 
I'm a trained metalurgist, what do you use python for? If you can tell... 
definitely agree with comments about #3. sentiment analysis is still very much a nascent field imo (i'm not in research or anything like that, so that could definitely be inaccurate) - parsing text is easy. parsing meaning is not.
http://i.imgur.com/52SxaVM.jpg
Couple that with the fact that the software being used by the interpreter is written in house (ie, not supported by anyone but your company). Leave /usr/bin/python as is, but use one in /usr/local for custom developed applications. Personally, I use anaconda because it comes with tons of packages (more than any distro), and it works well.
Anaconda?
1 - a function called getSum is defined 2 - the variable sum is initialized at 0 3 - a loop is created with x, from values 1 to 999. The value of x increases by 1 each time it runs 4 - it is checked if the remainder of x when divided by 3 or 5 is 0 (aka x divides exactly by 3 or 5) 5 - if line 4 was true, the value of x is added to the sum 6 - the variable sum is returned. This means that if you wrote: ans = getSum() ans would contain the returned value I don't know how familiar with python you are, bit the level of indentation determines what runs and when
I think I will probably try that next... and it'll give me a route to Python 3.x on CentOS 6/7 a well.
Are we really here to solve people's homework problems? Honest question.
For those that are stuck supporting legacy system (looking at you redhat/centos). Try using pyenv which you install in bash from github and then from there run a local version with whatever python version you choose.
Use a virtual environment then. 
i think the important question here is ... when the hell is Valve going to release L4D3? Nice project though.
Excellent tutorial. We need more foundational materials like this for learning basic statistics and probability using Python.
Currently working on a python 3 module to analyse whatsapp chat groups. There are some Jupyter notebooks as a know-how to use it. Feel free to test and contribute :). Currently, everything is happening in /develop branch :) https://github.com/lucasrodes/whatstk/tree/develop
Yeah - using 2.6 there sounds like the kind of thing that ends up happening due to contract language and tech-illiterate lawyers and not because of any reality-based concern. Though, this is the way the world works often and my condolences to the engineers that have to deal with it.
My workplace's linux OS has 2.6.6 installed as the default installation. I use python for such basic applications (mainly text munging) that it's trivial to write code that's forward-compatible.
Have you tried using Software Collections?
You're right that I didn't cover all pro and contra arguments for upgrading which is why I'm glad to see you arguing in favour of the other party.
I was in a similar situation because I didn't have root access on a server. So I downloaded the virtualenv wheel and executed it from there, using the Python 3 executable I compiled in another directory. It works like a charm!
I always install and setup Python 3 on cantos/FreeBSD. I don't see the issue there.
I think it's only like that for L4D2. I saw a few Steam forum posts talking about how the stat tracking for L4D2 has always been notoriously bad. I bet it's better for CSGO! Also, since people are willing to pay $200+ for an in-game StatTrak gun, I figure they wouldn't mind shelling out maybe $80 for a real-life one. Could be a good sales opportunity :)
All of the solutions to this are all valid including yours. I was just trying to answer the OPs question as to why it's still used. Large conservative enterprises (fed space, banking, infrastructure, healthcare) are mostly behind the times to in favor of maturity and reliability (not including their HPC divisions which Python 3 and R are popular for big data workloads, this is a massive generalization there are organizations that are exceptions). In those environments they are still Unix heavy and it is difficult to make really any changes unless it is break fix or security patching.
How rough is that?
&gt; contra arguments Interesting choice of words. Not sure I've ever seen this before.
Yeah by now you must have figured out that English is not my native language. Sorry about that.
Not what I suspected actually. I looked it up and contra seems correct, just unusual to me. I thought maybe you were from a different part of the world :o
At my work, we passed some library (2.7/3.5) to a different department. Then they started calling with never heard before errors, importing things from the standard library etc. Turns out they were using 2.5 or 2.6 (I don't recall), I flat out refused to fix the issues, get anaconda or update, my team is already giving the library and the training for free, but to extend support backwards for a decade-outdated version is a bit too much. Also, some electronic cad tools (eagle? I am not sure of the name) install on the background python 1.0. Yes, 1.0. First time I got face to face to it i t was such a shocker, I could not even remember how to just quit the interpreter...
Thanks, but no thanks :D
;) It can send around 1 email every second from 15 different emails and it can send around 100,000 before Google blocks the sending addresses (the emails it sends from are all Gmail addresses)
What nivekmai said and also your rolldice function just returns roll string but it isn't stored anywhere. I think you should change that into instance variable `self.roll = str(random.randint(1, 6))` and then use it to change that image.
*web developer
Not too far off. I'm actually of German origin :)
What's a non-distribution binary provided by a reputable source and ready to install on RHEL/CentOS 6 without the need for dragging in a bunch of packages?
I think he meant closed system as in you aren't allowed to install things yourself. So you are stuck with whatever version is installed 
RHEL4, anyone? \*puke\*
I can't understand how multithousand node environments even grow that large without forcing themselves into a better solution. We have a hard enough time sometimes with under 30 managed nodes WITH puppet in place for almost everything. 
https://www.planitplus.net/JobProfileImages/330.jpg
No. Platform format changed. And I think c extensions are not compatabile
This is what I get a thousand times from the Delphi people (other than Java is slow and garbage collection is for stupid people): "But you still have to deploy the JVM! You have to make sure the right version is on the right machine! It's big and bulky! Nothing beats being able to deliver a single executable file!"
They believe bash server build scripts are reliable and think ssh scales. 😂. It's almost always a nightmare.
Despite your dismissive stance...An hour doesn't seem like a long time to me... Typically the most expensive thing in an organization is developer cost. If the developers on your team are spending extra time fighting their environment, then they're not actually able to concentrate on the product. Maybe you feel that anaconda simplifies your infrastructure and you spend less time putting together your environment. I'm on the opposite fence: Anaconda always slows my team down. And I can point to this entire last week as basically down time due specifically to Anaconda and not properly setting up with a python that actually works well with most of the python ecosystem.
Not sure this is the right attitude, the author probably just doesn't know those languages. You can open an issue or edit the balsamiq file and submit a patch
Curious I see this here on reddit, I just solved the challenge 3 days ago. I'm writing my cover letter can I ask you some questions?
True :)
Reminds me of a certain 'how to become a developer' thread which basically was a guide for web development haha 
Yes, good point however a nice map overall. Could have added some arrows for the Java/C#/Go boxes along the lines of "many sub-choices here". Could also have another box with Elixir and other more obscure languages (on that note, Elixir appears to be growing in popularity). EDIT: that's OP's mistake I just realized. The GitHub page says Web Developer. . . 
I thought it was cool to see that this is what BeeWare's Toga is using to implement a WinForms backend for the Toga widget toolkit! 
pyinstaller? That way, you have a self-contained binary with the script, all required modules, and whichever version of python you want.
Not in any meaningful way. There's algorithmic complexity, which deals with how code might *scale* in time, but that never touches minutes and seconds, because that's hugely unpredictable from one system to another. You can extrapolate educated guesses if you done very similar things on very similar hardware. Beyond that, you can have a feel for "reading three records from an sql database should take seconds rather than minutes". But everything is a guess. 
Neat, I'll have to give this the full breadth first traversal.
Ok but I still don't understand how to get the picture to change.
*looks at huge graph* I'm not sure if I should be intrigued or crying...
Are you a DevOps engineer? That's my guess based off this.
Probably unrelated, but I'm pretty new too and I wanted to try this for myself and noticed there's an interesting pattern. For 10, 100, 1000, 10000, etc, the sums go up like this: 23 2318 233168 23331668 2333316668 233333166668 23333331666668 2333333316666668 And then I ran out of memory. I predict extra threes and sixes would continue dropping in. I did: import numpy as np for i in range(1,10): x = np.arange(np.int64(10**i)) s = x[(x%3==0) | (x%5==0)].sum() print(s)
Why not both?
Clay tablets have no security issues, but they are large, heavy, slow to write and edit, difficult to copy, and difficult to transfer from one place to another. Legacy code is code that has no tests and often times has no spec to reproduce, and working on legacy code may be valuable to a company for whatever reason, but it has very little value to the employee that is working on it as the skills are not transferable outside of said company. Personally, I avoid legacy code like the plague that it is. The future is now.
Why is this in /r/python?
I believe it's when the library is indexing. When I go to change the Python Interpreter, I select the new location of the interpreter. Press "Ok" and that's when the application freezes.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
You can be a web developer with Python. Instagram runs using Django and reddit uses Pyramid and Flask. 
Cool! I think I need to reassess what's available. I've got a bunch of Python libraries that use numpy, scipy, pandas, etc, to do cool things, and then I've got an Excel add-in that does some of the same things plus make Excel plots, etc. There's a lot of overlap with parsing files, regex, data manipulation, etc, that I'd like to be able to just call into my Python libs from my .Net code. My other quandary is how I deploy both my Python stuff and the Excel Add-In and my Python-based desktop application. Since the desktop app contains my Python stuff you'd think I could call it from another application, but it's a "frozen" application containing python34.dll instead of a typical Python.exe. I've read that if I used pynsist, the deployed application would have a python.exe in it and might could be used to run an interpreter with the deployed libraries available.
The point of this is so I can see how much of the work day I have left, and what percentage I'm spending on certain things. I made this in python following [this](http://candidtim.github.io/appindicator/2014/09/13/ubuntu-appindicator-step-by-step.html) wonderful tutorial. It's actually super easy. The hardest part was getting it to refresh the display every second. The part of the code that does that is [here](https://github.com/Benhgift/work_time_percent_applet/blob/master/main.py#L26). If there's anything to add to it let me know. I'm also accepting pull requests and bug reports.
I thought Reddit used a custom version of pyramid or something?
Have you tried using the IUS repo? - https://ius.io/GettingStarted/ - [python 3.6](https://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/repoview/python36u.html)
No problem! Thank you! 
Once move to Centos/RHEL7. Docker/Container become a possibility to package and deliver apps in a way that "mimic" one's development environment.
Yup, changes the landscape for sure. I've done a lot of work on Docker and Kunernetes already, but I still have to support my app for RHEL/CentOS 6 until they're officially obsolete.
So, I've been told that DevOps is basically a fad or a cynical ploy by middle management to cut costs by trying to make employees do two jobs in one. But I'm intrigued by it. Is it gonna go anywhere?
New to python. I have to write program to pick a particular section from a .docx document and perform some iterations.
I am a professional senior developer. I run a business and I hire and train people. I actively write production code. I don't know much of this. If you're looking at this saying "I'll never learn all that" that's true and it's ok. 
Are you using Python 2 or Python 3? You can probably read the file in rb mode to get just the bytes and prevent any interpretation of the backslashes and do the replacement on the byte string. 
How, in any way, shape, or form does "python being faster to write" (which any competent programmer will tell you is ABSOLUTELY wrong because each task may be better written in a different language) justify it being "slower to execute". The computer runs when you're asleep. Unless you are an interpreter, the amount of time your script takes to run matter, a lot. Especially when you work with large data sets. Execution speed ALWAYS matters and should be completely unrelated to the amount of time it took to write. It could take 5 minutes to write and be as slow as Python is, or it could take 5 minutes to write and be faster just because I used PHP. 
I am using python 2.7. My question is not to read bytes but to replace the string representation to different format
I googled "python on my lawn" and found [this](http://imgur.com/a/aaAle)
With /tmp/myconfig containing \\[string]\[string]\[string] this happens: &gt;&gt;&gt; with open('/tmp/myconfig') as f: ... s = f.read().strip() ... &gt;&gt;&gt; s '\\\\[string]\\[string]\\[string]' &gt;&gt;&gt; print s \\[string]\[string]\[string] &gt;&gt;&gt; print s.replace('\\', '\\\\') \\\\[string]\\[string]\\[string]
I'm the author of Peewee and I was surprised (but pleased!) to see it included in this list. I don't think you've really characterized the project very accurately (or charitably), and would like to provide my own ideas, as the author, on why the project is interesting. 1. It is LISP-y in the sense that you're given some simple constructs that you can combine in predictable ways to build larger and larger components. Everything *composes* well. 2. Strives to be consistent internally. 3. Small code-base you can read in one sitting. 4. Cool extensions.
That's a simplistic view. Devops describes the idea that you can push infrastructure and release management into the application by hiring developers instead of sysadmins. On a small team, this helps immensely, but after a certain point you will absolutely need a dedicated ops team -- staffed by developers and not admins. As applications take more responsibility for configuring and managing the environments they run in, the less justifiable it will be to hire/retain an ordinary administrator with no software engineering skills.
Any good links on how to do rest API in django? 
You use [this](http://www.django-rest-framework.org/).
Nice work. I want to make one with 10-hour days and 100-minute hours. What happens when the work day is from 20:00 to 4:00, for instance?
:) What kind of control does it have? How will it handle waves etc? In my opinion, surface is more annoying than aerial, but better than submarine.
I meant easier/worse in terms of control. Some suggestions for your setup are to keep both motors running at the same speed instead of using differential steering, since you have rudders that you can trim. For position control and making sure you stay on track, use a Kalman filter (or similar) to combine dead reckoning and GPS and whatever other methods you have. PID?
Yes please!
It seems you're right. The point still stands since Pyramid is a Python framework too. 
Late half of the 00's I developed a deep hateful opinion of that company's business practices: Originally wrote a couple paragraph long hate rant about Rackspace but decided to cut it down. Their policies are insane and they overcharge. Three separate clients were royally screwed by RS; two had loss of service issues (last happened when their cloud service locked the account when it reached its max limit) and the third was being charged something insane like $12K/month for two midgrade Dell servers and transfer. Despise that company with a passion and their insistence on using older versions of RHell really didn't help.
That's a cool idea for a project, you totally should. You could probably fork mine and just change the function that displays the time [here](https://github.com/Benhgift/work_time_percent_applet/blob/master/work_percent.py#L23). And that is a very good question about 20:00 to 4:00! The answer is it would explode. Good catch. I put in [an issue for it](https://github.com/Benhgift/work_time_percent_applet/issues/5)
&gt;You have two props and they're not counter-rotating? Strange decision considering you have motors instead of engines (no need for heavy gearboxes), but not necessarily unusual I guess. Haven't played with boats in five years, so I may be wrong in that assessment. I agree, it works out in my favour though since the tightest turns are tighter than they'd be if the props counter-rotated. Plus it's not my boat and I don't have that much hardware experience so I don't want to risk breaking it by changing things :P &gt; of what? I'm confused Looking back I wasn't at all clear on what I'm actually trying to make it do: The idea is you drop it in a body of water, then it has to map it without knowing its dimensions, so I've decided to set it up so it follows the edge of the lake first (by "bouncing" away from the shore whenever it detects it's in shallow water) and them plots a nice neat snake style route backwards and forwards across the plotted area, and it only records a high detail image during that backwards and forwards pattern. The depth measurements are done with a standard depth sounder thingy that gives you a reading once a second, which isn't really enough resolution to be able to just turn around once you hit the shore, as far as I can see- you could be approaching it at an angle which means you'll still hit it if you turn towards it. The actual images are taken with a nifty side-scan sonar thing which has its own software/ no API, so I'll probably have it running on a completely different pc on the boat and just feed it gps and heading data instead of using the images to help navigate. &gt;If you're trying to map the bottom, then the ability to follow the trajectory you give it is very important. True, but I don't actually need an accurate map at the end, just a high resolution image and a rough idea of which part of the lake it's from. The boat is for scanning a lakebed for archaeologically interesting stuff, and then diving in to try and recover whatever it sees, rather than actually studying the lakebed, so it has to take detailed images but when the diver's actually down there they can cope with a 5-10m error. 
Okay, that makes more sense then. How bouncy is the bounce? Are you going all roomba on it? &gt; The actual images are taken with a nifty side-scan sonar thing which has its own software/ no API, so I'll probably have it running on a completely different pc on the boat and just feed it gps and heading data instead of using the images to help navigate. Could you run the controller on that same computer? At the very least, you wouldn't need to have another computer on board. What's the name of the side-scan sonar? I'll see if I can find an easy way to reverse engineer it. Though you may need to do things on your end. If it's encrypted I wouldn't bother trying, but if it is isn't, just intercept the raw data and rebuild it yourself.
Ah! That's where the "spam" in their example comes from! They modified the code, but didn't modify the expected output accordingly... Epic fail.
Now you can change that via the `config.py` file :)
Awesome, for clockwatchers everywhere :)
Not for nothing but: [networkx.algorithms.traversal.breadth_first_search](https://networkx.github.io/documentation/development/_modules/networkx/algorithms/traversal/breadth_first_search.html)
Just a quick scan for the important parts: &gt; This guide focuses only on Python3, Python2 is on life support and we do not recommend using it, unless there is an exceptional scenario. +1.
Redis is needed for the promise of handling concurrency properly. If I can get a clear use case where someone would like to still throttle their Selenium gets on a single machine, I could look into having some sort of light version that doesn't need Redis. It's going to be way harder but not impossible!
you are completely right i just remove it thanks
AFAIK there is no true rule of thumb to website request throttling. Some places will place a block on IPs that are way too active. I personally try sticking to what a fast user would do X 10-50 and i've had no issues so far.
Ah, I didn't see that. Thanks.
Yep, django REST framework is exactly what I use. 
Hey, I like the formating and the github approach. looking good so far imo! one minor comment: using string interpolation with % is old and i would use the '{}'.format approach which is the `new` styling convention. see https://www.python.org/dev/peps/pep-3101/ which explain why we should move forward on from %
I had a look at the gift in the github reps. Why is the game board so small? Is it performance considerations? Are you blitting the whole view? 
Thank you for this response. I was having trouble finding summary information!
It might be better described as a rate limiting coordination module, which would make the Redis dependency less surprising. I thought that as a "wrapper", it might just have pure Python an abstraction for rate limiting. The more difficult use case that comes to mind is on Windows, where Redis isn't officially supported; and for people unfamiliar with Redis that are focused on doing some web automation on/from their own machine. Also, plenty of stuff can go wrong with Selenium as it is, without introducing potential Redis issues.
The first code example you have begins with an import, assigns a the result of a cryptic looking function to a variable, uses a for loop and filters with an if statement. That is one of the lest friendly introductions I've ever seen. I understand that you're just showing off what python can do or whatever, but it's neither impressive nor useful, and a noob has no idea what any thing in my previous sentence even means. It goes on to ask people to write a program using `glob`. Pretty unfriendly to noobs. The index link doesn't work. &gt;Python3 is a backwards incompatible with Python2, but we can write code which can run in both Python2 and Python3. Doesn't make sense. &gt; The reason for that is if you have a 100 line program and you define i=1 at the first line and by mistake you do i = '1' somewhere in between the lines, then it won't complain that i is an integer you can't assign string to it, it'll just run the rest of the code assuming the new value of i. Completely lacks context. Noobs don't even know what a string is, let alone why they wouldn't want to use one for an unexplained reason. And this is just the first page. Overall I think it needs **a lot** of work. For something similar which I've seen have great success with complete noobs, take a look at: https://github.com/Akuli/python-tutorial More personal criticism: opening up with a massive donations area for a tutorial that isn't even near completion and lacks a lot of direction is almost offensive. Noobs don't know better and could easily be fooled in to thinking this is a good way to learn the language. I beg you not to scare any people away from learning to program with this. Harsh I know, but teaching noobs is what I do, and this ain't it.
Hiya, First of all this post is a better fit at /r/learnpython Now for your question. Without coming off as rude but have you tried google? I copied your line of code and plugged it in and it gave me an error: error: unbalanced parenthesis Literally googling this gave me this as first result: http://stackoverflow.com/questions/15947140/python-regex-error-unbalanced-parenthesis And as second: http://stackoverflow.com/questions/10318248/unbalanced-parenthesis-python I'm confident your question can be found there. For your future programming problems I can strongly recommend you to google first as almost every problem you'll face is probably already an answered question somewhere on the internet. Being good in googling is immensely valuable imo. Good luck =)
Thanks for taking the time to reply. It totally is a coordination module for rate limiting; that's a better way to describe it. That being said, it also is technically a wrapper when you end up doing this: driver = RespectfulWebdriver(webdriver=WebDriver()) Perhaps the confusion comes from what people assume a Python wrapper is. If you've seen hundreds of wrappers that are always pure Python, it might create the expectation that it comes free of dependencies. The Windows thing is a non-issue, at least for the moment, since this code is totally untested on Windows. I'll keep in mind the fact that Redis isn't officially supported on that platform though. That's a good thing to know for future projects. What I seem to understand here is that the Selenium crowd is not familiar with Redis and this may be an intimidating dependency. Redis is widely used for very important use cases in Python: Background jobs (RQ, Celery), Caching etc. Maybe that's why there was no frowning when requests-respectful was released: It was already part of most people's stack. Redis is super easy to install and is one of those pieces of software that run great with the default config. I highly recommend at least giving it a try. My big remaining question at the end of all this: Why is rate limiting interesting to Selenium users that don't run it in parallelized environments? My personal use case is that I have say 10,000 RQ jobs that all need to hit the same website with Selenium. The RQ workers are on multiple servers. I want to complete the jobs as fast as possible while respecting the requesting rate I set. Redis was a given for me since I'm using RQ.
Thanks for the feedback! This tutorial is for those who know programming and are new to python and not for completely new programmers. I have updated that in the readme, and the index link works for me, I don't know why it doesn't work for you. This guide would be a little less than useless, plus I do not think that a noob should start learning Python before learning C. Python should never be the first language that _anyone_ learns and it shouldn't be the last language either. I don't know why you are saying that "Noobs don't know better and could easily be fooled in to thinking this is a good way to learn the language", _it is_ a good way to learn the language _after_ you have some programming experience, I think we are doing the noobs a disservice by teaching them Python as a first language.
Personal blog with a reccuring task reminder system for long running tasks. Turns out I forgot how to CRUD, so here I am learning it all over again.
I see it uses gtk, any chance it could work on Windows?
Well you can start by printing the dictionary. It looks like you have a lot more spaces than you intended. Also dont call a dict dict. Call it adict or something. In terms of using the right data structure, it depends. Doubly nested dictionaries are easier, but they take far more RAM. I replaced one of those in my code and got a 5x reduction in memory usage. Then I switched to using float32s instead of float and got another 2x reduction in RAM usage.
Thank you very much! Sorry for posting in the wrong board! 
Well, I would say this post needs much more clarity!!! For example the whole script. :0P
Why shouldn't python be a first language?
Oh did not see that thx!
When someone has a better mastery of their second language(possibly more) than you have of your native one :(.
If I may be blunt, when you say: &gt; Python should never be the first language that anyone learns and it shouldn't be the last language either. I very seriously begin to doubt you are the right person to write a tutorial of this kind. If you could provide any reasoning at all behind this I'd be very interested. There are already good free full books to accomplish the task of learning python as a +n language, like http://www.diveintopython3.net/ (amongst many others.) &gt; I don't know why you are saying that [...] it is a good way to learn the language after you have some programming experience [...] How? You don't give any comparisons to general programming terms and quantify them in terms of python etc. For example: &gt; Lists store multiple values in Python. Lists allow you to store values of any data type. Lists also allow duplicates &gt; You can access elements of the list by using indices, 0,1,2,3. Indices always start with a 0 in Python. python also allows you negative indices, in that case, the values are returned in reverse order. Not only are there a pile of basic grammatical and mechanical errors, but you don't talk about what type of lists they are, their likeness / disparity with arrays etc. You telling me that this isn't really for noobs seems like an after-thought rationalisation. This isn't useful for a programmer either. I know I'm being very harsh here, but I spend a *great* deal of time helping and teach new people of all ages, and just generally have a good amount of experience and success teaching people to code. I could not and would not recommend your tutorial to anybody of any experience in its current form. Tale a step back and re-evaluate the approach you're taking, and really very seriously imagine you're talking to someone who doesn't know anything at all as you write. Spend a bunch of time in /r/learnpython and see what the common questions are etc.
Like I said, it depends. How many players do you have? Why do you even have the key `"Eliminations - Average"`? Are you planning on adding something else in another key? What is the data structure of that something else? Are the number of players in the different slots of the things other than `"Eliminations - Average"` different lengths? Also, a CSV isn't a data structure. It's a file format. A CSV has no requirement that all cells in a column/row are the same data type. Efficient CSV parser often do have that requirement. Furthermore, efficient analysis requires that, but if you only have 20k players, it probably doesn't matter.
The closest you are going to find is probably going to be to use the `tkinter` library, which comes as part of 'vanilla' python (on most platforms; some linux distros separate it out as a separate package to be installed). Take a look at tkdocs.org for some pretty decent starter info. An even easier-to-use version (but you need to install the python libraries for it) is [easygui](https://github.com/robertlugg/easygui).
Tkinter comes with the official Python installer and is cross platform so it will work in Windows, Mac, and Linux. I have tutorials on how to use it here http://devdungeon.com/content/gui-programming-python
I really, really recommend MessageBoxW instead... And from you answer isn't 100% obvious that this is Windows only. But it is indeed the easiest way to get MessageBox without other blank window that happens with tkinter.
Thank you! Though it only shows the first letter in the text I chose..? EDIT: Wait, it's Windows only? I might use it, unless I find a crossplatform as that would be prefered.
Thanks, will check it out asap
Thanks, will check it out asap, I would use easygui but I'm trying to make a script in vanilla for this,
Wait, it's Windows only? I might use it, unless I find a crossplatform as that would be prefered.
KeyError means that there is no element stored under that key. Which is not surprising, since your dict is empty at the beginning. `dict[stats[i]][player_name] = nums[i]` means: "look up `stats[i]` and then set `player_name` in that to `nums[i]`. This only works if `dict` already contains a dict stored under `stats[i]`. There are multiple ways to do this, like using [defaultdict](https://docs.python.org/3.5/library/collections.html#collections.defaultdict) by initialising your dict like `my_dict = collections.defaultdict(dict)` (overwriting the dict name is a bad idea, as you see here). Another way would be to use [dict's setdefault method](https://docs.python.org/3.6/library/stdtypes.html#dict.setdefault), like this: dict.setdefault(stats[i], {})[player_name] = nums[i]
To be fair my pronunciation is pretty awful. Besides that aren't programming languages potential second languages as well? :)
This is fantastic, nice job. I am already using it on my Debian workstation. Cloned the git repo Going to dive in tonight and have some run reading your code.
/r/learnpython
What type of object is 'picture'? 
But of course it already strawberry (but I hate vanilla anyway) Python. Maybe someone could find TkInter version of this but I am not sure.
Well you have `www.` in some URLs and not others - you're also saying it's "letters only" but you want to match "alphanumerics" so it's not entirely clear what the format is but this may help you &gt;&gt;&gt; print(data) check this out: (https://www.example.com/blah) its really great this is my comment https://www.example.com/blah its really great like this https://example.com/randomwordsherelikethisalwaysonlyletters or this https://example.com/accountnameorsomething/randomwordsherelikethisalwaysonlyletters example comment with slashes //////////////https://example.com/randomwordshere/////////////// &gt;&gt;&gt; print(json.dumps(re.findall(r'https?://(?:www\.)?example\.com(?:/\w+)+', data), indent=4)) [ "https://www.example.com/blah", "https://www.example.com/blah", "https://example.com/randomwordsherelikethisalwaysonlyletters", "https://example.com/accountnameorsomething/randomwordsherelikethisalwaysonlyletters", "https://example.com/randomwordshere" ] `json.dumps()` is just here to "pretty-print" the resulting list.
/r/learnpython
Not me personally but I'd suggest that it's time and hence money for the vast majority of people.
I don't build anything. It comes with an installer or I'm not interested.
Hey, I did a similar thing for Winamp some time ago :) https://github.com/asdfMaciej/Winamp-tekstowo - link if you want to check it out 
It basically *is* vanilla python / tkinter, but with a more user-friendly interface for simple tasks.
Not for Windows? Into the trash it goes.
 type(g) returns &gt; numpy.ndarray imported using scipy.misc.imread
I know it works, but the syntax is strange to me, because it says if name != Joe, then say Hello Joe, so its a little confusing to understand why it says if name != Joe instead of "if name == Joe"
name == joe might be confusing to someone new at this or if name!= joe would be confusing? i just don't get how the code makes sense when it's using != in this scenario.
&gt; why it says if name != Joe instead of "if name == Joe" So you learn the difference between `continue` and `break`, its just a tutorial.
You just need that one sentence to understyand it: The continue statement, continues with the next iteration of the loop. Bascially, it means go back to the start of the loop. 
So "continue" means that if the name doesn't equal Joe, it will go back to the beginning of the loop? A little confusing because the word "continue" usually implies continue as in proceed but in this context, it's actually restarting the loop...
`pip3` or `python3 -m pip` should work. `python` is (almost always) the system python, so you want to use the `python3 --version` command.
thanks
This is kind of why I still use and write 2.7. Most of my code is for my use only but needs to run on systems I don't administer and some of them don't have 3. It's kind of a pain...
I would say it's only about 70% obvious...
It's not guaranteed to be installed globally. E.g. I am on Arch: pc:~ python --version Python 3.6.0 pc:~ python -m pip --version /usr/bin/python: No module named pip pc:~ python -m venv env pc:~ env/bin/pip --version pip 9.0.1 from /home/mark/env/lib/python3.6/site-packages (python 3.6) 
Thanks for spamming all of the programming subreddits, trying to get clicks to your site.
You only need pip installed as a global command it you want to install 3rd party packages globally - which you should never do. 3rd party packages and thus pip should only be installed in a virtual environment so this is how you should be using pip and this will always work in recent python 3: python3 -m venv env env/bin/pip install &lt;whatever&gt;
That's a very specific request. Most ML libraries work almost identically between Python 2 and 3, so there shouldn't be any difficulty using code from a Python 2 book in a Python 3 interpreter, although I suspect some of the more niche Systems Bio libraries might only support Python 2 (and others only 3) since they are often written by a researcher for their needs and not regularly updated. Also, most Systems Biology books are going to be language agnostic with algorithms written in pseudocode. 
I wrote the PyMsgBox module to use the standard library's tikinter to create JavaScript style alert()/confirm()/prompt() dialogs. It works on Windows/Mac/Linux and Python 2 &amp; 3. Install it with `pip install pymsgbox` Code is here: https://github.com/asweigart/pymsgbox Documentation is here: https://pymsgbox.readthedocs.io/en/latest/ Example: &gt;&gt;&gt; alert('Hello!') &gt;&gt;&gt; alert(text='Hello!', title='Greeting', button='Howdy to you too')` It also has an optional timeout to close the dialog if it doesn't receive a response: &gt;&gt;&gt; alert('Hello!', timeout=5000) # closes after 5 seconds
If Mac uses DBus and you have GTK installed it might work. That's a big if
What does the -m mean? Also, why only install global packages in a virtual environment? You can always uninstall global packages...
Thanks! Yeah figured out it was pip3. Such a noob problem but I guess that's how you learn. 
&gt; it simply provides a false sense of security. I don't see any dichotomy, Sure, my original comment was a bit tongue-in-cheek, but in my experience, on extremely large code bases, it's a real liberation from trivial mistakes that could creep in. For small to medium code bases, or as a prototyping tool, I use dynamic languages a lot. However, for very large code bases, I would never trade in a strongly-typed static language because I can focus on the real problem and let the type system catch silly little errors that I could have made.
Well - like your title says, it's being respectful. Also, rate limiting is important for single / personal machine users since getting banned / blackholed for DDoS like behaviour is a bigger deal than for someone on AWS.
See `man python` for -m. Your 3rd party packages may replace or upgrade the packages or versions that your system requires so you may break system functions (that's why it requires root permission). There are other reasons and issues which I won't go in to here.
The version of pip, python and openssl are probably relevant. There have been bugs. Updating one/all of those blindly may help, but checking their versions is probably a good idea. The failure message from pip when executed with the trusted hosts option is missing. Whether or not it appears to differ from the earlier one, it's a good idea to provide exact error messages. Or there could be something wrong with the CA certificates your OS provides. You didn't state the OS, nor their location. Usually they're somewhere like /etc/ssl/certs/ca-certificates.crt or similar. It's worth verifying whether python is looking for them in a location they exist, they're intact, and they're recent. 
You might consider sending a PM to one of the Arch forum's moderators, Trilby. I believe he's in that field.
Look at the BeautifulSoup documentation. The examples are small and readable. 
This is an awesome project. Good luck. I have some suggestions, but please don't take them the wrong way. My first suggestion, after reading a few sections, is to get a good editor. The second sentence in your introduction is a run-on sentence; and I saw many, many more. In general, the more I see writing mistakes, the less likely I am to continue reading; and I would imagine most readers are that way too. Some of the writing is awkward; that is, it's hard to follow. This isn't always a bad thing if you know your audience. But if this book is for beginners, then I would explain *everything* in simple terms and in easy writing. Beginners will run from dense writing. I don't mean to be overly critical. I know it's hard to hear criticism of your own work; believe me, I'm a programmer/writer and sometimes I get frustrated when my writing partner suggests cutting something that I worked hard on. But I put my pride to the side a realize that it's the best thing for the project. Other than that, I truly enjoyed what I saw. The code was good quality and easy to follow. And although I'm a fan of Python2, I liked that you chose one and stuck with it and backed up your choice with great reasons. Good luck! I hope it's a huge success.
I agree with other commenters. Python is a *great* first language. I am also interested in hearing your reasoning behind this claim.
The things you mention are nuts and bolts details that are unlikely to appear in textbooks, partly because there isn't an accepted systems bio stack in the same way there is a scientific computing stack. You might want to Google around for university lab notes, which might focus on teaching those kind of elementary processes or just reading the docs for those libraries. If you understand the underlying concepts, then you should (assuming the docs are well-written) be able to map the concepts to the library functionality. It's an important skill to have.
Thank you! I'll be sure to do that. I'd never heard of input transformers. Cool stuff.
I assume that it should be possible to call your frozen python app from .NET using pythonnet as long as it is not "onefile" app like in pyinstaller and it can be embedded by using pythonpath and pythonhome environment variables. This is because when you embed CPython, python**.dll is used to initialize the python runtime instead of python.exe. BTW, pythonnet has hooks for both pyinstaller and cx_freeze for freezing pythonnet based apps.
CLI version?
Yeah, the documentation for input transformers is a bit lacking as well. I'm working on one to have top level async/await, and I think the framework was never really finished. Feel free to open any issues if needed, having mypy checking will be great.
Pick up Alan Downey's Think Python Series. Free on Green Tea Press or you can buy it. He has a follow up called Think Statistics and another called Think Bayes. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Yes, I have that as an action item.
I replied to the comment above yours, and I might be wrong okay that python shouldn't be the first language so don't downvote me to oblivion, downvoting is for comments which are not helping in conversations and not for wrong thinking. I have to wait 4min before commenting because of heavy downvoting for my previous comments :D
Is this useful? It has a statistical inference section. I'm not sure how much in depth you are looking for. https://github.com/donnemartin/data-science-ipython-notebooks
 for i in range(len(stats)): This is usually considered an anti pattern in Python. When you want to iterate over all of the elements of an iterable object, it's best to just iterate over them directly. for stat in stats: You also use `i` to index `nums`. You could use for i, stat in enumerate(stats): An even better option, though, would be `zip`. for stat, num in zip(stats, nums): dict[stat][player_name] = num 
Thank you. The awkward English might be due to the fact that I am not a native speaker and haven't really reviewed the writing. But I do realize the need is there to read the prose again, I was postponing it for a few days because reading what you wrote blinds you to conformation bias and I want to read the book _after_ a certain time which would make me less blind to the mistakes.
Thanks! I've seen that, and its totally useful on the python end. What I'm trying to focus on is garnering a better understanding of what processes/distributions to use for what and when, using python code rather than mathematical notation. Upon second glance, it looks like there are a few case studies in there, and I'll definitely be using it as a reference.
I think a proper approach may be to learn statistics, then apply those concepts programmatically. I don't know how much learning of statistics you can *learn* ***through*** *Python*. Usually, documentation and tutorials dealing with heavy science/statistics libraries go on the assumption you already know statistics and science. You wouldn't expect to learn number theory by reading the docs for the [math module](https://docs.python.org/3.6/library/math.html), for example. If I'm understanding you correctly, to make a rough analogy... To me it's almost like asking how you can learn calculus by learning to use a graphing calculator. You might be able to tackle some low hanging fruits and do some cool things in a short time of learning how to use the graphing calculator, but it's not going to be able to replace an understanding of mathematics, especially knowing how to apply mathematics to solve real problems. In my own observations, I notice that when a professional combines some domain-specific knowledge with programming, they usually just want the crash-course in programming to do enough to get by. This is a recurring theme for me working with biological scientists. At the heart of things, if they want to write better Python code, they need to learn fundamentals and style, not just a crash-course in numpy/pandas. I see your position as the inverse of this. Trying to apply programming to make gains in domain-specific knowledge. You may get really productive really quick starting out, but that curve flattens out pretty quick and the real way to make gains is by digging into the core of that domain-specific knowledge. That said, I recommend looking at Kahn Academy courses in stats and economics.
thanks for the thoughts. I think that's a good idea to go through some university notes. i've been more comfortable with reading directly from the docs after i started getting into networkx functionality. 
Eh, everything R can do for stats, python can. If you prefer python then there's no point learning R unless your workplace requires you to. Plus python is more useful as a general use scripting tool so you kill two birds with one stone. Edit: ok chill, I've bought the R nerds out. You're right, R is still the language if you're regularly using complex statistical models, no reason they couldn't be built in python, it's just lack of libraries. . OP wanted to learn statistics and programming, if he ever got to that point he would be able to switch to R if necessary. For people using statistics for some occasional use or even to get a leg up on pursuing a career that involves statistics, python is still probably better. And if he ever gets a non-statistics job where he wants to use a bit of his new programming skills, python would be 100 times more useful.
I am trying to work on data in JSON formats currently, the biggest problem I have at the moment is because it is scraped text data it has lots of non utc-8 characters (e.g. è). How can I solve this as at the moment I can't event read the csv with pandas to manipulate? Also the data is way too big to go through manually and find the characters causing it
Thanks, this is a good reason to figure this out. I'm struggling to make sense of Docker (not the concept, but the technicalities and concepts of *linking* container) so this might be a good way to get my feet wet. As for the module itself, have you tried it against Google search results? Have you run into any gotchas? (apart from captcha). Coupled with beautifulsoup is there any major pitfalls in parsing search results? Again, thanks so much for making this available. 
Don't mess with your global python. Friends don't let friends do that. You really don't need to mess with global python when in a single line you can make a virtual environment.
If you use a virtual environment you get to decide which version of python is default in your project.
Add `*.py[co]` to your `.gitignore`
&gt;Latest commit 02c9d57 3 hours ago JS part is outdated already... 
Cheers :D
Possibly, but the data is from the Reddit comments source and I am unsure as to whether any one encoding will be able to handle all the characters used across the website. Ideally I would just remove all non-standard characters and go from there, with so much data I can afford to loose some that cause complications to analysis. I will try a different encoding when I am free later and see if I can at least get it to read first. Thank you
I suggest using Numpy. Create a 2D array (*n* points by *m* dimensions), then: arr = ... center = np.array([[1], [2], [3]]) dist = np.sqrt(np.sum((arr - center) ** 2, axis=1)) # sum along dimensions points = arr[radius - tolerance &lt; dist &lt; radius + tolerance] That's it! (just be careful about the order of dimensions) This will run at native speeds too, so unless you know more about the order of the points or coordinate system you're unlikely to go faster.
I wanted to try ... but unfortunately it doesn't run on python3 !!
Hi, what's the error message? I think the project only depending on Pygame package, have you installed it?. 
You can ask questions in /r/learnpython.
Do you have 3.6 installed. If you go to terminal and type python3.6 what happens?
As well as the already recommended (and great) Think Bayes, Peter Norvig's introductory Python notebook on probability is very good: http://nbviewer.jupyter.org/url/norvig.com/ipython/Probability.ipynb
Created python3 venv and installed pygame. Got the below error: ± |master ?:6 ✗| → python ticky.py Traceback (most recent call last): File "ticky.py", line 278, in &lt;module&gt; main() File "ticky.py", line 227, in main drawBoard(board,msg) File "ticky.py", line 162, in drawBoard for tilex in xrange(3): NameError: name 'xrange' is not defined 
Hi, I have fixed it, you can clone and try again now~
Either one can be used to develop back end architecture, but if you want a two for one go for Python. I'd recommend checking out [Django](https://www.djangoproject.com/) or [Flask](http://flask.pocoo.org/) for server side work. As far as data science goes I am a little less adapt to point you towards a package to use but I have heard good things about [numpy](http://www.numpy.org/). It seems to have a wide application and is well documented so it could be a good place to start. 
Thank you very much
Additionally, if you are looking for a resource to learn Python in the first place I'd suggest checking out [Automate The Boring Stuff](http://automatetheboringstuff.com/). It's a pretty exhaustive introduction to the language but if you're looking for a place to learn the ins and outs of Python this is a great place to get a foundation.
DataCamp
What is the use case for this? Seems a bit of a low level concern.
I have not, no. But when you do post here!
My pleasure! 
Good to hear! Thanks for the feedback.
It was always open source and hosted on bitbucket. But now that author is part of our team, we thought it would make more sense to have it on oracle's github. But thanks for expressing your interest in seeing _more_ content hosted specifically on GitHub... :P
I want to test if my HTTP proxy server acts well. But requests library does not allow me to inspect the exact HTTP responses in the mentioned case.
I don't think there's a pure Python implementation of this. The most convenient ones are probably the *zbar* wrappers. You'll have to do some legwork yourself. Just [search PyPI for zbar](https://pypi.python.org/pypi?%3Aaction=search&amp;term=zbar&amp;submit=search) and pick one that's actively maintained or at least has a recent release, some even ship with a pre-built zbar binary which is convenient but can be a security risk because vendored software is usually not updated as quickly as upstream if at all.
How does it not? Split the header sting and parse it
Very useful tutorial!! Thanks for sharing. 
Apologies for the easy snark.
Sidebar. 
It would help if you told us what you expected it to do vs what it actually does, or what version of python you're running this on, and I don't see where you define height, so is there more code to this example than what you've put here?. And you've used the global keyword more in that toy piece of code than I have in several years of writing python. It's horrendous practice. Fix it. 
 the only winning move is not to play
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
[Pyflame](https://github.com/uber/pyflame) is my new favorite profiler and I can't recommend it highly enough. It's especially great for profiling long-running processes (like web services), because you can start your daemon in normal way, let it warm up, attach profiler using process PID and throw requests at your service.
Edit: This is better suited for /r/learnpython, didn't realize where i was reading this Its bad practice to loop with the same variable (i in your case) in both the outer and inner loop. The inner loop is overwriting the value set by the outer loop. The way you designed your algorithm you actually don't care about the value set in your outer loop, you just want it to run that many times, but using the same variable makes it confusing to read. In cases like this, where you don't need to keep track of your current value, you just want to loop a certain number of times, you can use: for _ in range(horizonLines): Alternatively, and I think preferably, you use two different variables: for i in range(horizonLines): for j in range(verticalLines): and use both i and j (rather than i and n) to set the position of your rectangle.
Python has a mind boggling amount of data science packages. Numpy, Scipy and Pandas to work with matrices and dataframes; Seaborn, Bokeh for advanced visualization; Dask for optimized parallel computing (broadly speaking); hell, for every use case there's a package, like TensorFlow (use case: fucking magic). Zero idea about JavaScript's state of things though. I'm very biased.
What are you trying to accomplish?
The only way it can be unbeatable is if it always starts first :-P 
No, you can always force a tic-tac-toe draw.
Nice. I was just looking into this the other day. I based my project on Bottle instead of Flask since I wanted to super-simple approach, but generally, it is pretty easy to use a Flask guide to do it in Bottle. I will look into adding this to my project! The only thing that I am unsure about is that with the default "select file" forms, my iPhone (and presumably Android too?) will allow me to select from my photo library. I guess I should play around.
I've been learning Python, at least trying to. Thank you for adding to the resources available!
Thanks for checking it out. I hope you will find them useful
Cool so its def installed, do what 231elizabeth says and that should work.
Is a virtual environment the same as IDLE? 
I just the chapter about tictactoe on Automate the boring stuff in Python. Interesting, will need to have a closer look at the code, still a newbie.
Thanks! Have both Ebooks and look forward to working through the online course
Nice blog and interesting writings, thanks for sharing.
Can't really help but I upvote for norsk!
You should cross post to /r/learnpython 
If you can write faster code in the same amount of time by using another language, then I'm very proud of you and I suggest you use that other language exclusively. For the rest of us, fast modern computers mean that python code takes 30 minutes to write and 10 minutes to run, while other languages take half a day to write and 8 minutes to run. In other words a significant amount of saved time. Especially in dynamic fields where code is modified often. 
Good point. [Done](https://www.reddit.com/r/learnpython/comments/60hdd5/python_101_online_course_is_free_for_48_hours/)
I see Pixiedust as a *gateway drug* to learning the inner workings of Spark data science and visualization. Use Pixiedust to bang out some quick, basic visualizations, get hooked and want to do more, then spend time in the docs learning how to do more custom work.
Thank you so much for this!
It isn't coming up as an option for the interpreter: http://imgur.com/a/RNf7t
oh sweet - I forgot I had one but not two yet. I need to get on this! Thanks for what you do!
You are awesome 
something to watch: http://pyvideo.org/pycon-us-2012/stop-writing-classes.html
What is an RPC, I've been seeing this a lot lately. 
Classes are largely overused in Python. It's very possible and, in most cases, preferable.
[Remote Procedure Call](https://en.wikipedia.org/wiki/Remote_procedure_call). Calling methods/functions on remote/networked machines. Networking at the programming level.
Technically, yes. It means you'll die in 48 hours
I knew Deep Learning would soon crack this one!
Thanks ! 
Great! Let me know if you have any questions.
Yes, that is what that means. 
Try /r/learnpython Post the code you are using and any errors you are getting. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
To be more specific. Machine A is running Ubuntu and Machine B is running windows 7. I'd like to remotely launch foo.py on the windows machine and have it send data back to bar.py on the Ubuntu machine.
Heres a screenshot of my code http://i.imgur.com/BWuB8Zn.png
1. You're looking for r/learnpython. 2. As a mod there, we would remove this post as-is. You've got some code written, but say there's an error; what is it? We're not going to do your homework for you, but we *will* help you figure out how to do it yourself. 3. https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F
+1 for modding like a boss.
You're looking for r/learnpython. When you post there, please include your code and the error you got.
that makes sense, thanks.
You sir, you are a good man ! I hope you encounter a pleasant surprise today !
It is possible. However classes are simply the right abstraction for certain thing, so you will be making your life unnecessarily difficult by dogmatically avoiding them. More importantly you should still know how classes in python works so that you can understand and interface with other people's code/libraries effectively.
Two things, first: post on /r/learnpython, second, what have you tried?
Try /r/learnpython, but be sure to include the work you have tried. They will help you with your code, but not write code for you.Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
OOM killer maybe?
I believe the reason code of 9 refers to launchd force killing a process in order to free up memory for the kernel. You'd want to confirm this by observing the memory consumed during execution though. Without getting any of your code, this is really hard to pinpoint. Is there something you could do, like implementing generators, to decrease the memory footprint?
Glad to hear it. Let me know if you have any questions.
I suspect there are too many people who use throwaway email accounts for that to work. But I kind of like the idea.
Damn, during finals week :(
Want to try to run a dynamic math plot inside a Tkinter GUI window, reading sensor data from an Arduino. Lots to learn, any help welcome.
No. I wrote the book that this is based on in 2014 around Python 3.5. However for the 2nd course, I did add in some information on asyncio. I have been looking at Python 101 for a while now and thinking that I will need to update it though. That's one more thing to add to the list. Good luck with mastering Python!
Awesome! This will give the motivation to start doing something toward learning Python instead of just thinking about it. Thanks Michael. 
Oh, didn't realize it was lifetime access, neat! How do I know if it has been 'added'? I am able to click on starting the course (and can see the content), but my profile is literally empty. Not sure if it's supposed to show something there or not to indicate I have access.
I actually don't know as I haven't bought a course from Educative yet. Hopefully u/fahimulhaq can shed some light on that
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Legitimately not sure if you're trying to make money or make sure everyone interested can learn for free. Thanks, again, for free content.
It looks inconsistence for me to add f-strings to 3.5 version. But, anyway, good news.
It was done because it's not so hard to do and f-strings are very useful
Thanks a bunch. I'm looking forward to trying this is, once I've gotten past 'More Python Programming For the Absolutely Beginner'.
Since I've been dying to try out PyPy, are there any gotchas coming from CPython or should I be able to just change my interpreter and reap the benefits? Let's assume I'm not relying on any quirks of CPython (numbers preallocated, etc). In particular I'm wondering about gunicorn, asyncio/uvloop and lxml support. 
In the future, you should paste your code to a pastebin site like pastebin.com or gist.github.com and then pos the link. Posting your code to forums (like Reddit) or in emails can mangle the formatting, like it's done here. This makes it much harder for people to read your code and help you. Also, tell people you are using Pygame, since most Python programmers aren't familiar with it and won't know what these functions are.
I am not an expert by any means, but for me, it was just a matter of making the change and running the test suite. Of course, this only worked for my codes that had a test suite. And, I am the primary user of my codes so it was low risk. There are certainly some edge cases that even my test suite missed (at the time, Now the test suite detects them). It was mostly around the `os` module and some platform specific functions
uvloop require some work in cpyext and cython(but asyncio is fast without it), gunicorn will work, and lxml - maybe, but you will need to compile it from source
How are you communicating with the Robinhood app and your (or a user) account? To the best of my knowledge they don't offer an API or anything. I've been trying to do a personal automated trading strategy and would love to use Robinhood but I couldn't see how that was possible. Cheers!
I saw you Book "Python 201" a couple of months ago. This convinced me to buy it and start studying it!
Yes, this is for Python 3
Timelines for Part 3 and 4 of this series? Web API is a definite interest here!
Awesome! I'm glad you liked it!
thanks, hopping to get this working by the end of april. Upgrading the server that takes requests.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
[removed]
Thank you!
Both pandas and sklearn seam to use the BSD 3-clause "New" or "Revised" License, which is permissive. &gt; A permissive license similar to the BSD 2-Clause License, but with a 3rd clause that prohibits others from using the name of the project or its contributors to promote derived products without written consent. http://pandas.pydata.org/pandas-docs/stable/overview.html#license https://github.com/scikit-learn/scikit-learn/blob/master/COPYING 
Thank you! I'm looking forward to getting started.
I think you can get it for $0 to try it out, then go back later and buy it again for what you feel it's worth.
same here! i think its a great guide :-)
First, using the C library is going to probably end up being faster. Scipy will presumably be doing vectorized operations on the matrices which can offer some pretty mind boggling speedups. With that being said, it should be possible to persist the pre-calculated values, whether you're using scipy or pure python code. What is an array? it's a sequence (list) of sequences (list) (roughly speaking; there's under the hood optimizations but in terms of the 'box' the data is stored it, it works like a list of lists). Given that, now you can ask "how can I store multi-dimensional sequences of integers?" The most basic-bitch answer is "Serialize a list of lists of ints to JSON". Since you only need to compute them once, you can store them statically and save that computation effort. You could also look at using a database of some sort, YAML, `pickle`, protobufs, flatbuffers, or if you want to get SUPER fancy hdf5. In short, there's a lot of options because "how do I save a bunch of integers to my hard drive" is a relatively simple question. The finer details come out in questions like "How do you intend to use this data once it's persisted to disk?" Are you going to consume each pre-calculated value only once? Are you going to access the elements of this data set in a pre-defined order or will it be random access?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Use tqdm.
Thank you very much for being kind and generous.
Thanks for checking it out. I hope you like the course.
I would like to replace a full time job but I suspect that won't happen any time soon. I'm in it for the long haul so even if it's just supplemental income that's okay too
Can you not just do: pip install pyqt5 I just created a new python environment with py3.6, and tested installing pyqt5 via pip. I am on OS X and this works perfectly for me. No need for homebrew. I can import PyQt5, and do things like from PyQt5 import QtWidgets, QtCore edit: Make sure when you do this that the 'pip' executable you are using is the one associated with your correct python installation (i.e. your python3.6 and not the system python installation)
Mainly because they are by big players (Mozilla and Google) that are relevant to the area's I'm interested in. Go is good for fast webservers and is really nice to compile directly to binary for any platform no issue. Rust is just a nicer language IMO so I am more interested in it even if it's not going to take off as fast. 
Any way for this (or others that might exist) to use [RAML](http://raml.org/)? 
It will be interesting to see the patreon. Make sure to let me know when you do it.
Let me know if you solve this problem. I am working on a similar project at the moment. If you have some free time, this maybe worth a read. I am almost certain the answer lies somewhere within this [page](https://docs.python.org/3/howto/unicode.html#the-unicode-type). I haven't had time to troubleshoot my problem any further. Best of luck, and if you can, keep me in the loop!
PySide is only Qt4 and up to Python 3.4, now PySide2 is in development for Qt5 and Python 3.5+. Developing Pyside for 3.5+ was deemed not worth it since Qt4 will be obsolete soon enough and 3.5 introduces done additional challenges for compiling everything I think.
I may be way off being a Windows user, but perhaps these are problems that using Anaconda could solve?
And I'm not familiar with matrices or vectors. Embarrassing but true. I'm not entirely sure if I can offer any insight for something that specific. With that being said...if you can express the math you're trying to do (`N choose 2`?) as scipy methods like below, you should be good. Those methods are defined to operate on matrix values, and they're written in C and optimized for vector operations etc etc etc. If you can break down your transformations/maths into these scipy methods you should be able to drop in more-or-less arbitrary matrices. def do_stuff(m): return scipy.whatever(scipy.other_thing(scipy.process_somehow(m))) 
Ha, you're way off here. You might like to learn about numpy.
Right, the JSON payload is only for on-disk storage. Deserialize it to an actual Array and do your vector stuff.
Yes, tqdm is a great package!
Migration is required: .url is not deprecated from now and .url_obj deprecated, several types and exception hierarchy changed.
If you want to do resource management, you should be wrapping your code in a context manager even with regular CPython.
They already have the data. It sounded like you were talking about caching computed values, but there's no way to use precomputed values in a vectorized operation.
Context managers break in the exact same way as the finally I showed there. And in cpython the `__del__` is guaranteed to run, even when it falls back to the gc.
Did you try it? The `with` statement should call the context manager's `__exit__` method.
Yes, I did try it. This breakage is even documented, and they stated that they won't fix it, and tell you to manually wrap every generator in a try: finally: block explicitly closing it, which is a major semantic breakage from cpython. But of course, if you need to do heavy computation in python and won't be needing to manage resources, this is not an issue, but it's still a difference that you should keep in mind if you plan to use pypy. % cat demo.py class Context: def __enter__(self): return self def __exit__(self, *args): print('World!') def gen(): with Context(): yield 'Hello, ' if __name__ == '__main__': for line in gen(): print(line) break % python demo.py Hello, World! % pypy3 demo.py Hello, % 
Yeah, I still don't fully understand the problem space. The original question sounded like trying to precompute values. It was a dead end, I just don't feel like amending or removing the posts.
GPL isn't a problem either if you provide source code to your buyers (and only to them). Open-source doesn't forbid selling. The only issue is that you can not tell your buyers to not share the code. They bought it — they are free to pass it further 
&gt; Bayesian Methods for Hackers This is an excellent resource, and the library it introduces is just fantastic. I get the sense that people see Bayesian statistics as complex and scary, but I find it to be much more intuitive than frequentist statistics. With a general-purpose sampling library like PyMc3, you can (mostly) ignore inference and just think about the causal relationships in your data. The only downside is that it's slower than frequentist methods. (But for that little bit of extra time, you get logical coherence!) https://pymc-devs.github.io/pymc3/index.html
I know this is very subjective, but I do think the "Start building" should come right at the top. Firstly, because I feel that you learn better when you are actually building something, hands-on, at least in web-dev. Secondly, because I don't think anyone is ever going to be able to cover all branches (even for a single language) and then start building something in a reasonable amount of time (such that interest is maintained). I'd submit a PR, but I still think this is a matter of opinion and may vary from person to person. Edit: Typo
&gt;from which it [scipy] calculates the euclidean distance between every possible distinct pairing of the 10000 vectors. &gt;I was trying ... to pre-compute the combination of vectors I think something is missing here. Scipy calculates all the combinations, right? So why are you trying to do that? And is it 10000x1024 coordinate pairs? Or 10000 vectors of 1024 dimensions? Itertools is definitely not the right tool here. You should not be iterating over anything. You give scipy one big array and it does everything.
In pypy, yes. In Python the finally/`__exit__`/`__del__` are always guaranteed to run. You don't need to obfuscate the code wrapping it in another context manager. PS. There's one way to break generators behavior in cpython, which is using them alongside gevent coroutines, but that's another story.
By the way, you can try PyPy, it can help you with speed (it's JUST implementation of Python)
Thanks! Commenting both to say thanks, and to bookmark the coupon code if I'm able to conquer this and need the second course :)
[vprof](https://github.com/nvdv/vprof) is also very nice
Can this work with Google App engine datastore models? 
Is signup free for the 48 hours or access to it is free for 48 hours (e.g., I signed up for the course, do I only have 48 hours to go through the material before it will charge me to continue with this course)? Sorry for this seemingly stupid question but the language on the site is not clear.
Which potus are you?
RemindMe! 3 hours
I will be messaging you on [**2017-03-21 11:59:31 UTC**](http://www.wolframalpha.com/input/?i=2017-03-21 11:59:31 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/60gdde/python_101_online_course_is_free_for_48_hours/df7kd3n) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/60gdde/python_101_online_course_is_free_for_48_hours/df7kd3n]%0A%0ARemindMe! 3 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! df7kdc0) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
GPL is absolutely a problem, because there's a very unclear line between what "linked code" means. For those that don't know, The GPL does not allow linking against code that isn't compatible with the GPL. What exactly "linking" means is completely unclear, but importing a GPL library in your proprietary python app is probably considered linking. Don't get me wrong, I love the GPL, but there's a reason lawyers recommend avoiding it like the plague in proprietary software. Also why you almost never see libraries released under the GPL. They'd be basically useless unless your program is GPL itself. Don't use GPLed code in your proprietary software!! In the best case scenario, you'll have to stop using the GPLed library / code in the future. In the worst case, you'll be basically forced to release your proprietary code under the GPL in order to avoid license violation damages!
You're implying that op is going to hide source code from the buyers. If that is not the case I don't see any issues. Not to mention that python applications are distributed with their source codes in majority of cases. GPL is a problem for classical "shareware" and "boxed software" models. It is usually not an issue when software is developed for a specific client 
Try /r/learnpython
Try to implement a recommendation engine to suggest your next book to read...
It may be inconsistent, but I'll bet more than 80% (probably over 90%) of the cases where an app needs 3.6 (not 3.5) will be satisfied by this one addition, so it was a good decision.
No problem at all. I'm on a trip to germany this week, the next week you should message me again so can schedule that.
Please let the pypy team know how it goes, we like success stories as well as issue reports
Did you get a measurable speed boost?
Or maybe I should make some kind of AMA bout crossbar if you wish for reddit. I wrote several tutorials on it, have done paid work for the team behind it in the past so I can answer a lot of questions about it. It won't be like having Tobias himself, but I can give you the "web dev" point of view. He is more obsessed with IoT :)
Note that pypy now supports installing vanilla upstream numpy via pip install, assuming you have the build dependencies and a compiler.
You really need to move documentation to readthedocs (and write it). It's very hard to read something without search and navigation. Also, it will be very handful to have asyncio integration.
For several great data science posts with Python, I suggest http://learndatasci.com. In particular, there is great walk through of essential stats and python here: http://www.learndatasci.com/data-science-statistics-using-python/
Excellent choice with lots of practical info. I found it very helpful when I was first getting into Python.
 from tqdm import tqdm_notebook for a notebook styled progress bar
I'll be in Berlin unfortunatly. I heard great things about the munich industry. PM me with your skype username so I can add you.
Off the top of my head I can offer you two options. 1) you process these in Linux, this can be tedious, and not so straightforward especially if you are not familiar with sed or awk 2) you get yourself an EC2 spot instance. They cost less than $1 an hour most of the time and if you are a student and have a valid student email then you get $50 in credit I believe. Since you have expressed interest in using Pandas for this data set that means you will need to load that 7GB file in to memory. Look in to R4.xlarge and R4.2xlarge instances. Both are relatively cheap and offer 30GB RAM and 60GB RAM respectively. If you plan to do a lot of manipulation and extra additions and what not you might run out of 30GB pretty quickly, but then again that's your call since you know the data and your task well. 
&gt; It looks inconsistence for me to add f-strings to 3.5 version. But, anyway, good news. PyPy also had all of the internal dict changes that happened in 3.6 present before this release as well.
Actually test suites run longer on PyPy, because PyPy's AST parser is slower, than CPython's, and test cases are executed only once (and there's many of them)
The disconnect here - and what is confusing people - is when you say you need 8,000 distinct matrices. The result of all pairwise distances of your data will create a vector of length (10,000*9,999)/2. I think you've way over-engineered this problem in your head. As you've already discovered, `scipy.spatial.distance.pdist` is the gold standard here; it's fast, has several useful distance functions pre-built in tightly-embedded C (i.e. there's virtually no overhead to calling those functions), and you can pass an arbitrary distance function if you like - possibly even using the new low-level interface to avoid function call overhead. But euclidean distance is built-in, so no worries there. Once you have you result from `pdist`, you should should just re-shape your result or construct views into it. If you've wrapped your head around how NumPy ravels multi-dimensional vectors, you can index directly into the vector to get the elements of your distance matrices. Or, you could use [scipy.spatial.distance.squareform](https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.spatial.distance.squareform.html) to build a square matrix, and index that way. But this notion of points and deferred loading isn't Pythonic. 
dict changes is implementation detail, this differs from f-strings.
Thanks so much! That's so nice to hear.
You'll do great! Let me know if you have any questions
Great, thanks for the clarification and I've made it through the first bit and am really enjoying it. Thanks for making it available.
Yes - it was about 3x faster than cpython. This is in massive ingest/etl applications - heavy on io, tons of simple string, datetime, simple math operations.
I'll page u/fahimulhaq for that question, although I'm pretty sure you can access the website from multiple devices simultaneously. You can also always get the eBook version (PDF, mobi and epub) for free too: https://leanpub.com/python_101/
Not really. Fridays don't get as much as traffic and I've noticed that my blog traffic on the weekend is half what it is on the week days.
It goes much further than that. If you ever re-use any of your own code, which we all do from time to time, and you accidentally leak that into code that links to GPL code, than effectively your own code is now GPL. That technically means that *all* the code that uses that code is now potentially GPL as well. The GPL is huge problem whenever writing non-GPL source code. The implications of using GPL code in commercial and Non-GPL code are difficult to accurately asses without the aid of an IP lawyer and are therefor better avoided. Besides, there are almost always great alternatives licensed under better terms (BSD, MIT, etc. Take it from someone with 20+ years of experience in software licensing terms, it's not worth the hassle. Don't mix GPL and non-GPL code.
You are correct, I don't work for them. But u/fahimulhaq does. Hopefully he can help you out.
This is not reason it doesn't work. But i don't know if SQLAlchemy can manage Google App engine datastore models. If not you have to create your own data layer
Looks nice! Does it have a vim emulator? 
Hello. Not currently and we have no plan for this.
It's not a problem if it is your code which is GPL licensed. Author is allowed to relicense the code as many times as she needs. And it is not a question of "linking". The proper term is "derivative work" and it is strictly defined. Additional aspect is, that GPL doesn't kick in until program is distributed. Only receivers of software are entitled to get source code. I have my own share of code licensed under both MIT and GPL. I kinda know what I'm taking about too. GPL has it's issues, but it is definitely not that frightening. GPL is about giving users of your software right to get code maintenance and updates from other vendors. It allows to avoid vendor lock-in.
Thanks! I hope you like it.
No, you actually can make wheels for PyPy at PyPI, but almost nobody does that :(
Yes (by virtue of using the editor component from KATE). `Edit -&gt; Input Modes -&gt; vimode`, or `Editor -&gt; Editing -&gt; Default input mode` in the settings. It's not perfect yet, but it works.
It's fine with NumPy, but I don't know about OpenCV
vi-vi-vi \n/
Neat. And here I thought it was just a C++ IDE
It's quite extensible. Also supported: * C, Objective-C, OpenCL ^([new!]) * PHP * Javascript Someone's looking to do Rust as a GSoC. [KDev-Ruby](https://cgit.kde.org/kdev-ruby.git/log/) is in need of an active maintainer - it compiles and pretty-much-works, but no-one on the current team actually uses Ruby. Anyone interested, ask on the mailinglist or in #kdevelop on freenode IRC!
I would never advocate being on python 3.6 right now. Packages don't test against future releases, so there is a scramble to fix things when new versions of python come out. Now of course, you can't fix your package because you have some dependency. Then it has to get into the release cycle, so it can gel. That way you dont claim to support python 3.6 and then find something else wrong. Python 3.5 is the popular Python 3. I'm an open source library developer. I just write compatible code using six at my python 2.7 company. I can't use mypy (stub files are not a good solution), but oh well. `print('x=%s' % x)` and `5//2` work in python 2 and 3 without future imports. The `open` function is found in the `codecs` module. Start there. 
That's never worked for me on a codebase that isn't incredibly trivial. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Python 2.7 isn't going to disappear in 3 years time. I strongly expect the EOL date to be pushed back again, simply because there are thousands of firms like yours, who have invested in Python 2.7 and can't afford to migrate. And even if the EOL date doesn't get pushed, you can migrate your code in 2020, instead of today. If your existing codebase works, and you don't need the functionality that comes with 3, then why would you waste effort on something with no business value/
When does time ever permit such things? There is always new value to be created and backlogs to be cleared.
As I already said, you're describing issues that only exist in pypy, not in python. Generators have coroutine semantics in python, they're not just iterators. That's why you define them as functions. The finally block is supposed to ALWAYS run as the block finishes executing, which happens right after the for loop ends in the iterating case. Thankfully python doesn't rely on the garbage collector for doing scope management, which pypy does, and is what I'm saying is broken.
Still, I'd like to know if OP tried it. I've used it on a sizable lib before. 
The bit about fiddling with package.json, getting impatient with npm, etc. really triggered me. 
https://www.reddit.com/r/Python/comments/5waim7/python_competitiontasksprojects/de8yij3/
Is there any way to share the warmups between runs? 
Good article, I enjoyed it.
My py? What about pep 484 for typing?
Maybe this will get downvoted, but I am legitimately curious: is there a benefit to using this over PyCharm? 
In my mind the biggest (maybe only?) would be that you can work in one tool across multiple languages. I would think it would save time in learning how to do things. And it's an easier install if you are on most Linux distros. Personally I already have to use more than one IDE anyway so I've got PyCharm and KDevelop both installed on my machine and I'll probably always go to PyCharm for Python stuff. If I made money off my Python work I'd be using the commercial version of PyCharm probably so I'd be even less likely to use Kdevelop for that. I had always hoped Netbeans would become a one stop shop for me that way but it didn't pan out. I still do my PHP work in it.
Technically speaking, I'm sure that PyCharm is a better product. One benefit that KDevelop has is that it does not cost over $100 per year to use. There are also a lot of people who prefer to use FOSS.
thanks man! ill def. check it out
I definitely recommend 6.00.2x. You'll get a good basic feel of data science and the class ends with a brief intro do ML. After taking that class and learning some pandas on the side, you'll be able to make sense of scikit-learn and other tools with just a bit of work. 
It's not written in Java/Python.
Thanks for the answer. Also, after finishing the course should I go into ML or web scraping first?