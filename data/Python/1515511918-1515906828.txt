I mean like I would like to use the language in its purity without any frameworks or libraries. I might not use python now as I will use something such as c which i think is as pure as you can get.
I mean like I would like to use the language in its purity without any frameworks or libraries. I might not use python now as I will use something such as c which i think is as pure as you can get.
Two games. One with a team mate that will be fairly large in scope, the other a personal side project that I hack on from time to time. 
also whats the point if using python if i can just use c?
Speed of development. Safety. Ecosystem. Lots of other things, really. To flip your question: what's the point of using C if you can just use Python?
It is "JS stuff". The JS community is somewhat famous for rewriting everything in JS, including things that didn't really require rewriting in the first place.
So, computers? Programming? What exactly?
This is the only reference I found: https://github.com/pandas-dev/pandas/issues/2608
it can be anything, my thoughts so far is medical surgery. Like robots who assist doctor, and make precise surgery. Or automate some works, but i need more ideas. So if anyone could add more ideas i would be very thankful! 
Use Kivy, it will save you alot of heartache
Provide some examples if you could? Keep up the good work tho!
I'm not sure why this is in the Python subreddit then. If you want to talk about technology in general, you should probably post in /r/technology.
Thank you for your response. After importing the module into Python 3.6.1rc Shell and typing in "scrambler.py --unscramble &lt;'C:\\....'&gt;, it does not work. Am I doing something wrong? 
&gt; globals are bad, and a strong code smell. ... terrible feature ... I disagree. I use globals all the time to share global state between code. If Python had dynamic variables, I'd use them too. In a way, Java classes themselves are globals. Sacrilege, I know. EDIT: By the way, are you going to yield the point and agree with me that Java does not have globals?
thank you, sir! But, however, if anyone got some idea, please share!!
I was just wondering if it would be possible to do without a libraryvor framework because incase i had no internet to download new stuff and didnt know c or have things such as tkinter.
Tkinter is part of the standard Python install. If you have Python, you have Tkinter.
WASM
yes but tkinter wasnt written in python if I wanted to could i make something like tkinter with just python which i am guessing is a no
&gt; After importing the module into Python 3.6.1rc Shell and typing in That is a script, not a module. You are supposed to call the file from the commandline, not from within a python-shell. Shell won't work out of the box with this code. This should work inside the shell: logfilepath = "C:...." import os import os.path d, log = os.path.split(logfilepath) d = os.path.abspath(d) os.chdir(d) if os.path.isfile(log): with open(log, 'r') as logfile: lines = logfile.readlines() for line in lines: orig, new = line.split(' --&gt; ') new = new.rstrip() # Removes the newline os.rename(new, orig) os.remove(log) else: print('The log file was not found.') Be careful with the indentations. They are meaningful in python. &gt; "scrambler.py --unscramble &lt;'C:\....'&gt; Did you try the path with the &lt;&gt; ? They are not neccessary, they are just indicators to mark that element as a placeholder.
The global market is far less interesting than the local market. Some languages are much more popular in some areas of the world than others.
&gt; I use globals all the time I see. Well, I hope you enjoy working on your untestable and bug-prone software. Hopefully some day you learn to do it the right way. &gt; By the way, are you going to yield the point and agree with me that Java does not have globals? No, because I just shared with you a way to use globals in Java.
The only real advantage is you can write parts of it in Python, whereas Electron is only JS. Depending on your perspective this is an advantage or disadvantage! In general the Python interpreter has more capabilities than Node, and better libraries like numpy and tensorflow which aren't available on Node.
Thanks for the support! If you want to see some basic examples of how Masonite does common tasks: [HTTP Routing](http://masonite.docsforcode.com/docs/3.1-HTTP-Routing) [API Routing](http://masonite.docsforcode.com/docs/3.2-API-Routing) [URL Parameters](http://masonite.docsforcode.com/docs/3.3-Url-Parameters) Working on releasing 0.3 which should bring some changes to the framework in terms of models and migrations so examples of those will come on release
Thanks! I think Python is definitely a good thing to learn. You should consider contributing to one of the many Python open source projects. It will help you learn good practices and it will build your portfolio at the same time. wxPython definitely has a better license than PyQt especially if you want to sell your work. I like wxPython's documentation versus what I remember of PyQt's, but that might be unfair as I haven't looked at PyQt in a couple of years.
If you are about to ask a question, please consider [r/learnpython](http://www.reddit.com/r/learnpython) or the [learn python discord](https://discord.gg/jQtfh66).
Thanks for this 
yes cause you rely on other peoples work
Even if you're writing a kernel in raw machine code, you rely on the work of thousands of IC designers, engineers, fab workers, factory workers, miners and who knows who else all over the world. Even if you're building your own transistors out of raw silicon you mined in your backyard, you're still relying on the work of scientists who discovered semiconductors and found ways to apply their properties, and also Uncle Bob who made the shovel you're using to dig out silicon. Computers are _extremely complicated_, and relying on other people's work is the only way anything gets done, ever. There is nothing shameful about it.
Nice ad.
What was the joke?
What you should really do, rather than trying to scrape the data from the charts, is use an api for stock data (similar to the one this website is using). Here is a link to the documentation for a free stock api https://iextrading.com/developer/docs/#iex-market-data
dask/multiprocessing lib?
Dunno about best, but using string splicing is an easy way to do it. s=s[::-1] It works by doing [start:end:step] - by leaving begin and end off and specifying a step of -1, it reverses a string
assuming the request retrieved is a json you can use the json lib and convert each json into a dict and each row into a df.
I saw that library already posted here this week or previous, Can generate a simple binary like electron apps so client can easily install it? 
thankyou ever since ai started to program this question has bugged me alot but now in the context you are talking about I can understand why I need others work thanks
Also, here's a trick question for you: let's say you come up with a new programming language. How do you write the program that runs it? Hint: there is no single answer. Try to think of some!
This doesn't look right.. &gt; for elem in reversed('TURBO'): &gt; ... print(item) &gt; T &gt; U &gt; R &gt; B &gt; O 
The only dask example i found assumes that multiple globbed csv files (not archived) on disk are grabbed: http://dask.pydata.org/en/latest/dataframe-api.html#dask.dataframe.read_csv
Hey there! There are a few things to consider here. Are you using a library to manipulate the Excel doc? There are a few that could make things easier, like: https://pypi.python.org/pypi/openpyxl This would probably be helpful. I have a basic example script based on something I did for work once. It isn't exactly what you're trying to do, but does demonstrate iterating through excel with conditions. https://gist.github.com/BI0SH0CK3D/8f1bf7baa18442b3b1f2b49890df5cba What you would probably want to do is make your comparison, then, upon finding they don't match, use a write method provided by a library to write into the C cell. The library is used uses a cell.value() method to check and write information from a cell. I do this in lines 19 and 20, though I am writing it to a new notebook. For further reading on this kind of task in general: https://www.datacamp.com/community/tutorials/python-excel-tutorial https://automatetheboringstuff.com/chapter12/ 
Yes, using pyinstaller, although they will still require Chrome or Chromium to be installed. There are instructions at the bottom of the README
Thanks for the reply. Unfortunately, my scripts will be running either on OSX or Linux machines, so I don't think win32 will work for me.
I once interviewed for a position where the interviewer was aghast I would do something like that and called it un-pythonic. As silly as I thought it was at the time, it's best to understand how to do it in the form of a while loop, as that is what most interviewers are really asking. Wish me luck formatting: usr_str = input('&gt;: ') str_list = [] len_str = len(usr_str) while len_str != 0: str_list.append(usr_str[len_str - 1]) len_str -= 1 print(str_list) edits: made it look pretty.
Ahhh...I see. I assumed that the square would be evaluated each time (since I'm not storing the result anywhere in a variable) and then printed.
But then the same thing gets called, no? I mean, in the function I insert the square function, and the number of loops as well as another argument. Wherein lies the difference? Why is the square only done once in the function, but each time in the raw loop? 
Turning a Slack bot I built to handle JIRA tasks into an actual Slack app for access to slash commands and interactive messaging.
Python context file search from terminal ( https://github.com/skvoter/pygreppy ). Gonna make a full post when finished
I completely disagree with the interviewer - the step parameter is there for a reason. If they didn't like that, my next suggestion would be: ''.join(reversed(usr_str))
oh right theyre globbed. sorry i don't know any more about it. i mean i guess you can set a producer/consumer model using multiprocessing Pooling where the producer function just unzips your file and whatever is passed to the consumer reads it into the df. ive used this style with writing web scrapers but i dont know how well it will perform with I/O on disk rather than network I/O
&gt; But they're not globals. They disappear when references are lost. Globals don't do that. It has the same effect. If you're no longer holding reference to something, why does it need to still exist? I could link you three dozen articles explaining why globals are a code smell, but I'll let you look it up yourself. In the mean time, we can agree to disagree.
What happens if you print `elem` rather than `item`?
 &gt;&gt;&gt; for elem in reversed('TURBO'): ... print(item) ... Traceback (most recent call last): File "&lt;stdin&gt;", line 2, in &lt;module&gt; NameError: name 'item' is not defined &gt;&gt;&gt; for elem in reversed('TURBO'): ... print(elem) ... O B R U T 
I prefer Pycharm myself. Anything but IDLE.
Please see [IDLE and tkinter with Tcl/Tk on macOS](https://www.python.org/download/mac/tcltk/).
You are not actually passing in a function. You are passing in the **RESULT** of the function because `test(sq1(347347), 3)` is evaluated from inside to out. So `test` actually receives the **answer** to `sq1(347347)`. If you want to have the sqrt evaluated at test time you need to do something like this: def test(func, func_arg, repeats=1): for i in range(repeats): print(t("func(func_arg)"))
viscose, sublime text
Haha reading this whole thread, username definitely checks out.
I gotta be real with y'all - I'm not looking forward to going through the docs when Python 4 comes around. As it is, I never know if the docs I'm looking at are Python2 or 3 until find a print statement. /s(-ish)
&gt; everyone should equally work on all parts of project I don't agree with that. People should be given liberty to work on what they want. That's how you encourage contribution. &gt; so that if someone happens to leave (the project, job, or whatever depending on what you're doing), you don't spend next 3 weeks reading their code and thinking what the fuck it's supposed to do, just because before you dropped it onto them and never really talked about it since it's "their field". If I write my code correctly, it should be clear what it's doing and why it's doing it. What I mean by the "their field" comment is take for example my project where I interface with a horrifically complicated binary file format that is poorly documented. To work around the complexity, I actually parse the file twice, but I skip a bunch of stuff the first time, so I hit ~500 MB/s for a realistic problem despite the double read. Part of that is that it was built on legacy code, but also because it made sense to do it that way. When you start getting into complicated math (another thing my project does), the equations that someone else takes for granted, I find excessively complicated and similarly down the chain. How do you efficiently transform a series of forces/moments, each in their own coordinate system (e.g., spherical) to a cylindrical coordinate system at a different location? If there is an error in my methodology, someone that understands the math (given the documentation) should be able to find the error in my derivation and/or the subsequent calculations. If you still don't, open a book; I didn't invent the concept. There fundamentally is a learning curve to using any project and understanding how and why it exists in the state that it does. You have to pay it at some point, but as long as it's fast, robust, tested, and you documented, I don't see why you need to have everyone pay their dues when it works. If you're interested in machine learning, you should accept the fact that you won't understand everything and that's totally fine.
But what about pip?
Actually the easiest way to fix this is to change these lines: test(sq1(347347), 3) test(sq2(347347), 3) to this: test("sq1(347347)", 3) test("sq2(347347)", 3) 
Hey everyone, If you're interested in learning the PyCharm, the most popular Python IDE, we just launched a course over at Talk Python Training. Here are a few of the things covered. * Learn to manage Python projects in PyCharm (large and small) * Create web applications (Pyramid, Flask, Django, and more) * Use PyCharm's special data science mode * Refactor your Python code with confidence * Learn about code smells and duplicate code tooling * Access git, github, and use git flow * Use the visual debugger to understand code flow and state * Make your code more reliable with unit testing and pytest * Create new Python packages * And lots more 
That totally makes sense. I should have seen this, I feel stupid now :( Thanks for giving me a mental bitchslap though, appreciate it!
&gt; You dont talk about the actual skill level of python for these types of collaboration I briefly mentioned it. Start by using it. I reported to core Python that something like: data = (1, 2) #in binary struct.unpack('2i f', data) and got an error message saying that two arguments were required, despite me providing two arguments. I was using the function incorrectly and the error message was horrifically wrong. I don't have the skill in C++ or I would have at least included a sample patch. They agreed it was a problem and fixed it ~8 months later. Inexperienced users is what complicated projects need.
Yes, I see my mistake now. That way I'm not passing in the result (as I was doing), but now I'm passing in the function. Makes sense. Thanks!!!!
Your username, lol. This is actually the second time we randomly bump into each other, the first time we briefly talked GIS dev over some beers on the queue for the ferryboat on Ilhabela :D
I also disagreed with the interviewer, my friend. I was just giving an anecdote and the answer desired by the interviewer. I did not get that job because I then snarkily provided the while loop.
Maybe look at [this](http://python-pptx.readthedocs.io/en/latest/)? Seems like you'll be able to open .pptx files directly (Presentation(filename)). [This StackOverflow post](https://stackoverflow.com/questions/39418620/extracting-text-from-multiple-powerpoint-files-using-python) might be helpful in figuring out how exactly to do what you describe with python-pptx.
I didn't mean that everyone should equally write every single part, it's just that everyone should contribute to it or be familiar so that they aren't clueless on it. Also code isn't always readable since we all are different, you might know it by now.
I agree with interviewer. 
Maybe this will help? It's a collection of all Common Vulnerabilities and Exposures(CVE): https://nvd.nist.gov/vuln/search/ or https://nvd.nist.gov/vuln/search/results?adv_search=false&amp;form_type=basic&amp;results_type=overview&amp;search_type=all&amp;query=python edit: I'm a long-time lurker trying to be more active and reddit formatting is not my friend
Nice thanks
This is super cool, I'm working on a Flask API currently. What background do you have in developing?
Cities (iOS) and Python server application Github: https://github.com/calumpwebb/Cities
O(n^2) runtime though.
Ohhh I do remember you. How are you doing?
Thanks for advice! I’m going to check as soon as possible!
So you've written your own operating system, all the device drivers, all the applications...?
As others have said, it is highly likely that Pycharm CE will handle all of the needs for your use case. However, let me be the old dude that recommends vim with [python-mode](https://github.com/python-mode/python-mode)!
Yes I’m going to use Google Voice API to recognize my voice but I’ll build my own functions upon my needs. I meant that Google Voice and Amazon Alexa for example has only a few standard task like tell me the weather, add this to my shopping list etc. I’m a Linux user and sometimes I need to automate some personal tasks. I know doing all of this from scratch is crazy and impossible. Thanks for your reply! 
Speed of the resulting program. Control. Not relying on others for implementation (only the c-compiler, which you can rewrite on your own if you're crazy, but then might aswell program in assembly, no wait, might aswell go with pure opcodes in your own processor designed by you).
Great resources! Thank you for your share! I’m going to try them :)
On what grounds?
Working on my sudoku script to finally be able to solve all of them! I would like to see your opinion on it :) Dont forget im a beginner https://github.com/tweakimp/sudoku
I would recommend multiprocessing, since your workload seems mostly, but not exclusively I/O bound. The doc for the multiprocessing module has a usable example: https://docs.python.org/2/library/multiprocessing.html#exchanging-objects-between-processes from multiprocessing import Process, Queue def f(q): q.put([42, None, 'hello']) # here you would read in and decompress your file if __name__ == '__main__': q = Queue() p = Process(target=f, args=(q,)) # just spawn one process per file p.start() print q.get() # prints "[42, None, 'hello']" p.join() 
First point is only if you're contributing and it's not your job to do something in the team. I guess I missed that it's explicitly for contributing, in that case I agree with pretty much everything, my bad.
1: /r/learnpython 2: did you try googling exactly what you typed as the subject of this post?
Not sure if it fits your needs (it's not Python specific), but I recently learnt of about [Vulners](https://vulners.com/). It also has an API. From the site: &gt; API: Provides you a full stack of Vulners functionality. Integrate it with your SOC, Scanners, Crawlers, Portals, IoTs….
PEP 557 and 553 really stick out at me. Can't wait to play with them.
Agree. It concatenates each character to the beginning of the string :)
The problem is that there may be significant IO performance slowdown due to serialization when concatenating the dataframes from multiple processes
&gt; But, out of curiosity, are there other examples where the list version is faster on average? I'm curious, too :)
Good on you. Don’t give up.
I went onto Stack Overflow and found what they had written but for me, it doesn't work. It still selects it with all the brackets around it, unfortunately.
Opa, tranquilo George e aí? Acabamos não mantendo o contato mas lembrei do teu nome assim que vi o post, haha. Sou o André, a propósito. E aí, trampando com o QGIS ainda? Vc era de Minas né?
I was just thinking about how I'm fumbling around like an idiot in PyCharm as though it were Matlab and not creating virtual environments or really doing anything right. Well timed, thanks. 
python 4 print: print&lt;:("Hello World!"\):&gt;
Psh, I was going to download the alpha tonight when I got home, but thanks for the tip!
This is going to depend pretty heavily on what you want to _do_ with the data after you read it. Do you want to read the data from multiple files into a single dataset to work on? Do you want to read each file separately, process it independently, and then do something with the results? Do you want to read rows in from each and process them sequentially? What part of reading the files sequentially is causing problems for you?
It doesn't change the fact that they're not globals. You don't need to maintain references to globals to keep them existing. And it is something that Java doesn't do, code smell or not. Just pack it in --- you've lost this one. I showed you something that Python can do that Java cannot.
hey michael, love the podcast. can you tell me how much content covered is applicable for the pro version only? I only have community version.
What you're getting back is a list - that's denoted by the [ and ]. Inside that is a tuple, denoted by the ( and ). Iterate over the list and over the tuple inside it to get the raw elements. Hint: Maybe look beyond the very first google result before giving up... 
What are they used for? Benefits?
What's it doing or not doing? Which weather system's API do you want to submit to? Step 1: google something like "Python [weather system of choice] api"
Data classes are essentially like named tuples (they generate boilerplate code for you), but without the tuple-API and with a lot of customization options. According to the pep, there are already several fully-featured modules for data classes. This new module doesn't aim to replace any of them, instead it aims to be the "first/obvious/pythonic choice" when a simple value-holding class is all that's needed.
PEP 20, point 7, readability counts. I'm a firm believer in PEP 20, I think it's why Python has become as popular as it is.
PyQt5, specifically [QML](https://www.qt.io/download). Terrific and brutally easy to learn. Brutally hard to compile for mobile, but it's possible.
Working on finding a pycoin develop :) 
i just want to speed up loading of large collection of csv files, each archived into its own csv.zip file by leveraging Python concurrency.
Have you written anything in C? I think you'd find the answer becomes apparent quickly.
robot-blocks (https://chris104957.github.io/robot-blocks/) - building blocks for raspberry pi robot software 
Looking for Backend (Software) Engineers and Engineering Managers for Yelp in San Francisco. We're a LAMP stack, python as the backend language. Let me know if you'd like to chat. 
POPOs! Plain Ol' Python Objects lol
I don't agree that "Python can do things that Java can't" based solely on the fact that Java doesn't implement globals. Any problem that you can solve with Python, you can solve with Java. Simple as that.
Who would disagree with that? They're both Turing complete, after all. But that wasn't what I asserted and it wasn't what was asked.
@Todaug Atom IDLE is the best IDLE editor that I have ever used. It's open-source. Feel free to check it out.
well by serialization I meant pickling, isn't this what multiprocessing uses for data/object transfer between processes?
Check [Kivy](https://github.com/kivy/kivy/wiki/List-of-Kivy-Projects)
cheers dude 
C# is a popular language. There's nothing wrong with knowing it and several others. As for Python, I recommend learning Python 3. Python 2 is going to be EOL in 2020. The differences between the two are pretty minor at this point and I rarely have issues writing code that will work in both versions. However all new development is going into Python 3 and has been for a few years now. Most people use Github or something similar for their portfolio. You can put your code there for free and employers like to look at your commits to see how your code changes over time. Contributing to open source programs or writing your own is a good way to build up your portfolio. There aren't really any official certificates for Python per se. 
tk is the gui library that comes integrated with Python as standard. It is one of the batteries in the phrase "batteries included". tk has the advantage of working on many different platforms. 
Why would anyone use pdb.set_trace() when you can use pu.db? I hope the pudb maintainers add support for breakpoint().
1: /r/learnpython 2: read the sidebar 3: post your code 4: No, not an image of your code 5: Format your code so we can read it 6: Post the errors you're getting
Thanks, signed up.
Also "from \_\_future\_\_ import generator_stop" is no longer necessary; see [PEP 479](https://www.python.org/dev/peps/pep-0479/).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [python/cpython/.../**reduction.py** (3.6 → 9c99fd1)](https://github.com/python/cpython/blob/9c99fd163d5ca9bcc0b7ddd0d1e3b8717a63237c/Lib/multiprocessing/reduction.py) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dsfv79b.)
I am experiencing the same but not using Django - interested in this too - I thought maybe was something I was doing incorrectly.
any great Python tutorial that you can point me to btw? thanks all!
Many of us (including me) have never heard of this. Thanks for the heads up; it looks interesting. Also many of us work in environments where we have to take the packages given to us and cannot install new packages.
It's also great for configuring your program to use some nicer debugging TUI than pdb or for IDEs to inject their own debuggers.
I will tomorrow as I am currently busy, I tried it in both python 2&amp;3 and neither worked. 
I have a shortcut in vim to do import pudb; pudb.set_trace() Are you saying it could be shorter? TIL Edit: it's at the top of the getting started now
Guys, new Pythonista here. Can I have access to the same libraries than 2.7? I feel compelled to ask...
Is pandas not open source?
Good info, not a great write-up, hard to follow the information. Thanks for posting, it's useful.
😯
Is pandas not old open source?
I can play around with it, and I can get back to you. What would be an example of the correct previous behavior? It would help a lot to have one.
I have. Couldn't find any solutions. In fact whenever I used the word PPT or PowerPoint, I'd more often get search results for SlideShare presentations on the topic 
I have looked at it, but because I need to have built in integration with PowerPoint, I need to use VB. Even if I use some of the features of python-pptx, I still can't find a way to solve the existing problems I have 
Is there a reason you are using 2.7? 
I hacked something similar together for a university project, I didn't realize there was such an interest for this specific kind of GUI. Great job!
Python 2 is legacy. If you want to use new stuff, python 3 is the way to go.
Did you denote Emacs as being more difficult to learn than Vim because you never found out how to exit Vim and therefore never could learn Emacs?
Finishing/improving a simulation of the [Ising model](https://en.wikipedia.org/wiki/Ising_model) for an assignment for a computational physics module I took last semester. It's due 9AM Monday, and I'm dreading the write-up/report that has to go along with it. I have a relatively fast version of the metropolis algorithm running, which I've been able to speed up using numba. Unfortunately I've only implemented this version for a specific (in this case square) lattice. I can do it for an arbitrary lattice if I represent the lattice as a graph and use its adjacency matrix to work out neighbours^(1), but the memory usage skyrockets (The adjacency of a 256x256 square lattice would use a few gigabytes of memory if implemented naively). One solution to this is to use a scipy sparse matrix, but numba doesn't seem to optimize that very well. While it's not as mathematically elegant as using the adjacency matrix + np.dot, I'm probably just going to store an np.ndarray of neighbours for each element in the lattice and loop over them. Or possibly play around with a `jitclass`. ------ ^(1. You might be wondering why I don't just pass a function `neighbours` that returns a tuple of the neighbours of a location, it's because numba doesn't really handle higher order functions without some inelegant trickery [functions-that-return-functions, etc.]) 
Fundamentally no. All of these programming languages are [turing complete](https://en.wikipedia.org/wiki/Turing_completeness). Which in a nutshell is they can perform any arbitrary task you give them. There are tradeoffs between languages for memory used, time to execute, time to develop, etc - but they can all do the same things. One of the big tradeoffs with C is memory management. You have to allocate and deallocate all units of memory in code. This is not terribly hard in simple cases, but can be come incredibly hard in complex systems. The benefits of implementing something in C tend to be speed of execution, but other languages are generally fast enough for most use cases. Some languages, like Ruby for example, can have extensions written in C for them. So you can get accelerated execution time for a CPU intensive chunk of code, but the rest of your code is easy to write and understand.
**Turing completeness** In computability theory, a system of data-manipulation rules (such as a computer's instruction set, a programming language, or a cellular automaton) is said to be Turing complete or computationally universal if it can be used to simulate any Turing machine. The concept is named after English mathematician and computer scientist Alan Turing. A classic example is lambda calculus. A closely related concept is that of Turing equivalence – two computers P and Q are called equivalent if P can simulate Q and Q can simulate P. The Church–Turing thesis conjectures that any function whose values can be computed by an algorithm can be computed by a Turing machine, and therefore that if any real-world computer can simulate a Turing machine, it is Turing equivalent to a Turing machine. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
My favorite way is to use pandas read_sql, no dealing with lists of tuples.
Thank you very much, my friend, it really helps
Tranquilissimo. Lembro bem de você, mas não lembrava seu nome mesmo. 100% Open source GIS em geral. QGIS, Python, Django, etc. Sou de MG. Depois te mando uma mensagem direta para batermos um papo melhor. Abs
In crontab, you will need to specify the full path for all executables. So instead of python, you might say `/usr/bin/python` or `/usr/bin/env python /full/path/to/script`. To skip crontab altogether, you can add your script to the start up scripts. What distro are you using?
So if I like while loops more there is no reason to change.
You mean you don't automatically install from git tip? What a pleb. /s
Of course. Feel free to message me if you have any more questions.
Description: Ubuntu 16.04.2 LTS Release: 16.04 Codename: xenial yeah i added the full path of python and a shebang in the script itself 
Also, unless A1 is equal to a variable “Yes!” Than you’re writing that first like incorrectly. One equal sign is how to express a variable. Two equal signs is how to say equal to something else. 
Have you looked into PyQt? This sounds like it’d be easy with PyQt but Qt has a steep learning curve 
How about python script to generate a random python project?
I think 2017 was the tipping point for 2/3. By the end of last year, I feel like 2 was in sharp decline while 3 went the opposite way. This is just my gut feeling from reading this forum, github projects, and various blog posts. 
Happy to get this one out there for you. :)
Noob here - when these changes move from alpha to the general release, how do I get them? Is there something I do with pip or do I download Python again from wherever I got it from when I installed it?
Original...
Try pudb for command line debugging
That sounds awful. 
Almost certainly yes.
Ok so pomodoro means tomato in Italian, so I was scrolling by this and at first got confused as all hell as to why there was a Python Tomato Timer...
Exactly! https://pythonclock.org/
http://python-packaging.readthedocs.io/en/latest/index.html
This guy queries.
I seriously feel bad for those poor souls..
 $ pymodoro --pomodoro-size 1 test Traceback (most recent call last): File "/Library/Frameworks/Python.framework/Versions/3.6/bin/pymodoro", line 11, in &lt;module&gt; load_entry_point('pymodoro==1.1.1', 'console_scripts', 'pymodoro')() File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/pkg_resources/__init__.py", line 570, in load_entry_point return get_distribution(dist).load_entry_point(group, name) File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/pkg_resources/__init__.py", line 2751, in load_entry_point return ep.load() File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/pkg_resources/__init__.py", line 2405, in load return self.resolve() File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/pkg_resources/__init__.py", line 2411, in resolve module = __import__(self.module_name, fromlist=['__name__'], level=0) ModuleNotFoundError: No module named 'pymodoro' macOS, Python 3.6
Doesn't it feel a bit weird if the greatest achievement for the language in 2017 was a major version change that actually happened like ten years ago?
Google for the Attrs package. I'd link but I'm on mobile.
In South Africa they're using Pascal to teach kids!
f-strings?
There is this that was posted a while back on the pi subreddit: https://www.reddit.com/r/raspberry_pi/comments/32ts8t/i_asked_yesterday_if_people_wanted_an_openvpn/?st=JC8Q48IP&amp;sh=09f10693
If I have to guess probably apscheduler is not installed globally so /usr/bin/python doesn't know where to find it and you should point the crontab job to the executable in your virtualenv or install apscheduler system wide. But probably your best choice is first to get rid of all apscheduler in your code and do a simple crontab
what do your 2 bots do? I'm curious
I am a student and learning things, mainly developing in Python
No. Switch to Python 3 or perish. 
Network socket, protobuf, etc. Try to avoid pickle.
Dunno any specific tutorials but, Few ways to do this: 1. Talk through http. Setup one app as http server (flask), other app can then send an http request (aka rest) 2. Setup a message queue like rabbitmq redis. One app can publish a msg and the other receives it. 
I have a REST API on each microservice and now i would like to make them communicate with each other - i do not know what is a proper way to do this and i need some informations about this.
Well, I would say the adaptation of that change is the biggest achievement. Because what good is a version change if no one in the industry adapts to that?
Yup! I love using the f-string. 
seeing a ton of giant ads on that page was disgusting
The reddit one was just a simple bot that comments when it picks up on a certain word or sentence in a comment or post. The Instagram bot was just a simple like bot that likes pictures in a certain hashtag group. Just made them to learn more and why I'm asking for more ideas to learn more and develop further skills. But looks like this sub-reddit isn't the place to ask.
Tuples are immutable, that means that once they are created they can't be changed. 
Yeah, I ignore those rules. They're "designed to make sure our software works and we don't get weird bugs". Every time there has been something that's been different, it's either been 1) it works in mine and can't work in yours or 2) I'm using some crazy new feature that makes my code 200x faster and your's has to do it the slow/buggy way. I just upgrade to get bug fixes. Of course the reply was, it's too hard to upgrade and it takes a lot of work to make our own distribution. Sure does, so just use Anaconda; Anaconda was then banned; I still used it, but I agreed to not promote it. After 3 years without an upgrade to our Python, my boss broke and started using Anaconda. It's now on all our new machines. 6 months ago, I got that our software should work on Python 2.7.5 despite being stuck on Python 2.7.8 for a long time. That's what happens when you lock into a version and don't test anything older (or newer) than that...
You shouldn't be downvoted, but I'm genuinely curious to why ... Are you working for a company with a huge codebase? Do you need some very specific libraries?
Pypi also have lots of pure python implementations of libraries and software. Libs that are api compatible are good for JIT compilation. A common way to speed up python programs. Software that are rewritten in python are also sometimes logical if software in question can benefit from it, for example a collection of perl scripts rewritten in python is a great thing to have, Emacs rewritten in python is just unnecessary... On the other hand, we have far far more unnecessary packages in npm. Ps: Pip is just a software for downloading packages, there are easy_install and others too. It's PyPI software that stores and serves packages. And PyPA are people who has authority over PyPI and pip and setuptools. Npm is different because it's not a common platform like pypi or directly maintained by nodejs foundation. Npm is owned by a private company. 
Hi /u/isawan, I'm afraid that we don't currently have any positons with a specific requirement for data science or machine learning. The postions that we are currently recruiting for can be found here: https://www.bullionbypost.co.uk/info/careers/
I actually like this even though it's fairly simple. I might just use it for this term just for fun.
&gt; Instagram bot Are you using Instagram API or just scraping the website?
Gotta go fast.
I feel that IdeaVim is a too huge to be ignored and big part of functionality covered changes with when using IdeaVim. I also feel, despite being a great IDE some of the features are pretty dated and are much worse than just using a terminal. Other useful features still tend to get a bit dated, like Pycharm setup.py generation is still using distutils and is pretty much wrong, the virtual environment manager is pretty dumb and so on. I've been using PyCharm for several years now and I'd say you only need to learn few things: * Get IdeaVim and learn vim * Checkout cool IdeaVim configs for action shortcuts etc. * Enter distraction free mode * Install MainMenuToggler plugin to get rid of menu bar * use `ctrl+e` for navigation * use `ctrl+shift+a` for actions * use `shift+F6` to refactor names * learn `alt+1-0` shortcuts * use `ctrl+j` to insert templates * use `ctrl+p` to predict types * use type-hints to help pycharm predict types 
I believe attrs goes way beyond dataclasses. I strongly recommend and endorse attrs though, not always fond of the naming but it's a terrific library.
If you want to be a good programmer you should learn code that "works" is not perfect code, it's about it being easily readable and maintainable. It took me a while to understand your code because of those weirdly places while loops 
I'm using Apistar and it's great.
Dude, that was cute.
Try to web scrap something. I like beers, so I made a boy that collects all beers prices of the biggest supermarket here in Brazil and shows me the cheapest ones :)
&gt; Instead put a separate shell script somewhere in your path that first sources your virtualenv and then calls the python script in question By this do you mean: create another python script whose job is to activate the venv, and then call my script? Would this have an advantage over something like having a single bash_alias that carried out the two commands: source/bin/activate, &amp; python myProgram.py ? And if so, any way to get around the minor inconvenience that having any other virtualenv running would bring? As it would cut off the current one, and then also require a 'deactivate' once I'm finished using the script--which is very brief. 
lists are mutable, tupls are not. lists are a much more flexible structure in python, they have functions you can call to do things like append, count, reverse, sort... tupls are set in stone once you create them. The only way of "adding" or "removing" items is by creating a new tuple. In [8]: alist=[1,2,3] In [9]: id(alist) Out[9]: 140425992191624 In [10]: alist.append(4) In [11]: id(alist) Out[11]: 140425992191624 In [12]: alist + [5] Out[12]: [1, 2, 3, 4, 5] In [13]: id(alist) Out[13]: 140425992191624 
I mean create a plain old shell script in, for example, $HOME/bin. Personally I don't like bash aliases since I find it easier to just dump stuff in $HOME/bin instead of editing whatever file you choose to put aliases in. They also work from everywhere and just not your shell in question. &gt; And if so, any way to get around the minor inconvenience that having any other virtualenv running would bring? As it would cut off the current one, and then also require a 'deactivate' once I'm finished using the script--which is very brief. This is not a problem if you use a shell script.
What's the point of a fstring. Iv'e glanced in it's direction but haven't "got" it.
It's really just a simpler up to date formatting method. Compare s = f'{p.name} costs {p.price}' To s = '{} costs {}'.format(p.name, p.price) Or verbose dict unpacking. All in all it's just easier to read and write. 
(Bias: I'm the PyCharm dev advocate.) I think the git integration is actually one of the strongest features. I recently did a webcast with GitHub demonstrating the basics and we have some videos showing rebase and other features. You make a good point about setup.py generation. We don't always do the best job on evolving "best practices". The virtualenv stuff recently changed, in 2017.3. You're right that before that, I personally made my project outside of PyCharm because of it. 2017.3 has a new UI and covers several usages quite well.
If you're writing microservices, consider using something like http://python-rq.org/ 
Remembering **NOT** to tread all over the system Python.
Thinking out loud and going off on a complete tangent, instead of threads here titled "The 10 Python libraries that you really should use" wouldn't it make a change to see "The 10 most obscure Python libraries that are of no bloody use to anybody except their authors"? :-)
Yeah I'm quite fond of git highlight in the gutter and pycharm's git/local diff feature, but I feel that learning git cli is pretty vital and once you know that most GUI systems become obsolete. I'd really like to see you guys put more work into ideavim, to me it seems like it's the biggest reason selling point of Pycharm - batteries included IDE with vim workflow is on a pretty high demand. Vim plugin support and having an ability to write to buffer (i.e. load macros etc.) would pretty much blow any competition for me :) I'd like to contribute but java isn't a very friendly language for plugins and extensions.
I have my own preferences for what I like as “programming music.” What types of music (genres) do you like?
How might you execute this? Shell script? Or have the command name as a bash_alias?
You may like http://musicforprogramming.net/
_triggered_
I've debugged and solved a similar problem. The cause was that the service runs as a different user (the SYSTEM or SERVICE user, IIRC) when it is started normally, and that user also has to have the environment set up properly for python to work. In particular, it has to have the PATH set up so that it finds the python executable. If this fails to fix the problem, see https://support.microsoft.com/en-ca/help/824344/how-to-debug-windows-services for how to debug a service, this goes for python services as well. 
The examples for python-pptx include extracting data from ppt and putting it back. There is no obvious need for VBA. https://python-pptx.readthedocs.io/en/latest/user/quickstart.html?highlight=extract
Yeah...why so much hatred? I just asked! 😡
People say that is more robust than newer versions. Is it right?
https://www.amazon.com/dp/B00EEUHJHO/
As soon as you go into a specific niche, it can happen quite quickly. I teach a python introductory class, and last year, I've had DNA biologists, rocket scientists and telecom professionals that wanted to use specific tools which were only available in Python 2. (In those cases we still mainly use python 3 during the training, but from time to time we take out python 2 to compare).
I don't think there is any hatred. I think people were expressing that a dev new to Python should be shielded from 2 in a school or hobby context. Certainly there are a few companies that might use 2 still, and we all need to make a living, but the transition have been very exhausting for some, and I think you're also seeing a sentiment of, "Please, nobody develop for 2!"
di.fm "Digitally Imported" - Many channels to choose from, nice UI, free with ads, cheap premium (no ads).
If you're in Linux, you can just make the virtual environment interpreter the target of your shebang: #! /home/yournamehere/.virtualenvs/your_ve/bin/python make it executable, and execute it like any other command. 
I'm just saying that finally getting to success on what could, arguably, be called the perfect example of how not to manage changes in a language isn't particularly exciting.
You need to give an example of the columns of the dataframes and some data - or if it's sensitive - example that will illustrate what you have and are looking to do.
Robust as in nothing will move? Seriously, if you don't have a very compelling reason (specific dependencies or code base) for Python 2, you should probably choose 3. The 'tried and tested' argument only goes so far, at a certain point you want to be able to stay in touch with more recent developments.
Hiring Analytics Engineer at Clover Health https://www.djangojobs.net/jobs/737/analytics-engineer-clover-health/ Clover is reinventing health insurance by working to keep people healthier. We value diversity — in backgrounds and in experiences. Healthcare is a universal concern, and we need people from all backgrounds and swaths of life to help build the future of healthcare. Clover's engineering team is empathetic, caring, and supportive. We are deliberate and self-reflective about the kind of engineering team and culture that we are building, seeking engineers that are not only strong in their own aptitudes but care deeply about supporting each other's growth. python django jobs hiring sanfrancisco
Lately I've been thinking about python packaging. I think java got many things better. Like package namespacing (django-redis and django-redis-fork is a bad naming convention. com.username1.django-redis might be a better alternative? Or username1/django-redis? Or django-redis@username1?) Also package singing without a trusted gpg repository is I don't think a good way of singing. Pypa guys also admit that gpg singing is not a well thought out idea and essentially not used or validated at all. 
Do you have spotify? If so, I highly recommend the playlist 'Brain Food'
Why do we still ship idle? Maybe we should ship with Thonny... 
If I'm understanding the article correctly, this is a pretty basic MITM, with the payload being a Javascript miner instead of more conventional data snooping. Even distributed across a botnet, isn't Javascript too slow to make a worthwhile miner?
Thank you filletrall. I already have Python (and its Scripts and DLLs folder) included in my system PATH. I don't have anything set to PYTHONPATH, but my script does not need it if I'm not wrong. Anyway, I don't think it's an environment issue since I also tried to run it as a compiled executable so even environments without python should be able to run it. I'll try to debug it with this useful link you delivered. Thanks!
Absolutely, but that can take time or effort or skills which might not be readily available. These are typically people who are not experienced developers (quite often they are taking their very first steps into programming when I meet them).
I can confirm at least for myself that anyone using or recommending Python 2 without a good reason seriously frustrates me. It’s just not an acceptable position anymore and it’s harming the rest of the world that is trying to move on with modern Python.
They are superficially similar to named tuples (especially the newer kind, NamedTuple from typing) and share some of their use cases, but behave more like classes and less like tuples, which makes them less useful as a replacement for a simple tuple but more useful for other things: - data classes can be mutable - data classes are not iterable (unless you intentionally make them iterable) - `==` on data classes is stricter than on named tuples (takes the type into consideration) - inheritance works differently and is more useful for combining fields - etc.
Sure. It kind of reads like a bunch of slides (I see it's based on a presentation). It's hard to tell by the headings when it's going from one section into another.
If the main goal is to teach the basic concepts of programming, the language doesn't matter that much. I've even used REXX for that goal.
I had a similar question. Not many answer. Your feature list looks a lot. Is this is a marketplace?
Did a double take seeing seismic maps in the python sub
Amazon music has a "liquid mind" channel I like
Very cool to see SerpentAI getting recognition. The author wrote the majority(maybe all of it) on his Twitch stream [Serpent_AI](https://www.twitch.tv/serpent_ai). He still does weekend work on the framework on a bi-weekly basis IIRC. Other than that he's usually streaming development of various projects.
Cool! Thanks for the explanation
Bokeh, and for geographical plots, GeoViews: http://bokeh.pydata.org http://geo.holoviews.org If you've looked at Bokeh in the past, I would encourage you to check it out again. It's come a long ways in the last 6 months or so, adding support for graph &amp; network viz, static export to SVG/raster, better embedding options for Bokeh Server, and more efficient compression for data transport (which improves responsiveness on large datasets). https://bokeh.github.io/blog/
Bokeh? Also, isn’t a subscription to plotly only necessary if you want to host your charts? I have been using it for years without feeling a need to subscribe to their service.
- altair https://altair-viz.github.io - bokeh, for more interactive plots http://bokeh.pydata.org
SOMA FM has a free app that streams a good variety of genres. Several of them are geared towards coders.
Thanks, I will keep this in mind for the next article.
Yes, it's.
Books are a supplement to hands-on learning. Nothing will ever replace writing code to learn something. With that being said, books are good for self-guided learning. Some people are reads, others are not. Do what works for you.
Eh he was very clear in crediting the original author in both this post and the repository readme. Sometimes it's a pain to fork through Github because PRs default to the upstream branch.
Since your scripts only require the requests module you can safely use PyInstaller, follow these instructions: First install PyInstaller pip install pyinstaller Then cd to your script path and run this command pyinstaller myscriptname.py --onefile That will convert your script into an executable file of the operating system you compiled it with. If you did this on Windows you will get an .exe, on macOS you will get an .app and on Linux I believe you will get an elf file.
I can strongly recommend the O'Reilly books Learning Python and the Python Cookbook. 
Opa, manda sim. Legal te encontrar por aqui, ainda mais aleatoriamente num sub em inglês haha! Abraço.
I can absolutely believe that. However, I'm actually talking about the phase that even precedes 'first language': very basic algorithmic thinking etc. You could do that while just making drawings, but you want to be able to show some results. 
What are you talking about? You put yourself on that list...
It’s basically matplotlib though (and uses it as a backend) with some better (more convenient) support for pandas DataFrames and some convenience wrapper functions for more specialized plots
I know, but its theme is superb!
Agree, it looks nice! However, matplotlib &gt; 2.0 has also theme options now built-in (seaborn among others ;))
If I want to focus when I'm programming I like to listen to [brain.fm](http://www.brain.fm)
This! DI is excellent, especially if you love any kind of electronic. 
I recently heard about orange (https://orange.biolab.si/) in the podcast.init (https://www.podcastinit.com) podcast. Looks interesting, especially if you are looking for visualisations as an aid during data exploration
Came here to suggest spotify. It's dirt cheap for what you get. 
Lol. I’m actually not sure what a fork is and you’re spot on with that comment. I’m pretty new to this. I go to a weekly code jam, I’ll have to ask if them how to fork it. If it is any concession I PM’d the author to let him know I adopted it. I added some print commands b/c to assure myself that tings are still running. I would like to add some comments to explain better what’s happening and print commands to be more transparent what is going on. I’ll do a better job with building on other people’s work next time. 
JavaScript ain’t that bad. Join the dark side. 
You're not woke, fam. I'm too lit.
Start with small data.
Windows services are worse than hell. Every single part of the puzzle is absolutely vital, or something won't work right. guaranteed. In your case, I think your issues is your SvcDoRun method. Look at mine which does work (last i checked): def SvcDoRun(self): """ Run the service, starting our CommServer which handles all other necessary modules. """ self.server = CommServer() self.server.run(daemon=True) self.timeout = FREQUENCY * 1000 # frequency seconds (timeout is in milliseconds) rc = None while rc != win32event.WAIT_OBJECT_0: # Wait for stop signal, loop on timeout rc = win32event.WaitForSingleObject(self.hWaitStop, self.timeout) The crucial part you're missing is the while loop checking rc = win32event.WAIT_OBJECT_0. This lets the service handle stopping your script if necessary and keeps it from locking up, and i think that's your issue. It times out because you never give the service control to tell it that it's started up. In my case, my server.run() function runs a tcp server in the background, on another thread, and this is key. Any of your application logic either needs to include sleeps and this win32event loop, or run in it's own thread that can handle being killed (the latter is the more stable option from my findings). Also on another note, in the SvcStop method, i've found that it's useful to add a sys.exit(0) call as the last line of the function, as without this i seemed to get a lot of false errors when stopping the service. 
Check out u/sentdex on Reddit or YouTube. He has a 90ish video playlist that starts from the ground up on machine learning. Fantastic teacher and if you know python pretty well it’ll be perfect for you. 
You just need to be in offline mode for Plot.ly to continue to be free with unlimited plotting. I know, it's confusing, and the documentation on this topic is not good.
You _can_ do this, but I'm not really convinced that you _should_. What is the meaning of these dictionaries? Why have you structured your code in this way to begin with? Can you not just store these dictionaries in a list? &gt; If you are about to ask a question, please consider r/learnpython or [the learn python discord](https://discord.gg/jQtfh66).
That's very messy. Just store the dictionaries in a list. dicts = [ {dict0_key1: dict0_value1 ...}, {dict1_key1: dict1_value1, dict1_key2: dict1_value2 ...}, {dict2_key1: dict2_value1 ... } ] Then access: dicts[0][dict0_key1]
Sorry, this is a long one, but I'm really excited with how well my prototype is working that I think its worth sharing in its current rough state: I'm working on a new functional reactive library for Python, built on top of asyncio, but while trying to make it fit more nicely into Python than trying to copy ReactiveX: https://github.com/vodik/asyncitertools/ I've thus far split it into two pieces: `asyncitertools` which will contain usual itertools like stuff in addition the functional reactive operations (like `delay` and `debounce`). But the nice thing of my approach is I've tried to make sure everything works on async_generators so it can plug nicely into the Python ecosystem. For example, for those who are aware of the autocomplete functional reactive example - because of this design choice, my version doesn't require instantiating any Observables or subscriptions: First I define a helper to read and emit messages from a websocket: async def read_ws(ws): async for msg in ws: if msg.type == aiohttp.WSMsgType.TEXT: yield json.loads(msg.data) elif msg.type == aiohttp.WSMsgType.ERROR: print(f"ws connection closed with exception {ws.exception()}") return Now lets look the websocket handler: async def websocket_handler(request): ws = web.WebSocketResponse() await ws.prepare(request) stream = read_ws(ws) stream = op.map(lambda x: x["term"].rstrip(), stream) stream = op.filter(lambda text: len(text) &gt; 2, stream) stream = op.debounce(0.5, stream) stream = op.distinct_until_changed(stream) stream = op.map(search_wikipedia, stream) async for result in xs: ws.send_str(result) return ws This pipeline, with a few composable pieces: 1. Reads messages off the websocket 2. Pulls out the provided "term" 3. Ensures its at least two letters long 4. Debounces requests (reduces number of requests if they're coming through quickly) 5. Filters for uniqueness (drops duplicates) 6. Then searches wikipedia and maps the response (flat_map is also implemented, but there's really no need for a single result). I'm finding this a lot easier to work with now than rxpy or aioreactive, so I'm hoping it'll continue to show promise as I flush it out. --- The other piece of the library is to try and create a useful `Observable` object. An `Observable` is basically a `Future` that can return multiple results (just like how an `async_generator` works, but there's no corresponding `Future` API like there is for coroutines). Borrowing again from ReactiveX but trying to pick more Pythonic method names (`stop` instead of `onCompleted`, `set_exception` instead of `onError`, etc...) There are two reasons for this: 1. Some operations are much much easier to implement with `Observable` then with `async_generator` (e.g. `delay` was a pain). 1. Sometimes you need to emit messages into a pipeline from outside API boundries (e.g. from a callback): . my_observer = observer.Observer() obj.add_callback( lambda event: asyncio.ensure_future(my_observer.send(event)) ) async for msg in my_observer: print(msg) 
We were similarly overwhelmed by Mayan EDMS, the basis for open-paperless, which is featured. I spent a bit of this morning trying to install it from git, and it's kind of a mess right now. master and docker branch aren't clean out of the box.
Nice, I haven't heard of that. Actually haven't heard of the podcast either. So double thanks.
Sure. The podcast is very good. I’d also recommend talk python to me. (https://talkpython.fm/)
If you're hard set on doing it and don't want to define a list to hold them as [unveiled14](https://www.reddit.com/r/Python/comments/7pgxnd/does_python_have_a_module_or_a_function_for/dsh553e/) suggests you can do the following: def get_dicts(): return [value for key, value in globals().iteritems() if not key.startswith('__') and isinstance(value, dict)] It iterates over the all global variables (globals()), discards those that start with '__' since those are most likely internal to python (and if not you shouldn't be using them) and then keeps those that are a dict. This being said, you should generally not be using the globals method and should instead be declaring a list or doing something else altogether as other have suggested.
dash from plotly is very nice for the web
&gt; As silly as I thought it was at the time, it's best to understand how to do it in the form of a while loop, as that is what most interviewers are really asking. /me writes an outraged and snarky response at how stupid you are /me thinks for a second /me realises you're taking the piss out of the interviewer /me deletes response Phew. Dodged a bullet there.
I would imagine there are a lot of different preferences for this. Personally, I like soft acoustic stuff in a language I don't understand, usually French. Seed a Pandora station with Carla Bruni.
There are several paths. I would recommend starting with [Andrew Ng's](https://www.coursera.org/learn/machine-learning#) machine learning course to get the theory and implementation of common algorithms and models. If you are a visual learner you might enjoy [Siraj Raval's](https://www.youtube.com/watch?v=xRJCOz3AfYY&amp;list=PL2-dafEMk2A7mu0bSksCGMJEmeddU_H4D) math of intelligence series. Or [Sentdex](https://www.youtube.com/user/sentdex/playlists?disable_polymer=1) which is a little more practical and teaches less theory. Learning is accomplished by practicing. I never got going in data science, or ML until I had some work to apply it to. So I would actually recommend getting an internship to learn it at. What kind of engineering? I am getting a BS in Civil Eng. and while data science is really great to learn there are much more important things in summer internships than getting paid. 
What is the thing that’s blocking you? Finding the services or actually sending the messages?
What is the thing that’s blocking you? Finding the services or actually sending the messages?
What is the thing that’s blocking you? Finding the services or actually sending the messages?
You're right, big data is a bad term for what I meant. I was more thinking in the lines of learning tools for working with a bit larger datasets than what you normally encounter when you're a beginner.
From the blog post: &gt; It’s short and sweet—but, in my mind, the biggest downside to reversing a string with the slicing syntax is that it uses an advanced Python feature that some developers would say is “arcane.” Come on now. Slicing is absolutely fundamental to Python. If you don't know slicing, you cannot call yourself an expert, or even intermediate, Python programmer. Or at the very least, regardless of what other skills you have, you have a bloody enormous hole in your basic Python skill set. A Python programmer who doesn't know slicing is like a carpenter who doesn't know how to use a hammer, or a chef who can't make toast. Calling slicing "arcane" is like calling `+` and `*` operators arcane. If is true that slicing gets ... weird and complicated ... if you provide a negative slice other than -1, especially with start and end positions: sequence[15:2:-3] but since there is hardly ever any need to do that, I don't care. There are three indispensable versions of slicing that every Pythonista ought to instantly recognize just by sight, like we recognize that `+` means addition or concatenation (unless overloaded). sequence[start:end] # either start or end or both can be omitted sequence[start:end:step] # likewise, and for positive values of step sequence[::-1] # to reverse 
This seems very cool, thanks! 
I also ran into this problem yesterday! I found an archive of the package, downloaded it, and are hosting it ourselves and are referencing our copy until it reappears or doesn't? https://files.pythonhosted.org/packages/source/p/pypugjs/pypugjs-4.2.2.tar.gz
You are probably absolutely right. I'm studying engineering physics, but only in my second year at the moment. It's usually quite hard to get summer internships so early on where I'm from, so the alternative is to work at a grocery store or similar. Doing this instead, I figure I'll have a head start for the most interesting internships coming years if I have a basic understanding of machine learning.
Doesn't this require one to own MATLAB?
If you like cryptos then consider trying to use machine learning methods to understand the market data. You already have an intuition for the datasets so you can validate your methods and results more easily than with a whole new system
PyqtGraph if you need to embed it in a Qt application. However, maptlotlib looks a lot better if you use `plt.style.use('ggplot')` to make it look more like R's beautiful graphs.
Thanks for sharing. I like Bokeh as well. I will check out GeoViews. 
Potentially look at AWS Sagemaker tutorials.
If you're using Python 3, take a look at ysing Path from the std pathlib. It's so much better.
I mostly do visualizations for web apps and this might sound a bit heretical but my go-to visualization tool is [d3.js](https://d3js.org/). Of course this means python is relegated to some sort of web backend. For heavy GIS lifting I like qgis.
Maybe start with this: `plt.style.available` Then choose `plt.style.use('ggplot')` See also Matplotlib based packages: Seaborn (import seaborn.apionly as seaborn) ggplot (for python) pandas.plotting Non-matplotlib: Bokeh + Holoviews + Datashader are interesting. Vega, Altair are also interesting options.
I highly recommend "How to think like a computer scientist" by Allen Downey. It covers all a person needs to know about programming through Python, without going too much into details.
This is interesting. I like the decorator syntax. It's got some java-isms (`GitHub.get_repos()`) instead of exposing python collections (`GitHub.repos`). Things decorated with `@get` appear to return iterables, but the setters (create, update) are very distinctly functions. What clients implement serverside-collection-mutation well?
Um I don't run that site...
&gt; matplotlib ... plots look crude. Have you looked into matplotlib 2.0 and/or styles? I'm quite the fan of the fivethrityeight sytle. It even makes sizing work a lot better (at least relative to matplotlib ~1.5). https://tonysyu.github.io/raw_content/matplotlib-style-gallery/gallery.html
This! Holoviews is basically the Seaborn of Bokeh.
&gt;Mybridge: &gt;In this post, we picked projects that were first published or had a major version release in 2017. Pandas and Rodeo are absolutely great open source projects but not good fit for this post due to this recency factor.
So you don't want to do work at all? If something is not already available then quit whining and fill the gap. Software development is about problem solving. Try it.
It's not that crude to query the endpoint directly. That's exactly what you'd be doing if you were using a REST API over HTTP. A GraphQL client in the same sense of Requests as an HTTP client isn't any more than that. Like I said, the abstractions in Relay and Apollo are around state, not querying. The client itself is trivial. And, no, not many people write interactive clients in Python that would require that sort of state management. Again, that's why people use Requests rather than, say, some more complex REST client that builds a local cache of remote state.
R-shiny is excellent for data visualization. R in general does really well for viz. While it's not python, it's still highly recommend and can easily be integrated into a Python based workflow.
Well, I'm studying engineering physics in order to get a broad knowledge of physics and mathematics, but in the future I see myself going more towards the IT aspect of things. So it's kind of my own exploration of topics I think seem interesting and might gravitate towards in the long run. But I'll definately keep that in mind and look it up!
&gt; I prefer to write generator expressions whenever possible since I always assumed they are faster. Generators are more memory efficient which not means they are faster in all cases. If you need to iterate through the same data multiple times it would be faster not to build a new generator every time so building a reusable list would spare some time. Don't forget generators are lazyliy evaluated and consumable. A list on the otherhand is somewhat persistent.
How could I have missed Alex Martelli? He has forgotten more about Python than I've ever learned.
Oh, wow! You weren't kidding. I've been primarily using seaborn for a while. I'm definitely going to have to give bokeh another look. The new viz support and static exports were basically the showstoppers that kept me from using it previously.
I wasn't too keen on making my own GraphQL API Client abstractions, but now I am. Thank you. Perhaps I will even release them one day as free software.
Some languages are easier to learn than others; some embody modern concepts better than others. The classic example is the Java hello world code. public class HelloWorld { public static void main(String[] args) { // Prints "Hello, World" to the terminal window. System.out.println("Hello, World"); } } The student has to be told to ignore what public means, ignore class, ignore void, ignore main, etc. and just type this. The student types it, it prints "Hello world", but they look at it and say "I have no idea what I just wrote." That does not give them confidence. Now Python: print("Hello, world!") Much simpler. The student says "I did that!" and they understand what they did and they get a bit of confidence that programming isn't going to be something scary. A language that is filled with exceptions to rules and "gotchas" is also going to be confusing and a confidence-sapper. And in the specific Pascal/Delphi case in South Africa, it's expensive, proprietary, and the IDE only runs on Windows. That means many kids are not going to be able to run it at home or after they finish the class. The number of books, open source libraries, and other resources available to them is practically nil compared to more mainstream languages.
This looks very much like an [XY problem](http://xyproblem.info/). Explain instead what it is you want to do at a level above this. What is the real problem which you are trying to solve by using these dicts.
Lots of good suggestions here. I have also used PyGal - http://pygal.org/en/stable/ But I like Plotly and Bokeh as well.
We build ion thrusters for spacecraft and we have a lot of test data which we use Python to analyze. We have basic functionality in place, but we are looking to improve our tools and make working with the data easier. We are looking to hire someone on a contract basis who has experience working with large data sets and teasing information out of scientific data. Below is a wish-list that an ideal candidate would have experience with: * Experienced Python 3 developer who deals with post-processing large static datasets (1-10GB-100GB) * Creating visualizations of the large data sets that span multiple time-scales allowing us to see the big picture ~O(weeks) and the details ~O(miliseconds) * Knowledge of interactive visualizations (manipulating, zooming, etc) * Experience with data filtering and signal processing * Looking for trends in a dataset as it progresses. * Derivative, min/max, etc. * Ability to output reports and charts from input data sets. US Person is a requirement. If you're interested PM me! Thanks!
I don’t like to rely on third party apis
Could you not just have a python file of 'my_dicts.py' Then in my_prog.py from my_dicts import * bosh
I should have added that when I only need it once. Or to make a chain of actions that all get evaluated as they are produced. 
https://www.somafm.com This is my favorite website for coding and/or background music. They are ad free and entirely listener supported. I pay a small monthly amount. I mostly listen to Groove Salad, but also like Black Rock FM (their channel for Burning Man), Space Station Soma, and Drone Zone for late at night. I also like Suburbs of Goa and PopTron for more upbeat times.
I personally like http://mynoise.net for white noise to go along with the music. This gets rid of those in between song distractions and can be tuned to hit vocal ranges. This helps cover up the noise that would come through. My wife hates that I can't hear her call out to me anymore. It's great. Edit: formatting and it's .net not .com which I thought it was.
Only for scientific packages, and generally not by enough for it to matter.
USB or serial? Or serial-to-USB adapters?
I just signed up, it sounds good so far!
I used to listen to that a bunch a few years ago. Glad to see they are still putting out episodes.
I'm sending serial data to several Arduinos via the USB port.
didn't work with brave browser :| (i need to buy some more ram so i can run chromium)
I second this. They have their revenue model, but everything I do I do in offline mode and just import the submodules from there. Just did an analysis for a client with 31 graphs. Created the graphs for the analysis in a jupyter notebook and then had to do the rest in PowerPoint. No cost for the analysis and plotting except my time. 
How are they wired together? Each to a separate USB port?
&gt; when I only need it once Then I am not aware of a case where a generator is slower than a list. The reason `.join` was faster with a list is that it actually needs to go twice over the data. It was just not that obvious from the beginning.
I got lucky at the 2017 Python Developers Survey that the Python Software Foundation and Jet Brains did. The package included a Python T-Shirt, some stickers, a notebook, a pencil and a fidget spinner with Python logo. Jet Brains put in a very nice notebook. Now I have to find a nice place on my laptop for another Python sticker :) If anyone from the organizers reads this: thank you very much, this is super! 
Cool! The atmospherics also help a bit creating that zone one wants.
if youre not sticking to just python take a look at D3.js as well. some amazing visualizations over there too. 
Yes. One USB per device.
&gt;Holoviews is basically the Seaborn of Bokeh. Oh really! I'm gonna give it a spin
Are these boosts mostly from enabling compile-time flags that ensure leveraging Intel AVX when building from cpython modules from source, and swapping out some inner-implementations for Intel's (hand-tuned) implementations?
Yep. Specifically using Intel MKL, and I believe Intel's ICC compiler.
Then yeah, PySerial is what you should use.
Try Videogame-Soundtracks. Classic Super Mario or Zelda or wathever you played. They were designed to support concentrated play, and if you one from a game you know, you can trigger the memories of the state of playing that game.
Looping the device addresses and creating a serial in its own thread and keeping the serial connection open and pushing data the right approach for a long running process? 
You might want to look into asyncio instead.
Im a beginner, and I want to do something somewhat difficult. Right now I’m making a graphing program to interpret functions and graph them (pretty self explanatory).
I spent a week or so exploring and comparing various plotting libraries with some notebooks: https://github.com/dovinmu/python-viz-notebooks. I ended up focusing a lot on geographical viz, which is kinda complicated with matplotlib. Really liked geopandas for a good balance between extensible and concise. 
Correct behaviour would be: in the first screen you click new search and enter a keyword before pressing 'next step'. The programme would then collect the top google scholar results and display them in step 2 under 'candidate seed articles'. You would be able to select them and then click 'add' before going to the next stage. It appears that this is the step that's broken at the moment as the script doesn't seem to be able to parse the articles and nothing is displayed in step two, so no articles to select. The programme has however managed to navigate to the right spot as evidenced by clicking the 'view current page' button (which has been put in to help overcome captchas.
The 'f' in front of the 'string' &gt;&gt;&gt; print(**f**'make a string containing {a!s}')
Get outta here!!! ^^^i ^^^guess ^^^R ^^^isn't ^^^awful ^^^tho
Disclaimer: I'm not totally sure what I'm talking about. As far as I understand it this doesn't provide actual python acceleration, but instead accelerated dlls for some high perf scientific libs which use c bindings, specifically numpy, scipy, and scikit-learn. It might be worth it performance wise (I'd say the mkl numpy version is reasonably faster than vanilla), but my python install and distribution process is already a nightmare as it is. My 2cs of understanding, if you're doing e.g. django this is completely useless.
It was a mr robot reference
The same here. Seaborn was my way to go after spending too much time in Bokeh 0.9. 
Ahh my bad, I'm not up to date on season 3
http://www.pyqtgraph.org It's also designed for people that need to look at *a lot* of data. The others start choking when you start looking at large datasets.
Like this? /tmp $ cat test.py #!/usr/bin/env python """Test.py Usage: test.py [--longopt] [-d &lt;value&gt; ...] [&lt;value&gt; ...] Options: -d &lt;value&gt; --longopt """ from docopt import docopt if __name__ == '__main__': args = docopt(__doc__) print(args) /tmp $ python test.py something else third {'--longopt': False, '-d': [], '&lt;value&gt;': ['something', 'else', 'third']} /tmp $ python test.py -d something else third {'--longopt': False, '-d': ['something'], '&lt;value&gt;': ['else', 'third']} /tmp $ python test.py -d something -d else third {'--longopt': False, '-d': ['something', 'else'], '&lt;value&gt;': ['third']} /tmp $ python test.py -d something -d else -d third {'--longopt': False, '-d': ['something', 'else', 'third'], '&lt;value&gt;': []} /tmp $ python test.py something -d else -d third {'--longopt': False, '-d': ['else', 'third'], '&lt;value&gt;': ['something']} /tmp $ python test.py something else -d third {'--longopt': False, '-d': ['third'], '&lt;value&gt;': ['something', 'else']} This is really all about specifying correct usage patterns. &gt; All three variants are supposed to yield identical results, which your examples above doesn't. That's because your proposed ui is ambiguous.
I would like a pack like that. 
yeah, make a script #!/bin/bash /path/to/venv/bin/python /path/to/file.py And put that script in your $PATH. A customary place for binaries that are provided outside of distro packages is /usr/local/bin
I've found it was in 2017 and only 100 lucky winners
Fill out the Python Developers Survey and at the end you could enter an e-mail address. I don't know when the next survey will be announced and if there will be a chance to win some things but I will follow the Python Software Foundation blog (not only) for that. Last years announce is [here](http://pyfound.blogspot.de/2017/09/join-python-developers-survey-2017.html).
I'll keep my fingers crossed you get lucky the next time! 
Did you ever find the answer to this, it looks like a common issue, I have it too. 
You can download and use both locally. It's all open source.
I like Pandora and go to music for studying. I can't concentrate with words. There is a Beats for Studying that isn't bad for me.
I want that fidget spinner lol
Can you give us/create a fake version of /Users/dollypartonsfarts/csvwork/countyVoterDbWithColumns.csv with some(~10 lines) of data? That will make it much easier to help you.
This is an excellent list.
Your opinion is always correct. I _sometimes_ have the same opinion. Is there anything in standard library or documentation or PEPs that supports this position?
Celery is another option. It integrates very well with Django. celeryproject.org
I only barely know python 2.7 :(
For ssh you may as well use key auth to prevent dictionary attacks. The second benefit of keys over passwords is that you can use an ssh agent so that you need'nt supply your passphrase more than once per login session. With ssh-agent running you can then use this: http://docs.paramiko.org/en/2.4/api/agent.html The downside to this is that you can't run unattended or from cron.
How hard is it to have more then one in flask?
[There are a lot of good free books](https://py.checkio.org/blog/top-5-classis-free-python-books/).
Been using di.fm for 3 years. Great, especially when they got rid of Flash (that was a joke). Plus they allow you to export playlists, which I use in ncmpcpp.
Those books all seem to be on more of an intermediate level. If you are brand new to python I don't think those will help you much. We have [a pretty long list of free learning resources in the wiki](https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_programming.3F). Try a few of those and see what resonates.
https://www.reddit.com/r/Python/search?q=humble+bundle&amp;restrict_sr=on
You can have as many as you want when you run and host all the code and graphs locally.
Wow!! 
That fidget spinner is nerdy and cringey at the same time, I love it! 
Well I *tried* to work on some data transformations, instead I discovered that the environment only has python**2.4** installed. I can't even use 'with open() as:', and had to explicitly close files like some sort of peasant.
Anywhere I can get the snake sticker?
You might want to check out this [post](http://pbpython.com/excel-diff-pandas.html) which walks through doing a comparison of Excel files. It's an old article that needs some updating for the latest pandas but it is not too terribly complicated.
Jealousy doesn't even begin to describe how I feel right now.
Jake Vanderplas gave a fantastic talk on this at PyCon: https://speakerdeck.com/jakevdp/pythons-visualization-landscape-pycon-2017
How did you install requests? It looks like you’ve downloaded the source code rather than using pip to install it. 
Check out [Xarray](http://xarray.pydata.org/en/stable/) - it'll automatically align all your arrays and makes time-series analysis of this kind of data trivial, along with many other useful features (including the best plotting support for gridded data I've found).
The reason npm is filled with crappy tiny packages is probably, at least partially at least, to do with the multiple crappy sometimes incompatible stdlibs that JS devs have to deal with. With Python, things like padding to the left (and right, and centering even) are accomplished with our full featured stdlib. Even Promises are in our stdlib instead of being farmed out to hundreds of libs by default. Now, if the Python stdlib being so full featured is good or not is a different argument altogether. I think it's a good idea on the whole with a few bad things in it. 
Soma.Fm(Defcon, Fluid, Indie Pop Rocks, PopTron, Groove Salad) and DI.FM(Liquid Dnb) are my goto.
I would say get a raspberry pi and use it in conjunction with python to do something cool. Maybe try /r/raspberry_pi? [Check this book out](https://automatetheboringstuff.com/)
https://github.com/plotly/dash link for the lazy. It's basically `charts.js` but better.
Thanks! How do I import graphs?
Thanks for the thorough description! I was able to reproduce the problem. Let me dig around and I'll get back to you.
Same... same
Found the issue.. The script was in a directory where those files were referenced.. The files located in that directory had outdated packages.
I'm graduating my university soon so I'm working on my final project. It is source code attribution written in Python using random forest classifier. I collected data from github so it is really random and it makes classification quite hard. It works but the accuracy is not that good - around 74% for a set of 25 programmers. This week gonna see how much obfuscators affect the accuracy and finish my final paper (I hope). 
Awesome. I'm very jealous.
https://plotnine.readthedocs.io/en/stable/
Join the Desert Python Meetup group and go to one of their open hacks on a Saturday. You can get help or help others with coding and projects at those.
Normally I'd agree with you but it's *Python* fidget spinner
Hi! There are resources in the sidebar that might help - find one you like and work with that. Also, check out /r/learnpython 
I'm just annoyed I have to go through extra clicks if a google search returns Python 2.7 docs as its first result. 
I'm a big fan of epic trailer music. [Trailer Music World 1](https://www.youtube.com/channel/UCjSMVjDK_z2WZfleOf0Lr9A) and [Trailer Music World 2](https://www.youtube.com/channel/UCt6paKp4Sr4s5sxSxKWOIcQ) are a couple of youtube channels I go to to find new stuff. Thomas Bergersen, Mark Petrie, Ivan Torrent, James Everingham, Two Steps from Hell, Audiomachine are some composers/production companies with good stuff. 
Try: print("unknown OS, please update setup.py") That will work with both 2 and 3
depends on the cpu you're using, in my experience. my benchmarks on a laptop (with i7) showed major gains, but on workstation (older xeon), nada.
I am also at a big decision point for charting with flask but with dash you seem to need to run a separate flask server and embed the charts. 
what? no. Just all its core functions. 
Ya I'm jelly about the shirt and fidget spinner.
Haaa thanks icp1994
Thanks very much Barracutha! That is a great complement; means a lot! :D
Ha you made me laugh warbird2k! :P
Your most welcome jabbalaci :)
Aww thanks mutatedllama! It is free! Donate to Heart Research Foundation instead; they need the money more than me and are doing great breakthroughs which help many people &lt;3 :)
That is great jwink3101! If there is a specific topic you find missing please let me know and I will try to generate a PDF book for it
Thanks WritingAScript, ur most welcome! :)
Hi icp1994, I will try and re-group the chapters :)
Thanks AIwolf92! Good to hear you love it! If you have any recommendations to improve the book please let me know :)
Hey thanks a lot! This is cool stuff, this will help me a lot. College only taught me the fundamentals so far, didn’t really teach me python, rather they taught me general programming and used python to do it. I had to look up the fact that it’s a scripting language, and then realized how many things utilize it. I’ve also heard some people talk about how they hate python but I have nothing to compare it to cause that’s all I’ve learned so far besides tinkering around with obj- c and swift. Next class is JavaScript so I’m eager to learn about that as well! Thanks again, for the info!
no, but in theory, any WSGI, I repeat, ANY WSGI application could be mounted to another. e.g. you can mount the whole dash app in a sub path like `/dash/` in your own project.
Or, use SSH keys (eg, with ssh-copy-id from source to dest server) without password-based encryption; then you can run unattended from cron. Mainly you need to keep the private key file secure, eg "/root/.ssh/id_rsa" (if your cron script runs as root user), but that's just about the same as also needing to keep "/etc/shadow" secured. 
I just wonder if i should just hard-code urls of other microservices in env variables and then communicate with them via requests library or should i use some other way.
Envious! Looks awesome!
Thank you TheKewkStore. I tried the following: def SvcDoRun(self): rc = None dummy_file = open('C:\dummy_text.txt', 'w+') trace = str(time.time()) + '\n' dummy_file.write(trace) dummy_file.close() self.timeout = 5000 while rc != win32event.WAIT_OBJECT_0: rc = win32event.WaitForSingleObject(self.hWaitStop, self.timeout) But it still doesn't work (same error).
**For hire** A predicted first-class Physics MSci. student graduating July 2018, UK. My dissertation involves application of deep learning on MRI scans using TensorFlow. I have previous experience developing software for automated diagnosis of lung damage using various time series analysis. I am particularly interested data science and backend development roles in computer vision, analytics, technology or FinTech companies. Open to relocation. [Github](https://github.com/isawan)
Microservice discovery can be an interesting topic in itself and there are tons written online about it. For a simple set of services your solution would work fine.
Don't worry about that - we all had to start somewhere.
Visiting Python conferences is usually a good way to get you some Python stickers. And also to meet nice people, have a chat and learn some things!
GeoViews is a Holoviews subproject, which work on top of matplotlib or bokeh. Nice tool, very handy.
Python 2017 only adds an 0 and a 1.
I made the mistake of trying to read this cover to cover, and after a monumental effort, ground to a halt about halfway! That said, it is very thorough, and is actually much more useful now as a reference book, that I dip in and out of when I need something explained.
Well, it seems we are going maintain this package internally in the short term, but it feels problematic in the long run to maintain this kind of dependency.
Yes I understand what this does, I'm just saying that shouldn't it be like : 4 times take input and then make that into sets. So it should be the for loop syntax first and then input, and this will be inside the set. Won't that feel more natural?
Holy shit yes. I want one too! Having a fidget Spinner at hand while coding helps me so much. I broke mine. 😢
You can use supervisord perhaps? http://supervisord.org/
What you're looking at is a *generator comprehension*, which is a specific kind of *comprehension* syntax... it does make logical sense, though that's not the easiest to read example of it. So let's go with something simpler, the *list comprehension*. First, let's assume what we want, ultimately is a **list** of the squares of the first ten integers, starting at 0. You can build that two ways, using long-form syntax: result = [] for n in range(10): result.append(n**2) Or using a **list comprehension**: result = [n**2 for n in range(10)] Which looks a little odd, but when you read it as "give me a list composed of **n** squared for every **n** in the range(10)" it makes more sense. The idea of *comprehensions* is to present a general way of assembling *containers* that require for loops to build. So say you wanted to build a **dict** instead: result = {} for n in range(10): result[n] = n**2 Could be stated instead in *dictionary comprehension* form: result = {n: n**2 for n in range(10)} Or say you wanted to build a **set** instead: result = set() for n in range(10): result.add(n**2) Could be stated instead in *set comprehension* form: result = {n**2 for n in range(10)} Which, rather confusingly, brings us to the *generator* form: def squares(): for n in range(10): yield n**2 result = squares() Which becomes: result = (n**2 for n in range(10)) Now, don't ask me to explain why they chose that specific syntax for the last one, or why it's not creating a tuple, or why the parentheses are actually optional if the comprehension is already inside the parentheses of something else ... sometimes language designers like to *hurt* people ... but once you get the logic of comprehension syntax down you'll notice that it actually provides a more compact and consistent interface, because you don't have to remember **append** for list and **add** for set, etc, instead there's just one generalized form. Also, though it's beyond the scope of this to try and explain fully, comprehension syntax allow you to do conditionals as well. print([n**2 for n in range(10) if n % 2]) Which can be incredibly powerful, especially in the generator form.
1. Please post questions like this to /r/learnpython. 2. Did you test this? This code as posted can never work, because it's trying to make a set out of a collection of lists, which is impossible, because lists are mutable and therefore not hashable, so they can't be elements of a set. I suspect that you've put a parenthesis in the wrong place, and you actually intend to make multiple sets, one for each variable: `a, b, c, d = (set(input().split()) for i in range(4))` 3. That's not a for loop; it's a comprehension -- a shorthand expression which compresses a loop into a single line. Understanding why the for comes after everything else may be easier if you see other comprehensions and read them out loud: [x for x in mylist] # copy of the list [2*x for x in mylist] # the list doubled [x for x in mylist if x % 2] # odd numbers [x**2 for x in mylist if x % 2] # squares of odd numbers ["The value of %s is %s" % (x, y) for x, y in mydict.values()] # key/value pairs formatted as a string ["The index of %s is %d" % (v, i) for i, v in enumerate(mylist)] # index/value pairs formatted as a string (You can change the output container to something other than a list by using different brackets.) Whereas you read a for loop as "for each thing in group, do something with thing", these expressions are read as "give me this transformation of thing for each thing in group, possibly filtering by some property". It's the equivalent of a for loop where you create a new emmpty collection beforehand and add a value to it, possibly after filtering and/or transforming it, for each value in the original collection. This is a good example of where *not* to compress a for loop into a comprehension. I had to think about this for a long time to figure out what you were actually trying to do and why it was broken. You can write this out in full like this: number_sets = {} # put the values in a dictionary instead of using separate variables # iterate over the dictionary keys, which were previously the variable names for key in ("a", "b", "c", "d"): numbers_string = input() numbers = numbers_string.split() number_sets[key] = set(numbers) You can compress the lines inside the loop more to eliminate intermediate variables -- this is a matter of taste and legibility. This is my best guess based on your dummy code -- I assume that your variables aren't actually a, b, c, d. If you post your real code (in /r/learnpython, not here) we can suggest something more specific. For example, it may be more appropriate for you to store the sets in a list, if the order is important and the names are not.
Wow, thank you so much for your reply!! It's perfect, just the kind of information I was looking for :) it's so much easier to get started with something if someone explains how all the pieces fit together. I will make sure to look into the courses and articles you mentioned.
Automate the boring stuff is a good book, and it is free to read online.
A PYTHON FIDGET SPINNER? FUCKING LIT
If you want a 'normal' for loop, there is no shame in using a standard for loop. Comprehensions and generator expressions (what you are actually using here) use this kind of compact syntax, where the 'for ' bit comes at the end. While considered quite pythonic, they could be confusing at first. Start with simple list comprehensions and work your way up.
Too bad no one will see the logo when it spins
This looks interesting, I wonder if anyone has got a guide how to install these. I presume all the calls are the same it is just heavily optimized for Intel Processors, Processors been good at math and all. It would be interesting to me to use these functions. 
Ever considered video game soundtracks? I listen to Final Fantasy 8 (and sometimes 15) a bit when working.
Aah, I guess I should pass my own client - https://uplink.readthedocs.io/en/latest/clients.html#uplink.RequestsClient.
I'm with this guy. those Python3 stickers look awesome!
Anyone else having problems filling in the form trying to download this? https://software.seek.intel.com/python-distribution 
So it work but feel like leaky abstraction:- from uplink import Consumer, get, headers, Path, Query, RequestsClient import requests class MyAPI(Consumer): @get("voice/dins/") def list_dins(self): pass session = requests.Session() session.auth = creds client = RequestsClient(session=session) myapi = MyAPI(base_url='https://api.my.com/', client=client) print(myapi.list_dins()) print(myapi.list_dins().content)
Is [this](http://www.unixstickers.com/stickers/coding_stickers/python-clear-snake-sticker#intro) the same sticker?
IMO the best two books to teach yourself are Python Crash Course and Automate The Boring Stuff. 
Yes, looks like it. 
nice pack:)
[removed]
Nice work man! 
Nice one! But i have to point out that the name might be a bit bad to be associated to a commercial entity? 
Your problem isn't with your co-worker, it's with your boss. You are allowed to have vastly different ideas of how things should be (I'd argue that's a good thing as you'll have to constantly justify your decisions and it exposes you to new ways of working), but you should be putting those differences in front of your tech lead and he should be making decisions based on those arguments.
I want some
Stretches basic syntactic explanations over 8 pages, uses odd terminology (e.g. `TRUE` rather than the actual `True`) and fails to cover the actual semantics (that it works on non-bool, truthiness, its overridability and its fallbacks). 0/10, would not waste time again.
[removed]
Yes. I like this too, but i can't come up with more video game tracks i haven't listened to already :P
Generally that's what's called a [Bin-Packing Problem](https://en.wikipedia.org/wiki/Bin_packing_problem) (and, if you're trying to take weight into account, the Knapsack Problem), and in your truck's case the 3D variant. This is not an area that benefits much from machine learning, as there are already many good heuristics for finding efficient but not necessarily optimal solutions, especially when what you're trying to pack is geometry of regular shape, and the best an AI is likely to do is evolve to eventually meet the performance of one of those. Now Tetris is somewhat different, because the geometries aren't all simple boxes and the order of packing isn't determined by you (unlike the truck), so it's not trying to efficiently pack the whole space so much as to optimize for clearing of single dimensional lines within it. You could definitely teach and AI to play Tetris (google it, many have), but a really good Tetris playing bot wouldn't be particularly good at packing your truck unless you were also, for some reason, packing your truck with pieces of the same shape and consistent size as Tetris pieces arriving in random order and increasing speed. I'd start with reading about the basic problem and the heuristics that exist for solving it, then move on from there to finding libraries that implement them.
It's probably meant for you to ironically display on your desk.
The license is ASL 2.0 but I assume that by *commercial entity* you mean the relation to the company behind this. I don't know, I'm not native english speaker so it's hard for me to understand how the name sounds. I picked this one (over things like pytest-validation, pytest-schema, etc.) because it just directly tells you what the library is about. There seems to have been some discussion about the name in https://github.com/alecthomas/voluptuous/issues/287. At least the author doesn't find the name problematic. The ticket seems to be locked, uh. So yeah, that's a good point. But maybe it'll play to advantage at first, and invite people to take a look at the lib due to the name if nothing else :)
Thanks for sharing.
The `timeit` module in the standard library does what you want.
"is distracting from getting work finished" Your manager doesn't need to be technical to understand that statement. You either need to bring in a tech lead or one of you needs to become the tech lead. 
You should post this (but with *lots* more details) in /r/learnpython 
How I do it: # Get values from config flat file def get_config(x): with open(config_flat, 'r') as f: for line in f: if '#' in line: pass else: if x in line: return line.split("=")[1] else: pass Then your flat file: ################################# # Alarm settings flat file ################################# # Temp probe's google account information # Temp probe google account name. tp_user=UserName # Temp probe's google password. tp_pass=Password1 So you would pass "tp_user" to your function and it would return "UserName"
At this very minute, making myself a mini command line game library. Functions to create worlds, draw worlds, build houses within those worlds etc. Still working on my card game sim, almost onto all the fun multiplayer stuff now. And was messing around with kivy, figuring out collision detection and seeing if I can have a number of different screen managers with the same kivy window (I can but good idea to subclass screens to floatlayout firsts, otherwise it gets all weird).
`os.makedirs(path, exist_ok=True)`.
You might be thinking of the GPL, rather than the AGPL. Put simply, AGPL requires that you give users the ability to view the source code of any software that uses the library, hence the commercial license exists for those that cannot open source their code. Hope that helps!
I'm an idiot and forgot to mention that this is in Python 2.7
thank you for your reply. I will go ahead and search for the heuristic technique.
Atom ide is created by github, extremely useful with some packages such as teletype, hydrogen, atom runner, and script-runner
Yeah it IS tiring. Tell your boss how fucking tiring it is. Make it clear to him how the company is losing money because of chuckles the wonder dev and his incompetency. If you can't get traction, move on.
It doesn't have all the features of Celery (who uses all of them anyways) and also slightly suffers from some initial design decisions mainly related to how it represents jobs on Redis. It's just 3k SLOC (2k of that the actual functionality) though. This makes contributing and fixing bugs actually possible. Try that with Celery and it's 40k SLOC. edit: It also has almost no documentation, but we didn't need it anyways.
I use pytest-benchmark. It doesn't generate the pretty graphs but the end results are similar.
What do you mean by "extend the executable with additional functions"? Are you trying to hotload your code into another program?
https://stackoverflow.com/questions/1835756/using-try-vs-if-in-python#1835844 Here's a good read to your question. Something you might need to always keep in mind.
Working on the Flask site I mentioned last week. Set up the Bootstrap 4 framework and have a basic home page set up with some nonfunctional page elements (navbar, search box, etc.) and a big "Under Construction" message. I put the WIP site up [here](https://www.emberquill.net/) while I'm working on it. Source code's on [GitHub](https://github.com/EmberQuill/website).
To be honest I don't really know what I mean either, but what you said sound's right. I just remembering seeing the thread and saving it to read later, but apparently I forgot to save.
If two machines attempted to make the same directory, and one machine did so just a few clock cycles faster, option A might throw an error on the second machine. Option B is more stable and more predictable, and should function faster (barely) since it doesn't have to go through a conditional before running the real operation.
Yeah more fidgets spinners for the landfill...awesome
Love it, followed! How do you download the pictures using python?
Congrats on releasing your first project! I don't use the logging module, so it's not of any direct use to me, but it looks like a good example of how to make a GUI using Qt, which I'm definitely interested in.
Thanks! I definitely recommend Qt. The [docs](https://doc.qt.io/qt-5/) are great (they are for C++, but language differences don't really matter) and everything mostly just works how you would expect after you get a solid grasp of the basics. It's not that difficult as it might seem in the beginning, so I encourage you to give it a shot.
A "trick" with qt is also to use qt designer, just set up everything exactly as you like(if you make something very complex you might want to spend an hour on youtube layout tutorials but that's it) and then save the file and do pyuic -x gui.ui -o gui.py and then youll see exactly how to do something without looking at a single line of documentation :D
Good for you! As one of my other projects grew, the terminal eventually became constraining enough for me to pause development and throw together a GUI real quick. Maybe it will be useful for someone else, so I decided to release it. It's not like I'll never log to a terminal anymore, but it's good to have the option of a more powerful logging output when the situation calls for it.
Very cool project, congrats on the release!
Sorry for the delayed response. Yeah, authentication is not super straightforward at the moment and is something I want us to work on for the next minor version release (v0.4). As you mentioned, having to provide a custom `requests.Session` instance that encapsulates your credentials breaks the abstraction for most users. Thanks for the input! I'll open up a GitHub issue to track progress on improving auth support.
I'm actually right in the middle of building a Flask site that will eventually hook into a few RESTful APIs. This should be pretty useful.
This seems like it could be very awesome during development. I'd be less interested beyond that as I want my logs forwarded to the aggregation and retention tool. Although I guess with python logging you just add another handler and it does both.
I find the logging module vastly superior to print for debugging.
None as I find micro benchmarks to be a complete waste of time.
Why was it constraining? 
I recently got into automatetheboringstuff and it's a good resource. I also use learn python the hard way which has been helpful as well (https://www.amazon.com/Learn-Python-Hard-Way-Introduction/dp/0321884914/ref=sr_1_2?ie=UTF8&amp;qid=1515698534&amp;sr=8-2&amp;keywords=learn+python+the+hard+way). I've been studying python for only a month but that book + codeacademy has been a good combo.
I remember your previous post. you have a cool thing here, congratulations
Maybe I log too much or something, but just having one big dump of all messages that I could only control by searching was giving me a lot of friction where none should be. Just filtering that cutelog provides makes it all worth it -- I can concentrate only on things that matter and forget about hundreds of other unrelated messages that are flying past.
You had me at "dark theme"
I often do the former, but my understanding is that the latter is more pythonic. It comes down to "look before you leap" (LBYL) vs "it's easier to ask for forgiveness than permission" (EAFP). I found [this article from Microsoft](https://blogs.msdn.microsoft.com/pythonengineering/2016/06/29/idiomatic-python-eafp-versus-lbyl/) which goes into it a bit more. Personally, I would say that since you are not only looking for a certain error (`OSError` vs just an `except`), but you are looking for a very, very specific type of error, it doesn't really matter one way or another.
This looks awesome! I can't wait to try it out.
To say this article is at a beginner level is insulting to beginners. Also, besides `TRUE` and `FALSE` which are WRONG, it is just bad styling to do things like: a=1 instead of a = 1
Could you publish this under a more permissive license ? Publishing under GPL means a lot of private, for profit, companies with their own software can't touch it.
Dude, for first released project, this looks like some good shit. I haven't tried it out yet, but a locally run, color coded log viewer could really make developing nicer. Because you're totally right, it's super easy to just add a handler, and you've got that coded the correct way! (I've seen way too many people butcher the logging module). 
Thanks!
Nice, I've also been "waiting" for a new post. Congratulations on giving a talk on it :) I'll make sure to watch the video afterwards.
I wouldn't really mind. It's just that PyQt is under GPL (unlike regular Qt which is LGPL), so I just went with it as the safest option. Didn't really want to spend time picking licenses. Also, I'm pretty sure those companies could touch it however they want, they just can't use my code in their closed source stuff, which I don't think anyone is in a rush to do. If it was a library, I would see your point, but I don't think it makes sense for a standalone program. Am I incorrect here?
Can you use tail -f | grep ? You can also use grep to tell it not to show certain lines based on features. It's a good project, don't get me wrong, but you basically remade the wheel. 
Logging is much better than print statements, but the standard library's logger is slow as hell (not as slow as a debugger though). There are some faster loggers out there.
Thanks! Definitely! And I'll keep this community updated :)
Thanks! The NASA API provides a list of all the images for a given day, then I just loop over them and download using urllib.urlretrieve, then resize, and compile the GIF using PIL
Yeah, I could do all sorts of things. But having those things be one click away is nice when I don't want to spend a mental second thinking about what commands to pipe together. I am aware I didn't revolutionize logging, but I don't think I'd be as happy in the terminal. And there are many reasons for that, some of which could of course be resolved with greater knowledge of CLI tools, but not others. Sorry, people suggesting "have you tried this bunch of piped commands" is my pet peeve. I love the terminal, but it can't do everything.
Just in case you haven't run across the word before, a heuristic is basically an approach to finding a "good enough" solution to a specific problem, a problem that may in fact not have an optimal solution at all, or might only have one that would take an impractical amount of time or energy to find. It's different than an algorithm in that an algorithm is a set of instructions that always produces an optimal or "correct" outcome, even if it might take too much time or effort to be practically useful. Like, for instance, brute force guessing every possible password is an algorithm that will, eventually, crack any given password... while reading the Post-It note on your boss's monitor is a decent heuristic for getting to the same outcome much quicker.
During development I tried looking into other logging solutions people were using that I could also maybe support, but couldn't find anything. Any suggestions?
&gt; this is in Python 2.7 My condolences.
I think GP might've misinterpreted this as a library that extends logging, rather than a GUI that communicates to an application via network. GPL's infectious nature always means more lawyer time and concern for non-GPL-compatible software. In this case since it communicates over network, I don't believe those GPL clauses are generally interpreted to apply here, and a company *could* feasibly bundle this application as long as it was kept as a separate utility - not that there wouldn't be liability concerns anyway. Of course, if they were purely to use this as a tool for development internally, this isn't even an issue. (Keep note, I'm not a lawyer. This is my understanding of the situation, not legal advice.) 
My python solution: def choose_one(so_far, nums, squares): #print(so_far, nums) if not nums: return so_far else: for n in nums: if not so_far or so_far[-1] + n in squares: n2 = nums[::] n2.remove(n) ans = choose_one(so_far + [n], n2, squares) if ans: return ans def square_sum(rmin=1, rmax=15): squares, i = set(), 1 while i*i &lt; rmax**2: squares.add(i*i) i += 1 return choose_one([], list(range(rmin, rmax+1)), squares) if __name__ == '__main__': print(square_sum()) # [8, 1, 15, 10, 6, 3, 13, 12, 4, 5, 11, 14, 2, 7, 9] 
Exactly what I expected from reading the title, thanks for saving me from the waste.
So cool! Congratulations! I'll give it a whirl. Look out for nay-sayers! They're wrong, you've done something awesome.
So you didn't want to wait a mental second to think of something so you wrote GUI tool? ...??? Sorry to offend any extremely sensitive leftist programmers, btw I'm a white male
Here are a couple interesting images since I started. [Alabama beats Georgia in the NCAA Football Championship Game](https://pbs.twimg.com/media/DTFK3wtW4AAEPDh.jpg:large) [Oprah Winfrey's Golden Globes Speech](https://pbs.twimg.com/media/DS_zbK2XUAE_OQ7.jpg:large) The bot post a new image every hour. You can see it at the [hmmworldview twitterbot](https://twitter.com/hmmworldview) The project is open sourced and you can grab the code at [hmmworldview github](https://github.com/jbutewicz/hmmworldview)
Now he doesn't have to spend that second every time he wants to do something with the log. The pay off in the long run will be immense. Maybe you're talented enough to know exactly what you want at all times, but others aren't. I fuck around for ages just figuring out what it is I wanted to see. Being able to click a few buttons and swip swap the sorting and filtering around would be a god send.
Holy bananas. This is awesome. :D
This is awesome. The log itself should be a tree though, and since it's a GUI anyway, you could display * Python lists as a spreadsheet with one column * lists of tuples as a spreadsheet with many columns * dicts as a spreadsheet * bool as a checkbox
I love you.
You're not offending me, but your comment is extremely naïve.
Bahahahah well done.
I agree with you. Even if the terminal can theoretically do everything, no one wants to scan greps all day.
Good thing we have you, the smartest poster of them all. I link to logview in the attributions list, because I took some UI inspiration from that project, after finding out it's barely an alpha version and doesn't do half the things I need. Go waste somebody else's time.
That's true when 90% of the subreddit is college students using PyCharm trying to learn :D
Username relevant, you still got a long way to go.
I did use numpy, or didn't I?
Oh, sorry for scanning XD
Yeah but you could use `qtpy` instead of `PyQt5` and then claim the backend is `PySide2` and release it as LGPL. You would need to test it with `PySide2` in that case.
Thank you to everyone who submitted issues/comments about Stocktalk this past 6 months. I made some major changes, particularly with how the data is stored and visualized. Here is a [demo](https://anfederico.github.io/Stocktalk/) If you have any suggestions for future features, please post an issue!
Thanks a ton! Really! Thanks for the clarification! I wasn't sure about the difference. Why are you reporting the 'min_time'? Wouldn't it make more sense to report the median time? (Or even average?) I guess median would be best and also similar to what criterion does in Haskell.
I don't literally comment, but this is cool that you only need to add it in handler.
+1 co-worker sounds like a cunt
Hmm haven’t heard of Perl. Python just comes pre installed on macs so I’ve been using it for a few weeks. 
It was before python but it used a different version of pip that caused issues with certain things. if you don't get anything when typing perl -v then you probably don't have it. 
Thanks I’ll check that
Thanks - looks sweet on my Surface 3.
Troll harder...
Okay, I will. OP could have spun up a public ELK stack image and used the ELK stack or LogStash to do what he wanted.
Hmm, I've been creating arrays and putting them into JSON files for my logging. I didn't know there was another way.
It's all good, but for serious logging it's best to log to text files and gather those via something like Logstash into an ELK stack
But even better, he now has something that he can run locally to do what he wants and he can modify it to work exactly the way he wants it to at any time!
I'm trying to figure out how to get a mic to detect my dogs barking, and create a log with a recording. I've got the file mgmt aspect down, and it can detect sounds based on a threshold, but I'm having a hard time just picking out my individual dogs bark. Anyone have any help for me? I'm a beginner in python.
I've just gotten into Python by taking Coursera classes, I am a scientist doing bioinformatics work. I just need to modify and match strings (e.g. DNA/RNA letters) strings and moving files which Python does nicely. I'm trying to match DNA sequences from an online database to human DNA containing viruses. Not hard compared to what most of you do...
That's not even the problem. You've assumed that everyone should do things the same way you do them, and that there already exists a solution. OPs specific solution aside, I can click buttons on a UI and move data around a hell of a lot faster than I can type it out. Secondly, you say "just search for what you want", well what if I don't know what I want? What if I'm browing around looking for inspiration, what then? I'll just fuck around with random searches I guess. Fuck that noise, takes too long, and I'm more likely to give up. You're an asshole. I pity the poor fucks that have to work with you.
OP, you should totally write a review about different logging libraries
Well, the animation industry is going to move from it in 2019, so that's going to be fun. Or they won't, and be forever stuck in the past.
I reported the minimum time because that's what you did. I usually report the mean and standard deviation. I also often kick the first try out completely and report that separately as it often shows a lot of lag due to lazy imports and similar things. That start time is usually relevant, but it also distorts the statistics of the other runs.
https://pypi.python.org/pypi/perf
&gt; Although practicality beats purity. Practically speaking, the only way to get remotely reasonable numeric performance on a modern CPU is using base-2 floating point numbers. The only practical way to interact with underlying libraries and third-party tools is using base-2 floating point numbers. Your same argument applies to lots of other things. Unicode, for example. But again, practically beats purity. There are external constraints that need to be taken into account. PEP 20 is an overall philosophy, not an unbreakable law that everything must follow. There are lots of places in Python where there are multiple different ways to do the same thing. There are lots of things in Python that are hard to explain. 
Do you have any backtesting data to show?
Is this for business purposes? If so, pm me.
Would you recommend that book over any other, or why did you choose that one? And what exactly is code academy? Thanks :)
[json](https://docs.python.org/3/library/json.html) in the standard library. /r/learnpython 
You don't log to a terminal, you log to stdout, from where you can route your logs anywhere you like. Obviously you can also route things to a GUI if you like, but there is no need to instrument the logged application for that.
He doesn’t like Python? I think your professor kinda sucks. Maybe that’s why he teaches for a living instead of doing. Python would score highly in each of these. And more than most “simple” languages (&lt;cough&gt; Perl), it scales up very nicely. That is, you can use Python in a simple manner and solve a problem, or you can attack some of the more complex features it offers and still have an elegant solution. Maybe you should look into the 6 criteria for choosing a computer science professor? 
It's for a voterDB file for a PAC for LGBTQ Rights. I figured out how to do it in 10000 instance batches with the Census website after writing a CSV breaker-a-parter (technical term) that broke it up into 10,000 instance long files. Uploaded those, and rejoined the outputs. It's done, I just had to do it the hard way.
True. Everyone is entitled to their opinion. But some opinions are more wrong than others. 😀
Also, it seems like you're quite a fan of Python but I'm wondering if you think its simple syntax comes at a cost. Do you think it limits problem solving options? I've been wondering what effect it has on the programming process, aside from the standard productivity, readability, etc.
This is my first pypi published project, I hope redditers colud help me improve it, you are welcome to send issues or pull requests!
Does a 5 for cost mean high cost or low cost? The scoring needs to be clear for it to mean anything. 
Awesome man!! Я думал гуи для Пайтона нет.
Good stuff. Thanks!
I would first take issue with some of your professor's ideas, if they are correctly reflected in your notes. &gt; Simplicity: how little the language complicates the problem solving process, how minimal its feature set, and the clarity and consistency of its rules. By this definition the simplest human-readable language is Assembly. It has no feature set beyond what the architecture supports, its rules are literally set in silicon, and it can't complicate the problem-solving process, because the ultimate problem *is always* how do we get the correct instruction set into the correct register at the correct time? As a measure it's also not very useful, as it's entirely relative: *simple* to a neophyte of the language, or *simple* to a master of it? &gt; Orthogonality: refers to the way different constructs can be combined and how these combinations are simple to understand and meaningful in the language. Only works when the language is simple. Inside the context of *any* language, when employed by a putative *master* of that language, *all* legal constructs of that language are simple to understand and meaningful. The idea that orthogonality *only* works or exists when the language is also *simple* as defined above is absurd at first glance. There is no sense in creating a language without constructs, there is no sense in creating constructs without meaning... and, again, simple to understand for the newcomer or simple to understand for the master? &gt; Expressivity: how flexible the language is in providing concise, different ways of defining algorithms and computations. Often in tension with simplicity and/or orthogonality. Now we're at least getting to something valuable and potentially quantifiable across languages, as we could take a sample of say 100 algorithms or programs across a 100 different domains and have a master in all languages write a concise implementation in each of them, then compare them. There being (and never likely to be) no such master, though, this is still a pretty hard comparison to make. It does take us a step above ASM, at least, as it's not possible to express the same algorithm with the same concision across architectures... so now you're notes of your prof have at least gotten us up to C. &gt; Level of abstraction: the degree to which the language allows the definition of powerful data abstractions that approximate the constructs in the problem domain. I would say this is an entirely incomplete and simplistic definitions of level of abstraction, as a concept. Data constructs are only a small portion of the problem of abstraction, and arguably the vast majority of the time the highest level of data abstraction required would be integers, floats, booleans, strings, and arrays of the preceding. The bigger problem is hardware abstraction; allowing you to think about the problem in your domain instead of the problem of expressing your domain in a long series of 0s and 1s. &gt; Portability: the degree to which a program can be transported from system to system. This one is **really** in tension with simplicity and orthogonality, as defined in your notes. To the point where I'd say any language that is at all portable must by definition be not simple, and hence by definition not orthogonal. Abstraction of hardware allows for (but doesn't imply) portability... but again, how do you quantify this at the language level? C, for instance, is only as portable as it's underlying compilers are compliant with the language standard on each platform... historically Windows and Literally Everyone Else haven't exactly been lockstep on that. Does the concept of portability not inherently make assumptions about tooling that isn't, strictly speaking, the language itself? Also, in this day and age, is portability really a key question? Who cares if it will run on Nokia 2600 if it will run on a server somewhere that the 2600 can connect to? A language very often doesn't itself need to be portable anymore, if it offers a means to serve an API. &gt; Cost: cost of development, compilation, maintenance, execution, etc. Ahh, finally back to quantifiable, and for the first time to *practically* quantifiable... though these all, again, come down to a question of how adept the hypothetical practitioner is, and also implies the complicating factor of just how much that practitioner is paid per hour for the adeptness.
&gt;Maybe I log too much or something, but just having one big dump of all messages that I could only control by searching You do know that it's easy to adjust log levels on the fly? At least in comparison to writing a filter GUI. 
Good
Neat and pretty, good job. btw. in your README: "fun" -&gt; "fan".
This is fucking art
Do you need to just display it on the terminal ordered, or does the actual dict itself have to be ordered?
&gt; tl;dr With respect to the above criteria, why are some programmers so... excited about programming in Python? For me it wins because of two things: 1. It is easy to express ideas and iterate on them quickly. I guess this stems partly from the nice syntax, but also because a lot of boilerplate stuff is available in libraries. 1. Social momentum. These days there is almost always a library that does what I need.
Displaying on the terminal is fine for now. I am displaying information about pinging different hosts in a network, so the dictionary is updated every 2-3 seconds. I am thinking to save it also in a .json file ordered, so I guess I can save the results in a new variable and just write them to the file.
thansk for pointing out that, corrected.
You can also use a lambda instead of the function of course. Bit I guess this is the most clear for beginners. `x` is your dict. def sort_by_updated_at(tup): key, value = tup return value['updated_at'] sorted_keys = sorted(x.items(), key=sort_by_updated_at) for key in sorted_keys: print(key, ":", x[key])
I'm not telling you that you shouldn't have written your GUI. It does a lot more than adjusting log levels. I look forward to see the version that can read an existing log file. 
Coming from Node/JS land and trying to conquer new territories. Started with... Prototyping an app with Chromium Engine and ReactivePy for the backend, and Angular2 for the front-end. Also looking for a solution for static typing hmmmm
Mostly Windows
If you want to work with multiple operating systems, it's probably best to just use [netifaces](https://pypi.python.org/pypi/netifaces).
Yes.
What have you made?
Do you want to submit a pull request. I would really love if you get the credit for it
Nice work - the earth from space is just amazing to watch!
Doing this course right now and I’ve found it to be a great Python intro.
As always when asking the question about how good something is, you first have to ask "for what". From your notes it seems your professor doesn't really care about how good a language is for solving an actual problem in real life, except for the last point about cost which seems tacked on. I'd say that if your professor enjoys programming then it's for the programming itself, not in order to accomplish anything, like some people enjoy solving a rubik's cube. There's nothing wrong with that, but I'd say that generally speaking the point of programming is to accomplish something, and how good the language is is determined by how well you can do that. Then that means that different languages are good for accomplishing different things. And there are many things to consider. Often we look at the language itself - grammar and built in functionality. But so many other things are important. PHP is an example of a language a lot of people don't like, but it may still be a good language to build a CMS on if you intend to sell it as a product, because essentially all your potential customers will have a hosting service able to run it. Python is loved by many because it's easy to learn, highly productive and with community libraries (and c extensions) both a powerful and a high performance language. With Python you "get shit done", and that's why it's my preferred language. I don't think it's fair to say that strongly typed languages are inherently more stable, or that Python is too easy and a bunch of low skill programmers create hard to maintain code with it. You can just as easily say that less code means fewer errors and that Python allows lots of code (which works just fine) to be written that otherwise might never have come to be.
I feel like as a complete novice something like this is going to be hard to conjure up. Im not sure where you should start other than googling people with similar issues.
I got addicted to f-strings. I thought about replacing them with good old `.format()`, but I'm not sure how much demand there's for that. I'll give it a try, but no promises (maybe the code depends on some other 3.6 feature, I'm not sure).
Depending on how structured the content of the PDF is. Without you trying to open a sample pdf with PyPDF2, and see how easy the information is to find, it's impossible to answer. 
Read it as dank theme. Bit disappointed now tbh.
Just checked and it turns out I do have Perl. Anything I can do about this?
What exactly is so great about it? What are some downsides?
This is really cool. How did you create the images? Change the opacity and overlay them?
Can you please give me More details? When it envolves money, I always interested lol
Python does everything it was designed to do very well. What it lacks is speed of code execution, not a huge deal, but in regards to trading systems which benefit from executing timing it would be nice. Then again, given how abstracted the language is (which again was part of its raison d'etre) it executes well.
Get crackin on that portfolio man. You are young, but if you show you can produce good work that's really what it comes down to.
Why cameCase for function names?
nicely done. From my basic understanding this is done recursively, no? If so, any chance you could add a tiny explanation to the code? 
Your python is getting high.
&gt;...but I'm wondering if you think its simple syntax comes at a cost. Do you think it limits problem solving options? Come over to /r/clojure and we'll show you simple syntax. And no it doesn't affect readability or productivity. Most people would say it helps both of those. 
Remove it. Or remove Perl's path from the settings. (I have no idea how to do that on a mac)
&gt; It's easy to introduce an entire class of bugs in Python that are effectively impossible in compiled, strictly-typed languages 1. Python is compiled. 2. What does strictly typed mean? Python is dynamically and strongly typed, c.f. C(++) which is statically but weakly typed.
By any chance can you Highlight particular image on mouseover event ???? It will look awesome Trust me
&gt; I don't think it's fair to say that statically typed languages are inherently more stable I do wish that people would stop using this type (groan :-) of phrase, weakly and strongly typed are far more important C is statically but weakly typed and is renowned for a whole pile of potential errors, with the dread off-by-one perhaps being the most famous.
Divide and conquer the different aspects: - extracting the calendar item data from PDF (eg: find something on pypi) - adding items to a Google Calandar (eg: find a wrapper on pypi or use their REST api) - adding an interface to a script so you can pass it your PDF and/or maybe some options (eg: probably commandline, but could also be a (local) web app) Then put it all together.
1. Python is only runtime-compiled to Python bytecode, which is then interpreted by the Python interpreter ... it is not compiled in the traditional sense of being converted from the higher language representation to a native instruction set in machine language. Saying that Python is a compiled language muddies the definition to the point of being nonsense. 2, Typo, edited. I mean -- I think obviously -- statically and strongly typed languages.
There are plenty of people who don't like Python. Perhaps the biggest bunch are those who don't like the whitespace indentation, preferring all those stupid curly wurly brackets that are often plain wrong anyway.
C is not a bit safer than Python, and I never claimed otherwise. Just that Python isn't a very safe language.
I would personally extract all the data/coloumn from the API. For example name, price etc. Make a pandas dataframe. After that, it should be pretty straightforward maths. Not sure about the email side of it, I've never done it myself
Does data frame get saved incase of power outage?
This is highly useful for my work since sometimes I have to sift through thousands of python log files at a time.
Look into Unity - it uses C#, which is a lot more forgiving than C++, and is a widely accepted tool in the industry.
Using a Spotify library to test the randomness of the shuffle button. I'm a beginner so it's a little confusing for me but I hope to make it work! 
That’s not a cover-to-cover book. I read it by picking a random chapter I don’t use often so that when I come to a problem like that I have an idea how to solve it. When you’re board one chapter or segment is easy to get though. But I agree stating at the cover and working through to the end would be torture. 
Pandas and a remote DB seem overkill for a simple personal project. I'd go for a SQLite database, much simpler and persistent.
My suggestion would be for Automate The Boring Stuff with Python. 
Yeah we are doing the same, and I agree, it’s prob going to force us to move on to another templating engine in the long run. The author must have had a FTW flip a table moment. It’s one thing to stop maintaining a project and another to destroy all traces of it from the internet over night. Lulz.
It is very kind of you, thanks!
Rubbish. Python's strong typing, backed up by numerous tools like pylint, makes it extremely safe. Ada was meant to be **THE** language years back but it didn't stop the biggest single insurance payout in history when Ariane 5 fell out of the sky.
&gt; I mean -- I think obviously -- statically and strongly typed languages It is not obvious to the many newbies who could be reading. Further Python can do away with many of the classic errors that haunted many a C programmer, myself included, e.g off-by-one. Thankfully more modern languages such as Go are introducing bounds checking at run time which can alleviate such problems.
It doesn't do that via dynamic typing, though. And those more modern languages are also moving away from dynamic typing, precisely because it causes more problems -- and eliminates more optimizations -- than it solves. But yeah, Python is definitely more friendly than C.
I'm currently working on a synchronization bot that syncs (moderated through a telegram bot) our discourse forum www.safenetforum.org with selected submissions in /r/safenetwork (the safenetwork is in my very private opinion the most promising cryptocurrency project out there because it is an unstoppable surfable privacy protecting network that doesn't have the scalability issues blockchain projects have) Turns out its more work than I hoped and in the end i assume it will still be somehow buggy but the first tests looked promising so far =) 
IMHO they are far more readable than those damn silly underscores :-)
Python's type system doesn't make it safe, by any stretch, it just makes it safer from one class of bugs. Python's memory model and lack of pointers does way more to make it safe, but at the significant disadvantage of not being a language you should or could *ever* use in a rocket... yeah, it's relatively safe because it's effectively sandboxed and not capable of anything like real-time operation, but I've been working with Python long enough to know that under no circumstances whatsoever should you trust it with your life.
&gt; AST module I am not experienced about this project. I can write code in ACE editor, I can get the code, I want to test it in webpage like the educations of Datacamp. Since now I understand I have to sandbox the code. Or run it in different server. Am I right?
Why roll your own instead of something like Elastic Stack and https://pypi.python.org/pypi/python-logstash ?
We're fine... more creeping underscores for me :-)
This should be my next goal. But for now I would like to get myself to be comfortable coding in python. I am blown away by the simplistic structure of python. Honestly I might not even going for other language because..lazy gene. Python is the most beautiful thing I have seen in a while comparing endless {{}}{[}}{].... 
The braces are honestly a very minor thing. After a while you just learn to ignore them and follow the indentation when reading code, much in the same way you do in Python.
This is almost exactly what I was about to stay working on due to a similar situation, thanks for sharing!
Strong typing helps tons, but it's too late - type errors won't be found until you actually run the code, into a case where they are relevant, which makes static reasoning about Python code extremely difficult. It also makes *automated* static reasoning about Python code extremely difficult, so it is actually quite hard to get a high degree of certainty about the correctness of a piece of Python code. The Python ecosystem makes up for a lot of it, by providing extensive tooling for things like linting, automated testing, logging, etc., but at its core, it's still a dynamic language, for better or worse. Python is also astonishingly bad at managing side effects - the language has absolutely no features whatsoever to make them explicit, other than free-form conventions. Literally anything, even imports, can, and often will, have side effects, and what exactly they are and under which circumstances they appear is rarely documented completely and accurately, let alone in a form that would allow us to automate the checking and reasoning. The reason Ariane 5 fell out of the sky, btw., was not because Ada failed in the sense of not providing enough static guarantees; it is because the engineers decided to *disable* those safeguards (array bounds checks IIRC) in a critical section of the code, and the resulting problem didn't surface until the rocket was launched under previously untested weather conditions. Nobody in their right mind claimed that Ada would make it impossible to write incorrect code; just that it would make writing correct code easier. You can't blame the tool when people decide to not use them though. Now; this is of course not rigid proof, none exists as far as I am aware of, but in my personal professional experience (which is closing in on 30 years, and covering professional work in about a dozen programming languages), dynamic typing generally makes code harder to reason about, harder to refactor, and thus harder to change; code that is hard to understand and modify, though, is a problem - we cannot be certain about its correctness, so we don't even know if it needs to be modified, and even if we did, actually doing it is still dangerous. Of course the problem with the statically "typed" mainstream languages (say, Java, C# or C++) is that their type systems aren't very good - they provide way too many loopholes to truly pull their weight, and they require a lot of ceremony and syntactic clutter to get anything done; that's arguably considerably worse than Python, where you can at least make up for the lack of static reasoning by writing simple code, skipping the boilerplate, and spend the time you saved testing your code better. That's not a shabby tradeoff at all, and it makes practical sense for a lot of situations. But it doesn't make Python a "safe language". Compare that to, say, Haskell, or PureScript - here, I can do rather amazing things, with very little syntax, and that feature (the type system) allows me to casually rule out entire classes of popular bugs. I don't have to worry why a variable get mutated in a context where it shouldn't be, because the type signature disallows mutating that variable in the current context. I don't have to hunt down the dependency chain to find the thing that prints to the console when that's not supposed to happen, because only a small fraction of my codebase has types that allow it access to the console. Nothing in my codebase can access the database unless I rig up the types such that it knows how to. I cannot get unexpected `None` values back from a function call, because that needs to be facilitated in the return type, and the consumer of such a function is *forced* to explicitly deal with `None` / `Nothing`. There are a million such things that people, including myself, trip over all the fucking time, and they tend to happen more frequently the larger and older your codebase gets. Yes, compiler errors are annoying - that's a good thing, because they usually hint at a brainfart on the programmer's end, and I'd much rather have a compiler yell at me than an angry customer.
Many ways to answer this question. Simplest way is to say I did not find logstash when I initially searched for "Python logging GUI". But even if I had found logstash, I don't think I would be using it now. It's way too overkill. My program is made for quick debugging during development when the terminal becomes constraining, while logstash seems like something one would use for serious monitoring during deployment. Also, I just wanted to write something that I wanted to use, didn't already exist, was simple enough to not abandon halfway there, and other people could enjoy. And that's how this project came to be.
You really need to just follow basic links to learn what these libraries are and such instead of asking every individual question here. Look into Sentdex's videos to start with, or just go straight to /r/learnpython as previously suggested. Your question clearly shows you haven't even looked into anything, or you'd know that a data frame is an in-memory construct where you can manipulate and organize Data before you write it somewhere on disk.
Udemy URL without the intermediate Twitter and blog: https://www.udemy.com/the-python-mega-course/
What Will I Learn? Become a Python programmer able to independently develop complex applications in Python 3. Build 10 real life Python applications in a wide range of areas. Improve your skills with bonus practice activities throughout the course. Use Python to build web applications with Flask. Use Python for building desktop applications with Tkinter. Use Python for database applications. Use Python for scientific computing with Numpy. Use Python for data analysis and interactive data visualizations with Pandas and Bokeh. Use Python for building interactive web maps with Folium. Use Python for scraping data from websites with Beautiful Soup. Use Python for computer vision with OpenCV. Use Python for sending automated emails with Smtplib. Use Python to download data from various data service APIs. Use Python to analyze and visualize stock market data. Use Python for batch geocoding of addresses with Geopy. Use Python to schedule programs based on computer events. Use and fully understand object-oriented design.
Numbers into an image: Look into PIL's ImageDraw http://pillow.readthedocs.io/en/3.1.x/reference/ImageDraw.html#example-draw-partial-opacity-text For reading numbers from an image, you'll need some OCR capabilities but it won't work 100% of the time. You can look into https://cloud.google.com/vision/
That doesn't mean anything. Please explain what you mean. 
Was the course itself worth it? 
PyPDF should be a great starting point. Here is an example to get you started (taken from one of my projects for PDF image extraction and categorization) def pdf_text(pdf_file_path): open_file = open(pdf_file_path, "rb") pdf = PyPDF2.PdfFileReader(open_file) text = [page.extractText() for page in pdf.pages] open_file.close() return text Also, here's a document to help you get started with the Google Calendar API: https://developers.google.com/google-apps/calendar/quickstart/python
i fell for one of these too, ended up using pluralsight anyway. course might be good but i am now unmotivated to go to that site at all
Thanks for the insight, and I never knew about Pluralsight before this!
I had some pdf parsing to experience and it will work only if the output is really well structured. Maybe they can provide it as a csv, it will save you a ton of work that could be in vain.
I've built a bot for almost this exact purpose. I used sqlite3 with SQLAlchemy to create work units to insert the socket messages into my sqlite DB. You should be able to use the built in json module to parse the json into a dictionary, then file values from this dictionary to your sqlite3 DB using SQLAlchemy.
Shameless (sheepish, really) plug: I wrote https://twitter.com/FiveOBot in python. Source is at https://github.com/jachee/fiveobot/
Sorry javascript fan here. I am gonna update the names to kebab case as specified by PEP8 once the open issue is sorted out. 
Top 5 Recommended Python Resources - * [Learn Python the Hard Way](https://learnpythonthehardway.org/book/) * [Google's Python Class](https://developers.google.com/edu/python/) * [Automate the boring stuff with python](http://automatetheboringstuff.com/) * [Complete Python Bootcamp - Udemy](https://www.udemy.com/complete-python-bootcamp) * [Python Official Docs](https://docs.python.org/3/tutorial/index.html) Complete list [here](https://hackr.io/tutorials/learn-python)
Chris take a look at this specialization [Applied Data Science with Python](https://www.onlinecourses.tech/2017/12/19/applied-data-science-python/)
It's pretty crazy how well you can make out some of the stuff in the image. How many images on average are used?
Your twitter tokens/secrets are clearly visible. Probably want to revoke them... 
Check out [mesa](https://github.com/projectmesa/mesa)
I'm honestly not sure how to rate some of these. Half of them seem irrelevant or only tangentially related to the reasons why I would consider a language "good". Perhaps if you mentioned some of the languages your professor actually rates highly, I could explain why he rates Python low. Level of abstraction I'd give a 5/5, but again, it's good for what it does but sometimes you don't want that abstraction. C for example I'd give a 1/5 but that doesn't mean it's a bad language either. Portability's a 5/5. Python can run on pretty much anything so long as someone's bothered to port the interpreter to the platform. Cost? Cost of development? Not sure what exactly that means. Compilation? Python is an interpreted language. Cost of maintenance? Cost in what? Hours of time spent, processor capacity for execution? No idea. Anyway, here's why I think Python is a good language (these reasons are entirely subjective though): - Cross-platform. Like I said above, it runs on nearly everything. - Flexible, expressive, and easy to learn - Large community. If I have a question about something, somebody somewhere has the answer. - It's FOSS and although it uses its own specific license, it's GPL-compatible. - Various language-specific features. I really like Python's list comprehensions, slices and negative indices, generators, strong+dynamic typing, variable unpacking, etc. I like how easy it is to install modules with pip and the PyPI. I like how I can write code that will run on pretty much anything without having to go through the trouble of porting it. I could go on for a while.
Have a look at Skulpt. It's used by a number of Coursera and beyond MOOC's for exactly that purpose... http://www.skulpt.org/
You stated that you like python for its simplicity. You could check out godot (https://godotengine.org). It uses its own language but it has many similarities to python. The program is open source, runs on every platform and has a really small file size, so you could definitively check it out. The editor is pretty similar to other industry standard game dev tools
As a fellow game hobbyist (though no desire to be in the industry), C++ is a huge turn off for me too. But, it is very widely used everywhere and any employer that see you not willing to learn something (even if everyone hates c++) will probably not consider you. It would be worthwhile to at least be familiar with it. The learn unity comment is great advice and is a much better platform than anything python can provide...sadly! I am sure eventually we will see 1st party support for python bindings in unity...just have to wait.
I'd happily ditch the subtraction operator to being able to use the kebab case. Then I'll refuse any job involving the use of subtractions :-)
There is no theoretical limit to what any turing complete language can do. In theory any computation done in any language can be done in any other language. In practice sometimes you will see roadblocks in some languages that you don't in others. Where python would not be an appropriate language or you might run up against roadblocks that wouldn't in other languages: * Algorithmic code that needs to be very fast. Stuff like numpy (a library for doing matrix calculations in python) or pillow (image transformations) contains a large component of fast, optimized code written in C which is more suitable for that. Python is really good at acting as a 'director' of low level fast algorithms like this, but not at the actual algos themselves. * Code that doesn't run in userspace - e.g. device drivers. * Code that needs to be very, very, very safe - I would probably avoid python for stuff like self driving cars or code that manages a space shuttle simply because speed of development trades off against program safety and python leans heavily on the side of getting stuff up and running very quickly. That said, I'd probably use it to test those things quite happily. * Writing mobile apps - you *can* do this in python but the experience is not ideal. Kotlin and swift are the languages to use for that. * Writing windows apps - again, you *can*, but I wouldn't. Windows is not a great environment to run python on and tons of stuff is lacking support/infrastructure that you get on *nix. Not really sure what you should use for that coz I don't give a shit about windows. In general I think I'd probably be happy using python for literally anything else.
hmm, odd. I set my timeout for the wait for single object to 60 seconds (60,000) so perhaps that matters? also, are you still doing all of those service_manager.LogMsg and reportServiceStatus calls you had in your original method? I don't do any of those, even though I assume you "should" do them. Like i said this stuff was reallly picky and a pain to get to work right. There was only one combination I found that made everything function as expected.
&gt; weakly and strongly typed are far more important Are you sure about that? I think one of the benefits of static typing is that it acts as a form of documentation by smearing "execution information" all over you code. I'm also not sure what "duck typing" means for "strong typing". In python you can't add a string and an integer... but you can pass the wrong object into a method and find out in an obscure way 20 calls later.
Hmm. I am writing a python program i plan to release on windows too. Are you saying that even if i bundle all the libs &amp; python itself users will have problems on windows running my app? Using qt btw.
This engine looks really promising. Would have look into this when they release 3.0 which they mentioned PBR shader will be included. 
no, but what you can do is write it to a file. csv or whatever you need. so you rather than having all the data written in a file, you'll just have the one you need. 
Godot also has [Python support in beta](https://godotengine.org/article/beta-release-python-support)
Panda3D is still used internally by Disney (most attractions in Disney World use it), but yes, there haven't been many commercial games made with it for a long time. Its toolchain is also quite outdated, as in "was state of the art 15 years ago"; so - while quite powerful - it's probably not the best engine for quick prototyping. As I said in another comment, Godot has beta level Python support. You could also try Blender. It is scriptable entirely in Python (in fact, every tooltip shows you the Python command, and everything you do will be logged as runnable Python code), and the included Game Engine can be used for prototyping.
3.0 is currently in beta and feature freeze, so you could try it out right now. It will be less stable than 2.1 however.
[removed]
Great solution! It got me looking up hamiltonian paths on wp. I like your idea of first creating all tuples of possible values - I could modify my solution to use that instead of checking for squares. 
Want more? Consider PEP238, which states : &gt;Floor division will be implemented in all the Python numeric types, and will have the semantics of: &gt; a // b == floor(a/b) &gt; except that the result type will be the common type into which a and b are coerced before the operation. Then consider that this is clearly not always numerically true in the actual implementation of __floordiv__: In [1]: import math In [2]: 0.9//0.1 Out[2]: 8.0 In [3]: math.floor(0.9/0.1) Out[3]: 9
One of the major benefits of static typing is that everybody knows what BSOD stands for. I'll repeat for the final time, static typing alone is less than useless.
Try a search engine as this has been asked and answered repeatedly.
There is no single "best". /r/learnpython/wiki has a lot of resources - try some and see which works for you.
Google "look ahead".
Thanks, very useful! What was your favourite tool/way how you learned Python ?
Ok thanks! I’m going through the book Automate the Boring Stuff in Python and one of the chapters is Regex. I’m having fun with them and want the challenge.
Take a look at the post. I already fixed it :) Thank you a lot for your aid!
in the graphics asset production toolchain python is great for game server backend, python is great for game client use a commercial engine eg unity if need a custom engine, i can think of better languages than pytho n
Also, Effective Python and Python Tricks. Check out Dan Bader's site, too. 
/r/learnpython 
Ok thanks. I’ve actually completed the whole Regex and used character classes. After finishing I realized my Regex only handled “OR”conditions when I needed “AND”. Appreciate your help.
Personally, I would try to get the data in another format. So maybe try to get a copy before they convert it to PDF. It's much easier to sort through an Excel file in my experience.
go to sololearn: https://www.sololearn.com
I just released my first 'real' project, [pydolist](https://github.com/rugglcon/pydo). Let me know what you guys think!
I'm assuming he generated new ones after he made the video? I'd hope anyway
Here's my shameless plug for my python Twitter bot: http://twitter.com/findyourreps http://GitHub.com/joel-g/your-representatives Tweet a zip code @ it and it will reply with names and contact info for senators and members of the house that represent that area.
Yeah I guess so. It was an all around python course touching lots of different topics from basic syntax to webdev and games. For 11$ it's quite interesting. But I really hate their sales strategy and wouldn't buy anything from them again. 
I learned a ton about Python making the bot /u/AnimalFactsBot . Pick a small project (like not an entire RPG game) and just do it and and Google every time you get stuck.
Seconding this. Whenever I need to learn a new syntax I start here.
True. Pluralsight is way ahead in quality.
Check on the right of this page, under "Online Books and Resources". I started with [Learn Python the Hard Way](https://learnpythonthehardway.org/book/), then went through Automate the Boring Stuff. Since you are working with sensors I'd make sure you have the information on how to hook them up correctly. Like what type of current each sensor pulls, do you need resistors or caps, etc. If you screw something up here you might not get any reading or you could have parts go up in smoke. You also want the code to run the sensor, get the code running that the manufacturer usually provides, make sure it is accurate then adapt it to your script.
Qt can be really pretty if you want to use Qt Quick Controls with a custom style.
Do you enjoy making life more complicated ?
Why are you saying ? // YW // // // //
I’ve been trying the eBooks previously and made some headway but it is nice to have someone showing you around on a video. He is quick to answer questions (within 24-48hrs) and it is full of little tips and tricks that, as a total noob, I really appreciate. Atom editor hadn’t made much sense to me before I started this course. Now I love it. It also covers what feels like a broad range of Python possibilities and provides intros to Jupyter editor with database functions and other resources that I never would have found on my own. I’ve done three of the real world applications so far and it is nice to understand how python can be used in many different ways - it opens horizons up. Downsides are that he can sometimes expect you to understand some things like HTML that I had zero understanding of. In the first web app the lecture on getting it hosted through Heroku I found very complicated, not very Python based, and probably should have been made into several mini lectures which explain the steps in more details. Hope that helps! I bought the course when a sale was on. Udemy has heaps of sales so my advice would be to get it when it is on sale rather than at full price.
Could you please elaborate on the "slow as hell" part? I've been using the standard module for ages and I never had any reason to measure its performance impact.
Hmm. Yea, that would be pretty cool. The image is literally ten other images stacked on top of each other. But I could have like a 1-10 where the user could highlight over the numbers to see what it visible. Then even link the article I'm taking the image from so the user can click through and read it if they are interested.
Just...no. If you can't even Google how to make things in Python, then how do you expect to make something along those lines that could very well be considered illegal in your country?
It's a stack of ten images using the median stacking method. This is common in something like Photoshop to overlay multiple of the same images on top of each other. You do that to remove noise from an image. It's common with night photography. I'm using that effect, but in a much different way here. In Python using Numpy the entire code almost completely becomes: stack = numpy.uint8(numpy.median(images, 0)) I think that shows why we all love Python so much.
The first example I could think of: Ensure that until the end of the line there are only lower letter ASCII characters: (?=[a-z]+$) You can have multiple such `(?=...)` groups one after another. You can even capture inside a look ahead. Negative look aheads `(?!...)` are a PITA. E.g. `A*`, `B+`, `C{11,47}` and `D?` are not allowed in most engines. The length of the input has to be deterministic.
Not sure about out of the box but with Kivy, you can do quite a bit, for example you could import 'ButtonBehavior' and 'Image' to create a subclass of both, allowing you to customize buttons however you want to look really.
Thanks, kind internet stranger!!!!! I can use all the advice you give : )
IMO, the best way to create a GUI with a totally custom style is HTML/CSS. You can open it in a browser or with Electron. I just read about Eel. I have no experience with it, but it sounds interesting. &gt;Eel is a little Python (currently only Python3) library for making simple Electron-like offline HTML/JS GUI apps, with full access to Python capabilities and libraries. https://github.com/ChrisKnott/Eel
If your code is performance critical, then you are profiling it to optimise it, and you will see in the profiler the overhead added by logging.
Thanks for replying.. I did that already.. Rather I have reinstalled it.. Still it's showing the same error... 
[https://www.unrealengine.com/en-US/blog/technology-sneak-peek-python-in-unreal-engine](https://www.unrealengine.com/en-US/blog/technology-sneak-peek-python-in-unreal-engine)
I made a twitter bot a year ago that mimics a friend of mine, trained on every tweet he's ever posted. I basically just used twython and markovify. It's just a simple Markov chain bot but sometimes I can't tell if it's him or the bot posting.
My suggestion would be to do this as a jupyter notebook.
Maybe [wxPython](https://wxpython.org/Phoenix/docs/html/).
This almost broke the project I was working on. Took me more than a week to debug this. I think I just developed trust issues with the stdlib
Frankly it is probably easiest to write this using an `if` statement and [string methods](https://docs.python.org/3/library/stdtypes.html#string-methods).
Yours is so much more useful than mine. ;)
That thanks I don’t either but I’ll look into it
Your imagination ...
That's awesome hahaha. 
Thank you! Very helpful.
Generated some new ones before posting, thanks for the heads up. 
You're welcome! Have a look at https://regex101.com/ if you want to try more complicated expressions.
Had exactly the same problem, then sharing my thoughts with others I was suggested to simply use Flask for my applications. It's not technically a GUI, but it serves the purpose if you want a nice-looking user interface. You can use any web framework that you'd normally use for web dev, you just use it locally avoiding deployment. I made a nice food diary app that way and I never looked back :)
I didn’t read your code but if you don’t get random cities in Persia or Greenland every day at the half past hour mark then hufflepuff loses ten points. 
None things.
I don't mind self promotion when it's useful, entertaining stuff like this. Have an upvote!
Did you search? "python how to get ip address"
&gt; Writing windows apps - again, you can, but I wouldn't. Windows is not a great environment to run python on and tons of stuff is lacking support/infrastructure that you get on *nix. Not really sure what you should use for that coz I don't give a shit about windows. I use python on windows all the time. Windows is my prefered os, and python is my prefered language. It works just fine. Granted I probably wouldn't write a heavy GUI app in python, but I wouldn't do that on linux either. &gt; coz I don't give a shit about windows. This hostility toward the world's most installed user platform does not do open source any favors. The reason people avoid open source is because it involves dealing with this bullshit. 
Some comparisons too: 1. Simplicity: very high compared to, say, Java where you need to learn OO; or C where you need a deeper understanding of the hardware and pointers. `print("hello World")` 2. Orthogonality: high. Protocols such as the iterator protocol allow you to write your classes that behave like in-built iterators. 3. Expressivity: medium++. Close to pseudo-code for a lot of developers if need be. Does not follow the Perl "more than one way to do it", but havung one *preferred* way can be a boon. Multi paradigm support. 4. Level of abstraction. High. What you would not want to do in Python, you can wrap another languages implementation in Python. 5. Portability: High. Language and libraries written to work on multiple platforms, from embedded systems to supercomputers. You can write programs to execute on multiple platforms without change. 6. Cost: low. Conciseness leads to one being able to try different approaches in a given time; no compilation; The language and community ethos value maintainability and use this tho shape language development. Execution: It is a scripting language - what is deemed too slow to be written in Python can be written in other languages and wrapped in Python - what you see is Python. Your professor is entitled to his opinion; I just get my work done using Python. (And TCL and awk and perl and bash and verilog and ...) 
How are you expecting to sort those?
It’s on the to-do list. Edit: The capability is in the dataset, but before recently, my logic was such that it only fires the search for a valid zone on the 00 minutes. I think it’s reasonably efficient that I can fire that off every minute, and validate both the hour _and_ minute in the target zone. 
Google suck between 🕵🏼
 def key_sorter(key): try: return int(key) except ValueError: return ord(key) sorted(items, key=key_sorter)
I've been really eager to get into Godot. It looks a lot less intimidating in amount of out-of-box visible features compared to many other engines.
I couldn't find any json or xml apis, but you could try scraping each year's page on this website. https://www.lottery.co.uk/lotto/results/past
I filed a bug: https://bugs.python.org/issue32543 Let's see what the CPython developers have to say.
Thanks for the info! I know how to connect them I already run tests successfully using other project codes, but I always wanted to learn and fully understand how it actually works, so I can program my own stuff.
Don't worry. My python Reddit bot is completely useless
Thanks jfishersolutions - you prompted me to write a handy little twitter/flickr hack. See: https://github.com/MarcNo/proud-pix
Thanks guys. I'm going to look into all three of these!
 &gt;&gt;&gt; 0.7/0.1 6.999999999999999 &gt;&gt;&gt; 0.7//0.1 6.0 &gt;&gt;&gt; 0.6/0.1 5.999999999999999 &gt;&gt;&gt; 0.6//0.1 5.0 The issue persist with other values as well.
It's at the very least a bug in their documentation. Per the bug report: According to PEP 238: "floor division will be implemented in all the Python numeric types, and will have the semantics of: a // b == floor(a/b) &gt;&gt;&gt; 0.8//0.1 8.0 &gt;&gt;&gt; import math &gt;&gt;&gt; math.floor(0.9/0.1) 9 Yes, floating point numbers are not exact. Per the definition of //, it's wrong.
a//b means do a/b and pass to floor. .9/.1 is NOT 9.0 but some approximation due to IEEE754, so the result is correct and there is no bug
You can pass a lambda (or any function) as the key parameter. Python 2 had a separate `cmp` parameter, but that has been removed. Please ask questions like this in /r/learnpython. 
There's actually a very similar Qt gui called LogView, written by Vinay Sajip , the author of Python's logging module. It has the advantage of working on Python2 - for those of us stuck with that. 
Thanks! Keep us posted!
Well, the way python 2 does is is good enough :)
The world's most installed user platform, as of the last couple of years, is Android, by a substantial and probably still accelerating margin. Also there's a lot of Open Source done on and for Windows, and there's even more done on and for the 'nix systems that underly almost every substantially new feature to come out of Windows since roughly Vista... if there's hostility it's because it's been, historically, a pretty terrible platform to develop on, *except* for if you were developing "heavy" desktop apps exclusively for Windows, using the languages that Microsoft blessed and staying firmly within the Windows bubble. The further you got from what they supported directly, the further you got from doable, and that was the state for a long time. Thankfully, desktop apps and desktop in general have been in somewhat of a decline, and single-platform native apps for desktop have become a dwindling market, which has led to more Microsoft interest in areas outside the traditional Windows bubble... which has brought people into Redmond who have deep first hand experience of exactly why polyglot development is very often so much easier outside the bubble than in. Which, along with market share loss overall to Linux in server, embedded, and cloud, is seemingly why Microsoft has recently been making great bloody big strides to become more friendly to Open Source developers, and NOT the other way around. But that's the thing; Microsoft itself seems to have finally recognized and acknowledged its longstanding failure in the development space outside of its desktop environment, and its been making substantial investments in seeking to open up the tent. I think that's great. And a good business choice. But it's also an admission that the hostility had validity all along. Personally, I hate ever OS I've ever tried. I've never found one that doesn't feel like it's either unbearably brittle or far too opinionated to just get out of my way and stay out of it... my hostility is to all of them, with a little extra for Windows because of CMD.exe, the registry, and drive letters.
Rolling your own solution is definitely not the right way to do this
OK, maybe I don't know exactly how python 2 handles this. I was thinking about something like having the numbers first sorted, and the strings after that. 
You can export the list content to excel, use that file in your script. Another option would be a library that extracts data from a list, it was posted here in 2017.
That's basically what ends up happening, by pure coincidence of: 1. All of your numbers being the same type, `int` 2. `int` comparing lower than `str` lexicographically If you add `float` or `bytes` into the mix, suddenly everything explodes. &gt;&gt;&gt; sorted([1, 2, '2', 2.5, 3, 3.0, b'3.1', 4, '4', 'four'], key=lambda x: (type(x).__name__, x)) [b'3.1', 2.5, 3.0, 1, 2, 3, 4, '2', '4', 'four'] Edit: this isn't _completely_ accurate wrt how Python 2 does things, but it's close enough for the purposes of this example.
OK, I just did 0.9 / 0.1 and I get 9.0 Which I should not get ... You're right that there is a rounding error somewhere. (edit: 3.6)
Testing quite a few more combinations in Python 2.7, yeah, `//` seems wrong. I'm going with the answer is 9, which is what I wanted, but I have no problem letting IEE win. 
If you're talking about Python 2, I have no idea what you mean. I thought this was a version 3 thread. I have trained myself to forget anything I ever knew about Python 2.
Sounds like you are making just a shallow copy of the matrix when you should be making a deep copy. [This](https://docs.python.org/2/library/copy.html) might help you out if you don‘t already now what those are. &gt; The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances): &gt; &gt;- A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original. &gt;- A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.
I‘ve also had problems trying to acess sharepoint files using Python. I solved it by copying the files to and from a dropbox folder using microsoft flow (triggered by webrequest for example). Once the files are on the dropbox I use [dropbox-uploader](https://github.com/andreafabrizi/Dropbox-Uploader) to download/upload the files.
&gt;If you are about to ask a question, please consider r/learnpython or the learn python discord. When I follow your reproduction steps, I don't have this problem. We're probably doing something different. At the very least, we're probably using different UIs. I used https://www.pythonanywhere.com/try-ipython/, and typed `x=1` then `x.&lt;tab&gt;`, and got a list of methods without duplication. I used the `python` interactive prompt, and did not get a list of methods. When you post in the right spot, include the full reproduction steps. &gt;&gt;&gt; [x for x in dir(2) if not x.startswith("_")] ['bit_length', 'conjugate', 'denominator', 'imag', 'numerator', 'real'] 
You can actually use Python with Electron. It's a little tricky to set up, but it works well once you get the hang of it. [Link](https://www.fyears.org/2017/02/electron-as-gui-of-python-apps-updated.html)
I agree it’s a difficult problem. So what’s the right way?
Of note, Skulpt runs python _entirely in-browser_. There's no server or other shared resource involved, and thus no security problems associated with that shared resource.
&gt;The reason people avoid open source is because it involves dealing with this bullshit. No, it's because most people just use whatever is preinstalled. I think open source hostility towards microsoft is warranted. Microsoft were openly hostile to open source software right up until that attitude risked dooming them to irrelevance. Fuck 'em.
But why male models?
&gt;I literally looked all over the internet and could not find a solution. I dunno what to tell you then. Either there's no solution on the internet, or you're doing something (searching/reading/understanding) wrong. Did you read http://www.swig.org/download.html ? What zip file do you think should (but doesn't) have a swig.exe file? Why do you think that? Did you read the subreddit sidebar? &gt;If you are about to ask a question, please consider r/learnpython or the learn python discord.
Thanks! I’m kind of a newbie to intermediate programmer but have you found yourself using regular expressions often? If so, where did you use them most?
I use regular expressions quite often. Many people "fear" regular expression, and e.g. claim that you should not parse e-mail addresses using regex. But if you strictly follow the relevant RFCs and trust your engine to do the optimizations, then regular expressions are the best too for almost every tokenization. For most user input I use regular expressions to check their validity, simply because you can use the same expression in JavaScript and in Python, so you only have to do half the work. :) In Python you should use the [regex](https://pypi.python.org/pypi/regex/) module, not the built-in re.
Ok great, I’m really digging Regular Expressions so far.
You can do use regular expression wrong, though: https://www.regular-expressions.info/catastrophic.html. You should never trust a user to supply an expression.
It was a while ago, and in Perl, but I used lots of regex parsing log file contents (e.g., web logs), and more recently matching filenames (e.g., specific prefix, today or yesterdays date, then a specific file extension) for sftp transfers. In a bash script I also used it to verify phone numbers (on call rotation script that sent text messages when you were It) were correctly formatted, that kind of thing.
Great article, looks like they use some real world examples so I’ll read it in more detail. Are regular expression used a lot in automation? I’m reading Automate the Boring Stuff in Python and there’s a big emphasis on Regex 
Nice! Seems like these Regex was useful for automation?
Lol those look like males to you? 
Blame floating point numbers, all languages have trouble with them. If we wanted computer math to be fool proof we would be using binary coded decimal representation to do decimal math.
you can improve it by exporting all your texts/fb messages/etc and adding it to the pile!
Well still, after so many years of development I'd assume python would handle single fraction digits without falling on the face like that. 
I am using [Python crash course](https://www.amazon.com/gp/aw/d/1593276036/ref=mp_s_a_1_1?ie=UTF8&amp;qid=1515807179&amp;sr=8-1&amp;pi=AC_SX236_SY340_QL65&amp;keywords=python+crash+course+a+hands+on+project+based) I'm a slow learner and I'm picking it to.
As others have said, it all depends on what you are trying to do. Sometimes it can work, but is not the best way to accomplish your goal. ;)
Python Programming for the Absolute Beginner, 3rd Edition is a good book. It teaches Python basically by having you program text-based games for most of the chapters (with the games using the relevant concepts that each chapter teaches). A very good book.
Care to provide some insight on how this effected your project and how you went about debugging it? I'm kind of curious about what a real world implication would look like.
[You know python has a decimal module right?](https://docs.python.org/3/library/decimal.html) from decimal import Decimal &gt;&gt;&gt; Decimal("0.9") // Decimal("0.1") Decimal('9')
Is this pure python or c bindings?
It is 100% python. Relies on numpy, scipy and python imaging library.
and for the past few days BTC has ran to 13k and is holding LOL BTC market nodes I made are not making money, but fortunately there are other cryptos I have invested into that are doing okay and still entertaining to watch. For the time being I disabled by BTC nodes and just am waiting until the market recovers to 16k, probably a week or so
Interesting proposal. Do I understand correctly that it is a ray tracer? Do you think it will be able to render scenes in real time?
Yes, right now there aren't too many methods that take lighting into account. One example of where it does is in the methods found in PlatonicSolids. The objects I created depend on drawing just lines and planes, so I don't see why they should be too slow to render in real time (never tried it though).
What are the goals and typical use case's you're envisioning? Depending on those answers python might not be the best choice. 
What I use it for is making Math animations for YouTube videos and it does work very well for that use case. Similarly, I created gifs for use in blogs, etc. But I think Python should be fast enough for most use cases where you're not competing with someone else on speed. 
Thanks for the pointer. I didn't know about this.
This is not what selenium is intended for. If you are scraping the data from a web page, you can do that beautiful soup + requests. If your goal is to make an app that can fetch weather, this is terrible. If your goal is to learn selenium and programming, it's not good. You have the basic logic of DOM parsing, but the last seven repetitive statements, both print calls, and the find_element calls can be simplified using a for loop. [This is the result when I ran it](https://i.imgur.com/IxUQwee.png). The formatting could use a lot of improvement, such as adding spaces between max-min temperature forecasts. You can simply use some sort of weather API to get a really good result, without using selenium. Also, /r/learnpython for this type of posts.
I'm on page 563 of Learning Python 5th Edition. I'm dying to get into the Flask and Data Science books that I have. I started learning how to use the sqlite3 module enough to incorporate it into one of my own personal tools written in Python, but I feel that I don't have a good understanding of how one interfaces a database with program code as my previous experience was learning MariaDB in a command line. I've also been writing the equivalent of this a lot: format_date = lambda date: "{0:04}-{1:02}-{2:02}".format(date.year,date.month,date.day) and then something to do the reverse. There must be a better way to convert dates to strings and parse them from strings. My history of languages that I used with any proficiency is: Java -&gt; C++ -&gt; C#, and now I'm learning Python because C# is big and changes faster than I can learn it. Python is the most fun I've had with programming since I first started learning how to program.
[Can I share my bot too?] (https://twitter.com/trumpratings)
That's awesome but since this is /r/python you should share the source too!
&gt; Microsoft were openly hostile to open source software right up until that attitude risked dooming them to irrelevance. Oh please. That's a serious exaggeration. They've contributed to the kernel and they long ago made Python Tools for Visual Studio, which is a free Python IDE that's supposedly quite good. Why should they contribute to open source? They're a business.
[3blue1brown](https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw) has written his own [graphics library](https://github.com/3b1b/manim) that can also handle 3d objects.
Yes, and mine is inspired by his. However, manim, as the name suggests is primarily for making Math animations for his channel. He didn't intend it to be easy to setup and used widely for other use cases.
Thank you guys for being so helpful! ♥ I think I'm going to see how to style Kivy! (Does any of you know if maybe there are some "style themes" I can choose from? (Either official or community made))
SageMath uses [Tachyon](https://doc.sagemath.org/html/en/reference/plot3d/sage/plot/plot3d/tachyon.html) for this purpose.
Thanks for the pointer. I'll check it out as well.
Commenting to read later
Thanks! Glad you enjoyed (:
Is there an easy way to do this, especially for FB messages?
1) your OS uses a core. You do not have 8 equally free cores. 2) write some profiling code to find out.
&gt; The problem (I think) with the following code is that python isn't authenticated to access this page. Correct. If that URL is behind a login, then obviously your script will have to log in. How you do that depends on how Facebook implements authentication, but the principles are relatively similar either way. Assuming run-of-the-mill cookie-based form authentication, your script will have to make 3 requests and track cookies between them (look up `requests` documentation on how to do this). The first request fetches the login form, then you scrape that for the username and password fields, any hidden form fields (those are generally required for CSRF protection), and the form's `action` attribute. You then assemble a suitable set of POST data with those fields in it, providing the correct username and password, and send your second request. If all goes well, the response should be a 200 or 30x one. If you have been tracking cookies in your `requests` code, then those should now allow you to download the images like in your existing code. However, it's also possible that facebook doesn't use cookies, or more than just cookies, in which case things get a bit trickier. Another route you could take is to log in manually, and then use Developer Tools in your browser (F12) to get all the cookies facebook has set, and just use those in your script directly. You still need to *send* cookies, but you don't need to *receive* any, and you don't have to automate the whole login process. If that still doesn't work, then that probably means facebook has additional protections in place, such as checking the user agent, rate-limiting requests, or using javascript-based methods to detect automated access attempts. If that is the case, scraping with Python is going to be fairly hopeless, and you'll be better off doing in in JavaScript, injecting code into the browser itself (make a plugin, or just paste suitable code into a developer console). A headless browser (headless Chrome, PhantomJS, Selenium) would probably also work. But at this point, the project is quite a beast, so you'd have to wonder whether it's worth it. Finally, also check if Facebook provides an API that you could use for this. If they do, then it's definitely going to be easier to just use that, and you don't risk pissing FB off for doing stuff that looks like malicious activity if you squint a little.
if you download your fb archive, there are some tools that'll parse your messenger convos 
[Sidefx's Houdini](https://www.sidefx.com/products/whats-new-165/) uses Python for scripting. It's also a lot more powerful than Blender.
[Sidefx's Houdini](https://www.sidefx.com/products/whats-new-165/) uses Python for scripting. It's more powerful than Blender, but Blender is free.
No, I'm just kidding. Choose whatever you want.
Sorry, I have no experience with numpy so I will show my solution on normal python list. arr = ['a','b','c','b'] arr = list(map(lambda x: ord(x) - ord('a') + 1,arr)) print(arr) output is [1,2,3,2]
Numpy is not made for a thousand individual arrays. This oop scheme is inside out.
You can use `vectorize` to create a function that you can apply elementwise to a numpy array. You can combine this with the lambda suggested by /u/muzumaki123 : import numpy as np arr = np.array([['a', 'b'], ['b', 'z']]) f = np.vectorize(lambda x: ord(x) - ord('a') + 1) new_arr = f(arr) 
guter Inhalt 
Thanks for that, /u/confluence the problem with /u/muzumaki123 's code was that it didn't retain the nested array information. Your code rectified that problem.
danke brüder!
I am glad you clarified you didn't want to make a game graphics engine with Python-- visual mathematical model rendering sounds like a reasonable use case.
Sure, I can do that.
Which method are you referring to? I can try and optimize.
This is just a linguistic detail, but those are *alphabetic characters*, they are not *alphabets*... an *alphabet* is the set of *all* the valid *alphabetic characters* -- which typically means the *glyphs* that represent the minimal pronounceable sounds -- of a given language's *character set*, an *alphabetic character* is any one of the individual symbols that make up that set. So, in the ASCII *character* set the *alphabet* is "abcdefghijklmnopqrstuvwxyz", and "a" and "w" are both *alphabetic characters* or *alpha characters* or just *characters* within that *alphabet*. Sorry for the non sequiter, and I'm not trying to be snarky or anything, this is just something that seems to come up more and more often, often in contexts where English may not be the first language (though "alphabet" is actually Greek by way of Latin).
Ah okay! Thanks :)
Alright, will keep that in mind
Thanks for the feedback. If you could tell me the exact name of the method and file you're referring to, I'd really appreciate it. In any case, I'll admit I haven't been super focused on making the code speedy. More on churning out videos speedily. None of the methods takes more than half a second per frame, even if its plotting thousands of points so it hasn't been a big deal so far. Will look into optimizing.
PyPDF2?
https://docs.python.org/3/library/stdtypes.html?highlight=translate#str.translate
I am working on a cheaper alternative to a normal fuel pump controller.
Been working on my site [Nitratine](http://nitratine.pythonanywhere.com/) for about two months now and am finally getting to the end of it. I'm really happy with how it ended out and now the backend works
Good effort put in there 👍
Try ModernGL too.
There is a Save button for that very purpose
Panda3d has done some neat stuff.
/u/elbiot is not talking about a particular method. s/he is talking about the overall design. You can't "optimize" that away, you have to stand back and think about whether your design in general is using the right concepts for the underlying tools.
I am working on two projects one is a tutorial website for Python (www.python.robasworld.com) and Also a Computational Geometry Library in Python CGLibPy (www.cg.robasworld.com)
Have a look at pyglet. The pyglet.graphics module provides a simple way to work with OpenGL primitives, which you can easily build these scenes in. I'm one of the current maintainers, and would be happy to help if you need any pointers.
Thanks.. going to check it out.
Cheers my bad. I’ll post there
What exactly is the slow part? Writing to a file? Formatting the log string itself? Does it depend on the log handler you're using?
The web is popular yes, but I could just as well say that it is popular despite UI inconsistencies, not due to them. You say it is not important to end users, but do they have a choice? You place your emphasis on popularity, but is that the thing we should be optimizing? What about usability? Accessibility? Ease of learning?
I know of these: https://github.com/kivy/kivy/wiki/Theming-Kivy
Looks very interesting. Code is very clean and well documented. One thing that might help is some sample usage demonstrating the capabilities in the README file.
So you can test everything using python-pptx without it being an addin. Then create a VBA addin that calls RunPython.
I am using Nikola for both my personal and a project blog. I like Nikola because builds are super fast (only rebuilding what has changed), it is easy so customize and very flexible.
I recently came across [Klipse](https://github.com/viebel/klipse). Seems good. It's *A simple client-side code evaluator pluggable on any web page*. *Here is a [live demo](https://book.klipse.tech/) of the embedding of klipse in a web page*. Seems good.
Working on a python process and network manager, just a project to learn Linux processes more in depth. Also gives me a program where I can control what's going on and say that I wrote it
We use Vizard at work. The downside is that it’s expensive. Upside is that it’s dead easy. 
Why is this tutorial so ridiculously over-complicated? You don't need Flask to demo how blockchains work. I wrote a sim of this in Tcl a couple years ago that's only 50 lines long (and much of that is comments). I should post a Python translation...
I'm poor :)
[Here's my bot](https://twitter.com/Keith_Event) too! Because why not? [Here's the source](https://github.com/CrakeNotSnowman/TwitterEventBot) but I'm way behind on my documentation. 
Have you raised a report on the [bug tracker](https://bugs.python.org], is there all ready one there, or what?
Quite dreadful isn't it? Thank goodness that all of the OSes that we use are completely free of bugs :-)
"single fraction digits" are no easier to store than irrational numbers when the base isn't a power of 2. If you need numerical accuracy for something, you should probably use whole numbers for that unit.
I'll look into it, thanks!
PEPs are often **NOT** kept up to date so they cannot be regarded as definitive, [math.floor](https://docs.python.org/3/library/math.html#math.floor) is the place to look.
That doesn't really seem to be the case - divmod seems to be doing a lot more work (including making its own call to floor, so that's not even being avoided). 
[Derivative's TouchDesigner](https://www.derivative.ca/) uses [Python for scripting](https://www.derivative.ca/wiki099/index.php?title=Introduction_to_Python_Tutorial). TouchDesigner is the realtime version of Houdini.
I use this: https://pypi.python.org/pypi/sharepoint
That may be the case, but this is the wild west of C++, where compiled code may be wildly optimized to a single instruction later on. Or it's really a slight bug, I can't say from where I'm sitting in my bed right now.
In true pythonic fashion, we've discovered that, hey, *everything* has a bit of python in it somewhere
how about [vtk](https://www.vtk.org/Wiki/VTK/Examples/Python)?
Ill never understand why people would dig through their comments to find something when you can literally click a button and have it saved to a neat, chronologically organized page on your profile
I'm now starting to think that python might be the *only* language with good 3d scene rendering libraries.
Please do! I've been interested in seeing how these are put together, but need it dumbed down a lot.
Tqdm has a display/visible argument if I remember correctly
Well, most actual *rendering* is done in C and C++. Python is only used for scripting commands and scene management stuff - things where performance isn't crucial.
/r/learnpython is probably a better sub to ask these in. Some questions to ponder... If all you're doing is summing, do you need pandas? Why not do all the calcs in numpy? Numpy has a dtype parameter you can use as well. np.sum(np.random.randint(2, size=int(N), dtype=np.bool))
Whats Qt?
as i said i am totally noob at python. tks for the tips
(The!) Tim Peters [replied](https://bugs.python.org/issue32543#msg309887). TL;DR not a bug. // represents the infinitely precise value of `floor(a/b)` and is not intended to be the same as math.floor. in this case the result can only be represented as a tiny fraction less than 9 and thus the floor is 8.
But I am serious. It was really stupid of me to confuse in snake case and kebab case. PEP8 Recommends using snake case too. 
Correct and simpler solution to this is using quotes, like this `-d "param1 param2"` and then split this string into components.
I would love to learn about this more. I put a few hundred into Bitcoin &amp; Litecoin over November-December 2017, sold it all off and bought a gaming dell inspiron for programming and gaming of course...
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/CO2iF8O.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
I dont know what im talking about, But im thinking look over bitcoin whitepaper if you haven't. Transactions should be recorded in a sequential ledger of sorts. This recorded ledger of transactions is updated by each node when a block is "mined". If a node is not connected to the network at a time, or misses info somehow, when the node connects to the network it will update to the longest blockchain, or the chain on the network with the majority of the mining nodes.
This was pretty cool and easy to understand. How different is it than what is used by existing coins? I think that I read some use scala or erlang (jvm functional langs), but is it this “simple”?
You mean a user should actually use helpful user interface tools... Theres a reason im using python.
Personally, I've used Qt a lot and a little bit of Kivy, and Qt is by far what I prefer for desktop apps. The native look gives you a good starting point with its built in widgets and you can then tweak to what you want. I've always managed to get exactly what I wanted with Qt. I've only used Kivy for a game but my feeling is that the basic widgets were not as advanced. I think that for desktop app, Qt is a solid choice whereas for a very custom UI (like for a game), Kivy might be better suited (very easy to write your own widgets).
This seems awesome. Has anyone gotten it running on a Raspberry Pi, either locally or sending debug to a different host? Locally, it seems I'm having trouble getting PyQt5 installed. So I tried it remotely (i.e., Pi sending terminal log output to a Windows machine running Cutelog). I pointed the logging.SocketHandler to my Windows machine IP, and configured Cutelog on Windows to look for my Pi IP. But no luck so far.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/yFQCXhz.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dsmdh6k) 
Seconding this, please python-i-fy it for us!!
Are...are you kidding? I literally said why like two minutes ago. 
because then you can use the browser to mine and make transactions. it helps to build it like this instead of calling functions in a __main__.py
Are transactions only "complete" when a block is committed/mined? E.g if I bought something with BTC must a new block be added to the chain before the item is shipped? Also I assume the OP is actually a bit over simplified in terms of how transactions are stored since it seems like a lot would be lost if it just buffers ls them up on each node. IRL there must be some kind of distributed transaction log.
I'll be honest I haven't tested remote logging before release. But I just tested it now (from my Raspberry Pi to my PC) and it works. Not out out the box, though. To make it work you have to change the listening address in the cutelog settings to 0.0.0.0 or a specific address you'd like to use. That made it work for me. I'm not sure why I don't bind to 0.0.0.0 by default, I guess I just didn't think about it. When it comes to installing PyQt5 on RPi and getting cutelog running there, I have nothing to tell you as I'm trying it just now for the first time as well. Will report back my findings. 
In the BTC network you normally have to wait a few blocks for your transacctions to confirm since nobody will accept a transacction with no blocks above it because it may come from a fork and dissapear when a longer chain becomes the main chain
You should probably post a more complete example. But you aren't trying to share data between processes outside of the return value, are you?
The example is definitely wrong. It's trying to apply the bitwise "or" operator to strings, which makes no sense.
Neat: https://pythonhosted.org/pynput/keyboard.html#monitoring-the-keyboard
&gt; Blame floating point numbers, all languages have trouble with them. That's not the real problem here, IMHO. A language should (at bare minimum) be self consistent in its definitions. If you can't reliably tell me which values of a and b will make "a // b == floor(a/b)" true, then the **definition** of the floordiv operator itself is fucked. Sure, the discrepancy stems from an implementation detail of that operator (i.e. there's a numerical precision difference in the algorithm computing floordiv versus simply dividing something and then taking the floor), but this kind of discrepancy should be treated as a bug in the language specification and not "haha floats being crazy again" TL;DR the floordiv operator should have been kicked off the boat entirely in PEP328. If it absolutely has to stay it should be implemented as literally math.floor(a/b) followed by a typecast, even if it's slower than whatever algorithm is computing floordiv now.
If you're doing data entry with CSV or JSON files and you don't need ``Decimal`` constants then that's not a problem, since your numbers' representation is saved in a text file and ``Decimal`` is a one-to-one bijunction with respect to the decimal string representation of numbers. I do agree that ``Decimal`` literals are sorely needed, I would kill for a way to extend the Python syntax with these. (I'm thinking something along the lines of ``0d0.9 -&gt; Decimal('0.9')``) Depending on your situation a domain specific language for arithmetic running in a parser like [Lark](https://github.com/erezsh/lark) might be more attractive.
Fine, but the bug report has been closed with no action. This is not an issue of the PEP being out of date. It's a fundamental definition. The person who closed it said the confusion comes from how PEPs write their notation. In some PEPs, people use actual Python code to use as a reference implementation. In other PEPs, people intend the mathematical definition of an infinitely precise `0.9/0.1` to be `0.9`. instead of `0.9 - 1e-10000` or whatever IEE says it is. `math.floor` implements rounding, when by the mathematical definition of floor, it shouldn't. Thankfully, practicality beats purity and there is an easy solution.
If you have a lynda account, there video courses are very good.
Oh shit this is a thing?!
It's this that you can't do: x = 'User' | 'Role'
Thanks for the feedback! Getting rid of getters/setters will keep my code base smaller as well. I don’t plan on ever abandoning this project, it’s really the first thing I designed, implemented, and released completely from scratch and on my own, so it’s my baby at the moment lol. I’ve got Dropbox sync on the wishlist for it, so you could have multiple instances of this open and all of them use the same list, which would require multi threading to keep checking and updating the list every few seconds or so, maybe just once a minute even. An option to force reload would be good as well, maybe even always have a local copy of the list and sync the list itself to Dropbox. That would probably be better and prevent any sort of file locking issues. 
Agreed, I'm surprised the ``//`` operator doesn't do the same underlying math as ``math.floor``, it's clearly a bug
I am not claiming that the web is popular _because_ of UI inconsistency, I am claiming that UI inconsistencies are apparently not a paramount concern. As far as what you _should_ be optimizing, none of the additional things you mention have to be given up in the name of a consistent UI language, and in fact, you could easily make the argument that being limited to a consistent UI _harms_ all of those things. Being given more freedom can allow a designer to better address accessibility and usability.
Please please please post a python translation, that would be amazing of you
Thanks, I haven't thought to look there. I could sign up for the free trial.
Will they update everything to Python 3?
I'm writing an entity class system around Shotgun's entity API (It returns json data). The kinda cool thing is it is lazy (it queries what it needs to, when it needs to), and stores a cache of the entities that will get cleaned up one everything that uses it gets gc'd.
&gt; Why do you want to learn Python? To create a program that I need that isn't available outside of DIY. &gt; Why is learning it so fast especially important? To complete the needed program in a short timeline. It is a pretty simple program, but with 0 knowledge on Python it is pretty hard to even start. A fairly good understanding will allow me to build the program and give me enough knowledge to know where to find help if I'm stuck. Kind of hard to even google something if I don't even know what it is called. &gt; What's your current experience level with computers and coding? Computers: 8.5-9/10 HTML/CSS programming: 6/10 Excel: 7/10 (Which is what the "program" is currently in, but I need speed and automation outside of Excel that isn't available within Excel. &gt; Why are the great resources in the sidebar not what you're looking for? They certainly could be. Dive into Python 3 and Non-programmers Tutorial for Python 3 both look like they have a ton of information, but I prefer video formats which neither of these are. It is easier, at least for me, to see everything happening real time with every step in between instead. Not every bit of information about Python is in the sidebar, and I'm hoping someone can come along and basically say "I learned Python via ____ video. It was quick and easy to understand compared to written instructions that may be misinterpreted at some point and cause an error. 
The correct solution is to implement the interface that you are replacing. 
I think you are missing the point that learning is not about following a video. After you learned the basics, just choose your own project idea and try to implement it. Then refer to internet sources to solve your specific problems.
What about Panda3D, used it years ago, though updates seem a bit slow. Anyway why do you place docstrings above the function (that is totally wrong, it goes below function definition), also you shouldn't use single quotes for docstrings, always use double quotes for docstrings, any other strings you can use what you like.
Interesting. Is it open source? Couldn't easily find the source code.
That's easy to fix (many people have suggested this). Will change later today.
I don't have any good videos to recommend for a Python beginner. In my experience, videos are great for learning general concepts but not the nuts and bolts. If you're trying to convert an Excel project to Python, I _highly_ recommend Automate the Boring Stuff with Python (which is linked in the sidebar...). It's a book written for Python beginners who want to automate things they're doing in Excel, it's free, it's super well written, and the author is here on reddit and very nice (and there are videos of his talks, though I don't know if that would be helpful). I don't think there's anything else you could hope for from a book.
I actually wasn't aware of pep8. I'll look into a style cop that enforces it for my next commit. I do want my code to look professional so appreciate this suggestion.
[vtk](https://www.vtk.org/) itself is very much opensource. I first came accross it through a package called paraview, which is used to visualise numerical data. Thus far I have come across a few libraries but I have never delved into it.
Writing essentially a text-parser that will scan a webpage looking for businesses that are found in my compiled list of ~5500 businesses. Once a business is found, I'm going to return financial information on it. 
**Qt (software)** Qt ( "cute") is a cross-platform application framework that is used for developing application software that can be run on various software and hardware platforms with little or no change in the underlying codebase, while still being a native application with native capabilities and speed. Qt is currently being developed both by The Qt Company, a publicly listed company, and the Qt Project under open-source governance, involving individual developers and firms working to advance Qt. Qt is available with both proprietary and open source GPL 2.0, GPL 3.0, and LGPL 3.0 licenses. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
Lol
Your definition of get_data() is: `get_data(aTuple)`. It expects only 1 argument. But when you call `get_data()`, you are passing in `get_data((1, 'mine'), (3, 'yours'), (5, 'ours'), (7, 'mine'))`, which is 4 different arguments (tuples). Each tuple is defined by (&lt;value&gt;, [&lt;value, ...]).
Not sure how long it would take, my guess is that it would take a day or a weekend, but the book: "automate boring stuff with python" is pretty good start
!remindme 2 weeks
(small, large, words) = get_data**((**(1, 'mine'), (3, 'yours'), (5, 'ours'), (7, 'mine')**))** add extra parenths if you want to send a tuple of tuples to get_data
Check out /r/learnpython 
JetBrains went full tilt r/fellowkids with that fidget spinner. The other stuff is awesome though! Also, gimmie that fidget spinner. 
Same thing here [https://bugs.python.org/issue27463](https://bugs.python.org/issue27463) with the same result. Unless somebody can propose a docs change nothing will happen.
RemindMe! 2 days 
I will be messaging you on [**2018-01-15 19:50:57 UTC**](http://www.wolframalpha.com/input/?i=2018-01-15 19:50:57 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/7q2vt7/learn_blockchains_by_building_one_hacker_noon/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/7q2vt7/learn_blockchains_by_building_one_hacker_noon/]%0A%0ARemindMe! 2 days ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dsmr5rj) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
they aren't lost because they can be mined on the next block
At this point I feel a little stupid to ask, but how do you make PyPy interpret a program as Python 3.5 code?
I've played around with pyside and I liked it. Iirc it was a pain to install, until I found that amazing binary site for python packages.
Pretty great decision 
What IDE is this?
downvoted for hackernoon
/r/learnpython [Teach Yourself Programming...](http://norvig.com/21-days.html)
You mean like Google?
Thanks, this prompted me to make my first twitter bot this afternoon. I didn't realise it was so simple to interact with the twitter API. 
Also it'd be nice if it had fully general artificial intelligence to anticipate my every need. I need it next week and I have a budget of $200.00
Netbrains PyCharm
[removed]
[removed]
Just as you run any python code. The interpreter (the executable inside this package) will take your text file, translate it through a parser that knows python 3.5 syntax, and run that translated bytecode. Your text file must understandable using the syntax specified by python 3.5, as opposed to a python 2.7 interpreter which requires python 2.7 syntax. Since the two syntaxes are not that much different, you should be able to create a file that is understood by both interpreters.
Most of my videos are examples of the usage of the pynput module. Much or the raw code can be found on here, I have just built it up and explained it.
Even if these programs were open source, speed is a really big deal.
Your architecture is like this: def your_arch(): numbers = [np.array(n) for n in range(1000)] for i, num in enumerate(numbers): numbers[i] = 1+num And numpy is best when you use it like: def numpy_arch(): numbers = np.arange(1000) numbers += 1 using timeit in ipython, I get yours takes 250x longer. Obviously this is a silly toy example, but the difference between using numpy in a vectorized was vs iterating over numpy arrays is typically on the order of 100x in my experience. In the former example, assuming the function is much more complicated that addition, you don't have much room to optimize. You can write your inner function in C, and there will be very little change in performance. In the latter, if you use numba.vectorize or write a ufunc in C or even just use numexpr, you might get an additional 10-250x performance improvement. I'm glad your program meets your needs, but this architecture will in no way come close to doing what POVray does.
&gt; ... the next level bot to automatically hunt on any given web application to retrieve the most precious of information while saving us a ton of time. I'm all for neat things, but that's an extremely ambiguous statement. On the surface it sounds like you've just described a web crawler/spider as another commenter here has mentioned. Present the source, remove the ambiguity, and show us the light.
Hussein is the best
RemindMe! 7 days
Appreciate the feedback. Will try and refactor. I think it can still be a slow version of povray :) 
[removed]
In film/VFX time is money... lots of it. Production renders with CPU engines already range from hours to over a day with optimized C++ code and libraries. No one in this industry would even consider using python for actual rendering (automating yes) as that speed difference is too large of a sacrifice. For other industries, I would venture it could be more useful. But not for us. And based on the comments here I don’t think you’re targeting is anyways ;)
RemindMe! 2 days
Check out /r/learnpython Also, indent blocks of code at least 4 spaces for formatting. 
RemindMe! 2 days
!RemindMe 5 days
I'm a beginner to Python and computer programming / computer science in general! (a simpleton compared to you maniacs) So far I only know the basics about Python as an interpreter and how to code in it. I've been working on a very basic program that tests whether an integer satisfies the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture), and displays the value of each iteration in the process. If you wanna check it out you can download it from my google drive [here](https://drive.google.com/file/d/14sVZcTQX62ETJgDX_qbFt4gHDiuPLpQN/view?usp=sharing). Please feel free to tell me why I am retarded and that my program is worth no more than an elephant's asswipe. &lt;3
I know, wasn’t to worried about formatting considering I was entering on phone
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/redditthoughts] [I SAW a mate search](https://www.reddit.com/r/redditthoughts/comments/7q81gl/i_saw_a_mate_search/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
The formatting isn't for you, it's for the folks who might try and help you.
Wow. Lots of missiles in Hawaii today
Lol
I already checked that and other forums out and the only thing I found was possibly using getattr() but that seemed more like grabbing an attribute from the function and not actually calling the function.
very nice. Thank you!
Remindme! 2 days
Good catch, source posted alongside the bot post!
Here's your docs change; p // q == floor(p/q) except when p = 0.9 and q = 0.1
I'm not sure if I understood your question correctly. Is this what you are looking for? def sample(x, y) pass a = sample(x, y) This will store your function in the variable 'a' and then you can access the attributes, values using a.attrs, a.value, or a.__dict__
Google Cloud Platform but is more expensive, I pay ~35 U$D montly
Yeah I looked at that, but couldn't find anything about price. 35$ a month is way too much though...
What about AWS lambda? You can upload your python script (then edit it online) and have it triggered by a "CloudWatch Event" set to fire every hour. With lambda you only pay for the resources you use running the script and there's no server to worry about securing or maintaining. https://aws.amazon.com/lambda/ If you're signing up for a new AWS account you'll get free usage for a while too. https://aws.amazon.com/free/
All of which are mostly implemented in c/c++
Thank you /u/GoodBot_BadBot for tallying [our](/r/redditthoughts/top/?sort=top&amp;t=year) meagre vote on /u/GitHubPermalinkBot 
Firstly, let me apologize for the mess. The program logs everything, except it logs it in a different file everyday. So I had to manually get all the trading entries for the past 7 trading days. This was the list of tickers that was used last week. ['SGRP', 'MYSZ', 'WPCS', 'MARA', 'PFMT', 'OSN', 'RAVE', 'AYTU', 'ITUS', 'BNTC', 'DDE', 'SAEX'] As of right now, the tickers are inputted manually after searching a couple of screeners. I'm working on an automated one but it's not ready yet. [Here's the combined log](https://github.com/aseylys/KStock/blob/master/TradeLogs.log) (minus the initial configuration statements and such). Total 7 day profit was $768 isn't great, but the algorithm isn't anything near sophisticated. Let me know if you have any questions.
Was...kind of hoping that..This would be a huge news for pure artist to make their own game.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [aseylys/KStock/.../**TradeLogs.log** (master → 7ceb846)](https://github.com/aseylys/KStock/blob/7ceb846851949e3ac6bd9bc0fae953c84a1ccc85/TradeLogs.log) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dsn8hos.)
Good bot, [we](/r/redditthoughts/top/?sort=top&amp;t=year) thank you for your consistency, _bleep_, _bloop_.
Thank you jab-programming for voting on TotesMessenger. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Combine this with something like zappa and you can install whatever packages you need. The script can run once per hour for free under AWS's current terms.
I know this is the python sub but honestly why dont you just use an arduino? There are countless weather station tutorials for it and its so easy. As for the sensor, you say the adafruit ones arent good enough but you dont list your precise needs. What does your sensor need to do that the common ones dont?
good article, thanks
from PlayerCharacter import PlayerCharacter
That did not work for me. I have a package called PC with files Fighter.py and PlayerCharacter.py. In Fighter.py I do: from PC import PlayerCharacter
Incidentally, the Arduino IDE has extensions for writing code directly onto ESP8266 boards. For indoor environmental monitoring, I use ESP-01 boards and DHT11 temp/humidity sensors. I found example code for uploading readings to InfluxDB, so I just had to put in credentials and wire it up.
I'm trying to say that looking at hardware specs for the things just confuses me. Software, I get. Servers, I understand. These small IoT things? Just confuses me. Hence the request for a more specific referral. I have nothing against adafruit. I have a problem knowing what to get.
Love seeing the typing syntax. 
Let's not. What you're describing isn;t exactly "new and amazing", it is more like "old and done a million times before". Web crawlers and spiders aren't exactly cutting edge technology. Your enthusiasm might be more credible if you gave a sign that you knew what you were doing and had even a vague idea of what existing technology already does. Good luck, but no thanks. 
Thank you, that will work. I know it is messy but was didn’t feel like using a database and honestly I am just using it to troll my roommate. Basically streaming reddit comments to reply with random cat facts, quotes from trailer park boys and other random shows/movies/phrases. Got a little bored yesterday.
Oh well, if you weren't too worried about asking the question, I'm not too worried about answering it. Downvoting for laziness and being inconsiderate.
Yeah... It'll go on like that for about half the week. Among the other things I'm working on with this bot, I'm trying to write an update that should stop it from constantly tweeting about the exact same event to avoid this problem, but it's going to take some time to roll it out. 
Python and run time scripting languages are particularly poorly suited to the kind of work load a 3D modeling engine needs to do with respect to response times and there are just so many better languages to work in for that kind of project.
Amazon UK. I'm sure there are probably cheaper places but for a handful of boards, sensors and jumper leads, it didn't seem worth shopping around. I got some cheap 3.3V power supplies also but you mentioned batteries. I'm not sure what kind of lifetime to expect for wifi devices.
These are what you are looking for. Instructions for flashing Micropython to the board can be found on the Micropython site. HiLetgo New Version ESP8266 NodeMCU LUA CP2102 ESP-12E Internet WIFI Development Board Open source Serial Wireless Module Works Great with Arduino IDE/Micropython https://www.amazon.com/dp/B010O1G1ES/ref=cm_sw_r_cp_api_.2SwAbDWZ9E7J Geeetech 4PCS DHT11 Digital Humidity Temperature Sensor /Arduino DIY https://www.amazon.com/dp/B007YE0SB6/ref=cm_sw_r_cp_api_A5SwAbP2YWV5K
That's what u/caffeinatedmike said! ^^^Not a bot. | ^^^Commented by **me** | ^^^Nice bot btw!
Reddit will be nothing but bots responding to each other in a years time. what a useless bot. 
 for saying in inapprops: if saying.lower() in c.body.lower(): Probably not a big deal since this isn't mission critical but the 'sayings' file is effectively static, why not just cast it all to lower() once, outside of the comment loop? Or alternatively, store it that way to begin with.
Hadn't really given the script too much thought seeing as I literally just decided to throw it together this morning for fun. But, that does make sense and I would've likely done that had it been a more in-depth project. I'll likely make those changes as I add to the bot. Thanks for the input :)
Good bot
Are you sure about that? Because I am 100.0% sure that ashesall is not a bot. --- ^(I am a Neural Network being trained to detect spammers | Summon me with `!isbot &lt;username&gt;` |) [^Optout](https://www.reddit.com/message/compose?to=perrycohen&amp;subject=!optout&amp;message=!optout) ^| ^Feedback: ^/r/SpamBotDetection ^| [^GitHub](https://github.com/SM-Wistful/BotDetection-Algorithm)
I am too stranger
There's already a Hitchhikers guide to python (which is excellent). You should rebrand :p
What were you hoping with those paypal/BTC links?
Two options I can contribute: If your script comprises entirely of python code and no compiled C/C++ extensions, you can use [Google App Engine](https://cloud.google.com/appengine/docs/python/) to host your script for free (within certain quotas that reset daily) Alternatively, [Vultr](https://www.vultr.com/pricing/) has $2.50/month plans.
Thanks for the comment. This is very insightful. Its true that today I'm not focused on speed and Python isn't the tool for speed. But given its growing popularity, I suspect it is going to get faster in the near future (and so will the ability of me and any others working on this library to exploit that speed). Hadn't heard of the other libraries (Blender others mentioned here in the comments), will check them out.
Just started "The Python Mega Course" by Ardit Sulce on Udemy. Trying to transition from manufacturing to programming. Only programming knowledge I have is one semester of HTML 10 years ago in high school. So far I've learned the basics of strings, lists, tuples, dictionaries, concatenaded strings and understanding error messages. In a few days I should be making my first application. 
That'd be fun to watch from time to time 
That’s the representation of that “object”. In this case a csv object it seems. Why are you trying to print the object itself? Or are you trying to print the string 
Check out /r/learnpython 
that's fairly obvious. To get money. I don't mind getting down voted but this is clearly advertising for a shitty bot that adds nothing to reddit. The posts it makes are 95% begging for donations and 5% content, and the content is a link to a shitty gif. 
Iirc the transactions in the unaccepted block are queued up again for processing.
Im really just trying to see what the object contains. what data or methods live in the 'csv' module....so I know what I can do with it and what's possible. I came across something similar when trying to write a reddit bot.....there was a module I imported, I wanted to see what was possible.....but all it would give was a weird hash like this. Am I thinking about this wrong? What should I be doing to learn about these modules. Thanks for taking the time to reply! I appreciate it.
!isbot /u/AquaQuartz 