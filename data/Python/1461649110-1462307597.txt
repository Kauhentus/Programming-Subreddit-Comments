See the [descriptor protocol](http://python-reference.readthedocs.org/en/latest/docs/dunderdsc/). &gt;If binding to a new-style object instance, `a.x` is transformed into the call: `type(a).__dict__[‘x’].__get__(a, type(a))`. (In 3.x, all "object instances" are "new-style".) You're considering the underlying code implementing the `is` operator, but not the code implementing the method lookup. Presumably, the 3.x `__get__` implementation is performing some caching that the 2.x implementation isn't. I managed to Google up [this SO question](http://stackoverflow.com/questions/26569797/why-do-python-descriptors-copy) which looks like it has some more relevant information. 
It'll become relevant somewhere around a billion elements. Asymptotics never had much to do with practicalities. Though I'm too tempted to link to http://yourdatafitsinram.com/ to not do so.
So you want to know what a tool can do, then choose one and make it? I think you should find the ideas, then find the tools to make it real. Can't build a house with only hammer. But if you already know what kind of house you going to build, it'll be a lot easier for you.
I don't have an office right now, so I only work remotely. I occasionally meet with a client in their office if they are located near where I live, but it doesn't matter where I live because those meetings could be done remotely. Python and SQL are probably the most important in terms of languages. I don't use my ML skills very often for paid work, and I've never been paid to do anything in Spark or Hadoop yet. They are definitely skills in high demand though. There are quite a few companies recruiting for remote data science jobs looking at people with only a few months experience or people straight our of data science "boot camps".
Sure, but it's also like trying to sell Haskell as a general purpose language by showing off how succinctly you can express the Fibonacci sequence. A company directory of employees makes more sense as an example, since that list might be hundreds or even thousands of names. Generally speaking you would also only ever need to access that data in one of two ways: alphabetically as a list or random access of a particular employee. So storing it in sorted order makes sense, and since employees come and go all the time you know there will be repeated deletes and inserts into this list so there's an even better case for having a data structure that's already sorted as opposed to inefficiently calling `sorted()` for each output or using the error-prone method of `employees.add(employee); employees.sort()`. A list of states will be written/generated once, caps out at 50 (for now), will have no insertions or deletions, so a traditional list that you sort manually or call `sorted()` on for output will do just fine.
Thank you Marein for your comment. This was an example which showed that the list can contain both strings and integers together and we can perform indexing and slicing on it. I will also be making more videos that will explain dictionaries and key-value pairs.. 
Maybe there's an API that will let you ping multiple stocks at once? Also, you could use some kind of asynchronous requests to fetch multiple pages at once? (grequests, I think)
Although I code in Python, this post never really convinced me.
Yahoo Finance has a significant delay, scraping it that fast just wastes bandwidth. Just open a portfolio with someone who actually has an API for these sort of things like TradeKing, and enjoy the fact that you don't have to deal with lxml or BeautifulSoup to get your data out.
I forgot to account for reference counter in int instance. I agree that was just the estimation. Probably for larger volumes it pays off to have more compact structure. I have not yet met the need for sorted collections in business environment. But surely using this collection can help in programming riddles. I was just wondering if it is worthy to eliminate this limit.
Right you are: &gt;&gt;&gt; id(Foo.method) 4494216640 &gt;&gt;&gt; x = Foo.method &gt;&gt;&gt; id(Foo.method) 4494023888 &gt;&gt;&gt; del x &gt;&gt;&gt; id(Foo.method) 4494216640
Are your four CPUs hyperthreaded, i.e. 8 logical cores? If it's in the document, I apologise. I skimmed the text but didn't find it. In my experiments, with four hyperthreaded cores, you can set the number of workers (threads and prange) to 8, and get a slight improvement. The weird thing is that in each test I've done with this setup, threads do slightly, but reproducingly better than prange. I don't know why. I'd be interested to know if you find the same. (My PC has an i7, can't remember which one).
From the sidebar: If you are about to ask a question, please consider r/learnpython. Homework-style questions will be removed, and you'll be encouraged to post there instead.
Afaik `setuid` bit don't work well on scripts ... need to set it on the actual binary, like `/usr/bin/python`. Correct me if I'm wrong.
As much as I love and support Python, Java and C#/.NET's biggest selling point for the enterprise is that they offer complete, insulated ecosystems. They're platforms that offer IDEs, GUI toolkits, messaging middleware, deployment etc. all in one package and without stepping outside the safety of vendor support. For large non-tech corporations that will always choose the most conservative option for their tech, it's a no-brainer. This is something that Python and similar languages will just never provide. Of course, you can use them within these platforms but they'll always be seen as a second-class citizen.
You simply misunderstand. It tries to open the whole string as a file. Thus, if you have `contents="Hello something, how are you? filename.txt"`, it will try to see if the whole string exists as a file (which is lightning fast compared to how long it takes to send an SMTP call, something in the order of millions). When you give a list, it will check every item in that list: `contents=["something", "something"]`. But why would you ever send a list of contents unless you intend to send something other than a string? More logically you'd join the list if you want to send a string. As you can see, there's really no chance for this to go wrong by mistake.
Though I guess we indeed have to disagree if you are someone who likes to send emails with ONLY a filename as contents, and do not intend that to be converted into an attachment.
PyDev: http://www.pydev.org
Type hints do not replace strong static type checking. I also use Python for fun, prototyping, smaller apps, and with beginner programmers. For applications that have to be right, I use ocaml. 
Nice that both exist. I would guess that the pure python version was probably written for the benefit of pypy and that the c version is preferred/better. Which is a similar situation to the dict/userdict situation. If you want to subclass... you can... but performance won't be remotely comparable and so subclassing is discouraged... which is why we don't have a rich collection of basic data structures. 
Yes I clicked the link. Did you read what the underlying representation of SortedList is? http://www.grantjenks.com/docs/sortedcontainers/implementation.html. That is absolutely sqrt n just like Veedrac says. In fact, the author admits it himself: &gt; &gt; Traditional tree-based designs have better big-O notation but that ignores the realities of today’s software and hardware. If you're going to talk about "asymptotical runtime", then you should understand what that means. You cannot "do some tests" and determine it's logarithmic time!
Neither am I. I was just pointing out the alternative that has better asymptotical guarantees. I personally use blist because I like the interface better, but sortedcontainers is definitely usable.
&gt;As mentioned before, because Python is Dynamically typed it prevents the compiler from making smart optimizations. Also, you find out about all your typing errors at run-time. I honestly consider this a weakness of the language. It isn't. A) Running tests in python often takes as much time as compiling does in Java, let alone compiling and running tests in Java. B) Dynamic typing is a trade off between verbosity and compiler optimization. If you consider CPU time to be expensive and developers cheap (which is the case for some projects, but *not by any means a majority*), it might very well make sense to use something fast with static typing (hence cython). C) The additional type safety provided by static typing catches some bugs but not *nearly* enough to justify lengthening your code base by 15-20%.
&gt;Almost every bug we hit in our app is due to this dynamic typing Something's very off there. For me it's around 5%.
Maybe including all the dependencies and libraries? Who knows... 
You could be generating many more of the other types of bug compared to us... Seriously though, the whole duck-typing thing allows lots of errors to slip through. Usually what happens is that the original code is perfect, but then there is a need to change a data type later and Python won't catch all the possible places that new data type won't work without amendments. You won't even catch them all first time without extremely demanding unit tests because the problems are hard to forsee, such as the first time you accidentally pass a unicode to something that expects a str (which will probably never break until you use some non-ASCII) or you pass a dict to something that requires a list (which won't break unless you start to sort it).
Sorry but #8 is not a myth. While it is possible to scale up Python code and concurrency is possible with dozens of libraries, we are still hamstrung by the GIL and it's inability to take advantage of more than 1 CPU worth of processing power. I had to do a lot of juggling and modifications to my workflow in order to scale up a single-threaded application which was CPU bound and the solution, while simple, is non-optimal. I have to do a lot of out-of-process coordination. In any other language I would just make them threads with shared state but that was not possible since I'm CPU bound.
&gt; C) The additional type safety provided by static typing catches some bugs but not nearly enough to justify lengthening your code base by 15-20%. My comparison is C#. In my experience, my C# code base is shorter than Python. And when I went to debug my Python code, 90% of my run-time errors were type errors (and this is WITH Python 3.5 and type-hinting!) Unfortunately PyCharm isn't perfect at type hinting yet. *shrugs*
Yeah, I agree here. The REPL is nice in that regard. 
Sort of depends how good a developer you are, I guess. I wrote 500 lines of code in Python over a few days once without using the REPL or running the code. I then stitched it together and hit run. Most of my bugs were Type errors. Before I found Type-Hinting (formalized in Python 3.5), I found Python a pain because I didn't know what was being passed or sent back or if things were "lining up". Honestly, I'd have to see a few independent studies to believe one way or another.
As I keep telling people, there's no "one true programming language". Learn a few who does things differently, with different strengths and weaknesses. You could probably cut a plank with a tablespoon, but that will take time. Same goes for eating soup with a saw. 
I started to create programs in python 5 days ago...So please give me advice how to code better :)
/r/learnpython
&gt; lmost every bug we hit in our app is due to this dynamic typing and not knowing whether a function exists until you try to call it This has never happened to us at my work. I think it's because we're all on PyCharm and the IDE tells you when a function exists, and helpfully tries to fill in all the arguments for you. I'm pointing at the IDE rather than some great skill of ours, or the consistency of our codebase because when we started writing in Elixir (similarly dynamically typed), we had lots of errors (thankfully all at compile time) because we made the wrong function calls.
If somebody make valid criticism to python, talk about php... 
Thats not exactly what I meant. I would rather say that programming languages are quite complicated instruments. Lets say you are using two similar but different very complex tools. If you need to switch regulary between them you will probably end with limited style of workflow which is almost identical for both tool. From your point of view it is most effective thing to do. From the perspective of language and its implementation it is not so effective. From recent posts this one: https://www.reddit.com/r/Python/comments/4fcnfy/how_can_i_manage_memory_in_python_running_out_of/ is IMHO extremely good example how the program in Python should not look like. But who is to blame? The programmer or the language? The power of Python is not probably the language itself (which is reasonably good) but the huge ecosystem and community. I saw web developer who was comparing PHP to Python saying he is not comfortable in Django. In fact, he was not comparing apples with apples. Pythonists often declare they are all adult people but open-source is full of examples where these pythonist dont respect underscored names as private. In that sense is better to use Java with its philosophy that all coders are babies.
&gt; But Daniel made up his mind that he would not defile himself with the king’s choice food or with the wine which he drank; so he sought permission from the commander of the officials that he might not defile himself. Now God granted Daniel favor and compassion in the sight of the commander of the officials, and the commander of the officials said to Daniel, “I am afraid of my lord the king, who has appointed your food and your drink; for why should he see your faces looking more haggard than the youths who are your own age? Then you would make me forfeit my head to the king.” But Daniel said to the overseer whom the commander of the officials had appointed over Daniel, Hananiah, Mishael and Azariah, “Please test your servants for ten days, and let us be given some vegetables to eat and water to drink. “Then let our appearance be observed in your presence and the appearance of the youths who are eating the king’s choice food; and deal with your servants according to what you see.” &gt; So he listened to them in this matter and tested them for ten days. At the end of ten days their appearance seemed better and they were fatter than all the youths who had been eating the king’s choice food. So the overseer continued to withhold their choice food and the wine they were to drink, and kept giving them vegetables. :)
College Freshmen, which is basically HS.
Damn, you're hard to convince. You're only considering that the code can be used like you say it's going to be used. Have you ever considered that, if this library is going to be used by a lot of people, someone will use it for a contact form? What if that code just sends the plain message the user enters? The strings you enter can simply mean two things, and you never know without checking if the file exists. If the file exists, you're out of luck and should just throw an error. *So you can't send messages which resemble a filename*. Your email library CANNOT send and email just containing "/etc/hosts". And that's just plain wrong, because it's an email library. I should be able to send any message I please.
It's a Programming 1 course, it's nothing special and a lot of tutorial style questions.
Unfortunately, no; although I haven't tried mail servers other than Gmail, so perhaps Yahoo or somebody else doesn't require Oauth2. 
PyCharm can only do so much, and function completion is only useful when the code is being written, not when some other calling function is being changed. Example 1: I write some code in a function that takes a str, and I use PyCharm's autocomplete to call various functions on it. Then later that code is called from a different place and now the text passed in comes in as unicode - all the same functions 'should' work and won't get underlined in PyCharm, but now it'll blow up on certain text operations if the input contains certain characters. Example 2: I write a filter function that takes a list, operates on some of the contents, and returns a modified list. Later, the code that calls it changes from using a list to using a dict. PyCharm isn't going to flag that because it's perfectly acceptable to pass a dict where you were expecting a list - it'll just slice off all the values and operate on the keys only. Python also considers it acceptable for you to assign a list to a variable name that previously referred to a dict. So if you're unlucky you'll only learn of the problem some way later down the line when you finally try to call a function that exists on dicts but not on lists. Example 3: I write a function that looks at each of a list of words and analyses them, exporting some data into my document database. One day, I write code that calls that function to process a document but forget to call `split` on my input text first - my analysis function happily treats the text as a sequence of 1-length words and the returned data is meaningless. For reasons like this, I seriously doubt it's 'never' happened, unless you rarely modify or refactor your code. Most likely you just don't think of some bugs as being type-related, because the problem never is the type as such, it's some sort of other mental process happening upstream - it's just that type-checking would have caught the error early.
You missed the part where I said "all in one package". It's not about whether Python can do all that, it's about whether these promises fall under a single organization's responsibility. That means that while you can invest in PyCharm as an IDE, you will have to additionally trust IntelliJ to support it. If you invest in PyGTK, you will also have to put trust on the PyGTK project, and so on. Large, bureaucratic organizations will often make huge compromises to pick the safest option, or at least what is perceived to be the safest.
This used to trip me out too, but it makes sense when you understand a little of what goes on internally. For example, the function needs to be called when the button is clicked on, and it needs to be able to be called any number of times. This is only possible if you pass the function object itself without the parenthesis. Otherwise, you're calling the function and then passing its result as an argument (as mentioned already by jura__).
Each library has its place. I tend to use networkX when it can handle the task and iGraph otherwise. Both libraries are very good. Use NetworkX for smaller networks and dynamic networks. NetworkX is pure Python, well documented and handles changes to the network gracefully. iGraph is more performant in terms of speed and ram usage but less flexible for dynamic networks. iGraph is a C library with very smart indexing and storage approaches so you can load pretty large graphs in ram. The index needs to be updated whenever the graph changes, so dynamic graphs incur a lot of overhead. The C underpinnings leak through to the python interface at times. To use iGraph well, you should read both the C and Python documentation and understand how to query against the indices. With the C library, you can write Python extension modules for specialized graph tasks. The iGraph developers are active and helpful on the mailing list. 
&gt; Large, bureaucratic organizations will often make huge compromises to pick the safest option, or at least what is perceived to be the safest. And that is different from using an IDE supported by Microsoft, how?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, we are sure you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
&gt; But you can't blame the python community for not focusing on it 5-20 years ago - because people didn't think it was a silver bullet, like so many do today. C, C++, and Java were the most popular languages for most things throughout the late 80s, 90s, and 2000s. Type safety is not a new trend.
You can, and if you're so scared you can wrap the string in `yagmail.raw(yourstr)`. But you really do not get it I think... arguments do not get expanded, but the parsed string does. So if you have `"your value is: {name}".format(name="secret.txt")` where "secret.txt" is obtained from a contact form, it will try to expand "your value is: secret.txt", which, as a whole, is not a file. Perhaps if you really want to understand what is going on you could have a look at the code, and you'll see that accidents won't happen, and in case you are paranoid, you can always explicitly use `yagmail.raw`.
+1 for this. Polling a public website at that frequency almost certainly will get you rate limited or blacklisted. The behavior is much more befitting of an official API. 
I see. Having a complete version of spotify via CLI would be baller though. Cheers! L
there are refactor functionalities, that check for usage and stuff like that
If they taught this stuff at my school I would be sooo happy
I started writing unit tests in my second programming class. I found that I often was finished with projects much sooner than my classmates because I was able to verify each component of the project worked, while they spent time figuring out what part of the project broke after it was "complete"
Sounds like you have a lot to learn. First off, you should post questions in /r/learnpython, though you would break their rules because this is really easy to figure out with a simple Google search. However I can point you to a really good tutorial series that explains pretty much all the basics, even how to install python, in an eli5 fashion. Thenewboston http://youtu.be/HBxCHonP6Ro?list=PL6gx4Cwl9DGAcbMi1sH6oAMk4JHw91mC_ 
Yes, application specific, mine I have to ingest and process a high volume of data ( 3 or 4 stream at 170MB/s, limited by local IO ) which is bottlenecked by the CPU. Multiple processes are fine when you don't need to pass high volumes of binary data between them in a latency sensitive manner.
This isn't true I believe. I currently have 2 factor authentication enabled on gmail and can send emails via smtplib. You just need to set up a app specific password and not use your normal password. (which is also nice so you aren't storing your normal password in a script. ). https://support.google.com/accounts/answer/185833?hl=en
Please post to /r/learnpython instead. Read the sidebar :)
For things like their portability, speed and so on. I remember write once; run anywhere being the headline with Java. I don't really remember type safety coming up in the elevator pitch.
I recently ran into a problem which would be neatly solved by tabular data. https://pypi.python.org/pypi/tabulate fit the bill quite nicely.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, we are sure you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Detailed docs but I'm missing a bit of an overview. I think it'd help to show some of the admin screens and maybe a practical code example.
So it stops being logarithmic when the lists are so big they don't fit in my computers RAM? May as well stop using it altogether.
how about &amp;format=text and you get it as a tab delimited list, nice and clean, no need to involve excel
[Google Python Style Guide](https://google.github.io/styleguide/pyguide.html)
So use Jython or PyPy. Nobody claims that CPython or Python in general is the solution to every possible problem. And it always possible to construct a sub-optimal solution.
&gt; "Python is not secure" what? how would it not be secure? Python 2 certainly wasn't, doing anything with TLS, and it still requires a decent amount of jiggling to make it so for a lot of edge cases even after 2.7.9-.11
What does this do?
Do something really subversive. You're not aiming to make production code right? Why not... Write a custom importer? Maybe it imports CSV files, and the module created contains only `contents` (easy), or maybe it imports a .sql dump and creates an ORM representation of it (medium), or maybe it imports a bitmap image, interprets it as Piet code, compiles it to python, and presents it as a function (hard).
So, he basically managed to get a modern variant of FORTRAN in python.
It seems very nice but do you know how can I put print "a" print "\n" def weighted_random(weights): number = random.random() * sum(weights.values()) for k,v in weights.iteritems(): if number &lt; v: break number -= v return k weights = {'1': 48, '0': 52} for i in itertools.count(5): print weighted_random(weights) This part into the table? I am bit strucgging in this
This is only really a problem if you don't have tests and those code paths are unexercized. You don't need *extremely* demanding tests to eliminate the vast majority of duck typing bugs, either.
I have JUST started your course by the way (unit 1). I do enterprise software too. I have the luxury to choose my tools and I chose python already. I am trying to get more convinced because the Java inertia is strong. I believe we need these kind of voices, keep up the good work. 
Overview how enterprise python development is done in large organizations (guides, best practices, etc): [Enterprise Software with Python Architecture and Best Practices](http://shop.oreilly.com/product/0636920047346.do) I am not affiliated in any way and I don't know if it is good content, I just started it.
Author here, don't mind if I rebut in. First off, yes, I have fielded these concerns multiple times, and I've even fielded the concern that these aren't concerns multiple times. Not trying to bait, though people do like to argue. 1. Language age is not at all the only factor, but maturity is a real thing, and it takes users and time. I think the rest of the post explains users fairly well, and so I had to make a point that the time goes pretty far back as well. We would be remiss to forget the contributions of Zope and other earlier Python libraries. 2. For security, I had to make the point that PayPal now uses Python at the heart of its security efforts. As an example, there are many who think that deploying source code is a security flaw, and so Python is not secure. That's wrong for several reasons. Much more important is your org's security management. If you want to evaluate Python's security specifically, it would be best to look at the runtime, and that's what the post talks about. 3. I'm not sure what you're trying to say about scaling. I agree that scaling is not all about the tools, and in fact is probably more about domain. Scaling is about balance and moderation, and there are always new limits, so I wouldn't call it easy, either. 4. Really not clear what you mean about scripting. 5. It does not make sense to have an unqualified discussion about performance. We all casually refer to three things when we discuss Python: the language, the runtime, and the platform. The language and platform enable fast development and are only indirectly related to slow runtimes. As for runtimes, we use CPython at work to achieve deep submillisecond response times. 200 microseconds is our target median time for a specific microservice. Another service is handling well over 20,000 requests per seconds, sustained, across 3 boxes/9 workers. CPython has not been slow for us here at PayPal, and that's an important data point for other decision makers. Anyways, I'm glad the myths haven't plagued you or your coworkers. My goal was to create a link for people with better things to do to send to naysayers. Honestly, I think there should be more such posts, and with the list you have here, I think that you're well on your way to creating that post. Flesh it out and post it right here on /r/python :)
This is great. I'm brand new to Python (primarily SQL coder - a friend told me, "You could probably pretty easily use Python to download that data..." - that's as far along with Python as I am right now - basically hacking together different pieces of things I've Googled). My ultimate goal here is to upload this data into a MySQL database where I run this job daily using Pentaho to kick off a shell script that executes the code - so in this case kick off a python script, download file to a directory, then kick off another Pentaho job to load the Excel file to MySQL. Is there an alternative way, however, to do all that in Python - (in the ideal case) look at a MySQL database to get max (latest date) from my target table, form URL with date &gt; last date, download the data (not to a file, just in memory, or to a file if needed), then upload the data directly to MySQL? Basically do all this from the Python script instead of breaking this up between different Python / Pentaho actions?
Thanks for the reply - if you have a min, I wrote more info about what I'm doing in my other reply to /u/vinovator - I could download either tab or Excel - but I think Excel is probably easiler to load into my database from Pentaho. But I had posed a question about the capability of loading the data directly to MySQL from Python - if you wouldn't mind taking a look, would like to get your opinion as well. Thanks!
Thanks! Java inertia is plenty strong, but Python is fundamentally a better systems programming language. One competent Python engineer can move mountains that Java teams will struggle to even summit.
I think it lets you change workflows on-the-fly without recoding/redeploying anything. Example: Checkout process. Steps for customer: 1. Put stuff in cart 2. Enter shipping address 3. Enter credit card information 4. Enter payment address 5. Final checkout screen and you want the ability to combine steps 2 and 4 if the payment address is the same as the shipping address, so the process/workflow becomes: 1. Put stuff in cart 2a. Enter shipping address 2b. If "payment address is the same as the shipping address" box isn't checked, enter payment address 3. Enter credit card information 4. Final checkout screen What this project would allow you to do is to specify *in your database* the workflow that should happen, instead of specifying it in your code. So in the example, all of the steps and transitions between the steps would be stored in the database, not in your code. That way, when you/"brilliant" business people want to change the "business logic" you don't have to recode and redeploy your application, you just edit a few steps/transitions in the Django admin.
Oh, interesting! I've never been in a position to need something like this. Glad to see python is great everywhere.
Read every article with a grain of salt, and read comments like these not at all. If I didn't have a coworker goading me on and a compliance training window going on the side, I wouldn't have bothered. This strikes me as really typical of a self-hating Python programmer. First, to say that 3.0 release was *the* turning point for Python is grossly flawed. The much bigger turning point in the language was 2.2. Python became a real, full-bodied language with those modifications to the type system and exception model. 3.x has advantages, but still has more than its share of wrinkles, and less than its share of industry usage. Second, your issue with protected/private is a big red flag. Python was created after and alongside languages with those constructs by people who knew what they were doing. Most C-to-Python programmers I speak to know exactly why and how protected/private scale to very hacky codebases with big maintenance problems. Come on by PayPal someday and I'll show you some very `friend`-ly code. Next up, you still don't distinguish between runtimes and languages. And you seem fuzzy on the state of threading in Python, so maybe you should've left that one out as well. Anyways, this comment brought to you by enterprise-mandated compliance training, which is now complete. I'd encourage you to re-evaluate some things, starting with the "master-race" aesthetic.
Well, it's still a *provisional* module in the standard library and many people still don't really like it. Recently Guido has been loudly thinking on the python-dev mailing list [about maybe removing pathlib](http://article.gmane.org/gmane.comp.python.devel/156831) again.
&gt; So use Jython or PyPy. PyPy is still encumbered by the GIL, and Jython means that you've got to use Java libraries instead of the normal Python ecosystem (and you've also got to make use of the JVM, which can be really resource intensive and memory hungry anyways).
/u/mhashemi buried the lede: &gt; "Our most common success story starts with a Java or C++ project slated to take a team of 3-5 developers somewhere between 2-6 months, and ends with a single motivated developer completing the project in 2-6 weeks (or hours, for that matter)." The article reads like someone has been fighting internally with folks who are badly misinformed about Python. It's a common situation and a useful article, though many of the responses could be better. Still, I wish it led with the trump card (as in Hearts, not Donald). Think of the implications. Not just for one project, but the compound interest of speed: growth = principal * rate ** frequency No matter how small your growth factor is (so long as it's greater than 1.0), what matters in the long run is not the amount you improve on each iteration, but how frequently you iterate.
I don't think there is anything wrong with either if those distributions. So your best bet is to figure out what is set up incorrectly on your computer that is causing these issues.
For various definitions of "programmer", I believe it.
I would reflect on what you ultimately want to use these scraping skills for. The fields you are mentioning are abound with APIs and datasets that are ripe for analysis, you should only ever be scraping when there is a particular set of data you want and don't have a better means of accessing (check out https://www.data.gov/ for a lifetimes worth of fun). If you really only want to learn how to scrape sites because its interesting or because you think it will possibly be useful in the future, I would recommend you google "beautifulsoup tutorial" and pick the one whose subject interests you the most. Lastly, I would further suggest you consider using python for any data fetching *and* processing. Although I would certainly say I'm biased (this is the Python subreddit after all), there is virtually nothing you can do in MatLab that you can't do in python (even just using pandas and matplotlib). Furthermore, there are a million libraries for python that have no equivalents in MatLab. Either way, best of luck!
Yeah, I'm not sure that that is always the case, or if quick iteration is even an option in a majority of environments. We have a fair number of uncommon success stories, and Python has been integral to each of them in different ways. Still, iteration frequency has been critical to our workflow and that of our internal customers'. Just glad to see that this post is still helping others get to that place.
praise-driven development, ftsd
If your keys are numerical, you could use something like a kdtree or similar. I use scipy.spatial.ckdtree quite often for these sorts of queries. 
Yep, It's amazing that in this day and age the beauty of 3.5 has to be marred by such a short sighted decision to never compromise on single threaded performance. Now more than ever we need languages that can be elegant in a modern world where CPU's are getting slower but with more cores. Python is more than fast enough but this roadblock just drives me nuts. I have looked briefly at the alternatives, but needing to rebuild and retest under a different ecosystem just isn't in the cards. 
YouTube is a lousy example. If you read any of Google's writing on the subject, it scales because they kick everything they possibly can to their CDNs, and they themselves seem a bit surprised how well this works for their workloads. It's not because Python has great performance. Hearing "YouTube" might make people think that they're suggesting that Python is good enough for video encoding, but obviously they don't use Python for that. PyPy and Jython are both very cool projects, but they're both stuck on Python 2.7, due to an almost complete lack of funding. I don't want to tell my boss we have to revert to a 5-year-old version of our language just to get good performance. NumPy is also a great project, and if you're doing numerics that can take advantage of SIMD, it can let you write some things in Python that you wouldn't otherwise be able to, but that's not the bottleneck for most projects. Compared to languages like Erlang or Clojure, I think Python's concurrency story is still pretty weak. At the time this was written, Gevent and Eventlet didn't support Python 3. Many parts of Twisted still don't. Articles like this always resort to some weasel-sounding version of "The GIL isn't *that* bad..." For any given set of constraints that's not too extreme, it's usually *possible* to engineer your way around them. (Maybe you pick "has to be some version of Python, and has to go fast", and then you go with PyPy, 2.7, a big-ass CDN, and 500 servers.) That doesn't mean it's the best way to build a system. There are times when it's not practical to overprovision, or stick with an old version of the language that lacks the modern features you want. That's not to say that Python is a bad language, because it's not. I just wish there were some pro-Python literature that were more accurate. Instead of throwing around wild claims like these, we should say: &gt; Yeah, Python doesn't have the best concurrency support, or the best compiler, or the best runtime. If (non-SIMD) performance is going to be a big issue for your project, you'll eventually want to look elsewhere. But maybe you can start in Python, and be super productive for a while, and then break off the performance-critical parts in a different service, once you know where they are. But if you're thinking about realtime video encoding, well, Google uses Python for YouTube but they don't use it for video encoding. Different languages are good for different things. C and Julia have great native compilers. Clojure and Erlang have excellent concurrency support. Lua is ideal for embedding. Java and C# try to be a good middle ground between performance and semantic power. And Python and Ruby excel at expressive power. You can't have it all. Engineering is about understanding compromises, and no competent engineer would think that any one tool has no downsides.
https://uptimerobot.com/
Exactly what I need . . thanks for the quick response
This is great, and the speaker is very entertaining.
 from basicv2 import GOTO (...I would put a smiley face here :) but Reddit is a serious site where people disapprove of smileys).
+1 I was at this talk. If you can believe it, he's even *more* irritating in person.
Thanks!!!!!!
He's downright aggressive in his humility.
I'm sorry, why is it 'god awful' to need an interactive session? My script needs to issue many commands (I am sampling from a sensor on the machine) and with your solution I need to also ssh into the middle host for every single sampling command. If I can have the ssh_session connect to the endpoint I need isn't that more efficient? thanks!
Thanks a lot for the explanation. I'll look into your suggestion for the helper script that lives on the middle host as well. What if I write a wrapper for exec_command() that will just send the desired command to end-point preceded by that secondary ssh login?
Do you mean CSV instead of cvs? 
Haha. No, I write code like an experienced programmer. When I was younger, I wrote small bits of code and constantly tried them out. And that's how one learns. BASIC was great for this, the same way Python is. As I kept programming, I didn't need to test small bits of code any more. I could write large swaths of code without needing to try it out in a REPL. Part of this is because of the rich IDEs like PyCharm and VisualStudio, but part of it is just that you get better with what you're doing.
Hells yes! 
That'd be really dope. I'll try and work out a real world Tornado + Graphene stack and send you the link, then. 
I've actually got no problem with writing criticism. Call the post verbose and I wouldn't argue. Call it woefully incomplete and you'd be right, too. I take issue with the master race flair and tone. I swear I can hear the armchair lean back. Everything has degrees and you seek to erase them. Python 2 is not broken. Python 3 vastly increased the reach of the "io" system before it really had the users to bake it. This introduced many issues, including this one a friend and I discovered recently: http://bugs.python.org/issue25341 Notice that I am not saying Python 3 is broken either. Degrees. So to recap, if your understanding is fuzzy, ask questions of those with more experience. Don't continue to spread the misinformation.
+1. But I can imagine that introvert people will find him annoying, will extravert people will be cool with his smug. You can't please everyone though, so I hope he will carry on his good work. I'm kind of tired to see people getting offended by any single things on the internet.
And never, ever, type `sudo pip install`.
Anyway, how do you know that I am sexy?
/r/learnpython
/r/learnpython
Sure, quite often tests will catch these things, but now you're writing twice the code just to do the job that a compiler does in other languages. On top of that there are still related issues that will slip through and will only blow up on bad data - such as how most unicode strings will work fine in an str pipeline, but some will not.
Type safety didn't _need_ to come up because it was basically the consensus that it was good. Every mainstream language had it, the universities taught it. The idea that this is somehow a new fad is absurd.
Have you looked at the sidebar? Also, /r/learnpython I personally like [Automate the boring stuff](https://automatetheboringstuff.com/#toc)
&gt; Don't install modules you don't trust. Or modules that require other modules you don't trust. Or modules that require other modules that require other modules you don't trust. 
experience is all you need. start building that portfolio.
http://entrian.com/goto/ https://github.com/snoack/python-goto Way ahead of you.
And on Reddit apparently.
&gt; This talk is so pointless! But not pointerless. &lt;/debugger-joke&gt;
I really came to see a political/philosophical talk. Who would have guessed that he really, literally, implemented `from __past__ import print_statement`.
RemindMe! 1 hour
I will be messaging you on [**2016-04-27 11:14:34 UTC**](http://www.wolframalpha.com/input/?i=2016-04-27 11:14:34 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/4glp5k/easy_to_extend_telegram_chat_bot_in_python/d2j52nn) [**CLICK THIS LINK**](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/4glp5k/easy_to_extend_telegram_chat_bot_in_python/d2j52nn]%0A%0ARemindMe! 1 hour) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! d2j532s) _____ |[^([FAQs])](http://www.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^([Custom])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^([Your Reminders])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^([Feedback])](http://www.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^([Code])](https://github.com/SIlver--/remindmebot-reddit) |-|-|-|-|-|
I use static code analyzers as a CI services for open source Python projects. Great tools are [QuantifiedCode](https://www.quantifiedcode.com/) and [Landscape.io](https://landscape.io). They both care about PEP-8 and PEP-257 compliance and some more.
Write tests. Start learning py.test, sooner is better. A solid testing practice is 1000x better than learning any style guide, and don't let anyone tell you different. (There are good idioms and bad antipatterns, but it takes a long time to understand why. Save yourself stress, ignore all that and focus on making stuff. With tests.)
&gt; Do not define or redefine __magic__ methods or members
Highly appreciated! We caught the difference by accident when someone noticed that the "displayed" price of some items is $33.01 instead of $33.00 (the actual number in the database), while other products have the correct price. I couldn't understand why it was happening only for products that cost $33.00. Took a little time to hunt down that some Decimal-related operations were causing the issue. Thank you for the sufficient explanation.
First three, no magic: http://pastebin.com/fQdEaqp1 No clue about the fourth...
Depends; if you read the docs there's an exact mode and also an inexact mode. Certainly I'd always use strings in the literal constructor, but passed no floats can sometimes be useful. 
http://mediadrop.net/
&gt; I've actually got no problem with writing criticism. But you appear to by your response. You don't know me, but you seek to criticize my character. &gt; I take issue with the master race flair and tone. Well, then, you take issue with Reddit. Maybe you shouldn't come here. It's funny tongue-in-cheek geek humor, you can find it everywhere here. And yes, my armchair does lean back sometimes (literally.) &gt; Everything has degrees and you seek to erase them. I only sought to shine line on the spin you put on your article. &gt; if your understanding is fuzzy, ask questions of those with more experience. That's the funny thing: I do ask questions. A lot! I still can't get demonstrably clear answers on some of it. I don't have this problem with other languages and their respective run-times. As I said before, I'm not here at /r/python because I already love Python. I'm here because I kinda like it, and would love it if I could find a way to like it more. I may sound like a broken record saying this, but more people need to hear it: "Let's stand on each others' shoulders, not on each others' toes." Anyway, if it wasn't clear originally. I did like your article. It did a nice job of dispelling most of the myths. It just went from factual to a lot of opinion that wasn't necessarily true. Take care, man. 
Right around the 11:00 mark he gives the reason people import print from future as &gt;people are really trying too hard to please people that aren't in their immediate vicinity I've never heard anyone use that as the reason they are importing the print function. They are doing it so their is code uniformity between 2 and 3 projects, and so it will make it easier to port the codebase to 3 if that ever becomes an issue. It's future proofing sections of your code with just one line.
I did REALLY novice stuff in powershell...but I feel like python is way more flexible. I feel like I need to focus on one. Truthfully I've always envied software devs. I'm going through AtBT online :D I'll typically read something then put it in practice and do my own script / .py file doing it. Quickly learned to put as many functions in as possible so i can re-use for other stuff :D
Thanks for reply. &gt; So it's like collections.abc meets typing Yes, you are right. It's a concise summary. I think `typing`, the implementation of PEP 484, is a little bit messy.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, we are sure you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
We're going to have to agree to disagree on whether they are 'tests you need to write anyway'. Much good software has been written without the kind of extensive test suites we need in Python simply because programming languages that provide strong guarantees about the data flow don't need the belt-and-braces approach.
Do this and then some more stuff like it. It's hideous code, but it's fast. http://bastibe.de/2013-05-30-speeding-up-matplotlib.html I think the coolest feature was when you adjust the x-axis, the y-axis also can auto-adjust (or vice versa or neither depending on checkboxes). Another nice feature was if you had a frequency based result (e.g. magnitude vs. frequency &amp; phase vs. frequency), that get put onto separate plots, you could adjust the x-axis on one and both would adjust at the same time.
It depends on the float you pass. The particular problem you have here is with the 0.3 part of this (not the 0.302). The number "33.000" is exactly represented by float(33) and Decimal(33) because its an integer. So that can be ignored. The number "0.3" is problematic. It is 3/10 which the float tries to represent as a power of 2 expansion. float(3/10) = 1/4 + float(1/20) ... and if you compute that 0.3 - 0.25 you get 0.0499999... so you can see the imprecision popping up in the second sig digit of the power of 2 expansion. So there are essentially three choices that Decimal could make and none of them are good ones: 1. Reject all floats and insist on raw strings. 2. Accept only good floats that can be exactly represented which means integers within a particular range and fractions k/2^(n) for certain values of k and n. 3. Accept all floats but map them to the nearest decimal on input. \#1 is a bit impractical. \#2 means the constructor is value dependent in odd ways. It could also make debugging very hard, because a value like 0.24999999 will often be printed as 0.25, and so the user thinks they have 1/4, but they might actually have something very close to a perfectly represented value when they don't actually have one. \#3 causes the problem you experienced.
I lol'd at this. Software Development Engineering. What do you do for a job w/python?
I was stumped in my learning process until I found a project (actually a number of projects) that I already wanted to do and could use python for. I built a program that gets relevant fishing, tidal, and weather information from a weather API and emails it to me and a few others every morning, a Twitter bot, and a news feed bot. Just find something you want to do and learn what you need to make it happen.
So it's like the 2010's version of "computer programmer"? What would you use Python for, except programming computers?
Is it possible that the 30th cell is throwing an error? There's no limit (or there shouldn't be), but it stops if there's an error. If you don't think that's it, please file a bug!
Awesome! Sounds like you're having a good time with it. If you run into any questions feel free to PM me 
Pretty sure as a developer you can easily make more money than most managers.
&gt; It does not make sense to have an unqualified discussion about performance. We all casually refer to three things when we discuss Python: the language, the runtime, and the platform. You know, I've been hearing this for decades, about various programming languages, and I even used to say it myself. But I've come around on this. Python has essentially one implementation. There are a couple of alternative implementations of old versions of the language, and they don't count for much. (I don't care how fast Borland C++ 2.0 was, either. It's not relevant to any modern C++ programs I might want to compile.) If CPython isn't fast enough, can I switch to a different compiler? Can I switch to a different runtime? Can I even tune the GC? For all intents and purposes, the answer is No. It's an interesting academic exercise that it's theoretically possible to make Python go fast, and I look forward to Python 6 with its super-JIT that runs circles around the JVM, but today, right now, for writing normal programs with the current version of the language, Python is not especially fast. 20,000 requests per second with 3 boxes in 2016 is rather unimpressive. [Last century](http://www.kegel.com/c10k.html) we could handle that many with 1 box, and it had only one core so it was maybe 1/10th as fast as today's boxes. You don't have to drop down to low-level C code to get this level of performance, either. Here's somebody doing [600,000 concurrent HTTP connections](http://www.http-kit.org/600k-concurrent-connection-http-kit.html) with Clojure. &gt; CPython has not been slow for us here at PayPal, and that's an important data point for other decision makers. From my perspective, I'd say that because you've found that Python is not very fast, you have to over-provision your hardware. You're not coming anywhere close to saturating the network interfaces on these 3 boxes, are you?
Yes, I had errors intentionally for educational purposes. I corrected them because I was thinking the same as you but the problem remains. 
Sorry everyone, my fault. Too much cells. I overlooked one cell problem with syntax error.
I apologize for any ignorance on my behalf, literally always seen Software Devs listed as SDE - Software Development Engineer
I apologize for any ignorance on my behalf, literally always seen Software Devs listed as SDE - Software Development Engineer. I'm obviously not a programmer or dev . I'm just trying to get info.
greatly appreciate that. I try not to annoy people, but i've tagged you as PYTHON HALP
A minute or two max-- the dataframe only has 55 rows. So it's not that big of a deal.
I guess this is cheating? &gt;&gt;&gt; mystery1, mystery2 = [iter([1,2,1,1])] * 2 &gt;&gt;&gt; str = next &gt;&gt;&gt; dict = type(mystery1) &gt;&gt;&gt; type(mystery1) is dict True &gt;&gt;&gt; type(mystery2) is dict True &gt;&gt;&gt; assert str(mystery1) != str(mystery2) &gt;&gt;&gt; assert str(mystery1) == str(mystery2) &gt;&gt;&gt; print "All checks passed" All checks passed
hmm, if you mean inserting a list of values into Access, rather than one a at a time in a loop, you can do that. But that's more a question of knowing ODBC and SQL than python. Look up 'pyodbc bulk insert' or similar. 
Python is not under a form of GPL, so that goes out. What you have here is a case of "it's painful to verify and easy to deny". You can't do shit about it, it's part of the corporate culture, and if you fight it, you'd be rocking the boat. We see the same in other business, And generaly, GPL isn't something to be afraid of. It's a copyright license, not a usage license, and that should be enough for most. So, you're fucked, by the social state of your company. Accept it, and write your software in Excel Macros, which license is appearantly blessed.
It's not fair to assume that he knew that. To be honest, despite the keybase proof, I'm still not certain, given the talk says James **P**owell and the username is james**d**utc. Normally I'd assume that unless there was a first name, last name (or initial) match /or/ the name was used for years on popular applications (paging Armin Ronacher of mitsuhiko handle), that most user handles cannot easily be assumed to be someone's real life handle. Now, when one looks at the quasi quotes package, I must admit I see an immediate style similarity between James P and the github account with a bunch of l's and 1's. Wonder if he's an xkcd fan too.
I fixed precision with 2 fixed decimal points is no better than a float storing cents [unless the extra exponent bits are really needed]. The unit implicitly contains 1/100 of a dollar to be accurately represented.
Your boss is a mindless idiot. However, here's how you can go about changing it if you're clever. But I must caution you, it's often better to get another job with better people than to try to fix lousy people. One technique in marketing is called the yes treadmill. It operates by first targeting someone with a question you know they will answer yes to. Then you follow it up with another question that moves a bit closer to your intent but still likely answers with "yes". Keep doing that until you get what you want. Examples: Fail case: Q: Do you want a new fridge? A: No Ideal case (let's say you know the person loves gadgets) - Q: Isn't the internet of things really cool? A: Yes, &amp;lt;blah blah blah&gt; Q: I know, right!? Heck, even fridges now are IoT compatible! Isn't that cool? A: Sure! Q: I mean, I'd love to be able to checkout what's in my fridge remotely. Wouldn't that be cool? What would you do? A: I work late all the time. Sometimes I forget to get stuff for later. God that is annoying! Q: Maybe one of these new IoT fridges can give you an inside peek. Let's check them out! A: (Yes|No)! 
&gt; But I must caution you, it's often better to get another job with better people than to try to fix lousy people. +1
You are right. I will prepare a showcase as soon as possible.
You can't fix stupid.
Wow, excellent description. Thanks. I had learned (the hard way), that igraph does not update info well. It is especially bad when adding graphs! But it seemed that the plotting capacities (which are relevant in network analysis) to be more robust! Real thanks.
I also have an approach for embedding Python interpreters into themselves. The latest approach requires nothing more than access to `cffi` (and a linker with `dlmopen`) This allows me to run a Python 1.5 interpreter inside an extension module of a Python 2 interpreter running inside an extension module of a Python 3 interpreter. I've given a bunch of talks about this (and you can see the sophistication of the approach increase from simple `sed`-based source filtering to a `dlopen`+`RLTD_DEEPBIND` approach to the current `dlmopen` approach.) The only things missing are the ability to interact across the interpreter boundary—someone just needs to write a `PyObject` 2/3 shim and make sure the GIL is taken care of and that circular references between host/guest interpreters get collected properly.
Your manager is operating from fear, and covering his own ass, in order to prevent you from doing something that makes him look bad. He doesn't want to "break the rules" because he doesn't want to be embarrassed or scolded. In situations like this, for future reference, it's better to ask forgiveness than ask permission. The thing to do would be a) write the scripts, b) make them awesome and indispensable, then c) he won't ask you to uninstall a tool that supports operations and makes him look really good. Provide value! That's what you're getting paid to do. Once you create value, have it make your manager look good. Your manager will then let you do whatever the fuck you want to do, because everything you do makes him look awesome to his boss. If you make him look good, he'll give you more freedom. Caveat: take this advice knowing that most *formal* policies exist for a specific reason, often a good one! If you have rules like that, understand why they exist, and follow them. My advice is for circumventing arbitrary "rules," that aren't official policies, that are decided on a whim by a person just trying to cover their own ass, just because. Anyway, what's done is done. Question: does your operation have an officially sanctioned language/IDE? Use that to write your scripts. If they have to be in C# or Java, so be it. Use that instead. 
&gt; I strongly believe that developers should have admin access to their own machines (and in your scenario I'd probably install Python regardless of "corporate's" permission) but I'd like to leave you with a word of caution. i have to disagree with you. Having been both a developer and an admin, here is my reasoning: * if developers just install stuff onto their dev boxes - there is little chance that over time, their dev machines will be anything like production boxes. It will contain loads of different modules/libraries/frameworks etc. * when their boxes eventually break, the sysadmin is going to be stuck supporting it, and it's going to be everyone else's fault but their own. * Developers are famous for "chmod 777 *" for testing so that those pesky permissions don't get in the way * They often just copy stuff onto filesystems where there happens to be room instead of adding space to an appropriate filesystem. Who cares if it's being backed up or not .. and omg.. I lost my files, why wasn't this being backed up?!?! These are just some of the things I've come across often. I realize that these are all encompassing statements and may not apply to everyone - but it happens enough to know that many developers don't care about systems administration. Sysadmins - for them to be effective, need to have uniformity. Many of them are supporting hundreds or even thousands of computers. The more common they are, the easier it is to do.
Sadly this is so true! Anybody that seriously rejects a language because it is interpreted has some serious penis size issues. I'm not suggesting Python is perfect for everything but as a tool for developers it is pretty damn useful. 
This. This is why you have dev, qa, and production environments.
&gt; Your boss is a mindless idiot. This is another way of saying "I can't be bothered to learn my boss's motivations".
Actually the way I understand this is that is direct report manager did not reject Python, somebody higher up did. Doesn't matter really. In this case I suspect that there are more problems in place than just this issue. Often the best course of action is to look for another job. I've seen a lot of stupid IT policies implemented over the years in big corporations, the funny thing is the high level managers seem to have a fast turn over. What is policy today is an afterthought tomorrow. One option here is to simply wait for the manager making these decisions to be fired or leaving for greener pastures. 
It all depends what those 21,000 per second are doing, and how well. These are safe, reliable, well-instrumented transactions, handled more efficiently than any other stack at the company. You'll just have to sit tight for the next post.
If it's just on your machine, use a portable Python distribution such as winpython. You don't need admin rights for that.
You poor guy.
some businesses are totalitarian. others aren't. I'm sure I don't have as much experience in academia as you do, but I had enough to know it wasn't for me. it seemed to me like it trended towards Kafka-esque levels of bureaucracy combined with a politically charged atmosphere where your colleagues and your rivals were the same people. 
No, but sometimes you can take their job and replace them.
Haha! This is great!
Agreed. The real problem above was to have a decimal number represented as Python float number first (where rounding/truncating already happened) and then fed that damaged value into accurate decimal data type calculations. factor = Decimal(3020) / Decimal(10000) should also have worked but is ways too clumsy.
I can go along with that - unfortunately despite being all the rage. many enterprises have not yet embraced containers yet. I find them at companies that have not been around for long yet (start-up's) - or more technology based companies. Basically you'll find them where younger developers congregate or that don't have legacy development patterns in place - like starting off fresh. I can assure you - docker containers are not widely used at Bank of America, or AIG or Met Life - I'm sure a few younger guys are aching to get them there, but companies that large have to find a way to standardize on them before allowing them to be widely used. There are a number of articles re. the pro's and con's of containers. Large companies tend to want to standardize on implementing stuff like this to mitigate the cons - like developers using old java libraries that have security issues. If there isn't a policy in place enforcing them to remain current - a lot of times they won't be current. How do the containers get scanned for security issues? Who is responsible for maintaining the security of containers. - it may be easier in a company with under 500 employees, but some of these companies are employing &gt; 100,000 people. Not everyone is going to be careful. 
Yeah sorry CSV file
I like to think there are 3 phases of developer experience. 1) New developer doesn't know if they have admin on their machine or not. 2) Intermediate developers who have learned they can do things with admin rights that they can't without. They run in admin mode all the time. 3) Experienced developers who know the rare exceptions when they need admin rights. They run as a user and know how / when to use sudo.
&gt;3.5 doesn't cache anything, it just returns the raw function object when called on a class. Oh, right, of course. They scrapped the entire system of 'unbound methods', I should have clued in on that.
I ran into something like that with a previous employer. IT allowed it, but any subsequent python package I wanted had to go through their 2-3 day approval process. Even something as simple as installing USB -&gt; RS232 drivers required submitting a request to IT and getting it approved (I was trying to write a visualizer for some mass flow controllers). I said fuck it and quit.
Does anyone at your company use OSX? If so, they already have Python on their machines. 
1. Automated integration and acceptance testing environments *were made for these kinds of problems*. Use them, and it won't matter what your devs do with their dev machines. 2. If they break, tell them "tough shit" and have them reformat. Sysads should only support the AAT and productions environments. 3. This really doesn't matter. At all. Let the devs do what they want with their machines and keep the "real" environments in check. 4. The laptop I use at work has nothing backed up. Zero bytes. But guess what? The important part is the source code, and that's safely stored in version control, in a secure datacenter, with backups. And that's all that really matters. Devs - for them to be effective, they need to be unburdened by over-controlling sysadmins.
They're not silver bullets, but they make reproducible builds much easier. Especially since we're an OSX shop but the application I work on runs on a Linux server. Standardizing to docker containers makes life a lot easier for the team. It's the same with a VM. Not a silver bullet, but helps.
Well, sounds like his motivations are: 1) Trying to preserve status quo. 2) Being lazy to even consider anything new. I mean there might be some valid reasons, but from my experience, most of the time it's just management without will and initiative - usually stuck in the same position for years. 
Doesn't your team use something else for scripts already?
It's also up to said boss to learn his teams motivations. The fact he made up insane reasons with absolutely zero credibility speaks more about said boss being a bad manager than anything else.
Virtual machines and automated building of such are just as valid of a solution for that. No need to bring docker into it.
&gt; if developers just install stuff onto their dev boxes - there is little chance that over time, their dev machines will be anything like production boxes. It will contain loads of different modules/libraries/frameworks etc. What dev box looks like a production environment?? That is what test environments are for...
Nightmare.
Are the books in pdf format or actual physical books? 
&gt; You can't always trust developers to not be dumb and disable antivirus to get something working who then goes on to infect the entire network. So put us on another network, but stop preventing us from doing our work!
Find another company. Companies like that don't deserve smart people like you.
Python rocks, but you have to be flexible when starting up a project. If the language doesn't matter, chose something you like - woo python. But if the admins don't want to install extra binaries, or if there is a bunch of existing code in powershell, or if the company owns a bunch of libraries in .net and wants to use those supported libraries, or if the task at hand requires interaction with tech that other languages are more commonly used for (talking to MSSQL, Active Directory, Exchange, Excel, etc.), and so on - just use what works best. All languages are similar enough - as long as they aren't making you switch back and forth between several languages you should stay sane.
Mediagoblin http://mediagoblin.org/ is a distributed youtube and is built in python !
Digital books in pdf, epub and mobi formats.
GPL can be a bit annoying. From what I can tell, you're not allowed to use GPL code in your program (shipped with it) if your own program isn't GPL. Which is a great idea, but that also means that you still can't use it if you have any other open source license. MIT? Nope. The LGPL is a much more sane version for libraries. I'm fine with the GPL for applications that aren't really meant to be used by other programs (To prevent companies from straight ripping out code and using it), but if you have a library, you should allow other open source licenses. (But deny closed source licenses, make it a requirement that any code that uses it is under a license that makes the source code available and forkable)
&gt; From what I can tell, you're not allowed to use GPL code in your program (shipped with it) if your own program isn't GPL. No, no, no. You are absolutely allowed to use GPL code in your code *as long as you never distribute it.* Anyone who receives the program is allowed to ask for your full source code if any part of it is GPL'd, and you are required to give it to them. But in a program that's for internal or personal use, no, the license is irrelevant. &gt; Which is a great idea, but that also means that you still can't use it if you have any other open source license. MIT? Nope. No, no, no. You can use GPL or LGPL code in any program or library that has a license that does not *impose additional restrictions.* MIT and most of the BSD licenses are *less* restrictive than the GPL, so it's legal to combine them. *However,* that does mean that the GPL applies to the whole program.
&gt; However, that does mean that the GPL applies to the whole program. So that basically means your code is effectively re-licensed under the GPL? So, you can't, if you don't want to use the GPL.
I'm working in a basic Operations team which involves only excel/salesforce/cloud jobs. Yet, I have been using python for automating my boring (almost) all works given to me. It had saved me a considerably lot of time like 80% comparing to my manual fellow employees. Before a particular time, I used it secretively just because I was not sure It violates our data policy or not. One day, My team Leader found out about my scripts and how I helped other team friends in work, He restricted me from using python @ work although I proved him that Our data Policy allows it. And Its Open licensed. No Gain. Still, he demands Hand Work. :( Also, Our sys admins blocks access rights in such a way that I can't edit the sys PATH variable. Seriously, Python needs a looooonnnggg Endorsement for enterprise. 
You can still use libraries, just don't distribute them. This is why you have requirements.txt and package.json and such; you distribute your app and say what things you require. And as the parent comment said, internal and personal use is not covered either, so unless the OP is going to be selling this script or shipping it in another product he would be fine
Please give them admin access. It'll make my job SOOOO much easier. (Pentester). In all seriousness: don't do this...it's absolutely stupid. The fewer that have root the better. If I can compromise a developers machine (which is probably one of the easiest targets I can actually come up with, considering the mass of libraries/software/etc. they typically install), and it's got root? Oh, that'd be so much fun. Really bad for you, but...what's bad for you is good for me!
&gt; I expect that means you will send those scripts to the other devs on your team which means now all the devs need Python installed. Uh...WAT? There are countless methods to build Python as a standalone in various ways. I've seen .exe, I've seen methods that just package Python with all it needs similarly to Java .jar files. Is there a specific situation you are referring to in which this would not be available? 
I'm terribly sorry that I'm getting upvotes. Want me to downvote myself to help with that problem?
By the sounds of it your in a Windows environment. As python has been denied if you actually want to help improve things you should look at powershell it may not be as nice as python but it is a very good object oriented shell language which is great for operations. This of course assumes the motivation is to reach the result (helping things) rather than playing with something you like.
A lot of language *are* interpreted...
Incorrect. Chrome *does* include GPL source, but the GPL sources it includes are *triple-licensed* under the MPL and LGPL, and it includes a fair amount of other LGPL and MS-PL licensed code. Go look at the license for Chromium and try not to cry. What the Chrome/Chromium team *can't* include is sources for which there isn't a clear Copyright assignment and license. (There's some discussion on the musl libc mailing list about this.)
It isn't your fault you are getting upvotes and I didn't mean to imply it was. Unfortunately it seems (from other discussions as well, not just this one) a large percentage of developers have misconceptions about the GPL and haven't bothered to read the license/available literature themselves.
And what if something is running on a VM, but is running compiled C code or asm? That's close to what Java *is*. So in that instance, C is an interpreted language.
My main problem with the GPL is that it's fucking long. Expat (Or Expat/MIT, or MIT, whatever people like to call it) fits in a 24x80 terminal screen with room to spare. I get that it needs to handle all the edge cases, but quite a few programs written licensed under the GPL are shorter than the GPL license text itself.
True. But I think it's worth pointing out that it *does* have GPL-licensed code, even if it's not being used under that license.
Yeah, that sucks but like you said... handling edge cases and such.
You should look for a new employer. Not because of this specifically. But, and I might be going out on limb/assuming too much, that mentality is fail. Besides being annoying, disruptive and making your job harder. It will lead to projects failing, company being less than it can be, etc. There are enough jobs out there, you should not endure an abusive relationship.
&gt; Python is type of GPL No it's not. GPL is a big deal, but Python is just not. It's basically BSD. Python happens to be GPL compatible (whatever that means), but is far from GPL. Per Wikipedia &gt; The Python License is similar to the BSD License and, while it is a free software license, its wording in some versions meant that it was incompatible with the GNU General Public License (GPL) used by a great deal of free software including the Linux kernel. For this reason CNRI retired the license in 2001, and the license of current releases is owned by the Python Software Foundation License.[2] https://en.wikipedia.org/wiki/Python_License &gt; BSD licenses are a family of permissive free software licenses, imposing minimal restrictions on the redistribution of covered software. https://en.wikipedia.org/wiki/BSD_licenses &gt; and it is interpretative. So...? &gt; He is a stickler for following the rules, so he ordered me to ask permission to install Python on my development machine (I wasn't intending on asking permission). Seems more than reasonable. My company doesn't care what I install as long as I don't break stuff, but my last company did.
&gt; You are absolutely allowed to use GPL code in your code as long as you never distribute it. Not true. You are allowed to distribute GPL on a separate disc/separate link (assuming you didn't modify it). Your software can require a specific version of linux and be proprietary. You are also allowed to give away/sell linux as long as your source modifications are pushed back, even if they are rejected.
So you say whatever it is that supports your argument.
&gt; Which is a great idea, but that also means that you still can't use it if you have any other open source license. MIT? Nope. That's not how it works at all. You can ship MIT and GPL code linked together as a a single binary, but you have to ship it with the source code, and the resulting binary has to be covered by the GPL. MIT is strictly less restrictive than the GPL so it can satisfy its terms. &gt; but if you have a library, you should allow other open source licenses. (But deny closed source licenses, make it a requirement that any code that uses it is under a license that makes the source code available and forkable) That's exactly what the GPL is.
/r/learnpython You'll want to post the actual error you get too.
I don't know of any networked machines where I work that developers get root access to. 
&gt; You can still use libraries, just don't distribute them. This is why you have requirements.txt and package.json and such; you distribute your app and say what things you require. If your software requires a GPL library to function, it must be GPL licensed. &gt; And as the parent comment said, internal and personal use is not covered either The GPL only requires you to give every user of your program the source code if he asks for it. You as a user already have the source code, so no problem there. If you write a GPL covered software for internal use, the internal users still have the right to ask for the source code. Strictly speaking, you are not forced to give the program and/or its source code to anyone that asks; but once you decide to give/sell your program to somebody, that person has the right to the source code (and the right to distribute it)
Sounds like a fun project, how much time do you expect it to take? 
http://i.imgur.com/2iKG8aI.png?1
Oh shit, nice catch there. Usually I ignore the Humble Bundles that have e-books because they're usually random assortments, but that's actually a neat one. 
GPL requires you to include source code with any distribution. But it also requires you to let anyone who receives the code also redistribute it under the same terms. So it's not just that they can see the code, but they can also legally fork the project. "Source" is defined as the preferred method of editing the code, so obfuscated code doesn't count. Or do you mean what would happen if the CPython interpreter were GPL-licensed instead of PSF-licensed? Then you could still ship your Python programs, which are not linked with the interpreter, but you couldn't redistribute the interpreter itself or modified versions of it. In general, code becomes "tainted" by GPL code when it's linked together at the executable level. How that translates when dynamic linking is involved (e.g., proprietary linux kernel modules) is more of a grey area, last I looked. Likewise, if you're writing code to some very specific API but not technically linking with it, it's a grey area I believe.
&gt; that's great, but I'm thinking of mostly large enterprises - BofA, Goldman Sachs, the IRS etc - where USB's are disabled - email attachments are scanned - etc. to discourage taking proprietary software and/or trading secrets. A dev with admin rights COULD enable those USB ports. This is a classic misplaced paranoia scenario. Yes, a dev with admin rights *could* enable USB and run off with company secrets. But if these are devs who are writing software that will run in production in your bank, and they want to harm you, there are a million other ways they can do it anyway. At some point, you have to trust your people. Plenty of sysadmins have violated security and privacy protocols over the years, sometimes causing horrendous damage to their organisation in the process, but we don't tell sysadmins they can't have admin access to any corporate systems in case they decide to cause trouble. Any system that really does need an exceptional level of security/audit/oversight should be properly isolated and have appropriate access control procedures in place anyway.
In secure environments often the USB ports themselves are physically fried or disconnected so no software can re-enable them.
Yup. While not ideal this is why it is nice to have VBA in my back pocket, as excel is nearly always available.
How would the right to distribute go with internal tools at a company then?
As far as I can see, the GP wasn't advocating *always* running as root or the equivalent, just that the dev has access to do so if they need to, for example to install some useful tools to help with development. As you say, the fewer people with root access the better. In most cases, the optimal set-up from a strict security perspective is to disable *all* remote root access, and only allow logging in as root when you're physically present, though of course that has rather impractical consequences for sysadmins and the like. Speaking of sysadmins, if you're ever able to gain access to a developer's machine just because of some extra software they installed on it, without the developer themselves helping by doing something dumb, then what sort of firewalls and security tools are the sysadmins running?! Surely you're not seriously suggesting that a developer who sudo-installs Python on their workstation has suddenly created a gaping security hole you can exploit in your pentesting?
The GPL never requires you to send code back to the original creators. It only requires that you provide source code to anyone you distribute software to. If you don't distribute the compiled version outside the company, you don't have to distribute the source. 
This is exactly what I implemented and it worked like a charm :) thanks very much!
Can you use pypi as a loophole here? Say if I use GPL package A and "my package" B in a project. What if I just distribute and installer that downloads A and B via pip. Does the installer become GPL? Does library B become GPL by association? And if so, can I make anyone's code GPL by writing an installer that downloads it with a GPL library? (Absurd of course)
And it's exactly the desire to handle all of those edge cases that makes the GPL a little, tiny bit toxic. The GPL does what it intends to do very well. But what it intends to do is more often than not the wrong thing for companies that ship software. For this reason almost all library writers today don't release under the GPL unless the only way to accomplish what they want requires using other GPL software (which isn't very many things). It's really hard to build a vibrant, sustainable, open source community around a library without a reliable source of developers and corporations are good at providing well funded developers. If the corporation has to GPL all of their work because of one library they have no incentive to invest hours in it. 
Have you tried evaluating all of the various expressions on the line with the domain error?
See, now you have me wondering if I ever missed it during a pentest. Graystone is supposed to test for root on any box we gain access to (remember the guy that refilled/fixed/replaced/changed/etc. the copier/vending/water/HVAC/etc.? That was me. That thumbdrive? Malicious. etc.) 
What kind of job is this? 
Maybe they're concerned that no one but you {wants to, is capable of, will be around to maintain} that python code. Depending on the skill set of the rest of the staff they may want to keep things modest and not "push the envelope". Or maybe they just don't like Python (for whatever reason...) and are afraid of letting it get a foothold. Anyway, it might be a good idea to explore your alternative employment options if you're feeling stifled there, you'll have a better career if you keep your skillset centered around your actual interests. 
A combination of Sublime Text and Jupyter is nice. ST for writing code and tests. Jupyter notebooks for playing with the code. 
You'll want to install Anaconda for ST to get decent auto-complete, linting, etc....
It's not free by PyCharm is pretty good.
This is completely asinine. 
PyCharm runs on Linux too, if that's your thing.
It doesn't work that way. Corporations need to worry about license audits. I could tell you about a billion-dollar company that wouldn't give me adequate user permissions to make the Windows task bar auto-hide as it was a "security risk". :-)
On the other hand, this thinking would mean that nothing new would ever be adopted. Many jobs at companies are done by only one person. You simply hire a new person or train as necessary. Ultimately, "what happens if you leave" is never a valid argument alone to reject a new technology. The answer is "the same thing that happened after my predecessor left - you hired me."
well for me if i had the time, no longer than 3 days. But i wouldnt even call myself an average programmer
...though it needs a fix for font rendering. Looks terrible out of the box. Here's the sauce: https://www.reddit.com/r/Python/comments/2ixhmz/pycharms_poor_font_rendering_on_linux/ That being said, PyCharm is what you should be using. Nothing else comes close in terms of functionality.
It's actually very unclear. There's not much Case Law to go by, but as I understand the FSF's position, what you ship with your application matters, but not what you import. I don't know for sure. That's a question for the FSF and your attorney. But your question about maliciously importing, no.
There's a petition going around now encouraging Microsoft, which seems to be cozying up to Python, to bundle it with the next Windows.
Assuming you are on Windows take Powershell for a spin, it's pretty awesome for places where you can't use Python or can't expect it to be installed.
Yeah, you're not really a pentester. I know people who actually are, and they'd never misunderstand the basics as much as you have throughout this thread. Please go and troll somewhere else.
That's what the LGPL is for of course. My personal rule at least is libraries under LGPL (used to use BSD 3 clause but now I prefer LGPL) and applications under AGPL.
Wait, doesn't dropbox ship a modified and obfuscated cpython derivative binary as part of it's client, with no source code?
It really depends. At very large companies, especially ones that deal with private and extremely personal information, have very strict rules when it comes to software installation. Especially one that can be used to run malicious code. While it sucks, you aren't an outlier. A majority of companies would not let you install Python. The risks outweigh the benefits for the company as a whole. So you can automate a few things and save the company a few thousand a year. What if one employee installed one thing that they were "sure" was harmless which allowed a major security breach? It would ruin the company. The risks completely outweigh the benefits. I get it. We are developers, and I used to think the same way. Then I moved into leadership and started to see how many idiot requests were made, how much certain people thought they knew (npm library debacle), etc. Also allowing one person to install and use it means that anyone can request it. It also Means IT will have to manage yet another thing. What about upgrading? Do they add it to the image? What kind of permissions to they put on it, like can you freely use third party libraries? The cost greatly outweighs the benefits for any large company. Especially if they work with secure data or are a publicly traded entity. 
David Beazley did not ask permission to use python on supercomputer! Hence this is how disruption starts! Ignore frustrations and deploy your tools using pyinstaller, cx_freeze, nuitka or cython. Be inventive, there is always a door in the room instead of hitting the walls.. Anaconda, Canopy, ActivePython - all provide commercial distributions with software indemnification, if your managers are scared of analyzing open-source licenses. I went through similar experience with multiple managers, and finally convinced and resolved all their concerns. Finally we have 4 systems in production with python at the core of some computational engines. 
Yeah. Our company is not too formal about it, but every new tech/language is more burden; training, support, expertise, etc. I'm all about pushing us forward &amp; learning new stuff, but when someone wants to make a new script in a new language, it worries me a bit.
What languages DO you have access to? While I love python and I'm sure most people in this sub do as well, it's possible you can get a similar feel and developer experience with something that's allowed by these silly misinformed policies. 
I am glad you found my write up useful. For what it is worth, I tend to use Gephi for visualization. Both iGraph and networkx can export Gephi compatible graph formats. 
I have run into this problem actually and still do. I work for a financial institution and as all financial companies go they really hate change. I started out as an intern and my company and they had me doing manual updates to a website using web forms and after two full days of clicking I realized I wasn't getting anywhere at all. So i said 'fuck it' and I sneaked in an install of python. Of course,That wasn't the end of it. I kept pumping software left and right every 1-3 day cycles. Initially there were protests left and right but, I didn't really care. They eventually began having daily company meetings on what to do with me. They really wanted me to stop but the shit I was making was just too good to pass up. I would like to end my short story where I just end up being head honcho in my company, but no,however I did get hired. They still use VB6 they still use java 1.6 and people still hate that I use Python. Moral of the story do whatever you want fuck these people. what are they going to fire you? There's a lot of Python jobs out in the market and these jobs probably pay better.
Still, it is only to your users. The thing to remember is GPL tries to optimize for the user. It is pretty clear from the four essential freedoms 0.. The freedom to run the program as you wish, for any purpose (freedom 0). 1. The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this. 2. The freedom to redistribute copies so you can help your neighbor (freedom 2). 3. The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this. https://www.gnu.org/philosophy/free-sw.html It is important to focus on the user. The fact that free software makes it easier for developers to collaborate is a side effect, not the root principle. How can we make a license focused on the user in a SaaSy world? 
My best suggestion? 1. Do your best to sharpen those skills anyways. Want some great tools to help your team? Write them at home in a sandbox that best replicates what you're attempting to accomplish. 2. Start looking. This time is more valuable than you realize and you don't want to wake up in 3 years realizing you've been wasting your time. Get moving, son. 
can you use some kind of type conversion of decorator to massage it?
Never mind that, what about the fact that your cpu+memory is a hardware implementation of a (machine code) language interpreter! You'll never get away from interpretation, mwahahaha!
What about Perl/Ruby?
Sweet thanks
[PyCharm Community is free](https://www.jetbrains.com/pycharm/download/#section=windows), and most of the pro functionality isn't for the casual user. 
what's AOT ?
But the libraries do. 
We have a few classes of machines: * developer's desktop * dev box * qa box * staging (sometimes) * production All but the first one are *intended* to look like a production environment. The further down the list you go, the more likely that is to actually be true, but even the dev boxes are supposed to look like a production machine. It's just that they have loose enough access and see enough in-progress code from enough different projects that things tend to not work too well until someone fixes them for a while.
Yup. Totally ran into this at my company as well. There sure can be valid reasons to stick with fewer/known languages so I can't say that your employer is totally out of bounds. What reasons were given? GPL and interpretative are facts, not that they are reasons to avoid something. Are you at a large company or could you get details/reasons? And if Python is out, what did they offer as the alternative?
last time i ran into this I ended up using VM (Virtualbox) since Virtualbox was on their approved list, no worries. IT management in some companies just don't understand anything beyond email to tell the truth, so just figure out the rules and use them to the letter :)
huh ?
source ?
Ahead Of Time.
Nobody can force you to gpl your code. You just can't distribute code derived from others works without agreeing to. Your options include ceasing distribution and ripping out and writing your own replacement for the gpl code.
Don't open .py files by clicking it. Just open IDLE (press start, type IDLE, click it), then in IDLE click File, then Open... and navigate to your file and select it. Tested on Win10 with Python 3.5 64Bit.
Quit!
Yes, but I mean you would only need to distribute source to people internally on request, which is fine. But do those people have the right then to share that code with anyone, even outside the company because a dependency is GPL? That would be crazy. Anyway, I did some research since I'm not on my phone now, and found this: http://www.gnu.org/licenses/gpl-faq.html#GPLRequireSourcePostedPublic So GPL dependencies for internal projects within organizations is totally OK and doesn't need to have source distributed outside of the company. It is only applicable when released to the public in some form. I've never had issues with company lawyers regarding GPL'd code in companies from 10s of employes to 10s of thousands of employees; GPL'd libraries and projects were always OK to use without further question.
&gt; Maybe the point of the post is Maybe so. But if so, without more context it's just "he said she said" rumor/gossip. For all we know right now the company employs all of 5 people. Is that worth drama? Without more information I'm not inclined to think so.
Emacs got autocomplete, in line help, terminal, and adjustable work spaces, it's free and works from a console as well 
Dumb shit like this makes me appreciate my job which I bitch about all the times: Hate the location &amp; the building, work-from-home is more or less banned, politics &amp; abuse of power, stupid management that just do meetings, incompetent coworkers, generally low morale etc. but this place has very lax policies so few years ago I picked up Python and have been doing whatever I want with it for myself and others.
Sublime Text doesn't allow the user to enter any input right? 
&gt; I said fuck it and quit. Bravo, respect 
I am using pandas and python and stuff remotely at a large call center. Data analysis, workforce management, dashboards and reports. It's pretty cool. Everyone is still using excel for the most part
And if you have a student email, the pro version is it free although I rather like the community version
Not always though. It renders fine on our fedora distro at work 
Lawyers are paid to be risk-averse, your mileage may vary. My direct experience is that they don't care about FAQs, just what the worst-case interpretation of GPL wording might be. As for &gt; But do those people have the right then to share that code with anyone, even outside the company because a dependency is GPL? That would be crazy. That's the sole intent of GPL. If it wasn't, there would be no need for LGPL. Companies don't have to meet those terms, of course, but then they need some other authorization from the copyright holders other than the GPL to make use of the GPL'd work. And this happens (I've worked for an organization that paid to have a non-GPL license to a GPL'd piece of software).
Wait %s isnt used for putting variables in strings anymore?
please find me an example of a modern computer that doesn't have C "installed".
You are supposed to use the str.format style now. The main Python documentation for string functions has more on it.
We're a Python shop... If you want a job
Play by the rules or find a new employer.
Damn, thanks :)
Yeah I actually did this in class today and it worked, felt like such an idiot lol. Thanks man.
&gt;FUD. Just trust people who write software not to be morons with software. This has nothing to do with understanding software, the reason you want uniformity In your environment is because allowing people to install software introduces unknown variables that make troubleshooting a shitton harder. What if your dev boxs breaks because some module you installed causes a conflict with the erd client we rollout on all machines? Also, what's arguably even worse is introducing another framework in production. Even more unknown variables to account for a an environment that is not expected to have any downtime. This will result in longer troubleshooting times.
[Here's a fancy video which explains my point.](https://www.youtube.com/watch?v=QIPBo_jpRHs)
Is it worth it for the crash course and automate books? I don't even know Python but learned a bit of c++ in an intro class.
Thanks OP! Great find.
Sorry, I must have missed the part in there where installing Python was what created the vulnerability. You know, on a developer's machine, which presumably has at least one full programming language's development tools available anyway. And when you had already achieved remote access to that machine. And when you had already been able to transfer enough tools to it to exploit an existing privilege escalation vulnerability. Which you already knew existed, and which hadn't been patched. Yeah, a developer who wasn't running as admin but temporarily elevated in order to install Python was definitely the deciding factor on this one. You can tell from all the Python code that appeared in your video.
Just don't get too comfortable, once 3.6 drops everyone will be recommending [formatted string literals](https://docs.python.org/3.6/whatsnew/3.6.html#pep-498-formatted-string-literals)
Can I just say - a HUGE part of my career has been spent dealing with "the automation scripts some junior dev did in his off hours to help out". Stop. Please. I know you mean well. But if what you write really saves time, it will become business critical. If it breaks you or the poor sap who inherits your mess will have to stay up all night until it's fixed. Because now that they can do 50% more with the same people, they don't have to hire as many people. Which means that when it's not there, things grind to a halt. Worst of all, since your thing works (most of the time) there's far less desire to invest development effort into building a replacement. Your management may be doing it for the wrong reasons, but they're saving everyone a ton of trouble down the road.
big reason why Amazon is able to use GPL code in their Web services. it's a service, not product.
He's also fairly active on Reddit: /u/alsweigart 
This fucking question ever 3 days. How will you ever use linux if you can't google?
/r/learnpython
Locks in the way you are describing them have not changed and don't change between languages. Learning Python won't make any of this process any easier honestly.
In the company I work for the Director of Technology will reject anything he doesn't understand. Coding (Python) being one of them. After asking and being shut down I just did it anyway and provided the other departments (Sales, Production, Product Engineering) with the tools I created. Other departments were happy, CEO was happy, DoT was not. I continue to write tools to this day because they make people's jobs easier. They create value in the company. Everyone is happy except for the power hungry, underqualified Director of Tech. Only shitty part is DoT has now claimed to understand coding. Will attend meetings without me, use that stupid executive tech speak to confuse people into believing he knows what he's talking about and promise rediculous deadlines for projects he has no part in.
Yeah, the Python 3 bias in that comment is really showing. Python 2 was fairly good; Python 3, while not backwards-compatible, was really just a somewhat minor evolution of the language (especially v3.0). Type hinting isn't really a "hugely important feature". In fact, I don't think it's important at all; if types are really that important, you should probably be using a language with a far better type system than Python's.
In a relationship sub you'd get told to quit. So either they quit their BS or you quit. Easy.
Haskell? Haskell (generally) doesn't require you to declare types, even for functions.^1 --- 1. Most Haskell programmers *do* write out function signatures, but it's rarely necessary, just considered a good practice.
very interesting, I have a nice hands on on C, C++ could it be better to switch to python ?
Very interesting vodeos. Thanks!
hey, if it helps, have your manager contact me. i work at msft and we have pretty conservative lawyers. we use python all over the place (like the azure CLI are all being rewritten in python). i'll be happy to set his mind at ease. just about every bank in wall street uses python too. and they're way strict than msft even! LMK.
Thanks for this; very motivating and informative (and entertaining !).
Well done! Fantastic ideas, excellent presentation!
Thank you for doing such a great job.
I would guess security concerns. It's easier to control what binaries can run on a machine than lock down user permissions for an interpreter. It's not particularly rational or correct, but I can see it being reflexive for a lazy or outsourced IT team. 
how much work experience did you have (and think it typically takes for most people) before you were trusted to work remotely? and how long do you get to work remotely? for at least a few months at a time? By working remotely, I don't want to just work from home. I was hoping I could live abroad for periods of at least a few months
What you mean for awesome? :-D However you can try this https://github.com/dddomodossola/remi This is a GUI library that shows your interface in the browser. It has not dependencies and no compiled modules. I think should be simple to pack in an exe.
It's cool, I guess... But please, it's 2016 and 1. Why do you have separate README and README.md? Combine them and save your visitors 1 click (and a bit of frustrating) to understand what is this. 2. Python2.3+ support? Really? From the source code I can understand porting to py3 will be a huge problem, but you shouldn't really support anything except py2.7. 3. `pymedia.egg-info`, `.pyc` files shouldn't be committed. 4. Don't use tabs, use 4 spaces instead. 5. https://github.com/audioburn/pymedia-redux-full/blob/master/setup.py#L2-L8 here you import `setup` from `setuptools`, but a couple of lines later you're replacing `setup` with `distutils` version. You don't need to use `distutils`, `setuptools` is everywhere now. 6. https://github.com/audioburn/pymedia-redux-full/blob/master/setup.py#L191-L196 and other places - there are context managers in py2.7, please, use them. 7. https://github.com/audioburn/pymedia-redux-full/blob/master/setup.py#L289 can be replaced with `setup(**PACKAGEDATA)` 6. Don't use bare `except:`, specify exceptions you want to catch explicitly. That's what I've got from `setup.py`. Does anybody want to dive deeper?
&gt; When we modify the signature of a function, we go back and change all of the usages of it to pass in parameters in the correct way. Right, but the problem here is that sometimes (often!) the change is more subtle than that. e.g. You might decide you needed sorted output, so you add .sort() to the list at the end of your function. But the signature of the function never changed. And while previously it worked for any iterable, now it breaks if you pass anything other than a list. How can you easily see whether every call site is passing a list - when those call sites may, in turn, just be working with iterables that were passed in? To verify everything you need to fix for this in Python, for a function called 20 or 30 times, is time-consuming and error-prone. To fix this in Java, C#, or C++, you change the type signature and the compiler tells you _instantly_, with no ambiguity, every single place the problem occurred. Python fans often talk about this as if it's no big deal, but that's usually because they're just used to soaking up these time-sinks when they're working, assuming that the added flexibility in other areas is making up for it. 
A dictionary comprehension could be a good example. It takes many lines of Java to do the same thing.
This gives me a flashback to the late 90s, when people were less experienced with open source and interpreted languages were considered less "real" than compiled ones. The biggest argument against using Python then was that it was an obscure instead of the hugely popular language that it is today. I remember people in the Python newsgroup/mailing list going "oh I wish I could use Python at work" all the time. And my boss back then let me use Python anyway. Yay former boss! Original poster, consider looking into getting a boss more like that. 
which will probably even slower then using .format ;)
I've installed SublimeREPL and pointed it to my Python 3 install. You can run programs, input stuff or simply open an interpreter all in a new tab. 
I don't think there is one. This is one of the things the python ecosystem misses the most.
One more in the bundle is available under CC - "The Linux Command Line" [link](http://linuxcommand.org/tlcl.php/)
There are: * https://github.com/pybee/toga * https://github.com/zoofIO/flexx * PyQt depends on your approach or limitations! 
The linux license starts with &gt; NOTE! This copyright does *not* cover user programs that use kernel services by normal system calls - this is merely considered normal use of the kernel, and does *not* fall under the heading of "derived work". Also note that the GPL below is copyrighted by the Free Software Foundation, but the instance of code that it refers to (the linux kernel) is copyrighted by me and others who actually wrote it. &gt;Linus Torvalds followed by the GPL. Linux gives an exception to the GPL, or a clarification rather, as the interpretation of GPL gets tricky when applied to an OS[1]. However, if you directly link with the kernel (write a module, for example), that code must be under the GPL. IIRC, the GPLv2 (which Linux still uses) didn't explicitly require you to release the source code in a form that actually enables you to make changes, so you can just release modules which contain binary blobs: char data[] = {0x42,0x12,0x84,0x66,...} ... load_data_into_device(data); Linus is ok with this and wants it to be possible, which is AFAIK one of the reason why he won't switch to GPLv3. ---- [1] Is the code just using the services provided by the OS, or does it depend on it? Is the kernel using your program as data (in which case it can have any license) since it loads your program and executes it, or is your program using Linux? 
There comes a point though where the old language that are approved are more of a burden than the unapproved "new" language. One of the "new" languages is perfectly able to become an industry standard -- and Python, I think, is one. Python is the new perl; and it seems to be nicely settled in in the software industry now -- i.e. it's hardly "flavour of the month" in the way that Go, Rust and Haskell are. A corporation that hasn't realised that is probably still supporting COBOL.
VMs are available in most places and provide a good solution to being as "production like as possible" for qa, uat and for production fixit. I like Docker too, but VMs are more readily available and are understood by most management whereas Docker remains a bit new.
This is one of the reasons why shipping the first release is very different to ongoing maintenance/enhancement. Many startups succeed with the first and then fail spectacularly with the latter.
That's interesting. I had no idea there was an explicit delineation of where "derived" lies built into the Linux GPL license. That ought to be more common.
What is pymedia?
You can't always help when an overzealous Antivirus decides your program looks malicious. I've worked with an application with a fairly narrow audience that gets a few thousand installs a year, and while it never caused problems with the company's Antivirus, sometimes customers would have it flagged solely on the basis that the Antivirus software didn't recognize it. It wasn't matching any virus signatures, the Antivirus just decided to raise big scary red flags because it's not a widely used application. 
use Pelican. But I agree, its apples to oranges
Atom or sublime text work too. Just install a couple relevant plug-ins. Not sure about debugging though. I usually use pdb or ipdb from the terminal. 
What about making a web interface based on, for example, flask or django ? 
well I guess you don't have to worry in most cases .. but in simple cases the old way is 10x faster
I think python3 is faster then python2 with format ... but you can easy test by yourself. when just doing one replacement in simple situations .. where I would always use the old style.. it's more then 10 times faster python -m timeit '"hello %s" % "world"' 100000000 loops, best of 3: 0.00895 usec per loop vs python -m timeit '"hello {}".format("world")' 10000000 loops, best of 3: 0.105 usec per loop edit: formatted
If that's an issue, then you should work with IT to have a mutually agreeable arrangement. 
And in Python projects, sometimes all you need is virtualenv.
As far as I see, both serve different purposes. One is a framework (Flask) and the other is a CMS (Wordpress). Maybe you are better off looking into something like Jekyll, flaskr ( which runs on top of Flask) or other blogging frameworks. 
I've been in a similar position where I asked for something innocuous and the newly minted "Enterprise Architecture" team turned me down. All told, I probably spent about 80 hours preparing and giving presentation after presentation in order to get the new "architectural standard" approved. What was the standard? IoC via Unity / Ninject (.Net libraries). I spent the majority of my time explaining what inversion of control and dependency injection was to the "principal architect". If it's something you really care about, be prepared to support your assertion that this is a worthwhile investment for the company. You'll need to present sourced information that refutes the reason for rejection and you'll need to prepare the other ad hoc reasons that will be forthcoming (hiring python developers, security risks, etc.). If you happen to be in a similar situation (i.e. at a ".net shop"), it may help to show that Microsoft is invested in Python as well: * [Microsoft Python Engineering Blog] (https://blogs.msdn.microsoft.com/pythonengineering/2016/02/12/welcome/) * [Jupyter Notebooks in Azure ML](https://blogs.technet.microsoft.com/machinelearning/2015/07/24/introducing-jupyter-notebooks-in-azure-ml-studio/) * [ASP.Net documentation using Sphinx](http://aspnetmvc.readthedocs.org) * [Python Tools for Visual Studio](https://microsoft.github.io/PTVS/) I did eventually get my standard approved at my former company, but I kept having to push for "architectural standards" on decades old technology (MSMQ) and I ultimately decided that I was better off working elsewhere. One last word of caution - if you choose to fight this, do it with grace and civility. There is a good chance that fighting for this will put you in the crosshairs of the person doing the denying and being an ass will only get you there faster. [http://i.imgur.com/phH3VDK.gif](http://i.imgur.com/phH3VDK.gif) 
PyQt4 has worked well for me with cx_Freeze [Here](https://github.com/ElecNinja/AccountRecorder/blob/master/Example%20Screenshot.png) is a screenshot of an application I made with PyQt4. The Designer tool they include is pretty helpful to make set-in-stone GUI elements.
speaking about Flask, Lektor https://www.getlektor.com/ is a static site engine from Flask's creator.
SQLAlchemy???
I'm extremely structured minded vs obj oriented. From what I've learned and seen Python is going to be WAY easier to grasp than C++. If you got anywhere w/that you'll do just fine in Python. Automate the Boring stuff is amazing. I was doing it via free website but I had to buy the bundle once I saw it and a few other things on there for Python.
Thanks. I saw an interesting difference when using a variable instead of a string literal: $ python -m timeit -s 's = "world"' '"hello %s" % s' 10000000 loops, best of 3: 0.102 usec per loop $ python -m timeit -s 's = "world"' '"hello {}".format(s)' 10000000 loops, best of 3: 0.195 usec per loop Now it's down from being about 10 times slower to just 2 times. Based on that, I would suppose the reason for the difference in your example is that Python can parse the whole `%` expression at once, whereas the `format`method needs to parse its arguments repeatedly each time it's called.
That's a Java issue...
Ask for a macbook pro as a dev machine. It will have Python installed already. ;)
Correct -- Windows environment. And yep, I'm hearing it here and everyday at work, haha.
It is one of the largest companies in the world.
It's not a matter of admin privileges -- it's the inability to share among the team. My manager knows my permission was denied -- so if I begin sharing anything that isn't a Java application, I'm screwed.
Why do a float storing cents? Do an int storing cents. But then coverting between currencies is a pain. For example you have $4.23 and want it in Yen.. what is the conversion? Just use py-moneyed
Uninstall Windows too, it's a well known hacker target. 
Dont't want to hijack this thread, but if you are interested in a pure python logstash-like replacement with mongodb support, you could take a look here: https://github.com/dstore-dbap/LumberMill. Disclaimer: That is my project and still under development. We are using it to index different kind of logdata, amounting to ~30GB per day. Docs can be found [here](http://lumbermill.readthedocs.org/). @afroisalreadyinu: if you think this comment is out of place here, let me know - I will remove it promptly ;)
Indeed one of the best news ever.
yeah .. but you are also 10000000x creating and assigning the variable ... in the end depends on the usecase. the point is that .format did not and will not deprecate the old style formatting... and that there might be cases where the old style will be more useful. 
That's exactly what I'm doing by using the `-s` option of `timeit`.
I love using Kivy on Windows! In the last release it has gotten so much easier to setup on windows as well. You are only a few pip installs away from a functioning exe built by pyinstaller. The instructions are literally 4 steps. * 1. Install python 2 or python 3 from python.org * 2. python -m pip install --upgrade pip wheel setuptools * 3. python -m pip install docutils pygments pypiwin32 kivy.deps.sdl2 kivy.deps.glew * 4. python -m pip install kivy Then if you want to build an exe, pip installing pyinstaller and then you've got to run the spec generation and slightly modify the spec to include the files unique to your project. If you are having trouble getting Kivy installed on Windows 10 you may have either an outdated Kivy or an outdated python, now that Python on windows ships with pip eveything should be extremely easy to get setup.
Unfortunately, it's not the inability to develop in Python (I am not incapable of installing locally or using an external drive) -- it's about the restriction to share this among team members. My boss would realize I've broken orders and began developing in Python.
I love it.
I first attempted to use Java (pretty much the only thing used here), but I couldn't locate an acceptable standard library option for connecting to Unix boxes and running commands. Plenty of third party libraries, but getting my company to sign off on that would be problematic to say the least. Python has options for me out of the box.
It is a software developer position. However, this company calls everything "software development" -- it is mostly GUI-centric proprietary tools.
I am a software developer, but not treated like one. This exercise is an attempt to code more than I currently am.
It is a software developer position. A lot of work is being done by hand and I was hoping to improve our processes.
This is a great idea and what I've decided to do as a last resort. I will undoubtedly run into additional issues with security on this box, in which case I will give up on this altogether.
kdevelop has a python plugin that works well. That is what I typically use.
&gt; I learned that Python is allowed, but only when bundled with Oracle's Linux OS. They're literally giving you the solution -- and it kills two birds with one stone!
pip install PyQt5 ?? 
It's hard to understand what you're asking for from your description, so I think you may be asking the wrong question here. There are many ways to share data across a network between two clients. One of the more commonly implemented forms today is to use JSON, but it is by no means the most efficient.
Very good insight -- I can tell you've worked at larger institutions. I envy some other commenters who don't quite empathize with this kind of red tape. For the record, I did not ask permission -- I informed him of what I was doing, but was told to request permission to install Python. Either way, my manager would have caught wind. I don't blame him personally. I first attempted to use Java, but it did have tools out of the box for connecting to Unix machines and running commands (Python does). This is my understanding, at least. I'm happy to use Java, but getting permission to install third party libraries for accomplishing this task (like JSch) would be difficult to say the least (without an actual project requiring the work). I'm going to try anyways just to see what they say. I don't know how people are supposed to develop at a company like this where it is so restrictive.
No OSX being used here.
Woah-- I'm impressed. Can you walk through what's going on here? Is this essentially `deque.__repr__ = deque.pop`?
If you just want a git repo, I'd recommend GitHub, BitBucket, or Gitlab. No reason to run your own on AWS.
Yes, the wheels will only install on Python 3.5
For my ebook needs, I generally go to : http://gen.lib.rus.ec/ . This book is also available.
PyQt is only the bindings. The Qt framework needs to be installed separately. I'm not sure if the pip install automatically does the Qt install for you if it can't find an existing Qt installation; my guess would be that it does not.
I'd like to hear more -- feel free to message me with details.
Looks pretty slick. I wonder why it isn't more popular? This is the first time I've heard of it!
Yeah, that's why I asked to begin with. Both options have pitfalls, I'm just interested in which he went with. Auto-building Qt on every system that needs it as part of the distutils script is almost certainly intractable
I have had luck packaging PyQt4 apps into executables on OS X, Ubuntu, and Windows XP via PyInstaller The process takes some time, there will be errors, but some googling for stackoverflow questions generally is all you need to fix them.
I hope to. In my boss's defense, it is company policy and not his personal decision.
I have been always indifferent to such topic, but yours have really impressed me.
Author is really great.
Sharing the program would be problematic because all developers would want access to source code. And after discussing the issue with my boss, I'm sure he would ask how I managed to write it without using Python.
We must both work for the same company...
I've had no rendering issues with PyCharm on Kubuntu.
My only experience is using Qt and PyQt via Anaconda. Conda handles the installation of both the Qt framework and the PyQt bindings. IT can be done for both Qt5/PyQt5 and Qt4/PyQt4 with the latter being far easier and the former requiring a bit of finagling to get to work.
Only reason I asked is the same happened with me at a fairly large bank. Moved to a tech company and its so liberating!
I know Bank of America has Python positions, but for that reason, I will be avoiding them.
This looks exactly like what I've been looking for. I've got a raspberry pi and been wanting to make an interface for some home automation stuff I've got. Didn't fancy all the heavy work of some other Web gui frameworks thiugh. This looks simple enough and easily customizable 
I've asked for this before. 
My first thought subscribing to this sub, "I know a little python, maybe I can contribute." My second thought, "I better subscribe to learnpython."
The solution is to get management to acknowledge that they won't be able to scale the business properly until the problem gets solved. Track, in some way, the amount of time your team takes (and therefore the amount of money the company is effectively spending) on an easily automatable task. Even if your management team is pretty dumb, they'll be able to understand "this technology will save us $20k a year" or whatever it comes out to. Maybe custom software is the solution, but there are *tons* of tools both free and proprietary out there which are built to parse log files. You should evaluate those and IF one of those does fit your needs, THEN an actual development effort needs to take place. I know how you feel man, I've been right where you are, almost to a T. But I've also seen what happens 5 years later, after you leave and people who you've never met are cursing your name. 
Now you know how I feel when someone has incorrect and condescending criticism. The condescension was bad enough, but being completely off the mark in make believe of *what the boss might be thinking* and treating that as fact is just irritating at the least. 
It's quite new, that may be the cause. We heard of it a couple of times here on reddit though. Stay tuned !
[**@jakevdp**](https://twitter.com/jakevdp): &gt;[2016-04-27 18:43:33 UTC](https://twitter.com/jakevdp/status/725394975018512384) &gt;Whoah... I just freed 7GB of disk space by running \`\`conda clean \-tp\`\` \(t = tarballs, p = unused packages\) ---- [^[Mistake?]](/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/4gv5z8%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/joealcorn/TweetPoster) [^[Issues]](https://github.com/joealcorn/TweetPoster/issues) 
anyone confirm it works? whats command
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, we are sure you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
This is neat. When I tried to use PyQt for a small project that needed a desktop GUI, installation felt harder than necessary. And then I was disheartened when I could make it workable, as the library threw a few segfaults and felt very low-level. I understand PyQt is meant as a thin wrapper around Qt and this by itself is a huge effort, but I wish something along the lines of enaml had more traction.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, we are sure you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
seems reasonable, is there a problem with this? My team uses bash for most of the Devops stuff and then calls on it from java
 [venv] $ pip install pyqt5 Collecting pyqt5 Downloading PyQt5-5.6-cp35-cp35m-manylinux1_x86_64.whl (82.6MB) 100% |████████████████████████████████| 82.6MB 19kB/s Collecting sip (from pyqt5) Downloading sip-4.18-cp35-cp35m-manylinux1_x86_64.whl (60kB) 100% |████████████████████████████████| 61kB 10.9MB/s Installing collected packages: sip, pyqt5 Successfully installed pyqt5-5.6 sip-4.18
I'm completely new to Git, didn't realize you could just push/pull from GitHub for free. likely will do this. A big reason to host myself would've been to run the script on the AWS as well. Maybe if i ever learn to make a reddi tbot
im completely new. Signed up for AWS incase i can write any python stuff to continuously run on server side. Wanted way to work on it from anywhere.
How does it determine a package is unused? 
I'm gonna optin with a small question, is it possible to have a private repository on one of those for free ? and is it possible to have your own repo like on another pc at home ? (like if D:\Volume_1 is an hard disk shared on the network, how would you make it a remote repo since it doesn't end with .git ?
I was rushed by a friend just as I was going to type the comment. But my comment still stands although OP has a negative experience of eclipse+pydev. I have tested it on Linux and I am not the only one. There are lots of people who use it.
Looks like it looks at the number of symbolic links to each package: [code](https://github.com/conda/conda/blob/86815469ec941bf0e3d1abb5a6461f6530d7f299/conda/cli/main_clean.py#L119)
Yeah, probably won't work. 
Bitbucket offer free private repositories, github only offer free public (open source) ones. Not sure about gitlab.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, we are sure you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
vim
Blocked.
Make sure you have many whiteboard programming tasks in your interviews. Make sure the tasks have nothing to do with what the candidate will actually be doing. Also hand them a homework assignment that also has nothing to do with what the candidate will actually be doing. Finally, never call them back after several interviews. 
it doesn't do a good job apparently 1.5 hours later I'm still trying to get my conda installation back to normal
cant find it under python 2.7.10 :/ 3.5 only? wheres the 2.7 love 
Don't forget to have them solve pointless math and algorithm problems that never need to be done in the real world because they've already been implemented a thousand times in a thousand libraries.
Time for an upgrade :D
Please post to /r/learnpython 
You're like 5+ years out of date mate, time to upgrade.
Use pyodbc
import csv
got any code snippets for dumping it into a local DB? I've been trying to do that for a bit, and haven't come up with any viable solutions.
are you connecting from Windows or Linux? Sorry I was on my phone earlier. pyodbc is the way to go however. This is how you would structure your connection: import pyodbc cnxn = pyodbc.connect('DRIVER={SQL Server};SERVER=yourserver\yourinstance;DATABASE=yourdb;UID=youracct;PWD=yourpwd') cursor = cnxn.cursor() cursor.execute("select * from user") rows = cursor.fetchall() for row in rows: print row.user_id, row.user_name
Heh, glad I hesitated :)
Did you run the line pip install - r requirements.txt ? 
You can iterate through the file using the chunk_size argument in the read_csv function. Check out the docs. 
Here's my proof that the second is far less safe: what if my username was "';drop table users;". Compare the results and see what happens.
Have you already tried SQLAlchemy?
Keep the faith, there are some major updates to the CPython extension compatibility interface due shortly IIRC edit: https://bitbucket.org/pypy/extradoc/commits/2d7ef522bdea061588ea687136bff92706a26d3a
FYI On GitHub your code will be public, on bit bucket you can have free private repos.
what version of sql server? Apparently it's been a while Microsoft actually supports the pymssql connection look at the following: https://msdn.microsoft.com/en-us/library/mt715796(v=sql.1).aspx import pymssql conn = pymssql.connect(server='yourserver.database.windows.net', user='yourusername@yourserver', password='yourpassword', database='AdventureWorks') cursor = conn.cursor() cursor.execute('SELECT c.CustomerID, c.CompanyName,COUNT(soh.SalesOrderID) AS OrderCount FROM SalesLT.Customer AS c LEFT OUTER JOIN SalesLT.SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID GROUP BY c.CustomerID, c.CompanyName ORDER BY OrderCount DESC;') row = cursor.fetchone() while row: print str(row[0]) + " " + str(row[1]) + " " + str(row[2]) row = cursor.fetchone() I'm not on my work PC right now but I have successfully connected to an SQL Server 2008 instance but in typical M$ fashion they changed things inexplicably pre-2008 and post-2008 so ymmv. The above is for post-2008 which would be Azure compatible.
At 9:40 into the video they claim Guido sees sometime in the future where PyPy becomes the default Python runtime.
Right, but the mutually agreeable isn't "write better software" as you suggested. 
It all depends on how you interface the C code. If you use the Python C API approach it will be slow although recently there has been some work to improve the performance. However, it will likely remain the slow approach. On the other hand if the C code is interfaced via the cffi module the performance of the calls have very little overhead above and beyond a native C call. Which is about as good as you can possibly expect.
check out /r/learnpython
And have those problems be underspecified, such that they can give a correct answer that doesn't match the answer that you are looking for. Only accept answers that match exactly what you are looking for, especially if it is actually incorrect.
I was looking at it but had not tried it as I wasn't sure if it was what I needed. When I use any of these python drivers, do I also need the proper odbc driver?
Hmm sometimes the best case is do something simple but effective under the radar like a non critical task as a demo like automating your timesheet. Something with no impact to anyone but you but definitely noticible. Spark interest and then get asked to do something bigger. It helps to convert some others to your side as well so it creates a larger knowledge pool.
I would help but the whole script is in spanish..
How did u download the file if pip is not recognized? 1)Download pip 2) add pip to path 3) use pip to download dependencies from requirements file Edit:nvm it uses git.
No problem someone already helped me in the other thread i made but thanks for taking the time to actually look at my post :D 
Is this homework?
thank you i use the python3 right now!
So, in your first example you set: a=1 b=a a=2 This sets a equal to the integer 1, B equal to that same integer 1, and finally reassigns A to 2. In the final scenario, you're setting a to a dictionary, B to that same dictionary, and changing the same dictionary, Hence B and A reference the same thing in the second example, but you reassigned A in the first, so they don't at the end of the first example
While not strictly correct, you can think of mutable types as "pass by reference" and immutable as "pass by value" http://stackoverflow.com/a/8056598 P.S. Please post learning questions to [/r/learnpython](https://www.reddit.com/r/learnpython)
Unfortunately, you do just have to memorize it. In python, some of the very basic data types are immutable (e.g. str, int, float, long, complex, bytes, tuple, frozen set etc.). For those data types, the assignment operator will always create a new object. This is a necessity for supporting some of the higher-level structures/features of the language (e.g. dictionary keys, default values in function signatures, etc.) Pretty much everything else is mutable (e.g. lists, dicts, functions, classes, etc.). Assignment just creates a reference, as you observed in the second example. Again, there is no deeper underlying pattern or syntax here. You just have to memorize the few common immutable types. If you only remember that strings and numbers are immutable, you are 90% of the way there.
There was no copy created in any of your examples. &gt; a = 2 This should be read as, "Make 'a' point to a new integer object 2." You aren't modifying anything; it's impossible to modify a number because all numbers are immutable. The old object that 'a' used to point to (and which 'b' still points to) still exists as it used to. &gt; a['two'] = 2 This should be read as, "Follow 'a' to the object it points to and modify that object, setting the value corresponding to the key 'two' to 2." Dicts are mutable, whereas numbers are immutable. The key things that you should take away from this are: - The distinction between a name and an object (A name is always a pointer to an object, but not all objects have names.) - Writing `some_name = ...` is fundamentally different than writing `some_name[...] = ...`. The former reassigns the name to point to a different object, whereas the latter follows the name to the object it points to and modifies that object. - Some types are mutable and others are immutable. 
Thanks! That was a very good explanation.
Hey, not trying to start a debate here, but Rhomboid [here](https://www.reddit.com/r/Python/comments/4gxqhd/trouble_understanding_assignment_in_python/d2lpi2r) said that in fact my first example didnt create a new object, they both were pointing to the object 1, which is inmutable. So when I did a = 2, a now points to the inmutable object 2, while b still points to 1. Your answer seems reasonable too though.
Link to Github Gist: [face swap code](https://gist.github.com/smeschke/5926ec3c952ab506cb8f4c73366adca0) I have removed some parts of the code (like importing libraries) to make it easier to read. See Gist above for complete code. #load the face finder face_cascade = cv2.CascadeClassifier('/home/sm/Desktop/haarcascade_frontalface_default.xml') #load the face that will be swapped in (found a face online, and cropped the image) face_img = cv2.imread('/home/sm/Desktop/faces/14.jpg') #start loop while True: ret, img = cap.read() #read image from webcam gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) faces = face_cascade.detectMultiScale(gray, 1.3, 3) #find faces #for all the faces found in the frame for (x,y,w,h) in faces: #resize and blend the face to be swapped in face = cv2.resize(face_img,(h,w), interpolation = cv2.INTER_CUBIC) face = cv2.addWeighted(img[y:y+h,x:x+w],.5, face,.5,1) #swap faces img[y:y+h,x:x+w] = face #show the image cv2.imshow('img',img)
A good way to think of this is that virtually everything in Python is an object, so for the most part, everything is passed, assigned by reference, the notable exceptions being string and numeric literals (and booleans). The other thing to remember with Python: key structures (lists, dicts, tupples) can hold anything. You have to think about that when you want to make a copy (not a reference), for example: a copy of [1, 2 [3, 4]] - a list with three items - would make a copy of two ints and a reference to a list (the list [3,4]), since that last list item is a reference to another list. There is a deep copy operation, which is predictably expensive and surprisingly rarely needed. #Example: a = [1, 2, [3, 4]] b = a.copy() a[0] = 0 print(a) print(b) a[2][0] = 99 print(a) print(b) 
He is correct. I think my statement was too specific i.e. "For those data types, the assignment operator will **~~always~~** create a new object." Assignment to another variable does just create a reference to the same memory location. Assigning another immutable does create a new copy. Saying "always" was incorrect on my part. Here is how you see what is going on (id gives you the memory location): In [1]: a = 1 In [2]: id(a) Out[2]: 4512049280 In [3]: b = a In [4]: id(b) Out[4]: 4512049280 #THE SAME AS ABOVE In [5]: a = 2 In [6]: id(a) Out[6]: 4512049312 #New memory location In [7]: id(b) Out[7]: 4512049280 #b is still at the old location and did not change 
If it's linux, I suspect just reading from /dev using regular file I/O functions should work (if you have read permission for the device)
while assign with rhs immutable is akin to copy ctor for new object, there's deepcopy to copy mutable object and its children as well.
/r/learnpython
What errors are you getting? What are the steps you took when encountering this problem?
Did you try "pip3 install python-qt5"?
What's the error? If it's about invalid characters, try setting an encoding in pandas `read_csv`. # most common encoding for unicode files df = pd.read_csv('foobar.csv', encoding='utf-8') 
I especially don't like equating 'most pythonic way' with the shortest lines of codes that results in complex, perl-like one liner. Often I see this kind of post at stackoverflow... It's that kind of code that if I come back to it half a year later, I'd think wtf is this piece of shit and who wrote it.? 
I absolutely suggest reading through http://nedbatchelder.com/text/names.html It explains well the difference between names and objects in Python, how assignment/binding works as well as other related ideas. Particularly, if you are coming from a C background, you will likely be confused when trying to understand how variables are passed to functions (a common sticking point for people learning Python from classic languages) but that article will really help with that.
It isn't! I wanted to play around with compression and needed to get a push in the right direction
What are you confused about exactly?
availability = listify( soap[env+'Envelope'] [env+'Body'] [doorway+'MultiAvailabilityResponse'] [doorway+'Availabilities'] [doorway+'Availability']) The value of the arguments in listify function. What it is doing? Also, If I want to get the value of another element from response, for ex: HotelCode or CurrencyCode. What I need to do?
Well, I haven't used it.. but David a well known Python programmer, who focuses a lot on concurrency, so it's not much of a gamble to use his code! Just make sure you have a thorough read and understand what it is doing.
I think it's worth it to bend your code quite a bit to make pycharm happy. In my experience this can catch lots of bugs and makes development much faster and more pleasant. 
Are you using OSX? If so, you probably have to update your python installation. Read the docs [here](https://pip.pypa.io/en/stable/installing/).
conda clean -t should still be fine to use. 
Your post has negative votes so i was just offering some constructive criticism in case you cared. You don't have to write a blog, but if you do people like to see content in the article and not just follow links to other content. I actually did try to follow one of your links but it was a sign in page; no thanks! And chiding readers for not digging hard enough to find value in your blog? Clearly that's helpful /s.
In general, generators.
I'm not aware of a specific tool, but I think Graphviz might get you pretty close, at least for the diagramming. The format is pretty straightforward. Graphviz is a general tool and lots of programming languages have their own libraries to work with it. Take a look at [Graphviz.org](http://www.graphviz.org/) and have a look around the galleries. There's also a ton of resources around for bending it to your will. 
I think it's great as long as the code doesn't lose readability. Why wouldn't you want your code to be shorter, all other things being equal?
That's what I thought! So I run diskutil unmountDisk /dev/disk2 on the terminal to stop the disk. Then I have the following code: http://pastebin.com/KetHcFJt But the output is blank! No matter for what value is in the read. Edit: Also, how do I know what legal values there are in the harddrive[] indices? Edit 2: I did a loop for indices from 0x1 to 0x000FFF and I did get some values, but they aren't hex. They're returning the values as if I opened them up with a text editor. For instance, some of the values on 2569 is: &gt; w?????r???????&gt;???1?6???0?E?ʨ????w???d??????n???r???????????,???S?%?????+???????F?o??????&gt;?Ao????w???5???????D?B??`?`????R??u????/???M???&lt;?? ? +4? ? I would like them returned in hex form.
Seriously! Bitching about "look how few lines of code this takes" is basically bitching about being able to define functions for re-use. 
Skimmed. Didn't make any sense and even saw a sentence that didn't even follow English grammar. 
+1. Use csv.Reader to get a generator over your rows. It won't load the whole file in memory, and you can filter it with the regular str methods ou re.search if you want. All in all, 2,5 Go is not that huge, and filtering or finding is one of python's strengh. No need for a specific tool here.
- You don't need to unmount it - Are you sure it's /dev/disk2, not/dev/sda2 - Are you running the program as a user with permission to that device (i.e. you probably have to run it as a superuser) 
I am not obsessed with the length of the code. This is my third post to Reddit. My first two posts were [MS Starfield Screensaver in 22 lines](https://www.reddit.com/r/Python/comments/495pum/remember_the_old_ms_starfield_screensaver_its/?ref=share&amp;ref_source=link), and [Go (the game) Simulations](https://www.reddit.com/r/Python/comments/4a9nxs/running_go_game_simulations_code_and_simulation/). They earned 100 upvotes (4,200 Youtube views) and 6 upvotes (65 Youtube views), respectively. I thought the Go Simulations were far more interesting, but the post didn't do well. If the program is short, adding the words, "All ## lines of," to the title can be the difference between a successful post and a failure.
&gt;yeah, its silly to say "15 lines of code" when you're importing big libraries That's like criticizing someone's art because they didn't make the pencil that they used. As a Python beginner, I think projects like this are really cool because it shows that I could accomplish complicated tasks without having to invest a large amount of time in coding. I think it's inspiring.
Would a stub file help here?
I'll play the devil's advocate here and note that whiteboarding algorithm and datastructures problems makes sense if they're part of the problem domain your company is focusing on. It's not too far-fetched to question a programmer on double entry bookkeeping if your application focuses on financial stuff, lots of datastructures if it does tons of ETL, spatial algo if it handles GIS things, etc. There are developers out there who have experience in these fields and it's probably worth a lot to get them vs. getting someone who's never done these things even if they can learn them in 3-6 months. However, I agree that posing these questions to someone who is meant to maintain and extend an HTTP API is not the smartest thing to do. You'd be rejecting tons of good candidates for this position.
I think you're on the right track. When reading the device directly you get back binary data. If you want to display it as hex you first need to convert your binary data with a function like binascii.hexlify to a hex representation.
Turtle could walk all of those for you. The next day, when the diagram is complete...
You might want to look at setting up an ELK stack for the data. https://www.elastic.co/products Splunk is also great but you'll have to pay for licensing if you ingest more than 500mb daily or want some of the nicer features. 
Played with it a bit and it's a really nice library but I haven't had a chance to use it in a project yet. 
I believe Dia might work. I know xmind has an sdk.
I didn't get the feeling that they don't understand what they're doing from the OP, and I must have been graced by divine mercy or something because I can't say I've ever met anyone who seriously tried to codegolf in production code (and people who codegolf recreationally actually do understand what it does, it's that nobody else including themselves a couple of days later wouldn't). Or maybe we are talking about different things here, I don't know.
Reddit karma roughly translates into attention afforded, which might be very interesting once you put the work into polishing some work of yours to be presented to the public.
This is a great post. Thank you!
Ideally, the time you spend doing something is spent understanding how to do it the best way - which probably means balancing multiple factors like readability, maintainability, extendability, etc. So while the least lines of code approach looks easy because not much time was spent "writing the code". It still a considerable time investment because you have to know which code to write. And it may not be the best depending on what you're trying to achieve. In this case it seems OP optimized for bragging rights which is probably why there is some vitriol.
what is the contents of `haarcascade_frontalface_default.xml`?
It's nowhere near as easy and quick. My Spreadsheet is full of all year expenses and it updates various currency values and some investment rates and graphs so it doesn't load as fast as a blank note. With keep 1. Unlock cellphone 2. Click on Widget (Minimal loading time) 3. Write down the string With Sheet directly 1. Unlock Cellphone 2. Enter Sheets App 3. Enter the spreadsheet (Takes a bit to load) 4. Enter the right Tab for the month (can't remember how the exact name in English :P) 5. Fill the 5 columns EDIT: Mind you I'm nitpicking here, loading time and effort for both are quite similar and fast enough.
id rather die than upgrade to python 3.x! 
I see that a lot with list comprehensions. One thing I do to make it a little better is writing it out like you would write out SQL: method_objs = [ getattr(self, method) for method in dir(self) if method not in self.base_class_attributes and type(getattr(self, method)) != list ]
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, we are sure you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
ah man, this sounds great but my work computer is windows 7 only. I might have to try this on my personal machine. Thanks for the feedback!
Ask him if he's fluent in Haskell. I spent the last year learning about mathematics (algebra and category theory) and pure strongly (dependent) type programming languages. I thought it would make me a better programmer. Instead, it makes me disgusted and frustrated by languages that make no sense, offer no guarantee and work against abstraction. You don't want to hire me to code in Python anymore, it's a life of frustration.
Thanks! I'm gonna give it a shot right now, hopefully this works out! 
&gt;Are you always comfortable with people using things they don't understand? &gt;If I have found, through my entire career, the people who boast about minimum lines of code are those that understand the least about what the code actually does. &gt;You might have different observations in your career, but this is a red flag when I hire someone How do you know if they understand it? Just wondering, because if the code works and the OP hasn't expressed a lack of understanding on the subject, then why assume they don't know?
That explains why a descriptor unraveller I wrote would always choke on staticmethod in Python 2. I figured it had to do with the bound/unbound stuff but since it was a side project, I didn't investigate too thoroughly.
See, it's unpronounceable shit like this /r/python that really grinds my gears 
I don't think so - it's compiled for x86_64, not for an ARM processor like the Raspi has. However, Debian [has it](https://packages.debian.org/jessie/python3-pyqt5), so you should be able to `sudo apt-get install python3-pyqt5`.
You replace the I in IRCD with Psy. The only confusion is the lack on gangnam style default MOTD.
We can discuss if putting the LOC in the submission or not is boasting, but it still raised a red flag. 
brain wash it. 
Points .... given to you by real people. It's like a nod in your direction that you've done good work. Like it or not, but people like the approval of their peers. It's practically hard coded into our mental model. 
That's all things being equal, but using a library to make your code shorter is a point of inequality.... and the whole point of libraries. Whenever I see X implented in Y lines, I'm enthused because it means that I can do X task and change it to suit myself without having to write 1000s of lines of code to do feature detection, and read bits from a camera socket. That's Python... Hello World in 1 line of code, as opposed to 500 lines of assembly to switch you safely into kernel space, write to the monitor device, and then switch back into user space.
Oh totally! I knew you were not pointing at me specifically. No offense taken here. 
Unfortunately, this only works accurately with very clean data. If your urls include field delimiters in them it will completely throw off most of these tools - that have only very simple csv dialect features. So, if you want the best accuracy, stick with tooling that supports escaping of special characters and/or quoted fields. Which include's python's csv module, pandas, etc. And if you generated your file without that - regenerate it with these features. 
Assuming those exist. I've yet to see a candidate with but a star or two on his projects... I guess if I worked at a Google or Facebook life would be different.
&gt; You obviously do some basic investigation of the code Would be a better investment of my time to investigate known good code. Which is why I send out a short coding assignment to prospective hires that've passed a phone screen.
Meh. That's definitely a good way of doing it, but I'm significantly more interested in candidates who enjoy coding and do so a whole bunch, not just people who can do an assignment when it's mandatory and they know it's going to be looked at heavily. I'm generally interviewing candidates for co-op positions who are still in college, but I've found that having a github account with decent code is the absolute best indicator of who's going to crush our in-person coding interviews.
I'm fond of trying to write assembly algorithms (basic signal processing, recently) for bare metal microcontrollers in either minimum size or fewest clock cycles. Not foe any truly practical purpose I couldn't achieve more easily with C and compiler optimisation flags, but because it's a fun challenge and a test of ISA knowledge and sequential logic. 
SOAP is… verbose. Perhaps the best way to understand this would be to read some documentation for both this API and SOAP in general while desperately clinging to your last bit of sanity. That would likely help you understand the structure you're seeing, and from there you can deduce the way it's actually functioning.
You could try codecademy.com Or even learnxinyminutes.com -&gt; I love this website for quickly getting a grasp of the syntax of a language.
Python does a lot of things wrong from a mathematical point of view, but getting rid of the unbound methods was a great move. It's one of the few things that totally justify using Python3.
Holoviews is designed for this task. It is centered data exploration, and has both matplotlib and bokeh backends. When run in IPython It will pretty much automatically create a frontend for the data you give it, including dropdown lists, sliders, animations, etc. depending on what parts of the data you tell it to emphasize.
Can you use Jython?
Thanks, will do!
Oh, yeh, is that so: https://www.exploit-db.com/exploits/37384/
I agree. Fewer != minimal
This is a beginner question dont waste our time 
Almost everything. The 'types' are violating type theory. Python classes are sort of type constructors (but not quite), and Python's implicit interfaces are sort of types (but not quite), and the analogy breaks pretty soon. Indeed, there is no Bottom type (although uncaught exceptions can play that role, except for infinite loops), and the Top type is unclear (could be either 'object' or 'type'). At least Python 3 has now a unified 'type' (cough cough) system, unlike Java or Python 2. Python has inheritance, which makes no sense at all, except for maybe providing default implementations of some functions. An acceptable use of inheritance is class Eq: def __eq__(self, other): return not (self != other) def __neq__(self, other): return not (self == other) It looks like it would create an infinite recursive loop, but that's because you're expected to re-implement at least one of them, and you get the other for free. Any other use of inheritance has no foundation. The thing is that writing in Python is like writing in assembly, it's almost too powerful for its own sake. Geez, Python can even intercept its own opcodes and change them on the fly. Every single Python instruction, or even just one microseconds between instructions, can change the entire state on the program, data and code. There are no rules, no guarantee, no safety. The following code isn't safe: def four(): result = 4 return result Because an exec with custom dict can change that 4 between the two instructions: You cannot even trust your constant to be constants.
You're in a very concerning position. You have a very technical company and you can't code. You need a cofounder.
&gt; I know this is not real legal advice Of course it isn't, IANAL. &gt;It still seems murky, then, if you were to make an application that makes use of a GPL library, and yet don't distribute the GPL'd code (only an installer which fetches the GPL code from a public online repository), whether or not the application would be required to be under the GPL. This is indeed a very interesting question. Such an application would have to be licensed under the GPL if it can be proven that it is a work based on the GPL library. Remember that GPL cannot restrict fair use: you cannot publish an application based on someone else's library without permission from the copyright holder, so GPL's restrictions apply only if the alternative is that the application can't be published at all. There are several ongoing disagreements in which companies try to prove that there can be ways of legally combining proprietary code and GPL code (e.g. Hellwig suing VMWare in Germany, Software Freedom Conservancy arguing against (apparently not yet suing) Canonical about ZFS in the Linux kernel). I'd say if the GPL module in question is an implementation of some standard interface, you can successfully argue that you are developing for that interface, not for a specific work. Otherwise you probably should consult a lawyer, because the developer can take an issue with you.
cool! Yeah I've found at times have to explicitely state the port too.
&gt; Should I rely on using pip to install my packages? How reliable is pip when selecting to install specific versions? Can I assume these packages will be there years from now? Sounds like you want to **pay** someone for a [SLA](https://en.wikipedia.org/wiki/Service-level_agreement). Or set up your own infrastructure to fall back on. PyPI is provided best effort, by volunteers. Even then, it's served on Fastly CDN and I hardly ever notice basic installation services go down (a day in a year? if that?) but if you want to demand perfection, don't expect it for free.
Thanks again for your help!
Based on the replies from you and /u/Doormatty, is something like this an acceptable alternative? Download packages via: pip install --download=/path/to/packages/downloaded -r requirements.txt I would then commit these to a remote repository and clone to a new machine when provisioning. Then install via: pip install --no-index --find-links="/path/to/downloaded/packages" -r requirements.txt 
you also have the `pip wheel` command `pip install --download` is deprecated in favour of `pip download`
Nice! Small tip: name it with a `.py` extension to get syntax highlighting in the gist.
Thank you! Will take a look!
The types don't "violate type theory", it's just a dynamically typed language and the type hierarchy (and use of duck typing) is weaker than you would like. You can't "violate" a system you don't purport to adhere to in the first place. The eq/ne example you give is very odd, and unnecessary in Python 3 where the semantics of ne are by default given in terms of eq. If equality behavior is not implemented, you should return NotImplemented. Or, if you want to talk about what you'd do if the language had a simpler comparison model that doesn't have NotImplemented, you would instead raise NotImplementedError. Claiming that inheritance has "no foundation" or "makes no sense at all" in Python is pretty broad. &gt; The thing is that writing in Python is like writing in assembly, it's almost too powerful for its own sake. Geez, Python can even intercept its own opcodes and change them on the fly. Every single Python instruction, or even just one microseconds between instructions, can change the entire state on the program, data and code. There are no rules, no guarantee, no safety. This I will agree with you on. The specific example you gave wouldn't work in CPython (you can't change local variables and literals with a custom dictionary, you'd have to hack the compiled code object or closure), but you can get similar effects by monkey patching namespaces. You can also go off the handle with overusing meta-programming. I don't know that that's the same thing as being "mathematically incorrect", but it is pretty much impossible to do any formal reasoning over its semantics in the general case.
[Link to the author's code repo for the paper on github](https://github.com/spectralDNS/spectralDNS). It would be very nice if the authors also include a Fortran implementation for reference and testing.
You sure this is a Python problem? One thing to consider is error recovery. Crontab runs your script regardless of the outcome of the previous execution, for better or worse. If your Pythonic scheduler crashes, you're dead in the water... (unless you use something like runit).
I think you need to look up strawman.
Haha! Again you save me. I looked up the dsn method and I got it working! So awesome. I'm connected to an old database on the mainframe. So cool. I haven't really used odbc before so this has been a learning experience. Thanks again!!
Source? Running this locally would be sweet.
Yes it is and you will get more advice over at /r/learnpython.
There is an entire subreddit devoted to this and more. See /r/learnpython.
If you do end up running your own package index, it's worth looking into Artifactory; it's what we use here. It hosts our pypi, npm, bower, docker, nuget and yum packages internally. It's a great piece of software, and not too expensive for what you get.
I will keep that in mind. Thanks!
Why not just use twisted?
An IDE should only ever be an enhancement to your typing experience. If you find yourself writing code for your IDE, you fucked up, much the same as writing code to satisfy your tests.
Well, Automate The Boring Stuff is a free book, so.. I bought it for some of the other books in it. They look interesting enough.
A strawman is a bad argument that attempts to argue against something the speaker (me) didn't actually say. For example, I said: &gt; I'm significantly more interested in candidates who enjoy coding and do so a whole bunch You pretended I had said: &gt; loves coding so much he does it 24/7 &gt; Spending one's entire life in front of a glowing rectangle Which is not at all what I said. Which makes your argument shitty and not worth responding to. I code in my free time plenty, play a few sports, and socialize with friends and co-workers. I know plenty of great engineers who do the same.
&gt; Turns out it's unusable on Windows. Not true, a lot of things are (sockets being the most important).
I've used it and I like how it gives you direct access to sockets, makes it very easy to convert normal synchronous code. Seems like the kind of low-level async wrapper that Python should have used to build things like asyncio on. I'm a bit disappointed that development is rather slow though, there haven't been any major changes/features since its first release. **EDIT**: looks like there's a WIP branch I missed that's [quite active](https://github.com/dabeaz/curio/commits/wip).
But even in this case, shouldn't that data be in a database, even if Python's built-in SQLite? Then you let the database worry about indexing the employees.
Since asyncio vanilla python could do that why revert back to 3rd party modules?
If taken to the limit, the imported library to do just what OPie calls "bare bones" is at least 100k lines. Save for the wavelet transform i have written a "bare bones" version of this same thing, in C++, that was about 80k lines. Meh, lines are a rubbish metric.
And yet, you clearly have no idea what you are doing. Sure, you can import and read documentation. That means fuck all in the big picture. For example, how would you deal with images that are not exactly frontal facing and very noisy with varied lighting conditions? 
pymssql is still actively supported. Take a look at http://www.pymssql.org/en/latest/ I've used to to connect to SQL Server and it worked very well.
celery scheduler may solve this as well - http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html 
I always get nervous about things like this because part of me says, "there's always a chance someone was being clever and is calling a seemingly dead function by calculating its name." That's probably my one gripe with Django Rest Framework(which I love... mostly...) is that you really can't understand some of it without first understanding the library's behaviour. A python expert who has never seen Django Rest Framework will look at my serializer and have no clue that my **get_days_since_joined** method is called because I have a member called **days_since_joined**. [Docs](http://www.django-rest-framework.org/api-guide/fields/#serializermethodfield) So he gets nervous. "Well, if there's a seemingly unused function that gets called, I guess I have to assume that all of this code is necessary." Which makes learning, debugging, and cleaning up the code all generally blocked behind learning about the library first. I'm sure DRF's design has a more formal name that I'd know had I taken computer science. It's some sort of configuration-based declarative kerjigger? Ie. you're not really programming a serializer, you're configuring one.
Thank you so much!!!!!!! this will definetely help me!!! and many other people!!!!!
That certainly is an option. It would never be my first option...or second...or fifth...or 100th.. :) 
Yeah, unless I had specific requirements, I'd go with cron.
Sorry to hear that. I worked for a company where things were different between groups. One of the biggest media network providers - and the favorite in the broadcast group were batch files - I kid you not. They were all great engineers - but believed in the keep it simple stupid rule.
Automate The Boring Stuff is a free website with separate chapters as webpages, not a free downloadable ebook. I find the pdf format much more useful.
The talks by Ray Hettinger tend to deal with the special features and design patterns specific to python. The "Idiomatic Python" talk is a great place to start. http://pyvideo.org/speaker/138/raymond-hettinger https://gist.github.com/JeffPaine/6213790 Numpy is its own beast, however. Most of the best python design patterns are not actually compatible with numpy. 
You're completely right. The issue at hand is trying to containerize a script, that can be visualized as a function call. This needs to be called every day at a certain time of the day. I have tried, unsuccessfully, to use the cron from the container, and I don't feel confortable adding the `docker run` command on my host; so I figured to have the scheduling part built in to the script itself. Any tips are welcome.
Forgive my ignorance but I thought that VirtualEnv was used to create static sets of tools and libraries that can persist over time. Does that not maintain all the parts needed to create a deployable environment from inside itself?
I don't really care if what you say is mathematically true or not. Just wanted to tag this as example of why I'm a software engineer and not a computer scientist. I can care less about mathematical purity and theory. I care about pragmatism and getting shit done. Python is pragmatic and I get a hell of a lot of shit done with it.
are you asking about pip the command line tool or PyPI the package indexing and download/hosting service?
The "Parting Thoughts" resonated with me the most. Python has no true private methods (dunder methods are mangled but still there), and in a sense, if you work with others, *all* code is part of the implied API. Large projects and projects that are still being built must have components built in an encapsulated piecewise manner module by module or class by class, etc. What may not be used in a current iteration of a project may still be logical and sensible functionality for the concept the module/class/function it is in maps to in the wider scheme of things. Either you or a colleague thought it was valuable and necessary to complete whatever a module's purpose was (at some point), so you should think long and hard (in my mind) before deleting anything. I'd ask for plenty of feedback and err on the side of caution before you truly go for a scorched earth policy w.r.t. code deletion.
I still don't understand. Why can't you leave the container running and use cron inside the container? Not from the host.
&gt; n...or second...or fifth. :) So you would never use SOAP right 
Discovered hypothesis last year and it was really handy for testing. However there are some caveats. The testing is done on random inputs. Sure, they're chosen intelligently. But they're still random. So the edge of the edge of the edge case might still be missed. I had Travis builds sometimes passing and sometimes failing, and this was the culprit.
Yet another CMS. A better TOML serializer. Fractals as a Service. Curl replacement for testing APIs. MP3 to WAV converter. 
Latex
You can't just say "I'm too good for /r/learnpython" and then ask a question that belongs there and not here.
Jesus, you seem a bit fucked here. What sort of research starts without a plan for how to analyse the data? Hell, how do you even know the data isn't garbage if you are the only one looking at it? We need more information to help, but this sounds bad so far
If you automatically persist the example db, failing cases will be tried again Plus there's nothing to stop you manually adding `example`s!
So this is like Quickcheck for Haskell? This would be amazing - when I used quickcheck I never ever found an error afterwards.
How is that different in term of functionality
I've never used pyramid, and have nothing against it, but what you just described as being not possible in flask is basically flask's value. I have stood up multiple single file servers, and multiple complex servers with great organization. 
Isn't that what stackless Python is doing?
Flask is pretty manageable with its Blueprint architecture 
PyPI-Cloud is also a nice option for a private server: https://github.com/mathcamp/pypicloud. Pretty straightforward and cheap to get it up and running on your own hardware and behind whatever firewall/vpn/etc you need. 
While the responses in this thread are all correct, I feel like they're responding to your literal "Can I assume these packages will be there years from now?" question rather than the spirit of it. So can you assume the packages will be there years from now? No. That said, 99.99% of the time no one's going to delete an existing package from pypi, and pypi is still going to be there. Packages don't just disappear. Sure, you could keep a copy of the packages your use, or run your own pip mirror, but this actually doesn't help you very much. In practice, unless security is a total non-issue for you, you need to periodically update your packages anyway. Your web framework will drop support for the version you're using, and you'll have to upgrade it, and then you'll need to upgrade most the packages you use that depend on the web framework. So even if the old packages are all still there, you're going to need to replace them, and that means that you need to use packages that are well maintained. If your package disappears from pypi, it's a safe bet that it's not a well maintained package, and that means you don't want to be using it anyway. So, while you can't *assume* the packages will always be there, for almost all practical purposes there's not much point in worrying about it. EDIT: It's worth pointing out in the above that I'm assuming you're not running a very large scale and absolutely critical system. If downtime is totally unacceptable, then you should host your own packages. If not though, the effort to host your own packages will almost certainly cost you more in inconvenience than the small chance of some package you're using not being available.
I like Django magic. But the author skipped over my favorite parts: CBVs, forms, querysets.
would be better if there is a module like gTTS OR OTHER MODULE should work with python 3 thanks :)
That's what I tried to do, but it didn't work. It never started the script.
I realize this is in F#, not Python, but [this blog post](http://www.navision-blog.de/blog/2016/03/21/property-based-testing-in-the-real-world/) about using FsCheck ( an f# version of QuickCheck) is a good example of finding properties in non-trivial software. Typically what I do is break down an operation into a 'description' part and an 'interpreter' part, and then I can more easily make properties about operations on the 'description' part without all the side effects (network/file system io) that the interpreter part introduces.
Also pro tip for getting a unique set of items from a list: set() # or in your example unique_lst = set(string_to_list)
-
You mean, e.g. showing always the INFO logging level and using a verbose flag to allow the user to get e.g. the DEBUG information? Do you know, if there are any good practice guidelines for stuff like that?
IMO logging should be used for diagnostics only. The fact that it defaults to `stderr` instead of `stdout` justifies it. Mandatory output like "Please enter a number:" should not be through `logging`.
Perhaps this will help: https://docs.python.org/3.5/howto/logging.html#when-to-use-logging
More detail is needed. Why not just use the print function? Logging is good if you want to save the info for later easily. It does allow for debug level logging though so you can dump extra program stuff to the file if needed. 
That is exactly the thing. I am using print currently, but everyone says that you should use logging for any kind of debugging and looking at the module, I thought it could nicely be used to also print out standard output to the user. So, would just using print be the preferred method? *EDIT*: Language
You prefer while True?
Or use [`argparse`](https://pypi.python.org/pypi/argparse) to make it a little easier, or one of its wrappers to make it trivial, like [`argh`](https://pypi.python.org/pypi/argh). Pass argh a function, it'll read the args and kwargs and make them optional if it can and make help pages out of docstrings. It's crazy good.
Not sure how I feel about non-deterministic tests.
The continuum I'm talking about is not one of "superiority" but one of complexity. Logging has more upfront complexity than `print`, you have to configure loggers and possibly formatters &amp;al, and wonder about logging levels, etc… but that's (hopefully) traded for a lower "spot" complexity (all the decisions about quantity of information, formatting and destination are handled by logging, you don't have to re-do it every time you print something, and you can alter those variables at a single point by changing the logging configuration, possibly even do it on the fly). The step beyond that is to create and set up a formatting and printing system more specific to the application.
Why wouldn't I?
as well as the chunk size when reading the response and writing to a file. 8 kb doesn't seem like much, should probably be more?
Thank you very much! I think, I will try to go with using logging for my project.
Because it might implement something better, have some niche feature someone was looking for, be a better implementation overall, be easier to integrate in some others project, be more extensible, get some extra eyeballs that can help improve coding style, and on and on. We already have a wheel, why do people keep trying to make a better one? Oh, progress, that's right. Sheesh.
Man kudos, Replying to a comment like the one he made is just tedious without trying to sound like a troll. It seems like he doesn't seem to appreciate other people work or he lives in the world where "if it's not new, don't show me" which sucks because the world is a free market
&gt; Because it might implement something better, have some niche feature someone was looking for, be a better implementation overall, be easier to integrate in some others project, be more extensible, get some extra eyeballs that can help improve coding style, and on and on. &gt; We already have a wheel, why do people keep trying to make a better one? You're whole comment seemed to miss half my comment: "if you're not going beyond the already existing tools"
&gt;Model is the part of the application that handles the logic, the Views are the parts of the application that handle the display of the data, and the Controller is the part that handles the user interaction. I think the controller is supposed to handle logic and the view handles user interaction.
I love seeing people's new projects! It's inspiring to me to look at the novel ways different people come up with to solve the same problems. Progress is iterative, history demonstrates that conclusively. After all, we didn't just *stop* at the Gutenberg printing press.
*Beyond* in terms of what? Maybe the coding style is better, maybe it's more accessible to others who want to extend/depend on it, maybe it has fewer requirements. Maybe you just hate it, but it's the perfect fit for someone else. Who knows? Shitting on someone's post because it isn't original enough *for you* is a pretty poor approach.
In my original comment I was replying to OP where he said he didn't know youtube-dl exists. If you just google "youtube downloader" it's your first result. It's one thing to redo something consciously (especially because that's an incentive to put your own spin on it, extend something, fix a flaw or make new functionality) and it's different to redo something out of ignorance.
&gt;Beyond in terms of what? Maybe the coding style is better, maybe it's more accessible to others who want to extend/depend on it, maybe it has fewer requirements. If that were the case (which it isn't) then the community-centered thing to do here would be to submit them to youtube-dl. &gt;because it isn't original enough for you Originality is objective: It's not original at all, youtube-dl already exists, is widely known and well-supported.
That's not the issue. The issue is that a csv file may have field delimiters within the text of a field. This is typically handled either by quoting or by escape characters. The utilities need to be able to support more sophisticated csv dialects before they can be a dependable replacement for python data analysis tasks.
I think your definition of originality is extremely narrow and rigid. If we all thought that way we would still be using the Gutenberg press.
I'm arguing *against* reinventing the Gutenberg press here...
&gt; After all, we didn't just stop at the Gutenberg printing press. We didn't reinvent the Gutenberg press either. Indeed, our progress is from making *new* things, which is what I'm proposing to OP here.
Been using django sine 0.95 and built literally thousands of sites and apps of all kind with it. Yes it takes care of a lot of things but I haven't seen lots of magic. If any part of the framework gets in your way, just don't use it.. or subclass it and modify it's behavior. The only thing I wouldn't recommend django for is to build real time applications (websockets). Because in this case you really go against the framework 's purpose and design.
&gt;The "Parting Thoughts" resonated with me the most. Python has no true private methods Yes, it has. Anything that starts with an underscore is truly private. If outside code uses it anyway, that code is just as broken as code that doesn't work.
No
Man not everyone is as smart as you but some people want to challenge themselves and try something that they love and showcase it. It's not about making something new or adding tools but the challenge.. Anyway, this conversation is going nowhere so I think am done
When about to create a program, one should wonder whether (s)he does it only to use the final product or also because the process of creating it is valuable (such as being entertaining and formative). The first case is the only case in which you should do research and don't reinvent the wheel. Not even thinking of searching is a strong hint that OP preferred the second option.
&gt; You're forgetting all of the time and practice that it took to allow you the executive capacity to be creative. You can learn while doing something novel. &gt;Maybe empathetic wisdom will come with more age. I think I'm being pretty empathetic. I'm trying to help OP with some advice that's much more useful than pity upvotes, and I'm not being negative about it in any way.
So what's the difference between someone implementing a "useless" program and an artist painting a "useless" piece? Shouldn't they both be spending their time doing something profitable so that they can give their money to the poor or something?
I'm trying to express the opinion here that the process of creating a program is more valuable when it produces value.
I concur.
Specifically, for my use case: it's too large and complex, and I want to write using Python3 not Twisted. I always feel too restricted by full-stack frameworks, as I always end up wanting to do things that they weren't designed for so I have to fight against them. Oh, and dependencies - I try to avoid too many external dependencies outside of the standard library, though I don't know what particular dependencies Twisted has, if any. As far as frameworks go, Flask is about as far as I'll go, though I haven't looked into whether or not there's a usable Py3 version yet.
I feel great about them if they're all I have time/resources to implement. 
Yeah, but that's relatively new. I will certainly give it a shot at some point :)
That is a great collection. Thanks for sharing. 
You may want something like default = 0 Line = float((ParameterStr or [default])[0]) Basically, you don't seem to have handled the case where no number is supplied in the input?
Plus isn't youtube_dl closed source now? I might be wrong but good work op. 
Is it? https://github.com/rg3/youtube-dl
Portability, flexibility and stability. Note that this script is part of a bigger application environment, so in the need of migration I can just migrate the docker_compose for the whole app and it will keep running as it did before. 
&gt; from __future__ import print_function So, I'm not the only one who starts new projects with Python 2.x. ;-) 
Maybe *you* can't trust `4` to designate 4, but most developers don't change the meaning of constants in their sleep and don't have this problem. Do you really need a nanny language to prevent you from doing so? "We're all adults here."
Just a question, I've seen both used in the standard library. Although in Python 2 it's actually a touch more work.
Combining what a couple said, you could pull down the fixed width text, store that in a pandas dataframe, then insert into mysql. No interim files required. I know the pandas part works, not so sure about the mysql part... import mysql.connector import pandas as pd from sqlalchemy import create_engine url = 'https://marketnews.usda.gov/mnp/ls-report?&amp;endDateGrain=12%2F31%2F2010&amp;commDetail=All&amp;repMonth=1&amp;endDateWeekly=&amp;repType=Daily&amp;rtype=&amp;fsize=&amp;_use=1&amp;use=&amp;_fsize=1&amp;byproducts=&amp;run=Run&amp;pricutvalue=&amp;repDateGrain=01%2F01%2F2010&amp;runReport=true&amp;grade=&amp;regionsDesc=All+NE&amp;subprimals=&amp;mscore=&amp;endYear=2016&amp;repDateWeekly=&amp;_wrange=1&amp;endDateWeeklyGrain=&amp;repYear=2016&amp;loc=All+NE&amp;_loc=1&amp;wrange=&amp;_grade=1&amp;repDateWeeklyGrain=&amp;_byproducts=1&amp;organic=NO&amp;category=Grain&amp;_mscore=1&amp;subComm=Corn&amp;commodity=Coarse&amp;_commDetail=1&amp;_subprimals=1&amp;cut=&amp;endMonth=1&amp;repDate=01%2F01%2F2010&amp;endDate=12%2F31%2F2010&amp;format=text' cols = ['Report Date', 'Location', 'Class', 'Variety', 'Grade Description', 'Units', 'Transmode', 'Low', 'High', 'Pricing Point', 'Delivery Period'] widths = [ (0, 15), # Report Date (15, 55), # Location (55, 63), # Class (63, 85), # Variety - BLANK for example url (85, 104), # Grade Description (104, 119), # Units (119, 134), # Transmode (134, 149), # Low (149, 164), # High (164, 183), # Pricing Point (183, 200), # Delivery Period ] df = pd.read_fwf(url, colspecs=widths, skiprows=[0,1,2,3], skip_blank_lines=True, names=cols, index_col=False) # Stolen from here - http://stackoverflow.com/questions/30631325/writing-to-mysql-database-with-pandas-using-sqlalchemy-to-sql engine = create_engine('mysql+mysqlconnector://[user]:[pass]@[host]:[port]/[schema]', echo=False) df.to_sql(name='ag_data', con=engine, if_exists = 'append', index=False)
I like the script and learned smth from it, but there is one thing I would change: Add the extension to the filename so you can open it after the download. download(url, title + "." + fmt_data["extension"])
I guess it depends what kind of info you are logging. If the logger is doing the trick I'd keep using it, if the command is failing fire the user I'd give them an option to add a verbose flag to figure it where things aren't working. I don't have any best practices. 
If you want this to work in Python 3, need to except ImportError for urllib. It changed, so you'll need different imports in the except block. Cool stuff there. Thanks. 
Seems like your friend is using a different version of Excel, so the path to the executable is different.
Yes, you are wrong. But don't worry, I won't downvote you. You can find the source on github Edit. Word
Thank you for the detailed reply! I've been looking at this for the last couple days and - as you show - would like to insert this into the MySQL. I'll definitely be using the format shown here - and I've been working on setting it up to form the URL for different cases &amp; dates - so this helps a lot. Do you have any experience loading data into MySQL tables? Is there anything I need to look out for in terms of creating the MySQL table to match the data loaded from Python - do something in the Python code to insure accurate data loading? My goal here, once I start loading the data, would be to first run a MySQL query from the target table to get the max (latest) date, then use that in my Python scrip to determine next date(s) to load. Thanks for your help! 
Yeah, logging is intended for debugging purposes. Just use print.
I don't even live in the US and I've had consistent work as an independent contractor for over 5 years now. Granted, if you don't have experience working in a dev team, you'll have to get that by learning whatever technology is predominant in your region. During your first years as a software dev, mentoring from someone in your office is crucial, but the skills will be easily extrapolated. Once the training wheels are off, you'll be able to get an independent job in any mainstream technology stack of your choosing :-)
and /r/Python is for people who actually read posts before commenting...
&gt; Working within the MVC pattern is a quintessential part to building a functioning web application I could not disagree more strongly with this statement. Honestly this entire article is quite poorly written and argued, and mostly flat out wrong. 
No, you are arguing against any possible improvements.
Well, sure, i suppose if you're one of those people who tie your entire sense of self worth to currency, that would make sense. Luckily some of us don't, so we still get to pursue projects out of interest, as opposed to purely monetary gain. And luckily for you, and your ability to use the internet, *many* people in our history don't share your ridiculously narrow-minded view.
Same for me, and that's why I shared it. :D
Hahaha yeah I fucked up this time. :D I'm usually pretty solid on this.
+1 argparse is great. 
Classic blogspam. This is literally a copy and paste of their quickstart example. Adds nothing.
This is literally how I taught myself four programming languages in just a couple months. Find program. Rewrite it in new language. ??? PROFIT!!! (Literally, in my case)
The problem is that the *value* you are describing is your own, purely subjective interpretation.
I second this. Give us options. 
You do what you do bud. Cool idea, and code looks good. Not to mention the more choices a community has, the better the community can be.
&gt; The problem is that the value you are describing is your own, purely subjective interpretation. Actually it's based on the new functionality (or lack thereof) that it gives to others.
It seems like using unique constraint built into sqlalchemy would be a better option. http://docs.sqlalchemy.org/en/latest/core/constraints.html#unique-constraint
I got lost long before there was any glimpse of why they might be useful. I would recommend leading with an example use case, to provide context through the plumbing.
Does any other language have something like Python's amazing "with"?
Python's not a curve; it's still a straight line heading upwards.
Since others are recommending static blog engines, I'll recommend [Nikola](http://www.getnikola.com), which is written in Python and uses ReSTructured text by default.
Hail to the King, baby!
Pfft; I just say "I run Linux! I'm invincible!" and then sudo install everything. 
I agree that the example is not my original work, that's why I wanted to make it clear in the article. It's not something I do regularly. The purpose of my blog is to surface ideas that people may never have seen that (hopefully) cause them explore or discuss further. I could not come up with a better example than the one they provided to demonstrate Hypothesis.
No, you're not just suggesting. You called his work a waste of time which is not only wrong (like others already tried to explain) but also pretty rude. Your attitude is like "I won't run that marathon, because I won't win" which, in my experience, is usually an attitude of people who don't get ANYTHING done, because they won't even try. I'm pretty sure this project gave OP a lot of experience, something to show of in Job Interviews and all of us an alternative in case youtube-dl getting unmaintained or similar.
since no one else said it. for/else statements are generally frowned upon and not considered pythonic to my knowledge.
Yeah and Unix was a thing when Linux was created. Also Windows was a thing when Linux was created. Also BSD was a thing when Linux was created. And C was a thing when Python was created. And C++ was a thing when Python was created.
Or, if you hate string concatenation as much as I do, download(url, "%s.%s" % (title, fmt_data['extension'])) or another one that is faster than string concatenation, download(url, ''.join([title, '.', fmt_data['extension]])) I recall reading somewhere that imploding an array of strings is faster than string concatenation.
Someone should really tell the [official Python documentation](https://docs.python.org/2/tutorial/controlflow.html) to knock it off, then.
You rather spend the time correcting people on the Internet. Wise decision my young friend.
I still can't think of a use case for metaclasses. What do these use cases look like? Automatically creating SQL tables from class definitions?? 
Because you didn't /r/learnpython
SQLAlchemy uses them. WTForms uses them. This thing uses them https://pypi.python.org/pypi/attrs
Lots of what, but no why. Basically reads like a manual. Well written, but I'd suggest a practical use of metaclasses over reading this, to actually _understand_ them. [Example given](https://www.youtube.com/watch?v=sPiWg5jSoZI&amp;ab_channel=NextDayVideo).
If it was closed source/they made a profit from it, it would be more worth the time of the different sites to try and take down the project. Since it's free and open source (everyone can distribute the code) it's not really worth their time to try and take down the project. (note: I'm not saying it'd be worth their time in either case really but some sites can be really protective) 
Why would or should it?
A decent example is the [namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple). ... Really, underneath the hood namedtuple not a metaclass for performance reasons, it's a factory function that assembles a string and execs it to produce a class, but the end result is conceptually very similar and you still can [implement it using metaclasses](https://gist.github.com/aliles/1160525).
[removed]
LOL cool LOL
Does less. YouTube-dl supports way more than just YouTube 
I'll give all this a try - thanks for the help!
My most recent application of metaclasses is generating classes from config file parameters. I have a bunch of potential usable ways of doing something, and in the end I need some classes that incorporate everything. So when I create it, it selects a method to use, and generates all variables that should be accessible to that class.
Connect takes a tuple, so having the two opening parenthesis is correct.
Have you checked out Spark ML? http://spark.apache.org/docs/latest/api/python/
Thank you so much!
Theano is a numerical computation library for Python. In Theano, computations are expressed using a NumPy-like syntax and compiled to run efficiently on either CPU or GPU architectures. [from wiki]
Damn right. (fbp) D:\Pythong\fbp\fbp&gt;python Python 3.5.1 (v3.5.1:37a07cee5969, Dec 6 2015, 01:54:25) [MSC v.1900 64 bit (AMD64)] on win32 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import fbp &gt;&gt;&gt; import interface &gt;&gt;&gt; interface.simple_textboxes &lt;class 'interface.simple_textboxes'&gt; &gt;&gt;&gt; interface.simple_textboxes.__bases__ (&lt;class 'wx._core.Frame'&gt;,) &gt;&gt;&gt; interface.__file__ 'interface.fbp' &gt;&gt;&gt; I shouldn't be allowed near an interpreter. :D
It does bite you but not that bad and when it happens it's pretty easy to get out of that situation mostly. 
The name-&gt;function name with some pattern is truly a horrible idea. It's also present in the built in django form library. 
I don't think any of that is true, but to be fair a lot of the code in the github repo isn't pure python.
It's limited in features, but Vowpal Wabbit is not only multi-core, but also multi-machine. The core is in C++, but it has a native Python API (as well as commandline) http://hunch.net/~vw/ 
Implying youtube would have any legal grounds to take it down. Crawling is not illegal and youtube which is owned by google who's entire business is based on crawling.
If there was a matching closing one, but there isn't. 
Fair point, except Linux wasn't created because of limitations. When Linus released the software, he said it was shitty and he only did it for a hobby (i.e., for fun). I suppose you could say the purpose of Linux was to have an OS without minix code, but I'm not sure if that's entirely true.
[this](http://haxe.org/) can do python, c++, lua, Java, and like 5 other languages. 
I've se en Tensorflow and Theano in action they are pretty awesome
Frameworks atop websockets are well suited for this indeed. You might want to have a look at [Crossbar](http://crossbar.io/)
[removed]
Does the file.txt work for you? Would be nice to have an updating UI, showing the download speed, remote -&gt; local file path, and progress bar to show how much of the download is left.
Side question: do any of these support machine clusters for large models? (As in, spread one network across four physical computers?) 
I'm not certain that the basic SVM algorithm can be parallelized. You probably need some split-and-ensemble approximation version. Why have you decided to use SVMs, and why are you certain you need a multicore implementation?
wtf
In my framework, I use a metaclass to replace a class's __new__ and __steattr__ if it meets certain conditions.
I just submitted a pull-request for better handling to make sure the video was downloaded and where it was downloaded to, as well as being able to pass a chunk size
The prediction stage is as simple as mapping the kernel calculations and reducing for the dot product.
you should format strings with `.format()`.
[removed]
As someone still somewhat new to Python (and really coding in general), can you explain what argparse does? Is it so that when you run the program from a command line, it automatically adds on some text to the command?
First Python abandons Mercurial (written in Python), now everything's moving to Github (which doesn't support Mercurial)... we're shooting ourselves in the foot here when we undermine other Python-using or supporting projects.
Have an up-vote! Impressive and nicely done! 
&gt;this is not spam I beg to differ..
Is this a "Pythonic" thing or does it actually run faster? I'm not worried about some of the nuances of Python style that other people care about. Personally I think ''.join([a,b,c]) is ugly (but if it were [a,b,c].join('') like in other langauges it'd be beautiful), and I think using .format() is more just a "keep things explicit" stylistic/Pythonic argument unless it runs faster. In which case, that's one of those things where I think they're equally readable to me. Anyway, just curious.
Ultima IV was a great game.
I dont think an upvote is enough to appreciate this.. This is Awesome!!
You took a lot of time and efforts to build something awesome. This is really inspiring. I am going to share the link to my local Python user group and hope many beginners will find motivation from your work. Thank you for sharing! 
Well that's good to know! Have you tried getting NSIS from there? Please be very careful if you try it though. I'd do it on a virtualbox or machine you can easily wipe out, just to be safe. 
Yep. I didn't talk much about the game itself on this thread, since I was just trying to share the programming experience. But as far as the game goes, it is supposed to be a combo of Ultima and Final Fantasy. 
Cool, tell me how it goes for you guys.
Share the [purchase](http://www.epikosrpg.com/purchase/) page because it looks interesting (at least for old rpg fans like me) ;)
Thanks, if you want you can support me by purchasing the game, though if you are poor PM me and I'll give you it for free, because your post was very kind. 
This is *really* impressive! I would probably have taken a similar route, though writing all of the tools in pure Python is an interesting idea as well! I think I will buy it and give it whirl. It sounds like you actually spent quite a bit of time on it, as far as the story goes. Was this 100% a one-man job? 
Really cool! It feels like you made the same transition I made but in the opposite direct, although not entirely ofcourse. I started as a 3D game artist and also did game dev and eventually became a technical 3D artist developing tools before I moved on to software development.
Good habit. I learned it the hard way!
Cool, I work with a lot of Tech Art in my day job (graphics programmer). I'm really interested in learning art, so it looks like we did have the opposite sort of transition. Art is hard! But drawing is an inexpensive hobby, at least. Here is one of my latest "deviations" http://chezni.deviantart.com/art/Female-Faces-Brown-Paper-603727902
Yes, this was a one-man job. I did the art, music sound FX, programming, design, writing. But key to all of this was Python, because the usual bottleneck is code. And getting rid of that as a bottleneck opens many possibilities.
I get NSIS from Linux distro repositories - it can build Windows installers from Linux, and I trust Debian/Fedora packagers to build a clean copy. I also wrote a tool based on NSIS called [Pynsist](http://pynsist.readthedocs.io/en/latest/), which is designed to avoid the need for a freeze tool (like Pyinstaller) by building a Python application directly into an installer.
Use use os.path for all path manipulation. os.path.join will work the same on all platforms. I learned a long time ago to use the os module whenever possible so everything is cross platform by default.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, we are sure you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
[removed]
Wrong thread?
Great read. Well done. 
Vim x 1000
Did you consider using Kivy or would the game be far to large to run on mobile?
It's on sale, the actual price is $1,200. Think what a deal your getting :)
That *would* be impressive, since the NES didn't exist in 1983! No need to knock the graphics. This style has a special place in some people's hearts. 
For people who think using the os.environ dictionary is too hard.
You're practically *paying* me to buy this game!
And here I am being proud of figuring out nested lists. In all seriousness, though, really very awesome!
I'd encourage you to check out [nuitka](http://nuitka.net/pages/overview.html) - it takes standard python code, and compiles it to a native executable via C++ Yes, this is a thing that works. There's basically no downside.
&gt;&gt;&gt; Keyword = input("Enter a keyword:") Enter a keyword:"Table" &gt;&gt;&gt; print(Keyword) Table &gt;&gt;&gt; 
Hey mikeselik, We need a multicore implementation because we are currently using a badass AWS 32-core machine which uses only 1 core, and we also have a huge dataset to train, about 4 billion products with many features each and we plan on increasing the dataset as time goes by and re-training the model We decided to use SVMs after many tests with our dataset, it was the best performing algorithm
Wow, here I am posting so people can learn what I did, and I'm learning more than I'm giving out here!
Thanks!
And to add onto this: you can use the "marshmallow" module for JSON encoding stuff as opposed to pickle serialization. Much safer and doesn't require too much to get going. At least, way less than creating a custom JSON encoder which I spent a few days on before finding out about marshmallow T.T
That's either (a) the magic of openness, or (b) we all think it's so cool we want to contribute!
Dude. This is amazing. Would you believe I'm (re-)playing Ultima 4 right now? I'm looking forward to playing your game (and analyzing your codebase.)
Cool, that is possibly my all-time favorite game. I like Ultima IV-V, and Final Fantasy IV-VI the best. I should say, I'm in no way affiliated with these great games, I'm just trying to pick up where they left off, in my own way. Since I don't have an art staff at my disposal, I'm trying to do this stuff on my own. I also really like the ascetics of Ultima, I feel like it activates the fill-in-the-blanks part of your brain, which is tied to imagination.
Thanks. I'll give this a go. Sometimes these biotech things are so difficult to follow.
Reminds me of Adventure Construction Kit. A++++++ I wish there were MMOs using this style (focusing on story and not graphics.)
I haven’t had much experience with any other than matplotlib but one thing about Python is that, unlike Matlab, it is not just one product. It is made up of tons of different modules and tools. matplotlib is just one of them. It is just like any other software. Why is there Chrome when you can use Firefox? Why is there Google Docs when there is Word? If you do a bit of searching, you'll find a few different articles that discuss the different features. Personally, I am pretty happy with matplotlib and its customizability, even if it takes some work to be pretty.
I'm going to show this to my 6th grade Python programming class. I am teaching them a little Pygame right now, and they are asking me if it is useful for "real" games. This will show them what can be done by one person working part-time.
I think there may be lots of errors, on their website it says: &gt;Copy example_config_file.txt and process_screen.py from the /path/to/barseq_counter folder to /path/to/my/expt Under step 3 Just removed the config_file argument and get the same error.
What (C)Python really is? https://www.ibm.com/developerworks/community/blogs/jfp/entry/What_Python_Really_Is?lang=en This view may change in the future if one of these projects becomes successful: Pyjion, PyPy, or Pyston..
They were trash for years before things came to a head there though.
How exactly did your multiplatform testing setup work? I've been trying to make Linux support for my (Python &amp; Cython + Pygame) game actually work properly but I've never been able to get Vagrant to work. On the subject of packaging, I've had better luck with cx_Freeze than PyInstaller, personally.
Matplotlib is the original, and in my opinion, the best. Super powerful, very flexible. Because it's relatively low level though a lot of people find it to be hard to use. Especially if they're not familiar with plotting in Matlab. Seaborn is based on Matplotlib. The goal was to make it easier to make good looking plots. Matplotlib now includes style module that does something equivalent. Bokeh is intended to create interactive graphics for web browsers. Plot.ly isn't really a Python library. Plot.ly is on online plotting tool that includes a Python API. As well as these, there's also ggplot which is a Python version of ggplot2 from R. MPLD3 is similar to Bokeh in that it makes interactive web based graphics.
Sorry
I pasted the first script in the edit to my OP. here's the line 22 the error is referring to...maybe my paths aren't set right? barseq_path = os.getenv('BARSEQ_PATH') sys.path.append(os.path.join(barseq_path, 'scripts')) sys.path.append(os.path.join(barseq_path, 'lib'))
It's looking for an OS environment variable named 'Barseq_path'. Check if it exists and is set to your installation path.
Cool!
Pickling is only a concern if you plan to load a pickle created by someone you don't trust. Is that a likely scenario in this case? Alternatives such as marshmallow require specification of schemas. This means you have to write and maintain redundant information—not an insignificant cost. I totally get that the time cost is worth the security if you need to pass serialized objects in between potentially untrusted sources. But if you're just making a game to share with your friends, I think pickle is the best option.
Or perhaps that people gave up on inheritance too early. Python's own multiple inheritance was misunderstood (and still is) by most until (and even after) Raymond Hettinger's awesome [explanation(s)](https://rhettinger.wordpress.com/2011/05/26/super-considered-super/). Honestly speaking, the purpose is sustainable code reuse and inheritance is a powerful tool too valuable to just throw away. It should at least be considered without writing it off. Software Developers are probably better off without adopting a dogmatic approach. The same point applies to Python and "mathematical correctness". I liked your writeup personally, always great to hear an unpopular opinion, but I don't think you are being entirely fair to the language when you concoct examples that run completely contrary to what the language and its community expects. If Python can be useful by discarding mathematical purity, so be it. Heck, it's more or less the lingua franca of the academic world when it comes to writing useful software. Insisting on mathematical correctness is counterproductive. Pure Mathematicians will still sneer at any programming language ever anyway.
&gt; the NES didn't exist in 1983 Check your facts. I said I would be more impressed, which is simply true.
So much nostalgia! I did something very similar once upon a time. This needs to get ported to some old hardware. :D
Not a concern here since this is an offline, single player game with no internet component at all. If I do a bigger release (Steam) it would be a thing to fix however, so I'm really glad this was brought up.
Try it! It's a good career these days. Coding is probably both easiest to break into and best paying. The indie thing is just a side project for me, my day job is doing more mainstream games.
A dict mapping strings to functions is probably better than a long if-else-chain. 
Me too:)
Testing phase is over my friend sorry, it's been good on Linux for a few months and I forgot to update that blog post. Luckily, I had some really good help with Linux.
I wish! I think it's worth it for me to pursue Windows/Linux, but I have fooled around with NES programming and it's really cool. 
That's what they make us use for the intro computer classes at school. It's old and outdated, but sort of helpful. I think the more advanced classes use Java
I'm pretty sure it's both. It's definitely faster though I'm not sure if anyone would notice and it just doesn't look as mind-blowingly ugly as the old syntax.
The defaults and most importantly the tolerance are different.
The overloading of the / operator seems a little bit unpythonic, because it is not immediately obvious what is going to happen. But, I like it :D Thanks for sharing! I remember the PEP discussion about it, but I wasn't aware, that it is now implemented!
Thank you very much, I found the benchmark very helpful! Soon my company will run tasks that can be used in lambda or EC2 and this benchmark is enlighting.
It's exactly what it says, the function expects unicode and gets str. Everybody who learns Python will face this exact line, don't worry. In fact, they should change it to something like "Congratulations, now you are one of us!" Python 2 and Python 3 are not the same when talking about strings and unicode. I assume you need Python 2.7 so you will not change to Python 3.5: [More About Unicode in Python 2 and 3](http://lucumr.pocoo.org/2014/1/5/unicode-in-2-and-3/) &gt; It's becoming increasingly harder to have reasonable discussions about the differences between Python 2 and 3 because one language is dead and the other is actively developed. So when someone starts a discussion about the Unicode support between those two languages it's not an even playing field. So I won't discuss the actual Unicode support of those two languages but the core model of how to deal with text and bytes in both. &gt; I will use this post to show that from the pure design of the language and standard library why Python 2 the better language for dealing with text and bytes. &gt; Since I have to maintain lots of code that deals exactly with the path between Unicode and bytes this regression from 2 to 3 has caused me lots of grief. Especially when I see slides by core Python maintainers about how I should trust them that 3.3 is better than 2.7 makes me more than angry. In Python 2, strings are not the same as unicode. Try to type this: type("text") &gt;&gt; &lt;type 'str'&gt; type(u"text") &gt;&gt; &lt;type 'unicode'&gt; So, the conversions: * From unicode to str, use **encode**: u"text".encode('utf-8') == "text" * From str to unicode, use **decode**: "text".decode("utf-8") == u"text"
Welcome. I'm in the same situation, so I did the test. For now, keep in docker's EC2
http://isup.me is also an alias for that. Also, this isn't appropriate for /r/python.
Hi there, this post being removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
welcome
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, we are sure you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I love the overloaded operator because it's preventing braces. The concept of the pathlib is so easy to apply, that os.path isn't needed anymore and it's super easy to memorize. Btw. it's a good example for a useful case of OOP. It's just one overloaded operator and the whole functionality is clear documented on one page if necessary. 
Asking for other numerically-intensive projects i have .. Does this support compiling codes that partly rely on numpy and scipy? Seems like it would be handy if it does.
It's amazing how much processing you can get done with a dedicated server from someone like OVH, try one out. Even if you need to burst to the cloud sometimes, a base set of dedis is often worth it.
It's "extremely compatible", and does work correctly with Numpy and Scipy. It won't be a huge speedup though, as the bottleneck is generally in the compiled extensions. Still, if you're after a modest free speedup, Nuitka is worth trying. If you're chasing easy performance, I suggest looking for places your code can take advantage of [concurrent.futures](https://docs.python.org/3/library/concurrent.futures.html) (stdlib), which is often trivial - I often end up getting a 4-20x speedup (CPU/IO bound respectively) just by having my dispatch loop doing chunks concurrently. If you're really looking at numerical hot loops though, there's no substitute for [Cython](http://cython.org/). Basically, you annotate your code and it compiles to *optimised raw C* . It's more work than Nuitka, but instead of a 2-3x speedup you get 5-1000 times faster. Pain in the neck on Windows though, and doesn't play so nicely with some modules (Numpy et al are fine, but Hypothesis is not).
If I had to hazard a guess, it's because Flask is framework leaning on an ensemble of libraries (specifically including Jinja) meant for HTML, JSON etc. based web programming, with ergonomic API's designed around that. In my limited experience, CherryPy has a strong and flexible HTTP framework (and its bus architecture is impressive!), but is much closer to being no frills than Flask is. If people want to build a full stack web framework from parts and are planning on doing much more than HTTP, they'd rather start with a framework which is already part of an ecosystem. The preponderance of Flask plugins is also quite compelling for some. 
plotly have offline version and it is pretty simple to use. Also it produce one html file with interactive plot, (which can be saved to png though).
Well, trash might be a little strong, but yeah, Sourceforge's popularity and utility has certainly waned. This is about whether it's safe to even browse there as the OP suggested. I never felt Sourceforge was a danger in that sense even back in the darkest of the DICE days. It's always good to have alternatives to github. One day things might turn sour there and a great many FLOSS projects will be screwed if there isn't a good place to move to. Those who don't learn from history ...
Basically, they all have different goals or approaches to plotting. - `matplotlib` is the classic, high-powered library. You can do anything static with it (not so good for interactive or online plots). The API is very powerful, but also complicated due to it's power. The defaults are (IMO) ugly. - `seaborn` wraps `matplotlib` for a well-defined set of common plots. The defaults are nice, the high-level interface is nice, and when it's not powerful enough you just drop down to `matplotlib`. I use `seaborn` for all my research, and I'd encourage anyone using `matplotlib` to try it. `seaborn` also works very well with `pandas`, which is a dream in `ipython`! - Plotly is a SaaS with a Python API. They want you money. - Bokeh is for interactive, online visualisation of very large datasets. If you need some of these features, it's probably useful, but I've never needed it. - ggplot is for R enthusiasts working with Python. Nothing wrong with that; matplotlib has a very MatLab-ish interface as that's what the authors liked. IMO - for static plots use Seaborn+Matplotlib; for dynamic plots Bokeh looks best.
Im curious what was so compelling about the idea you HAD to do everything yourself...
You are a good person. Best of luck for your future projects.
It's a terminology I've seen quite a lot in MMORPGs.
GitHub's actually pretty sour already. I migrated to GitLab long ago.
Any such library would probably be a huge pain to configure compared to one made specifically for eg django. 
Yeah, so true. Every org has to strike a good balance between stability and keeping current. If we don't change, we'll be running COBOL and VBA stuff forever. If we have a free for all, we'll be running dozens of languages and reinventing the wheel a few times over, with no real supportability. Ideally teams should be moving forward at a good pace, looking for &amp; adopting new tech when they can (when benefits outweigh effort &amp; risk). But it has to be intentional, not "use random language of the week" type of thing. OP's case sound more like "if it's not what we already use, we're not listening". But even in my own org, if someone randomly decided to make a script in some random language without consulting others, that'd be a little off putting.
Looks impressive man! Any chance of open sourcing any of the tools you created?
Question, If you ever wanted to implement updates to your game. Have you ever thought about how you would go about doing that? also have you considered releasing your font for other people to use?
*Stochastic Gradient Descent* (SGD) can train a SVM with multi-core support. SGD is not as foolproof as an SVM because SGD depends a lot on the chosen hyperparameters. http://scikit-learn.org/stable/modules/sgd.html
Hypothesis mitigates this by storing a failure database with any failing inputs it finds so that it can rerun them
We can't really comment unless you show us both of your codes. There are ultimately two reasons to consider: 1. You're iterating through your ODE system inefficiently in your Python code, adding that much overhead to each RHS evaluation in the marching algorithm or Jacobian approximation. 2. You're not using comparable numerical algorithms. odeint in SciPy is a wrapper for LSODA, which switches between two different methods depending on the stiffness of your system. You haven't told us which MATLAB integrator you're using. 
Someone didn't watch the video.
&gt;If you are about to ask a question, please consider r/learnpython. Straight from the sidebar.
I've watched this in full a few months back.
Pretty much like metaclasses in any other language! ...except Smalltalk, sort of. This is another case (I've been asked before) where Python acts more-or-less like Lisp with new syntax. Smalltalk's metaclass hierarchy is a little funky. I'm glad that pretty much every language that added a MOP decided to basically steal the Lisp way, rather than the Smalltalk way. Smalltalk is a great language in many ways, but this is one thing I don't love about it.
This analysis looks great. Any thoughts about a few other instance configurations? Like, how would the use of pypy change this performance comparison? I'm assuming that pypy isn't supported on lambda...
Aww man, wish they'd just use '+'. '/' only makes sense in a POSIX environment. Windows uses '\', ie 'c:\Program Files\' The '+' operator makes much more sense, since you are adding (sub-)paths together. root = Path('../myproject') config_dir = root + Path('config') config_file = config_dir + Path('project.conf')
Thanks kenfar You are right, like Pillow, it's plain Python 2.7 as far as I know. You can test yourself for free without registration in [here](https://qwiklabs.com/focuses/2369)
this is the **only** sane approach. Everything else is Just Actually Wrong. 
You absolutely can. This post should help https://www.reddit.com/r/Python/comments/3gsvwc/running_ipython_notebook_on_amazon_ec2/
We have the infrastructure to do both, and are currently deploying servers to run code, but would like to use lambda where applicable. This is the kind of thing that we want to know, so it can be very helpful in deciding what we should move over to lambda. 
Please use r/learnpython for questions regarding how to use python.
Are you doing linear SVM? There's this in sklearn: http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html#sklearn.linear_model.SGDClassifier which takes n_jobs for one-vs-X multiclass training. Maybe this is enough for you to use all your CPUs?
Updates are just done via uploading new patches to the game on itch.io. If I get on Steam, it'll automatically update for you, but I need to find a good publisher, since self-publishing isn't really my skill. I haven't considered letting anyone use the font or the art for their personal non-commercial use, but if someone did, I wouldn't care. The game comes with all that stuff uncompressed and in plain sight, so just grab it and use it until you make your own stuff. If it was for a commercial product, you shouldn't need to use it. Reason: I am a one-man-show and I made a simple font like this, so you can make your own too. I can do it, anyone can. It wasn't hard at all.
Just as an example. The matlab analog of [this example](http://scipy.github.io/old-wiki/pages/Cookbook/Zombie_Apocalypse_ODEINT) takes ~5 seconds to solve any one of the ODE systems shown. While solving any one of those ODE's in python takes ~35 seconds. EDIT: using ode43 in matlab.
I thought to mention an additional library that hasn't popped up in this discussion yet - PyQtGraph If you are working with Qt/PyQt GUI applications, then PyQtGraph may be a good plotting solution As someone who has worked with embedding matplotlib figures into PyQt GUIs, this is a library I am excited to explore in the future when I have some free time. [PyQtGraph Official Page](http://www.pyqtgraph.org/)
Yes. But whether it is faster to do that or but will obviously depend on what you are doing
I'm not sure if the socket support has any way of telling you when the last read/write occurred, but you could do it by simply resetting a watchdog timer when you do reads/writes on the socket. Then have a separate thread or some check in your event loop to see if that timer hasn't been reset in X seconds (or whatever) and then close the socket then.
Also, compared to amazon, VPSes are often so much cheaper. We calculated that for one app we had, to set up a similar infrastructure on amazon which cost us 4x more than a setup on some VPSes.
Took a look at protobuf. Seems alright, very similar to marshmallow but looks a bit more difficult to use. Need to learn a whole new syntax where marshmallow functions via python classes which makes a bit more intuitive. The whole idea just screams "wheel reinvention." Why not just use JSON?
it's adverizing or something else ?
Assuming your program is written efficiently, it sounds like you're working with large datasets. Depending on your bandwidth, it is quite possible the act of transferring the data can take longer than the actual processing. 
Protobuff is higher perf and smaller output size than JSON. Overkill for a 2d RPG though.
Could you please clarify this? If you close a socket, you closed the socket. There is no semi-closing a socket. If the socket is closed, only a new one can be created. Or, do you mean to implement some kind of a buffer behaviour which does not close the socket, but only seems like it's closing the socket after a certain amount of time. Although doing this seem a bit far fetched. You can get if the socket has no more data by simply checking the returned data like this: data = conn.recv(1024) if not data: break This is out of the socket documentation [here](https://docs.python.org/3/library/socket.html). But I have a feeling that you want something different here.
Yeah, this is essentially the workflow I have established with celery/rabbitmq. Interesting problem all around, though, so I can't complain.
Ah, gotchya. I'll keep that in mind if I ever need a high performance serialization method then.
How's a VPS different from an Amazon EC2 instance?
Simple open source examples are better than complicated open source tools which may have more functionality. 
What kind of game do you want to make? The answer depends on that. I can give you a roadmap to do what I did as an example, though, maybe it will help a bit. In my case I made the console first, but since you asked about the map editor I will give you an example of how to make something similar. The map editor I made is really simple. The map is represented by a 2D grid of tiles. So, you know, a 2D list. Or a list of lists, if you will. A roadmap you can follow is something like this: 1. Run through all pygame basic samples and make sure you understand the API 2. Try to get a blank, black window to open, which does nothing. 3. Try to load a sprite and display it, anywhere. PyGame has Surfaces that you can use to get started, and eventually you can wrap that into a class, or whatever, and add more attributes if needed. 4. Display the sprite again and again, in a grid 5. Instead of displaying the same sprite in a grid, try loading a couple of sprites, and display them in your grid. 6. Read up on mouse support, and learn how to write code which tells you where the mouse is and when it is clicked 7. Write code which lets you click on any of your tiles. 8. When you click a tile, have it change to another tile. Congratulations, you now have a basic "brush" which you can paint your map with. From there, you'll get your own ideas how to proceed I'm sure. That is just an example, it might not be the best order to do things exactly but it should let you get something up and running. 
yeah this article is awesome!
Yeah sure. You open a socket (A), you authenticate (B), you send in data (C). If `C` is the last interaction had with the socket in and X seconds have passed, we should call close() on the socket handle. Otherwise, if any other interactions have occurred past `C`, we should revoke the timer that is queued to close the socket and issue a new timer. So if I open a socket, I want to put it on a timer to close in X seconds if nothing has been done with in during the X seconds. This can be done with either a Thread (I know this will work 100%) or I may be able to do it celery/some other queue. I'm just not sure the best way of doing this and a thread seems in-optimal and a job-queue seems overkill. 
Oh yeah, in an academic setting I can understand lots of concerns like this can be thrown out the window in exchange for more time to focus on what you're working on. But as soon as you start distributing the source for others to run, then you might have cases where people might want you to take a look at a pickle dump and that should always be handled with concern. Instead of worrying about that down the road, I'd just serialize with json or yaml safe_load from the start. Even in an academic setting I could imagine you sharing python source in a white paper, and maybe later an "academic professor at another university" claims they got conflicting results and send you a dump generated with your code and ask you to take a look. Probably legit, but still you don't want to think twice, and it'll take a hell of a lot longer to reverse engineer it and verify rather than just write some json serialization methods from the start. You might take a look at the yaml safe_load stuff - very little extra code to work with and will probably fit your needs just as easily as pickle. Great alternative, and easy to view the contents with a text editor and load as a python object programmatically.
&gt; How to Send an SMS with a Python Library Communicating to a Proprietary API FTFY
I will be messaging you on [**2016-05-03 00:12:25 UTC**](http://www.wolframalpha.com/input/?i=2016-05-03 00:12:25 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/4hfwx0/lets_build_a_simple_interpreter_part_9/d2q2hum) [**CLICK THIS LINK**](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/4hfwx0/lets_build_a_simple_interpreter_part_9/d2q2hum]%0A%0ARemindMe! 4 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! d2q2k13) _____ |[^([FAQs])](http://www.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^([Custom])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^([Your Reminders])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^([Feedback])](http://www.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^([Code])](https://github.com/SIlver--/remindmebot-reddit) |-|-|-|-|-|
Keeping things together is more important than order, strictly speaking, but I tend to do: __magic__, static, _private, public
seriously, did you not see the stickied post or the sidebar? /r/learnpython
As a Python beginner, that does would do me wonders, haha.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, we are sure you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, we are sure you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Really? That script runs virtually instantaneously on my computer, even with all the imports. In fact, isolating just the numerical solution (lines 13-35) and using `timeit`, I get an average of 2.07 ms to execute.
Maybe my laptop is just ridiculously shitty? I'll try running it on my lab computer and report back. 
Take that 20% more that you are paying and just pay someone to handle your sysops work on an contract basis. You'll be able to get dedicated servers that are 400% more performant, and pay the same rate. The smaller your team, the handier it is to burn your capital on salaries and not hardware sitting in the cloud. I'd say its when you have a huge team that you want to outsource everything because (a) you have the money to do so easily and (b) you don't want to hire more people and add to the communication overhead of your org. If you hire out you can treat the entire ops branch as black box that you complain at and make requests of.
I mean, my computer is a 5-year old Macbook Pro, so it's not exactly burning rubber! 
I'm not a huge fan of the character art, but the maps are gorgeous.
Cant you generate 2 markov chain and then only joining them? It would allow to get as much of each as yuo want to. The drawback is most likely the sentences wont be as good
If this is how you feel, you might want to officially release the art under the CC-BY-NC license.
Celery / rabbitMQ is overkill. A thread-safe queue would work fine. For example: http://www.gevent.org/gevent.queue.html Kick off a thread / greenlet / what-have-you to spin through the queue and check timers. Done.
I don't even know where to start was my thing I'm not a programmer and I'm just confused as ever
We have to kill healthy sockets as the proprietary devices we use max out at `N` connections and we open `M` sockets, so we drastically reduce our max connection pool to N/M. Right now, we close sockets whenever a user manually logs out, but if they don't log out, the socket stays alive. We can't manually close sockets from the server-side because it's proprietary. We're looking for a short-term solution that allows us to close the connection from the client side (our RESTful API).
 import urllib.robotparser # to parse robots.txt files import urllib.request # to read the html given a URL from bs4 import BeautifulSoup # to scrape html/extract links import urllib.parse # to normalize URLs import time # sleep between page loads import pymysql # database dbname = 'i427proj3' dbuser = 'i427proj3' dbpasswd = 'i427proj3' pages_table = 'pages' links_table = 'links' def make_tables(db): cur = db.cursor() cur.execute('CREATE TABLE IF NOT EXISTS ' + pages_table + '(pid INTEGER AUTO_INCREMENT PRIMARY KEY, URL VARCHAR(2500), content TEXT, crawlDate TIMESTAMP)') cur.execute('CREATE TABLE IF NOT EXISTS ' + links_table + ' (lid INTEGER AUTO_INCREMENT PRIMARY KEY, lfrom INTEGER, lto INTEGER, FOREIGN KEY (lto) REFERENCES ' + pages_table + '(pid),FOREIGN KEY (lfrom) REFERENCES ' + pages_table +'(pid))') cur.close() def destroy_tables(db): cur = db.cursor() cur.execute('DROP TABLE IF EXISTS ' + links_table) cur.execute('DROP TABLE IF EXISTS ' + pages_table) cur.close() db = pymysql.connect('localhost',dbuser,dbpasswd,dbname) destroyTables(db) makeTables(db) class myQueue: def __init__(self): self.q = [] def push(self,value): self.q.append(value) def pop(self): if self.q != []: return self.q.pop(0) else: return [] def is_empty(self): return self.q == [] class Crawler: def __init__(self,seeds): self.valid_extensions = ['html','htm','txt'] # we will only crawl these self.Q = myQueue() self.visited = {} self.domains = {} self.new_db() for seed in seeds: curl,domain = self.clean_URL(seed) if curl not in self.visited: self.Q.push(curl) # pushing domains now means the crawler will alternate # and not visit one domain for beginning the next. This is polite. self.visited[curl] = True # maps URLs to a flag sayings we've crawled it already self.save_link(curl) if domain not in self.domains: self.domains[domain] = self.make_domain_parser(domain) # we can only visit the seeds' domains. self.db.commit() self.close_db() self.debug = True # set to true for more verbosity # a dictionary is much more efficient than a list, but keeping URLs &amp; domains in a sorted list # would be a good second choice # we can't pickle an open connection like a database. We just have to close it and set the # attributes to None and then re-establish it when a picklefile is loaded. # this is redundant but illustrates the most general way to solve the pickling problem # the simpler way to solve the pickling problem is to just open and close a new db connection # in the crawl method def __getstate__(self): self.close_db() return self.__dict__ def __setstate__(self, state): self.__dict__ = state self.new_db() def make_domain_parser(self, domain): rp = urrlib.robotparser.RobotFileParser('http://' + domain + "/robots.txt") rp.read() return rp def new_db(self): self.db = pymysql.connect('localhost',dbuser,dbpasswd,dbname) # MySQL connection object self.cur = self.db.cursor() def close_db(self): if self.cur is not None: self.cur.close() self.cur = None # if they're not None, Python can't pickle the network sockets and stuff that they hold if self.db is not None: self.db.close() self.db = None # Setting these back to None was key to making this class picklable def clean_URL(self,url): #keep URLs in a 'normal form' so we don't get unnecessary duplicates p = urllib.urlparse.urlsplit(url) if p.scheme == '': # if no protocol, default to http return ('http://' + p.netloc + p.path,p.netloc) else: return (p.scheme + '://' + p.netloc + p.path),p.netloc def good_links(self, baseURL, urls): good_urls = [] for url in urls: if 'href' in url.attrs: target = url.attrs['href'] if target[0] != '#': # ignore local navigation new_target = urllib.urlparse.urljoin(baseURL,target) link,domain = self.cleanURL(new_target) #print 'joining:' + baseURL + ' ' + target #print link,domain,newtarget if domain in self.domains: ext = link.split('.')[-1] # get the part after the last . in the filename if ext.lower() in self.validextensions: # good file type if self.domains[domain].can_fetch('*',link): # robot parser says OK good_urls.append(link) return good_urls def save_page(self, url, content): self.cur.execute("UPDATE " + pagesTable + " SET html = %s WHERE URL = %s",(content,url)) def save_link(self, url): self.cur.execute("INSERT INTO " + pagesTable + " (url) VALUES (%s)",[url]) def save_links(self, baseURL, urls): q1 = "SELECT pid FROM " + pagesTable + " WHERE URL = '" + baseURL + "'" for url in urls: q2 = "SELECT pid FROM " + pagesTable + " WHERE URL = '" + url + "'" # nifty nested INSERT INTO query gives us 3-in-1 but could also execute q1 above to get pid result self.cur.execute("INSERT INTO " + linksTable +" (lfrom,lto) VALUES ((" + q1 + "),(" + q2 + "))",) self.db.commit() def crawl(self,npages): # The queue is initialized in the constructor # How many pages we've visited this time num_crawled = 0 self.new_db() while not self.Q.is_empty() and num_crawled &lt; npages: url = self.Q.pop() if self.debug: print('visiting: ' + url) shtml = urllib.urlopen(url).read() self.save_page(url,shtml) soup = BeautifulSoup(shtml) num_crawled += 1 links = self.good_links(url,soup.find_all('a')) links_to_save = [] # links list may have duplicates, this list has them removed for link in links: if link not in self.visited: self.save_link(link) self.visited[link] = True self.Q.push(link) if self.debug: print('queuing: ' + link) links_to_save.append(link) self.db.commit() # do this so the new pages will be in the pages table before inserting into links self.save_links(url,links_to_save) # wait a polite amount of time if accessing same domain time.sleep(2) self.close_db() return num_crawled
Then go talk to your professor or your TA's! It's literally *their job* to help you!
I do think gevent seems to be the best option here. Thinking more in-depth about the problem and I don't need to revoke the thread to close the socket and that's the only functionality that Celery was offering over others like gevent.
I'd attempted joining the two but as you mentioned the output was very nonsensical. I'm attempting for the sentences to be at least somewhat coherent. My latest though was that I need to change the way I'm producing the array I work with. Still trying to wrap my head around those changes :-p
1GB of data fit neatly into any modern computer's RAM. I'm guessing you aren't really using all of your workstation's capabilities. Try to see if you can modify the code to improve performance. If you're willing to share it, I can take a look.
&gt;To be convenient, we will put the TOKEN and a DEBUG variable into a separate config.py file. Easy to reuse and easy to exclude from your repository before pushing it on Github. Don't do that. Just get the token and debug from `os.environ`. It's super easy to use as a developer, super easy to set as an end user, and super easy to exclude environment variables from Git.
Are you using preceding string to build new ones? Maybe you cant tweak your rules with that in mind? Like first sentence generated is " I like peperoni pizza", trying to build second sentence with maybe "pizza", or "peperoni pizza" or the whole sentence to build the next? 
I tend to ascribe to the Bob Martin style: public interface up top, implementation details down below.
What do you mean by best-performing? Usually an ensemble technique can offer higher accuracy. Did you decide that the compute effort of combining more models wasn't worth it?
Stop storing users' code and maybe I'd consider using this. 
Google. Or duckduckgo to get handy [bangs](https://duckduckgo.com/bang?q=python) like !py and !py3, !rtd, etc.
It's basically an IDE without an IDE that sends all your code to somewhere else. No thanks.
From their privacy policy: &gt; What information does Kite send over the network? &gt; Contents of Python files in enabled directories. Per-edit information when you are typing into a Python source file. The current and previous terminal command, and the output from the previous command. &gt;What information does Kite keep around on its servers? &gt; Usage information about which results you click on in the sidebar. Contents of all Python files in enabled directories. Information about each edit that you make within any Python file in an enabled directory. All terminal commands. This is crazy. Do they want us to trust them with every key etc that we put in testing code or our terminals? Let alone the code itself. If someone malicious gets access to their data, they get all this information, unless they store it in something other than clear text (but then why store it in the first place). I will never trust some company I have never heard of with this amount of information, and I am pretty sure any employer would frown upon the usage of this tool.
If you already program a lot, you probably don't need a book for just PyGame, there isn't much there. I just read the web docs: http://www.pygame.org/docs/ 
I remember Aerobiz, Koei had some great titles. I guess I just got used to Visual Studio since that's what I use at my day job.
Could you please elaborate? 
Nothing wrong with it, but it is nice that Pycharm is cross platform so I can fire up Linux and edit the code in there while I am testing it. As well, all the key bindings are shared between their platforms, so their Java ide uses the same one as Python. The also have something called Resharper for the .Net people that is a plugin for VS. I don't do C# but I hear it's great. 
Agreed, game development is about lots of event handling and keeping track of game state. It's not that "difficult" but it's a lot of work planning the program flow, as well as the graphics.
Agree. I have just looked at few links.
I avoid recursion if possible in Python (which is always). http://stackoverflow.com/questions/13591970/does-python-optimize-tail-recursion
May be good for starting, but move to a real IDE as soon as you can because this will never, ever, ever, ever, ever be used in an enterprise situation.
Hi voytek9, thanks for replying Many people like my analysis, but in fact, is weak. This should be run as you said in a real application and not just a couple of machines in a single Amazon Zone in a random day and time. I have nothing new to say, and at the same time I would like to see the results of a big project like yours. Please keep us updated.
Please don't 1.000.000.000,00 I am from the US, and it doesn't end well. https://www.youtube.com/watch?v=BsaxyraBdQ8
Try "python for data analysis".
I would use SQLAlchemy and start by following everything they suggest.
Oh? Great, I didn't know that. Is there any limitation on that? Do you have a Doc link?
&gt; Avoiding it for performance reasons strikes me as a premature optimization. Agree! I am more concerned about setting the recursion depth param; could cause unnecessary bugs or other side effects in certain scenarios, but could also be protection in others.
I think they may be referring to this: http://www.infoworld.com/article/3044512/application-development/intels-python-distribution-provides-a-major-math-boost.html
I can't go to Youtube without seeing PyCharm ads these days.
The first sentence lists Java as a procedural language. It doesn't get better from here. It then rambles something about JavaScript appearing at some unique period of time where designers were writing terrible code and everyone just continued accepting that as the norm. Ok, I'll listen. But then it follows up with an infographic of completely unrelated statistics. It measures complexity in terms of how many lines are nested more than four levels deep. Really? Cyclomatic complexity or something more rigorous isn't chosen? Pulling in `promisify` into your Node application to reduce nesting doesn't make it less complex. It then appears to imply that having a large number of questions on SO means the language is bad. What about just being popular? Why is the ranking just for July 2015? All you can see is that there is a lot of activity on SO for JavaScript but there is nothing explaining *why*. Somehow it makes the leap from number of lines changed per commit to least expressive. Why is this a reasonable definition? What if there is just a lot of churn as projects move from one framework of the week to another? Conclusion: This article is written with an agenda and fails to have any meaningful content. There are so many things that could be attacked about the language but my guess is that this author is too misinformed to be able to identify any of them.
But isn't that major overkill if you're only using SQLite?
There are two hard problems in computer science: * cache invalidation * naming things * off-by-one errors If you only slurp/dump once during your program's lifecycle, you are very likely to run into problems with an invalid cache. If you hit the database every time, you're likely going to be very inefficient, and if you don't keep it all in one transaction, you're going to get an inconsistent view. IMO the best way to approaching the database is to *rethink* your entire program in terms of transactions and data flow in general ("with smart data structures, the code will write itself"). IMO this is much easier with a real database like postgres - if you're on Linux, it should be *really* easy to install from your distro packages (the one caveat is that you have to manually call the upgrade script for each of your databases once a year if you want to upgrade to the newest major version).
I don't think they thought it was a *good* idea as much as a necessary evil, if they can't see your code, they can't correct it, in the same way that if your phone doesn't always have its microphone on, "ok google" won't work automatically, you're going to have to press that button, and you always have the choice to leave the feature off. Anyway, I'm definitely not going to use this for work or anything of the sort, I might however, if it comes out of closed beta, get a copy to use exclusively for when I'm doing programming challenges and hackathons and such, code that necessarily won't have any value after writing it because it will have been written thousands of times already, probably better, by someone else, other than me. I'll probably try to lock it down in terms of what it can read from my terminal also, depending how security conscious I feel. I'm sure someone will also make an offline version as well and build it into an IDE soon enough, it'll just lack the ranking by popularity features and require more space on disk, it is basically just the autocomplete features of an IDE in a box beside your terminal after all.
Your skills are marketable. Now, it's up to you to market them. My advice to you is to put your resume on the major job sites and see what fish bite. You won't be hired sitting here wondering if you can get a job, that's for sure. Resume advice: Make it short. If you look like you're 60 years old and have been working in another field until now, people tend to shy away from that for some reason. Only include relevant info to the IT field in the body of your resume. Teach yourself basic linux skills if you don't already have them. Put those skills on your resume.
Google Compute Engine is probably the most economical choice, as they bill by the minute (min of 10 minutes per instance), whereas Amazon bills by the hour. I'm of the opinion that your program shouldn't take that long to run. String performance in Python is not good, and since you say you're 'formatting' data, as opposed to running some complex calculations, you should consider compiling your python code with Cython. It will probably run your program in a fraction of the time.
You have an unneeded 1 in your reduce call, buddy
Play to your strengths. Are there other sensor-reading data acquisition fields that might have some crossover with what you know?
Yep seems like Selenium or API. Thanks. 
I haven't, but now I'm considering it. I expected this to get like, two upvotes. I didn't think that anyone would be interested at all in this.
Recursion can be an effective technique in some limited cases. If you're serious about this kind of thing, coroutines might be a better fit. I am particularly fond of the `greenlet` module.
Not if you want a result for `0`!
I recommend you set up [jupyter](http://jupyter.org) notebook and ipython on RPi. It's very handy for playing around in python. It's basically same as what [tmpnb.org](http://tmpnb.org) provides but on your own machine. If you're going to connect it to a screen you could also install [pygame](http://www.pygame.org) and go through some tutorials and make some games.
Thanks very much!
&gt; I could see writing the renderer or other performance-critical code in C++. Use Cython! It's a superset of Python that compiles to C, to native machine code. Very very nice, if you have the background to take advantage of it - write everything in Python, then annotate the hotspots for more efficient compilation :)
I swear, as software becomes more intelligent and consumes more of our data, the software as service model will die. It simply has to. Imagine if I sold you a robot and said all of the video it produced gets sent back to Cyberdine HQ. That would be absurd and no consumer would allow such a thing. We need to take a stand here I presume.
I hate shit like this. 
I don't trust Github with usernames and passwords though, so, yeah. 
Right... I had to turn my phone in landscape mode to get the full code. Do you suggest any alternative to Github's gist for it?
If a problem is inherently recursive then it is appropriate to code a recursive solution, for example walking a tree or nested directories. IMHO factorial is not inherently recursive since it is defined as "multiply all the number from 1 to N together" so a recursive solution add unnecessary complexity and overhead. I would go with /u/PeridexisErrant's solution and use reduce and mul.
There was much discussion over it when it was linked here: https://www.reddit.com/r/Python/comments/4erjy4/kite_programming_copilot/
Even functional languages has problem with recursion. They implement Tail recursion optimalisation (TRO) which can make your recursion not so simple as mathematical one. As far as I know, the general rule is to write TRO function if you feel like this and then just make human compiler from yourself and rewrite it using while statement. To rely on lru_cache in such cases might be IMHO really dangerous. What size of lru_cache you should use to be sufficient? You can fill your memory with thousands of calls which might stay cached. So I second the opinion to avoid recursion at the end. I think Guido is right: http://neopythonic.blogspot.cz/2009/04/tail-recursion-elimination.html Just to demonstrate how to rewrite TRO to while: def FaktorialTRO(x, n = 1): return n if x == 1 else FaktorialTRO(x-1, n*x) FaktorialTRO(5) def FaktorialWhile(x): n = 1 while not x == 1: # This is intentionally inelegant to show relation between functions :) n *= x x -= 1 return n FaktorialWhile(5) 
So I would assume this would go against most company intellectual property policies as well... 
peewee is also a good alternative
Looks great, but curious whether it follows `.gitignore` or is going to send API keys, etc. to their server?
Syntax. Cherrypy is more verbose, and the syntax is less discoverable. When you see flask, you understand it in one second. And you know what you need to do to add a view without looking at the doc. Cherry py, a bit less. Not a lot, but it's enough.
Did you even read the article? I did link to their docs immediately above the horizontal rule that explains this is not my work: "The rest of this article will be the -example they provide-." Nowhere did I take credit for it.
General advice, applicable outside of Python as well: don't let "performance issues" affect your decisions until and unless proved to be real. For perhaps 99% of programmers out there, in perhaps 98% of usecases, the performance difference between any reasonable choice will be negligible. 
Nobody ever said that you can't run multiple threads on multiple cores with Python. The limitation people keep mentioning is the GIL (Global Interpreter Lock), which has it such that you cannot have multiple threads interpreting Python code at the same time (thus on separate cores), and it's an implementation detail really - just one that happens to be in all the common Python interpreters, because it's the easiest way to maintain interpreter state consistency in a multithreaded situation without going insane. But doing parallel processing in C and then exposing a Python interface to it, sure, no problem there.
You might be right. Thanks.
I know. The title is intended to be tongue-in-cheek. Pardon me for attempting wry humour on the internet. 
I suspect this just isn't the case. Consumers want convenience far more than they want privacy, and while they will fight to keep some amount of privacy, they expect that privacy to not limit them. I think we're going to see the exact opposite - an increase in service models, along with more leaks and hacked databases. I don't think we're going to see a huge number of malicious companies, but I do think we're going to have to deal with a very large number of naive startups that just can't deal with the data they're obtaining safely. Ultimately, I think we're going to reach the point where security and encryption stops being something that services are assumed to have, and starts becoming something that consumers are expected to obtain for themselves.
`import shelve`
This would go against the IP, security and data protection/privacy policies of basically any organization that has given any degree of thought to any of those compliance domains.
Thank you! I did not know of SQLAlchemy and will look into it. Very helpful indeed.
Dude, fuck yeah great work!
http://tinydb.readthedocs.io/en/latest/intro.html 
I tend to do `__init__`, `public`, `static`, `_private`, `__magic__`. Occasionally, I interleave `public` and `_private`, if the private methods are only really useful for one or two methods above.
Recursion is the only hammer in some languages' toolbox, so people who have a high opinion of those languages tend to have a high opinion of it, but it's not a particularly good tool. It's useful for dealing with trees that you know will be shorter than 1,000 items tall. In all other cases, use iteration. Recursion is less efficient in all cases and harder to read in most cases (everything but trees).
Never use `for`/`else` in production. I've seen a lot of great developers who thought they knew what it does but were wrong. Just avoid it, it's too obscure. 
Edit: I originally posted a reply to the wrong comment here. That's the thing, it seems like all your sensitive data will be lumped in with everything else! 
Please never use os.system. And instead of os.popen use subprocess module with parameters given as a list - you wont be vulnerable to shell escaping bugs. Right now this doesn't work if your password has a ' in it. The GUI looks neat.
I don't see why not.
&gt; Registration is now closed Exactly. It's like that for a reason. Better luck next year. 
Or just use click ;)
Your boredom makes me want a burrito.
I think i'll try this approach and see how it works. If it makes some good stuff i'll be sure to edit and post. I've gotten some really golden ones so far. Combining HRC and Trump was fascinating
Shelve is amazing. Great tool for simpler projects.. 
I have scraped Instagram using **Selenium and Python** JavaScript gets handled with breeze Only thing was, I wrote a little js to do scroll down so as to activate loading more posts as Instagram is infinite page. My objective was to scrap image urls and use wget to download them. 
When's the last time you counted the 340th Fibonacci number for any real-life purpose, and furthermore wanted *only* the 340th but not numbers 1-339? If it makes the code cleaner, use it. If it's performance critical, don't. Recursion is only "mind-bending" for first year CS students. For typical programmers it's nothing special.
Not at all. Its good practice at any scale, and honestly less work in the long run from what I've seen. Prettier too. I would really suggest you try it for one project and stick to it, see how you feel it after you've seen a project thru to completion with it, even if its a smaller exploratory project like a rest api or something.
[SQLite](https://www.sqlite.org/json1.html) has the json extensions for that purpouse too.
Two other options: * [Vedis](https://vedis-python.readthedocs.io/en/latest/) - from the author of [peewee](http://docs.peewee-orm.com/en/latest/) * [UnQLite](https://unqlite-python.readthedocs.io/en/latest/) In my experience, though, the benefits of a relational DB outweigh those of document DB for most data, so I'd tend to stick with sqlite.
I know at the end you say it's not very useful, but I'm sure there is some Chipotle business planner out there who could use this type of information to scout potential franchise locations. I'm sure you could layer other local economic data, eating trends, etc (go full /r/bigdata) and really find mathematically viable places for Chipotles. 
Oh totally. There's tons of information out there for this sort of stuff. I actually sat next to a guy at a baseball game (I was there alone too) and he worked for some fast food pizza company and was scouting locations. He would sit in these "fast casual" places and literally count the number of people who would go in and out looking for popularity of the areas. Curious what they did with the data after, and if I could come up with some sort of predictor for those numbers.
Yeah complementary restaurants just like pasta and burritos. Actually should be pretty easy to see how close Pizza Hut and McDonalds are together. Just change the keywords in that script.
Seems like neither can edit units.
&gt; return fibo_recursive(n-1) + fibo_recursive(n-2) This function is recursive, and bad, but it isn't bad *because* it's recursive. It's bad because it's a horribly inefficient algorithm. If you wrote the recursive version of your iterative algorithm, it'd be faster than this, and take much less stack (it's good until n=997 on my computer, with the default stack limits): def fib(n, a=0, b=1): if n == 0: return a else: return fib(n-1, b, a+b) Here's the timings for n=40 (I'm not patient enough to run yours for anything bigger): - recursive (bad): 80.38s - recursive (good): 2.336e-05s - iterative (good): 1.197e-05s When using the correct algorithm, up to 1000 stack frames, the penalty for all these Python method calls is still measured in microseconds. My methods do more than just adding two integers, so that's probably never going to be a hotspot for me. &gt; I used to be a schemer back in the day, and I shudder at the thought of using recursion for anything production-related. Unless you enjoy really mind-bending bugs to fix ;) I was never a Schemer, but isn't this backwards? Recursion makes debugging much simpler. Is the base case correct? Is the recursive case correct? Then it's all good! Recursion makes the loop invariants and state obvious, and points me to exactly the 2 unit tests I should write if I want to guarantee that it's working. Iteration makes you store everything in local variables, and step through loops in the debugger to figure out what went wrong. Recursion makes state transitions clear: F(A) returns B, but should give C. That's trivial to run in the repl, or write a unit test for. Iteration hides state transitions inside other control constructs. I don't think I've ever had a recursive function work in test and later fail in production for different data. How would that even happen?
ah ok thanks ill follow that path :)
With the recursive solution it's clear to me what the flow control is doing, and that the (implicit) loop will terminate. It all flows top-down, except if the two "if" statements both hit, in which case it retries with a lower counter. With the iterative solution, it's a couple lines longer, and now I'm reading about loops and breaks and range() calls and there's an extra local in scope now... Adding 3 or 4 or 5 extra points of complexity starts to hurt. Worse, next week, somebody else will see this loop, and then add another below it (because the coding style here is clearly "add loops inline"), and then I'll have 8 or 10 extra points of complexity, and now abstraction is starting to fly out the window and the whole thing looks like a shell script. This is actually a really great example, because your implementation has a bug. I would expect `download_thing("foo.com", retries=0)` to try downloading once, and if it fails, not to retry (i.e., *re*try 0 times). That's what the recursive method does. Yours doesn't download anything, doesn't call the "not successful" branch, never assigns to `resp`, and still tries to run the "code" part anyway. Oops. Maybe should have stuck with the simpler recursive version!
Depends on "small". But even debugging a stack of 10 can get tricky.
I think OP is asking for merge functionality in pandas. Lazy post on his behalf, IMO.
Awesome, thanks! Regarding the scroll down, was that relatively easy to handle?
&gt; hate string concatenation What's wrong with string concatenation?
It looks like you now have three problems.
Yes All infinite pages have a Js trigger when user scroll to the bottom of the page. So, by using **driver.execute()** function, just select the last div in the HTML and do *divobject.scrollTo()*. 
 'howdy' + my_var just looks ugly to me. I should clarify I mean I hate the + operator as string concatenation. Obviously even ''.join([a,b,c]) is string concatenation on the backside.
Just Voronoi diagram all the chipotle locations and see what the farthest point from any is in an area, and you've got a decent idea of where to go next. 
what "Noodles" ?
Anything is possible, I have meet developers that dropped out of college because they weren't getting the learning they wanted. IT unlike other industries are not base on how much you learn in school, but how relevant your skills are to the market. 
VirtualEnv creates a virtual environment with a particular set of libraries installed which pertain only to the VirtualEnv. This is advantageous because there's no conflict across projects or environments due to versions and installations. VirtualEnv doesn't really help you if you need to update libraries. You still need to pull those downloads from somewhere. 
I'm not sure what noodles is, but every Chipotle I've ever been to has a Panera Bread right next door. 
thousand - International System of Units, kilo - k
That is also a totally valid way of doing it, I just prefer the `do while` style the recursion offers (aka if I set retries to 0). The repeat logic can also be put outside the function, up to personal choice. My personal style is the recursion, if there is a reason I should avoid it I would love to learn!
You should probably post this in /r/learnpython.
I think ejdb should be what you want. It is considered the sqlite of the document DB. I haven't used the Python bindings thought. (Sorry, on mobile, so no links).
berkleydb is pretty horrible in many situations. It really depends on how quick and how much data he intends to stick in there.
Is there an updated version for Python 3.5?