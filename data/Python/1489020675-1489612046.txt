The response objects are saved to disk with pickle
I have a suspicion it's the port? 
If you're on Windows, why not just use IDLE?
# CIA combating globalism
How to install it? It come with Python.
I'd recommend starting with anaconda which has spyder(my favorite IDE) and a lot of modules already loaded. After that, in addition to your list, you should consider psycopg2 and sqlalchemy (handy for database use later), seaborn (nicer graphs and quite easy to use), and I'm certainly forgetting some but good luck!
I am a newb too, but I would say your indention for your else: statement is not correct.
First tip when posting for help is to post your actual code and not a picture of it so we can copy paste :D. The picture is nice for trying to help you resolve whatever issue you have but always post your code. Python cares about indentation, what book are you reading? I'd hope they cover that. Try removing the indent before else: So if right_this_minute in odds: print ("this minute sems a little odd. ") else: print ("not an odd minute") 
Pycharm!
courtesy of the CIA, it is ;) 
There's also [Betamax](https://github.com/sigmavirus24/betamax).
Its because I am not a developer but a finance guy trying to make improvements. I work at a very large company in our highest security environment. I can down the road add more modules, but right now I have the resources, if I ask 3 months from now, it will sit until their security people have the time to look at my request again, which could be months. 
237.
Simplify your problem. Get rid of the GUI, list of devices with the same leading 3 octets, etc. That's too many new things to learn at once. Start with figuring out how to ICMP Ping one hard-coded ip first. And note that this [may not be easy](http://stackoverflow.com/questions/1189389/python-non-privileged-icmp) Wrap that in a function and map that function over a list of IPs. Then build some mechanism to generate the list.
The user experience of running a script is terrible. The version of Python matters. I think it would be hard to find a project that doesn't have any dependencies. 
No problem. Glad you got it working.
Why'd you delete the question? :( 
Idk didn't wanna take up space with a simple problem. 
1. the source code is much clear than bottle because i fully give up python2 .Bottle use much redundant code for python2
thanks
its almost as if readline() is reading it to fast and missing the first two characters.
+1 the free software movement is massively awesome and yes python is also super awesome for throwing together prototypes
After doing almost no actual programming (little bit of scripting) since my last college class almost 9 years ago - I jumped in to the Python world with both feet last weekend. I'm developing a program that given a full/partial dns name, mac address, or ip address will tell which switchport that device is plugged into on our network. We have Solarwinds but not their sweet User Device Tracker module so I decided to build my own version. Solarwinds does a bunch of my heavy listing by generating an ARP report for everything monitored on our network (have around 600 switches/routers). This ARP report gives the DNS name/IP address/and MAC but only gives the layer 3 device that the IP subnet lives on. So - my program has two parts: One that logs into all of our switches and generates one big master Mac Address Table and the other that does the actual searching/lookup between my two spreadsheets. Final output if the search term is found is the Port/Layer 2 Switch/L3 device/IP/DNS Name/MAC address. I anticipate that the tool will see pretty good use amongst our networking team (of which I am a member). It's amazing how much programming logic/basics have come right back up to the surface even though I haven't touched many of them for almost a decade. I have to google pretty much everything syntax wise but I at least can pseudo-code what I'm looking to do!
But there is always pip and brew which also come pre-installed. UX depends on the level of user. For power users its okay. For ordinary users, well, yes its a problem.
Normally the function's definition uses more useful names than *i*, so it's usually pretty obvious what kind of data to send it.
No one minds, and maybe it'll help someone else out!
im sure you have benefited a lot of choosing stocks from this code. 
THANK YOU!!!!!!!!!!!!!!!! 
Readline reads on character at a time while xreadlines reads one line at a time. Not sure if this helps, but hopefully you can dig in further based on this. 
I'm the co-founder of Educative. You have lifetime access to the courses and our courses are self-paced courses. There are no assignments or submissions.
Writing code that takes selected Google documents and combines them in precise order into a single Word document. 
Yes ! Edit and run. 
I didn't know much on Emacs or programming when I first touched it. It might have some quirks and ancient conventions but it's a powerful tool which I think more people should try and learn (I guess we both agree on this).
Thank you! Just bought the course and cant wait to start :) A stupid question to start with though... what is that gorgeous theme on your code snippets and can I install that on PyCharm?
You need to flush the buffer of the process you're reading from. It never finished writing the line. You can also just not read the last N lines.
I am just finishing a Udemy course on Python. I am trying to get familiar with it in order to build a framework for a company I am starting in renewables. I am continuing with Flask and trying to find information on best practices for structure and documentation for good development habits. Don't want to develop forever but I need something basic to start and I am so new I still use IDLE as I don't know any better. My "pain" is coming from a background of embedded systems and trying to grasp just how powerful python is as a language. First project is Python/Flask framework with some basic data structures representing some nodes connected via IP with some simple energy data I collect and send to a db. I also want to build a small report generator using LaTeX or other pdfable markup language and a small web portal for said data. Slow but I have to start somewhere I guess! Every rock I turn over there is so much information to dive into.
I remember you also released [Python 101 free for 48 hours](https://www.reddit.com/r/Python/comments/5bmanr/python_101_if_now_free_for_48_hours/) and it was pretty good for a beginner
I agree that it may not be the best IDE for it; that being said, if you're already using it for other languages, you won't have to have a separate one anymore. I loved working with VS in the past, and Python support could bring me back to using it especially since that's the language my boss has me using at work.
Udacity has a python course that is very good. As you progress, you answer questions, and actually write python functions. Does this course have similar features?
Just realized that we hadn't provided a free preview on any lesson (oversight at our end). We just enabled Preview on a few lessons so that you can get an idea. Thanks for making us realize that.
Nice, you also can simplify things by using `python:3.6-onbuild` image, and don't bother app directories and requirements.txt in `Dockerfile`. Also `docker-compose` has `exec` command so you don't need to know docker container image or id, just type: docker-compose exec app bash Another useful thing is to use nginx-proxy for docker and don't expose any ports on local machine (avoiding clashes with other apps with f.i. similar dependencies): * https://github.com/jwilder/nginx-proxy I also have mapped `*.dev` domain to my nginx-proxy, so now i can have my apps exposed using simple domains like `graphana.dev` , `portainer.dev` without remembering different ports for them.
Quandl module has lots of data sets that could be of use to you in finance. www.quandl.com
That's WangerNum!
Nice! I will take a look at the nginx proxy. Thanks! 
Also if you have an external server and valid domains you can get SSL certificates for free (with autogenerate and autorenew) by using with nginx-proxy one more container: * https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion
+1 for anacona. It comes with many, many preloaded modules so it should cover a huge number of huge case. Worst case scenario you can always copy/paste pure Python module into your project directory after the fact, it doesn't need installing.
Very impressive job. I will do that with my hometown and print it :) 
Closed source? Not my cup of tea. I'll continue with micropython. 
I launched an open source python program I developed last week. [Dicecord](https://further-reading.net/dicecord/), a diceroller and digital character sheet that posts messages in Discord channels. This week I've fixed some bugs, getting ready to add an additional game and I'm looking into code signing. 
I found this library recently and I am just sharing it here for others.
thank you very much for your elaborate answer! I'll check those out!
Why are they even letting you develop on a production server in the first place? This should be done on a separate development server until whatever you're creating has been thoroughly tested and reviewed before making its way into production. The real security risk here is allowing you to use a production server as a test bed, not the python modules you want to use in your application. As /u/ticketywho said, they'd be better served just reviewing everything, including modules to be installed, when the application is ready to be tested and reviewed.
PyCharm community edition has all the perks of PyCharm except without some specific web dev tools.
Right, and it's a high security environment that's likely handling financial data. They should just go ahead and assume it's going to be hosed now and save themselves the trouble of inspecting all those modules lol.
All the best! 
This seems to be the children's version of NumberWang? The real version is, of course, [much more complicated](https://www.youtube.com/watch?v=vPplnZkaquw).
First, obligatory /r/learnpython mention. You'll get better traction there with posts like these. You'll also want to read the formatting help to know how best to format your code - currently right now it's unintelligible. Second, messing around with a variable at a global scope with threads is asking for trouble. I didn't go much farther into your script when I saw that was going on. Note - I'm not the strongest in threaded stuff, so it's probably good to post this same question in /r/learnpython where someone who knows their Python better can explain.
Yeah I saw that subreddit after I posted so it was slightly late but my intentions aren't really to learn, just to sort out this problem so I wasn't sure if it should be posted there or here
Would you be asking the same question if was the opposite? "A type is just a class, so why not class Animal():"? Those are just names. The people who came up with OO decided to call "class" the type definition which encapsulated both data and behavior. In python "class" is the reserved word you use to define a new class, while "type" is a function used both to get some object's class and for creating a new class at run time.
does this work:? with open("file","rt") as f: for line in f: if searchstring in line: whatever
There.
It's perfectly capable. SwitchCars on Steam was developed using PyGame. I'd recommend making sure you are comfortable with the packaging and installer creation tools you'd be dependent on, such as py2exe to create a standalone executable package. I've done this myself and it's not too painful [here's an example](http://simon-hibbs.github.io/StarBase/) but you'd also need to build an installer wizard. I'd recommend building a minimum viable project end-to-end first and then ramp up development on the game itself to avoid nasty surprises.
Noice!
Spython
I see the supported Wemos D1 is a ESP-12F module with a CH340G USB bridge and the autoflash setup. Any reason Zerynth wouldn't work with a ESP-12E based NodeMCU or Adafruit Huzzah Feather, taking pin mapping into account?
No problem. I'm happy that you liked them
Thanks! I'm glad you liked it. The book is now free or pay what you want
There is a fork of Pygame that resolves the exact problem of the old SDL version: https://github.com/renpy/pygame_sdl2 It runs on SDL2 and is also cross-platform compatible with Windows, macOS, Linux, Android, and iOS.
Why not
Just purchased, and did the argparse section. Very nicely done. Thanks.
Hey, fellow redditors, author here. Feel free to ask me any questions or comment stuff — in particular, I'd love to hear if you have any more ideas on how to compare these frameworks. This is my first post, trying to give back something good to Python community after all these years, so please bear with me :)
I didn't pay for a license and still am able to use it, so no, you do not have to pay.
Your script turned that ~100 char example in a 700 char one (500 if you exclude the spaces). Isn't there some way you can make it shorter? Here's what I thought: You're only using 10 smileys. Python tells me there's 100 printable characters - so that's exactly 2 smileys recording one letter. There's 128 ascii chars, so it won't work on some "special" characters, I presume? How about composite 3-tier smileys? There could be eyes, the nose, and the mouth. This can be combined with 2-tier smileys for extra possibilities. You need about 4-5 eyes, noses, and mouths to have the same 100 possibilities and, in the end, the code will be 40% shorter (3 chars instead of 4 with a space) So you'd have like `:`, `;`, `=`, `8` for eyes, `-`, `^`, `~` for nose, `)`, `(`, `[`, `]`, `|`, `/`, `\`, `D`, `P`, `S`, `0`, `O`, `o` for mouth (you can also add wiggly braces, I don't really like them...). So that will be 4 x 3 x 13 = 156 possible combinations. Just make a dict with itertools, I guess. Some advice: if you're going to actually do this, remove the `8=D` smiley... 
The fact that you're ignoring the conditions of the trial and the authors choose not to force you to do not make it free.
Yes, it looks like a good step forward, but I'm not sure how complete it is and some devs who used it mentioned in /r/pygame that it's not easy to get it to work.
Shapefiles, shapefiles everywhere.
Does the code read OK on a Kindle? I've noticed that in a lot of cases, examples of code won't read too well and will come out badly formatted for whatever reason.
Isn't it?
The conditions are what exactly for the trial version? Also still: The trial version is for free.
I don't have my kindle handy at the moment. I had to zoom out a bit on my LG G3 and the code is okay. Its a little too wide in some cases but I think it would be fine on my Fire
Part of it is that Python's keywords are exclusive rather than contextual, it's one or the other, and because `class` was used to define a class the builtin function to *get* an object's class had to be called something else, in this case `type`. And of course if it were `type Animal:` the builtin function would have to called something other than `type` e.g. `class(animal)`. The other part you can read at [Unifying Types and Classes](https://www.python.org/download/releases/2.2.3/descrintro/), basically types and classes used to be completely different realms (types were builtins, classes were user-defined). Python 2.2 unified these realms but the naming suffered somewhat.
I mis-read the documentation I was looking at, thanks for clearing it up!
I'm sure I'll come up with a few haha, ordered The Art of Exploitation, looking forward to delving into this a little more when it arrives! Thanks again!
Thats really good to know! My educational background is actually in music and I ended up in software by a fluke about 10 years ago so I'm lacking in a lot of the lower level computer science skills. If you have any recommended reading material on that I'll add it to the stack!
Another route you could go is with "[Introduction to Computer Organization: ARM Assembly Language Using the Raspberry Pi](http://bob.cs.sonoma.edu/IntroCompOrg-RPi/intro-co-rpi.html)", then picking up a [Raspberry Pi](https://www.amazon.com/Raspberry-Pi-RASPBERRYPI3-MODB-1GB-Model-Motherboard/dp/B01CD5VC92/ref=sr_1_3?s=pc&amp;ie=UTF8&amp;qid=1489080881&amp;sr=1-3&amp;keywords=raspberry+pi) off of Amazon (the newest model is the best, but any model should do), and learning that way (this is probably the way I'd do it if I hadn't already taken a class on the subject). And make sure to check out this subreddit (and ask questions there if you need to) -- /r/asm.
This is perfect man, once again, thanks a ton! Making me regret my school choices haha. Although the computer science stuff that was offered 10 years ago was a different planet to whats going on today. 
/r/learnpython What have you tried? There are many tutorials for working with GPIO on the raspberry pi available if you use Google.
I also highly recommend the articles by Eli Bendersky, the author of pycparser: http://eli.thegreenplace.net/tag/python-internals
Oh. I havent looked into those. Also, from your perspective, how easy/hard would it be to program and set up (physically) something i am looking for? As far as im told, its "hard" to connect a dc motor to a Raspberry Pi. 
Love the Pi, I have a few of them floating around so I'm bookmarking that for later! Man you just have all the resources haha 
Well no matter what it will be harder to connect a motor to a raspberry pi than the LEDs most GPIO tutorials will use. This is for several reasons, but I won't get into it until I better understand what you're trying to do. When you say "connect" do you mean that you want to be able to control the direction and speed of the motor or do you just want a binary on/off switch? The latter is fairly simple, but the latter will require a more complicated circuit (or a controller chip which deals with that for you).
Forget the Python part for a minute. Pretend that *you* are the computer. Given that table and a numeric grade, what are the steps you would take to get the letter grade? Think in *very small steps*, not just "I'd just look it up in the table and bam, there it is." Write those steps down. They should look like a sequence of if-tests. Then crack open the Python syntax and convert those steps to Python code. Good luck! (P.S. I don't think anyone here is going to actually post a working solution for you. And really, 2 months? From any Python tutorial, you should get enough Python concepts in an afternoon to do this assignment.)
I've got a few bookmark folders full of resources like these, so I can generally find a suitable one fairly quickly for situations just like these. :)
Here's the main page: http://pgbovine.net/cpython-internals.htm 
The direction of the motor wont matter too much; i can just turn it upside down if need be. If bringing power to it for a few seconds makes it turn ccw, thats all i need. And when i say "dc motor", im talking about those small motors you could buy from Radio Shack (rip).
You'll want a circuit like [this](https://www.youtube.com/watch?v=LXGtE3X2k7Y) to avoid inductive spiking when you switch the motor on and off.
Upboat, that did it. I didn't realize the generator functionality was different from iterating through each tag.string.
[removed]
name = raw_input("Please input your name:\n") ? not sure how to make it ask for "please input your score" after
I really love construct for it ability to parse, and construct packets, sad it's comes out as the slowest on...
Try /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. They aren't a homework service, so I would recommend you take a stab at the logic yourself and post there if you get stuck. &gt; subtract the sum from the nearest equal or higher multiple of 10. This is called a 'modulus' and is the `%` operator in python. 
Hello, what you mean by "then it should multiply the seven digits alternatively by 3 then 1"
Thank you so much for your reply! If you could send me on the right direction - at least help me to communicate this idea, that would be most appreciated! 
I suggest that you add command line support. E.g. passwrdgen -n 4 -c 7 8 Where 'n' and 'c' are optional flags for number of characters and string type (maybe a long version of this that accepts string inputs too?). You could just choose reasonable defaults and only change them when the flags are passed. The required argument is just the line length so passwrdgen 8 Would give the same output as your interactive script. 
Absolutely agreed. Reference implementations are one thing, while production implementations are completely different. One for testing out new features, quickly hacking in something that might be gone in 5 minutes, while the other is for reliability. I would add to your second rule. The value of the globals should be determined solely from the source code. That is, using a `#define` rather than `static const val = read_from_config_file();` I work with a framework that does the latter, and it can result in bugs that only ever appear on one person's machine.
I was thinking of that, am planning to add. Thanks!
Reading between the lines I get the impression that it was something to do with how they were using requests i.e. they didn't read the docs that says don't do X. They say replacing requests with urllib fixed the problem - so that was probably easier than refactoring their app - but they didn't find a bug in requests, so ... Never the less, it's a useful article about how one might find leaks.
I guess everybody does this at some point.
Cool, wonder if there is an easy way to parse a new subset of comments from Amazon. Might be more relevant now that they stopped allowing comments from people who got products as gifts. 
why would that matter for this? 
fortunately for me there are people who are willing to help anyway rather than being arseholes 
I enjoyed doing watching these so much (found them last year). The process of seeing how the language actually works is really interesting because you realise that it is absolutely zero magic, just simple, well thought out ideas combined at large scale. The fact that the interpreter is a while loop with a big switch statement is very funny to me.
If Amazon wants to go further than a naive string search for the text the sellers prompt reviewers to provide "I received this item in exchange for a review..." etc. or more obvious features like "Verified Purchase" It would be much more complicated to infer that the review was compensated vs organic. One interesting signal might be the use of passive words even when describing a negative aspect of the product. I'd guess that organic feedback is less passive when customers have spent money on the product.
`randint(length, length)`
yeah, admittedly not the best code there. It's because it's a range function. Would be happy to take suggestions.
I will go out on (not much of) a limb and say that the same ETL code in python will be way smaller than the same code in in Java, C++, or C#. Maybe half to one-tenth of the number of lines? This means that it will be more likely correct, easier to maintain, etc. I'll expand on why I say this if there's any interest (or disagreement).
https://linux.die.net/man/1/pwgen
The idea is that components don't need a git repo + package + CI etc... Bit stores, installs and also build and tests them (`bit build`, `bit test`.. that simple. It also happens automatically when you export a component.
What kind of exercises are there in the book/online course? Are there only exercises in the online course?
Can you send me an example of your excel file?
Is there any sort of certificate I can get saying I completed the materials? If not, is that something that might get added?
AFAIK, they will rewrite it in Cython, when api will be "stable".
That's really cool, I'm looking forward to trying it out. Writing out a set of argparse commands is tedious, it will be interesting to see how well this library can replace them.
`\\\\`, but you should probably use `os.path.join` or a raw string literal.
Deoplete all the way!
Yeah, sure. I would like to see an example of calling NoneType then. 
Step 1: learn to read Step 2: use your newfound knowledge to read the sidebar of this sub Step 3: go to the sub that is suggested by the sidebar of this sub Step 4: read the learning resource recommendations in *that* sub
Building an quality control toolkit for verification of attributes on items in our database. This will be used by employees at a company we outsource to so I will be creating a GUI and packaging as an exe for them to interact with.
Thanks for the feedback man. I will add that in.
I'm assuming you are using this import since you didn't show it. import xml.etree.ElementTree as ET tree1 = ET.parse('xmlFileA.xml') tree2 = ET.parse('xmlFileB.xml') # iterating finds lower level tags directly, find only gets children for some reason t1as = [x for x in tree1.iter('a')] if t1as: t1a = t1as[0] t2street = tree2.find('streets1') if len(t2street) &gt; 0 and t2street[0].text == None: # set text for empty a1 tag t2street[0].text = t1a.text else: # create new element below streets, set tag as a1, text from tree1 t2new = ET.SubElement(t2street, 'a1') t2new.text = t1a.text tree2.write('xmlFileB.xml');
Makes sense, yes. But why wouldn't any other be used ? It seems like there is a consensus about using Python and not others. Which of those tasks does Python excel and the others suck?
How do you document arguments with it? I'll stick with argh thanks.
Hey, listen, just because none of the individual elements and techniques involved in making Python work are magical doesn't mean that Python isn't magic.
This is awesome, does anyone know of similar videos of large (or even moderately sized) python projects/frameworks? 
Ok, I guess I'll overcome by laziness and will do it :)
Check out this [book](https://automatetheboringstuff.com/).
Strange, they're loading for me. I checked in both Chrome and Safari. What browser and OS are you using? Is it the PNG images that aren't loading, or the LaTeX formulas?
That's actually a great obfuscator if you're not using it for anything serious, requiring performance, etc. Having said that, I didn't test it out.
Try %matplotlib inline On the first line?
We use it even for seemingly simple things in order to create a better experience like figuring out which link on a company's Wikipedia page is probably its logo, to shortening the typical financial descriptions by removing financial jargon i.e.: https://esg.censible.co/companies/Intel 
I think that you should be able to do better than cashier roles man
Spyders Ipython won't accept that: SyntaxError: invalid syntax
Try importing antigravity
Thanks for the response . Yeah I think I worded my question poorly. What I meant is more like a really big use case which has used Python for data science and how it worked out and why Python as opposed to something else?
They also have sqlalchemy, that's awesome thanks for the info
Classes are used to bundle *state* and *functionality*. State can be defined, approximately, as "data that needs to stick around for later". Functionality is code that does stuff with data, regardless of whether it's stateful (persistent) or not. First, before even creating a class, ask yourself: "Does the data I'm working with change over time and need to be preserved and rereferenced repeatedly, or represent distinct 'entities' like users in a database?" If the answer is yes, you might have a candidate for a class. Next, "What does this type represent?" The answer should be, roughly, one or two words. "A car", "A user", "an accept/cancel button" are some examples. The next question would be "Does this type have *behavior*, or is it just a collection of data?" An entity with behavior would be a Car type having a Start() method, a Dog having Bark(), a User having a ChangePassword() method, to throw out some examples. This is where I find most people trip up. They think "oh man I've got a handful of values that I want to pass around my code, better make a class". Probably not necessary. [This](https://gist.github.com/therealfakemoot/1ab4deba0d3d6a758800f0f4e779e094#file-bad_class-py) class is not particularly useful; it doesn't *do* anything. It's just a bucket of data. In situations like that, just use a dict! You can even define a 'factory' function like [this](https://gist.github.com/therealfakemoot/1ab4deba0d3d6a758800f0f4e779e094#file-data_bucket-py) to make it clear what the intent of your data types are. Once you're certain that you've satisfied all of the above conditions, then you can start thinking about your class. Make sure that the class represents *one* thing. You don't want `class CarWithPeopleInIt`. You want to define a Car type that has an attribute describing its passengers. Make sure that the attributes on your class/type are relevant to the 'intimate' details of that entity. A User object in a forum shouldn't really have data stored inside itself related to the admin users associated with the last board they posted in. It's perfectly okay, if your use case desires it, to make a list of forums the user has participated in as an attribute (using an ORM or whatnot) but try to keep things as isolated as possible to prevent cross-contamination: when you keep too much data in one bucket it gets REALLY hard to sort out which pieces are moving in a way that breaks your code.
So I'm actually going through having to deal with some ETLing of XML documents. We have several systems that generate XML log documents. We pull that data (xml files) off those systems, extract the contents from the files and then shove that information into a MSSQL server. The problem for us right now is someone did exactly what you described of writing a python script that gets called with parameters of the input file name from a Powershell script. Unfortunately the way they did it, it is so tightly coupled with that extraction and data transforming logic that when some little thing needs to be adjusted (e.g. the script had a bug in it, the XML files have a bug or the XML files change slightly on us and more data is added) we have to reprocess the entire dataset. The person that wrote it is no longer with the company and they asked me to look at fixing some of it to make it more robust. I know what tools I would use with Java (Spring Integration and Spring Batch) to get a more robust framework setting (logging, scheduling etc) but not sure what to use on python side of things. I don't want to rewrite the business logic (unfortunately might have to anyways) if i can help it and keep it all in one language. Any suggestions on what tools to use/setup to get more of a pipeline setup?
http://stackoverflow.com/questions/23585126/how-do-i-get-interactive-plots-again-in-spyder-ipython-matplotlib ?
Quick question: are the courses and the books that much different? I'm learning Python on my own right now, and the courses are out of my reach at the moment, but I can probably get the books. Thanks and sorry for my English!
Well, python's basics cover most of that: * python3 - improved unicode. it's worth it. * logging: logging module - comes from the java world, so it's a PITA, but it's a standard PITA * scheduling: solution depends on your complexity. I prefer to create event-driven daemons like with upstart. But cron can work, especially if you include a pid-file to prevent multiple instances running simultaneously. * parallelism: concurrent.futures module - for threading &amp; multiprocessing * shelling out: the flexibility to run code in other languages is important. The envoy module is fine for simple stuff, but subprocess is often unfortunately necessary. * compression: gzip module, or shell out &amp; run gzip or pigz for performance That's 90% of what you need for a robust pipeline process in python. Just flatten your pipelines so they're linear and you can trivially hand off a file from one step to the next.
A tad pedantic but right on. I love Python, but I don't like the conditional assignment either. Never understood the rationale for it. 
&gt;I’m not a Python guy &gt;I still hate Python “There are only two kinds of languages: the ones people complain about and the ones nobody uses.” - Bjarne Stroustrup
Hi guys I'm posting a new work here (hope you still remember me). These 3 tilings are basically different: they are not isomorphic with each other. Image rendered with POV-Ray and python's vapory lib (a module written by Zulko).
I think I can understand supporting a new C like conditional operator, but I have a few issues with the authors arguments. Their example with the long block of code ending with a `...long code... if cond else {}` is just poorly written code. This is not due to Python. The value should have been assigned to a variable and then it would be `var if cond else {}`, which is much more readable. I would be interested in how common each speech pattern is. Do people say "If cond, a, else b" more or "a if cond, else b". I don't know. But I think since both are used both should be supported. Additionally, I find Python's conditional operator quite readable and logical. The C style requires one to know that the first item is evaluated if the condition is true, or the second is if false, in Python, I can literally read "a if True, else b" which is much closer to how a natural language sounds.
Thanks for your quick reply! I'll get both books then. 
Actually, I find that once I have the ETL pipeline set/correct, I try to go back and remove pandas, instead using numpy directly or my own class. From a stability, dependency, and testing standpoint, I think it is best to avoid pandas in production code if you can help it.
Ripped straight from the past week's /r/Python front page.
C's syntax is more structured and if you're a seasoned C programmer you'll immediately see `condition ? True : False;` whenever you see a question mark. Python's is easier to follow if you're new to programming and falls more in line with the syntax for conditionals in a comprehension. (Which I think is more stupid and needs to be unified) Comprehension on if; (I wrote something like this today) [item for parent, item in item_list if parent == None] Comprehension on if-else; [item if parent == None else parent for parent, item in item_list] Notice how they're completely different. I've lost count of the number of times I've tried to do the latter without the else part while trying to do the former. If any syntax in Python needs to be changed then this would be it.
I agree 100% on what you are saying. I was basicly saying it is easy for beginner
That is a slightly different problem. If your team is already a Java shop, then use a toolset that you already know and understand. Otherwise maintainance is going to be really difficult over the medium term. If your data is subtly changing over time, you probably want some validation or transformation step before extraction.
Remember that each if statement evaluates one expression, and what one expression is. Score &gt;= 90 is one expression, 90 &gt; score &gt;= 85 is a range in math, but here we do one comparison at a time. You have either gone over elif or and/or at this point. If you are using only if statements, you'll want to write two expressions with an and. So if 90 &gt; score and score &gt;= 85, because it is two statements. A chain of else ifs won't require this because you will test out of the first comparison statement each time. You can probably withdraw from your course at this point in the semester if you think your teacher is that bad, but as a computer science student, we go over the syntax and uses of operators and specifics of the languages and we are expected to experiment and 'get' the language on our own. College isn't spoon fed. 
Cool! I love it!
Nice!
Haha true. I just used that as an example.
If not for some sort of antigravity black magic you would have been infinitesimally small with everyone else in a singularity by now
Thank you!! Ah man I use dir all the time and it's always the same thing, "so, which ones look like functions?"
the see package seems more featured (https://pypi.python.org/pypi/see/1.3.2)
I guess you are pretty much obligated to make a `phelp` now too... That's an unfortunate name to have to stick in your portfolio but it must be done.
Yeah maybe I should an option `verbose` to show full doc for functions.
You could write a little framework for SP-network design.
Very nice. Python 3 support? 
Bloom filters are neat and could be written in 100 lines. [Here](http://code.activestate.com/recipes/577684-bloom-filter/) is an implementation in Python by Raymond Hettinger. His is 20 lines, but you could stretch it out if you needed to.
This is pretty interesting! Looks fun to implement.
Maybe the author should look for jobs that don't have any chance in coming into contact with a language he admits he doesn't like. That way we can avoid pointless articles like this.
Awesome, thx
What word do you suggest I use?
There is another [library](https://github.com/jaybaird/python-bloomfilter) written in C that has a better API imo. I use this particular library when I want to employ a bloom filter, but I mentioned the pure Python implementation first because I figured you will need to show code.
That's way cool. If you'd like, you can rip this off a bit. It's similar to what you do, but also throws in the options to distinguish between public and private data members (using the underscore). It also has the ability to restrict certain names from being shown. I like to use it in my more complicated classes. from types import MethodType def __object_attr(obj, mode, keys_to_skip, attr_type): """list object attributes of a given type""" #print('keys_to_skip=%s' % keys_to_skip) keys_to_skip = [] if keys_to_skip is None else keys_to_skip test = { 'public': lambda k: (not k.startswith('_') and k not in keys_to_skip), 'private': lambda k: (k.startswith('_') and not k.startswith('__') and k not in keys_to_skip), 'both': lambda k: (not k.startswith('__') and k not in keys_to_skip), 'all': lambda k: (k not in keys_to_skip), } if not mode in test: print('Wrong mode! Accepted modes: public, private, both, all.') return None check = test[mode] out = [] for k in dir(obj): if k in keys_to_skip: continue try: if check(k) and attr_type(getattr(obj, k)): out.append(k) except KeyError: pass out.sort() return out def object_methods(obj, mode='public', keys_to_skip=None): """ List the names of methods of a class as strings. Returns public methods as default. Parameters ---------- obj : instance the object for checking mode : str defines what kind of methods will be listed * "public" - names that do not begin with underscore * "private" - names that begin with single underscore * "both" - private and public * "all" - all methods that are defined for the object keys_to_skip : List[str]; default=None -&gt; [] names to not consider to avoid deprecation warnings Returns ------- method : List[str] sorted list of the names of methods of a given type or None if the mode is wrong """ return __object_attr(obj, mode, keys_to_skip, lambda x: isinstance(x, MethodType)) def object_attributes(obj, mode='public', keys_to_skip=None): """ List the names of attributes of a class as strings. Returns public attributes as default. Parameters ---------- obj : instance the object for checking mode : str defines what kind of attributes will be listed * 'public' - names that do not begin with underscore * 'private' - names that begin with single underscore * 'both' - private and public * 'all' - all attributes that are defined for the object keys_to_skip : List[str]; default=None -&gt; [] names to not consider to avoid deprecation warnings Returns ------- attribute_names : List[str] sorted list of the names of attributes of a given type or None if the mode is wrong """ return __object_attr(obj, mode, keys_to_skip, lambda x: not isinstance(x, MethodType)) 
Really nice, good work. :-)
awesome work, will give it a try. But from looks of it, I really like it. Thanks man .. 
Python is such a life saver. If you need to check something quick, bang out a python script in 10 minutes. Or try C++ and break down crying an hour later because your templated const interator reference thing does not want to compile.
LOVE IT! Thank you sir!
So glad you like it.
I was 12 when I started with ATARI BASIC ;) Then I was waiting couple of years for my first PC... I had it when i was 18 and i was learning Turbo Pascal. I had no books, not internet, so it was really learning by trying... After 2 years i jumped in to Delphi and created my 1st bigger project - tic-tac-toe over internet. It resulted passing my IT classes semester on 1st school day on Delphi classes :) In the meantime i was playing a lot on mIRC scripting and developed my own mIRC bigger script being used by thousand of people but that was my road stop until now. I started learning python last year and i do it really from time to time, as i don't have too much time to it. Some people read books on their way to work/home, i read my python books. Although I don't code too much and i don't have experience, it makes me happy reading about different not-so-complicated projects, especially on reddit. I read learn python just for my own satisfaction and that feeling that i always wanted to be programmer, but I'm not gonna jump on that way, i make it my side hobby. I'm just reading reddit, looking what people created and trying to understand the logic they used.
I don't know enough to answer your specific question, but I do know that you often have to register each thread with python. They provide an API for it.
Anything was better than the old website, but this still needs a lot work. Look at the crazy logo in the top left "pip3 install pygame"; are geocities memes a thing? Why doesn't pygame just make their homepage, their bitbucket page? "Ok, but where is the bitbucket link?", I hear you ask. I found the link here, on this broken page [https://pygame.org/wiki/cvs/source](https://pygame.org/wiki/cvs/source) which reads: &lt;p&gt;Pygame revision control is now done with Mercurial. The new &lt;a href="https://bitbucket.org/pygame/pygame/wiki/VersionControl"&gt; instruction page.&lt;/a&gt;&lt;/p&gt; link: [https://bitbucket.org/pygame/pygame](https://bitbucket.org/pygame/pygame)
I've answered this on stack overflow. http://stackoverflow.com/a/26570708 I'll be happy to answer any questions here. Edited: fixed URL.
By the way, construct version parse not only ip, but tcp/udp layer. And probably all parsing libs have different "level" of parsing deep. So, it looks pretty unfair.
It's beautiful! I love it :3
I disagree with you.The new page looks actually decent. The last one was shit, but not this one. Some people just have to cry about anything no matter what you do. 
Pandas is numpy. What do you think could go wrong? 
That first one is gold. Loved it.
Thank God it's in Python 3 :D
Maybe "dir for humans" would be better?
sorry you're being downvoted. you're right, that page still looks like hot garbage.
Well, they are different because they are doing two different things. The first is filtering on items that have or don't have a parent. The second is syntesizing a value for every item in the list using some conditional logic on the items, without filtering. You could even write: [item.name if parent is None else parent.name+'.'+item.name for parent,item in item_list if isinstance(item, NamedThing)] Now you are filtering *and* synthesizing. (I do find that adding some line breaks and indentation helps make these expressions easier to follow.)
``when`` is reserved for contextual blocks, it makes no sense to use it for a conditional in a comprehension.
I know the no in that image title on imgur is a no no.
All of the tested frameworks include full level 2/3/4 support. The packet I've used included a nonsensical TCP segment, so parsing should have ended on level 4. As far as I can tell, all the frameworks parsed everything after I've triggered access to what's parsed (by accessing IPv4 header field). So, there are probably *lots* of things going unfair there (for starters, it's unfair to compare networking-only Scapy to all-purpose Construct), but this is not one of them.
It's compiler's job to tell you when you are using something wrong. Oh wait...
Last time I use "for humans", many people said they're tired of it, so.
Yes the double space
Because I didn't realize using a Python2 REPL makes people think it's Python2 only.
Type less.
It matches the full word, so it's case sensitive.
I can't think of any reason you'd use the Python 2 REPL today, so yes, it makes some people think you still live in the Python 2 world.
A complete pile of crap, please don't bother if you haven't all ready read it.
Python's compiler is fine thank you, but additional tools such as linters also help out.
great!!!
Sweet. Starring it for my next Python project.
Cannot live without it!
So do you accept pull requests? Because I'd really like to make `pdir(foo) / 'query'` do the same thing as `pdir(foo).search('query')` (and also make `search` return a copy rather than modifying the original object)
You could use `sys.modules[__name__] = PrettyDir` so if someone rename the module to another name it keeps working.
Issues created: https://github.com/laike9m/pdir2/issues/1 Trying to fix.
Agreed.
I hacked together a script to convert my Magic the Gathering card database from Magic Assistant( https://sourceforge.net/projects/mtgbrowser/) format to the Decked Builder (http://www.deckedbuilder.com/) format. It then merged it with my existing Decked card database. Pretty easy and straightforward, but gratifying.
Will follow
I really like how you organized it, but it'd be nice to be able to optionally remove certain functions either by specifying them explicitly or just all private methods. 
At least use proper capitalization on your _first line_ of text.
I don't want to use regex for search, wildcard may be supported in the future. Now you have to use `pdir.s('len')`.
I could definitely live with this being part of ipython, nice work.
Like how?
Why not just use bootstrap to make it look modern? It's quite simple.
This repo has more links https://github.com/amygdalama/python-internals
just looking at the demo code, it seems a bit odd to me that you're specifying model field datatypes with strings. Instead I'd consider something like StringField(...), IntField(...). A lot less prone to spelling errors.
You don't type the first example. That's what's happening under the hood that lets you just type "import pdir"
I think you might want to check out import this
hmmm... then instead of having different fields, make Field an enum or pseudo-enum and do it like this: `Field.string(...)`, `Field.int(...)` You can still do it in one import that way. It's really poor practice to allow or expect strings to be used over and over again for core arguments.
&gt; Although practicality beats purity. It's a tool intended for use in the REPL. Reducing keystrokes seems fantastic.
I'm not on Github :-). Maybe Ill create me one some of these days.
Separate the E, T, and L phases of the process into separate programs, so that intermediate results can be saved. Put shared code in a module that they all share. Using standard python libraries should make it pretty clean (see /u/kenfar's comment)...if you are able to put in a little time learning python. 
They did use bootstrap
No idea why you got downvoted. You're perfectly right. I would even replace "some people" to "most people" in your sentence.
And the name "pdir2" doesn't help either.
Don't use the system python, install a new version with homebrew. It'll save you a lot of headache trying to install packages, as the system python is protected by SIP.
You've got downvoted, but you have been misunderstood. I think you should keep it cool, make an edit and explain that `sys.modules['pdir]' = PrettyDir` is a part of the implementation, and it's so that users can type `import pdir` instead of `from pdir import pdir`, which matters in REPL tools.
Hahaha why all the downvotes on this comment?
`Alt + p` is the default, but you can configure it in `Options &gt; Configure IDLE` `P` for previous if it helps you remember.
OK, correction. You can select any line of what you want to repeat and press Enter.
Awesome thanks.
I was immediately skeptical about whether this this would be worthwhile. I was sold after the first 15 seconds of the console recording. Great work!
Agreed it is a great video series. Here's his blog post. http://pgbovine.net/cpython-internals.htm
I believe that is the road I'm going to be headed down. I think we are going to have to do a type of ELT rather then ETL as what happens is if we translate the data wrong, we have to go back and reload the entire dataset. If we load it to the system as raw data, and then associate the derived columns with the raw data and the translation logic that goes with it. That way we could change that logic on individual rows if needed to extract it differently instead of reprocessing everything.
I've worked on this problem some and came to the same conclusion to using the maxmind data. We've been associating both the country/region and organization information from maxmind with ip addresses. The cost of the [data from maxmind that includes the organization](https://www.maxmind.com/en/geoip2-isp-database) is rather cheap ($24 a month or so), and directly gives you the information that is being derived from whois queries in the article. The organization will directly give you amazon, linode, microsoft azure, google cloud, etc.
Okay that makes sense thanks, I'll read the link as well. Thank you very much
You can submit issues/PRs here: https://github.com/pygame/pygameweb Also, their bitbucket link is in Development on the top bar. 
Just one vowel in Python. O.
To be fair, it wasn't the start of a sentence. 
"importy" me_irl
&gt;In modern python there's not really any difference between a type and a class. Metaclasses are types, and metaclasses are classes, but classes are not metaclasses.
Hi all - I posted this to r/hacking also, not sure if anyone here has any interest in this sort of topic, but mainly wanted to share the Python code. I'm still pretty new to Python, so any feedback or input would be greatly appreciated.
Imagine you have a function that takes a lot of args, by the time you have added all the type hints the length of the args could have almost doubled. (depending on how long the original args are) Works fine for functions that don't require many args though. 
They are a must when figuring out your pipeline, sure. Once you have figured it out though, you want to trade that flexibility for stability.
That's a bad argument. You could use the same logic to claim that shorter variable/function names are best, or that "compact" code is better than more verbose, easy-to-follow code.
I was thinking something similar to what I did. I don't hugely care about the argument names. pdir(mode='both', keys_to_skip=None) # gets everything pdir(mode='private', keys_to_skip=None) # gets the _ methods as well pdir(mode='public', keys_to_skip=None) # ignores the _ methods If you want to ignore the class or builtin or functions, then you could flag those. That would allow a package developer to define how they want to use it (e.g., in object `obj.pdir()`) and allow for user values as well.
 from pdir import pdir as dir
Maybe you're not flushing the stdout buffer?
Write tests for it or I'm reverting your changes love, Ops
Cool, another Pythonista user! I really thought the Pythonista community would be bigger, but I guess Python developers don't go for iOS? Hopefully there will bee more Python users in the iOS environment when BeeWare beecomes more popular.
It takes ~15 seconds and is absolutely worth your time. Github is one of the best things to happen to programming in my short lifetime, up there with stackoverflow 
That's super weird, I've never seen that used in python before
Hi everyone, Our startup is called Gradepen - www.gradepen.com - and we are based in Recife, Brazil. A month ago we launched this App for grading exams with the camera of smartphones and tablets. Here are two videos explaining the idea. The first video shows the answer key reading on the iPhone and the second explains the complete proposal. The App: https://www.youtube.com/watch?v=oAoZRt3hMEc The Proposal: https://www.youtube.com/watch?v=ZNaF7MId--U The Brazilian user base is rising consistently, and now we are trying reach teachers from other countries and Google Adwords does not seem to be helping with this. So, we welcome any feedback about the tool itself or about how we could get into other markets or what would prevent teachers from using it where you live. The App is free for exams with up to 5 questions, but we can give away promotional codes to anyone from this community. Just send me a private message. Gradepen, created by teachers for teachers!
Political? Just stop jumping to "this is useless" ultimatums and we can all be friends. Nothing political going on here mate 
&gt; You should group arguments into a class or namedtuple to limit the number. Care to elaborate on that? Its only recently I have been running into this issue, normally id have a few args and type hinting wasn't an issue, but then you run into something [like this monstrosity](https://paste.ofcode.org/J4XYHLiUDdrt3GEApjciZ9). And to clarify that isn't just some thrown together troll code, that was literally what my advanced search functions args looked like until I moved to Flask-RESTful. 
This is one of the worst jokes I've ever encountered.
Too familiar!
The problem is that anything saved to disk can no longer change size or be deleted without rewriting all of the objects that come after it. You may want to think about making the object to handle a folder, with each file in the folder representing one of your attributes. I don't know of anything like that, but it sounds pretty simple to make. 
I like them. A lot of times they just serve to support my editor, but they also act as additional bits of documentation throughout my code. I don't use them religiously, except lately I've been trying to make sure all public facing methods in libraries have type annotations. 
What's with the "cx"? I know there's cx_freeze also. Does this stand for something?
I generally agree, and no longer use it much. That said, I think there are three scenarios where it is useful: 1. Refactoring. I rebuilt and generalised a small library at work a while ago, and starting by adding type hints saved *so much* time by pointing out the edge cases I forgot to convert. 2. API boundaries. It should be a small part of your code, used by many people who don't want to know about the implementation, but should love machine-checked documentation of the interface. This also discourages hard-to-debug (and document, and test, and...) magic - which I consider a feature for public APIs. 3. Codebases or teams so large that nobody understands it all. Personally I'd avoid such situations, but I assume Dropbox et al have their reasons... On a spectrum of 'normal Python code' to 'black magic' (eg metaclasses, decorator abuse...), the whole point of PEP484 is to let you move off the *other* end of the scale. Much like magic, this is usually a bad idea but occasionally indispensable.
I have two, but only one of them is a Python. 
Does a linter not yet exist?
that's right, no one wants to import xxx from xxx in repl. I don't care those dvs, people use it that's what matters, and I bet people use it less if I design api as he said.
YEAH
Vagabond is similar to this but it is made to work with chef (not sure about test kitchen)
It doesn't help that VirtualBox has a habit of crashing my Mac. I just switched to vagrant-parallels. Not only is it stable, it's faster. I'll take a look at vagabond, thanks. 
I don't see how it "butchers" duck typing. The type hints aren't used at runtime, unless you use them for something. So far nothing that ships with Python uses them at runtime--it's all offline static analysis. The only effect on runtime behavior is the calculation and storage of the annotations themselves, which should be a so-small-as-to-be-hard-to-measure cost in both CPU and RAM.
&gt;The bulk of bugs in code are not due to type mismatch instead they are predominantly logic errors or race conditions. This doesn't match my experience with python in practice. The logic errors usually come out pretty easily from manual testing but the type errors are harder, especially on python 2. It's too easy to miss something being None when you didn't think it could happen, or hitting a Unicode error, or a refactor that breaks something missing a proper test. The type errors are often around edge cases, and they happen most in production, at least with the python I've seen. 
What I mean by that is currently in the spec / examples I have not seen possible to do "or" or "under these conditions I expect / will produce". So now stuff like `subprocess.run` if that was to have type hinting, how would it expect either a string or a list depending on if `shell` was `True` or `False`? Or what if my function will output in either a dict or json string depending on input? And also as stated elsewhere, as it's not used at runtime to enforce anything, it's simply documentation, which we already have. Type hinting should go in`:type:` and be done with it IMO. 
if the answer isn't "with version control," you're doing it wrong 
&gt; The bulk of bugs in code are not due to type mismatch I couldn't disagree more. 90% of my runtime errors in Python are type mis-match problems. With Statically typed languages, my code just won't compile. With Type-Hinting, I can see (in PyCharm) well before run time that I've totally borked the type going from one method to the other. Rarely are my runtime errors logic or race condition issues because I did proper TDD or (at the very least) wrote my Unit Tests afterwards and spotted my edge cases. Also, when I'm wrapping a REST API and can't remember all the fiddly little fields and whatnot, a strongly type-hinted method or object saves my ass every time. As an aside, I wish PyCharm would show the expected type when I hit 'Cmd-P'. That would be soooooo helpful. Anyway, my shop uses type hinting as much as possible. Most of us come from enterprise world (C# or Java) and find that type hinting is the next best thing to statically typing. Especially when writing Line of Business apps. You practically NEED that type hinting. Also, I wish so badly that Python had Method overloading so that I could create true alternate constructors. This 1 ctor thing with Python pains me so much.
But that's the entire point of type hinting, is to say "pre-runtime, what is this type?", so IMO it goes directly against allowing non-specific arguments (even if only checked by IDE), hence butchering. Comparatively I'm a noob with just under a decade of Python under by belt ;-) I agree it's not going anywhere, just answering the question of what I thought about it. 
Git was how I lost the code - I accidentally ran "git checkout --" on the wrong file.
Why do you want to do this out of curiosity? You could do this using python's magic methods. I would create a base class with a method that uses introspection to analyze it's own attributes, then saves those attributes to disk whenever an attribute on the object is set. That way you can use that base class to create any new class you might need. I would have it save the information to a database so you don't have to keep opening a file handle, but if you have to write it to a regular file, just make sure you open the file once so it doesn't slow things down. Each object would need it's own file/entry.
Yes
Meh, I've rm'd a local git repo before. 
Also editor's backup files. I use vim with automatic backup and saved my ass a few times (like when you write long function and haven't commited yet).
Well, I never coded in Java, but C#, yes. And certainly the OOP is forced on you in C#, but I've been impressed with the way that the MS team has embraced functional programming via LINQ, etc. (C# 3.0 and later.) Our team embraces functional programming in our Python a lot, actually. We definitely strive for stateless side-effect free methods/functions, but still, OOP wins a lot when it comes to software architecture. So we find that type-hinting saves the day. As such, we use type hinting by default. It seems arduous at first to those not familiar with statically typed languages, but it's pretty natural after a while. In short, I consider type-hinting good discipline. There's little downside and mostly upside.
i have git repos inside tarballs: source control != backup just like a RAID5/RAID1 is not a backup. 
`git add` and the reflog should be your new best friend.
&gt; I consider type-hinting good discipline. Fair enough. For me, I consider type hinting to be a solution in search of a problem. There are better techniques available for documentation (like doctests). And there are better paradigms for large coding projects: flatter hierarchies, preferring first class (or near first-class) types over objects, pipelining/coroutines.
I've recovered code with the reflog a bunch of times. Doesn't help if you lost the code while cleaning up in preparation for adding your work.
The thing that bugged me most about Python when I first started coding in it was that I didn't know what I was supposed to be passing into a method. I had to read the docs. With type-hinting and a good editor like PyCharm, it just shows up. Prototyping happens so much more quickly. I guess a lot of programming comes down to pain points, really. And not knowing what I was supposed to be passing in was a pain point for me. Anyway, thanks for engaging me in this discussion. It's something I think a lot about and the more I talk about it, the more I understand the way other people think about the problem(s) in programming. Cheers! :-)
I was hoping this was the entirety of the article, not the top comment. However top comment is acceptable.
I think some of the comments in here must come from quite some novice developers. Tricks like this are useful, when something goes to shit (from either your own stupidity, someone elses stupidity - or even a random act of comp malfunction). They can, and will happen, even when your process is tight. So thanks it's useful to know, and store it away in the back of our minds as a way for us to potentially salvage what we may have lost.
`earlier` in vim has saved me.
I was involved for a while, but the people working on it *really* don't know how to make a coherent type system. They're just throwing stuff at the wall and seeing what sticks.
Click the button every time you make a mistake while coding. At the end of the day you can ask Alexa "Did I do good today?" Alexa will response with the following: if clicks &gt; 0: print("You screwed up {} times, you will never succeed".format(clicks)) else: print("You are lazy, work faster") In the end, we will all be better with the IoT Button (somehow).
What does the output code look like? Does the decompiler recover local identifiers?
This is very impressive, good on you and thanks for sharing!
Extremely creative! Good job dude.
Also Intellij's local history.
Yup variable names were al there as expected. I think comments (with the exception of docsttings) get stripped out though.
I was using a volume to share the folder with my Mac.
the post is an instructional. not a question
Fair enough. Good article, thanks!
Got, Thanks!
Honestly as a developer I hate this kind of design. It's slow, ugly, unnecessarily padded out and just a pain to navigate. Why carousels? Why the fade ins? Why everything has to be so far apart from each other? I think the current pygame design avoided these issues. 
:)
Great! Would you consider making a grouping for methods rather than grouping methods undir ``other`` and showing doc strings for methods? This would really increase usability. My particular use case is ``pandas``. So, while your ``requests`` example shows really nice doc strings, the ``pandas.DataFrame`` don't have doc strings for methods. import pdir, pandas as pd df = pd.DataFrame([[1,2], [3,4]]) pdir(df) As can be seen, a lot of the interesting ``pandas`` methods are grouped under ``other`` and lack doc strings. Great work still :-)
ITT: A lot of people who believe everything works exactly as it should and mistakes never happen. I'm a novice developer and even though I may not make this mistake and lose data there is good information I am putting right into the toolbox.
&gt; I have not seen possible to do "or" https://docs.python.org/3/library/typing.html#typing.Union
I like Pycharm but I still find myself using Notepad++ a lot.
I go with Sublime Text 3 and the Anaconda Plugin which gives you autocompletion and other useful features.
Have you read the article?
ITT: Post: How to recover from a mistake Comments: Useless post, you should have not made the mistake I think its very useful to know you can do this this kind of thing. Will remember this is possible if one day I have a critical moment like yours ;)
I have develope python since 2000. And i use only vsc. 
Bring back the old site, I say. The new one looks like crap.
That's a big OF.
average usefulness at best, ugly all the time
The formatting needs improvements, for sure. I'm not familiar with pandas, though,how are those supposed to be grouped, what do you think?
I use Sublime Text 3. Tried some IDEs but for my projects a plain editor works fine. I also used vim for experience but it's too much learning vim instead of programming. 
Reading a bit of the comprehensive tutorial it really does seem easy to use. Great job! 
"for humans" ... again? i thought we were finally through with this.
Jesus, this again. Use the damn search feature. 
I've had to use uncompyle6 before, in order to recover a legacy application's source code which had been lost in time. It works great! :)
Yea, you're doing it the opposite way it was intended so not surprising. The point is to add typing gradually at critical points as the program becomes more complete and the signatures/APIs stabilize. If you start with typing it's almost always a mistake. 
See https://github.com/laike9m/pdir2/pull/6. Methods are now grouped into "function".
To me it's the reverse: it's good when added after the fact once the APIs have stabilized and you've made type errors a few times. That way you're not wasting time. 
Yes i've tried that and it still gives me the same error.
Good call, i didn't even realize. Thanks
Okay I upgraded to Debian 8. Everything working fine. Thanks a lot
Bjarne is just making excuses for creating a steaming pile of shit though. 
I just ibstalled it via apt and upgraded pip via pip's internal command
Starting with obvious stuff: does 'C:\Program Files (x86)\PsychoPy2\lib\site-packages\imageio\resources\ffmpeg\ffmpeg.win32.exe' exist?
Academic research on the helpfulness of typing in programming languages has shown that typed languages, while initially harder to learn for beginners, are much better for more advanced developers. This is not to say dynamic typing has no place however. C++, C# and other languages are getting more dynamic-like typing, so clearly there is a use case and need. So I think it is actually quite useful. Also, typing should not make your code any more complicated to understand, as it is only needed in annotations of complex types (eg you don't need to annotate `a = 2` for mypy).
People like you are why girls don't get into stem as much. Just look at your comment history
no because one is a joke, the other is stupid
Normally Python just works better on Linux and Mac. You should use homebrew on Mac to install Python and virtualenv to manage dependencies. 
How is there duplication when you can choose to use either annotations or docstrings? I believe MyPy and PyCharm support both. And you're not forced to give type hints to all arguments. It sounds to me Python and the tools currently behave exactly like you prefer. 
Yes, I've gone into my program files to look and it does :/
There will be a 0.0.2 in one hour that includes all current changes.
This seems similar to the Cordova approach, in that it's wraps a mobile web experience in a mobile app container (as opposed to creating a true native app). Is that right?
OP has already solved their problem. If reading the problem description and these comments causes just one person to google "version control" then the world is a better place.
You reminded me of [the story about recovering from an rm -rf](http://www.lug.wsu.edu/node/414).
I've gone back and forth with it, but am now using it pretty heavily because: * The code with the annotations is more readable than the code without - *when you're looking at a large number of functions interacting with one another*. * It's actually eliminating defects: like almost everyone else I don't have complete coverage of my unit-tests. Where they're missing the typing helps. This is on an 8000 line codebase using mypy and enforce.
Agreed - it does need more contributors. It has some issues and limitations, but I still find that it works fine for about 80% of my codebase.
If the file was previously committed you can get it back. If not and you were actively working on it, Sublime lets you "undo" the change with cmd-z. 
You can use it to analyze malicious code that got onto your system
Gee, you might be right. I don't know much about stub files--for example, I didn't realize they supported method overloading.
&gt; They can, and will happen, even when your process is tight. I'm not sure that's true. As a rule, I can rewrite any code I haven't pushed to a remote repo pretty quickly because I've already made all the decisions that need to be made, the changes are about a single coherent subject, and I have the shape of the code in my head. I'll do a commit and push to a remote repo long before any of those assumptions is in danger of failing. I suppose if I were losing files *constantly* this trick could be useful, but for the occasional loss, it's much faster to just rewrite the code. Large enough code losses that I can't just rewrite in 15 minutes are close enough to impossible that I honestly don't think there's much chance of it ever happening to me.
I was using sublime, but I didn't have the specific file that I deleted open in a sublime tab at the moment I deleted it.
Well, good thing you knew how to get it back with Python's internals. :-)
Really cool. Gotta try this out
(:
Ha ha, very funny :P
Huh? Wasn't supposed to be. 
Great! Now do that a few months and a few new projects later.
I thought you were being sarcastic :| If you have type hints, you would prevent type errors from occurring in the first place. I would see running my code and encountering TypeErrors as more of a waste of time than adding hints.
Depends on how early in the process it is. If it's very early you might be changing types a lot so changing the signature is just more work. Especially when using a proper tool like PyCharm that will infer type information anyway so it avoids type errors as you type. 
`__name__` will be the name of the module unless it is the module being run then it will be `'__main__'`. So this is saying if this is the file you are trying to run then call the `main()` function. So `main()` will not be called when the file is imported.
If everything is documented properly in comments, it's pretty easy to remember what was done and why! /s
&gt; Tools for injecting arbitrary code into running Python processes. Nobody in this thread mentioned a single thing about security, so I guess I will. If you decide to use these steps, be sure you understand what you're doing before you start blatantly writing sudo commands. It might be prudent to fully remove these packages when you're complete with the recovery process. Legacy or one-time-use code can be the weak link.
I'm not disagreeing. There is definitely a place for typing. I like using python when I'm trying to quickly test ideas and don't want to be burdened with boiler plate. This is why I'm not ecstatic about typing in python. I realize other developers use python for different reasons. If typing helps them accomplish their task, great! I don't foresee myself using typing in python.
As /u/AngriesSCV said, that's never something I'll need to do - data loss a few months later is more or less impossible. All my code is pushed to a remote repo, and that repo is automatically backed up daily. Once that code has been out of my hands for 24 hours, the statistical probability of ever losing any code I wrote is pretty damned close to zero - it would require the simultaneous failure of my local copy, the remote repo, the server I deploy the code to, and the backup server. EDIT: To be clear, everyone makes mistakes, and I've totally lost code at times in the past when I didn't have as robust a process, but it hasn't happened to me in several years now, and it's really hard to come up with a plausible scenario where I would lose a meaningful amount of code. If you're committing and pushing 20+ times a day, and have a robust backup system, you're in "more likely to be hit by lightning than lose much code" territory.
My first programming language was Turbo Pascal. And this sounds stupid. But you can do anything you want, of course. :0)
Generating your source code back from bytecode is a backwards process that doesn't always yield serviceable results, and is language and environment dependent. There's a lot of value to saying "this is terrible, X is better and proper" here. There are a lot of novice programmers here who should probably learn proper VCS and maybe even get a file history plugin for vim or their IDE of choice. EDIT: I never wanna work with anyone who disagrees with this :S
How did you even think of that? I probably would have given up and resigned myself to rewritting the code. Fun little story, similar thing happened to me in Eclipse a few weeks ago. Checkout out another branch before committing what I had wrote (cause I'm stupid) and it erased my changes. Luckily Eclipse saved that as edits, and CTRL-Z brought back all of the code I had written.
This could have interesting applications/implications in security, right?
A question for the author... why do your graphs not have the axes go through zero? The Travellers Dilemma plots look like the equilibrium strategy is some small but non-zero value for strategies 1 and 2. Other than that strange design choice for the graphs, nice article. Thanks!
It depends on the data, but my go to formats are numpy savez and h5py. Always use a binary format for large files. 50 GB is too big to be human readable natively, but there are hdf5 viewers out there that you can use to go with h5py. You really should never use pickle for persistent data. On top of that a minute to save/load 60 GB of data should be what you should expect. 
ITT Post How to recover a bequest application's source code back from bytecode is a really good tip.
That's not quite the same thing as the poster is describing though. He doesn't want the type-checker to treat the return value as "either a string or a dict". He wants it to statically treat it as "only a string", or "only a dict", but according to the value of information only available at runtime.
Oh, okay.
&gt; Also, I wish so badly that Python had Method overloading so that I could create true alternate constructors. This 1 ctor thing with Python pains me so much. I'm not sure I understand you. Python has alternate constructors. E.g. `dict.fromkeys`. Can you explain what you mean for those who don't know what "true" alternate constructors are in the C# world?
It's still only a young project, but it's pretty easy to use and mostly feature complete.
pycharm 
That is unreadable. Not just the code itself, but the formatting on the paste site is awful. They've taken the *smallest* syntactic element, the period `.`, and given it the *lowest* contrast they can (red on a black background). I spent ages trying to work out what language it was written in, where "hug types" was valid syntax in a function definition. In any case... looking at the function, you have my sympathy.
Yeah, sure. I'd love to be able to define a class wherein I have a default constructor which takes no parameters and it just creates my class with default values. Then 1 or 2 alternate constructors with different sets of parameters for very specific instances. Currently, Python only allows for 1 ctor with lots of optional parameters. This works in some (many? most?) instances, but becomes a pain point (for me) in other cases. Some people don't seem to mind it, though. In the C# world, you can have optional parameters (as of C# 4) in your constructor, but you can also have alternate constructors with completely different sets of parameters because C# allows Method Overloading. That's all I was getting at. Honestly, I admire both C# and Python because they're always progressing and getting better. They take good ideas from each other, too. (Eg. Python got async/await from C#)
It's not about tone, you're just saying you are capable of predicting the unpredictable. It only holds water to a point. A more humble person would acknowledge that despite their preventative actions and good practice mistakes still happen. Maybe it's not even your fault, maybe it's a coworker that screwed up and if you'd read something like the OP's article you'd be able to help. Maybe you're just having a terrible day and do something irrational because that's exactly what people are - irrational and inconsistent. Your argument comes across like saying you don't wear a seatbelt because you're a good driver that drives safely and never crashes. What about when you *do* crash, what about if someone crashes into you, what if a fork of lightning hits the road and sends you into a tree? You can't prevent every possible bad thing from happening so it's valuable to know what to do if things go wrong rather than think you're perfect. That's why people are downvoting you.
&gt; It looks like nobody mentioned docstrings with description, arguments and result types instead of annotations. That was discussed to death when the PEP came out for discussion, and conclusively rejected. Problems with using docstrings for type hints include: - you have to duplicate the information: first you write the parameters in the function def, then you have to write them out again in the doc string; - docstrings aren't always available: they can be disabled by the interpreter, in which case the type hints aren't available at runtime; - sometimes you want to type-hint a function that is small enough that it doesn't need a docstring; - you cannot add docstrings to variables and class attributes; - there's already three or four (or more?) different third-party conventions for docstring parameter hinting, and so whichever Python picks as the official format, you're going to piss off a lot of people and make a bunch of libraries obsolete; - most importantly, it moves the type-hinting information away from the parameter itself. &gt; For me this looks much better, since it is like most of python libraries done. Nearly every other language which has either mandatory static typing or optional type hinting keeps the type as close as possible to the variable name, e.g. Pascal's `n: int;` or C's `int n`. Putting the type declaration potentially many lines away from where the function parameter is first used is a very strange thing to do. 
I've had that first hacking book for like 2 years and haven't spent enough time to finish it!
good point. then again I don't write code with so many nested levels, there ARE better options. Actually one thing I've learned since I've been doing a project in python is that I actually don't like curly brackets. Fuck curly brackets everywhere. And I've used C/C++/C#, Java, and R Python kinda feels like bringing fun back to programming. 
&gt; Github is one of the best things to happen to programming in my short lifetime, up there with stackoverflow o_O 
do you not understand complexity?
Post the message on /r/learnpython along with a traceback and any other relevant information.
I learned it too. I picked up programming with no training 10 years ago. You're smart. You'll figure it out. How hard is it to look at a few examples and match it to your problem? Everything you don't know about numpy, you can google. The numpy docs are incredibly good. Now go try to learn something far larger and far more complicated like VTK (3d rendering package), which has examples that are 50x longer, are far more interconnected, and written in languages like C++ and TCL. It just takes practice. 
Technically yes, but with the first release it won't be very easy. I have a todo for spreading larger payloads across multiple pyc files, which will make this easier. Part of that work will also involve accepting a payload from stdin to allow for such a task. 
Try googling "priority queue Python". Depending on your exact requirements you might want to use heapq or PriorityQueue. Both are available in the stdlib. Good luck!
Glad you said this. I couldn't think of a great example, but I've done that. I use git (as carefully as I can) and rsync my files to a remote server every couple days. That solves most of my problems
This idea of an object handling a folder with files and subfolders is exactly what I'd hoped to find, and I've been surprised at my inability to find something like this already written!
Thanks for reading! That's actually just matpotlib 2.0 defaults so I can't say I did anything too clever there. I could have potentially move them it but I'll plead laziness :) FWIW the values are in fact zero there (but agree it's not super clear).
Here you go: import builtins builtins.end = exec("pass") 
I'm creating a dating website called "humans for humans."
Mistakes just happen. I applaud that kind of environment. 
the best way I can think is using a dict with a separate heap (python has the heapq module, which is kinda weird to use until you get used to it, but works great). You can abstract it to a wrapper structure that takes care of updating them both and provide the desired operations. 
As /u/cedenday mentioned. Your working dir is likely not what you expect. import os; print(os.getcwd()) You can echo that string into a `temp.py` file adjacent to your script and execute it how you would run your correct script. Since you are not getting an error (so I assume), it is likely the .csv files have been created but are not where they should be.
It is absolutely important. I cannot believe you're getting down votes for that.
You don't have to if you use version control. OP said this was code that he had just written, which explains the lack of version control, and NoLemurs specifically responded to that –"any code I haven't pushed to a remote repo". A few months later and it's *still* not in version control? That isn't going to happen "when your process is tight".
&gt; you're just saying you are capable of predicting the unpredictable. He didn't say that, you're putting *very* different words in his mouth. All he's doing is seeing one specific problem – "I've accidentally deleted my source code" – and pointing out that normal working conditions (pushing to a remote repo regularly) mitigates the effort involved in fixing the problem, because anything not in version control is a small amount of code that is fresh in your memory. 
Hahaha thanks, didn't see that
What OS, what python distribution, etc.?
Nice, I like it. Could you make search accept mattern matching a la ``fnmatch`` from stdlib? Should be easy: x = pdir(obj) # use the below somewhere in x.search import fnmatch for p in x: if fnmatch.fnmatch("f*", p): # "f*" is a string from x.search("f*") yield (p) # match pattern rather than exact I think pattern matching like this is better than rexex'es a la ``re`` for this use case as the matching is only done to filter the list down to a managable size and not for programatic usage... 
MacOS Sierra and Python 3.5 (Python 2.7 is preinstalled too if that matters)
If running as admin does not work and the executable exists, you could try changing the permissions on `ffmpeg.win32.exe` (right click -&gt; properties -&gt; security). I'm not sure if this really is a permissions issue, because I've encountered `[Error 5] Access is denied` on Windows even when I'm sure I had the right permissions, and you've tried running as admin. It could be a path thing, so you should try setting the `ffmpeg` path manually (as per imageio's [docs](https://imageio.readthedocs.io/en/latest/envvariables.html)): import os os.environ['IMAGEIO_FFMPEG_EXE'] = 'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\imageio\\resources\\ffmpeg\\ffmpeg.win32.exe' Do this and run PsychoPy as admin. Also, you should cross-post to /r/learnpython - the response rate is better there, and questions should be posted there.
Super awesome! Another advise would be to always use auto save! You will never lose much when your editor autosaves every few minutes. I also use `bup` to ever hour update my code to another machine. And then there's git for the specific project.
Thanks! I'll repost the question there. As for the security, it seems to only have read &amp; execute and read checked off. Should I change those? Also, I'm not sure how to do the second solution you suggested... 
Certainly good points. Mypy has some bugs to work out and typeshed always needs updates to fix errors.
1) scripting in general is more of a preference than anything else. So python is probably as good as any other language, and probably better than most. 2) If you need a gui- python has built-in modules for that sort of thing. Google "tkinter" and try that out. 3) not really similar, but I think python is easier. 4) none. A simple csv parser would be about a dozen lines of code, but if you're lazy, [there's a module for it](https://docs.python.org/3/library/csv.html). 5) probably not. Send me a pm if you want help. I'm bored.
&gt; 1) Should I consider this language as optimal for this task? There isn't a "perfect" or "optimal" language for tasks like these. Python will do just fine though. &gt; 2) How does incorporating graphics into a software program relate to the actual coding? Well... if you want graphics, you'll have to write code to produce graphics. So in this regard, it *is* coding. Typically, you use some sort of library that implements all the footwork for you, so you can produce graphics with (relatively) high-level commands. For a GUI, there are libraries that abstract things even more, so rather than worrying about pixels, you write your code in terms of UI widgets and events and layouts and such. &gt; 3) How similar to writing Python is creating formulas in Excel? Some of it is very similar; Python has expressions that are similar to Excel formulas, and Excel cells are a bit like Python variables (although the latter aren't arranged in a grid, you can name them freely, and they can hold more kinds of things than Excel cells can). Some of it is very different, such as the execution model: in Excel, you write formulas in cells, and when you change any of them, the rest of the sheet recalculates. Python is imperative, that is, a program is a sequence of statements and control flow construct, and the interpreter steps through that sequence, mutating application state and producing side effects as it goes. &gt; 4) How much aid is needed from the party with the .CSV holding the data? It depends; but normally, if you can obtain the CSV data, and you know what each column means, you will not need any assistance. Then again, making sense of the data is usually the biggest hurdle, and you often have to rely on the other party to provide documentation. &gt; 5) Am I out of my depth? Does anyone have a good starting point. Hard to say, but if you've never programmed before, then I suspect that tackling this on your own is going to end badly. The problem is that there's a difference between making something that works and something that is also demonstrably correct, maintainable, reliable, and performant, and while I totally believe that you could get to "working" given enough effort, the other things require experience, which you can only get from doing many programming projects.
Mypy can infer strings and number assignment statements. I highly recommend you try it again!
I'm not sure how PsychoPy works, but I think you can just chuck that into your code (`.py` file that PsychoPy runs). `import os` should be at the top, along with other imports. The second line (`os.environ['IMAGEIO_FFMPEG_EXE']`) should be directly below all the imports.
If at least one person realizes this, then thank goodness haha.
Ok, so I can put that anywhere in the code? The .py file has over 1000 lines of code so I just want to be sure because I don't want to mess anything up...
In regards to your first question, maybe. I've never done it but, I image you can use a constructor that automatically creates/returns a cart object when a user record is created. However, this seems odd from a design perspective as I would imagine you don't want to always create a cart object when a user record is created. In regards to your second question, I usually find it easier to figure out what I want the database to do. That is, what SQL statements should be executing. In your case, I am guessing you want to take 1 record in the Cart table and create multiple records in the OrderSegment table and take multiple records in the CartItem table and flip them into similar records in the OrderSegment table. That said, I don't know what your database tables look like so I can only guess what you want to do.
It probably looks for "could of been/done/etc." rather than just "could of" alone, I suspect. On the other hand, you're technically missing a comma or two.
hahaha that may be true (I'm just a newbie programmer with little C++ knowledge) but that phrase is spot on, imo
Run which flake8 to figure out which script is running. Compare that to python3 -c"import flake8; print(flake8.__file__)"
It didn't use to. I assume the developer has addressed this like you said: "could of (&lt;adverb&gt;|not) &lt;verb&gt;". Or maybe he just ignores "could of course" since that seems to be the most common edge case. 
 #!/usr/bin/env python2 # -*- coding: utf-8 -*- """ This experiment was created using PsychoPy2 Experiment Builder (v1.84.2), on March 11, 2017, at 16:59 If you publish work using this script please cite the PsychoPy publications: Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13. Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008 """ from __future__ import absolute_import, division from psychopy import locale_setup, gui, visual, core, data, event, logging, sound from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED, STOPPED, FINISHED, PRESSED, RELEASED, FOREVER) import numpy as np # whole numpy lib is available, prepend 'np.' from numpy import (sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray) from numpy.random import random, randint, normal, shuffle import os # handy system and path functions import sys # to get file system encoding # Ensure that relative paths start from the same directory as this script _thisDir = os.path.dirname(os.path.abspath(__file__)).decode(sys.getfilesystemencoding()) os.chdir(_thisDir) # Store info about the experiment session expName = 'untitled' # from the Builder filename that created this script expInfo = {'participant':'', 'session':'001'} dlg = gui.DlgFromDict(dictionary=expInfo, title=expName) if dlg.OK == False: core.quit() # user pressed cancel expInfo['date'] = data.getDateStr() # add a simple timestamp expInfo['expName'] = expName # Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc filename = _thisDir + os.sep + u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date']) # An ExperimentHandler isn't essential but helps with data saving thisExp = data.ExperimentHandler(name=expName, version='', extraInfo=expInfo, runtimeInfo=None, originPath=None, savePickle=True, saveWideText=True, dataFileName=filename) # save a log file for detail verbose info logFile = logging.LogFile(filename+'.log', level=logging.EXP) logging.console.setLevel(logging.WARNING) # this outputs to the screen, not a file 
Haha. Better suited for /r/ProgrammerDadJokes/
Python is a great fit for this application. As someone who got into Python for data processing/visualization over the last year, I have some advice: * Get [Anaconda](https://www.continuum.io/downloads): it sets up a lot of modules you will want to use. Also sets up Jupyter which is a web page-based environment that is ideal for playing with data in Python. * You'll probably want to use a couple of very helpful modules for data analysis: Pandas for pulling data from CSVs, Numpy to do calculations, and Matplotlib to visualize data and results. [SciPy Lecture Notes](http://www.scipy-lectures.org/#) is a PDF that starts from the basics and shows you how to do much of what you need. * Start coding: The fastest way to get into it is to start simple, write a little code, cut and paste code from all over the place and see what happens! Agriculture is definitely a market that can benefit tremendously from data analysis, and it's great to see people motivated to build things and not get trapped in proprietary systems.
So what's the difference between this and asyncio? And is this compatible with the current networking frameworks based on asyncio?
A tip for the future in order to make people hate you less: Always include the relevant parts of your code + what you have tried. 
2D map where 2 AI with no specific algorithm but a bunch of inputs and outputs are placed on each end, each turn they can either move or shoot a bullet. They know the distances to the bullets and other players and all sorts. They have to create conditionals of inputs and map them to outputs to create an algorithm. They must use conditionals to learn, evolve and breed to get better and overcome the other's evolution. I'm probably going to fail because I'm dabbling with concepts I have no idea about but if anyone has some tips or reading I would love them.
Thank you for your feedback, I agree practice is the best way to get your feet wet. I know I spend too much visualising what it would look like and I need to just put in the hours it a relief that some things can be copied in and used. I'll try and spend some time on it tonight
Thank you for your feedback. I will look into the resources you mentioned. I agree wholeheartedly as a lifelong family farmer. So many decision are made on emotions and feelings that really are just raw outputs and inputs. 
Here we are talking about [time complexity](https://en.wikipedia.org/wiki/Time_complexity). This is a measure of how efficient your algorithms will be for a arbritrarily large data structure. Generally, when you have an array you might have to iterate through all elements for finding the one you are looking for. This is mathematically written O(n) where n is the size of your array, while for a [hash table](https://en.wikipedia.org/wiki/Hash_table) you can achieve constant look up time with a well implemented hash function, however you lose the ability to sort your data. So what data structure you choose depend on computational needs. What OP is asking for is a way to acheive both constant look up and the ability to sort. This is currently not possible with only one data structure. However; if OP could share a bit more of the problem, maybe there are some properties in the data or other features we can utilize to find some acceptable compromize.
I wouldn't disagree with you to be honest. My teacher kinda put it on me and I'm at a loss. I'm like techie guy at my school and she assumed that I could do something for due to me having some knowledge of coding. I'm still learning myself. 
I was hoping maybe the people on this subreddit could help. 
:D
Merging four repos I used for my Masters thesis into one repo with a good structure. I'll be automating the rest of the thesis generation in the next couple of days so that new experiments are analyzed and reflected in the text automatically.
You might find [this](https://www.youtube.com/watch?v=HjNHATw6XgY) useful for building a GUI. He even uses matplotlib (and has a separate matplotlib tutorial too, including live plotting).
Months I agree is terribly negligent. We encourage several checkins a day. The more the better but they have to not break the build.
Honestly, you could use Basic built into excel. It's easier than learning tkinter and plus it handles the text files for you. Being a solo sysadmin it was the fastest way to deploy software that worked with collaborating csv files. 
The point here is ease of use and correctness. Not compatible with asyncio because it cant be easy and correct this way. It has its own loop and own way to do tasks. Correct can mean different things to different people depending on their expectations. Trio tries hard to prevent people from shooting themselves in the foot.
Only when I'm stuck. Never start to finish. I've never even considered that. 
Anybody who ever tried to read and understand asyncio docs will appreciate this.
The website you build will have a submit button with a POST method, the input name will pass through to flask in a dictionary. from flask import request @app.route('/', methods=['GET', 'POST']) def index(): if request.method == 'POST': result = request.form if your webpage puts the user entry into an &lt;input&gt; named "artist" then print( result['artist'] ) &gt;&gt; weezer 
&gt;Also, according to [this](https://intellij-support.jetbrains.com/hc/en-us/articles/207241005-Using-IDE-on-different-machines-and-operating-systems-with-the-same-license) it's possible to install and use the same license on different machines at the same time. There must be some kind of limit to this, what's stopping me from passing my pycharm license to all my friends who want to use pycharm too? It's a personal license, only you are allowed to work with it.
With 15 minutes for a math day you probably won't be able to do much beyond finding the nth number in the fibonacci sequence. You can score on correctness and speed. Make the script take an input param for n and have it output the nth number in the sequence. Pass in say 1, 5, 10 and 100 as tests. You'll find that if the recursive version is used that 100 input is going to slow things down quite a bit. If the equation is used however, you'll be golden.
Sure, not a problem.
This is pretty good advice! I'd just hoped someone had written something like this already. As to why I want this: &gt; This is for a research application. The object that I want to be able to store is essentially a large collection of different types of related data. So I want to be able to call a function from/on the object, have it retrieve the needed pieces of data stored in the object, and perform some function on them.
Note that ~ is not an absolute path and does not work in all cases. It depends on the shell or libraries to fetch the value of the HOME environment variable, which may not even be set (often found when running scripts from crontab or a web cgi). 
Yeah, it's unfortunate that's become a bit of a meaningless shibboleth. But this is a library that's trying to displace part of the stdlib by obsessively focusing on usability, so... the requests comparison is actually meant quite seriously.
I will keep this in mind. Thanks once again. 
So you want a database...?
I actually wrote an [extremely long blog post](https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/) a few months back about callback-based APIs (like asyncio) versus async/await-based APIs (like curio and now trio). The tl;dr is that callbacks are much more error prone to work with, and that if you try to build an async/await-based API on top of a callback-based API then the abstraction ends up being very leaky and causing problems. So trio is neither based on asyncio, nor does it provide an asyncio-compatible API.
shouldn't it be `foo/*.py` or something? 
Yup, you're right, about to push update to Github.
That was actually the worst article I've ever read. Ever. 
The page two never came....
You need to be much more specific. Are you talking about [this `noise` module](https://pypi.python.org/pypi/noise/1.2.2)? What operating system are you using? Is it Windows? The fact that the project has only uploaded binary wheels for 2.7, 3.3, and 3.4 in no way means that the module doesn't support other versions. It just means that you'll need to compile them yourself for those versions, or [find someone who already has, like Christian Gohlke](http://www.lfd.uci.edu/~gohlke/pythonlibs/#noise). 
So I put that under import sys and get this: Problem compiling: [Errno 2] No such file or directory: 'C:\\Users\\Rachel\\Downloads\\RachelV3\\programA.py' ######## Running: C:\Users\Rachel\Downloads\RachelV3\programA.py ######## C:\Program Files (x86)\PsychoPy2\python.exe: can't open file 'C:\Users\Rachel\Downloads\RachelV3\programA.py': [Errno 2] No such file or directory
That's one of the neat things about using docker: you can shell into a docker process and install tools like this, safe in the knowledge that when you next restart the container all of that junk will be cleaned up for you.
Two steps: first, I wondered if there was a way to attach an interactive shell to me running process and googled for that. Once I could import the code, I tried using inspect.getsource() on it - but that reads code from disk. Then I tried using the dis dissembler in the standard library - that showed me opcodes, which would have been enough to painstakingly reverse engineer the code again. That's when I thought "I wonder if anyone has written something that can turn bytecode back into source code?" and found uncompyle6
Thanks for the PR, just merged it. Well played considering that some opcodes are themselves printables. Also thanks for the coding feedback, honestly I was hoping for some of that. Guess maybe I need to review that PEP (8?). For the underscores, I thought I read somewhere that prevented the methods from being available from outside the file? Maybe that was/is misguided. I take it underscores are preferred to camelCase?
Indeed, his page is the first one after not finding correct version on PyPi. He needs more praise!!! :0)
&gt; Thanks for the PR, just merged it. Well played considering that some opcodes are themselves printables. I realized that if none of the opcodes were printable, `strings` would never be able to print the payload since there is always an opcode inbetween. I then tried import string, dis sum((chr(opcode) in string.printable for opcode in dis.opmap.values())) and found that 73 out of 118 opcodes are printable. What my PR doesn't actually make sure is that the 'garbage bytes' are set to non-printable chars. This could be a potential problem, depending on what the python assembler puts there by default (i havent checked). &gt;I take it underscores are preferred to camelCase? if you look through the python standard library you will find that type names are usually CamelCased while other symbols are in snake_case. &gt; For the underscores, I thought I read somewhere that prevented the methods from being available from outside the file? this could be a recent change I missed since I only occasionally dabble in python at the moment, but I think it is just a marker for other programmers to go 'oh this is an internal i probably shouldn't rely on'. As far as I know, in python you cannot prevent anything from being exported/importable. 
How I imagine these come about: "Oh shit, I haven't posted in a week!" *throws dart at board* "Cool, django, I can write about that."
Tried it once or twice. Poor plot and no character development.
Guess snake_case makes sense for Python.... The "garbage bytes" appear to be set to 0 in CPython's compile.c: https://github.com/python/cpython/blob/master/Python/compile.c#L1108 Assuming I read that file right, it should be ok, for now at least. However if that changes or if a payload is being embedded in a pyc file that previously had a payload with a larger explode arg set, you are right there could be an issue. If needed zeroing out available bytes before writing could be done.
I was planning on starting a blog soon, this gives me hope for people liking it.
How about finding returns of the shares in the Dow jones for certain periods of time?
How about calculating flight costs and flight times to and from various cities around the world?
Blog helps you to both learn and teach. Do try it!
https://www.twilio.com/blog/2017/02/an-easy-way-to-read-and-write-to-a-google-spreadsheet-in-python.html Google Spreadsheets is very powerful and easily extendable....
lol, I'm not an expert Django developer, I'm a computer science major in college. The first part of the Django tutorial on the Django wiki is hell of a lot better than what you "wrote", although you really just copied the first half of that guide on the django wiki. Uhh yeah you need virtualenv... It may not be mentioned in the django starter guide but it's extremely unwise to not isolate a django project in a virutalenv. Due to your post history in r/entrepreneur, it's obvious you're just trying to build a mailing list for some product you want to spam in the future. Also you're using up vote bots, this post had 40 up votes and no comments when I saw it, that just doesn't happen. 
w/ Anaconda package, it's the best you can get outside Pycharm
jesus those blog posts are so simple, you're just making clickbait material and people with little experience are up voting it while on the toilet. I should start a blog! Hey question for you, if you're qualified to write tutorials on Django then why is your blog a Wordpress site? Rofl. If you want to learn by teaching then you need to teach yourself first. 
You can also do it from git CLI client without using additional access token: git branch --no-color -r --merged|egrep -v "(^\*|master|development)"|xargs -n 1 git push --delete origin 
 db.session.query(CartItem.store_id).group_by(CartItem.store_id).scalar() will return you a list. Maybe the best way to do that is actually not trying to get a query that filters for you, but depending on the amount of rows you're dealing with here, Python could just do the filtering itself. edit: as_scalar returns a Scalar object, scalar() should return a list directly
it depends
Yes you can ! :) But for me the problem was if i have for example 10 forks and i want to delete those all stale branches. Also i dont think this command will check if it is merged into you fork parent repository as pull request
I can't imagine there is much money to be made if the entire pycharm community could hypothetically live off one license. I just installed Pycharm pro on 4 different machines. I figured there has to be some sort of limit to this which is why I asked. Maybe an install limit of 5 registered machines like most software companies impose. 
Practice writing code. Take bigger bites than you can chew.
Give the man applause for his effort starting a blog and stop bitching around like little kids!
It's not allowed. There is just not an automated technical restriction stopping you from committing a license violation.
Thanks. I googled it, and it showed up a download link. Would it be legal for me to download the book?
A timer programme for solving rubiks cubes (speed cubing)it will have scrambles graphs etc.
First impression: The [docs](https://trio.readthedocs.io/en/latest/) are very well written, informative and motivating to read. I just wanted to point that out because I find good documentation is often underappreciated.
Do you know of any repos that use it in a script or CI? If I wanted to check against tests as well? I'll have to look in the mailing list...
Hey! Can help u with that!
Hmm.. Really for humans ? Why don't You add some basic bootstrap examples in the github readme ? Blocks of text with description and links to docs don't look encouragingly. 
Nice work and great design 
You can use Selenium. 
By "competition" I mean like having a pre-coded picture and students have to go into the code and change certain parts of the code to change the color of parts of the picture. I'm not asking for something super hard. I went to a math day at a local college and they had a coding event like I just described. I want to do something similar at my school, or even possibly something better. 
No
Yup, sounds like flake was installed in a place where your PYTHONPATH points but your PATH doesn't. Run that second command to get some idea of where it's installed
I've read most of it, only ignored the ones I'll definitely not use (berkeleydb for example) 
Thanks, I'll go with that :-)
Thank you very much mate
As note, /r/python is not for asking questions. That is what /r/learnpython is for! From my time working on tools and things, I have found there is no difference other than one has a slash at the end, and the other does not. I have also delved a bit deeper before and found that according to POSIX, directory paths should not end with a slash. The thing is that Bash automatically adds a slash to paths, in an attempt to make typing paths easier I suppose. So going back to the POSIX thing, in your script you might want to make sure paths do not end with a slash rather than always end with a slash. Just my 2 cents. 
Yeah that's how I taught myself Python. Read all the language docs, most of the std lib, skipped the C API and the formal grammar. 
Thank you!
Neat! Thanks for sharing.
That's like... Exactly my degree, dude! That's freaking awesome! Keep up being awesome! (Saved, of course)
Oh geez, thanks so much!!
cool concept. the lowercase class names are really bothering me though :)
Hidden Markov Model for NlTK.
There is another possibility: monkeypatching. Import the module as usual and immediately change things in the imported module. This won't work or can be difficult is the module already did some initialization based on the thing you need to change. But if it works it is an easy fix until the library releases an updated version.
Twenty years from now? No idea. Python is a good choice now, and whatever they used the was probably a good choice then. 
Ok sorry I did misunderstand. Was questioning a lot of things just now. I do not plan to interface. Only import a select number of csv's that allow my program to generate more modern and detailed reports that can be used to make day to day and future decisions on the farm. 
Very clever use-case for pyrasite, nice work! --luke (pyrasite author)
Great work, thanks for taking initiative to do this. Feel free to also post about it in r/machinelearning
Exactly what i was looking for! Thanks a lot, can't wait to read it =)
I would also add regex, multithreading vs multiprocessing, mutex, and how to use map, filter, and lambda. Also learn your way around PDB, Unit testing, and continuous integration frameworks
You *really* should.
Reading the tokenizer post, it looks like you're using the actual harry potter book, and serving it as plain text out for people to download? Seems like you could run into some copyright issues doing so. There are a number of publicly available datasets, you might want to take a look at using one of those. 
Thanks for pointing that out! I have changed the example to a text from Project Gutenberg. Hopefully, that should sort things out. 
How are you finding the Udemy course? I see their courses for sale a lot but when it comes to parting with cash for online courses I'm always very wary.
Good find! A small issue with the formatting, my bad. &amp;quot should now be " As for the other problem, this seems to be an issue with the WordPress plugin itself. We'll see if we can find an alternative soon. Thank you!
It's industry standard to not use the system python for *anything* whatsoever because if you accidentally stomp on a namespace that one of your system utilities use, you're going to destroy your OS. I can tell you care about something like that because you're using flake8. Suffice it to say, if flake8 could detect you using system python, it'd throw out big flashing red text.
Yep, i needed to specify the dir and it worked. It sometimes stops but thats another story lol
I developed a [Python for text analysis](https://github.com/evanmiltenburg/python-for-text-analysis) course before, and I'm curious about your teaching philosophy. I found that people usually want to get to the cool results quickly. Then you can make them aware of the limitations of existing approaches and look at how you could manually implement solutions to NLP problems they are facing. One way to get results quickly is to use popular libraries like SpaCy, DBpedia Spotlight, Pattern, VADER. There are very few libraries out there that give better results than SpaCy, in terms of tokenization, parsing, and NER. Students like that they can immediately experiment and see what the state-of-the-art has to offer. They can use these libraries to quickly build pretty impressive things. You seem to be taking a different approach, where students start from scratch, and implement more and more complex algorithms. This is certainly a valid approach, but I'm curious as to *why* you chose this approach. Was it a conscious decision? What are the pros and cons?
Is your snake in to object oriented programming? This sub is for the Python programming language.
Hmm there's probably a module that would do the work for you, don't reinvent the wheel. Look around on github a bit.
I'll add Lydian and Locrian in soon enough! Thanks! [Phrygian](https://en.wikipedia.org/wiki/Phrygian_dominant_scale) is already there under another name, but I'll distinguish it. Thanks! Also, that's a good idea. I will implement the streamlined calling as you mentioned so users don't have to reset. 
Interestingly, McKinsey has listed agriculture as the overall [least digitized sector](http://www.mckinsey.com/~/media/McKinsey/Industries/Capital%20Projects%20and%20Infrastructure/Our%20Insights/Imagining%20constructions%20digital%20future/PNG_Insights_CDP_The-digital-future-of-construction_ex3.ashx). I'd like to second the recommendation of downloading Anaconda. If you want to do CSV analysis, pandas will come in useful, and is prepackaged with Anaconda. Also, since [r/learnpython](https://www.reddit.com/r/learnpython/) is a great resource to get help with any specific questions you have. **Edit:** I'm curious, given a csv file, what's an example of a specific analysis you'd like to do on it?
Came here to say the same thing. Fluent Python is the best intermediate-to-advanced book I've read.
Pick an open source library you use and try to modify it.
That's a syntax error: you can't put quotes around a parameter in a function or method definition. Bare `jos.ai` is also a syntax error too, as the items in the call signature have to be valid python identifiers, and dots are not allowed in identifiers any more than quotes are.
Really wish they would have followed the Unix convention, but that's kinda awesome
Threads initiated from C/C++ code like with `std::thread` are not limited by GIL, but before any operations with Python objects you **must** acquire it. And vice versa, if you are working with pure C/C++ types you can release GIL temporarily. 
Virtual env
ancient
Here's a [**List Of Books**](https://gist.github.com/Enteleform/85dc4117c3cac6097495dcd32036a332) I recently put together that covers intermediate to advanced topics in Python.
### **+1** Excel actually has some pretty decent [**UI Features**](http://chandoo.org/wp/excel-dashboards/).
You should post this to https://news.ycombinator.com/show
Step 1: read the sidebar Step 2: apply the lessons learned from step 1 (above) by posting this in the correct sub.
Normally, you get the GIL when writing a C api extension. See [here](https://docs.python.org/3/c-api/init.html#non-python-created-threads)
Yes, they are different scales. Modes are just "cyclic shifts" of other scales, where the sequence of intervals is the same but the keynote is different. Diatonic scales are modes of the major scale. Both the major scale (Ionian mode) and natural minor scale (Aeolian mode) are diatonic scales. That is why the C major and A minor scales share the same notes. Dorian, Phrygian, Lydian, Mixolydian, and Locrian modes are also diatonic scales, just with a different shift. Phrygian dominant is a mode of the harmonic minor scale, so the interval sequence is different from the diatonic Phrygian mode scale. Ahava Rabbah is just one of many different names for Phrygian dominant.
Extensive use of list indices is a code smell in python. Can I ask why you just didn't do something like?: import itertools list_a = [1,3343,543,2] list_b = [543,200,43] merged_list = sorted(itertools.chain(list_a, list_b)) 
Ancient but gold!
Most engineers know some form of programming. Whether it be Fortran, c, c++, java, python, etc. After all, almost every embedded system has computers integrated these days. My choice is to use python whenever I can. This will be helpful to you and make your resume look better even if you don't end up ever programming. 
*parser-mouth
Did you come to any conclusions on Falcon + PyPy vs. Python 3.5 + Sanic /u/t3g ?
calling `scalar()` still returned an error, I don't recall the specific error but something relating to it not returning one(). I ended up just isolating the store_ids using `distinct`, then iterating through the list, calling the store_id in the iteration and iterating through all the items that matched and assigning them to the order object. The end-product is this bastardization of python and orm sql: segment_stores = [item.store_id for item in current_user.cart.items.distinct(CartItem.store_id).all()] for store in segment_stores: order = OrderSegment(user_id=current_user.id, store_id=store) db.session.add(order) db.session.commit() order_total = 0 for item in db.session.query(CartItem).filter(CartItem.store_id == store).all(): new_item = OrderSegmentItem(size=item.size, color=item.color, quantity=item.quantity, item_id=item.item.id, order_segment=order) order_total += item.item.price db.session.add(new_item) db.session.commit() order.cost_total = order_total db.session.commit() 
&gt; syntactic sugar I feel like I need to try to work this phrase in to my daily life
Good deal!
I saw someone post it on HN(https://news.ycombinator.com/item?id=13845201), didn't get much attention though.
I don't get it and I'm not sure I want to get it.
Be a CS professor then. They all love the word. 
Do you know what sub you're in?
Not /r/harrypotter
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I almost bricked my system when I manually installed Python 3 and used `make install` instead of `make altinstall`, which changed the system python to python 3. Managed to get a shell somehow and change it back. 
Hi hcyrnd&amp; everyone who offered help with the issue! My professor got it to work on the lab computers. Campus tech securities had some things disabled on the other lab computers and I still don't completely understand what the root of the problem was, but it's working smoothly now. Thank you everyone with your suggestions! :3
Are you sure you are trying to delete 'Tkinter', not 'tkinter'? 
Hilarious! 
Been doing python for three years, i don't get it :(
Hmm... I don't think having the same constructor namespace _is_ clearer. Overloading is almost by definition less clear as it depends on typing to determine the interface. Instead, a well-chosen name indicating intent is almost always more clear.
"Syntactic sugar causes cancer of the semicolon." 
&gt; stop bitching around like little kids! You must be new to reddit/hackernews or any other website with an interesting comment section. The point of comments is discussion/criticism/advice. If you can't handle it and want to supress everything that is not empty praise then just don't read the comments and go directly to the website. edit: Looking at your history. This is not a political sub, programming related subs work differently. Maybe that's where the misunderstanding stems from.
Wouldn't even run because it's all in caps: $ python Python 3.6.0 (default, Jan 16 2017, 12:12:55) [GCC 6.3.1 20170109] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; IMPORT OS File "&lt;stdin&gt;", line 1 IMPORT OS ^ SyntaxError: invalid syntax 
I really learnt a lot from this blog, and I really like the pragmatic view you present. Great work!
From Zed Shaw, we have: &gt; Programming as a profession is only moderately interesting. It can be a good job, but you could make about the same money and be happier running a fast food joint. &gt; &gt; You’re much better off using code as your secret weapon in another profession. People who can code in the world of technology companies are a dime a dozen and get no respect. &gt; &gt; **People who can code in biology, medicine, government, sociology, physics, history, and mathematics are respected and can do amazing things to advance those disciplines.** I'm a professional electrical engineer. Ultimately, my job is process input data (requirements, specs, tables, simulations...) and produce some kind of output data (a working design, a proposed course of action.) Knowing computer programming helps you process more data, faster than anyone else, and more accurately than anyone else. **It is a literal superpower.** An amazing number of engineering tasks are still performed on paper, or using the dumbest imaginable spreadsheets, because the people doing the job don't know how to o anything better. **You can fix that.** More of my thoughts on this topic: https://www.penwatch.net/cms/engineer_programming/.
This comic came out before they invented uppercase.
https://github.com/awslabs/chalice extremely useful 
Why would it?
I dunno I'm just guessing since no one else has explained what it does.
I would like to add "linguistics" to the list of disciplines where programming is a respected and highly sought after skill.
If it's really screwed up, your best bet might be to uninstall what you have and go with Anaconda. That way it will manage your Python installs. 
Who says that's a line break?
Am I missing a joke here or is the code just incomplete gibberish that has nothing to do with the task at hand?
I thought not counting lines would make it use up a tonne of resources or something. Anyway, amateur.
it's ok. it's not funny
'it seems so heavy' this is a meaningless statement. just use a text editor like notepad++ if you don't like IDE features
both are awesome
Yes this. It annoyed me much more then it probably should
The only thing I can think of as being similar would be [functools.singledispatch](https://docs.python.org/3/library/functools.html#functools.singledispatch).
Parsers go through your code and check if it's correct I think, and a Parseltongue is someone that can speak to snakes in Harry Potter. And a Python is a snake.
What were the few things it was missing?
Thanks a lot. Good to know that by default I should assume the GIL is active. Do you know where in my Cython code I'd want to put the nogill directive? Would I want to put it when I declare the class methods or when I create a Cython wrapper class? Declaring the class: cdef extern from "Rectangle.h" namespace "shapes": cdef cppclass Rectangle: Rectangle() except + Rectangle(int, int, int, int) except + int x0, y0, x1, y1 int getArea() void getSize(int* width, int* height) void move(int, int) Cython wrapper class: cdef class PyRectangle: cdef Rectangle c_rect # hold a C++ instance which we're wrapping def __cinit__(self, int x0, int y0, int x1, int y1): self.c_rect = Rectangle(x0, y0, x1, y1) def get_area(self): return self.c_rect.getArea() def get_size(self): cdef int width, height self.c_rect.getSize(&amp;width, &amp;height) return width, height def move(self, dx, dy): self.c_rect.move(dx, dy)
No, that's generics. Cool thing, but I've meant a testing system. 
I'll answer this without the need for a slideshow video. Yes.
Could you please explain your goals and/ord post some instruction?
Hi there! What do you expect from this conference? Travel could be expensive (depending from where you are from) but the price of the ticket is really cheap if you consider what you get and compared to other conferences. Christian Barra *EuroPython Organiser*
Hey Christian, I would like to meet passionate people, learn about stuff I don't know (I'm a real newbie in python) regarding datascience and maybe find some open source projects I will be able to contribute.. And also learn about python work opportunities for me.. I'm from Belgium, 
*Autism
Not often a correction deserves more up votes than its parents, eh?
Honestly its been a while, so I don't remember the specifics of it.
Change: if tkinter.messagebox.askyesno == 'yes': to if tkinter.messagebox.askyesno(): You need to call the function (the parentheses), and know what it returns. It returns a boolean (True/False), not a string containing 'yes' or 'no'. 
I guess you could call them sourcerers
Well, more than 1000 people, 5 days of talks and workshops (5 rooms for talks + 2 rooms for workshops) and 2 days of sprints (to work on open source projects). Totally the last year I think we had more than 150 talks... Ohh... there will be also the recruiting session by the sponsors. I guess is more than enough :) Christian Barra *EuroPython Organiser*
Back testing is not a new or particularly challenging problem in financial systems.
 import os os.chdir("path I want") Or you can create batch file I guess...
Without tuple pack/unpack (as posted by @pvkooten, which is the canonical Python idiom for this), the algorithm for in-place swap of two integers you'll find going back 30+ years is: a ^= b b ^= a a ^= b 
Yeah.. that last part really threw me off, thanks for clarifying that ;D
What the article describes isn't really test-driven development, it's just development with tests. In order to be test-driven, the tests need to actually *drive* development, that is, they are not just a tool to verify the correctness of the code, **the tests are the design and the specification**. Where traditional development takes the requirements, expresses them in code, and then adds test cases to verify a correct implementation, test-driven takes the requirements, expresses them in the form of tests, and then writes code that passes those tests (thus formally meeting the requirements). It's not just a workflow thing, it's an entirely different approach to problem solving and software design, and it is definitely not always a good thing (although more often than not, it is better than popular alternatives, and it is usually a lot better than not having a strategy at all).
Backtesting requires you have access to historical data. In the financial world it's very common that that kind of data is locked in to very restricted environments. I'm guessing that's what OP means with "production".
You're right, the last thing a financial firm would want is publicly available historical trading data being used to improve their systems resulting in higher profits. 
Actually, doing this will truncate `reddit-master-db.csv`. In other words, you just deleted all the data, whoops. Additionally, you have a useless use of `cat`.
I hate it when they make such useless examples.
It results in import errors, because the dev's capslock was on.
No worries. You might also want to check out /r/learnpython where this type of question is supposed to go :)
Lol - yeah good catch. Thought I'd suspend disbelief for that one (artistic license and all). But the set([]) - unforgiveable!
I updated the thing so it has more instructions 
I think a parser is part of most compilers. It's the thing that won't let you compile code if there's syntax errors or missing semicolons or something. Or maybe I'm wrong, I have very little idea what I'm talking about.
CORS support, Multiple Environments are the two that it was missing when I started using it. I eventually moved everything over to Zappa because it's more feature complete.
Yo I just wanted to say I love you and thank you for all the content 
I've been to two PyData conferences (Dallas and NYC 2015) and quite enjoyed them. You'll learn something and most likely meet awesome people. You can see the schedules of previous events [here](http://pydata.org/past-events.html). I bet you want to see the [PyData Berlin 2016 schedule](http://pydata.org/berlin2016/schedule/). You can also watch [videos](https://www.youtube.com/user/PyDataTV) of past events. [Here](https://www.youtube.com/playlist?list=PLGVZCDnMOq0ogEIvRHZyXMNJwkEPHi6Bl) are the videos from PyData 2016.
Always happy to share!
No. It's just parsel vs parser tongue. 
I don't entirely follow question 2, but as to question 1, I think SQLAlchemy's Association Proxy is just what you're looking for: http://docs.sqlalchemy.org/en/latest/orm/extensions/associationproxy.html
I heard they're expensive. 
Thank you very much. The 2016 schedule acutally looks interesting. If the 2017 schedule looks anything like that it might be a blast. Do you by any chance know when schedules are released? More specifically if they are released before the deadline for the early bird fee closes?
Something like $50-100 if I remember correctly. There was a large family that ordered a few hundred dollars in pizza every so often, and the first time I got the delivery my manager warned me that I was not to let them have the bags for any reason. I thought it was weird, but whatever. I got there and they were trying pretty hard to pressure me into leaving the delivery bags, since "they weren't going to be eating right away and wanted to keep the food warm". I said no and they claimed they were allowed to in the past and that the manager had given them permission. I said no and they demanded I call the store to speak to the boss, so I did and they ended up exchanging some harsh words over a good 5-10 minutes. Still got a decent tip though.
Indeed he seems dodgy. I can't bring myself to watch it all, but it shouldn't be attacking him that aggressively unless it feels threatened for some reason, right?? Also what is it doing this in a programming language subreddit!
Easy fix: change the title and intro to no longer mention TDD as prominently ;) You're making some good points, they just aren't about TDD.
Absolutely. I just can't do it now, but I will when I get home this evening!
Why not just use 2-factor auth? That should protect your account much better than an unreliable bot, especially considering your attackers can easily use a proxy server to fake any location (and probably already do so, assuming they're at least somewhat capable).
I currently don't have a phone and almost lost a previous account to this (for losing a previous phone too, live in dangerous area). Probably should've mentioned this was a temporary fix, for sure
Well, it doesn't look like Twitter provides a way to retrieve it programmatically, but you can see your login history [here](https://twitter.com/settings/your_twitter_data).
A snake with hands! I never heard of such a thing!
I'm aware but I'd like to have a "notification" of sorts when it happens, that way I can check if it was me or not. Going back and looking at it, I can't remember if I was using the VPN at the time of suspicious log-ins
There are different kinds of students! Your approach wouldn't appeal to me. I enjoyed learning NLP from the ground up. It is frustrating and takes patience to internalize the concepts, but then you get to start building things yourself and doing something unique.
I think snakes had hands in the bible!! Haha
Very nice. By the way I noticed in your most recent post you been affected by the wordpress &amp;quot replacements in your code. Wordpress is a pain in the ass for this, but it's worth fixing to make the code correct
Oh I do apologise, thank you
i think u have 2 look up the selenium stuff for that.. i'ma total noob myself btw but i copied a lil part that shows the log in, maybe that'll help u a lil.. it's a matter of finding those elements, sending the keys and clicking them import selenium from selenium import webdriver from selenium.webdriver.common.keys import Keys url = "http://sign_up" driver = webdriver.PhantomJS() driver.get(url) username = driver.find_element_by_name("username") password = driver.find_element_by_name("password") username.send_keys("USERNAME") password.send_keys("PASSWORD"} driver.find_element_by_name("login").click() &amp; here's a link to selenium http://selenium-python.readthedocs.io/index.html 
Thank you guys! I looked into PhantomJS and from what I read, it said it was unsupported. I did however find something on GitHub that does what PhantomJS does, called "ghost.py" it seems to me that it is now loading the whole page, and not excluding JS. I will continue to toy around with it, and see if I can get anywhere.
The variable name `o` is one of the worst possible choices since it looks like `0`. A better name would be something like `welcome_message`. Some of the other names could also be more informative. The function `sum` is redefining a Python builtin function, and actually raises to a power rather than taking a sum. When defining functions like `sum` and `circle`, etc., it is usually better to define them in module scope (the same as `choice`) rather than inside `choice`. In your case it doesn't really matter, but if there were a loop on `choice` then functions would be repeatedly re-defined on each iteration. The return values of those little functions are also not being used. You would probably get better replies on /r/learnpython.
The person that programmed the /u/xkcd_transcriber bot ought to put in some code that will trigger when the reference to this comic reaches 10000, and instead of just the regular transcript it should add something special to celebrate the occasion. Also, I think /r/mildlyinteresting would appreciate a link to the comment in which it has been linked ten thousand times once it happens.
Not a lot of details in the article, unfortunately. IBM talk discussing all this at Anaconda Con 2017 was "Enabling Open Data Science on z/OS with Anaconda" - but I cannot find any publicly available copies. Edit: Link to video of talk https://www.youtube.com/watch?v=2vq73oWIH0M
I know! I just wanted to learn more about their rationale for setting the blog up like this, and whether it was a conscious decision.
this is painfully unfunny 
Yes, it was a good question... I couldn't just let it sit there unanswered. 
Some suggestions : make sure your code contains well defined functions - which take arguments and ideally returns data - your current endgame function doesn't take any parameters - which is why your current testing attempt fails. When trying to test functions which do output (like your endgame function), you really want to try to have your functions return a string - which the rest of the code can then simply print. P.S - the vast majority of your code should be methods on your hero or enemy class - and your functions should be a lot shorter - the shorter they are the less they have to do, and the easier they are to test.
That was before switching to Flask, Hug autogenerates a type of API Doc 404 and if the right types are set it explains them better. So in that case the types served the purpose of fleshing out the documentation and restricting what values could be used. It got tedious and after I found out Hug couldn't handle asynchronous requests I dropped it. Haven't really gotten back to the advanced search function since.
Publicly available data is woefully inadequate for backtesting most trading strategies
Publicly available data is the only data you're allowed to use in your strategies when trading public company securities. 
Pycharm makes 'skeletons' for its introspection system, and that's what you're looking at. That function is never actually called.
I'm very like "anyone can learn code, it doesn't matter how smart you are, if you know math or anything else. You just need a computer and a will to want to code" But I always tell people that you need time, not a week, but maybe a year or two to actually be accustomed to coding 
Thanks for the link Figured that I can express roots by number1**(1/number2). I mean just to know how random the random module is for example if I were to use it. I'll keep in mind, Thank you.
You can jump on the bandwagon too early though. Go, I understand; it might continue to gain traction. I haven't seen anything to make me think Rust deserves more than a passing glance at the moment.
also thank mr skeltal for good bones and calcium[^*](https://www.reddit.com/r/tmsbmeta/comments/5xnirl/about_thankmrskeltalbot/)
This subreddit is for things related to the programming language Python, not for things related to snakes. Your comment has been removed, but if it's cute enough, you might try posting to /r/aww
Probably making more driving the bus...
Check out the [**Table Of Contents**](https://www.nostarch.com/download/Automate_the_Boring_Stuff_dTOC.pdf) for **Automate The Boring Stuff With Python** ([Book](https://www.amazon.com/Automate-Boring-Stuff-Python-Programming/dp/1593275994), [Online](https://automatetheboringstuff.com/)). &amp;nbsp; The `Part II: Automating Tasks` section (*pages xii - xx*) details a good range of use cases.
&gt; I've seen one university course use FORTRAN in the 14 years I've been around academia, and that was changed several years ago. It's usually at the graduate level: https://engineering.purdue.edu/ProEd/App/courses/course?name=numerical-methods-mechanical-engineering And even if it's not in school all engineering tools are built on a BLAS of some sort. Even Python's numpy. Not just the numerical solvers but controls, fluids, etc solvers.
Thanks! I'll try this out
"python simple server" that's the search term you're looking for.
Green background and black lines (horizontal and vertical), also /r/learnpython
Get help.
I use click on all my new stuff recently, and have even gone back and updated some of my older tools to use click and keep them all consistent.
This reads like the gibberish the cyclon that ran the ship in the third season of battle star galatica would say. It's alot better if at the end you do.. ... Gasp ... JUMP!
Parsers are the main part of compilers. They don't just check for errors, they try to figure out what your code says -- an error is just what happens when they can't figure out what you were smoking when you wrote it. Even in interpreted languages, every line has to be parsed to be translated into the lower-level instruction.
https://xkcd.com/927/
No kidding. I gave up early on, thinking: "This guy can't be serious".
http://skeptics.stackexchange.com/questions/5114/did-cobol-have-250-billion-lines-of-code-and-1-million-programmers-as-late-as-2 That code isn't going *anywhere*. You think some people flip out over Python 2 migration? Corporations are not going to replace working, validated, running code. 
That's another reason to dabble in a lot of things. Keep your fingers in all the pies, but wait to grab one until it becomes popular.
I was actually just wondering how to do this. Really great tutorial for a beginner like myself. Thanks for doing this. 
Also PHP is missing. I heard all big sites use PHP and that it's the **web scale** language of the future. 
Python 2 only
Swift is the only thing going right now that I expect to see displace C++ and Java to any great extent. This simply due to the support of many big players and its rather good architecture. 
Im not talking about you cousin, im talking about the idiots that live in our cities that are far too stupid to ever get off welfare. Im talking about the people working at fast food joints that have failed in every attempt they have made to leave that life. Your problem is that you need to look at the bigger picture and get a handle on the intelligence level of these people. It is pathetic and no amount of training will correct it. If you are in college or recently graduated you view of the world is biased by being around intelligent motivated people. Sadly this isn't the whole world, frankly I'm not convinced it represents 50% of the population. To look at this another way i once had an ongoing conversation with a business owner frustrated with the labor market. He stated and evidence ive seen seems to confirm, that you have about a 1 in a 100 chance of hiring somebody that is an asset to your organization. You can not even rely upon talking to a persons last employer anymore because so many fear lawsuits for any information offered. 
Excellent article. I try to keep myself always on edge and agree that this is a major drawback of this profession. You need to learn new things. Every day.
What edition of PyCharm do you have? I think code coverage is only available in the professional edition.
Loved the shitpost button &lt;3
I have the community edition. That is completely bullshit though to be honest to not support code coverage in free.
Thanks! :) I have fixed it. Although we will have to explore an alternative soon enough. 
Thank you :) hope it continues to teach you something new :)
Thank you so much :) happy to know that it's beneficial to you :)
Thank you :)
Thank you so much :) good feedback is nice.
 Why do bring up cities in particular? 
it's a very simple pun that someone might say as a "bad pun" joke and expect to be booed. the effort of putting it into a cartoon makes it especially painful, because the joke isn't even good enough for a throw-away line, let alone a whole comic panel of it. i don't mean it pejoratively, but it seems like a very aspie kind of humor. 
thank you
Wow, I didn't even know the Mac version of Python had IDLE, I've never used it before. Though in retrospective, it's cross platform so theres no reason why it wouldn't be there. On MacOS, most people just run Python from the shell in Terminal.app and skip IDLE. I've gotten that error on Windows before... because of personal firewall software. Not exactly sure what would be causing it here. Though one simple thing to check: make sure you don't have any .py or .pyc files in your folder named the same as any python standard library modules (string, random, etc.). Having them there would override the library ones, and break lots of things. Apparently some people have had that IDLE error because of this.
"Code coverage" doesn't sound like something your run of the mill "I'm getting started with Python and want to use an IDE" person would look for. 
I'll back you up that fortran still has a place in Computational Fluid Dynamics, Finite Element Analysis (structural and thermal), 6-DOF trajectory/controls analysis, orbital mechanics, etc, Basically many science/engineering codes that need to run on a supercomputer/cluster. Fortran is simply purpose built for these problems and has been used to solve them since it was invented, and yes, has evolved in the process. Yes, languages like Julia or something like Python+Numba/LLVM may someday supplant it, but it's faster than C at matrix algebra because the language was built to do matrix algebra. As you say, Fortran-based BLAS and LAPACK are at the core of almost all linear algebra libraries including Matlab and Numpy with Intel's Math Kernel Library being the state of the art. I wouldn't learn Fortran's intricacies until I was in a job that needed them, but if you're in science and engineering, especially aerospace, there's no reason not to at least be able to passably read Fortran. I deal with old Fortran codes all the time in my work despite it not being in my job description whatsoever. DATCOM and CEA (chemical equilibrium with applications) are two publicly available examples.
Glad you enjoyed the reading :)
I've really never seen anything like this. There's nothing wrong with being angry, or writing long posts, but this post really does appear to indicate an underlying problem that needs a better outlet and more professional/nurturing attention than a rant on Reddit.
So what you're saying is that we should never try to learn or understand anything new? Because, after all, it might be hard? Because, after all, we might have to look into new concepts, walk in someone else's shoes for a while? Maybe you shouldn't speak on other's behalf just because you lack will. We all started as ignorants at some point, whatever the subject. So try again and come back a happier person.
The funny thing is that a few hundred years ago people said the exact same thing about the wider population not being smart enough to learn reading.
There is a very very good open source Code coverage tool available for Python : https://pypi.python.org/pypi/coverage/4.3.4 - can be easily integrated into your test sequence. Or Sign up to www.codecov.io - to get free codecoverage automatically on every commit to github You don't need to pay for the professional edition to get Code coverage - all you get is the button :-)
Ok... I think I will go :-) when do you think the program will be available?? 
Did you install dlib
Pyro4 could also do the trick for you
I take it you don't work in this area. Just because data is publicly available doesn't mean it's digestible or ready for analysis. Companies like Bloomberg collate and summarise enormous amounts of data, and this is not free, nor is it easy to do yourself
The test_get_subtotal doesn't test anything from get_subtotal, it doesn't touch the function at all. It's just a (misleading) showcase of patch syntax. I'm having a hard time designing my tests. I constantly strive to learn how to do this properly and it's really hard to find good examples. That's why it's so frustrating for me to see such examples in an otherwise good piece of writing. I guess it would be nice to see you mock the API call inside the function.
Nice :) I always wonder, why people still use python 2
All the code blocks (where included from the original I cited) are identical, including the lengthy imports list! It also stretches credibility to think that two authors writing a machine learning post in Python wouldn't know that `DataFrame.head()` and `DataFrame.describe()` print their outputs by default. Finally, in the conclusions: &gt; We can see that the accuracy is 0.9 or 90%. The confusion matrix provides an indication of the three errors made. Finally, the classification report provides a breakdown of each class by precision, recall, f1-score and support showing excellent results (granted the validation dataset was small). &gt; We can see that our designed model is 0.9 or 90% accurate. The confusion matrix shows the indication of the three errors made. At the end, the classification report contains the precision, recall, f1-score and support shows the excellent result. 
OP, there are no downloadable files in https://pypi.python.org/pypi/face_recognition_models. This is the reason for /u/tilkau's problem.
&gt; In practice, you are usually better off just reading about modules, not digging in source code. The official Python documentation has for each native-Python module in the standard library a link to its source code in order to encourage you to read it. IIRC there's an explicit recommendation by Guido (I don't remember right now where I saw it) for every Python programmer to explore the source code of the standard library.
The random function is implemented by the _operating system_ because it needs entropy from low level sources, usually obtained at boot time and then from network activity - if the machine is networked. You can read more about it in [Wikipedia's /dev/random article](https://en.wikipedia.org/wiki//dev/random). So in lieu of a hardware random generator most languages usually just make a system call to get a random number, and Python is no different. [You can read about Python's implementation of os.urandom in the documentation](https://docs.python.org/3/library/os.html#os.urandom).
I personally prefer the syntax of Python 2 over that of Python 3.
Yes. That's actually beside the point (face_recognition requires dlib, but the error is clearly not caused in the course of satisfying the dlib dependency) I could install it manually from the [github source](https://github.com/ageitgey/face_recognition_models), but I don't actually give quite that many fucks.
I've found doit really insufficient; it's super verbose for even simple tasks, and it really doesn't offer much over traditional build systems like make. If you want to stick in the Python ecosystem, I'd recommend [Snakemake](http://snakemake.readthedocs.io/en/stable/). It's very powerful and is actively developed.
Didn't notice that. This is certainly wrong, but not what I meant.
Thanks! I already like the example that's at the top of the docs.
A cluster of x86 machines has more in common with the mainframe than you might think. Mainframes have a reputation for being more expensive and relegated to transactional and legacy workloads, like batch jobs executing COBOL to tabulate interest for bank accounts. While the original mainframes were designed for this (that's what was demanded by the market in the 60s, 70s, and 80s) in truth these were the first general purpose computers for businesses and have often had technological hardware and software features years before distributed x86 machines. Mainframes are capable of running almost any distributed workload and scale up performance without scaling up all of the x86 costs of floor space, management, power, etc. And you get a flexible and mature platform with best in class security, reliability, io performance, scalability, serviceability, etc. Mainframes are used by top fortune 500 and 100 companies for these reasons. Big data and analytics demands have become the popular new workloads and while x86 is fast for these computations, the companies with a lot of transactional data (like bank, credit card, and insurance companies) who keep this data on the mainframe platform. Moving this data off platform is expensive; if the data is already on the mainframe and the analytics capabilities are accessible and priced right then there is a real advantage to deploying analytics on the platform. There are some great q and a in this ama: https://www.reddit.com/r/IAmA/comments/3f5x1i/we_are_the_ibm_zos_development_team_aua/
Why wouldn't you take the area of the circle divided by the area of the square? Then you have a rational denominator.
Cool, but.. did we walk into a time machine? Is there a repository to browse code or view open issues? Pypi install? Formatted code examples? Python 3 support?
I am working on a cli that scraps content from a web page using xpath (based on yaml config files for each source/website) and sends the content (title + content + link) in a telegram channel: https://github.com/odra/lazarus
Where does it get the metadata from? MusicBrainz?
This uses threads as opposed to processes. I would probably use multiprocessing though since this doesn't look supported.
Finished up a [simple weather script](https://gitlab.com/evanburkey/weather) to add to my i3blocks bar. Currently working on a cli music player client to learn audio I/O, think cmus or ncmpcpp
Yup, in thirty minutes you can get, like, four digits of pi that way.
Maybe. But they asked about random and you mentioned that random is implemented by the os, which is wrong.
I guess. A quick google shows me NOOBS is a Operating System installer for Raspberry PI? Then find out what OS you actually installed. Then find out where it get this gpio module from. Your course should have some info on this or does it just assume it is there? Maybe it comes with Rasberry PI? Also see if there is a Raspberry subreddit or some getting started with this or that tutorial?
Paraview should be on the list of things you consider. It's scientific visualization software, scriptable in Python and has a good GUI for manually manipulating plots. 
/r/learnpython has some resources in their sidebar. Search youtube for sentdex. He has a good series on Python 3 basics. Python 101 by Michael Driscoll is really good as well.
Paypal have a license for a bank under some European system. I don't know the full details or exactly what it covers - payment processing, or actual banking? 
I disagree, as I also disagree with your statement that "Most users never need urandom". When someone needs to generate random numbers the only platform-agnostic option they had until 3.6 is `os.urandom`, as of 3.6 they also have the `secrets` module. The `random` module is badly named and when someone new to Python looks for random numbers the proper response should direct them to the less-intuitive `os.urandom`.
IPython and it's use of prompt-toolkit are pretty cool. But I do wonder, how often do people actively write a terminal-based UI? It seems rather niche.
I am finishing up writing an API wrapper for https://pokeapi.co. It's been a really good project for me as I got to learn about lazy loading, caching, meta programming, and how to structure modules. Hopefully I'll be done this week or next week. 
An easier way that converges slightly faster is to use [Buffon's Needle](https://en.wikipedia.org/wiki/Buffon's_needle), which can either be run via python simulations, or even just with masking tape and hot dogs on your kitchen floor.
Just to followup, a faster NumPy version and a plot: import numpy as np import matplotlib.pylab as plt plt.style.use('seaborn-darkgrid') plt.rc('font',size=16) N = int(1e7) np.random.seed(int(np.pi*500)) # why not? Rs = np.sqrt( np.random.uniform(size=(N,))**2 + np.random.uniform(size=(N,))**2) pi = 4.0*np.cumsum(Rs&lt;=1)/(np.arange(N,dtype=float)+1) fig,ax = plt.subplots() ax.loglog(np.arange(N)+1,abs(pi-np.pi)/np.pi,'-k') ax.set_xlabel('N') ax.set_ylabel('Relative Error') plt.show() fig.tight_layout() plot: http://imgur.com/a/Lk8TB
Loads of companies have already assumed the risk and come out ahead. You don't migrate a billion lines of code in one go. You nibble around the edges and slowly, over time, move away from your legacy system. Businesses are largely rational entities. When the costs of maintaining the old system exceed the development cost of a new system, they'll develop a new system. It was ever thus.
The [WayBackMachine](http://web.archive.org/web/20160906064739/http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.rand.html) appears to have a functioning backup, but it's from about half a year ago. 
The idea of a build system can be easily extended to create generic graphs of dependent tasks. This gets really, really handy if you're managing a large data processing workflow where sources are constantly being updated - having the dependencies coded somewhere makes it much faster and easier to update only those parts of your pipeline which lean on them. In my domain of science/research, my pipeline often lives on a large distributed cluster and has components (like running models) which can take days, weeks, or months to finish. If you try to use Make for a system like this, you quickly become an expert in how to hack the system to do what you want, but it's ugly, hard-to-maintain, brittle, and very prone to failure. Doit, Snakemake, Airflow, Luigi, and many other similar tools simply build out the core concept of Make with many features that come in handy for complex task graphs. 
For the hell of it I make it sort a list with 8 random nums, value 0-20 I believe. I told it to print 1 on the first sort +1 for every sort after, it got to 5,000,000+ before I killed it
If you want optimized bogo-sort you parallelize and have 8/16 processes all running at once bogo-sort, and once one of them has the right version you stop all of them.... I might write some code to show the runtimes....
Starring this one in case I ever need it in the future. Really cool little API. Thanks!
Do I want to put the effort into a bogo sort though...
Working on finishing up my Python data visualizer: https://github.com/fboender/davis It's a debugging tool for people like me who dislike full blown debuggers and IDEs but who find inspecting data through pdb a little too... unvisual.
RemindMe! 5 years "How many COBOL lines of code exist?"
No one knows how many COBOL lines of code exist today. 
Parallel Python has been around for over a decade. It's not new and it's not great.
There are much more active projects that do the same thing as this. - IPython parallel (https://ipyparallel.readthedocs.io/en/latest/ ) is pretty much the same idea but under active development, supports both local processes, small clusters, cloud computing, an HPC environments (SGE style supercomputing schedulers). - Joblib is a great tool for common embarrassingly parallel problems - run on many cores with a one liner (https://pythonhosted.org/joblib/index.html) - Dask provides a graph-based approach to easily building up task graphs and finding an optimal way to run them in parallel (http://dask.pydata.org/)
I did.... Here's the code: https://gist.github.com/willzfarmer/8db69f6957de210f4603af7dc7efc16b [Here are the results for lists of length 2-&gt;10 (inclusive)](https://i.imgur.com/rgfeyyY.png) The plot is on a lny scale. Edit: [Here's an updated image](https://i.imgur.com/gpZ2uGP.png)
I apologise for being rude but my main point stands. One could apply what you wrote to learning how to play a musical instrument, learning algebra, or for some cooking a simple meal. Yes, those things are quite individual, but we've always had to learn and internalise new - and at first "exotic" - concepts and then apply them to the "real", physical world in some manner. This isn't new. I've often seen people who've never played any instruments in their life picking up the violin later in life. I dare say that any of those can become "competent" to an extent where they enjoy playing and notice their skills developing from practice, in the same way "anyone" can become a competent enough coder to solve problems they encounter by practicing. What is so different between the two? By extension, it's almost as if you're saying that one culture can never understand another in some sort of Sapir-Whorfian way. Will those "100%" include our grand parents...? Maybe? I'm quite sure there are examples out there. I'm closing in on 40 and only started coding 1-2 years ago. I absolutely feel I can be productive enough in my area of interest.
Oh hey! I actually held off on testing Python 3.5 with Sanic vs PyPy2 with Falcon until PyPy 3.5 is released: https://morepypy.blogspot.com/2017/03/async-http-benchmarks-on-pypy3.html
I'm getting the following when I run on your images: &gt; In [1]: import face_recognition &gt; In [2]: image = face_recognition.load_image_file("./examples/obama2.jpg") &gt; In [3]: face_locations = face_recognition.face_locations(image) &gt; Illegal instruction Any suggestions? I also got that when running face_landmarks. This is on Ubuntu 14.04 after installing libboost-all-dev, dlibs, face_recognition_models and face_recognition. If this works, this is an amazing program. I've been looking for something like this, so thank you tremendously! edit: formatting and forgot to mention I tried face_landmarks.
Exactly the point. As of Python 3.6 your best choice for generating random values is the [secrets module](https://docs.python.org/3/library/secrets.html).
Creating network correction similar to [Source Engine Multiplayer Networking.](https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking) The "game" uses physics as a primary feature, necessitating prediction, correction, and efficiency. Been working on the actual client for about a week, and the networking and server-side for about two weeks.
Why?
i am new programmer and want to share experiences with others beginners ,i think this way we can learn faster 
The random module makes pseudo-random numbers, which is what you want for most tasks. If you want to do cryptography or related applications, then you need the urandom module and a degree and five years experience. Seriously - it is a bad choice for a beginner project.
Yes. 
Yea obviously schools struggle with teaching kids who have learning disabilities how to learn ...anything...that is kinda how disabilities work. So making your point based on people with disabilities doesn't make much sense. But looking at countries who have nearly 100% or even 100% literacy rate like korea, suggests that it is more about access to good education than it is about intelligence. And I'm not saying everybody can be a google engineer but that everybody could learn how to enhance their life with coding by making their work more efficient. 
Meanwhile in Kyoto University, engineering students only learn Fortran or (occasionally) C.
Yup. Not just Scipy, and available offline whenever you need it.
I am continuing work on my digital picture frame app. I am ready to release a v0.1 since it basically works. Just need to figure out how to create binaries with pyinstaller. https://github.com/buddylindsey/digital-picture-frame/
SimulateMe! alpha_catch
Ah, I see, I didn't notice the &lt;= 1 either Also, I like chaining things instead of nesting, so I'd probably write that like this: ((np.random.uniform(0, 1, (npoints, 2))**2).sum(axis = 1) &lt;= 1).sum()*4/npoints Also, if you use sum(x) instead of x.sum(), you'll use the Python `sum` and not the numpy `sum` - and I"m not sure the former works on boolean arrays? And yeah, my np.random.uniform was wrong - couldn't get the doc page to load for some reason at the time.
It's happening now. This entire thread is about a COBOL programmer who couldn't find work because there isn't enough pure COBOL work to go around anymore. I've worked at two companies with large software systems that replaced legacy COBOL systems. It takes a remarkable degree of complacency to believe that businesses aren't going to look at 50 year old software systems and 55+ year old programmers and think 'Hmm, maybe we need to start the process of bringing our systems into the 21st Century'
What, if any, tutorials did you use to make this? Why tkinter over pygame?
Jesus Christ you used Tkinter for that? Honey, Kivy is right there, and its also Widget based. I hope your level editor saves to Json or something... Anyway, looks sweet, and that you managed it in Tkinter is even more impressive.
Thanks man, I was doing this project at school half the time, so i wanted to only use standard libraries. It was awful. Level editor saves to .CSV, is that good?
I was doing this at school half the time, they didn't have pygame, so was just easier to use tkinter. And there arnt any tutorials for this kind of thing. I would suggest not doing this ever. Since it's horrible. Use kivy or pygame lol 
Now that it's done I'll just leave it in its 2200 line unsegmented disgusting mess that i have. There is no going back
I'm not saying they're not being replaced. I'm sure they are. Essentially, I doubt the original story about the guy who couldn't find work. There is more to the story, I'm sure.
There are never that many things on the screen. All the collision is done with simple things like rectangles. Where's the graphics are just made up of lots of images overlayed in the correct places so that the ground is on the ground. Everything has to be carefully optimised, there are never too many things on the canvas at once though. Since they are remove after leaving the view :)
:)
Are you redrawing everything every update? Or are you using the canvas's object manipulations to move/shift already drawn objects? Here's a link to my little rocket ship game https://github.com/irmen/rocketsimulator *edit* forgot to say your game looks badass :)
Most of it is the Canvas items being moved with the inbuilt function, but when items leave the screen Thursday are removed, to be redrawn later. It runs at 60fps. And thanks buddy :) i like the look of your rocket game 
You're not really missing anything. The idea is that bigscript_a.py provides its functionality to anything that needs it. At the moment, that's bigscript.py, but in future it could be anything else. bigscript_a.py won't know if the "other thing" imports sys. So if bigscript_a.py needs sys, bigscript_a.py needs to import sys. Cyclic imports - a imports B and B imports a - are not an issue in Python. Try it and see. The interpreter will import a, then import b, and then say "Oh, I already have a", and stop. 
sumy is mainly a command line utility http://github.com/miso-belica/sumy#usage If you want to use it in your code see http://github.com/miso-belica/sumy#python-api
In the evening at /u/BronzeOne 's house: Dad: hi son what did you learn in school today? History? 20 new French irregular verbs? /u/BronzeOne: nah dad that is boring. I taught myself how to make a videogame in python look here it is
You think every person who can code COBOL is able to find work? Why would you doubt the story?
Looks like the sort of solid platforming principles only someone crazy enough to write their own game engine in python would do. (as someone who's loves old school platformers and has started writing multiple pythonic game engines but never finished them, kudos. This is really impressive).
[removed]
I bet it relates to refusing to look nationally. There are jobs all over Indeed. Doesn't mean there is a COBOL job in your little neck of the woods.
Sound is done using WINsound. So, may have a bit of difficulty getting it off windows :/
Thanks for the insight. :) That really tickled my 'pickle'.
You're not alone, I thought the same.
A tiny amount of googling (python integer to words) brings up https://pypi.python.org/pypi/inflect. Check out the `number_to_words` function.
cyclic importing is tricky when using wildcard imports. If you use normal imports it will work as expected. (wildcard imports are kinda ugly and against pep8 anyway). 
Quick question. I've been trying to learn python and while I'm able to make things, I know my code isn't exactly formatted well. Should programs typically be structured the way you have them hear? With a class and then following functions? If so, where can I learn this best or how? 
Well, I can only say *it depends*... Python is a hybrid language and mixes concepts of object-orientation, more classic structured programming, and even functional programming. What is "best" depends on what you're trying to build. You'll have to familiarize yourself with the pros and cons of the paradigms I mentioned and perhaps read a lot of example code ... and continue to practice and work on your own stuff. You'll discover do's and dont's on the way. Personally I like to start with identifying classes yeah. Mostly because I learned to do that from working with languages that don't provide alternatives (Java, c# in a lesser extent).
I've got no idea, pickle? Maybe pickle it?
``json`` is part of the standard library as well
Right. Of course you could use shorter names or alias to shorter names: import bigscript_a as a import bigscript_b as b def myfunc(): a.a1 = b.b1() + b.b2() If there are no logical groups in your code, then in my opinion it should be a single file. Files several thousand lines long are pretty common. If you have trouble getting around in the file then you should get a better code editor and learn to use the navigation features. If you insist on separating it out anyway, then you should use normal imports. Wildcard imports are confusing to read since the reader will assume the function is in that file. When looking for a function definition I don't want to search multiple files. IMO you should avoid cyclic imports too. Data needed by a lower function should be passed in as an argument and results should be returned or mutate an object that was passed in. It sounds like your code is heavily reliant on global variables, another recognized evil. It sounds like refactoring your code in an OOP style would fix your problems. 
Don't you just want a list of dictionaries? If I'm not mistaken, your top example is actually valid python and should do exactly what you want.
Yeah that seems to be what it is, a list of dictionaries with the same keys. Is there a built in way of converting a python object like a dictionary (in the format in the second block of code in my previous post) into a list of lists (the format in the first block)?
&gt; The fact that sloppiness is common - even if sometimes warranted I'm not promoting sloppiness ... I'm telling you that organization in python does not necessarily involve multiple files. It involves a good code editor and object oriented design. &gt; I've been around the block with this one, stylistically, for like 20 years Your attitude is about 40 years old, and if you want to write like that I can only suggest you use a 40 year old language. Or get out of your rut and try the newfangled way. It's not that much more typing especially if you have a decent code editor. (Seriously not trying to be a dick)
People who've worked with Apple a long time describe its overall philosophy as: "We're going to identify the absolute best way to do this one thing, and we'll give you a beautiful way to do that thing that way. And if you want to do it some other way... *you're just wrong.*" Python shouldn't adhere to that model. If Python isn't supposed to support wildcard imports, it shouldn't support them. It shouldn't offer to support them and then not work right, or involve some quirks that require a deep understanding of the feature and lots of trial-and-error to get it to work right. 
I'm not sure how the Python way significantly differs from anything else. Granted I'm not familiar with js, but if you have two src ="whatever.js", and they both have functions called do-something, then which one is used? You either need some way to differentiate between modules - namespaces- or you risk name collision. Python lets you do either, and even gives you the in-between ability to select specific functions into the higher namespace. You seem to want a magic "import all the things into the upper namespace but don't let them conflict" functionality. What language gives you that?
I once did a Tetris game in Visual Basic at school, we couldn't install any graphics libraries so I used windows GUI elements for all the game pieces. Gotta work with what you have and kids get creative!
Reducing the overly heavy structure of object-oriented programming has been a thing for a decade. See [this article](http://www.americanscientist.org/issues/pub/the-post-oop-paradigm) from 2003: &gt; Since the 1980s software development has been dominated by a methodology known as object-oriented programming, or OOP. Now there are signs that OOP may be running out of oomph, and discontented programmers are once again casting about for the next big idea. It's time to look at what might await us in the post-OOP era (apart from an unfortunate acronym). And [this](https://blogs.msdn.microsoft.com/alfredth/2011/03/22/object-oriented-programming-is-dead/): &gt; OK perhaps not dead but Robert Harper, a professor at Carnegie Mellon University, says that object oriented programming and design is “unsuitable for a modern CS curriculum.” More of the quote in context is: &gt; "Object-oriented programming is eliminated entirely from the introductory curriculum, because it is both anti-modular and anti-parallel by its very nature, and hence unsuitable for a modern CS curriculum." And [this quote by Joe Armstrong](http://www.defprogramming.com/quotes-by/joe-armstrong/): &gt; The problem with object-oriented languages is they’ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle. One size does not fit all. Time to stop shoehorning everything into that mold. 
Python assumes you're an adult. It lets you use "import *" if you really want. That doesn't make it a good idea. It's not always "wrong" , that's why it's possible, but if you do it, it's your problem. 
No problem! So it's not quite a 'quasi list comprehension', it's a generator comprehension. If you do `x = (thing for thing in some_list)` for example, it creates a generator. Replacing `(...)` with `[...]` makes it a list comprehension. The good thing about generators is they are evaluated on-demand. If you wanted to add up a billion numbers you could do (poorish example, I know): `sum([number for number in range(1_000_000_000)])` This would first make a list with 1 billion numbers and then sum them, which would be slow and use a lot of memory. With a generator it's simple: `sum(number for number in range(...))`. This would not create a list with a billion numbers, it would only produce one number at a time *as they are requested*. I'm probably not making much sense or helping much, but really a list comprehension is a special kind of generator expression. They are kind of neat.
Upvote for using standard libraries.
Brilliant work! Keep it up man. 
i don't think that every good developer is on the autism spectrum . i do agree that most tech humor is completely abysmal in a similar way to this image - for instance reading tech sites on april fools day, especially slashdot, is the absolute worst. tech definitely has a higher percentage of autistic people than a lot of other industries, and a lot of the best programmers are likely autistic to some degree, but that's a far cry from every person or even most having some form of autism. i'm not sure that any of the things you listed here are actually puns, though they are bad attempts at being clever/funny with wordplay (tho i'm not sure google chrome is). in any case, none of that is really relevant to this being painfully unfunny to me or not. however, i should have probably kept it to myself. sorry about that. the person who posted it did ask me why though, so i tried to explain it. though asking the question of why isn't something funny is also a bit aspie :P 
In the meantime you can also add it to your setup.py via `dependency_links` to automate this step: http://python-packaging.readthedocs.io/en/latest/dependencies.html#packages-not-on-pypi
I'm interested to see your metaprogramming approach. Is the wrapper on GitHub?
&gt; I'm not familiar with js, but if you have two src ="whatever.js", and they both have functions called do-something, then which one is used? If you've put them in separate namespaces, you're fine. If you haven't, then yes, you've got a problem. But that's the point. JavaScript allows you to do things the namespace way (and fully respects that model) *or* the global way (and fully respects that model, too). Python appears to offer support for one way, but only half-hearted support for the other. And that's a problem. &gt; Python lets you do either, and even gives you the in-between ability to select specific functions into the higher namespace. No, see, it doesn't - as the problems I've encountered demonstrate. My module has no namespace collisions, but because I'm not using a *strictly* hierarchical model, it fails to understand an arrangement of code that's neither confusing or ambiguous. &gt; You seem to want a magic "import all the things into the upper namespace but don't let them conflict" functionality. What language gives you that? If I create a conflict, that should be a problem I own - and one that I can resolve in multiple ways: either by disambiguating my symbols, or by applying namespaces. Consider a similar paradigm: pointers. 1980's C-style languages support pointers, and then allow you to manufacture hordes of null pointer exceptions. Higher-level languages, including Python, reduce this problem by handling pointers implicitly. Every object reference *is* a pointer of course, but you're not allowed to monkey with the memory address inside it; the syntax only allows symbolic reference to the object and its members, and it translates memory addressing accordingly. However, these languages also provide pointer-type libraries that users can use (and assume the risk) if their circumstances require it, like if they want to roll their own array-like data structures. It's fully supported - not in a "we strongly recommend not using this, and don't guarantee that it will work right anyway" sense, but in a "here's a different model with some risks that you should understand" sense. Again: one size simply does not fit all. 
But as I've demonstrated, it doesn't just "let you use it." I encountered a weird error while trying to do something that was neither peculiar nor syntactically ambiguous.
I tried the sample code but I get the error below....what does it mean? Traceback (most recent call last): File "&lt;frozen importlib._bootstrap&gt;", line 2218, in _find_and_load_unlocked AttributeError: 'module' object has no attribute '__path__' During handling of the above exception, another exception occurred: Traceback (most recent call last): File "C:/Users/PycharmProjects/untitled1/sumy.py", line 4, in &lt;module&gt; from sumy.parsers.html import HtmlParser File "C:\Users\PycharmProjects\untitled1\sumy.py", line 4, in &lt;module&gt; from sumy.parsers.html import HtmlParser ImportError: No module named 'sumy.parsers'; 'sumy' is not a package
I see. It makes sense to plan what classes and such you'll need. Still haven't fully grasped the idea of classes and how best to utilize them. I know what they do and what they're for for the most part but actually using them is not yet there for me. Thanks for the advice. 
Those are interesting. I hadn't come across `types.MappingProxyType` or `typing.NamedTuple` before. There's a typo in the first `types.MappingProxyType` example. The line should be: read_only = MappingProxyType(data) Also, the first line in the `NamedTuple` example should be: from typing import NamedTuple 
No totally, that makes a lot of sense! I always forget about generators, and didn't know they had a comprehension too. V cool
I don't know about any decent tutorials, but for a non-static app such as a game you may want to drop kv language altogether and edit/add widgets directly from the code. `kv` is pretty cool for editing layouts, but not when they significantly change at the runtime.
Hm, never heard that Guido's opinion, but if he says so, then that's the ultimate truth.
You did it again.... JUMP!
It's better if he totally is. Its the quiet guy at work.
What's the &lt;=1 in the argument for int() do? I haven't seen that before.
is there anyway I can get the source code for educational purposes?
Hey nice! I have a tkinter app the canvas performance is super shit house. Can you give me insight into your logic for removing objects that are outside the view?
Perl is kinda dead. Python has replaced it. If you google programming language popularity, Perl has taken a nosedive. There is no reason to beat up on something that's not being used.
Personally? Because Perl is the bane of my existence, and Python is the allegorical cure for cancer.
Yeah I found [a solution](http://stackoverflow.com/questions/37904503/illegal-instruction-core-dumped-while-running-dlib-face-detection#37904953). Apparently it was with dlib and a consequence of using an older cpu. I had to change the line in: dlib's tools/python/CMakeLists.txt from &gt; set(USE_SSE4_INSTRUCTIONS ON CACHE BOOL "Use SSE4 instructions") to: &gt; set(USE_SSE2_INSTRUCTIONS ON CACHE BOOL "Use SSE2 instructions") 
Pyglet is pure python. 
Well *I say* that the dubstep was perfect.
Incredibly impressive that this was written in Tkinter. You should be very proud of yourself! 
I'm curious to your reason for recommending Kivy over pyglet. Where would you use one/another?
Dude, I would love to see the process that went into building this. This is fantastic.
It's because you named your file `sumy.py` - you'll have to rename it to something else and remove `C:\Users\PycharmProjects\untitled1\sumy.pyc`
Wow, that's really difficult. [This didn't count as a successful landing](http://i.imgur.com/01ZUiFj.png).
This was one of those cases where I played with it to see if Python would do what I want. It turns out `int(True) == 1` and `int(False) == 0`. I used this to keep a cumulative sum of how many met that condition. I probably didn't even have to use `int()` but I wasn't sure so I did it anyway. For example: `True + 1 == 2` (which == 1). This led me to: ((True + 1 == 2) + 1 == 2) + 1 == 2 (and so on...). I guess it is like the flip-side of truthyness
Thanks for the info! I posted there too.
Do you go to CMU by any chance?
No, I don't go to university yet, year before :)
Thanks buddy
Thanks 
Dubstep was was the kids wanted , I'm not into that music either, just wanted a bit of hype
Should i put it on github?
Oh you are right. Good catch.
It look me about two months to get 80% done. Then i finally finished it after another 5. It was mostly done, took a while to get round to finishing as all projects do. I have only done a bit of kivy, but if you know it's possible. I think you may as well start now :)
Yeah this one: https://www.youtube.com/watch?v=U14P8gtjQmU&amp;t=6927s
Python doesn't have access level modifiers, though.
A few months. Pygame is easier, but Kivy gives you something you can transfer to Android and iOS.
does nobody read the bloody sidebar?? /r/learnpython
**Never speak ill of the dead**
Fixed, thanks.
Use the requests module to get the pages as html from the server. You need to use sessions to be able to log in. Then use beautifulsoup to parse the data and put it into python dicts. Use the dictwriter in the csv module to save the date in a format that can be imported to a spreadsheet.
 #!/bin/bash # cat.sh Cat=0 cat_() { cat &lt;&lt;- CAT &gt; cat.cat cat &lt;&lt;&lt; 'cat' CAT cat cat.cat rm cat.cat } _cat() { eval $(cat_); } _cat | cat exit $Cat
Shouldn't the last example [here](https://github.com/topper-123/Articles/blob/master/New-interesting-data-types-in-Python3.rst#typingnamedtuple) be: `MaleStudent(name='Tommy Johnson', address='Main street', age=22)`?
or in 2 minutes... from numpy.random import random n=10000 print(4*sum(random(n)**2+random(n)**2&lt;1.0)/n) 
Yes, corrected. 
I don't see how it truncates anything, I just tested it too and it seems fine. Am I missing something? I'm not using the -n option so it's substituting each match directly in the line buffer without changing anything else.
`typing.NamedTuple` is competitive with `collections.NamedTuple` memory-wise, BTW. This was one of my doubts when you introduced `typing.NamedTuple`, but it seems that `typing.NamedTuple` continues in `collections.NamedTuple`'s tradition (doing strange things with class objects) Here's the relevant part of the code: def _make_nmtuple(name, types): msg = "NamedTuple('Name', [(f0, t0), (f1, t1), ...]); each t must be a type" types = [(n, _type_check(t, msg)) for n, t in types] nm_tpl = collections.namedtuple(name, [n for n, t in types]) nm_tpl._field_types = dict(types) try: nm_tpl.__module__ = sys._getframe(2).f_globals.get('__name__', '__main__') except (AttributeError, ValueError): pass return nm_tpl _PY36 = sys.version_info[:2] &gt;= (3, 6) class NamedTupleMeta(type): def __new__(cls, typename, bases, ns): if ns.get('_root', False): return super().__new__(cls, typename, bases, ns) if not _PY36: raise TypeError("Class syntax for NamedTuple is only supported" " in Python 3.6+") types = ns.get('__annotations__', {}) return _make_nmtuple(typename, types.items()) So a `typing.NamedTuple` actually IS a `collections.NamedTuple` with a few direct modifications of the class object.
That's some clever stuff, nice!
What is this side bar that you speak of ?
Unless you plan to sell it for actual money, the answer is always yes.
To me this is a spectrum. The standard way for doing so many scripts is command line arguments. Which makes for a very bad user interface. If you have a script that you want to be used as part of other scripts, then sure, command line arguments is best. But so many of my scripts are one off scripts we run on server or developer machines, and them asking for command line arguments is just a shame. You run the script with -h to find out the arguments, and their order etc, then you manually construct the arguments with minimal shell assistance (auto complete only works for file names, to get it to work with hostname/ip etc is a *major* effort). The end result is UX is really bad. Using input()/raw_input() was not an improvement at all, input() doesn't do any auto complete (with much effort), etc. Also, while you do not often write full terminal applications, we often write commands exposing more commands. Click etc are famous to make it easy. They would all be much easier with prompt-toolkit.
----&gt;
Bank of America Merrill Lynch in London, England is [looking for a lead developer](http://pythonjobs.github.io/jobs/baml_uk_london_lead_developer.html). This job is located in Central London - quite near to St. Paul's Cathedral. We don't require any previous financial experience, but prior experience working on big projects and with large teams would be strongly desirable. If you are interested please follow the contact instructions on the job ad or just PM me.
as a foggy abstraction you can think of a "whl" as the "rpm" for python packages recent pip will install them just fine wheel is used to create them
/r/learnpython it's the best :)
Because namedtuples are also tuples, their attributes are accessible by index, counting from the start or end. That makes it difficult to add or reorder attributes after you've exposed instances on a public API. So they might give you a little more than what you want from them. 
Hobbyist situated in Iceland interested in all things Python to get me rid of my novice status in programming. I want to learn more than the insane amount I already know about computers (I've been messing with them since age three, and that's 18 years currently) and this would probably be one of my best avenues currently to spread my wings, so to speak. I have some Python knowledge, 2 and 3, as well as some mild C/C++, some Ruby, a bit more BASIC (Because I have a couple retro computers here) and then quite a bit of HTML/CSS. I know no backends, but am opening to learning the backends and working with them. Considering my location, a full time local job is probably impossible to find here, but I would gladly take a full/part time job remotely.
I want to write a program that solves a geometric problem i am dealing with right now. Imagine you have a sphere of given radius around a center point c. You also have a grid of points around the sphere. I want to find all the points that are closer to the spheres surface than a given value s (doesn't matter if outside or inside of the sphere). While i got a general idea of how i want to do it i am worried that i won't be able to streamline the process enough. Anyone ever done something similar?
https://pypi.python.org/pypi/graphviz
Thanks for the guidance! 
This is awesome. The music is awful, but the game is awesome. Good job! I did some stuff in python too, a [Wario-land-3 clone](https://github.com/Nearoo/Wario-Land-3) using pygame for instance, and currently I'm working with kivy. Maybe we could work on something together one day?
Trying to implement d3 visualizations with a django based website I'm working on. Harder than I thought it would be. 
Sorry, I'm not sure.
Writing the control code for a small-ish autonomous catamaran, which is supposed to be able to map lakebeds eventually! Right now I'm scared to actually put the thing in water to test it, so I'm spending most of my time writing code to simulate its movement instead.
[@Stranger6667](https://www.reddit.com/user/Stranger6667) I would like to help. 
Thanks for this I'll try to find some time to read it. 
Try Tim Bulchalka's python course on udemy. He's a very thorough teacher. 
Got motivated by the [Reddit Image scrapper](https://github.com/2hands10fingers/RedditImageScraper) ([posted](https://www.reddit.com/r/learnpython/comments/5zgki9/i_built_a_reddit_image_scraper_with_the_team_at/?st=j0b24icn&amp;sh=c5779cc4) in /r/learnpython), and trying to build my own, with some different logic.
I believe pandas uses numpy arrays in the back end, which is fairly standard. However, if you're dealing with large data sets where you can't load or all to memory I would suggest that you look into storing your data with HDF5. there are python libraries for reading writing on all the major OS variants and pandas can interface with this format directly. You'll likely be able to do a lot of the statistical analysis that you can do in root with a combination of pandas, numpy, scipy, and seaborn. I'm not aware of a way to directly convert your .root files but it's been years since I've used root and haven't kept up with it after switching to Python
I would change the music otherwise Nintendo will probably try to take it down because of the mario sound sample in it...
Much much faster. Recently I did something in PHP too and it was really slow. And right now I am even quite enjoying creating GUIs with Python and QT.
Just to be sure. With nuitka, did you include `--recurse-all` and `--recurse-stdlib` ? I had the same problem, but these two instructions solved it.
Using a main list for every object in the scene, and using the tkinter find over lapping. Then giving each class a respective collision function. Which takes a lot of time to get right
Yes. A lot.
Thanks man, i might post this in /r/gamedevs or whatever the game development subreddit is. See if they like it 
True, but check this out: %timeit np.sqrt(np.random.uniform(size=(N,1))**2 + np.random.uniform(size=(N,1))**2) 1 loop, best of 3: 354 ms per loop %timeit np.linalg.norm(np.random.uniform(size=(N,2)), axis=1) 1 loop, best of 3: 541 ms per loop %timeit np.sqrt((np.random.uniform(size=(N,2))**2).sum(axis=1)) 1 loop, best of 3: 582 ms per loop I was actually surprised. It was nearly twice as slow to make an Nx2 instead of 2x Nx1. Of course, it makes no *real* difference
Yeah I used both of those options when I got the LoadLibraryEx failure. I can get nuitka to work without the --standalone option, but then it only runs on my computer.
Yes, for multiple reasons: * For almost any project I can get it done in far fewer lines of code; and that's not code golf, that's elegant code in fewer lines. * I use it for most of my projects, so I'm more proficient. I don't have to google things, and I write fewer bugs that I have to go back and fix. 
I'm getting similar results. Yeah, that is super weird. I wonder why that is.
I was having issues yesterday. In the interim, the GitHub repo is helpful: https://github.com/scipy/scipy/tree/master/scipy
Some other options discussed in networkx docs: https://networkx.github.io/documentation/networkx-1.10/reference/drawing.html
Downvoted since it has nothing to do with python.
It is ordered like the underlying mapping. That is, if you're using a ``OrderedDict`` it will be ordered like one, and if it's a normal ``dict``, it will be ordered like that. So in short, it's ordered in the same way as the underlying mapping, and in Python 3.6, that means the order is insertion order. 
The issue is fixed now. The package should be downloadable.
What the hell is a "co browing solution?" (Geez, have I been away from the world for so long that this should make sense??)
Have you tried [Pynsist](http://pynsist.readthedocs.io/en/latest/)? It's a bit different to those other tools - you get an installer, not an exe - but I wrote it to avoid a lot of the difficulties I experienced with freeze tools. Here's an [example using PyQt5](https://github.com/takluyver/pynsist/tree/master/examples/pyqt5). `&lt;/shameless_plug&gt;`
This is the first time I've heard someone say they enjoy making GUIs in Python.
Tim Berners Lee developed something similar about 30 years ago. He used a markdown format called html.
No it doesn't. For example `print "hello"` is valid python 2, but syntax errors in a Python 3 interpreter.
Do they though? I'm not saying you're wrong I'm just not sure I've seen what they do that's unique. Could you please provide an example? I feel like everything I've seen done with f-strings could be done with % or .format(). The only real sell/advantage is that there's less typing involved. To me I'm not sure that's worth having 3 different ways of doing the same thing.
It's a LOT less typing, they support full expressions and they are guaranteed to be safe. 
I know what you mean, but I almost never use `del`, so rarely have to see it. :-) I guess when I'm removing a bunch of stuff from a list or dict, I'll tend to build a new list/dict with a comprehension, rather than modify an existing one (unless performance is critical). And I don't think I've ever `del`'d a variable name. When do you generally use it?
They're also supposed to be more performant, though I've not personally tested it. 
The one obvious way to do it is f-strings. The others are legacy approaches we can't remove because it'd break code.
&gt; mainly useful in the rare situation where you need faster templating. You kinda have to use % style formatting for the stdlib logging class. Its an internal limitation to the library that it does not and cannot know what kind of format string was passed as the first argument to the log/error/warn function. You could patch the library to use `.format` and use those strings in your code, but anytime you imported someone elses library and they used the logging class you would have to go into their library and change all their log messages.
Hyperbole and silly arguments make you lose the argument, not win it. 
I don't think it's always a bad thing to be explicit about getting rid of a variable when you're done using it. I can see the argument that it'll automatically be garbage-collected, and that the del statement doesn't even guarantee it's freed from memory, but sometimes you want to make the statement in the code that, yes, I'm finished with this and you can trash it now that I'm done with it.
Tkinter only? You are impressive.
Sure, I suppose the Python GUI ecosystem could be better. What language/library is easiest for GUIs, then?
Well yeah it was never meant to be easy! I made it in the time Space X was landing their Falcon rockets on that platform. That wasn't easy either :) Your delta vee was too high it seems but otherwise well done. I will revisit to see if the margin of error can be increased a bit or perhaps to introduce a few difficulty levels.
Any time you need to explicitly `del` a variable to deallocate a resource, it's likely a context manager and `with` statement are better.
interesting but is just a brute force dictionary attack that is only as effective as your dictionary. It's nice that it formats to bind, though. Thanks!
There are lots of places you can't use f-strings. * For instance you cannot programmatically build an f-string the way you can a format string. * Nor can you pass an f-string as an argument to a function. So if you ever want to isolate the part of your code that determines how to format the output, from the part of your code that loops through the data and actually formats and writes the output, then you cannot use an f-string.
Tuples are immutable types, but their members might not be (from *Fluent Python*): &gt;&gt;&gt; tup = (1, 2, [1, 2, 3]) &gt;&gt;&gt; tup[2] += [4] Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: 'tuple' object does not support item assignment &gt;&gt;&gt; tup (1, 2, [1, 2, 3, 4]) I don't know if it's specific to Python 3, though. 
Here's a little gotcha. I think it's well known. &gt;&gt;&gt; class C: m = 3 ... &gt;&gt;&gt; c = C() &gt;&gt;&gt; c.m += 1 &gt;&gt;&gt; c.m 4 &gt;&gt;&gt; C.m 3 The problem is that `+=` uses a different rule to look up the old value than it uses to decide where to put the new value. 
`dict` ~~and `set`~~ have a `.get` method, but `list` does not. It would be nice to be able to write this. value = my_list.get(index, default_value) Edit: corrected by /u/masklinn.
/r/learnpython
It's never been clear to me the logic behind not only keeping but expanding the number of built in functions that just call the `__xxxx__` special method with the same name, e.g. len(). I understand it provided primitive polymorphism long ago and far way before Python 1.5. But today it drives me nuts that I have to remember when to call a method vs use a built in function that... calls a method.
This makes perfect sense to me - you're assigning a value to `c.m`, and since `c` is an instance of `C`, of course you're setting `c.m` and not `C.m`.
Nah, that's a consequence of putting mutable objects in an immutable structure.
If it were implemented that way there would have been no need for 3.x.
Class attribute versus instance attribute. That is expected behaviour.
Look at the version number! It's​ a major version change. Why should it be backwards compatible? Pretty much every other software project does it the same way. What else could they have done? Give it a totally different name?
I did edit the comment, but I didn't change anything above the 'Edit:'. I would've used the in-place sed option in the first place (which just writes to a temp file and renames it to the original anyways) but it's bad practice - in case you mung up your data - to deleted your original. Got me on the useless cat though since that also adds an unneeded sub shell because of the pipe. It should be `cmd &lt; old &gt; new`. You already knew all this though. I was just goofing around, it's of course ridiculous that the db would be exported to a csv from Reddit's PostgreSQL and this would've likely been done with something like `WHERE comment ~ 'regex' ...`. I'm just overcompensating now because I got embarrassed.
If you think about it in Java terms I can see why'd you'd think it's weird. The variable is both static (as shown by "C.m") and also a member variable ("c.m"). I'm very knew to Python and am a Java dev, but what I suspect is going on is that it's basically splitting it up into 3 steps. 1. Get the value of 'm' from object instance 'c', there's no specific instance of the variable for the object so it takes it from the class. 2. Increment the value. 3. Assign the value to variable 'm' of the object 'c'. It finds 'c' has no variable of that name itself and so creates one, giving it the value. I think [this supports my explanation](http://stackoverflow.com/questions/17043524/adding-new-member-variables-to-python-objects), but I'm on my phone on a train so can't check for sure. So it makes sense when you think about it, but it's weird if you're new to Python like myself and can introduce errors easily.
They might converge the two namedtuples at some point, but as it stands right now they're not the same. One is a plain collection and the other is a typed version, hence why it's in types. What would you use instead of `id`, `type`, and `all`? Are you also upset about `list` and `dict`?
If you are involved in particle Physics learn ROOT. If you can not do this you likely won't be in particle physics for long. After a bit of time with ROOT consider expanding to PyRoot other supported software at your installation. Your best bet is to adapt to the primary tools at your location. After demonstrating that you can manage such, make gentle waves about using more modern methods such as the use of Python, Swift, Julia and etc. The thing here is that the primary tools will have many users many that might function as mentors or advisors. Trying to use new tools while they are bringing you up to speed will be frustrating all around. Now do be careful, many installations have adopted Python or other tools to some extent. In that case you might not directly touch ROOT. I still think you will need to know a little though Best of luck. ! 
I don't know what you think the silly argument is. In my case the user of the script is sitting at the console running the python command. In that instance they have read access to the script, and execute access on the interpreter. So they can copy the script and edit the f-string and run their own version of the script. Or they can edit their environment and cause the python interpreter to load their own corrupted versions of the standard library. So f-strings bought me nothing, the problem began when I turned on the computer. ------------- The safety guarantees of f-strings are limited to web programs. I don't program for those, so for me I don't see any benefit to f-strings at all. I do wonder how big an issue this is for webprogramming. Are people commonly taking POST variables and shoving them into python variables, and then calling .format on the value submitted by the user? That is obviously dumb (although I'm sure it does happen). But nothing in the addition of f-strings will prevent people from doing that. At best it might enable you to introduce a coding style that says "all string formatting must be f-strings" and then audit for any use of `.format`. However you can already achieve that. Just grep for any instance of `.format` that isn't being called on a string literal. `grep '[^"].format'`
It depends on what you think `class C: m = 3` means. If you take the C++ analog and have it as class C { public: static const int m = 3; }; this says there's only ever one instance of `m`, so that `C::m` refers to a fixed place in memory. If instead you view it as class C { public: int m = 3; }; (which is now valid in C++11), then this say that each instance of `C` shall receive its own `int` variable named `m` which defaults to `3`. That is, under this version of code `C::m` *doesn't mean anything and is an error*. However, if we have this: C c1; C c2; c1.m += 1; cout &lt;&lt; c2.m; we obviously get `3` since `c1.m` and `c2.m` are two independent variables with completely separate memory locations. Instead, in Python, the syntax for `class C: m = 3` is neither like the `static` form in C++ nor the latter form. Instead, if we have this: class C: m = 3 c1 = C() c2 = C() then if we were to ask `c1.m == c2.m` we would get `True`. We would *also* get `True` if we asked `c1.m is c2.m`. That reveals that these are *not* independent variables, they are actually shared and they are actually the same as `C.m` (`C.m is c1.m` is also `True`). Now, when we jump in and say `c1.m += 1` we might reasonably expect `c2.m` to change *because they both referred to the same underlying object*. Instead Python doesn't work that way and what we end up with is that `+=` to an integer type actually rebinds the variable name to the new value. Therefore, in this case, `c1.m += 1` does not affect `c2.m` *nor* `C.m` but it does alter `c1.m` so that it points to an integer with the value `4`. This means that `c1.m is c2.m` is now `False`! It also, necessarily, means that `c1.m is C.m` is also `False`. Compare this to class C: def __init__(self): self.m = 3 Here if we substitute that, then `c1.m is c2.m` was always `False` right from the very start. Now let's compare with two other things: 1) Modifying `C.m`. Run this: &gt;&gt;&gt; class C: &gt;&gt;&gt; m = 3 &gt;&gt;&gt; c = C() &gt;&gt;&gt; C.m += 1 &gt;&gt;&gt; c.m 4 &gt;&gt;&gt; C.m 4 &gt;&gt;&gt; c.m -= 1 &gt;&gt;&gt; c.m 3 &gt;&gt;&gt; C.m 4 So `c.m` "shadows" `C.m` and incurs any changes made to `C.m` but as soon as you change `c.m` it's now decoupled from `C.m`. That's weird, isn't it? From a C++/Java background, this behaves like neither a member variable nor a class variable in those languages. 2) Using a mutable object: &gt;&gt;&gt; class C: &gt;&gt;&gt; x = [] &gt;&gt;&gt; c = C() &gt;&gt;&gt; c.x [] &gt;&gt;&gt; c.x.append('Test') &gt;&gt;&gt; c.x ['Test'] &gt;&gt;&gt; d = C() &gt;&gt;&gt; d.x &gt;&gt;&gt; d.x.append('List') &gt;&gt;&gt; d.x ['Test', 'List'] &gt;&gt;&gt; c.x ['Test', 'List'] &gt;&gt;&gt; c.x is d.x True &gt;&gt;&gt; C.x ['Test', 'List'] We could repeat all that except instead of `c.x.append('Test')` use `c.x = ['Test']` and find that the behavior is completely different, ie, `d.x` would just be `['List']` and `c.x is d.x` is `False` and `C.x` would be `['List']`. If `d.x.append('List')` is changed to `d.x = ['List']` then `C.x` would still be `[]` but instead we have class C: def __init__(self): self.x = [] Then the above code behaves very very differently, even using the `list.append` calls because *the two lists are at separate memory addresses* and are therefore independent. --- Understanding when you create a new object versus are binding to an existing object is fundamental to understanding how Python works. At the core of it, Python loathes to create new objects and wants to treat everything like a shared pointer/reference counted pointer.
I usually use del when I want a variable disappear from the current scope, in order to catch a bug faster whenever that variable is used again.
 $ python3 -c 'print("\udcff")' Traceback (most recent call last): File "&lt;string&gt;", line 1, in &lt;module&gt; UnicodeEncodeError: 'utf-8' codec can't encode character '\udcff' in position 0: surrogates not allowed `PYTHONIOENCODING=utf-8:surrogateescape` really should be enabled by default. Having `print()` fail is not a good thing and makes simples scripts extremely error prone. Another issue is hash randomization: $ python3 -c 'print(hash("1"))' 7455489242513451525 $ python3 -c 'print(hash("1"))' -3075079798760153127 It would be nice if I could disabled that easily from within Python, but right now it's only available as environment variable. I like my programs deterministic and hash randomization prevents that or at least requires to splatter a lot of `sorted()` through the code. 
In the next days we will open the CFPs, then it's up to the Attendees to vote and make the program :)
I'm in Python 3.6, and `set.get` doesn't exist. `set` isn't even subscriptable. And realistically, `my_list.get(index, default_value)` would only ever return `default_value` if `index` is outside the bounds of the list. Which is to say you're trying to access information that doesn't exist so it would be equivalent to try: value = my_list[index] except IndexError: value = default_value 
Wait, really? I never realized this. WTF Python!?
Parenthesis work as well and look a little nicer than `+ \`: a = ("long" "string") I wouldn't mind if they would be required for string concatenation, though that leaves some ambiguity for tuples.
That's one case. Not all. 
Sounds like a good idea. Maybe it worths a PEP.
If it is the only reference and you delete it chances are that it gets freed very very quickly, much faster than if the gc has to figure out that no one is actually using it anymore. Especially as in a long running function the variable doesn't go out of scope until the function returns, therefore keeping a reference to said expensive object
&gt; Especially as in a long running function the variable doesn't go out of scope Make your functions shorter. :) If you allocate a big object for a short term use in a long running function... that sounds to me like a great place to think about adding a function and calling out to it. Having variables be scoped for the life of a function is not a bad thing because it makes the function easier to understand and read.
Well, I have had good although older book to learn basics and PyQT also has quite good class documentation of that huge amount of widgets. It was really step up from Tkinter though even that is much better than it used to be with tix and ttk widgets at least from what I heard.
For fitting data you can use the iminuit and probfit packages which use the same Migrad algorithm as ROOT. Having used both Matlab and scipy to fit data I often find iminuit/probfit to be the most robust and informative.
A bug I found, the GitHub connection returns a server error 500.
You could just factor the code out into a separate function.
Sometimes really not applicable as the function would be very short and pulling it out would actually make the code messier. But the point is `del` has its uses
.. x) What I meant is I want to write my articles in markdown in a simple txt file, and then use something to convert it into html and not using a database or an upload process. 
Makes perfect sense to me, attribute assignment always works on the leaf (the instance), attribute lookup will walk up the class chain until it finds a match. In fact it's super convenient to not need to set shared default values in init, you can just set it on the class and have the instances which actually need to set it locally.
You can always map it `assert (1, 2, 3) == tuple(map(d.get, ls))`
Here's how I explained it when this was discussed a few months ago: https://www.reddit.com/r/Python/comments/58l5aj/is_it_true_that_is_outdated/d92l9qt/ I think f-strings will quickly become dominant and are just coming in at the right time to be a big part in the community's switch to python3. They're not a 'killer feature', but they're probably about as close as it gets.
It can't be a function. A function receives a reference to an object, but that has nothing to do with the caller's name. If you write `foo(bar)`, the function receives a reference to whatever object `bar` refers to currently, there's no way for the function to unbind the name `bar` in the caller's frame, which is what is required. Also, `del` works with any lvalue, so you can write `del some_dict['key']`. If it was a function that would have no chance of working, because the function would just receive the value, it wouldn't know where it came from. 
Working through the Tensorflow tutorial material. Learning about Python and ML at the same time.
I dislike the syntax, not its utility or its name. It's a statement, when in most cases it makes more sense for it just to be a function or method of some classes. It's like having special syntax to open a file. Open is just a function that does something, having special syntax for it isn't nice, would lead to many problems. Same thing that happened with print, and should happen with del. Though I understand the compiler reasons for it to be harder to change.
They mean that you can embed arbitrary expressions in the `{...}` portion, whereas with `%` and `str.format` you are more limited. You can write things like `'{foo.attr}'.format(foo=...)` or `'{bar[1]}'.format(bar=...)` but those are specially permitted cases, you can't do something like `'{foo.attr + bar[1]}'.format(foo=..., bar=...)`. With an f-string you can. 
Yeah, but it's a bit clunky to have 4 lines when one would do. You could always write a `listget(lst, index, default=None)` helper function. There was a PEP created to add a generalized feature of this pattern a while back ([PEP 463](https://www.python.org/dev/peps/pep-0463/)), but it was rejected by Guido [here](https://mail.python.org/pipermail/python-dev/2014-March/133118.html). The syntax recommended was: value = my_list[index] except IndexError: default_value I kinda like the PEP, as I often need stuff like this: num = int(num_str) except ValueError: 0 But I agree with Guido that the syntax is a bit weird, and I'm happy with feature rejections rather than trying to stuff everything in the language.
Because it's just an instance of `C`, or a copy of it. You're saying, "take `C`, in which `m` = 3, and make that `c`. Now take `c.m`, which is 3, and add 1 to it." You never changed the original `C`. Think of it this way. Open a text editor and write a a string. Now copy and paste that string onto the second line, and add some characters. You still have the first line, the original. That can be copied and pasted again if you need to add different characters, or you can use the second line, which has been modified.
What would set.get or dunder-getitem do though?
I don't know why MappingProxyType is there. What do you propose as alternatives to id and type? And I put it to you that you're wrong for wanting to use `type` as an identifier in your code...
What kind of comments are you referring to?
Only if you want to pass lots of state into that function. There are two competing philosophies at play here. One says that variables are scoped to the lifetime of their function which makes it easier to understand what a function does. That is very pythonic and you see that in things like `for x in range(5):` keeping x alive after the for. The second is to only keep variables around for the minimum amount of time they are needed. Which is what something `del` can achieve. A nice explicit internal `scope` declaration might allow you to def frobnicate(): # this is really contrived, maybe somebody can a better example x = 1 y = 2 z = 3 scope: # i really only need w this once: u = x*y+z v = y*z +x w = z*x + y x += u*x + v*y + w*z y += v*x + w*y + u*z z += w*x + u*y + v*z return x+y+z That seems better than passing x,y,z to some sub-function or having to worry about clearing u and v and w at the end of their usefulness.
I think the rationale is that often the functions do more than just call a method. It's often talked about as the object supporting such-and-such a protocol. For example, `iter(obj)` calls `obj.__iter__()` if it exists (iterator protocol), otherwise it calls `obj.__getitem__()` (sequence protocol). In the latter case, the object can be any collection which has a `__getitem__` -- no `__iter__` method required. Similar with how `reversed()` tries `__reversed__` and then `__len__` / `__getitem__`. Also `dir()` tries `__dir__` and then `__dict__`.
Well, the question wad what is easier :D
The browser understands HTML only. Your choices are: 1) Write some frontend code and use a Javascript library to translate the markdown to HTML, eg https://www.npmjs.com/package/markdown-to-html , which is then inserted on-the-fly into the HTML document. 2) Have server-side translation of markdown to HTML, eg https://github.com/trentm/python-markdown2 Option 2 is the sane one. Any web server app can serve this HTML, whether it's Django (overkill), or Flask, or Bottle.
&gt; you can't do something like `'{foo.attr + bar[1]}'.format(foo=..., bar=...)`. With an f-string you can. But you can do `"{}".format(foo.attr + bar[1])`. So why is one better than the other? In either case I have to fully specify the variables and their attributes as well as the operations to be performed. The only difference is that in one I perform it in the argument list, the other it happens inline. 
Or use a well defined deterministic hash, like `hashlib.md5`. `hash()` is only intended for use in indexing (e.g. dicts) where order is mostly irrelevant.
Tough. That seems like something a compiler warning could address, if such a thing existed in Python. You could programmatically detect what was likely intended here.
Yes. Without a doubt. Faster than any other "rapid application development" language that I've ever used. Python wins by a mile. Now, it might take a bit longer to write a well-thought-out program with clearly defined interfaces, but often, that part will come in later. With python, you can test your ideas and get a proof of concept working in hardly any time at all. Then go back and write proper interfaces and documentation later. 
I've taken to storing money in micros (like Google Adwords) myself. Is this just a wrapper around DecimalField?
Working on 32-bit Linux release of CEF Python. With CEF Python you can develop Python GUI apps with user interface developed using web technologies, or you can embed a web browser control based on Chromium in existing applications: https://github.com/cztomczak/cefpython
You realise the `del` statement of only ever dereferences right? The GC still has to check if the underlying object is still referenced somewhere else, and the object may very well not be collected. That being said I'm not sure how dereferencing using a context manager would work. Any variable created by/inside a with block is in scope outside the block and will not be gc'ed.
Sure but obj.iter() could do the same thing. ditto obj.reversed(). They could live in abstract base classes. Feels like a wart. But not a huge one. Iterate obj iter(obj) Iterate obj k,v pairs obj.items() It takes effort to differentiate mentally between what's a method and what's a function. Guido makes a good argument for it nonetheless http://effbot.org/pyfaq/why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list.htm
Sure but obj.iter() could do the same thing. ditto obj.reversed(). They could live in abstract base classes. Feels like a wart. But not a huge one. Iterate obj iter(obj) Iterate obj k,v pairs obj.items() It takes effort to differentiate mentally between what's a method and what's a function. Guido makes a good argument for it nonetheless http://effbot.org/pyfaq/why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list.htm
Of course. Without axfr you have no other chance as to bruteforce. However, more entries to the dict are very welcome. Just add them via pull request if you have any ideas. For example, we could add different language-configs for different expected languages. en, de, fr are already in, but there are some more to be added.
Interesting, I don't know too much about Scala. How good are its libraries in general?
Wanting to use the word "type" seems pretty natural. Lots of things have "type"s that are meaningful attributes humans put on things, that aren't necessarily meaningful in the particular application you might be writing. Imagine you are managing a database of motor vehicle insurance policies. You certainly might want to record the "type" of the vehicle: sedan, hatchback, suv, truck, etc... but for your purposes they all behave similarly. You don't record suv policies in a different table in the database or compute the amount owed any differently. Its all just car insurance policies to you. For `type` it would be nice if we could just use `class` instead and say `class(foo)` in any instance where we might say `type(foo)`, although even that isn't ideal if you are writing some kind of gradebook software. Pretty much the same comment could be made about `id`. It doesn't entirely prevent you from using these keywords. You can declare a policy class which has an attribute called "type" and work with `p.type`, but your text editor will probably highlight the keyword `type` and make you feel bad for doing so. Maybe it would have been better if python had taken some of these keywords and made them uppercase? `ID`, `TYPE`, `ALL`, `ANY` or maybe thats just ugly?
Wow that was a fast response thx! I'll check it out 
It's not a WTF per se, it's more Python allowing to shoot yourself in the foot. It took me days to track down some weird behaviour that boiled down to this: &gt; assume dict `d` with keys of custom type `T` &gt; `k in d` -&gt; `True` &gt; `k in d.keys()` -&gt; `False` The issue is that somebody overloaded `__hash__()` without supplying the same semantics for `__eq__()`. The first statement will use hashing, while the second performs a lookup in a list with `__eq__()`. This is specified in the docs. Recently, I've found the issue in a state-of-the-art open source API which is the nightmare scenario because one uses the API while some most basic assumptions not holding true.
&gt; Bit is Python's fastest Bitcoin library Is going through a 3rd party API faster then interacting directly with a node? Those services have rate limits.
Sounds like you are describing: x = read_big_table() y = compute_thing_from_table(x) In that case maybe you just want to chain things? y = compute_thing_from_table(read_big_table()) I'm sure there are some use cases where it `del` really is useful, I've just never come across one myself (and I do work with large memory intensive datasets).
Yeah I made sure they were in the same directory as the executable.
There is such a thing as a `CompilerWarning`, which is produced sometimes.
Thanks for the tip. JS is kinda suffering from a curse of popularity. Now there are almost too many tutorials for various popular libs, in addition to the core language, and all of varying quality, it's tough for a newcomer to get their feet wet without falling in the deep end.
I think you'll find yourself comfortable with atom.io, give it a try!!
That was pretty much my experience as well. I haven't used PyCharm, but I found the online docs for Pyqt were generally up to the task.
This was discussed on [python-ideas](https://mail.python.org/pipermail/python-ideas/2017-March/044929.html) recently. The conclusion was that the overlap between dict and list isn't really much, and that generally speaking not knowing if an index exists in a list isn't normal behavior. Lists can't have holes in them, all the indexes have to be present. In comparison if `x` is in a dict, `x-1` might not be and so `.get()` is more useful there.