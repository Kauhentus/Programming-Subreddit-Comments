http://web.archive.org/web/20140219035142/http://python.org/ for comparison purposes
`pip` is the preferred way to install Python packages from [PyPI](https://pypi.python.org/pypi), however it is not included in the default Python installation. `easy_install` is included in the default Python installation, but has many problems that `pip` has solved (I'm not aware of all of the specifics). `port` is an OS X package manager for any software and it's not Python specific in any way. I personally use [Homebrew](http://brew.sh/) for this.
Excellent job! :) Legit question: what on Earth does your username stands for?
How is it outdated? Other than the menu not working without JavaScript, it looks fine to me. I don't care about design (although this page looks pretty to me), I just want it to be functional. If it were up to me, it would look more like http://motherfuckingwebsite.com/. Webdesign is overrated and mostly superfluous.
"Internal Server Error" right now :)
Have fun paying it forward :-)
Once you have that, make it read the stock(s) to watch an the threshold from a config file so if someone wants to use it, they don't have to use any code.
I'm afraid you used the wrong bot :(
I believe I have solved the problem now. Could you try to reinstall from github or PyPI and tell me if it works (it should !). That would be great, thanks in advance !
I thought it was pretty easy, too. Their tutorial is really straightforward and gives you just enough to get started. I got a pretty good site up and running in a couple of weekends. That said, there's a ton of depth in Django. I feel like it's something you cold spend a lot of time with and still not know all of the neat things it does.
I hope OP doesn't mind... http://i.imgur.com/VKPTS4f.png
&gt; I don't care about design Other people do. 
The popular approach seems to be that you run an appserver like Gunicorn or uWSGI to do python-ey things and then put a web server like Apache or Nginx in front of it as a reverse proxy to serve static content and handle SSL. I set up the Nginx/Gunicorn approach this weekend and it was a lot more straight forward that it seems.
I didn't understand if you have simple shapes or any shape. In all cases, you could have a look at SimpleCV.
One of the takeaways of reading the issue, is that submitting failing unit tests is usually more helpful than submitting a fix :)
[reddit’s main issue was fixed](https://github.com/python/pythondotorg/pull/140)
Hrmm, might have to give this a try some time
If it continues, switch back to the V1 DNS. Was an instant fix for my domain which was having the same problem.
They are getting hit with a DDoS http://status.namecheap.com/
None of them work in Windows. Just download binaries from [Christoph Gohlke](http://www.lfd.uci.edu/~gohlke/pythonlibs/).
happy I could help!
I don't think you read any books. You just troll the people who try to support the community. 
&gt;...noone will blame you if, for example, you actually need to do different things for a True and a generic truthy value. I disagree. I've never seen a case where something needs to be either `True` or a generic truth. If you have code that does this there is a high chance you're doing something wrong. Just because python is dynamically typed doesn't mean a function should return arbitrary types. I remember seeing a function at work that used this approach. The function was used to create a file and depending on a flag argument changed the return value. def file_obj_got_created(obj=False): if obj: return file_object else: # return if object was created if file_object_was_created: return True return False I get what the programmer wanted to archive but the pythonic way of doing this would be: def file_obj_got_created(): if file_object_was_created: return (file_object, True) return (None, False) same functionality much more cleaner and you know what values to expect. obj, created = file_obj_get_created() 
Thanks for the reply. Yes, I tried posting this on the Udacity forum...no responses. Appreciate the help.
+1 Decay is powerful in rating systems! Here is flask_reddit's decay function: https://github.com/codelucas/flask_reddit/blob/master/flask_reddit/threads/models.py#L104 It uses reddit's algorithm minus downvotes. So hotness = #upvotes/(age seconds)^1.5 Which means no matter how many upvotes a particular thread gets, as it gets older, it will get killed in ratings.
Pretty cool, some of those dialogs look like they really should be integrated into matplotlib. Would also be handy if this supported saving/loading all settings as themes (theme support should soon be coming to matplotlib)
It looks like it just pulls employee information out of a database. Nothing special. LDAP makes me think it's a list of employees.
This is not correct, the first two do work on Windows. `pip` is definitely a pain to get setup correctly but it works. 
It looks like an Active Directory update script. It gets all the employees current Active Directory info, then pulls the employees title and office location from the 'wsi-website' database, and updates Active Directory with the employees' new titles and office locations. 
2d shapes? 3d shapes? What's the image format?
Thanks a bunch! Yes that is similar.
I have used both extensively, and would recommend Requests for this. pycurl is powerful, but it is a very thin layer over libcurl (c library) and as such is not very easy to use, not very "pythonic", and the documentation is cryptic at best. As such it isn't that popular in the Python community. Requests is very easy to use and will do everything you need to interact with a REST API. while True: req = requests.get('https://foo.com/api/resource') print(req.status_code) parsed_data = parse(req.text) the_database.insert(parsed_data) time.sleep(1) Implementation of the parse() and insert() functions are left as an exercise for the reader.
&gt; pip is definitely a pain to get setup correctly but it works. No, it does not. Too many in the python community ignore windows. I write platform independent code and pip fails miserably. Stop spreading lies.
If you use a class, you can have instance variables that are accessible across the class and from outside it. class Foo(): def __init__(self, var): self.var = var def set_var(var): self.var = var def get_var(var): return self.var def do_thing(): return self.var + self.var 
Good on you! This happened to come to my attention at just the right time...pledged.
You're just wrong. You can get it to work, I have multiple machines with working installs. 
Stop bullying my free speech!!!!
Say whatever you want. But guess what, you can still be called out on it. How about, instead of continuously complaining, you be supportive or even better contribute to the community. 
FYI, pip is included in the soon-to-be-released [Python 3.4](http://docs.python.org/3.4/whatsnew/3.4.html#whatsnew-pep-453), which is currently in RC1 and should be out in about a month.
prints out a bunch of shit from an ldap server.
Why don't the mods ban people like that?
Don't do this. Global variables are a bad idea, you probably just need a class.
Awesome! I've been looking for something like this since I first saw the function annotations. I think you hit the nail on the head and I am going to check it out immediately. Do I need to install and activate the runtime checker in every module, or is it possible to just do it from a startup script and then have everything that gets called be checked?
The moderation policy in this subreddit is to rescue things from the spam filter, and to otherwise be fairly hands off. That guy really doesn't contribute anything though; he only badgers people about pirating ebooks. I'll cogitate on it.
Thanks :) apparently no one else liked it...
It can be as simple as circles and squats to a bit more complex such as stars. I already have a blob detection working but now it's just a matter of recognizing a general shape to the blob.
distutils what?
What insured the success of python in science was the fact that there was one unique set of tools : numpy/scipy/matplotlib. Everybody is speaking the same language, and it's brainless to advocate of the use of python in the scientific world. Of course it can't cover everybody needs, and it's well and nice to have the other needs covered by more specialized libraries, but without the centralization of efforts done, there will be no more python in science that there is perl or ruby. Most of users don't want to spend days to try to find which library is the good one for their basic needs, or hope that the one they chose will not be abandoned after few months because the user base was to low, or being stuck to use 5 plotting libraries because each of them has only a part of the features. I can't imagine the nightmare if, instead of Numpy, we would have 5 different equivalents libraries, each with 1/5 of developers at most. While having the choice of the tools in one of the strongest point of free software in general, dispersion of efforts is often the bane of open source. Once again, I'm not saying the that all alternative libs are to be throw away, but I really do hope that if matplotlib has to be replaced, one will become dominant.
looks cool. I concur on the setting saving.
As long as it help You understand python go for it :)
Great work! And very concise and easy to follow blog about it. Thanks.
Ah, brain fart, as in requests.get(url).json or flask's request.json
.json() is a method that returns a decoded version of the requests response, in Python dictionaries and lists.
I'm not sure I understand the use-case. Why not use separate virtualenvs for the apps that need different libs?
Hehe you're welcome :) Still way too much code, but it'll get better ;)
Flask crushes django! I like flask because it's pure python and much more explicit. You can code yourself into bad places with django, but not so much in Flask. Anything you can do with django you can do with Flask, but much faster.
There is no single comprehensive tool. For web navigation: * Requests is simplest to use and great if you only want to make simple web requests e.g. downloading a file from a url. * Mechanize has useful tools for form handling. You can do this in requests but not so easy. * Selenium allows you to automate an actual browser. If the target website uses javascript to create pages then this is the only option. However it is a little slow and clumsy e.g. if you want to download a file then it puts it in the downloads folder. You can combine by passing session cookies between these. For parsing: * LXML or beautiful soup For scraping generally: * scrapy.....but it does not execute javascript like selenium
The link posted by the top commenter on the post has benchmarks for quite a few frameworks, some of which I've never even heard of. The results show that wheezy.web (never heard of it), Pyramid, and Bottle are the fastest. Flask appears to be quite slow actually. I think I'll have a look at wheezy for my next high-performance project. * Benchmarks: http://mindref.blogspot.com/2012/09/python-fastest-web-framework.html * wheezy.web tutorial: http://wheezyweb.readthedocs.org/en/latest/tutorial.html
Go read the kickstarter page.
"hello, I was forced to use django, a framework with a totally different philosophy that the one I'm used to, I decided from the start that I was not going to like it and here are all the things I hate about it and, of course, I've liked nothing about it". Nothing to see there, this is just the expression of frustration of someone forced to use something with a different philosophy of the one he is used to. While some criticism are legitime, the autor never even tried to understand why those decisions were made (e.g: templates are mean to be written by designers, not programmers (therefor a designers should not have to understand what a function call is), also the presentation part of your application should contains the less logic possible), it's just plain "I don't like it".
If that is the case, then please name me a replacement for django-mptt.
I *like* Django and I *like* Flask. I use both of them to varying degrees and would pick one over the other depending on what I'm working on. Flask is great for getting small python projects out there really quick. Search suggestion engine powered by redis ? Flask. Tagging interface mostly doing json stuff ? Flask. Listener for certain web events ? Flask. But if I want to build a massive social network style platform and do it quickly, I wouldn't pick Flask. I'll go with Django for that. I like the 'batteries' included because most of the batteries are needed by me for such a project. Sure, Flask can do anything that Django can - no doubt about that, but I'm happy to use Django for larger projects. It has a lot better infrastructure for horizontal scaling/i18n stuff/etc. in the event that things get big/popular. With Flask you can build things the way you want to, customize each little piston in the engine to push maximum performance. With Django you get an entire car but you can still drive it any way you like, you can even (with a little pain) replace those pistons and do some engine mods (Pinterest/Instagram have done so.. so has Disqus). TLDR; Django vs Flask depends on the project. Both are good for certain things.
Oh I see okay, i think I understand.
I tried learning Pure Data and Supercollider a while back and they're terrible as languages, so it's nice to see a python alternative. It seems like some of this could be made more concise. Is there a reason to use a Multiply object instead of overloading the * operator? Since this is basically constructing a dataflow graph, it seems like it would benefit from a using overloaded operators to express a pipeline ( | or &gt;&gt; ).
The issue I have with lightweight frameworks and best-of-breed collections of programs is that, by the time you have all the little apps integrated, you've spent a lot of time, written a lot of code and burned a lot of hours in integration testing, and what you end up with is functionally about the same as if you'd started with a heavyweight framework. I'm not denying that Django has warts. So does Flask. But there's value in starting with something where the pieces fit together at the start and you're not constantly either finding or writing another solution component.
[Not working, you say?](http://codeworkx.de/wordpress/wp-content/uploads/2011/12/jacoj.jpg)
+1 for SimpleCV. This should be fairly trivial, depending on the exact requirements of OP's project.
Django simplification other jinja2 goes way further than just removing functions calls. You have an uniformisation where, what you would write like this in python: a.b a["b"] a.b() Are all written like this in django template: {{ a.b }} Try to explain the difference between the 3 to a designer. And the simplfiication goes further, you can really write python in jinja2 templates and you know that when it's "you can" that really means "the devs will". For eg, those are legal jinja2 code (and not in django): {{ '.'.join(host_ip.split('.')[:-1]) }}.254 {% for i in [{"a": "b", "c": {"d": True, 42: 1}}] %} ... {% endfor %} Which is very cool when you are a dev and are lazy, which totally sucks when you are a designer. So, there is a real difference in usability for a designer between jinja2 and django templates. And, for what it's worth, I've saw several feedback saying that django templates were working fine for designers (maybe those also exist for jinja2). Don't get me wrong, I really like both templates engines and are using them but they really serve a difference purpose.
Maybe it is because the project has only just been ported to python - if you suggest such changes to the author he might include them.
Too long to be a Twitter status. Maybe this was meant to be posted to /r/funny.
How many designers you guys run into that write HTML/CSS but have absolute nil knowledge of programming otherwhise and never have written JavaScript or PHP?
Anything more up to date? This was done in 2012.
Single file app.py in Django: from django.http import HttpResponse from django.conf import urls, settings def view(request): return HttpResponse('Hello world') settings.configure( ALLOWED_HOSTS=['*'], ROOT_URLCONF=[ urls.url(r'^$', view), ], ) if __name__ == "__main__": from django.core.management import execute_from_command_line execute_from_command_line()
Would do some coding now, but damn I am feeling tired and lazy. There's always tomorrow.
I just found that they use iPython in live console. Sweet. 
also [similar](http://robotgame.org/)
Or you can use Amit Upadhyay's importd https://github.com/amitu/importd
Is the community so insular to think that any of these things are exclusive to or even began with Python?
Is this supposed to show Django in a positive light?
I recently had to work on Django after being a long-time Flask user. It was painful. Before Flask, I used Django quite a bit and loved it. But Flask wins, hands down, in my opinion.
cygwin/mingw do not count as viable windows alternatives. Those two are easily the worst windows programs ever imagined.
I have used django for virtually all professional projects I've done, and I really do agree with all the annoyances brought up here. But they are annoyances- nothing too horrible.
It says the module directory I have it saved on my desktop
I remember that peewee didn't work with psycopg2 rowdict. Is it still true? What about something like named-tuple row?
I made an example of the CBC-MAC splicing attack in Python :https://gist.github.com/HarryR/5017218 Go implement DES, AES or Curve25519 in plain Python, it'll teach you a lot.
Peewee implements its own cursor wrapper, but it is easy to return dictionaries or tuples instead of model instances: for user in User.select(User.username, User.real_name).dicts(): print user['username'], user['real_name'] for username, real_name in User.select(User.username, User.real_name).tuples(): print uesrname, real_name
Sorry, but this is simply not a valid argument. From their README: &gt; **What is django-mptt?** &gt; `django-mptt` is a reusable Django app which aims to make it easy for you to use MPTT with your own Django models. *"Django models"* ... Flask doesn't even have an ORM. So how could there ever be a replacement for django-mptt?
Don't look for a Flask extension, look for an extension for the ORM that you are using.
the code looks nice :), and yeah i was thinking about trying to implant AES or DES, wasnt sure which would be better though
Also, no I'm not Italian, I'm Norwegian; the reason why I had anno and anni was that I was thinking differently on each part, and because I'm lazy, I didn't fix it...
&gt; you can really write python in jinja2 templates Not true. You can use some Python-like syntax but certainly not all or even most of it. &gt; but they really serve a difference purpose. What? Not they don't. They serve exactly the same purpose. &gt; So, there is a real difference in usability for a designer between jinja2 and django templates. I don't see how anything of what you said makes sense. Give me any Django template and I bet with only changing a few characters it's a valid Jinja template. How is there such a difference? &gt; and you know that when it's "you can" that really means "the devs will". That's a bullshit argument. Just because you can do something it doesn't mean you should. That's true for *everything*, not just programming.
thanks :), and I thought MD5 was a one way hash function?
MD5 is a hash function - it has one direction input -&gt; output. Symmetric ciphers like AES or DES have two directions, input -&gt; output and visa versa. They both use the same sort of cryptographic primitives, but in different ways. One thing which is very interesting to understand is the XOR operation and how it can be used to encrypt &amp; decrypt data. e.g.: x = random(1,1000) original = 1234 encrypted = x ^ original assert encrypted != original decrypted = encrypted ^ original assert decrypted == original
It's meant to answer the original post question, is it forced or pretty. It may not be as pretty, but it's also not meant to be used as such. It doesn't looked forced to me. Here's flasks example: from flask import Flask app = Flask(__name__) @app.route('/') def hello_world(): return 'Hello World!' if __name__ == '__main__': app.run() edit: formatting
so **x** is a random numer between **0 and 1,1000**, then for encrption you do **x** to the power of the original. assuming that **original is a numer**, but what if **original** was for instance a random string? but i dont really understand how the decryption works?
Two different frameworks, two different approaches, serving two different use cases.. why does it have to be a zero sum game? 
The `^` symbol in this case is the bitwise XOR operator, not the 'power of' operator (sorry for the confusion). 100 xor 200 xor 200 == 100 You could also do: 100 xor 200 xor 50 xor 50 xor 200 == 100 etc. - you can perform any number of XORs in sequence to 'encrypt' a byte or word and to decrypt you perform the same sequence of XORs in reverse to get the original number. With strings you have to break it down into a single bytes. For stream ciphers you have a 'keystream' which is an algorithm which can generate an infinitely long sequence of bytes for a given key, each corresponding byte of the keystream is XOR'd with the byte of the plaintext to give the encrypted output. For decryption each byte of the keystream is XOR'd against the corresponding encrypted byte to give the output plaintext. You could use a Python generator for the keystream where you give it the password and it uses MD5 or SHA1 to give you a byte of the keystream, and for the next byte hashes the previous hash and the counter etc. See: http://en.wikipedia.org/wiki/XOR_cipher for more detail
&gt; (e.g: templates are mean to be written by designers, not programmers (therefor a designers should not have to understand what a function call is) &gt; The idea of separating views from controllers, especially that Python templates were meant to be used by "designers", so they don't have to worry about logic is a noble idea, but is a failed attempt. Designers who know little about programming will have nightmares looking at Python templates. This is not to say bad things about good engines like Jinja. But the reality is that to a large extent you CANNOT separate entirely "control" from "view". If you want to do "loops" in views, then there you go, you allow people to put logics in view. While you are at "loops", you might want to throw in "conditionals", and "blocks", etc. and now your view is a complex mix of presentation and logic. And now "designers" will have to learn a new language (e.g. the Jinja language) in addition to Python and HTML. You can't separate views and controller completely. And statements like "templates are meant for designers" are void of reality. 
Having just learned Django because I thought it was neat, I can't deny that the Flask example certainly looks more elegant.
It looks quite satisfactory to me. The benchmarks basically show that *wheezy* blows everything else out of the water. Besides, I doubt a new mature framework could have been created in the time since then. One of the commenters on the above linked post mentioned *falcon*, but the docs are quite sparse on the homepage.
Agreed. Warning: I'm a Flask fanboy :) Still haven't got myself a t-shirt though...
Because someone needs to say it: Don't roll your own cryptography. It's not like other programming where you can iteratively improve it. It's either 100% functional, or it's broken. Learning with, experimenting with and understanding crypto is good. Distributing and/or using your own crypto is BAD.
Here is a benchmark with falcon listed (web url routing): http://mindref.blogspot.com/2012/10/python-web-routing-benchmark.html and here (I should say with quite interesting comments): http://faruk.akgul.org/blog/python-web-frameworks-benchmark/
This mindref guy posted several of these benchmarks, each one even more **ridiculous** than the one before. The framework will most likely never be the bottleneck. The important thing is the infrastructure/environment you deploy it in. Also, a well designed application runs fast no matter which language is used when you throw more and better hardware at it. Python is damn slow anyway, why would you choose a framework written in Python for a *"high-performance"* project then? Use Java or Go or write the performance-critical parts in C. 
cygwin is a horrible piece of shit. It never works as expected and when it does it takes over windows, making windows inoperable. If you are going to insist on *nix, just go dual-boot or VM. Yeah, i also hate VMs, well, not VMs, just VMware.
Almost the same experience here. Pretty much started out in web dev with Flask, then I got a Django job because I couldn't find a Flask one. And it's still painful sometimes, partly because of the legacy code base I have to work with but also because of the same reasons mentioned by the author and more. (I really learned to love Flask's request context concept after diving into our Django app! And I hate Django's URL dispatching, I really hate it!)
I am just showing a example to show that "Anything you can do with django you can do with Flask" is a bit too strong in wording. 
Well, either build your own framework with lots of smaller components or inevitably start fighting against the monstrosity you chose to start out with. Advantages and disadvantages to both approaches but I belong more to the former camp ;)
It seems that most of the script is just just a wrapper for `pdb.post_mortem()` but this is handly to just automatically wrap a script/program around that, i know its always a hassle for me to edit the source, enter pdb.set_trace() and rerun it again when it crashes!
thanks i knoow, its just for fun, not for anytthing serious :)
Sorry for the late reply. The main difference is Python 3 support. I needed something that was higher level than boto, that also supported global secondary indexes in Python 3.
Well, you chose a poor example ;) &gt; "Anything you can do with django you can do with Flask" is a bit too strong in wording. I respectfully disagree very much but although I'm a Flask fan I have to say that /u/kumar99's comment is dumb in many different levels.
Basically, Python 3 support and more a ORM like interface that includes global secondary indexes.
Lots? It's not uncommon, and they're usually not that difficult to spot.
Just `unittest` (included), `coverage` and `mock`. Wondering how integration vs. unit tests would warrant different frameworks. 
Take a look a the TechEmpower benchmarks if you want a little more perspective. http://www.techempower.com/benchmarks/
I use unittest (the built in one) and nosetests as runner.
Consider looking at Flask and Pyramid as well. Both are more minimal than Django, but you may prefer their way of doing things.
this. django isn’t built for 1-file webapps. use something that’s built for it if you want it. importd is exactly the solution for “i want one file, and i want django”.
I know of them. I'm talking about Python web frameworks obviously. Thanks anyhow.
I only say that because I had it hammered into me by everyone when I put together this script: http://www.reddit.com/r/Python/comments/1ykmiq/hide_an_encrypted_archive_in_an_image_using/
That's right; I certainly don't claim to have done the heavy-lifting that makes this script possible! (And the script itself is only like 20 lines or so). This is born of my frustration running my scripts with python -i, and then, if they failed, carefully running import pdb; pdb.pm() at the interpreter, (and also having to quit the interpreter if the script succeeded). But even that's better than having your script fail after half an hour with no way to poke around and see what made it fail!
I'm using SQLAlchemy, but I think the main problem is, that I lack the programming experience all you guys have :)
I'm starting to do a small Django side project, and the amount of extensions available are quite nice. Adding logins is pretty easy. Doing something like adding a json / yaml / xml API that uses your DB is only a few lines.
I think the decorator is a fine way of doing things in this situation. If you have a *lot* of methods that need to be wrapped or a metric butt-ton of database drivers/schemas, maybe a factory approach would be better.
yes, i understand all too well =P i feel something like this should be built in to the interactive python interperter, but this will come in handy
http://www.reddit.com/r/Python/comments/1drv59/getting_started_with_automated_testing/c9tfxgd
I've used tornado in the past and really liked it, is it easy to get user logins going with it??
lookup the 'mechanize' module, or just use wget....
yeah iv seen it being hammered into people, in a number of forums, thanks for the advice :)
Also realistically if you really HAVE to have Jinja2 you can make it usable in Django.
Pyramid is a good compromise between the minimalism of Flask and the "batteries included" philosophy of Django. Meaning: It doesn't get in my way, but I'm not having to reinvent the wheel.
Thanks, second recommendation for pyramid and I hadn't even heard of it before today. I will definitely take a look!
I definitely like the minimalism of Flask and Bottle.py. I have only used Flask myself, but heard that both are very similar.
Or you can run with `ipython -i` and call %debug on error
Why are you tying the functions to a particular DB at import time? Using globals (through a DB module API) lets you change things dynamically. You can write a context manager to maintain a stack of DB variables to make it even more flexible. Or you could use some sort of dependency injection framework, though that's probably overkill.
Have you looked at [web2py](http://web2py.com/) yet? I'm just getting started with it, but I'm really impressed so far. It is Python 2 only right now though, so that may or may not be a put off for you.
That's presentation logic though. You can't remove loops from a template because of things like comments or image galleries or menus. I agree that templates can get absolutely bonkers sometimes, but that's not the fault of the templating engine. It's the person who designed that template. 
Amen. Use the right tool for the right job.
I'm a huge fan of web2py.... sadly all my professional work is in Django or Flask...
You don't have to press `c` at the beginning to run the module.
You could probably achieve this pretty easily with drupal by installing modules and configuring them(without writing any code) . for example this module(there might be better , it a result of a very short google search): https://drupal.org/project/lending
You'd probably want a CMS or a heavy framework, like Django.
"-c c" with python 3 module
Disclaimer: This is my own site. I don't run ads of any kind, so hopefully it's not considered spam.
It also won't actually import pdb until the module crashes, which is very nice if you happen to be debugging a heisenbug which vanishes under "proper" debugging.
very easy! It was built for FriendFeed &amp; now used at Facebook so Twitter/Facebook OAuth is built right in. http://www.tornadoweb.org/en/branch2.0/auth.html
You mention you had to do this for some math code. Can you tell me why solutions like typed arrays, numpy et al didn't get you what you needed? 
If you choose Pyramid over Django you will spend all your time learning Pyramid and its related ecosystem of libraries (because by itself Pyramid doesn't do much at all). Just use Django and get the thing done.
It wasn't anything complicated, it was literally just c = numbers[0] for n in numbers[1:]: c = op(c, n) it was just doing that several million times, to the point that the function call overhead by itself became significant. Like I said in the article, it was in no way a typical situation, normally I would have written that part in C and called it from the outer python code.
I've been playing with PyPy and CFFI for a few weeks now. I'd definitely would just written the function in C and been done with it. Neat article. I'll kill the dev who tries bytecode patching in the project I work on though.
Well I don't know Django either so I'll spend time learning either way. Does pyramid have a larger learning curve? 
Oh that is great! Thanks for pointing this out!
Interesting read - now let's take bets when this will be exploited :)
If you choose Django over Pyramid you will spend all your time learning Django and its related ecosystem of libraries (because by itself Django doesn't do much at all). Just use bottle.py and get the thing done. 
I'm not building a soap SERVICE- I'm in need of a non-blocking soap client. See, I've already built my restful service directly on Tornado - so I don't want to migrate it over to another framework. I got what I want working using SUDS - by setting the nosend option to build the envelope and I'm sending it out with the async http user agent in Tornado. Works great. Thanks Guys!
Also second Tornado. AND- I strongly recommend a couchdb backend. Very fast. Very clean.
By the way, nice work on the syntax. I put a lot of effort into the syntax of PynamoDB, but it doesn't yet have support for some of the nice features you put into flywheel - such as .first(), .all(), etc. By chance, are you going to PyCon? If so, I'd enjoy speaking to you in person about how you are using DynamoDB.
Or you can drop `import ipdb; ipdb.set_trace()` into your code. Can be changed to `pdb` for you poor fellows without the nicer things.
I think you need to use a key derivation(stretching) function (pbkdf2) instead of the hash you're using now, and use enough rounds from a relevant recommendation. lib: https://cryptography.io/en/latest/hazmat/primitives/key-derivation-functions/ wiki: http://en.wikipedia.org/wiki/Key_derivation_function 
Flask support big, expansive projects... but you have an little bit more work, because he don't is 'complete'. Django is different, is easy for you work in big or little projects. lastly, flask little project, django big or little projects
I am using a KDF. That's what the bcrypt is. https://github.com/pyca/bcrypt/ https://security.stackexchange.com/questions/4781/do-any-security-experts-recommend-bcrypt-for-password-storage
There's tons of answer, both direct and indirect, on the web for this exact question please Google for them. Here's at least two with lots of info: http://www.reddit.com/r/Python/comments/pg4qm/when_does_it_make_sense_to_use_django_for_a_site/ http://stackoverflow.com/questions/12781655/python-flask-or-django-for-a-beginner I use Flask for most things and here's why: * It's simple and does not force me to work in a certain way * I can use the full capabilities of sqlalchemy * For more complex or highly specilized web applications I never have to worry about things (web app, template, routing, ORM, etc) getting in my way * I don't have to use or maintain a manage.py script
Oh, I'd love to take credit for that, but all those ideas are stolen straight from SQLAlchemy. :P Sadly I will not be at PyCon, but feel free to email me about anything! My address is on my blog and on github.
You'd be fine with going with any of the frameworks already mentioned (Django, Flask, Pyramid, etc.). Your enjoyment of each will largely depend on which you prefer batteries-included and opinionated (Django) or choose-your-own-adventure (e.g. Pyramid + SQL Alchemy + Jinja2 + ? ). 
Unless you're talking about "hammering" you received before finishing that repo, then honestly that code looks fine to me. You use 2 well-known crypto libraries/functions: NaCl (Salsa20 encryption) and bcrypt. bcrypt's default work factor is sufficient. You could consider using `bcrypt.gensalt(10)` to generate the salt instead, which is what the library recommends, but NaCl's random generator will work exactly the same either way. No one should roll their own crypto, but there comes a point where crypto abstractions are abstract enough to be used safely by someone with a decent understanding of crypto and security in general.
tox/testrunner/coverage/mock/httpretty 
The problem with the {{ a.b }} approach of Django is that you can't use variables as keywords, which is annoying. There's no way to do this without template tags (and template tags are another WTF in itself): {% for x in some_list %} {{ some_dict[x] }} {% endif %} And yes, I know it was intentionally designed this way, but I disagree with that assertion.
I chose the example that personally prevents me from switching. Had he given me an example, i could have benefitted from it. Edit: In one of my apps, most entities can be arranged in a hierarchy and it seemed like a PITA with sqlalchemy.
Between **1 and 999**, actually.
I've had to use Django recently after web2py - and, I feel similarly. I must say, Django is a little more Pythonic than Web2Py, in the sense of "explicit is better than implicit". However, the Web2Py implicit choices are arguably the right ones, and it is still very Pythonic (also, "explicit is better than implicit" does not mean there must not be anything implicit). Web2Py templates are simpler than Django's on one hand, but give you full Python (in a nicer way than the original Jinja2 does); Yes, they are more oriented at developers than designers, but still very accessible to designers. Django's ORM is incredibly unpythonic (e.g. Model.objects.using(db).filter(date__lte=my_date) ), compared to Web2Py's DAL which is (e.g. db(Model.date==my_date).select(Model.ALL) ) Seriously, if you haven't until now - try Web2Py with an open mind. It's DAL/ORM is extremely capable, it is very logical and easy to use. It does a little import magic for you (a lot of files magically and implicitly import other files to give you the environment you need without having to think much about it), which some people don't like. But it's extremely well done, hyper batteries included.
nose is a all-in-one tool for handling unit and integration tests with support for coverage and docstrings.
They are very, very similar. Bottle could almost have been a drop-in replacement for Flask.
Nice, didn't knew this feature. Thanks!
Can you even run python and python scripts on iOS (without some 3rd party module like kivy)?
again, i know its just for fun
I've used lettuce for writing integration tests. Unit tests can be hard to describe in English, but at the integration test level it allows you to write tests that are easier to read and maintain.
That is more interesting already
I wrote a tutorial yesterday on how to install Python 2.7.6-3 and Pip on iOS. You have to be jailbroken though. http://www.reddit.com/r/jailbreak/comments/1yl39t/tutorial_how_to_install_python_2763_pip_on_ios/ I'm using it to run my reddit PRAW bots and it works just like on a pc :)
Maybe I understand this, will be soon watching that video about classes.
[Imgur extension for Chrome](https://chrome.google.com/webstore/detail/imgur-extension-by-metron/ehoopddfhgaehhmphfcooacjdpmbjlao) can do that, for instance.
Could you copy paste the whole error?
[For the lazy](http://pythonhosted.org/lettuce/index.html)
I ran across your site more than a few times. Thanks for making it.
i tried to install on win a month ago with no luck. No difficulties on linux tough. 
I think this is very strange. If I had to support similar commands for different databases, I'd probably use OO. Make a base generic DB class then make a type1db, type2db, etc. inherit from it while overriding the necessary parts 
Well, a syntax error is not the same as an import error. If the only things you did were: $ python &gt;&gt;&gt; import curl then I would expect there to be an error in the import statement (e.g. "improt").
for doing such a thing I would manipulate the ast.
Python borrowed from modula, abc, lisps, icon, java, perl, haskell and probably more. This is all well known. What makes you think about insularity ?
there is another singleton: `Ellipsis` aka `...` aka “the reson why `def stub(): ...` isn’t a syntax error”. i’s pretty prominently used in numpy, but i promise i’ll find another usein one of my projects some day, and then i’ll comare to it using `is` ;)
How can apps like pythonista work?
That's a good question. Their webhost is 1&amp;1 so it would be nice to get it working on there.
Heisenbug. What a perfect word for those elusive little bastards!
Can people stop making programming languages? I can't keep track! :(
You're looking for the set_index method: In [6]: df.set_index('Person', inplace=True) In [7]: df.head() Out[7]: TimePoint Var1 Var2 Person 100 1 23 33 100 2 343 234 200 1 123 1 200 2 123 33 200 3 22 44 That will set Person as the index. In [10]: df.loc[200] Out[10]: TimePoint Var1 Var2 Person 200 1 123 1 200 2 123 33 200 3 22 44 If you wanted a true hierarchical index (pandas calls this a MultiIndex) with more than 1 level, say on Person and TimePoint, you could do this: In [11]: df.reset_index(inplace=True) In [12]: df.set_index(['Person', 'TimePoint'], inplace=True) In [13]: df.head() Out[13]: Var1 Var2 Person TimePoint 100 1 23 33 2 343 234 200 1 123 1 2 123 33 3 22 44 Docs covering this are [here](http://pandas.pydata.org/pandas-docs/stable/indexing.html#add-an-index-using-dataframe-columns)
That's not the point. Designers will be tempted to pack logic into templates and 'reinvent PHP in Django'. The relative dearth of programmatic features is to stop this pernicious process and enforce a cleaner architecture with proper separation of concerns.
Check out Two Scoops of Django.
Hachoir can be great but a few things to know about it: * I don't think it's maintained any longer * It can be slow * It has almost no (proper) documentation * Accessing fields is rather weird and done via `__getitem__` rather than attributes. * Unless I'm mistaken, it doesn't provide generators or any iterators. Below is a simple example showing how to parse a network capture in the Pcap format (not the recent PcapNG though). from hachoir_core.stream import FileInputStream, StringInputStream from hachoir_core.field.field import MissingField from hachoir_core.network.tcpdump import TcpdumpFile def parse_pcap_file(pcap): try: parser = TcpdumpFile(FileInputStream(pcap)) assert parser.validate() packet_index = 0 while True: packet = parser['/packet[%d]' % packet_index] print packet.getTimestamp(), \ packet['ipv4/src'].value, \ packet['ipv4/dst'].value # packet's payload, which can be handled # obviously by hachoir if it has a parser for it payload = packet['data'].value # stream = StringInputStream(payload) # OtherParser(stream) packet_index += 1 except MissingField: pass finally: parser = None As you notice, accessing fields is done through the `__getitem__` magic method. Since the doc is lacking, to determine the various path, you must read [hachoir's source code](https://bitbucket.org/haypo/hachoir/src/ba8f24caf3cd09959c2921afa7a17dda16bb7a4b/hachoir-parser/hachoir_parser/network/tcpdump.py) for each parser and field. For instance, if your capture above was done over a IPv6 network, you'd do `packet['ipv6/src']` instead. This is equivalent to `parser['/packet[12]/ipv6/src']` (assuming you're looking at packet at index 12.
Well done! Just finished playing, worked great. Is it just me or the countdown is a little fast? It is suppose to be faster then a second?
Are you on windows? Where did you download it from? Can you give us the exact error message? Have you considered alternatives like [Requests](http://requests.readthedocs.org/en/latest/) or even [urllib2](http://docs.python.org/2/library/urllib2.html) ?
The original NES Mario had a timer that counted down faster that once per second. 
That's certainly an option as well. I haven't done that before, while I had a little experience manipulating Java bytecode, so my mind immediately went to the bytecode when I was thinking of a way to do this. I'll have to look into `ast` manipulation.
I used an emulator while making the game to compare, and it does countdown quite fast. Check this out: http://youtu.be/7qirrV8w5SQ?t=10s
Awesome, this is exactly what I was trying to do. The .groupby methods are pretty useful too, but it doesn't spit out a DataFrame object.
This sounds like something that can be accomplished with windows infrastructure already. I would not want something logging into my account automatically without some sort of admin audit trail. In fact, the more I think on it, the more I'd rather NOTHING automatically log into my account ever. 
Holy shit. You just changed my life.
Looks like minutes in decimal form (minutes/100) rather than seconds (minutes/60). A lot of scientific instruments that rely on a time factor do this (2.25 minutes instead of 2:15) don't ask me why, probably just an accuracy thing for calculations.
or just download the zip file via the download link "Download ZIP" if you don't have git and don't want to install it: https://github.com/justinmeister/Mario-Level-1/archive/master.zip
Makes me think of this : https://github.com/dberube4/pyxcies
If you want a DataFrame object after you do a groupby you need to specify some sort of aggregation (eg. mean, sum). For your data set, if you groupby Person and Timepoint, each group would be unique (ie there is only one row per group) and you can aggregate using any operation that acts as the identity operator for a single value input (eg. mean, sum). In [2]: df.groupby(['Person', 'TimePoint']).mean() Out[2]: Var1 Var2 Person TimePoint 100 1 23 33 2 343 234 200 1 123 1 2 123 33 3 22 44
That's really interesting. I just kind of eyeballed the timing.
Thank you!
Same. Integration testing can also often include selenium+splinter which works well with a BDD/gherkin syntax. 
I rarely upvote stuff, but this is totally upvote worthy, Id really love to see more of this kind of stuff! 
I'm getting this: Traceback (most recent call last): File "C:\Users\Me\Desktop\Mario-Level-1-master\mario_level_1.py", line 9, in &lt;module&gt; import pygame as pg ImportError: No module named 'pygame' But I'm certain pygame is installed where it should be. Can someone help?
pip freeze and check if pygame is listed, it may have been installed to a different python directory (old version maybe) or maybe the installation failed and you didn't realize. 
Thanks for the nice words. Just keep on coding and building things. You'll be surprised how much you can learn if you work at it.
This is cool, I like you.
Awesome stuff man. I know how difficult something like this can be when you're using Pygame, but you really did an amazing job. 
I get an error with the music. Traceback (most recent call last): ... File "Mario-Level-1/data/game_sound.py", line 22, in set_music_mixer pg.mixer.music.load(self.music_dict['main_theme']) pygame.error: Unrecognized music format 
Your pygame install is probably the problem. Either reinstall pygame again (plus dependencies) or just the dependencies. One of the sound related dependencies is probably not installed correctly. Check out this link: http://www.reddit.com/r/pygame/comments/1y2yyw/music_wont_work_with_python_3_os_x/
&gt; (2.25 minutes instead of 2:15) don't ask me why, Time is a pain in the butt. It's easier to just format the number at the end.
You should use microsoft tools for handling updates over multiple PCs: http://www.microsoft.com/en-us/windows/enterprise/products-and-technologies/windows-7/default.aspx http://technet.microsoft.com/en-us/windowsserver/bb332157.aspx You could use python, but that's probably not the right tool for the job. It should be also doable with a simple .bat or ps script. MS has command line switches for updates: http://support.microsoft.com/kb/262841 PS script: http://gallery.technet.microsoft.com/scriptcenter/2d191bcd-3308-4edd-9de2-88dff796b0bc
If you got Pygame installed it is probably installed in Python 2 not 3. So run the game like this: python2 mario_level_1.py 
Its installed globally; you only have to install it once, and from then on all annotated functions In all modules get checked. To use the Jason validation, you do not have to install the checker.
How can you select all rows with `TimePoint == 1` in this case? I thought something like `df[:, 1]` would, but I don't think it does.
Are you in OSX? If so, you need to install libvorbis $ brew install libvorbis and then reinstall sdl_mixer $ brew reinstall sdl_mixer Should work fine after that. 
sweet !
For anyone who wants to change the key bindings (to vi in my case), the relevant config is under data/tools.py. Great work, by the way!
epoch time. extend to millis or micros if needed.
As Cenzorrll said, it's about hardware timing. DOSBox on a Mac has an option to adjust the clock speed, and Mario game play is drastically different on different settings. 
This is very good work, you should be pretty proud of yourself. PyGame makes for interesting projects, and seeing classic games made in the library make me want to try it myself when I have more free time! Thanks for the inspiration!
This question actually got me interested in what was actually going on. And found that pal was 1.66 mhz and NTSC was 1.77 MHz. Form some site (me super drunk Now) the time is either 6/10 of a second or 7/10 of a second.
This is amazing, nicely done. I'm just getting started with Python. I've gotten pretty good at writing one-off scripts to scrape a site or crunch some numbers, but I still don't have a good grasp of building end-to-end programs like yours. Any tips for crossing the chasm from scripting to programming? Also, do you have any particular Github recommendations beyond Mekire where I could learn from others' code? Reading good code is beyond helpful.
BTW, downloaded Canopy, couldn't have been any easier to get up and running. Thanks 
How do I install pygame binaries? 
Don't know if anyone else has helped fixed this yet but try this first: python -c "import pycurl" If it's not installed you'll get something like this: Traceback (most recent call last): File "&lt;string&gt;", line 1, in &lt;module&gt; ImportError: No module named pycurl If the above fails I highly suggest you stop here and explain exactly why you think you need PyCurl. PyCurl is very advanced and faster than nearly everything else but it's also difficult to use and install, especially for beginners. For the average case, you'd be better off using something like the requests library: http://requests.readthedocs.org/en/latest/
Sounds good. I'll carry on - learning anything is mostly about persistence. Let me know if any other github repos come to mind. I'll do the same in case others are interested. In the meantime, I'll be playing Mario Bros...
If you are interested in python type analysis you should check out Yin Wang's work on [PySonar](http://yinwang0.wordpress.com/2010/09/12/pysonar/). Or maybe you are already familiar with it, I dunno. 
Most DOS games worked off the clock speed. That's why, even 3-4 years after a DOS game had come out, it probably wouldn't play right any more. We used tools like Moslo to fool the games into thinking they were running on a much slower computer.
+1 for Requests, the best API I've ever worked with.
What OS are you using?
Great to see Python 3 getting some love!
Totally worked. Thank you. Also left a comment on bitbucket, requesting for the "homebrew install instructions" to link to a wiki page vs an outdated comment on a ticket. For anyone else, this worked for me: brew install libvorbis sdl sdl_image sdl_mixer sdl_ttf portmidi # activate virtual env or use sudo: pip install hg+http://bitbucket.org/pygame/pygame 
Yeah, I've been learning Python for a little over a year now, and I've used a Pygame a couple times. Right now, I'm trying to code a text adventure but I'm having so much trouble. I've looked at other people's code, but I just can't reproduce it. I've used all the best sources for learning Python too.
&gt; then run: python mario_level_1.py I copy/pasted this into macs terminal application and got nothing. Tell me why I'm stupid please
You need to be inside the directory you downloaded it into. You can see your files with` ls` and change directory with `cd`.
If you mean with the MultiIndex, you can do something like: In [27]: df.loc[df.index.get_level_values('TimePoint') == 1] Out[27]: Var1 Var2 Person TimePoint 100 1 23 33 200 1 123 1 If you want Person 200, TimePoint 1 you could do: In [28]: df.loc[200].loc[1] Out[28]: Var1 123 Var2 1 With just one level of index on Person, you can get TimePoint 1 by doing: In [33]: df[df['TimePoint'] == 1] Out[33]: TimePoint Var1 Var2 Person 100 1 23 33 200 1 123 1
pytest and nose make the use of assertions much easier to understand and use. The best way to understand them is in pydanny's [blog series on pytest](http://pydanny.com/pytest-no-boilerplate-testing.html).
Do you mean typing input into pygame? raw_input is only for the console, not for pygame. Look for some library for text input for pygame.
Assertions in tests and assertions in code have very different purposes; it's kinda unfortunate that they have the same name.
You can't, you are going to have to bind the whole keyboard to pygame events and keep track of what is being written that way.
To compliment /u/Exodus111 's suggestion - something like this could be used as a foundation for building an in game text console - http://www.pygame.org/pcr/inputbox/
What are the problems you currently face? 
Try https://github.com/eevee/sanpera? I haven't used it, but the author wrote it as a result of his own dissatisfaction with PIL.
As a side note, you should learn to use pdb or ipdb. Beats the hell out of putting print statements in third party code.
I appreciate the suggestion, and I'm writing it down. But this other issue has priority at the moment :-)
[ImageMagick](http://www.imagemagick.org) is impressive, it has an API to allow for whatever language to work with it.
Sorry, but I don't have a formal training in computer science, so everything outside of python is a mistery for me yet. So I download ImageMagick (I assume a tar.gz file), I extract it... then lets assume it's written in C and that I can make and make install successfully. So now I have a bunch of C binaries. How do I use this with python? Sorry for being a pain...
If it's a binary, how do I call it from python?
Then write your own. The animated gif format is stupid simple.
Via the `subprocess` module, of course.
It's pretty common for Python packages to wrap C libraries.
Holy shit. You just made my day.
Sorry for the long delay to reply. Thank you for the links. They're very much appreciated. Regards.
And you too! :D
Of course. Looking at your symptoms, I would guess that pillow is getting installed without the support libraries it needs to do what you want it to do. If you re-(pip)-install Pillow, you'll see something like the following at the end: -------------------------------------------------------------------- PIL SETUP SUMMARY -------------------------------------------------------------------- version Pillow 2.3.0 platform linux2 2.7.6 (default, Jan 11 2014, 14:34:26) [GCC 4.8.2] -------------------------------------------------------------------- --- TKINTER support available --- JPEG support available --- ZLIB (PNG/ZIP) support available --- LIBTIFF support available --- FREETYPE2 support available *** LITTLECMS2 support not available --- WEBP support available --- WEBPMUX support available -------------------------------------------------------------------- Make sure that you have the necessary libraries available, then reinstall. If you're on a debian-like system, you're looking for apt packages like zlib1g-dev, libjpeg8-dev, and so on. 
Hmm.. Well maybe I could keep the raw_input but make images appear when needed?
Good luck 
why didn't you use django?
Great job, now try to add your name as an input Also, depending on what you want to do maybe start with python 3
Next Stop: microsoft
So, you're a professional troll or something?
&gt; Assertions in tests and assertions in code have very different purposes Either way, an assertion failing means "there is a bug in your code". The difference between assertions in code and assertions in tests is that an assertion failure in code means a bug in *that* code, while an assertion failure in test code means a bug in the code being tested. Is there some other difference you're referring to?
Your page looks really good. Is it something prepackaged or did you do it yourself? Also, I love the eyeballtrees pixel art. Did you do that yourself?
The parent comment seemed to imply that those test frameworks' assertions were somehow better than assertions in code, which seemed like an invalid comparison to me. On further reflection, though, I think I agree with both you that they're semantically equivalent, and the parent comment that test frameworks' more specialized assertions could be applied as in-code assertions, though I still don't think I'd want them in the language core. All that to say, yeah, y'all are right :D
Well that game looks beautiful.
can we have an example before-after picture?
``import *`` and type-checking. Great advice there... (No, don't use either; See PEP 8, "python import star" and "python duck-typing" on Google)
I agree, I wonder how many complaints they got about the 'sum' example though...
So you admit to being python illiterate, then you claim the gif format is "hard" because you cant understand it? Okay. Got it. Do you know any languages at all?
Few comparable examples: 20k LoC perl http://sourceforge.net/p/awstats/code/ci/develop/tree/wwwroot/cgi-bin/awstats.pl Guido's work http://code.google.com/p/rietveld/source/browse/codereview/views.py
Sure kiddo, sure.
Quite a while ago, I created a package `patmat` that can do multiple dispatch generic functions, as well as deep Caml-like pattern matching. Check it out: https://github.com/admk/patmat It even allows more advanced usage such as the following: &gt;&gt;&gt; from patmat import * &gt;&gt;&gt; &gt;&gt;&gt; @case &gt;&gt;&gt; def func(match, l=[Val('head'), ...]): ... print('a list with a head {}'.format(match.head)) &gt;&gt;&gt; &gt;&gt;&gt; @case &gt;&gt;&gt; def func(match, l=Val('item')): ... print('an item {}'.format(match.item)) &gt;&gt;&gt; &gt;&gt;&gt; func([1, 2, 3, 4]) a list with a head 1 &gt;&gt;&gt; func(5) an item: 5 It is still under development. Some features are partially implemented. For example, because I never got a chance to use list matching in my applications, ellipses in lists are not sufficiently clever at matching arbitrary number of items. I also have an internal version that I use to allow predicative matching.
In my opinion it's simply AMAZING!
Nice. Wonder if they used PHP.
I'm a big fan of flask. Django has a lot of stuff built it that you'd have to do on your own with Flask. I like that about it. You can use the many extensions to get most of what you need and maintain the lightweight aspect of flask. Check out uwsgi and nginx for deploying. 
If you want to be employable, you'll probably find more Django jobs than Flask jobs. Of course, if you're just looking to pad your resume, you'd be better off learning Ruby on Rails or Java. Django gives you all the pieces you need to make a website &amp; it's all hooked up. The catch is that it forces you to build a 'Django website' and there's a lot of 'magic' that makes everything work together. Django was designed have have a few registered users creating a few types of interconnected, structured data for display to large numbers of unregistered users. The further you get from this, the less it fits - you might not want to build Reddit or a dating site on top of it. Flask, OTOH, doesn't do as much out of the box. It's better if you're trying to build a website that doesn't neatly fit the mold of what Django wants to do.
You could look for jobs in the area you're interested and see if they're looking for Django experience. If they're just looking for Python, I'd suggest Flask.
Very nice job.
Wait sorry - which one are you suggesting?
Flask.
What exactly is Ruby on Rails for? (And I really don't want to learn Java. I took an intro course because it was a requirement for other courses, but I decided I really didn't like it very much). So could you give me an example a Django website? (I'm guessing like any business site would work?) Also, can you do your own stuff with Django? Like is it more difficult to implement your own things to accommodate more users than it is in Flask?
raw_input is an API to stdin. It is a system call. If you aren't scanning input from stdin/console, which you aren't, you can't use raw_input.
two navigation bars?
Write this down: import ipdb; ipdb.set_trace() Put that into your code where you're having problems. Use `help` for the commands, but you'll mostly be using `next` to navigate through execution, line by line. Or `step` into function calls and checking out state. Or even manipulate it. The above sets a `break` point. If you set a `b`reak point in a loop, you can `continue` to the `n`ext iteration. This requires IPython, so you'll have the full power of its interpreter. Put it in your tool box sooner than later, and you'll thank yourself.
&gt; What exactly is Ruby on Rails for? Websites. It's more that RoR has mindshare in the hip startup/design community than it being a radically different platform. I just see more RoR job listings than Django. Most web frameworks are flexible enough you can build whatever you want on top of them. The Java/RoR thing was more directed at finding jobs than the platform's capabilities.
Is RoR a much different language? (Much different to learn? Or is it still OOP and similar?). I was just asking because I have no experience in Ruby, but I have some in Python so I was thinking that it made sense to develop website in something that I was already familiar with.
Famous examples of real-world Django include the Instagram website and the Disqus site.
I prefer flask's app.route to django's routing. Djano's ORM is lovely. Flask has a number of ORM bolt on's - flask-sqlalchemy and peewee ... just as good. Django's templating and flask are both good. What you will like about flask is that the documentation shows you how output to a browser much more quickly than django. What you will like about django is that it's faster to get database orm going and admin up much faster. Flask is like legos - bolt on what you want. Django is more like a finished complete toy. I prefer flask. 
Ruby is, in some ways, very similar to Python - it's a modern OO scripting language. In other ways it's very different - it leans on Smalltalk for syntax &amp; has a lot of things from Perl (glyphs to designate variables, a penchant for terse code). If you know Python &amp; are comfortable with it, go ahead and keep using it. If you've never developed a web application before, go ahead and start with Django - it's a well designed system &amp; is very popular for a reason.
I'm running 2.7.6 by the way...
Honestly, they are both great frameworks. Django comes with an enormous amount of functionality built in and a thriving ecosystem. I especially like the database support in Django. On the other hand, I often use Flask to prototype because you can get going much more quickly (although I have used it with success in production as well). If you need a database, then either Flask + SqlAlchemy or Django are great choices. In fact, if you are an intermediate level programmer, there is no reason you can't try both.
Looks like it's Django powered. https://github.com/python/pythondotorg
I started off my webdev with Python using Flask, but I changed to using Django for my most recent projects. Flask was cool in its minimalism and barebones approach, but I like the features that Django comes with built-in. I'd suggest learning Django, honestly the workflow and organization that Django provides is far superior to that of Flask, at least from how I see it. Perhaps once I develop a couple of apps with Django and move to Flask, I'll be able to organize my code better, but for now, it's all Django for me from here on out.
Honestly, learn AngularJS if you're just now going to start learning a web framework. It's going to continue being the leading JS MVC, and JS MVCs are going to become the major platform for most of web development. The "thick client" approach just has too many advantages, and most backend development is going to end up as RESTful interfaces. I spent three years on Django, and absolutely love Python (certainly more than JS), but I don't ever see using Django as more than just a RESTful back end with an automatic admin interface thrown in ( along with a few other bells and whistles). The number of Angular jobs will grow much faster than either flask or Django.
You are aware there are different user types and packages that make multiple profile types easy, right?
Great - here come the Django apologists that are going to start telling me how to do everything with Django. It's like saying "PHP is only really good for web apps" and having somebody mention that there's GUI bindings and 3D libraries for it. The point is that as you move further away from what the system was designed to do, the more work you need to do outside of the system. Having to use 3rd party packages demonstrates my point.
You just focused your complaint of the framework on a fallacy and I advised you of it. The framework is designed for third party packages, that's like ragging on Flask for the same thing. The tendency is to get things out of contrib that can be handled in a third party app. Flask and Django are more familiar than you think, they just happen to come with differing levels of defaults built in. You could replace pretty much anything in Django too. Coming into a discussion about which of the two frameworks to choose, then offering incorrect information as your only argument is asking for a correction.
You'll need to install the [python bindings](https://pypi.python.org/pypi/pgmagick/) for it. If you install that manually, you'd typically do `python setup.py install` from the extracted directory. Otherwise, look into `pip` which makes installing python packages much easier.
From http://www.python.org/static/humans.txt: &gt; Standards: HTML5, CSS3, W3C (as much as possible) &gt; &gt; Core: Python 3 and Django 1.5 &gt; &gt; Components: Modernizr, jQuery, Susy (susy.oddbird.net) &gt; &gt; Software: SASS and Compass, Coda, Sublime Text, Terminal, Adobe CS, Made on Macs &gt; &gt; Hardware Stack: Ubuntu 12.04, Postgresql 9.x, Nginx, Gunicorn &gt; &gt; Helpers: South, Haystack, Pipeline
Or Heroku ! I use that for my personal site with flask
Don't underestimate the value of having an admin done for you. And the time that saves you. 
You never define A. That might be your issue. 
Both are great. Django will be more widely used in industry than Flask (perhaps that is changing?) so if you are mostly interested in the job aspect I would go with Django. Django has some great documentation and a large online community. Since you are new to web development in general, it may be good to start with something that provides everything you will need (Django) instead of trying to piece together a bunch of plugins/extensions when you aren't even sure of what you need. It's worth noting that once you learn one, it won't be terribly difficult to pick up the other as well. I use both regularly. *Caveat: If you are going to go the route of writing single-page applications on the client-side with a JS framework (AngularJS) and only interact with the server via REST API, you should stick with Flask on the server and use the [Flask-RESTful](http://flask-restful.readthedocs.org/en/latest/) extension. Some would argue that you should just skip straight to this since webdev is largely moving to this kind of setup. I would warn though that it would be a very high learning curve for someone with no web experience.
I wish Python people would get it through their thick heads that the interpreter is an *advanced* feature. No person learning Python understands WTF it is, or why there are &gt;&gt;&gt; in the examples on the front page - "Is that an error? It looks like an error. Is that how you write Python? Do I have to enter a bunch of &gt;'s on every line? Where do I write a script? I thought Python was a scripting language." It's like they've never shown the language to anyone and just put what they think is cool to them in the docs. 
This blog could help you http://jadatravu.blogspot.in/ Source code can be downloaded from https://github.com/Jadatravu/Tutorials/tree/master/django_tutorials
CSS 38.3% Python 36.5% JavaScript 16.7% Ruby 8.1% Other 0.5%
[flask-admin](https://github.com/wilsaj/flask-admin) is what sold flask to me. it's straightforward and still customizable.
uhm, those are merely inclusions of normal files that are availiable normally in the repo 
seriously? the interpreter is such a simple concept. its one of the things that drew me to python in the first place.
Blogspam and [unattributed, stolen content](http://www.linuxforu.com/2012/05/functional-programming-and-python/). 
Of course. This is why I'm going to get downvoted and the situation will never change. It's a litmus test. The few people who like the interpreter stick around to become Python fans, the rest move on to Node/JS or Go or other languages that realize at teaching someone how to use a programming language is different from teaching them how to use a command line interface.
There was already a long chain about that when the redesign was discussed a few days ago.
completely agree. I'm using IPython notebook for a long time now and the &gt;&gt;&gt; signs on the new site seem weird for a moment
Still not as powerful as Django's admin, tbh.
Link?
Same here, for the most part. However I haven't used Coda since moving to Python/Django. It seems mostly geared towards PHP. Sublime Text + Terminal seems like a much faster workflow for me. But maybe I'm just missing something.
It looks beautiful! But the interactive shell isn't working in Safari on OSX 10.9. It keeps saying `Sorry, you must have cookies enabled to use this site.`. Even though I clearly have cookies enabled.
I was looking for modern, open source alternative for webcapistrano, but found nothing. Now, 3 months later, I have working prototype. What do you think about my project? Can this be any useful? Would you use it? Maybe such tool already exists? Future ideas include: advanced permission system and task scheduling.
http://python.org/admin/
I'm on mobile and I hate it how websites prohibit me from viewing the normal website. They ignore the desktop version request and there's no link to view the full site. Sadly, Python.org does this.
Very disappointing
Wow. So much better than the PHP redesign a while ago.
http://rosettacode.org/wiki/Guess_the_number
&gt; Core: Python 3 and Django 1.5 Looks like first real-world use of Python 3 and Django **1.5** [in which Python 3 support was considered experimental](https://docs.djangoproject.com/en/1.5/faq/install/#can-i-use-django-with-python-3): &gt; Django 1.5 introduces experimental support for Python 3.2.3 and above. However, we don’t yet suggest that you use Django and Python 3 in production.
That's only if you don't use `venv` which comes standard with Python 3… :P
&gt;[JavaScript] MVCs are going to become the major platform for most of web development. That's such a sad thing to read.
You should also consider [Pyramid](http://www.pylonsproject.org/). It offers the same flexibility like flask, but on the other side it brings more (optionall) "batteries included" features. The downside of Pyramid is its documentation, which is not as good as the documentation of flask and django. PS: Reddit is also written with Pyramid
This is a valid technique when trying to deploy functionality as a single file which, during development, is best kept as separate files. Before Flask became a real project, A single-file deployment of ["the Deny framework"](http://denied.immersedcode.org/) was released as a joke, perhaps in response to the love shown for bottle.py. This single file encapsulated Werkzeug and Jinja2 as archives encoded in base64 ([proof](http://denied.immersedcode.org/deny.py)). The rationale is the same for virtualenv, though less compelling now because (AFAICT) it now bundles setuptools and pip wheels in separate files, rather than incorporating them in the base64 blob.
Too bad it's just a pretty fascade for now, go to PEPs for example and it's back to the old design.
Tuples are immutable though whereas lists and arrays aren't. 
whats yo' point?
Well, it's because there is no desktop or mobile site, it's the same responsive site. That is what responsive is I guess, I don't see a good way of disabeling the media queries for small screens that want the "desktop" experience.
I don't think that this is the right subreddit to post this kind of questions. Please use /r/learnpython or /r/learnprogramming for this.
This disappointed / amused me. http://i.imgur.com/C89HRKc.png
https://github.com/python/pythondotorg/pull/141
Must... resist... urge... to... call... it... icanhazpython3
That's exactly the problem - it makes it hard to write reusable decorators.
Meaty account of a very interesting conference.
Django if you want to build a full website from the ground up, Flask if you want a small site or to stick a web interface on an existing project. I feel that by the time you've added all the modules you need for a "big" site to flask, you basically have Django. Except with less robust support for some of the pieces and documentation scattered in many places. On the other hand, if you just need a small site or a REST api or something Django is probably overkill.
Visually it's nice. From a design perspective, it has wayyy too much redundancy and has a lot of confusing sloppiness.
/r/learnpython would probably be a better place to ask this. However, as a general guide, a good way to do this stuff is to just write out the steps (or draw a diagram) for the "flow" of your program, then start translating this to python. So here we have: 1. Show title / instructions etc. 2. Pick a random number 3. Repeat the following until the player gets the right number: a. Ask the player to enter a number b. Was the number the one we picked? - If so: give the "Congratulations" message and exit - If not: give the "Incorrect" message, and repeat step 3. Now, to translate this to python, there seem to be several things we need to do: - Print messages (the title, instructions etc) - you're probably already familiar with "print" for doing this. - Pick a random number. Take a look at the `random` module for this. - Read a number from the user. There are two steps to this: - Get whatever the user types - Convert this to a number (and potentially we also need error handling here. Eg. what should happen if the user enters "dfkgjdflkg" rather than a number? though perhaps leave that till later) You'll want to look at the `raw_input()` function for the first, and the `int()` function for the second. - How to *repeat* a bunch of steps until the user gets the right number (ie. step 3). You'll want to look at the notion of *loops* - specifically python's `while` statement - here. - How to give a different message / result for the correct answer versus the wrong answer. For this, you'll want an `if` statement. Hopefully some of those earlier modules have introduced these concepts, so it should just be a matter of bringing them together to translate the steps into the complete program.
Flask fanboy here too!
Someone recently asked a similar question in /r/django: "[What is the best way to learn Django in 2014?](http://www.reddit.com/r/django/comments/1yl1pv/what_is_the_best_way_to_learn_django_in_2014/)" ...and it got some good replies. The TL;DR of the post? Aside from the official docs, Two Scoops of Django by /u/pydanny and Tango With Django are good places to start. The community in /r/django is quite helpful, too. I recommend you still go through the comments, nonetheless. As for MongoDB, there's something called 'django-nonrel' that seems to tie in very well - I haven't used it myself, so I can't say much but here's a Heroku-specific article I found: "[Django nonrel and mongoDB on Heroku](http://gdovicak.com/heroku/django/2012/02/23/Django-Nonrel-and-MongoDB-on-Heroku.html)" Good luck! :)
It was our first PyData outside of the USA (and the second will be held during EuroPython in Berlin in July). Given the 'cold start' problem I super happy with the outcome, we had so many interesting conversations and a lot of people from different domains got to swap ideas. PyDataBerlin will be rather fun too...
Here's a great interface for mongo: http://motor.readthedocs.org/en/stable/
* http://scikit-image.org/ * http://scipy-lectures.github.io/advanced/image_processing/ * http://stackoverflow.com/questions/94875/image-processing-in-python * https://wiki.python.org/moin/UsefulModules#Image_Manipulation 
No, not really. Coda doesn't buy you anything particularly helpful in this stack, just developer preference.
Using [] (which calls `__getitem__`) will look for column labels and isn't the kind of indexing you want here. It's a convenience thing to get at columns in the dataframe. If you add a slice to it (`df[200:]` or `df[200:, 1]`), you are trying index but you still won't get what you want b/c a slice expects positions and 200 in this case refers to a label. That ambiguity is why indexing doesn't work like your'e expecting. It has to guess if you mean labels or positions, the level of the index in a MultiIndex, etc. "Normal" indexing in pandas is best done using the indexing methods. `.loc` for label based and `.iloc` for position based. These explicitly tell pandas what you are looking for. If you're mixing labels and position, you can use `.ix`. These can take slices so something like `df.loc[200:, :'Var1']` gives you: Out[77]: Var1 Person TimePoint 200 1 123 2 123 3 22 For MultiIndexes you still need to tell it the level so you use the `get_level_values` method. It's wordy but it is clear in intent. Oftentimes using a MultiIndex is more hassle then it's worth and keeping the index data as rows or columns and using regular boolean selection is easier/clearer. You can always create the indexes as needed (or just group by the labels if you are doing a reduction). There are a lot of options for indexing and it can be confusing. It goes a bit against the zen (more than one to do things) but it does so in order to favor explicit over implicit. 
Thanks for the try, but none of it solves my problem. Read [here](http://stackoverflow.com/questions/21990868/gifs-opened-with-python-have-broken-frames)
&gt; Ruby 8.1% Wat?
Keep at it. When it comes to programming it's all about that moment it 'clicks'. Until then it can be discouraging. 
Sad but true. If browsers started running other scripting languages natively, we'd eventually see that change (what Google is trying to do with Dart). But for the near future, it's very much a JavaScript world for web apps.
~~Also, SASS.~~ Ha, I'm dumb. SASS should show up as CSS. 
It would be seen as vadalising since my answer to the assert statement is to never use it.
Lack of support for composite primary keys is a dealbreaker for me. Besides that, it is a nice project indeed.
Now go tidy up the pygame website.
Very true.
If you're still a student, learning either will be fine. What a potential employer is going to look for is knowledge of the concepts. Do you know what MVC, REST, HTML, and CSS are and how they interact? You can learn these in either framework (or in PHP or anything else, for that matter). The skills are transferable. Basically all you need to do is think of a project, pick a framework, and build it. 
Array element values are mutable in other languages. 
To be fair, there's a config.rb to control compass compilation. Though I doubt that contributes significantly: https://github.com/python/pythondotorg/blob/master/static/config.rb
That's fine as long as they show the same content. But when stuff is missing it's rather annoying.
Exactly this. They are a very open community and gladly accept recommendations. I already left feedback about getting rid of the top navigation bar using that feedback form.
"Raymond Hettinger describes what python has that other languages don't."
mac osx
The binaries that I've installed previously have something I can just throw into my /usr/bin but I dont know what to do here...
So you want other people to contribute but not to be able to profit from it? AFAIK there aren't any open source licenses that prevent commercial usage. Realistically people aren't selling open source software directly since users could acquire the software for free on their own. Instead people are creating software or services that make use of OSS. Attribution is a standard clause is the vast majority of OS licenses.
&gt;I DON'T however want anyone to be able to take credit for my work and be able to sell it after they've made one small tweek Is your code really that awesome that this would likely happen? 
It'll be open source, but by that I mean I'll be providing the source for them to view and edit how they please. It won't be a community thing. I'd have the master copy on my site. &gt; Attribution is a standard clause is the vast majority of OS licenses. So if someone else wants to profit off of it, then they need my permission? Or does that just mean they have to give credit to me and they get all the profits. I just don't want to do all the leg work and someone else profit from it. Nessus was an open source project before it was forked and is now sold commercially.
I looked at that. They all say "Commercial Use". Doesn't that mean that someone can get my code, make a couple of edits, call it their own, and the profit from it? It doesn't give very good descriptions for things.
what the hell is your point besides to shit on the hard work of others? 
Not that I'm aware of. The good news is that there are a bunch of resources. The bad news is that they mostly suck. I'm actually writing up a paper on this for my senior project, so I'll just quote what I've got so far: # Related Work A number of people in the open-source community have recognized the problems with license selection over the years and created various attempts at a solution. ## One-license Arguments The simplest solution to choosing a license is to always choose one particular license. Various authors have put worth popularly-read arguments for selecting [the GNU Public License](https://web.archive.org/web/20090717023402/http://zedshaw.com/blog/2009-07-13.html), [BSD-style license](http://www.freebsd.org/doc/en/articles/bsdl-gpl/article.html), and [Apache License](http://www.getchef.com/blog/2009/08/11/why-we-chose-the-apache-license/). While some licenses have been created to deal with legal insufficiencies in other licenses, most are a result of different opinions on how software should be licensed. These differences of opinion are one of the major factors fueling the continued use of a variety of licenses, and as such, any argument for use of a particular license can only be described as simplistic - it assumes the reader holds the same opinions as the author. Since we want to assist as many software developers as possible in the choosing of licenses, this approach provides only a limited starting point. ## Summarizers The next most common approach is to provide summaries of common licenses. This provides information on multiple licenses to the user, but requires them to manually compare the features of each considered license. Additionally, the reasons so prominent in the one-license arguments for wanting a particular license feature are absent, or at best over-simplified , in the summarizers. [tl;drLegal](http://www.tldrlegal.com/) is the most prominent license summarizer, but there have also been well-publicized summaries from [Github](http://choosealicense.com/), [ZDNet](http://www.zdnet.com/blog/burnette/howto-pick-an-open-source-license-part-1/130), and [Three.org](http://three.org/openart/license_chooser/). Occasionally summarizers also take the form of comics, like the fan-made comic hosted on [the WTFPL website](http://www.wtfpl.net/wp-content/uploads/2012/12/wtfpl-strip.jpg). ## Flowcharts Finally, a few attempts have been made to create flowcharts that guide users to a license that meets their requirements. Unfortunately, these flowcharts are still too simplistic - to fit everything on one page, they either use [a very small subset of licenses](http://choosealicense.com/) or [skimp on explanatory text for each decision](http://cl.ly/5nAo/o). ---- My answer? An interactive, guided wizard that provides advice on why you might choose a particular option, and tries very hard to approve of all license preferences equally - [ossified](https://github.com/xiongchiamiov/ossified). Unfortunately, it's a desktop application, which throws most people off of it (I've been playing with a Javascript port for Ren'Py, but that's another thing altogether). A-n-d I realize right now that there are no installation instructions, so I'll put those up as soon as I'm finished here. ---- Now, on to your question. &gt; I DON'T however want anyone to be able to take credit for my work Easy enough. &gt; and be able to sell it after they've made one small tweek (or none for that matter) Much more difficult. You see, one of the primary freedoms of free software [is the freedom to sell it](https://www.gnu.org/philosophy/selling.html), and you won't find free software licenses that forbid it. *Most* of the time, when you want to prevent this, what you actually do is make it GPLed - because that effectively kills the ability to sell the software.\* I would strongly suggest reconsidering your non-commercial requirement. If they only make a minor change, then why would people pay for it (versus your version), anyways? ---- \* Yes, there are business models based around GPLed software, but that's not the point of this question.
Nice ! I've been putting off doing some kalaiedoscopic effects for a while
Because it hides a built-in function
&gt; one small tweek I use that as an exaggeration. They could change the looks of it and keep the code. I just want to be able to release the code knowing that no one will benefit from my hard work except for me.
hey fucker, i was asking a question. not making an assertion. so keep your implications to yourself. 
It's not just the JavaScript part that makes me sad, it's client-side scripting in general.
Thanks a bunch. This helps a ton.
This has been getting worked on for... 2 years? A lot of the same complaints are still here. But I'll say the same thing I said when they first showed the beta. It's not perfect. But neither is anything you've ever done. Go ahead and show your work here and see how ripped apart it gets. These guys have done a great job. Bravo.
&gt; You're question came off very high and mighty. No, the question was pretty straight forward. Is your code that awesome, that someone would want to take credit for it? I have had to ask this question myself, and for me, it isn't awesome enough to worry about. YOU, need to ask yourself that question. And I sincerely doubt, if you are honest, that you would think it was that awesome that someone would take credit for it and thus worry about licensing. TBH, it is you that comes off as very high and mighty that you would think that you have somehow invented something both completely new and non-trivial that licensing actually matters. 
Apparently you've got to have *third party* cookies enabled, which is not the default on Safari. Presumably because the console is served from a separate site.
When you use the term "open source", especially in a community like this, there is an implied meaning beyond just being able to see the source code. What you are asking for is not open source.
great framework you have there, that doesn't even have a decent authentication model out of the box. I'll stick with web2py thanks. 
Here you go: http://www.reddit.com/r/Python/comments/1ydxil/the_redesigned_pythonorg/cfjq8rz
dude, I'm going to be soooooo jealous of the fat stax u r making. may facebook acquire your stupid ass for half a billion. 
Well, to be fair, Flask-Login is really great, but just doesn't a good enough job of forcing one model of auth, which makes it really hard to use :( We've actually got a cool new library in the works: http://flask-stormpath.readthedocs.org/en/latest/ which aims to solve these problems.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Aladdin Free Public License**](http://en.wikipedia.org/wiki/Aladdin%20Free%20Public%20License): [](#sfw) --- &gt; &gt;The **Aladdin Free Public License**, abbreviated **AFPL**, is a license written by [L. Peter Deutsch](http://en.wikipedia.org/wiki/L._Peter_Deutsch) for his [Ghostscript](http://en.wikipedia.org/wiki/Ghostscript) [PostScript](http://en.wikipedia.org/wiki/PostScript) language interpreter. &gt; --- ^Interesting: [^OPaC ^Free ^Public ^License](http://en.wikipedia.org/wiki/OPaC_Free_Public_License) ^| [^Ghostscript](http://en.wikipedia.org/wiki/Ghostscript) ^| [^Public ^License](http://en.wikipedia.org/wiki/Public_License) ^| [^List ^of ^PDF ^software](http://en.wikipedia.org/wiki/List_of_PDF_software) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfnmjts) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfnmjts)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 69442:%0Ahttp://www.reddit.com/r/Python/comments/1yt9v2/is_there_a_subreddit_that_helps_with_picking/cfnmjo2)
Not gonna lie, I gave it a few guesses
What's the attraction to VIM? I see a lot of people using it, but I never understood what the attraction was. It seems like a horribly unintuitive way to edit your code. I probably just don't understand the power of it.
That's really what it should be called. This is the internet after all.
I hope you find it useful! I sure had some fun making it. Although PIL has a frustrating habit of arbitrarily clipping your shapes when you try rotating at angles other than multiples of 90 degrees. This resulted in some moments of bewilderment when my hexagons weren't symmetrical. Therefore if you decide to improve upon it my advice would be to forgo the hexagon and simply paste the triangles across the canvas with each rotated 180 degrees from the one adjacent. I felt quite naive not having recognizing this pattern until I was nearly finished pasting the hexagons, and it would have resulted in a cleaner graphic.
Aww. Thanks man! I appreciate it! There's no reason to be jealous, though. It ok. Don't be cry.
I would like to invite you to join on LibreOffice. There's some parts that use Python, most of then are unit tests and wizards. Or you can help Mozilla at some Python project. Or, search on GitHub, there's a lot of Python projects. Follow me if you want. https://github.com/alexandrevicenzi
Why would you expect a micro-framework to have the features of a full stack framework? 
As someone new to Python, this example is good at showing me the syntax. However I was unaware of the sum function until reading this thread. There is enough room to include the sum function as well as the loop in the example. That way it would show both the syntax from the original example and the power that is present in the built-in functions.
He was asking me rhetorically and stating that I should ask myself if I truly think the code I have written is at such a level that someone/company would want to steal it. He way of asking led to a miscommunication between the two of us. IMO: Any code worth writing is worth stealing. Cover your ass.
After reading that, I think I may actually go with GPL. Thank you very much for your help.
I understand your position, but I don't think the code is usually the valuable part of a business. Reddit is open source, and nobody has come along and stolen all their hard work. Personally, I think code worth writing is worth sharing (generally). Feel free to [steal my stuff](https://github.com/Widdershin).
That's the thing. I'm more than happy to share it for free and gladly will once I'm done. I just want to be covered in case someone tries to take what I've created, claim it as their own, and then make money from it. That's my issue.
&gt;There are many examples floating around on the internet (just Google Flask + authentication and you’ll see a few) which explain how to do the following: If you actually cut that down to the database-agnostic part, you get this: 1. use `bcrypt` to hash/check passwords; 2. use `flask.session` to mark the client as logged in. Everything else? Totally unrelated, especially the HTTPS "problem" (encryption is configured in the web server, not in the WSGI app.)
I got my Django job from Reddit. No joke. 
&gt; Because you fucking made the fucking comment about Flask not fucking bundling an authenti-fucking-cation module. false, the fucking article did that, I just fucking assumed that anything posted on this fucking subreddit is fucking accurate. I havent used fucking flask, so I wouldn't fucking know you fuck. from what I've fucking read, fucking flask is for fucking kids and fucking girls. So it would fucking make sense that it would not fucking have fucking authentication out of the fucking box since fucking kids and fucking girls think fucking sharing everything and fucking trusting everyone is the fucking way it should be. Alas, the fucking article implies that this is a fucking problem. So fucking take it up with the fucking author of the fucking post. 
all those features listed sound fantastic and original. 
Wait a minute. Is your solution to literally push *all* user-related data to your servers via a REST API? Is it at least possible to log into multiple apps with the same account? That seems to be similar to OAuth, only worse.
You want to draft a proprietary license. None of the OSI approved licenses accomplish what you desire because they allow redistribution under commercial terms. 
I don't know if it's just me, but I don't really like it. It's way better than the previous one, but it feels kinda... idk, cluttered and somehow bit ugly. Two nav bars (are they called like that?), one with flat-ish clean design and one with bunch of rounded corners, huge search bar and next to it socialize button wtf? then the sign in button. All of these buttons have a flat, not rounded on-hover images and/or submenus. The color used in the upper half of the website is too dark IMO. I could go on, but I think they could have done a better job.
Setting up eclipse/pydev to modify few lines of code is overkill, to say the least. Edit: also your API keys are in code...
Client-side makes so much more sense though for major parts of a web application, especially once you start dealing with caching and geographical distribution. So much nicer to render 90% of everything once and then put on a CDN with client-side calls to an asynchronous I/O bound backend for the dynamic 10%. It scales easier and, done properly, is much faster for the end user.
Why release it then? Anyway, you could just release it without license on github (if you don't find one that suits your needs): https://help.github.com/articles/open-source-licensing#what-happens-if-i-dont-choose-a-license &gt;This means that you retain all rights to your source code and that nobody else may reproduce, distribute, or create derivative works from your work. 
&gt; the code is usually the valuable part of a business. yep. so wretlefox should get over themselves. i doubt they are writing anything innovative that would be worth stealing. unless maybe it's a algorithm that can recognize quality cat pictures while scraping. that's $$ waiting for someone to take right there. too bad, it will probably use opencv which is under the most permissive license and the arguably the guts of any algorithm wrestlefox could theoretically come up with. 
Django admin has been a massive benefit to me, saving hundreds of man hours :)
&gt; It's an entire framework in itself NO FUCKING SHIT. So explain that to the author of this fucking article instead of trying to get imaginary reddit points on the internet. Add value.....whatnot. one mans "tantrum" is another mans performance art. 
Even if you don't know any C++?
I might be a complete newbie, but this tutorial starts off saying you'll need the latest Python, 3.3.3. Then in its first example this line appears: super(Form, self).__init__(parent) I thought the parameters shown here to super weren't needed anymore in Python3?
It's not just implied! There are definitions for both [free](https://www.gnu.org/philosophy/free-sw.html) and [open-source](http://opensource.org/osd) software that are **widely** accepted, and using those terms without meaning one of those causes as much confusion as using any other word in a manner contrary to its definition.
Instead of `if msg == 'a': key.press('z')` over and over and over again, wouldn't it be easier to create a dictionary like: `keys = {'a':'z', 'b':'x', 'up':'w'}`. And then do something like: if keys.get(game_command, None) is not None: key.press(game_command) Seems much more Pythonic that way instead of a long line of if/elif/else statements. Plus, if you end up adding commands, you just edit in one place.
Sent last week.
Might want to take a look at http://legacy.python.org/dev/peps/pep-0008/ as well as what /u/kurashu89 posted
There are a fair number of issues with the code shown in that post. You might want to consider refactoring a fair bit.
This post isn't aimed at programmers. It's more targeted for people who want to set up a twitch play. If you are looking to learn how to program a twitch play, I suggest the following changes: 1. Don't copy paste. I'm a teacher and I always discourage copy pasting. Type in the code so you'll think while you are typing and get a feel for the code. You'll learn more this way. 2. The most important step is #3 (the one where he says you are "coding"). Open the files and start typing. 3. Ignore what the author said about "don't modify unless your know what you're doing". You will learn a lot more if you are not afraid to make mistakes. Don't be afraid of doing your own modifications. In the worst case that it doesn't work, you still have access to the original. 3. Do step 2 (Setting up twitch) after you typed in the code. 4. Ignore step #3 (the one about setting up his IDE of choice). Use whatever ide you are comfortable with. Don't let anyone tell you what IDE to use unless you haven't found one you like. 
It sure matters if I'm making a product for others to deploy. Something with its own production worthy webserver builtin sure helps. Now, I could write my app with flask and use tornado for deploy. But I'm old, so I like events and callbacks. 
Look up the 'Mike Hibbert' channel on youtube. His aee some of the best absolute beginner tutorials.
bookmarked for the future
Isn't the None in get() redundant? Or am I missing something?
Well, less competition for me then. BTW you do realize you are commenting in a five month old thread, right? 
Also looking to learn Django. Would it be better to learn the basics of Python first though?
It is redundant.
He's talking about `keys.get(game_command, None)` vs. `keys.get(game_command)`. That is in fact redundant.
Wtf is a twitch plays stream?
I recently started Django coding after doing some work in Flask, and although I enjoy the elegance of Flask I wouldn't use it for every project. In particular, there is way too much integration to do when you're stitching things together from lots of small packages when working on a large project. Flask is great for smaller or more light-weight projects, though. I use both.
Yeah, I thought it was worth it ;)
Well you could just redefine the raw_input() function to something suited to pygame.
I just think that LiClipse's interface is a good way to get into python. It gives a great overview Oops about that key.. thanks for telling :P 
Twitch (game streaming site) users can control the input of the game through the chat. twitch.tv/twitchplayspokemon is the best example.
Very helpful. :)
I don't know, I was trained as a Physicist, and I hate Java. I have mixed feelings. Sometimes cows are spherical, but writing Java is never a good time.
Why is your code being 'awesome' any indication as to why someone would want to do such a thing? Sadly there are still people in this world who think that this is an acceptable course of action when it comes to development.
&gt; but I don't think the code is usually the valuable part of a business. Doesnt this depend on what the business does though?
Ah, that makes more sense. Thank you.
All those things that you mention in the first sentence are not related to authentication. That's the whole beauty of Flask - you get to get your hands dirty by building things at a basic level. If you require more magic ie. registration emails, consider shifting over to Rails and the excellent Devise gem. 
I don't know if there is something comparable to "apps" in Django or "blueprints" in Flask for Pyramid. Does somebody else know?
The web is for static documents. Static documents scale well. The web is okay for simple CRUD (e.g., reddit or blogs or even Wikipedia), but beyond that it's a terrible platform for applications.
Available on Arch Linux: https://aur.archlinux.org/packages/python34/
No mailing list yet, https://twitter.com/pydataconf is probably your best bet for now. We're investigating running a local event of some kind with a list (that'll be announced on my blog and elsewhere as/when we get there)
PyDataBerlin is a separate conference, co-located in time and space during the sprints of EuroPython. Separate organising group etc but both teams will work closely together. CfP for PyDataBerlin will open soon, CfP for EuroPython closed a while back.
Have you ever used Sublime Text? If you have used VIM you will fast recognize how big of a influence VIM has been on Sublime Text. I use a combination of VIM and Sublime Text for developing my Python scripts. I love VIM, but it took some time for me to find the right setup. When that was in place I really started loving it. I use it with the iTerm app on OS X which allows tmux like features. This enables me to split my terminal screen up in several windows and which really boosted my workflow. It's so fast and so easy to test the scripts. 
Seems to me introducing a bug or two in the code would be good for teaching. Have you tried this? If so, does it help in understanding the code? 
1.) from random import randint #doing from memory so forgive if off def roll() die1 = random.randint(1,7) die2 = random.randint(1,7) die_roll = die1+die2 print(die_roll) I would play with using tkinter as your GUI and have a die roll button trigger the die roll function based off an event. Building simple GUI's aren't hard. I did this for a little application I built as a joke for my spouse last year. I would highly advise you buy the absolute beginner's guide to python programming by Michael Dawson. How do I remember the author's name off the top of my head? Because its probably the best intro to programming I've ever seen and I've gone through MANY a programming book. He directly covers all your questions using console games. The tic tac toe game goes over using functions with a great example. 
So, if I am not sure I understand correctly... Couldn't I make if raw_input() == "yes": pygame.display."ball.png" (or whatever)
A string is true if it's length is greater than zero. There are no "truthy" characters, and "falsy" characters.
Check out pony orm as well, I find myself much more productive with it than any of the alternatives.
The only issue with buggy teaching code is if it goes in your notes and then you refer to it down the line. I think that problems can have bugs but textbooks should correct.
Is Tk really worth the time? From what I understand everybody is recommending moving straight to Qt. Or is Tk good to use because it's in Python's standard library?
scikit-learn: http://scikit-learn.org Great introductory workshop from SciPy 2013: http://pyvideo.org/video/2157/intro-to-scikit-learn-i-scipy2013-tutorial-pa-7 http://pyvideo.org/video/2156/intro-to-scikit-learn-i-scipy2013-tutorial-pa-6 http://pyvideo.org/video/2155/intro-to-scikit-learn-i-scipy2013-tutorial-pa-5 
Most funny comment I've read all day.
A better delineation would be "software engineers" vs "Django technicians." The former know how to design software, are given significant latitude in solving a problem, are comfortable with ambiguity, and are very good at approaching abstract problems. Technicians are very good at using a narrow set of tools to solve the problem that's immediately in front of them. They may be faster/more efficient at generating a Django website, but tend to approach software design a bit myopically ("when all you have is a hammer..."). Software engineers are more valuable and are a lot harder to offshore. I run a software development and consulting company and only hire engineers, not technicans. The first developer that I ever hired was for a Python project, even though he'd never ever seen Python code. Didn't matter. He had a broad enough of a background that picking up a new language wasn't all that hard. He was writing shippable code about a week after he started and is now Director of Software Engineering.
&gt; Plus, if you end up adding commands, you just edit in one place. Which also allows a pretty easy interface for customised key-bindings.
Cool. Are you charging enough for your services? I expected the rates to be higher. (also, there's some RST showing: `subscription plans`_) 
Example with remote code execution [here](http://www.reddit.com/r/netsec/comments/1yvjbu/python_remote_code_execution_in_socketrecvfrom/).
Please note that *open source* has a specific definition ([The Open Source Definition](http://opensource.org/docs/osd)) and a license such as the one you have described is incompatible with this definition. Edit: typo fix
Semi-related -- is there a PyPy release for ARMv5 that I can use with Arch Linux?
It's a bit prettier, but it's no http://www.scala-lang.org/ :(
I kicked @fijal this morning for his low pricing - what sort of pricing have you seen for related support services?
nah there's way funnier ones in this thread. typing "web2py" is low hanging fruit as far as jokes go for this audience. 
Yes, these will work with any other application as well, but I saw that there was a decent volume of searches being done for the keyword, and so I went ahead and used that - instead of saying 'hosting for developers'. Just a few hours after I published the original, I came across Jumpstarter, http://codecondo.com/jumpstarter-next-gen-hosting-platform-web-developers/ they're looking really good, and friendly, AND they also offer a free plan. I hope this helps.
So what could keys.get return that is falsy but worth parsing? 
I was giggling to myself while using the interactive terminal on the page to run: from urllib.requests import urlopen print(urlopen('http://www.python.org').read())
how do you run python ?
Can you elaborate more on Flask-Security being too unconfigurable? I just started using it and wondering what options are missing from it?
You're right. And as others have pointed out, that None in the get is redundant. 
You're telling us how, but i'm concerned about why.
It might be a good way to start, but for editing a few lines it's overkill. Rely on an IDE for a big, big project. For something as small as you've posted, I'd do that in a plain text editor (though, honestly, I'd use vim but I do everything in vim).
As a consultant, the trick is getting paid more than once for the same amount of time by being efficient at your job. 
"Baroque", haha. This reminds me of the story that Daft Punk named themselves after an unfavourable review.
Static documents don't perform well though, because the markup declares the style and scripting dependencies, and because frequently large portions of the DOM stays the same between pages. So on each page load, the browser is processing stylesheets &amp; scripts all over again, and repainting &amp; reconstructing the entire DOM. An HTML document fetched in a single request &amp; single packet, with all assets cached, will still take much longer (relatively) to load than a single JSON document fetched &amp; inserted into areas within a DOM. The only time the "thin client" web makes sense for end user performance is on initial page loads. So yes, a static approach is fine for a site intended to have high bounce rates, or users opening links in new tabs/windows. Otherwise, even something as simple as partials and pjax should be considered so as to bypass the first stages of the waterfall on subsequent page loads. 
[virtual environments](http://www.virtualenv.org/en/latest/)
I mean like def raw_input(): Pygame input stuff here return the inputted text That way you can just use raw_input() in a pygame context. You will no longer be able to use raw_input for command line usage in the program but it would make it feel a bit more normal for you.
Sorry for taking so long, I downloaded it, ran it and got the following: MoviePy Running: &gt;&gt;&gt; convert -delay 4 -dispose 1 -loop 0 C:\Users\me\Desktop\practice_GIFTEMP*.png -coalesce -fuzz 01% -layers OptimizeTransparency C:\Users\me\Desktop\practice.gif MoviePy: WARNING ! The following command returned an error: Invalid Parameter - 4 Traceback (most recent call last): File "C:\Users\me\Desktop\vid2gif.py", line 6, in &lt;module&gt; to_gif("C:\\Users\\me\\Desktop\\practice.gif") File "C:\Python27\lib\site-packages\moviepy-0.2.1.7.08-py2.7.egg\moviepy\video\VideoClip.py", line 420, in to_gif subprocess_call( cmd ) File "C:\Python27\lib\site-packages\moviepy-0.2.1.7.08-py2.7.egg\moviepy\tools.py", line 35, in subprocess_call raise IOError IOError 
I should add that I get the same results after I uninstall ImageMagick so I thinking this might be a separate issue. 
&gt;With years of experience in the area of dynamic language virtual machines and &gt;Python interpreters. But much less with catching sentence fragments. :-)
I'm in academia, so I've never actually thought about that implication. Good point!
For sure. If you're working in security or making the next google or whatever, your code should probably remain private. I would say that 95% of startups/businesses do not fall into this category.
Django is great for rapid development, and standard documentation is very good. However there is little documentation on optimizing or deploying Django apps beyond the basic cases. I have used Django for several projects, the latest a document management software for an medium engineering firm with 15 concurrent users. The data structures where somewhat complex, which resulted in a lot of queries to display the document hierarchy on screen, and it was *slow*. So, the Django abstractions are fine, but if your app gets complex, you will probably have to dig deeper into what's happening within the engine to optimize your code. Also, the standard Django forms are great for rapid prototyping, but if you want to build a richer UI using jQuery and async calls it can get tricky. 
Can't do a PR on bitbucket at the moment, but this might help: &gt; We are the people who brought you PyPy, a fast Python interpreter. Together, we have years of experience in the area of dynamic language virtual machines and Python interpreters. &gt; Since 2003 we have maintained PyPy has an open source project. However, we've recently identified a need for commercial solutions with guaranteed response times. &gt; We have assembled a first-class team of PyPy and Python core developers doing commercial consulting on a daily basis. &gt; Let us know how we can help you.
Another typo: "Python and PyPy performance analyzis"
I can't imagine why it wouldn't be possible to automate multiple sites like this, but it may not be trivial. Can you give more information such as what sites we're talking about and what type of SSO is in place (for example is this using a social login with OAuth or OpenID, etc?)
You can easily change the template path and filenames: https://pythonhosted.org/Flask-Security/configuration.html#template-paths It doesn't look like you can change the directory name for emails. You can always request it at https://github.com/mattupstate/flask-security/issues?state=open
What are some known affected libraries?
We just call them "args" and "kwargs" and let the stars be assumed. Everything else is just an argument. (ha!)
But args and kwargs mean quite different things to *args and **kwargs. I suppose you could assume a certain amount of contextual intelligence such as one would never make an argument or keyword argument actually called args or kwargs. Then again, I hope nobody would ever make a method called dunder!
"skwargs".
I like this. The 'st' and 'skw' prefixes are sufficiently different sounds as to not be ambiguous. 
&gt; how to say **kwargs. I read "kwargs" like "quarks". Adding an "s" for **, it becomes "squawks".
Either your login is not received, or you are getting an error from the next server in line that will shine light on why this is happening. Do you have some source we could view?
This is interesting. Gary, do you mind providing a scenario where this would be used? I'm having a hard time visualizing what the user would experience on their end. 
squarks is even better - that rhymes with stargs and has a funny sound when combined. Stargs and Squarks sound like names of alien species from a Stanislaw Lem novel.
Assuming your contract allows you to capture that surplus!
This is awesome. Hopefully this will convince some companies to move from Java who are currently wedded to Oracle support contracts.
Software support contracts tend to oversell and trust you won't use your hours.
Python is turing complete, so you can do anything, given enough time and memory ;) There's two options. One is that the sites are competently run (ie Google, Facebook, Twitter...), in which case they are using OAuth. Python has an OAuth library, so you just have to find the central OAuth server and hook the library up to it. The other option is that it's a school/work related website in which case they probably rolled their own god-awful monstrosity. Enjoy figuring it out, I don't envy you. It probably involves session ids, and large amounts of pain.
&gt; but I saw that there was a decent volume of searches being done for the keyword, and so I went ahead and used that - instead of saying 'hosting for developers'. your seo skills are legendary 
pep or it didnt happen
This is exciting, fijal! Hope to see PyPy continue to advance and prosper.
Hello, nice work! Would you mind explaining what the main advantages over [Python Quantities](https://github.com/python-quantities/python-quantities) your library has? 
Who says "dunder"? "Double underscore" is totally superior.
Looks like (according to the docs) it handles [temperatures](https://pythonhosted.org/quantities/user/issues.html#temperature-conversion) more intuitively (note that I am not saying better or worse). It also does not require numpy, which quantities does. 
Thanks temperatures was the big thing I had noticed as well. 
"[Baroque](http://www.catb.org/jargon/html/B/baroque.html)" already has bad connotations in programming.
Glad to hear it!
And there's real design limitations regarding the lack of ARMv5 support, right? It's not like it was supported at one time and it's a hassle to keep it working? Because if it were supported at one time I'd be game to go ahead and use an older release or build my own binaries.
I can personally vouch that Python is used for data analysis and scientific for the following purposes: * Modeling weather, including hurricane and violent storm prediction, by national labs as well as private companies * Detection of money laundering and international illegal activity, including human trafficking and arms dealing * Processing and conversion of satellite data from a variety of NASA telescopes * Modeling fire propagation, in living rooms and across wild forests * Creating more efficient passenger jet wings * Modeling fracking * Horse betting Lesson: Any sufficiently general, powerful technology will be used for all manner of purposes. 
It's clear, IMO. alcalde is just being pedantic and/or giving you a hard time. LOL, nm. It's already fixed!
The formatting might be very nice for Ipython notebooks!
It's "very nice" but has too much redundancy and a lot of confusing sloppiness? In my day, that was called "not very nice".
Agreed. The best I can say about it is that it could be worse.
Not really. It's too cluttered and busy, too many colour changes and you scroll down the front page, and requires too much javascript. But at least there is no Flash.
Then web designers shouldn't make "responsive" sites. A bad feature is a bad feature whether it was deliberate or not.
I don't fully understand the question, but if u simply want to login to website and access the content then I have a suggestion. Few months ago i had to login to a website using python script that time i used 'requests' module First i logged in and then for sending subsequent requests i used the cookie i got from the first request Something like r = requests.get('blah blah ') Next_r = requests.get('blah blah ', cookies=r.cookies ) This code is very vague but the idea works. 
Are you implying that you double-book clients? Or that the work you do for one client actually serves two or more clients (unchanged)? Or that you misrepresent the hours you bill versus log because you're "efficient"? Unless you're getting paid peanuts, I don't know of a single client that would be happy with that situation.
This looks essentially like a standard retainer arrangement: rather than buying by the hour, clients lock in a lower rate in exchange for guaranteeing that they'll pay for a certain number of hours per week/month/whatever. Most clients with retainer arrangements don't use all their hours every cycle, but it still ends up being cheaper for them to go that route than to pay by the hour, and it means consultants can sell more than 40 hours' worth of work per week on the assumption that not everyone will use all of theirs every week. Of course, there's always the risk that by coincidence everyone will slam you at the same time one week, but then you just have to work some late nights.
"visually
So what you're saying is, her ankle is too big, 2/10 would not bang. Got it, thanks.
The 5th one isn't free (Gondor) and one of the bigger options that *is* free isn't included (Google AppEngine). GAE even [includes django for you](https://developers.google.com/appengine/docs/python/tools/libraries27).
I use pint at my day job. It's a very nice library, and a pleasure to work with. If you need to deal with unit conversions, I highly recommend it.
Hey OP, out of curiosity, what emacs plug-ins do you use for Python? 
For awhile I was trying everything and now I use nothing. The only plug-in I can't live without is James Clark nxml plugin when I have to deal with XML. It's handy for xhtml too.
Oh, and I can't live without Tmux/Screen with Emacs.
&gt; Instagram Filters with Imagemagick FTFY
Interesting, I might try it. A few code suggestions, if you don't mind: * You iterate over *enumerate(reversed(self.function_stack), 1)*, and then fix the index with *i = len(self.function_stack) - i*. A simpler way would be to iterate over *reversed(enumerate(self.function_stack), 1)* * You test if *sys.version_info[0] == 2*, and then in the else assume that the version is 3. This is (mostly) correct *today*, but in the future it might not be (python4 will come some day). It's probably better to test it, and not just assume. Anyway, enough nitpicking. Thanks for contributing!
It could be combination of Pint being a unit of volume And Python + unit ~= Pint Sort of
No, what I'm saying is that the new design of the website is too cluttered and busy, has too many colour changes as you scroll down the page, and the need for javascript for basic functionality is obnoxious. I have no idea what woman you're talking about, I'm talking about a website. edit: Oh, I see they've removed some of the changing colours from the front page. No more great yellow background when you scroll halfway down. Well, that's a start.
Array vs MutableArray
I know it's a matter of taste... but IMHO grapelli is really ugly. There are much better looking django admin overhauls than grapelli. E.g. https://github.com/divio/djangocms-admin-style 
Really interesting, I would like to try to integrate this with Pandas to get dataframe columns with explicit units+unit conversions, would be really awesome!
Do you have a write up anywhere? I use elpy with ipython in emacs. I'd like to see how your setup compares. 
&gt; You test if sys.version_info[0] == 2, and then in the else assume that the version is 3. This is (mostly) correct today, but in the future it might not be (python4 will come some day). It's probably better to test it, and not just assume. Testing for 2 instead of 3 is the correct way to do it. If you test for 3 explicitly you would activate the 2.x code again which you definitely won't do. A hypothetical Python 4 would be a decedent of 3.
Why are Quantities mutable? If I extract a Quantity from a list, and then use it in a loop with the += operation, it seems very surprising and dangerous to me that the value in the list would change as well. If I pass a Quantity to a function, I don't want to have to worry about exactly which operations the function uses so I know whether it will still be the same after the function is done. It also seems like you would naturally want to put Quantities into tuples sometimes, but tuples of mutable objects are incredibly weird, unsafe things. I imagine many people would want to use a Quantity the same way they use a floating point number, and the fact that it's instead a mutable container will cause crazy bugs. When the front page of your documentation has a cautionary tale about a bug that crashed a spacecraft, it seems strange that the package would itself contain such a bug magnet.
If you want to build pygame you will need all build dependencies : apt-get build-dep python-pygame then you can try to build pygame from sources.
How would that activate the 2.x code again? if sys.version_info[0] == 2: ... elif sys.version_info[0] == 3: ... else: raise NotImplementedError("Unsupported version")
I'm really impressed. It may need some code refactoring but it's nice for a first shot. I may use this for a training on pygame
Or is websockets/socket.io the only way ?
&gt; potentially working Or potentially introducing a subtle bug that's hard to find.
I wish some of these online consoles + dev environments were open source. They'd be useful for classroom settings, but you can't require students to buy accounts, and it raises FERPA issues.
Most of the ones listed have low tier free options. Eg pythonanywhere's free tier gives you 100s per day then throttles. Also, avoid codeaywhere.com. It's not secure for free accounts, which ts a terrible security decision. I wouldn't trust the rest of the platform given such shady behavior.
Only one, I don't know but probably a good one since essentially you find yourself with almost a raw TCP socket. You may also look at [SSE](http://www.html5rocks.com/en/tutorials/eventsource/basics/).
If I was making AST adjustments, yeah I would.
I'm personally partial to pythonanywhere, and have the $5 "hacker" account. They support SSH, which makes it easy to code from my Nexus 7 tablet while on the go. Stuck in a boring meeting? Tinker on a side project on my tablet! I'm a fan of the simple UI, but that's up to personal taste. While is says 'python', it's also got ruby, lua, node, guile, R, and probably others. Looks like it has gcc 4.8.1, but I had trouble building some existing code to smoke test it, but hello world worked.
 Cloud9 (c9) is open source: https://github.com/ajaxorg/cloud9 Another one I've been trying out is codebox.io https://github.com/FriendCode/codebox In fact just last/early morning I got codebox up and running in a docker instance on my development server. http://www.yourtech.us/2014/02/codebox-in-docker.html I'm going to try getting c9 in Docker next and compare them. I've been wanting to have a web-based IDE for a while and only in the last couple years (and mostly due to the rise of node.js) has this area matured enough to make this a reality. I've played with several of them on their hosted version and one issue that drives me insane is that the web client loses connection to the backend and I have to refresh the page and start my processes back up. I don't know if a self-hosted version will fix that, but I'm thinking most of these disconnect issues are load-related. So if I am the only use of the system, then hopefully these issues will go away. 
I don't see it as exploitation. Retainers are mutually beneficial arrangements, or the two parties wouldn't agree to the terms: clients guarantee the availability of the support people (so there's no risk of needing support and calling up the person and finding them all booked up), and consultants get some guaranteed income every month. I don't do contract work anymore, but when I did, my retainer clients were a godsend, because they gave me the piece of mind to know that I'd always be able to pay rent, etc.
for a turn based you can use simple ajax calls...
how to notify the players when one of them makes a move ?
Zope was good to me. I got into it around 2000 and still maintain an installation for an old employer. It's what got me into Python. Still, not a day went by that I didn't curse at it. The web dev community was still very much figuring out the right way to make Python web frameworks and it shows. 
You're asking the wrong questions! How does it matter whether its hmtl5 or not? A protocol is simply a set of rules that guide how two parties can communicate with each other. In this case, you might want to give websockets a try as it enables bidirectional communication from browser. You will still have to design your application level protocol.
Seem like a lot of unnecessary load, but what do I know.
Looks great so far, have you tried using Clutter for displaying the image? Clutter is pretty fast as it's using opengl as the backend. Here are some early experiments I did: https://bitbucket.org/vindolin/clutter-experiments I'm still having a hard time understanding all the concepts as the documentation is a bit thin, especially since a lot of the objects and methods are deprecated since 1.0 and most of the examples are for 0.x. 
BTW, GitHub repo: https://github.com/lepture/mistune
If you're looking to use socket.io without all of the burdens of using socket.io, you can use something called engine.io which works with more technologies
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 5. [**Long polling**](http://en.wikipedia.org/wiki/Push_technology#Long_polling) of article [**Push technology**](http://en.wikipedia.org/wiki/Push%20technology): [](#sfw) --- &gt; &gt;Long polling is itself not a true push; long polling is a variation of the traditional [polling](http://en.wikipedia.org/wiki/Polling_(computer_science\)) technique, but it allows emulating a push mechanism under circumstances where a real push is not possible, such as sites with security policies that require rejection of incoming HTTP/S Requests. &gt;With long polling, the client requests information from the server exactly as in normal polling, except it issues its HTTP/S requests (polls) at a much slower frequency. If the server does not have any information available for the client when the poll is received, instead of sending an empty response, the server holds the request open and waits for response information to become available. Once it does, the server immediately sends an HTTP/S response to the client, completing the open HTTP/S Request. In this way the usual response latency (the time between when the information first becomes available and the next client request) otherwise associated with polling clients is eliminated. &gt;For example, [BOSH](http://en.wikipedia.org/wiki/BOSH) is a popular, long-lived HTTP technique used as a long-polling alternative to TCP when TCP is difficult or impossible to employ directly (e.g., in a web browser); it is also an underlying technology in the [XMPP](http://en.wikipedia.org/wiki/Extensible_Messaging_and_Presence_Protocol), which Apple uses for its iCloud push support. &gt; --- ^Interesting: [^Technology ^push](http://en.wikipedia.org/wiki/Technology_push) ^| [^Pull ^technology](http://en.wikipedia.org/wiki/Pull_technology) ^| [^Push–pull ^agricultural ^pest ^management](http://en.wikipedia.org/wiki/Push%E2%80%93pull_agricultural_pest_management) ^| [^Instant ^messaging](http://en.wikipedia.org/wiki/Instant_messaging) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfp7q1r) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfp7q1r)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 71805:%0Ahttp://www.reddit.com/r/Python/comments/1yzdb4/what_protocol_would_you_use_for_turnbased/cfp7pnk)
I use cairo for rendering just because it's used by Gtk itself. Clutter seems to be able to do a lot more so maybe I'll use it in the future. Graphics related code is, ironically, very sparse in my project. Most transformations are done through the *viewing.ImageView* widget interface. Most of cairo's use is in the recently added background and magnifier components which perform custom drawing functions in the viewport. Loading and rendering only uses cairo for caching and blitting surfaces. I think if I ever wanted to, I could make the transition very quickly. Thanks for the tip. :)
It's mutually beneficial in the same way that going to the emergency room is mutually beneficial. The services are pretty damned near required, so they can charge whatever they want with whatever terms they want and you're forced to accept them or crash and burn.
Strange, the first time I run your viewer, rotating and scaling was kinda sluggish and there were artifacts around the rotated image, but after switching from amd to the intel card (hybrid graphics) its super fast now :) 
Just a minor thing. OBS is a lot better than FFSplit. Thank you. :)
I think that they're asking the right question in the wrong way. /u/liox's suggestion of Comet, or long polling, is likely what the OP was looking for. At least on the back end, but OP seems to know what they want for the front end (HTML5, so likely Canvas or something).
Well that is awkward... I don't think I can profile that, I only got an intel card. Even if I could, I doubt I would be able to do much about it, as my image viewer isn't really involved with the lower level stuff.
I think you should try going with WebSockets and see how far it gets you. Try [Autobahn](http://autobahn.ws/) together with the [Autobahn|JS](http://autobahn.ws/js/) javascript client library. 
Can I ask what a markdown parser is?
&gt;mouse support emacs doesn't have that in the terminal? I know vim does
Markdown: http://en.wikipedia.org/wiki/Markdown A Markdown parser will be a library that parses markdown...
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Markdown**](http://en.wikipedia.org/wiki/Markdown): [](#sfw) --- &gt; &gt;**Markdown** is a plain text formatting syntax designed so that it can optionally be converted to [HTML](http://en.wikipedia.org/wiki/HTML) using a tool by the same name. Markdown is popularly used as format for [readme files](http://en.wikipedia.org/wiki/Readme_file), or for writing messages in online discussion forums, or in [text editors](http://en.wikipedia.org/wiki/Text_editor) for the quick creation of [rich text](http://en.wikipedia.org/wiki/Formatted_text) documents. &gt;==== &gt;[**Image**](http://i.imgur.com/if7SUYN.png) [^(i)](http://commons.wikimedia.org/wiki/File:Markdown-mark.svg) --- ^Interesting: [^Markdown ^Extra](http://en.wikipedia.org/wiki/Markdown_Extra) ^| [^Markdown ^extensions](http://en.wikipedia.org/wiki/Markdown_extensions) ^| [^Price ^markdown](http://en.wikipedia.org/wiki/Price_markdown) ^| [^MultiMarkdown](http://en.wikipedia.org/wiki/MultiMarkdown) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfp9wze) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfp9wze)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 71918:%0Ahttp://www.reddit.com/r/Python/comments/1yz7bl/markdown_parsers_in_python/cfp9wjc)
Nice project! Thanks for sharing! Apparently the pygments renderer example that is both on the blog post and the README.rst has a couple of errors. First, the method `block_code()` doesn't expect `self`. Second, the variable `text` on the last line of that method is undefined. EDIT: Should `text` be `code`?
Turns out you can enable it. I still don't see the point, though.
me neither brother, ratpoison 4 lyfe
Nice! I thought it would surely fail this test: &gt;&gt;&gt; km = 10 * ureg.N*ureg.m/sqrt(W) &gt;&gt;&gt; km &lt;Quantity(10.0, 'meter * newton / watt ** 0.5')&gt; &gt;&gt;&gt; 
[pyqt](http://www.riverbankcomputing.com/software/pyqt/intro) is probably the best one, and cross-platform out of the box. For OSX you can try [pyobjc](https://pythonhosted.org/pyobjc/) (suppose to come with mac) but it will work only on mac.
I completely agree with your comment. Indeed, I have a rudimentary system to do units in my own project, echomesh, but when I saw this I was contemplating switching - BUT looking at my code I can see several places where I do things like += to numbers that were parsed from units, which would be a big oopsie. It's a shame - and sort of inexplicable, considering how many things in Python are immutable (even strings, which is somewhat unexpected, even though Java does it...) (OP didn't actually write the code, by the way.) 
Maybe I should try to compile mozart again ... oh right, it depends on emacs and I refuse to install that for religious reasons
Ooh, Docker looks cool. *bookmarked* and YES Cloud9 is open source! 
False alarm, rebooted again into amd mode and everything was fine, must be some resume-after-sleep amd driver bug, my cairo widget also had artifacts that were gone after a reboot. http://i.imgur.com/KU6xUCU.png
I just spent some time looking at this for my own project. Unfortunately, two issues would prevent me from adopting it. First is that [Quantities are mutable](http://www.reddit.com/r/Python/comments/1yxchj/pint_a_python_units_library_with_numpy_support/cfp36y9) as /u/rspeer points out. Dreadful decision! Less critical, but still a bit of a dealbreaker for me, is that it requires your units to be in the correct case! &gt;&gt;&gt; ureg['3Hz'] &lt;Quantity(3, 'hertz')&gt; &gt;&gt;&gt; ureg['3hz'] Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "pint/unit.py", line 453, in __getitem__ return self.parse_expression(item) File "pint/unit.py", line 1023, in parse_expression raise UndefinedUnitError(unknown) pint.unit.UndefinedUnitError: 'hz' is not defined in the unit registry It's not clear to me that there are any actual units that are distinguished by upper vs. lower case, so it's a bit of a drag. I know my (small number of) users often type e.g. 1000hz rather than 1000Hz. Looking at the code, it's not quite clear how to fix that easily, but it's probably not such a problem. There might even be some case setting in there, I didn't spend too much time...
[Didn't you post this yesterday](http://www.reddit.com/r/Python/comments/1ytj8p/the_flask_authentication_problem/)
So it looks like Markdown is actually what Reddit uses to format comments?
This is a follow up post :o
Oh, I see that now, "solving" was added
One of the Pint authors here. Quantities are mutable for the same reason that NumPy arrays are mutable: in some cases you want to do some operations in place to avoid unnecessary memory allocations. There are only a few functions that mutate the Quantities object and they are clearly distinguishable: `+=` and related; `ito` (in place conversion to another units). In NumPy you have to explicitly [flag an array as non writable](http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.flags.html#numpy-ndarray-flags) to get a [sort of inmutable object](http://mail.scipy.org/pipermail/numpy-discussion/2008-December/039275.html). Something like this could be an addition for Pint, feel free to open an [issue](https://github.com/hgrecco/pint/issues) 
If you're billing by the hour they care
Basically, yes. If you click the 'formatting help' button below the reply text box, you can see this: &gt;reddit uses a slightly-customized version of Markdown for formatting.
How is the tablet support?
This is a list of frameworks: https://wiki.python.org/moin/GuiProgramming I've tried PyGtk and WxPython; and I heard good things of PyQt, though I didn't try it myself. They are all cross-platform and easy to learn. If you need a designer, I recomend WxFormBuilder for WxWidgets (WxPython) and Glade for Gtk. You may also want to look at kivy, if you want a multi-touch or mobile app.
&gt; Quantities are mutable for the same reason that NumPy arrays are mutable But "one of these things is not like the other". You expect arrays to be mutable. You do _not_ expect scalars to be mutable. Even in numpy, the things that are contained in the arrays are not mutable. If I had adopted your system, I would have replaced some instances of "float" with your units, I would probably not have noticed this weird mutability property - and I'd have created bugs - subtle bugs that would have been difficult to track down. &gt; in some cases you want to do some operations in place to avoid unnecessary memory allocations. Why do quantities have so much memory allocation that this is at all an issue? EDIT: aside from memory usage, what advantages do mutable scalars have? 
One of the Pint authors here. We started Pint mainly to have a library with units defined in a text file (ie. outside the python code) with excellent NumPy support but without requiring NumPy. You can see the [design principles](https://pint.readthedocs.org/en/latest/#design-principles) for more info. With `excellent NumPy support` we meant not only that NumPy functions were supported, but they were correct. For example, Pint is one of the few packages that raises an error when you want to apply a function to a non dimensionless quantity. &gt;&gt;&gt; numpy.cos(10. * ureg.meter) Traceback (most recent call last): ... pint.unit.DimensionalityError: Cannot convert from 'meter' to 'radian' A lot of other nice things came afterwards from the [Buckingham Pi Theorem](https://pint.readthedocs.org/en/latest/pitheorem.html) to [Contexts](https://pint.readthedocs.org/en/latest/contexts.html) and [Wrapping Functions](https://pint.readthedocs.org/en/latest/wrapping.html).
Please do not poll, maybe server-sent events? For example, in Flask: #!/usr/bin/env python import random from twisted.web.server import Site from twisted.web.wsgi import WSGIResource from twisted.internet import reactor import time from flask import Flask, request, Response app = Flask(__name__) def event_stream(): count = 0 while True: count += 1 yield 'data: %c (%d)\n\n' % (random.choice('abcde'), count) time.sleep(1) @app.route('/my_event_source') def sse_request(): return Response( event_stream(), mimetype='text/event-stream') @app.route('/') def page(): return ''' &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;script type="text/javascript" src="//code.jquery.com/jquery-1.8.0.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; $(document).ready( function() { sse = new EventSource('/my_event_source'); sse.onmessage = function(message) { console.log('A message has arrived!'); $('#output').append('&lt;li&gt;'+message.data+'&lt;/li&gt;'); } }) &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;Demo&lt;/h2&gt; &lt;ul id="output"&gt;&lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; ''' if __name__ == '__main__': resource = WSGIResource(reactor, reactor.getThreadPool(), app) site = Site(resource) reactor.listenTCP(8001, site) reactor.run()
&gt; Even in numpy, the things that are contained in the arrays are not mutable. But when you are writing a program using NumPy arrays you pass around the NumPy array not just the content. If your function is &gt;&gt;&gt; def func(x): ... x += 1 `x` will be mutated if it is a NumPy array (or a Quantity). &gt; If I had adopted your system, I would have replaced some instances of &gt; "float" with your units, I would probably not have noticed this weird &gt; mutability property - and I'd have created bugs - subtle bugs that would &gt; have been difficult to track down. Also if you had replace them by NumPy arrays. &gt; Why do quantities have so much memory allocation that this is at all &gt; an issue? The focus is not on the Quantity object but on its magnitude. If the magnitude of the Quantity is a huge numpy array, you might want to operate in place and Pint allows you to do it. 
If you're going to compare with NumPy, quantities are only really comparable with arrays if you're comparing to 0-d arrays. 0-d arrays are objects that show up occasionally in NumPy, but they're best avoided at all costs. They look like numbers, and they act like numbers, until you mutate them (usually accidentally, and += is usually the prime suspect). I have lost days of work tracking down bugs caused by 0-d arrays, and I know others have too. So NumPy's functions strive to catch cases where they would return a 0-d array, and return an immutable scalar instead. Efficiency should not be the motivation here. Mutable numbers are unsafe at any speed.
I learnt Python by learning Django... It worked
&gt; First is that Quantities are mutable as /u/rspeer points out. Dreadful decision! NumPy ndarray is mutable and everybody is using them (including me!). &gt; Less critical, but still a bit of a dealbreaker for me, is that it requires your units to be in the correct case! Here I agree. But this is also true for almost all other units library as they all rely on describing a unit as a Python variable (and the interpreter is of course case sensitive). But Pint works internally in a different way. We have a unit registry which is basically a dictionary. In the development branch we have included a backport of Python 3.4 [transformdict](https://github.com/hgrecco/pint/blob/develop/pint/compat/transformdict.py) which will allow us to change the units dictionary to a case insensitive one. 
The Zope Foundation, for instance--and that's only a start on [those with a stake in Zope](http://www.zope.org/).
Hey, that's the title of a keynote speech I gave at DjangoCon Europe some years ago: http://lanyrd.com/2011/djangocon-europe/sfmzg/ http://reinout.vanrees.org/weblog/2011/06/07/zope.html Those who don't learn from history are condemned to not benefit from the lessons they would have learned otherwise. :) I myself find my experience with Zope very useful when working with Python web frameworks, or creating them. If you're interested in the sociology of open source communities it may also be an interesting read. But I just wrote this for myself and whoever else does get something from it, not, apparently, for you. 
Pythonic approach: `collections.Counter(words)`.
Currently learning Django after teaching myself Python. This is my opinion. Understanding how to program for the web requires learning A LOT about the infrastructure stuff: databases, ORMs, templating, internet protocols, web APIs, and also HTML and CSS, and more than likely Javascript. However, Django is also really easy to learn, and has an excellent intro tutorial, so that is nice. I would recommend starting Django **as soon as you want to.** If you feel like you have a basic understanding of object oriented programming in Python (and of course everything before that), then you could probably pick up Django fairly easily. Getting to the point where you can write good, interesting web applications is probably going to take a while. I advise doing both at once, but start working on Django immediatley. Spend half your time learning Django (which will be easy) and the other half of your time learning libraries, and generally getting better at programming python. This will at least make sure that you have something you can make when you finally get good at Django, rather than getting to the end and going "what the heck do i do now?".
Have you considered Meteor or Firebase?
You can do basic things with Tkinter. Guido has said he'd include wxPython with Python if it existed. So that leaves PyQt and wxPython. wxPython has a lot of quirks to it and a lot of platform specific things along with a confusing event system. PyQt looks more modern, has a lot of extra useful functions, and is easier to use. They'll both accomplish the same goal and are all cross platform, so it comes down to which one is prettier to you.
It is now on Github: https://github.com/derek3x/PryNotes
Of course they're mutable. I didn't say all mutable objects are bad. ndarrays are incredibly useful (except for the 0-d case that both authors and users should avoid). I'm saying mutable objects where you *don't expect* them are bad. ndarrays, where the number of dimensions &gt;= 1, look and act very much like lists. Every competent Python developer knows that lists are mutable, and programs accordingly. And every competent Python developer knows that numbers are immutable. Quantities do not look like lists. They do not contain arbitrary numbers of independently changeable values. They look like numbers. But they're mutable for some reason, perhaps to unnecessarily save a tiny amount of memory. I have no idea why you'd call += "clearly distinguishable". += is very commonly used on immutable objects, where it means something very different. I don't think anyone would suspect that += mutates a quantity unless they happened to read the code. When you create things that look like scalars but are actually mutable containers, you're violating the principle of least surprise, and encouraging really devious bugs. You should re-read the warning about crashing spacecraft on your front page, and re-think the way your library works.
&gt; But when you are writing a program using NumPy arrays you pass around the NumPy array not just the content. Yes, but as I said, you generally expect arrays (and also lists, dictionaries and other collections) to be mutable, and scalars to be immutable. &gt; &gt; If I had adopted your system, I would have replaced some instances of "float" with your units, I would probably not have noticed this weird mutability property - and I'd have created bugs - subtle bugs that would have been difficult to track down. &gt; Also if you had replace them by NumPy arrays. I might replace, say, Python lists with numpy arrays, but why would I or anyone replace scalars with numpy arrays? &gt; The focus is not on the Quantity object but on its magnitude. If the magnitude of the Quantity is a huge numpy array, you might want to operate in place and Pint allows you to do it. I now understand why you made this decision, but I do think it was the wrong one - mainly because I think very many of your users would only be using scalar numbers with units. The following code (which I verified) seems like a trap waiting to happen. ureg = UnitRegistry() x = ureg['1'] y = x y += ureg['1'] print(x) # Prints 1 x = ureg['1m'] y = x y = y + ureg['1m'] print(x) # Prints &lt;Quantity(1, 'meter')&gt; x = ureg['1m'] y = x y += ureg['1m'] print(x) # Prints &lt;Quantity(2, 'meter')&gt; The immutability should be the default. If it's a choice between efficiency and program correctness, you should always choose correctness - and if there's a switch I can switch on later to make it faster if I'm sure I'm not relying on the immutability, so much the better. EDIT: A very reasonable compromise (as long as you're able to avoid the 0-d array issue!) is to have scalar Quantities immutable and vector Quantities mutable. This would probably satisfy everyone, including me... :-D
Scalars are very different from containers! Trying to pretend that they're the same is asking for trouble. Please see my longer comment [here](http://www.reddit.com/r/Python/comments/1yxchj/pint_a_python_units_library_with_numpy_support/cfperla).
Hmm, interesting! So how would I deal with a string given to me by a user, like 100hz?
About halfway through [Learn Python The Hard Way](http://learnpythonthehardway.org/), I started playing around with Django. At that point, I never felt like it was lack of understanding of Python that was holding me back from understanding Django, it was much more challenging to digest all the infrastructure stuff, as /u/legrandin pointed out. Personally, I found the Django tutorial really frustrating, but that could just be me. I abandoned Django, worked with [Flask](http://flask.pocoo.org/) for a while, and then came back to Django and it made a lot more sense. But whatever works for you... 
i'll call them stars and cars. this are not words you would use while programming anyway. unless you work for a company selling cars :D
&gt;How does it matter whether its hmtl5 or not? Because it tells us the clients are running javascript on a web browser. Otherwise I'd assume he was talking about a standalone python program
See my (simultaneous) comment [here](http://www.reddit.com/r/Python/comments/1yxchj/pint_a_python_units_library_with_numpy_support/cfperla) with a very specific trap. I believe that having scalar Quantities immutable and vector/array Quantities mutable would solve the problem for everyone. It's particularly hard to come up with a use-case for mutable scalar quantities. :-D
I prefer to use `defaultdict` for stuff like that. categories = collections.defaultdict(set) for category, item in pairs: categories[category].add(item)
I started in Flask too. After Flask, Django feels like a dream come true, but that may only be because i already had a little experience with web frameworks? Who knows.
Figure I might as well plug my comic downloader to go along with the viewer. Not any issues you bring up I probably know of. Just haven't had time to fix or implement them. By and by, the viewer is coming along quite nicely. I certainly like it. https://github.com/Church-/Downloaders/tree/master/comic-downloader
See my gist here: https://gist.github.com/rec/9237674 As I've said a few times, I think the correct solution is to have mutable vectors and arrays, and immutable scalars.
What you say is true, making a GUI in VS is almost as good as sex
Check out the bug report [here](https://github.com/hgrecco/pint/issues/104)! Looks like we're close to a consensus already...
When you write `100hz`, Pint parses it into `100 * hz` and it looks up `hz` in the units dictionary. So there will be no change for you.
Same here. Start with Django with a project in mind. Learn both as you go. The Python and Django tutorials are excellent. Try out a few of their simple examples to get a feel. And there is always stackoverflow when you need it. Also wanted to add: You can start a python shell in Django doing `manage.py shell`. You can import most of your project models and apis. This has been very helpful especially when I am struggling with any python aspect of things. I am trying to grapple with javascript now. Thats a real beast to grapple with. :(
Hah. I'm starting into javascript soon. How do you reccomend learning it?
If you want to make it look professional, Qt is the way to go, hands down. It also has a very nice signals and slots system. 
I just went thru this. My advice is do everything using jQuery. It's enough for my purposes.
In browser, it's *ok*. I think they only officially support iOS, and I'm on android. I mostly use SSH, which is super responsive.
Same here.
Yeah I've played around with jQuery. It's pretty spiffy, easy to use. Have you done anything with angluar?
But hz isn't in the dictionary in Python 2.7.x - Hz is! I filed an [issue](https://github.com/hgrecco/pint/issues/105), which you've probably already seen. Thanks for being so responsive!
I started with Zope. Then Web2Py, then Flask, then Werkzeug... that's hardcore. No, Django only feels like a dream come true because you had *a little* experience with web frameworks.
Can you access/control python scripts via VS GUIS?
&gt; But hz isn't in the dictionary in Python 2.7.x - Hz is! Yes. But a case insensitive dict build on top of [PEP 455](http://legacy.python.org/dev/peps/pep-0455/) will take care of that.
Same here. It's generally better to learn something because you want to apply it, and Django is a great reason to want to learn Python. I found the Django documentation a bit lacking in places, but there is also ~~the Django Book~~. Don't forget you also have the Django source code - sure it'll start out looking like gibberish, but it's a great way to figure out why things are going wrong. [StackOverflow](http://stackoverflow.com/) is a great resource for Django tips/solutions - you'll find that the vast majority of your questions have already been asked and answered. Edit: DON'T USE THE DJANGO BOOK. Apparently it's old and out of date. Like me.
IMO the name isn't the biggest problem here. I mean, seriously, they're asking us to offload authorization and data storage to a remote server (=&gt; slow and suspectible to network failures) running unknown software (=&gt; who knows how secure it is) that uses proprietary protocols (=&gt; vendor lock-in) and comes with a fee (when you can do the same thing on your own server for free.)
I've used both [wxWidgets](https://www.wxwidgets.org/) and [PyQt](http://www.riverbankcomputing.com/software/pyqt/intro) (or [PySide](http://qt-project.org/wiki/PySide)) and would happily recommend either. Wx is super-simple, uses native widgets, so theoretically looks more 'at home' on the desktop (though in my experience some widgets look a bit funky on MacOS X). PyQt is very nice, looks good and the signals/slots feature of Qt is very powerful (especially if you ever get into multithreading). I wouldn't agonise too much over your decision - I switched an application I was developing over from wxWidgets to PyQt (for the in-built Webkit engine) and it took all of a day. edit: links
&gt; PyQt has licensing requirements Which is why you use PySide which is awesome.
Thank you. It's not about ripping people off. It's about being good enough at your job that you can charge a competitive price to deliver a service in X amount of time. Clients don't care how you get from point A to point B, if you had to hire five extra people or you knocked it out before lunch on the first day. If it's a competitive rate and expectations are met, that's all that matters. 
I did, had to stop in 2008 when everything crashed. Now I work for a college with some jobs on the side. When I was working full time though I always submitted a breakdown for my hours, and it was expected. Of course most of my clients were engineers and accountants and they all billed by the hour as well. It may be different if your consulting in other industries. But to lay down a blanket statement that clients don't care is just wrong.
Agreed, it's likely different industries and expectations. I have broke down my hours before, but it's more of an exception than expectation, so I can see where others may differ. But in the end, it's still about overall deliverables and less about how you got there, assuming you are charging a competitive rate. 
Don't recommend djangobook. The warning in the first page is there for a reason. 
I started in Flask, and now am playing with Django. If you have never programmed any websites in html, css, php, etc. I think it will be more difficult for you. Get a good solid grip on Python, then just jump in and learn. It doesn't matter if you break a website on your own computer. 
You are right, although as picklednull said, you can use PySide instead. I used WxPython on python 2 (2.5 actually), but there is a version called [ProjectPhoenix](http://wiki.wxpython.org/ProjectPhoenix) which also runs on Python 3.
Improving the tutorial has been on the todo list for years.
Nice project, thanks! I hope to find the time to explore it some more ... In the meantime here is some (gentle) critique: I know too little about flask to comment on the actual code ;-) oauth2 is the thing these days (vs openid) pep 8 ... (and clean up whitespace) pip freeze &gt; requirements.txt or, for extra points -- setup.py -&gt; install_requires Don't include virtualenv.py, don't hardcode the name of the virtualenv, use #!/usr/bin/env python The editor is very nice thanks for bringing it to my attention ;-)
I don't see any reason you couldn't execute them and monitor them/read output/etc from within a Visual Studio GUI using C# or something like that, I haven't used IronPython though, so I can't comment on it.
**Please stop recommend Django Book.** Currently, it's a mix of Django 1.4 and Django 1.0 material, with some dangerous stuff thrown in. Beginners won't know where the differences are, and I'm getting really tired of being emailed for help with *mod_python*-based deployments.
Nothing whatsoever. What I did was really basic: click some table row -&gt; send ajax request to api -&gt; draw another table from the data.
It's not forbidden to make money if the company delivers.
i would just use flask then find a good employer who will "teach you" django. 
unlike BSscience my advice is just use angular (combine it with underscorejs) and get rid of jquery. since you mentioned you are about to start js keep in mind the `after` function in underscore it will help you a lot with callbacks. Not a hardcore js guy but Angular is more like a modern way of doing things. rendering html client side, using less form submits and more ajax and its very easy to get things done. 
Django is even better regarding this aspect because it has it's own embedded development server. The only thing you might miss is MySQL, but for development you can try using SQLite instead. Maybe someone else can elaborate on this because I've never tried developing with SQLite and going with MySQL/PostgreSQL/similar on production.
Yes, this was a mistake on my part. I was gitignoring the static assets. Woops. Fixed now.
I had messed with Django before however I found the Udacity course on web frameworks to be helpful. While not covering django specifically, it covers a lot of the same fundamentals. I'd give that resource a try if you have the time. Also, its taught by Steve Huffman, one of the main confounders of reddit.
You sound like you know what you're talking about. Care to expand?
At least memorize PEP8 before diving head into the pile of spaghetti that is Django programming style.
Do you know how to program already?
jquery is pretty nice. still getting the hang of it myself. and i'll just echo everyone here by saying you dont have to be an expert in python before moving on to django. It might help by knowing a bit of the basics about the langauge, but totally not necessary.
It doesn't need repeating, but there is literally nothing less worthy of recommendation than that book.
Setting up a postgres database is really easy. That's what I use on my local machine using Django.
Yup. Same. I worried about it for a while, but those worries were thankfully inappropriate.
BSscience said: &gt; It's enough for my purposes. And that's the key point. If you just want to animate something on a web page for a client, it would be stupid to learn Javascript. Like learning how to build a car from scratch because your goal is to drive to the next town. People can have very successful careers as "website builders" without ever learning javascript... that's the power jQuery gives you. Now if the goal is to build a single page app that will be pulling in json and rendering shit client-side with all sorts of magic, then yes... start in the sidebar at http://www.reddit.com/r/learnjavascript
I'm starting a new web project, would you suggest Django over Flask? It's probably only going to be a single web page for the most part - what's the big differences between them?
You are absolutely right. I copied the example from README to the post. https://github.com/lepture/mistune/commit/ba16b05c05d3fef5290854a726da22d35a96dab0 
Tkinter can look pretty great if you use ttk (also in the standard library if you're using a current version). I gave a talk on exactly this at PyOhio 2012: [http://pyvideo.org/video/1364/an-introduction-to-tkinter](http://pyvideo.org/video/1364/an-introduction-to-tkinter) I actually distribute a commercial desktop app built in Tkinter, although it is Windows only. If you need a simple, not-so-heavy toolkit, tkinter with ttk is the way to go in my opinion.
strikethrough and superscript are the extra features, which are included in Sundown. Actually, reddit is using a fork of sundown: https://github.com/reddit/snudown
It is great to know that what I did is helpful for someone.
Can't up vote enough. I was a late pycharm converter. 
It's built in. And connecting to mysql isn't too hard if you're not on Windows. If your on Windows ur stuck to python 2.7 cause I can't find any pythin-mysql connectors for 3.3
"Learn Python By Solving Problems" - Should be a book by that title. That's basically what I did too back in the day. Python isn't like C or even Java where you absolutely MUST bone up on the essentials before you can be very effective. However, while you can get going on solving your problem right away with it, you will eventually have to read up on the fundamentals while you go along. You just don't have to do it first. So... learn Django first, then Python. It will probably be more fun that way. Oh, and don't forget to learn HTML, HTTP, CSS, XML, JSON, jQuery, etc. too. :) See? If you had to know everything just to get going, you'd never even get started on the problem you'd like to solve. 
&gt; Learning the ins and outs Django takes almost as much time as learning a new programming language. More actually; especially when you consider that Django is just going to lead you to need to learn everything else that's relevant to web programming (HTML, CSS, javascript, jQuery, etc.) 
Bah... don't bother. Or maybe spend like two hours on it and once you have a very basic understanding of lists, tuples, and classes; just move on. You can spend WAY too much time noodling over crap you won 't need right away, if ever.
This is an interesting post. I'm new to all of this myself and it would be nice to find a site that focuses on, or more likely describes "The principles of how the web works nowadays" as you said. Even a nice comprehensive list of technologies and concepts to learn. There's just so much out there it's hard to know what to focus on. I don't expect a site that teaches you all the possible topics, but more something that gives you an overview of whats really relevant these days. I'm sure I could find a way to learn AJAX on my own, I'm just not sure of what I need to learn and why. How it all fits together.
Depending on which version of Zope you started with, EVERYTHING may feel like a dream come true after that. But then, I haven't touched Zope for maybe .. 9 years? Ugh. 
Wondering that myself. If the OP has no programming exposure, then I may have to reverse my advice. Learn Python first in that case.
I recommend the "real python" series. It teaches both python and django with a hands on practical approach. Real python.com I think?
Understanding how to program for the web requires learning A LOT about the infrastructure stuff: databases, ORMs, templating, internet protocols, web APIs, and also HTML and CSS, and more than likely Javascript.&gt; I already responded below to a similar reply, but how do you know WHAT you should learn, how it all fits together? I need a "Here's how the modern web works" for dummies type resource.
My bad. I haven't worked with Django in a while and picked that out of the bookmarks I'd used back then. Lesson learnt, re-check links before posting!
There are plenty of youtube videos explaining different parts of how the web works. I think you have to know what you have to know before you can learn it, if that makes any sense at all (it probably doesnt). You have to know that you need this one part before your program will work, and then you have to figure out what that part is, and then implement it. There are full blown web developent courses out there, but they are mostly for PHP, since that's the most established language (which is probably gonna change). My advice is just to dive in, and embrace the feeling of overwhelming dumbfoundedness. Embrace the complete confusion and work hard to get past it, and it will all start to make sense. Just start writing code and reading docs, thats all I can suggest. 
Fair enough. Thanks!
It's useful to point out the existence and licensing of PySide here, but let's not kick up license flamewars. PyQt is GPL for an understandable reason - so that Riverbank, who make it, can sell commercial licenses for it. It offers an exception to the GPL so you can use it with code under other open source licenses. Finally, PySide development seems to have flagged a bit since Nokia dropped it, and in my experience PyQt is more technically stable.
You might find your answer with curses. Take a look at the documentation [here] (http://docs.python.org/2/library/curses.html) 
Why isn't this distributed and decentralized?
* https://code.google.com/p/spyderlib/ * http://www.iep-project.org/
Check out http://ipython.org/ also /r/ipython 
Interesting. I've also found "blessings"... I guess I want to open up a new window with a white background and print the text with a custom font. Is there a module for that?
You don't need to ask permission to learn something new. Just learn at what you feel.
Using SQLite is definitely the way to go unless you expected a lot of custom SQL to show up in development.
I'm very happy you both fixed and responded, right on!
If you're a developer already, then none is necessary. Python basics are fairly intuitive.
He's not asking for permission.
To hijack this, as someone who's written coldfusion/php and has done html/css/javascript and has gone through learnpythonthehardway but then doesnt apply it for a year, should I start with a microframework like flask?
&gt;Specifically I want to print a list of numbers, one by one (they are already in a list) on the screen and have the new number take the old one's place import sys import time def print_number(x): # \033[J means "erase to the end of the screen" print('\r', x, sep='', end='\033[J') # caret is now at the end of the line; # next \r will return it to the beginning, # allowing the new number to overwrite the old one. sys.stdout.flush() print_number(1) time.sleep(1) print_number(2) print() # print a line break
Unprocessed CSV data straight into a mysql database? **shudder**
That looks like the image viewer equivalent of Emacs.
It is, that's why you can have a static mirror jump in seamlessly when the database is taken away.
In order to feed it into the mysql database, you need to have a table already created, this is for when you need to make a brand new table. I have a frequent need to go from csv file &gt; create table statement &gt; load infile, and this script helps me generate that create table statement. It is useful in my case because I will deal with csv files that have 30+ columns, and typing out a create statement table by hand without errors becomes cumbersome. The next thing I plan to do is to make it generate a load infile statement based on the table structure and csv data so the script will print a create table and a load infile which then you can just paste into mysql. That way you can go from a csv of data to a filled database by running this script on your csv and pasting/porting the output to mysql. I havent really seen a tool that can take you from a csv to a working database easily, but if you have a good workflow for that I would love to hear it.
You take on a piece at a time. Try to follow a django tutorial. Once you run into an unfamiliar concept (maybe ORM, maybe caching, cookies, SSL, nginx) look it up. Keep doing that. You will come up with so many specific questions and ideas that you will clear your own path into the "modern web".
This might be useful: http://man7.org/linux/man-pages/man4/console_codes.4.html Keep in mind that different consoles use different control codes. The curses library, which wnowak1 mentioned, is all about normalizing these codes into a single interface, but if you're in control of the environments where your code will run, go ahead and use these control codes directly.
How does the Real Python course compare to Learn Python the Hard Way?
I use [pyscripter](https://code.google.com/p/pyscripter/). It does the job and it is more straight forward to install than than ipython.
There's pySoy, too.
Flask is a micro-framework. I use it for small projects or quick things I want to prototype in an afternoon. But as soon as you need admin stuff Django is your friend.
You commented in the original thread: "t may take some time to get your head around the variables (i'm not a big fan of easy to understand variable names), but feel free to reverse engineer the program if you don't quite understand how it works." Guess what? Everyone else is a fan of easy to understand variable names. Fix your variable names and someone might take a look. 
Is there any documentation for pySoy?
Watch out for your finding type function. Successfully casting to an int/float/etc doesn't always mean that you should use that type (ex. zipcodes will easily cast to an int, but aren't ints). Typically, this sort of type casting causes a lot of suprising bugs. I would honestly suggest just loading everything in as a varchar to start and then changing the types gradually. I would also suggest taking a look at sqlalchemy to help with your create table sql generation. It's a bit hard to use at first, but very useful to know if you are doing any other ETL work.
Too bad there's still no arm support in pyglet :( 
I'll try this when I get back on my linux machine. Thanks for the response.
[PySDL2](https://bitbucket.org/marcusva/py-sdl2)
I was there. He actually **made** a spitting sound when he typed it. According to the Gene &amp; Eva Conventions on the topic of Hyperbole (section III, paragraph 8, line 127, (I'm paraphrasing here), if you actually do something -- it is the same as -- actually better than -- imagining it. It is the Zen of imagining. 
I would recomment playing a little with Flask or Bottle or Web.py, because it gives you more immediate results and your can put everything in one file. But if you already know the basics like routing, templates, etc., then Django should be fine. Plus, the Django docs are excelent (imho). 
If you are reading txt, why are you using csv.reader? csv expects each line to be comma separated values, and returns a list of those values. If the line has no commas, it interprets that as a line with one item, and returns a list with one value. So each line read results in a list, not a string. Your ans1 == dos comparison then compares the string that the user has input with the list returned by csv.reader, and since they are different things it returns false. Some further comments: * Because your file reading code is inside your while loop, the files get read again on each question. Move that stuff before the loop, you only need it once. * Your code is inconsistent, e.g why are there parenthesis in the second line, but not the first, in this code: anw = anw +1 hnt = (hnt)+1 * Why start over on a false answer? Why not just move to the next question? * Case sensitivity is annoying, look up str.lower in [the docs](http://docs.python.org/2/library/stdtypes.html#string-methods)
[pyglfw](https://bitbucket.org/pyglfw/pyglfw) may come handy though it's rather a low-level API. 
Isn't it dead ?
&gt; I'm not a big fan of easy to understand variable names I've never seen anyone say this seriously. I still can't tell if you actually mean it.
♫ *saint args around my neck... he never gets respect* ♫ 
Pike does have a syntax for anonymous functions, but it's not as clean as Python's. On the flip side, it does allow full syntax, including statements. lambda() {write("Hello, world!\n");} is an expression, the value of which is a function. For instance, I can pass that to call_out, which causes delayed execution of a function: call_out(lambda() {write("Hello, world!\n");},2); Two seconds later, that'll say "Hello, world!" on standard out. (In this instance, it would be better to just call write directly, as call_out can pass args to its function. But that wouldn't demonstrate lambda.) It gets a bit verbose when the function takes arguments (you declare them inside the parentheses, just like with other function declarations), but it does work. Works best if you're not afraid to wrap it across multiple lines, unless the code is really REALLY short. Extremely handy for GUI event callbacks - for instance, connecting a button's "clicked" signal to a function. Functions are first-class objects whether they're declared anonymously or not, though. Once one has been created, it can be passed as an argument, returned from a function, stored in a variable (including an array/mapping/etc), etc, etc, etc. I make extensive use of this in my code, whether the functions are lambdas or not.
Yeah :(
No worries! Check out some of the custom libs the Enthought guys ship, in particular *traits* and *chaco* are pretty cool. One thing to watch out for, pay attention to your $PATH when you build stuff, e.g. macvim. Make sure its found the right python you want in, and if that's Canopy's, be careful on upgrades of Canopy that apps linking this Python (like macvim) still run fine after you upgrade. It's useful to have virtualenv's visible in your prompt so you don't get fooled into building system software with a virtualenv active. I've done it from time to time...
Now that you mention it, yep R.I.P 2012. 
I like Kivy - I even wrote a reasonably successful game for Android using it (Match 3 in the list you reference). The devs seem to be a little lost though when talk turns to making it more game friendly. Bewildered is the best word I'd use to describe their response. Don't get me wrong, they're great guys and full of enthusiasm, but they just don't seem to get that games need things like support for sprite objects, and tile maps, and animation systems, and... I've been out of touch from the project for a while but I've just checked and I can't see any solid movement towards a game engine... do you have a reference for that? 
Other ways this used to be done; don't print a line feed after you print your number. You can then use carriage return to go back to the start of the current line &amp; overwrite, or backspace to erase the last character (repeat backspaces for each thing to be erased). This method is terminal-agnostic. Python defaults to sending a line feed when you call print(), but you can either: * use the *end* argument to pick a different ending (Python 3) * put a comma at the end to print a space instead (Python 2) 
It's possible, but I wouldn't recommend it. You'll need to hook some function and have it pulse your hack by calling into the python interpreter via the C api. Also, you'll obviously need to load the python library into the game's address space and initialise it before calling any python functions. Functions like DirectX's EndScene or opengl's glx_swapbuffers are common targets for this kind of thing. These particular ones are called once per frame and the game engine usually synchronises on them so you can modify the client state without anything else accessing it while your script runs. I don't know anything about gameguard specifically, but if it's anything like as powerful as Blizzard's Warden then naive attempts to do the above will almost definitely be detected. However as with anything client side defeating the anti-cheat is just a matter of effort. Using python probably isn't a good idea as the python interpreter is rather large and would be very easy to detect via some sort of address space hashing and comparison with known signatures. Edit: I just had a look at GameCheat. It's a really, really, nasty program. I'd never allow it to be installed on any of my machines.... Anyway, it apparently works in a similar manner to a rootkit which makes it a pain in the ass to work around on windows. I'd try running the program under wine on linux or mac and working with your cheat down in the wine layer. No point in fighting with something evil like that when you can just ignore it. 
&gt; It's not clear to me that there are any actual units that are distinguished by upper vs. lower case, so it's a bit of a drag. Captain Obvious would kindly draw your attention to bits vs. Bytes 
But glfw is a context creation library.
I used pyglet for practice in making a graphical game (some tiled roguelike). After a while, i discovered pyglet being 'dead', so i switched to PyQt, and, eventually, [PySide](http://qt-project.org/wiki/PySide). While porting my game, i noticed that many functions which I wrote in pyglet are no longer needed, because Qt already does it for me. For example: you create a scene, a view for it, declare some class for your graphical object (which inherits built-in graphical item class), assign a picture for it, modify some item flags, populate the scene and boom! You already have a white plane with your objects, which you can move by dragging, select and multi-select with mouse. Reimplement keypress events with basic if event.key() == Qt.Key_Up: self.moveBy(0,-10) elif event.key() == Qt.Key_Down: self.moveBy(0,10) ..etc, and your object moves around the scene. Also, as far as I know, if you're concerned about performance, every piece of code that calls Qt functions is as fast as C++ Qt, only python portions of code can slow you down, which, of course, can be optimized. Haven't tried it for 3D yet, but even 2D can be sped up by using built-in opengl api. Can't recommend PySide enough. You can use it for both free and commercial applications (LGLP) and it has very good documentation already converted for python. Can't understand why it's not popular for gamedev, though.
PySide (like all software) also has licensing requirements. http://qt-project.org/wiki/About-PySide https://github.com/PySide/PySide/blob/master/COPYING 
You're right on the iteration thing, not sure what I was thinking there. Regarding the potential Python 4 problem: You are right this code might not work on Python 4 but chances are it will or it will break entirely, just like every other piece of Python code that doesn't check on sys.version_info but simply expects certain stdlib modules, builtins, etc. to exist, thereby implicitly assuming a specific version. The solution to this problem is not to make the code break on purpose but to add unittests, that make it possible to verify that the code works. This has the additional advantage of allowing others (and at that point also myself) to use the code in the future, without forcing them to read, understand and change the code. Especially the latter is important because it's generally much easier to merely understand what something does and how to use it as opposed to understand how it works, meaning that not every user will necessarily be capable of making it work in the future.
I'm not sure how long the OP has been coding for but I do remember having the same thoughts when I was first writing some VB.Net stuff many moons ago (I'm a hobbiest coder/full time sysadmin). This attitude will soon change; it will be when you go back to this code in 6 months time and have to spend as much time as it took to write picking it all apart again to work out what all the variables mean. There are some guidelines on function/class/variable naming - embrace it, it will make your life easier! 
Nothing beat ipython
there is a python wrapper for sfml and sfml is a pretty awesome library, use that :D
Writing useful variable names helps you when you're writing the code itself, you don't even need to wait six months for it to help you.
Pygame is still good. It's basic enough that it mostly allows you to do you own thing. PySDL2 is out, but it still lacks functionality compared to Pygame. Though I wish Pygame 2 would be a thing, using SDL2 instead of 1 and adding a few more things to it like Xcode conversion. It already has a package for Android.
Why did you end up with PySide over PyQt?
&gt; sprite objects, and tile maps, and animation systems, and... You're absoultely right, these things are not in core Kivy, and I don't want to pretend otherwise. I had in mind the kinds of simple game that don't need these things. For the game stuff, I had in mind the kivent engine linked by someone else, which tackles some of these features. I'll stress it's a work in progress and not in core kivy, but it's a more recent development along game lines.
I like bpython, simple and powerful at the same time.
After I wrote my first web app in flask I made a note to myself to write the web apps in django next time. That being said, it is a good stepping stone. I would suggest you start with one app in Flask and move up from there. I guess it would be like learning how to do recursive functions before learning how to do normal functions in Python. That of course is just my opinion. Good luck and remember to share what you made!
Also: does PySide support Qt 5?
I have to say, one of the most annoying slideshow browsing experiences I've ever had. And I've been in a lot of meetings.
Just to add to this, the arms race between cheatdev's and anti-cheat specializing engineers is fairly insane. Specifically Valve's VAC system uses/used a DNS hashing system to positively fingerprint specific types of attacks ( or atleast try and sniff out new ones from the same cheatdev makers via their DRM servers [ furthermore, cheatdev's use DRM safeguards in their own hack scripts which should point out the competitiveness of this business]). 
I'm making a game in PyGI/Gtk3... extremely slowly. I have no idea what is the difference between how I'm doing things and pygame or pyglet.
PyGame has not had [a new release since 2009](http://www.pygame.org/download.shtml). It's really quite shameful.
Is... is that good? 
Nope sorry, this is all picked up from sitting in IRC channels and reading the public bits of forums. It's an extremely poorly documented area. Most of what I know has been from playing around inside other program's processes and a prodigious amount of googling.
If somebody would clone the love2d api for python, I would be so happy.
Aawww... Thanks for the insights anyway. I know that one redditor is would working on a cool game hacking book, planned for mid 2015. 
Is PySFML any good? I am currently using Pygame, which is based on SDL, and SFML claims to be an object oriented alternative to SDL.
Have you looked at VPython?
Check out [pudb](https://pypi.python.org/pypi/pudb), if you haven't already. One of the many nice features is that you can choose which shell it'll drop you into (e.g. iPython, bpython).
I have not seen much cocos2d development in ages (website appears to be down for me)
&gt; I've come to the conclusion that the only way to do it properly is behaviour based detection done on the server side, anything done on the client side can and will be circumvented. A while back I started mentally prototyping a couple network centric game ideas and when I started mocking idea's out, the biggest problem I found with trying to do server side detection was when I started having to duplicate game logic for the client presentation/state and the server side sanity checker. Client side takes user/network events and outputs a result, server side does almost the reverse by taking the result and verifying it was possible. For example - Client holds up key for 5 seconds, each second moving N elements so that they're not at x2,y2. Server side knew the player was located x1,y1 @ T1 seconds ago and is now at x2,y2 @ T2 and can only move an absolute distance per second. So naive approach would be to get the translation distance and see if its equal or less than max ( never mind the problem of the client rapidly traveling between those two points ). Now the internet isn't 100% perfectly reliable ( especially streaming constant state update reports back/forth ) so what if the last 6 seconds of time events were lost and now the client has jumped in distance from its last reported position and its greater then the server believes possible? One solution to this would be to put more authority on the server side. Instead of the client moving itself and making reports back home, the client would ask to move and the server would say yes/no and how far it is now. Suddenly game play is bound to network reliability and it would feel like playing the original pioneer internet games ( with the dramatic game universe shifts, stutters, or truly odd surprise teleportation incidents ). This is only for moving an avatar forward, never mind games with absolute ammunition counts ( does the client ask to shoot each time? ) or even more complex behavior ( setting an in game entity with a timer and its own complex attributes/behavior ). Keep in mind I very briefly worked in the game dev industry almost 14-15 years ago ( it wasn't for me ) so its very likely some professional gamedev has created a design/system to provide server side anti-cheat with client-side authority and I am just not informed/educated enough to be aware of such a discovery.
I agree with you, this shit gave me headache.
Look into cheatengine. Very rudimentary game cheats are simply a parasite process/thread modifying a game processes memory ( Memory location A123 == (integer) 45, A123 is the player avatars current level. Parasite goes in and sets A123 to == 0xFFFF, next game loop cycle the player is now maximum level. ) Slightly more complex are ones that hook into the rendering library to constantly update memory locations ( say player health, their ammunition counts, money, etc). /u/sigma914 gave two pretty good examples - &gt; Functions like DirectX's EndScene or opengl's glx_swapbuffers are common targets for this kind of thing. I used to do something similar to a certain online service named after a continent to much comedic effect. That mechanism used a mechanism called "process subclassing" to intercept another running process's event messages ( basically handing the keys to the kingdom of a windows application ). Best bet to find real information is to start doing research/keyword searches like "edit memory of another process" is a good start.
Couldn't agree more but I think it takes an 'Oh fiddle-sticks!' moment to realise just how useful a working practise it is.
If it's not broken...
There are some other good options in here, but why let being "not very Pythonic" stop you in regards to Pygame? It's a mature library, has a helpful community last time I interacted with it, and you seem to already have an example of using it doing something similar to what you want to do. Seriously, why look further? Don't get me wrong, I understand the value of evaluating the alternatives; but that won't actually solve your problem. Edit: I see you're already posting to the pygame reddit. Good on you.
Thanks! I'll look into that.
Oh yeh, it's a hard problem, which is why it's not done that way. The logical extreme is that everyone is playing through a thin client and the game is all hosted on the server, the only thing the client does is forward input, which allows the server to tightly control what the client can do. This still doesn't stop scripting/botting/automation of course, but thats always going to be an exercise in frustration anyway. You essentially end up with the server performing a turing test on every connected client. How you decide whether the thing that's talking to you is a bot or a person who has really tight muscle memory is beyond me. Moral of the story, game devs can't win, all they can try is to make the effort required prohibitive, which actually encourages some people...
My guess is that the file you are reading is not actually utf-8
&gt; i'm not a big fan of easy to understand variable names Are you planning on taking part in an obfuscated code contest? For example, you have `hnt`, `hin`, and `hints` in your code. Why is the list of hints called `hnt`, but the file `hints`? How is anyone supposed to tell the semantic difference between `hnt` and `hin`? What's the point of abbreviating a four-letter word to three letters anyways? 
&gt; i'm not a big fan of easy to understand variable names and yet you come here for help. do you honestly think anybody here thinks your problem is interesting enough for them to spend their valuable time "reverse engineering" your code? You seem new to programming so here's some advice: If you want help with something then play by the rules (naming conventions, pep8 etc). The community is helping you because they're nice - not because they have nothing better to do. Don't abuse their niceness. /rant 
I really like Panda3d.
same here! ...I'd already programmed in other languages though
Shameful is much too strong a word. PyGame was based on SDL which didn't have a new release for about a decade.
As a beginning programmer who has made multiple projects in pygame and used PGS4A to get them to my phone... I have to say that kivy feels way less "pythonic' than pygame. But maybe I don't know what pythonic means. But kivy just sucks all of the fun out of programming for me. 
Wrong. Latest version from 2013-10-28. https://bitbucket.org/pygame/pygame/downloads
Thanks!
Thanks!
What are you using for SSH on android?
&gt;Fourthish (is that a thing?) It's "fourthly", but usually things longer than 3 just don't sound right using a "-ly". I'd just use first, second, third, fourth, and last (finally is ok, depends on what sounds better) since that's how you started I wouldn't have changed half way through. 
This is even less pythonic than pygame. :P Not that pygame is particularly unpythonic.
It's actively developed, so what does it matter if it hasn't had a release? There will be a release when it is appropriate. It isn't dead, which is good enough for me.
[Anaconda](http://continuum.io/downloads)
Juice SSH, and use pubkey authentication (you have to generate a key off-device, and import it).
&gt; Learning Python through Django is like learning PHP through wordpress Ooooooohhhhhhhh! Touche!
There's no such practical thing as a commercial open source project. Also, an application can be proprietary just by not releasing it - but in that circumstance since there's no distribution there's no GPL violation so PyQT can still be used.
Very helpful and informative post. And a nice way to introduce a new project. Can't wait to try mistune
Good point, i completely forgot about IE!
Yeah I agree that part needs to be changed. Do you have any tips on how to parse string data from csvs and allocate to the correct mysql field? Like how would you do it with your zip code example?
The versions newer than 1.9.1 are Alpha or Preview versions. If they are stable, they should update the website to point there.
That didn't work for me when I was trying to install packages with pip during this outage.
Five years a looong time between releases of a package as widely used as PyGame.
It matters because judging by the website it is a dead project. I've been installing from source for over a year to get bug fixes and Python3 support.
I dont mind someone promoting their product. Everything here is high quality, regardless of who posted and why. If it isn't it will get downvoted.
Typically your schemas are going to be defined beforehand if you are working with important data. Storage types are usually a human decision rather than a programmatic one. Take a product id for example. The value could be 1001 (a valid int) but maybe you want to grab all product ids that start with '10'. This is a lot easier to do when the id is stored as a string. Unfortunately there is no reliable programmatic way to fix the zip code example, since there is no guarantee that your input data will have a zip with a leading zero. You would run into errors if you ever inserted a zip code with a leading zero after the table creation. Try taking a look at pandas [type inference](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.io.parsers.read_csv.html#pandas.io.parsers.read_csv) for csv files. I can't remember if they handle zip codes correctly or not. My guess would be that they do. 
I have a csv-&gt;sqllite2 database script in 55 lines of python. It's easier to work with sqllite2 memory DB's than it is to work with CSV files so I wort the script to quicken the workflow. 
[The Zen of Python](http://legacy.python.org/dev/peps/pep-0020/) Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!
What about Jira?
Not OP but for me it's the heavy insistence on the .kv language files.
[Pyglet's mailing list](https://groups.google.com/forum/#!forum/pyglet-users) is active. Most questions get a response within 24 hours.
Try it! One guy has built such an interesting puzzle to describe the Periodic Table of elements through the code. It was really cool
It's not like people aren't gonna notice when someone is blatantly promoting some product.
Yeah, pygame would definitely be the better way to go for display. Here's how the fft gives us what we need: The game grid is encoded as a simple `m` by `n` array (default 100x100 in the code) of zeros and ones. In game of life, a state transition is determined for each pixel by looking at the 8 pixel values all around it, and counting how many of them are "alive", then applying some rules based that number. Since the "alive" or "dead" states are just encoded as 1 or 0, this is equivalent to summing up the values of all 8 neighbors. If you want to do this for all pixels in a single shot, this is equivalent to computing the [2D convolution](http://en.wikipedia.org/wiki/Convolution) between the game state array and the matrix [[1,1,1],[1,0,1],[1,1,1]]. Convolution is an operation that basically applies that matrix as a "stencil" at every position around the game grid array, and sums up the values according to the values in that stencil. And convolution can be very efficiently computed using the FFT, thanks to the [Fourier Convolution Theorem](http://en.wikipedia.org/wiki/Convolution_theorem). So a couple of logical steps between what we need and how we implement it, but in the end the code ends up being pretty dead simple. Scipy actually has an fft-based convolution function now, but I still prefer to roll my own, so that I can tweak certain things.
What I linked is what they link in the mailing list.
Can you say a bit more than "didn't work" - what were you using to as a static mirror ? In case it helps there's a page of options [here](http://bitofcheese.blogspot.co.nz/2013/05/local-pypi-options.html) (a page I've just realised was written by /u/r1chardj0n3s ;-). [This page](http://jacobian.org/writing/when-pypi-goes-down/) about using the currently provided mirrors is also of interest.
Ok, thank you very much for taking the time to answer this. Now I know what I am reading tonight. That's a really cool trick. 
How do you draw the line though? I can't see a quantative measure to use. Maybe there are some people who are just trying to share their knowledge with a community, who would be incredibly discouraged by simply having their posts removed by mods. I think currently the best way to deal with it is to simply downvote articles you feel are completely unhelpful. That way the community decides. Basically, until the situation changes a lot, I think harsh moderation has much more potential for harm than good. The 'blogspam' article on your link is already on 0 votes, so I'm not sure of the problem...
Interesting...you know they are totally optional, right? You can do everything in pure python if you want, and the interface is fine - it's something you have to use even with .kv files, if you want dynamic behaviour that kv does not cover, so it still gets developer attention. That said, the documentation tends to include or focus on kv, mostly because the developers/doc writers think it makes things a great deal easier, and new users are generally recommended to use it (many questions are from people making their lives harder by avoiding it for whatever reason). I understand that if you don't like it for some reason, this would be undesirable.
it *is* something quite valuable but the project is not very well managed and there is not enough developer to push it forward. So in a word : good but very static.
Hmm, haven't seen this before. Thanks. Been using python on a couple new projects and it's been incredibly fun. I'd never worked with the language before and coming from deep C, Java and MATLAB/Octave, it's been a strange adventure. Most of these rules seem very good for all programming, though the execution of them is definitely different.
SSE is new to me. Thanks for posting it. 
You cover everything in your post so there's not much for me to reply to- I am aware that it's optional but like you said, the documentation has a tendency to only include the kv way of doing things. This makes it frustrating to purposely avoid it.
See http://developerblog.redhat.com/2014/02/27/using-pythons-virtualenv-with-rhscl/
I don't have first hand experience, but `gcov` supports C++, so it should work.
FYI, No Starch Press books are distributed by O'Reilly, so I imagine a DRM-free ebook version will be available from them also. Of course, buying directly from Jeff will be the best way to directly support the author :) (not an O'reilly Shill, I just like their books and own quite a few. NSP aren't bad either)
try `import this`
My experience was nice: it requires Flash, so not for mobile. 
hmmm thank you, i think there's enough code going on here too. I was surprised when ive seen that post because i rarely check java and i was used to code in backticks. Much better than how code looks here
&gt;Server side knew the player was located x1,y1 @ T1 seconds ago and is now at x2,y2 @ T2 and can only move an absolute distance per second. No, the client should never tell the server where it thinks it is. The client should ask for that information. The client is merely in charge of representing what the server does. All game interactions occur on the server. &gt;Now the internet isn't 100% perfectly reliable ( especially streaming constant state update reports back/forth ) so what if the last 6 seconds of time events were lost and now the client has jumped in distance from its last reported position and its greater then the server believes possible? Then you disconnect them and force them to log back in. Get a better internet connection. &gt;the client would ask to move and the server would say ~~yes/~~no ~~and~~ or how far it is now. Yes, like that. &gt;Keep in mind I ... Never. I'm ignoring that paragraph!
As southof40 requests, it'd be very useful to know what you attempted and what happened, as the static mirror fallback should be seamless for all users when the full site goes away. That way we can fix it :)
I'd never heard of it before, but Wikipedia says its license is "Proprietary, free for use by official non-profit organizations, charities, and open-source projects, but not religious organizations". So if you're saying that it's possible to be proprietary and free-as-in-beer, you're correct.
I'm more presenting it as an example of a successful, commercial, open source project. From the wiki: "For academic and commercial customers, the full source code is available under a developer source license."
OT. Is there a color scheme or theme for SublimeText that looks like that? I like the stripped background color. It makes it easier to read the code.
Surely that breaks: "Special cases aren't special enough to break the rules." ;)
Exactly. Check out the person submitting the bad example here. Over 50% of his submissions are spam for that product and they're almost all buried in downvotes.
I'd want: Easy MVC, with less verbose primitives (unlike Django): Ways to sync the state in real time, with part of it cached in the browser (with room for permissions and accounts) Easy ways to create and update HTML UI elements from synced state Not having to use append a bunch just to create HTML elements! Having the browser end reload when the code is changed Being able to use existing Javascript libraries nicely with Python would be good Ideally, post PRISM, the ability to use a distributed / federated state sync (perhaps with something similar to google-diff-match-patch or ShareJS). Tornado can help a lot.
If you want to make up a thread calling out a problem on a subreddit perhaps you should put in more than two examples worth of effort. Your negative example is buried in downvotes, as are most of the other threads for the same product posted by that account.
pretty sad that something as useful as pubnub gets downvoted and called spam when there's so much other shit polluting this sub. the newb questions bother me more than anything else. But I downvote accordingly to get them out of my sight. Thats how it works here. 
Sorry. I tried: pip install python-memcached I can't remember the exact error message it returned, but it was something indicative of not being able to contact the server. I was inside a virtualenv and I've never made any changes to standard pip config. EDIT: Found the error. It was: ProtocolError: &lt;ProtocolError for pypi.python.org/pypi: 503 No healthy back ends&gt;
Yup. Here's a snippet from the class I've built. I've sanitized it, because the project is huge - so this won't (probably) actually run directly, but you can get the gist of it from here. class soapservice(object): def __init__(self,config): #config is a dict I pass the configuration with. #ioloop self.ioloop=tornado.ioloop.IOLoop.instance() #set up SUDS like you would normally- except... wsdl=config["wsdl"] cache_dir=config["wsdl_cache_location"] wsdlcache=ObjectCache() wsdlcache.setduration(days=1) wsdlcache.setlocation(cache_dir) self.soap_user=config["soap_user"] self.soap_password=base64.b64decode(config["soap_password"]) authString=base64.encodestring('%s:%s' % (self.soap_user, self.soap_password)).replace('\n', '') authHeader = { "SOAPAction" : "ActionName","Authorization" : "Basic %s" % authString } self.soap_client=soap_client(wsdl, headers=authHeader, cache=wsdlcache) #... we're going to add the nosend option. This will prevent suds from actually sending the request. self.soap_client.set_options(nosend=True) AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient") self.http_client=AsyncHTTPClient(io_loop=self.ioloop, max_clients=config["maximum_outbound_connections"]) def call_some_random_soap_service(self, soap_parameter): request_context=self.soap_client.service.someRandomSoapCall(soap_parameter) url=request_context.client.client.wsdl.url headers=request_context.client.headers() message=str(request_context.envelope) ############################################# ##Callback is 'self.on_soap_complete' ##we need to combine the call with request_context object ############################################# callback=functools.partial(self.on_soap_complete, request_context) self.http_client.fetch(url, auth_username=soap_user, auth_password=soap_password, headers=headers, method="POST", body=message, callback=callback ) def on_soap_complete(self, request_context, response): ############################################# ##retrieve the results from the soap call ##by passing back response.body to the request_context ##object ############################################# if response.code==200: result=request_context.process_reply(response.body) code=result[0] body=result[1] Don't use suds .4 - you need to update to a newer fork. I'm using suds-jurko .6. For some reason nosend was omitted from .4 So- what we're doing, in a nutshell- is letting suds be suds so we can call the 'method'(s) it creates. Except since 'nosend' was optioned in, it won't actually make the request - instead it builds the envelope and returns it to us as part of the request_context object. We use THAT - request_context.envelope - as the body to our asynchronous POST. We need the request_context to DECODE the xml too- so we use functools.partial to combine the callback method with the request_context and pass THAT to the http_client.fetch call as the callback. This is how I get the request_context + the response into the callback itself. Once it's there, I do some checking and then take the response.body and process it through the request_context object's process_reply method. It returns a tuple that you can do whatever with. Personally, I dictify it with this method I stole from the internet. def suds_to_dict(self,d): """Convert Suds object into serializable format.""" out = {} for k, v in asdict(d).iteritems(): if hasattr(v, '__keylist__'): out[k] = toDict(v) elif isinstance(v, list): out[k] = [] for item in v: if hasattr(item, '__keylist__'): out[k].append(self.suds_to_dict(item)) else: out[k].append(item) else: out[k] = v return out (Sorry to whomever I culled this from, I've since lost the bookmark). 
Yeah, I think this would be a good idea here. There's plenty of code on this subreddit. 
To be totally honest I find that color scheme quite ugly. It would be nice to get some code coloring or something but IMO copying /r/java's style is a bad idea.
I really like CheckiO. I did the Python Code Academy course then moved on to CheckiO to put into practise before starting my own project. It's nice seeing how others solved a problem. 
Thank you for sharing your code and helping me with 2D convolutions. I had read about the convolution function in college. But I didn't know about this application. I just read about convolution kernals and image processing, which is very similar to what you are doing here. Incredible trick. Thanks again.
The "how do I do X" questions are pretty annoying. I agree. They should be on stackoverflow.
Oddly, the "great and informative blog post" got a load of positive comments. 
I'm not sure that is what I would call blog spam...
You need to use a GUI library like Tkinter or PyQt for that.
THANK YOU!! This is what I was looking for \^___^
Fantastic, two of my favorite pythonistas! Will definitely listen to this as soon as I can. EDIT: Listened to it, really enjoyed. I loved the bit where you judged each other's opinions. My only criticism would be to separate the music from the speech. I liked the intro and outro, but maybe not over the relevant bits of the podcast? Perhaps pick out some off topic discussion that might otherwise be cut or just use the music while you "sign off" so to speak. Really enjoyed it, keep up the great work! Another edit: Downvotes for constructive criticism, speaking of toxic communities.
Hi everyone! I'm the developer of KivEnt (and I was recently made a core dev of kivy itself) Ya'll doubled my github traffic for the year so I figured I had to hunt down who was linking to me. I just wanted to drop by and mention that while it is not ready for prime time just yet, I am hoping to have an official release for KivEnt before this summer. There are still some areas where I plan on making major changes so I wouldn't recommend counting on the library just yet. Performance over the last 2 months has been increased by around 4-10x and the engine can maintain 60 fps on a Tegra2 device up until the point where we're creating about 250+ physics objects a second and have several hundred more in simulation. **My testing prototype can be found [here](https://dl.dropboxusercontent.com/u/56336656/YACSTestPilot-1.2.0-debug.apk) if anyone would like to see the engine in action without going through the build process.** Kivy's framework for representing UI elements, particularly the kv language is well suited and specially designed for describing interactive ui widgets, but not so good for the type of constantly updating rendering you expect out of games. The main goal of KivEnt is to provide a set of renderers that allow all objects to be batched into a handful of draw calls while interfacing with the various possible representations of sprites (such as integrating with cymunk for position/rotation info), and provide a clean kivy-style integration with kivy uis. I am also the primary guy behind [Particle Panda](https://play.google.com/store/apps/details?id=org.cbl.particlepanda&amp;hl=en) and I'm really interested in creating development tools that function on Android and with touch screens in general, so KivEnt has really been designed with the idea of having an almost unity like potential for live editing and so on right there on an android device. If I'm still doing this in a decade, I hope to have a whole stable of tools for content creation in addition to the engine itself. The hope is to provide pretty much everything you would need to produce simple 2d games (particularly retro ones as pixel art and 16 bit music is my current fascination, I do not currently have any vector art support in the engine.) Kivy really has an amazingly easy to use GL binding that makes it really simple to set up more complciated than stock shaders and do a lot more than the framework lets on. The problem is this section is not yet documented, and I've mainly been muddling through things as I build KivEnt. If anyone has any comments or questions I'm interested in hearing things. **Oh also, if any of you did check it out things were totally broken as of a few hours ago so way sorry for the frustration, I've been throwing shit around breaking things in my quest for performance** 
exactly, at least there, then there is some upside for answering the damn thing. problem is they would be voted down quicker than hell on SO, where as here they linger on the front page. 
Not sure what platform you're on, but I had trouble installing IPython on Windows and `easy_install IPython[all]` ended up working out.
Why does the frequency of use dictate the frequency of release? If the package is stable, and the underlying tech is stable, there's no need to change anything.
here's the pdf version. https://www.dropbox.com/s/3hihhomibh1i3ue/hgtap.pdf
It's a low level binding of a C library. Its not intended to by 'pythonic' and neither should it try. You're always better off letting people build different pythony apis from the C bindings; not trying to abstract away the 'c layer' into some arbitrary wrapper API. At least you know, you can build it and install it with pip, and run it stand alone with local SDL libraries (eg. in app/dlls) without a system wide install (which is great for distributing apps, unlike some things &gt;_&gt; pygame, which isn't even pip friendly).
Particularly the pySDL2 wrapper is a direct C binding. eg. You literally have to release memory segments when you're done with them, which is the kind of low level detail that most python code tries to avoid, and why many things come as python extensions (using cython for example) rather than ctypes bindings. ...but obviously python modules aren't portable, terrible for distributing code, etc. etc. 
Its worth noting that if you're actually serious about game development, you should bother to learn the .kv file stuff. I realize it feels clucky and do-not-want, but there *is* a reason for it. When you have a team of people working on something, and one of them is designer who needs to tweak the layout and UI code *without breaking your game code*, the kv files are actually really useful. It's entirely possible to avoid using them, but long term you'll probably find that it's a mistake to do so. (on the other hand, if you're just one person hacking away at something, fair enough; just realize you're accumulating technical debt if you ever expect to expand what you're working on to multiple people)
Thanks! That's the first decent, let alone actually really good, reason I've seen for kv. I mostly do PyQt now, my Kivy days were self projects.
I liked it too. I look forward to more. (Except the piano at the end was a bit over the top for me and I also feel really guilty including any kind of critical comments.) Good work and please do more.
This is indeed good news! :D
I don't think it looks better at all. I think the line numbers are nearly always unnecessary -- this isn't BASIC c.1975 -- and the alternating colours for the lines is rubbish. Alternating line colours is helpful when you have a really wide field formatting in columns, with vast amounts of empty space between the columns. Like this but even further apart: Column 1 Column 2 Column 3 stuff goes here and here and here But for code, it's just a distraction.
So I'm listening to lots of programming podcasts and this one is better than most. Firstly, it is really well produced. Not the Skype call audio quality that you get on lot's of podcasts. It's really helping that they seem to be in the same room. On other podcasts, people are interrupting each other because of VoIP delay. Also, these guys have no awkward speaking habits or heavy accents and are generally fun to listen to. (which sadly is not the case in all programming podcasts)
As a matter of fact, we weren't in the same room. We were on Skype, but we also turned video on to make it easier to read the other person, and Kenneth loves doing audio editing, so he cut the really bad parts.
Line numbers are useful for referencing a section of code without having to copy+paste. 
Although I know that a HTTP 503 error in general means that a resource is down, I have no idea how that relates to what you're doing.
Well I know that its "down", but after some searching: google blocks autmoatic queuries like what i'm doing.
Sometime sites will deny requests that have certain headers. I know the network library for Python can sometime cause this issue. Try setting the headers manually to a known functional browser and see if that fixes the issue. 
Yea, if you figure out a solution to this problem, you could create the most awesome online community ever. 
 Congrats on a great show.
You should not even try to do this. It's a misuse of Google's service, it wasteful, inefficient for the user, and for Google as well. You have basically created a DDoS attack against Google. It's not "nice". Don't do it. You should try to search for another spell checking solution, for example [ispell](http://www.gnu.org/software/ispell/ispell.html). Edit: I've found something that looks even better: http://pythonhosted.org/pyenchant/api/enchant.html
"import this" is handled differently from all other instances of "import STRING" where it exclusively brings in the namespace (and, I believe, 'executes' first any code outside the \_\_name\_\_==\_\_main\_\_). In "import this", I'd expect either a recursive namespace loop resulting in error, an error from "*this* not found" or a catch to prevent multiple parses of the same file. I believe the first two are preferable as the last may interfere with intentional duplicate parse steps.
Interesting. I'd mentioned I'm really used to down and dirty C, so the *low level detail* has always been a part of the routine. It does makes sense that it is not ideal for python though &gt; ...but obviously python modules aren't portable, terrible for distributing code, etc. etc. While using python to write 'distributing code' was a wash, writing it for 'distributed code' has worked out really well for me.
Nonsense. All that color is just noise and is distracting. Syntax highlighting would be nice, but off the top of my head at 2:30 AM, that doesn't seem possible via css and html. The line number block is ridiculously distracting in the java subreddit. They ought to fix that.
Thanks for the info; hopefully we can figure out what might have happened and see about making it not happen next time!
Thanks :)
+1000
I agree that someone should work on some custom CSS for /r/Python. /r/learnpython has a decent code stylesheet.
For some reason I expected a podcast about or at least related to Python. Let's see how episode 2 goes then.
I preferred it this way. There are plenty of domain-specific podcasts. It's good to hear a more general podcast. Philosophically, you can definitely hear the python from the two developers and I like that but there's not much difference between the main dynamic languages (Python, Ruby, JS), it's mainly syntax and philosophy and I don't want a podcast about syntax.
I don't mind listening to a podcast that's not focussed on a particular language, but posting this to /r/python raises some expectations. I don't want to listen to a podcast about syntax either, and I don't know of any that actually talk about syntax. But I'd like to learn about new libraries or listen to a comparison of libraries for similar tasks, i. e. RESTful API's for Django or Flask. I don't want this for the hundreds of programming languages that exist, but for the ones I'm using, Python in this particular case.
Try Mutagen instead of eyeD3 for the ID3 tags - might be a little more robust depending on what you're trying to do.
I have windows and only want the Qt console. Not all the extra stuff from Canopy or Anaconda
Thanks, we'll give that a bash.
&gt; There are plenty of domain-specific podcasts. For Python? What are they? I miss Larry Hastings' Radio Free Python - they were podcasts about Python which were interesting, informative, fun and (except occasionally) not about syntax. 
&gt;JavaScript is disabled &gt;You need to enable JavaScript to use SoundCloud This is not okay...
I would recommend "learn python the hard way" it's not actually hard and explains the basics of python. If you just search it on google it should be one of the first results.
According to the website, the last stable release was 4 years ago and the last alpha release was 2 years ago. The hg repo still has activity but it doesn't seem like anyone has cared enough to roll up the tree in the last 2 years to do another alpha release. It might not be "dead" but it's moving which such a slow velocity that the OPs question is pretty valid.
There's a lot of different resources out there. Learn Python the Hard Way is decent enough, throws you in head first, but gives you chances to learn and explain how things work. There's also codecademy.com which is usually fairly comprehensive. If you want some real life problems to develop solutions to, you can hit up project euler. http://learnpythonthehardway.org/book/ http://www.codecademy.com/tracks/python https://projecteuler.net/
Probably not. But I'd wager that 99% of the websites on the planet could have been built by people who only knew the most basic jquery, how to read docs, and how to copypaste. &gt; Copy-paste "web developers", huh? Read again, I called them "website builders".
You could try [requests](http://www.python-requests.org/en/latest/) and [Beautiful Soup](http://www.crummy.com/software/BeautifulSoup/). They are both easy to use and have nice documentation. If you are new to python head to /r/learnpython and check out the sidebar.
Udacity.com they have a cs 101 course that focuses on developing a web crawler in python. 
Is there a reason you're using a combination of `$HOMEDIR` and `~`? Just use `$HOME` if you want to be cross-platform, it's automatically set.
I don't mind a "degraded" JS-less experience, but not degrading gracefully is not okay. I don't want fancy media players on webpages, I want to play media in the media player of my choice. Why can't I get the link to the MP3 without JavaScript? There's no sane reason for that. It is a shame what the web has become. Luckily, there's an RSS feed, so I don't have to go to that awful page again.
As everybody else is going to say, learn Python the hard way is the industry standard in learning Python. Personally I did a bunch of youtube tutorials first, and once I started with LPTHW I was already familiar with most of the simple concepts. Youtube tutorials are great in the beginning because you get a direct explanation on every small concept, but you should always type along, as you will never learn anything by just looking. However as you get further into it, youtube tutorials will quickly become boring to you, which is why most people prefer written tutorials. 
Having a problem to solve definitely helps. Project Euler is a nice way to get some before you start solving your own.
**Obligatory disclaimer for OP:** Project Euler is at least an intermediate site. You should not go there if you don't understand the most basic things. Also, it's very math intensive. Programming in itself is math throughout but Euler is more about finding algorithms than solving problems with Python. One could certainly make the argument that solving an algorithm and solving programming problems exercises the same critical thinking skills, but Euler is heavy on the algorithms side. Once you get a couple in it becomes quite a study into mathematics and less of a study about Python. Just my opinion, obviously. Your mileage my vary. I've been in your shoes, though, and Euler was of little use in learning the basics.
To echo the other posts, Codecademy and LPTHW are great choices. I like Codecademy's approach to teaching and practice better, but LPTHW might help make you more comfortable with coding from a terminal rather than an IDE.
Generally you can get pretty well a long with lxml and requests. Find something simple to scrape and get learn to use xpaths and css selectors. Read the docs for lxml and requests, you should be able to scrape a single page within an hour or two. Chrome's "Inspect Element" / Developer Tools can help you isolate xpaths and you can watch http requests in the network panel. Once you got a bit of background with that try out the Scrapy module. There is also Selenium with PhantomJS as well as the less well maintained PhantomPy
It's not incredibly easy to get going with, but it's made for exactly this purpose: [scrapy](http://scrapy.org/)
The [mechanize manual](http://wwwsearch.sourceforge.net/mechanize/).
Check out also khan academy , there is a section for Python witch I really enjoy.Of course you should definitely check out codeacademy etc. Learning programming can be very intimidating at the beginning. But once you understand the basics and you add a little bit more every day you'll enjoy it. After you learn the basics you should check out coursera.org and edx.org for more advanced courses on programming with python.
This book is particularly effective with people who are starting from zero because you're writing code *immediately* and seeing it work (don't worry, the book will tell you what to write and show you how it works). The point is that there's no 45 page intro trying to introduce you to the concepts of computer programming. It's just: bam, you're writing code.
The problem is there is a bubble of startup fueled by incubators such as YC. If you look closely it looks like the new startup wave is like a gold rush: a lot of softwares come to the market with the purpose of helping startup make money (GUI, data analysis, ...). In this weired gold rush every gold digger is trying to sell tools, donkey, or whatever to his neighbours also digging gold. But no one actually dig for gold. They just sell the tools for digging gold. The blog are a side effect. There is a crisis and developers are notoriously overpaid. So people make blogs on "oh I discover curly braces in C!" to try to get spotted. Just wait for the 2007 crisis to finally come to an end, and it will cleanse the air. The more blogspam you see, the worst the economy is doing. 
Well true, It would be a Dos attack not really DDOS though. The solutions you recommended help solve the case for normal words, however dictionaries like those can't spell check proper nouns. 
I would recommend to learn about the basics of computer programming. Not python or any other language but the basics of how computers do computation and how to write pseudo-code and flowchart to solve a problem. That will help set your mind to solving problems with any language. 
Udacity's Into CS course is Python.
This is how I learned. It's excellent. Great mix of concept and practice and repetition.
Learning scrapy doesn't take *that* long. I highly recommend it.
Beautiful Soup is *sooo* two thousand and four. Just use scrapy and xpath/css selectors.
~ ~first things first~ ~ . start from the beginning: Boolean Logic &amp; math . then go with a "functional language" like C (not C++) . then an object-oriented language (C++/etc..) . then go to an interpreter language( python the hard way)
Yeah, it has some interesting problems with the reward being solving the puzzle itself. The problems have basically zero relevance to much of what a new programmer would want to do, and it's much more about maths than programming. 
This depends on how serious you are about web scraping. For example, I first learned about web scraping when I was in a Russian class and the instructor had something like 500 of these 10 second audio clips individually listed on his website. I was able to get these fairly quickly by importing 're' and 'urllib.request' in python3. If you're hoping to build a tool that is general purpose and can be re-used I would go with looking up mechanize, Beautiful Soup, Scrapy etc. and going with whichever one has features that most closely support what you want to do.
The problems are designed to be solved with programming, though, and in the first 50 there are many that can be solved with only very basic constructs. For example, problem 1 asks for the sum of all multiples of 3 or 5 below 1000. To solve it, you need to learn about divisibility, but more importantly, you need to learn about loops and a basic design pattern to keep state between iterations of a loop. Project Euler is also good for learning to break apart a problem, solve individual components separately, and then stitch them together into a working solution. I know when I learn something new I often read an article or a chapter and walk through an example step by step, understanding each step, but I don't really GET it until I've modified it to solve a real problem. When you're starting out, it can be hard to find "real" problems that are at your skill level. I will concede, though, that if you're not math-minded it may be more intimidating than helpful...
Requests + PyQuery
Uh... I actually sort of doubt that most of the books on that website are free by permission of the authors or publishers.
Games, make some games, I have given this advice to many people and many people have come back to thank me. Even if you fully plan on making software that is completely different, make games to learn. In most programming courses they teach things horribly; they show you how to put things into arrays, doubly linked lists, and all kinds of other things that you will eventually need to learn but learning them on their own is just stupid. So make the crappiest game ever, make tick-tac-toe. Make guess a number. Make hangman. Make pac-man, make space invaders. I guarentee that what will happen is that you will take stupid approaches that do work but then you can go back and start studying how to do it "correctly" and you will go "aaaahhhhhh that is how I should have done that" Once you start going back and cringing at your old code then you know you are becoming a better programmer. Plus when you make a program that stores data in a cool binary tree your friends will yawn. But if you make a cruddy pac-man your friends will go, "Holy shit, you made that?" Oh and learn python, if programming is hard python is the easiest (and a damn good language) to learn these days. 
Thank you for the tips. I know it felt strange including the virtualenv and hard coding the shebangs. I was just trying to make it easier for some of the novice programmers to run locally. I will see if I can get a setup working instead. thanks.
I've been using aiohttp and beautifulsoup recently, and it's great. asyncio is not trivial at first, but becomes necessary if you want to scrape a lot of stuff in a short amount of time. aiohttp makes things a lot easier by providing an api that's very similar to requests. I think I'll document my results at some point.
please if you do, share the link
It's only relevant if you're scraping in high volume, where the async really makes a difference, as well as some of the other features. Otherwise, it's overkill. 
As an add-on question, I have to interact with a website that has these reports we need. I repeatedly have to right-click on a link which then causes a site-generated menu to pop up. From that, I have to select an option before I get to a new page where parameters are entered in "standard" web form entry elements and buttons. Does anyone have an idea how to interact with the web page, maybe simulating links, to get the site-based operations to work?
I've used it twice this week for different projects: it actually works even in 2014! (i.e. Beautifulsoup is fine and easy)
Wow, thank you all for all the responses. I have some reading to do based on the stuff you guys provided.
&gt; Scrapy is so incredibly overkill for what most people scrape. So is Bs4. I think a regular expression is enough for what "most people" scrape. Depends on the project, but most of the questions I've read related to scraping say something like "how do I get this price off this website?" *** Thank you to those that replied instead of downvoting because you disagree. I realize this subreddit isn't advertised as a learning resource but that doesn't mean we can't discuss different opinions on ways to do things. You can bet that I'm not the only person with this thought about using regex. If you really think it's so wrong then you shouldn't be hiding the comment so that those others, can read and consider your opinions as well.
Thanks for following up. Nice to be able to finally use a newer version of Python than the one that the RHEL system tools depend on without building my own. 
&gt;So is Bs4. I think a regular expression is enough for what "most people" scrape. Libraries are there to help you, I don't see how BS is overkill for finding a price on a website. Scrapy is a framework, which I would call overkill for the task. Scrapy is great, I just don't think that you need a framework for most scraping tasks.
Lots of good suggestions already, but sooner or later you're going to run into a site that requires Javascript and you might want to delve into [Selenium](http://docs.seleniumhq.org/docs/appendix_installing_python_driver_client.jsp). Basically, it lets you run a web browser (headless, in come cases) in remote control and scrape data from the pages.
Thank you so much. I was able to get my code working with your code as reference. 
usually there'll be a couple of pips for the various python versions on the system. Try pip3 or similar.
&gt;I think a regular expression is enough for what "most people" scrape. wut. no. All the possible attributes and nested tags and everything. I'm not big on regex in the first place, but thinking about using them to parse HTML just makes my head hurt. :|
Set up a virtual environment for your project (there's about three different ways to do it, they're not hard to find and use) with Python 3 and install your packages for that project in there. This'll help cut down on things like this.
I agree with all of this. The main problem why this doesn't work is that you are not pulling the value out of the list returned by the csv.reader, but I don't see why you are using a csv reader anyway. Also, throw the file reading stuff into a function so you don't repeat yourself.
Could you recommend a good tutorial on lxml? I like beautifulsoup a lot but was checking out lxml. The lxml site's tutorial is quite difficult for me to follow for some reason. BS4's tutorial is quite excellent. There doesn't seem to be a lot of search results for lxml.
Hi! I'm currently a developer at a AAA game studio. I've been writing python daily for the last 4 years as part of my job. I can relate to your situation, as my programming skills are all self-taught. * What did you use to learn? 1. Dive into Python - free online ebook 2. [Head First Python](http://www.headfirstlabs.com/books/hfpython/) 3. [Head First Design Patterns](http://www.headfirstlabs.com/books/hfdp/) 4. [Sublime Text](http://www.sublimetext.com/) - slick text editor with syntax highlighting * What do you recommend I do to learn it? What helped me move forward was having a practical problem that I needed to solve with code. Suddenly, it becomes less about "learning python" and more about "solving this problem." Also, it is really easy to get caught up in "doing it right." The truth is, your going to write bad code for awhile, but that's OK! If you have an implementation that solves a given problem, you've done your job. As your skills grow, you'll have more tools and techniques at your disposal for writing better code faster. * Any other suggestions? When thinking about how to solve a problem, I always start with "What do I need?" This question usually has me figuring out exactly what I need my program to do for me. Then, I work backward, asking "What do I have?" I look at my available resources to see if anything applies to what I need to end up with. From there, it's about using code to transform what I have, into what I need. Anyway, learning to code has been the most empowering skill I've ever learned. It hasn't always been easy, but it is always rewarding. Good Luck!
This. `pip3 install -U beautifulsoup4`
I guess it's personal preference then. I use regular expressions often so perhaps I am biased towards using them. If I just need one item from a page, I just make a quick regex for it. Maybe, the amount of code is the same for `bs4` and `re`, but `bs4` feels like more overhead for simple tasks. Similar to how Scrapy feels like more overhead to you than the person you replied to above.
In that case, I can see your point. When I think of scraping, I think yanking an entire tree (or several). Not just a few lines of text.
Scrapy solves a lot of issues common to web scraping that you would need to implement on your own custom script. For example handling cookies, retries, download delays, concurrency, filtering pages that have already been downloaded, etc. Perhaps its features are not so necessary to create just a simple scraper but they come handy when you need to have many of them.
Regex is pretty slow, If you have a lot of free time you could try to do the same task with bs4 instead of regex and see which is faster.
xpath/css selectors libs for python are really far away from providing the same interactive experience than BeautifulSoup in ipython (where beautifulsoup __repr__ show the selected html) and this make the whole difference. When I teach scraping to friend in our hackerspace and I show them beautifulsoup in ipython, then understand it imediatly and are able to use it 5min later once I've show them .find, .findAll, .text and __getattr__. The loop: write interactivly my query in ipython/ipdb, copy/paste result in code really make BeautifulSoup betting everything else in term of productivity and debugging. I've even pushed the idea further and have written [an integration of beautifulsoup in ipython notebook](https://github.com/Psycojoker/ipython-beautifulsoup) ([screenshot](https://raw.github.com/Psycojoker/ipython-beautifulsoup/master/1.png)). I'm still waiting for another tool that can offer me a similar experience.
wonderful! 
Why do you think PySide is more pythonic when they are almost 100% identical? I can switch from one to the other in my project by changing only a few lines.
 $ which pip3 $ pip3 -bash: pip3: command not found $ which python3 /usr/local/bin/python3 $ echo $PATH /usr/local/bin:/usr/local/sbin:... Notice how /usr/local/bin, the location of python3 (btw the binary was put there by default by the python3 installer from python.org) is the FIRST item in my path. And yet, pip3 is not found. This shit is broken. 
I like lxml quite a bit. Seems to be a lot faster than BS, and it has support for using the BS parser. I'm curious why people prefer BS over lxml. When I was getting into python scraping about 1-2 years ago, I read a lot of comments and blogs about how BS development had stagnated / wasn't being developed any more. Do you use BS because it's what you know? Does it have superior features? (I'm asking because I'm always interested to find better ways to scrape and parse data, especially in extracting the text from HTML. Each library gives different results when extracting the text content from an HTML snippet.)
You'd think that. The three big ways are installing virtualenv, virtualenvwrapper (which is fantastic) or grabbing the actual virtualenv python file and running it manually. They all do pretty much the same thing. Running the file manually is less flexible. But compared to packaging in python, it's a breeze. 
Its been a long time since I've visited it but with scraper wiki, you write the scraper in python, it runs on their servers, they give you a way to query the data, its all free if its public...or thats how it used to work. https://classic.scraperwiki.com
I think ARMA and Age of Conan are also awesome examples of trusting the client.
I dont agree with wasting your time learning boolean logic, math, and programming basics just to get a few tasks done in python. The best way I have found to learn anything is to just choose a task and work on it. For example... "I want to build a website" Then you research "building a website with python". Or "I want to scrape websites" then go and google "scraping websites with python" Any more work and you are possibly wasting your time. Python is not magic. It's simply a tool to get something done. You wont be a "python programmer" when you learn python, you will be a guy (or girl) who knows the python programming language.
You could check out the [Python Fundamentals](http://pluralsight.com/training/Courses/Description/python-fundamentals) course from Pluralsight. PM me if you'd like a free pass. This course starts with getting up and running with Python and follows a sort of spiral curriculum, introducing topics in small pieces and then revisiting them and building upon them later. It teaches you enough Python to put useful programs together in about five hours viewing time. Disclosure: I am one of the course authors.
I'd use [BeautifulSoup](http://www.crummy.com/software/BeautifulSoup/) (or bs4 these days) or if its fine to make public I'd go and use [ScraperWiki](https://scraperwiki.com/) which has a good public documentation set and lots of examples. [Updated for links, which are hard on phone]
I'd agree on the regex, at least as a learning exercise. It's not necessarily the best tool for the job but it is a great skill to have, and this is a potentially good way to learn it.
Exactly. Scrapy is critical to our operation (500+ scrapers runnning 24/7)
I'm still in the basic learning stages, but I'll keep these tips in mind. I use Sublime Text for my other work and I saw I need to change the path to make sure it's using the Canopy python install. For now I'm doing a class using the build it Canopy IDE. It's ok, but I miss my Sublime. Getting Sublime to work with Canopy will be tacked before long. Thanks AGAIN!
The first steps are the hardest. Many new concepts without a basic context to fit them in. I also needed multiple atempts... Many programming books require some implicit/prior knowledge... http://www.greenteapress.com/thinkpython/ can get you up and running from 0 ... For me it did the trick and got me hooked... 
Woah neat, I had no idea python didn't restrict keywords in import lists (and in extension, filenames).
This is early in development, but it now allows you to use a Futures DataFrame source, although the futures performance tracker is still under development. As far as Live execution goes, by instantiating your algorithm with live_execution = True, the platform will initialize your strategy with your portfolio loaded from IB (requires you have TWS or Gateway open with sockets enabled). The platform uses individual futures contracts rather than continuous synthetic time series, allowing you to programmatically define your front month and how to roll over using the @roll decorator on handle_data (currently has a bug plaguing it) Next I am going to work on implementing sending orders off to IB and periodically reconciling values between the two.
That really shouldn't be necessary. Edit: but I do thank you for the suggestion. 
Here is why you should never use regex to parse HTML (funny/informative) http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454
For scraping check out the lxml.html documentation: http://lxml.de/lxmlhtml.html The lxml docs have suffered a bit as they rely on the ElementTree documentation for the basics, making it less easy to get into. Here's the python docs on that: http://docs.python.org/2/library/xml.etree.elementtree.html So basically you'd use lxml.html to parse the HTML, then use the elementtree API to get to it, possibly helped by lxml's xpath support to find things. 
I read that everywhere...and it has frightened me off from even looking at it (scrapy). I'll take everyone's word that it is overkill, but is it is really that overwhelming to learn?
It does, but `this` isn't a keyword in Python. Even Python's equivalent, `self`, isn't actually a keyword. The Python standard module `keywords` has a `kwlist` attribute which is a list of all Python keywords. On Python 3.3 this list is: False None True and as assert break class continue def del elif else except finally for from global if import in is lambda nonlocal not or pass raise return try while with yield You can't import any of those AFAIK. You can use them as filenames but then they won't be importable (at least using e.g. `import False`). You can however run `python False.py`
Very interesting! Do you have a feel for the adv/disadvantages between using one package or the other? (Ignoring speed, which isn't something I'm concerned with right now.)
Thanks very much everyone. There are a lot of great suggestions here that i will check out
Beautiful Soup is amazing. 
Yes, they're almost identical, but for me it seems more pythonic out-of-the box. Since v.4.6, PyQt has two different APIs, one of which has things such as QVariant and QString, and the second one uses native python types. By default PyQt uses different versions for Python 2 and 3 respectively, while PySide only uses the second API. I'm using PySide and Python 3, and learned Qt by reading ['Rapid GUI Programming with Python and Qt'](http://www.qtrac.eu/pyqtbook.html), which is written with PyQt and Python 2 in mind. However, after some practice with second API it's a bit confusing to see names from the first one :) List of other differences can be found [here](http://qt-project.org/wiki/Differences_Between_PySide_and_PyQt).
Well, in that case, I do want to know the responsible way to act in this case. Should I not deal with the error and instead modify my script to be a bit slow so that it doesn't generate this error?
Did the webmaster have a reason for instituting this check?
There must be a reason. But then, what is the most ethical way to do this job?
it turns out /r/learnpython has a cool css for it. thx nemec for pointing that. not destructive and more readable. i may be wrong but i think it will be cool to have this here too
theres ways to get away with it. if it was my website i wouldnt like your script. and because people are being nasty on the web it becomes more strict. 
i may be wrong but i think the most ethical way is to respect robots.txt
&gt;While it is true that asking regexes to parse arbitrary HTML is like asking Paris Hilton to write an operating system, it's sometimes appropriate to parse a limited, known set of HTML. &gt;If you have a small set of HTML pages that you want to scrape data from and then stuff into a database, regexes might work fine. For example, I recently wanted to get the names, parties, and districts of Australian federal Representatives, which I got off of the Parliament's Web site. This was a limited, one-time job. &gt;Regexes worked just fine for me, and were very fast to set up. Better written than what I wrote.