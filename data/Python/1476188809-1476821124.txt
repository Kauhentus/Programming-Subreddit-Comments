You don't need to wait for a process/thread to finish its execution. If you use `multiprocessing` then you're asking the OS to handle scheduling the process, if you're using the `threading` module, you're asking Python to schedule the thread. None of these block. In this case, both approaches are fire and forget. I've used this approach before, using `threading` in my case, to handle tasks that didn't require scaling, passing messages, handling errors ie. low priority stuff. Adding in 10 lines of Python was much simpler than adding a new Python dependency (Celery) and a new system dependency (rabbitmq) for this low priority stuff.
Jupyter Notebook is probably the best thing to use to keep track and 'always' import things.
So here is kind of a "dumb" way to do (not suggesting you necessarily should :)) it using known synchronous things in python run in a thread executor: import asyncio loop = asyncio.get_event_loop() async def get_answer(timeout): return await asyncio.wait_for( loop.run_in_executor(None, lambda: print('Answer:')), timeout, loop=loop) try: answer = loop.run_until_complete(get_answer(5)) except: # really you should catch the specific exc print('Timed out') While that works, the typical way to read data from stdin in asyncio is to use [`loop.add_reader`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.add_reader) with a callback.
Cool cool cool
[Bulk sms gateway service provider ](https://www.springedge.com) can help you to send multi sms using python code. 
I disagree, it's subjective but having taught many people, I believe [Scrapy provides way more support for the beginner programmer getting into web scraping](https://hexfox.com/web-scraping/scrapy-vs-beautifulsoup/). The statement about it requiring regex is completely false also; Scrapy relies on lxml as its parser just like BeautifulSoup but on top of that provides selector engines in both CSS and XPath. So all you need to learn is CSS, regex is not involved unless you want to do something very specific. At the end of the day though the comparison is not a fair one: Scrapy is a web scraping framework whereas BeautifulSoup is just an HTML parsing library. You still need to handle the HTTP requests, and if you want to do that concurrently you're going to have a long road ahead of you..Scrapy gives you this and hundreds more tricks for free. Edit: I'd like to add that requests and BeautifulSoup are both fantastic learning tools. But most people come to the web automation/scraping world with a task in mind, and Scrapy will get that task done for them a lot faster - and the solution will be more maintainable. Its more upfront learning in return for the pay off of less work down the line.
Thanks for the advice :) I went back and starting watching the devpi logs whenever I would try to do a Pip install request with the index URL of my devpi server and realized that using the bare URL wasn't working because it expects me to use a URL along the lines of http://myserver.com/user/index. Once I noticed this and corrected my index URL, it started Pip installing just fine. Thanks for the heads up, I'm glad I got it working this way :) 
I'm not an Odoo developer. I just do some open source work here and there.
Thanks! I'm a sucker for functional languages. I like to use their concepts when possible.
Python 3 + numpy and scipy
You need both. I've been programming for years and years, and I still enjoy skimming through material like this. It's interesting to see how other people use various languages.
I am on 2.7 since the computers at work do not have 3 (and may not for a while). Anyway, I do not worry about division since I tend to be pretty good about using floats. But, I almost always import `numpy` (`as np`) for any mathematics. It is *slightly* slower than the math import but the power is incredible! 
For numerical accuracy, use Decimal. I think it's `from decimal import Decimal`. But know that you will be adding a significant amount of overhead and your performance will suffer. Generally you should only use it when you know you NEED it. 
Does anyone have an opinion on which board with Ethernet (or PoE, even) works best with MicroPython?
I'm following it from the site: https://automatetheboringstuff.com/
DRY
How can I completely remove Python 2 from my Mac and then use Python 3 and bumpy/scripy?
Since part of your Mac's operating system use Python 2 it would be very unwise to attempt and completely remove it. I've found Anaconda to be one of the best ways of getting Python3 on OSX.
I [like](https://www.python.org/dev/peps/pep-0498/) it: &gt;&gt;&gt; import datetime &gt;&gt;&gt; name = 'Fred' &gt;&gt;&gt; age = 50 &gt;&gt;&gt; anniversary = datetime.date(1991, 10, 12) &gt;&gt;&gt; f'My name is {name}, my age next year is {age+1}, my anniversary is {anniversary:%A, %B %d, %Y}.' 'My name is Fred, my age next year is 51, my anniversary is Saturday, October 12, 1991.' &gt;&gt;&gt; f'He said his name is {name!r}.' "He said his name is 'Fred'."
Thanks, stack overflow said the same about uninstalling it. 
i'm in a similar position. i found Learning Python by mark lutz to be more than adequate as a comprehensive introduction to standard library mechanics. it is a tad long however, sitting at around 1450 pgs, but if you can sit your way through it, even 10% retention is incredibly useful. 
WET edit: for whoever downvoted, it means "we enjoy typing", in case you were confused ;)
here is a direct link for all programming books, not including the report "DEVELOPING REACTIVE MICROSERVICES" ----Java---- * Microservices for Java Developers: http://www.oreilly.com/programming/free/files/microservices-for-java-developers.pdf * Modern Java EE Design Patterns: http://www.oreilly.com/programming/free/files/modern-java-ee-design-patterns.pdf * Java: The Legend: http://www.oreilly.com/programming/free/files/java-the-legend.pdf * Object-Oriented vs. Functional Programming: http://www.oreilly.com/programming/free/files/object-oriented-vs-functional-programming.pdf ----python---- * A Whirlwind Tour of Python: http://www.oreilly.com/programming/free/files/a-whirlwind-tour-of-python.pdf * 20 Python Libraries You Aren't Using (But Should): http://www.oreilly.com/programming/free/files/20-python-libraries-you-arent-using-but-should.pdf * Hadoop with Python: http://www.oreilly.com/programming/free/files/hadoop-with-python.pdf * How to Make Mistakes in Python: http://www.oreilly.com/programming/free/files/how-to-make-mistakes-in-python.pdf * Functional Programming in Python: http://www.oreilly.com/programming/free/files/functional-programming-python.pdf * Python in Education: http://www.oreilly.com/programming/free/files/python-in-education.pdf * Picking a Python Version: A Manifesto: http://www.oreilly.com/programming/free/files/from-future-import-python.pdf ----other---- * Real-World Maintainable Software: http://www.oreilly.com/programming/free/files/real-world-maintainable-software.pdf * Trends Shaping the London Tech Scene: http://www.oreilly.com/programming/free/files/trends-shaping-the-london-tech-scene.pdf * 2016 European Software Development Salary Survey: http://www.oreilly.com/programming/free/files/2016-european-software-development-salary-survey.pdf * 2016 Software Development Salary Survey: http://www.oreilly.com/programming/free/files/2016-software-development-salary-survey-report.pdf * Why Rust?: http://www.oreilly.com/programming/free/files/why-rust.pdf * C++ Today: http://www.oreilly.com/programming/free/files/c++-today.pdf * RxJava for Android App Development: http://www.oreilly.com/programming/free/files/rxjava-for-android-app-development.pdf * Swift Pocket Reference: http://www.oreilly.com/programming/free/files/swift-pocket-reference.pdf ----open source---- * Open Source in Brazil: http://www.oreilly.com/programming/free/files/open-source-in-brazil.pdf * Ten Steps to Linux Survival: http://www.oreilly.com/programming/free/files/ten-steps-to-linux-survival.pdf * Open by Design: http://www.oreilly.com/programming/free/files/open-by-design.pdf * Getting Started with InnerSource: http://www.oreilly.com/programming/free/files/getting-started-with-innersource.pdf ----software architecture---- * Microservices in Production: http://www.oreilly.com/programming/free/files/microservices-in-production.pdf * Microservices AntiPatterns and Pitfalls: http://www.oreilly.com/programming/free/files/microservices-antipatterns-and-pitfalls.pdf * Microservices vs. Service-Oriented Architecture: http://www.oreilly.com/programming/free/files/microservices-vs-service-oriented-architecture.pdf * Evolving Architectures of FinTech: http://www.oreilly.com/programming/free/files/evolving-architectures-of-fintech.pdf * Software Architecture Patterns: http://www.oreilly.com/programming/free/files/software-architecture-patterns.pdf * Migrating to Cloud-Native Application Architectures: http://www.oreilly.com/programming/free/files/migrating-cloud-native-application-architectures.pdf * Reactive Microservices Architecture: http://www.oreilly.com/programming/free/files/reactive-microservices-architecture-orm.pdf not included: DEVELOPING REACTIVE MICROSERVICES
dope! this looks fun to play around with. thanks!
This is one of my favourite reddit till date! 
Not a Python solution, but AutoHotkey has functionality called "hotstrings" which accomplishes what you are looking for. 
Luigi also looks for a global config at /etc/luigi/luigi.cfg no matter if you point LUIGI_CONFIG_PATH to some other config file. It loads the global file first, then $LUIGI_CONFIG_PATH. For any sections in both $LUIGI_CONFIG_PATH and /etc/luigi/luigi.cfg, $LUIGI_CONFIG_PATH takes precedence. I'm not sure if you were saying as much or not, sorry if so. Just pointing it out, in case it wasn't clear to folks. 
Is there an estimate of when it will be released?
Why do you want to do that, the world has PyCharm now. 
I'm not suggesting you remove it. Rather have a separate python installation and preprending your $PATH with its path when you want to use it.
The craziest thing about this is that built-in strftime formatting isn't new. You can do this, right now, even in Python 2: 'The date is {:%A, %B %d, %Y}'.format(datetime.now())
[huey](http://github.com/coleifer/huey) is another python task queue, which supports multiple execution models: process, thread, and greenlet. It's a tiny codebase but has all the most important features. Check it out if you're looking for something different.
You sir need [PyUSB](https://walac.github.io/pyusb/)
Well he did say 74%!, so if we use the Gamma function of 0.74 + 1 this comes out to 91.6826% of people.
Which is one of the things virtualenv does.
Because VS is also really nice, and it's one less IDE to switch between if you write anything in C, C++, or C#
Yes. Unless you're writing this for people who have no knowledge of Python, all those comments need to go. What your code does should be clear from how it's written. Explaining _why_ is the role of comments. For the most part your comments will just be insulting the intelligence of a reader. This is an odd way to use a GUI framework. The normal usage is subclassing existing widgets. Have you read a tkinter tutorial? Functions that take no arguments and don't return anything make for very rickety code. If you're subclassing widgets, you won't have that problem.
IDET
What does composition vs inheritance mean? I've seen this a lot but haven't seen an example.
sure thx
In Linux, the /dev/ttyUSB* devices expose virtual serial ports created by USB devices, which can then be used with the [pyserial](https://pypi.python.org/pypi/pyserial) package. On Windows, with the appropriate driver, the USB device may also be exposed as a COM port which can be used with pyserial. However, on Windows some vendor-specific drivers for USB-serial devices can expose the COM port in a way that it's inaccessible to pyserial. If the device uses a common USB-serial controller chip, like an FTDI chip, then it will most likely work just fine with pyserial. If it uses something proprietary, then it depends on how the vendor implemented the driver. [PyUSB](https://walac.github.io/pyusb/) can be used for interacting with USB devices that you don't have a driver/API for. USB works by the operating system loading a specific driver for a given USB vendor ID/product ID pair. Only one driver can be attached to that device at a time, so PyUSB works by being that driver. That means that if you already have a driver for that device, you'll have to uninstall/disable it in the process of installing PyUSB. Manually handling reports in USB is quite a bit more complicated than using serial commands, so if the device works as a USB-serial port, I'd recommend going that way instead.
Visual Studio used to have terrible C support - are they on to c99 at least now?
The issue is for my repo. The code is in the repo. Previously I tried to get it to work and gave up. Trying again today. I'm scared to post an issue for pyinstaller because I don't know how to strace etc. This is a pretty simple PyQt5 QML application, I'm not sure how it could be a bug with PyInstaller.
What do you mean by into the pyinstaller code?
The PATH is a disastrous variable on Windows for people who develop software. It gets too long and installers frequently break because of this. Trivial typos mean your entire path after the bug doesn't work, but since Windows still works, you don't know. As a result, everyone puts their path at the beginning after an install (instead of the end like it should be), because obviously their program is more important than say the System32 folder from Windows. Anaconda at least tries to minimize their damage to the PATH. They just carry this over to linux because it's good practice.
I have never used react before, so I'm not sure what you would need to do there. In our projects, we have basically an AJAX helper method that we call, instead of using AJAX directly. This will perform the request with the necessary headers/tokens/etc. If the result of the call is a 401, we try to regenerate the access token with the refresh token, then perform the request again. If the refresh token also returns a 401, we prompt the user to sign in again (but by setting the refresh token lifetime to a large time, this shouldn't often come up).
I don't even know what an strace is :) I just know PyQt and I know pyInstaller. &gt; I'm not sure how it could be a bug with PyInstaller. I use the latest dev version for a reason. Make sure you can build the some simple hello world case case for PyQt5 without messing with QML (I hate that QML even exists; I just code the stupid thing; It's just going to be less buggy). Also, use setuptools 19.2 just because.
helper questions using a bad car analogy: does Car inherit from Engine? does Car inherit from Wheel?
The comments are only there to prove to the teacher I know what it's doing, not copying from StackOverflow. I literally add a comment every line for that reason, even if it's literally what the code says. Subwhat exiwhat wiwhat? Heh, I kinda started self-teaching myself and found that this method works so I didn't think it was problematic or wrong. How do I subclass widgets?
Inheritance is using the OO mechanism in a language such that your class is-a thing, whereas composition means that your class contains a reference to an instance of that class instead. The latter is much more flexible and maintainable
Stuff I need done. What do you need done?
thanks! this helps.
I can't say, I haven't used it for C. I'd hope they would be on at least C11 by now though
Do you know if the Python/R project types in VS are using proprietary extensions and libraries, or are they pretty standard and portable with other development environments?
To me, those comments don't really prove that you know what the code does. Right away it seems like you don't know what a function or a string is. Read a tkinter tutorial.
[removed]
yeah, the class only has to customize `__format__()` for it to work &gt;&gt;&gt; class Lol: ... def __format__(self, fmt): ... return {'o': 'omg', 'w': 'wtf', 'b': 'bbq'}[fmt] ... &gt;&gt;&gt; '{0:o}/{0:w}/{0:b}'.format(Lol()) 'omg/wtf/bbq' 
That's because you're sane. SQLAlchemy is better.
Nothing in particular, however yesterday I saw the amazing projects other people made, and was wondering what their sources of inspiration are, and maybe learn where I am not looking for inspiration, that maybe I should look at.
The more ARM based platforms MicroPython gets on the better. Personally I would have preferred Teensy but this will do. 
VS 15 is looking to become an architecturally big step forward. Exciting stuff. Still, I laughed when I read this. :p &gt; One of the benefits of a highly-focused Visual Studio is that install time and size is significantly reduced. This current version is a preview, so we’re still working to make it even smaller and faster, but even now you can have a very functional Python development environment for only 875 MB.
 &gt;**Edit:** *Oh god Pastebin screwed with the indentations sorry* Which is the one thing I hate about Python. I ended up with a really horrible bug in a piece of code I was working on due to editor handling of indentation. This is one reason why I'm considering learning Swift as I see it as being comparable to Python in code writing ease. Especially if one is using the language for simply utilities. 
&gt; a very functional Python development environment for only 875 MB. Such stupid wording. 
The industry standard is to not pickle. Pickle doesn't work across Python/package versions, which is really bad (especially when testing). You added one function/data member to your object? You just broke unpicking. You changed a class path? You broke your unpickling. For objects, you already have to add special methods, so you might as well just skip it entirely and do it right (or at least righter). Ideally, you'd make a binary file that is structured to mass read it with something like numpy because it's the difference between 4 seconds of file IO and 60 minutes on a 2 GB file. For example, define what your data structure is (e.g. the first 4 ints tells you x, y, z, and w. Then just mass read strings/ints/floats with some knowledge of the types. Do a few reshapes and you're done. How much you do depends on your data structure's layout (e.g. multi-nested dictionaries vs. dictionaries of key:long list of data), but for large data or fast IO, binary is the only way to go. I guess that also assumes you need to actually pass data. The less you have to pass along, the better. Making a more cohesive program that doesn't make external calls is only going to reduce bugs. The whole script A calls B calls C calls D ad nauseum reminds me of my Perl days. I used to basically code stack traces in order to make the software usable. It's much easier not doing that.
Visual Studio is a great IDE, but it still has those little quirks that piss me off - for example when you run your script it still pops up those goddamn, ugly cmd.exe windows, instead of using nicely themed and docked powershell... 
This reminds me of [a picture](https://twitter.com/bigdataborat/status/459137528990167040) from Big Data Borat on Twitter.
Great response mate! The reason why i have divided the whole process into a few scripts is so that I can use a workflow management framework such as Luigi or Airflow in the future. Your solution makes total sense, but ill sure study on how to make binary files. It is an area that Ill have to get familiar with. The thing is, I could just write a csv, load it with pandas and create the dictionary when needed. But building the dict takes a long time, now I am not sure that its due to Pandas looking up that names ( a bunch of strings) or its something that ill have to live with. Would that time still persist if I transitioned to your binary file solution? 
[TkDocs](http://www.tkdocs.com/) [Zetcode](http://zetcode.com/gui/tkinter/) [Sentdex](https://pythonprogramming.net/tkinter-depth-tutorial-making-actual-program/) 
Necessity
You can customize what you want to use in your environment variables.
I'm not sure comparing sqlalchemy and pandasql makes sense. From my reading of it, pandasql provides a way to interact with pandas DataFrames using SQL syntax (not something I've ever desired, to be honest), it doesn't actually have anything to do with interacting with SQL databases.
Ambition and wondering if I can do something better that we already have..
pandasql is being pushed here because it is a product of yhat, the consulting company that wrote this blog post
Hell froze?
The only time I've felt dissatisfied with the way one interacts with Pandas DataFrames is with this: `df[df['column1'] == 'val1']` SQL does make that a little nicer with: `SELECT * FROM df WHERE column1 = 'val1'` The SQL query has fewer redundancies (not writing `df` twice), no bracketing, and has more transparent semantics.
Why? PyCharm is 180MB, both are ridiculously large sizes for a text editor.
What's the advantage of doing this over just using `pandas.read_sql`?
**No**.
I'm more flabbergasted by your original post than you could possibly be with my response. Sure there are 10^27 things on the internet I could say no to, but only a few dozen that stoop to the level of both arrogance and stupidity that I read in your post.
Still algorithmically a stupid action to get out of your way to correct "irredeemable dumbasses". I didn't come to you and I wasn't arrogant. You came to me, you were the arrogant one and you don't know who I am. If anything I disrespected the subreddit rules. So fuck you.
You can do: df.query('column1==val1')
Life-changing.
My understanding is they're splitting pandasql from the main pandas library. Could be incorrect on that, I'm just remembering a half-read article from HN or chatter on github a few days back.
...why would anyone want to do that? I think one of pandas' strengths is having so many different io methods embedded in it.
Wait WTF? So I guess the datetime part of that is new but from quick Googling, if I'm understanding the results correctly, you've always otherwise been able to do something basically like this? (By "always" I mean at least as early as 2.7.) This is so much better than "text {} text {}".format(a, b) and should finally kill my tendency to get lazy and do things like "text "+name+" text".
They're not just text editors; that's seemingly why they take up so much space.
I'd prefer that, but the .txt file is provided by my professor and will be used for grading. 
csv module has some good stuff in it for that, DictReader
tldr; Find something that takes your time and automate it. Time is money :) I'm not a software engineer, but I've been programming as a hobby for over ten years now. Most of my inspiration, like many others, comes from things that can directly benefit my day-to-day life. For instance, I use a text-based finance system for tracking my personal finances and just the other day I finished a CL script written in Python that automatically downloads my PDF paycheck, converts it to HTML, and then parses out the financial data and structures it in the native finance language. Now I'm working on a tool to hook into [Raneto](http://raneto.com/) such that when I push documentation changes through git it automatically updates the remote machine hosting the Raneto server (and I already have quite an interest in it). 
Name|Description|Stars :--|:--|:-- [sortedcontainers](https://github.com/grantjenks/sorted_containers)|Sorted Collections Types: SortedList, SortedDict, and SortedSet. Pure-Python and fast-as-C implementations.|657 [diskcache](https://github.com/grantjenks/python-diskcache)|Disk-backed cache (Django-compatible). Competitive with Memcached.|133 [wordsegment](https://github.com/grantjenks/wordsegment)|English word segmentation. Based on a trillion-word corpus.|57 [runstats](https://github.com/grantjenks/python_runstats)|Running/online statistics and regression (in a single pass).|31 [pypatt](https://github.com/grantjenks/pypatt_python_pattern_matching)|Pattern matching like functional languages.|28 [free python games](https://github.com/grantjenks/free_python_games)|Free Python Games for teaching using pygame.|12
the release notes are rather too terse to adequately explain the change in behavior. i would advise that you look at the [Consequences for existing code](https://www.python.org/dev/peps/pep-0479/#id37) and Writing backward and forwards compatible code section of the PEP. in short, this only changes the semantics where you have an iterator inside another iterator, and the StopIteration is not caught in the outer iterator (either by a try/except or a looping construct). and honestly, if you are doing that you are making difficult to understand code and you should probably stop. continued use of StopIteration outside of this scenario is still fully supported and not deprecated (unless there is another PEP i'm missing).
I've changed it to make it possible to stop downloading and resume later. import requests import re import os import os.path import tempfile import shutil def download_file(url, download_dir): # http://stackoverflow.com/a/16696317 local_filename = url.split('/')[-1] file_dir = "".join(local_filename.split('.')[:-1]) file_name = "./{}/{}/{}".format(download_dir, file_dir, local_filename) # NOTE the stream=True parameter # Test if file already exists if not os.path.isfile(file_name): r = requests.get(url, stream=True) os.makedirs("./{}/{}".format(download_dir, file_dir), exist_ok=True) with tempfile.TemporaryFile() as tmpFile: for chunk in r.iter_content(chunk_size=1024): if chunk: # filter out keep-alive new chunks tmpFile.write(chunk) # Save to final file with open(file_name, 'wb') as f: shutil.copyfileobj(tmpFile, f) return local_filename else: print("Skipping ./{}/{}/{}".format(download_dir, file_dir, local_filename)) def download_all_from_urls(endings, urls, download_dir): combinations = (url.replace('.csp', ending) .replace('/free/', '/free/files/') for url in urls for ending in endings) for combination in combinations: print(combination) download_file(combination, download_dir) def get_urls(dl_type): data = requests.get('http://www.oreilly.com/{}/free/'.format(dl_type)) # Other URLs # Don't worry, I'm not _parsing_ html with regex. Merely scraping it. :) pattern = re.compile('http://www.oreilly.com/{}/free.*\.csp'.format(dl_type)) urls = pattern.findall(data.text) return urls def get_main_urls(): "A function to get all the pages that have free ebooks on" data = requests.get('http://www.oreilly.com/programming/free/') # Just match the name not the whole URL pattern = re.compile('(?&lt;=oreilly\.com\/)(.*)(?=\/free\/)') urls = pattern.findall(data.text) # Remove duplicates urls = list(set(urls)) return urls file_types = ['.pdf', '.mobi', '.epub'] download_types = get_main_urls() for download_type in download_types: urls = get_urls(download_type) download_all_from_urls(file_types, urls, download_type) 
The error says "Access Denied". You need to set up a virtual environment and then install the required packages. Follow the "Install virtualenv and virtualenvwrapper-powershell" section [here](http://www.tylerbutler.com/2012/05/how-to-install-python-pip-and-virtualenv-on-windows-with-powershell/).
Why on earth should I want to make my pandas queries with sql? Pandas has already a realy good query system? Besides this library just loads the dataframe into an in-memory sqllite instance, so you can perform sqllite queries on that to get your original data back. This should decrease the overall performance and in the end eats up the ram with big dataframes. Storing that sqlite instance persistently kinda defeats the purpose. &gt; [It's a small but mighty library comprised of just 358 lines of code.](http://blog.yhat.com/posts/pandasql-intro.html) Without this module that is achievable with this code: from sqlalchemy import create_engine import pandas as pd con = create_engine('sqlite:///:memory:') df.to_sql(con=con, index=False) pd.read_sql(query, con) A better alternative is just to learn the pandas query system, the official documentation already has a nice [sql comparision](http://pandas.pydata.org/pandas-docs/stable/comparison_with_sql.html) for this.
It has nothing to do with that. It is just a wrapper to use sql queries within your dataframe. It loads the dataframe into a in-memory sqlite instance so you can perform sql queries on that. The code itself is using [`read_sql`](https://github.com/yhat/pandasql/blob/master/pandasql/sqldf.py).
Yikes! I've been where you are and I do feel for you but it seems like the assignment is to implement a basic hash on your own not use a library. So vids and tutorials on pycrypto does you no good. From what I can remember, typical textbook hash examples were just XOR operations. Here's a stackoverflow thread that might get you started http://stackoverflow.com/questions/11119632/bitwise-xor-of-hex-numbers-in-python Start your assignments earlier next time
MOTHER. OF. GOD. Like /u/squirreltalk said, the first syntax he listed is honestly just insane. Maybe the motivation was exactly to avoid making it look like a dictionary lookup but I think the stuff within df[], i.e. df['column1'] == 'val1' Would make a lot more sense as the lookup than having to wrap it as df[df['column1'] == 'val1'] And then it just gets uglier if you're trying to do conditional value reassignment. Something like: if df['column1'] == 'val1': df['column1'] = 'val2': Just seems like it would make a lot intuitive. Especially for "if value in column 1 then change value in column 2 statements", e.g. if df['column1'] == 'val1': df['column2'] == 'val3' (where the per-row index is implied).
You can just try changing the extension from .txt to .csv and seeing what happens (oftentimes but not always this will have the desired result). Also I recommend opening the file in something other than Excel once you reassign it in CSV. Sublime Text, Text Wrangler, something along those lines. Those will be much better about differentiating between things like "1,2,3,,,," (repeated ,,,, representing blank cells) and "1,2,3". Or even more simply, I'm pretty sure `import csv` is able to figure out how to handle .txt files. Python 3 is a lot smarter about this an Python 2, but you may have to fuck around with some of the options flags (e.g. `with ('file.txt', "rU") as csvfile:` as opposed to just `with ('file.txt') as csvfile:` but Python 3 is as I said a lot smarter about figuring out the latter)...but it should work. I mean fundamentally CSV is just plain text with "," being used as a reserved character by the interpreter.
Don't install Python to Program Files. Just run it as an administrator.
Unfortunately, you can't always avoid this. Qt for example has a metaclass for its QObjects (almost all of its classes) and if you want any metaclass (say ABCMeta for abstractmethod) then you can't have it without some metaclass magic. It's very unfortunate. Enter Python 3.6 and now we're good again for most cases. `abstractmethod` can be written as a simple hook.
randomize and substract to bring the number range where you want it, eg `random.randrange(100) - 50`
 from random import choice, randint lt_gt = [int.__lt__, int.__gt__] random_num = randint() lt_or_gt = choice (lt_gt)(random_num, 0) 
“to randomly decide”?
What exactly are you struggling with : For a college assignment, Question 1 actually looks quite well defined, I can't at the moment see any contradictions in that definition. As far as implementation goes, Python has a byte array data type - which makes it easy to perform the required calculations at a Python level. Question 2 is a little bit more problematic - it terms of are you allowed to use a library SHA-512 implementation, or do you have to do your own. If you can use a library then great ; Python has a library which will do that out of the box. Once you have this reduced hash function, then to find the collisions you could do a two stage exhaustive search of all possible 8 byte strings (there are 18446744073709551616 possible values- stage 1: compute the hash of each one (saving the hash value to a file, stage 2: try to find duplicates within the file. There might be a way of finding collisions by analysing the characteristics of both has functions - but I can see that being pretty difficult.
 x = np.random.randn() if np.random.randn() &gt; 0: print(x &gt; 0) else: print("¯\_(ツ)_/¯")
Well, its a computer and information systems class. The syllabus was supposed to be no programming at all which is why I chose it(just starting programming). I'm taking Introduction to Python while I take this class so my knowledge of Python isn't exactly amazing. I understand everything you said, but writing it is a completely different subject. Yes, the professor told us we can use a library.
It would be cool if x existed.
Since it's already installed to PF, can I just make the .exe run as Admin?
No, it's unavoidable the way that metaclasses currently work. If two classes use two different metaclasses, then you cannot inherit from both easily. That's why Python 3.6 fixes this problem for most uses of metaclasses. Before this, even well-written libraries had this problem whenever they used metaclasses. (E.g., traitlets.)
You can't "run python on gpu" just like that. See https://documen.tician.de/pycuda/ to learn how it works.
I should have mentioned I have an installation of CUDA that I use for Theano.
You can't run CPU code on a GPU. Well, I mean, you may be able to, but it will be horribly slow and will take a lot of effort to even set up, as the GPU doesn't even have an OS. If you want to do GPU computation, use a GPU compute API like CUDA or OpenCL.
*only* 875MB??? completely fucking bonkers. I know HD space is cheap but that isn't the point, gotta load that bitch into memory. Reminds me of the old Access 2 fiasco when M$ told everyone it would run in 8MB, it didn't and they had to fork out for RAM upgrades. The art of sloppy coding has been at M$ for many years (decades) now.....
Do you know how to set this up via CUDA?
You can look at the examples [here](http://nbviewer.jupyter.org/gist/harrism/f5707335f40af9463c43) for how to use PyCUDA, but you need to be really careful with what code you run on the GPU. What kind of stuff are you trying to do?
Here's the thing: GPUs are really good at doing the same thing to small chunks of data in parallel. Running simulations that involve heavy branching or a lot of memory accesses on a GPU will be insanely slow. You'll probably gain more performance by using a JIT compiler like PyPy, or by profiling your code and replacing the hot spots with native (C/Rust/whatever) code.
Okay let me give those a shot. Thanks.
 I can confirm that this affects more than OP. They might have had a glitch on their systems, happens sometimes to the best of websites. Check back in an hour or so. If you need access to their docs the source is probably in their github. It's not ideal but might work in a pinch.
Good stuff, thanks for posting this.
Word of advice if you go down the hot spot optimization path: only optimize the hottest spot, then profile again. Don't optimize the second hottest spot, and prepare to be surprised; code spends its time in the darnedest of places. Also, don't bother optimizing unless the hottest spot overwhelms the rest of the code by taking much, much more time. We're talking orders of magnitude here. Another thing: you may not even have to write foreign code. Sometimes a simple cached value will suffice. There's one particular case where I calculated heights of pallets (that contain part of an order, and an order points to a certain article, article height, and a quantity). Pallets may contain more than one order, provided they fit. The absolute hottest spot in the entire program was to figure out how to distribute partial orders. This is because I had it calculate the size of things over and over, doing the same multiplications time and time again. I brought execution time 3 orders of magnitude by caching the height. There were a lot of orders.
I like this, but it would occasionally return a zero. If OP is asking for a random int that is +/- but not 0, then there's this: # -1^0 == 1 # -1^1 == -1 (-1)**random.randrange(2) This would generate either a -1 or a 1, which could be multiplied by another random int to avoid 0.
You are welcome. Note that folks here are very helpful. If you get stuck on a problem, or have a piece of code to be reviewed, feel free to post it.
That is really helpful. Thanks!
Absolutely. With simpler data, I would definitely have considered it. I actually made this thing specifically for use with iPython in order to avoid downloading the same data over and over again: import requests def memo(fn): cache = {} def wrapper(*args, **kw): key = (args, frozenset(kw.items())) if key in cache: return cache[key] result = fn(*args, **kw) cache[key] = result return result wrapper.__name__ = fn.__name__ wrapper.__doc__ = fn.__doc__ return wrapper @memo def get(url, *args, **kw): return requests.get(url, *args, **kw) I just run it in a cell of its own, then I don't have to worry about how often I "download" data in other cells.
Thanks, that was a very clear answer.
True on switching but intellij is working on C/C++/C# wouldn't be surprised to see it ready in a year.
Why are you wasting time replying when you should be learning how to program in the space of 2 hours?
Red wine :p lots of it!
Small improvement to your script (just download everything!) import requests import re data = requests.get('http://www.oreilly.com/programming/free/') # Don't worry, I'm not _parsing_ html with regex. Merely scraping it. :) pattern = re.compile('http://www.oreilly.com/programming/free.*\.csp') urls = pattern.findall(data.text) endings = ['.pdf', '.mobi', '.epub'] combinations = (url.replace('.csp', ending)\ .replace('/free/', '/free/files/') for url in urls for ending in endings) # I handed the actual downloading off to wget at this point (I'm on linux). for combination in combinations: print(combination) name = combination.rsplit('/', maxsplit=1)[1] # extract filename resp = requests.get(combination, stream=True) if resp.status_code == requests.codes.ok: with open(name, 'wb') as f: for chunk in resp.iter_content(1000): f.write(chunk) else: print(resp.status_code)
I looked at pandasql, yesterday. It is different than sqlalchemy. SQLAlchemy allows you to interact with databases. Pandasql allows you to use SQL to interact with Pandas DataFrames. I'd rather just learn Pandas, but I can see it's usefulness. What I'd love to see is a library that works like Dplyr in that you can use Dplyr syntax to query the DB, and the work is done on the DB, not in memory on your local system. That would allow me to use Pandas for large ETL jobs. 
Holy shit! How did I not know that?
Well written libraries do not require their users subclass it's own classes. You've entirely missed the point of my initial comment. Reread it.
I thought that was weird and funny as well.
You are probably using python3, or python2 after executing "from __future__ import print_function". Either way, print is a function rather than a statement, and you need bracket around the whole argument.
Asking here instead of [/r/learnpython](https://www.reddit.com/r/learnpython)
if you are calling a sub-iterator, always catch its StopIteration. if you are raising it yourself, that's fine (although it's probably easier to just return).
Nice work. May I suggest you check the other comments? I already solved this and made a few other interesting alterations.
If you ever want to handle xml look at defusedxml
That's a good point. I guess I just don't understand the value of using SQL syntax in pandas when it already has all the capabilities built in. It just seems like a way for lazy programmers to avoid learning pandas. (Which is ridiculously lazy since pandas was one of the easiest things for me to learn.)
I don't even understand why i'm being downvoted. Fanboys with small testicles?
Right, my bad, wrong word.
Thanks for the answer! That's actually interesting, because that means there's no demand... which seems weird, but not unlikely, i guess. The insecure people downvoting me are funny, btw. ^_^
Probably Linux distros, the BSDs and OS X. Windows is fairly unpopular on x86 when you take into account all the servers in the world.
Nice!, You could also do `int(round(100.0*random.random()-50.0))` if you do not want to pull two random numbers. Of course, this also *could* give you a zero, but the chances are so small that it isn't worth worrying about. 
Also, look around this sub. Someone just posted the exact same homework
PyPy itself not receiving enough interest, but it's very very good project (there are like 5-15 active devs, not more) ... If PyPy has like 1/4 of interest Python have (I mean standard python implementation) - PyPy would grow very fast.
Wow, I didn't know. I thought people would actually be highly interested in this ... but i guess that also explains how not many know about nuitka. I'm a fan of both projects, it's a shame they don't have a bigger fanbase.
PyCharm's debugger was also all I had ever used a few months ago. Then I stumbled upon Winpdb, gdb and python-debuginfo. I agree that we probably need these tools only in specific scenarios (e.g. long-running processes, production code), but still, it's good to have them in our tool belt :)
Hey you should probably post stuff like this at /r/learnpython in the future. What is happening is that on the first loop where `n = 2` the second for statement is then evaluating `for x in range(2, 2)` so it doesn't enter that loop. It then goes back to the first loop and now `n=3` and you get the values you see printed. Hope that helps
This is pretty concise! I needed something exactly like it. Thank you.
It's still probably 35% of servers plus 88%-90% of desktops. 
I'm a desktop Linux user for 6 years and I'm upvoting you. I don't understand it either. 
Will this leak personal information, or would a public repository on github be sufficient? 
You should be posting this stuff in /r/learnpython. Also, your question is very vague. What exactly do you want to do? What have you tried?
Unix philosophy. Don't make an open source 'project' make dozens. Pipe them though each other.
Keep in mind that pandas is huge dependency 
A friend contacted Stanford who said since he graduated, they took down his site. Another alternative if you don't want to make the documentation is download Dash (for mac only), it's there as a user contributed docset.
You're saving the return value of `passwordEncrypt` to the variable `unencryptedPassword` (that's a terrible name for a variable that stores an encrypted password, by the way), and then add `passwordEncrypt` - the function itself - to your `passwords` list.
Honestly no f strings would be fine by me, that's angling a bit too much to the Perlish way of things (not that it's a bad method, but it adds to the string formatting clutter that already existed)
&gt; Fanboys with small testicles? ^ That's why I downvoted you. Glad to see you can discuss and learn in a rational way, but being so vulgar and insulting is generally conducive to being downvoted (at least on a sub like this)
a good overview, but I think it really shouldn't be in this subreddit since it has virtually nothing to do with Python. 
Is Python widely used on Windows?
If the user chooses option 3 (add to the list) Print what is the website User inputs website Print what is the password User inputs unencrypted password The unencrypted password equals variable passwordEncrypt( which uses the unencrypted password and the encryption keychain. I don't know what: "print(unencryptedPassword, (passwordEncrypt))" accomplishes But after it passwords list is appended with inputs and the code prints they've been added. Yes, I'm having problems understanding the code because the project was to make the cipher, add several functions in to an all ready built idea.
Thank you. I never heard of AHK but checked it out and it makes this very easy to do.
PyPy is compatible with 99,99% packages (pure-python), and with most part of C API extensions(but they're slower).
I like linq because it returns to me some of the power that Python naturally contains in its comprehensions. Looking at the example on the page, and a few more in the documentation, those that I've seen can all be done in one line in a list comprehension. For example, query(words).order_by(len).then_by().take(5).select(str.upper).to_list() becomes [word.upper() for word in sorted(words, key=lambda w: (len(w), w)][:5] and query(students).where(lambda s: s['firstname'].startswith('J')) \ .select(lambda s: s['firstname'] + ' ' + s['lastname']) \ .to_list() becomes [student['firstname'] + ' ' + student['lastname'] for student in students if student['firstname'][0] == 'J'] the lambdas and functions examples are also very simple with list comprehensions. Are you aware of any examples where asq provides a significant advantage over comprehensions?
A truism of open source is that whatever the developers use receives support first.
x86 runs on 64 bit systems, 64 bit is an extension of the x86 architecture, not a separate architecture entirely 
I definitely agree, however, it's a part of the assignment to figure it out. The idea is that someone may write some code, and then I add on it to provide missing links. You're not wrong that I am throwing shit at the wall. :) Thanks for your time!
{0}
No, well-written libraries **do** sometimes require their users subclass library classes. I gave you an example of that: Qt classes are supposed to be subclassed to implement pure virtuals, say `QAbstractItemModel` or `QGLWidget`. It would also be reasonable to want your own metaclass to do some magic like `ABCMeta` that verifies things or a metaclass to implement some signals and slots automatically.
Python yes, I'm not sure about pypy.
It might be fine by you, but it *isn't* fine for a project who's (eventual) goal is to have parity with everything in CPython. Not having f-strings means that any program written for CPython 3.6 won't be able to be run in PyPy3 once it (otherwise) reached parity with 3.6.
Honestly, I know it sounds stupid, but I don't know. I'm running GalliumOS, and just using a terminal on there.
I opened the terminal in the Downloads folder (where the script is) and then I use python script.py It seems to run just fine.
The result would be a pandas dataframe. The difference would be that the processing occurs on the db server instead of from pandas. Basically, Pandas would have to generate SQL. If I have a large table I want to process, it is real slow to pull the data, then use Pandas to manipulate it. I could also run into memory limitations. If pandas could maintain a connection with the DB, and generate SQL from my commands, I could use Pandas on large datasets. Dplyr allows this, but dplyr is really a front end for SQL. 
2.7.12
Author of Seaborn has graduated from Stanford as now doesn't have web hosting w/ them anymore, there's been talk on Twitter about having pydata host the documentation.
And just posted on that issue, the documentation can be found at: https://seaborn.github.io/
I did that, and it ran the script but it gave the same error; "TypeError: cannot use a bytes pattern on a string-like object"
It leaks your e-mail address, all configured VCS repo's. It also shoves the settings for the current project into the repository. Any settings in third party plugins are also published.
&gt; 64 bit is an extension of the x86 architecture It is absolutely not. 64-bit [long mode](https://en.wikipedia.org/wiki/Long_mode) does not natively understand 32-bit x86 instructions. x86-64 CPUs just also implement the 16/32-bit x86 instruction sets as part of a separate sub-mode, for the sake of compatibility.
If you're building an API anyway, you could build the UI in a client-side framework like React/Angular and rely on the API as the single source of truth. There are benefits and drawbacks to that approach, but it's worth considering.
Would you consider the API a Django App? 
[removed]
That may be the case, but when I've done it on a tablet and a phone, I've had to connect to a network called WiFi Setup, which then directed me to install some kind of software which would connect me to Eduroam.
[asynctwitch](http://github.com/martmists/asynctwitch) It's a very new, not too optimised Asyncio-based wrapper for twitch.tv's IRCv3 Protocol. It's still highly in development, and is getting a sister project once I get to fix the backend.
Try [pyo](http://ajaxsoundstudio.com/software/pyo/). Does realtime signal processing, especially for audio. Has been quite a while since I last used it, but it worked like a charm. If you do not need to stay in the Python realm, dedicated languages like Faust, pd, etc. might suit your needs better.
For the sake of completeness, I'll add my own answer here. Django isn't bad, in fact, if you're making something which needs sql, authentication and everything it's probably a good start. I myself prefer [kyoukai](http://github.com/sundwarf/kyoukai) because I prefer having an asyncio-based solution. However, kyoukai is still in early stages and is only the bare bones. Once it gets sql, authentication and things like that built in I will definitely recommend it for bigger projects.
Some time ago, I wrote a terminal-based text editor in ruby. I had the same idea as you -- to avoid the curses dependency by using ANSI codes. Here is the code: https://github.com/wx13/jedi. It worked pretty well, but I ran into some strange issues with some terminals. In one case, all the text displayed backward (right-to-left) in a particular terminal. Since then, I have written a [new text editor](https://github.com/wx13/sith) (in go) using the [termbox-go](https://github.com/nsf/termbox-go) library. There seems to also be a python API to the original (C) [termbox](https://github.com/nsf/termbox) library. I find termbox much simpler to work with than curses. It still uses ANSI codes under the hood, but handles all the messy terminal stuff for you. So yes, you can write a text editor using only ANSI codes. It's actually kind of fun to learn all the crazy things you can do to a terminal just by echoing some characters. The downside is you must be prepared to handle all sorts of terminal-dependent weirdness.
If you're worried just use [gitlab](http://www.gitlab.com) for free privates.
This is quite nice!
This is the right answer. It's boilerplate, but that's perfectly fine. 
I suggest you work by *features*, not by layers of technology. Choose a feature. Implement its API, then build the client side on top of that API. Choose the next feature, rinse and repeat.
&gt; If you run into trouble installing libraries with C/C++/Fortran/external dependencies barring fortran, honestly I think its easier to just install the visual C++ build tools these days. works well, no need to hunt through a page for a package, download that, open a prompt in that folder, then do the pip install, instead of just doing a normal install!
Sounds like a simple problem. Try posting your code in r/learnpython.
Thanks! I'll be sure to look through these.
I don't want to argue, I have two copies of the code, one with about 3 comments in the whole thing and this copy. My teacher's already seen the non-commented one, and just wants one with a Comment-per-Line rule so he can see I'm not copying from somewhere. I know they look stupid, especially when it's something like print("Hello") #This outputs hello. I'm going to be sending him both files. And I've read up on them now. It seems to be what I'd done.
Or local git. Not everything has to be pushed out to github/gitlab/gitbucket/git&lt;container&gt;!
What features of these articles made them "top"?
If someone could explain pypy I would appreciate it greatly. Is it like python foo.py but instead you write pypy foo.py and it will run it quicker?
use anaconda
I'll throw this in there in case you're function is something super weird, but if you for whatever reason need to fit to a specific function (something more complex than a polynomial), then you can use [scipy.optimize.curve_fit](http://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html). This might be a little bit overkill for your needs, but may serve you well in the future if you have to do multi-parameter curve fitting. I used it at work to fit sample of data to [a function like this](http://i.imgur.com/48oIwnV.png) and get the curve parameters (Su, t0 and k, in this example). 
That is because Arch solved this problem (correctly IMHO) a full year before PEP394! Arch : - python2 = always python2 - python3 = always python3 - python = always latest stable version of python (e.g. currently 3.5.2) But because of some dinguses firing back with PEP394, python on almost every other distro (at least until some arbitrary disaster point before rapidly approaching 2020) still points to 2.7 The proper way to force python=python2.7 on Arch is to use a virtual environment (and possibly just add the activation to your shell startup script) As a more philosophical note, if you are upset by Arch's decision (WAY BACK in 2010, as others have pointed out!) to default to the latest stable package, you are simply barking up the wrong tree with a rolling distro. You will never be happy.
[removed]
The Django API designers are brilliant, the documentation is brilliant, and the whole thing coheres so you don't have to waste time picking out a form library, template system, orm, or wading through boilerplate projects to find ones you like. etc etc and the plugin ecosystem is amazing(stuff like rest framework, haystack, etc). If you just want to make a db backed website with the least fuss go Django. If you are doing a lot with your database, maybe pick something that integrates more easily with sqlalchemy. If you are super worried about eking out every drop of performance...you probably dont want python but if you do maybe falcon or something.
http://materializecss.com/ - much nicer than bootstrap out of the box
 &gt;&gt;&gt; ages = [person.age for person in Community] &gt;&gt;&gt; ages [25, 21, 37, 5] You can also reference by index, but by field name is usually more readable. &gt;&gt;&gt; ages = [person[2] for person in Community] &gt;&gt;&gt; ages [25, 21, 37, 5] 
There's a couple of extra bits. Most people interested in using PyPy are using Python for hosting web applications, as those are the typical examples of Python applications which benefit from a JIT. "Idiomatic" python, which uses comprehensions and lots of exceptions as EAFTP rather than LBYL, perform poorly under PyPy for the same reason this style would perform poorly under Java - the JIT optimizes better for "dumb" looking code rather than "clever" code. And although the folks behind PyPy are doing great work on trying to support projects like Numpy/Scipy, you're still better off for the time being using those projects through CPython than PyPy.
Unless all the systems you need are on the same network, yes you do. 
Aside from /u/analogj 's remarks, your not actually encrypting. Just encoding strings. Your encoding/decoding methods are not symmetrical either, because your special case handling is relying on lower() methods which won't work for all ascii characters (not even considering unicode case right now). Quick refactor to pull your methods into functions and add a single unit test to check for equivalence of encoding/decoding all ascii printable values shows that it fails. https://gist.github.com/anonymous/9cc8a725299d246f24899285fd717683 You may want to head over to /r/learnpython for things like code reviews in the future.
This doesn't exactly answer my question. I don't want all of the ages, let's say I just wanted bills age, is there any way to do that? In this example with the list, I don't know his index in the list. Or if let's say that namedtuple was assigned to a variable like person1, person2 etc, I don't know the variable name I only know one of the fields or something. 
 import random MOBhp=100 def ATTACK(TYPEatck): # &lt;-- don't pass the MOBhp global variable as argument global MOBhp print ('the type attack chosen was ',TYPEatck,'the MOB has ',MOBhp) if TYPEatck =='M'or TYPEatck =='m': print ('the ',PLAYER,' used melee to attack',MOB) MOBhp=MOBhp-10 elif TYPEatck =='R'or TYPEatck =='r': print ('the ',PLAYER,' used range to attack',MOB) MOBhp=MOBhp-5 else: print ('please choose a valid attack') print ('the MOB hitpoints are ',MOBhp) return MOBhp; PLAYER='HERO' MOB='Dragon' AC=12 while MOBhp &gt; 0: TYPEatck=random.choice('RM') ATTACK(TYPEatck) # &lt;-- don't pass the MOBhp global variable as argument print('really the MOB hitpoints are ', MOBhp) print(MOB,'was slain by ',PLAYER) 
If you're a Python developer, it pays to be at least familiar with it. Many jobs specific to Python work are often related to Django. However I personally never use it. While the opinionated setup is great when you don't want to worry about making decisions and the built in admin ui is nice for that, they haven't ever actually fit a use case I've had. Instead I have liked flask or aiohttp (I prefer the latter more, it just feels really clean). I may have to write a touch more, but in the end my project is skim and only whatever I need to do the job, instead of all these "in case you need it" things (I don't always need a DB, or admin ui, or any templating with jinja2, for example). Personally I also didn't like DRF. It's really solid and works, but I just don't like how it feels to encourage leaking tables to the front end, almost entirely. I tend to feel like using the other smaller libraries can help you better reason about the problem if organized well and kept small. That said, however, in a larger team - I'd think Django may be better to avoid the unlimited number of arguments of which lib and how to organize it, and instead focus on delivering stuff quickly. That's not to say you can't with other libs, but there's (general) less to quibble about - which matters depending on the team.
 for person in Community: if person.name == "Bill": bills_age = person.age break print(bills_age) # 25 male_ages = [] for person in Community: if person.gender == "Male": male_ages.append(person.age) print(male_ages) # [25, 37] # list comprehension alternative: male_ages = [person.age for person in Community if person.gender == "Male"]
Probably best to comment on Medium and see if they respond. I've seen people discuss about the scoring in the previous month: https://www.reddit.com/r/Python/comments/4wt9y0/top_10_python_articles_for_the_past_month/
I remember that too. Apparently the article is updated as of Oct 9 and it appears all the typos and errors are fixed. It's still great post for many beginners.
groupby() actually does exist. from asq.initiators import query BLONDE = 'blonde' NOT_BLONDE = 'not blonde' people = [{'firstname': 'pam', 'lastname': 'dolphinhands', 'hair': BLONDE}, {'firstname': 'ceril', 'lastname': 'figgis', 'hair': NOT_BLONDE}, {'firstname': 'cheryl', 'lastname': 'tunt', 'hair': NOT_BLONDE}] query(people).group_by(lambda p: p['hair']) \ .to_list() Leads to [Grouping(key='blonde', items=[{'lastname': 'dolphinhands', 'hair': 'blonde', 'firstname': 'pam'}]), Grouping(key='not blonde', items=[{'lastname': 'figgis', 'hair': 'not blonde', 'firstname': 'ceril'}, {'lastname': 'tunt', 'hair': 'not blonde', 'firstname': 'cheryl'}])]
"most part" are the important words. Wow extensions require rebuild and I am methods fail to find builds for specific cpython runtime, let alone pypy.. Honestly - never seen any extension build anywhere for pypy. It's a shame though that people do not care to provide these builds.
I think you are right. My only goal for this is to all my computers' sound through and FIR filter before it gets out on the DAC. I need this to linearize my headphones for listning experiments :)
You'll get a lot more help at /r/learnpython. 
Doesn't matter. Namedtuples never seems to listen to what I have to say anyhow.
First of all, try /r/learnpython. Next, what are you trying to do? D-Bus is purely a software thing, so there's no "hardware abstraction layer" there. Is your HAL a different process that communicates over D-Bus?
&gt; filter(lambda person: person.name=='Bill', Community).pop().age But kbob's variant is better (afaik it's recommended to use list comprehension instead of filter)
Usb stick? 
Django is very opinionated, I prefer flask which is less complex
&gt; 30 ESSENTIAL PYTHON TIPS AND TRICKS FOR PROGRAMMERS &gt; sys.hexversion != 50660080 Tip #31: WhyTF are you comparing "hexversion" to decimal instead of hex? OK that's a question, not a tip. 50660080 = 0x30502f0 = version 3.5.2 final per https://docs.python.org/3/library/sys.html#sys.hexversion and https://docs.python.org/3/c-api/apiabiversion.html#apiabiversion Or just use sys.version_info like they mention.
Hmm? Not sure what you mean. Care to explain what's wrong with namedtuples?
Did webrepl not work? Did you replace boot.py? Try adding: import webrpl webrepl.start() to your boot.py
Probably even slower.
&gt; So, I'd like to insert some debugging to show how many connections are in use. How do I do that? https://github.com/sourcegraph/psycopg2/blob/master/psycopg2/pool.py#L52 `_pool` is the pool of available connections and `_used` is a map of keys to in-use connections.
Is the default interoreter of python.org the cPython one?
what is more readable and efficient: `Counter(data).most_common(1)` or `max(set(data),key=data.count)` Guess which one is from the article.
They want to know the correct pronunciation. I think it is pronounced like the planet jupiter.
Oh. Same here
Yeah, I'm struggling with it as well, to reliably start webrepl, or even a serial interface the hardware reset button must be pressed. I'm using a nodeMCU and it's going to have a mega2560 as a daughter board, so I'm just going to set up a hardware WDT on the mega so it doesn't really affect me.
Honestly, can we please stop this Medium thing? it's horrible. 
Another alternative would be to sort the list of named tuples based upon the value you want to sum/key off of and then use itertools.groupby Community = sorted(Community, key=lambda p: p.gender) for gender, grouped_list in itertools.groupby(Community, lambda p:p.gender) print("%s ages: %s" % (gender, [p.age for p in grouped_list]))
Or Bitbucket. They also offer free repos.
Is there a tool to do *live* plots? Like reading data from serial or other protocol?
Thanks.
I believe Bokeh can interact with streaming data, though I haven't used that functionality personally. That might come with the overhead of using their bokeh server stuff though.
Toyplot has some interactivity as well.
Actually I think it's not too horrible. On mobile it gives me a single glance at what the end result looks like, and he includes links that presumably would leave me a single click away from an interactive version if I were on a full desktop. Might be a well thought out decision. 
"Fluent Python" is a really great book, it helped me the most. There is also "Effective Python", which helped me to understand more about python too. 
Do you happen to have some links with examples showing how this would be implemented?
I just started chipping away at "Fluent Python." Python is also my first and most-used language, and Fluent Python seems like a great beginner/intermediate step that goes more in-depth than your standard beginner tutorial.
Yes.
Thank you for the help! I am looking over what you have here now and trying it in my code. The original while loop ensured that both the hero and the mob had more than zero hit points. I wanted to stop the fight when one of the two died and this is what we came up with. I will reset the variable to zero for the user input. for now I was just automating the decision so I could test my code. global variables are not introduced in this course and the requirements to use a function to accomplish this are self imposed. we could simply just copy and past the code into the loops as needed but I want to learn how to pass variables into functions as this is the part of python and coding I need work on. for the most part the class is below my skill level and I will never be a programmer but I have experience doing other coding for my other degree plans. I want to make this harder on myself so I actually get something from this course. I can post the working code I created without the function if that will help to show what I am trying to attempt.
Thank you I am looking at this and it works. I now have to make it more complex to align with my original idea in order to further test it. I really appreciate your help on this!
They've done it for SEO reasons. If your page loads faster, you get a lower bounce rate and a bump in rankings. Plus, your images show up on Google Image Search when someone searches for "matplotlib example" or something like that. It's also quicker, since she can rip these images off the individual library's sites and doesn't have to code an example. It's a blog on a product site. The purpose of those is usually to attract quick links that will push the main site up in the search engine rankings. I don't think static images improve the article. It's beneficial to the author, not the reader.
I've [had a look at Fluent Python](http://1.droppdf.com/files/X06AR/fluent-python-2015-.pdf), it looks good but it's pretty heavy reading.
I thought VC supports Clang now.
Well, for each library, she provides a link to a fully working (interactive) demo. Seems perfectly reasonable to me.
Follow some web design RSS feeds. Looking at good designs for hours and hours is the only way to actually develop some skills. 
What exactly do you not understand from the sentence: "If you are using Windows and for some reason you want to use Linux dependencies/libraries/etc, use Docker". OK, let me add something here if it's not obvious: "If you don't want to use Docker through a Hypervisor, use Linux."
I have actually done it but I'm not the first, the Docker people who released Docker for Windows did it before me. Take your complaints with the Docker team who released Docker for Windows and not for Linux exclusively. I am using Docker for Windows **right now**. I guess I'm not the only one.
I **never** proposed that the *recommended* way to run Python in Windows is through Docker. I you read my first post you will see I recommend official Python / virtualenv or Anaconda with condaenvs. That's why I said: "**If, for some reason** you want to use Linux dependencies/libraries/etc use Docker.
What about it?
If you consider Fluent Python heavy reading, I honestly don't think you're going to find what you're looking for in a book. I don't know of any Python book that does a better job of explaining these very complex topics in an approachable manner. You may need to find a Python mentor that will talk you through this stuff.
Maybe you want a database? Or https://github.com/EliotBerriot/lifter
Great idea!
This will be awesome! I want to become full python developer by next summer. I would love to find out what employers want python developers to know.
Hadn't heard of [Yarn](http://i.imgur.com/wTwOhun.png) before. That's embarrassing for them...
How many more "How to Dockerize a web application" posts do we need? :p
So did your parents ground you?
Ah ok, little more to it then. So basically only raise it yourself in `__next__()`, and catch it in other situations.
It does? That's great if so, though I guess I wonder what debugging integration would be like.
https://almsaeedstudio.com/themes/AdminLTE/index2.html Source at https://github.com/almasaeed2010/AdminLTE No need to use all js plugins.
I've seen too often developers who poopoo the Django ORM as being weak and SQLAlchemy as being superior in power, get their wish and then shoot themselves in the foot and destroy their database royally. Django ORM is perfect. It forces you into simple and useful relations between objects. It provides nearly automagical migrations that most of the time are just pre-made for you. It ensures that your unit tests run on the same table structure as well. And then, for people that actually need more power, it provides a simple window into the raw SQL. The point of the ORM is to provide simple and safe API to 95% of your daily usage. For the more crazy stuff, there is SQL already. There is no need to invent super crazy syntax to represent nested query aggregation over calls to custom functions as Python.
You do know that you can write functions in your models? Like write a function that returns a queryset with prefetch already set up correctly. By default. Django is Python - every method can be overridden. Also - do you even unit test, bro? You can retrieve the number of queries that are done by a piece of code. django.test.TransactionTestCase.assertNumQueries does that. Mandate that every unit test must specify the expected max and min number of queries and check that with a base TestCase class or a meta class. You want power? Python has all the power. Use it.
I started to learn Python at uni a few years back, and have since used it a fair bit to automate tasks at work. Is there actually potential for careers in pure Python? I always saw it as "another tool" to be used with other languages for a role.
 Could you return _used to get the number of ports which are currently in use?
Pure Python is fairly rare. A lot of companies have Python combined with other languages here and there. The split depends on the company and industry. I work as a software developer for a biotech company. I work mainly on the scientific stack (i.e. the back end), so 90% of my work is in Python on the back end, with a little bit of Go, and HTML/React/JS thrown in to the mix.
/r/programmingdadjokes is calling
care to help? :D
I will be messaging you on [**2016-10-17 21:28:09 UTC**](http://www.wolframalpha.com/input/?i=2016-10-17 21:28:09 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/57bdo4/free_python_books_for_educators_students/d8qu0zw) [**9 OTHERS CLICKED THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/57bdo4/free_python_books_for_educators_students/d8qu0zw]%0A%0ARemindMe! 96 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! d8qu5ji) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
The site you're on now, Reddit, was written in Python, so the answer is clearly "yes".
"Comma-separated" is for clauses as well, not just values.
[removed]
I am using django-channels along with celery right now so it is not like Django is standing still in this regards. Still I am quite interested in seeing a good asyncio web server get some traction.
can you give a link?
"clearly" Edit: why the downvotes? The OP didn't know that people develop in Pytohn full time. How would they know that reddit is written in Python and that there are "clearly" people hired to work in Python full-time? Just because you're a Python *expert* doesn't mean others know things that are obvious for you
Honestly, can we stop this "Printing Press" thing? It's horrible. Don't blame the medium for bad authors. As far as 'blog'/'article' sites go Medium is one of the better ones to have emerged in the last ~5 or so years. Would you prefer a Gist? A Usenet post? Reddit post? A tumblr blog?
I have developed in Python on Windows for years without problems. The only things that trips people up is compiling C packages on Windows. If you install Visual Studio 2015 Community and the [Microsoft Visual C++ Compiler for Python](https://www.microsoft.com/en-us/download/details.aspx?id=44266) you won't have issues. You should learn to do it right the first time rather than installing a bunch of shit you don't need. Edit: You can also install the native Gnuwin32 and get all of the GNU utilities you're used to without that janky unxutils (which is YEARS out of date and officially unmaintained) Edit 2: While I'm shilling Windows I'm also going to push choco, which is the native Windows package manger from Microsoft. You should use it. I like it better than apt C:\&gt; choco install gnuwin32-coreutils.install
+1 anyone in this thread who says developing Python on Windows is a pain is doing something wrong
Install Visual Studio 2015 Community and the [Microsoft Visual C++ Compiler for Python](https://www.microsoft.com/en-us/download/details.aspx?id=44266) you won't have issues anymore
It's not about the author. It's about the format. 
Direct link for September thread https://news.ycombinator.com/item?id=12405698
Use Bitbucket which has unlimited private repos for up to 5 users
[removed]
Well, your username fits perfectly.
That's weird that he'd tell you to find one rather than at least recommending one or two (what does he get paid for, anyway?). Why don't you ask him what libraries he uses?
I got a job in DevOps basically just because of python automation experience.
No. The best Python book is John Zelle's: https://www.amazon.com/Python-Programming-Introduction-Computer-Science/dp/1590282418. 
[removed]
Noted :)
&gt; Edit: I assume I am being downvoted since OP edited his post and fixed most of the issues. Yeah, that's probably why. Hah.
I was a real fan of Falcon until I tried to create a websocket. As Flask actually has a very well documented and maintained plugin for that, I had to switch. Yes, yes, I know websockets have nothing to do with REST, but I throw my 2c just in case.
pro-hack; You can get autocomplete in PyCharm for dynamic object attributes by adding the dynamic members to the class stub in a .pyi file; I just figured this out yesterday and I was so excited!
&gt; Also starting it from console is really annoying. As I understand you are doing mostly data analysis, then the terminal must be your best friend ;) and also tqdm to see some progress while waiting for computing all the data :D &gt;Or have it navigate to the most recent project directory and open my last file automatically? By the way you can set up a [jupyterhub](https://github.com/jupyterhub/jupyterhub), then all your notebooks are running as long as the server is running. &gt; As I understand it, jupyter or I python is widely appreciated, why is it's integrated support for alternative themes and plugin so nasty? Here is a [theme switcher](https://github.com/dunovank/jupyter-themes), pip instalable. Looks easy enough to change between the installed themes. &gt; Also having to work in a browser kind of annoys me. Personally for me it is no problem to use the browser, but they are working on [jupyterLab](https://github.com/jupyterlab/jupyterlab) which combines many parts of jupyter into a sole gui application. Keep in mind it is very alpha. The last time I tried it, it was not that great, they have to do alot of work. &gt; I mainly want to process my scientific data, but haven't quite found the perfect workflow yet :) For me jupyter is mostly for tinkering with the data and frameworks, you know playing around get a feeling for it, look for traps and so on. As soon as I think I am ready I start atom and wirte some production ready code. After that I will ssh into the server pull the latest changes from my git repo and start the damn thing. What I wish for the future would be a git integration, a better .py convertion (don't need all that markdown and cell stuff in the raw py file) and a possibility of collaborative coding, because besides data science the notebooks are great for tutorials why not going the next step and offer more for the electronical education sector;)
You might find this interesting. A python interpreter in 500 lines of python. http://www.aosabook.org/en/500L/a-python-interpreter-written-in-python.html
Does mypy help speed up execution, say with Cython or numba?
Mypy doesn't have any effect on execution speed. Actually it has no runtime effect whatsoever.
You hit the nail on the head. It is definitely the first book I've purchased that went beyond the beginners level. 
Questions like this are hard to answer as they are rather subjective, but I will give it a shot. Firstly on the price. That price gets an activation key that never expires, which means you can end up using the software for years. Over that longer time frame the price is probably less than what you would pay for you daily cup of coffee ;) As to *the Microsoft orientated feature list*, I'm not sure that is 100% correct. Now it's true Zeus understands Microsoft solution files, so it does work well with Microsoft C# and Microsoft C/C++. But it also understands Python, Go, C/C++ (i.e MinGW, GCC etc), Rust and a host of other languages. As to the selling points, that is lot harder to answer. I personally like the fact the keyboard is configurable and the editor is keyboard centric. I'm a long time Brief guy who doesn't particularly like the mouse. I also enjoy the fact that it is fast starting, responsive and very stable. I also like the fact that it automatically manages my ctags information (via the workspace). Now I could go on and on, but it's always hard to know what features are important to which users. But you are correct, in that it does not have any in-built git support and it is not cross-platform :(
Did you read your post? The code isn't all in a code block, making it very difficult to read. /r/learnpython might be a better place to ask this.
Sorry about that
Here is my [setup + vim mode](http://imgur.com/aK7ilH8). The only thing I miss is ctrl + space instead tab for autocompletion. It's not possible to change easily, it's hardcoded in source code.
I suppose my job isn't pure Python, but at least for a lot of the team it's the primary language, the other being javascript. We make a web app in Python. Early on in the product's life the job was like 90% Python, but as web apps evolve it's a bit more like 60% work. 
Man I thought something went down at Stanford. xD
Thanks!
I'm data science graduate student and it's almost exclusively Python and R.
Unfortunately not enough if you have to deal with tens of plots simultaneously.
If you speak ONLY Python, being hired is a challenge. But if Python is your main language to support other skill set (testing, data analysis and such) the chances are good. We've worked with many Python programmers and no two skill sets were alike - there were low level hardware guys, aerospace engineers, even economy/finance analysts, etc. Good luck with job hunting. Hope you'll succeed!
That sounds hard to believe. How do you managing 10s of plots and get them large enough to be useful? I've done wind turbine testing for a 40 meter blade and monitored strain gages. I can handle about 10 and that's when I'm hyper focused on the task. I'm not picking off 10 graphs in realtime; I'm eyeballing. If you're actually interacting with the plots vs. trying to predict things, you need a different level of quality. If you have 10s of plots, you can filter data and still leave all the peaks. I can interact with 2 or so plots in realtime and that's because it's a magnitude/phase plot or a flutter speed/frequency plot and you fundamentally need both pieces.
Yes...that is an ORM. With no activity on Github. That doesn't support relationships (it seems).
It's still optional and doesn't affect the runtime at all. So we can have the best of both worlds.
Testing is a huge topic, and people do it for various purposes. Testing for its own sake is nonsense, so ask yourself *why* you want more tests. TDD in particular is not so much about testing as a safeguard against bug (although it also helps there); the main focus in TDD is on tests as a design aid (write down you specs and requirements and assumptions in the form of tests) and documentation (tests show others how you intend your code to be called, and what kind of behavior to expect; and absence of a test case hints at undefined behavior). If your main goal is safeguarding and verification, then write simulation tests, and write them after the fact; a typical workflow here is to test your code manually while developing (use an interactive session like a REPL to test parts in isolation), and then automate your manual workflow as the codebase converges. OTOH if you do want to roll with TDD, focus on unit tests and finer-grained integration tests, and be religious about red-green-refactor. Introducing TDD in a legacy project is difficult and suboptimal, so that's probably not a good idea; I would suggest using the methodology on a low-profile greenfield project first so you can get comfortable and learn what works for you and what doesn't. Either way, one thing I do a lot is write a test suite that is designed to run in under a second (with proper unit tests, this is almost always possible, leaving only the actual IO activity untested), and just keep them running in an extra terminal window next to my code. Any change in the codebase produces instant test feedback that way, which makes for a pretty awesome development experience.
Yeah, I didn't find it heavy at all. Maybe start with Effective Python and then go to Fluent Python? That's the way I did it and the author of Effective Python explains some inner workings too, so maybe that helps to get a first grasp?
Thanks a lot, hackers guide to python looks like exactly what I want.
You can already do that...
Most of the Python language isn't necessary but it sure makes for more readable and maintainable code.
Yup, that makes sense. Looking at my how my own code evolves in terms of type annotations, there is pretty much going on what you just described.
Don't you use more docker/vagrant and testing stuff now though? I'm also in devops and python doesn't come up as much as it does in research.
No one is going to write the program for you. Please post this on r/learnpython to ask for help where you are having issues in the questions you outlined. 
Nobody there will do his homework for him either.
Oh sry I actually ment YouTube ^^.Especially the front-page with the highest rated videos should be inspired by it.
A way to find small jobs through reddit would be cool.
This sounds silly, but try to not use unittest and use something with less overhead/boilerplate like pytest. I know for me, I'm more likely to write tests if I feel like they take less effort to write.
Mypy is essentially a "type linter"; it has NO effect on runtime whatsoever.
I like where you want to take this. You are competing with a number of other asyncio frameworks for market share though. I say this because I wasted(I could say spent, but I am comparing your hello world to how fast it took me to find flask's) a good 15 minutes trying to follow the documentation on https://mirai.veriny.tf/en/latest/gettingstarted.html and I found it lacking. Jumping back to the Github page I was able to get it up and running, but when I went to use app.run(host="127.0.0.1", port=4444), which is on your docs above, I found host was not an input parameter, but digging into kyoukai.app I see that the run method takes ip as the appropriate parameter name. Inconsistencies like this can be a huge turn off when I am first reviewing a new framework. Are you actively looking for contributors, or is this a project you want to maintain control over? I see you are the only contributor(I don't count the one other user listed there since its a 341 to 1 commit ratio). Also I don't see documentation on deployment. On the first visits to a docs page I look for this. If I can't get access to information on deploying this then effectively it's just a curiosity to me. Hope you don't think I am being harsh. I want a Flask like asyncio framework, but the utility of Flask for me comes from the network effects of those who are using it, and potentially contributing to it. If someone who is looking to be an early adopter get's turned off in the first 30 minutes of learning about this framework then I think you will be missing out on those first users who are going to evangelize your framework.
Can't enter an email to download on mobile for some reason.
Python would work well for this, but if you only have experience with HTML/CSS/JS, you might find PHP easier as it's more ubiquitous. With Python, you're going to need to understand more about your stack and figure out your deployment strategy. In contrast, nearly any web host will let you drop php files on it and serve them. That being said, it's certainly worth playing with python. Perhaps try setting up django or flask locally and see how that feels.
I imagine this is part of Pyston development. Cpython won't realize any gains, but statically typed code running in Pyston ought to experience speedups.
I really enjoyed this thread! Some of your projects are really impressive! One of my recent projects was creating a Telegram bot in python that allowed you to chat with it to search for songs, retrieve lyrics as well as retrieve videos of the song in question. It's actually a really great project for beginners to try. **Telegrambot:** https://telegram.me/MusicLyricsVideoBot **Python Code for the bot:** https://github.com/davidkohcw/MusicLyricsVideoBot-Public/blob/master/MusicLyricsVideoBot-Delegator-Public.py
&gt; I am personally skeptical that something like the stock market can be effectively navigated consistently with math I'm not. People are just feeding in the wrong information, IMHO. I'd love to have the time to sit down and try and train a Stock model with absolutely 'unrelated' information and see what it comes up with.
Seven hours and no comments yet? This was probably the first thing on reddit that actually made me laugh! Nice one. :-)
Fixed it! Sorry!
I get what you're saying, but for a new user of python I'd recommend anaconda over vb15 only to minimize the learning curve. If the objective is to get them running quickly, and with minimum fuss, having them compile from source adds a whole layer of complexity and potential for failure that could negatively taint their early impressions of python. New users unfamiliar with development environments are used to installing a tool and using it immediately. If they have to spend a pile of time downloading sources and installing dependencies they're that much further from that first "win" that validates their decision to use Python and solidifies a life-long love for the language.
The language semantics, high level primitives, included libraries aka batteries, and full ecosystem (high quality 3rd party libraries, developers availability, services support) 
What does it do? I don't get it. 
I'm not sure if fundamental analysis and machine learning are necessarily related at all.
 File "/path/to/myfile.py", line 151, in &lt;module&gt; driver = chromeDriver() File "/path/to/myfile.py", line 137, in chromeDriver driver = webdriver.Chrome(chromedriver, chrome_options=options) You're doing something wrong here, just try `driver = Chrome()` -- if that doesn't work then it's not your code that is broken. (`from selenium.webdriver import Chrome`)
A beer, cheapskate? :) Heck, if he's saved you as much time as he's saved me the number of beers should run well into double figures!!!
You wouldn't be the first person to try, and you wouldn't be the first person to fail. 
When dealing with a code base that is already out in the wild, but has minimal testing, I personally use a rule where I will always write a unit test when I change something or add/remove a feature. In this sense, you don't get overwhelmed with having to write tests for all of the untested code, which can be daunting. If you always take the time to write a unit test for YOUR code as you add it, you will be able to: 1) Start writing your tests for tiny pieces of code, allowing you to introduce testing without slowing down progress toooo much. 2) Handle any bootstrapping that others would need to deal with to write a unit test 3) Provide examples for your team of how they can write their unit tests. I have found that when I start doing this others will follow suit. Eventually, we can start enforcing code coverage minimums for the app, and it is not hard to slowly increase it. In regards to WHY you should care about testing, the answer is simple IMHO. It takes less time to write a unit test than it does to debug an issue in production and deploy a bugfix. Unit testing does not guarantee you won't hit bugs, but makes it less likely.
read the side bar and the big green sticky at the top
In the name of being pragmatic, it is probably also worth checking the URL causing the error and trying to curl it from the same box where the script is running. Depending on what your script is doing, it might be getting banned from some sites for periods of time.
&gt;fast paced dev team ... slow me down too much Not picking on you, serious question. How much time do you spend fixing code that went out bad, or fails in QA? In my experience, when you "don't have time for tests" you end up spending a significant part or your day dealing with emergencies. You can either spend your time writing tests, or spend the same amount of time fixing production issues. 
As a PyCharm user, and fairly young dev, I'm interested what are the pros of using PyDev instead? Or what are the things you like about PyDev that are unlike PyCharm? Or maybe you've never tried PyCharm?
could you retry it? I just downloaded a copy on my mobile.
In a single project? No. Curious, why would you want to do that?
Try downloading and installing the wheel found at http://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32 To install pywin32 system files, run `python.exe Scripts\pywin32_postinstall.py -install` from an elevated command prompt. The fact that you are running on a 64bit OS doesn't matter if the version of python you are running is only 32bit, so choose pywin32-220.1-cp35-cp35m-win32.whl
same reason node does it A v1 - B v1 - C v2 - C v1 A wants C 1.0, B (a third party dependency which I don't care about the dependencies of, since I would rather treat it as a black box with an API) wants C 2.0, this can't work in python, it can work in node I need to be aware of every dependency my dependency's have, and their dependencies as well, so on and so fourth, which is pretty lame Realistically, I'd imagine that a custom loader would be able to do this fairly well, probably would need to do some magic around `sys.modules` though (I don't know how deeply tied into python that variable is, but if it is only touched by loaders, then adding a version number to each module in sys.modules would be fairly okay I'd imagine)
PyCharm and PyDev share a lot of code related to debugging and code intelligence.
homework
Hi /r/Python :) I wrote an app for Destiny the game that mails me a list of the unique items one of the Vendors sells every week. Each weekend a special vendor (called Xur) visits the social space in Destiny, he sells exotic items that are very rare in the game. However, he can be very tricky to find and his inventory changes each weekend - so if you don't find him you could miss out on some great gear! As there were very few resources around dedicated to working with an API like this, I decided to create a how-to guide in the hopes it may help some one else out. [Part 1 of the guide shows you how to pull the vendors inventory.](http://allynh.com/blog/creating-a-python-app-for-the-destiny-api/) [Part 2 of the guide creates a HTML formatted mail with the inventory and mails it via gmail.](http://allynh.com/blog/creating-a-python-app-for-destiny-part-2-emailing-xurs-inventory/) I'm currently working on the next part, which allows me to transfer inventory items between characters :)
I've only been in devops for a couple years. There company I work for her been around for well over a decade and they're still in the process of modernizing. They have their own data center so no cloud yet. We've only just begun looking at docker. Instead of vagrant we writer our own interface to vsphere. We also recently merged with another competitor and their deploy methods were about the same as ours in terms of automation. Home bashed scripts to handle lots of legacy applications that weren't built with automation in mind. I've also interviewed a few places that weren't much different. You'll read a lot about cool new methods and the shops that use them. You'll never read about the big company's that Haber been around a while that are now trying to move in to dev ops but they're hiring big time right now 
Thanks. Ignore the curmudgeons. Some of us found it funny. 
That sounds like an interesting environment. If you folks are hiring for remote candidates, you should PM me ;)
Does PyDev allow you to develop files that are on a remote machine? My company is about to drop a pretty penny on PyCharm commercial licences and I'd love to save some money if there's another alternative.
one really won't run into it since imports can't be done by version, so everyone does a lot more effort into maintaining compatibility which is great, but I think things could be *better*, I think every package needing to maintain their own depreciation strategy and have each depreciation happen over several (&gt;6 for the larger projects) months as I said with my initial comment, I "want" it, doesn't mean I "need" it
You should try asking a more specific question. What exactly is not working? EDIT: Oops this is /r/python, ask this in r/learnpython instead
[Yes](http://knowyourmeme.com/memes/gotta-go-fast), [via proxy](http://knowyourmeme.com/memes/sanic-hegehog).
Personally, I find TDD overatted. Its seems to cover 2 areas: good design and improving quality, which can both be achieved by decent devs without TDD. Don't get me wrong, I write a lot of tests. pytest is my weapon of choice and I'd generally recommend just trying it out, follow the tutorials etc and then ask more specific questions. Make sure your tests are run regularly and before code is commited to master.
Thanks for the honest advice! I was wondering, has anyone ever thought of adding the option to start an IDE via the command line with args that specify a file and that it should be opened in draft mode? Then the IDE would come up with basically just the editor(with all the fun auto-complete features) opened on the file specified. I would really love this! Whenever I need to whip up a quick script I always end up using vim since it takes too long for the IDE to load , which loads with the previous project opened and then you have to open a new project and choose some options.... This is extremely annoying. Also, then when you do want to open PyCharm and work on the company's project you need to change it because your draft project pops up ! I would love to hear your thoughts about this, I've always wanted to bring this up to an IDE creator. I think it is especially crucial to Python IDEs since I use Python for EVERYTHING and it's annoying that I can't tell the IDE the difference between a real project and just a random script. PS If this feature exists I'm sorry for the rant. (Even though I have looked and looked)
Got you. I'll post over at r/learn python. 
I feel like I should know what this means but I don't. Is it that the server will work on multiple requests at once? Would you have to configure a server like [Gunicorn AsyncIO](http://docs.gunicorn.org/en/stable/design.html#asyncio-workers)?
[thanks](http://giphy.com/gifs/onDu5bFg6fmRG/html5)
Looks cool and thanks for writing a short summary instead of just a link. :)
It could be an async/concurrency joke, too, if you sort of squint. Like the name was supposed to be asinc, but you had a race condition. Maybe? I don't know.
Maybe the code is great, maybe you're a competent programmer who has a nice project on his hands, but the name and intro post made me and (probably) a lot of people just dismiss it as some kid's weekend project EDIT: sure I'm an asshole, but at least I'm not a deviatart sonic fandom furry
Looks cool, I've been considering switching to Falcon but I'll have to try this out too. BTW, the link to "middleware" is broken :D
Hey /u/boq, sorry for the late reply. Are you having multiple threads open for all the communication over one COM port, or are you receiving a large amount of data over a singular thread and want to update the data simultaneously at a fast framerate? I'm not sure what code I have that I can share in it's current state, but I can maybe put something together quickly that you could use as a framework.
Okay np! Working on some code you can use as a framework. Hopefully I can upload it in 15-20 min or so. **Edit:** http://pastebin.com/z7jgsuXK Let me know if that works for you. You can hopefully use it as a good foundation to build off of. Depending on CPU speed, you may have to edit line #230 to make it update slower. At this point you're going to be entirely limited by serial communication. If you have access to the firmware of the serial device you may be able to rework some of that code to get transfer speed faster. I added some of the GUI functionality so you can see how to lay it out and add what you need. Also the entire window is resizable. Also because pyqtgraph is awesome, all the plots are interactive. You can also pause then right click the graph -&gt; export to CSV etc.
Nice work! Congrats for your first project. If you're interested in async flask-like frameworks you could also check out Twisted Klein. It exposes API that mirrors Flask is async by default , uses Twisted under the hood and also supports Python 3.5.
I found it very funny :-)
[Pivoting off actionable feedback](https://github.com/channelcat/sanic/commit/0d3e8b42b3552d7579b8c4f82758ac7905774c42) Hell of a commit comment if I've ever seen one
1. Does it run on PyPy? 2. In your benchmark testing scenario, how would the numbers compare if they were using PyPy (if possible?)
1. Not Yet. It requires python 3.5 which is currently unsupported. However, there is [hope on the horizon](https://morepypy.blogspot.com/2016/08/pypy-gets-funding-from-mozilla-for.html) 2. I did try pypy + gunicorn + meinheld for flask and falcon, but did not see any speed improvements (I gave it time to warm up too). AFAIK pypy is great at optimizing python code but does not speed up any C-based extensions, which I'm guessing are the bottleneck. I could have been doing it wrong though. In Sanic's case, we were seeing about 2-3x the performance before building out framework features (no router, no complex responses, no request timeouts). Since those were all made in pure python, there is a chance that Sanic could perform better with pypy when support is added for 3.5.
Any plans for connexion integration?
Somebody said "fast"? Submit it to https://www.techempower.com/benchmarks/ .
This looks really cool. At the moment, there are no plans, but we were planning on writing some swagger docs for a project that is using Sanic, and integrating with connexion seems like a good path :).
Thank you so much! It's a great help to have an example where data collection is kept in a separat thread. I'm sure I will be able to adapt this.
If PEP 484 support is important to you, I think PyCharm has better support than PyDev does. IIRC PyCharm will not only use annotations to do actual type checks on your code and flag errors, but PyDev just uses type annotations for completion.
I can't find the benchmark code in there anywhere. Is it not available? I was hoping to see something along the lines of https://github.com/faassen/howareyou such that I could throw pyramid into the mix.
 $ pip install sanic Collecting sanic Could not find a version that satisfies the requirement sanic (from versions: ) No matching distribution found for sanic darn :(
Have you compared it with weezy.web https://pypi.python.org/pypi/wheezy.web ?
I cloned it and ran the example; worked as advertised. This looks really cool. I've been wanting to make the switch to asyncio and Python 3. This looks like the framework I've been waiting for. I hate deploying flask too. It would be cool if it ran on windows only because some of my clients run windows. just [bouncing on ctrl-R in chromium](http://imgur.com/a/zo2MW ) the median latency is about 3ms. I saw 2ms once. It also jumps up to double digits occasionally. But definitely. goin. fast. (sanic) jeff@jlconsulting ~/repos/sanic $ py.test tests/ ============================= test session starts ============================== platform linux -- Python 3.5.2, pytest-3.0.3, py-1.4.31, pluggy-0.4.0 rootdir: /home/jeff/repos/sanic, inifile: collected 19 items tests/test_exceptions.py .. tests/test_middleware.py .... tests/test_requests.py ..... tests/test_routes.py ..... tests/test_utf8.py ... ========================== 19 passed in 0.26 seconds =========================== lookin good here too; are you sure this is your FIRST project?
Most of the code I've written is used in-house as tools for our operations teams, so when an application does something fishy I usually have time to go back and fix it, and it's usually not too painful because I do put in decent amount of time to make sure the code is organized and decently built (so I know where a potential issue is). The second most painful part is usually refactoring when I don't think my code structure through that well (second to testing when my code isn't built for it). That being said, I always have anxiety that there's a part that's not gonna work/that doesn't work as well as I think it does. This came back to bite me last week. I went off script on a demo and part of my code misbehaved and I wasn't able to explain why, which was embarrassing. So don't worry about picking on me. I do need to improve my game. It's a bit tough because its not in my team's culture because of the fast pace and the fact that a lot of our code is only ever used in-house.
Pytest seems to be recommended a lot as the lightweight tool of choice. I'll definitely check out those tutorials.
How soon will you implement blueprints?
Anything that changes your workflow takes time to get used to. I would recommend trying TDD with the unittest module. No extra dependencies. When you come back to code 6 months + later with a test suite you'll be amazed how quickly you can refactor/change it and be confident you didn't break something. I've been doing TDD for 5+ years. It can certainly suck your time if you write too many/pointless tests but over time you develop a sense of whats worth testing and what isn't. There's no better way to share information within an engineering org then a test suite.
I was able to replicate the output using this, but it still seems messy. # in reality, these lists are much bigger usernames = ["username" + str(x) for x in range(2)] passwords = ["password" + str(x) for x in range(6)] def chunk(iterable, c_size): """split up an iterable 'iterable' into chunks of size 'c_size'""" return [iterable[i:i+3] for i in range(0, len(iterable), c_size)] p_chunks = chunk(passwords, 3) for pswds in p_chunks: for un in usernames: for ps in pswds: print(un, ":", ps) print("="*10) 
[deleted] ^^^^^^^^^^^^^^^^0.4744 &gt; [What is this?](https://pastebin.com/64GuVi2F/47208)
Can you add Twisted Klein to your benchmark? I am curious how it performs relative to the other frameworks you listed. Here is an example of using async/await with Twisted code: https://twistedmatrix.com/documents/16.4.0/api/twisted.internet.defer.ensureDeferred.html 
This is really cool. :)
https://news.ycombinator.com/item?id=12229129 &gt; Right now most of our resources are consumed by getting EdgeDB alpha out as soon as possible. We also have plans to create a micro web framework based on httptools and few other exciting ideas. Stay tuned :) So, doesn't exist yet, at least not publically, but it is on their to-do list
One that covers a wide range of topics and has some great examples and explanations, in my opinion, is [Introducing Python](https://www.amazon.com/Introducing-Python-Modern-Computing-Packages-ebook/dp/B00PHTRLO2/ref=mt_kindle?_encoding=UTF8&amp;me=) It's not going to give you a deep dive, in the way you described, but I think it helps give you a really good lay of the land in Python.
Don't be deterred! I'd be glad to see a python based framework near the top of the list :-)
Not enough AbstractFactoryBeanFactory for you old man?
... Perhaps if renamed to "sanyc"? Starting to look a little incomprehensible, though.
"Homephones" new word to my vocabulary! What I hate most is (than/then) I always forget which one to use in my sentence. I end up finding myself at google translate. Even though I google it over hundreds of times I still can't remember.
Great work! I feel like a comparison with aiohttp without uvloop is unfair. They too can run on uvloop and get a boost. 
If helps, think of this: "Than" is for comparison. Remember "That man is bigger *than* Dan!" (all A sounds) "Then" is for time (or sequence/result...which is also sort of time related, since results come after other things). Remember "Then-when". When do you want it? *Then*. If we do this, *then* something will happen.
That's a hilarious motivation
I saw another async python Web framework previously, and am still trying to wrap my head around what that means. Why is it faster than flask + uwsgi? If I'm understanding it correctly, you don't need anything like uwsgi for handling requests, right? 
might be helpful to do some throughput and mixed-case benchmarks as well, just for completeness sake.
lends credence to your assertion that the event loop is only part of the bottleneck
link to connexion please
 def do_stuff(text): return text * 2 def another_thing(text, func): return func(text) print(another_thing('Try /r/learnpython next time, YAY', do_stuff)) print(another_thing('Try /r/learnpython next time, YAY', str.lower)) 
Why do you hate deploying Flask?
What is this a reference to?
| Name | Description | Stars | |---|---|---| | [Psyrcd](https://github.com/LukeB42/Psyrcd) | A pure-python 3 IRCD featuring live mode/command development. | 13 | | [Synchrony](https://github.com/Psybernetics/Synchrony) | A (python 2.x) peer-to-peer caching proxy/hyperdocument editor for collaboratively editing hyperdocuments and passively decentralising HTTP. | 18 | | [Trust-Toolkit](https://github.com/Psybernetics/Trust-Toolkit) | A simulation framework for developing and running distributed trust computations. Made with Synchrony in mind. | 1 | | [Emissary](https://github.com/LukeB42/Emissary) | A news archival service. | 165 | | [Window](https://github.com/LukeB42/Window) | A Python 2 ncurses wrapper for automatically scaling regions of a TUI, wrapping on words etc. | 2 | | [Markovnet](https://github.com/LukeB42/Markovnet) | A Hidden Markov Model API. | 3 | | [Microauth](https://github.com/lukeb42/microauth) | A (RESTful, Python 2.x) auth service. | 56 |
Asshole, why didn't you make this like 10 years ago???? UGH.... not I have to rewrite my entire fetish network.
Do you know about these: http://pypy.org/ http://numba.pydata.org/
There is lots of work in this area. One thing that is hard is compatibility with extensions that use C - they don't have an API as such but can call into the python interpreter from all sorts of places, this also makes it hard to get memory models other than recounting working, and generally makes life difficult.
In-depth dynamic semantics from the bottom up. You can, if you wish, interfere with almost any aspect of the way any object behaves when it is used. Almost any expression may have side effects under the right conditions. There are (intentionally) no hard type restrictions for any object that is passed. Optimizing execution without changing the above, which encapsulates many of the reasons python is as powerful as it is, is somewhere between extremely difficult and logically impossible. PyPy is the foremost effort towards implementing JIT and runtime optimizations, but breaks cross-runtime compatibility with native libraries.
Nice work. But please don't compare it to flask. Your code is nothing near to provide half of flask features and ecosystem, and hence you are comparing apples and oranges. This is something that bother me a lot. These days everybody is making his/her toy framework, saying "look ma, it's fast", and claiming it's an alternative to &lt;realworld tool&gt;. Your code is not an alternative to anything. Right now, it's a (very cool) proof of concept. But nothing more, and you could not make anything serious with it. What you are showing off is the easy part of making a framework : the http request handling cycle. The hard part is all the rest : tooling, deployment story, API details, full supports for all the small features of cookies/session/whatever, application life cycle, plugability, testability, utility for serializations/templating, data base or cache hooks, versioning/testing/support. Now, I'm not saying you should not be proud of your work. You should. But don't be "that guy".
&gt; I was wondering, has anyone ever thought of adding the option to start an IDE via the command line with args that specify a file and that it should be opened in draft mode? Then the IDE would come up with basically just the editor(with all the fun auto-complete features) opened on the file specified. Well, on PyDev you should be able to just drag a file from the filesystem to the IDE and edit it without any issues without requiring a project to be created -- although for running it it'll ask you to associate the file to an existing project to decide on the run configurations (you can also specify it as a parameter, but it'll take time to load the IDE if it's not opened which is really slower than opening vi -- although personally, it's not an issue for me as I usually keep the same session opened for days... basically I just close it when restarting the computer -- the most annoying part is making windows not reboot automatically ;)
I've only ever done sockets in C, not python, and I haven't had a real look at this project yet, but normally, this is how it works: - Server listens (binds) to a port until it gets a client connection. - Client connects to the listening port on server. Server fork()s a new process, and calls read() on the socket. read() is a blocking call, meaning it waits until the buffer fills, and does not do anything else until it receives data. Here's how I implemented Asynchronous IO in an application I wrote (roughly; it's been over a year, so details are not that fresh): - server starts *n* processing threads - server binds to a port - when a connection is received, it is added to a connection pool - the idle threads poll the connections in the pool to see if they have data waiting in the buffer. If they do, they read() it, and are no longer idle. If none of them do, they stay idle. It's much faster, because you don't need to fork() the process whenever you have a new connection, and instead of a thread freezing (blocking) while it waits on the read() call, it simply reads when there is data in the buffer. That's something of an ELI5 simplification, but I hope that helps. As I said, not 100% sure how it works in *this* case, as it's neither multithreaded, nor is it written in C, and I haven't looked into the implementation details.
&gt; Does PyDev allow you to develop files that are on a remote machine? Well, currently editing remote files is possible with RSE (Remote System Explorer for Eclipse), but I haven't really done much with it, so, I can't comment much aside from saying that I know there are users using it -- although you can't currently launch remotely directly from PyDev nor have a remote interpreter configured... (usually when I go remote myself I just run LiClipse directly in the target computer through some VNC, but I know this isn't always possible). So, for actually running the program you need to launch it out of the IDE through some ssh connection and debug using the remote debugger. As a note, I've got some requests for that and providing a nice walkthrough on how to configure things properly to work remotely with PyDev and add the remaining features such as launching/debugging from the IDE is probably going to be the target of my next crowdfunding.
You're right... as a note, I did have a branch where I enabled more errors flagged (pre PEP 484) and decided not integrating it because it made the code analysis considerably slower and gave a number of False positives due to the dynamic nature of Python... now, with PEP 484 I'll probably take a new look at it (as with PEP 484 annotations it's easier to have the needed info with less False positives and faster)... Although already currently, if you use the PyLint integration in PyDev, I think it probably already catches many of those cases you're referring to (as your statement was very general, it's hard to actually compare what PyLint gets and what PyCharm gets, but I think PyLint should be able to get many of the cases you're referring to).
Isn't this built-in feature basically the same? What benefits does FlaskSR have over using Jinja? http://flask.pocoo.org/docs/0.11/patterns/streaming/#streaming-from-templates
Well for one thing you CAN'T just deploy Flask; you gotta deploy a web server to run it on; I like that the production sanic web server is intrinsic.
A note to OP, Jupyter Notebook will make running code without an associated project a lot easier. If you fancy doing a little wiring yourself, you can also do it in Emacs (which is quicker to start and will work on the vast majority of terminals, plus you can add in code completion etc.). I use Emacs for abstract editing and flitting around projects/code snippets. IDEs like PyCharm and PyDev aren't really designed for that kind of development.
Thank you :) I've got the next part of the project working now too: I can now log into destiny via PSN. This allows me to transfer items between each character and equip items too! I can also read my character inventory. I'm working on finishing the code and next blog post. So I should be ready to post the next part here next weekend :) 
What happens if you're using a database driver that is not async and execute an expensive query? IMHO, this query would block the whole thing, right? In the case of nodejs, all such drivers are inherently async so this is not an issue. Have there been any Python async drivers for databases such as mysql and postgresql yet?
You could run it with gunicorn and use multiple workers
That depends on implementation. In C, you can just add polling for the database results to the list of tasks workers execute. In Python, I don't know. But obviously, the system will be as fast as its slowest component, which is why nginx is used mostly for static content, and not PHP or the like.
You're a literal hero, expect some documentation PR's coming your way.
 - Your benchmark is useless. The benchmark code doesn't have any IO and the whole point of anything built on top of libuv is designed to have async IO efficiently. - aiohttp.web uses json library whereas you explicitly import ujson for serializing JSON in your wheezy.web code rather than std json. I'm not saying that ujson would magically make aiohttp.web go faster than others but what I'm saying is you don't actually make the same comparison. muffin actually performs better than aiohttp.web for json serialization due to fact that it prefers ujson even though muffin is actually built on top of aiohttp. BTW, yes I know sanic prefers ujson as well (I've read the code).
I'm going to post soon how to get something on pip easily, I thought you could maybe already use it :) Here's the link to the example repo: https://github.com/kootenpv/quickpip
+1 to that. A new web framework is great, but for any standard work, you need the full suite of features - maybe not in the actual framework, but definitely available with a low threshold of grokking.
There's a very loyal Flask community here on Redditi that takes any criticism of Flask very personally, don't sweat it!
I think you're looking for http://stackoverflow.com/questions/6028000/python-how-to-read-a-static-file-from-inside-a-package
My wife was looking for a Flask replacement and also loves this meme. Now I have something to show her when she gets home! :D
Are you looking specifically for idiomatic code style? [This book](https://jeffknupp.com/writing-idiomatic-python-ebook/) should be what you want. Also, watch [this talk](https://www.youtube.com/watch?v=OSGv2VnC0go).
OP says "first open source project", not first project
The only real reason I have stuck with flask for so long is the [Blueprints](http://flask.pocoo.org/docs/0.11/blueprints/). Have you implemented anything like blueprints in Sanic?
Sweet
I would also use the option above. However another option would be to make your script accept a command line argument for the path to the file. Obviously this won't automatically bundle the file with your executable, but is another option depending on your use case.
It looks like our goals are the same, with a few minor differences so far (returning tuples instead of response objects, exceptions handling is based around http status codes rather than exception type). I wasn't able to get it to run anywhere near fast though. I followed their directions [here](https://mirai.veriny.tf/en/latest/gettingstarted.html#deploying), and was able to get only 94 req/sec with an average request latency of 458.33ms. The CPU on the box did spike to 100%, so I'm inclined to believe this is its actual performance, unless I messed something up =/.
Thx
[Docs are here.](http://klein.readthedocs.io/en/latest/) Is there anything missing? If you find some holes in docs [create github issue]( https://github.com/twisted/klein/issues) or even make PR with your fixes.
Now's to write a script to compile a list of anime I need to watch with EGOIST/Sawano music... muahahahaha....
Running https://github.com/jmschrei/pomegranate/blob/master/examples/bayesnet_monty_hall_classic.ipynb on Python 3 gives: &gt;&gt;&gt; network.bake() Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "pomegranate/BayesianNetwork.pyx", line 198, in pomegranate.BayesianNetwork.BayesianNetwork.bake (/Users/duffrind/.pyxbld/temp.macosx-10.6-x86_64-3.5/pyrex/pomegranate/BayesianNetwork.c:4952) keys = state.distribution.keys() AttributeError: 'list' object has no attribute 'distribution'
This is actually a really neat project. Flash cards based on Anime Subs. Are there any features that would help this project that PyMoe lacks?
What other answer do you expect than terrible? Ah wait.. this is spam.
Could this possibly be a ujson issue?
If you run it with `-O`, these issues will go away. (i.e `python -O app.py`)
Depending on the interface and what's available, you can get the following information from PyMoe: * Title * Synonyms * Dates * Synopsis * Cover Image URL * Type (ONA, OVA, TV) * Average Rating * Episode Count * Genre
I didn't want any benchmarks of other languages in the post or readme since I'm not as familiar with how to optimize/deploy for node, go, etc. However, I ran some tests for serving simple json, for science: Language | Req/sec | Response time --------| -------:|-------------: Go (static router) | 47,474 | 2.13ms Go + gorilla router | 36,930 | 2.74ms Node (no router) | 16,559 | 6.03ms Node + express | 8,054 | 12.45ms I ran the go tests with gorilla router, because as far as I can tell the built-in http server does not support reading request parameters from the url - [documentation](https://golang.org/pkg/net/http/#ServeMux). I can provide my test files if anyone wants them :).
Not yet, but there are already efforts to add them, so hopefully we'll have them in by the end of the weekend :) https://github.com/channelcat/sanic/issues/7
`-O` enables optimization, which removes some costly assert calls that happens inside. I've got a local copy of this change saved, to be committed Soon™.
I imagine Anidb would be more useful to you as it stores episode and file information. I imagine a repository of information on individual files per episode might be useful to the project if you ever wanted to attach subtitles to files.
[removed]
I'll definitely check that out, thanks!
Don't try to "learn a language" so much as "choose a project and write it in that language". 
Coding challanges
Kmanga.net does all that and more. Also python, django and scrapy.
I'm available for contracts 
They don't want to. It would increase the complexity of the code.
Is it really that big of a difference between 2.7 and 3.5? Because I'm actually finding this book really good. The code is well described and he just makes everything really easy to understand. Along with some really great exercises. But if it it really is a big difference between the two and u think that it will have an impact on my learning curve then i guess i'll just have to switch books.
What exact errors are you getting.
After continued headramming against this, I finally managed to fix all my issues. Thanks regardless!
Great. You should share what your problem and the solution were to help others who may find this. Even if you find it silly. I had the same issue today on an Ubuntu box and it was a permissions problem. I uninstalled via pip and reinstalled via pip with sudo and all was well again.
The print difference is honestly one of the most obvious ones. I'd make sure you know the differences if you want to keep using that book. I don't think it should be too much of a problem to keep the differences in mind.
It's just for a DOS worm I'm trying to do, nothing serious. I'll take a look at it.
If they hadn't broken Windows support, [PyParallel](http://pyparallel.org/#performance) would be near the top of the list.
Deployment. I should be able to get something that deploys a self-contained app with all of its dependencies. It should be in the standard library. Seriously... try to deploy a single CLI app on the last three versions of MacOS, Windows 8+, and Linux. It's a nightmare.
I've been using python for 10 or 11 years, I see myself using it for 5 more
Wait, I figured it out. I used import dojikko.
have you try make your own project? or contribute to other project?
I'm a mathematician and I haven't recovered from you writing 2.7 &gt; 3.5. Good day, sir. I SAID GOOD DAY.
&gt; I downloaded pygame-1.9.2a0.win32-py3.2.msi That will only work with Python 3.2. It won't work with 3.5 because different versions are not ABI compatible, so binary extensions with compiled modules are always going to be version specific. The Pygame project is notoriously horrible about providing out of date binaries. Use [Christoph Gohlke's builds](http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame). And note that you must match the bitness as well as the version, and it's not the bitness of the operating system that matters, it's the bitness of Python (i.e. did you install the 32 bit or 64 bit version of Python?) And this belongs in /r/learnpython . And next time use a descriptive title that isn't just "Help". 
Pain points for me is Distribution/deployment of Python apps, Mobile support, and JIT implementation of Cpython. All of those are being worked on. Another problem is the loss of Python 2 programmers (that we're saddened by the break of backwards compatibility) and Python 2 code that was not ported (pentest comunity still fixed on Python 2 ;/) I see me using Python for the next decade, it continues to be my favorite language.
1. Too much complicated and bloated async/await (Futures, Tasks, Coroutines, which wraps/tranforms to/from each other in various circumstances. Whereas in JS there are just Futures). 2. Lack of support for async in stdlib. For example async socket functions should be placed in `socket` module, not in loop objects. Async/await is still a second (or even third) class citizen. 3. stdlib contains many useless and niche modules, whereas it doesn't contain essential ones, like `requests`. 4. Ugly and messy optional typing syntax. Fortunately it is still optional, but I read that some companies are starting to force their employees to use it.
Yes but to get government run agencies and universities to do anything other than the stock distribution repositories is not always easy. Otherwise I would just use Anaconda/conda.
This. Unless I'm missing something (please tell me I am and there is a simple solution), but even finding what dependencies are required for your current project is not as easy as it could be. If anyone has a simple, easy way to find out what dependencies (and versions) are currently used, please enlighten me. It's not hard to track it down manually, but there has to be an easier way. I have better things to spend my time on. 
That being said, explicit is better than implicit, and maybe it's better that % formatting is being shoved in a dusty corner and forgotten about. (Imo)
?? Why suddenly mention php in a Python post?
https://github.com/Microsoft/Pyjion
Ah that's true, I'll update aiohttp to use ujson. I agree the benchmark doesn't represent a real-world scenario, it's more intended to show the raw performance of the framework. I'd really like to get a suite of benchmarks going, perhaps based of [this](http://klen.github.io/py-frameworks-bench/).
&gt; There is no expectation, though, to ship a JIT compiler with CPython.
He's trying to express "php has something nice, please add something nice to python". Typically with us polyglots we'd like to be proficient in whatever this month's contract is written in. When language *X* is fast or has supreme implementation of feature *F*, we'd prefer that language *Y* has equivalent quality implementations or alternatives to feature *F*. So of course, we'll suggest great features using other languages as references because we'd like to have nice things in both languages, rather than feeling crippled in both languages as we miss the nice things from the other language. "Make python faster", however, is *not* a good example of what I was talking about.
This is great! I wish I had this on an earlier project I was doing. BTW does this support Async functions? Because if it did I would probably be able to scrap the libraries I had made and use this library instead.
No, Honestly I still don't fully understand everything and its like anytime I try to write code I just can't. What did you do when you first started learning?
Larry Hastings said that one of the next versions of Python will have an option to disable the GIL, from his Gilectomy work. It won't be disabled by default for a while, but at least people will be able to try it and help improve it's performance sooner.
Python sucks on Windows, but since you're already using it...try setting up a Python virtual environment and installing all your packages on that. You don't need administrator access to add modules to a venv. 
Everything. While not a useful answer it supports my viewpoint that communities that resist change, stagnate and die. Luckily I believe Python "leadership" have done good job at balancing chaos of change with improving things. Sadly the community at large has really lagged in one major aspect, Py3 In 5 years, yes.
I have already stopped using it for the most part, because of deployment and performance. It's still nice to write quick scripts, tools and PoC on your desktop, but I'll avoid Python in production, as far as I'm concerned. (I know, I won't be popular, but I'm just replying to OP's question).
This 100 times. This also implies better GUI support. When I started, I wanted a handful of threads to interact with Tkinter. Its not thread-safe so I ended up hacking together a module that would do it through bindings. For a language built on flexibility, it's GUI support is extremely limiting. 
I wasn't a big fan of the ConfigParser classes, so instead I made my own configuration-file class. It has only three endpoints from confy import confy # create variable and load json file into dictionary configuration = confy('configuration.json') # read and modify times_opened = int(configuration.get("times_opened", 0)) print("This script has been opened {} times before".format(times_opened) configuration["times_opened"] = times_opened + 1 # save configuration.save() I'm also considering adding debounced autosaving
Please don't use `requirements.txt`. Use a `setup.py` file which lists your dependencies there.
i evangelize this tool a lot, but [Pex](https://github.com/pantsbuild/pex) does pretty much exactly this (minus windows support). it's a fantastic utility!
On Linux, that's definitely not a big issue since it's done all the time by all major distros.
You can read `requirements.txt` from the setup file. I've done it a few times. 
Instead of saving the packages right away, you can use pip-tools. You write a `requirements.in` and with pip-compile you generate `requirements.txt`. You still have to write package names, but the end result is that everything is pinned which is much better. With this I don't feel the need of a --save option.
[removed]
Wow, thanks for pointing to that. 
One could pep8-ify the standard library and have the old symbols as aliases.
PHP more than doubled in speed with the 7 release. Yet it barely touched backward compatibility. Certainly nothing as significant as the 2.7 to 3 leap. Yet performance is off the scale along with a bevy of new features. People were asking what Python could use, and I think he was bringing this up because it shows that an interpreted language can be revitalized without ruining it.
Thank you! No cheating for me, I want this to be as organic as possible. Could you elaborate on why gear rotation is trivial? I would think gear rotation is a pretty set in stone.
&gt; Too many naming conventions too...PEP8-ify the standard library. &gt; The GIL of course. valid +1 &gt; There are too many top-level modules in the standard library. Make it more hierarchical. No! We only have this for XML as there are similar named modules. otherwise if I wanted to`import dataexchange.internet.data-handling.mimetypes` I would just write Java.
Virtualenv vs pyenv vs pyvenv vs python -m pyvenv vs... Dependency management is just terrible IMO, much worse than Node/NPM. You have multiple places to get packages from (system package manager vs PyPI) and multiple places they can be installed into (system Python install, virtualenv, other system Python install, Python 2 system install - pip vs pip3 is the bane of my life), and there's no easy tool to automate saying "my code depends on this and this and this" like NPM - you have to write your own setup.py (or copy-paste an example from somewhere else).
Sure. I'll use NPM as an example but I've had nice experiences with sbt (Scala) &amp; Cargo (Rust) to the same effect. $ git clone wherever $ cd wherever $ npm install Done! $ git clone wherever $ cd wherever $ pip install Oh balls I installed globally and I need a virtualenv. OK. $ virtualenv env $ source ~/env/bin/activate $ pip install That's weird it didn't install properly. Oh, my setup.py has private dependency_links. That took 5 minutes to figure out. $ pip install --process-dependency-links Wait that flag's gonna be deprecated? Weird. $ python2.7 my_code.py Hooray! The nicest package managers I use install dependencies in the current directory, (and sometimes keep a global cache). That way the same dependent projects at different versions in different projects don't interfere, nor do packages for different engine versions. You can also be totally 100% unambiguous that you don't need sudo for anything. Pip being global-first makes things complicated than they need to be, and then we end up needing virtualenv to solve a problem we've engineered ourselves into in the first place.
I meant the mathematics required for determining the rotation is trivial (i.e. very easy).
When did he say this? Last I heard this was just a tentative plan.
Ah, okay, gotcha. Yeah, I want to go in making a procedural generated environment full of different gear combinations. Possibly add in some machine learning so the gear combinations could improve over time depending on the parameters set :D 
(The only other Gitlab&gt;Discord bot I've found was [this one](https://github.com/jellysquid3/gitlab-discord-bot) which is 1. written in node, and 2. not easy to get working)
Generally in Python you don't *use* the global system Python or global system set of packages when developing (or when deploying server-side applications). You use isolated environments (the third-party `virtualenv` package for Python &lt; 3.3, the `venv` module in the standard library of Python 3.3+). This gives you the ability to create multiple independent Python environments, each with its own interpreter, its own set of installed packages, etc. If you want to know the whole dependency tree of your functioning environment, including exact versions, `pip freeze` will output that.
Cool. Will try it tonight
Where do I choose 32 or 64 bit python? On the download page I simply see 2.7 or 3.5.
You can use a virtual environment 
&gt; FYI these benchmarks are terrible and misleading. No, they're not. You just don't have the technical background to understand them. &gt; Just go check for yourself I did. &gt; I don't know about Python but for several languages it was very outdated and possible biased by the very nature of benchmarking non-real world scenarios. You didn't bother to click the link, did you? &gt; You would mitigate most of these things with caching Of course. If you stop being salty about Python being inefficient, for a moment, ask yourself why do you need to mitigate something in the first place. &gt; leveraging the strengths of each language and framework There's no room for political correctness in technical discussions. 
In a [...] UTF-8 world, Py3 [...] defaults to ASCII. What? Python3 is Unicode by default. 
There's a lot of change in the last few years. We have python 2 going out of support in a few years. We should perhaps fix a few more things mentioned in this thread then have some stability while those who still need to learn python 3 and asyncio can catch up. Right now we have a wide range of skills from people just learning list comprehension in python 2 to people running benchmarks of their async code across 3.4 to 3.6 with different event loops. My point is that it would be great to focus on encouraging the bell curve of skills towards the right rather than extend the long tail to the right. No idea how to do that though!
Aaaaand they're implemented!
Blueprints are now in :)
&gt; but even finding what dependencies are required for your current project is not as easy as it could be. ... you don't keep track of the libraries you use in your projects? This has never been a problem for me. I start a new project and create a new virtualenv. When I pip install something, I record it in the setup.py. If I end up using another library, I simply remove the other library when I put the new one in. If you import something, record the new dependency, simple as that. You could just grep your import statements if you really wanted to, then check what versions you're currently using with pip freeze. This sounds like a problem if you're not starting the project with the idea of distributing it. Maybe you're just writing a script or program, then decide to package it after it's done? I think it's much easier to just create the whole package structure from the start so you can distribute it from the get go. I wrote my own tool to create the boilerplate setup.py along with the license, readme, and module, so as soon as I work on a new project I already have a setup.py where I'm recording dependencies as I import them.
Oh my, wow.
It's absolutely a big issue. Most of the big distros package a "blessed" Python with various "blessed" versions of the supporting plugins. You can be almost certain that the version in PyPI is newer. If you need something newer, you generally have to build your own package using their "exciting" packaging tools. Consider distributing your package [like this](https://wiki.debian.org/Python/TransitionToDHPython2). At this point, you might try to sell me on the benefits of packaging. And I'd agree to a limit. Appeasing the packaging gods has some significant benefits when dealing with compiled binaries and it can be useful when you have binary dependencies. For pure Python, though, it's a ridiculous level of overkill for virtually no benefit. The biggest headache is when you intersect with someone else's dependencies. If you need foo==1.0 and they need foo==2.0, guess what happens? Distros are not equipped to have both of these installed into different Python instances on the same box. It's a mess. And when you conflict with some Python dependency of some Gnome UI tool (or, worse, some system configurator from a certain big name distro), guess who gets priority? Maybe you get distro help dealing with CVEs and the like, but there is no other problem it solves that isn't better solved with deploying a complete virtualenv. For most server installs, the first thing you do is set up a virtualenv to free you from that BS. But for something like an end-user tool, it's just too much (and the OS packaged versioning hell is not worth the trouble). This is particularly significant to me because this was exactly what drove my team to abandon Python for Go on our CLI tools. It cross-compiles by setting two environmental variables and deploys in a single file to all of the platforms and depends on nothing.
You can just apt install python3 in debian/ubuntu from the official repos. This has been true for years. Some distros even use python3 as the default (Arch).
I think I'm a weirdo because the GIL doesn't bother me at all. Multiprocessing does pretty much the same job as multiple threads but makes it a bit easier to not fuck up. Single thread processes tied together with zmq are a thing of beauty :)
+1 from me. I'm still loyal to gevent and still consider it the most convenient async library not only in Python, but also in comparison to other programming languages (including golang).
If you do go to run this yourself... please ensure you do so over HTTPS - Api tokens should be encrypted!
It's very good for remote development, too.
I've been using dh-virtualenv to create a standalone deb package, that can be installed on the server using dpkg. It works nicely if you only need to support a debian based linux distro.
none of that bullshit is required in other languages just to get a fucking executable though.
Done! :)
If we had an LLVM backend, couldn't we theoretically write native iOS apps with Python? Is Jython an option for writing Android apps?
Weird, I find it's easier in Python than in Node or anything else mkvirtualenv foobar workon foobar # pip is now scoped to this venv only
If you don't know the encoding even, what do you expect it to do? Guess?
we're talking about distros before py3 was available in official repos, like RHEL. Arch would never be acceptable in those environments (although Debian might be)
Nothing fancy but I put most of the benchmark code [here](https://github.com/channelcat/sanic/tree/master/tests/performance). then tested with `wrk -c 100 -t 1 http://127.0.0.1/` I want to add more types of benchmarks to see how it performs in real-world situations, currently looking to see if I can get [this](https://github.com/klen/py-frameworks-bench) running.
Well, you can just use a random encoding and hope it works, like Python 2?
There is also conda, which has isolated environments and pinned versioning. It's more geared for science, but it's the best solution I've seen. 
In Python 2, you don't have to decode strings. Sure, that's a terrible idea if you want to write them to a database. But not every program needs to insist upon valid strings.
What do you use instead?
Why not just use a full debugger then? Like PyCharm. Or even pudb. 
Because in Python 2, you don't have to decode strings in order to do string manipulation.
~~Cython~~ CPython two different things
&gt;simply http://img.pandawhale.com/139023-you-keep-using-that-word-meme-OEzW.jpeg 
&gt; sys.getdefaultencoding != sys.std*.encoding Good point. [This stackoverflow question](http://stackoverflow.com/questions/15530635/why-is-sys-getdefaultencoding-different-from-sys-stdout-encoding-and-how-does) explains some of the complexities involved. In this general case, your tty has an encoding, and sys.stdout has to be set to match that. 
Why not both?
As mentioned below, some government run agencies and universities are not allowed to do stuff like this. But yes I have had users just install Anaconda or use our own precompiled all-in-one environment. That way it just looks like a tarball, not installing it in to the system directories. Its a huge waste of space though when the system usually comes with python. Being able to provide an rpm would be nice.
Your indentations are a little messy
Oh yeah I didn't realise, let me fix that
there is a cli tool for creating debian packages with virtualenv already contained inside, and even creating a service out of your project. [link](https://github.com/urban48/debpackager) 
Started using it last week. Windows is just fine. Once the pex is made, it requires invoking Python directly but that's probably fixable in the OS as a file association. It has OS flags to ensure the wrong bdists aren't pulled but I've tested my L64s on Windows without issues. It must vary based upon the dependency.
&gt; Pray tell, how does one tell it which encoding to use when you don't know the encoding? Pray tell, how do you perform sensible operations upon it in the encoded form when you don't know the encoding?
Thanks for keeping the config simple
It really depends on what needs to be done but usually web driver is enough. There are times where you might need more functionality and that is when you'll need to leverage other tools like splash or locust.io.
&gt; the old ways of doing things were Just Plain Wrong That depends on what you're doing with Python.
pudb is better, but honestly could be improved. Sizing the panes on pudb is a fucking nightmare
Let's see. How about extracting just the JPEG files from a zip archive when the filenames in a zip archive *have an unknown encoding*? Better just to have to whole program die in flames, eh? No JPEGs is better than some, right? What *is* it with you Python 3 fanboys? Why can you not accept that some people have valid reasons for doing things that aren't in the set of whatever it is that you consider "sensible operations"? 
np dude. Btw you can also take the print() out of the if-else.
Check out `pip-compile` that lets you have a top level file declaring what you need and it compiles your deps' deps down into a flat requirements.txt: https://github.com/nvie/pip-tools
You do basically the same thing in Ruby.
*All* zip filenames have an unknown encoding. That's how the zip format works. Linux filenames, too. What do *you* do? Walk around refusing to work with zipfiles or Linux filesystems because you don't know what encoding the filenames are using? Come down off your cloud. Reality doesn't work the way you apparently wish it did. 
 def collatz(n): print(n) if n==1: return elif n &amp; 1 == 0: collatz(n//2) else: collatz((n*3)+1) 
I ship my applications to customers as frozen .exe files. I don't want them to look, or have acces to any python files at all.
fine, there are plenty of excellent, widely used languages where none of that bullshit is required just to get a fucking executable though. better?
Meh... they'd be aliases *forever*, so there isn't really a point. 
This is a good solution for applications like webservers or queue workers, but not so much for stuff life a daemon, gui or cli unless you package a wrapper that handles communication between the environment and the docker client, in which case you're back to square one. 
Somethings are just plain wrong, e.g. old style exception handling, bytes as the native text type, `__nonzero__` is a terrible name. But Python 2 got most things right the first time around. There are lots of nice to have in Py3 (field from, await/async, native ChainMap) but I can't think of anything that 100% must have. 
Exceptionally clear. Sound volume WAY too low. 
It's not that easy. For tools installable from pypi, sure, use `setup.py`. For anything deployed to a production system use `requirements.txt` with all versions locked down. This is why we use `pip-tools`.
For Django you may want to try [`runserver_plus`](http://django-extensions.readthedocs.io/en/latest/runserver_plus.html).
Not sure why you think a daemon/gui would be hard, especially with socket based communication. http://fabiorehm.com/blog/2014/09/11/running-gui-apps-with-docker/ With shared folder a CLI app is trivial.
If you don't care about unicode, why not use `bytes` for everything in Python 3? With 3.5 you can even use interpolation.
The documentation is an ugly nightmare. 
Does it doesn't really need to officially support Windows? The only real issue would be with binaries. Pex doesn't make binaries and Python itself supports the executable zip (I don't think it did when pex came into being). If there is a binary problem, it's with the library, not with pex. All pex really does is zip up and extract a virtual environment. There's nothing it does outside of 'standard'. I don't know what an appropriate library to check for general compatibility would be but the app I'm deploying is with boto3, flask, and requests. No issues with it at all. I build the pex with L64 and run it in Windows as a compatibility check. I wonder if it would be easy to code a warning for users to highlight that binaries may likely be incompatible. I may look into that (thanks for the idea). If people know there is a problem with their dependencies, it may be enough. ** And I'm with you, btw. It is the right tool for the job I had at hand. I needed a single package to drop on a machine I don't control the OS on and that has no outbound internet access. Getting libs then is just a PITA.
I do the same. VirtualEnv Wrapper is amazing.
Yes, I have fixed amount of images and have some dynamic text. Goal is: graphic team create some template, with certain place where script should put text data with some kind of info like [coordinate: (203,41), color:red, font:Arial, size:24] it can be json, xml, csv(not dictated yet) so then I can generate image with text with this formatting. 
Yea, some mouse support would be nice. 
From what I've understand they share a lot of code. 
You raise a great point. I was able to work around that problem by changing my user home. set userprofile = C:/pex
Just simply write your own tool to do it. It's so simple!
That's why I asked the question. Have difference file or even one for all is not conveniently. I wanted put this info to comments of image(you can see image in SO) but i haven't found a way how to fetch it.
Cool work. A more interesting way to describe it is a traveling salesman problem solver using Djikstra's algorithm. It would really be cool to see some practical examples of this function (e.g. mapping, robot navigation). 
You can use the image's EXIF data, but it'll be a huge pain to edit.
pyenv is the ultimate way to install different versions of python. It's just so convenient to just do `pyenv install {your_version_here}`
I work in academia and in that context, by far the biggest problem is still the python 2/python 3 split. Academics are set in their ways and slow to change. I imagine this will still be a problem in 5 years, long after python 2 support is discontinued. And for the same reason, I expect, I'll still be using Python in 5 years. It could be worse: I could be using Fortran.
I'd give up multiline lambdas if I could do let bindings in list comprehensions
This is actually somewhat discouraged by the head of pypi, as [they serve different uses](https://caremad.io/posts/2013/07/setup-vs-requirement/). But there are still, in my opinion, times it makes sense to do it. Though usually in those cases I only use setup.py.
Typically that kind of error means you need to add something to the hiddenimports list. Not at work to look at my code, but that's what it sounds like
Correct, we (PyCharm) and PyDev share the pydevd backend. In fact, we provided some funding to Fabio for recent speedups.
&gt;while pypi shows garbage markup on so many packages Because PyPi annoyingly uses Restructured Text _exclusively_ (and it seems to be a strict subset therein). I've given up on getting the PyPi descriptions to look nice. They're now a picture of the thing, a message about how PyPi sucks, and a link to the readme on Github. 
Command line only? Yes. It is particularly strong in the python community 
You could use deprecation with e.g. 5 years before removal.
How long has python3 been out now and how many people are using v2 still? It turns out that expecting thousands of old projects to update their code *even giving them years* doesn't turn out well. For a super popular project like python, non-backward compatible changes should only ever be done if absolutely necessary. 
Whoops, this was a minor API change. Instead of passing in a list to `add_states` it should be just the objects. I'll change that, thanks!
I haven't done this yet. I'm not sure if there is much knowledge about how to layer the genes to take advantage of a constraint graph. I'm also a comp bio PhD student, so if you'd like to talk about it more please shoot me a message!
It doesn't matter if it takes 10 years as long as you slowly improve. The alternative is always having something confusing. I'm not the one maintaining the stdlib though.
I think it's a really neat idea that just doesn't mesh well with the Zen of Python. Reading the examples from the readme, I initially thought "ok... maybe" until they moved from time units to html, at which point I thought "uh... maybe not." It suffers from superfluous boilerplate and a lack of readability in my opinion, and as your readme says it also suffers from a few logistical problems (most notably defining the from__* methods on existing types). I definitely commend your efforts on the project though!
&gt; superfluous boilerplate and a lack of readability Can you be more specific? And why do you consider from__* methods as a logistical problem? Thanks, I hope the syntax issues won't prevent programmers from seeing the bigger idea that I'm promoting.
Calm down is a wonderful highschool debating technique. Try using facts instead. I loved python. But I have largely abandoned it for most purposes. Most of my programming friends have also given up on it being the growth language. We all had hopes of it growing, getting faster, expanding into things like mobile, and shippable executables. Now we all use it for some stats, some ML, and as a replacement for perl for scripting things on servers. Other languages keep asking a simple question: "What do the bulk (not the core) users want?" and then focusing on that. Once a language focuses on the core users it joins the walking dead. Regardless of what side of the 3.x 2.7 argument you are, that was about the worst exercise of PR done for a language pretty much in the history of major computing languages. To this day you have legions of new users asking "Should I learn 2.7 or 3.x?" I don't hear people asking that for any other language. That is the sort of thing that freaks out new users and then they don't become new users. They find a language that didn't just screw over a generation of users. 
Probably cleanest is the ruby way `Hours(60).to_days`
Have you tried to compile some dependencies when using a compiled language (C/C++ - not talking about Go or Java)? You start simple and "just" compile them but then you see you get a shared object and you start to realize that if deployed on a different machine another version may get used and not yours, so you say "why won't I just compile it as a static library? There's a google group with someone saying he succeeded to do it somewhere around 1994", what can go wrong? After a few days of fighting with symbols and shit you give up and start creating shims for your program that set LD_LIBRARY_PATH before running your executable. So I'd rephrase that to "some of the compiled languages, surely".
Yea well... unfortunately categories isn't a thing in Python because of some basic architectural issues :(
No it's not!
My understanding of Android development is poor so maybe I shouldn't commenting. However I believe Android has different bytecode, and your app must be async, responding to Android's event loop. So it would still be a lot of porting.
Hmm, that's a good call. But then how would it show the values as the sequences progresses from n to 1? Can I use 'Return' or is that something different?
there is https://github.com/clarete/forbiddenfruit, so insane ways exist But, its not really needed for my example, e.g. https://i.imgur.com/w072Sn3.png obviously half-assed tho
Posts like this make me think It's time to learn another language. Deployment in python is trivial compared to every other language I regularly use.
Bullshit. It's just that the Python ecosystem comes from the *nix ecosystem, where people are not scared by the command line, so lazy devs simply can't be arsed to go beyond that. If you are building Python programs for gui-first platforms (windows, osx, android) then by all means a gui should be preferred. 
JS has the same "issue" yet Node has a good JIT and can be [pretty quick](https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/) at times.
while overloading the shift operators is definitely cute, I tend to agree here.
Sure, I mean that it's a rather verbose way of converting from one type to another. I think most often I see classes provide a from_* classmethod for the purposes of instantiating from another type, which is simple and works well. Your readme says: &gt; Of course, to cast into Fortnights we'll also have to define a from__ cast Maybe I interpreted this incorrectly. Does this mean you have add a from__ method to all the other types or just one? If it's just one, which?
Yeah, that project linked is a way to extract tables from a PDF into a CSV. This is an even older example that purely strips text out [http://git.macropus.org/2011/11/pdftotext/example/](http://git.macropus.org/2011/11/pdftotext/example/) but is based on pdf.js as well (before Mozilla took it over) So really PDF.js is doing the heavy lifting you could probably do it in Splash or something as well but I built my whole solution around PhatomJS because at the time (and still, I believe) it had the most complete and functional support for rendering PDFs as well.
Where do we disagree? 
Another shameless plug: I'm developing OSNAP ( https://github.com/jamesabel/osnap ) for Windows and OSX clients. I needed this for another app I'm working on, so I open sourced the app creation layer.
One of the things that was removed was the cmp argument in the sort function. The logic was, it led to things being more order complex - so they just removed it and forced us all to use the key argument. Right now, I want to murder whoever made that decision, because I have to read through a thousand lambda functions for the cmp argument in Python 2, modify them to use the key argument in Python 3, all for miniscule pieces of sorting some 10 or 20 variables at once. Being used in a wrong way by programmers should not be a reason to remove compatibility. If that was the case, they should remove all while loops and force us to use for loops because while loops are sometimes less readable. Imo, the only *necessary* change in Python 3 was the bytes and unicode strings, and the removal of implicit convertions between them. Everything else was just piled on because, hey, we broke this thing, might as well break a few hundred other features. Just the bytes and unicode would have been okay to convert, at least for my project. The other unnecessary changes make it a months long project. I'm fairly sure many other python devs feel like this, and this is reflected in the adoption rates.
You can install locally with `pip install --user` and it just works.
&gt;because I have to read through a thousand lambda functions for the cmp argument in Python 2, modify them to use the key argument in Python 3, all for miniscule pieces of sorting some 10 or 20 variables at once. No, you don't. It's called `functools.cmp_to_key`. That said, the hand-written key versions are typically simpler and easier to understand than what they're replacing, IMX. &gt;Everything else was just piled on because, hey, we broke this thing, might as well break a few hundred other features. Yes, but I strongly feel they improve the language. The changes aren't simply about removing ways of doing things; they comport with the Zen in many other ways, often by *increasing* your options. For example, have you tried out keyword-only arguments yet?
&gt; 5 years is a long time to make predictions in tech I've been using Python for over 15 years. Why is 5 years a long time?
Android, or better the ART, has its own bytecode, but regular JVM code can be translated with a tool packaged in the SDK. And as far as I know, your app just has to implement/extend certain interfaces/classes to run on Android.
If you do want to try a Python solution, I think [pdfrw](https://github.com/pmaupin/pdfrw/) may be able to do what you need.
And don't do what I did and spend years afraid you don't know enough to make PRs and would only be wasting other people's time. I learned so much from the process and people were polite, if not very happy to help me learn and grow
thanks..
First, I am taking only the most common pronunciation for words (for example: にほん instead of にっぽん for the reading of 日本) I then take out irregular words such as 今日 that don't follow their On or Kun'yomi. I read [a paper on dementia patients reciting Kanji pronunciation](http://www.tandfonline.com/doi/abs/10.1080/02643299208252068?journalCode=pcgn20) that might give insight into what is important features to know of Jukugo in order to estimate the pronunciation, but in the end of the day, I am going to through all features (Radicals, Kun/On, pronunciation of character before and after the given Kanji, If the character before the character is Kanji or Kana, if the given vocabulary word is Jukugo or mixed Kana/Kanji, etc) into my model and have it decide what is important.
Can you somehow get at the raw data? PDF blows and sucks at the same time for scraping data. Even if it's computer generated, it doesn't mean it's always the same. I used PDFminer3000, and it worked fairly well. 
Wow, this is really interesting! I enjoyed reading the article you published and I'm looking forward to reading the next. 
Your comment reads like people are actively *advocating* CLI-only, whereas I don't think that's the case - it's just that projects that start on unix are CLI-*first* purely for practical reasons (among other things, GUIs there are inconsistent and often not available altogether). A lot of Python projects are like that. If you were to start a GUI-based Python project on Windows, however, I don't think you'd find people telling you to drop it and do a CLI instead. There are plenty of GUI options for Python, from native bindings (pywin32, pyobjc) to runtimes with solid gui libs (jython, ironpython) to cross-platform toolkits (pyqt, pygtk, the dated-but-default Tcl/Tk, etc etc) to the recent fad of chromium-based "apps". 
Can't tell if you're trying to be funny or actually don't know that this subreddit is for the Python programming language.
My apologies! Sorry, it really looked spammy. Not sure what you changed, but it looks a bit less spammy. The bad grammar in the title also made my spam sensors classify it as spam.
There are loads of people advocating against GUI and asking for a good old CLI especially in python. They pop up every time a GUI problem is discussed. 
Of course, c-library incompatibility for pypy and conda dependency (effectively) for numba are really drawbacks that one should mention... 
&gt; I think most often I see classes provide a from_* classmethod Yes, but then you lose the main benefits of my library, which are 1. a unified syntax and 2. chaining of casts Like jesse0 said, if you add a Fortnights.from__XX method to any time unit you want, it will then automatically work for all other time units through chaining.
It seemed like a good idea to overload a very unused operator, but yeah, seems like most people here are against it for a reason I don't fully understand yet. There were other reasons I chose it: 1. "blabla".to(HTML) will never work, but "blabla" &gt;&gt; HTML will, because operators have rvalue capabilities. 2. *from* is a keyword :(
I actually ended up doing just that: https://github.com/djmattyg007/PackageTracker
Unfortunately PDF is less than optimal for data extraction so that might be difficult. I would suggest the following find a PDF utility that will allow you to break out the first page you need and save it to a separate file. If you are on a UNIX (Mac OS) or a Linux system there are many such utilities. At least this gets you half way there. As for extracting the data that will be a lot harder and depends very much upon how consistent the data is contained within the file. Generally PDF is a one way trip. As such it may pay to see if the original data is available as it might be easier to simply generate a new page with many of the PDF generating solutions out there. Probably not the answer you want to hear but how successful you will be with automating the serial number extraction is highly variable. As for that serial number your best bet is if the data is presented such that there is a sentinel that you can easily parse for. Once you have a directory full of single pages parsing a 1000 files should happen in a flash so experimenting with this should not be a huge problem. How complex this will be is again a function of how consistent the data is represented within the files. 
I really want to try Bugjar for this, but I've not yet found the time. http://pybee.org/project/projects/tools/bugjar/
I'm not sure what you mean by &gt; conda dependency (effectively) for numba
Well, first off you will have to familiarize yourself with Python itself. Once you feel like you have grasped the basics, you will probably want to have a look at www.nltk.org, which offers a natural language processing tool kit for Python. They have a book going with the tool kit (www.nltk.org/book) which even has a section specifically aimed at your problem (chapter 6, 1.1) but will also cover all the basics before (including some Python basics and of course text classification). The toolkit allows to train multitude of different classification algorithms with your data which you then can use to classify other data. Give it a try. Hope this helped. :) 
I like Go in particular especially because it takes weaknesses of Python and turn them into strengths, while the language is still simple and readable apps are encouraged. * Python is slow: Go is fast. * Python has the GIL: Go has native language features for parallellism. * Python can be annoying to deploy: Go is fantastic to deploy with self contained executables. The community also seems pretty enthusiastic and growing.
Thanks for your comment. I've been using this book to build my classifier and extractor and my GUI, classifier and extractor all work as seperate .py files. I'm just not sure on where to start in integrating the extractor into working with selected files and then using the classifier to classify the extracted names of the file. 
I recommend you scrape the official census data for a list of names with gender. You'll probably have to take the date into account as well, due to changes in popular culture. "Leslie" and "Sandy" will give you trouble in English. One is dual gender depending on the generation, and one is a British short-form for "Alexander" (m), as well as "Sandra" (f).
Try pip installing it. More specifically the llvm-lite dependency is hell to get working. Which I suppose is why the developers just tell you to go with conda. 
Maybe novelupdates.com ? 
I'm not entirely against it :)
&gt; So long as it's really a unicode object Well, obviously. Personally, I find rooting out `str` objects in Py2 easier than handling surrogate escapes in Py3. &gt; It may not surprise you that I disagree about Python 3 Ultimately, it comes down to the kind of programs you write. If you're writing self-contained applications, especially if they have a GUI—web or native—Py3 is great (with the caveat that you need a wrapper to ensure UTF-8 is set on OS X, otherwise it defaults to ASCII and dies in flames). If you're writing command-line tools for Linux that should play well with other command-line tools, Py2 is usually the better choice because it uses the same POSIX text model as they do. 
Good article, but I want to point out that this is actually fairly inefficient for scraping. You'd want to use ProcessPoolExecutor when you want to spread work to multiple processes, but generally when webscraping, you're not CPU bound. Using asyncio and aiohttp, and probably a semaphore, would probably be better suited for this.
Seriously, how do you know what my expectations are? Why do you presume to know better how I want my program to behave than I do? What on earth makes you think that I would need to ensure that filenames can be decoded to Unicode if all I'm trying to do is copy a file from one Linux filesystem to another? Are you the kind of person who would choose to have an exploding program rather than a successful copy? Or just the arrogant sort that presumes that other people must be stupid if they don't agree with you?
Because I can avoid all the associated hassle by using Python 2.
Do you mean `input.decode()` or `output.encode()`? Either way, you're not exactly demonstrating a convincing mastery of the topic at hand.
You could use metaclass magic to create all the methods on the class which correspond to valid conversion sources. So HTML.from_list, HTML.from_str etc
&gt; As a professional python developer my first thought was "I have to use this for my next project". Similar attitude here. "I really want to use this... I hope it matures quickly so I can bandwagon the shit out of it."
Insult aside, let us assume for a minute that the variable in question is OUTPUT from a shell session, such as one would see from the SSH library Paramiko (or the variant Netmiko from Kirk Byers). In order to work with that output as a string, you would need to use output.decode() to work with it, or at the very least assign output.decode() to a new variable. Are we done here? 
I've been using discord.py for like a year, what does this allow me to do that that doesn't? 
Was in the same situation, I started reading c++ primer and then accelerated c++. Very well explained concepts in c++ primer ( its long tho, 1k+ pages but worth reading), accelerated c++ was also really good and concise without leaving aside important explanations. From what ive read, books are the best resources to learn c++ with the addition of the actual documentation of course. Hope that helps and good luck! Theres lot to learn and it will be weird at first.
Fun times at g0Ggle headquarters I hear then.
what
Well done. If you want to expand on this you could store your values (google memorisation) so the function can run over massive numbers. The Collatz Conjecture is a conjecture that states "no matter what number you start with, you will always eventually reach 1." Imagine if wanted to check ever natural number upto one million to see if the conjecture had any merit. Such as is shown here: https://projecteuler.net/problem=14
Get a shrink.
Have you considered using the svg format. There are python modules to process svg files such as svgwrite.
My project is really fly by the seat of your pants, develop on the fly kind of thing. I'm the only one on the project working directly with the owner of the company on it, and he is constantly changing his mind and wanting small modifications. It can be incredibly stressful and hard to design, plan and manage
Line 80 is blank in the script you posted. Is that the same exact script that gave you the traceback about expecting a float...?
As others have suggested, wade in by writing units tests for new functions as a design aid with pytest. You'll quickly notice your confidence in your own code rise. There is a sense of relief when you later have to do a refactor on that code, retest and see everything pass. Even better, if it fails, you'll know where and waste less time debugging. Pytest makes integration into your project very easy. Start by trying to integrate it into your project.
First off. I enjoy this library - it's fun. Either way, wanted to address the "pythonic " critique: &gt; It seemed like a good idea to overload a very unused operator, but yeah, seems like most people here are against it for a reason I don't fully understand yet. It's perfectly fine for a toy or personal project. The problem is when you want to extend this to a team environment. Think of a new developer on some project who isn't familiar with this library. How will they determine what exactly is going on? My first reaction is to search the file for meaningful definitions or imports, then search the internets. A few problems though: - The &gt;&gt; overload is an implicit result of importing a different name. You can't search the file to determine where the symbol is coming from (especially since its part of the python grammar). - The &gt;&gt; symbol has a pre-existing purpose. Without a library name, a "python &gt;&gt;" search is going to return results that are not meaningful. - &gt;&gt; is not a search friendly term to begin with. - It isn't possible to `inspect.getsource(&gt;&gt;)`. Compare this to the following, which does not have issue to any of the above points: &gt;&gt;&gt; from typecast import cast &gt;&gt;&gt; from typecast.types.time import Days, Hours &gt;&gt;&gt; cast(Hours(48), to=Days) Days(2) Also, you should keep type interoperability in mind. Time units are effectively timedeltas, but are not compatible. You would need to be able to cast to a timedelta, or more ideally, inherit from them so any method expecting timedeltas could use your time units. 
Argg pastebin reformated a bit the code.. Anyway I finally found a way to fix the issue : in one of my methods, there was two return in two different if statement and it seems like python doesn't like that.. Once I removed one, the code started to affect the value as it should. Thanks for your help :)
I was running into version dependency hell, so I reconfigured my dev box last week, and it honestly took about 10 seconds to install, configure, and get virtualenv + virtualenvwrapper working. I got religion real quick, and its awesome. 
You can add arbitrary comments to PNG files (PNG spec S4.2.3.1. "tEXt Textual data") which would be saved in the file itself. You would have to write your own simple GUI for users to be able to edit this text but that shouldn't take long. I don't have experience with Mac but reading up a little about it it looks like that Comment field in your Stack Overflow screenshot is metadata maintained by Finder itself, so copying the file between locations or machines may result in this data going missing. Writing directly to the PNG is the only real way to make sure this doesn't happen.
It's getting on a bit now (doesn't cover the latest fancy C++ additions), but I found the Wrox Press C++ Tutorial to be an excellent introduction to the fundamentals of C++.
Remind yourself that no one on the planet understands the C++ spec through and through
&gt; Fun times at g0Ggle headquarters I hear then. 
With that name, I think a function would be better than a property.
Make sure the resources they learn from aren't dated. The language has changed a ton over the years. I first started programming with C++ when I was young, then maybe 15 years later started taking another stab at it (after working as a python dev) and it's way different than I remember. It's practically a managed memory language if you plan to use it that way.
I updated the README with an example of how I am using it for mapping. https://github.com/TaipanRex/pyvisgraph
[Pycharm makes it really easy.](https://www.jetbrains.com/help/pycharm/2016.1/adding-existing-virtual-environment.html) 
NP, also, try /r/learnpython first for questions like these in the future
That would be far too logical 
Yea. But without a built in way that is sane it won't be used (and shouldn't be!). And without one OOP is a lot shittier than it would otherwise be. 
No problem! Glad you took the critique!
Pity it takes strengths of Python and turns them into crippling deficiencies :(
If you're familiar with latex then I suggest pdfpages. If you're not using Linux, I usually use pdfpages online with Overleaf to achieve this. Very simple with a few lines of code and sign up to overleaf is free and quick. Let me know if you're interested and I can dig up the tex code from my overleaf account. Not python but sometimes python is not the be all and end all. Though usually it is. 
If it's a standardized font, you could generate images from the PDFs and use an OCR library to grab the string in that region of the images, possibly less overhead than selenium.
Little arrogant.
what makes this a "bot" as compared to just a "script". it only does one thing, right? is there any interaction after the initial start?
Other people have posted some good learning resources, so I'll just give a but of general advice. C++ has a couple of gotchas that you really need to look out for. Things like automatic type coercion (ints acting as bools for instance), undefined behavior (can be very difficult to detect), and default implementations for things like copy constructors can cause really insidious problems. Look up some articles on them so you know what you're facing, and make sure you set up your compiler to give you as many warnings as possible (usually this means using -Wall, - Wpedantic, and possibly - Werror). 
Yeah, usually I just use setup.py. Thanks for the link, it was an interesting read. I never thought of distinguishing abstract and concrete dependencies, but it makes sense.
My goto procedure when learning a new language is to read one well recommended book on the subject and then just to start on a project. From then on I will google my way through the language problems i get. I used to read multiple books on new languages, but that didnt help much. When you read, every feature seem equally important, but in fact 20% of the language gives you 80% of the features you actually use. So too much theory is more noise than help.
Pip and virtualenv are different pieces of software and shouldn't be merged together. Virtualenv allows you to have an isolated Python environment with different versions of the same interpreter or even a different interpreter altogether (e.g. Pypy). This doesn't have anything to do with Pip. On the other hand, I agree that it would be useful to have a flag in `pip install` for installing locally. There are cases in which you just want to do that, like if you clone a repo.
Good article, but the opening sentence nearly kills it for me - it's "their", not "there" and "run", not "running". I like the underlying premise of the article though. As for the bot vs script distinction, I notice that Fintech now takes the concept one step further - anything that automates a task is now classed under "robotics". It took me a surprising amount of time to realise that they weren't talking about actual made-of-metal robots.
My knowledge of C++ is like a bed sheet that doesn't quite fit the bed. If I stretch it over one corner, I lose the other.. There's just no way to keep all of that in your head at once.
Don't try to bite it all off at once. Start small and spend the next 10 years figuring out the rest.
I come from the old school where you insist that every language other than the one you know is inferior so you refuse to learn anything else on principle, so I can't help. :-( I'd probably learn [Haxe](https://haxe.org/) though if there was no way out of the C++ requirement, which transpiles to C++ (and everything else), so the code could be in C++ but the language used could be comprehended my a mortal being. Come to think of it, if you learned Haxe you'd never need to learn another language. It's like the inverse of Python, which can import any language.
Wait, did you accidentally upload your Imgur API credentials to GitHub... If so change the secret key.
I had a similar issue, PyPdf was not able to scrape any data (it was a pdf with tables) I decided to feed the variable from the bash command pdftotext and that scrapes everything I need
Don't learn "old" Cpp. Start at least with c++14 and look at c++17. You get a lot of features similar to python
Even if this was OP's homework, we so rarely have something about sympy on /r/Python it's worth a look by others (17 upvotes so far).
Truly knowing C++ is like Truly knowing Cthulhu, it will change you in ways that can not be communicated.
but still, "hello".to_something is impossible to do, since this is python and not ruby.
He said C++, not Fortran77 or COBOL.
Thanks, it's nice to hear positive remarks :) You're right that someone encountering this code without any explanations might be a little confused. I wonder if having the Typecast metaclass isn't a big enough clue. Actually, adding a cast to timedeltas is really simple. It can be solved by adding one cast function (or two for a two-way cast), and should pose no problem.
Shamelessly plugging an alternative: now that there are (beta) wheels of pygame available, it's very easy to create an installer using Pynsist. You can even make a Windows installer from a Linux system. https://github.com/takluyver/pynsist/tree/master/examples/pygame
Does C++ even have booleans? All I've ever used is `stdbool.h` which just defines macros.
I think at that point you can just skip the spec and start reading compiler sourcecode.
Actually `bool` is the only new type in C++ (vs plain C).
Or just cpp.com
This also works in Python: from __future__ import braces
How about Minutes(60).to_fortnights() HTML.from_list(['a', 'b']) # I'm dubious of this one myself, just using your examples
yeah, i used this with buckys tutorials on yt as well. one intensive week later, it felt i have good understanding of basic concepts and could use them properly in an assignment a company gave me as a test. i also didnt know about object oriented programming though, so i had to grab that as well at the same time. 
What I was missing the most is the srtucture. What I mean by that is the first part should be a **short** introduction to what your post is about and who is it for. I was dissapointed because I expected some advenced concepts or practices. There is nothing bad about writing for begginers just make sure you make it clear. I want to emphasize shortness because almost the third of yourt text was some kind of intro. After that you showed some of your code and talked a little about approaching automation tasks. If I were a begginer I would want to see more resources, examples or interesting ideas, anything that can inspire me or give tips on self projects. And lastly: there is nothing wrong with **bot** part in the title because I would consider everything a bot that can automate tasks. I hope this helped a little and you can improve on these points. 
I've the same feeling, Go is more conform to the Zen of Python than Python... I think Python should come back to simplicity. But it will not, to late... So I think during the 5 years to come I will slowly migrate to Go, it's a fresh air, i feel like when i found Python after Java more than 10 years ago.
And stay the hell away from O'Reillys books on C++, they are worse than nothing.
Looks neat! Glad to see some more work in this space. Did you know of https://github.com/njsmith/h11 or https://github.com/python-hyper/hyper-h2 ? You may be able to replace some code (I just had a quick glance) with the former of those, and support H2 with the latter. Twisted's HTTP/2 support uses hyper-h2, and I can vouch for its quality. :) I would also like to run the benchmarks locally; I get kind of sad when there's benchmarks on networking stuff without Twisted -- especially on PyPy (and soon, PyPy3.3/3.5). These sorts of platform benchmarks usually end up getting blocked on the eventloop, or with uvloop, the horrendous speed of aiohttp -- and I think a JIT compiler could raise some important points about speed in Python under different frameworks (since it is not just the framework that needs to be fast, but also the business logic inside it!).
Have you evaluated other options? Why does he need C++ exactly? Performance? Has he looked at numpy? I have tried a few different approaches to solve this problem. SWIG sucks. Forget about SWIG. Weeks of wasted time fricking with macros. Cython is great and has some C++ support https://github.com/cython/cython/wiki/WrappingCPlusPlus it'll shit it's pants if C++ throws an uncaught exception though; you can get around this by writing a pure C wrapper that catches exceptions then wrapping that in cython. Extra work though. Eventually I gave up, threw out my C++ code, and rewrote everything from scratch in C and wrapped it in Cython. I have heard good things about http://www.boost.org/doc/libs/develop/libs/python/doc/html/index.html and https://github.com/shedskin/shedskin I would figure out what's the most bleeding edge version of the C++ standard you can support and target that for learning. *I know OP's question was "How to I learn C++". The reason I responded with a bunch of tools is C++ is such a huge standard that, according Bjarne Stroustrup himself, it's too big for any one person to learn it all. So it makes sense to start with the subset required to use the tools you need, rather than learn a bunch of stuff that won't directly apply.
I'll reiterate what other commenters said: first and foremost make sure your references and learning materials are at least from 2014, and the more recent, the better. Idiomatic C++ from a decade ago is a completely different beast from C++ now.
You'd be amazed how many people do this on a weekly basis and don't change them...
WARNING: Do not turn this into a drinking game by taking a shot every time they say visual studio. You will die. 
Ummmm, I think you perhaps don't understand fully dynamic languages and the limits of what a JIT can do. While you can compile "just in time" you are simply never going to get the native execution speeds of statically typed languages like Java. You either have to have fixed type declarations, or your will be re-compiling each and every time the program does a dynamic type assignment.
So it turns out Amazon doesn't allow independent sellers to drop the price of their book to $0 unless I sell through Amazon exclusively. So I am going to run my own free sale - https://www.reddit.com/r/Python/comments/57xaud/python_201_book_is_free_for_48_hours/
Thank you!
Rule of thumb for C++: Treat warnings as errors, unless you are very sure of what you are doing; even then, think twice.
It's cool, but it's not super Pythonic, to my eyes. However, if you turned this into a little library, I have a feeling you'd get quite a few downloads on pypi.
For extracting data from PDFs there is PDFQuery https://github.com/jcushman/pdfquery For simply splitting pdfs by page PyPDF is fine, although it doesn't have many features it's find for manipulating whole pages.
Sounds like Tornado. Is Sanic better?
No reason, I'll look at Python 3 compatibility.
Meh. 
Working for me now. Thanks for writing the book, and sharing it here!
Thanks for checking it out. I hope you enjoy it.
Thanks man!
Good point. In Python 3 it's bytes.maketrans(). 
which version do you use? I have same problem and it's firefox 49 which run inside selenium official docker container.
&gt;Using asyncio and aiohttp, and probably a semaphore, would probably be better suited for this. That's what i've been doing, 3 or 5 concurrent requests at max to not be a jerk while still getting a nice speed boost.
You can make an object that works a bit like it. class Ranger: def __getitem__(self, slices): first, second, ellip, last = slices if ellip is not Ellipsis: raise TypeError interval = second - first return range(first, last + 1, interval) r = Ranger() r[5, 7, ..., 10] # =&gt; range(5, 11, 2) Could be expanded to produce ``itertools.count``, have default parameters and then you could put it on ~~npm~~ pypi. 
Thank you!
Love you!
proofread is one word bb
Ubuntu version is 14.04. Selenium version is 2.53. The version of Firefox that works is 45.0.2. I'm not sure if newer versions of Selenium and Firefox work together. After I got that working I never revisited the problem.
Thanks, man!
Thank you for this! I've been looking into getting back into learning programming after a long hiatus. This will definitely help.
Thank you! This looks fantastic. :)
Thank you! Really! So many books about basic stuff and so few just the next level. 
Will check it out.
Thanks!
Nice addition. Looking forward to seeing more.
Thanks a lot for this! Contains quite a few topics I've been meaning to familiarize myself with. Will certainly be on the lookout for upcoming material.
What was the problem with the generator? It's shorter and easier to read and no explanation for why it's inferior was given as far as I could see. Implementing a stack yourself is a bad idea in my experience. Recursion is fine and if your data structure is nested enough for it not to be you probably need to rethink something. 
beeware has a windows shipping thing too I think. 
Well, I'll bite and "punish" the click-baityness (-1). A bit is okay, but that has nothing to do with a "bot".
Thank you for this! To anyone who doesn't know which provider to choose, using LeanPub meant I just had to put in an email address and it didn't even ask for payment information. I couldn't get Gumroad not to ask for payment info.
Thanks a lot, mate! Great work!
Thank you for this!
Thank you, this is super!
In "Reentrant Context Managers" section: &gt; Let’s use the `redirect_stdout` context manager that we used before! ...the code sample here looks like it is not formatted correctly (PDF, from leanpub). EDIT: [here's how it looked for me](http://imgur.com/yNil78S).
nothing. the language will be incredibly unwieldy. programs will all look like rhyming gibberish. but I still want it to work. I guess my main goal is to have it force you to type every letter as an increasingly longer string of repetitive jargon as you go down the alphabet instead of just typing the letter. not for commands I mean for strings, like instead of: print "hi" I want something like: parbenglarben arvensarveldargenharbelbarbenlarbenhievensarvencargenlargendieveldarvendibeldibensievengarbenekendekelfekelfargenforbenwievenhievenlievelgarbensarveldargenbargenharbenschieverschievenjarven arvensarveldargenharbelbarbenlarbenhievensarvencargenlargendieveldarvendibeldibensievengarbenekendekelfekelfargenforbenwievenhievenlievelgarbensarveldargenbargenharbenschieverschievenjarvenieteltarvelpievelparben I mean I'm really new to programming I've been at for 3 months, only consistently for a month, but my mama said making a language is a great way to learn a lot of stuff I'm just having trouble finding resources? like where do I start basically, do you have any tips
Well that's good to know. I'll take a look.
I've learned /u/SustainableNihilism ;) these were the olden days
Woow, thanks a lot! I've been looking for a book like this for quite a while! I will definitely read it. Best of lucks!
I think python is trying to send the whole downloads folder to the trash. try using os.walk() to return the files and folders *inside* downloads and send those to the trash. I've only been using python for a little while now so this might not work but in my head it would be something like send2trash.send2trash(os.walk(C:\\Users\\MyUserName\\Downloads))
Top stuff, thanks for this.
Thank you sensai *bows* 
The generator is still a recursive method, so the first two criticisms (function call overhead and recursion depth limit) apply. I agree that for many purposes the generator solution is probably fine. On the other hand, in analyzing data I have often needed to work with trees of depth &gt;1000. The iterative solution is plenty fast on such trees, but the recursive solution hits the stack limit pretty quickly.
Thx!!!
I used Dive Into Python along with some others when I started out and I thought it was a good way to start. Python 101 is aimed at people who know how to program already, just not in Python. I am thinking about creating a new version of Python 101 (or naming it something else) for people who are just learning Python as their first language though.
Thanks for buying the books. I am so glad you enjoyed them. Hopefully you will find my new material interesting as well.
Well scratch that...it will be up soon. Leanpub seems to be bogged down at the moment
This is a cool pattern that I haven't thought of or seen before. I don't know if you're the author of the article; if so, I'd suggest comparing this pattern with the familiar iterative DFS implementation: def dfs(root): stack = [root] while stack: node = stack.pop() stack.extend(node.children) From what I can tell, your stack of iterators solution has the advantage of saving memory when the tree is wide, since it essentially stores one iterator per level of the current depth of the search, whereas the above will store many more nodes in the stack. If the tree is very narrow (a chain, for instance), then both approaches can store every node, so in the worst case both approaches take O(n) memory. 
Thank you! I will definitely take a look at your book! I have been going through some of these subjects lately - just today I used the importlib module for the 1st time - as I try to do more sophisticated stuff. Thank you again for the kindness of giving your work for free!
Thank you Driscollis Very nice of you to offer your hard work up for free to the community Kudos to you young jedi
Hello, you are probably IN python , so thats what happens: Python 3.5.1 (v3.5.1:37a07cee5969, Dec 6 2015, 01:38:48) [MSC v.1900 32 bit (Intel)] on win32 Type "copyright", "credits" or "license()" for more information. &gt;&gt;&gt; pip install python-pptx SyntaxError: invalid syntax but you need to do it from your command line. C:\Users\micha&gt;pip install python-pptx &gt;&gt;&gt; 
Yep, that's essentially what the "stack of iterators" pattern is doing. Maybe I should clarify: when I say the "generator is still a recursive method", I mean specifically the example in the article, which is a recursive generator.
Gumroad shouldn't ask for payment info once you enter the offer code
There are a strange number of Driscolls who decided to name their children Michael...
Weird, the payment thing wasn't disappearing for me earlier, but now it is. Maybe I mistyped the offer code before.
I don't think this would be a very productive use of your time. Maybe once you learn more about programming in general you could flesh out the idea a bit more, but what exactly will you be learning by tackling this project?
Thanks!
Thank you!
Thank you!!!!! &lt;3&lt;3&lt;3
Thank you!
Python is a lot of fun to learn and a blast to use. I hope you enjoy the book and the language! 
That might be true. On the other hand, python stack frames can be quite large, so function calls aren't cheap. I don't have a good feel for this, though. It's useful to note that networkx implements its DFS as the article does: as a stack of iterators.
Free - for $14.99 ?
So, I downloaded it because free and started to look. I decided I would see if I can figure out your `argparse` section and I am already seeing where I may become frustrated by this book. It isn't about content, it is presentation. Two comments. 1\. It is very confusing that *all* code sections have numbers. For example, it makes sense in a **code** listing (e.g. page 5 and 6) but then you use the same thing for example interactions (middle page 7). Later on page 12 your good about using `&gt;&gt;&gt;` which helps a little but for interacting in the shell, page 7 is unclear. 2\. Your coloring is messed up. Look at the colors in the bottom verbatim block of page 7. Namespace(x='something', y=False, z=10) The coloring doesn't end at the end of `'something'` before `y=False`. Also, what is `Namespace`? I am guessing that is how `argparse` shows a `print` call, but this is also unclear **Addendum**: I just want to add that I do not mean to crap all over your book. Skimming through the rest of it, I think I may find some of it useful. I just started looking at the DB stuff and that looks good too (though, at the end it sounds like you suggest people use SQLAlchemy but don't teach it...). Anyway, thanks for the book. I will see if I find it useful
This is actually a limitation imposed by Leanpub. I'm not aware of a way to turn off line numbering for some listings and not for others. It's basically an all or nothing setting unless they've changed something that I'm not aware of. `Namespace` is basically a dict-like object that stores the arguments
There are so few books on Intermediate Programming, so thank you for this. I'll give it a once over, and if I find it useful, pass the title and author off to the STEM team at my university, which is looking to start a few Python courses. 
I saw it on Gumroad.
Okay, just a quick look over the table of contents and I'm sold. I get paid on the 1st. I'm buying a copy of 101 and 201 for an IT student friend of mine who desperately needs more confidence with programming. 
Thanks! The cover was fun to do and ended up looking even better than I envisioned it.
Thanks! Depending on their needs, they might find Python 101 useful too
Thanks for the book! So the cover art has a group of my coworkers wondering if there is more to this story? Are the rodents studying pythons, while one of them is being constricted at the front of the class? :-)
I'm coding something in the ugliest way possible to have a proof of concept. As soon I get something working, I share my code. Right now I dunno if the built-in solver will understand my intention isolating the variables. Thanks for your help 
I was thinking that as well. I might pick that up for myself as an introduction to Python 3, since I'm still using 2.7. Thanks again!
good point I'll just go back to bots for now
Good advice in general, but I don't think it applies here (unless your trees are truly huge, with millions of nodes). First, I wouldn't call implementing an iterative DFS "bending over backwards". It's really pretty [simple](https://www.reddit.com/r/Python/comments/57wnqq/the_stack_of_iterators_pattern/d8w2tpb). Besides, it is often the case that an iterative solution is more space efficient than a recursive approach, even in languages where recursion is optimized. Take as a toy example computing the `n`th Fibonacci number. The recursive solution (with or without with memoization) requires O(n) recursions. That's O(n) stack frames that have to be kept in memory. The iterative solution, on the other hand, takes constant memory. Second, it takes less than a quarter of a second to run an iterative DFS on a chain one million nodes deep, and all of the trees I see in my day-to-day are much smaller. In fact, the recursion limit in Python is, by default, around 1000 frames. This means that a recursive DFS throws an exception when the tree is around 1000 nodes deep. On the other hand, an iterative DFS on a chain of depth 1000 completes in a few microseconds.
Just dropping a line to say thank you!
&gt; In order to work with that output as a string, you would need to use output.decode() to work with it No, you wouldn't. You only need to do that to work with it as Unicode and/or mix it with other Unicode strings. If you're doing something perfectly reasonable like moving stuff from one Linux filesystem to another (Linux filenames are bytes, not strings, remember), then there's a fair chance you'll fuck something up by decoding them. If you follow [the stupid suggestion](https://www.reddit.com/r/Python/comments/57p61b/what_do_you_think_needs_to_be_improved_in_the/d8ub3ag) of /u/zahlman and replace bytes that can't be decoded, you're going to write the *wrong* filename, and cause errors with other tools that don't similarly misbehave. If someone then runs, say, `rsync` on the files you've messed up by trying to decode the names, you're going to end up with duplicates in the best case, or deleting important files in the worst. Yeah, if you want to show the filenames in a GUI or write them to a JSON file, you need to decode them and coerce them into some kind of valid text. But that's only a *display* name. If you fuck about decoding Linux filenames *and then use your decoded form as a filename*, your code is wrong and chances are good that you'll break something.
Thank you!
primo thanks!
If you don't mind me asking, why did you take "a long hiatus" in the first place? I can't seem to get myself motivated to follow through with learning beyond the syntax. I don't have any particular project to embark on that would encourage my use of Python (the limited amount of knowledge I have).
... You do know that `bytes` objects have a `.endswith` method as well, right? If you need to treat something as bytes, then treat it as bytes. If you need to treat it as a string, then treat it as a string. They are not the same kind of thing, and Python is a strongly-typed language. Like, originally your complaint was: "I expect it to let me treat encoded strings like strings, not sequences of integers.". If the thing "is *bytes*", and any attempt at decoding them is "broken code", then the expectation of "treating encoded strings like strings" is invalid because *it isn't an "encoded string"*.
Thank you! :)
Pls answer raskim7's question. Pls. I'm begging you. 
Thank you! I've been looking for something just like this!
Thanks!!
I don't want to repost this without your permission, but there are plenty of folks over at /r/learnpython that would probably benefit from this as well.
Awesome! Thanks for the tips. 
Awesome! Downloaded it now, thanks a million!
I did a couple simple tests and PhantomJS was slower than ChromeDriver for me for some reason.. do you have any info as to why that might happen?
What did your profiler say?
Thank you very much! 
&gt; Recursion is fine and if your data structure is nested enough for it not to be you probably need to rethink something. He has maze navigation in his article as an example. A graph is very standard way to store/navgiate a maze (and you can hit Python's recursion limit of 1,000 on a 33x33 grid which is quite tiny as mazes go. Any mud is basically a list of rooms, each of which has a list of exit adjacencies, and that's a graph.
Thank you! 
That gumroad website is bizarre. There’s no desktop version, and it’s meant as a buy and sell hub, but absolutely all verbiage assumes you’re there to sell.
This is great, thanks for doing the world a good service!
Thank you so much!
asyncio doesn't even have the overhead or constraints of threads -- it's a single thread running an event loop. I would use your solution if I didn't have easy access to a loop, but if you're writing this script from scratch, I would opt to use asyncio over even ThreadPoolExecutor. It's not that much more LOC either. I use it here: https://github.com/rckclmbr/pyportify/blob/master/pyportify/app.py#L157-L164 or in a quick example to match yours (in python3.5): results = await asyncio.gather([parse(url) for url in URLS]) where `def parse(url)` is a coroutine that uses a semaphore. Or basically sem = asyncio.Semaphore(100) async def parse(url): with (await sem): # do stuff
Sounds like you need to install the python-devel package from your OS package manager. I don't use Fedora but it should be: `sudo yum install python-devel`
Looks like a very comprehensive book, and seems to cover multithreading well. I'm always happy to improve, especially in my favourite language. Thanks for the book, and good luck with your next one! :D
Thanks for the book!
I am currently still reading through some beginners material to get a firm base since I am teaching myself, But I appreciate you doing this I now have this up next in the reading list. Thank you so much!!!
I hope they check it out then, thanks!
Yeah, it's a bit odd. They do make it super easy to sell and I have found that they also have one of the best cuts for their creators.
Yes, I've noticed that...which is why I wrote the book! ;)
Go ahead and repost it. I wasn't sure that it fit there since it seemed to be focused on answering questions... [edit] - I just reposted for you. Thanks!
That is such a fascinating field. Let me know if you do indeed find it useful.
Good luck on learning the language. Python is pretty easy to pick up and it's fun to create your first programs!
You'll get a lot more help at /r/learnpython. 
You'll get a lot more help at /r/learnpython. Writing and reading to a serial port is a lot like a socket on a unix machine. Look at `pyserial`. 
Thank you! Consider posting to /r/FreeEbooks as well.
You'll have the most flexibility if you consider Cordova instead of either. Kivy locks you into Python. Ionic locks you into Angular. Cordova lets you choose to work with whatever frontend and backend tech you want and package it as a webview style app. JS-&gt;NativeAPI bridges come in the form of plugins.
Thank you!
This was a thing `setuptools` could do, but basically it bolted a parallel non-Python import process onto Python to do it. But generally it's considered a Bad Idea™ to do conflicting versions of a single package in the same environment, so people don't do that (also it's rare that you run into a situation where two packages require literally-incompatible versions of the same dependency).
&gt;``list.append()`` and ``list.pop()`` are implemented in C, but still function calls. But not python function calls, so they don't create a frame and push it on to the stack AFAIK (which is what people mean when they say function calls in python are expensive).
Thanks, much appreciated!
I recently made a script that takes all my lecture notes and compiles them into a master file then uploads it to googledrive so i can study anytime on any of my devices. Had some fun compiling my notes from some older classes just to watch this baby in action.
Thank you very much! 
An asynchronous and pythonic sdl2 wrapper. Just for fun.
Facilities for building Python code with C/C++ dependencies with something other than distutils. Ideally, a general purpose build system like Cmake and Meson.
Web scraping. Although there are 3rd party APIs for this, sites normally change their code a lot to prevent anyone from pulling this directly. My workaround involved using Python's webbrowser module to fool them into thinking I'm doing this manually.
Thanks!
That's exactly what convinced me to get it also. :) Thank you, OP!
Thanks!
Looks like you're using Python 3.5 so try `sudo yum install python3-devel`
Thanks! 
Thanks!
Ah... Well that did it. Perhaps this would have been more appropriate for /r/facepalm.
Web scraping and autorun things ( with specific rules). But mostly im using it to automate stuff at my work (building reviews , etc)
&gt; n.wikipedia.org/wiki/Security_Administrator_Tool_for_Analyzing_Networks &gt; &gt; Satan says hi. Not even remotely similar. The word SATAN by itself is not offensive, and a funny abbreviation makes it easier to remember. 
Thanks a bunch!
Downvote for linking to images instead of text. Programming is about writing *text*. You don't use Photoshop to write code, you use a text editor. Copy and paste the text you want to share, don't take a screen shot of it. If there's an traceback, it is text too: copy and paste the traceback.
&gt; The print difference is honestly one of the most obvious ones. Only for beginners. For seasoned, experienced developers, Python 3 has so much more to offer that there's no going back.
Hah, I actually *just* whipped up a quick command line tool to easily get SANs off SSL certs: http://btmiller.com/2016/10/17/sanpai-inspect-subject-alternative-names-on-ssl-certificates.html or just cut to the chase and install it with `pip install sanpai` :)
Web scraping, bots, AWS scripts for work.
I read them like a novel. Just to get the big picture. The nitty gritty comes when writing code. For that i usually google to find solutions for problems. It might be that this is the easiest way when you already know a few languages. Books and examples might be better when just starting out.
Done.
Thank you very mich. Will definetly read it instantly.
I've just started working with C/C++ and Python, all I've done is write a basic extension module in C++. Is that what you're talking about?
I'm at best a very novice python coder but had to learn a few things for work. While I don't like the indentation style it does have a certain simplicity to it. Im going to check this out. Thanks :)
Cheers OP, the topics look great :) 
Thank you!
Why don't you like range()?
Thanks!
Thanks for Sanic. It's very useful for me and many others situated as I am. I hope the work gives you whatever you may want back from it.
Thanks a ton! I have been looking for a book (or tutorial) which could help me for the intermediate level. :)
Hard to say without any actual benchmarks. Popping a frame is usually free (it's just a pointer change, no cleanup) and calling a C function is only twice as fast as calling a lambda: marc@nava ~ $ python -m timeit -s 'f=lambda: 0' 'f()' 10000000 loops, best of 3: 0.0995 usec per loop marc@nava ~ $ python -m timeit -s 'f=[].__len__' 'f()' 10000000 loops, best of 3: 0.0496 usec per loop So, if you need two C-Function calls (``list.append()`` and ``list.pop()``) instead of a single python function call, you ate up your performance benefit already. The dot-lookup is also quite expensive by the way.
Lies. The original post has a positive vote total for this subreddit.
Okay, I tested it. The stack-approach is indeed a little bit faster than the recursive function. I underestimated the costs of a python function call. https://gist.github.com/defnull/30966587577466f853201269023aa3b7 edit: But after optimizing the recursive approach a bit, I got it faster than the stack approach again. Object creation (e.g. intermediate lists or iterators) is a very strong factor. **tl;dr; The performance benefit of a non-recursive approach is so fragile that it's not worth the additional complexity.**
Here is just another account with some Python related twits (although they don't look like tips): https://twitter.com/TwittingPython
Where do you save your lecture notes? Basic text/word files or via a program like evernote?
Don't get me wrong. range() is fine, but there is more you can do: http://learnyouahaskell.com/starting-out#texas-ranges We can have stuff like: [1,2,...] ['a',...,'z'] [1.0,1.1,...,5.0] Also I like it sweet. It's more intuitive to read (at least when you come from a mathematical background).
Thank you
At home - I have a white noise generator for my son in his room (basically a speaker and a raspberry pi) which is controlled by a button on a webpage. It's extremely simple at the moment, but I plan to make it more feature-full (adding other types of white noise, lullabies, maybe control a night light?). In work - well I use it for everything. I have build and test systems for our main code (in C) written in Python (we have no real need for a CI platform yet, so a simple system in Python is perfect. We also use it to automate all of our hardware testing - controlling instruments, generating reports, etc. Like, literally we use it for everything.
Thank you! 
A script that checks my local online marketplace for price drops every 15 min or so and sends me an email when the price is under the maximum amount I want to pay. Basically a camelcamelcamel like alert for my local "eBay".
Out of curiosity, what did you decide on next? I'm in the same boat, 1/2 done Automate the Boring Stuff, and am currently in the MITx 6.00.1 course. I really don't know where to go from here.
Thank you so much!
Thank you from Tunisia!
I recently finished a total rewrite of a script that I run once a year to compile statistics on Wi-Fi usage at our local libraries. It reads dozens of .csv files as input (from an automated report that runs monthly and emails the report to me) and parses them using Pandas, crunches the data and then creates a pivot table with the results that I want and saves that as an Excel spreadsheet. This year it was 53 .csv files with close to 900,000 lines total parsed down to 13 rows and 12 columns in the pivot table. Run time less than ten minutes. Good until next year.
WOW! Pretty cool! A new-modern list of awesome-python.
Thanks!
Thank you so much! 👏
I was at the meetup tonight - great project!
Thank you! And I absolutely love the cover art.
No, Werkzeug includes a web server. It is subclassed from SimpleHTTPServer. Nobody in their right mind would use it for a high traffic public deployment. An experimental internal low traffic deployment maybe.
If you have no need to decode your filenames, don't decode them. You can open files using bytes. You can do the same "string" manipulations you did before with bytes.
Change shirt slogan to "accept NotImplementedError" and you got yourself a stew goin'
Thanks for this! Got my copy!
Thank you!! it is a great book!
Thanks !
Could you stop spamming this all over with multiple accounts? 
Thanks alot. 
Ok, now I understand what you mean. In a mathematical context these ranges are quite clear. But, imho, in a real applied programming environment, you have to define an intuitive way to decide what happens in cases like these: [1, ..., 'z'] [1, 2, ..., 10.123] or, more generally: [object_1, object_2, ..., object_n] The best thing you can do is write a module containing ranges/generators/iterators for each specific problem domain. 
The mods would have to create a rule to block submissions to the subreddit from those domains.
Programming is an an important topic for our future. I am happy to help others down that fun path of learning something new!
Much appreciated
I hope you will find it helpful some day. Thanks!
No, Excel doesn't have a test runner.
No need. The numbering isn't really that bad and for the most part, you're not working outside the Python prompt. I would work with your editors to fix the syntax highlighting though.
Which site is offering updates to the book?
Both Leanpub and Gumroad will receive updates. I update on Amazon too, but that's much slower (and I can't do free sales there either)
&gt; takes all my lecture notes and compiles them into a master file then uploads it to googledrive Dumb question here but why don't you just write them directly to googledrive in the first place?
Would love to read this. But it took 30+ minutes to get a token from leanpub, tried it 8 hours later and it didn't work. Won't send me one now. And gumroad just doesn't respond. No idea what their issues are, but too annoying to keep bothering.
thanks!
:)
Thanks!!
Thank you! I've been wondering about itertools for a while now :) !
Thank you sir!
THANK YOU KIND SIR!
Great! Beautiful cover.
Thank you so much sir.
What's a 'dict'?
I automate inventory entry for eCommerce with it...
A script that watches a radio station I like and collects all the songs it plays, how many times and the new songs added so I can find new songs, next step is to add auto download with btsync to auto add to my phone and computer. One that sends me a text when there is a Reddit post that reaches 4k upvotes in under 3 hours, working on migration from 2 to 3 and pep8ing (one of first scripts from 2 years ago). One that logs into a micro investing site and checks the apy of offers and if ones good enough, right when it comes live it buys it. One that goes through a huge list of stocks every hour and checks for undervalued high dividend stocks and puts it on my website. Future: making a script that logs into meh.com and buys it if it's the mystery box, but having trouble selecting the overlay to put in information.
I'm not familiar with Pony. What's the advantage of using Pony over SQLAlchemy?
That was obvious. I too checked the site and googled too. I am looking for a comparison from someone who is worked on both. 
My company's network.
Thanks! I was referring to the wxPython cookbook. Does either one have early access to the book or was that just for the kickstarter?
I'd love to see that one!
Might also be helpful: https://www.reddit.com/r/Atom/
That's everything
Who uses native apps these days :D? Indeed, it's really annoying to create apps using cx_freeze. You'll switch to rolling web apps yourself soon enough :-)
No I didn't really mess with my phone or car yet 
Network device configuration backups! I use it to connect to various APIs or CLIs to backup/archive the configurations in our environment. Additionally, I'm starting to use it to automate access later networking changes, that way any configurations come from a standardized/preconfigured and pre-approved list. 
Returning HTTP responses to people who make HTTP requests. It TOTALLY beats running netcat on port 80 and manually typing out responses.
[A very pythonic API](https://docs.ponyorm.com/queries.html).
Excellent, thanks for this! Also purchased your python 101 book, 
Our language is named after Monty Python and you're complaining about names making people take things less seriously? What about "import antigravity"?
&gt;The word SATAN by itself is not offensive There are religious people who refuse to accept a licence plate or a social security number that has the digits "666" in it.
The explanation I can think of is spotty internet connection, but even then there is an offline mode for Google Docs if you lose connection. Either way, sounds like a fun project!
If you make it available via public link then I think you should be able to use curl as mentioned, otherwise if you do not want it available through a public link then use the google api client, gspread, gspread-pandas, or [df2gspread](https://github.com/maybelinot/df2gspread). The only one I've used is df2gspread. The only difficult part is navigating through the maze of the google console to enable the correct api and getting the correct credentials.
couldn't one build those higher level query APIs on top of SQLAlchemy instead of duplicating all that other effort? SQLAlchemy is a lot more than just a query builder. How does Pony beat SQLAlchemy in other ways? Is Pony useful for creating an ORM layer for a potentially horribly designed legacy database? B/c that's really my SQLAlchemy bread and butter, is integrating with the "impossible to integrate with" legacy MySQL DB. SQLAlchemy can work on tables that are missing primary keys, for example, or relate tables that are missing foreign keys, with some limitations, but it mostly works. SQLAlchemy has a crapload of DB drivers as well.
Clickbait
This is good news. The previous license was little restrictive for me.
Every morning I gather data, creates six graphs, embed them in an outlook email which is sent to the C-level executives...while I get a cup of coffee. . . It's really great to automate the coffee making.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Awesome, thanks so much! Looks like great content!
People on here be doing stuff that actually matters... Meanwhile, I made a script that reads from a csv file filled with show names and days they air and pulls up the correct streaming page for them based on the type of show they are. I did this because I'm on the other side of the world and keeping track of what's airing on what day in the US is a pain in the butt. Saves me a decent amount of time everyday because it opens the correct page in batches, rather than having to manually search each show across a couple different sites. And I use python for automating my lesson plan sorting. I can just produce lessons and materials and it automatically sorts it into the right subdirectories so I can quickly find GAMES or WORKSHEETS or any tag quite simply based on class level.
Thanks a lot for this!! :) 
Related to testing: * Log backups. * Log scraping for failure rollups. * Performance measurement logging. * CLI / menu testing. * Web-based automation / regression testing
What do you mean by "not working"? Also, post questions in /r/learnpython next time.
sorry my bad, never posted here before, essentially, installing modules works for python3 and 3.5 but not for 2.7 as in I get a TypeError that theres no module with that name.
How are you installing the modules?
'sudo pip install pyimgur'
What's the output of `pip --version`?
pip 8.1.2 from /usr/lib/python3.5/site-packages (python 3.5) 
There's your problem then. `pip` installs modules for the version of Python `pip` itself is running on - in your case, 3.5. If you want to install the same module on Python 2, try `pip2` instead.
I took a long break because of work and school. We switched functions here at work so I don't really need to code as much as much as I did before, but I'm more management anyways so I wasn't doing most of it. I just kinda picked it up to learn it. Beyond that I've had nothing to really work on as I'm not that creative when it comes to programs and what I want to do with them. Like you I've just kinda learned the syntax and I can understand what programs do when I look at the source code. I just wasn't able to write the programs myself.
pip2 ain't a command :/
theres pip, pip3 and pip3.5
What distribution are you using?
Right now, no. But I have several ideas for Python 101 and the ones that don't fit there will go into Python 201 or a separate book. But don't despair! I do have some ideas and fixes planned for 201 too
Run `sudo pacman -S python2-pip`.
I guess it just stems from the fact that the joke here - "lulz, Churches lie to you" is going to offend a decent amount of people. I'm not religious myself, so I don't personally care, but I can empathize with the people who *will* care. This makes it less likely for the library to see any sort of widespread adoption as it decreases the virality factor of the library - people will be less likely to share this with people if they don't know how religious the person/audience is. On the other hand, cute things like naming the language after Monty Python, or the 'import antigravity' thing actually increase the virality factor. The fact that the author is wiling to hamstring their own project for a joke signals to me that they aren't serious about the project. 
Oh my god, I really like that. I use generator expressions like crazy, so this would make things far more consistent.
Thanks, will do 
It works great for development and debugging, but my apps aren't high traffic so I miss such details.
Thank you! Should I start with your 101 book if I'm just getting started? And/or use other resources along with the 101? Any recommendations? 
There are lots of great beginner books out there. I highly recommend Al Sweigart's books (How to automate the boring stuff) as well as Lutz's books. But there are plenty of useful blogs and tutorials on the web too. Python 101 is aimed at people who have developed in another language and want to pick up Python. I've heard some say it's great for complete beginners and others have wanted more hand holding.
My morning web novel and manga scraping.
I use it to cleanse production data after I've imported it into a dev DB (scrubbing people's names, blanking birthdates, etc.).
You've come to the right place.
If you have to write unit tests for your spreadsheet, you probably shouldn't be using a spreadsheet to solve the problem in the first place. You should be using a database and Python or R. https://web.archive.org/web/20160325131545/http://www.michaelmilton.net/2010/01/26/when-to-use-excel-when-to-use-r http://fantasyfootballanalytics.net/2014/01/why-r-is-better-than-excel.html I understand the article used the example of inheriting legacy code, but I just want people to be clear that Excel is not an ideal tool for this kind of situation if one does have a choice. If it's important enough to be unit-tested, it's important enough to be version controlled.
Dude wtf is that subreddit
His favorite text editor could be offline, or better than the laggy interface of Google docs. 