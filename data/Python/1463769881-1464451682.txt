Yeah, this is mostly the problem. I've run into it, but only doing web-dev: I feel the architecture (dependencies) of web applications often make it easy to create circular imports. 
I've had much more luck using Anaconda cross-platform than I have using other environments, and Anaconda is easy to set up. You should be able to use almost all IDEs with any virtual environment. If you're in the education space, you should be able to use PyCharm for free. If not, the community edition is awesome. 
I teach at a university and I insist Anaconda be put on all the machines for my classes. It takes away much of the pain of using Windows with Python. Even though I have licenses available for a paid IDE, about half my students like Spyder. The only real problems I've found are: 1. The debugger is based on PDB and is a very primitive text-based interface. Not a problem for an old man trained on XDB back in the day but younger students are bewildered by &gt;typing&lt; commands. 2. Sometimes the run module gets a little confused and can't find the command line sub-window to send its output. Not a big deal, just open a new one but newbie students freak out. A good alternative would be PyCharm - they have both a Community and an Educational edition that are free and not too hard to learn. https://www.jetbrains.com/pycharm/
Your getting downvoted because you didn't add anything to the discussion, which is exactly what the voting system is for. If you had said 'typo' then actually added something to the discussion then no one would have downvoted. But I am (ironically?) also not adding anything to OP's discussion... so. But who really gives a fuck about downvotes? 
Doctests are tests.
Exactly... "Do you parse the dom by yourself?", I'm not that clever :p 
before 2020, rather than in 2020.
LOOK AT ALL THESE PEOPLE TALKING TO ME!
I wouldn't recommend this unless you're fairly good. Hacker news can be a tough crowd. 
NodeJS, the PHP of the 2010s...
This differs from other Python frameworks like ask-alexa-py, which is for deploying skills on Amazon Lamdba. Flask-Ask is a Flask extension for developing skills that you host on your own server. Extend your existing Flask applications by adding new voice user interfaces, or build entirely new experiences that stand on their own. A video tutorial on the github page shows how to setup ngrok for rapid app development on localhost https://github.com/johnwheeler/flask-ask 
I'll have to see whether the organization I'm putting this together for qualifies. They're certainly educational. I haven't used PyCharm myself (I'm a PyDev guy) but I know lots of Python developers swear by it. Do you think it's appropriate for students? We don't need fancy project configuration wizards and static analyses -- just a clean run/debug interface with graphical variable and callstack inspection would be great. I actually didn't realize until you mentioned it that they had a free edition. That'd be great -- I don't want to make students feel like they're locked into paying for an IDE if they want to continue programming after the course. Thanks.
Good to know, I'll keep that in mind.
Note that a similar tool (pyped: https://github.com/ksamuel/Pyped) use the very same command name. Don't install both as they are incompatible and erase each other.
I always was hesitant to move the Py3 because it was slower than 2. Is that still the case?
Happens quite often in big misgrown hyper-agile projects.
Urgh. Hipster-Coder... If you want everything, but do nothing for it, then of course will you drown in surface-problems.
 trymas at MacBook-Pro in ~/D/BlacklistsChecker-master ↪ virtualenv env New python executable in env/bin/python2.7 Also creating executable in env/bin/python Installing setuptools, pip, wheel...done. trymas at MacBook-Pro in ~/D/BlacklistsChecker ↪ env/bin/python Python 2.7.11+ (default, Dec 10 2015, 10:15:04) [GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; from blacklistscheck.blacklistscheck import BlacklistsChecker &gt;&gt;&gt; BlacklistsChecker() &lt;blacklistscheck.blacklistscheck.BlacklistsChecker instance at 0x1093b3fc8&gt; You have a folder called `blacklistscheck` (it's called package) and you have a file `blacklistscheck.py` (a module) in which `BlacklistsChecker` class exists. So you were trying to import class from a package, when you should've imported it from a module inside a package. P.S.: * use python3 (unless you have a good reason not to) * use virtual environment for your projects * search and read PEP8 (python's style guide, which sometimes is subjective, so take this with a grain of salt). IMHO your package and module should be named `black_lists_check` and class `BlackListsChecker`. Otherwise names quickly become wall of text.
I rarely have issues with circular imports, even on large projects. On the rare occasion I have one, usually I can re-architect a package to get rid of it (and make the package better to boot). On the rare occasion I have an unavoidable circular import, there are fairly straightforward ways to fix that.
The precise speed depends on what you're doing, so it's impossible to say that one is faster overall. Python 2 had two kinds of integers, `int` and `long`, where Python 3 only has one (called `int`, but works like Py2 long). That means that integer operations can often be slower, because there's no special case for small integers. Python 3 also has some tricks to make strings and dicts more memory efficient, which can boost performance. It's not likely to be a big difference either way, though. It's still working much the same way. There are some PEPs (510, 511) proposed for Python 3.6 which could lead to more speedups.
I'm mostly doing webdev with Django. From what I know the change in how strings work made Django server less req/s in 3 than in can in 2.
Based on what I can see [here](https://speed.python.org/comparison/) it seems like 3.5 is faster than 2.7 in most cases. Hard to tell for sure though, that site is terrible on mobile. Edit: this is false, look at the replies to this comment.
Ah, I'm sure this is going to end well. /s
Hi there, this post has been removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
I think the readme refers to command line options not available in the version on pypi
...or golang.
Wow, okay. Fuck you too I guess?
p2p caching sounds like the utmost eldritch horror. $ echo "flush_all" | nc localhost 11211 Gimme a minute $ Good lord.
Can we make it go faster?
If you're using numpy arrays, then you absolutely have to look over the information here: http://docs.cython.org/src/tutorial/numpy.html It'll make your code ugly as hell, but this is what will bring native performance.
Hang on a second. That's true for your projects, but it's not true for libraries. One of the problems with Python 2 not dying is that libraries like numpy have to be written in a style that is compatible with Python 2. The more Python 3 evolves, the more annoying that gets.
Glad it worked out for you!
&gt; No one can take Python 2 away, either. :) But in practice it can and will become very inconvenient to use. Like WinXP and soon Win7.
Yeah I have like 5 libraries of interrelated tools and often when I go to use multiple things together in a GUI I run into circular imports because I designed every class with access to everything else with no forethought for the big picture... I usually just end up scoping the offending import into the method that uses it as a quick fix. 
&gt; If you are about to ask a question, please consider /r/learnpython. Homework-style questions will be removed, and you'll be encouraged to post there instead.
lol, this isn't even homework-*style*, it's literally just homework for a class at UCSB. OP, pretty much every university on the planet considers what you're doing an academic offence. http://cs.ucsb.edu/~koc/cs8/hwexpa/pa07.html
it s me that need to thank you. so thks
I just asked some questions and came here for help.Maybe you can help.Otherwise this page may be pointless
I wouldn't say "Bad Programmer." I would say "Inexperienced Programmer." I think *every* programmer, despite "knowing" about bad practices, has to experience them before they *really know* about bad practices. One needs to make a few mistakes to learn things.
Well you can start opening pull requests on projects you want to work with, claim a bug and fix it. You will make friends with people who know about work and can recommend you. It is like most of life, be intelligently useful and good things generally follow. 
There's a relatively new package from continuum called constructor. It builds customized conda installers with just the packages you want, and you can specify the default channels. This could be useful if you want to upload your own packages to anaconda.org. This means that you can be absolutely sure that every student has the same environment.
one day people will learn about change management your dependencies, the exact version you depend on, is part of your code. copy it, mirror it, commit it and track it npm/pip/maven/cpan might make it easy to install, it also make it easy to shoot yourself in the foot with them
Once I actually got serious about learning how to use this language properly, I also got serious about making sure I was writing Python 3. Why invest more energy into a dead end?
exactly. VENDOR YOUR DEPENDENCIES!!! It doesn't matter if it's javascript, python, java, C++, or fucking assembly. If your application needs ANYTHING outside the repo to build, you are doing it wrong.
I wish Apple had started including 3 in OS X years ago. If it's not standard in the system, you can't justify using it for support/maintenance/scripting. Honestly, 3 years to EOL is not that long. Move your damn asses, Apple!
&gt; Snobbery about Python 2 coding / maintainance simply isn't called for. This is the only part of your post I disagree with. The need to support python 2 adds maintenance burden to developers, and over time this maintenance burden will only increase, in an expanding network of outdated dependencies and features that you want but don't have because they're only implemented in the newer versions of the library. When you use EOLed stuff, this is what you're taking on. So there's a huge cost to rewrites, but there's also a cost to not rewriting. Some degree of snobbery -is- called for (if it will prompt those on the fence to switch and reduce community-wide maintenance cost)
Scikit-learn's `MiniBatchKMeans` supports `partial_fit`: http://scikit-learn.org/stable/modules/scaling_strategies.html#incremental-learning
Thanks, will try this! 
Eric fits. Komodo has a new release I have not tried.
Obviously there will be Python 2 code for decades longer. When a language is no-longer maintained, how bad do things get if bad at all? I'm sure there's some Cobol or whatnot out there that is used a lot in some industry but no-longer maintained.
Anaconda is going to support Python 2.7 long after the "official" retirement date. Among enterprises Python 2 is still very widely used, and I don't see how this is going to change much over the next 3 years. Three years is not long in terms of enterprise software migration.
It depends on how consistent your data is. If you're sure all your clusters have strong central tendency and your means would stay reasonably stable (for the sake of math - within a standard deviation) you could probably skip recomputing for a while. Or forever (but I wouldn't do that) There are some shortcuts to keep it from becoming O(n^2 log n) -- just keep adding to a sum as you're inserting samples, then your recomputing of centroid is just one operation. But... If your clusters will shift... Good luck. Not a nice algorithm. You might want to look into hiearchical clustering, might do better 
Having to write Python2+3 code makes it way less beautiful. Which is one of the reasons I was enamoured with Python in the first place. Asking library authors to continue to support both (while you're not paying them) is a creative &amp; cognitive stress on them as well.
whiteandnerdy1729 - you have an excellent point. Even if you're good, some of the people on HN can be downright brutal. I think it's important to submit on HN anyway even if you know you're going to get ignored or dumped on. As a maker, it's important to get into the habit of building cool stuff and showing it off, especially to a tough crowds. Hidden within them can be people who care enough to take a deep look and give you solid, constructive criticism. For example, I submitted a Flask extension I'm working on to a mailing list: https://mail.python.org/pipermail/flask/2016-May/000477.html The guy actually took his time to read the docs I wrote. His response showed that he either 1. spent a lot of time looking at my project, or 2. that the docs were good enough that he didn't have to. I got a ton of value from that.
I'm still maintaining 2.6 compatibility thanks to CENTOS 6...
I absolutely hate CENTOS 6 for this reason. Most of it doesn't bother me too much, except one thing: No dict or set comprehensions... That drives me absolutely insane. And my other huge pet peeve is it can't do `.format` on "{}". You have to specify "{0}". I've been trying to move from `%s` to `.format` but seriously, having to add that number is enough to make it not feel worth it.
Honestly, it's been worked on so much that I doubt it's going to be an issue that it's past EOL. What major bugs have you run into that you had to patch 2.7? It's an absolutely finished product now. You won't find anything more stable.
Yeah that's generally my feeling too. Not a whole lot can mutate that will break 2.7
All my coworkers are on 2.7 so I'm pretty much stuck on 2.7. I don't mind it though, honestly. I'd like to get everyone to move, but it's not the end of the world. There's a few things I don't understand why they just *removed* or changed. For one, octal 0600 doesn't work? Why remove it? print as a statement... why couldn't they just keep it? I write it as a function all the time, but so what if you can't monkeypatch print. There are so many other ways to do something similar to any reason for that. And division... why should 3 / 2 return 1.5? What other languages do that? Why not just make 3 // 2 return a float? And one thing that drove me nuts is the split between bytes and a string. Why not keep it how it was and make the new style stuff look like `s"this"`? Bytes represented as a string was incredibly useful for some stuff, anything low level. Having first class byte array primitives that were no different than a string was awesome. And range/xrange... why not keep that how it was? Sure, xrange should be used instead of range 99% of the time, but the compatibility issues it causes are hardly worth the change IMO. It's not that they're not good improvements (except maybe byte/string stuff isn't an improvement IMO), I just don't see why the language should change so much basic stuff that ends up breaking all sorts of scripts and libraries. It's already in there, so just leave it and let old code still work exactly the same. So what if it looks a bit clumsy. I don't think the code-breaking improvements were nearly worth all the compatibility issues. Maybe it's a bit better, but maybe if they didn't change all that people would never have thought to stick to 2.7 - maybe we just wouldn't be in the spot we are now. I love the new features, but I rather keep bad choices and maintain compatibility rather than fix them and make people rewrite their scripts and libraries - because that just doesn't happen 90% of the time. Easier to stick to 2.7 than change your code. Honestly, I do look forward to moving to 3.x in the workplace but I would've been way happier working with 3.x a decade ago and still seeing stupid stuff like `from ConfigParser import ConfigParser`. Well, that inspired me to email my few python dev coworkers to see if we can all agree to target 3.5 with new projects. We're a security company and java shop in the eng dept, but in research we all use python so there's potential to move on without hurting anything. One dude's on board, four to go. Well, only two of the rest of the guys actually code and they rarely do at that, so maybe I'm just convincing myself lol
import foo.bar instead of from foo import bar
You could try to either recalculate every n new elements (10 maybe), or you could try to just monitor the errors/distances and as soon as they reach a certain threshold you re-cluster everything.
Python 2.4 on CentOS 5, wohoo! It just won't die.
Circular dependencies are also not a problem exclusive to python.... 
Hello, are we working together? 
How does that help?
It's not like they didn't have the preceding 7+ years. They extended the original End of Life 5 years. That should be enough time to kick people into gear a little bit. 
D: I'm sorry for your loss
Why does it help to avoid circular imports? 
In my case it was a one-off node project and I just wanted to run the FOSS web service that people built with it. I deployed it without knowing much about node or npm. I was expecting a degree of year-by-year stability that I had gotten used to from pip. I understand how to archive all my dependencies with pip, but even that can be a pain. Git submodules, or checking in large directories of code that isn't mine, or checking in wheels into my repository, or running my own miniature PyPI... there isn't a straightforward solution. I've had to do this for some situations and always felt a bit icky.
You could always share prepared virtualenv environments, a docker/lxc container or a vm that comes with all except the editor. I don't know, but surely there must be a way to quickly deploy or setup identical environments. Good luck and report back if it's a success please. 
Eh no. Because Python 3 has a huge problem with amount of packages fully ported there. And last but not least completely different approach to codecs and encodings. Actually the last one is probably the most difficult thing about Python 3. It's the exact reason PHP 6 has been cancelled and PHP 7 did not change a thing about it's strings. Strings should've stayed old strings. Maybe in some `from __past__ import oldString as str` or something. Not the hard bloody way it is in Python 3. I don't want to touch Python 3 because last time it took more time for me to fix all the bytes/strings and read manuals on it in my project than to actually write the project. I don't have money nor time for this, I'm sure enterprise also has not time for this. They use COBOL for god's sake... Sometimes you need to do what's portable and not what's right. I know the love people have for Python 3, 3.5+ particularly. But let's face it, changing the strings to some unintuitive behaviour was a dick move on devs side.
Unicode handling in Python 3 is correct, but utter rubbish taking away your time, life and soul.
100%. Writing Python 2.7 code is fun and code can be expressive and beautiful. Writing Python 3.5 code is fun and code can be expressive and beautiful. Supporting both makes python code look like a convoluted mess when you have to call different functions or make different imports, and have all these code paths to handle different environments. And even if that's not too bad, you're just stuck using a shitty subset of 3.5 without all the language features that make using 3.5 awesome.
That's true, and feedback (good and bad) is the best way to learn. Maybe I should rephrase my statement as "be prepared to receive some very pointed criticism, but that's ok" :) Your extension looks really neat btw; I really need to try out the Echo. Props also on how readable and tidy your code is too. 
ahhh, missed that. Yeah, if they're talking about open-source third party projects, telling the user to fix it on their side is nothing new, lol. But still, the customer facing projects are 100% open-source BSD license, but they're still customers who pay for the main product. If you offer an open source python client for free for your proprietary SaaS platform, you still have to support it like it's paid for. There's still money in the relationship, free and open-source or not.
What do you mean? That'd be a huge bummer. I'm going off the [Roadmap](https://code.djangoproject.com/wiki/Version1.10Roadmap). I'm really looking forward to that feature and I'm a little bit wary of adding such a major dependency to Django _unless_ it's included in the framework itself. Edit: Ah damnit, I just found this discussion: https://groups.google.com/forum/#!topic/django-developers/QRd4v7OErT8. Well, at least the author mentions that channels are fully supported by 1.10, but as an external package.
Hell no. Python 3 strings are beautiful now, and they make sense. And they work **in every language**. Just work. What is the problem now is the environment around Python. Operating systems, protocol transports, shells, file encodings... all these are still broken, because they have all kept their standards (or, lack of) from X decades ago when things outside of ascii were a mere curiosity. Python can't fix that. Python core devs, unfortunately, don't have access to Windows' codebase and ability to switch its shell default from codepage-1252 to UTF-8. But users still complain that Python is the one wrong when everything around it has remained broken, while it itself got fixed. And PHP7 to this day fucking sucks at unicode, I have no idea why you would use that as a positive example, it's horrible. They abandoned PHP6 because they based it on UTF-16 which was firstly a bad idea, and secondly absurdly slow. Not because adopting unicode compatibility is nonsensical.
I'm already looking for alternatives to Python.
IUS my friend. They host a repo with Python 2.7 for centos 6. It installs to an alternate location so your system continues to use python2.6 while users can default to Python 2.7 and do things like use virtualenv to pip install whatever modules they need without fear of breaking the OS. 
There's no fork of PHP 4. I still have to maintain PHP 4 projects. &gt;14 years old. They are big and nobody wants to pay for a new version.
Honestly, in a programming language if I put `x = 1 / 2` I still expect to get 0, but maybe that's because I primarily work with statically typed languages outside of python. I expect an int / int to return an int. I'd expect to have to cast one to a float to get a float back. Ruby returns 0 too though, but lua and perl seem to return 0.5. Either way, I agree it should have been that way from the start if it'd be that way in python 3, but since it wasn't, I don't think it was smart to change. Not only can it lead to very odd bugs seeing as old code will still run but get completely different results, but both are equally correct behavior and in a programming language, you just pick one and stick with it. It's just a change, not necessarily for better or worse. If it doesn't improve the language, it's just breaking things for the sake of them wanting different behavior.
Because Python is the wrong one. It's breaking the consensus. It makes you think twice. That's why.
There is no consensus, and never was. There were a bunch of mistakes made in the 90s and 2000s, that have never been fixed. If things were working back then, it's because they happened to never encounter a non-english character. Only now everywhere is starting to use UTF-8, so things are starting to work coincidentally by default, but there are still endless legacy environments which are broken but won't change and expect everything to work around them.
Yea, it was posted on /r/django yesterday, I think. 
While it's unlikely, the biggest issue is security bugs. It is possible that a major security flaw gets discovered and being past EOL means that your code will be vulnerable unless you upgrade.
I would guess it still applies. AFAICR C99 differences aren't that ground breaking. And I'd also guess nope.
Be realistic. Until it *actually stops working*, people will keep using it. EOL or not. If the 2.7 usage is still high in 3 years, someone will continue to support it, even if the 'core' python team does not.
Converting binary data to text to data is done through encode and decode, exactly because of the issuees with encoding. If you want to compare a binary sequence to a binary sequence, just compare them and don't involve str(). If you want to compare it to a string, just tell us what format the data is in. If you don't care, just 'ascii' as py2 did. Working with py3 in real webapps has been such a better experience than 2 ever was.
&gt; Some degree of snobbery -is- called for No, that's just called 'being a dick'. It's sad how prevalent this attitude is. Just be nice to be people, be respectful and show people how great python 3 is. Teach new python developers python 3 and encourage existing users to write new code in python 3. Being a dick to people doesn't achieve anything except making *you* feel better about *yourself*. 
I wonder why devs don't toe dip more often. Why do you have to "embrace" anything? Start it on a small insignificant/internal project? Do a retrospective. Think - would these problems get much worse on a major project? Could you write the small project in both languages? Could you compare the two? If you don't have time to do this - do you have time to make a mistake choosing the wrong technology?
(insert ribbing joke about web developers here)
Some degree of snobbery *is* called for. Being a dick is something else. If you're insulting people for using python 2, that's a very different thing from implying that python 2 is not as good as python 3, or saying 'oh.. you're using python 2? Why?'. You can cast doubt on something without being a dick. 
&gt; lua and perl seem to return 0.5 In lua's case, that's because an int is a float (all numbers are stored and processed as floats. double precision floats, IIRC) In Python's case, IMO it does improve the language -- `x = y / z` should not return different results depending on the type of y or z, but that was the case for Python 2. Now we have `/` which has unambiguously float semantics, and `//` which has unambiguously int semantics.
As contrasted with Unicode in Python 2, which is *incorrect* **and** utter rubbish taking away your time, life and soul?
For the set/dict comps can you not use: dict((k,v) for k,v in kvs) ?
I have 1 server left with Python 2.5 and a web development framework that once promised to support 2.5 is now requiring 2.6. And no, it doesn't support Python 3. I should have tried to find a job in COBOL development. 
That's unicode's problem rather than python's though. Turns out human language text is a fucking mess and has a lot of intrinsic complexity and even fairly elegant encodings still can't hide it.
My words! He didnt understand how first language was working so he desperately switched to another one, arguably worse. But this particular case indicates there is something fishy between PC and chair :)
Nothing wrong with that.
When doing integer division, the expected answer is 0. Period. Everything else is just broken.
I think peter norvig has alot of good tutorials and he wroe the book Artificial intelligence: A modern Approach. Python code for that is available. Try googling him.
I will never understand the proselytizing around python 3. People are not going to port tons of code just because you say so. C++ has been around since 1983, yet people still insist on using C. Worse yet, people mix C and C++ and call it C++.
&gt; Everything else is broken Lol
github account gone
If only.... they didn't take something great and screw it up..... oh well, better to force millions of projects to be rewritten for 3
OK, "paid customer" makes a difference. But consider this come contract negotiation time: that customer is making your codebase worse - harder to write, slower, harder to maintain - for every other customer. If any of your stuff is customized on-site by your clients, I guarantee that at least some of them think you guys are nuts and write bad code. "d4rch0n doesn't even know how to write a dict comprehension? LOL!" Those comments get overheard. Management starts to wonder why they're paying good money for crufty work. That customer may be more expensive than you think. At some point, it may be cheaper to mail them a new server and say "we're supporting this machine from now on".
Even c++ got utf8 string literals...
I disagree as much as possible. Python has always been a language designed to have the least amount of excessive work to write in. We don't have semicolons or brackets or statically typer variables or anything else bullshit that other languages force on you. The switch to unicorn handling was terrible. I'm not forced to encode all of my strings any time I want to use this. Previously I only had to encode when it was needed, and now I always have to encode. That is a massive headache and I gain nothing from it. I have had zero issues in 2.7 with my strings.
- Haskell - Lisp - C++ (seriously, with some of the C++14 features it can feel like you're coding in a dynamic language, but safely) - Javascript
Wall of Superpowers begs to differ 
No. It's perfectly distinct from ascii strings. And you know when you are dealing with Unicode or ascii/bytes without code introspection. 
If you had tuples of key, value pairs you could just `dict(kvs)`.
How come? 
Is this the comment where you describe what the hell Haskell stack is, because otherwise why would you expect people here to know what that was, and then give enough of a fuck to click on your link?
IUS has python 3.5 as well. Why would you even want 2.7 in that scenario.
http://ius.io and problem solved. Unlike other repos they are making sure packages don't conflict with the system packages, so it is safe to use.
"Circular imports are fine where both modules use the “import &lt;module&gt;” form of import. They fail when the 2nd module wants to grab a name out of the first (“from module import name”) and the import is at the top level. That’s because names in the 1st are not yet available, because the first module is busy importing the 2nd." https://docs.python.org/2/faq/programming.html#what-are-the-best-practices-for-using-import-in-a-module
I'm sure they will (Red Hat volunteered by shipping Red Hat 7 with python 2.7 which will be EOL in 2024) It most likely won't be free though.
This is FUD. All packages that are still maintained work with python 3. Now we're even have packages that are strictly python 3. 
Coming from the Windows world, I always found that the Unicode thing was difficult to use even in Python. The English language is not the only that exists in the world. Why do I have to write in Python something like this x00ff which doesn't mean a thing for a developer. The developer should have the ability to write a character in UTF-8 directly into the code without having to search the Unicode value which I find backwards. This has been carried on from the 1990s. I had the chance to use 6 different programming languages since the 1990s, I know the difficulty I had with Unicode which I still swear about. A developer shouldn't restrict himself to only use ascii characters when you have to write in different languages especially the web. I have experience with this as well. I like that the changes that were done in Python 3 so to make easier to use unicode characters. 
I gave that a try, but I got this in return. newbalance = int(amount1) + balance TypeError: unsupported operand type(s) for +: 'int' and 'str'
Look at the [docs](https://docs.python.org/2/tutorial/inputoutput.html#methods-of-file-objects) for the read method. It's a fairly obvious answer and this question is better suited to /r/learnpython or /r/learnprogramming 
Yeh, it's just collecting the generator into a dict or set rather than a list, the only difference between this and a real dict comprehension is the unfortunate intermediate tuple allocation
If you decide that looks a bigger project than you want to tackle in one step, consider that it's very easy to port from 2.6 to 2.7, and run can run `python2.7 -3 mymodule.py` to get warnings about incompatibilities with Python 3. You could jump to 2.7, knock out the structural problems at your leisure (because you'd be dealing with an application that's still running), then move on to 3.5 when you have those ironed out. I'm not trying to talk you out of 3.5. We made the leap this year and I love it. I wouldn't willingly go back! But if you have to choose between two easier migrations and one giant one, know that you have options.
Are you sure? The charts seem to suggest the opposite: that Python 2.7 is faster than 3.5 for most cases. Try normalizing to Python 2.7 and count how many orange bars (3.5) are lower than the blue baseline (2.7), that is when 3.5 is faster than 2.7: I count around 9 cases out of 40ish, in 22 cases Python 2.7 is noticeably faster and in the remaining ones it's a tie. 
To make a short list of programming languages that I learned over the years, I started with Visual Basic on Windows the first time around. Since then: - Visual C++ - Delphi / Pascal ( first language learned at university ) - Python ( started with 2.5) - html/css - Javascript - Jquery - GIS Web mapping Next step, python web development from what I know now. 
Try and reformat your code as it's unreadable now. Put 4 spaces in front of each line.
Ahh, I'll edit my comment. I could only look at it on my phone and I has a very hard time telling what was going on, the graphs appeared very small.
&gt;There's a few things I don't understand why they just *removed* or changed. For one, octal 0600 doesn't work? Why remove it? It's 0o600 now and that notation is also working in python 2.7. This is to make things consistent with 0x... notation. &gt; print as a statement... why couldn't they just keep it? I write it as a function all the time, but so what if you can't monkeypatch print. There are so many other ways to do something similar to any reason for that. This was very confusing to new users that everything was a function except print statement. Not sure why people are so fixated on it you can easily fix this (and 2to3 does it automatically). Also you can import print_function from future in python 2.7. Besides in production code you would want to use logging anyway. I really only use print for quick debugging. &gt; And division... why should 3 / 2 return 1.5? What other languages do that? Why not just make 3 // 2 return a float? Because intuitively / is mathematical division and confused a lot of newcomers (note that python is used for teaching programming). It makes a ton of sense. Statically typed languages like C or Java can get away with this behavior, because you in advance know the types of parameters, and can predict the outcome. In python you don't, and it is silly that it will behave differently depending when supplied numbers are integers or not. This is source of bugs. It should always be predictable what it will do. &gt; And one thing that drove me nuts is the split between bytes and a string. Why not keep it how it was and make the new style stuff look like `s"this"`? Bytes represented as a string was incredibly useful for some stuff, anything low level. Having first class byte array primitives that were no different than a string was awesome. Most of what python is used for is not low level stuff though. This separation is essential in today's world. A character is not the same thing as a byte anymore. When you are working on low level stuff you should be aware that you work on bytes. &gt; And range/xrange... why not keep that how it was? Sure, xrange should be used instead of range 99% of the time, but the compatibility issues it causes are hardly worth the change IMO. Because it is a wart? Again, this is a trivial change in the code and can be done automatically. &gt;It's not that they're not good improvements (except maybe byte/string stuff isn't an improvement IMO), I just don't see why the language should change so much basic stuff that ends up breaking all sorts of scripts and libraries. It's already in there, so just leave it and let old code still work exactly the same. So what if it looks a bit clumsy. The biggest breaking feature of python 3 is Unicode support. The thinking was that if we are already breaking things, why not fix some ugly things as well. The conversion for the issues (perhaps with exception of the division, which is the reason I always import new division (along with Unicode literals) from the future whenever I have to write code for older python) is trivial. &gt;I don't think the code-breaking improvements were nearly worth all the compatibility issues. Maybe it's a bit better, but maybe if they didn't change all that people would never have thought to stick to 2.7 - maybe we just wouldn't be in the spot we are now. I love the new features, but I rather keep bad choices and maintain compatibility rather than fix them and make people rewrite their scripts and libraries - because that just doesn't happen 90% of the time. Easier to stick to 2.7 than change your code. People are lazy, they won't do things if they don't have to. For example Ruby had breaking changes between 1.8 and 1.9 (notice that it was also a minor version change). People complained similarly, but then Rails developers simply said they are moving to 1.9 and dropping support for 1.8 and everyone just followed. Python is already migrating for 8 years, and people still start new projects in python 2, because technically python 2 is still supported. &gt;Honestly, I do look forward to moving to 3.x in the workplace but I would've been way happier working with 3.x a decade ago and still seeing stupid stuff like `from ConfigParser import ConfigParser`. In python 3 it is: from configparser import ConfigParser &gt;Well, that inspired me to email my few python dev coworkers to see if we can all agree to target 3.5 with new projects. We're a security company and java shop in the eng dept, but in research we all use python so there's potential to move on without hurting anything. One dude's on board, four to go. Well, only two of the rest of the guys actually code and they rarely do at that, so maybe I'm just convincing myself lol You should, python 3 is great, especially if you don't have to keep compatibility with python 2. Then you can make use of new features. If you use Red Hat or CentOS, then you should also take look at http://ius.io. This repo will let you use any python version you like.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I used to LOVE JavaScript before I got into Python (I still like it a lot, and can do a lot with it). But if I were given the task of writing a library/service/app in either language Id choose Python 99% of the time simply because its objects have magic methods and allow for meta programming (PHP's magic methods are decent too). The fact that I can redefine how objects are compared to one another, or define what happens when you add an attribute without requiring a specific interface (i.e. obj.addAttribute(attr, val)) is so golden to me and the way that I currently approach solving problems with code. 
I have a branch that's running under Python 2.7 for the reasons you said. I just don't think we're going to deploy it to real customers for reasons that have more to do with our own processes and limited resources. So if we're going to 'break' our interpreter compatibility w.r.t. customized code for a customer, I prefer to just do that once esp. given that 2.7 is already near EOL.
thks
Perhaps it is time to move to something else then? 
You forgot to list examples.
Like, all of the shittier languages out there? Idk why I would stop using a language I think is perfect, just because they want to make it not perfect....
&lt;opens late-1970's Fortran computational model still used in physiology&gt; Yep, EOL. Just gonna up and disappear. Time to get yourself prepped, maybe build a shelter or something.
What differentiates this from virtualenv and pip?
No problem, but I don't really blame OP. The github readme file explains what the project does pretty well, so I understand why they might have thought it would be enough. However, some quick context helps give people the motivation to actually look into a post, so a comment from OP would have been nice. I'm surprised they didn't, usually people really like to talk about stuff they made!
Yes, all python devs really wanted to do was take a thing they were satisfied with, and wreck it. Hence Py3k was born. It wasn't the fact that the thing they was broken in the first place, that would be illogical.
It's pretty impressive the billions of things that people created using a broken language....
This is mostly wrong. You can't encode all of Unicode in one byte, therefore #characters ≠ #bytes in many cases. “Mixing bytes and text” means you have a protocol embedding ASCII. So you parse it and decode the parts you expect to be text.
Once important libraries stop supporting legacy python, it is in the process of being taken away.
I wasn't aware that I need to list examples, since they are kinda obvious. Print is now a function, so you always need () in it. Extra steps for the same result. Python 3 now automatically converts ints to floats instead of leaving them as an int when dividing. Previously if I divided two ints I got an rounded int, unless I asked for a float. This game me a consistent return value. In python 3 I now must always declare if I want an int or a float, otherwise I don't know which one I'm getting back. More tedious work for no real change. Strings are now unicode, which means that you need to do string encoding when working with any other source. Previously, whatever your input was, your string was, and so you didn't need to encode if you took an input and then output it to the same data source. The encoding would keep. Now you have to explicitly decode/encode when dealing with outside data sources, increasing the amount of work for little to no gain. The range versus xrange change was silly, and just means a bit more work to convert code and less performance if I need a list. Just force raising an error into an express syntax, even though either way of raising it worked the same way? Why can't I just do raise IOError, "file error"? Makes zero sense to remove it, it didn't hurt anything. Changing a comma to as for handling exceptions. How fucking trivial is that? Removal of .next() for shits and giggles? I'm sorry, but there are so many trivial and pointless syntax changing in python 3 that never had to be changed and functioned perfectly before hand. Its more tedious just for the safe of being more tedious.
A list is data too, which is bytes, so it should be just text as well. So are numbers and dictionaries, they are only data and bytes. In fact everything in a Computer is just data/bytes. I hereby propose that we get rid of the complexity of strings vs bytes and in fact all other data types and embrace the beauty and simplicity of data and bytes. Javascript is way closer to this beatiful concept and mixing types just works better than python, but we shouldn't stop there, we should make python great again and remove the complexity of all these types. The beauty of simplicity will be ours again!!! --- Really, his argument is a bad idea and easy to take ad absurdum. Using bytes simply as text might worj 70% of the times, maybe even 90% of the time if he only cares about english and ignores everyone else. But we all know that correctness is more important than the convenience of saving an `encode()` call. It'd just be the quick and dirty way and you'd spend way more time later fixing all bugs when you finally do localization and also ship to non-english countries.
Devs were using modules only available on 2.7. Also not using the system's Python is best practice.
Hopefully you mean [this](http://fishshell.com/) ?
Yeah, you are right, nobody's born knowing everything after all
Sounds like a bit too much anger directed at a guy who created a nice piece of software and just wanted to share it. Also, since he says it's based on Stack, you can probably get a hint about what it is by looking at the features of the code he posted, no?
Awesome Tool. Using it like a mad man. Made my life easier. Using it to create interfaces for electricity kw meters I am developing. Nice job man! Would love to see how the beta would work if this is just in pre-alpha. 
The authors comments about Ubuntu LTS are wrong I think. Ubuntu are spending effort porting all their python to 3.x in order to avoid having to support python 2.x beyond 2020 in their LTS releases. Yes the release containers python 2, but not as a default package. I expect it comes down to which components they feel they support in those releases. Critical OS components or all packages. Redhat will support you if (I'm guessing) you've paid for support. 
Those Python vendors aren't even fully patching Python *now*, when it is supported upstream.. what makes you think they're going to magically start once 2020 rolls around? Here's https://security-tracker.debian.org/tracker/source-package/python2.7, notice wheezy? It's got 7 open CVEs, most (or all?) from before Jessie released that never got patched. Most of those issues fixed in Jessie got fixed because they updated the Python from upstream that had fixed it. Here's https://people.canonical.com/~ubuntu-security/cve/pkg/python2.7.html which shows another issue still affecting 12.04 and 14.04, only fixed in later because they pulled in a new version of Python that already had it fixed. I don't know of a page like that for RHEL/CentOS but I know the story is similar there. These vendors do not prioritize security, they prioritize *not breaking* things. If a security patch might break something? They generally won't apply it. Depending on what Distro you're talking about as well, they also tend to be over extended and simply don't write their own patches unless it's easy. An example would be Debian/Ubuntu with the python-pip package (since I'm aware of the history there), versions of *still supported* OSs there have a python-pip which will download packages over unverified TLS and the answer given when told about it was 'yes it's a security issue, but we're not going to write a patch because it's too much effort, if you write one we'll apply it'. Outside of things like the Kernel and OpenSSL, the quality of the "security updates" that you'll get from your Vendors drops rapidly the further out from the core packages you go.
Nicely written.
Nonsense. Plenty of people have been sold on Python 3 and continue to migrate to it, especially for new projects where they don't have to justify spending money on a project which is already working. The fact of the matter is that some people will decide to stay on Python 2 for particular projects, because if it isn't broken, why fix it? I know of people still using Python 1.5 (that's *one* point five) for the same reason. Good on them. But Python 3 continues to evolve as a language, and there are far more people who would like to move to Python 3 but can't because of political and budget constraints than there are people who have tried it and don't like it. There are good, reasonable reasons why some folks will rationally choose to stick with Python 2 forever for certain projects, and I respect that. But that's far from the knuckle-dragging ignoramuses who hate Python 3 because "ASCII should be enough for everyone", or the idiots who proudly proclaim that needing parens with `print` ruins the language. Python 2.7 will eventually be unsupported by *everyone*, including paid vendors, just as Python 1.5 is now. That doesn't mean that it will instantly become insecure. But it does mean that there will no longer be even the possibility of security updates, unless you write them yourself. That's not scaremongering, that's just a fact.
I suppose it's all relative. IMO all things you listed are features in my opinion. &gt; Print is now a function, so you always need () in it. Extra steps for the same result. It's just one extra character (space was replaced with '('). It makes print consistent with the rest of the python. &gt; Python 3 now automatically converts ints to floats instead of leaving them as an int when dividing. Previously if I divided two ints I got an rounded int, unless I asked for a float. This game me a consistent return value. In python 3 I now must always declare if I want an int or a float, otherwise I don't know which one I'm getting back. More tedious work for no real change. Actually it is other way around. Things are more consistent. If you do division you are guaranteed to always get a float (mathematical division) unless you use integer division (//). This way it is more predictable. With python's duck typing you might get wrong results depending on the type of variable, so in order to write correct code you need to ensure to cast the variables. &gt; Strings are now unicode, which means that you need to do string encoding when working with any other source. Previously, whatever your input was, your string was, and so you didn't need to encode if you took an input and then output it to the same data source. The encoding would keep. That's because now character != byte, whenever you need to store a character as byte you encode it, and decode it when you want to obtain a character from byte string. &gt; Now you have to explicitly decode/encode when dealing with outside data sources, increasing the amount of work for little to no gain. There is a gain. The gain is that your code will work properly with non ASCII characters. &gt; The range versus xrange change was silly, and just means a bit more work to convert code and less performance if I need a list. The thing about python is that it was never about performance. If you need performance you write a module in C (or Cython if you prefer) and load it. That's how NumPy &amp; SciPy work. I was able to encode video (h264) on the fly and send it over network by using gstreamer. &gt; Just force raising an error into an express syntax, even though either way of raising it worked the same way? Why can't I just do raise IOError, "file error"? Makes zero sense to remove it, it didn't hurt anything. Changing a comma to as for handling exceptions. How fucking trivial is that? It's inconsistent with the rest of python, what's wrong with: raise IOError("file error") &gt; Removal of .next() for shits and giggles? That was replaced with next() function, which is again more consistent with python and its duck typing approach. &gt; I'm sorry, but there are so many trivial and pointless syntax changing in python 3 that never had to be changed and functioned perfectly before hand. Its more tedious just for the safe of being more tedious In other languages things are constantly deprecated, and people constantly upgrading their code to latest versions. With python2.7 for all the examples you mentioned either it works or you can easily switch to the new behavior.
I don't make the policy. It's a waste of time arguing about it
&gt; Print is now a function, so you always need () in it. So? It's easier to do a find replace with file IO/logging. &gt; Python 3 now automatically converts ints to floats instead of leaving them as an int when dividing. No. ``10//3`` works in Python 2 as well. &gt; Strings are now unicode, which means that you need to do string encoding when working with any other source Actually, no you don't. It's the same as it was before, except it doesn't randomly autoconvert things back and forth between unicode. If you coded in ASCII before, that'll still work the same. If you coded with unicode correctly before, that'll still work. The big difference is that if you coded your unicode code wrong before, you wouldn't know until it crashed. Now it will stop immediately allowing you to find your error. &gt; The range versus xrange change was silly, and just means a bit more work to convert code and less performance if I need a list. But way better performance for list iteration, which is way more common. &gt; Changing a comma to as for handling exceptions. How fucking trivial is that? So why complain? It was changed because it was confusing. It should be obvious, but if it's not fix it. You can always use the old version...just nobody else will after a while, so you won't get new bug fixes in your dependencies after a while. You're forgetting the benefits to upgrading. It's not the Python 3.5 minor changes; it's all the other libraries that have dropped support for previous versions. Every tried to install a new version of a package on something like Python 2.3 because lots of bugs have been fixed? How else are you supposed to solve numpy segfaulting?
A new version of graphene is live. You can plug in any custom executors! See examples here: https://github.com/graphql-python/graphql-core/tree/master/graphql/execution/executors
Take a look at "Random Walk". Wikipedia should suffice to create a basic implementation; on mobile right now so i cant say much more. Also, format your code code. There is also a lecture on MIT OC, from 6.00 course that goes over this.
Okay, so way to just say, "Meh, all of these tedious thing are just tiny changes, no big deal" Like holy fuck dude. the entire complaint is that there is needless syntax changes that force you to adapt when there is zero need to do. If I have written except IOError, err a hundred thousand times, its not an easy thing to suddenly start writing except IOerror as err. That is a massive change that will continue to cause complications and unneeded errors for a long time. Its not a "Whatever, no big deal" it completely breaks work flows and slows down your work as you essentially have to re-teach yourself to program in a completely different manner. Every single time you go to do a print, your going to cause an error because you don't have the instinct to include () for no reason. Sure, after the fact you could use could change it, but you're still needlessly slowing down the process for millions of developers who have used python for years on end. There was zero reason to change print. It functioned perfectly and was used by billions of projects without a problem. It was simply really stupid to change it at all, as it WAS NOT NEEDED. Sure, python 3 includes cool new features and things that help the language, but every single one of them could have been implemented without changing syntax at all. You don't just change the syntax of a language at will, especially when every change is trivial and did not need to be changed at all. Its just plain stupid. Also, python 3 is slower then python 2.7.... so yeah. Python 3 is an clear and prime example of a terrible move/change, and it sucks that its being forced down our throats. Why not just undo the retarded changes that everyone hates, and only include improvements? The developers have already admitted that the changes where terrible and promised never to do them again, but the question is, why are we still forcing this to happen? There are millions of 2.7 projects that will likely never be updated to 3, and the only reason they don't work is because of a really poor decision on the developer's behalf that they refuse to correct.
Mixed bag. Some people refuse to leave Vim, some love a feature rich IDE.
I love VIM plus a mixture of things like pudb and ptpython. I feel as though ides make people too disconnected from the command line and the interpreter and thus they do not have a good understanding of what there code actually does. 
Not really, but nice link though :)
Emacs the sacred editor. With a .emacs file the size of Montana. 
Uhh thanks a lot i will play with that some more on monday. But the parser code is so much cleaner, shorter, awesome work. 
You deactivate and then activate another env. (Pyenv I'm sure is better).
Unless you are working on servers where your only option is Vim, go with PyCharm. 
Is the lecture about formatting code? XD
amount1 is a string. Need to convert it to a number with `int()` or `float()` To close the file, it should be account.close()
The problem was that mongo really tried to get a stranglehold on node
I myself use Pycharm, I have seen some people use visual studio. sublime text is really nice, but I prefer my IDE to have everything ready to go. especially if I am moving around development environments 
I use three IDEs depending on the task. Wing IDE for programs up to ~10 files, then PyCharm if the project grows bigger. Spyder for interactive data-exploring.
I use emacs. But I can definitely see PyCharm being useful for larger projects.
Just to be clear, with emacs you would still need a terminal/cmd open to run your python programs, right? 
Do you use PyCharm community or professional? I'm still a bit unclear on their differences.
Community is more than enough for most Python dev, Professional adds support for stuff like templating languages, JS and CSS as well as the library of pro-only Jetbrains plugins
emacs – I can't live without keyboard shorts for split pane: ctrl-x 2 ctrl-x o. Then, with iTerm 2 on a Mac, I split that window and have interactive Python running there, so it's cmd-[ or cmd-] to slide back and forth. Touching anyone else's machine is like working in molasses. 
Emacs and Vim have the terminal and editor in the same place. The ability to *very* quickly bounce between the both is awesome
Did you choose PyCharm pro over community edition mainly to support the developers or does the pro version have features that are vital to your workflow?
https://www.jetbrains.com/pycharm/features/editions_comparison_matrix.html Basically if you do basic Python work the free edition is good. If you want to handle more stuff in PyCharm itself, you may want to shell out for the professional edition. Remote debugging is legit, too.
Needed support for things like Django and JS. While I'm here let me throw in my two cents for DataGrip as well!
Woah. Let's calm down Reddit justice warrior.
Wrong, I use it. Chinese point of sale system, quite extensive. Python 2. No problems. 
The problem with 2to3 is that it doesn't remove the need to re-test everything in a critical application. When such an app is non-trivial in terms of use cases / data cases, re-testing can be a huge pushup, so one really has to look for actual benefits other than "just moving on." 2to3 is fine for my smaller stuff. For my large applications, it is just the beginning of the job. 
you can have all the features of an IDE, but you just need to set them up you self.
It's pretty trivial to set up a script to scp a script to a server and run it remotely, given some environment variables that you can tweak. That's what I did when working with headless servers- saved a ton of pain of having to deal with Vim.
You can set up keyboard shortcuts to split panes in PyCharm as well, or have a pane for a dedicated python interpreter.
Also going to my first! Looking forward to learning something hopefully.
Student here. I prefer Sublime. But I dump my projects into PyCharm for debugging
To elaborate: For a long time, there was another tool, called `cabal-install`, which did your packaging for you. `cabal-install` still comes with the Haskell platform. `cabal-install` is, frankly, terrible. It * frequently installs conflicting versions of packages; * has no way to upgrade, or delete existing packages; * has no way of negotiating changes in GHC's version. `stack` fixes all of those issues. Before `stack` was published, the same company, FP Complete, started a project called [Stackage](https://www.stackage.org/), which would keep "snapshots" (essentially lists of versions of packages known to work together). Here's what one of their snapshots looks like: &lt;https://www.stackage.org/lts-5.17/cabal.config&gt;, partially recreated here: constraints: abstract-deque ==0.3, abstract-par ==0.3.3, AC-Vector ==2.3.2, accelerate ==0.15.1.0, ace ==0.6, ... It basically told `cabal-install` "Okay, if you are going to install package `x`, install version `a.b.c`". What `stack` does is * provide a tool for choosing an appropriate snapshot for your project's library dependencies; * allow you to easily add packages to a local stackage snapshot; * allow you to keep separate versions of GHC on your system without each of them conflicting. So, if I'm working on a project that uses GHC 7.8, and another project that uses GHC 8.0, `stack` will use the correct compiler for each project; * does sandboxing correctly. That is, it builds each project in its own sandbox. However, if one of your projects, `A` has a library dependency on package `X`, version `0.1`, and another project, `B`, also depends on `X-0.1`, then `stack` will use the object files from the previous build so you don't have to compile every single library again; Stack probably does a whole bunch more stuff that I'm forgetting/omitting. Those are the highlights, though. 
https://www.raspberrypi.org/learning/getting-started-with-minecraft-pi/
I use vim exclusively. I never got into using an IDE, really, except for java development. I try not to do any development locally though. I develop on a remote server and just use my local machine for Firefox and terminals
This will be my first as well (Pycon'16 in PDX) I'm more stressed about where to park than anything else.
&gt; x = y / z should not return different results depending on the type of y or z I think that's the best argument I've heard honestly. I'm fine with this behavior in a programming language, I just think it's not helpful to make a big change like that after it's already acting one way. But the bigger picture is that Python behavior of such things should be extremely obvious, and if you extract the line `x = y / z` you have a very good idea what it's going to do. That's important as well.
Yeah, generally that's what I'd do if I had something like {k: transform(v) for k, v in kvs}. Sometimes I write code like that just in case it ends up running on 2.6, but it's just annoying not being able to use a feature that is, what, 10 years old now?
Thanks for writing what I thought =)
I don't know much about Python packaging, sorry. I'm a Haskell programmer who happens to subscribe to this subreddit, that's all.
I use sublime for ruby, python, go and js. IntelliJ for java.
As long as it has auto complete I'm very happy. I use multiple languages and can't keep track of multiple syntaxes and APIs.
I've always been more of a text-editor kinda guy, for performance reasons: up until very recently I've always had crappy computers. Now I have a good machine at work and a reasonable one at home, and been trying PyCharm for some months. At first I didn't get much out of it because I was using it more like I used to use sublime or atom: edit files in there, and run stuff in the terminal. The more I started to use more of the integrated features, the more I'm liking it. It has git and local history, can run tests, debug them, run the project, the autocomplete is way better than any sublime plugin I ever used, and the inspections are almost as obsessed with code style as I am =) A couple things do bother me in it, though. The terminal is not as keyboard friendly as I'd like, which, for a terminal, is a major flaw. That's why I still keep a gnome terminal window around. Recently I've had some problems with running tests too, for some reason running a single test class or file doesn't work well with any runners other than nose (I tried py.test and plain unittest). It's also slow and heavy. Editing is usually smooth, but other things can lag a bit if there's too much else going on the machine. I feel that with more than three projects opened simultaneously. The git integration is good, but I have not been using it a lot, I prefer gitg. All in all, I think it has improved my productivity significantly, and I definitely recommend at least trying. 
Heh, this is the major pain in the ass. Lots of people just suggest "install 3.x then" when that can be a huge deal with a lot of businesses. It's the developer that is worrying about 3.x, not ops or management or product. It's not the developer that maintains the environment. Sure, it's extremely easy to get 3.x on any modern linux system, but we're not always in a position where it's possible to do so. Even if they gave me the green light, I'd have to set up meetings with devops to change puppet or chef scripts and make sure it doesn't break something weird in a cronjob that runs at midnight on 100 servers. Inevitably, it's way less pain to just write 2.6/2.7 compatible code and not have to deal with people and scripts written by coworkers who left years ago, so that's what a lot of us resort to.
Inability of finding bugs through type system is probably one of biggest drawbacks with dynamically typed languages. Perhaps the issues you're talking about is why Guido is pushing [mypy](http://mypy-lang.org/) to also support Python 2 even though it doesn't support [PEP 484](https://www.python.org/dev/peps/pep-0484/). 
Unless you use a [distribution with sane defaults](http://spacemacs.org)
Same. On my laptop vim hangs after a few minutes with a python file open. Each keypress takes seconds to register.
It has nothing to do with your "libraries working fine". It means that people like me who want to contribute to *our* (as in the community's) open source projects like numpy are disincentivized because it means having to code in an antiquated style devoid of all of the niceties of Python 3. That means all of our libraries are developing more slowly than they should, which punishes everyone.
I personally use vim with [python-mode](https://github.com/klen/python-mode). vim can be an IDE in itself with that. The only major thing I think it lacks is debugging, but debugging isn't always something straight forward that you can do in an IDE. If you're working with celery or anything concurrent, you're not going to be stepping through an open text file. So, you can just use pdb or ipdb, and I prefer those to something in an IDE personally. But you have tons of refactoring tools in that: syntax checking, shortcuts to open docs, error checking, extraction into functions, code completion, and jumping to function calls and class definitions and stuff like that. vim is just a text editor, but it is extensible and people are dedicated to making it function as an IDE, and python-mode is what you'd want for that.
Realize you can't see and do it all. Pick the stuff that looks interesting, even if not entirely job related. Rest up this week as its a long fun draining time and you're gonna want to code like mad the week you get back. Shameless marketing: Oh and stop by the REVSYS booth and say hi! 
Closest thing I've found is codecombat.com.
I was going to try out Spyder today but it didn't run on El Capitan (maybe it's just me). It instantly crashes.
Intriguing, yet abandoned. 
My company's stack is primarily Python and I'd say we're pretty close to 50-50 PyCharm and SublimeText.
I've been using Wing for a long time. I like it. Tried pycharm once or twice. annoyed the crap out of me. but fall back to vim pretty happily if I need to work on a headless box. 
Most of the time, I'm connecting to my dev env (a CentOS box) from Windows (via SSH)... I'm not sure if PyCharm works for this.
done a variety of tech cons over the years. but this will be my first pycon too. thankfully the last con I did was also in PDX, so the food list is aleady well populated. - don't be afraid to walk up to random people and talk to them. - don't be afraid to miss a talk or two, hang out in open spaces, etc. the talks will be good... but conferences are about the time spent outside the talks. 
PyCharm for work, Sublime for little scripts. PyCharm Pro is so worth it especially for a web/django developer it's just an amazing tool.
I've tried with the last 2 major versions of pycharm on windows 7, with multiple clean installs. This is on a box with a quadcore i7 and 16 GB or RAM, plenty of power to spare. The initial startup of pycharm takes about 20-30 seconds, several seconds for each window, and then several seconds to load a project. If I'm actually pointing each project at individual conda environments like I prefer then things can also slow down. I'll say that a typical python environment for me is upwards of a gig in 3rd party packages, pycharm wants to scan and load all of that, checking each time to make sure nothing has changed. If pycharm is borked then I'm not feeling bad for it at this point. With sublime I do C+S+N, C+A+P, &lt;name of project&gt;, &lt;enter&gt;. This takes about 2-3 seconds. Another feature I use a lot is "open folder in sublime" from the context menu in explorer or equivalently by running "subl ." from a terminal. This lets me open up and navigate a fresh checkout of someone else's code without having to set up a project file. Being able to very quickly switch projects is a big deal for me, but not quite as big of a deal as the awesome editing abilities. Pycharm has some good tools and features, I actually recommend it over sublime most of the time, but it doesn't fit my workflow or style. Not saying its a bad editor, it's certainly one of the best python IDEs on the market, it's just not for everyone. 
Pycharm with vim key bindings is the best. Datagrip is mostly awesome except for the fact it auto concerts what you see to your system time zone :(
I'm not too familiar with how Postgres users are handled, but my understanding is that the point of creating a Postgres user with the same username as a normal account is so you don't have to use a password to connect on localhost. Does that only work if you create the Postgres user without a password, or does that work in general?
Sublime for me is better proprietary editor text whose I know. Is really fun and easy to learn. Maybe just emacs maybe can better with a fucking awesome user, whose was coding since born with it. But I think, really, Sublime is very more pragmatic and produtive. 
BTW, Sublime is written in python, so if you need hack with plugin is easy! &lt;3 plugin languages: Vim: creep language emacs: emacs-lisp Sublime: Python! AND THE SPEED IS AWESOME. I really want know what is the black magic behind the sublime is so fast.
I use Atom because I write in a lot of languages throughout the day. If I was doing only Python I would probably get something like PyCharm for the better debug tools. But that's about the only thing I'm missing.
PyPy supports Python 3 now.
&gt;BTW, Sublime is written in python, so if you need hack with plugin is easy! &lt;3 Sublime is written in c++, but the plugin system is in python. &gt; I really want know what is the black magic behind the sublime is so fast. The core of the editor is c++ and it uses opengl for rendering, so that's probably most of it.
That's wild, I wonder what's happening there. My machine is miles below yours and still runs both pycharm and sublime easily. Projects load within a few seconds at most. I like 'em both. Sublime is nice for being so language agnostic, and I like pycharm when I know a whole project will be in python. Maybe I'm just not going deep enough to recognize where one shines over the other, yet. Anyway, thanks for sharing.
I keep wanting to learn Emacs but the barrier is quite high. It seems like an awesomely powerful editor with some great concepts, but transitioning has been difficult, especially on windows. My reasoning for wanting to switch mostly comes down to the fact that Emacs will probably be around in 20 years, but sublime might not be. If I had to pick an editor to really invest in for the long term, it'd have to be Emacs or vim, and I didn't like vim after trying it for a year. 
good question! that works in general - you can still have a password on the Postgres user, but you won't have to enter the password when connecting on localhost with that username
Check out Wing Ware IDE. I've been using it for a long time and really dig it. 
Shit+shift .. wow! 😜
I use everything while using none of the features. Column select is the shit though
It's installed on my system and never had a problem that required python 3. (And it also used to be a hassle to setup py3 support on vim but that is no longer an issue so I'll probably switch in the near future.)
I'm totally gonna do this and reference this post!!
I use datagrip almost every day...but, I still think it made more sense as a free tool. It's still buggy and their features list is long to even compete in this space.
At my office it's probably about evenly split between people using Pycharm and people using vim. I can't say I know anyone who uses something like Sublime though. I think of all the programmers I know it leans a little more vim than not. 
&gt; Sublike WTF is it?
Something wrong with your vimrc? Is vanilla vim behave the same way? 
It's very simple. Python 2.7 is a great, robust language. It's rock solid, and it's here to stay. If you want to use it, by all means, do. Python 3 is also a great, language; the difference is that it is being actively worked on, and improving. The unicode support *is* better, the async tools *are* good, and there are numerous little things that make writing python 3 a pleasure. Just *try it*. If you don't like it, well, sure, stick with python 2.7. ...but you might find it's actually quite nice. The pain points hit when you need to use a library that doesn't work with 3; and that is a pain point, but you know, it's actually not that often it happens these days. I honestly don't recommend you convert your existing code from python 2 to python3; it's tedious, it's not fun. The tools exist for it, but unless you're being paid to do it, I mean, really? Can you be bothered? I can't. ...but if you're writing new, fresh code... well, python 3 is a great choice, if you're writing python code. /shrug If you don't like it, that's ok. Like I said, python 2.7 is a great language too. Just don't stick with python 2.7 *just because*; actually think about it, and if you don't have a good reason to actually be using 2.7, then maybe consider using 3. 
In my experience, developers tend to be anal about their editor, and companies have such a profound shortage of developers that they will put up with a lot of crap from their devs.
Vanilla works fine. I think there's something wrong with my vimrc, but I haven't managed to isolate the plugin. It was not runnable even with only `python-mode`. Removing that made it unrunnable after about ten minutes.
Just use the community one and if you feel like you're missing out the pro version isn't expensive. I got pro for remote debugging (which I no longer use) and YAML syntax highlighting, which there may be a plugin for anyway.
Checkio.org maybe
&gt; writes stage directions in text like a neckbeard M'downvote
Congrats on your first Pycon! I would recommend getting the guidebook app and adding Pycon 2016 to it. It lists all the events, talks etc. and it really helps planning what to see and do. Also, remember that you can catch any videos that you miss online. That really helps take the stress off of planning. I would highly recommend the Pycon dinners. They are an excellent way to have some great food, do some trivia and sit and eat with fellow pythonistas. Another great way to meet people is breakfast and lunch breaks, don't miss those. I am fairly introverted and struggle with the social aspects of the Pycon but I have forced myself to be social at the during those breaks and have never been disappointed with all the interesting conversations and nice people you meet. This is my third Pycon and the thing I realized that it so special is not the talks, but those are great, but the people. It's an incredible community that is really welcoming and friendly so take a risk and put yourself out there and they won't disappoint you.
I might be misunderstanding something, but AFAIK YCM just provides smart autocomplete functionality, not autoformatting. And it is really easy to configure Syntastic to use a checker of your choice like flake8. There was an issue with YCM if you wanted to switch between python2 and 3, but I haven't really tried to figure that out. I agree that autoformatting can be a pain to setup properly, but I've had more trouble configuring IDEA's autocomplete than Vim's. I'm not sure if editorconfig plugin could help with that.
About to try about Pycharm... but I love Atom/terminal. I am a amateur coder. Update: Feels too clunky and not native. I'm going to stick with writing in Atom and running from terminal. 
My experience is the opposite. Nothing as big as Python is ever "finished". What about the EINTR/InterruptedError situation, which finally got fixed in 3.5? What about time objects being false, if they happened to be midnight UTC? What about the email parsing bug that finally got fixed in 3.3? There's lots of tiny little bugs lurking in Python 2.7. It's possible you'll never run into them, but would you even know? If my web server threw an error roughly once every 80,000 requests, I might never make the connection that it's due to an old Python datetime bug. I've never run into a bug caused by using a version of Python that was too new. I've definitely read the changelog for new Python versions and said "shit, we need to upgrade now".
I just bang out scripts from time to time, so I always stick with my editor (emacs), but I know people who are pretty hardcore command line emacs/vim junkies but who use PyCharm because of it's lint features and other nice integrations, so if you write a lot of python it's probably worth at least trying out. For me, I'm usually writing python alongside other code, which is why I love to do it in an editor because I can easily go back and forth between languages without getting my shortcuts all confused.
Well, I meant it as a minor criticism and I certainly was not trying to pooh-pooh your project. Thank you for building it and for posting it.
I have used Haskell stack but I work as a developer in Python. One thing `stack` does, which is of questionable value in the Python world, is it will download and compile the version of Haskell you select for you. The equivalent would be downloading virtualenv only and telling it, "I would like to create a project in Python3.5" and then having it download Python3.5 (if it had not previously done so), create the environment and manage all dependencies. Those dependencies would be shared across other Python3.5 environments, so it doesn't download anything more than once for the same environment. It would automatically write a `setup.py` and requirements.txt for you as well. In addition, with `stack`, there's no `activate` or `deactivate`: it's directory-based. I think `stack` is a great tool, but have not really wished for its functionality in the Python world.
ITT: we all try to proselytize you to our favorite IDE/editor, because that somehow validates something deep inside us. PS - pros use emacs. Except the ones that don't.
You can do that in sublime as well.
Intelij idea and assorted jetbrains stuff has the worst vim mode I've ever seen. It has some of the same basic functionality but doesn't even let you create new vim style keybinding. That is you can re bind ctrl foo but you can't bind sequences of keys. 
I enjoyed the book mastering emacs and stealing useful code / settings from others configured, made for an easier transition. 
Sorry for hijacking. Just wanted to share, that the pro edition (actually their entire portfolio) is free for students. I did not know, so maybe it'll help someone out there. :-)
Excuse me, it's not emacs vs whatever, it's vim vs whatever
I use Atom. Lots of plugins, looks well polished, works well. Everyone has their preference though; Its all a personal choice
My first PyCon North America in 4 years. For me it's like going to a whole new conference.
In general, my local machine is not very powerful, or have a lot of RAM. My development machines are and do. Building and testing is much easier on the bigger machine. I run vim in screen with split panes. I have key bindings for running the file, tests, lint etc. in my vimrc. 
yes... but normally you edit in emacs in a separate window and when you save your file, run it in terminal. I end up just up arrowing to the last command in bash over and over. I actually prefer it to the green play button.
Than you learn about emacs with TRAMP and the world becomes a whole other place. I usually only use vi if I am editing one line, otherwise I ssh with emacs.
At my company we can just request a Pycharm Pro license. So no need to use the community one.
And others literally can't leave Vim
Exactly. I would love to see my company move to 3.5 but I will not love to argue with ops and devops and eng and come up with an argument why we have to. I love the new features but it's not worth the hell I would be bringing myself and all of the extra time I would have to spend managing the upgrade in production.
Thanks for writing this up! It's not really hard to research all of this using the docs, but I needed a little nudging to perform these steps for an idea I wanted to play around with, and your article decreased my excuse count ^^
What plugins do you guys add to Sublime? 
I started using PyCharm before the community version was released and have been upgrading my license ever since. I could maybe do away with the CE.... 
Stallmanware?
I like to start in a basic text editor (Atom) but as I hit the first refactor I won't hesitate to use PyCharm from there on out. 
:q!
Pycharm has remote deployment/editing and remote debugging over SSH
From my experience, competent developers prefer power-tools like vim or emacs. Maybe also Sublime, but i've never saw one personally. PyCharm is more for Noobs. It has some strong limitation through the performance-requirements, which makes it useless for big projects and fast typers. Additinally the lack of easy customization is a problem. Though, it's really a good IDE, with a good collection of tools. I use it when I explorer new Projects, or refactor bigger amounts of code. Getting comfortable with new frameworks might also be an area where it can shine, but never did that myself so far, just heard about it. That saying, it depends on the developer, the experience and the circumstances what tools they prefer.
I love VIM but the day i tried WingIDE, I never looked back. VIM is great for doing adhoc edits and writing small scripts, but I doubt I could be as productive working on a huge code base where I have to debug multiple parallel processes or even doing remote debugging, with wing I can actually have the process running live in a test or integration machine and watch it in those cases where the situation is "crap it works on my laptop.. its the same exact code that is deployed.. but why....."
The changes between 2 and 3 were good, but they were hardly trivial. They're enough to completely break production environments. In any mid to large sized company, you're going to have to have meetings with ops/devops/engineering if you want to start targeting 3.x instead of 2.7. You have to have a compelling argument as to why the company will benefit from the change, and that's hard to argue when people start realizing how much work and testing has to go into the update. You have to get absolutely everyone on board, and as soon as you mention it and start pushing for it, you're going to be the one everyone comes to when they run into a 2 to 3 problem. You're going to be the person they blame when something in production goes to shit. If it all goes well, no one will care. If it goes to shit, you get blamed. No one wants to be that guy. The only reason I'm getting people on board is because the latest ubuntu LTS version doesn't have 2.7 anymore. EOL or not, I think that's going to be the biggest reason people start switching over. That's a pretty compelling argument. But I honestly expect enterprise to be widely using it for another good 20 years past EOL, and I don't think that's necessarily due to ineptitude. When a language has changes that break old code, it's going to cause the community to split between the old and new. When you do something like change `1 / 2 == 0` to `1 / 2 == 0.5`, some people are going to run into massive bugs from upgrading, and that'll be enough to make them change their minds and downgrade, especially if they're ignorant of the change. This all should have been expected. While enterprises still use it, job requirements will still be 2.7. And while jobs still demand it, people will still learn and use it. And while people focus their time on that, they won't be focusing on learning how to update to 3.x. I've run into a lot of people who confuse not wanting to upgrade to 3.x for not liking the changes in 3.x. A lot of the time, it has nothing to do with whether any change was "good" or not. There's a whole lot of work drama behind it, and it really only takes a few coworkers to convince the whole company that it's not worth taking the time to migrate. Sure, updating one script to run in 3.x is trivial, especially with 2to3. Updating production and all your coworkers takes 10 years at least.
Thanks! Let me know if you have any issues.
Same opinion here
No, only ones you find useful. I ended up disabling quite a few things in PyCharm Pro, simply because I didn't need them and they slowed it to a crawl. Besides, there's only so much profiling you can do locally. I prefer to have a CI set up to do profiling on various build agents so I can get an accurate idea of how things perform on a real machine, rather than my massive dev machine.
Just a note, there's a plug-in for pycharm that allows you use it like vim. Pycharm professional is an awesome IDE and it have everything we need to code properly, it's able to work with vagrant, you can set projects easily, remote development, fast code deploy, repository integration, database connection, etc... Etc.... I used to be use vim for python development, but when I tried pycharm (pro edition) I never looked back =) 
Hey, is there a particular reason emacs is better than vim for python?
The template functionality looks interesting and could do with some examples. Having looked inside virtualenv and setup tools, innovation or replacement in this area is very welcome, keep up the good work :) 
I'm a professional developer who is fine with the Community Edition. I do stuff like profiling and databases, but simply use other tools for that.
It's a mix. The tech on my right uses PyCharm and swears by it. I'd use Visual Studio is I could, but I can't, so I use Atom. The tech on the other side of the desk uses sublime. Python is good in its ability to be IDE-optional. In a lot of languages, things are hard to trace, whether you use 20 `include`s in C and have no idea where `strcpy()` came from, or you use C#, and your includes are passed to the compiler as an argument, IDE's are very useful. In Python however, namespaces are a honking great idea. You either have `time.sleep()`, and you know it came from `time`, or your import explicitly says "import `sleep()` from `time`." Or it says "import everything from `time`", because you're a cretin.
Do you accept PRs to fix?
PyCharm has great VIM plugin support :D I use it constantly. (VIM newbie though &lt;1 year)
Of course. Glad to. What did I miss? Edit: ah you mean py3 support right?
Windows 8.1 64 bit. I did not get an error. It has been like [this](http://i.imgur.com/x4vYMtG.jpg) and still not moving. Is there a way i can install through cmd?
I just use vim, but when I have to develop on Windows I use Pycharm
Yep, as things stand this has a limited usefulness and shelf-life. It might also be fun to add [anguish](http://blogs.perl.org/users/zoffix_znet/2016/05/anguish-invisible-programming-language-and-invisible-data-theft.html) support, though that's easier to do in modern-only python. Handling unicode in 2 and 3 simultaneously is a bit tiresome.
`M-x shell` for Emacs, I use it all the time. https://i.imgur.com/uKcIue8.png
Usefulness? Heh. 
It requires pip to install :P
Since PyCharm community became not enough for my projects, i started to use Visual Studio 2015 community and i must admit I'm pretty satisfied.
Not an expert in either python or random walks, but I would go with something like this: https://repl.it/CTlP/1
Windows is not really my cup of tea, but why don't you try and start cmd as administrator (http://www.softwareok.com/?seite=faq-Windows-8&amp;faq=7) and run the installer from there, it might give you some kind of useful output. Otherwise try and look if the installer you already run have made a log file somewhere
&gt; Dunno what this means. You can see all of your open files. If those are stored remotely, you should probably be using a VCS and syncing through that rather than having a single point of failure by modifying them remotely. Might work on a single developer project, but anything beyond that is asking for trouble. I think the original question was trying to ask if there is something similar to [emacsclient](https://www.emacswiki.org/emacs/EmacsClient) for pycharm. It lets you start one backend and multiple clients which have access to the same open files and stuff at the same time. &gt; I prefer working with Iterm side by side rather than having another window, so for me it's Alt+Tab %paste. In emacs sending code to a python interpreter doesn't open another window, it opens another pane (emacs buffer) in the same window. No having to copy and paste code. The best thing about emacs is most of the features the original question was talking about aren't specific to python. You learn emacs once and get pretty much all these things regardless of what language you are using. I've never used pycharm, but I assume I can't just open a c++ file and have everything be the same as when I was working on a python project. 
Do you get much in DataGrip beyond the Database tab in the Ultimate Jetbrains products? I have the full suite and haven't found much reason to not just configure the database tab per project and call it a day (but I'd love to know what I'm missing out on😃).
You should not use the same password unless you want to expose an access vector to your data with user account access. Anyone accessing your account can dig into the databases your user has access to - very bad practice.
&gt;Any ideas what I'm doing wrong 1. Posting on /r/Python, which is for news and releases. 2. Not posting on /r/learnpython, which is for questions.
It's a really common mistake. GL with your problem bro. :D
I only use a terminal outside of Emacs if I need to use some complex ncurses application or similar. Why don't you make a function executing that bash command and put it on a keybinding specifically for that mode or even project? That's the beauty of Emacs, if you have a project with some specific requirements you can throw a bit of elisp and have dozens of "green play" buttons defined. Using Hydra or which-key you don't have to remember anything, they options just pop on the screen.
Live templates is like yasnippet and quick jump serves a similar purpose to avy/ace-jump/easy-motion.
I actually tried to install it from safe mode and it did fine. Anyways, thanks for your help!
Well, 200$ is peanuts. But Emacs does all of those, and most of them better. The problem is that you are on your own, and it's certainly a time sink. Which is good if you take it as a hobby. I use IntelliJ Idea for Java and Scala though. The "Maybe your work isn't valued enough" is just disrespectful and not needed. We're talking about tools here. But yeah, PyCharm is a very good option or even the best if you don't find Emacs amusing or want to spend time on creating your own environment.
My pragmatic opinion is to choose PyCharm **and** learn Vim. Vim keybindings/language is everywhere and will be a huge boon to your productivity. You can use Vim keybindings in your browser, in all the most popular IDEs (Visual Studio, Eclipse, JetBrains IDEs...), in all the popular text editors (Emacs, Atom, Sublime Text, Vim:) Basically, if you interact with text, learning Vim is just a huge productivity gain. And it's not that difficult at all.
PyCharm for sure. All of the tools that I'll need to use are already set up and ready to go. With sublime or vim or something I'd have to spend a ton of time installing a bunch of plugins and configuring them all. I definitely still use sublime and vim, but only for one-off files or ssh, etc. Actually I use sublime as a scratch pad most of the time. I use vagrant instances for my projects, and being able to super easily use a remote interpreter is awesome.
yep, that's true - I did not mean to say you should use the same password on both. good clarification
My config is available on GitHub: https://github.com/gwax/sublime-config-user
:( 
And that's what you get for using Windows ¯\_(ツ)_/¯ Try Linux or OSX.
What's wrong with Eclipse? I love it.
Your last submission was more entertaining
If you find yourself closer to the metal (DevOps) vim might make more sense from a workflow perspective too.
512k is enough for anyone 
When it comes to vim, only neovim has a terminal inside the editor itself. [Neovim](http://neovim.io) is the best.
I'd probably use python3 -m venv as that's built in
Can this not be an import hook that uses the py3.6 parser?
Me neither man. SOLI-FUCKIN-DARITY!
Same here. Only problem is I've never figured out how to use virtualenvs with it, so I can't run all my code from within Atom. I know I can launch Atom from within an activated env, but that doesn't help me when I'm working on multiple files on multiple environments.
I'm not sure exactly what you mean. If you're talking about the `f'...'` syntax, that's handled at compile time so I can't see any way of accepting it in older Python versions.
And then some people like myseld use PyCharm with IdeaVIM plugin for the best of both worlds...
I was very used to i3wm and was always using multiple terminal windows. Later I switched work and had to use Mac OS for development so I got very used to tmux. This had another benefit as the directory always stayed the same whenever I opened a new pane. I still miss the ability to easily switch focus to different monitors with keyboard only. I know about `CTRL + &lt;num&gt;`, but it's still not good enough as it doesn't really work if certain workspace is already active on a different monitor :/
vi / vim and BBEdit (the former since the 90s, the latter since whenever it came out originally)
I got it originally thinking I would use it more for schema design kind of tasks, but I have ended up using it a ton for debugging queries and examining raw data. Previously used MySQL Workbench. Still digging into some of the deeper features.
[..]BBEdit: Initial release April 12, 1992; 24 years ago[..] So you used them both parallel?
I used a syntax checker (I think it was flycheck, but it was so long ago I can't recall), so I got all of that. I also had other extensions installed to do auto complete, refactoring, and all that fun stuff. It basically was a full blown IDE. Had I not had that setup working at the time PyCharm was offered to me, I probably would have gone with that instead. My current job is almost all Java, so I don't write too much Python anymore. When I do, I use Emacs without anything special installed, or for personal projects, I'll use IntelliJ with the Python plugin.
Probably from someone who used an early dev version when it was fairly slow. They've worked on performance a lot since then. I would agree that it felt bloated and slow and feature-sparse... a year ago, maybe more. It's definitely not anymore.
Yeah, so true. It's part of my job to keep up with new tech, try things out, etc. But I do get a little jaded with the new-thing-of-the-week. "Try out new language X, it's 300% more functional/decoupled/JIT-enabled/etc". To me, there's a cost of learning/using new stuff (node, python 3, go, etc), and also a cost of staying with older stuff. So there better be good ROI to switch, but when it makes sense you better switch &amp; not stay stagnate. A very tricky middle ground, and hard sometimes to get right. It's fun that node is so fresh &amp; new, and there's some real neat things there. But that also comes at a cost, and python is getting into a pretty good state now (esp as 3 becomes more and more popular).
&gt; :q! ZZ Leave like a boss without caring for the damage you've caused . 
rtfm &gt; http://www.py2exe.org/index.cgi/Tutorial
Replace ergs = ... with tuple(...) &gt;&gt;&gt; ergs = tuple(pyrow.find()) ``ergs`` is a generator. Generators produce values, like the elements of list or a tuple in a for-loop, but are produced only on-demand. If you feed it into a collection like list or tuple, all the values inside will be put into it. If you're going to get more values than you need to handle at once, you can simply iterate or call next() on the generator (as opposed to feeding it into a tuple or list). &gt;&gt;&gt; for row in pyrow.find(): ... # do something with the row? ... row = pyrow.pyrow(row)
[Bokeh](http://bokeh.pydata.org/en/latest/) has Jupyter Notebook integration and has fairly easy methods for getting your data in to a plot either by rolling your own line/cirlce/etc glyphs or using one of their canned charts. You can link multiple plots together such that they all response in kind to an input on another (i.e. zoom, pan, etc), this is assuming they share a common data source. I think keyboard interaction might be the only thing I'm not sure it supports..
Try bokeh: http://bokeh.pydata.org/en/latest/ its made for this sort of thing. 
I'd generally suggested Netrw over Nerdtree, since Netrw is built-in and is based in the 'modal' style that Vim is so fond of. Though I'm not sure what kind of convenient functionality that Nerdtree adds, since I haven't used it much :)
Hey. I ended up not using that stack-based approach for my project after all. Main reasons were that it felt too magical, and became less necessary after the introduction of "{}" format substitutions, which made positional arguments more tolerable. 
Thanks for the input. I think that may have been the issue because at least I am getting a different error now. Sorry but I'm used to PHP and JS so I am not familiar with generators and tuples. The following line doesn't kick out any errors. &gt;&gt;&gt; ergs = tuple(pyrow.find()) So should I be able to get a len() from the ergs generator? Right now that returns 0. At this point I'm just trying to even make sure that the USB, rower, and laptop are all talking to each other.
&gt;Just wanted to share, that the pro edition (actually their entire portfolio) is free for students. Also free for open source developers - which seems to mean anyone with [a decent project ](https://github.com/jalanb/what) up on GitHub.
[Injection](https://schilcote.itch.io/injection) is a good Python learning game.
Thank you for the advice
You're both missing out on vinegar :-) (netrw tweaked)
There are lots of different kinds of random walks. AFAIK the main one used to model stock markets is the [Wiener process](https://en.wikipedia.org/wiki/Wiener_process). Basically at every time step you just add on a normally-distributed random number, which you can generate with random.normalvariate(mu, sigma), where mu is the mean (if mu&gt;0 the price will tend to increase over time, if mu&lt;0 it will tend to decrease, if mu=0 it will stay around the same) and sigma is the standard deviation (you want this to be very small). As for how it's useful in real life, well, lots of real-life phenomena are best modelled as random processes, from financial markets to chemical reactions to ecosystems to radioactive decay. It's a very large area of study, across several disciplines, with many applications.
[evil indeed](https://www.youtube.com/watch?v=JWD1Fpdd4Pc)
1000 songs would take about 5 seconds.
They offer cython syntax support with the pro.
Would you use emacs if you were to create larger Python projects as well?
I'm wondering if I could do a 'reverse haversine' to get the latitude and longitude from the distance somehow.
Ya, I actually need to do this :P It's mainly a laziness thing
Unless you have some sort of information about the relative angles of the two points, all a 'reverse haversine' could do for you is generate a circle on which your desired point lies. Good luck! Sounds like an interesting project.
Whoaaaaaa. What?!?! How do I sign up??? I'm a nineteen year old freshman and I could definitely use this. 
I believe the difference is that the pro one comes with built in support for things specific to Django, e.g. syntax highlighting, etc. I haven't personally compared the two.
I have never felt it was very intuitive. I say "always emacs" but for the java stuff I do I tend to use IntelliJ (As I said JetBrains makes the best IDEs out there imo). The UI seems way more user friendly and I have an easier time making and managing project files than I do in eclipse. I feel like IntelliJ eliminates a lot of the troubleshooting I find myself doing while using Eclipse. A wise programmer (My grandmother) once told me, "vim, emacs, IDE, whatever you're fastest at developing in is what you should use." If you use an IDE and can develop like no other, than by all means rely on the IDE. I have found that using emacs over an IDE (I started programming with python in PyCharm) makes you a better typer and a better programmer because it makes you rely on your own abilities more than those of the editor. Things like auto-complete are nice but I actually find that moving my hands away from the keys to select the auto-complete values takes more time for me than just typing out the variable names. For me personally I tend to develop faster in emacs than an IDE (except for Java) which is why I have switched over. For context, the reasons I started using emacs is because I have always seen my dad using emacs, and some of my friends in college are using it. So when I started writing perl at my current job I chose emacs rather than downloading an IDE to my work machine and I haven't looked back. :P At the end of the day, use whatever you know and can develop best in, switching to a new IDE or emacs mid project is going to be more trouble than its worth.
[Here!](https://www.jetbrains.com/student/)
Is it possible to reverse this, and transmit music to the elevators? 
Spend at least as much time meeting and talking with people as you do in the talks. The talks are recorded and you can catch up on them later. If you miss out on the hallway track, the open spaces, etc., you can't do that later. Some of those great conversations begin with the interested questioners who mob the speaker after the talk, of course.
The short answer is yes. However, it'd just interlace the packets with the normal elevator music packets. You'd have to knock the original source offline to be able to have a clear stream.
From my understanding of waves, couldn't you publish bytes that cancel the music with the addition of new music?
Did you understand all the code in the article?
But you would be able to send a message or something? Like a prank or something?
What
I understand that Python 1.5 is still in use in production. Python 2.7 reaches EOL in roughly four years. The [Python 3 Wall of Superpowers] (https://python3wos.appspot.com/) looks healthy. So who really cares? You pays yer money, you takes yer choice :)
Appreciate the response 
It mean to be able to receive the packet (or at least the electromagnetic wave), then calculate what electromagnetic signal to emit to cancel the official signal and replacing it with the custom music. Then it will be issues with the propagation of the waves (like speed, direction, etc) if your are not need to the official emitting point.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I think that a very good example for a real world application for stochastic processes is Google's PageRank algorithm. It was used to determine the order of search results. Basically the PageRank is a probability that a random user browsing through the www finds a certain page.
Brings up a 404.
Anyone willing to look at the codebase and give some comments? I know it's not a *useful* or a complex project but implementing a language is something I've never done before and I would like to know how my approach holds up in this domain.
I use it for scientific programming! I think the main help has been the profiler, and a few other things - to be honest I've mostly used the academic pro licence so i don't remember exactly what's missing from the community version ;)
I'm also interested in this answer although I suspect this isn't the right place to ask. The way I've done it is to install a py3 build system and use as needed and if you want to, set it as default. 
It depends on what you mean by "predict" ... but yes. The idea is that you can get information on "fair pricing given your model" and, if the model is accurate, whenever something is mispriced your prediction would be that the price should move toward the fair value. One example might be the Black-Scholes model for option prices. This model relates option prices to the volatility of the asset (and the time-to-maturity). There is a tractable solution to this model, so one doesn't need monte-carlo techniques to estimate fair pricing. On the other hand, Black-Scholes is not correct. For example, Black-Scholes *assumes* that volatility is uncorrelated with returns. This is decidedly not true for any asset with what is called a risk premium (almost by definition of "risk premium"). One can loosen the hypothesis and get a model that relates option prices to volatility and corr(vol, ret). This is informative and useful in judging fair pricing. Not only that, the difference between Black-Scholes and this model allows one to infer corr(vol,ret) ... and given that option pricing is quoted in terms of the volatility term ("implied volatility") ... it's tremendously informative.
It's Python, there is nothing to build as it is an interpreted language. Just open a terminal and run it through there (ie `python test.py`).
As a totally unbiased third party, I second this user's statement. In all seriousness, though, INJECTION isn't really designed to be a "learning game;" it can act as one, but playing INJECTION is at best a way to practice syntax and problem-solving skills. Solving one of the puzzles is nothing like developing an actual application.
Haha I will give it a try this week! Thanks :)
I'm a beginner too and this was very fascinating, I understand most of the code and the other half is a bit of guessing, i've never used socket or struct before. But I come here to try and see what I can aspire too, and this was certainly interesting! As it is hard to find an end goal, at the moment I am setting my own goals but I don't know the limits ... I only started learning about a month ago and work on it between school work, but I try and come up with my own little projects and try and do it using python. Some of the things I've done: 1. On command, open iTunes, detect if iTunes is open and then shuffle the music and automatically play 2. Edit, create and read files just through code (sounds menial but as I found out this came in use for some things I wanted to try later) 3. Give my mouse co-ordinates in real time, this was useful for getting a script to click in certain places on screen etc. until I found a shortcut way of opening programs 4. A script called "food", with the knowledge I learnt from editing and creating and viewing files script I tried above I made a script where I would input food I have .. like bread, chicken, sugar, eggs etc. and save all my inputs into a text file, and on command it would read this file, check whats in the file and tell me what I can make with the food I have, so if I put in bread, eggs, etc. it will tell me I can make Eggs on toast, toast, fried egg, scrambled egg etc. so it could detect multiple words and show me a recipe for things I had. 5. One i'm working on now is an AI chat bot which also makes use of reading and editing files within code, so it can store responses and things like my name and age and favourite colour and hobbies etc. which it can fish out later, etc. This one is really fun. Obviously the term AI is loose here .. it's not that clever, yet. Not sure why I just rambled all this to you, sorry
OK, thanks. I also ran some code using just the PyUSB and it looks like the computer isn't even talking to the device so that is part of the problem too.
Thanks alot :)
&gt; This way it would save the file test1 skipping 1 byte from the packet, test2 skipping 2 bytes and so on. Why are they skipping bytes? 
Whether the receiving clients would accept traffic from your IP rather than just the hold music computer is another question.
Makes me wonder though; did you have in mind installing a lean version each time or just a handle for it? It would be handy to just execute from a portable set altogether.
Not really. Some people might say that the REPL is more integrated in Emacs but you can get that in Vim+Tmux.
He is assuming that there is some kind of header in the packet but doesn't know how long it is. A brute force method of figuring this out is to skip a byte, see if the data left is something you recognize, if not you skip two bytes and try again. Eventually you'll find where the header ends and data starts, OR your never recognize the data and have to go back to the beginning and try something else.
If you are talking about the version that comes with ST, open the console than type &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.version '3.3.6 (default, May 10 2016, 15:19:29) \n[GCC 4.6.3]' If you are talking about the python version for each project this is configurable into the project settings.
This is why we use Cython, guys EDIT: Wooooo! Lua!
Tools-&gt;buildSystem-&gt;new build system : paste this &gt; { "shell_cmd": "/usr/bin/env python3 ${file}", "selector": "source.python", "file_regex": "^(...*?):([0-9]*):?([0-9]*)", "working_dir": "${file_path}", } and save it, now to use it Tools-&gt;buildSystem-&gt; and click at the name that u saved 
From Github? It is trying to render the notebook, so maybe that breaks once in awhile, but the URL seems to work OK...
It seems pretty early in development though, and pretty complicated to use from their examples.
We don't always have a choice in the matter.
And many of those things turned out to be broken, which they only found out once they switched to a slightly less broken version of the language.
Spacemacs comes with vim binding. It uses evil-mode for that. But it also comes with all the advanced feature from Emacs. I don't want to start a long list, but for instance, Emacs is not limited to terminal (vim or gvim), this means it can use advanced graphical functions and dynamically highlighted syntax errors, like in a regular IDE. Another thing I appreciate is that you can just click on a backtrack error to jump in the source code, this was really something painful with Vim. The git integration with magic is also something I enjoy more and more. I still uses Vim a lot because it's a commodity available everywhere (in general with tmux).
Yes, plus themes
From the network perspective they should probably point that audio stream to a multicast address that isn't reserved. This aliases to all routers address at layer 2. They can and should choose an address with other than '0' in the middle octets. 
Really, There are a lot of Python developers earning more money than C-like syntax developers.
If you were looking for user names, you could see whether navigating to the appropriate user page URL returns an error code (e.g., Reddit's is www.reddit.com/u/&lt;username&gt;). I think searching by anything else is generally going to require using each site's API.
For me it's professional just because I can get it for free as a student
`UNIF v-16624417 format NES ROM image` What is this? Is this a Nintendo game being sent to the smart tvs?
I think what they're using, micro python, supports cython. But I don't know much about it tbh.
For my standalone application I used guiqwt. Switched from matplotlib, tried PyQtGraph and currently happy with the last one.
I use PyQt4 on the job. PyQt5 can be used depending on company policies. But I think you can start with Qt4
The Python Software Foundation plans to end support at 2020. But I won't be surprised if they suddenly get a grant from some big company to keep maintaining security fixes beyond that date. They probably won't say no.
Develop it with django if you don't have to use a gui. For example I work for 9 months and I do all UI works with Django except one which I used pyQt4. pyQt4 is good but it's painful to design perfectly and controlling data easily between components. For example it's just a post request or Django ModelFrom to pass data through views in Django but on the gui side, you should have a good design principle to achieve it.
&gt; completely broken string implementation that can't operate with byte data or with character data. Sounds like nonsense to me. Strings operate on characters (well, to be precise, Unicode code-points), full-stop. Saying that they can't operate with character data is like saying that floats can't operate with 64-bit IEEE-754 binary floats. And strings *intentionally* cannot operate directly with bytes, since that is what Python 2 does, and it is severely broken. If you want to mix strings and bytes, you need to encode or decode to a common format. &gt; the default sys.path doesn't support overriding the standard library /face-palm On the contrary, the default sys.path makes it too easy to shadow modules in the standard library. That's an ongoing problem: create a file called `socket.py` in the current directory, and see how much of the standard library breaks.
It sounds bad if you compare if with some ideal scenario of there being only one obvious tool that is perfect in every way. But I don't think this has existed for any language ever. Usually less options just ends up meaning that you are stuck with what ever warts the 'one solution ' has. Though one downside could be trying to find the current standard solution if you are new, and wasting time sifting through dead/broken projects first. 
/r/computervision /r/opencv
You could disable the automatic reboot from the Windows options to get a proper blue screen with an error code. Without any error messages I'm guessing this a hardware problem, probably with psu or ram. 
Sure it can, if your app is hosted on PyPi. You're basically shipping a self-contained Python environment, which can be updated via `pip`. Why do you think it *wouldn't* work?
There should just be a bot that suggests this then locks the thread everytime this question comes up ..
Pynsist already bundles the Python interpreter, but not pip. For the initial installation, it's easier and more reliable to bundle the packages you need into the installer than download them at install time, so there's no need for pip. And I'm assuming that end users aren't going to use the command line to update an application. You might also be interested in [conda constructor](https://github.com/conda/constructor), which does something very similar to what you suggest, but with conda instead of pip.
pyqtgraph? http://www.pyqtgraph.org/
can you embed those into jupyter notebooks?
I've extended the regex to catch also some other entries: - codeUpdateCGTime = 12.11.2015::13:20:0; - m_transform = 0.141643 0 0 0.13369 2907 -4 ; with this rules: DATE: /(\d+\.\d+\.\d+::\d+:\d+:\d+)/ ; RAW: /([\d|\.| |\-]+)/ ; This works, but than i tried it with a bigger example "12MB" and i run out of memory. Is there a way to reduce the consumption? 
I use [script](https://atom.io/packages/script). It does the job. I can run a script with a keystroke and see the results in a pane on the bottom of the Atom window. It makes my workflow a bit smoother. I especially like that I don't need to save the file before running it like I do with Terminal. That makes it more useful for quick tests that I would previously use the python interactive console for.
**only**?
i would use web but i developed a program that i want to try to monetize and it needs to be a standalone, downloadable application. i made the ui in tkinter and it looks terrible so i'm interested in investing into a more professional ui. 
Yeah! At least one of the developers works extensively on pyqtgraph, too.
&gt; can you embed those into jupyter notebooks? 
They have some [IPython Notebook examples](https://github.com/vispy/vispy/tree/master/examples/ipynb), but I don't know if every visual or plotting element is embeddable.
At the very least, Red Hat will continue to backport security patches, which will then be publically available for everyone else. They don't close their patches, just their binaries.
I came to like the way they handle profiles, especially contribution calendar. But I hear you. Have you considered BitBucket?
It looks like they picked some really bad examples for their front page, because they make it seem like the amount of biolerplate needed is excessive.
&gt;What the hell? I can't believe I spent time for this. It's just elevator music. It is played in the hotel corridors around the elevators. Oh well, at least I can listen to it from my room now. The author seems surprisingly disappointed to discover a perfectly mundane and reasonable purpose for the packets. I wonder what "exciting" result he was hoping for when he decided to spend his time decoding them? I'm sure around 99.99999% of network traffic is going to have a boring purpose, so it really shouldn't have come as a surprise.
Why don't you just look at the Pr(&gt;|t|) value itself? In your screenshot, it seems that anything below 0.001 is three stars, anything below 0.01 is two stars, anything below 0.05 is 1 star, and anything below 0.1 is a period.
I've never hit such use-case. textX was geared towards DSL development where files are usually not that big. textX works by parsing the input using Arpeggio parser and transforming whole parse tree to object graph conforming to the given grammar. One way that comes to mind is to optimize memoization cache in Arpeggio's ParsingExpression.parse method. Some form of LRU caching should lower memory consumption. But, first some profiling should be done to see where are the biggest memory hogs. If your file can go public register an issue on github and post it there and I will take a look. 
There's [PyWebView](https://github.com/r0x0r/pywebview) &gt; A lightweight cross-platform native wrapper around a webview component that allows to display HTML content in its own dedicated window
What's that third param, brg? Oh, bearing... so having cos(0) as the bearing would give the latitude that's directly north, correct?
I made a reply to OP before I saw your post. Could you take a look and tell me if what I had was a bad idea?
You already got a reply from /u/tdammers doing an excellent job speaking to the concepts, so I'll give some advice with code examples. This is pretty easily done with a server waiting for info and clients POSTing to it. For the clients you can do something as easy as import requests my_post_data = {'status': get_some_computer_data()} requests.post("192.168.1.XXX:8901/e", data=my_post_data) # see below Check the [requests documentation](http://docs.python-requests.org/en/master/) for more info on how it works if you choose to follow that path. For the server you just need some sort of basic web server to catch the POSTs and put them on the screen, maybe do some logging of data and logging of the server. I don't know much of Arduinos, but as for a little web server to run on the Pi, but the following should get you going pretty well with python 2 using Flask. Just stuff the bits of your script to output to the screen in where I've put comments. I added some extra niceties such as logging, recording data being pushed to the server, and the option to GET data from the database as well just in case you need it and as an added learning experience I suppose. #!/usr/bin/env python import logging from datetime import datetime from flask import Flask, Response, request from flask_restful import Resource, Api from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) api = Api(app) db = SQLAlchemy(app) machine = {'192.168.1.2': "computer a", '192.168.1.3': "computer b"} """ declare usb """ class Message(db.Model): """example persistance object to store messages if you want""" __tablename__ = 'Messages' Id = db.Column(db.Integer, primary_key=True) Status = db.Column(db.String) Machine = db.Column(db.String) DateReceived = db.Column(db.DateTime, default=datetime.utcnow) def __init__(self, Status, Machine): self.Status = Status self.Machine = Machine class Endpoint(Resource): def post(self): """example POST endpoint""" status = request.values.get('status', None) machine = machines.get(request.remote_addr, None) if not machine: # invalid client talking to us return Response(status=401) message = Message(status, machine) db.session.add(message) db.session.commit() """ push new status to USB screen here """ return Response(status=204) class Messages(Resource): def get(self, mid): """example GET endpoint""" messages = str(Message.query.filter_by(Id=mid)) return Response(messages, status=200, mimetype='text/plain') if __name__ == "__main__": api.add_resource(Endpoint, '/e') api.add_resource(Messages, '/m/&lt;mid&gt;') logging.basicConfig(filename='app.log', level=logging.INFO) """ init usb device """ app.run(host='0.0.0.0', port=8901, debug=True) edit: updated 
Thanks. It still doesn't actually give me a blue screen after disabling auto reboot. I also ran memtest with no errors, and my CPU stays in the 30s. Not sure how to test my PSU. FWIW, I'm able to play resource-intensive games for hours without a single hiccup.
Dumb as it sounds, I am not familiar with PyPNG. It probably has what I need. Actually, I don't want to get flagged, so I'll mark this solved (or something), in case this is poor-received. Thanks for the pointer!
keep at it, you're doing great :D
first time being posted in /r/python https://www.reddit.com/submit?url=http%3A%2F%2Fwiki.gkbrk.com%2FHotel_Music.html
Oh, the interpolation method, yeah?
I do a Python programming stream every time I code from home that you can follow, https://www.twitch.tv/bvande If you shoot me a PM with your gmail/facebook info I can add you on chat as well.
Thanks, could you explain this process for Windows, too? I am using Windows on my Desktop even though i use Ubuntu on my laptop. edit: Nevermind, found out how to do it in Windows. Thanks again for your help!
There's already been good answers to this, but I wanted to chime in because determining file type for arbitrary files is a truly difficult problem. In fact, getting 100% accuracy is impossible - the best we can do, no matter how much we try, is a guess. I work on software that eats files from international sources and stores them internally either as unicode text (so we can do transforms and compares) or as arbitrary binary (if the file wasn't a text file). That sounds pretty easy and as long as people use ascii/utf8 with byte order markers for their text files, life is ok. But not all editors that save utf8 put a BOM in front, so we are left with an arbitrary stream of bytes. We can use heuristics to determine the encoding, but they only have a confidence level, not an absolute, because valid byte sequences in one encoding might be valid for another. It is a problem that requires intelligence and knowledge of the underlying language - I don't read Japanese, so if I look at a file and see Japanese characters, I might think it is good, but it may just be coincidence and it is actually a completely different language misdecoded. 
I have used the following both in Notebooks and for web apps and find it to be very configurable to whatever user events you need. It has nice built in mouseover legend and range selector features. I recommend building from the github source though as it has some needed improvements.
Not necessarily a bad idea, just two thoughts on my side: - Raw UDP or TCP is possible, and has a few advantages, but I believe in this situation, HTTP (or ZeroMQ or something similar) is going to be easier to grasp, requires less debugging, and comes with a lot of useful features built in. In particular, you probably don't want to deal with the messy details of interrupted connections, out-of-order packets, properly opening and closing ports, etc., yourself. - I believe "communicate with the Arduino" is a problem OP has already solved, so I assumed that that's not the hard part. It's a bit unclear in your post which part you consider the "server": the Pi, or the clients that post their status information. 
I guess the Python 3 fanatics are downvoting this? *waits for the downvotes*
Prompt-toolkit isn't really made for full screen apps (though supposedly it supports it) so if that's what you're looking for prepare to go reading the source because that's probably totally undocumented. 
I guess I just went to the [components page](http://getuikit.com/docs/components.html), where you have all the counterparts of things in Bootstrap/Foundation. For a grid, follow the grid examples, for buttons, same thing, etc. The main difficulty I had in learning uikit was just underusing the Utility component, which has a lot of little features you need to get positioning just right.
Wow, Python *1.17?* I wonder what kind of projects these are.
Wow, amazing explanation. Thanks! 
This data comes from user agents, most likely it's an alternative implementation of Python that put the implementation version instead of the Python version in the UA.
thank you for sharing
Thanks. this is great. I wonder if I have to run 1 value at a time, or if I can run all of the columns in my data frame against the target column?
"Dammit, I'm in an elevator, but this is is clearly \*escalator\* music!"
 mreq = struct.pack("4sl", socket.inet_aton("234.0.0.2"), socket.INADDR_ANY) s.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq) I've been recently learning more about sockets and would love to know why these lines are needed. I'm also not sure where he gets `4sl` from. Correct me if I'm wrong but after reading the docs `4sl` is the same as `slslslsl`? Why does he need a struct with 4 `char[]` and `long` objects? 
It's sad to hear that many routers will allow this, though it probably helps skype et. al. Presumably more routers than not disallow source address spoofing in TCP?
Thanks, will do.
I think [blessed](https://github.com/jquast/blessed) will be best for you.
You are welcome
comment for notifications
The source code is intellectual property of your employer. If you don't have a license to distribute it, that would be copyright infringement. (Details may vary depending on your country's copyright laws.)
The problem isn't too many options, it's too many *undifferentiated* options. Sifting through dead and broken projects is only part of the problem. You also have the problem of not being sure which of the working solutions is the best fit for your project. It's not always a problem with the options themselves. Sometimes it's just that there isn't good documentation on each option's strengths and weaknesses. Ultimately, I agree that having more options is better than very few. Having trouble picking which library to use out of a group of good candidates is a minor one in comparison to having only a few unsatisfactory options.
isinstance() performs a couple checks sequentially. Here's a very, very abbreviated version of the function which shows why your two cases are true, from cpython source converted to python... def isinstance(inst, cls): if type(inst) == cls: return True if issubclass(inst.__class__, cls): return True return False `isinstance(y, Y) is True` because of the first condition `isinstance(y, X) is True` because of the second condition Sources: https://github.com/python/cpython/blob/2d264235f6e066611b412f7c2e1603866e0f7f1b/Objects/abstract.c#L2610-L2611 https://github.com/python/cpython/blob/2d264235f6e066611b412f7c2e1603866e0f7f1b/Objects/abstract.c#L2587-L2595
OP, you done goofed. You provided the title to [this article](https://ruslanspivak.com/lsbasi-part3/), but your link points [here](https://ruslanspivak.com/lsbaws-part3/) ("Let's Build A Web Server. Part 3.") instead.
Copying binaries is completely irrelevant. What matters is who owns the copyright for the code you wrote, and if you wrote the code as part of your job(*), then your employer holds the copyright and you don't have the right to open source it. (*) The details vary; check your contract. 
Completely serious. I googled the string to rather predictable results. But it is a Nintendo ROM that it identifies, right? Even if it's not correct. 
Good catch! My bad. :) I can't edit it anymore. I'll have to delete it and re-post to avoid confusion.
Can't always be done that cleanly. For example, if you have a convention that all "utility" functions go in one file, and that utility function makes use of a class from another file, but that other file has a method somewhere that makes use of a utility function, then boom you have a circular import situation. You can decide to move the entirety of that utility function to inside file that declares that class, I suppose, but then it starts breaking some of the conventions you're making use of. Although, like I said, I notice I'm running into that problem less and less as time goes on, so I've probably made changes without even realizing it.
The calculation is from the fact the result shows x off of the estimate, whether it's accurate or not. For each degree, that's a possibility of 1 further off the estimate from 0 being that way by pure chance or not. That branches off more than 400 times with each time it branches off meaning the possibility (not made biased by anything other than pure chance) of it not being natural. Each time it branches off can also either mean 'A simulator or the like made it happen to give me a hint and might fool people into thinking it's natural, using reasoning and perception manipulation'. So, with the reasonable possibility of you all being fooled into thinking it's natural, and even being fooled into thinking you aren't being fooled, etc, I must ignore the unreliable bias of others' opinions, ignore whatever else is contradictory, that a simulator could have put there to fool those who don't ignore it, and trust in the logic of coin flips. I bet there will be a heads flip in those 400+ two sided coin flips. (Don't you?) I would doubt that, but I can't.
Yeah. Possibly project method as well, don't have the docs open though. 
This is my only real complaint about the software world right now, I love that people share their code and such - but so much of it just ends up being stale. I usually evaluate the "latest and greatest" stuff, but rarely deploy it until I see some type of history of release and work on it.
Unrelated utility functions stuffed into multiple files are the analogue of a junk drawer. Organize the drawers into similar-behavior functions and you're less likely to get circular imports. There could still be circular imports after organizing, but there could probably also be more organizing to avoid said problem At least with Python, when you're tired of reorganizing (or can't due to public API backwards compatibility), just do "import foo.bar" and there won't be an import loop. That's better than some languages can handle. I'm looking at you, C, guarding all your imports with #ifdef.
Curiously, this is not true if you assign the `__class__` attribute directly on the instance, i.e. `y.__class__ = X`. Then `y` will cease to be an instance of `Y`. Strange that it should behave differently based on whether we're changing it at the class or instance level.
Add nonsense comments for free downvoted! 
No worries! I figured it was just a simple mistake. Good link though!
I prefer WingIDE for my projects. It's debugger seems so much easier to use than PyCharm's. It also loads faster than PyCharm. However I use PyCharm too and they both have their pros and cons. I think I like PyCharm's PEP8 highlighting the best. It also had a neat autocomplete for documenting where if you had one or more arguments defined in your function and created a docstring, it would automatically put @params in your docstring. But that got broken with their 2016.1 update.
The talks are lots of fun, but I also recommend going to the open spaces as they can be extremely useful and you get to meet neat people to boot.
What you've written isn't very coherent. Are you saying it's asking if you want to install when you run it?
What notification features you have vary from client to client there are several after all. The easiest thing may be to save discussions you are interested in and check back on them later 
Yep definitely, the interactive interpreter, and telnet. There is _no_ substitute for getting your own fingers sticky. http://ilab.cs.byu.edu/python/ to get you started, but DEFINITELY play with it yourself. If you get super stuck, hit me up or post on /r/learnpython, and we'll do our best.
Thank you! Ill take a look on that later today
&gt;i've never used socket or struct before. Today's your day to start. Here's what I did for my first socket programming stuff: Noughts and Crosses. That's it. The less complicated of a goal you set out with, the more easily you'll be able to explore the library you're trying to learn, AND, once you've got something up and running, it's much much easier to add to it to learn new things than it is to start a project to learn those things. I've never used struct myself, but I might soon; I'm planning on messing around with integrating Python with WCF stuff from .NET (which will be fun and catastrophic). &gt; As it is hard to find an end goal This is a super common thing with beginners, and all I can say is: Don't worry. The most important and enjoyable part is, by far, the journey. If you can spend a month doing a half hour or so of mucking about per night, it doesn't matter if you don't make anything of value, so long as you end up with a folder similar to [this](http://i.imgur.com/4AwE4KW.png). Just a whole bunch of half-started shit that you learned while writing. &gt;On command, open iTunes, detect if iTunes is open and then shuffle the music and automatically play That's cool. Now why not try looking at `pyglet`, and writing your own music player? Nothing fancy, just a script that loads up your music folder, shuffles the list, and plays the tracks one by one in order. Shouldn't take you long at all. &gt;Edit, create and read files just through code (sounds menial but as I found out this came in use for some things I wanted to try later) Awesome. Why not try reading someone else's files in a format you don't understand yet? Great opportunity to use `struct`, and there are tonnes of well-documented file types (JPG, WAV) out there, along with some less well-documented ones (just open up any video game iso and marvel at the bizarre files there), that you can spend an afternoon messing with in the interactive interpreter. &gt;Give my mouse co-ordinates in real time, this was useful for getting a script to click in certain places on screen etc. until I found a shortcut way of opening programs That's an interesting one. What OS are you on? I assume you know about AutoHotKey if you're on Windows. &gt;A script called "food" I once googled for that exact functionality. You could expand this by collating recipes from a huge recipe website, extracting the ingredients list, and making a database of them, if you wanted. &gt;which also makes use of reading and editing files within code, so it can store responses and things like my name and age and favourite colour and hobbies etc Aha. You need to look at databases. Just like everything else, they're easy, and it won't take you longer than a week to be comfortable with them. I recommend you play with python's `sqlite3` module from the stdlib in the interactive interpreter, and go through some of the SQL tutorial on W3Schools. After that, look into getting MySQL up and running and see how that works, then come back to me and we'll talk about cooler database stuff. &gt; Obviously the term AI is loose here Aye, non-learning == non-AI. You were right with "bot" though.
I was trying to plot 1Trillion data points in matplotlib. Eventually ran out of RAM. At first it was utilizing my processor then it shifted to using the RAM. 
Seems to me as though it was purely a narrative. Certainly made it an enjoyable read for me. I just wish the title of the document didn't give it away from the very beginning.
The only way this can be okay is if your employer explicitly approves it (and some are cool with contributing back to open source, especially if it was used as the basis for parts of your code), or possibly if you rewrite the code from scratch on your own time, duplicating the function but not the code. In the latter case I would still tell my employer so they wouldn't get suspicious if they later discovered my new code. 
wrapt uses it, but proxies are probably the only legit reason to shadow `__class__`
Desktop programming is dead. It's a shame, really, because web sucks, but there you have it. If you wanna do desktop dev for cash, I'd recommend .NET
Well gee, if you'd shown you could spend 3 seconds reading the sidebar, sticky, or big text above the new post, telling you to post this in /r/learnpython instead, I'd've loved to have helped you out. Shame.
Hi, first of all, thanks for taking time to reply and congrats on the library. I've seen Pyvim and Pymux and even though they show how much can be done with prompt-toolkit (which is a lot), they seems big projects to look at to get a grip of how to properly use the library. For the widgets part, I don't need as much as provided in urwid, and frankly, what's currently in prompt-toolkit seems to be enough for my needs. If you are about to write some more examples on how to make some simple full screen applications, I would be more than pleased. Like I said, the documentation in that regards is a bit sparse. Speaking for myself, I don't quit understand how to properly use UIControl to arrange the output. Or if that's up to the container... anyways, a bit mingle on that. by pipe, I just mean that I would like to be able to control the output in a different way if for example, my program is in the middle of pipe or if it's the last one of a pipeline. for example of in the middle of pipe: grep -ir 'something' | awk ... | my_program | ... example at the end: cmd1 | cmd2 | ... | my_program
Yes, python 3 is a total debacle. Millions of productive hours that could have been spent developing features for existing projects have been spent porting code to python 3.
That's not the point. Your equation is wrong. `0.5 ** number` doesn't give you the correct result. The probability you're looking for would be given by a binomial distribution - check out the scipy.stats.binom module.
Thank-you, after my last exam this Wednesday i'll take a deeper look at this !
Let's say you do have the data on your hard-drive. Do you realize that you will output an image that is 1 Trillion pixels wide **multiplied** by its height? Where do you store and how do you display that? PS. Python or it's ability to use multiple cores has nothing to do with that.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
You can use `easy_install` if you would prefer things to go on the front of the path.
Let it go.
Exactly, but I do understand what /u/nerdwaller says about not always having the luxury when you're working on projects of a larger scale (or at least bigger than the ones we both do).
Likely the problem
We actually use this fun / scary trick in Pyramid in order to define new descriptors on a per-object basis. For example, you have a method like def get_user(request): return request.db.query(model.User).get(request.authenticated_userid) request.set_property(get_user, 'user', reify=True) # later user = request.user The `reify=True` isn't very important here but it is making it a cached property (cached upon first evaluation). Normally in Python it's difficult to add a new descriptor to an object... they must be defined at the class level (think about how you normally would use `@property`). So we're making a shadow class with the descriptor on it and then re-assigning the request to use that class. This is cool because you can now extend the object without knowing much about the original class. https://github.com/Pylons/pyramid/blob/382f93e2bfec5563587e306fda3fd34759314300/pyramid/util.py#L39-L129
How is this different from theatre.__dict__ 
Use electron https://github.com/electron/electron
Get something in writing from your employer (if large enough to have one: from the legal department) explicitly approving the open source contribution and license terms. In many cases the conversation is _can Company patent this?_ followed by _does this open Company to liability?_ and a little dash of _does this help our competition more than it helps Company?_ None of which you should answer on Company's behalf, regardless of the answers.
Well, that would mean the class is an instance of itself. It also means its instances are other classes. You could assign a descriptor as an instance attribute of the Weird instance, and since that is also the Weird class, it would fire when you accessed it via the instance, which normally doesn't happen.
X-Post referenced from /r/programmerhumor by /u/waffle_ss [Fizz Buzz in Tensorflow](https://www.reddit.com/r/ProgrammerHumor/comments/4knwpd/fizz_buzz_in_tensorflow/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^P.S. ^^my ^^negative ^^comments ^^get ^^deleted. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
So long as the electrical engineers don't upgrade to 600V 3 phase unicode, we'll be fine.
My goal was to create a lottery simulator. Why a trillion point? Why not ? Have you not ever tried to reach for something beyond your grasp. I would not waste your time by asking about a fake project. You thou apparently knowledgable have not been very helpful.
No, Qt is LGPL. Unless you need to change Qt and don't want to distribute the changes, you're fine. 
QT is available with an LGPL license. Basically, unless you want to change Qt itself and don't want to distribute the source code for those changes, you can use the LGPL licensed version.
Well I just learned that to be impossible. 
Cool project. You probably want to do this experimentally, download a bunch of Python projects off of GitHub and process the Python files.
Ask your employer. If he is willing to open source the code, you can do so--under his name. I've done that a few times.
You define a schema for the models? Isn't that like saying you define a schema for the schema or a model for the model? Seems like it'd be super redundant. 
I use PyCharm mostly, though I also fall back to vim and visual studio code for tasks where they perform better.
Before we see the "I'd never hire..." comments, I would hope that everyone reads a candidates resume, possesses a sense of humor and generally strives to level set the interview. Only time I've heard someone actually fail a FizzBuzz in person was when they had someone else pretend to be them on the phone screen. First time I've seen TensorFlow. I wonder if Subreddit Simulator is/could be written using this library.
Sedat
I'd be surprised if this story actually happened.
/r/subredditsimulator has its source code [on GitHub](https://github.com/Deimos/SubredditSimulator/blob/master/subreddit_simulator/models.py). I looks like it uses [markovify](https://github.com/jsvine/markovify).
This site uses Python 3 and PyGame to create games [programarcadegames.com](http://programarcadegames.com/index.php)
Python turtle http://pythonturtle.org/ 
you are right. this isn't a one size fits all thing. this is just something I "discovered" by myself but I completely agree with you
that was one complaint about marshmallow. because you're essentially creating a scaffold for your model. so it's like writing your model twice 
I updated the post. this is basically shows the use case for loading more objects from the db if any of your the attributes are a relationship
Wait... Wait, wait, wait... Are you actually telling me that that /r/subredditsimulator is populated by bots. I... Just... Huh... Rgnnn...
&gt; More details can be found at https://mail.python.org/pipermail/distutils-sig/2016-May/028986.html Cool stuff. This will help me decide when to drop old versions. My library seems to be at 15% py3 now. Sadly a large percentage of the entries are null :(
I've never seen that `__abstract__` is this a `SQLAlchemy` thing? or it's a `python` thing to declare an `abstract class`? one benefits I like about the injection decorator is you can modify it like this: def inject_function(*func): def decorated_class(cls): for func in funcs: setattr(cls, func.__name__, func) return cls return decorated_class so now you can inject whatever methods you want for you models: and each model could have the same number of injected methods or not 
I already have RES installed but was on my mobile. Thanks though :)
Depending on what kind of game you want to create, renpy might be a viable alternative. It works on win/linux/osx/android and have experimental support for iOS. It's mainly usable for visual novels or puzzle games and is built upon PyGame. [https://www.renpy.org/](https://www.renpy.org/)
Check to see why they're null by looking at ``details.installer.name``. Python version is one of the things we can figure out the best in the most clients, but there is a non trivial amount of traffic hitting PyPI from things like bandersnatch which we don't really have a way to view that information for (specific to bandersnatch, we can see what version of Python bandersnatch is running for, but we explicitly decided to record it as null since what bandersnatch is running at isn't really relevant to what most people want to know when looking at python version).
THIS IS A RUSE; &lt;&lt;VAR_SUBREDDIT&gt;&gt; IS RUN BY /r/TOTALLYNOTROBOTS 
On a side note: If you ever find yourself debugging a logging setup, use Brandon Rhodes wonderful [logging_tree](http://rhodesmill.org/brandon/2012/logging_tree/) module. import logging_tree logging_tree.printout() That prints a tree like this: &lt;--"" Level WARNING Handler Stream &lt;open file '&lt;stderr&gt;', mode 'w' at ...&gt; | o&lt;--[cherrypy] | o&lt;--"cherrypy.access" | Level INFO | Handler &lt;cherrypy._cplogging.NullHandler object at 0x...&gt; | Handler Stream &lt;open file '&lt;stdout&gt;', mode 'w' at ...&gt; | | | o&lt;--"cherrypy.access.166457196" | Level INFO | Handler &lt;cherrypy._cplogging.NullHandler object at 0x...&gt; | o&lt;--"cherrypy.error" Level INFO Handler &lt;cherrypy._cplogging.NullHandler object at 0x...&gt; Handler Stream &lt;open file '&lt;stdout&gt;', mode 'w' at ...&gt; | o&lt;--"cherrypy.error.166457196" Level INFO Handler &lt;cherrypy._cplogging.NullHandler object at 0x...&gt; 
Although you could also use pretty easily [RNNs](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) to get even better results
And there are a lot of C-Like developers making more than python developers... I'm didn't mean Python jobs don't exist or pay the bills. Python is still a scripting language though. I have been reached out to for PowerShell developer jobs too. Python as your ONLY language was my point. It's a bit of a fad I feel, much like almost all things webdev (Angular, Bootstrap) they can be very good additional tools and skillsets buy a developer who only knows one of these has a very risk of writing themselves into a bad position when the fad passes. Additionally picking up scripting habits as development habits won't look great trying to switch careers to something more c-like.
HTML + CSS + JS ?
OK, I thought you meant pure Python.
I'd definitely use Kivy for making a Python game for Android - in my opinion it has a lot of advantages over pygame even on the desktop, but in particular directly and actively supports Android. [KivEnt](http://kivent.org/) is a Kivy game engine with more advanced game-targeted facilities, but starting with core Kivy is fine and probably an easier way to learn. Other alternatives include using PySDL2 directly (supported by Kivy's build tools), using pygame_sdl2 with RenPy's Android build tools (which are originally based on an old version of Kivy's python-for-android), or using something like PGS4A but I'm not sure if this is maintained any more and I think it always had some fairly big limitations. (Disclaimer: I am a Kivy developer and python-for-android maintainer).
Unless I misunderstand something, that's not what /u/plistig did. You just assign `__class__` on an instance, so the instance magically becomes a different class. The OP's code tries to assign a metaclass, is what it actually does. It says that `Y.__class__ = X` (ordinarily it's `type`). Except for some reason metaclasses are supposed to use a different machinery, so doing it this way works only half way. Also note that you can't actually say `Y.__class__ = X` (TypeError: `__class__` assignment only supported for heap types or ModuleType subclasses), and if you do it like the OP, `Y.__class__` still returns `type`. `Y.__dict__['__class__']` however is `__main__.X`. This part of Python internals is gnarly as hell.
God dammit! There is a library for that? I built that out for a project. I even googled and couldn't find a library 
This is often times a good design in larger apps, you're essentially decoupling your database representation from your api representation. It allows either/both to evolve independently (which is really important when you have to support apps on an old api version).
Are you planning to do anything concrete with the data, or are you only providing it for others to analyze? I'd love to see some kind of [plot of version adoption over time](http://i.stack.imgur.com/f7Kfh.jpg). Maybe I'll experiment with querying the tables later.
but what constitutes "the source code" If i rewrite it to behave somewhat differently, and be more generic, and change the variable names, is it the same "source code" or is it just the "source idea"?
I think the point of my question has been missed here. I'm rewriting the code from scratch to open source it. variable names changed, varying implemenation details. My question was not asking whether or not my employer owns its own source code. My question is rather more about what constitutes source code.
First of all, that is a different question: An abstract concept is not the same as an implementation. The actual work done (any line of code you have written) belongs to your employer (Copyright). Additionally, usually any concepts you came up during your time of employment (even when at home) are intellectual property of your employer, too. Only things that you have done in your spare time and that are intellectually independent from your work are truly yours. Depends on your work contract though. And IANAL from Germany, your law and contract may differ. The only real solution is to ask your employer to open source it under their name.
I think I've interviewed ten candidates in the last quarter and have been trying fizzbuzz (while making a joke about programming on a whiteboard). Only 1 sailed through it, a few took a couple of attempts and most of the rest couldn't do it at all. All had great resumes and lots of programming experience. We're fixing our phone screens. This is just sad. 
Is there any reason to use two if's in a row instead of if/elif/else?
Thats what i figured. Ive rewritten several tools after leaving a place. Theg paid you to do the work, but not the idea.
&gt;if I write a forloop, does my company own the concept of a forloop? Nope. &gt;at what point is something a repeatable solution that is not copyrightable? You'd have to ask a lawyer. &gt;What I wrote is a fairly simple library set of wrapper functions that dont incorporate any proprietary business logic. Surely a company doesnt own the concept of wrappers. Depends. The safe answer is to not open source it. They might have the basis for a lawsuit, they might not. Depends on what resources you used (company time, computers, etc) to create the wrappers.
it is.
Python proper cannot achieve parallelism, but there's nothing to stop it from calling routines in other languages that delegate to multiple cores or the GPU. The reason is the Global Interpreter Lock. The GIL Wiki page describes it concisely: In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython's memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.) https://wiki.python.org/moin/GlobalInterpreterLock Here is an in-depth discussion: http://python-notes.curiousefficiency.org/en/latest/python3/multicore_python.html
It's got to be a CPU fault, have a look at your events log for anything out of the ordinary.
Thanks, I will take a look at the events log. Is a CPU fault something that I can test specifically, and will it continue to occur unless I replace the CPU or something?
&gt; and don't looks EVERYWHERE Actually you didn't look anywhere at all. That's my problem with it. You're so incapable of helping yourself, I feel it to be completely ridiculous that you think others should help you.
Thanks! I read through the other docs and it sounds like a really cool project otherwise. Lots of best practices, batteries included. If I weren't so scared of the costs of GAE I'd be very inclined to try it :/
Bonus points for the guy at the bottom of the comment section.
I've never had a problem with the view being separate. This is simply validation into/out of the model, which is quite natural to put into the model itself. A `User` object should enforce its own invariants, not the view.
&gt;your opinion # \&gt;Factual observations on /u/Exmixx's behaviour \&gt;opinion Ok bro.
That sounds like I would be permitted to open source something with a different implementation.
I wondered about this too. I've written some codes for my use at work, but not work related and, mostly, not on work time. Actually, I have a ton of scripts that make my life easier (both in Python and Bash) and I wonder who owns it. Honestly, I am not worried since I don’t think anyone would care, but I do still wonder. (The way I view it, if someone wants to make money off my codes, then they have serious problems. I am not a Python pro. I use it as a tool)
Don't. Your _thoughts_ on employer time belong to your employer. If they paid you to think about it, it belongs to them. Your best bet is to hope someone else makes a similar solution, then contribute some to it, or give hints. Be careful with that too, though.
wot?
It's really hard to use the CPU to determine if something is wrong with the CPU. The way forward from here is deciphering the event logs, replacing the CPU will prove it either was or wasn't the CPU and it's probably not worth it until you gather more evidence.
My favorite is the part where it has a legend breaking down the meaning of the number of stars right below his results. A+++ would laugh at this guy again.
&gt; Therefore, nothing can override it unless you muck with sys.path manually. Which pyXML does and I have done in order to make pyInstaller work. `sys.path` supports editing. You can override packages in the standard library. People avoid it for a reason, but you most certainly can do it. Shoot, you can redefine addition of integers so `1+2=2` if you really want to and that's with a fresh unhacked version of Python.
He put some ASCII art in a comment and thought he was so funny he should post here, I guess? I don't get it.
I honestly wish I could help you, but I don't know the answer. However, you might have more luck over at /r/learnpython with these kinds of questions. Good luck!
Great stuff. Ty
I would also appreciate some feedback if you actually tried it. So if you have some extra time feel free to complete this [survey](http://goo.gl/forms/EJgpIHWfRfmMidr82). I'll send you a postcard from Denmark :)
PyQt has a difference licence structure than Qt though: either GPL or commercial (paid).
Yeah, there's a lot of old information out there so it tends to be missed, and the other methods people mention tend to work for simple use cases but rely on assumptions that don't hold for all models.
Nice series :) 
While it's not as hip as "Slack", #python on Freenode is an active place.
Disclaimer: Depends on your jurisdiction and contract. This is not a question of copyright but a question of intellectual property which effectively means the idea or solution you came up with (not the actual code or binaries). This will them come down to whether: - what your employer wrote into the contract - will your employer ever find out about this project - does your employer care about you creating the project - will they want to legally chase you over it If unsure, just ask your employer for permission (and get the result in writing on their letterhead).
How are those people getting interviews? I should get more interviews.
There's another package with the name `pymp` already. I thought a while on how to rename the package best, but all other relevant names were taken as well. So I decided to just use the alias...
It isn't impossible in principle, but there are no monitors around today that could display such a plot. The `datashader` plotting tool can plot stuff like that, but only by breaking up into pieces behind the scenes and computing what each pixel would be as a result. It would not show you anything useful from a uniform random sequence like a lottery.
The major caveat of using `fork` is that it is quite likely to cause UB if you ever create threads.
I think he deleted his comment, did I miss out on anything particularly entertaining?
That is an intentional feature, not a bug. Seriously. The intent is that you can change the class of an object on the fly to another cooperative class. (Obviously if you change it to some random class, things will break, so don't do that.)
TIFU by trying to prank elevator users with music, ended up playing porno audio in the male bathroom. /S
Sounds interesting, but the page really needs a demo or some screenshots.
The dictConfig, I think, is the missing link that makes `logging` so powerful and flexible (assuming you're using namespaced loggers like you're supposed to). Just connect it to a simple YAML config file, and all of a sudden you no longer need to be manually adding and removing prints everywhere in the course of your debugging, nor do you have to sift through thousands of lines of DEBUG output- just enable debug for the specific module you're interested in and you're golden.
That *should* be enough, but it may not be. If your employer believes (rightly or wrongly, justified or not) that you are costing them money and that there is even the tiniest chance that you have copied even a single line of their code, you could be in deep legal trouble. Even if you win and are vindicated, it will cost you tens of thousands in legal fees. Remember, you're not just trying to convince your boss *today* but his replacement tomorrow and their replacement next week. Look at how much trouble Google got into because of *~~twelve~~ [nine lines of code](https://majadhondt.wordpress.com/2012/05/16/googles-9-lines/)* out of the thousands and thousands of reimplemented from scratch code from their version of Java. Google has the money to fight this, do you? So you really, really need a legal waiver and/or copyright assignment from your employer. Otherwise your project will be legally toxic. (Rightly or wrongly doesn't enter into it: its the chilling effect of the threat of legal action I'm talking about, not whether you will win or not.)
No, it is an intentional feature, deliberately supported. You can't do it for builtins, because the C code makes too many assumptions about the layout of the class at the C level, but for classes written in Python it is perfectly safe. Obviously you cannot just use any two random classes, they have to be [designed to cooperate](http://code.activestate.com/recipes/68429-ring-buffer/). That example was selected by Python luminary Alex Martelli and his co-editor David Ascher for the Python Cookbook (O'Reilly Press), so it comes with impeccable credentials.
The reddit page? Or the GitHub front page? The GitHub repo has 2 screenshots, test scripts, and a test Jupyter notebook demo'ing the tool.
Done. Didn't know you could do that. Thanks for the tip!
So you don't have to host your plots on their servers anymore?
What? You want an algorithm to generate equilateral polygons given number of sides and side length? Or you have the coordinates and don't know how to translate them from the origin to the center of the screen? Or you can do all that but want to know how to render it? I have no idea what your question is.
Ah, thanks. This looks better: https://bpaste.net/show/0d763fd438ee
wait...how did you do the fancy formatting with pandas?
can you help me with something? 
thank you! can you help me with a quick question?
A contributor added Python 3 support, it is now merged into the main branch and on pip =)
Why go to the trouble of making an appropriately sized integer when you could just use a slice of the version tuple? I'm pretty sure `op(version, sys.version_info[:len(version)])` would work.
[ohai](http://i3.kym-cdn.com/photos/images/original/000/987/434/944.jpg)
Same here, I was always holding off on it, but once it was open sourced I was also sold.
&gt; PYTHON == 3.10 obviously won't work as expected, because that's equivalent to 3.1 no it is not. your library is broken
You create an ExcelWriter, pass that instead of a file name or handle to to_excel, and depending on the engine you're using you get access via the ExcelWriter to add formatting. 
This might be platform dependent. I think clipboards on X work by registering the program as the source of clipboard data, but don't actually transfer it until it's pasted.
Looking forward to read more!
There's a large community over in [#devchat](https://devchat.devolio.net/), come check it out!
Yeah. I Don't like his api at all. It's not well thought out
Why you cannot move to 2.7?
The cleanest solution here is definitely going to be to make a JS app. Your options are either to run python code on the backend, and have all interactions go through the server (which will be clunky and awkward), or to have the code run on the front-end and be written in JS. While you can use some sort of javascript/html transpiler (like /u/dddomodossola suggests) I wouldn't really recommend it if your goal is learning. The specific library you use is unlikely to prove a long-term useful skill, and the extra layer of abstraction is just going to limit what you can do cleanly and make it harder to understand what's actually going on.
Can you get away with using virtualenvs? That way whilst you have a different version of python from the system one, but it doesn't affect anything else.
The truth is if you are on GAE you have to do the GAE way.. there is no other way around it. If you are applying _"good practices"_ that are good for SQL databases on Datastore, then it's your fault to get the extra bills and expecting a different outcome. Most of the _horror_ stories are actually because people assume too much and skipping the documentation. Check this blog post to understand what could go wrong and when done right what are the benefits: http://bjk5.com/post/30813320623/what-traffic-from-60-minutes-looks-like
You can also try bootstrapping several SVMs, and parallelize training those. http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.BaggingRegressor.html
Thanks man. Turns out I was missing brackets on CONNECTION.cursor should have been CONNECTION.cursor() the raise gave me an error I could good. Thank you very much for your help
A list of security vulnerabilities in Python is here: https://www.cvedetails.com/vulnerability-list/vendor_id-10210/product_id-18230/version_id-92056/Python-Python-2.7.html However, you might have a lot more if you also use old library versions. As someone else said, it's very difficult to judge security risks without knowing how you use Python. If it's on a public facing web service, I'd probably be more worried than some script that only runs in an isolated environment.
Just give it a try :) Quickstart is there for that reason..
Using Anaconda python you can create a new environment and specify the python version as well as packages you'd like to install conda create -n "myPyQtenv" python=3.5 pyqt after that installs and links the packages you simply execute source activate myPyQtenv I'm 99% sure this will install Qt, PyQt, and all the necessary packages like SIP. 
Normally you would use a third table with all of your (this thing, that thing) pairs. Also, check out /r/sql and /r/learnpython
Technically you could (though you probably shouldn't) if you defined a delimiter and just inserted a bunch of items joined by the delimiter (e.g. a varchar column with `1,2,3` in it for your foreign keys). However this is considered bad practice for numerous reasons: 1. Query-ability is diminished (both from a searching for something and from the ability to execute a single intelligent query to get the item and the related items) 2. Referential Integrity is gone 3. Your code now needs to know something special about how to handle this and keeping it normalized is probably more difficult. There are some data base engines that allow array types, but none that I currently know of that support a foreign key in that array type (Postgres had it on their issue list, but I think it's been pushed to the side while they deal with other stuff). Sounds like you know the answer, a many-to-many sounds like what you want.
I think the biggest thing is to work on side projects in areas you may be interested. I've been considering switching from enterprise java to the python side of the world and everyone I meet says to get some projects up in python on Github (or equivalent service). All the while that gives you experience, portfolio, and confirmation you want to work in the area. You probably also want to learn some front end stuff (if you don't already know it) as many current jobs are in web-tech and expect you to be able to contribute in both the front and back end (at least in my area).
Thanks for the suggestion! Updated the source.
Definitely understood, but it's likely to only cause confusion for anyone picking up your project since that would be a fairly non-standard use (from what I understand of your desire) where m2m is pretty standard and the database can typically optimize your queries.
Well, SQLAlchemy still uses the same pattern, though it wraps around it a bit: http://docs.sqlalchemy.org/en/latest/orm/basic_relationships.html#many-to-many
Well, I dont think anyone will take it to continue but me, Its just simple study project mostly for my own practice. But thx, I guess I'll do it classic-way
the known "six" package already does that https://pythonhosted.org/six/#package-contents
Id say because the body of each if returns something, its sort of implied that if the first if fails, it'll try the second, etc. If we were to re-arrange it like this: def isinstance(inst, cls): obj_type_matches = None if type(inst) == cls: obj_type = True elif issubclass(inst.__class__, cls): obj_type = True else: obj_type = False return obj_type So these things are pretty much the same, except one is shorter (shorter = usually easier to think about and better). 
[Python has a built in unittest library](https://docs.python.org/3/library/unittest.html) that gives you a basic fixture framework and assertion tools. This library can be [extended by adding nose.](http://nose.readthedocs.io/en/latest/) Google yourself some "nosetests" tutorials. You can get a lot of testing done with a little code using that library alone. When you want to get even fancier with your testing, look into Python's unittest.mock, or Google's googlemock and googletest libraries.
Iv'e been in python developers for a while and is a great community. 1302 members as I write this. Join here: http://pythondevelopers.herokuapp.com/ There seems to be many of these. I wonder about the viability of combining some of these so the python slack community is not splintered as much.
I honestly didn't know it worked like that. I wouldn't have created this library if I knew it could compare tuples of different length, even in 2.6. I just assumed that didn't work. Well, mostly I created this to figure out tox actually. It's very straight forward to create unit tests for this kind of thing, so not all was lost.
Damn you're fast. I finished half the course and it's been out for just 2 days.
First off, apps like PyInstaller, py2exe, etc. do not "compile" Python code. They package a copy of the Python interpreter with the code in a single binary. The end result is no faster than what you'd get if you ran a Python app on its own. Packaging apps with those programs is done for the sake of convenience, not speed. There are ways to translate Python into C or C++, but they are not perfect either. I use Cython, which allows Python to be translated incrementally into C; you start with regular old Python code, and add type declarations and other syntax to it so that it can be compiled more efficiently. It's useful, but because of the way it's implemented, it's best used to speed up individual modules rather than entire applications. (You CAN use it in theory to compile an entire app, but a lot of the time it's not worth it, since only a small percentage of the code in a given program is typically responsible for performance issues.) Another app is Nuitka, which compiles Python into C++. It's a work in progress, though, and it doesn't yet perform much in the way of optimizations to speed things up.
the string '*' is not the problem, post the error you get also: /r/learnpython
It's no surprise that meson is faster than sh, and ninja is faster than make.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Got your PATH variable pointed at the scripts folder in python install dir? Also can you put your code on pastbin or something the formatting is making my soul die.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
nvm someone else helped me. thx anyway
What does “build" system refer to in this case?
didn't know of pastebin before. thanks. yes. on \Python27\Scripts
Meson, it looks like. From the website: &gt; Meson is an open source build system meant to be both extremely fast, and, even more importantly, as user friendly as possible. It's supposed to be an Autotools replacement. Looks like a pretty neat project. 
UnitTests's assert*() methods are really nice https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual Tried out NOSE2 a few weeks ago and thought this bit here - https://github.com/nose-devs/nose2/blob/master/nose2/tools/such.py#L34 was really clever allows you to use Nose/Nose2 and use UnitTests's assert methods like `helper.assertEqual('foo', 'bar')` which would raise a nice assertion exception message.
I've written so much Python in my life that I'd prefer to speak Python than English... but then I wouldn't be going for a junior role. I guess you're pretty inexperienced and they're right to assess what you know. I hope they will assess you relative to the specifications of the role, rather than dismissing you just because you're still getting into it.
It doesn't seem to handle unicode names at all. 
My opinion on coding interviews? Well, I wish I could get one. Every job listing I've found wants a BS in Computer Science or better before they'll even respond to your e-mail.
Are you in the US?
Apparently places like Google get a lot of applications from people who really can't code. The coding test proves I'm not a complete pretender, at least. My main gripe is that all the tests make the interview process really long.
yeah i feel you on that.. 
2.6 was finished in October 2013 with the release of 2.6.9. That's three releases after 2.6.6. You'd be using a version of Python with known bugs and vulnerabilities. 
I applied for a position, and after the face-to-face I had to do "just a quick coding test", which turned out to be a three hour test on codility with surprisingly tricky algorithm design questions. I got that position, but during the test I kept thinking what a huge waste of time this would be for me if they eventually went with someone else. I did consider saying "no" and looking at other positions. At least the face-to-face meeting was first. If the test was first I would definitely have looked elsewhere.
Dude what are your study habits for algos. I want to be able to pull out a win like that in the future. 
When I knew I'd be doing a codility test, I tried a few of their examples and then realised what kind of test it was going to be. This is important, because once you click "start" on the real test, you only have the alotted time and a counter starts counting down. So you can't learn how the site works during the test, since there's no time. So I did quite a few example tests to see how it worked, and I read about the experiences of other people. I did not read up about algorithms specifically. I'm a senior eng with many years of experience. The main thing is becoming comfortable with the testing environment. I've never done a whiteboard interview, but I'd guess this is much of what makes them hard.
The survey is not a survey of Python users but it seems like it's one on PyCharm users. I'm sure 75% of Python users probably don't do Python work for a company
For some reason these entry level jobs require 5 years of experience (not even joking, honestly, it's sad)
I wonder how [Shake](http://shakebuild.com/) compares in both speed and user-friendliness.
What kind of questions did you encounter? I've never interviewed for a Python job, but hope to do so in the near future.
Coolio. 
Shibby!
/r/learnpython
wow this is just like RTFM, but longer. thanks bud /s edit: I didn't mean this in a bad way lol "If you are about to ask a question, please consider r/learnpython. Homework-style questions will be removed, and you'll be encouraged to post there instead." I'm just retarded.
Great list. For anyone interested to get started in [complex system analysis](http://textbooks.opensuny.org/introduction-to-the-modeling-and-analysis-of-complex-systems/) , there is also this book.
Thank you for sharing!
**Defaulted to one day.** I will be messaging you on [**2016-05-27 06:36:09 UTC**](http://www.wolframalpha.com/input/?i=2016-05-27 06:36:09 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/4l3in7/nice_curation_of_19_free_ebooks_to_learn_python/d3k530q) [**11 OTHERS CLICKED THIS LINK**](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/4l3in7/nice_curation_of_19_free_ebooks_to_learn_python/d3k530q]%0A%0ARemindMe! 12 hrs) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! d3k53fd) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Commenting for later 
Due to the fact that there are a lot of noSQL databases, one usefull niche is the embedable databases in your own code. It well designed, engeniered, low dependencies database, which resembles the API of other huge independant databases would be un excellent idea. In those cases, speed is not required.
1. Post the full code, it's kinda hard to understand what's going on without context. 2. What exactly are you trying to achieve? This code is a mess of invisible assumptions and magic numbers. EDIT: After a bit of inspection it looks like what you're going for is concatenating each set of two lines together with a colon in between and a colon at the end? In that case you would need to change for i in xrange(54, len(instr), 48): holder.append('\t' + varstr + ' = '+ varstr +' + "'+instr[i:i+48]) str2 = '"\r\n'.join(holder) to for i in xrange(54, len(instr), 96): holder.append('\t' + varstr + ' = '+ varstr +' + "'+instr[i:i+48] + ': ' + varstr + ' = '+ varstr +' + "'+instr[i+48:i+96] + ':') str2 = '"\r\n'.join(holder) I can't try your code because you haven't supplied it in full, but this should get you close.
You've got a lot of options which vary in complexity and friendliness. tkinter is a member of the standard library and used by a lot of python devs. wxPython is another popular option. I've heard good things about kivy as well.
This is great news. Tackling numpy means tackling almost any library. I might try pyston on my django website. 
I've been on both sides of this dilemma, and I have no solution. The difference between an experienced and effective programmer, and an inexperienced, uninterested programmer is night and day. Most computing graduates never make it, and go on to work in related areas, like hardware provisioning, system administration, and running websites.
i think its also fitting that autotools just is worse on windows due to being posixy and not fitting winapi very well
/r/learnpython
Such an amazing, useful list! I'd like to read like 12 of these books !!!
That's what the save feature is for! 
I [wrote a blog post](http://takluyver.github.io/posts/so-you-want-to-write-a-desktop-app-in-python.html) about the options for building GUIs. It's a couple of years old now, but the landscape hasn't changed that much. The TLDR is: if you want a traditional desktop app (window, menus, buttons, and so on), Qt is the best bet. If you want something that looks more like a mobile app, try Kivy. Other options are described in the posts, and commenters have further suggestions.
&gt; any ecommerce website Ha. You need to adjust your expectations.
&gt; edit: I didn't mean this in a bad way lol Just so you're aware, the "/s" you used is supposed to indicate sarcasm. Sarcasm has to be meant "in a bad way" by definition: &gt; the use of irony to mock or convey contempt. 
Congratulations to the Pyston team! The numpy achievement is really impressive. I think it shows how harmful the C API really is here - pyston (with about 10 people on board, involved to some extent but likely more than one person full time) spent last 6 months trying to replicate an unfortunate and backwards part of C API, instead of spending it improving the performance
Full disclosure; I didn't read it all. How is this compared to Pypy? Better performance? Better compatibility?
I will be comparing this to Morepath in the future, for now [an English tutorial](http://jolla.readthedocs.io/zh/latest/tutorial/) would be preferred ;) Duo1xie4 peng2you3.
I guess I misunderstood that part, thanks
It's a nice list. I would suggest Automate... should be at the very top of the beginner section though.
PyPy can't run CPython C extensions, including numpy. This makes it useless for large segments of the python community. 
Why not try an interactive tutorial like e.g. http://pythontutor.com ?
The C API played a large part in Python's rise. Being able to integrate into larger programs, and utilise other libraries were killer features early on. Yes it may have some features which are limiting now, but you probably wouldn't be using python if it had been any different. To say the C API is "harmful" is ignoring history. 
The OP is extremely audacious to call these pirated ebooks "free".
Thanks! I've had a look. Indeed, I am doing a quite similar project i.e. in-process pure Python database except mine is async. All TinyDB can do can be done with my DB. Update: I mean no offence to the author of TinyDB. But what the hell algorithm he used in this DB? It is way 2 slow... It took me 244s to randomly write/read/del 5000 pieces of data. My DB took about 4s. 
I don't see anything wrong with the syntax.
Wow thank you
Cue IT crowd piracy ad
I think this should be mentioned here http://importpython.com/books/ Oh and another free resource that should be here is from William Chen of Quora http://www.wzchen.com/data-science-books/ All free and listed according to topic Edit : Added another resource :) 
I never understand why Fluent Python is omitted. It's a great book for going from Intermediate to Advanced.
It would help if you explained the rationale behind this project and provided a quick comparison with alternatives. This would help us figure out where it fits on the map.
GTFO. 
Not even original
Python isn't original either
Also checkout the new IPy notebooks that now include examples for using the code and some basic theory review. DISCLOSURE - I am one of the guys working on the notebooks.
_Any ecommerce site I choose!_
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
...but it is what it is. You can't go back and change it now. Even if you could, you may find that the design constraints at the time take you to the same place. Things have changed. Bemoaning the C API when it's been a key part of building what we have today just seems petty. PyPy is a remarkable feat, but it will always be hampered by the issues around the C API. Pyston have done the right thing by prioritising compatibility early on. 
Anyone know which one I should learn if I'm *not* new to programming, as I know Javascript and Java, but *am* knew to Python? Should I just start each book like halfway through?
Nice. I'll probably make a feature request where it can make charts directly from a tabular data structure like a pandas dataframe.
Just import the uuid built-in module and use that. https://docs.python.org/2/library/uuid.html
* Why do you need that for ? More precisely, do you really need to do it in python? * This is a *hard* problem, usually. Especially if the text in the PDF is just an image and not proper text (typically, a scan of an old book) * /r/learnpython
That book taught me to write python _idiomatically_. Without question the most important book I've read to date. Also, it really showcases why you would *want* to use at least 3.4 and preferably 3.5 
There is a [podcast episode](https://talkpython.fm/episodes/show/24/fluent-python) why nicely introduces the book, it's philosophy and has a couple of highlights.
/r/learnpython
But these aren't free :(
Notice some ebooks take you to the publishers websites and each one is traced to Amazon. I think this is a great effort for both users and publishers. I'm actually buying 2 books, since I enjoy reading physical book.
Man, it looks cool. However, is it possible to translate the comments in the source codes to English? I found it surprisingly distracting. =( Sorry. Anyway, if you need any help with this project, just drop a call on this subreddit. I am sure many of us will be willing to help. Personally, I will be interested.
oh, absolutely! even pypy supports C API a lot these days (we have ~200 tests failing for numpy), but the fact that it was useful once does not mean we should stick with it no matter what - there are decent alternatives (cffi) and we should somehow move forward with deprecating C API.
Thanks! It looks like I got the answers I needed anyway. I'll check out these solutions soon.
Tika is pretty good at what it does: https://github.com/chrismattmann/tika-python
Oh well.. :) Mind you that the book teaches you to write 3.4+ code, not 2.7 - this is a feature, not a bug ;) If you are reading so as to write your own programs, this is optimal. But if you are supposed to maintain some legacy python, you might want to start with an older book.
I'm a broke college student, I wouldn't pay for it anyways.
Try [Program Arcade Games with Python and Pygame](http://ProgramArcadeGames.com).
Thanks. Highly appreciated.
I agree, considering ebooks have a hard time getting the exposure. This curation is actually really good. I'm ordering one too. 
I realize now I didn't add all the info. I have managed to install pip properly as it shows up on the command prompt when I type pip. However when I go pip install -U pyside it works by using a cached version of pyside but has an error with python setup.py egg_info
Do your own homework /r/learnpython
How far does the difference extend? If I learn 3.4, would I be able to pick up 2.7 just by skimming through documentation?
any plans to collaborate with numba and pyjion?
I would say you can easily _read_ and understand py2.7 after reading the first few chapters. The problem would be writing your own code to be used with the 2.7 interpreter. The book uses many nice new features and may not inform you that they are strictly py3. Hence you could run in to a lot of syntax errors when you try to use the. (Primarily this pertains to argument unpacking) If you ever have to write 2 code, make sure to use the ``` from __future__ import (print_function, absolute_import, unicode_literals, for division) ``` __in the very first line__ That should reduce the number of syntax errors by backporting some py3 features.
Groovy. Thank you very much.
[removed]
[removed]
Thanks, that really clears thing up. On a side-note, I want to thank you and the other PyPy devs. I made a GameBoy emulator at the university, which is powered by PyPy. Using PyPy gave a 20x speed improvement. https://imgur.com/iMJ3v3o It's all on GitHub: https://github.com/Baekalfen/PyBoy
[removed]
You can't multitask?
**PyPDF2** is very good at manipulating pages (i.e. rotating, concatenating, etc.) but not so great at extracting content. It does have a primitive extractText() method, so you could check that out to see if it does what you need. I would recommend [PDFMiner](http://www.unixuser.org/~euske/python/pdfminer/) as a Python solution. It extracts text far more reliably, and has a lot of parameters you can use for formatting the text output. PDFBox (Java Library) is imo the best library for extracting text.
There's about a dozen of us going from The Motley Fool. We'll have a booth out there. It's my first PyCon, so I'm pretty psyched.
And to get 2.x behavior in a 3.x environment: import __builtins__ xrange = __builtins__.range def range(start, stop=None, step=1): if stop is None: return [i for i in __builtins__.range(start)] elif step is None: return [i for i in __builtins__.range(start,stop)] else: return [i for i in __builtins__.range(start,stop,step)] (Humorously, I just learned that they even renamed it from `__builtin__` to `__builtins__` when moving from 2.x to 3.x. I'd love to hear the PSF explanation of why that was necessary to make it "pythonic".)
Also can you think of a function that expects a list and can't work with a generator? I can't think of any. 
Did you get this resolved? I am looking at implementing a similar project and I am surprised at the lack of info on this.
What platform are you on, and what version of Python are you using?
Other than `numpy.exp` and its many other numeric functions?
No kidding. Great job, OP. You should put that script up on GitHub!
cffi has performance issues which unfortunately make it unsuitable for a lot of applications. (e.g. cryptography takes 70us for AES-GCM of a small ciphertext, whereas direct C bindings take 3us) When your target SLA is 100us, this makes a huge difference. Cython seems like a much more viable path forward. Especially since so many C libraries use function-like macros and #define constants as part of their API, which Cython can access but ctypes/cffi cannot.
I am blown away that this is Python. Great stuff.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Please don't tell people to kill themselves. It's not helpful.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
lol *sigh*
This happens when your project modals are "Pinned" and "Floating." Newer version of PyCharm disable pinned-mode when the modal isn't docked. You can read [the documentation](https://www.jetbrains.com/help/idea/2016.1/viewing-modes.html#ways_to_control), and try and figure it out. But, I think if update to the latest your problem will go away.
Sounds cool! Have you tried it with uvloop? (It's a drop-in replacement for the asyncio event loop) It could make it a LOT faster. I'll give it a go.
How come? Other than it using Python 2- newbie here.
Also, remember there's [`urllib.parse`](https://docs.python.org/3/library/urllib.parse.html#module-urllib.parse) in the standard library. It can break a URL into its pieces, which you can also use for verification. &gt;&gt;&gt; from urllib.parse import urlparse &gt;&gt;&gt; o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html') &gt;&gt;&gt; o ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html', params='', query='', fragment='') &gt;&gt;&gt; o.scheme 'http' &gt;&gt;&gt; o.port 80 &gt;&gt;&gt; o.geturl() 'http://www.cwi.nl:80/%7Eguido/Python.html'
@Veedrac is right. But sqrt(k) is faster when doing a lot of positional indexing because the index is expensive to maintain and update. I've posted details at http://www.grantjenks.com/docs/sortedcontainers/performance-scale.html Comments: https://www.reddit.com/r/Python/comments/4l7asq/sortedcontainers_performance_at_scale/
I recently published results scaling up to ten billion elements. SortedContainers scales extremely well: http://www.grantjenks.com/docs/sortedcontainers/performance-scale.html
Author here. Longish article but I wanted to make a fairly comprehensive reply to those who have doubted SortedContainers' ability to scale. If you jump down to the benchmarks section, you'll see the performance at 10,000,000,000 (ten billion) elements. I ended up paying $40 to rent a highmem instance on GCE for 1,011 minutes to run the benchmarks. For those curious, the memory high-water mark was ~128GB using PyPy. These results would be a lot more expensive to replicate with any other sorted collections library today.
Failing *any* amount of tests means that those of us who use numpy regularly are not likely to use PyPy. That and the lack of support for modern Python language features (not that Pyston supports this, either). That said, I appreciate the progress PyPy and similar projects have made. Hopefully in the near future there will be viable JIT options for those of us who want to use Python 3 and numpy.
This could be quite easy or extremely elaborate. For example with Supreme, early links are always posted so you could just drive the browser directly to that link and then have it check out for you. You'll also need to familiarize yourself with a bit of html. PM me if you need help. 
Read the whole thing, didn't understand a chunk, but very impressive. Are SortedContainers just a better way to implement integer-based Arrays?
Would that mean it's probably using Qt? Or can you do an html/js app using Kivy?
Wow, that's above and beyond the call of duty. Thanks for this :).
Define "really slow" in the context of the hardware and the code.
oh wow, i didn't know star trek was still popular! i'll have to message them and see what they think.
Kivy is a GUI/Rendering Toolkit for Python. It's based directly on OpenGL ES, so no Qt, JS or similar. But on second thought it could also have been written as a simple website. Until the author himself answers the question or publishes the code your guess is as good as mine
I have 8GB of RAM on my machine, and when I say really slow, it took 3 days to sort a 500MB csv file.
I assume you're going to want to buy stuff from websites? Google "Beautifulsoup" for a decent scraper and come back with more specific questions. GL!
With the music playing it made me feel as if you were on a ship, trying to communicate with base, knowing that your life support was failing but trying to receive contact.
This is brilliant! Hope to check the code sometime
Sort the csv file by a specific column And my understanding of the algorithm is to break the file into smaller chunks, sort each of those chunks individually, then compare the first line of two chunks, the 'greater' line goes into a new file/list, then compare the next line, etc. I thought I had implemented it correctly, but then again, my understanding of the algorithm could be wrong
Any results buddy?
Implementing that can be an interesting exercise, but if all you are looking for is getting the job done, maybe look at that SO thread : http://stackoverflow.com/questions/21271727/sorting-in-pandas-for-large-datasets
Okay, no problem. edit: Just to be clear, since you said 'solutions', plural, that example would be just one file, and you would use it from commandline like this:`python3 crawly.py engineer developer astronaut`. It would print out line by line the HTML page you would get by searching 'engineer developer astronaut'.
I know it sounds pedantic, but `json`, which also won't accept a `zip` object or other non-`list`.
&gt; [Pi camera has UPS and Wi-Fi so can be run for 8 hours completely wire free](http://catplanet.org/wp-content/uploads/2014/05/This-is-relevant-to-my-interests.jpg) May I pick your brain? I'm currently tossing around ideas for WiFi Mesh-networking a farm and including movable, stand-alone, battery-backed remote IP cameras for monitoring watering systems and the like. Have you come across any interesting links in your travels that you'd like to share? :)
It's hard to tell because of the application specific stuff going on, but I'm fairly confident you're doing an O(N\*lg(N)\*lg(N)) sort instead of a proper O(N*lg(N)) merge sort. There's no reason for sort() to be inside a loop of a merge sort. Essentially what I think you're doing instead of a proper merge you're jamming the lists together and sorting each time (or worse sorting each time you get a new value for O(N^2 lg(N)) D:). Remember that the merging bit is the most important part, and should be linear. Honestly not a great example of efficiency (one should do things in-place instead of just returning and appending and such and also have a better cut-off) but here's an abstract version. def mergesort(seq): if len(seq) &gt; 1: mid = len(seq)/2 return merge(mergesort(seq[:mid]), mergesort(seq[mid:])) return seq def merge(seq1, seq2): index1, index2 = 0, 0 max1, max2 = len(seq1), len(seq2) result = [] while True: if index1 == max1: return result + seq2[index2:] elif index2 == max2: return result + seq1[index1:] if seq1[index1] &lt;= seq2[index2]: result.append(seq1[index1]) index1 += 1 else: result.append(seq2[index2]) index2 += 1
I didnt get this resolved yet, so I just use this code for streaming audio from your micro, I cant get this to work with mp3 or any audio extension because I dont have any understanding about codec and etc,...
Great work, I hope one day to be able to make something just as interesting myself.
It's one of those things people who don't use python use.
How long did this take you to write? How much experience did you have with Python and JavaScript before this?
Exception are the way to handle errors in python. Everything and everyone will expect your code to manifest its issues this way. Whole standard library works this way, so once you use it for a while you should get it quickly. It may help you if you will think about exceptions as a message for someone else who runs your code. Will it be easy for them to figure out cause and fix if they will get default exception? Will they know where problem originated? Will the message be clear and actionable? If "things go bad" most likely python will raise relevant exception on its own (ie. indexoutof bounds or divbyzero).You should only wrap it in your own class if you can provide more descriptive name or need to add additional info (ie. ParsingError in line 12 at char 4: missing closing quote), or if you create a library and do not want to rely on accidental exceptions (because someone may rely on them, and then you have just frozen your implementation forever or rist breaking their code)
So I've updated the OP to clarify based on your comment. Here is a copy paste: To clarify, I am aware of the standard library modules such as configparaer, argparse, logging, io to stdout/stderr. What I am looking for is avoiding writing the same boiler plate for: adding common command line arguments, searching for config files in standard locations, updating for default vs site config, updating config with command line arguments, reporting errors, logging to standard locations (/var/log), standardising output format etc.
Why? It has libraries for pretty much anything. There's JavaScript too.
Check out the traitlets package. It doesn't have the best documentation, but it's what the jupyter/ipython/etc projects use for general application structure, including logging setup, command line arguments, json, and python config files. I've used it successfully a couple of times, and to be honest there's nothing stopping you from using it for pretty much any application. To explain why it doesn't have the best documentation, it used to just be part of ipython itself before the jupyter refactor. It got pulled out as a standalone library and should be treated as a relatively young package.
boo hiss
Listening...
The entire course is 5 classes. Programming for Everybody(Getting started with Python), Python Data Structures, Using Python to access web data, Using databases with Python, and the Capstone. I just finished the Web and I'm starting the databases class. I've been at it about 6 weeks spending a few hours each week.
The mis-aligned device status up lines are distracting me from the rest of the awesomeness. How have you not included pad-left in your work? ;)
Very impressive!
Could you PM me I have questions to get started. I am in the same boat as this fellow
Not OP, but you can use MAXS. Main app: https://f-droid.org/repository/browse/?fdid=org.projectmaxs.main Module to allow location: https://f-droid.org/repository/browse/?fdid=org.projectmaxs.module.locationfine Communication is done via XMPP. Send a text command, receive a response.
At work, we had a project that required extracting the text of hundreds of pdfs, with the endgoal of making xml in a very strict format. (Librarians are sadists.) We needed to parse whether that text was inside one section or the other as well as reading tables &amp; getting meaningful information. The best tool for us was [ScraperWiki](https://scraperwiki.com/). Scraperwiki is python2, unfortunately. You can see our code at [pdfscraper github](https://github.com/lsulibraries/pdfscraper). Scraperwiki is not geared toward pdf scraping, but it's really good at it.
I think what he means is that, despite Python's capability, it's a language that many people (mistakenly) assume is limiting or weak in some way, compared to "serious" languages. 
&gt; A for loop knows to stop when it's iterator raises StopIteration. I think this is a flaw in Python. It is intuitive in my opinion that calling `next()` on an empty sequence will break out of a for loop. 
www.Openmesh.com is a good start for low cost mesh networking equipment. Cloud monitoring of your meshing included. A better option may be a directional wireless network (ubiquity radios are popular low cost options). Finally low-cost LTE gateways may suffice if the camera have local storage (not streaming video 24/7).
You're right, I edited my answer. Better?
Ummmm that's AWESOME. I'm just starting to teach myself Python now. I hope one day I can do awesome shit like this
Really looking forward to seeing the code for this. Any idea on a time table for that? No rush, just curious.
You can use the save functionality that is built into reddit btw
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I for one am intrested in how you could shoehorn Django of Flask into this interface :) Maybe you can make it apply Zawinski's Law, and grow till the point that it can read email's sent to it. All jokes aside, great work.
There's a lot of confusion in this thread because [merge sort](https://en.wikipedia.org/wiki/Merge_sort) is the name of a standard algorithm, but you seem to be trying to merge files, which is completely unrelated. My guess as to why it's so slow is because of all of the file operations. If you do all of the merging in memory and only write the final result to a file, it should be much faster.
Weird. It works perfectly fine in the browser. Added spaces on both sides of a link. Hope it will help.
https://github.com/boxed/CMi
Yes very good. The only time there are issues is when I'm uploading an album via ftp to the pi. For some reason it disconnects all other tcp connections. And for some reason the tablets keep loosing their WiFi connection. My guess is because they are £35 tablets they are just cheap rubbish! Bit because it actually a we page you can view it on any device. 
Thanks a lot! I am somewhat new to Python and Data Science as a whole, so I can't speak to the content just yet, but the videos all look great. I'm excited for the opportunity. Thanks for the chance to do it for free! 
Well I've messaged them. Not heard anything back yet. 
Actually that is one of my future modifications, it's going to connect into our diaries and tell me what I have on for the day while I have my coffee in the morning. 
`choose` is different from `filter` because it returns a single value rather than a generator. I was under the impression that comprehensions were preferred to map and filter, although perhaps you're right that `filter` is better if you're using a functional style. This only works in Python 3, which shouldn't be a concern but unfortunately is. def choose(*args, key): return next(filter(key, args)) Your solution suffers from the initial problem, however. If `get` or `getattr` returns a falsey value, you'll get `last_resort`. I've never contributed to a large code base, so I admit non-expertise in normal Python style. Personally, I think my style (I'd call it "functional" rather than "meta-programming") is expressive and fast to write. But if it's non-standard, then it will be hard to read and therefore not good. Perhaps I'd be more at home in a team writing OCaml or F#.
Thanks, I'm glad you like it. Ok to answer your questions... I used apache because its something I'm familiar with. No reason why I can't use something else for future versions. Never heard of WSGI but I'm interested to find out more about it. I think it's important to understand that I didn't really set out to get this far. The first thing I did was have a single light bulb and I sent a message to it to turn on then off. Then I was hooked to see what else I could do. Through a lot of Google searching and plain old determination I've ended up here! So there are a lot of things I could do better. Like not use iframes for example. Thanks for your suggestion though. I'll definitely keep them in mind for future releasable versions of my system. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/linux4developers] [Home Automation with Python and a Raspberry Pi a nice DIY project](https://np.reddit.com/r/linux4developers/comments/4l9vmt/home_automation_with_python_and_a_raspberry_pi_a/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I started it in Feb ths year so about 4 months of committing about 3 hours a day on average. I know zero javascript. They are all copy and paste bodge jobs from the interwebs.
Ah good idea! Do you know how long I've spent making sure there are just the right amount of dots!! 
Thanks! 
No reason why you couldn't. Just don't be afraid to ask for help. 
The link gave a "domain name expired" message
/r/learnpython
'no one needs numpy, PyPy will be so fast you can do all your numeric computation with us'
sure. but it does work for a lot of pure-numpy programs (since scipy does not compile). IMO lack of matplotlib/scipy is a much much bigger deal than lack of pickling of numpy arrays.
&gt; Also, the moments of switching yeah, switching happens, which incurs a cost similar to thread switching, because green threads are just a re-implementation of threads, they need to unload the context of the old green thread and then load the context of the new green thread, for every switch
&gt; It's nice to know your view. Do share it with your friends and family 
Beam it up! 
My first PyCon too!
Guido provide the answer himself here : http://neopythonic.blogspot.fr/2008/10/sorting-million-32-bit-integers-in-2mb.html The whole idea is: - read 10000 items, sort them using sorted(key=func), save them in a file; - open() all the files, pass them to heaq.merge, and iterate on that and save it on the final file. You can use the same algo, but: - remove array.array. - create a proper key function for sorted. - use generators as much as you can. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Do you mean input() ?
Examples: Instgram, Pinterest, oh and Reddit :)
idgafos
Machine Learning - look at tensorflow. Step one would be to train a model to recognise product pages. 
Excellent work number one! Now, remove your trousers and report to my ready room... immediately!
You already have the traits package from enthought on there, which traitlets drew inspiration from, so you sort of had it already
well there is an offer!
Picard out. :-)
If you have the time, you could always use the [Python/C API](https://docs.python.org/3/c-api/index.html). It's a bit too repetitive, but not hard to understand, but it also requires that you have a proper C/C++ API to access it (I had to deal with a C class with an embedded logger, which was a mess and hard to split the two). If speed isn't a concern, you can always use [ctypes](https://docs.python.org/3/library/ctypes.html?highlight=ctypes#module-ctypes), but be aware that it is *really* slower than the Python/C API. I'm currently using this, but the application is not time constrained, so it can take whatever time it takes to complete. Also, there is [Cython](http://docs.cython.org/src/tutorial/external.html), but I never used it.
Yeah, but how will everyone else know that they saved it?
FYI, you replied to yourself instead of other people's comments multiple times.
C *or* C++. It depends.
Maybe try cppimport? https://github.com/tbenthompson/cppimport
For C cffi. For C++ Cython is an option.
I see you.
What are your suggestions about SWIG? It came up a lot in search. Also, the library would be pre-existing one, just information about APIs.
it's web page using a full screen browser with python doing all the clever stuff in the backend.
yeah... stupid reddit app. i'm not good with these computer things.
This made my day 
thanks 
No, but Excel is what your users *want*. Remy's Law of Requirements Gathering: no matter what the actual requirements document says, what your users really want is for you to implement Excel for them. I've re-written Excel dozens of times in my career.
i'm glad you like it. i've spent a lot of time on it.
Thanks, I'll look into it. Always good to learn more of the tools. 
Since I discovered pandas I find myself using it in some way for nearly everything analytical that I do. Having python in the mix also means that you have a huge array of tools to act as 'the glue', and can easily build all encompassing scripts for processes that touch on many different aspects - such as mixed analysis with SQL, pandas, and dropping the result into XLSX for the end user.
O, I didn't program the actual source code (Everyone in my class got the same bit of source code to start with). The tutorial that we used to learn Bayes and implement it is http://machinelearningmastery.com/naive-bayes-classifier-scratch-python/ If you want to do something similar, you need a csv file (easily made with excel and saved as a csv file). You also need to change some of the output code. Good luck! 
For simple calculations there is no reason to use SQL. When you start doing moderately complex stuff it might come in handy if your data easily maps into SQL. Generally people say "big data" when it's become to cumbersome for them to do with their understanding of the tech, often times this is from a lack of understanding of how to code properly. Case and point I helped a user who was beating up our cluster with a large job related to twitter. Turns out he was doing a simple frequency count very badly. Hundred of MB/second of writes because he was writing out the whole map after every read and was planning on merging them later. I pointed out his mistake and took his 24 day job over dozens of cores down to 5 minutes on 1 slow core. It was in python and the largest improvement would have just been un-indenting the write one tab stop.
&gt; **But my data is more than 5TB!** &gt; Your life now sucks - you are stuck with Hadoop. In the context of the whole article it makes more sense.. He goes through ways of using SQL and Python for implementations under a TB, so I think he's saying you are only left with Hadoop.
Author is pretty full of himself honestly and if he were a real Hadoop system architect he probably wouldn't have acted that way or thought of using map reduce. Going to try to make an analogy here: The people call him to a shooting range asking if he can use some of the guns available to shoot at the target to prove that the proposed system would work. He then proceeds to grab a crossbow that isn't a gun and that they aren't interested in and says "there I did it! You silly people wanted me to use a gun but I did it with a crossbow, your ideas about shooting targets are silly!" Then they are left upset because they asked him to use a gun. He then says fine and takes out the largest, most cumbersome gun there, a bazooka (map reduce) and blasts the target away. He then says, "see that? That is your only solution, and look how stupid that was, do you really want to do that? It is a mess!" This attitude of being anti Hadoop is so annoying. Okay, yes, not everyone has big data but Hadoop is an ecosystem with many excellent things you can add to it. Set it up then put impala on and it will probably handle exactly the way they want. In 5 years when they have more data the system will be fine. Also I'm positive that corporation didn't have 600mb of data? Maybe it was just one set of something.. Anyway rant over.
&gt; The next question they asked me. "**Could you use Hadoop** to do a simple group by and sum?" Of course I could, and I just told them I needed to see an example of the file format. &gt; They handed me a flash drive with all 600MB of their data on it (not a sample, everything). For reasons I can't understand, they were unhappy when **my solution involved pandas.read_csv rather than Hadoop**. Their goal with the question was to assess his ability to do basic Hadoop, in other words a FizzBuzz. They know the task can be accomplished with other techniques. The author sounds like one of those people who answers every StackOverflow question with "this sounds like an XY problem, let me tell you what you are really thinking".
The largest coherent dataset I ever had to process through a coded solution was 400gb and was 22,000 files. I just hit it with Python and PostGres. It didn't occur to me that anyone would even consider THAT to be 'big data'. I tend to think of big data as data that is 500GB+ AFTER being pulled into a database and that requires permanent residence in the database. Am I wrong? 
I remember in my last job I said I'd need to use python for something, and this VP went fucking nuts. She was like "you are always trying to show off, and make things more complicated, your boss should reign in your bullshit, you could easily do this in excel, you arent as smart as you think you are, what we need to do isnt that complicated" I looked at her for a minute, said "i agree its super simple, but its 1.2 million rows, so it wont open in excel. We an use sql if that will make you feel better, but I have the script to do that task already written in python because its a repeatable task I knew we'd have to do" And that ladies and gentlemen is when I learned you can be 100% correct and still be wrong.
Inventory management software Contact management software Scheduling software Accounting software All excel.
The point is just because someone wants you to accomplish a goal in a particular way it doesn't mean that way is the best way. The author is using their own experience with various problem solving methods to realize that when a client asks you to do something to a 600MB file you don't need to jump to Hadoop just because the client thinks they have "Big Data" and have heard about Hadoop being the latest and greatest. The author was pretty clear that the 600MB was not a sample, it was the entire thing. It's analogous to the often referenced difference between the US and USSR space programs: The US spent millions trying to build a pen that worked in space while the Soviets used a pencil. Maybe you should try the pencil first.
Any recommendations for an easy way to rewrite Excel? So far I've rewritten Excel four times in my current job (inventory managment, employee timesheets, booking hardware resources, and a dinner ordering thing). But I'm not a web developer and just ended up using some vanilla mysql with PHP or Python.
Maybe it's frowned upon but there are cracked torrents of SPSS itself that you can find. Though you're not kidding when you call PSPP a clone. I should look into it.
[Relevant XKCD] (https://xkcd.com/1667) 
[Image](http://imgs.xkcd.com/comics/algorithms.png) [Mobile](https://m.xkcd.com/1667/) **Title:** Algorithms **Title-text:** There was a schism in 2007, when a sect advocating OpenOffice created a fork of Sunday\.xlsx and maintained it independently for several months\. The efforts to reconcile the conflicting schedules led to the reinvention, within the cells of the spreadsheet, of modern version control\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1667#Explanation) **Stats:** This comic has been referenced 17 times, representing 0.0151% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d3lvzz9)
Given the price of RAM, just buying more might be a cost saver 
Google Sheets in an iframe.
From a technology standpoint, it doesn't really matter. The key is to focus on the *data*, and not try and pin the customer down too hard on the *verbs*. I actually had one project for managing invoices that started as, "Here's the series of screens we need, and the workflow we want to implement," and after that was done, ended up as, "We need a screen that lets us edit ALL of the invoices at once, and looks like a spreadsheet."
Thanks for that link; that's a better write up than I'd seen before!
Thanks for the brain-food. Is your stuff off-the-shelf/commercial or home-grown? What flavor of node-centric concerns do you encounter? Flaky hardware / software? Comms difficulties? Everything here will pretty much stay on-Mesh with *maybe* notifications or the occasional jpg going off-Mesh (limited Internet here.) OpenWRT looks like the easier roll but locks you into certain limited hardware and thus capabilities. Leaning towards the RasPi to keep my, shall we say, "pi in the sky" options open, like motion detection, mini-weather stations, etc. :) Currently tumbling around options like Babel, BATMAN, BMX, OLSR, 802.11s, whatev. Still in the beginning stages, trying to make sense of it all. :) This is non-commercial and largely for my own hacking edification. I'm the bit-head in the family and the farmer dropped in conversation that he'd like to see 1) Internet extended to the back building and 2) maybe remote cams to visually monitor that the irrigation systems are doing their job/wildlife, to help avoid crop loss, etc. :D
yeah as u/synnaxian points out that stupid factoid about the us using a pen and the russians using a pencil is a dated internet rumor that isn't true. well, you're inferring that from the article. he doesn't exactly say that. they just ask him if he can solve a problem with hadoop and he doesn't. and a company that has any IT department and isn't a mom and pop shop from 20 years ago is going to have more than 600 mb of data. honestly, there is going to be more than 1 gig of data in the entire company. but you missed what i was saying so it doesn't really matter. it is just so fun and easy to "be different" and say NO! to big data because my data isn't that much! well if you listened to what i said and evaluated hadoop as an ecosystem and not just HDFS and map reduce then you would have had a better time
When people ask really basic questions on /r/fortran, half of the time it's because they're just learning the basics of Fortran so they can work on some big simulation code, but the other half of the time they're actually going to use Fortran for something that could be done in two lines of Python with numpy. So it's always worth asking for the context and why they're asking this question exactly.
Pandas 
&gt; data that is 500GB+ AFTER being pulled into a database You're still thinking about a definite set of data. Consider data can be indefinite, as in a constant stream.
I agree, that was not what I originally asked. Thanks for sticking with my winding train of thought. And thanks for offering advice to both my original and my subsequently refined question. You, and the others in this thread, have been a great help.
128 MB cache! I remember when it was novel to have a track buffer...
Thanks, thats an excellent point, and a great supporting example.
I am really hoping we end up purchasing JasperReports to handle this madness. Create a domain over my data source, let the managers at it - done.
I just had flashbacks to a DBA telling me a table with 10 million rows in it was too big....on a database that was under 10GB in total size. Guess my 80GB PostgreSQL database is "big data"...
Django forms are awesome. Can't get much easier than that really. It's incredibly easy to implement. Toss in Class Based Views (takes a bit more time to understand) you can have a functioning feature incredibly fast. Just implement a few views, ListView, CreateView, UpdateView, DetailView and DeleteView. You're views pretty much just define the model and many times you can skip making a form and just define what fields. I'm a huge fan of CCBV in django for this reason alone. Though it took me a bit to figure out how to leverage them appropriately and then also to grow from the basic usage to complex usage. If you're a django developer, give it a try. They're dope.
Especially if you are looking at managing larger data sets regularly. 32GB of ECC RAM for my little ML10 at home cost me a whopping $200, for regular desktop usage non-ECC DDR3 at the same capacity is $130. Memory is cheap, max it out, there's almost no reason not to.
Hmm, that's odd. I reached out to the owner to see if everything's alright. The next best for background might be the SF Python Meetup Lightning Talk I did during last year's holiday party: http://www.grantjenks.com/docs/sortedcontainers/sf-python-2015-lightning-talk.html
The author posts on HN as "yummyfajitas" and: &gt; one of those people who answers every StackOverflow question with "this sounds like an XY problem, let me tell you what you are really thinking would be a significant improvement over his actual posts.
Yeah I kept using php because I had started using it long ago when it was en vogue and knew it well. I finally reached the "time to move on" point, though. I had all the pieces but had yet to make the jump to put it together in a framework: I was using python/pandas for data analysis and cron jobs to update a database all on a digital ocean account but was still using a mix of jupyter notebooks for the data workflow and php for the visualizations. I had started with flask but the django "everything is available out of the box" to just start working is great for my needs.
Clearly not. He makes his point clear: - hadoop is great when you need scaling; - most data set are not big enough to justify. What's complicated about that ?
I'd say that whether data is streaming is a distinct idea from whether it is "big". You could have any combination of big/small and streaming/fixed.
Yes, but I was making a joke.
Bah—what users want is a spreadsheet, since it's a pretty ideal form of data input, and Excel is just the most famous spreadsheet program.
Cython currently is the best one!
The guy is clueless. SQL scales just fine, and whats with the 5TB cutoff? I have worked with datasets in the hundreds of TBs stored in a single instance of postgres. If it stumbles there are plenty of distributed SQL options.
I usually look at it as "The data won't fit in memory on a single system." You can get servers with 2TB of RAM these days.
No, that's not how it works. The exception handling in a for loop happens outside of the block. If you do for item in [1,2,3]: next(iter([])) The `StopIteration` raised by `next(iter([]))` will **not** be caught by the for loop. The for loop only checks for `StopIteration`s raised when trying to get `item`.
&gt; \&gt;\&gt;\&gt; server.getById('$3') ... &gt; \&gt;\&gt;\&gt; session.kill_window("ha in") `&gt;:(`
SPSS is certainly a good tool, but I find R/RStudio to be the go-to analytics tool for people that already have a programming background. YMMV
I think you're reading a lot into an anecdote told in a couple of sentences as the introduction to a blog post. There's not enough information to judge how he really behaved in the interview, so criticising him on that is pretty much guesswork.
Agreed. After working in aster/netezza, life becomes a breeze.
Sounds to me like management wanted to use a buzzword technology they recently heard about instead of a reasonable solution. Using Hadoop to manage 600 MB is laughably unnecessary.
Great, i was looking for something like this recently. I found feedparser, which worked out nicely. I'll deffo give this a try. Cheers, 
I forgot the link: http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html
It really depends on what you're doing - there are a lot of things python can do that won't be able to translate so you may need to use a web framework like http://webpy.org/ , if its a fairly simple program then it should be able to be translated.
/u/ilikebigsandwiches is correct. Also, for getting code to show up correctly on a post, prefix with four spaces. code code code code code code code code
Correct. Bcrypt uses a different salt for each password or each time, so two users with same password have a different hash. I suspect the Security_password_salt is a 'cost' setting for how much entropy to spend and how many iterations to run generating the salt for each user. 
Looked it up. This functions as a second salt. One is random per call to bcrypt, and this second one is this one. They get combined in some manner. 
Sounds like you didn't have much support if you needed it anyways. Good on you for GTFO'ing.
This article is also 3 years old. 3 years in big data is like going from the stone age to modern times.
May be this will help: name = raw_input("Enter file:") if len(name) &lt; 1 : name = "mbox-short.txt" handle = open(name) nameDict = dict() for line in handle: line = line.rstrip() if not line.startswith('From '): continue words = line.split() email = words[1] if email not in nameDict: nameDict[email] = 1 else: nameDict[email] += 1 maxemailsfrom = max(nameDict, key = lambda x : nameDict[x]) print maxemailsfrom + " " + str(nameDict[maxemailsfrom]) **Edit**: Code without lambda function: name = raw_input("Enter file:") if len(name) &lt; 1 : name = "mbox-short.txt" handle = open(name) nameDict = dict() for line in handle: line = line.rstrip() if not line.startswith('From '): continue words = line.split() email = words[1] if email not in nameDict: nameDict[email] = 1 else: nameDict[email] += 1 maxEmailCount = 0 emailWithMaxCount = 'None' for email in nameDict.keys(): if nameDict[email] &gt; maxEmailCount: emailWithMaxCount = email maxEmailCount = nameDict[email] print emailWithMaxCount + " " + str(maxEmailCount)
It's great if they do that, but preferably I want both answers. Sometimes it's an XY problem, sometimes it's actually what it is. Maybe I really do want to base64 encode JSON inside a string in a JSON dict. Maybe that leads to persistent XSS. Maybe it's proof of a flaw in some app, improper sanitization. IMO, that's great if you think you know what's really going on and you want to tell me a better way, but you could be wrong and there could very good reasons to do something strange. You might think you have the big picture, maybe you do 9 times out of 10, but consider giving the answer to what was asked if you know it. What really bugged me one time is a googled something like that and ran into a stack overflow answer that solved the XY problem. The user answered something along the lines that they were right in their assumption, they'll do it the right way instead. But I still was left in the dark because the answer doesn't answer the original question, which I still needed to know. You're helping build a database of answers to technical questions... at least one answer should answer it directly.
Can you give an example of the input and what you expect as the output? 
Yeah he's just saying Hadoop is a good tool for certain tasks, but that doesn't mean those tasks are fun. A shovel is a fine tool for digging ditches, but if I find myself digging ditches I'm not going to like it just because I have the right tool. 
You could still use cffi if you control the C++ API and wrap things in `extern C` blocks, I would think. I used to do this with `ctypes`.
Can you see where the commands are pointing to? which pip which pip3 which python which python3 Maybe there's something wrong with the $PATH 
So /u/cutebabli that helped taking out that second loop my current output looks as so: louis@media.berkeley.edu 3 cwen@iupui.edu 5 rjlowe@iupui.edu 2 gsilver@umich.edu 3 david.horwitz@uct.ac.za 4 zqian@umich.edu 4 stephen.marquard@uct.ac.za 2 now I am trying now to create a loop to figure out which of these contain the highest key value, which is 5 which is also the correct output: cwen@iupui.edu 5 
There was an article on /r/Bash where most people who think they need Hadoop for their 'Big Data' could actually write a simple Bash script. Until you get up to the multiple TB range you don't really need anything more. Python is easier to work with though.
&gt; Their goal with the question was to assess his ability to do basic Hadoop, in other words a FizzBuzz. They know the task can be accomplished with other techniques. I don't see anything in the article that indicates that this is a job interview. until I saw your comment I had assumed that this was an actual project, and that the other party simply assumed that Hadoop was the way to go. If that's the case, then the results are what is important.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
i'm in the process of doing it right now! will have to bare with me!!
Sorry, don't use Reddit very regularly, but yes I understood it for the most part. I haven't even finished reading the one Python book I'm reading right now, though. I've learned quite a bit from just reading some of Dave Kennedy's code because he typically comments very well.
I mean, technically too big for excel is a subset of big data, but nobody's gonna read this comment anyway.
wx
Links?
I remember how much trouble it was when the badgers were misconfigured and you had to go and hire more from the zoo, just to get an approximation of binary badger shuffle patterns.
&gt; That's the farthest I could see going with it... Apparently, you've never been asked to hookup MS Access via ODBC to an existing datastore only to use Excel to view the dataset from Access.
Thanks for responding. I was genuinely interested. I have just started to train my first machine translation system. I want to be able to process as many words as possible in the future.
He can't understand why they were unhappy in an interview that a seemingly qualified candidate demonstrated his inability to follow simple directions and requirements? 600MB of the data may just been a completely representative sample from a particular period. Why would would they give the author, presumably interviewing for a job, the whole dataset? TL;DR: the author of the blog post sounds like he can't follow directions, and would be a nightmare to work with every day.
This is awesome. Thank you so much! 
Really looking forward to this. It's my first time, should be good!
Not sure how class based views are implemented in Django but if it's anything like Flask's class based views then I second this recommendation.
I'm backend and just don't have the time to learn much front-end, so I bolt on bootstrap to pretty good success. My users think I'm brilliant, since our .net 2.0 crm is the most god awful piece of shit imaginable...
Spreadsheets are god in the business world. Almost every app I've written is for the sole purpose of consuming or generating spreadsheets.
Nice article. One thing it glosses over, though is that it's not just the size of the dataset that matters... it's the complexity of the calculation you're doing. Hadoop may still not be the right tool, mind you. But SQL probably isn't either. 
I know your pain. You aren't alone...
There are no brakes on the hype train. 
You should rewrite the loop so that things are done in the proper order. You need to find a value for y before testing it. while True: y = random.randint(0, 50) if fractions.gcd(y, 100) == 1: break 
It is a bit of a problem, as I don't have a broad enough knowledge of the capabilities of Python to have any ideas on what to make. I followed the Code Academy class for a while, but after a bout 9 hours in that, it got a little redundant, so I bought a book. The only things I've written myself are a slightly altered version of the battleship game that you create in code academy and my own calculator that I've created. I wanted to expand my calculator to have more functions and options to it, but school work took precedence over my own personal learning. I was also going to write a subnet calculator to both apply my understanding of subnetting and python. I had a brief plan written down, but I'd have to find it. I'm a Cyber Security student, so I've also thrown together a few buffer overflow scripts from combining stuff I learned in class and examples. What I really want to get into is creating some security tools of my own, but I haven't had any ideas that aren't already done. Once I get more knowledge on the capabilities, I'm sure more ideas will come to me.
Also worth mentioning that in py2 you can reassign True and False and in py3 these are unchangeable. Always a fun thing to do to unsuspecting Py2 programs.
maybe If you got good
In case you're curious, this is by far my favorite site for Class Based Views for django. http://ccbv.co.uk Is there something similar for flask?
About 60% of my working hours are spent writing scripts that ingest and un-wreck people's spreadsheets so I can then do stuff with them. A different one for every single spreadsheet, because no one formats their stuff vaguely the same. I've also written scripts that suck up a couple spreadsheets, do a bunch of pivots and calculations, and spit out a new spreadsheet. My dedication to not writing Excel macros is strong.
I will do whatever is necessary to not write excel (or access) macros. Dear God, I hate them.
If its so vanilla why not just use flask instead of bloated django?
I am. I flew all the way to Brazil for this so its easy to say I've been looking forward to this for a while. Although I have to say I'm quite nervous, I have no idea what to expect and I signed up for the tutorials which hopefully I am prepared for. But still, I have a fear I might feel out of touch with everyone working with Python and etc. Still I'm very hopeful it will be tons of fun.
What was the lesson?
Or this: [300TB CERN](http://cms.web.cern.ch/news/cms-releases-new-batch-research-data-lhc)
Can confirm. Modded the hell out of django-admin for the Salvation Army for my senior project.
Yes, awesome! Thanks for sharing. 
The bit about "for-loop variables and the global namespace leak" is poorly worded. As mentioned in the quoted passage, the variables were leaked into the *surrounding scope*, which may or may not be the global namespace (and usually won't be). Additionally, this change has nothing to do with "for-loop" variables - proper for-loops have not changed and do not have their own scope.
Maybe not the most useful, but definitely the most used...I use this dozens of times every single day: https://github.com/justinkinney/sshuttle Edit: man, I need to clean this thing up a bit! It's amazing the things you notice about code you wrote a year ago.
interesting. can you tell me more about your project?
I remember looking into something similar that had to do with looking for a vulnerability in some app. It wasn't base64 encoded JSON, something to do with XML and some user input that goes into it I think. It seemed like a good example. If you were base64 encoding a JSON document inside a key/value pair in a JSON document, you probably are doing something wrong where you should just have that be a dictionary inside the original JSON document and preserve the structure, or you don't know how to encode quotes in a JSON string or something. It sounds like an obvious XY problem, sounds like you're doing something wrong from the start. But maybe there are still cases where it's not a hack to get around something you don't know how to solve. For example, maybe a web application takes a JSON POST request and stores values of it, then renders a user profile based on the values. Maybe you noticed you POSTed this: {"userProfile": "eyJ1c2VybmFtZSI6ICJ1c2VybmFtZSIsICJuYW1lIjogIm5hbWUifQ==", ...} You noticed that decoded to: `{"username": "username", "name": "name"}` Maybe the server verifies it's actually base64 encoded JSON first, and it's rendered directly into javascript after: userProfile = JSON.parse(atob('{{userProfile}}')); name = userProfile.name; if (userProfile.debug) { eval(userProfile.debug); } You could base64 encode `{"username": "username", "name": "name", "debug": "alert(/XSS/)"}` and inject code that way. Of course, it'd probably be something more complicated without an eval, where that debug value trickles down the code until it's parsed and maybe rendered into a new area in a certain way that could be vulnerable. There's stuff like that that just doesn't get answered directly in stack overflow because people automatically think you're asking the wrong question. I just wish people would answer with, "You're probably doing something wrong, but here's out to do it: ... Please be specific about why you ran into this problem, because you probably *should* be doing it this way: ..." 
TIL Seaborn. Thank you.
&gt; which means she couldn't bullshit her way through your solutions for her own political ends, etc. Sure she could. Its not like the other corporate goons, the only ones who buy these kinds of acts, would even know she was bullshitting
GTFO
Excel it is!
Celery is good at scale, but for many things this library is great. http://python-rq.org/
Is the demand low or high? Can other Python developers cooperate with this question?
I have recently started with the Pluralsight course "Python fundamentals" and the book "Automate the boring stuff". The Pluralsight course, provides great details on how python works, the zen of python as well as good examples. Automate the boring stuff is available for free online, you can also buy it from amazon. If you find it useful, please support it and purchase the ebook. I'm not too far into the book, but so far it's shown good examples and then breaks down the steps. So far I have mainly been watching the Pluralsight series and thinking up a few little projects to help cement the subjects. As for feeling overwhelmed, take it one step at a time. Think of a simple task and see if you can write a program to do it. It doesn't have to be grand, or original. What I do is write a program to simply do a task, as I learn more I will add error handling, functions etc.
Thank you for this! I just signed up and will be going through the material over the extended weekend. Looking forward to it!
It's nice to know your view. Do share it with your friends and family
It's nice to know your view. Do share it with your friends and family Do forget to leave a review at course so other can learn from your learning
&gt; Automate the boring stuff Cool! I've heard a lot of good things about this book. I already got the ebook but haven't start reading it.
Which Twitter accounts should I keep an eye on?
&gt; even with great backups An additional copy does not endanger the data no matter how unreliable the copy is. If the data was already safe, a copy on a crappy drive does not change that. 
Let me qualify that: she can't easily bullshit her way through them within earshot of OP if OP stands up for their own self interests.
No, I'm black. But I've studied Chinese off and on for many years. And I lived in Taiwan for 6 months. I got interested in Chinese when I was at Caltech for a summer and my dormitory was over 90% Chinese.
if you encountered a problem i want to help, but i need more information.
Tip 1: Never let the managers know how sausage is made.
It does look like every other website but hey familiar's good, and generic ok-looking is still better than bad. If you want it to look slightly different than the mass, check out bootstrap themes (eg bootswatch) doesn't change much but just swapping out colours is effective, you could even look into paid themes which probably vary more stuff and might get you closer to a company identity. Or look into Foundation (same idea as bootstrap but different implementation so the looks are pretty different iirc). 
The apparent quality of my web apps went up ten fold after I learned bootstrap. But once you've learned bootstrap and become dependent on it, every fucking site with it looks the same. It's so damn obvious when you run into sites that use it now, and you start getting sick of it. But one thing I'll always love about it are glyphicons. I use every excuse I can to drop one in a tab or a button. I litter my webapps with arrows, eyes, pencils, save disks, airplanes, targets, eyes and houses everywhere. I go to bootstrap for the UI elements, but I stay for the glorious glyphicons. 
Library-wise, definitely https://github.com/EntilZha/PyFunctional. Application-wise would be between a [graph generation cli](https://github.com/EntilZha/pygraph), program to check availability and email me when there is some for Yosemite area camping, or temperature tracker that runs on a raspberry pi
I would give a try to posting in the python irc at #python Its usually a good way to get relatively fast answers to help questions
in civilized countries, people are results-driven
The code examples are pretty wierd, stuff is missing, take the generator code for 2.7.x, test_range returns, test_xrange doesn't. Some other things are missing like in the first example with print, the 3.x example doesn't match the 2.7.x one. (A small difference but still) Anyway, aside from some things, I'd recommend reading this
The fact that flask might need a few third party libraries to do something common isn't a good argument against flask, it's just a different approach to a web app framework. Django and flask are both good choices, it's just a drastically different methodology. flask on its own is just an url dispatcher with HTTP request handling logic, coupled with a jinja2 templating engine, pretty much the bare minimum to be considered a webapp framework. Of course that's not everything you're going to need with 99% of web apps. It's not meant to be a full featured framework on its own. You install third party libraries as you need them. If you need authentication, you might install flask-security. If you need an ORM, you might install flask-sqlalchemy. If you need forms with validation and csrf protection, you might install flask-wtf. Not every site is going to need an admin page, class-based views, a full featured ORM that can use all sorts of sql backends, authentication, password management, management scripting, database migration, forms, CRUD logic, etc. Django is bloated as fuck, but that's a weakness and a strength. Flask alone is just going to give you something that routes a request to a function and returns a string. If you want to add functionality you'd see in 99% of websites, you're going to need to add common libraries to it. That's its weakness and its strength. It's minimalism, and it works. It's not like the third party libraries aren't robust, haven't been designed as well as django's included functionality. They just don't need to be available in every webapp. And it's not like typing "pip install flask flask-wtf flask-sqlalchemy" is any harder than typing "pip install django". And with flask MethodView (included with vanilla flask) and flask-wtf, it's really not "substantially less programmer-generated code" in Django, unless you're doing something like the bare minimum `class PublisherList(ListView): model = PublisherModel`. It's really not many more lines in flask if you use a built-in MethodView and SQLAlchemy. When you start extending absolutely any logic at all on top of a simple "list a filtered subset of instances of this model", the code is going to be about the exact same in either. But yes, I will say that Django was made to do this extremely well with the bare minimum, right out of the box. But if you're making a bare minimum webapp with CRUD forms, you're not going to have much more trouble with flask than you would django. And you aren't going to spend much more time on it either.
I create a script to move files into subfolders based on the subfolders name and file extension/name 
http://0bin.net. I created thing that I consider more useful, but people disagree :)
Damn, I'm working on a system that I can log all my financial decisions for tax purposes, but I hadn't even considered attaching it to my bank, how would I go about doing this?
&gt;The only things that initiate scope consideration are def and class. That's not entirely true, even in python 2. Generator comprehensions created their own scope there as well. And in python 3, the change this is addressing is that this was extended to list comprehensions as well, which previously leaked the loop variable into the enclosing scope.
It's called Dropbox is full. All it does is cut and paste my mom's camera upload folders to the My pictures folder. Because cutting and pasting is hard. 
The best way for me is to download the transaction data as csv (manually, once at the end of the month) and then use it. I do not automate this.
+1 The classic unix tools like grep, sed, awk, etc are *ridiculously* fast. Fast like you wouldn't believe. By the time you set up your hadoop cluster they've already chewed through terabytes of data.
You should go Office Space on a server with a huge Django app. It'll probably make you feel better.
Now that 2.7 has an end of life, let's talk about what's good and bad about https://pypi.python.org/pypi/six/
Sounds like someone who was chosen to lead a group of people she wasn't qualified to lead. 
Um... out of curiosity where did you hear that?
I am personally put off by the site looking so generic but the people I work with like it, I did change the colors to match our logo / branding a bit but that was all. My colleagues also think Papyrus font shoudld used on "all the things" so taking their opinions with a grain of salt.
https://forums.dust514.com/default.aspx?g=posts&amp;t=225484
I created one for myself since i didnt liked other available
I've done something similar, but less magical before: class ReprMixin(object): '''Provides a string representible form for objects.''' # Most models will have both an id and name fields # This can be overwritten if needed __repr_fields__ = ['id', 'name'] def __repr__(self): fields = {f:getattr(self, f, '&lt;BLANK&gt;') for f in self.__repr_fields__} # constructs a dictionary compatible pattern for formatting # {{{0}}} becomes {id} for example pattern = ['{0}={{{0}}}'.format(f) for f in self.__repr_fields__] pattern = ' '.join(pattern) pattern = pattern.format(**fields) return '&lt;{} {}&gt;'.format(self.__class__.__name__, pattern)
And no where in that post does Frame mention anything about technology choices. As far as I am aware the Shanghai team has not talked publicly at all about the backend stack for the successor to DUST. EVE Online uses Stackless for the game server but we are actively working (read doing experiments and trying things) on breaking that monolithic code base apart into microservices. Part of that microservice aspect is giving those microservices the ability to choose the language that suits what they are trying to do. I think most the stuff we have written so far is stock python 2.7 or 3.4 and a few Go services. Anyways, my main point is the Shanghai team hasn't said anything about the backend choices, at least that I am aware of, for DUSTs successor so I am curious where the notion that it will use stackless comes from.
Meh just brew install it (maybe 2020 when they have to get rid of python 2)
Is this happening? The convention center is pretty huge so we can meet anywhere in it.
Pretty much never. Apple has shown no interest in keeping the core distro software up to date. Even their version of Bash is ancient.
Apologies. In my head it was clear I was talking about the Python bit since that was the point of the thread. However you're correct. Sorry about the confusion. :)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
https://www.youtube.com/watch?v=QuDaskp23To This one was pretty useful ;)