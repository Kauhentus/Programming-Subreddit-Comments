Shhhh. Silence! Keep quiet! It's interesting!
This is really nice, reminds me of Rust's `serde` library. Too bad Python's syntax doesn't really allow for custom annotations on class type hints. 
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
What do you mean by custom annotations?
Serde supports custom annotations like #[serde(rename="foo")] bar: i64 So the `bar` field of your struct is mapped to the `foo` field in the JSON blob.
At 9 MB, its' likely not very overzealous. But yeah, onefile is slow. Why do you really need onefile? Microsoft doesn't do it.
Agree to disagree. I consider real anonymous functions to be a key feature for using functional programming patterns.
Fair enough.
It doesn't matter how minor it is. You let them take an inch, they will take a mile. The SJWs need to be nipped in the bud ASAP, else they will continue to grow and they will only become more difficult to eradicate.
Hey, our computer vision team has recently let me publish our in-house multiprocessing toolkit for python, "mpyx". It offers the flexibility you may be looking for. Let me know what you think! &amp;#x200B; [https://github.com/n17r4m/mpyx](https://github.com/n17r4m/mpyx)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ltworf/typedload/.../**test_attrload.py#L53-L55** (master → 144b22e)](https://github.com/ltworf/typedload/blob/144b22e8bdfe49875fc5c5040022e56784a45b38/tests/test_attrload.py#L53-L55) ---- 
Fair enough. I usually wouldn't use functional style much in Python and when you do using map and reduce are more helpful
Yeah, I saw that, but this also adds a dependency on attrs, and the whole thing is kind of ugly. Having decorators on type hints would be great here. 
If youare looking for simple and **FAST** access to data *in memory, I wrote database like tool: [ldtable](https://github.com/Jwink3101/ldtable). It does not have persistence out-of-the-box (though you could pickle it and save the instantiation time). It is designed for really fast O(1) equality and not-equality queries. It is also simpler to use than sqlite (at least for those not super comfortable with it). Let me know if that helps you out
This was what came to mind for me too. I like to modify the encoder and decoder to use JSON. Actually, I use JSON with a pickle fallback but that is more complex than needed right now. If you look at some of the forks of it, there are thread-safe versions too
I think you misunderstood me. Move all the files and then create a shortcut that's presumably going to go on the desktop or some bin folder or wherever. All an installer does is makes a directory, copies the files into it, and creates a shortcut. &gt; it seemed like extra work, at least coming from what I was used to with compiling in AHK into a single exe. It is extra work. Python is not a compiled language. As such, it's not self contained.
Amazing. I didn't know this existed and was built into the standard library. Learn something new every day.
Why not name them something like "_0", "_1", etc.? It's not great, but it frees you up from thinking up an actual name. However, i think python forcing you to think of actual names of nested functions is a good thing overall.
ask in /r/learnpython You will get more help there
I made it to 215. This is beautiful. 
Definitely. Creating the tools is one way to learn since you would be really familiar on how it works. 
Nicely done.
The folks over at /r/learnpython would likely be more than willing to help. In short: it's a bit awkward to get python apps running on your phone, but if you had some other machine you could run it on it'd probably be pretty easy to save it to some cloud service like google photos, which would show up on your phone.
Well, depending on your expectations, it is possible. Would you do it? No. Why? B/c you won't want every meme in all of cancerdom on your phone. Especially if the process involves, actively using your phone. It'd be much more viable to program it on your computer to save it to a shared Google photos account with automated macros that could react to a notification that your favorite page(s) have been updated(in my personal opinion). Note: there are countless ways to do something like this. There are no perfect methods but methods that are better than others. 
I have access to a computer. Would it be easier to save them to my computer then send them to my phone? 
I don't think that's a very good suggestion. It's not really any easier to read or write. I disagree strongly that lacking anonymous functions is actually a feature, and not an unfortunate side effect of significant whitespace.
If you make a program to save every meme from reddit on your phone you’re going to have a real bad time when you wake up the next day. You’re better off creating a program to save meme that meet certain parameters like “+500 upvotes” or something 
I have the same habits and could use something like this. Good work! Also, your website is all it needs to be. I appreciate the simplicity.
Yeah I know... And it would only be for some subreddits
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
I don't know about tk, but I assume it can do a splash screen. Wx definitely can.
Good to hear I'm not alone hahah. Appreciate the response!
Thank you!
Appreciate it :)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
The feature is called stacks, fyi
Having your phone do it is like 96% of what would make this project hard (probably hard in a bad way, for a total beginner). Take that away, and it's a pretty good beginner project. Check out BeautifulSoup - it should make things fairly simple.
I imagined it in my head. Spoiler: it is
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
I have been collaborating with a friend on this vector recursion software for the last few years and we are excited to open-source it. Thought you all might enjoy experimenting with the Python code. The software is built with laser cutting and CNC machining in mind. So you can adjust how much detail is included and easily add more buffer to thicken the overall design. There are two options for exporting: \--- Export one SVG of the whole canvas. \--- Exports in a modular fashion by writing multiple SVG’s. One SVG is exported for each shape # on the canvas. This option is useful if you want to cut out each shape # individually and then physically assemble them all together after completed. So long as you plan with the max dimensions of your work bed in mind, then you can fill a wall of unlimited size. I'm happy to answer any questions. Let me know if you find the software useful, I'd enjoy seeing photos of your creations.
Yeah
Running it on the phone could be challenging, but running it on the computer and having it sync to the phone should be doable. Look into syncthing or resilio sync if onedrive or Google drive isn't your thing 
It does not. Your options pre-splash screen are...don't use onefile or the user can click it 2+ times the first time they launch it. I think you worry too much. You users aren't dumb and you can just tell them.
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
My users are dumb :( I'll look into some basic installer though and a shortcut. 
Wow, holy crap. I saw the title and I was like "oh that's nice, lemme go see what he did and give him an upvote" and then it's like, you got the thing in Github with an actual readme and a gif explaining it, there's a pypi page and a friggin website! Not to mention some pretty thoroughly thought out output from the thing. Pat yourself on the back man, this is some high quality shit.
Hey, There is very interesting. When I ran: pip install pypeln It did not install the other pip requirements that follow along with the installation. I will testing it, and give further feedback about it. 
Based on the thumbnail I thought that was going to be yet another post about how you hacked tinder to get that girlfriend of yours. 
Nah, for communicating with reddit there is praw
Any updates on making it open-source?
Is it? Numba is much less simple
Important questions is: what are you looking to do with your learning? Tons of different courses based on your level of seriousness.
Looks amazing! Do you have a tutorial or source code that I can look at?
Umich is pretty good
Wow cool program, my desktop is full of unused files!
Thanks for responding, I'll check out the information you've provided
Thanks for your responses, I'll do some reading on the topics you've suggested
Thanks for replying, I'll check out the link
Looks Nice! 
opencv2
You're not going to find a magic solution for this, it's going to take some work. Look into OpenCV.
Thanks for an answer, will try that! My another question would be will a program possibly be able to apply all those filters and recognize a plate in real time video stream?
Yes. You can be a bit smart and add a motion-detection mechanism. Therefore, you only begin processing images when motion is detected and you stop when motion stops. That way even if the plate detection code falls behind on the creation of video frames, it's allowed to catch up when there's no motion. Alternatively you can setup a multithreaded solution where frames are added to a multithreaded queue and worker threads go and fetch frames from that queue to process. That way it doesn't matter if the detection code is slow - all the frames will be processed eventually. And if more speed is needed, you can always add more threads.
Don't spend money on anything. Start making a project and learn as you go.
Why has your directory cleaner got a webscraper? 
I'd probably run the program on your computer, save the memes to your computer and then just transfer them onto your phone. Probably easier too
Thanks! I build this music player as a 30 day challenge. Youtube Playlist - [Build a Music Player with Tkinter and Pygame](https://www.youtube.com/playlist?list=PLhTjy8cBISEp6lNKUO3iwbB1DKAkRwutl) Source Code - [https://github.com/attreyabhatt/Python-Music-Player](https://github.com/attreyabhatt/Python-Music-Player) &amp;#x200B;
Honestly it actually looks pretty decent, but you should maybe be in the habit of passing url params through the `params` keyword: url = requests.get('https://www.google.com/search?client=ubuntu&amp;channel=fs&amp;q=temperature+near+me&amp;ie=utf-8&amp;oe=utf-8', headers=headers) should look more like params = {'client': 'ubuntu', 'q': 'temperature near me', ...} url = requests.get('https://www.google.com/search', params=params, headers=headers) You'll want to run linters like pylint and/or flake8 on your code. Stuff like this breaks PEP-8: self.word_btn = tk.Button(root, text="Today's Word", command = self.get_word) Should be `command=self.get_word` no spaces with keyword definitions. Those url2Content names aren't PEP-8 either. You use snake case instead of caps like that. You'd want to do maybe url2_content or even better a more descriptive `rupee_response` even. Okay, if this was theoretically a production app you'd write for work, I'd clean up some things. I'd rename `find_stuff` for one, into something way more relevant and descriptive like `build_view` or something. This function calls the `get_` stuff and then builds out the UI. It's your main function for the most part. `find_stuff` would hint that it returns a list of stuff or something, not build a whole view or act as the main code. The `get_temp` and `get_rupe` stuff are named like "getters", but they modify the instance by changing labels. You should avoid naming functions with prefix `get_` if they make modifications to or change the state of things. Usually if someone looks at code, they assume a `get_` anything would be safe to run to just inspect stuff and see what it returns. getters shouldn't have side effects really. Just naming it `update_rupe` would be perfectly fine I think, or even `configure_rupe_label`. If this was "production", there's no accounting for errors. What if one page 404s on you? Should the app continue if "temperature near me" query fails? There's no comments on stuff like that. On top of that there's no function doc strings. If it was a real production app it would be nice to see good doc strings on those functions. And what if `url2content.find` doesn't find anything? will `temp.text` break? The webpage could return with no results there. You're also using globals in ways you might want to avoid in a production app. I couldn't import this class from this file/module without it making those get requests. It might be nicer if the get_ functions ran the get request themselves, and then you could trigger it to run each one instead of it just running when the module is imported. Plus, we don't care about url1/2/3 content except in each of those functions. You could really just make the request inside those functions and have some `update_labels` function that hits each in turn or something. Importing a module shouldn't make network requests IMO. Same goes for the bottom bit that opens the GUI. I'd put that in a main function so you could import the module and invoke it manually if you imported this, or otherwise make it so you can just use the class and skip the GUI. Keep in mind I'm being incredibly pedantic here. The code looks like it works just fine, but the main things for a *script* I'd clean up are the PEP-8 issues, the globals and make it importable easier, and rename the functions. But it looks like it works fine and I'm just giving you the rundown of what I'd want to see if it was something that was a real production script used at work.
Well, I ended up ordering one. Mostly for toying with, but in the end it’s important to support the people that actually take the tech forward. Same reason I have a mostly unused micropython board sitting at my desk :-) I’ve only played with Micropython on the ESP8266, and with limited success at that. Easy enough to code, but then suddenly it nukes the filesystem. 
Take any intro class to get the basics then work on your own project and learn what you need.
Thanks a lot man. I will remember your advice. :) 
I really recommend the https://www.pyimagesearch.com website, it has lost of useful articles about what you are trying to do: * [Object detection in real-time video with deep learning and OpenCV](https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/) * [Object tracking in video](https://gurus.pyimagesearch.com/object-tracking-in-video/) * [Segmenting characters from license plates](https://gurus.pyimagesearch.com/lesson-sample-segmenting-characters-from-license-plates/) Or, use an open source **Automatic License Plate Recognition** library like [openalpr](https://github.com/openalpr/openalpr). For a full implementation, see [here](https://jkjung-avt.github.io/openalpr-on-tx2/).
I'd start by grabbing frames and feed them to OpenALPR: [https://www.openalpr.com/](https://www.openalpr.com/)
Thanks :)
&gt;PyPA projects have only one rule (seriously)- they must adopt our code of conduct Doesn't this mean that you're not a packaging authority, you're an inclusivity badge? 
Tried that. Same
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
Don't understand the reply
r/learnpython is for questions.
I've write a bot to watch for DHCP rogues in the network. When it detects a bootp offer with different ip source from my server he sends me e-mail with the trouble. 
What datasource are you using? Isn't there a problem with most ETFs not going back long enough to get reliable statistics?
Hy compiles to Python code. I don't really see the sense in that. Compare it to Clojure. On the backend Clojure will compile to the JVM, on the frontend it will compile to JavaScript so I can plug it into the browser. Why would I use Hy over Clojure? Similar syntax. But Hy compiles to Python which is generally slow and doesn't really have anything going for it as a compile target. The reason you use Python is because you like the syntax, not because you like the Python engine.
very well done! do you think a beginner could follow along?
When we have some time we might try it. Thanks for encuragement :)
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
Neat, nice job
I write PHP &amp; Python code. The 2 languages are not so similar - PHP has Exception, Notice, Warning and Error. Python has only Exception (It's the right thing) - PHP has only one data structure Array. Python has more data structures set, list, dict, tuple, ... - PHP is a Weak dynamic language (You can compare variables of different types and are automatically cast for comparison). Python is a Strong dynamic language (You can only compare variables of the same types). An example of that is in PHP [`"-1" == -1 =&gt; true`](https://3v4l.org/ck69o) Or from the [manual](http://php.net/manual/en/types.comparisons.php) - The Python standard library full of tools with a lot of functionality. - PHP has composer for lib and pear for extensions. Python has pip that do both. - More and more company drop support of PHP or just doesn't make the libraries available (kubernetes, elastic, ...) This might be subjective but like I said, I work with both and I have done the same programs in both languages. PHP is great for little website only.
Thanks! And Yeah. You do need to know what variables, functions etc. Basic stuff.
cool thanks! ive been self teaching myself python for a few months so I will give it a bash :)
&gt; B/c you won't want every meme in all of cancerdom on your phone. &amp;#x200B; Disagree. &amp;#x200B;
Hey yo! I was facing the same problems and created something similar. It's not as good as yours but it was enough for me 😁 https://github.com/DineshDowney/SortIt
1. /r/learnpython 2. Format your code (there's a guide in the sidebar of the above subreddit) 3. [try/except](https://stackoverflow.com/a/32252634/2700168)
I watched a video from Derek Banas to learn almost everything I know, I just had to pick up stuff from different modules &amp; the def() function 
Open the video on a video editor, look at the frames with ut in view &amp; look really hard to make out the blurry picture 
You could define a new process &amp; just call it inside of one of them to run in the background 
Something using a rest API, and JSON files is always going to be useful :)
Why attrs when we can have dataclasses
Great program can't wait to try it. Is there anyway to expand it like maybe adding the album cover of a song?
Cheers I'll look into that. Any good tutorials you know ?
W0000000t this is like a gift from God himself. I'm starting a migration from a couple of file servers to 1 big one this week, and this is so perfectly timed.. i was actually thinking of something in Python to do this myself but now it's actually just given to me for free. Darn. Very nice. Thank you so much!!
This is so cool! Great job! :)
Python is super cool. Some languages are a bit limited in how broad and deep you can go with them, but python (for me) has been quicker than most to pick up and I haven't hit any points when it wasn't up to the task. I was really pumped once when I was able to write a web page that could retrieve a bunch of files from an FTP server and compose a zip file. It brought together a bunch of different moving parts, and was easier to do (IMO) than in PHP for instance. Anyway, I'm pretty inspired by the road you're embarking on. May the force be with you (or similar quote from your favourite franchise).
This looks like a good start: https://realpython.com/api-integration-in-python/
Don't worry, pypeln is pure python, 0 dependencies :D
X = input() X1 = float(x) 
Maybe for small program, where start-up time should be in consideration? Even on my i5U coffee, clojure repl takes nearly 10s to start, which is unacceptable for scripting.
I feel downvote is coming, but I say this all the time to junior staff who don't have CS background. &gt;Practice data structures and algorithms if you are a beginner looking to improve. To me, DA is the foundation that you build you development career on. It probably takes 2-4 months (depending on your schedule) to get fairly good at it. But I promise you it'll pay off in the future.
r/learnpython 
I'm currently I computer science student at A level (UK) and I'm thinking of doing it at uni level so I just wanted to know what projects are good to show to uni to look good. What is it you mean by DA? 
This is a great project and you have done an amazing work. But I would like to suggest you a few things: 1) Since your project is on GitHub it would be really great to have a README.md and write everything in the file. How to use it, if someone wants to help you develop it then how to do that, a demo(the one you are showing here), what all features are supported, what is a plan for future(will you continue maintaining it or not) etc 2) Not necessary but a good practice - Always try to write function docstrings so anyone reading your code knows what the function does and what it returns, what type of parameters does the function takes etc. All this makes your code more readable and beautiful. 
could you please give it's github link or code? because I am also trying same. :D
I'm assuming your American so our college is like your high school level I think, I'm 17. I'll take a look at this stuff but do you know anything a bit lower level that that? I've had some experience with basic object detection that's the hardest thing I've followed a tutorial for. But maybe some things like basic using basic apis ?
Looks like you want to do AI/ML? That's outside of my domains. If you like OpenCV, have you tho of doing soccer (football :)) game detection? Feed your program highlight of a football game, and see if you can track the players and the ball? If you can, you can add speed measure, distances run, fastest speed, etc.. I think if you uni has good professors, they might be inclined to help you as well. &amp;#x200B; Activity detection and identification is huge in security field (for good and bad).
I've been working on this for about a week and just launched it yesterday. It's been a lot of fun to develop and has been very informative. I haven't had a ton of traffic through yet, but I'm hoping to get some more Shortcuts on there for better examples. One thing I really noticed with this project is just how easy and quick it is to get a project up and running. This is my third project using Django, and I was able to get this up and running within a week. I am pretty happy with the results.
Cheers I think I'll be able to do open CV stuff. And machine learning would look great. Thanks for your help 
I have been playing around with a little twitter client for the commandline called Bark. I'm using the python-twitter api and just having some fun getting back into Python. https://github.com/jfm/bark
Quandl. The ones that I used were XLF, XLU and other sectoral ETFs in the same family and provider. I tested since 2007 cause that's the earliest I could go. Because it is rebalanced every month based on past-30 days data. Remove this if its not allowed, but you can check my website and other little silly tools I made, [here.](https://www.pemansik.com)
[Here.](https://www.theverge.com/2018/9/24/17896252/mac-os-mojave-review-updates-dark-mode-new-features)
Yeah that's pretty easy to do. The only reason I didn't do it was because I already had worked on it for 30 days. And learned tkinter as much as I wanted to. 
Thanks!
Not the Siri I was hoping for...
I don't think data since 2007 is enough get any statistics that account for risks posed by market crashes (with n=1 for big ones). Also your portfolios are very much underperforming SPY, which returned &gt;220% since 2007. 
[This one](https://www.reddit.com/r/SiriPornstar/). &amp;#x200B;
I'm a big fan of openpyxl for working with excel workbooks.
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
Context matters. A breaking change negatively impacts thousands or millions of end users is different from one that negatively impacts no one. Yes, the political language police are annoying (on the left and the right) and if you want to get things done it's best to try avoid phrases that piss them off.
I made a Docker service for work that monitors the event streams for container events and aggregates those up to Graphite. Works pretty well. If there's any interest I can ask work if they're okay with me sharing the source with the community.
As part of another project, I'm writing a library to help automate tweets updates: delays and intervals basically
Thank you for contributing! I'm excited to see what you make! I don't think I would have thought about a requests section! That's a _really_ cool idea. I'll definitely look into that.
r/learnpython
Here's a sneak peek of /r/workflow using the [top posts](https://np.reddit.com/r/workflow/top/?sort=top&amp;t=year) of the year! \#1: [Apple's "Shortcuts" is literally Workflow. SO happy!](https://np.reddit.com/r/workflow/comments/8oj8f4/apples_shortcuts_is_literally_workflow_so_happy/) \#2: [*Very* technical details about Workflow‘s successor app Shortcuts. Gives you an idea how powerful it will become if app developers adopt it.](https://developer.apple.com/videos/play/wwdc2018/211/) | [31 comments](https://np.reddit.com/r/workflow/comments/8ozx6c/very_technical_details_about_workflows_successor/) \#3: [Video Demo of my commute shortcut using the updated dictate feature in Shortcuts. 99% voice activation.](https://v.redd.it/e1lg3evvhgj11) | [53 comments](https://np.reddit.com/r/workflow/comments/9bv6oz/video_demo_of_my_commute_shortcut_using_the/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Wish the author had given its source code out. The Javascript is minified.
What did you use for mp3 playback? Python mp3 support is ridiculous, it took me a while to find a lib that can 1) seek to position in mp3 2) allows multiple mp3s to be loaded as separate entities. 
you are welcome, if you need some help or support don't doubt contacting me, i know something of python and some web design, even tho my passion is automation.
&gt; What would your recommendation be ? Start by reading the sidebar, probably.
&gt; [Build a Music Player with Tkinter and Pygame](https://www.youtube.com/playlist?list=PLhTjy8cBISEp6lNKUO3iwbB1DKAkRwutl) &gt; &gt;If you follow this, you will be able to do that pretty easily.
Sure, maybe Hy is good as LISP scripting language. I haven't used it so I wouldn't know.
These examples are pretty good. I'd recommend noting the aiohttpserver\_server\_search.py example on the landing page for your GitHub repo. At first glance, I thought botflow was only for web-related pipelines, like crawling. I can see botflow being useful for other pipelined tasks, though, such as adding data to database tables. Am I correct in making this assumption?
That s cool man, I am a freshman of CS and I plan to learn Python by myself, do u have any suggestions? I will be very appreciate that
Thankyou so much for the input. I created it to learn Tkinter to be honest. Did a 30 day challenge. Didn't think about anyone else using it or developing it further. A friend told me to post my everyday learning on Youtube so I posted it over here - [Build a Music Player with Tkinter and Pygame](https://www.youtube.com/playlist?list=PLhTjy8cBISEp6lNKUO3iwbB1DKAkRwutl) Definitely will add Readme file and docstrings. &amp;#x200B;
But that can only play one track right? 
&gt;compare the RPi with something like the **Nano** or PINE. They're cheaper and have better hardware but the software and support are the corners that were cut. At least the allwinner SoC are gaining [mainline linux support](https://linux-sunxi.org/Linux_mainlining_effort#Status_Matrix), whereas the RPIs will never be binary-blob-free. There's also this beauty: [Libre Computer ALL-H3-CC](https://libre.computer/products/boards/all-h3-cc/) Arch Linux ARM works beautifully on the H3/H5 boards with the latest official-repo mainline kernel.
It might not be the fastest way to your goal, but to read/write some real-world python you could look into contributing to some python OSS. There are even websites like [up for grabs](https://up-for-grabs.net) that show projects that are good to get started in the world of open source software :p
`5 * 3` is a big pentagon with triangles instead of vertices can you find 5 vertices of a pentagon given its center? (angles 0..4 * 360/5) now treat each of these verticas as a center of a much smaller triangle (angles 0..3 * 360/2). Compound coordinates, rotations and what have you from all layers to produce final position of end nodes. Scale up to arbitrary depth of layers, probably with recursion. you could whip up a proof of concept in like 15 minutes in `turtle` 
Mac already has the python installed. You just have to use a interpreter. Use jupyter or pycharm or visual studio and follow the instructions. It worked for me. 
yeah, I totally get it. It just was my suggestion so like you can follow those points while working on the future projects.
Thanks, will look into this!
Look into the python module Zappa. It's a little more complicated than a basic flask server, but so fucking worth it.
I'd recommend to start to contribute in open source projects/libraries in GitHub. You need to look for tags 'help wanted' and similar.
Oh okay then. 
You can just use any text editor, save a file as &lt;filename.py&gt; and run it by typing `python &lt;filename.py&gt;` into any terminal, as long as python is installed and in your path environment variable. Idk how to install python on anything apple-related, but I'd imagine it isn't too hard and may even set your env variables itself if you tell it to :p
Why? Why you made scraper for wikipedia???
Here's how you could use a `while` loop with the function `flip()` you've created: # Allow the user to input how many flips they want user_input_string = input("How many flips: ") # Convert the string to an integer number n = int(user_input_string) # Flip n times and display the result while n &gt; 0: side = flip() print("Result: " + side) n -= 1 
Thanks this helps alot! 
ok. thanks.
I use airflow daily in production. I like it. Strongly recommend doing a Google composer managed instance rather than run your own server. A kub instance cost just as much and you have to do everything yourself. With Google's cloud compose you only have to write business logic and can be up in running in a day. We replaced our 100k a year IAAS provider with a 4k a year cloud composer instance and it's much better for developers. Just my 2 cents
This is just a stream of consciousness... sorry, it's hard to even pick anything useful from this conversation.
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
You can write multiline lambdas.
In the case above, a better example would be comparing truck, Formula 1 and the Death Star. There is some vague connection between the first two and the last, but really, they are in different categories, whereas the first two are, essentially, the same thing, with slight superficial differences.
When I was 7, I was inspired by works of Arcimboldo (an Italian painter who painted portraits made of food). But, my attempts to copy from him were just as ridiculous as those of Python to copy from Erlang.
To add to this, when posting on /r/learnpython **DO NOT POST AN IMAGE** Put your code in the text box, and format it according to the link. Do this with the traceback error message as well. I don't want to fight the image size vs screen real estate because your image is filled with whitespace. And only do this **AFTER** googling your error and searching stack overflow. Tell us what you have tried to do to solve your problem so we can see that you're not asking us to do your homework, and so we can gauge how to best help you solve your problem more effectively. 
Did you look at other possible packages? I've heard of things like Jango and Flask, any of those worth looking into? 
Mediawiki will already generate the HTML for an article, without all the edit interface, without the need for a scraper https://en.wikipedia.org/wiki/Cat?action=render
Thank you for the amount of work you are putting on your GUI. After testing several, I settled on PySimpleGUI and I am glad I did. What is blowing me away is the amount of features being added every single day!!!! I am reading every single day the GitHub to see what new features I can implement in my software to make it easier for my users. Keep up the amazing work, it is amazing! AND THANK YOU!!!!
For some time I've been writing a python API for a website for downloading anime. I've finally finished the API and created a nice command line tool for downloading episodes automatically. [https://github.com/Jelomite/horrible-downloader](https://github.com/Jelomite/horrible-downloader)
Thanks... there are too many GUI frameworks to count but I do try to stay informed about which are used and which aren't.
There are only like 4, isn't there? Tkinter, wxPython, Kivy, and PyQt/PySide.
Would love to read if you write blog posts on it. It would be helpful for learners like me.
Would you like to see something specific being done In airflow? Also FYI you can join cloud-composer-discuss Google group mailing list which has a bunch of production users a long with Google employees who run the cloud composer service. It was a really good resource for me to ask questions and see other people's code. 
[https://praw.readthedocs.io/en/latest/](https://praw.readthedocs.io/en/latest/)
&gt; In my opinion neither lambdas nor list comprehensions are very useful outside of toy problems. I've never had any issues using both in solutions very far from "toy problems" but I can see how you can get that perspective if you come to python from javascript and never try to learn how you solve problems outside of your typical patterns. Now first off, obviously you shouldn't be writing out a tally function as anonymous functions whether you are coding python or javascript, but if you want it, it looks like: reduce((lambda counts, item: {**counts, **{item: counts.get(item, 0)+1}}), items, {}) I agree that python pushes you away from highly functional and nested style of programming and it does so intentionally and by design. That's never been any limitation for me, and I've spend a lot of my time coding in **actual** functional languages like Haskell and lisp. Obviously you need to spend time learning the language before you evaluate how it compares to others. Python isn't javascript obviously so you can't use your solutions one-to-one, but that's not a fault in Python, especially considering the mess of a language javascript has been historically. All of that said, nothing you wrote is an answer to my original question which was: What is it you miss about anonymous functions not possible with lambdas? But I take it from your answer that your original critique was more of a general "you miss being able to write javascript when I write python" more than an actual missing lambdas, which are obviously both there and capable unless I'm missing some huge deficiency in lambdas hiding in between the lines of your post. 
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
Haven't had any issues in the year or so I've been using it, but I don't have to work excel that often.
One thing I would really like to see for PyQt5 tutorials is async integration for not blocking the UI. I've gotten it to work, but it wasn't as simple as I had hoped. In C# you don't have to deal with the async loop, which is where I've had trouble getting Qt to cooperate. Maybe I'm just dumb. Also, I have had my eye on fbs, but it seems kind of weird. I've had luck compiling with Nuitka and distributing that way too.
openpyxl doesn't read any propriatary formats. It works with [xlsx/xlsm](https://en.wikipedia.org/wiki/Office_Open_XML) which are essentially just ziped XML. The older propriatary format .xls is not supported by openpyxl but can be handled in python with xlwt and xlrd. I've worked with them all and never had any issues, not to say that there aren't any. If you curious about bugs and issues the project has an [issues list](https://bitbucket.org/openpyxl/openpyxl/issues?status=new&amp;status=open).
That will save lines only once, but it won't save only the lines *that only appear once in the file*. There seem to be multiple problems with the original script (e.g. result.split() probably won't give you individual lines, the indentation is not right, etc), so going to [r/learnpython](http://www.reddit.com/r/learnpython?utm_source=reddit&amp;utm_medium=usertext&amp;utm_name=Python&amp;utm_content=t5_2qh0y) would probably be a good idea.
You could try Facebook Prophet for python.
Is there one that is regarded as the best? 
Thank you so much! Got it working: from tkinter import Tk from time import sleep r=Tk() r.withdraw() while not r.selection_get(selection="CLIPBOARD"): sleep(0.1) result = r.selection_get(selection="CLIPBOARD") print(result) x = result.split() set_lines = set([]) for line in open('testingcopy.txt', "r"): set_lines.add(line) print("Newly added: ") for lines in x: if len(lines) == 9 and (lines + "\n") not in set_lines: print(lines) f = open("testingcopy.txt","a+") f.write(lines + "\n") f.close() print("Total in file: ") for line in open('testingcopy.txt', "r"): print(line) Is it possible to export the "if len(lines) == 9 and (lines + "\n") not in set_lines:" to clipboard somehow? This is my first Python project, so I apologize if the question is dumb. 
[Corey Schafer YT](https://www.youtube.com/channel/UCCezIgC97PvUuR4_gbFUs5g) [Sentdex YT](https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ) [Sentdex Written](https://pythonprogramming.net/) [W3 Schools](https://www.w3schools.com/python/) [Code Academy](https://www.codecademy.com/learn/learn-python) [Free Code Camp](https://learn.freecodecamp.org/) not python, but a good resource nonetheless. I doubt you'll be using only python no matter what you do. 
Thanks to Dropbox for sharing their engineering insights!
&gt; Is it possible to export the "if len(lines) == 9 and (lines + "\n") not in set_lines:" I don't really understand what the specifics of that mean (specifically lines+'\n'). You can do multiple checks if that's your question. &gt; to clipboard somehow? I assume you're on windows. I've never used the clipboard, but yes, you can access it. TIL. https://stackoverflow.com/questions/101128/how-do-i-read-text-from-the-windows-clipboard-from-python
I just said use a set, which is how to prevent duplicates, which is exactly what the OP asked. I left the exact if statements as an exercise to the OP. Fine, swap out line for char, whatever. It's just a set (and the OP said it worked, so there's that).
Funny! ``` python imsopopular.py ```
Could you please share the code?
Thank you for the compliment! I'm trying really hard to get as full of a feature set as I can. &amp;#x200B; I'm having a difficult time registering if anyone on Reddit likes it. I'm relatively new here and don't quite get the voting thing. &amp;#x200B; I just noticed that this post has 1,400 views with 72% Upvotes. But the total I see is 9. 
&gt;I don't really understand what the specifics of that mean (specifically lines+'\n'). You can do multiple checks if that's your question. I want to save the lines grabbed from ""if len(lines) == 9 and (lines + "\n") not in set_lines:"" to clipboard. When I did some testing with set_lines, I noticed that the lines were saved as: {'341023452\n', '341340952\n', '341540942\n'} and would not be matched due to the "\n". So it went from: "if len(lines) == 9 and (lines) not in set_lines:" to: if len(lines) == 9 and (lines + "\n") not in set_lines: &gt;I assume you're on windows. I've never used the clipboard, but yes, you can access it. TIL. Is it possible to do with tkinter? 
Currently helping clean up an intern's project (loads data from vROps into InfluxDB) so that we can open-source it. Also on the hunt for some projects to work on for [Hacktoberfest](https://hacktoberfest.digitalocean.com/).
I've been using PyQt/PySide professionally. It has a lot of warts and baggage, and all the various docs sites for them are lacking in one way or another. But it can be used to create powerful, good-looking programs, and lets you get under the hood and fine-tune almost anything. I've also used Tkinter and Kivy in the past, though not as much as the Qt wrappers. Programs build with Tkinter are ugly as sin, even if you use ttk which is supposed to mitigate that. And its overall syntax, which is often touted as being easy to learn and use, quickly becomes cumbersome and boilerplate-y as the size of the program increases. Kivy I just didn't like much. I can't remember the specifics of why now. Maybe because it was focused so much on the QML-like declarative their own sub-language for UI design, and I found it sorely lacking in pre-made ready-to-use widgets. Probably that. wxPython I've never used, because at the time when I was trying out various frameworks, wxPython haven't had python3 bindings yet. Don't know of and haven't tried any GTK bindings, because up until recently I've been using Kubuntu as my home OS, and those reportedly look awful there. Anything that makes you do UI as a web-app and then launches a localhost server and a browser instance and tries to pretend to be a desktop app, is just utter garbage in all regards, so I haven't tried any of that either. All in all, I would recommend PyQt/PySide to anyone looking to start. It's a horrible un-pythonic mess, but everything else is probably just as bad if not worse.
Thanks 
Thanks 
Thanks 
Thanks 
"Carefully"
&gt; some flavors of Linux fuck off dropbox, your limitations on linux are built entirely out of fake requirements and bullshit.
Django and Flask are for web apps (websites) . This music player is a software that runs on Windows. Tkinter is a package inside python that helps creating the GUI part of these software.
1. /r/learnpython 2. You may be interested in the `collections.Counter` object, which takes an iterable (like an open file) and counts the occurrences of each unique item in it, returning a dict-like object. 
Such as? I finally gave up on Google Drive over lack of Linux support. I've been using Dropbox on Arch for a year or two now with no issues.
Thanks. From a quick glance it seems it is not very flexible, eg. it only has one fixed model for time series with seasonality.
This sounds like a nightmare. My company will have to do the same thing, except we don't have a bajillion dollars.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
I just discovered your project and it looks awesome, I'm looking forward to trying it. Keep up the good work! I wouldn't be too concerned about Reddit upvotes, most of the people who view a post probably won't bother to upvote it. One thing I'm curious about, when you build an EXE with PyInstaller for a small app using PySimpleGUI, how large is the EXE? I think that's one of the biggest downsides to using Python instead of C# and WinForms, is that the EXE ends up being larger than just a few KB.
Ok sorry! I'll post it on /r/LearnPython.
They are dropping support for encrypted ext4 iirc https://www.reddit.com/r/linux/comments/966xt0/linux_dropbox_client_will_stop_syncing_on_any/
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Yes, I'm willing to work with Raspberry, just not until I find a reason to do so. 
Condoleeza Rice is a war criminal.
Thanks for the encouragement :-) Always great to hear from folks that like it. The EXE produced for my examples is only 9 MB. I say "only" because today, 9 MB is nothing. Thumb drives are up to 256 GB. The few KB for a WinForm EXE is misleading. If you add up the amount of .NET code required to make the GUI work, it's pretty large. It just seems small because your users have already downloaded the required .NET stuff. To be clear, I'm not knocking .NET. Everything has it's place in the giant puzzle of computing stuff. Every project is a blend of something from here and there that ends up creating a single solution. I hope this package turns out to be helpful for you.
I'm working on a script to convert [these](https://github.com/BTMorton/dnd-5e-srd/tree/master/json) into a usable structure.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [BTMorton/dnd-5e-srd/.../**json** (master → 7c58781)](https://github.com/BTMorton/dnd-5e-srd/tree/7c58781f24a22381f8aca2994d2d5628c5cb38cd/json) ---- 
It's very nice. Will you improve it ? I mean design and etc ... 
Yeah I am sorry that my IQ isn't as high as yours and my peasantries don't impress you, but rather, discombobulate you, my Lord. Just don't ever compare Python and PHP again okay?
Well, they're going to have to run the container locally, they might as well run the script. Normally, things in Docker containers are interacted with through the network: either as a website or via some sort of network protocol. They also (usually) keep running. Your script (in its current form) is more of a utility, so probably isn't the best candidate for containerization.
And their claim for why is that they need extended attributes, apparently nobody told them basically every modern filesystem in linux support this including ZFS and if they are using the kernel to talk to these file systems like they are supposed to be then they won't have to care at all what the filesystem is.
* Adding unit tests to some modules before deploying to production. * A pomodoro script that plays whitenoise when working, closes firefox (my procrastination browser), open chrome (my work browser) and switches hosts file to block things like reddit, facebook and youtube. Probably gonna release next week.
&gt; we began moving to Python 3 back in 2015 Tell me again that Python3 is not a different language from Python2. &gt; so the ability to use type annotations has been important to developer productivity Good thing mypy also works with Python2, then. Your employee Guido even coded some automated annotation tool targeting Python2 exclusively, until 25 days ago, when an outside contribution added Python3 support: https://github.com/dropbox/pyannotate/commits/master &gt; We rely heavily on threading and message-passing—through variants of the Actor pattern and by using Futures—to build many of our features Then you should have used Erlang or Java (Akka). &gt; Due to these factors, continued use of Python 2 was associated with a growing maintenance burden: &gt; The use of older compilers/runtimes was limiting our ability to upgrade some important dependencies. Are you seriously blaming your old compiler on Python2? &gt; Python 2 still technically requires Visual Studio 2008. This version is no longer supported by Microsoft and is not compatible with the Windows 10 SDK Don't tell me you use Windows servers or that you ship a Python interpretor in your desktop application. &gt; we relied on “freezer” scripts to create the native applications for each of our supported platforms That's not what "native" means. &gt; we maintained a hybrid Python 2 and 3 syntax infinitefacepalm.gif Over 3 years of wasted time and resources just to avoid admitting that it's a full rewrite with slim to no benefits. Next time pick a more appropriate language: http://wiki.qt.io/Language_Bindings
I made a scraper for another encyclopedia The Stanford Encyclopedia of Philosophy, this page don't have API. I reuse the code for wikipedia and works nice. 
Scale? In short, No. This really depends on what you want to accomplish and what resources you have (unlimited super fast ram? Then maybe. Normal amounts of resources? No.) 
Working on going from Matlab to python, any advise?
Ez lol
As it does for me...
No. I did not get banned from Reddit.
Can use python with WPF too. I recall seeing a talk on it.
&gt; I want to save the lines grabbed from ... (lines + "\n") Again, that's not meaningful. lines is a list. You can't add a list to a string. &gt; I noticed that the lines were saved as: {'341023452\n', '341340952\n', '341540942\n'} and would not be matched due to the "\n" Try calling `line = line.rstrip()` to get rid of all trailing whiltespace (tabs, spaces, \n's). You can also do `line = line.rstrip('\n')` if you only want to get rid of \n characters.
I would suspect it's laying the ground work to pull up roots entirely in Linux. I've been a paying customer for a while, apparently I get no refund for this regression in service. I'm going to have to find an alternative before it renews I guess. Insane thing is, we were just starting to pilot this at my work place which has tons of Linux workstations that aren't going to be compliant.
Assignments for my intro to Python course at university! Currenly am manipulating arrays and creating a program that converts roman numerals to integer numbers
I did everything on my own. I used MS Paint for the static artwork and a tool I made for animation.
Very interesting.
A reference application is also available here: https://github.com/gmarull/pyqt-boilerplate (dependency management, linting, freeze, docs, etc.). It does not require any license like fbs, while it shows how to achieve the same.
File doesn't exist on Windows, and it appears his solution is cross-platform.
Have you tried [mypy](http://mypy-lang.org/)?
I'm an entry-level programmer analyst for a web/app dev team at a community college. Most of the work is Django, a powerful web framework written in Python. I've also written a couple API wrappers (REST API and SOAP APIs).
Awesome to hear! Hope you enjoy it :)
By default if no flags are passed in it simply ignores them, but if the -fc (can also use --folder_cleanup) flag is passed it will place all folders in a folder titled "Folders". And your idea sounds amazing!!
My company made a migration from 2.7 to 3.6.5 and it was very painful. I’m glad we made it through to the other end
Be better
Just tried it. It doesn't show anything either.
/u/ballagarba, you mention using Qt. Couple questions. Are you using any of the Python bindings for Qt (i.e. PyQt5,)? Also, is this for public apps for for internal tools? I'm asking because I've picked up using Qt for an internal tool at my company and want to understand more of how people are using it. Thanks!
Tf is your problem
Everything. Web backend, database munging, data exploration, plotting for publications, personal scripts, image analysis, bit of machine learning.
Why is this heavily downvoted but no refutation is offered? I think most of the comment is correct.
Nextcloud/owncloud look like popular choices https://alternativeto.net/software/dropbox/?platform=linux
Nice song choice 😂😂, great job! 
here solved your problem: find / -name '*.py' -exec sed -i {} 's/print(.*)$/print\(\1\)/' Can i get that bajillion in cash
I'm trying to a part that is correct actually. Or at least contextually relevant. I'm not going to try and refute a clown who says the real problem is I didn't use erlang.
look at this retard: https://old.reddit.com/r/banned/comments/9gl14p/banned_from_rlinux_for_mentioning_mein_kampf_as/
Lots and lots of data munching. 
Is this why they charge almost $100/year to upgrade from 2GB ?
Yeah, I think the stranger thing is the inventor of Python, who keeps on promoting and developing Python 3, worked at a place that still uses Python 2... Then again, his previous company also had/has the same problem.
I don’t understand, basically its scanning a document and I want it to count the number of times each value occurs
Assuming you mean for web development, and you're really talking abilities, not elegance or structure, than 1. Multiple threads in one request (say you want to connect to multiple extenal resources, and don't in the same time, and than show the results) 2. Thighter control of server side resources (using server GPU for none graphic calculations) 3. Access to AI libraries, like tensor flow That's what I could think of
Is Visual Basic the easiest GUI solution still?
I worked on this project a few days ago and I thought you might be interested. I wrote a bit [more context in this post](https://pablasso.com/logo-to-python-transpiler). 
Remember this exercise and redo it when you learn about classes and objects. :) will be fun. 
 line_1 = 'the' line_2 = 'put gas in the cah' if line_1 == 'the': print('line_1 matched') if line_2 == 'the': print('line_2 matched') which of those print statements would execute? &amp;#x200B; Also: count = 0 count + 1 print(count) will print \`0\`, since you never \*assigned\* a new value to \`count\`. You're looking for count = count + 1 # or count += 1 &amp;#x200B;
Thank you kind redditor! I tried to get a GUI up and running in PyQT5 based on a tutorial for PyQT4 and you can guess how well that went. I can't wait to go through it. Thanks again!
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
I tell everyone i know the truth about Dropbox. Lies and bad design. This bullshit ext4/xattr thing is the last straw. You people jacked basic filesystem concepts with the symlink debacle years ago, and continue to build on a legacy of bad design decisions and ignoring users. I supported you people for a decade at least, with 100/year because I know free doesn't cut the mustard. This is what we get in return? Dropbox makes the mistake of feeding lines to the most intelligent of any user base. We do not take kindly to that, and will never forget. We might be a minority, but we are a minority in constant demand at any point in our skill curve. Any resume that crosses my desk that says "Dropbox" is going straight into the toilet from now on. Tell your friends. 
Did you resolve any complications from shipping binaries on mac &amp; windows with a solution based on these "freeze" apps?
Except add spaces between the quotes otherwise you'll also match these thesaurus then there etc
I don't touch windows. `brew install python` has always worked well for mac. Everyone should use virtualenvs anyway. But all of this is dev environment related. I only deploy production workloads on Linux, and 98% of it is docker. All serverside code. If you're writing customer facing clientside code in python, you're gonna have a bad time.
I used to code a lot the i feel away from it. I tried again last night and relized i have forgotten it. So now i have to reteach myself. Dont feel behind bro because who are you racing no one just yourswlf so go at your own pace. 
It's not *that* un-pythonic, and everything else *is* worse
Munging the daylights out of my neural datasets and making pretty plots. Sometimes I use jitted python functions for fast real-time processing of images or data in live experiments and triggering of laser beams, but only when combined with C-accelerated code. (Also use Matlab a bunch. "Boo!", I know—We're trying to get rid of it.)
haha thanks
I've recently released a first alpha version of a [new GraphQL client](https://quiz.readthedocs.io/). This week I'm working on extending its functionality. GraphQL is an alternative to REST APIs, and allows for more fine-grained and structured queries. GitHub is using it on their new v4 API. &amp;#x200B; repo: [https://github.com/ariebovenberg/quiz](https://github.com/ariebovenberg/quiz) &amp;#x200B;
You've given next to no details regarding your system, environment, tools, etc.
I'm reading up on a few when i have the time, owncloud (seems inefficient), next cloud, syncthing so far. Bigger problem is this + a few other things I want to run all seem like they'd be better if i have an ldap server, which i don't have currently. So I have to fix that.
This is the last time Im going on reddit Jk sorry Im a a noob Im on High Sierra Version 10.13.6 on a Mac Book Pro, Im using IDLE, and this happens whenever Im typing on a .py file 
I was thing about Panda dataframes serving as a secondary layer on top of some traditional databases in order to get full power of Python and its libraries for data analyses. Often there is a c++/java/etc. business logic layer on top of the database layer but these languages generate lot of boilerplate code and capable but not really designed for data analyses.
Eh, not as useful as I thought it would be. The article just says "hey we upgraded python on so many machines around the world" rather than talking how the conversion of the actual code took place. I'm especially wondering about strategy, like using linters, mypy, packages like six or maybe some other tricks... really disappointing.
Oh come on! I put Qt into my distraction list and didn't want to do stuff with it until 2020. You just had to write a great tutorial to pique my interest again. (-_-) Seriously, how much of a headache is it to make a simple GUI work across Windows and Linux? Thank you.
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
So far this is what I found: 1. pylint --py3k - this shows all issues that can be fixed mechanically 2. mypy + typing module + going through the code and annotate types, make sure to use `Text` for strings and `bytes` for binary data (there are also some extra tool that might or might not help, pytype, PyAnnotate etc) 3. unit tests
How many LOC? How long it took? Any tips?
This has nothing to do with Python, better look up how to make your shitmac run properly or buy a new mouse instead of blaming a programming language for OS choking/missing/not receiving mouse click messages on a simple text editor which is supposed to only edit it's source code and has no relation of any kind to the language itself.
That would break multiline prints, unfortunately.
So they can put it on their own wikipedia? Duh.
Thank you all for the comments. I will take the time to read through them all.
Absolutely not strange at all. Promoting something doesn't mean doing it at all costs. As _sad_ as it is, business needs trump technological perfectionism.
It's, basically, impossible to detect this kind of error in Python because you can modify the environment in which code is executed in tons of ways, some of them may depend on oracles (such as user input). For example: locals().update({input(): input() for _ in range(10)}) if X: print('user defined X') Then, things may be imported using `*` or set by another package on the current package... However, I think that `flake8` does warn you when it cannot find a definition for a symbol, maybe its only when it is used as a function... my memory is foggy. 
&gt; Don't tell me ... that you ship a Python interpreter in your desktop application Why is that a bad thing? That's what virtual environments are, and they're best practice. It's not like most users will even notice the 20MB of used up hard disk space.
Conspiracy theory: DropBox orchestrated the whole fiasco that caused Guido to step down as the BDFL so that he could spend more time on working at DropBox and migrating the codebase.
Amen.
2to3 appears to handle multiline prints if anyone is curious.
&gt;Any resume that crosses my desk that says "Dropbox" is going straight into the toilet from now on. The fuck? If this is how you approach hiring ("you once worked for a company I don't like") I'm not really sure I trust you as an employer who isn't going to screw me over arbitrarily somewhere later down the line. It's fair enough to criticise Dropbox, they're not necessarily a great company, but this is not that. This is just shitty behaviour.
In that case sure, Pandas is excellent for analyzing data retrieved from a database. [This euroPython talk](https://youtu.be/4JwpDGrMsJE) has a lot of useful information about pitfalls to avoid with Pandas that should be helpful. 
&gt; most intelligent of any user base I mean ...
You don't seem to understand how hugely reliant you were on your fellow engineers. What happens if they were conservative, afraid of things breaking, not passionate about learning additional changes for a backwards incompatible change?
Did you consider using [Lark](https://github.com/lark-parser/lark/) for parsing? You could use the bnf grammar you've already written, as-is (just add tokens), and end up with simpler and shorter code. (fair disclosure: I wrote it)
Created this stream [https://spreadshare.co/stream/python-cheat-sheet-for-beginners-and-experts](https://spreadshare.co/stream/python-cheat-sheet-for-beginners-and-experts) Can transfer ownership to you. You can add new posts anytime, users who subscribe will receive weekly email updates of new pits. Also other users can add posts (to be reviewed by you before being published)...just an idea... to make this more informative for everybody
&gt;Any resume that crosses my desk that says "Dropbox" is going straight into the toilet from now on. Ridiculous, so even if someone leaves Dropbox _because_ they disagree with the company's decision you won't even talk to them.
&gt;Don't tell me you use Windows servers or that you ship a Python interpretor in your desktop application. What's the alternative? 
**Gambas** Gambas is the name of an object-oriented dialect of the BASIC programming language, as well as the integrated development environment that accompanies it. Designed to run on Linux and other Unix-like computer operating systems, its name is a recursive acronym for Gambas Almost Means Basic. Gambas is also the word for prawns in the Spanish, French, and Portuguese languages, from which the project's logos are derived. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Personally, what i love in python is the simplicity and the versatility. In the last years, I wrote script python for several different scopes: - database access and management - device management via serial 232 and 485 (pyserial, i love you!) - XML file processing and/or CSV elaboration - HTML reporting - continuous integration - server management (for simple sysadmin jobs) - web service client - GUI interface - fast prototyping .... and much more. All these scripts worked fine both in Windows and Linux. I'm proficient also in Java and C#, but i don't think i could have the same result in the same time with one of them. I always use it when i need speed (at development side) and accuracy. 
Making a personal Booru clone for local use. The SQL is a pain in the bum, though.
Wrote a small program a while ago with tkinter to help with forensic accounting. Optimized it, and moved it online so anyone can access it. Spent today getting it to work with a few cases that I missed, such as negative numbers. Basically it takes in a list of numbers (eg: Different expenses) and finds out which combination of those expenses equals a goal number (eg: different expenses that are used for the Cost of Sales total) and allows for some leeway incase of rounding errors. Unfortunately any more than ~25 numbers slows it down exponentially. I'm going to try find faster ways to solve it later. http://jackgrimm.pythonanywhere.com/sumexcel 
Oh boy you scared me there for a sec; I am glad you will still be able to maintain it and I hope there would be good maintainers to step up. 
&gt; Why is that a bad thing? That's what virtual environments are, and they're best practice. Because you're selling it as a "native application", raising the user's expectations for responsiveness and efficient use of resources.
Training some running recently, and got sick of calculating paces and stuff, hence https://github.com/jonathanlofgren/running Mostly I was surprised the project name running was available on pypi.
test automation ... specially with robotframework ... detection of changes in image outputs with opencv ... other image analysis.
If you're doing a desktop app, Qt and Wx are fine. Kivy is more for multimedia apps that don't use a standard UI. TK is very basic and slow but it's fine for some single window calculator app. If you need to do really fancy graphics like a game, you're screwed. You'd need a game engine or HTML-5 front end.
&gt;C++ or some other language compiled to Assembler with good Qt bindings on the desktop. Ah, you're one of those guys. Ok bro. 
For a regular desktop app you have a point about web UI being garbage. However HTML5 UI is used in AAA game development because it's actually pretty good at doing nice graphics. They don't use electron though. EA has a fork of webkit and there's other projects like Awesomium.
Really nice work! &amp;#x200B; A cool addition (but will need some extra works) would be an undo command, in case you run it in the bad directory !
I switched to a dockerized Nextcloud on my own server and love it!! Having my own domain, and a let’s encrypt docker with a reverse proxy makes it awesome! Now I point to https://mydomain.com/Plex and I get my Plex server, change Plex for Nextcloud and I get my nextcloud instance. Having several terabytes at my disposal is game changing. Now I keep all of my photos, documents, everything in there. Best part is getting a new computer setup takes so much less time! I install Nextcloud, download all the files, and run a few scripts depending on the OS, and am pretty much staged in less than a few hours. Scripts still need polishing, because I always seem to forget to add some program or another. But I’ll get there. 
My pleasure :) Btw, I wrote a tutorial regarding a very similar scenario: http://blog.erezsh.com/how-to-write-a-dsl-in-python-with-lark/ &gt; It's harder to develop when the library is not being explicit, as you're always second-guessing if it was a problem with your code or you just broke another magic rule you didn't know about. Is that regarding your experience with Lark? If so, I'm interested in hearing more detail.
Microscopy image analysis :)
&gt; Ah, you're one of those guys. Ok bro. I'm one of those other guys: https://github.com/stefantalpalaru https://github.com/search?o=desc&amp;q=is%3Apr+author%3Astefantalpalaru&amp;s=created&amp;type=Issues
This post is better suited for r/learnpython 
This doesn't really seem related to Python 
Git gud
Does it involve dropping support for Linux file systems with some BS claim as to why? If y'all had been honest and said "there isn't enough paid users, we're dropping support because of that" it would have at least been honest. Hell you could have even charged Linux users $1/month for development support. 
Seafile plus a VPS 
What would you consider random then?
...that's how randomness works. With a large enough sample size you'll get a pretty even distribution.
I just figured at some point i would see a spike in one of the numbers so i was wondering if my method of generating random numbers was incorrect
If you were rolling a die, would you expect to see more fours than sixes, for example?
You do for small numbers of trials. But as the number of trials goes up, those small discrepancies get averaged out.
Try lowering your sample size from 10,000 to &lt;20. You'll be sure to see a spike then... 
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
Current work: SIP softswitch, signaling and control layer. Previous one: reference target protocol stack and test infrastructure around the production program (in C++). Two before: control program for HPC task scheduling and monitoring; startup controller layer for distributed realtime monitoring system (in Erlang); testing environment for all products.
&gt; Are you trying to brag? No, that's just normal activity for actual programmers. &gt; Does the Dropbox client have big performance issues that are because of Python? They don't, so what's the problem? The Dropbox business just threw money down the sink for over 3 years because of Python. That's a problem.
Location: Berlin ## What we do PEAT is a dynamic Start Up with the passion of bringing meaningful change and security to food production worldwide. We empower family farmers and growers to fight crop shortfalls and unnecessary pesticide use, with the help of our smart and free App Plantix. Plantix comes equipped with Machine Learning/Computer Vision algorithms that detect 300 plant diseases, pests, and nutrient deficiencies and help farmers to get the help they need. Our users can be found worldwide, with a high concentration in India and Latin America. We are excited to deepen those roots as we continue to scale globally. ## Who we are PEAT is currently a team of over 30 people, from different nationalities, who are proud to define and maintain the global standard in image recognition for plant protection. We believe in agile and autonomous workflows with an open-minded spirit. We provide spaces for creativity, individual thought and engagement within all areas of the company. To support our team in the centre of Berlin we are currently looking for a skilled and motivated developer (all genders) in full-time. We are searching for bright minds who love to engage with others thriving for beautiful solutions. ### What are your tasks We have made up a zoo - our databases for images, content, and community have animal names. Now we need a zoo director. You take care of all animals, cure them when they are ill and together with the IT team you think about having new animals, when needed. In other words, your task will be to work on the backend of our webapps and REST APIs. ### Who we're looking for * You simply love clean code and perfect sprints. * Your mother tongue is Python, you are at home with Flask, MongoDB and Postgres * You are very skilled in leading and motivating small teams, you structure their workflows in an agile way * You are experienced (+3 yrs) in planning, testing and launching software products * You have a very analytic and visionary mindset that helped you developing lasting software architecture in the past * You have clear visions and you are good in drafting precise concepts * You have great communication skills in writing and in person * You are a friendly person that loves to interact with others * You can provide strong references from people you led and seniors you worked for ### What we offer * Get the chance to implement your own ideas in a growing company and feel the impact you create. * Get hands-on experience building a revolutionary and meaningful product. * Become part of mission-driven, smart, and engaged co-workers that care. If you are interested leave a note here or send your application to jobs\[at\]peat.ai
Then I wouldn't work here.
No issues with Unicode?
This question pops up quite a bit.
Excellent tutorial! I was looking to create my first GUI app, and standalone app, so this will greatly help me. In addition to this, I've seen that qt has a GUI designer program. Is there a good tutorial on using this designer application with Python? It seems like it could be easier, if developing more complicated GUIs than a couple buttons and labels.
Yep! Still in on it. Let's do it !
You can create a `Session` object and set some headers on it, then call `session.post` or `session.get` and have the headers automatically attached. I don't think there's a way to set a base URL though.
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
&gt; Tf is your problem Failure being presented as success.
&gt; I'm not going to try and refute a clown It's a common theme in the Python community - critics like me are shunned, while mud-throwing perpetual newbies like you are celebrated by the rest of the choir.
Wx is ok. It looks native, but not modern. I use PyQt5, which is easier to code and prettier, but has an LGPL license unless you give them money. If that's not ok, try PySide2. They are nearly identical.
Everything I can, but the two biggest are PDF creation from a web interface and sanitizing user input for database storage (where "user input" consists of lots and lots of records in CSV files).
Funny video!
4head
You could create a function that attaches the base url to it and use it instead of requests.get or requests.post: ``` def my_api_post(endpoint, *args, **kwargs): return requests.post(base_url + endpoint, *args, **kwargs) ``` You could use this same pattern to attach the headers too. define them above and send them in with the post call in `my_api_post`
my only advice: don't rush it, do it gradually. 
Interesting! I'm curious why you built a new package given the existence of [nba_py](https://github.com/seemethere/nba_py). Why did you decide to build a package / why should I use yours over nba_py? I'm genuinely curious if I should take a look and switch over.
Yes. Both WX and PyQt are full-featured GUI toolkits and both look nicer than Tk. However, Enaml (https://enaml.readthedocs.io/en/latest/examples/tut_hello_world.html ) is nicer to use.
I am actually a contributor for nba_py. I believe nba_py still has endpoints that works, but it has become a bit dated due to not being updated in well over a year. In addition, this package has a lot more endpoints than those available in nba_py. I believe my structure and documentation to be a bit easier to follow. I also created tools to help me keep the endpoints updated during the season as well as analyzing newly discovered endpoints. I wanted to automate the analysis portion so that maintenance wasn't a time consuming task.
They explicitly mention that they ditched freezing in favor embedding a python runtime in their client. Is that what you mean?
^The linked tweet was tweeted by [@guardrailsio](https://twitter.com/guardrailsio) on Sep 26, 2018 11:42:01 UTC (3 Retweets | 4 Favorites) ------------------------------------------------- 🚢 We added support for \#Python! 🐍 You can now install the GuardRails [@GitHub ](https://twitter.com/GitHub ) app on your Python repositories and get security feedback right in your pull requests! ✨ [http://bit.ly/2N5gjwL](http://bit.ly/2N5gjwL) \#devsecops \#devops \#appsec \#infosec ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
give it to your employees
Yes, It works cross platform and in virtualenvs, which is a pretty good achievement. If you want something extremely lightweight I'd recommend trying pyimgui which takes a different approach.
From what it looks like, pull requests have been left unanswered and the original owner hasn't been active in that project for a year. In addition, I felt like the current structure of nba_py was not easily compatible with the tools that I created to make maintenance easier. Also, learning opportunities of creating my own package.
I believe that having everything dockerized would have made it way simpler
Actual URL to the thing: https://github.com/apps/guardrails
Iirc, the NBA API is realtime, updated along with the game being played, even up to the position of the players on the court. I met someone a few years back who was using the NBA API to generate electronic music.
A large portion of creating the extensive documentation was because I had a feeling beginners would be more interesting in this type of package. I know the lack of documentation can make it harder for beginners to get involved in a project, so I wanted to reduce that barrier of entry as much as possible. Thank you for your comments! Makes me believe I am accomplishing what I set out to do.
anything from simple automation scripts for building and deploying software, creating, managing aws and openstack vms, to writing considerably large software (more than just a script) such as this week for example involves an app receiving telematics via udp and storing them in a timeseries db. \[timescale\]. the previous week involved writing a desktop app using pyqt. 
Props to you! That's awesome to hear, it's also nice that you put it on github so people can collaborate on your project. You also made website and a pypi package? Man, you went the extra mile right there ;)
It would be great to have the same for NCAAF or NCAAB. I am a big Final Four fan.
Not really. My biggest issue was that in many cases 2to3 was more cautious than it should have been, insisting on copies when pyhon3 changed the API with generators.
No, I wrote that about PLY, it was one of the reasons I'm considering Lark for a future project. Thanks for the link!
Sessions is a great library to make wrappers around, and you're figuring out why! Permanently/reliably attaching headers, setting request domains, or accessing API endpoints where you have to construct the post data are great reasons to make a solid wrapper class. 
Yes, bad wording on my part. I love Python, but its inability to produce an exe out of the box is a disgrace to the language. 
\+1. And I think the typical way to have a base url is to subclass or use composition (I prefer the latter): import requests class MySession: def __init__(self, base_url): self.session = requests.Session() self.base_url = base_url def get(self, path): return self.session.get(self.base_url + path) ... &amp;#x200B;
Read sidebar and r/learnpython
I use Neovim with the Neomake, Jedi, and Supertab plugins. Most of what I need works fine when flake8 and mypy are available to Neomake.
r/learnpython
Got it will post there, thanks
r/learnpython
So, this is how it goes: I modified simulation.py, and wrote a new renderer with OpenCV. The "interactive" renderer is not much faster than the matplotlib based one (~5x faster), but the video renderer shines when recording to a file (an eyeball measurement places it ~20x faster than the matplotlib based one). I didn't work much on the palette, other than mapping the colormaps available with OpenCV -- if you need it, you can look at the LUT functionality to port the red-white-blue colormap over. I did notiche that `cv2.COLORMAP_BONE` makes evident some fainter detail and softer ripples that weren't evident with the colormap you originally used. All in all, this helped me dust-off my numpy skills, and I had some fun. Here are the files: **cv2r.py:** from sys import argv import cv2 import numpy as np from simulation import Simulation, min_presure, max_pressure, scale, wall simulation = Simulation() def clip(x): return np.maximum(0, np.minimum(200, x)) def compose(base, w): base[w==1] = [0,128,0] return base def render(data, cm, w): d = data - min_presure #- simulation.pressure.min() d /= (max_pressure - min_presure) d = clip(d * 255).astype(np.uint8) frame = cv2.applyColorMap(d, cm) frame = cv2.resize(frame, (1200, 800), interpolation=cv2.INTER_LANCZOS4) frame = compose(frame, w) return frame #@profile def loop(): w = wall w = cv2.resize(wall, (1200, 800), interpolation=cv2.INTER_NEAREST) cmaps = list(range(12)) cmidx = 0 cm = cmaps[cmidx] while True: simulation.step() frame = render(simulation.pressure, cm, w) key = cv2.waitKey(1) if key == ord("q"): break if key == ord("n"): cmidx += 1 if cmidx &gt;= len(cmaps): cmidx = 0 cm = cmaps[cmidx] cv2.imshow(f"1 m -&gt; {scale} cells, 1 cell -&gt; {1 / scale}m", frame) cv2.destroyAllWindows() def tovid(cmidx): w = wall w = cv2.resize(wall, (1200, 800), interpolation=cv2.INTER_NEAREST) cmaps = list(range(12)) cm = cmaps[cmidx] fourcc = cv2.VideoWriter_fourcc(*'XVID') writer = cv2.VideoWriter('output.avi',fourcc, 30.0, (1200,800)) frames = 900 for i in range(frames): simulation.step() frame = render(simulation.pressure, cm, w) writer.write(frame) print(f'\rframe: {i}/{frames}', end='') writer.release() if len(argv) &gt; 2 and argv[2] == 'save': if len(argv) == 4: cm = int(argv[3]) else: cm = 1 tovid(cm) else: loop() **simulation.py:** # initial values import numpy as np import sys from numpy.core.umath import pi from numpy.ma import sin scale = 100 # 1m -&gt; 50 cells size_x = 6 * scale size_y = 4 * scale damping = 0.99 omega = 3 / (2 * pi) initial_P = 200 vertPos = size_y - 3 * scale horizPos = 1 * scale wallTop = size_y - 3 * scale wall_x_pos = 2 * scale max_pressure = initial_P / 2 min_presure = -initial_P / 2 border = np.ones((size_y, size_x), dtype=np.uint8) border[1:-1, 1:-1] = 0 class Simulation: def __init__(self): self.frame = 0 self.pressure = [[0.0 for x in range(size_x)] for y in range(size_y)] self.pressure = np.zeros((size_y, size_x), dtype=np.float32) # outflow velocities from each cell self._velocities = [[[0.0, 0.0, 0.0, 0.0] for x in range(size_x)] for y in range(size_y)] self._velocities = np.zeros((size_y, size_x, 4), dtype=np.float32) self.pressure[vertPos][horizPos] = initial_P #@profile def updateV(self): V = self._velocities P = self.pressure V[1:,:,0] += P[1:,:] - P[:-1,:] V[:1,:,0] = P[0:1,:] V[:,:-1,1] += P[:,:-1] - P[:,1:] V[:,-1:,1] = P[:,-1:] V[:-1,:,2] += P[:-1,:] - P[1:,:] V[-1:,:,2] = P[-1:,:] V[:,1:,3] += P[:,1:] - P[:,:-1] V[:,:1,3] = P[:,0:1] V[wall==1] = 0 def updateP(self): self.pressure -= 0.5 * damping * self._velocities.sum(axis=2) def updateV_old(self): """Recalculate outflow velocities from every cell basing on preassure difference with each neighbour""" V = self._velocities P = self.pressure for i in range(size_y): for j in range(size_x): if wall[i][j] == 1: V[i][j][0] = V[i][j][1] = V[i][j][2] = V[i][j][3] = 0.0 continue cell_pressure = P[i][j] V[i][j][0] = V[i][j][0] + cell_pressure - P[i - 1][j] if i &gt; 0 else cell_pressure V[i][j][1] = V[i][j][1] + cell_pressure - P[i][j + 1] if j &lt; size_x - 1 else cell_pressure V[i][j][2] = V[i][j][2] + cell_pressure - P[i + 1][j] if i &lt; size_y - 1 else cell_pressure V[i][j][3] = V[i][j][3] + cell_pressure - P[i][j - 1] if j &gt; 0 else cell_pressure def updateP_old(self): for i in range(size_y): for j in range(size_x): self.pressure[i][j] -= 0.5 * damping * sum(self._velocities[i][j]) def step(self): self.pressure[vertPos][horizPos] = initial_P * sin(omega * self.frame) self.updateV() self.updateP() self.frame += 1 argc = len(sys.argv) if argc &gt; 1 and sys.argv[1] == '1': wall = [[1 if x == wall_x_pos and wallTop &lt; y &lt; size_y else 0 for x in range(size_x)] for y in range(size_y)] elif argc &gt; 1 and sys.argv[1] == '2': wall = [[1 if (x == wall_x_pos and wallTop + scale &lt; y &lt; size_y) or (wall_x_pos - scale &lt; x &lt; wall_x_pos and x - wall_x_pos == y - wallTop - scale - 1) or (wall_x_pos &lt; x &lt; wall_x_pos + scale and x - wall_x_pos == -y + wallTop + scale + 1) else 0 for x in range(size_x)] for y in range(size_y)] else: wall = [[1 if (x == wall_x_pos and wallTop + scale &lt; y &lt; size_y) or (wall_x_pos - scale &lt; x &lt; wall_x_pos and x - wall_x_pos == y - wallTop - scale - 1) or (wall_x_pos &lt; x &lt; wall_x_pos + scale and x - wall_x_pos == -y + wallTop + scale + 1) or (wall_x_pos - 0.75 * scale &lt; x &lt; wall_x_pos - scale / 2 and x - wall_x_pos == -y + wallTop - scale / 2 + 1) or (wall_x_pos + scale / 2 &lt; x &lt; wall_x_pos + 0.75 * scale and x - wall_x_pos == y - wallTop + scale / 2 - 1) else 0 for x in range(size_x)] for y in range(size_y)] wall = np.array(wall, dtype=np.uint8)
I migrate a lot of data for clients. I made a tool to covert multiple files into a single SQLite database, also added a function that take a query’s and dumps the result to a csv file. Saves loads of time. In my day job I use it for analyzing lots of data from a government entity who still is on a mainframe. Lots and lots of pandas! My current side project is a basic rv campground management software written with flask about 90% complete. 
James, toss some examples our way to ease discussion.
Yeah that might work too. I haven't extended Session before but I'd be surprised if it didn't work. Give it a shot and see what happens! If anything you can definitely extend the entire requests class, I've written a thin wrapper in the past for a quick api object
Sure, let me dig a couple up.
thghh
Want to send me a PM with the specific modules / directories you're talking about and I can elaborate further?
You can use the csv module built into python. It handles well formatted csv files that have CRLF in the data. https://docs.python.org/3/library/csv.html 
This is cool but I feel like there's an awful lot of messing about in http.py when what you need is response.json()
I'm sure you didn't mean to make a general sweeping statement about all of Python's standard library. There is plenty of well-written modules in the standard library. For example the collections module in Python is a thing of beauty. I've learned a ton of good practices by reading that code. https://github.com/python/cpython/blob/master/Lib/collections/__init__.py `cmd` module is also a good one: https://github.com/python/cpython/blob/master/Lib/cmd.py The logging module is indeed a sore thumb in the std library. That's probably why there are many third-party logging libraries that try to ease the pain. 
You had no idea that DropBox client was written in Python that further shows that you are just pushing your bias. The difference between the DropBox, and you, the expert is that you didn't create shit.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
I semi-agree with you. I felt a bit uncomfortable at first creating http.py as well as the DataSet class in the Endpoint class, but I realized that this API Client should be as universal as possible. I want to ensure that people can easily access the data in a data structure of their choosing. As well as being able to add any other data structures easily.
Checking it out later! Looks to be exactly what I've been needing for some visualization projects.
Most of the time, if you wrote straightforward code in Python 2, converting it to Python 3 isn't too painful. The real trouble is if you wrote or make use of content that heavily uses non-Unicode strings in non-standard ways. I can't remember which library it is now but one that I was using did a lot of fiddling with what in Python 3 is considered a byte object and not a string. Especially doing things like reading and writing from StringIO (which now would be a BytesIO) and then manipulating it with the `re` library and then doing even weirder stuff involving, I think, struct. That was a nightmare to debug and convert to Python 3. Other than, I can't say enough good things about Py2to3. You can use it to generate Python3 code (although you can generally ignore its insistence on wrapping `dict.keys()` etc in `list`) and then do a diff with your previous Python 2 code and then write the Python 2 code to be cross-compatible with both versions so you don't have to worry about migrating right away. Get everything working on both Python 2 is more work, but it also means that the actual moment of migration should be relatively painless vs. having Python 2 and Python 3 codebases running in parallel. If you have some kind of continuous integration system, you can make it so that any commits that aren't bugfixes go through some sort of mini-test that checks that the updated file conforms to Python 3 requirements. It's likely that unless your code is very decoupled, doing a comprehensive test won't be possible since you'd have to fix every other file that file is dependent on. But you can definitely do something like run the file through 2to3 and if it suggests necessary changes, the commit doesn't go through.
Using 'global' and as a kinda side thought mentioning it is a bit frowned upon... "maybe that's why the keyword is colored, to make you realize python doesn't like it"? Oh man, it's not just "python doesn't like it", it is simply a bad, very bad, so bad idea in the first place. In any language. Why not simply teach a commonly accepted 'good practice'? Sad, so sad...
I'm no desktop app expert (only had little experience with java/swing before). I had to develop a pyside2 (very similar to pyqt) app recently and it's been more pleasure than pain (I can't say the same with swing for sure...). All the widgets are very well thought and there's tons of help and examples online. Being a binding, the api style may feel unpythonic (naming conventions, etc), but at least you can always rely on c++ docs and examples whenever pyside2 docs are lacking. Also, pyside2 is perfectly packaged by pyinstaller so distributing your app is easy. At this point, I don't see why I would use anything else for desktop apps. 
I mean, I feel like if you have engineers like that then converting from 2 to 3 is only a small part of the development problems you'd be having.
&gt; The difference between the DropBox engineers, and you, the expert is that you didn't create shit. Your reading comprehension failed you: https://www.reddit.com/r/Python/comments/9iuzrm/how_we_dropbox_rolled_out_one_of_the_largest/e6nysom/
We use backblaze b2 https://www.backblaze.com/b2/cloud-storage.html
What's the cost structure like on something like this? For example, if the total data nears 10TB
Blanket cost page. Bet you could negotiate a payment structure though https://www.backblaze.com/b2/cloud-storage-pricing.html
Awesome - thanks! I noticed it has a 'download' fee of $0.01/gb. How does this come into play if I am actively updating/changing/accessing the data? I've never worked with such large datasets before and have always stayed local but shifting to the cloud, I suspect that it would be very costly. What would be an ideal setup? Would I need to use a web service of sorts to run my python queries?
Thanks for reporting. It was due to a defunc plugin. It's fixed now.
500gb is nothing nowadays. That being said, dirt cheap external hard drive should be most efficient. ~$50 for twice as much as you need is nothing, I'd say.
I think thats coming in the next posts. 
Amazon S3 is the way to go
&gt;The Dropbox business just threw money down the sink for over 3 years because of Python. It's not like they shut down the business for 3 years, don't be dramatic.
You’re doing good work
I am a devops engineer. I am using python to automate every boring job I can find. I wrote a riots for an utomated a ci/cd pipeline that pulls docker images and deploys them on test, does integration tests and moves them to acceptation. Just finished scripting that generates kubernetes config from templates where app version and registry are filled in and committed to git. Wrote a dashboard in flask that shows which versions of containers are running where. 
Very cool. I'm going to crack it open tonight. I see you don't have any issues open. If you had to make a wishlist of how you would add on/extend this, what would it contain?
Change the order... put your fantastic party check first... then fall through to the good party. The way you have it, the party is good... because the wine and pizza check are both true... elif only comes into play if the conditional before it is false. by re-ordering, putting the most difficult test first... you can resolve the issue. 
Why'd you want us to do that? They suck. At this point I'd go as far as tell someone new to programming to just briefly read first 3 sections of literally any language that's on https://learnxinyminutes.com/, then try to hack something together, or google something individually, e.g. you skip through the start because you either understand nothing or you realize that these things are somewhat similar like in math, e.g. x = 5 (even if you literally just read "x EQUALS 5", it still makes sense for "5 mins into the programming"), you see something like *stament*, can't work out what it means, you tap google with *statement in programming*, hell, there would be way less questions if people just googled *x in programming* instead of asking same thing over and over again every week. That being said, best online course I know is https://learnxinyminutes.com/docs/python3/ Goodluck.
I hope so, because this article is useless for anyone else wanting to migrate. 
Looks like it worked. Thank you so much for the help.
Once the data is cleansed, it will be referenced to create new data sets. 
&gt; But wait, there’s more There’s much more to tell about this process. In future posts, we’ll look at: &gt; How we report crashes on Windows and macOS and use them to debug both native and Python code. &gt; **How we maintained a hybrid Python 2 and 3 syntax, and what tools helped.** &gt; Our very best bugs and stories from the Python 3 migration.
I must agree with the guy though, there are parts of the standard library that are very strangely written-- for example I've seen places such as csv reader and writers do things like * rely on sideeffects from properties * do overly explicit tests for truthiness/lackthereof that slows things down * create one data type just to have it be converted into another. For example there's a spot that turns a Sequence type (except it doesn't need to be a Sequence type, just a Collection of strings) into a zip iterable into a dict, compares the keys of this dict with the original sequence, then creates a list from that sequence.
without any more info : put it on your local hard drive. total size, latency, and access patterns area absolutely critical here, and you didn't provide any. what's 'many'? ten, a hundred? a million? how often will they be accessed? once? non-stop? does latency matter? is a second ok? an hour? a week? who needs to access it - just you, locally? a global team? 
Totally dependent on your use case.
That's actually how most companies approach hiring: entirely subjective, mostly bullshit criteria. "I don't like the school you went to," or "I don't like that company," or "that name seems hard to pronounce." I recall one crazy one from Reddit long ago: *throws half the stack away.* "I don't want to hire unlucky people."
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Get the code working with both Python2 and Python3. Make the tests pass in Python3. Keep working at it until you can switch to Python3. 
You are awesome man! This is some high quality shit. The website is simple but straight to the point. Do you mind if I'll try to copy this so I can learn managing files with Python? Won't publish it anywhere, just for myself to learn more :) 
awesome! love the detail and amount of the documentation 
This is correct. I can read it but the middle-of-the-field \\r\\n is causing me trouble. I don't have much say over how the data is coming to me so I'm having to deal with it as is. I've accounted for all the other garbage in the file but those CRLFs.
Thanks for suggestion. Csvreader does seem to pull it in correctly so far as it's not splitting to a new line at the random CRLF but I'm stuck trying to get them out. I don't have much say over the data coming in so I'm doing cleanup before I can work with it. I have fields in the file that have the CRLFs as part of the field data. That's where I'm getting hung up.
I use a adblocker called [diversion](https://diversion.ch/) in my Asus router. This script uses another tool called [pixerlserv-tls](https://kazoo.ga/pixelserv-tls/) to block https ads. Recently I installed a beta version of pixelserv-tls which was becoming unresponsive randomly. &amp;#x200B; So I wrote a python script runs from my Raspberry Pi. Every 5 minutes, the scripts checks whether the service is running or not. If not, then it uses fabric to log into the router and restart the service.
Hi, mypy dev here. We actually recently added a section aimed at *you* person-starting-to-use-mypy-on-existing-code. You can find it here: https://mypy.readthedocs.io/en/latest/existing_code.html In general, we want typing to be gradual, but we also want to be able to actually know enough type information to tell you about issues. Our current default run is a bit strict for an unannotated codebase. This is something we are hoping to change at some point in the future, but we have some other high priority things to focus on at the moment.
Panel discussion on packaging and distributing Python code. How do you get package code for the public (PyPI) or internal use? What the heck is pipenv? What are best practices for Django under Docker? Hopefully someone can explain conda to me, 'cuz huh? Panelists include Josh Smith, Chad Whitacre , Mark Meredith, Chris Winters, Pete Fein We'll take questions from Reddit live.
Yeah, that's what I've ran into. Possibility of multiple CRLFs in the same row. There are a few different 'comment' columns so I could account for those. I was hoping it was something I just hadn't stumbled on yet but looks like I was on the right track. I might see if it's the data provider can strip those out if possible. Thanks for the input.
This is sick dude, good work
It totally depends on what you want. Hard drives are best for long term storage. For large data, I store it locally and probably in hdf5 format.
&gt; I use PyQt5, which is easier to code and prettier, but has an LGPL license unless you give them money. If that's not ok, try PySide2. They are nearly identical. That's not right. PyQt5 is GPL, it's PySide2 that's LGPL. WxPython is the most permissive of the three, https://wxpython.org/pages/license/index.html 
You have just brought shitposting on r/nba to another level
You can suppress the stub warnings with by having the file `~/.mypy.ini` with contents: [mypy] mypy_suppress_stub_warnings = true 
&gt; That's not right. PyQt5 is GPL Then there's some caveat. They fine with Matplotlib supporting PyQt while maintaining their BSD-3 license.
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
Could you link the article? I know there are some projects that are working to make Python a front-end language too (maybe they're dead now, though), and there's probably a Python-to-JS transpiler or two out there.
\[Transcrypt\]([https://www.transcrypt.org/](https://www.transcrypt.org/)) is one transpiler option. It has all the same limits as JavaScript does as regards the local computer, because the final result \*is\* JavaScript... but it lets you write the code in python.
https://hackernoon.com/could-pythons-popularity-outperform-javascript-in-the-next-five-years-abed4e307224?mkt_tok=eyJpIjoiTm1VMlkyUmpaV0k0TnpNMyIsInQiOiJZUjU1VmpvK2h5Ykd0ZktyRFZ6T0YwM0E5U3MrbXRhSjZMcEpvN2ZkRnVXOHZhTHkxVGhncXFJVUxWa1o3YTRUclRMNXlsUkRBT0FkbkliV2JrMzFZa3hyVENOK3crU1d1NDZvdUpaK0xJV3o0YVRzK0J5VHJ4bWNpZkFDVWE2NyJ9
It's a heavily customized tool geared towards stats.nba.com. My intentions would be to create a tool for every API Client available for the NBA. I believe data.nba.net might be another. To answer your question, we wouldn't be able to drag and drop it. However, we'd be able to take the same ideas and principles that I used to analyze it and use those to create a separate analysis tool for the NHL API. https://github.com/swar/nba_api/blob/master/docs/nba_api/tools/stats/endpoint_analysis/analysis.md This documentation page might be able to give you more of an idea of how I went about analyzing the NBA one. If I can help in anyway, please let me know. 
So a dictionary? 
I'm a big fan as well. However, be warned that it doesn't play nice with merged cell borders and object text boxes. 
So you aren't having problems with csv reader, you are having problems with the string you get? field.replace("/r/n","") should return a string without CRLF's in them. 
Any recommendations for something similar for the NFL and/or NCAA Men’s basketball?
As someone who has extensively used this APIs predecessor, thank you. Due to the constraints of some portions of a personal project I was working on, I ended up desiring an NRT feed, but hopefully this will inspire the next round of NBA stat junkies to land good jobs. Great work- I'll dig through it more soon and see if I can help in upkeep in any way 
Really cool to see :) thank you for letting me know!
I ran this in a wrong directory once and thankfully I only had about 10 files in it so it was quick to resolve but I would love to add this to it. All of the paths are saved right until the very end and then they are pushed to a text file to let you know where they all went so the functionality for reversing it shouldn't be too difficult as all the paths are already there. When I have some free time from uni/work I'd love to add the feature. 
If you're in a position where you can unironically ask a question like that... sure, why not? Knock yourself out.
brython lets you do this with a small performance penalty but works well, as far as i can tell.
Why not just use QML if you're going to use Qt anyway?
roadmap : 1: implement DiversityException when interpreter doesn’t see the words gay, lgbt, black and not_a_slave as variable names 2: change the language name to NotAPython by respect to people killed by pythons 3: from now we share code through email because merging things to « master » was too hard for us and against our new CoC
Is your filename named "imapclient.py" by chance?
Nope it’s email.py
It's is possible to download play-by-play video from the website?
Honestly, the specific language you learn initially isn't very important to what you do in the long run. A good software engineer will learn lots of languages over time. There are pros and cons to both options. Pro-Python: Python is easy to learn and pleasant to code in. You will almost certainly have fewer issues understanding Python and learning Django and/or Flask. If this is what you need to really enjoy learning, and to push forward effectively, then it's probably a good idea. Pro-Javascript: There are a lot more jobs. Every FE needs JS one way or another, and lots of programmers don't want to do it. Getting your foot in the door would likely be a lot easier, and an experienced JS programmer who has learned Python on the side will have a much easier time getting a Python job than an inexperienced programmer. Also, most jobs will need *some* JS even if that's not their main thing. If you're in a position to get your foot in the door doing JS soon, then that's probably the smart play.
Can you try this instead? from imapclient import IMAPClient imapObj = IMAPClient('imap.gmail.com', ssl=True) 
Going from color ==&gt; hex would require only a dictionary. Going from hex ==&gt; a human readable color requires some logic. Plus it seems like this library let's you choose from different color names, and also has some functionality for mixing colors and getting the "distance" between colors.
&gt; from imapclient import IMAPClient &gt; imapObj = IMAPClient('imap.gmail.com', ssl=True) When I do that, I get the same: ImportError: cannot import name 'IMAPClient' from 'imapclient' (C:\Python\lib\site-packages\imapclient\__init__.py) If I do just import imapclient, I get (for reference): NameError: name 'IMAPClient' is not defined 
I agree. Python is by far my favorite language too. I would also argue that it's a good introductory language, a great scripting language, and incredibly flexible with its many libraries. That said, if somebody is looking to land an entry-level job in tech Python would not be my first recommendation. I would tell them to learn HTML, CSS, and Javascript (go spend a few days on W3schools), follow a tutorial to make a dynamic website running Node on something cloud (for the buzzword, personally AWS), and by the end of that they can start applying for lucrative entry level work. OP specifically said they want to learn enough to start making money, so that's my recommendation. If they had a different question I might recommend Python, but when the question is "I want to make money in IT, what should I learn?" Python is not going to make my top 3 answers.
Rename email.py to something else. It's already used by Python (https://docs.python.org/3/library/email.html)
If you're working on it nothing beats local storage.
Thank you! I knew it would be something stupid I did 
Yes. Do it. Do it now. 
you should probably use powershell for something like that 
React is as difficult as any new language (spoken or written) commit your neurons to it and WiLL get easier.....don’t give up......Front End work almost always needs it.......
Here are some points that would make my life easier if I were you, * Repeat 100 times: Indices start from zero in Python. * Python lists are not the same as numpy arrays. * As a starter user Jupyter Notebook. This helps you to divide your code in chunks and execute separately. * When you understand the nuances of Python, VS Code is the best for small scripts. * Give your files very long explicit names. You are going to use a lot of tricks of your own in the code. Naming these tricks explicitly in the script names makes it searchable. You may think you are going to remember in which directory the script is, but after couple of months, that's never the case.
It sounds like you are in the early stages of learning programming / computer science. I'm someone who likes programming in Python, but has fallen in love with javascript programming over the past couple of years. I program in both quite regularly and enjoy both languages. A few things JS is probably a terrible first choice for picking up programming. There are far too many complicated things about it that make the entire process daunting. - The tooling required to get anything done is simply staggering and extremely complicated to a complete newbie. You need to figure out Webpack, Babel, NPM, Node.js and a whole bunch of other stuff just so you can start writing code. And you most certainly don't want to not use ES6 syntax, so you're definitely going to need to figure out what transpiling is and how to get it all working. - Good luck trying to figure out how imports / modules work in JS land. At least now, with ES6, named / default exports have made things a lot more saner, but I still don't really understand the difference between UMD and CommonJS and whatever else style of modules there are. - It is a Prototype based language, so it really doesn't do OOP particularly well. So if you start with JS, you're not really going to learn how to organize / write code the OOP way. Now, that doesn't mean it's the only way, but most folks start learning programming in a language with robust OOP support. And OOP is easier to wrap your mind around over Functional Programming if it's your first exposure to programming - JS is pretty nice for functional programming, which I've come to really enjoy (and now find Python severely restrictive in that area), but the cognitive load of parsing / understanding FP code is pretty high to a newbie. It's not uncommon to see 3 to 5 levels of nested functions and you pretty much have closures and higher order functions strewn about all over the place. It is extremely powerful, but also extremely daunting to someone new to programming - JS moves extremely fast and the amount of fads that come and go are insane. You could spend a year learning something and being good at it, and then a year later, your knowledge (regarding tools/frameworks) pretty much becomes obsolete. Unless you want a JS job, or have one, it simply isn't worth the effort of putting in all the effort to constantly stay up to date with the community. Sure, the core language is more stable, but you're pretty much always going to use JS with other frameworks / libraries to get stuff done since the batteries aren't included with JS unlike with Python. All that being said, JS is also a really fun language, and I say this as someone who use to roll his eyes at the mention of JS. With all the new language features, it's actually a pleasure to code in, and it's amazing how much you can build if you get good with JS. I've built several desktop Apps using Electron, deployed a pretty complex Web app on AWS that utilizes Flask + React + MobX, and have also done a bunch of cool data visualization / interaction work using D3 and dc.js. My advice to you is: - Start with Python (or something else that interests you). Focus on learning good programming practices. Most importantly, don't focus on learning a language. Focus instead, on learning some of the basic "computer science" things.... Algorithms and data structures, OOP, Functional Programming concepts, Software engineering concepts, etc. - I cannot recommend enough, Berkeley's CS61A class (Structure and Interpretation of Computer Programs - In Python) - https://cs61a.org/ . Many years ago, I spent a couple of months working through the entire course, and it was the single most instructive thing I ever did. I finally "grokked" closures and recursions and it pretty much opened my eyes with regards to Functional Programming concepts. - Make sure you work on projects to learn. Reading books and doing courses alone wont get you very far. You learn a lot more by doing and re-architecting the same code over and over again as you get better at coding and structuring software. I've loved computer programming since I was a kid, but I never took a formal CS course in high school, college or grad school though I did dabble with MATLAB and Python during those years. I started pretty much from scratch about 7 years ago (started with Python) and now I code every single day for work. My only real advice to you is to be persistent, and to focus on learning CS principles and concepts rather than languages. Once you understand the former, the language for the most part becomes a trivial detail. The other piece of advice... once you do get good at programming in a language, pick another one up that is very different (perhaps a FP language) so you expose yourself to other ideas and concepts. Being exposed to different ideas and approaches to programming will be invaluable in helping you improve the way you tackle problems. 
Thanks. You paint a much rosier picture than some of what I read in the webdev section. They're take on it is the bootcamps changed everything. Not necessarily for the better. They all make it sound like you'll never get a job without knowing Full Stack JavaScript before getting a job. Do you mind sharing with me which city this is?
On my current project, I created a microservice that accepts an excel file, validate it and if there is an error on the excel file, it will insert the transaction history on the database and it will upload the excel file to s3.
Does anyone have a little example of how to pull basic stats using this? 
+1 for Transcrypt
Depends on your application. What are you trying to develop ?python is a great language
Wait, are you in love with JavaScript the language or JavaScript the ecosystem?
Well I read your original post and only saw references to front-end things (React, Angular, etc.). You didn’t mention wanting/needing to learn back end at all, but then you say you want to learn python. So I took that as “he wants to learn, and use, python for front-end work as a substitute for React/Angular”. That confused me. To attempt to regain my internet karmas, I’ll add that I recently drank the python look-aid and love it. As a PHP convert (and primarily web dev guy), I recently got into Flask, and am now convinced to completely swap over (unless something really calls for PHP). Short of crossing the deployment bridge with Flask, which seems way more complicated than the standard LAMP stack, it’s been an easy adoption. I think you’ll actually love Python. Give it an earnest weekend and I’ll bet you stick with it!
I'd be proud of that username
If you want to switch from JavaScript to Python for a while then do so. It doesn't hurt to explore different languages. You'll need to know several to make it in today's modern programming world anyway. Don't write JavaScript off entirely though because you will need it if you're doing anything on the web. You may not need React, but you will need JavaScript. I do web development for in-house apps and I write code in no less than 4 languages in any given day. 
That’s pretty great - I’ve been looking for an easy way to get nba stats for toying around with data science projects.
No, that's not what I meant at all. I was following a JavaScript learning path. It began with HTML and it led me all these months later to where I currently am with React. React actually helped me learn JS a lot more. To be honest, I wish I had started with it sooner but all the gurus say "learn JS deeply before React." When I said to abandon JS I meant to abandon the entire learning path and switch to Python which begins with Python basics. I took a beginner course and I really enjoyed the clean and easier to read (for me anyway) code. 
I don't have examples handy but in the past I've used *zeep* against SharePoint SAOP interface. I believe these days SharePoint has REST interface one could utilize which means *requests*. Two issues you will have to solve is the authentication and then SharePoint API (quirky)
Why are you trying to discourage someone who created something? 
I'm not. I'm encouraging them to, in future, create something new.
Python is awesome, but JavaScript is here to stay too. Learn to live with it, someday you might need it.
Your job market awareness may be different than mine. In terms of gross I get the impression that left coast is still the place to be, though cost of living will eat you alive. DC metro offers good pay on the East coast, though again cost of living is not great. There are still good opportunities in other cities. Plenty of places where making even $60k is competitive or better than low 3 digit offers in aforementioned areas. Anyway, YW.
If you were starting from scratch, I'd probably recommend Python over Javascript, but you've already spent much of a year on Javascript. I would stick with Javascript and at least learn the basics of React. Then you can learn Python and Django or Flask. I don't think Flask will give you as much problems as React did. That being said, if you're so frustrated with React you're tempted to give up entirely, it'd be fine to take a break and do some backend work in Python. My reasoning is that, even though you don't care for front-end work a lot, being able to do both is best for your career prospects long-term, and you've already learned Javascript.
I love Python, and I use it often, but it's far less "important" than JavaScript for many purposes. You NEED JavaScript for web development, and it's well worth being literate in anyway. ES6 does add some things, but it's not a big deal to write polyfills or transpile to get around those issues. Both Python and JavaScript have some elements of functional programming, but even with Python's great decorator syntax and JavaScript's occasionally weird binding, I find passing functions around in JavaScript much more natural, especially with the behavior of closures. As far as object oriented programming, both Python and JavaScript do their own thing. Sure, Python has something closer to conventional OOP, but it's dynamic and duck typing is encouraged. I'm probably going to get some flack for this, but learning to think in terms of interfaces with C# or Java would probably be of great benefit. But overall, don't abandon any language unless you absolutely have to. The more you know about the differences between languages, the better you'll get at understanding why a particular language acts as it does.
You know, React + Django Rest Framework or Flask is a great combo... lots of us do both frontend and backend work. There's a lot of situations where you'll need to do both, even at very large corporations. Do both. JS is fundamental to the web, as in, there is no escaping it. Whatsoever. And Python is an amazing backend and systems language. For web, you can't go wrong learning both JS and Python. Python not only will help you on the backend web dev, but also all system tasks and scripts you might need to write. Just do both. Keep learning Python and certainly add it to your skillset, but maintain your JS. Make a simple react + flask website.
Any suggestions for learning React? I couldn't wrap my head around even the introductory tutorial on the Facebook page, and that really discouraged me since I feel like I should have been able to grasp that at the very least. I'm reading something else that is breaking the concepts down even further, but it won't go deeper than a very basic level. 
I can’t say specifically how you should learn React but I will this “ to learn any thing new you must spend time on it” practice practice practice even if you don’t know much
Should I abandon cooking for horse riding? 
Hey this website is down and I can't access it right now. Is it down forever? 
I build tools for my metrology team. Right now I’m working on making our checks and balances a little less human error prone and a lot easier to complete. It’s nice not being a full time programmer but still being able to get paid to program.
&gt; You NEED JavaScript for web development Not anymore, especially with languages that transpile to Javascript like Typescript... or even Python, via [transcrypt](https://www.transcrypt.org/). 
I'm a python developer looking to learn javascript right now for the marketability. A couple of the jobs I've wanted have all had JS as one of their requirements. If you wanna work with both, I've been using the Flask python libraries for all of my web hosting, and running all my JS on sites hosted by my flask app. Two birds one stone?
It's more important to learn *how to code*, as in learning the how code logic works. Different languages are just differences in syntax for the most part. There may be greater differences between say, C++ and Python, but high-level languages like JS and Python are very similar. I personally alternate between the 2 for my work. I use Django (Python web framework) and JavaScript. I can alternate between the 2 seamlessly.
No, Javascript is fine because frankly it's one of the most-used languages right now in the marketplace, and with Node it works for backend as well. Feel free to learn Python! Your second language is not nearly as hard as the first, and your third language is basically the point where languages start to melt away and logical structures start to emerge.
Nah, there are totally more python jobs https://www.codingdojo.com/blog/7-most-in-demand-programming-languages-of-2018/
The idea for this came to me when I was having a cup of tea with my friend and I asked him "What color is my cup?" and we both had different names for it. So I decided to create a python script to find the name of color using hex values. I was more interested in the name of colors as they are called by a human. We have colors from the Wikipedia colors list and from the xkcd survery https://xkcd.com/color/rgb/ . I was already aware of the other packages but none of them provided such a long list of colors. I created something that I wanted to use. Just because everytime we are trying to create something new we end up creating nothing. Maybe when trying to create something that is already there you may end up with something even better.
Not at all. I've been working as a developer for 20 years, and I can guarantee you that a LOT of the knowledge you got from Javascript will be applicable to other languages. I work with Python and Javascript all the time. If you a beginner to programming, then I can understand that it might be a bit too confusing and overwhelming to learn both at the same time, so that is maybe not a good idea. Better in that case to concentrate learning the basics of one, and then the other. But otherwise, I think those are the most applicable languages you can actually learn at this time.
Unless you're asking that because of a job or learning opportunity that suddenly popped up, you don't have to make a clear cut decision yet. Both languages are very similar anyway, and python has even been an influence on javascript. The more you learn the easier it is to learn even more if you bother to make connections between what you learned without anyone telling you to make those connections. For example since I'm learning Prolog and the abstract algorithm for unification and logic programming I've been tempted to implement a small inference engine for a project I'm writing in Go, which is something I would have never imagined doing beforehand. Or same thing with Erlang, I've recycled the general idea of the gen_server with channels or queues both in Go and in Python, which I wouldn't have done if I didn't learn Erlang.
No they are not official names. They are from two lists: Wikipedia https://en.wikipedia.org/wiki/List_of_colors:_A-F https://en.wikipedia.org/wiki/List_of_colors:_G-M https://en.wikipedia.org/wiki/List_of_colors:_N-Z XKCD survey https://xkcd.com/color/rgb/
The infinite number javascript flavors (vanilla, es6, jsx, ts, etc) are definitely going to be a distraction to learning the language -- not to mention the complicated build systems used to compile front-end code (webpack). I'm a professional react developer, and would still need to google basic language features outside my specific domain. For example, I've never written a `for` or `while` loop in js. That said, I learned to program with python. The biggest thing that helped me learn was a visual debugger! In my case, pycharm. Being able to step through code and watch variables evolve helped me have that "AHHA! moment". Python has a limited a syntax which is nice. They don't have a million variations of do ... while loops, or method aliases, or other crazy things. It's simple! Good python reads like broken english -- it's great. Learning JavaScript is inescapable for web developers. This will change in the future, but for now, javascript is the only way to create rich interactive experiences for users. Maybe loopback to js someday, but for most programming newbies, I would totally recommend python over js.
Frameworks like react or (insert any other framework from any language) are complex, you have to learn how to deal with the frustration of learning something hard that you won't probably fully understand for a time. I'm not saying you should stick with the javascript ecosystem from hell, but it seems that you are expecting things to be easy.
&gt; At this point, I don't see why I would use anything else for desktop apps. That sounds promising. Thank you for your insightful reply!
if you want do modern full stack web development, especially in data science or data processing fields I highly recommend learning both. Python runs on the server side to do the data munging tasks that it does well, sends data to javascript client.
It’s one of the most popular languages in the world, and I t’s used extensively in finance and research for running numerical simulations and data analysis. 
Ehhh always fall back to first principles. (That is why you do CS, after all - any weenie can do a couple of bootcamps to pick up the hipster stuff). You absolutely do not need webpack/node/angular nonsense when learning JS. Every browser today supports almost all of ES5. Learn that, and then pick up ES2015 and onwards. This also lets you appreciate things like why people made the decisions they made when abstracting out JS.
What do you do at the financial company?
It's just taking code you write and refactor constantly; rewrite when needed. The main principles you are trying to master and find balance in are: Don't Repeat Yourself and Readabiity as you find and fix bugs and think of new features to implement. The "mind your surroundings" advice I always give to "laypeople" trying to improve their code is: Every time you're about to copy a chunk of code, and paste it to make a smallish change, consider whether there is a more appropriate abstraction to implement. Data structures is sort of the other thing to master. Get comfortable with iteration and recursion, but in a "smart" way. For example in JS: 80% of the time you don't want to use a `for` loop to iterate over an array, you want to use Array.prototype.forEach or Array.prototype.Map.
Data sets of...what exactly? Is the data single files gigabytes in size? It is millions of small files? Is it structured data or unstructured? What are your processing needs? How does the data need to be shared? In most cases local storage is likely going to give you the best performance per dollar. Whatever the data looks like local access and the `multiprocessing` module are going to be really useful to you. If the processing you need to do is IO bound you'll probably want RAIDed SSD online storage for your working set and then larger rotational storage for near-line storage. A couple striped SSDs is going to have way higher throughout than your network card (saturated 6Gbps bus vs saturated 1Gbps network port).
If you want to do webdev, you need javasript. Python isn't suitable for the in-browser logic required for web development. Sure people are developing Py2JS compilers, but they're all a massive kludge and only really intended so that Python programmers can do webdev, you're better off learning actual JS. But that's the only place where JS development is really suitable, there's Node.js for using JS outside of the browser, but that's a similarly hacky kludge and only really intended so that webdevs can do other programming. For the most part you can't write a Django/Flask web-app without some JS because you'll likely still need some in-browser logic, but for a lot of cases where you'd write Django/Flask web-app you probably can't write it all in JS because you'll need something on the backend server to communicate with. So really, it boils down to what your project requires. Personally I'm a Python developer and I very rarely do webdev, so Python's fine for me. I do however know enough JS, HTML, &amp; CSS to keep me going when I'm writing a small Django/Flask web-app but I wouldn't last long on my own before I'm out of my depth there if that project grows particularly large.
I don’t think you should abandon JS entirely, but maybe don’t get hyper specific with the frameworks you learn. With how fast JS moves it will be hard to hit that moving target and honestly I don’t think a tech firm you want to work at will expect every candidate to have the exact keyword matches for their specific paradigm of JS. But certainly having that on your resume will land you in the callback pile more often than the shredder. That aside, certainly learn python it is the best thing I ever did for my career. I’m not sure how marketable Django and Flask are but they are just one part of the stack. More and more employers are looking for full stack programmers so you should certainly move down the stack a little.
Why not keep both? Knowing only one language is useless, learn how to program instead and you won't have issue using and/or learning other languages. Basic constructs are the same in all of them. Besides, JS and python are used for different things, so what really matters is what you want to do, not what you want to use. When you use a tool and just want force something onto it, it's not really going to work. You use screwdriver when you need to screw in something, you don't take it and look around with it for things to screw in though.
I'd love to participate, but it's a middle of the night in my timezone. :( Will there be a recording available?
 Before developing anything without using JavaScript and with just a framework like Django, HTML and CSS the people should know the difference between a simple website and a web application (a fully interactive application). Technically it is possible to develop an application without using JavaScript at all. It depends upon the level of interaction you need in your application. You can have all the features in your web app within the mark-up that gets its content from the database and have interactions through GET or POST methods. If you are using a framework like Django, then you should know how to generate html based on database content using templating method of the framework. You need to understand the request response model in http and form interactions in HTML. Django is a MTV (Model-Template-View) framework written in Python which helps in creating web applications and eliminates the use of [JavaScript. ](https://www.learntek.org/ui-developer-training/) Other than using Django you can also use Brython for developing the front-end of the application. With Brython you can still have dynamic interaction without using JavaScript to send full queries to the server. Brython is a Python 3 implementation for client-side programming and was designed to replace JavaScript. It is adapted to the [HTML5](https://www.learntek.org/ui-developer-training/) environment, with an interface to the DOM objects and events. You can visit the gallery in its official website and look for few of the possibilities, from creating simple document elements to drag and drop and 3D navigation. Apart from this there are other python libraries which helps in writing pages in python instead of using JavaScript. You just need to include the scripts in HTML which will interpret the python code and substitute the results. However, if you are thinking about replacing JavaScript completely then you are really missing something because in today’s tech-oriented world the expectation is about an interactive application. From designing menus to creating image sliders, adding display elements like accordions and tabs to manipulating images, client-side validation and certain other aspects, [Ajax and JavaScript](https://www.learntek.org/ui-developer-training/) play a very important role in how a user interacts with the application. Every application has requirements for dynamic page loading or effects as required by the client which can only be achieved using [JavaScript](https://www.learntek.org/ui-developer-training/). Without it the application will need to load page for every action. JavaScript helps in enhancing the interactivity of the page. Although you can create an app without using JavaScript, but it will have its own drawbacks like using things like autocomplete, tooltips and a lot of other things which depends on jQuery, a library of JavaScript. Also, it becomes difficult when you need to parse some variables from the views of your app to the templates. JavaScript helps to reduce the load on server when computations are being done upon these variables. Without JavaScript your app will look like old fashioned. People don’t want to stay on an app which loads every time a content is requested. If your objective is to develop an application that a user can interactively use, then without JavaScript you’ll be building something that will probably an outdated one and resemble an application from 90’s era. 
This is so arbitrary I don't even know what you're asking, it doesn't matter how many are there, only what space they take up. But if your dataset size is like 1gb, loading it from external drive will take seconds tops, through internet...? Well if you're lucky to have a connection I could only dream of, and it takes like 3 seconds to download 1gb file, sure, keep it in cloud. If they are really small, sure, use cloud I guess.
I strongly agree with this answer. JavaScript has its place, for me mostly in the frontend but in some cases it also makes sense in the backend. &amp;#x200B; I'm currently building a web app with Python (Flask) as the backend and Vue.js as the frontend. Basically all communication is done RESTful with JSON. It's by far the cleanest web app architecture I have ever implemented and it's an absolute breeze to work on. &amp;#x200B; Bottom line as always when it comes to code: Choose the right tool for the job. There is no universal correct choice, it heavily depends on what you want to achieve.
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
OK, I guess so. Still, to actually do web development and integrate with other code, it's pretty hard to imagine getting far without using plain JS somewhere. TypeScript seems a lot closer to JS and Java than to Python. From what I understand, even code targeting WebAssembly typically use JS somewhere for working with the DOM and web APIs, and probably will for a while more. Never heard of Transcrypt. That's pretty neat. Transpiling Numpy-based code sounds fun.
I suggest going through this tutorial by [Tania Rascia](https://www.taniarascia.com/getting-started-with-react/)
&gt; I've been exploring Python and it looks on the outset like a much more stable programming language to learn. Do you realize that you need experience to be able to draw such conclusions? And if you don't know the language yet and don't have at least a few years of practice, you lack that experience. First impression may be right, but may be also wrong. IMHO both Python and JavaScript are good to know. Being a Python guy, I'm getting a lot of brainfuck (not the programming language, pardon the pun!) moments, but this doesn't demotivate me to keep trying and learning more bits of JS.
With Javascript you can program in A-Frame. I believe WebVR will be in demand in the future.
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
What do you mean by mixing? Could you give an example?
Javascript is the base of modern web frontend development. You want cool webapps that act like a desktop app, you needs JS. As for learning Python, it's a great "swiss knife n paperclip" of a language: easy to use, does a bit of everything but you can't really use it as a client side web frontend. Personally, you never "abandon" a language as long as you have a basic understanding of what it does and how it works. You may forget a thing or two, but you should probably remember their core elements that make them different from the rest, then you just use the best one for the problem at hand. In conclusion, ye go learn Python it's great, but don't even think to forget about JS if you want to do web development. If JS still bothers you, try switching to Typescript with Angular2+.
No. Learn the language, whatever you've started with is fine
Thanks for making these available! As a Python developer it is nice to get a peak behind the scenes of all the work that is done by the core CPython team. Things like this help build communities.
It seems like you are actually asking "where do I store?", rather than "how do I store?". I.e. you already sorted out the format of the data you want to store, you just cannot find the right place for it? The answer will ultimately depend on access pattern, i.e. you will have to trade latency for price. Reliability being yet another factor. There are solutions for storing big data in volatile (fast) memory, s.a. Apache Spark. You will have to learn how to configure and deploy it. If, for example, you choose to go with Amazon, they offer EMR for it: https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-spark.html . In this scenario, you will not be responsible for Reliability (Amazon will), so it's not a factor for you. You could probably build your own storage with similar (or even superior: Amazon doesn't always use the top-of-the-line hardware, there's a price you pay for virtualization) characteristics, but it requires expertise, time and then maintenance, which is, again, money. And from there, you can, basically, only increase latency, winning some money: non-volatile memory is cheaper than volatile memory, so, the more you can put on some permanent storage, the more you gain. However, the trade-off may not be worth it for you. You'd need to better explain your case, to give you a more specific answer.
Not OP, but I'm currently tasked with building both the front end human machine interface for a robot AND the Bankend that actually steers the robot. For the front end I use Angular 6 which is a JS framework and the backend is mostly done in python with some C++ sprinkled in. The languages communicate via JSON and websockets.
I made the choice to move from JavaScript, to JavaScript/Python, to pure Python over the course of about three or four years during my career. When React came out and disrupted the webdev space and npm took off like crazy right beside, it was about March 2015 and my at-the-time company hired more webdevs to work alongside me who (thankfully) had more experience with wrestling web build pipelines into submission. While I felt I had a strong grasp on JavaScript and web technologies themselves, the big complexity bump introduced by build pipelines (like webpack and others) was something that I found absolutely bewildering and I had trouble figuring them out. Many npm packages seemed bloated with tons of dependencies. At the time, there was also a huge number of different ways to do the same thing and there was frequently no clear upside or downside between two build steps or packages, but at least one of your dependencies wouldn't support one or the other. In addition, our team frequently found "quirks" in npm packages that were just accepted as facts of life for JavaScript developers, like how node-sass downloads a precompiled binary image from github during the build step which broke when it couldn't get through our locked down corporate firewall, and then broke again on our internet-less build boxes, and then broke *again* randomly whenever the github pages were down. Essentially, I felt like the ecosystem was too immature to hang my whole career off of it. I saw an opportunity to become the primary backend engineer (in Python) while the new JavaScript developers ran the front-end and management allowed me to make this transition for the most part. Later on, I was hired onto a new job where they already had an army of web developers but were struggling to hire enough Python engineers, so I basically completely ceased working on web technology and began doing all of my work in Python. Python has remarkable stability and you don't have to worry about the entire community jumping to spin-offs of whatever you're using today. I think I will eventually pick up web development again. npm has some competitors now and it seems like the space is evolving better tools and coming up with consistent practices. JavaScript has legitimate async support which is phenomenal and that's still percolating through the ecosystem. Once the whole thing slows down some I think I will reinvest myself into it.
[MusicButler](https://musicbutler.io) - the side project gone a little out of control (in a good, tiring way) that I launched last month.
Because QML is based on javascript whereas Enaml is python. Also, Enaml's constraints-based layout engine is much nicer.
I have made several non-trivial GUIs with wxPython and find it very easy to make something that looks native and works as expected, with no lag and zero user confusion due to strange behavior. You will probably have to work with it for a while before lag free and nice looking GUIs comes naturally to you when you start coding, but it has a very nice community and plenty of examples to get you started. Try to avoid the very old tutorials that give explicit integer IDs to every widget, there is no need for that, just use widget.Bind(EVENT_TYPE, your_func_name). The docs are also quite good. Qt gets a lot of (deserved) praise for the docs, but I have never had the feeling that wxPython was any worse. I have only made a tiny GUI in Qt, and found it more or less the same, just annoying that inheriting base classes is required for some cases where wxPython lets you just Bind to some event and structure your code however you want. I also like that wxPython widget constructors take optional parameters that require calling a setter in Qt. In wxPython you can decide to use constructor parameters or setters.
Sounds pretty good ! It'll be streamed or registered? 
I *wish* I knew more JS because it would enable me to do more front-end interactivity with my data visualisations. Or hook things up to the APIs I use/build. Do both.
React is a painful learning curve, try out Vuejs instead. They are similar but Vue is alot simpler and better for most use cases.
A programmer learns patterns and programming logic using a chosen language. But it's not that coding in Python or JS or C++ or C# is _that_ different: once you are comfortable with program flow and being able to conceptualize the solution to your problem, the language itself is a secondary "problem". It's a bit like choosing between a hand or electric saw. Whichever you choose, you must know how to cut, where, and what do you want to achieve. Then the saw is merely a tool.
Try implementing an [L-System](http://paulbourke.net/fractals/lsys/)? Do whatever you want, as long as you're learning you're on the right track.
Also look at r/learnpython if you have some time !
Hi u/cafuneandchill I was also in the same situation when I was new to programming. I was just googling for good resources online to learn and practice my programming to get good at it. I've found some online resources and I'll list them below It might help you to get even more knowledge on python. 1. [Guru99](https://www.guru99.com/python-tutorials.html) 2. [learnpython](https://www.learnpython.org/) 3. [geeksforgeeks](https://www.geeksforgeeks.com) 4. [datacamp](https://www.datacamp.com/) And found some relevant links about Python for your background biology --&gt; [BioPython](https://biopython.org/) 5. I've found some YouTube channels really helpful to learn python: a) [Corey Schafer](https://www.youtube.com/channel/UCCezIgC97PvUuR4_gbFUs5g) b) [Sentdex](https://www.youtube.com/user/sentdex) c) [Socratica](https://www.youtube.com/channel/UCW6TXMZ5Pq6yL6_k5NZ2e0Q) 6. [Learn Python The Hard way](https://learnpythonthehardway.org/) Is a book on Python. You can also look for PDF version. &amp;#x200B; You should also look for Python for Biologists and may find some useful resources. I am intermediate python programmer and I've found these resources helpful. Hope it helps you. Happy coding! 
&gt;Go to your program’s directory and run: &gt;pyinstaller yourprogram.py Only a high IQ individual would understand it.
Thanks
Intuitively, I would go for some type of common JSON data structure to unify everything 
Wow, thanks for the write up. The course you mentioned, cs61a, seems interesting. I took a look at the website, and it looks like it's made for people that are enrolled in an in-person class. Is there a part of the site that I'm missing that has all of the resources and assignments?
Thanks! I'm subbed to it, but didn't look through it yet.
Both are useful for different things, Django is great but you can also use JS for some front end magic on top. 
Does the Python27 version *also* support Python 3, or are they seperate? Either way, you should use the `python_requires` metadata to ensure people get a version which works on the Python they're installing it for :-)
What makes you so sure you won't begin to hate the complexity of Python once you start writing real software in it. The Python ecosystem changes slower than js, but it does change and there are many libraries and frameworks that people use when writing real world code.
Can confirm, I watch Rick and Morty and it worked.
&gt; I don't want to use the database model Good call, the database record (I'm assuming an active model) is for database interaction &gt; Model classes where their instances don't do anything else than holding this data I used this approach when I had a similar problem and was quite happy. You'll find that it lends itself well to Clean Architecture (business domain in the center of your code, IO layers on the outside): https://www.youtube.com/watch?v=DJtef410XaM My code ended up with a few converters that knew how to load data from each source and transform it to the single business object class. As some coworkers missed the point of "once instantiated, these objects should look and behave the same regardless of where they were loaded from" I ended up using __slots__ on the class, so people couldn't just add an attribute to objects loaded from only one source without thinking about it. (Arguably I also failed at communicating that point early on to my coworkers, but still __slots__ made these sort of inconsistencies harder to add unintentionally). Also, despite the whole "no matter where they came from, they're all the same once loaded" I would suggest that you add enough internal meta-info to these objects that you can figure out where they were loaded from, for debugging (in my case it was also used by the persistence layer, to save changes back to the original source). Also, mandatory shout-out to data classes, which are just an elegant way to get a class that does nothing but hold data: https://docs.python.org/3/library/dataclasses.html (new in 3.7, 3.6 backport available)
If you want to be a programmer you are going to need both. Python is a wonderful language, as far as you can call a language that. But JavaScript is just fine too. you need a bit more self disciplin in JavaScript, but the language is perfectly capable of good code.
If you want to become a literate computer scientist or a good dev or both, Javascript is an atrocious first language and is working against you. &amp;#x200B; Python is a great language for begginers. I would also suggest learning algorithmics in C. A functional language is also nice. I suggest Erlang after Prolog.
For my job I write JavaScript (with ReactJS) for front-end code and Python for back-end code. They’re both useful for different purposes, employers look for people with experience in both, and they have very different approaches to OOP, so they’re both worth learning. If you were starting from zero I would recommend learning Python before JavaScript, because (a) Python was originally developed as a language for educational purposes, so it’s easy to learn, and (b) doing serious work in JavaScript involves bringing in frameworks like React or Angular, which involves bringing in deployment systems like Webpack or Grunt, which involves pain. But if you’re already so far along the JavaScript path there’s no reason to abandon it at this point.
You can know more than 1 language.
It’s back office type work, so there’s a ton of opportunity to automate things. Currently I’m using SQL server and VBA to get the job done, but I’d love to expire the capabilities of python and move away from VBA.
It doesn't work in older Pythons either, because `type.__new__` does not accept keyword arguments...
That's pretty much what I'm doing now, the dict I'm using can simply be passed to \`\`\`json.dumps\`\`\`. It works just fine, but I find it lacking when it comes to intuitiveness, the structure has to be documented quite well. I've caught myself having to look up parts of the structure after just a few days of not working on the code. Out of interest, would you document the structure somewhere in the code e.g., as docstring of the abstract method, or would you document it separately?
I thought Windows was using bash now... 
I would recommend you follow [this](https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world) tutorial if you are interested in flask. It gives a really good overview of flask and python in general, at least in my opinion. It does not cover the very basics of programming in general or the basics of python, but from my own experience, python is pretty easy to pick up with some js experience.
dont abandon either, learn both!
&gt; The tooling required to get anything done is simply staggering and extremely complicated to a complete newbie. You need to figure out Webpack, Babel, NPM, Node.js and a whole bunch of other stuff just so you can start writing code. And you most certainly don't want to not use ES6 syntax, so you're definitely going to need to figure out what transpiling is and how to get it all working. Easily taken care of by `create-react-app`
Unless you are talking about tons of tabular data, I generally build my data classes using attrs now. It is the basis for data classes added to Python 3.6 (i think). It allows quick classes that are more descriptive than named tuples. I would look at a Clean Architecture design with pluggable translators from source to common internal format.
Yeah, when my career with using Python as a backend language took off, I started out from a position of ambivalent towards JavaScript to grew to absolutely hating it then grew to accept it from the point of view that the entire ecosystem is terrible but necessary to integrate with. However the Node.js tools are just so non-ergonomic that I end up spending about a couple years building [a library](https://pypi.org/project/calmjs) (ended up being a complete framework) just to address all the deficiencies with those tools and their integration with the Ptyhon development/deployment/production environment(s). If there are any more interests in this (and if I could find the time) I might make a post or two about that library I wrote that I linked.
Absolutely there is duplication. This is because you might have to change either side. attr.s is the basis for data classes and should be good a few previous versions of Python. I've never used data classes as it is just attr.s light.
You can, but it requires downloads and features to be set up, which aren't possible without admin. Windows uses PowerShell primarily. 
whynotboth.png 
[whynotboth.png](http://i.imgur.com/o2yCYNu.png) --- ^(*Feedback welcome at /r/image_linker_bot* | )[^(Disable)](https://www.reddit.com/message/compose/?to=image_linker_bot&amp;subject=Ignore%20request&amp;message=ignore%20me)^( with "ignore me" via reply or PM) 
I've started as a Python developer and now I'm also a Ember.js developer (plus some UX and frontend) so knowing few languages and intersecting software stacks is quite handy.
These langauges are used for completely different things... If you want your interface of something to be available through browser there's always going to be a javascript somewhere....
This is my script (don't judge it is my first) Ligands = [] SNPs = [] file = open("name.txt", "x") file = open("name.txt", "w") for x in SNPs: for y in Ligands: file.write ("insert into Activity (Name_of_SNP, Ligand, Activity) values ('%s', '%s', 'TBD');\n" % (x, y) )
These two languages can complement eachother
Looks like you should be posting this to r/learnpython Did you want something like this maybes? import itertools list_one = ['a', 'b', 'c'] list_two = ['d', 'e', 'f'] all = list(itertools.combinations(itertools.chain(list_one,list_two), 2)) with open('file.txt', 'a+') as f: for one, two in all: f.write('{}-{}\n'.format(one, two))
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [I made a python cheat sheet](https://np.reddit.com/r/learnpython/comments/82t191/i_made_a_python_cheat_sheet/) \#2: [2000+ free programming books on github](https://np.reddit.com/r/learnpython/comments/8ycc5j/2000_free_programming_books_on_github/) \#3: [When I'm coding, I don't feel stupid anymore](https://np.reddit.com/r/learnpython/comments/989qx7/when_im_coding_i_dont_feel_stupid_anymore/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
If it's a learning project, that's absolutely fine, and this is great. And excellent /r/learnpython content.
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [I made a python cheat sheet](https://np.reddit.com/r/learnpython/comments/82t191/i_made_a_python_cheat_sheet/) \#2: [2000+ free programming books on github](https://np.reddit.com/r/learnpython/comments/8ycc5j/2000_free_programming_books_on_github/) \#3: [When I'm coding, I don't feel stupid anymore](https://np.reddit.com/r/learnpython/comments/989qx7/when_im_coding_i_dont_feel_stupid_anymore/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Yup, what /u/mooburger said - Basically, as you learn more, you're going to realize how you could improve your old code. A year later, you'll shake your head at what you had and want to tear it down and rebuild the whole thing. Main thing being - As you learn, you can try to rearchitect your project(s) to see if you can improve them. Some people also have a go to project that isn't super large in scope but also not super simple and they implement it in whatever new language they are trying to pick up in order to better understand the new language features, etc. 
&gt; doesn't matter if it's new or old as long as they are learning and making progress It does when choosing whether to post to /r/python or /r/learnpython
To piggy back on this comment, [this video](https://www.youtube.com/watch?v=3TBq__oKUzk), goes into good detail in a short amount of time, hitting on the various programming paradigms. Programming is the process of solving a problem. What language you chose really depends on the type of problem you are trying to solve. 
I'd say ES6+ JS is what I enjoy coding in. The ecosystem of course is nice, but I'm not a particularly big fan of the bloat that comes along with all the dependencies you end up having. I guess that could be a criticism of the language in a sense.
You can try to build something that uses both languages. For example, you can collect and analyse data in Python and use JavaScript to present and interact with it, using some visual library like D3.
They should have archives of older classes that have HW and solutions. They also used to post lecture videos on Youtube (I took it around 5 years back when there were lecture videos available). Also, the companion online textbook by John DeNero can be found here - https://composingprograms.com/ 
Its working now 
I completely ignore your field so can't really understand at a first glance what's into that table, but have you made a primary key for it? Otherwise, I too love using python for this simple things. With other languages it would be way less polished
Yeah, I still remember my first couple months of raw frustration when I was trying to get into JS land. I was a competent programmer and knew a couple of languages pretty well by then, and the sheer frustration and helplessness of trying to navigate the JS tooling landscape (along with limitations like modules) was staggering. I still remember feeling like how it was all bonkers and I couldn't believe that the whole tech world was seemingly okay with the state of things as if it were completely normal. Ironically enough, now that I've gone through that rite of passage, I barely notice it myself, but it's a recent enough memory that I have sympathy for anyone trying to get into JS world.
Yeah, I don't disagree with anything you said. I just wanted to point out that starting off with JS might not be a great idea because there are too many moving parts and it will make it harder for you to focus on learning good programming techniques because you have to juggle so many things and a whole bunch of tutorials are, npm install this, require/import it, and then use this one-liner to do X. Starting off in something like Python would definitely help the OP focus on learning to actually program and structure code / tackle problems. Once OP is ready for JS, then he's definitely going to have to learn all the tooling around JS since that's how pretty much everything works in JS land at this point.
This is the correct answer.
[Full disclosure: I gave this talk] This talk was given to a C++ audience, but in a way I think I made the mistake of targetting it more towards pythonistas. But as a result this may be of interest in this sub...
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
This looks very nice for a first script! I have a software postit with a couple of things I tend to forget the exact syntax of (don't know why i keep forgetting) with open(full_file, 'r') as file_handle: total_content = file_handle.read() with open(full_file, 'w') as file_handle: file_handle.write(line_string) These are called context managers, it means you will not have to worry about closing file handles etc. Also, you can open a file with "w" and then write all items in a list instead of having to use 'a' and then having to check if the file exists before the write etc....
Automate the boring stuff has a chapter on this which helped me understand it, maybe it'll help you too. &amp;#x200B; [https://automatetheboringstuff.com/chapter18/](https://automatetheboringstuff.com/chapter18/) &amp;#x200B; &amp;#x200B;
Edit: really, downvote for 
Great. Thanks. What I realised it to get a good work, you have to have something to show. So I need to upload all by trial codes onto GitHub and kind of 'advertise' it across platforms. I will start doing that.
I'm actually a couple chapters in this and didn't realize this was included. I think I will skip right to 18, I learn better with practical usage. I will need to study and practice this thoroughly. Thank you.
&gt; the whole tech world i'd say outside of the major tech companies(top 10) everyone ignores the JS stuff outside of cute prototype single page apps. trying to do anything at scale requires assigning an insane amount of man hours to the problem imo
Yup. I don't know why freelancing sounds very fancy. But I now realize starting freelancing is like searching for a job in LA. There are a lot of people trying to do it, not many know how to. But once you get a hand of it, you can make big bucks. All the best to all amateur freelancers.
yes but the advantage of jumping in head first is all that stuff is used in production - you're learning how to "make" stuff vs farting around in python making toy apps for a couple of months before you feel confident enough to actually start using flask or whatever i completely agree with your point, just playing devil's advocate for any late learners. if you're over 20 i'd say go for js
Building yet another Python course.
No. Focus.
I am doing this at my blog \[0\], albeit a slower pace due to other engagements. &amp;#x200B; \[0\]: [http://www.kashifaziz.me/](http://www.kashifaziz.me/)
Great job! I can suggest you to use pandas for your next script. It has a very good interface to SQL servers using `to_sql` and `read_sql` functions. Link to docs: https://pandas.pydata.org/pandas-docs/stable/io.html#io-sql I can post an example if you're interested. 
googling (structured) 
Keyword searches in PyPI may also be useful. Example: https://pypi.org/search/?q=youtube
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
Ask /r/python...
Yes
Django's documentation is so good it will ruin you for everything else.
It's a hack done by people that don't know what they are doing. People will put ../ and ../../ of the path, so if you run if from the correct directory it works, but doesn't run from any folder. That's a bad design.
I'm curious, do you use server side rendering when using React with Django/Flask or do you serve essentially an empty page with all the react stuff in the client-side JS? I have done the latter, for a few things but I don't like the idea of serving a big page of nothing to the client and like the idea of moving towards using SSR with React + Flask/Django, but I'm not sure how well that combination works at the moment.
Don't know if it's the best way, but it certainly has some advantages: https://github.com/vinta/awesome-python
Thanks! I'm an undergraduate, yes, and currently working on my graduation diploma, and still searching for my place in the biology land. As for R, I'll think about studying it. The main problem is finding how much it's worth in terms of employment in my country. Also never before worked on Linux, so double the effort required. That link, though, I'll be sure to check it!
Nice! I swear biologists / '''real''' scientists are amazed by scripting -- I helped my wife write a script to parse a CSV file. This made her god-like in her department, and she clutched it away as a superpower. Wield the same power in your department! Congrats on solving a problem the smart and lazy way, and not the hard way! 
Also, your project is in the *Interesting Projects, Tools and Libraries* section of the Python Weekly Newsletter :) Congrats!
Yeah and since it makes bulk queries, it's super quick. In practice, making queries in a loop are slow because the database would lock, commit, and respond each time. It adds up. I have pulled around 500k rows on heroku and like this and it works effortlessly. Just take caution about it's scalability. 
Well typescript is a super set of JavaScript, you absolutely need to know JavaScript to use it. The performance of JS is bad enough already, even before you add Python runtimes on top.
K-nearest neighbors pops in my mind. You have a three-dimensional space of size 256 x 256 x 256 which stands for RGB values. You collect a lot of color data where you know the color name of the RGB color.
One thing that seems to be missed by most comments in this thread is the versatility of Python!!! Learning Python means a far broader array of jobs to choose from, many far removed from the horrors of web development. Web development is the modern sweat shop. 
**Software Engineering- Mentor | Bangalore | Both contract &amp; employment | 75 paid vacations days | INR100K learning &amp; travel allowance | Competitive compensation | Apply at** [**https://bit.ly/2xSPGAR**](https://bit.ly/2xSPGAR) If you've ever thought of sharing your programming skills, we want you. MountBlue Technologies ([www.mountblue.io](https://www.mountblue.io)) is looking for great software engineers to mentor the next generation of coders. Come, contribute towards making India a nation of coders. You have been saying you want to give back- here is your chance Design, plan and implement a 9-12 weeks intensive programming bootcamp in one of the various streams such as Full-Stack Web development, Android, iOS, front-end intensive, backend intensive etc. Be a coach and a cheer leader. Continuously push, nudge and encourage, trainees to produce their best work. **MountBlue's** vision is to be an alternative to traditional college education. Currently, MountBlue’s our business is running coding bootcamps for entry level programmers on most in-demand web and mobile technologies, with a view of finding them rewarding development careers in startups. Our developers are in some of the most well-known startups in India- from bootstrapped software shops to unicorns. If successful, MountBlue will rewrite the technology education paradigm in the country
[Transcrypt FTW](http://transcrypt.org/). Or at least until WebASM is viable.
script looks like a good start! for future reference, for every file you call `open` on, you should call `file.close()` afterwards. This tells the operating system you're done manipulating the file, and prevents file corruption. Or, you can use a "context manager" as mentioned below, using a `with` statement. This will auto-open and close the file. 
Great talk, thanks.
Javascript will always be district 9, wild wild west, bleeding edge. Because it is the programming language of the web and each browser needs to execute it. So having it in your toolbox is never a bad thing. But if you look outside of the Javascript bubble you see some solid scientific and machine learning modules have been built with python. Without all the js baggage. I do enjoy using FlaskAdmin, zalando/connexion, SQLAlchemy and Celery in my python workflow! But according to github 2.6% of my codebase is py and 10.3% js. HTML 62% and PLpgSQL 24.5%. So meh, I'm a HTML Developer.
Upvote for pandas &lt;3
This book is pretty solid: http://automatetheboringstuff.com
Talking to a dispenser unit (hardware) through python following some hardware protocols.
At this time they are separate packages. I'm working to see how I can have a unified solution and I'll certainly look into your comment as part of that process. I appreciate the help!
sorry for the hickup.. its up and running now.. 
I see 4 women in the picture. That's great news. I remember the call of one of the main devs to female developers to join the core dev team. 
Disclaimer: I’m not a python dev, its one of the few languages I haven’t used professionally yet. The reason I’m about to give is why I’m learning it now. Just straight up tell them that Python has built in functionality (some of which is enhanced with certain packages) that can get done in a few lines what would take a LOT more in VBA. For people who don’t understand the technical stuff, the easiest way to sell them is to point out efficiency gains and how that translates into dollars. Look up Numpy examples if you want to see what I’m talking about. 
Wow that’s pretty I just created my Postgres script two days ago that allows you delete rows from table 
Excellent! Thank you, for your response. I’m going to take that approach.. although I think they are coming from the angle from a “firm risk” perspective.
Excellent! Thank you, for your response. I’m going to take that approach.. although I think they are coming from the angle from a “firm risk” perspective.
Depends on your lab i suppose, i use pandas and automate graphs production with seaborn/matplotlib for clinical study (100+ individual, plenty of biological measures, different time points), but my boss screams because she thinks i have to do it in excel to have a "feel" of the data...
No problem, thanks, I will download the cheat sheets and use them. Thank you for this excellent resource bro.
I’m not quite sure what you mean by “firm risk”, do you mean risk to your firm in the event of failure? I’m not familiar with finance. In any event, start small and see if you can make a couple demos using test data to show the difference between equivalent scripts in VBA and python, something that proves your point :). I’m sure you already know all this and I’m preaching to the choir, but generally people understand results better than hypotheticals.
Thanks for the heads up! I've been passively reading the sub but will formally join.
https://cookiecutter.readthedocs.io/en/latest/
Yes. In the end you will probably end up using both, as you can't really escape JavaScript these days. But Python is far more pleasant to work with. There is plenty to learn with Django but its a good framework and the documentation is top notch. There is a lot of stuff that sucks in programming, but JavaScript seems to have one of the biggest sections here: https://wiki.theory.org/index.php/YourLanguageSucks#Python_sucks_because
Plz show me how THAT works!
Wow, that list is **huge**! Thanks.
we put a shell in your shell so you can shell while you shell its turtles all the way down
Security
Python works very well with SQL server and also Excel (look into openpyxl) Some of the software I've written for my department includes automated email capabilities and other bits of projects have performed pretty decent analysis on a large amount of data quickly.
I agree. *Used in this way,* lambdas heavily promote a functional style to writing Python code. It is really opposite of the style and spirit of Python. Python is an imperative language, not a functional one. It is no secret that Guido strongly dislikes functional style. And if that opinion is good enough for Guido, it is good enough for me.
concatenate the strings "python3 package " and the space separated list of keywords you are interested in. Paste that string into the search field in your favurite google locale. If you have some examples of use cases you have difficulty actually finding a package to cover, it might be a bit easier to give som good ideas beyond the very generic. 
Excellent, I’m going to create some demos that illustrate this a bit better. I like the “prove our point” approach. And by firm risk I mean from a security standpoint.
There isn't any real Python in the browser as of yet. Web Assembly will change this in a big way, but the catch is that you'll still be limited in the same way Javascript is and we're still going to need all the browser bindings to happen as well. Also it will take ages before we have frontends like React or Vue implemented in Python in the browser. 
Wait untill you discover the pyDOE module and automate your experiment design...
Me too! print(I am usually not a disappointment) Gosh ^you'd ^wish ^you'd ^be ^funnier ^than ^me
Title states to stop using lambda functions, the article states to use lambda functions when necessary. I knew it was click bait going in, but I always hold out some hope.
I have some difficulty to see the rational of the lin : it looks very useful, but also it's like it could be split into at least 3 different packages... 
&gt; Tuple unpacking can improve readability over using hard-coded index lookups. Using lambda expressions often means sacrificing some Python language features, specifically those that require multiple lines of code (like an extra assignment statement). Rebuttal: `points_by_color = sorted(points, key=lambda ((x, y), color): color)` Overall agree though.
&gt; lambda expressions are an odd and unfamiliar syntax to many Python programmers we are talking about a feature that has been in the language since its inception. If you are not familiar with lambda, you should not be calling yourself a python programmer. 
i never buy into the idea that you shouldnt use something slightly unconventional because others might not understand it when its a core part of the language, dinosaur regressive thinking like this would stop anyone from using completely basic languages features like tuple destructuring, * unpacking, decorators, ** kwargs unpacking, partial function applicators, etc because you're too scared to learn something new id say dont use lambdas for anything complex because they're a half baked implementation and are restricted to being expression bodies and fitting things in one line makes it actually unreadable, id just think you're being stubborn if lamda a, b: a * b takes you more than two minutes to figure out without even knowing what a lamda is or think that its hard to understand 
zip can help here as well: a = b = c = range(20) zip(a, b, c) 
You can probably do something like the following to get a default identifier for the machine in question: $ echo $(sudo dmidecode -t 4 | grep ID | sed 's/.*ID://;s/ //g') \ $(ifconfig | grep eth1 | awk '{print $NF}' | sed 's/://g') | sha256sum 59603d5e9957c23e7099c80bf137db19144cbb24efeeadfbd090f89a5f64041f - 
Yes that was removed in Python 3. I feel like that syntax was actually particularly confusing with lambda expressions though. &amp;#x200B; When I first glanced at that code I assumed a dictionary was involved somehow or maybe incorrect syntax because my brain didn't parse the tuples before the \`:\` as arguments. &amp;#x200B; This may be because I'm not used to seeing/using tuple unpacking in lambda expressions (and never really saw it used in traditional \`def\`-defined functions either).
operator.itemgetter(1)
Actually not. Though what follows is probably because I'm nit picking. Hard drives are actually kind of poor for long term storage. The lubricants and some other things degrade over time. They're actually expected to only last five to eight years but so many factors affect that. That said, I've booted 20+ year hard drives and even know many that have run for extended periods. They're probably a good bet but they're not the technically the right choice. So what about optical media? Whilst optical media are theoretically better, they aren't in practice. High quality media will last about ten to twenty years but you could probably do much, much longer. The issue is that the damn plastic and foil come apart. I imagine that in the right environment it may just last and last. You do get some insane stuff like holographic cubes that are rated for millions of years, super dense as well, but doesn't exist in practice. So what is the right choice? Tape media. You can get 30 year guaranteed tape drives. There are plenty of stories of magnetic tapes that have lasted 60 odd years. Super cheap, last forever, and actually pretty decent read/write performance although it is always sequential. That said, if you mean long term like a couple of years then yeah. Hard drives are the perfect choice. For real long term they aren't. 
"No true Python programmer..." &amp;#x200B; People can and do use Python for years without understanding all its features. I certainly don't have all the built-ins memorized and I'd be surprised if I had all the syntax memorized as well.
&gt; I've been exploring Python and it looks on the outset like a much more stable programming language to learn. You haven't heard about Python2 vs. Python3 or how Django breaks backwards compatibility with every minor version?
ok, so should we stop using list comprehension as well? They are unfamiliar to any fortran or C programmer. What about exceptions? Glorified gotos after all. Let's also get rid of OOP, we can stick to ordinary functions and they work as well, you might just have to type a bit more, and 95% of the people who don't know lambdas, don't know OOP either. 
Can you explain whats going on with this lamda? Same as def f(t, color): where t is the 2-tuple (x,y)?
I considered this before publishing, but I've been sitting on this for days now and couldn't think up a more appropriate title. Do you think "Stop overusing lambda expressions in Python" would have been more appropriate?
I think the parameter unpacking is quite nice if you think of it as a limited form of pattern matching. I can definitely understand why they removed it from the language though.
&gt; This may be because I'm not used to seeing/using tuple unpacking in lambda expressions (and never really saw it used in traditional `def`-defined functions either). traditional defs are whatever, you can always unpack by hand in case of lambdas it is a significant loss of expressiveness. given admittedly byzantine example with (point, color) structures compare let's say lambda ((x, y)(r, g, b)): (g, y) to equivalent lambda t: t[1][1], t[0][0] the latter tells you literally nothing of value about what you are looking at and goes against everything python stands for. Everywhere else you unpack the shit out of everything in order to avoid indices all over the place and to have meaningful, descriptive vars, not so much here. I am of an opinion that unpacking should have been special-cased for lambdas or some special syntax should be put in place to achieve similar effect. 
My coworker attended this talk - I need to ask him about it. Your talk got me thinking about building and pypi-integration and building, and scrolling through your talk I noticed you were using pybind11. After looking into it, it looks like pretty much what I've been looking for! So big thanks for that.
Great job! I am always a fan of writing code to write code where it makes sense. For your particular scenario, SQL code generation, another common option is to use Excel and string concatenation in cells to create batches of INSERT statements. Opening a csv in Excel of LibreOffice Calc to perform the concatenation. Additionally, if you ever find yourself dealing with very wide tables (lots of columns), you can also use a SQL editor itself to help generate the "template code." Every ANSI-compliant database will have access to INFORMATION_SCHEMA metadata. You could write a SQL against INFOMRATION_SCHEMA.COLUMNS to generate a list of columns for your INSERT statements. That beats typing 500 columns by hand.
Pandas is truly simple and powerful to use. Im an Analyst who is by no means a computer scientist or software engineer.. Pandas has saved my ass many times now and streamlined data processing that was incredibly impractical with excel vba
I did not know about this, it seems pretty awesome.
Could to you run through the basics of how the app works? How the front end communicates with the backend and what modules and packages you use?
Compared to other programming books, this one makes it clear what normal people can do to make their lives better with programming right away.
Good catch. Initially, when I was designing the database the column "activity" was supposed to be the primary key and the columns SNPs and Ligands where foreign keys, being primary keys of the tables SNPs and Ligands. As a primary key can't be null nor can have the same name with another primary key (duh! I realized that when I got an error message!), at the moment there is no primary key at that table, which I suppose is a major drawback/flaw. It doesn't matter though as I succeed at designing a working database that does what I want and I created that script proving to myself that my Python self-learning process is successful. At the moment all I care about is that I have those thousands of combinations, which of course is infeasible to work with. With proper syntax/join I can make new tables, that will have less combinations (less than 100 if not even less). These combinations will be like choosing a specific ligand or if I add a "class" column at the Ligand table, of specific class. I can add a "Pharmaceutical use" column at the Ligand table (e.g. antibiotics) or I can fill the "demographic" column at the SNPs and work with a specific demographic etc. Then, this next table will be the basis of our work. These are the thoughts at my head for the moment, discussing things with my supervisor will shape things further. But good eye, you spotted this major flaw. Kudos mate.
oh yeah, I forgot about it. We were taught that at Perl, during my Master's. 
Yeah, I knew that there must have been a way to do that with only one insert, but what I tried was; insert into.....() values () values (); for some reason it didn't occur to me to try the correct one; insert into.....() values() (); I tried googling it for five minutes or so, but I said "what the hell, let me try my Python skills" and it worked.
Lol everyone in here would be rich
Haha fair point. I'd really like it if you could give my a simple project that make me a grand a week, that'd be great. How about just some fun project ideas then?
The summary sounds VERY promising. I don't know what those changes mean exactly but I am very happy to see that Nuitka is still being actively maintained.
Second the R advice, I've seen huge growth in its use over the last 10 years (at university, can't say with regards to employment but it probably follows).
Abandon both and use Haskell. Or at the very least try it out and see what you think. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Please don't post beginner content
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
[removed]
Your code doesn't work on 3.4 either.
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
I worked with flask + react and if I remember correctly there is no server side rendering unless you use node as your backend server (with some specific packages on top of it), which kind of makes sense. Idea of rendering empty pages with `bundle.js` that renders everything on frontend may seem weird but that is the state of modern web applications and it works quite fast.
Did you look into a SQL cross join or am I misinterpreting what you needed to do? I use pandas extensively but there are many operations that are just quicker to perform directly in SQL
pls come back to wsb, your cultists miss you
Actually, with react I don't do any rendering. I think it's the facebook tool called "create-react-app" which I use to generate the base react app. You just use node (just the binary, not as a server) to run the tool to compile it into a production app, which generates a few static files like the app js, index.html, css, all minimized. Then I use nginx to serve those as static files, and they make API hits to either flask or django rest framework. No templates are being rendered from python, and it's all static except for the rest api.
Please start using pandas
Errr I mainly do functional programming, that might be why I like it :D
From the article: `points = [((1, 2), 'red'), ((3, 4), 'green')]` The thing that doesn't work in Python 3 is unpacking in the parameter list. ie: def foo(((x, y), color)): return color colors = map(foo, points) The above *does* work in Python 2.7 but not Python 3.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython or for the r/Python discord: https://discord.gg/3Abzge7. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community and the r/Python discord are actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. **No matter what level of question you have, if you are looking for help with Python, you should get good answers**. Make sure to check out the rules for both places. Warm regards, and best of luck with your Pythoneering!
&gt; it's very unlikely you can make them change. I managed to make my company change. We had this script that you had to run to install any of our stuff and if you were modifying code, you had to run it between each go. During distribution, I do horrible things, such as removing data from sys.path, setting sys.argv, removing data from the path, faking environment variables, flipping the path back, and adding ../ and ../../ to the path and all in the same 100 lines. I document the hell out of it. It's to work around other people's bugs because they hacked on sys.path.
I barf out code using whatever I think makes the most sense and I change it when I need to. I used to use nested dictionaries for time/element dependent data and now I use massive numpy arrays. It's just practice.
I use Anaconda distribution, no issues 
Anaconda distribution? Sorry im not well versed in the Python ecosystem. 
I'm not using csvreader here but it's pretty much the same concept. I'm on windows so I'm not sure if that's causing the issue here. `with open(incoming_file, 'rt') as fin:` `with open(outgoing_file, 'wt') as fout:` `for line in fin:` `line.replace('\\n', ''` `fout.write(line)` I've tried about every combination of \\r\\n, \\n, \\r, but none of them seem to strip the date before rewriting it out to the cleaned up csv. Thanks for taking a look. &amp;#x200B;
That's pretty much what I'm doing except I'm writing it back to a cleaned up csv. I'm on windows so I don't know if maybe that's causing the issue here. I wasn't using csvreader here but it's pretty much the same process. `with open(incoming_file, 'rt') as fin:` `with open(outgoing_file, 'wt') as fout:` `for line in fin:` `line.replace('\\n', '')` `fout.write(line)`
What kind of scripts? You can wrap your scripts in a Flask API and deploy the, using Heroku or PythonAnywhere
Idle is the IDE, I would recommend PyCharm instead of or Sublime Text, but it is harder to set up.
This is awesome, I did a genetics minor during my CS degree. Scripting is such a good skill for genetics!
Not true. Guido accepted a patch.
Guido didn't write lambda. He accepted a patch.
Using Pycharm on a MacAir. No issues. I recommend Pycharm, because it is easier to set up a virtual environment and because of PEP8 check. 
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
That's sort of my motivation. There are lots of little gaps here and there in what is available, and often times what you need is glue to put those pieces together. And the glue changes over time as pieces coalesce into standalone things (look at the 3 pieces already chopped out in the readme).
Pycharm is love 
I would recommend vscode as your code editor and as long as you save your file as .py (as you should) you can right click in the space where you code is select "Run Python file in terminal" and it will run in the integrated vscode terminal.
Can I run this game on my mac? I know pygame is supposed to be cross platform, so if I try and run the game from the command line will it work?
You might want to check out py2app. The only thing that sucks tho, is that users will have to go into their settings to allow the app to run.
There is no mac build at the moment because the only packaging software for Python 3 (that I'm aware of) doesn't work with my game. If you use Wine or have Python 3 + Pygame, you can run it fine.
vim
Miss you fam. We all hope you're doing okay. 
Thanks DaFluffyPotato, going to check it out.
I agree. Simple. Very straightforward for a beginner as well. 
Sounds good, this is what I usually use for other languages, it just seemed weird to me that the latest stable build was so broken on MacOs
Have you tried [repl.it](https://repl.it) ?
He has systematically rejected all proposals for improving it.
You can simply install ipython and use that instead of IDLE for a similar feel with some modern conveniences like autocomplete, autospacing, and etc. without having to deal with all a feature complete IDE. Open your terminal: sudo easy_install pip sudo pip install ipython Most people graduate from IDLE to something better pretty quickly- a variety of the options are given in this thread. If you're planning on getting serious with Python and putting the time in, PyCharm is probably the way to go.
Congrats man!
use jupyter!
It sounds like this implicitly uses *args, but that in python3 you can use itertools.starmap for this. Explicit &gt; implicit. Note: I havent played with this, though, too late here.
???
I mean, if you’re just dumping HTML to stdout, it’ll run just fine as a CGI application.
Working on DIY version of Wallabag
I see how it could be useful in some cases, but for standard frontend development you'd be losing any frontend library / framework out there. 
use Pycharm as an IDE and jupyter notebooks for scripting. Also use anaconda installation. Just google all three and you can find all the info you need.
This is the area where Python is tricky for newbies, as Python 2.7 is still used on macs for a bunch of things and if you installed python 3 and set that as your main python, the two don't play nicely and can cause issues . I suggest rolling back what you have done and installing a complete python package like Anaconda. Anaconda is completely contained in a file separate from /usr/bin/ where python natively sits. It also sorts out $PATH so your OS uses native python2.7, the python pops up in terminal will be the anaconda version. Someone on here should be able to help you reverse what you have done. 
Python is pre-installed on all Unix Based OS. But for a complete control over the packages and virtual environments download Anaconda. Use a text editor to write the code and use the terminal to run it. 
Fair enough! I will try it in my work an try to give you some feedback! 
Oh damn that explains a lot. Super helpful explanation thanks. Just by curiosity, is Python actually used for the OS, I always thought it was pre-installed for education purposes
Eclipse is decent, I'd say Pycharm is your best bet tho
So the reason is because rpm is the official Linux standard for packages... What? Really?... Yeah. Rpm is the official package format as per the Linux Standards Base. Well technically it's a subset of what rpm looks like in the wild today. Debian is made LSB compliant through the existence of Alien, an rpm to deb converter. Truth be told, if the rpm is actually LSB compliant then using Alien will work painlessly 99% of the time. Rpm is not a proprietary format. It's as open as deb and in my controversial opinion a superior format. Just so you know, a lot of people don't distribute via rpm and deb these days, often preferring pip wheels (even when not hosted on pip proper) or just making docker containers, heck it's even common to just clone the repository. 
macvim
macvim
\r suggests you're mixing up windows and unix line endings.
Switched to PyCharm last week. 10/10 would recommend to anyone on a MacBook. 
I would really recommend using virtualenvwrapper for handling the python versions. Then for IDE I use pycharm for larger projects and vscode for smaller tasks.
Neovim with Deoplete, Deoplete-Jedi, Jedi-Vim, Gutentags, Ale, Flake8, PyLint. If you also want things to look nice add NeoSolarized and airline. NERDtree for file browsing and neovim-fuzzy and vim-grepper for file name/content searches. Might sound like a lot, but it’s a great setup and you don’t have to configure much beyond installing things which can be simplified if you use vim-plug.
Line endings??
dos2linux command should fix it 
How? Will that code work in windows?
Yes I wrote it on windows and then shifted to ubuntu
Your shell is attempting to interpret that `test.py` file as shell-script. You probably want to run `python test.py` or add a shabang `#!/usr/bin/env python` to the first line.
You need to specify that your file is executed via python. Try running `python test.py` or add to the top of your file the following: #/usr/bin/env python
http://thecodelesscode.com/case/114
Windows puts a different char to mark a line ending ..... carriage return vs new line 
That linux command will fix it 
Seconded. Anaconda is the best all around install for all platforms!
All of the code is from here btw: https://github.com/ApproximateIdentity/cpp_extension_talk I actually didn't talk about pypi or distribution at all. Even the `setup.py` files I used were a bit weird as you can see by looking at the repo. I set things up this way because I wanted the compiled extension module to be dumped straight back into the folder so that things were very explicit. I also used weird simlinks and stuff so that you could run that code (at least on debian which I've tested) without bothering with virtual envs and installation. Python people should be used to that, but I wanted to remove as much of that stuff as possible to cut out the extra boilerplate. My main goal was to help explain what's really going on under the hood. That should definitely help if you're distributing extension modules because it will be less magical, but there are probably better sources for distributing. Here's one I've looked at before https://packaging.python.org/guides/packaging-binary-extensions/ but there may be better ones... Good luck!
Your submission has been automatically removed. Your reddit account must be older than 2 weeks before you can post. No exceptions. This helps prevent spam. **If you need help with Python** see r/learnpython or r/learnprogramming. **WARNING** Reposting this under a different account before 2 weeks risks getting both accounts banned as well as domains in the post. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/Python) if you have any questions or concerns.*
And this is why I will always use RHEL systems. 
https://en.m.wikipedia.org/wiki/Newline
Oh. That PIP trick is fucking awesome. Definitely putting that into my config to avoid poluting global.
If you use multiple python versions you should have them in virtualenv. I have colleagues who's ran in to all kinds of mess by using brew for managing multiple python versions. Brew is nice but it doesn't replace virtualenv + pip 
You should never use sudo with pip. You give root permissions to scripts you pull from the internet. Have pip install into a directory you have user permissions on. 
Only if you exclusively do data sciency stuff. Once you start branching out conda fucks your configuration hard
I’m starting recommend pipenv instead of managing your virtual envs yourself
Atom is built on electron which destroys your Mac for no reason at any given point in time. I gave vsc a try and it crashed so hard on the second day that I had to restart my Mac. Kill -9 didn’t even work
&gt; TitanCore malware is one example of that. Quie interesting. Have more on the subject? Google doesn't return any info on it, only malware information.
What's the difference between a script and normal code?
Mac's Terminal has Python already baked in I think, and then you can supplement it with a regular text editor like Sublime, Atom, or the ol' vim/emacs. If you need an IDE or something, try PyCharm or Jupyter, but I've never really used either.
Here's a more modern version of it TRITON. https://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html
Use VS Code
This is hard to answer since such details depend on what the app should do and how it should do it, but I'll try to give a high-level answer. The backend consists of a good old Flask application. However, it doesn't render any HTML templates, it only ever returns JSON objects. There are several guidelines out there on best practices when it comes to designing these, but the routes and objects heavily depend on the data you're handling and processing. Flask makes this pretty easy with ```jsonify```. I did override some parts of Flask, though. For example a custom ```Response``` that has ```application/json``` as default mimetype, and an error handler that always returns a JSON object - once with meaningful messages for the development environment (e.g. stack trace included) and once with generic error messages for production. I also needed to implement some custom JSON encoder classes for jsonify to work transparently with all types of data I'm handling. I really like this approach since I don't end up with a weird mix of routes that are rendered server-side and ones that return data for async calls. I've always ended up with some degree of duplication in these. And nowadays it's rare to develop a web application that is rendered server-side entirely. That said, RESTful API's without any server-side rendering whatsoever is not suited for all needs, sometimes server-side rendering makes perfect sense. Apart from that you can develop the rest application as you would in any other way and the rest of the packages depends on that. Flask is just a means to get your data out, it is not the core of your application. I'm using the Peewee ORM for the first time and so far I'm liking it quite a bit, but - as any ORM - it has a few drawbacks. It would be quite easy to replace with another ORM or a "raw" database implementation in my architecture. I can't tell you much about the frontend since that is in really early stages. I'm using ```Vue.js``` for the first time and so far it's quite intuitive and easy to learn. I like their design philosophy - it's kind of like Flask for the frontend in that regard. No bloat, do the necessary and leave the specific things to extensions. I'm implementing it as a single page application with many different components. I'm currently using ```axios``` as HTTP client to perform calls to my backend, but I might switch to the Fetch API. Planned but not yet implemented are Websockets for things like real-time notifications, which should be pretty easy to do with Flask-SocketIO in the backend and Socket.io in the frontend. I'm also using ```Bulma``` as my CSS framework for the first time and I'm loving it so far. It's clean, lean, provides all the necessary building stones with minimal bloat, but you can create a nice-looking layout in minimal time. Again, kind of like Flask when it comes to the philosophy, but for CSS. Hope that answers your question. Cheers
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
Did you change your system-Python? Don't do that! Install a python distribution separately if you want to use, update, and modify that. 
So what did they do? Simply write an object pool in c instead of keeping objects alive and implementing simple reset() method that would be way faster than creating new objects?
It says nothing about Nuitka and this is what was interesting to me.
Why not use virtualenv?
pipenv is different than virtualenv? (Noob here)
Ow damn, didn't know that! What editor do you use?
yep, try it out, it makes virtual environments npm-style. super easy to use.
Read the Django docs build a website that does something useful and host it on aws. 
g
I overall agree with Trey Hunner, but I think the root of problem is that, we don't think what we can do to improve lambdas. One of the pain point of Python lambdas is that they are single line thing. It's bad in my view (I know author said that this doesn't matter to him). I just love lambdas construct in kotlin. They are supper elegant, easy and having default parameter `it` is so convenient so constructs like ints.filter { it &gt; 0 } are so much more readable, short and easy to understand. Maybe we should revise lambda syntax and propose PEP which is less verbose and more elastic? Kotlin got it just more than right and I would just love to have similar syntax in Python, I have some concepts in my mind's, but maybe some people have better ideas? Overall experience to use more functional oriented paradigm in Python would be improved a lot. 
Thank you!
You import arcpy as arc so your code can reference arcpy as "arc", it doesn't rename the actual module and if you want to import something else from it, you need to use full module name.
It was added long ago and it hasn't really needed much upkeep, so it stays. I doubt anyone would object too strongly to a similar support for deb files but since all of those formats are terrible and should not be used (use wheels instead) it's not really been a priority.
Thank you! 
This is great tutorial.
I recommend to pipenv enthusiasts to take a look at [poetry](https://poetry.eustace.io/) :-)
Wait, did you install it system wide? Some people should not be allowed to have sudo
Um, for what purpose, they are different things?
You can still use virtualenvs within Anaconda. Its "conda" command also creates its own type of environment, which are superior to virtual envs for managing separate versions of libraries.
Mentioning a function which returns an iterator which spits out tuples without explaining it to someone who probably haven't ever touched programming in their life and most likely knows nothing about what I just listed isn't helpful though.
Normally, scripts are interpreted, and code is compiled to at least bytecode before being executed.
You run arbitrary scripts downloaded from the internet with full permissions. You do that at your own risk.
Have you tried VS Code? I never got into pycharm but instantly converted to VS Code.
great
It takes a lot before you can actually build something on your own and not everyone likes to learn a lot without results, or to build their things entirely from mothing. Learning about loops, statements, functions and why they are useful is pretty hard when you don't understand why they are useful and why we do it the way we do it, so I can understand why people don't. First time I programmed it was just basic C++ stuff by reading/writing files, and processing information in some way, it was very boring to say the least. I haven't learned anything fun until I sat down and started learning it on my own, which is pretty hard to do when you are taught in abstract and boring ways, which sadly, is the only way to learn properly, as computer science isn't fun, it's just a bit of math, reading comprehension, and a thousand sleepless nights. For example, it sounds fun to be able to create your own programming language which you can design to have whatever syntax you want, and have it do whatever you want, but it's rare for anyone to want to sit down and learn about lexers, parsers and things like building AST before you can compile or interpret it, besides, you already need to proficient in programming, and know about basic data structures such as trees before you can even try to understand it. And in the end, Interpreters/compilers are pretty simple, a lot of time invested for almost no return, just like in every project you make. There's a reason half the community cheers once a library everyone could only dream of is made by someone who has too much time on their hands and understands concepts required to properly build a system which would be useful and make someones elses life easier. TL;DR programming isn't easy, and often times, not fun either. Yeah you can program fractals at home or mess around with physics, if you, again, have enough time to learn the physics and theory behind simulating them, but that thing won't get your 3k entries into SQL database, will it?
Have you tried the terminal interpreter?
I haven't noticed that. `pip` works to install extra packages that aren't in `conda`. 
Virtualenv inherits from a base installation of python. If you have python 3.7 you'll only be able to make a python 3.7 virtualenv from it using virtualenv. I believe you can use pipenv to build from any version you want, I'm not sure i don't use pipenv. Brew is nice because you can have a directory with several clean envs in it to build from. 
✓ Not in /r/learnpython (this one is a good thing) ✓ HorribleNamingConventionThatStandsOutFromOtherPythonCode ✓ No context managers ✓ Hardcoded filename ✓ User input passed into main instead of user input being handled inside main ✓ Actual explanation uses completely different code to confuse newbies even more ✓ Flowchart doesn't even reflect the code, e.g. "If/Else statement" instead of anything meaningful ✓ Entire idea is something that is the culprit of Hackforums having the mindset equivalent to [I'm haxer now omg1!!!!one!!!!!!!](https://knowyourmeme.com/memes/hack-127-0-0-1) ✓ Didn't actually explain how functions work, like, at all
The functions are redundant because we have str.replace() and str.count() The other thing I don't understand why a new file is created then deleted.
Sublime text isn't that hard, actually. 
Python is a command line program, what are you talking about with scrolling?
I'd disagree with that and instead reccomend people use homebrew.
there are a few things i dont like about pipenv but im not about start switching all my project away from it. at the heart of it it does its job well. poetry is a carbon copy with the simple addition of dependency resolution that im against. when there is an obsucre conflict of dependencies there is no automatic way of resolving them. poetry dependency resolution is just a problem waiting to happen. also re intuitive cli: `poetrs add ..` or `poetry self:update` im being petty but come on, looks like a mix between alpine and ruby or something like the go package manager wars were settled with an official one, i hope one of these wins too and we can forget about this. for now im not changing anything
Psst... https://pushshift.io
You don't have to make a file. Just read the file into the txt variable as a string, you do your stuff and that's it. Have a look at the 'with open' expression too. Another thing that I forgot last time is that you can iterate through the string like for letter in string: whatever You don't need a counter.
Hi, this is an interesting idea and project.
Few things to make it more robust: Instead of simply writing `script, filename = argv` and otherwise having interpreter throw exception, you should instead *at least* check if argument count is correct: if len(argv) == 2: filename = argv[1] # the rest of the code Instead of opening/closing manually, use context managers: with open(filename, "r") as data: # use read/write operations on the file here # data is the file object # file is closed automatically Don't check for tabs and other things manually, use `.isspace()`, and simply skip entries that are space, note that newlines are also separators and count as space characters. Don't hardcode filenames, if you want to keep the `new_file()` function, for whatever reason, then at least rewrite it so you can call it like this: `new_file("apple.txt")`. 
Yeah, that makes more sense, and I haven't learned much about for loops, so maybe i'll change it when I get there :) 
This is beautiful.
You should look at other rpm distros as well. SUSE does some wonderful stuff and they have objectively speaking the best package manager out there, and also the best build infrastructure. They just don't have the documentation of Arch or the ecosystem of Debian. Aside from zypper they also have snapper, OBS is incredible and Yast is absolutely fantastic. 
&gt;Linux is liberal in letting us choose filenames, so sometimes we end up choosing files with special characters such as |, [, ], etc. When you try to use these files on other operating systems like Windows or Android, they fail to work properly. Why would I give a shit about Windows or Android when I'm on linux? If I am distributing something I will make sure that any shitstain and it's mother can open it, but what's the point of this?
Thank you for the for the .isspace() that makes sense, and would mean I could just account for GG, TT,... etc all on their own without replacing the tabs with a single space. Thanks for the other insights as well, I will note them in my journal!
Exactly, that's what parsers generally use to ignore insignificant whitespace. Well, unless it's Python, I guess.
I didn't know that. Personally, I've never written production code, only used it for entry level data science stuff, so I don't need to sandbox an environment per se. Good to know
Been there and done that, that was a bigger world of pain than python using apt get. Why would an all in one installation be harder than homebrew.
apt get? This is Mac, not Linux.
**Variant Call Format** The Variant Call Format (VCF) specifies the format of a text file used in bioinformatics for storing gene sequence variations. The format has been developed with the advent of large-scale genotyping and DNA sequencing projects, such as the 1000 Genomes Project. Existing formats for genetic data such as General feature format (GFF) stored all of the genetic data, much of which is redundant because it will be shared across the genomes. By using the variant call format only the variations need to be stored along with a reference genome. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
http://lmgtfy.com/?s=b&amp;q=python+repl
I am a Poetry user for few reasons: - Pipenv's virtualenv was supported by PyCharm only recently. Poetry's is always supported. - I need `setup.py`-esque `pyproject.toml`. It supports versioning and `README.md`, along with uploading to PyPI. `Pipfile` doesn't. - Better than `setup.py`, because it fully and always support Markdown. - Also, `add --git`. In `setup.py`, you need "manual" `dependency-links`. - `poetry remove package_name` remove all unused dependencies as well, `pipenv uninstall` doesn't. You need `pipenv sync` as well. - Even for Heroku, I still use `poetry` with `requirements.txt`.
&gt;prowebscraper *Looks at overview* Yeah lemme google pep8 real quick. Oh wait, same content. Okay, maybe this cunt at least referenced pep8 anywhere in their shitty blog? CTRL+F "pep" sadly gives 0 results. Thanks for effort man, appreciate it.
I use Atom for HTML, css and Javascript editing, despite knowing well that it is resource-hungry. Used to use Sublime + Brackets, but for Sublime, it is just an Evaluation version that nags you about paying... I also use TextMate, but it is really for a single file, not for Projects. BBEdit may be good, but I fear it may be like Sublime (Evaluation version...)
BTW, I never really have a need to `brew install python3` or something. Installing Python 3.7 from https://www.python.org already works OK.
I'd recommend using if \_\_name\_\_ == "\_\_main\_\_" here: [https://stackoverflow.com/questions/419163/what-does-if-name-main-do](https://stackoverflow.com/questions/419163/what-does-if-name-main-do) This allows you to import [DnaDecoder.py](https://DnaDecoder.py) without calling any of the testing functionality. &amp;#x200B; For printing out tests, I'd recommend using the python unittest framework: [https://docs.python.org/2/library/unittest.html](https://docs.python.org/2/library/unittest.html) If you don't want to use that, you can put your tests inside of an array and test on that: `tests = [['A T', 2], ['A G', 2]]` `for test, expected in tests:` `assert(expected == count(test))`
Started blogging about my projects on Medium. [First one's up.](https://medium.com/@ktvkvinaykeerthi/leonardo-generating-product-unique-specification-images-using-python-cc00ee3667c8) It's a python-based tool to generate key-specification images for products on an ecommerce website. If anyone wants to understand more about how it works, feel free to contact me :)
So is Print("hello world") a script? Since it's getting "interpreted directly"
[Try this!](https://portal.ebase.com/(e5)/fintego-deo/deo-md?wt_eid=2153812117777582883,2153812117777582883&amp;wt_t=1538132478365,1538132484238&amp;s_id=179544816X11329C96327863T&amp;p=963&amp;eox=r) Sorry it seemed to change
On top of what everyone else says, there are some opportunities for massive performance improvements. Right now, what your script does is, roughly: - Read the entire contents of the input file into a string - Filter the string to remove tabs (in RAM, allocating a second block of memory to hold the entire filtering result) - Write the filtered string into a file - And then, for each of the search strings: - Read the entire filtered string from the temporary file into RAM at once - Count occurrences But disk I/O is one of the slowest things you can possibly do, and you are reading/writing the entire data set from/to disk not once, but 12 times. This is surely not necessary; see if you can find a way to only load the file once, and collect counts as you traverse it. Loading the entire file into memory at once may also be a problem, if the input is very large; and even if it's not, it still means that you need to wait for the entire file to be loaded into memory before you can start counting. If you can rewrite it into a "streaming" form, where you read smaller chunks and process them incrementally, your code will run in constant memory regardless of input size, and with a few additional tweaks, you may even be able to do the counting in parallel with loading the next block. And then, one more completely unrelated thing: if you ever need to create temporary files in the future, check out the [tempfile module](https://docs.python.org/3/library/tempfile.html?highlight=tempfile#module-tempfile), which was created for this exact purpose, and deals with most of the obvious and less obvious pitfalls of tempfiles.
You're not wrong...but it's not that far off anyways. The `open` part (or whatever following `with`) is an expression, at least.
You should add an example `txt` file to try it on :)
Bravo. I was considering doing the same thing, it's a fun project :)
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
I find it interesting at least 😉 And it gives me an excuse to play around with Python
There's only to a certain degree of tasks that you can use Javascript for. In that sense i mean, you can't do any manipulation on the system itself with javascript. Totally two different languages and area of uses. 
Never had an issue with it, even using things that require C libraries to build and installed via pip run fine. 
I'm a PhD holding bioinformatics scientist. Great work! There are helpful comments in here so I just wanted to say that I would never have had the courage to share code when I was learning (unless I hopelessly broke something). Keep up the positive attitude! 
Yea it’s a common issue. Minus the lag. Can’t scroll up. Indenting gives me lots of problems. 
Apologies, but why the nit picking?
Well, I've been having some trouble with pushshift. Using the following query "[https://api.pushshift.io/reddit/search/submission/?subreddit=bitcoin&amp;sort=desc&amp;sort\_type=created\_utc&amp;after=1535455666&amp;before=1538134066&amp;size=4000](https://api.pushshift.io/reddit/search/submission/?subreddit=bitcoin&amp;sort=desc&amp;sort_type=created_utc&amp;after=1535455666&amp;before=1538134066&amp;size=4000)" to obtain all posts and comments from the last month only leaves me with posts in the last three days, regardless of the size value. Any idea why that would be happening? 
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
It's not interpreted directly, at least look it up before claiming anything... It's compiled to bytecode, stored in `__pycache__/*.pyc`, and then that bytecode is interpreted, that's how cpython ("the original") works.
Hello! I'm a bot! I see someone has already suggested going to r/learnpython, a sub geared towards questions and learning more about python. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
I would recommend just getting used to using argparse from the beginning. A few lines of boilerplate that I just copy from a previous project and you are good to go. import argparse parser = argparse.ArgumentParser() parser.add_argument("PATH") args = parser.parse_args() print(args.PATH)
vim
Thank you! Yeah - It was a lot of fun - I wasn't expecting to make anything significant. Turned out a lot easier than I expected - the python code is tiny and easy to hack on. And Nim is delightful. 
&gt; [The malware was delivered as a Py2EXE compiled python script dependent on a zip file containing standard Python libraries, open source libraries, as well as the attacker-developed Triconex attack framework for interacting with the Triconex controllers.](https://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html) Why do you feel the need to spread FUD? And even if it _was_ the favorite of malware deployers, so are probably keyboards and mice. It sounds like you are making a judgement based on this non-argument?
Why
Sure. But Debian/Ubuntu need to stop reinventing the wheel.
Me to.
Make that python2 or python3. Be specific about the version you want to use because python doesn't guarantee consistency. Most distros treat it as py2 but some go with py3
My niche-y personal project --&gt; [https://github.com/weibullguy/ramstk](https://github.com/weibullguy/ramstk)
For learning purposes? I think this was much more suited for r/LearnPython tbh
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [I made a python cheat sheet](https://np.reddit.com/r/learnpython/comments/82t191/i_made_a_python_cheat_sheet/) \#2: [2000+ free programming books on github](https://np.reddit.com/r/learnpython/comments/8ycc5j/2000_free_programming_books_on_github/) \#3: [When I'm coding, I don't feel stupid anymore](https://np.reddit.com/r/learnpython/comments/989qx7/when_im_coding_i_dont_feel_stupid_anymore/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Because Brew managers installs, not environments. They are completely different use cases.
Poetry has it's problems too. I do like it though.
Exactly, it solves two different problems. Virtualenv supplements Brew. If you are having problems with Python and bre you are not doing the follow up mounting step properly.
Thanks for your feedback! It mostly confirms my suspicion, that it is a high price for potentially big gains. I guess the biggest issue is, that we neither are all experienced developers, nor are our bosses willing to give us the time needed to learn a completely new complex tool. Maybe we can take some of the concepts and adapt them to our needs. I was hoping (as it often works with Python) that someone had already had this problem and solved it very well. It seems not to be the case though. So again, thank you for your time and feedback, I think you helped me with this decision!
Brew us like a better version of NPM. You still use virtualenv. They solve completely different problems. If you are having issues with brew and python you are not doing the mounting after installing the cask properly. I have seen people have this issue and it always comes back to this and then breaking the native 2.7 install.
Opening the file in read-only mode like you've done protects it :) You don't have to worry about accidentally changing the file because Python already makes sure you can't.
because normally the actual code is in functions and your code that is loose looks like this: if __name__ == "__main__": if len(sys.argv) == 2: script, arg1 = sys.argv # code that calls required functions and etc goes here If you run a module `python my code.py` then python changes it's name to "__main__", in case you don't know what it means. for better explanation, look up the first line on Google. But it's good to know that you can add code that will run only when you execute the file but won't do anything if you just import it. 
Woah I wish I had theese when I started programming in py
Hey Guys, I've been a Recruiter and Redditor for awhile but this is my first time using Reddit for Recruiting. (New account obviously). I treat candidates like humans instead of resumes. I try to stay away from the canned interview questions and instead have a conversation. Remember in any interview you do, you're interviewing the company as much as they're interviewing you. I'm working with a startup in Seattle that was founded by $MSFT execs. Platform Engineer Location: Seattle * Experience in one or more of the following languages: Go, JavaScript, Python, Java, C#. * Strong understanding of algorithms, data structures, and software architecture. * Comfort with all/some of the following: Docker, Kubernetes, Amazon Web Services, Azure, Chef, Puppet. * A systematic problem-solving approach, coupled with strong communication skills and a sense of ownership and drive. * The ability to debug and optimize code and automate routine tasks. * BS degree in Computer Science or equivalent practical experience. I'm also looking for a Developer Advocate and Full Stack Engineers. DM me with any questions and I'll respond as quickly as I can.
Totally agree! And to make it better, you can easily download and install from the Microsoft store .
There's a package called `click` for that. 
What platform is your application going to run on? If you are writing an application that is going to run on a Linux server, then it would behoove you to develop on the same distribution locally. If you are writing an application you hope to run on a Windows desktop, then develop locally on a windows desktop.
I mean windows is terrible, so if you have windows system then yeah I would install linux. But Macs are Unix based anyway so you don't have any of the issues in windows and you get all that functionality. 
Good job! Don't let code criticism discourage you. My first program took 20 lines to print "hello world" and now I research AI and write convolutional neural networks.
I see it as a red flag if a dev is using a Windows machine. I use a Mac myself, though.
You can still use them... 
There is some drawback, the main for me is the fact that windows is not able to fork a process..
&gt;add_argument instead of writing a one-off parser and dealing with flag order, defaults, etc. In Python, it's preached "one and only one obvious way!" And that's exactly how my CLI programs are called, I don't have those problems.
That looks like a solid productive day
https://docs.python.org/3/download.html
Search for reddit dumps, you will have all the GB of data you could want
Want more?
Not that bored... you said no when he asked if you want more...
Because I don't do coding a lot and forgot you can do that
Author of Poetry here ! &amp;#x200B; &gt;poetry dependency resolution is just a problem waiting to happen. &amp;#x200B; But that's the role of a dependency manager: warning you when there is a conflict in you dependencies. That's what every single package/dependency manager does. And, to be fair, you should not use pipenv either since it has a dependency resolver, albeit broken see why here [https://github.com/sdispater/poetry#what-about-pipenv](https://github.com/sdispater/poetry#what-about-pipenv). &amp;#x200B; &gt;poetry is a carbon copy &amp;#x200B; I disagree. See the comment made by some else but the gist of it is that Poetry helps you manage applications and libraries and helps you package your project properly without the need for \`setup.py\`, \`setup.cfg\`, \`MANIFEST.in\`. You get to have everything you need to manage your project all in one file. This is not the case with pipenv. &amp;#x200B;
Note that IPython 7 currently incompatible with jupyter_console. A fix is already merged, and a release of jupyter_console that fixes the issue should be out soon.
You can also just check if size ** 0.5 is integral instead of hardcoding a list of squares
Nice
Get this published 
I want more. 
I'm working on giving options for the shape, like triangles, will update
Look at the documentation again. There's a comment endpoint.
Now make one that gives us more RAM!
I don't want triangles, I want more cassettes. 
 squares = [i**2 for i in range(1, 8)] instead of explicitly coding the whole list yourself, and for _ in range(side) instead of n=0 while (n &lt; side): ... n+=1 Maybe check if the number is square by doing something like if abs(math.sqrt(size) - int(math.sqrt(size))) &lt; 1e-10: You also don't need the inner loop i = 0 while i&lt;side-1: print(part, end="") i+=1 you can just print the same string *side* times: print(part * side)
Is mac really that good of a development platform though?
Curly brackets are already used for set/dict literals so you can’t use that (a theoretical improved lambda should allow for returning a dict literal without having to use double brackets). Python blocks are purely whitespace based, but whitespace is ignored in the middle of brackets, like for a function call. So you need a syntax for blocks that isn’t white-space based and doesn’t look too different from normal python.
Nay! You can totally configure Vue.js to just use it as another loader; the same way it transpiles ES6 to ES5, you can have it transpile Python to ES5.
Man your code looks so nice.
Code golf is fun. 27 lines to 15. Could condense a few more lines but I've been neglecting work to do this :) from math import sqrt cassette = (' ______________ ', ' | __ __ |', r' | / \ / \ |', r' | \__/ \__/ |', ' | __________ |', r' |_/_o______o_\_|') while True: count = int(input("How many cassettes do you want?\n")) columns = sqrt(count) if columns.is_integer(): for _ in range(0, count, int(columns)): for line in cassette: for c in range(int(columns)): print(line, end="") print() else: print("That's not a square!") if input("Want more? 1) Yes, 2) No\n") == "2": break
I’ll toss out something a bit different but along the same lines. Jupyter notebooks. Setup a headless Linux system and install and run jupyter notebooks. In browser python and Linux command line. If you work remote or from coffee shops you can setup a vpn and be on it from anywhere. 
This post resonates with me on a spiritual level.
"Windows is terrible" Nice argument. Now provide something of value. I've used linux for a few years now and I still don't see how it enhanches your fucking development unless you're fucking yourself in the ass and use vim just to act smart.
I've just started learning too with a similar goal. My long term goal is to create a programme that can generate comments on results and whether or not they're statistifally significant :) Best of luck!
this is the best piece of software i've ever seen
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/commandline] [Project Management &amp; LaTeX Invoice Generator](https://www.reddit.com/r/commandline/comments/9jo1k7/project_management_latex_invoice_generator/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Because windows has other ways to start a process, where's the drawback? If you haven't realized, that's the only function fork has, as entire process hierarchy in Linux based OS revolves around forking everything on everything creating one giant mess. You might want to look into window's `CreateProcess()`, I'm sure you'll be amazed that windows can create processes too :)
We need a casette bot
Explain.
isn't using a virtual environment recommended in most cases? I never have, but I think I will moving forward
Can you genericize the code so it can take arguments for either cassettes, ~~diskettes~~ floppy drives, VHS tapes and SNES cartridges?
That's Monday's task. 😀
You too! It's been hard to find time but I'm finally committing myself.
So kind of like a VM?
what? just install some linux based os like ubuntu and you can get whatever IDE you want. 
Windows is internally very different from unix-like systems. You don't get a nice shell out of the box, can't install standard command line tools (apart from solutions like MinGW but even then, it doesn't behave similarly). All in all, development on Windows is a pain. To see a developer doing that (in a professional setting) makes me question their competence. It's like if you see code that looks like this: def do_stuff(Bar): if(Bar == True): do_something() else: doSomethingElse() There's technically nothing wrong with the code, since it works just fine. But it just looks wrong. The casing and indentation are inconsistent and the if statement is ugly, and that makes me wonder if the person who wrote it really knows their stuff. Judging from the downvotes I see that that's probably a polarizing opinion (or then it was the just the Mac comment) :D
So you more into emacs then?
Are you sure you know what you’re talking about? Vim is a text editor that can be used to write Python, or anything else you’d want. Also, it isn’t even Linux exclusive and can be installed on Windows just fine. I guess some people could consider it difficult to use since it has some unique quirks to it but it’s nowhere close to doing all your code in assembly language. At the most simple level, as long as someone knows to press ‘i’ before typing their document, and Escape :wq when they’re done, it can operate just as easily as notepad.
Here's a sneak peek of /r/unexpectedcodereview using the [top posts](https://np.reddit.com/r/unexpectedcodereview/top/?sort=top&amp;t=all) of all time! \#1: ["I am very smart" get his code reviewed.](https://np.reddit.com/r/iamverysmart/comments/9ezwnj/met_this_very_smart_niceguytm/e5sx50w/) | [0 comments](https://np.reddit.com/r/unexpectedcodereview/comments/9f26ii/i_am_very_smart_get_his_code_reviewed/) \#2: [Keyboard Setup gets a CR](https://np.reddit.com/r/MechanicalKeyboards/comments/9ewjvv/how_i_like_to_code/e5sitk9/) | [0 comments](https://np.reddit.com/r/unexpectedcodereview/comments/9f8gt1/keyboard_setup_gets_a_cr/) \#3: ["ladies ;D" (credit: /u/JWson)](https://np.reddit.com/r/iamverysmart/comments/9ezwnj/met_this_very_smart_niceguytm/e5sxmtp/) | [0 comments](https://np.reddit.com/r/unexpectedcodereview/comments/9f2c6y/ladies_d_credit_ujwson/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Haha. Nice.
In this case I wonder if the overhead of constructing the set is actually worth it. Can't test right know tho.
Virtualenv is a local container service for python. You use it to make sure you do not have dependancy conflicts when testing locally versus a deploy. Brew is an installation manager for mac os. You use it to quickly install and uninstall different version of python or other applications and manage the installations Yes, virtualenv is recommended but they are solving completely different problems.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/unexpectedcodereview] [Cassette printing python script gets rigorous review](https://www.reddit.com/r/unexpectedcodereview/comments/9joczg/cassette_printing_python_script_gets_rigorous/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Constructing the whole list/set shadows the benefit of O(1) checking. The more efficient way would be `size in (i ** 2 for size in range(1, 7))`, since it won't create any data structure, but then just checking if it's a square is O(1), there's no point in doing it this way. 
Idk this is dope. 
this afternoon sure
I think you’ll be fine. Use something like docker if you really need a Unix environment. That being said I recommend doing all your dev in docker as it is very easy to share projects and code between machines 
"Just as easily as notepad" I didn't have to google "how to exit notepad please I'm scared" the first time I used it.
I used sublime text for most things but now I'm enjoying VS code, not really into trash terminal editors, sorry.
Alight guys lets do this in one line of code!
Hows your gag reflex?
Erm... yes!
It would be if you constructed it before the conditional and used it multiple times. If not then it's likely the same or maybe a little bit worse depending on hash collisions.
I can't tell who's more bored at work, OP or the numerous others who're re-writing this to be more Pythonic. I mean, if we're going to waste time, waste it pythonically. https://www.youtube.com/watch?v=SpCPE1sjPHE
Yeah no shit, that's why it's Windows, and? Different is wrong? Also afaik Windows 10 has bash, never used Win10 so can't tell really. Apart from "muh command line", I don't see how development on windows is pain, and I'm not convinced. Mingw behaves exactly like your bash shell, have you even used it? Also what is this example with python? I develop on windows only, and my code looks nothing like that, like, how does this relate to windows at all? If anything, you just proved to me the stereotype of Linux fanboys being fucking retarded.
 --- cassette.py 2018-09-28 12:48:25.718464897 -0400 +++ ram.py 2018-09-28 12:48:24.766475414 -0400 @@ -1,2 +1 @@ -cassette = [' ______________ ', ' | __ __ |', r' | / \ / \ |', r' | \__/ \__/ |', ' | __________ |', r' |_/_o______o_\_|'] +cassette = [" _ __ __ _ _ __ ___", "| '__/ _` | '_ ` _ \\", "| | | (_| | | | | | |", "|_| \__,_|_| |_| |_|"] 
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
Tell me how it is easier to develop for Windows on Linux mate.
That is awesome!!!! I have been programming in python for around 6 or 7 years now and never knew that function existed (I've always just used either divmod or the modulo operator)
Idk this library
I wanted to, but I'd rather not share my DNA with the world :/, and I can't find any other files online.
It solves Genuine curiosity of how many different combinations I have. If I wanted to do it the easy way I could have just hit CTRL+F on the text file and counted each sequence, but I wanted a challenge.
Employer: I want 23 cassettes. OP: But that's not square. Employer: Figure it out!!
Sounds like you've been coding for a long time, I can't see anything but C taking more than 1-8 lines.
The world runs on Linux, unless you're doing front-end apps in mac or windows, developers would be best served by using (and thus learning) Linux.
He means loop back and ask the user for another number.
Well hurr durr just use magic of commands like vim does and voila, you just wrote 3 lines into a file over 15 minutes when you could have just downloaded a proper text editor and wrote them in 30 seconds like a normal person would, congrats!
I would use a generator statement ``sizes = [x**2 for x in range(10)]``
I personally just love how you guys went from notepad vs. vim (which is like duh!!!! vim is obviously better) to emacs vs. vim
What tool are you using here? 
Where do you see emacs? I'm sure he said Macs, and that's not a text editor, that's, uhhh, a thing apple sells for retards at 10x price and they somehow buy it. But that's besides the point. And I personally wouldn't really compare them anyway, having diarrhea isn't fun, neither is being constipated, I'd just prefer normal shit which at least eventually goes out without problems :)
IDLE
This won't work because it involves floating point math-- if you enter a large enough number that is some perfect square +- a small delta, this would report it being a perfect square even though it's not. For example, https://ideone.com/HFVT4H A more accurate test would be `proot = size ** 0.5; proot.is_integer() and int(proot) ** 2 == size`
As someone who is just getting started with learning Python this is actually quite the educational post. A working python script, a clear visual output, and a host of good comments on how to make it better! Thanks yall!
Wow that was extremely simple. Sorry for being lazier than needed sometimes. Thanks for the help! 
&gt; I also prefer working with the unix tools and APIs and I think a good programmer has at least some experience with those. I will just say "same with windows API" and fuck off because you think that remembering some fucking API that is platform dependent somehow shows how good of a programmer you are.
_¿Por qué no los dos?_ If you want to use PyCharm, you can do so on linux as well. Linux is better than windows for python programming. Even if you want to do most of your work in PyCharm, there are certainly advantages to being on linux. For example, compiling C extensions for python on windows tends to be a pain in the ass, but is generally less so on linux. If you're comfortable with windows and don't want to switch, it's certainly fine to use windows, but if you are interested in linux for any reason, I encourage you to try using it as your main OS for some time -- however, I think using linux _only_ for python probably would probably be a bit annoying.
For smaller data sets (I did it with a list/set of 10 ints, so super small) I’ve found that constructing a set is more costly than a list
Wait... is OP learning by messing around at work?? What is this!!
As an aside, [fpm](https://github.com/jordansissel/fpm) is a fantastic tool that can take a setup.py/PyPI package and generate an RPM or DEB from it. It also works with gem and cpan, and can translate deb-&gt;RPM and rpm-&gt;deb
Could be OPs new project to learn more about python
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://github.com/jordansissel/fpm) - Previous text "fpm" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
You can run it on a sever or a spare system. I’ve gotten it running on a raspberry pi as well. It’s similar to the idea of a vm but takes the setup and configuration to zero beyond install. 
This is not really related to Python 
This post is better suited for r/learnpython 
This post is better suited for r/learnpython And r/learnprogramming 
Everything that you did was what I did for my own app; Flask, React and Bulma. Right now I am figuring out users. How to do log in and out.
Not even dark theme
I did not. I knew that there had to be a way within SQL, but I did not spend much time into it. I decided to jump the gun and make a Python script instead. As I said, I know that this is not the best practice, but I am very content with myself cause this was the first time I used SQL and Python in a real life problem. I believe that it was to be expected that I would not do things the best way possible. 
This yield tonshit of trouble when using multiprocessing in an interactive way in a daily basis. As someone that need it intensively (modelisation and stuff), this is a huge problem. 
I'm trying to teach a couple of friends how to program, and one of them is hard to motivate into spending some time self-learning. Instead of spending 30 minutes reading a tutorial, he plays League of Legends for 5 hours. &amp;#x200B; I wrote a program using asyncio, discord, and requests to hit the League of Legends public API's to report in realtime to our Discord channel everytime he loses a game and his stats for the game. I have it running on a Linode server so it's always running. &amp;#x200B; It was kind of my way of nudging him to stop spending so much time playing LoL if he wants to learn to program, and to be able to show a use for programming other than the typical tutorial scenarios.
Sure. Care to answer the questions I posed you now?
 The weapon of the Jew is infighting. They force neighbors to fight one another so we don't turn and fight them. This is why Jews perpetuate: Feminism: Turning man against woman Black Lives Matter: Turning black against white LGBT: Turning gay against straight Antifa: Turning Republican against Democrat The list goes on The easiest red pills to swallow are those that conform to people's biased world view while easing them into the notion that equality (not division) is a construct yet even without equality we can still have cooperation. Example: Let's undermine Black Lives Matter, and to make things hard, let's target a black person Their biased world view states that not only are blacks systematically oppressed, prevented from getting jobs, intentionally kept on welfare, and framed for crimes they didn't commit - but police will shoot black people to death for absolutely no other reason than "dey racis'" Let's not try to combat this yet. This isn't a red pill, this is a light red pill. So let them believe all of this nonsense. Instead, we need to (while still keeping this narrative alive) convince them that equality is a construct. Because what they've been fed is more than "white people are evil". What they've been fed is "we're just as capable and our failures are due to racists keeping us down". We need to demonstrate that capabilities really do differ. So we'll point out: Differences in athletic ability between the best whites and average blacks Differences in muscle mass, bone density, etc Differences in tolerance for being outdoors in the sun By pointing out scientific facts like this we can say "it's not that black people are just as capable and being kept down, it's that blacks are better at some tasks than whites are -- and are being kept down". Convince them that their differences are their strengths. If you were out hiking in the woods overnight you'd damned sure rather have your black friend than your white friend with you. They have a lower fear response so they won't panic if a wild animal approached the camp, and they're stronger hunters. They'll keep you safe. Once you've eased them into the idea that they're different (in positive ways) you need to demonstrate how their previous world view might have been caused by these differences that they now readily admit. Because white people have a stronger fear response (we're more likely to panic in the face of danger), and because black people are physically larger, it makes sense that white people would become nervous around them. This nervousness, when given a gun, could cause them to shoot in perceived self-defense. This isn't the exact truth (the exact truth is that black people commit more crimes and 99% of the time when a cop shoots a black person it's because he was legitimately in danger) - but it's closer to the truth than their old belief, and will cause them to start thinking. Now here's where we can slowly add some tint to the pill to convert it from light red to full red: Because "white people are skittish and shoot in a panic", the trick to not getting shot is to not frighten the white people. Treat them like animals. You wouldn't run at a cat screaming. You'd slowly approach, lower your voice, and try not to make any sudden movements. Once they know how to safely approach a white person without getting shot, they can compare that to how their peers approach white people. They get angry because they were accused of a crime and, in an attempt to defend their honor (even though they were committing the crime), they run up to punch the guy. This startles the white man. So at the end of the day it wasn't the white man angrily running around shooting blacks, it was the blacks' own actions that instigated it. You put the impetus on them, even if it's the wrong impetus, and they start to consider their actions. Once they've accepted that, you can start to show crime stats. **Show less** 
generalized for cassette, VHS, floppy disks, and SNES Cartridges: cassette = [' ______________ ','| __ __ |','| / \ / \ |','| \__/ \__/ |','| __________ |','|_/_O______O_\_|'] VHS = [' ______________________ ','| |','| ____________ |','| / | | \ |','| | | | | |','| \__|______|__/ |','||____________________||','|______________________|'] floppy = [' _____________ ','|| | __ | | ','|| | | || | ','|| | |__|| | ','||___|______| | ','| ___________ | ','|| | | ','|| | | ','|| | | ','||___________|_| '] snes = [' _____________ ',' __|| ||__ ','|__|| ||__| ','|__||___________||__| ','|__| ___________ |__| ','|__|| ||__| ','|__||___________||__| '] def printSquare(side, obj, length): for n in range(side): for part in obj: print(part * side) return "" class triangle: def __init__(self,side,obj,length): self.side = side self.obj = obj self.length = length def upperleft(side, obj, length): row = side for n in range(side): for part in obj: print(part * row) row-=1 return "" def upperright(side, obj, length): row = int(side) for a in range(0,row): for part in obj: parts = row - a space = ' '*length print(space * a,end="") print(part * parts) return "" def bottomright(side, obj, length): row = int(side) for a in range(row,0,-1): for part in obj: parts = row+1 - a space = ' '*length print(space * int(a-1),end="") print(part * parts) return "" def bottomleft(side, obj, length): row = side for n in range(0,side): for part in obj: print(part*int(n+1)) return "" def printCassettes(): more = True while more: objects = [cassette, VHS, floppy, snes] obj = objects[int(input('What are you looking for?\n1. Cassettes\n2. VHS Tapes\n3. floppy disks\n4. SNES Cartridges\n'))-1] square = False length = len(obj[1]) while not square: size = int(input("how many do you want?\n")) sizes = [1,2**2,3**2,4**2,5**2,6**2,7**2] if size in sizes: square = True else: print('That\'s not square!') side = int(size**0.5) print('What shape?') print('1. Rectangle') print('2. Triangle') condition = int(input())-1 if condition != 0: print('Where do you want them?') print('1. Upper Right') print('2. Upper Left') print('3. Bottom Right') print('4. Bottom left') condition = int(input()) if condition == 0: print(printSquare(side, obj, length)) elif condition == 1: print(triangle.upperright(side, obj, length)) elif condition == 2: print(triangle.upperleft(side, obj, length)) elif condition == 3: print(triangle.bottomright(side, obj, length)) elif condition == 4: print(triangle.bottomleft(side, obj, length)) if condition != 0: print('Yeah I know I didn\'t give you all of them, that\'s what you get for asking for a triangle') print('Want more?\n 1. Yes\n 2. No') wantMore = int(input()) if wantMore == 2: break return "" print(printCassettes()) 
Probably. But I don’t want anyone to feel needlessly afraid of using Vim if they come across it, either. Just in case someone takes him seriously looking at this thread later.
For Reddit look up PRAW ... definitely the best way to interact with Reddit from python
&gt; Debian is an open source community and not an enterprise like RH/Microsoft What in the world are you talking about? 
You are one whiny fuck
If you think there is no advantage to using linux for development, then you are working on something specific to windows or you have no idea what you are doing. I suspect the latter given the rest of your comments in this thread. Please kindly see yourself out.
In my experience writing cross-platform python - It's easier to write your python code in Linux first, get it working and port it. Then doing it the other way around.
oh come on let him have some fun, why is everyone rushing to rewrite his code or feel the need to shove their "better" code
Definitely. I run a fairly robust vimrc file, and I’ve been messing with getting good key maps set up to make my work more efficient. Coding without vim shortcuts is hard once you’re used to them.
yeah I actually thought about that but I decided to define the squares you could use to keep it to a reasonable number. 
&gt; more pythonic No, it's not. When people say "pythonic" they generally mean, "in line with the general consensus of the python community as to how python code should look/behave," and that consensus starts here: https://www.python.org/dev/peps/pep-0020/ Item number three is relevant, here: simple is better than complex. You have a case where you want to check to see if a number is a square. Three are many ways to do that, but the right way isn't to construct a data structure and match against it! That's not the simple path. Many simple options exist, here are three in increasing order of what I feel are pythonic practices: * `(size ** 0.5) == int(size ** 0.5)` * /u/edric_garran's approach: `(size ** 0.5).is_integer()` * `import math; math.sqrt(size).is_integer()` Obviously, don't cram the last one together on the same line, I'm doing that for sake of the list. I think you were using "pythonic" to mean, "feels more like python code," and that's a dangerous way to use that word, since it leads to writing code that goes out of its way to use "pythonisms". Code should be elegant, but not at the cost of efficiency and clarity. 
https://i.imgur.com/gAtELry.png Alright billy, show me on the keyboard where vim touched you.
this comment got me from rectangles to triangles just so you know
Hello! I'm a bot! It looks to me like your post might be better suited for r/learnpython, a sub geared towards questions and learning more about python. That said, I am a bot and it is hard to tell. I highly recommend posting your question there. Please follow the subs rules and guidelines when you do post there, it'll help you get better answers faster. Show /r/learnpython the code you have tried and describe where you are stuck. **[Be sure to format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F)** and include which version of python and what OS you are using. *** ^(this bot is written and managed by /u/IAmKindOfCreative) ^(This bot is currently under development and experiencing changes to improve its usefulness)
None of this is being applied to numbers above to precision range of Python's floating point, but yes, if you wanted a generic solution for a library, then you would use neither of these approaches (or you would use the above approach that I gave, conditionalized on the size of the value). 
I like this
I'm enjoying it! I don't know a huge amount about python and I'm finding the comments pretty helpful.
I think this is a person who never had real comp sci background and is just frustrated with some IT corporate infrastructure job where he has no idea how to do things. 
&gt; y do data sciency stuff. Once you start branching out conda fucks your configuration hard would you mind explaining this a bit more? Just curious...
Nice... real nice.
Thats what I made my scripts on. How can someone upload my file and run it on repl.it?
I think we need to run this in [pyflame](https://github.com/uber/pyflame).
This is the kind of code I wrote in college, on a deck of punch cards, to create scratch paper on the system line printer.
If you don't have much experience or credentials, using Python to help you work a job or side gig more efficiently might be your best bet. 
That makes a lot more sense now, oops!
Good point! I didn't think to look for duplicates.
An if statement needs to end with a `:`. --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) (no images of code!) or use a site like pastebin. Also, include which version of python and what OS you are using. 
thank you
This guy codes. 
Make them rewindable.
For a guy who doesn't code, you kicked ass.
Without using it yourself, or without using it at all?
Write an extension in C that uses the lower level networking APIs available to your operating system (like sys/socket.h , then use that module from Python.
*Hi, this is Jeff in the Denver Sales Office. We have a major contract that requires non-square numbers. So if you could get that done by 3 PM for the demo, that'd be great.* More seriously, that's kinda cool.
If you want to take this brand of dicking around to the *next level*, I recommend checking out [asciimatics](https://github.com/peterbrittain/asciimatics).
Linux - any way you do it - seperate computer, dual boot, VM. Not quite as good but Cygwin, which emulates Linux by libraries that look like linux libs but translate to windows. Not perfect, slow because of the emulation layer. Advantage - less fiddling with the Windows system. 