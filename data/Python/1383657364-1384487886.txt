what about: {}['sing']
 from __future__ import delorean
Python is a fantastic cross platform language. I just finished up writing an app in PyQt and used PyInstaller to create binaries for it for Linux, Windows and Mac. It was a very pleasant development experience. Right now I'm working with Kivy and will be able to target Android and iOS with that. After I'm done with that, I'll be using DJango to target the web. So if you're a business you can write your business logic in Python and target desktop, mobile and web. I think that's a big deal. Kivy right now is pretty rough(but usable), but mobile Python development should only get better once Qt 5.2 hits PyQt. 
 def greet(name): print 'Hello, %s!' % (name,)
Slightly related: https://plus.google.com/u/0/+Mirumee/posts/cCmRBUVkqUz
Yes, make those who code in languages which disallow trailing commas jealous!
Came in here to post this myself!
only for old-school guys
I don't get it. :-( &gt;&gt;&gt; {}['no lock'] Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; KeyError: 'no lock' 
The thing is `str.__mod__` has two defined interpolation behaviours: for tuples and for dicts. Everything else is treated as if it was passed as a single-element tuple. Consider the result of me calling: foo = 'shrubbery', 'swallow' greet(foo)
no brackets needed: for item in 'coffee', 'beer', 'bacon': consume(item)
 &gt;&gt;&gt; Import this File "&lt;stdin&gt;", line 1 Import this ^ SyntaxError: invalid syntax I think that there is a case issue here.
 _ = ( 255, lambda V ,B,c :c and Y(V*V+B,B, c -1)if(abs(V)&lt;6)else ( 2+c-4*abs(V)**-0.4)/i ) ;v, x=1500,1000;C=range(v*x );import struct;P=struct.pack;M,\ j ='&lt;QIIHHHH',open('M.bmp','wb').write for X in j('BM'+P(M,v*x*3+26,26,12,v,x,1,24))or C: i ,Y=_;j(P('BBB',*(lambda T:(T*80+T**9 *i-950*T **99,T*70-880*T**18+701* T **9 ,T*i**(1-T**45*2)))(sum( [ Y(0,(A%3/3.+X%v+(X/v+ A/3/3.-x/2)/1j)*2.5 /x -2.7,i)**2 for \ A in C [:9]]) /9) ) ) Whether it's suitable for you depends on how big you want the print to be. I was thinking along the lines of the Perl camel T-shirt. If you are wondering what it does: http://preshing.com/20110926/high-resolution-mandelbrot-in-obfuscated-python/
It's a pun. KeyError: 'no lock' read it as: _KEY_ error: 'no _LOCK_'
I started more than ten years ago with [Alan Gauld's tutorial](http://www.alan-g.me.uk/tutor/tutcont.htm) and the first edition of [Python Essential Reference](http://www.amazon.com/Python-Essential-Reference-4th-Edition/dp/0672329786)
Do you have any such tutorials in mind? Would you mind linking some? Thank you though! Originally we had our game as a text-based MUD running over telnet and using twisted, but we wanted to take it to the next level by adding graphics. We were basically using this whole project to learn python, and thought that was the next logical step. Now it's just become so fun we decided to built it into a real game and finish it. Of course, telnet with twisted is a lot easier than a true client/server communication
Thank you! I'm dense sometimes.
clever!
In the absence of a useful project, a series of useless projects will suffice. I used projecteuler.net and the official docs to learn Python.
Yea haha. My phone auto-corrected.
I'd been working as a programmer for &gt; 10 years before using python for a project, so I was definitely coming from some experience in similar languages (e.g. Smalltalk) The o'reilly python pocket reference and the David Beazley book (and SO) were all I needed.
PyFilesystem author here (at least one of them). There are pros and cons to both methods. But in most cases PyFilesystem is a good choice. It will certainly take away a lot of the boilerplate.
How about just put "call me maybe" on it and call it a day.
Yeah I still have to remember to use list comprehensions, they really changed the way I think about for loops. They make code more succinct *and* easier to read, which I thought would have been impossible a year ago
too long.
Excluding official docs? That leaves only Google/SO. I found most of the tutorials to be a bit slow so I never finished any of them.
The Python tutor list, the Python usenet group, online tutorials such as Alan Gauld's Learn Python, Google leading to blog posts, the late Dive Into Python, reading error messages, reading other people's code to pick up ideas, Stack Overflow, Python videos on YouTube (including from conferences), trial and error, and, yes, having a project (which itself decomposed into a series of very many sub-projects).
Python gets used for logic in a number of games but the graphics (and most everything else) is rightly handled by C/C++ stuff.
Thanks!
A MUD wouldn't be so hard, 'cause it's not realtime, whereas what you're doing now is.
even though it's another layer on top of packaging, if conda achieves its goals, it could really change everything.
well, I used lpthw and Udacity's course by Peter Norvig on writing programs. Then I started contributing to open source projects and finding reasons to use Python. It helps to be willing to write really crappy code and throw it away (but learn from it).
I wrote something that is similar, in ways, to your project. I used the Reddit API and the json library instead of using [praw](https://pypi.python.org/pypi/praw). I'm sure they both have their ups and downs. I also used [requests](https://pypi.python.org/pypi/requests) and BeautifulSoup instead of the imgur API. Figure out what's best for your project and go for it! Somethings to consider, from my experience, would be: * handling imgur albums. * handling urls that end in .jpg?1 where .jpg is the image type (can be something else) and 1 is a number from 1-9. I won't spoil too much of the fun explaining these issues more. Some features I never got around to implimenting were: * keeping track of what images the program had already downloaded. * Automatically scraping the images every [amount of time.] * Another interface instead of the command line interface. Have fun! 
Edx.org 600.x https://www.edx.org/course/mit/6-00-1x/introduction-computer-science/1122
When you are new to programming in general, I'd recommend a lecture format where you learn about programming on the one hand, but also get to write code and try things out on the other hand. A good resource is Udacity's free course Introduction to Computer Science taught by Prof. David Evans (https://www.udacity.com/course/cs101)
Rapid prototyping. If you absolutely positively need a product finished right now, Python's your language. Also, in my thoroughly jaded opinion, it's the most fun. Though you're not supposed to, oneliners, massive list/dict comprehensions, etc., make you feel like a wizard.
This is a cool article. I had pretty much the same experience as you. Had about 52 excel files with over 200k entries on each with about 30 columns. I had to do simple queries on this huge set of excel data. First I tried just doing a search through each file line by line in a specific column for a certain data set. This would take like 130 seconds or something like that. Sometimes more if the data set had multiple instances across files. This was a stupid way of doing it and pretty inefficient(despite still being MUCH faster then just manually searching the files). The second thing I did which worked pretty well was just create an object out of each data set and keep it all in memory. I used Tkinter as a gui and on click of a load button it would go through and create objects using the columns as class variables. Then once these objects were created, The Tkinter frame would have these objects accessible and queries would be preformed on the list of objects rather then the files themselves. This way worked pretty well, except it would take a few minutes to instantiate all the objects from excel. But once that was done queries only took a second. I finally realized that I was essentially creating a database in temporary memory and should just probably learn how to use databases. I very badly used Django and the python manage.py shell to run the script that puts the data from excel docs into objects and then put these objects into my django models via MYSQL. I then made a simple interface using django templating so people could run queries on this database and ran this over an open 0.0.0.0 port on my IP so my co-workers could access the data. It ended up working out pretty well and was definitely effective but i know now that this insecure, bloated, and a stupid way to do things. This was also the first time I really used a database and it was a great learning experience I wish i would have seen this article back then!! 
yeah, i was just adding to why you can skip the brackets for anyone confused by it =)
` echo '+1'` - my bad.
And then I added why you should use a tuple over a list for a know quantity. Yay expand knowledge! ;-)
I knew PHP fairly well and it didn't take long to mentally convert it over to Python. Throw in a mix of official docs and StackOverflow and here I am. Books tend to be way too wordy for me to pick up how to code from them. I've since forgotten most of the PHP I knew.
ugh when going through projects to work on 9/10 will be looking for PHP developers and even though I know PHP I just want to take the project and do it in Python. Why is PHP so prevalent still, legacy website I get, but people still want most new websites built in PHP.... Why not rails or django? Would you agree its easier than PHP? 
Python-Django is definitely becoming more and more popular every day. Not only because it is more convenient/easier than PHP, but also because there is a great support community so that it grows in features. PHP will probably not go away, but I think it will grow smaller. You might also be interested in the web development course on Udacity then: https://www.udacity.com/course/cs253 Btw, it is taught by one of the Reddit Co-founders, Steve Huffman 
Makes sense. Thanks for taking the time to explain. :)
But how fast is it compared to other SQL databases?
Sorry, haven't tried, yet. I chose SQLite over MySQL for example, because I wanted to have a solution that is perfect for small work groups (we are 4 people working with the data base), offers easy setup and back solutions, and doesn't require special server infrastructure. But I'd be definitely interested SQLite vs MySQL comparisons, so if anyone has a good resource I'd be looking forward to it! 
Started with Codecademy which taught me the basics and gave me an appetite for Python by showing how easy and useful it is. Then I got the book ["Learning Python"](http://amzn.com/1449355730) which solidified my knowledge and provided a great jumping-off point to start contributing to open-source projects. Still have a lot to learn but it is a fun journey.
dammit it's short notice
Thanks, it's a good initiative !
I find that SQLite query speeds are on par with MySQL and Postgres. [Here are some old out-of-date benchmark tests but will give you an idea.](http://www.sqlite.org/speed.html) I use it quite a bit but it has limitations. [Here is a good overview about when to and when not to use SQLite.](http://www.sqlite.org/whentouse.html) Most of the time, I use it for simple database querying and lookup. My biggest use is that I have Python scripts that scrape newly approved Oil &amp; Gas permits from state sites. On several million records, my queries execute in hundredths of seconds. FYI, I am running indexes and views. The two big drawbacks I have found with SQLite. Accessing data over a network, it can be significantly slower due to the native filesystem. Concurrent editing is the other drawback. There can be only 1 editor at any specific moment in SQLite. Now I have gotten around this by some programming tricks which works fine for up to ~5 users but it's a hack. The trick is to always open the database, do what you need, close the database immediately, nulling your variables. Every transaction. Open/Process/Close. Otherwise, you will run into file system locks. With a few users, the chance of any two editors trying to commit at the exact same moment is minuscule. I always check for errors. If I get a lock message, I sleep the app for a few seconds then try again.
I couldn't give you a benchmark, but I've always heard its alright for reads and horrendous for writes. Also, your only option for scaling a SQLite database is to scale vertically since it isn't a networked SQL db, and it's also pretty difficult to convert a SQLite DB to a traditional SQL database. 
This depends a lot on the use case. The architectures of a standalone database like SQLite and a server like MySQL are fundamentally different and have pros and cons. To put it simply, SQLite has low overhead, but doesn't scale up well. For high volume, high-concurrency, high-write databases, MySQL is probably a lot better. For more modest projects, SQLite can do a fine job. As the SQLite folks themselves say: "SQLite is not designed to replace Oracle. It is designed to replace fopen()." That is to say, if you were thinking of writing your own file format manually, think about using SQLite instead. See https://www.sqlite.org/whentouse.html
Good points! "SQLite supports an unlimited number of simultaneous readers, but it will only allow one writer at any instant in time. " For our application it will be reading the database 99% of the time. And since we are only 4 people it wouldn't be so much of an issue ensure the database isn't locked when someone wants to edit it. They have a pretty good "When to use" section on the SQLite section that one should read before implementing it: http://www.sqlite.org/whentouse.html
I use a similar approach at work but with [Robot Framework](http://robotframework.org/). The idea is to make tests readable as close as possible to plain English whilst removing the noise around setting up the fixtures/test environment. You end up writing quite a bit of code as testers (we have a dedicated team luckily) but our tests are way more maintanable and readable.
You created an account for this? I'm flattered!
&gt; A lot of meetup groups - including NYC Python - are distributing steep discount codes &amp; handing out some free tickets. oh wow great ! good to know, I'm in the area. I was just arguing with self if I should invest both weekend and $350.....
I used sqlite to do some processing on ~20 million readings from an oceanographic winch a few years ago. The first version of the code I hacked out worked fine on small datasets, but choked hard on the full one. I changed it over to use sqlite and it handled it like a champ. Huge wins by using sqlite with python for dealing with lots of data: 1 - You get SQL as a query language 2 - sqlite will unbox your primitives for tighter storage (and faster processing depending on what you're doing) 3 - query engine is now written in C (much faster) instead of an ad-hoc collection of python functions that you cobble together for your specific purpose Python data structures and "primitives" are pretty fat compared to what sqlite will give you. When I loaded up all my data into hashes/lists/etc, along with whatever else I was running on that machine, it exceeded the 4GB I had and started paging -- game over. With sqlite, it was far, far smaller, as you would expect -- no paging. 
Before I found out about sqlite in Python, I tried using the pickle module. I was reading in my data and created a dictionary with IDs as keys and columns as values (actually I created a new object class for the values). It was also very neat to work with, but pickling and un-pickling is very inefficient if you are working with a lot of data. Also it eats up memory like nothing else
Yeah, I've used SQLite for content management systems for clients with great success. The vast majority of the time people are reading from the database with updates happening very infrequently and if we ever had performance issues in most cases we could solve it with caching. 
see my [answer in stackoverflow](http://stackoverflow.com/questions/5957470/matlab-style-find-function-in-python/5957742#5957742). &gt;&gt; ar = np.array([2,4,1,6,2,7]) &gt;&gt; np.argwhere(ar&gt;3) array([[1], [3], [5]]) 
cat &gt; votes &lt; 1
I would also suggest looking into SQLAlchemy (works with sqlite, mysql, postgres, etc...). SQLAlchemy basically removes the need to know SQL, just the basics of how databases work. It also makes the code a lot more maintainable, as you won't have to go back into it later to make SQL statement modifications. Simply put it turns tables into objects (classes) that the rows are attributes of. So inserting a new row would be like: new_row = Table(id='1', name='bob') session.add(new_row) I have had to do databases for the past two years with Python and have gone through working directly with Postgres and sqlite, as well as MongoDB and SQLAlchemy. I can say from experience that using something like MongoEngine or SQLAlchemhy will make your life easier down the road, as well as anyone else working the code. 
You are having an issue with scope in your program. Scope is divided into local global and builtins. Since you define drive_size inside the main() function's local scope the calculate_jpg() function can't resolve the drive_size variable. if you changed line 7 to calculate_jpg(drive_size) and line 10 to def calculate_jpg(drive_size): Then the program should work. If you want to implement it using the global scope (this isn't commonly done though) the following would work drive_size = 0 def main(): global drive_size print ('Hello.') print ('Enter the size of your USB storage volume in GB.') drive_size = (int(input('GB'))) calculate_jpg() print ('you can fit this many of each file type on your volume.') def calculate_jpg(): drive_byte = drive_size * 1000000000 jpg1 = 800 * 600 jpg2 = jpg1 * 2 jpg3 = jpg2 / 25 jpgans = drive_byte / jpg3 print (jpgans, 'files can be stored in the jpg format on your', drive_size, 'GB flash drive.') main()
The problem is that in the calculate_jpg() function, it does not know about the 'drive_byte' value. Variables are local, so main() has a variable called drive_byte, but calculate_jpg() does not. You need to pass that value in as an argument to calculate_jpg(). def main(): print ('Hello.') print ('Enter the size of your USB storage volume in GB.') drive_size = (int(input('GB'))) calculate_jpg(drive_size) print ('you can fit this many of each file type on your volume.') def calculate_jpg(drive_size): drive_byte = drive_size * 1000000000 jpg1 = 800 * 600 jpg2 = jpg1 * 2 jpg3 = jpg2 / 25 jpgans = drive_byte / jpg3 print (jpgans, 'files can be stored in the jpg format on your', drive_size, 'GB flash drive.') main() 
I actually wanted to learn Python specifically for programming Maya scripts and plugins. So along with the regular Python language resources, I also have used this website called CGCircuit that has some great beginner tutorials on Python-Maya programming. I'm learning within the Maya API environment, but by doing so it gives me a reason to learn Python as well. In short I am also using video tutorials with Google.
 def procrastination(): pass
I would actually buy that shirt, if I weren't broke.
I like to see other file system ideas. My: FS that overwrite 'access denied' with ask sudo/root pass and try again Now I can make my prototype :D Thanks. 
Is there a SQLite type database for unstructured data?
I forgot you worked for continuum haha! If it's not easily gettable by pip, it's probably not worth the time to upload there - better to do it via a project website, no?
If I recall practically every tutorial that uses SQLite recommends not using it in production. I'm very surprised to learn that it has a 140 TB limit on files.
This is awesome, thank you!
tl;dr you suck at learning. EDIT: I'm not wrong. The guy clearly implemented things extremely poorly and planned exceptionally bad.
SQLAlchemy has some *insanely* cool features that makes working with DBs a joy. I've been working a lot more with NoSQL lately, but whenever I have to dip my toes into the SQL pool SQLAlchemy makes it a hell of a lot easier than dealing with MySQLdb.
Check out [UnQLite](http://unqlite.org/)
Fortunately, I haven't had to worry about this size limit yet. For the data I am working with it is 100x more I need. But this also means I couldn't test how accurate this information is. I got this information from their website, which should be quite reliable I think. http://www.sqlite.org/limits.html "The largest possible setting for SQLITE_MAX_PAGE_COUNT is 2147483646. When used with the maximum page size of 65536, this gives a maximum SQLite database size of about 140 terabytes."
There are things which SQLite doesn't do well (e.g. concurrent writes on a db, even if they're on completely different tables); and the fact that it's a library instead of a process of its own means that it doesn't make much sense to use it if there's a dedicated server for the db. But that leaves many cases of "production" where it's still perfectly fine (particularly if there's no concurrency or only concurrent reads).
 with open("C:\Users\user\Desktop\searched.txt") as f well, does this work even in Py3k?
~~[The t-shirt](http://i.imgur.com/42aY919.jpg)~~ [The t-shirt](http://i.imgur.com/j54AzpX.jpg) (I like this version better)
Tell you what, I'm actually super fucking interested in all this shit. If you'd like to add me on Skype, I'd love to learn shit together with you, and have your questions bounced off me, etc.
Pretty slick. I've tried a few pipeline packages and the main complaint is that they become more confusing and complex than a straightforward approach. This solves that. But I can't imagine a job simple enough to fit within the limited expressive range.
Yup thanks for summing that up
Yeah the MUD wasn't hard at all. We had it working wonderfully, and built it into an (almost) complete game: npcs, shops, bosses, creatures, leveling system, quests, the works. We just didn't have a lot of content (about 200 rooms) so you could explore the entire map in a few hours, and there weren't many quests. I half-jokingly said we should make it into a graphical game and we've been pursuing that the past few days. We have the basic mechanics working again, it just lags like hell and I'm on a LAN connection with the server. So to be honest, I didn't think it would be a whole dive in itself to get it to not lag, but we want to do it right, partly because we have the crazy dream that it'll be a decent game and people will want to play it, but mostly because this is something we're both interested in (neither of us are CS majors or anything "useful" (philosophy and music education)) and love programming. Game developing is loads of fun, so that's what we went with.
Will do! You probably know more about python and all of this in general than us, so we'd love to have the help!
FYI -- this PR to MPL will allow for URL specification of styles: https://github.com/matplotlib/matplotlib/pull/2236 e.g., in this case, you could do: from matplotlib import style style.use('https://raw.github.com/daler/matplotlibrc/master/rc/rlike') Now just need to get that PR merged...
Sweet! 
Looks like the author just added them!
I enjoyed reading "Expert Python Programming" by Tarek Ziade, despite some harsh criticism directed towards that book that I saw online. Trying things from this list http://pycheesecake.org/wiki/PythonTestingToolsTaxonomy also helped, because just writing code is one thing, but using tools to polish it is totally different.
I wouldn't call Python best, but no other language makes me feel so comfortable while writing my own code or while reading code written by others.
I'm with you there man. Every time I've tried to use an ORM, I feel like it's making things even more difficult than they need to be, and nowhere near as legible as nicely formatted SQL. Plus my scripts ran about 3x slower.
Hi James I got the discount buy thru, see u there
No, that's the whole point. It's easily installable by anyone with conda, which is everyone that has Anaconda - and that's actually quite a lot of people. Pip install for binary packages in numpy/scipy land is just playing with fire. Even if you don't get burned today, you will very likely be in a bad situation tomorrow. Project websites are not in better shape because it's the *format* of the package itself that is important. Binstar is the PyPI equivalent for Conda. (It offers much better version handling, among other things.)
I also agree that ORMs are often (always?) an unnecessary abstraction. However, you should know that SQLAlchemy has essentially two 'modes' - there is an ORM that it can use to manage DB access, or you can also construct SQL queries using it's query language directly without any sort of ORM. This construction language is actually quite nice as it lets you compose queries as a construction of functions and objects rather than as string manipulation. It's really quite nice! (Although last time I used it, it was quite frustratingly difficult to get it to dump a query to a string - you had to provide it all sorts of context from an active connection first. Not sure if there's a fix to that.)
I'm so happy to see this becoming mainstream! When I worked in biotech, I had a batch job that had to run on ~2TB of data. There was a lot of preprocessing science stuff but at the end of that computation all that I had to do was essentially one **huge** aggregate query on the data set. I wrote it in python and hacked on it for weeks to speed it up - all sorts of parallelization tricks, everything I could think of - but it was taking 5-6 hours to run due to all sorts of crazy swapping. At first I was building dictionaries that ballooned to hundreds of gigs quickly, then I started building suffix tries, etc. etc., but Python is not a good language for this sort of work. At the end of the day, someone online suggested running sqlite in ":memory:" mode so that the DB was purely in memory. The entire DB ended up being about 40 gigs (which was well within the memory specs for the server running this code) and the entire query took ~10 minutes. It also took me maybe three days to code and test, way under my time budget. Considering the script started life as some horrible concoction that would take weeks to run (if it ever finished), it was really amazing to see it turn in to something that ran in under a half hour. This was really a huge accomplishment for this company. It felt great! One of my favorite memories in programming.
If the application is focused on these generated images, the python module/code/data required to generate these images is far far more important than the choice of web framework. 
There's [BerkeleyDB](http://en.wikipedia.org/wiki/BerkeleyDB), which I've had good experiences with.
We're actively working on improving this page. It should look better already, and will look even nicer in the following days.
Wow, obfuscated and practically useless. The exact opposite of idiomatic python.
It is not about abstracting away the complexity of SQL, imho it is impossible to hide it without getting a badly leaking abstraction. sqlalchemy's query generator just allows you to write sql programatically in python, without "string glueing" your way to the result. An ORM is about mapping data to objects - if you don't want to do that, it's probably not for you. A good ORM can lead to cleaner code and less development time, because you can skip your own conversion of row results to something useful. Now there is also the "BUT PERFORMANCE" crowd - if you need to be really fast, don't use an ORM, but it is probably faster than you'd expect and definitely faster than most people need it to be. Developer time over code efficiency etc. - python devs should be used that. Also, please don't judge sqlalchemy based on experiences with other ORMs, it probably doesn't compare. It is in my opinion the only ORM which got it all right.
Adding indexes will speed queries up dramatically.
this is impressive. can i spin up a bunch of the threads and have each pipeline run on its own thread?
to;dr this isn't Reddit
http://docs.python.org/2/
the questions and answers ?
 &lt;!-- Le JavaScript --&gt; &lt;!-- Placed at the end of the document so the pages load faster --&gt; And after that 9000 js files just in case it loads too fast...
If you can fit in memory, [PANDAS](http://pandas.pydata.org/) is awesome!
Is there something in particular you don't see [in the docs](http://docs.python.org/2/library/itertools.html)?
No one mentioned "HDF5" and pandas? http://www.hdfgroup.org/HDF5/ http://stackoverflow.com/questions/16628329/hdf5-and-sqlite-concurrency-compression-i-o-performance
I have also had good luck with sqlite and large data sets. I wanted to do ip address based geolocation in python. I wound up taking the csv data from MaxMind and importing it in to sqlite and then wrote some routines to query it. In the end I was pulling data from several tables with over 100,000 rows and one table with over a million. The queries only took a few second and could be sped up if I go back and adjust the indexes so they are tuned for spatial data. I was very impressed at how fast it is. Now if you need to do lots of concurrent writes you are better off with postgres or mysql but for read only data sqlite is great.
For the server back end.
Background in Matlab, ended up trying to solve a problem in Python instead. With lots of internet searches, seeing solutions on StackOverflow, official documentation (fantastic for SciPy, NumPy and Matplotlib), eventually got what I wanted. Then I started trying other things in Python until I no longer use Matlab for calculations or plotting. So I guess I learnt a lot of techniques from my Matlab classes at university and applied them to Python (once I understood the syntax). From what I've heard from actual programmers (not scripting people pretending to program, like me) is that one of the traits of a good programmer is the ability to understand and find solutions to your problems quickly and efficiently. This is normally achieved with search engines...
Yeah there is usually always a quality post that shows you how to do what you want 
would be nice to have the outline on the left always. If i click on http://django-payments.readthedocs.org/en/latest/modules.html#google-wallet i cant see the outline anymore.
My first language ever was Turing, which was a simplified Java experience. However, looking back, it was a good precursor to the basic mindset and syntax of Python. When I was told I could do a socket networking project in any language of choice during university, I googled what language most easily aligned with the project's goals, and it ended up being Python. So I just opened up the official doc website, one of those language cheat sheets, watched a few YouTube tutorials, and crawled StackOverflow for specific roadblocks, and I was set. 
Those tutorials are talking about creating server apps, like websites. SQLite doesn't handle multiple connections. However, SQLite is completely "production ready" for any application where there will only be one client connecting at a time. Firefox uses SQLite to power its URL bar search, for instance. 
Really, I'd use [collections.namedtuple](http://docs.python.org/2/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields) every time, there. Defining one takes one line, means you don't have to scour functions to figure out what types you're dealing with, and it can either be used as a tuple or an (immutable) object easily.
Some more examples that I wrote a while back http://pythonarticles.com/itertools.html
SQLAlchemy contains a non-ORM part. Basically, a query builder. It works remarkably well, and protects you from "string gluing hell" in the cases where you're dynamically picking and choosing which restrictions you need on your query. It also protects you to some extent from DBMS-specific differences, or at least makes it more obvious when you are doing things which are DBMS-specific. ORMs are a pain in the arse, but a decent programmatic interface for querying a database without stringing strings together is useful.
Fucking PHP. NULL++; NULL--; What do each of those evaluate to?
From looking at the crypto parts really briefly, you're photos are encrypted with an insecure key, which is generated by md5'ing the album password. To improve this, generate a random key, and then mix the passphrase in via a password based key derivation function, such as PBKDF2. edit: Also, your password is passed on the command-line, and stored in the Album's password field insecurely.
Thanks. Looking forward to more benchmarks: TEXT vs INT IDs
You can use a special `:memory:` database file to SQLite to get a memory-only database.
Production Python 3, baby!
Django is now officially a boring framework. It so stable and robust is not funny anymore. That's a good thing.
I can't see any reason why the decorated functions need to produce another function, rather than just being the pipe part themselves.
Unit test, something that was long overdue. Everyone talks about how important they are, however, good resources are rare.
I'm not a python programmer but am interested in learning. It's cool to see others who are not programmers hopping in with both feet because they're passionate about it. Good job OP!
The major feature you get with SQLAlchemy that is not easy with plain SQL is composability. It's trivial to reuse subqueries and join whichever way you want and change your mind later.
&gt; If a generator is given, the items all continue along the pipeline, creating a fork. How about an example in the overview of this?
Eff you Django team! I installed 1.5.5 yesterday! 
And it is also the context that matters. Even if something is slightly better/more efficient it does not mean that it makes sense in every situation. For example, I would use C++ to grab information from a small text file, and on the other hand I wouldn't want to implement a Molecular Dynamics simulation in Python.
HDF5 also something I considered before I found sqlite3. I was just thinking: why all the effort when someone already came up with this great SQL. But I haven't heard of Panda then...
Just tell yourself you only run super stable and wait for 1.6.1
the doc is indeed comprehensive, I guess I'm looking for just better explanation. I always felt the docs are as if written by robots.
Looks quite simple and nice. However, reminds me a lot of [Tornado](http://www.tornadoweb.org/en/stable/) or [Circuits](http://circuits.readthedocs.org/en/latest/).
Hello, reddit! I'm one of the developers of the Pants networking library (having worked on the HTTP client and server and the web microframework), and I'm proud to present our 1.0 release. --- Pants, at this time, will run on Python 2.7 and it has great support for streaming connections--both TCP and UNIX sockets. **Python 3 support is currently in the works.** --- I'll be monitoring today's thread, so please ask me anything.
Yes... but sometimes you need to the DB to last but you also need to load 10m records in it. That's when using /dev/shm is amazing.
Yup! We pulled some inspiration from Tornado when developing Pants. The Tornado HTTP server is, of course, great. However, we felt that developing non-HTTP applications on top of Tornado was unnecessarily complex. Pants *has* HTTP support, but it is primarily a *networking* library, where Tornado is primarily a web framework and HTTP server that *has* asynchronous networking. As for circuits, I never quite managed to get into that myself, so I don't have any comparisons to draw at this time. I suppose it is class based, but our main inspiration for Pants precedes it quite severely. Pants was effectively inspired by [asynchat](http://docs.python.org/2/library/asynchat.html). We specifically liked the terminator used by asynchat, and expanded upon the idea to create our [read_delimiter](http://www.pantspowered.org/en/latest/core/stream.html#pants.stream.Stream.read_delimiter).
How will this overlap with tulip?
Thanks for asking. We'll be working on a compatibility module that implements the interface defined in [PEP-3156](http://www.python.org/dev/peps/pep-3156/) as we work towards Python 3 support, though I expect it won't come in the same release. I imagine that we'll also consider a way to run code written for Pants on top of a PEP-3156 compliant interface. We haven't really talked about it yet. Either way, our first goal is getting Pants working on top of Python 3. There's currently work being done on GitHub for that, and we've mostly got the Pants core working. Just the HTTP and web framework to work on now.
Can remember a discussion yesterday here on reddit about PHP vs. Django with regard to support, community, and future features. Here you go :)
The overview has an example of this, but it's not obvious because I don't have steps afterwards. ``twofer()`` is creating the fork. Thanks for pointing this out though, if you didn't recognize it I'm sure others didn't either. I'll do some updates later today.
That will only be part of the next release (1.7).
yeah I didnt - it looked like it was just doubling the members of a list :)
I'm no CS major either. I feel like it's a bit of a waste of time to be honest. 
My projects from 1.5 are compatible?
https://docs.djangoproject.com/en/1.6/releases/1.6/#backwards-incompatible-changes-in-1-6
Is pantspowered.org being hosted using pants? Just a heads up, pantspowered.org doesn't work unless you prepend www. to it. Your git repository links to pantspowered.org.
At least one network round-trip, usually two for initial commands.
meh.
It is not. Right now, we're just using the excellent [Read the Docs](https://readthedocs.org/) service to host our documentation. We don't really have enough content for a proper website yet. I'm aware of the DNS problem. Once the lead developer gets out of work, we should be getting that fixed.
Well, I think we need to break out your question into smaller, simpler questions. * What requirements need to be fulfilled to insure that the science is valid in the code? I think here you should look at pitfalls of different variable types. And you should look at limitations and pitfalls of transferring from one type to another. * I'm expecting to be able to update the code when the programmer leaves. Is this something out of the ordinary to request from a programmer? Haha. Yeah, documentation is out of the ordinary. You need to ask for that. * Do they have expectations of using the code later? If you're paying, the code is yours. It's up to you if you want to allow him/her to make a copy for themselves, or if it's proprietary. * How does that all work --especially if I'm coding also? Ask your coder how to deal with situations in the cvs, svn, github, etc where you are both working on the code. A good coder should have an answer for this or at least be able to relate a story or two where they bumped into trouble and found a fix. * How can I prepare myself to communicate exactly what I need out of the program? You should start with a general overview of what goal you're trying to accomplish. Then you should talk about how you expect the program to solve this problem and achieve the goal. Keep in mind these are two separate issues. It's important for the coder to know what your actual goal is (outside of code expectations) because he/she will have recommendations for the code that you will need. You are the expert on what the goal is, the coder is the expert on what is possible, impossible, time-consuming or risky with the code. Also, you should talk about anticipated inputs and expected outputs. You should talk about expected time-frame for the project. That's just some quick stuff off the top of my head. I hope it helps. Oh! Look up ducky coding or rubber ducky programming. Maybe you should have the coder explain line-by-line to you instead of a rubber ducky.
Anyway use geodjango? I may be building something that needs geotagging and I was just planning to use a custom model with geographic data sent to a JavaScript map (Google or some other?). This is the first I have jeard of it but Geodjango sounds kind of cool if not really heavy and like the learning curve is a good deal greater (it needs a gis database?). Advantages and disadvantages. Will it be too hard for someone who's never done any GIS stuff?
i love tacos too.
NOOOooooooOOO. I thought it was 1.6. well poo
looks cool. Can you give a few sentence answer to how it compares to something like twisted ?
&gt; Do they have expectations of using the code later? You may want to consider making some or all of the code open source. This is popular in science, because it makes it easier to do reproducible work. You may get more/better applicants if you can advertise that you want someone to work on an open source project - partly because they can use it in a portfolio when applying for later jobs. There might be more pressure to properly test and document it if everyone can see it, but you wanted tests and docs anyway, right? ;-)
Python koans
A) Make sure they have some demonstrated expertise in writing scientific Python. B) make sure they can do test driven development and can show you tests that you understand. This will go a long way in helping both of you validate the program computes the things correctly. C) make sure they have a somewhat active / fruitful github or bitbucket profile. Those should be 3 basic, verifiable things to make sure that you are getting the appropriate talent that your money is paying for.
thanks! It's loads of fun, I used to want to love programming and I learned that it just takes patience. It's not as fun when you're working hard to solve a super simple problem that doesn't have any application in the real world, but it's necessary to be able to get to the point where you can solve problems that you actually want to solve. I would definitely like to do something along these lines for a career.
You may be able to get away with just Postgres's earth distance module. PostGIS installation is hellish.
This is very cool.. but I'm *super* excited for 1.7 which has built in schema migrations.. effectively eliminating the need for South, if I'm not mistaken: https://docs.djangoproject.com/en/dev/releases/1.7/
It's not authentication, it's also the setup and teardown costs on both sides of the connection, which gets expensive. [Aside: sorry about the double-post - stupid flaky DSL.]
I guess that's never really been my use case. I normally try to keep all my database code in the database, so the typical query in one of my programs is "CALL &lt;storedProcName&gt;()". SQLite doesn't support this, so I usually have a bunch of text files with my query template strings in them and I simply load that. It keeps things cleaner having your database code separate from your application code.
Would you mind sharing the source code? I would love to play around with it.
Readlines... I really could've needed something like that in a project a few days ago, I ended up having to do a for line in x.read().split("\n"):
 from __past__ import braces from __cruft__ import braces
pyuv is similar and built on a very robust library (libuv).
finally: `queryset.first()` :D
One step closer to south \o/
I'm using it in production for a new interactive video wall, based upon Liquid Galaxy. My pants process is mated to a Django ORM stack.
I'm using python3+ django exclusively right now. It's amazing.
Hellish .. ? Come on ... just do: CREATE EXTENSION postgis WITH SCHEMA postgis; the important thing with postgis is to install it in a dedicated schema
That was the thing I saw that really made me pause. I can't figure out what I'd lose by going with an easier solution. I guess I don't know enough about gis to know the difference. Thanks.
But the links are the source code! Well here it is again: https://github.com/fabiomdiniz/Frey/
You'll lose some really powerful features like "find all the points in this polygon" which has some very efficient, and properly indexed results. 
Can't wait next update add Prepared statement on top of conn pool to improve DB throughput like 5x
It's not hellish at all. It's like one or two lines of SQL that you'll find in 5 seconds of googling.
Write python code to solve reddit captchas via praw, and send it to me :)
I started with Learn Python the Hard Way and had to forget a lot of ways PHP taught me to do things (Namespace? What's that? `This\Sort\Of\Thing`?) but kept a lot of the basics and the heartache. From there, I started doing Project Euler. I tried picking up Perl along the way, but abandoned that as it was too much to take in all at once. StackOverflow, documentation, Think Python, Learning Python, and Programming Python (I've skimmed that one, but haven't given a serious read) are all resources that have continually served me. Recently, I've discovered Codeless Code and it's made me realize several things as well. Source code from projects and working on my own taught me quite a bit. 
somewhat related -- if you happen to be on windows, &amp; need mixed-mode Python/C/C++ debugging for your extensions, check out PTVS. Video overview: http://www.youtube.com/watch?v=wvJaKQ94lBY 
Murderface
[Panel five](http://daisyowl.com/comic/2010-01-07)
This varies considerably if you're talking about a fast local connection or anything with a network. The popularity of services like Amazon's RDS seemed to factor in the discussions of that feature: DNS + network + login adds up quickly.
weren't they supposed to do that with 1.6? I may be wrong I should actually be sleeping now...at 6 am.
wait until 1.7 then. thats when south is coming anyway.
Other than her/his previous achievements. Ask them if they know what PEP-8 is. Its important to have standards and help readability and maintainability in codes! production_ready_code = %30 code + %10 code review + %40 documentation + %20 readability formatting 
Very excited for this. Although, I'm not very good at programming yet.. :/
I seem to be somewhat alone here in learning extensively from Project Euler. Solving problems on PE has benefited me in a lot of ways. I'll also second what has been said elsewhere; jumping into an ambitious project with motivation also teaches a lot.
&gt;&gt;&gt; a = yayay! &gt;&gt;&gt; print a[:] == a[::-a] &gt;&gt;&gt; F*ck Yay! 
I keep a complex Flask app + backend + job queue at work always up-to-date using Ansible as my deployment system. I have a Git repository set up where my coworkers and I commit code and I have a continuous integration server that automatically reprovisions and deploys when there are passing commits in the deploy branch.
 from __Sherlock__ import deductionist 
&gt; My pants process is mated to a Django ORM stack. Mmmh. Any reason for this rather than using sqlalchemy?
They all start lightweight but become bigger and bigger. I hope you'll stay as simple as possible :)
You need to validate three things : 1. technical proficiency (do he know the stuff) 2. professionalism (can I count on this guy ?) 3. communication (will I enjoy working with him?) 1 is easy for someone above the targeted level of skill : go to collabedit, give him a problem to solve, listen to his mental process and look at his code. 2 is the hardest, but asking a former employer goes a long way. 3 demands just time, so talk with him at least one hour, two if possible. to have a feeling about his character.
Its called "Murphy's law". Just remember, if you hadn't insatalled 1.5.5 yesterday, there would not have been any release today.
http://hackaday.com/2013/08/11/defeating-reddits-captcha/ https://sites.google.com/site/marcaptcha/
It is quite good and very funny. I found it earlier this week and have made it through the first 4 chapters. 
Is there mobi version anywhere?
Other than experience, what's the benefit of using SQLAlchemy?
Takes a longer time to do things right.
simple and asynchronuous in the same sentence is like nuclear and safe, pretty much not inspiring; whatever the framework you make asynch is always hard, So when I read this 2 words in the same sentence I tend to think the author is misleading you. 
Try [this](http://pantspowered.org).
So your solution is windows specific ? I followed your first presentation (posted /r/python IIRC) and I don't remember that. 
I know python a bit but I am still a noob, but what does this line with open(path, 'w') as f: do ? Because I get that is is opening a file at the path in the write mode, but I do not understand what with is doing here. 
The `with` statement is shorthand for writing both `open` and `close` statements. It means that when the block is over, the file will close automatically. It will also close the file if there are errors or you exit the block in another way, this means that you will never have files left open accidentally. It's also much neater and easier to read. The `as` statement just renames something. It's like saying: f = open(path,'w') The difference is that `with` and `import` statements read better using `as` instead of `=`.
I apologize for the inconvenience. Apparently, when my fellow developer was making [pantspowered.org](http://pantspowered.org) work, he managed to break ``www.pantspowered.org``. Please find our documentation at: [http://docs.pantspowered.org/en/latest/](http://docs.pantspowered.org/en/latest/)
I wonder how much time will pass until Aptana adopts it?
I think everyone here has had some great advice. I'd like to add: While I am not sure there is an exact expectation for an hiring process, I have noticed that most companies follow this format: 1. Phone screen 2. Timed programming test 3. Face to Face Here are some points: a) I think you want a more senior level developer that can contribute both at a code level and a project level. Expect to pay more for this type of person. Your average entry or mid-level developer generally don't have the same project-based, big-picture skills. b) When I interview, I always ask the person to come with questions -- the answers to which will provide them with enough understanding that they can make an informed decision for whether or not they want the position. As an interviewer, I expect the same for myself. In the phone screen, I usually have some basic "what have you done", "what do you want to do" and "how do you go about doing it" questions. c) The best way for you to determine if a programmer is good at what they do is to test them. If you require them to understand fibonacci sequences and O(n) complexity, then you should ask questions about that. However, if you really need them to understand numpy, matlab and matrix math, then your tests should be focused on that information. If you need them to be developing web interfaces, then the tests should focus on web interfaces. If you need them to be developing Try not to pull something from the internet; they can google as easily as you can. There are services that can provide you with tests, but I would still recommend something home-grown. d) During the face to face, you should have a strategy problem for them to solve on a whiteboard. You're looking for how they approach and solve problems. The idea is that you start with something basic and continue to ask them questions and refine the problem. Their task is to handle the refinements and provide a strategy for the problem. If they pick a good design at the onset of the problem, they won't have to make any changes to the design as you further refine the problem. Good design is one of the toughest things in software and it is a critical skill to develop. It is far cheaper (both in time and money) to catch a problem with a design than to catch a problem with a final production product. e) To go along with (d), programmers should be more focused on API design and less focused on the optimization of the nuts and bolts of the program. APIs are much harder to fix than the basic implementation. So as an example, an API that was designed as a non-blocking interface that suddenly needs to block may be harder to fix within the code than if we needed to modify the way that the blocking call was generated within the API function (e.g. now we produce an event and have an event handler). f) Some things that are 'tough' that good projects will always have and your hire should be able to manage: * good API design * good concurrency programming * great regression testing (automated) * excellent documentation * well documented roadmap /w features and drop dates Note that the more you can provide from (f), the easier it is for you to reduce your requirements on a software programmer that you intend to hire. And if you can be very clear about your requirements, you can easily outsource to Europe, South America or Asia which would reduce your overall cost and potentially get you a team of people. But you would need to be very, very clear. If you're looking to hire someone and be hands off on the development side, outsourcing would make your life painful. 
good to see peewee evolving towards a swiss army knife without becoming bloated keep up the good work!
it is a python specific package manager and it makes install of third party python packages easier
If only IBM and all the other big companies would poor millions of dollars into Python infrastructure like they did with Java.
Thanks for that, so what situations are best for using with? 
It allows you to very easily install packages for Python. You get pip installed on your computer first, and then to install something (like the packaged Beautiful Soup), just do this from the command line: pip install beautifulsoup4
Nice work @coleifer! This looks like it will be quite handy for quickly exploring csv files.
Which is to say, it is extremely useful. 
In short, you should always use it. Whenever you open a file, connect to a database or anything with symmetric opening/closing type mechanics. It's easier than using separate statements and means your code will work more often. It's also (I believe) good, idiomatic python. *More specifically, `with` can be used for any object with `__enter__` and `__exit__` methods defined. This is supported by everything with open/close-like functions in the core library and then you'll have to check whether its been implemented for a specific function in 3rd party libraries.*
Thanks for that explanation, clears a lot up. Don't mind me asking but what exactly is the function of the last part? if __name__=__main__: main() Is this a constructor? Or is it just instantiation of the script? I ask this because I have seen this syntax being used a lot on a lot of projects I've seen on github. And thanks for answering all these questions again. 
Pip is a package manager for python. You can use it by itself to install, upgrade and remove packages that you have a python distributable for. You can also use pip to install packages from remote Pypi servers, by default pypi.python.org or one of it's mirrors. Pip can also install directly from a git repository or svn. Pip + pypi work together for you to help install and distribute packages. These can be packages you've made or packages other have uploaded for distribution. You can check out available packages on pypi here: https://pypi.python.org/pypi?%3Aaction=browse You can find a great usage guide on pip here: http://www.pip-installer.org/en/latest/usage.html edit: If you're going to mess around with pip, I would highly recommend https://pypi.python.org/pypi/virtualenv. You can create new python environments to mess up and the completely delete them when you're finished.
Mr. Bungle writes a web-app for Acme Corp that uses django, django-south, lxml, python-requests, jinja2, numpy, and django-unchained. Mr. Bungle then checks his web-app into a github repo. Meanwhile Alice, the company devop's person, needs to install Mr. Bungle's web app onto the production servers. She goes and checks out the web-app from git and immediately runs into trouble "ImportError: Django is not a valid package"... Alice goes ahead and installs django but BAM "ImportError: django_south" is not a valid package." Soon after Alice murders Mr. Bungle in his sleep and Acme Corp is out yet another developer. If only Mr. Bungle had used `pip freeze` he might still be alive. Soon after, Bob wrote a web-app also with ten times as many dependencies as Mr. Bungles BUT before checking his code into git, he ran `pip freeze &gt; requirements.txt` and checked that in with it. Now when Alice checked out Bob's app, she immediately saw the `requirements.txt` file and built a new virtualenv and then ran `pip install -U -r requirements.txt` and all of Bobs' web-app's dependancies were installed, with the exact same versions that he used. Life was good until Jason the psycho-killer DBA saw that Bob's webapp used strings for primary keys... but thats an adventure for another day.
$ pip install Pillow from PIL import Image
That's a trivia-based filter question. OP would be using it to categorize the applicant as someone who's well-connected to the python community, or someone who isn't as in-the-know. However, it would be wrong to exclude someone on the basis alone if they're strong in other regards.
Thanks, I hope so!
Does it support dict comprehensions on py 2.7?
So this package it is the at method here :) https://vectordict.readthedocs.org/en/latest/vector.html#vector_dict.VectorDict.VectorDict.at with this old lib you could also find a peculiar branch matching criterion. https://vectordict.readthedocs.org/en/latest/vector.html#selecting-item-in-a-tree ^_^ 
It just runs the main() function if the file is directly called, but doesn't run it if it is imported. If you don't have the if condition then the main() function will be run whenever the file is imported, which isn't usually what you want.
Post what you have wrote so far, no one will write the whole code for you no matter how simple it is. Also /r/learnpython is more suitable for these kind of submissions although if you don't have any code and haven't tried anything your submission will be removed, and don't expect anyone to write the code for you there either. 
It already supported it in previous releases.
You could provide some context. You're asking for help, but not saying what you need help with.
But the code is so simple that there just isn't some advice you can get to speed up the process... For some very basic version you just need to know how to get user input, how to pick one item randomly from a list and how to use if/elif/else...
Cheers, I'll definitely check them out! Try and improve the success rate or something.
Do you know any other languages? Would you be able to write it in one of those? If not. What's RPS? * user 1 pick * user 2 pick * compare
Hey, I looked into, seems great ! is it possible to customsize the colors ? (since they are a bit too sharp) ?
I also use the page objects pattern. In fact, I've gone one level of abstractio beyond it now in my tests, writing "fixtures" that embody an individual action (e.g., "log in to a new account"), then have a series of stateless tests that run against that (e.g., "navigate to the user's dashboard and verify the username is correct", "navigate to the homepage and verify that the 'register' link is hidden"). This lets me share complex and time-consuming setup and teardown between multiple tests, greatly speeding them up.
Bought this one already, no regrets. 
Forgive me, but what does PR stand for? Does your comment mean that MPL now supports styles from URLs without any additional libraries? EDIT: It stands for Pull Request. So, this code has not yet been merged into the official MPL release? I just updated my MPL library via the Enthought Canopy Package Manager, and MPL does not seem to have this functionality.
I use [Dreampie](http://www.dreampie.org/) sometimes. But it's just a shell on top of IPython (I think), so I doubt it's less resource intensive.
jetbrains guys (I know you're here ;) Will 3.1 also deprecate Java 6? I was quite surprised that the recent 3.0 release relies on it given that it was EOL'd upstream last February. 
Isn't pypy already a pure Python compiler?
Perhaps a naive question: is there something you gain besides being able to store the results in an on disk sqlite db by using this vs pandas to deal with csv type data? 
django's ORM is also very good. its optimized around slightly different use cases (make the most common 95% of queries as easy as possible) but its not like you can't just drop down to raw SQL in the small number of cases where the django ORM syntax gets annoying. 
use the python interpreter with a .pythonrc that enables completion. (see readline and rlcompleter examples in their documentations: http://docs.python.org/3/library/readline.html http://docs.python.org/3/library/rlcompleter.htm)
That's a good question. Pandas is awesome and is a better tool for data analysis (provided your data fits in RAM). However there are probably a lot of other devs out there like myself who are very comfortable working with SQL but are less familiar with Pandas, so this tool is for them.
I think professionalism is # 1, by a mile. I have seen time and time again people get burned by technically strong programmers who take them for a ride, don't deliver (even if they could) and don't care. I'd take a beginner with honor over an unreliable rockstar any day of the week.
That doesn't grab associated images though.
I would look at how to generate random numbers...that alone will open up a lot of possibilites in relation to games or simulation.
How far is this from complete?
This depends on what terminal you're emulating.
Started with thenewboston video series on python.Create your own random exercise on the stuff you learnt. When you run into a wall when trying to achieve something, start searching or reading on the functions and libraries you will start getting a deeper understanding of the program as you learn by doing.
I'm kind of sick of people like you arbitrarily calling things 'heavy'. Want to quantify how much the difference in 'system resource usage' you see between IPython and anything else?
&gt; Do you think asyncio/tulip could use Windows' IOCP more efficiently/effectively as part of its event loop? Well, yeah, that's really what started as the catalyst for PyParallel; an attempt to demonstrate how to properly use IOCP on Windows. Even if you don't do the parallel context stuff, I tried to initially argue that for threadpools and IOCP behind the scenes, such that IOCP could be used properly. These threads would then push the completed I/O requests onto an interlocked list which could then be polled by the single-threaded event loop approach. [You can see that e-mail thread here.](http://markmail.org/thread/arua62vllzugjy2v) So, that's how I would improve IOCP use for Tulip... if I were forced to improve Tulip's IOCP use ;-) As it happened, when I sent that mail, I had a much bigger picture in mind: asynchronous callbacks that could execute pure Python code concurrently across all cores, without being impeded by the GIL. That to me is far more interesting than a more efficient tulip that is still inherently single-core bound.
Indeed, the more I work on it, the more I've come to appreciate the elegant debauchery that is async I/O on Windows. Nothing on POSIX comes close, unfortunately; you'd need to write a ridiculous amount of scaffolding (stuff you get for free on Windows) just to simulate the basics. It really all boils down to two things: a) Windows is completion oriented, not readiness-oriented (completion oriented is far superior in this case), and b) there is no counterpart to the intrinsic link between threads, IOCP and overlapped I/O in POSIX. The POSIX equivalent would be async I/O via signals, but that lacks the tight integration between threads and I/O completion ports.
&gt; whenever the file is imported To be pedantic, it will be run the _first_ time the file is imported. Subsequent imports just load the module variables out of `sys.modules`. :-) 
Same here. Pretty great so far.
but what is virtualenv ?
There's a lot of confusion on this topic. Cython is not a compiler in purest sense of the word. Most of the [code it generates](https://gist.github.com/anonymous/7366656) is still going through the C-API object layer just like the CPython interpreter does, it just *also* allows you to mix in and generate bits of C code to operate on unboxed C types. Even having the high-level types of your code doesn't help you write a compiler since theres' still no semantic-preserving compilation path between pure Python logic and native code. Really the only two viable approaches to speed up Python are PyPy and SEJITS like [Parakeet](https://github.com/iskandr/parakeet). 
Ah, sorry for the jargon... PR stands for Pull Request -- meaning, the code has been developed and is currently being reviewed by the matplotlib core developers. Once it is merged into the project, it will appear in the development version of the package, but it will only appear in package managers (e.g., canopy) when they release the next version.
Wouldn't the right equation be PySonar + Nuitka?
Yes, for sale.
This looks very promising, I bought it. All obey the testing goat!
No, in the sense that pypy caanot run many packages, like numpy.
Just for your information: As of yesterday evening, XDB basedir support is on the development branch. Once I finished the documentation, I will make a new release.
Thanks :) Bookmarked it!
That's not related, the only reason PyPy can't run Numpy is because numpy is mostly written in C and hardcoded against the CPython C-API which is an implementation detail of CPython, not Python. It's important to distinguish between "Python" the language and CPython the implementation.
OP, I take it that you are a TkInter (TIX) fan. I'm not much of a GUI person, but I've dabbled out of necessity. When asked for advice, I'm inevitably told that TK is dead and wxpython or PyQt is way better; therefore I've used both. What's the deal, can you sell me on why it would be useful to learn TkInter (i.e. is this book useful)?
http://getpython3.com/diveintopython3/ Although he makes the point, I think, that you might as well start with 2, because as you have noticed, there's a lot of documentation, and then just learn the differences for 3. 
Just write your code and frequently try to run it with Python 3+, google the errors and have the [Python 3 documentation](http://docs.python.org/3/library/index.html) available
Thanks
Thanks
Not sure what this would give me over using flake8 w/ git? http://signal0.com/2012/07/11/syntax_pep8_checking_before_committing_in_git.html
I should obviously have used Pillow instead of PIL. This is the first time that I'm using a graphical library in Python. I hope to find the time to update the current post or write a new one that will address this.
It's bundled with the standard python distribution (which is very good in case you have some restrictions going in for you when it comes to installing packages) plus is easy for creating simple and basic UI's. Apart from that, I really don't see the allure in using TK over something like QT, wx etc. since the famous UI toolkits have better support/documentation out there.
A question for /r/learnpython.
You are right. The equation should be PySonar + Cython = C-API compatible compiler. The concept and benefit would remain, though, I would think.
There's another [ebook by Mark Roseman](http://www.amazon.com/dp/B0071QDNLO) that I imagine is also pretty up-to-date. He maintains the excellent [tkdocs.com site](http://www.tkdocs.com/), which I can't recommend enough as an exceptional source of Tkinter documentation. This book looks pretty great too, though! I'll have to check it out!
&gt; When asked for advice, I'm inevitably told that TK is dead... I see this quite a bit too, and I think it's incorrect. First of all, Tkinter received some much needed updates concerning its module layout during the 2 to 3 transition. If it were dead, the core developers wouldn't have bothered bringing it along to Python 3.x. Second, with the arrival of ttk (themed Tk) in the standard library, Tkinter now finally looks modern and acceptable on most platforms, including Windows. I think a lot of people simply think of the outdated Motif/Lesstif Tcl/Tk look-and-feel, and immediately write off Tkinter. However, the fact that its in the standard library makes it so appealing. When you're writing a simple GUI application that has some menus, maybe some simple graphics or a plot, having to download PyQt on Windows is just excessive. As for wxPython, I won't even consider it as it hasn't moved on to Python 3.x yet.
pillow is a fork and pretty much a drop-in replacement for pil. The fork was made precisely because pil was taking so long to release corrections to bugs and much wanted features. 
With PyQt/PySide you have a great deal of power from Qt, which is great (specially if you already know Qt from c++). It's no harder to use than Tk and has great documentation although it will probably lag behind Qt development by quite a bit. 
This is a valid point. However the widget I needed was a grid of editable strings, as I wanted to make an hexadecimal memory viewer/editor. Not something more complicated than that. I couldn't find that, so I tried to instantiate 65536 text entries. That was a bad idea. To be fair, GTK does not have that either, but its treeview is close enough.
PIL code is a mess. If pillow is a fork, well it is also a mess. I would try http://docs.wand-py.org/en/0.3.5/ it is a ctypes binding to imagemagick. One of the most powerful feature of python is the dynamic import of binary libs in memory and the ease of conversion of the arguments. 
tk is a really quite powerful GUI library that's still easy to use. if you use ttk it'll even be really quite pretty.
&gt; widget I needed was a grid of editable strings, as I wanted to make an hexadecimal memory viewer/editor. Not something more complicated than that. I couldn't find that, so I tried to instantiate 65536 text entries. That was a bad idea. &gt; &gt; &gt; &gt; To be fair, GTK does not have that either, but its treeview is close enough. [TTK has treeview](http://www.tkdocs.com/tutorial/tree.html) Also why do you need python to do that? If you need 65535 rows or cells - should you just use a spreadsheet and then feed it into the program? 
My CC class is using a fairly easy to get a hold of book, "Python Programming: An Introduction to Computer Science" 2nd ed by John Zelle, was $20 on Redshelf when I picked it up. Seems to be a standard strategy taken by CompSci teachers now, and would be handy if you're looking into something like Running Start, as there should be a good chance you'll be ahead of the curve on the curriculum. 
The PluralSight "Python Fundamentals" course is written for Python 3, as is the upcoming "Python: Beyond the Basics" course. (Full Disclosure: I'm an author of both.)
Not bad. Not as handy as a scrollbar, but this would work.
We agree but an efficient hire needs all three. my rule of thumb is If in doubt don't hire. Forget code, building a good team is the most important part of software. 
The Tkinter documentation on [NM Tech site](http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html) is very comprehensive. It's the only resource I used when I developed this little application: [Refline](http://sourceforge.net/projects/refline/).
I use tabs. I must be noob.
Really nice statistics! And the outcome seems to be way better than I expected. The slightly increased tendency towards extraneous whitespaces might result from C++ users, for example, where it is not uncommon in if and else statements. From the Google Coding Style Guide: " If you prefer you may add spaces inside the parentheses: if ( condition ) { // spaces inside parentheses - rare ... // 2 space indent. } else { // The else goes on the same line as the closing brace. ... } " http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Naming
Trying it out now but not very impressed. I particularly dislike the "integration" of Django tests. Rather than use an Eclipse run configuration, you have to right click your project, go to the 'Django' sub-menu, then click "Run Django tests." And it just shows the console output of `manage.py test`; it doesn't use the nicer Eclipse unit test display that the *Python unit-test* run configuration uses. Very ugly.
http://www.python.org/dev/peps/pep-0008/#tabs-or-spaces
I'm a closet "tab -&gt; convert tabs to spaces" guy myself. 
I'm really new to Python/programming in general... I have my text editor set indents to 4 spaces, which I can thumb through using the arrow keys. Does Python still read this as spaces or as a tab?
Those are still tabs. The setting in your text editor is just how long visually your tabs are being presented on screen. Edit: Really downvoted at a 4:1 rate? Guy said he was a Python noob, was it that big of a stretch to assume he hadn't configured his text editor?
PIL is one of the reasons I am moving away from OS X. I still dont have PIL working. The Brew Python is 64-bit and the system version of Python didnt compile either. I tried for hours. Goodbye OS X hello Linux. This and trying to build postgres.
It takes 4 seconds to start on _my_ computer... :-(
Python reads indentation level. The most common is 4 spaces. You could set it to 1 or 8 and it would just change the appearance of the code, but not the execution. And it's not file based indentation level, is simply localized indentation level. This means you could even change how many spaces you use anywhere in your code (but really don't do this, just explaining). (Bad) Example: if True: print "hello" if True: print "How are you"? 
If you are using VIM, for example, you could add the following lines to your .vimrc file: set tabstop=4 set shiftwidth=4 " controls the depth of autoindentation set expandtab " converts tabs to spaces
It actually inserts 4 spaces. I'm using Gedit. So when I hit tab, in order to delete the indent I have to backspace 4x.
Darnit, python is missing. But this is still a fun giggle.
What is the standard convention for " vs '? Personally, I use " for strings and ' for individual characters. 
I assume you start with `ipython --pylab`? That takes a bit longer on my machine as well, but I haven't figured out yet which of the pylab-packages takes so long to start. IPython itself (i.e., without loading pylab) is instantaneous for me.
WTF, when did they rewrite this? The old version was much more reasonable: &gt; Never mix tabs and spaces. &gt; &gt; The most popular way of indenting Python is with spaces only. The second-most popular way is with tabs only. Code indented with a mixture of tabs and spaces should be converted to using spaces exclusively. \^IAnd it's what I'm sticking with. 
http://stackoverflow.com/a/1777008 not answering for ismtrn, but thats a reason maybe
no pylab. its just that my computer is more than 6 years old. it runs smoothly with linux, but the waiting time of ipython disturbes my workflow. i always wondered if i could have a more lightweight ipython session by disabling some of the features. would somebody know something about that?
Go away you, dirty c programmer :P
I imagine there is a lot of ' unless it appears in the string, just because you don't have to hold shift. The convention I use is single-quotes for things like keys, double-quotes for printed text. It's nice to know at a glance what a string is being used for.
Glad Pep8 reigns supreme in the wild.
I use my tab key, which Sublime Text 2 uses to insert 4 spaces for me.. heh.
The is an editor problem.
I use Tkinter when I need to create a small utility script with a GUI.
Wow... `if x == 4 : print x , y ; x , y = y , x` It's not even fixed in the 'Using extraneous whitespace' example. Who actually writes python like that?
I'm new to programming and never really understand the preference for spaces over tabs. Why hit a key four times when I can just hit one? Is there a good reason?
Nuitka alone does job good
I'm using geany and I can press shift+tab to deindent (4 spaces at a time). I'd be surprised if gedit doesnt do the same.
Generally, I use ' for referencing keys in dictionaries, single characters, and default string values in function parameters. I use " for sentences and any user-facing strings. If it doesn't fall into one of the categories above, I flip a coin.
I flipped a coin for you, /u/theli0nheart The result was: tails! *** ^^[Statistics](http://coinflipbot.re/stats.php) ^^| ^^Don't ^^want ^^me ^^replying ^^on ^^your ^^comments ^^again? ^^Respond ^^to ^^this ^^comment ^^with: ^^'coinflipbot ^^leave ^^me ^^alone'
This is all great, but breaks horribly with continuations (i.e. splitting one statement over multiple lines). If you for example write a function call over multiple lines like this: blob = struct.pack('IIII', val1, val2, val3, val4) then suddently your indentations aren't multiple of tab width (even if, by lucky accident, they are, it won't be the case if someone sets different tab width than you). If you use tabs you either have to "round" continuations to tab width (makes them look like crap) blob = struct.pack('IIII', val1, val2, val3, val4) or you have to mix tabs and spaces to keep things nicely aligned (emacs does it if you have `indent-tabs-mode` enabled). In the latter case all looks good until, again, someone decides to use different tab width than you in his/her editor. The only way to make code look universally good is to stick with spaces.
this is the only valid argument I've heard. And my response is... meh, ill stick with tabs
&gt; Why hit a key four times Space advocators don't sit there tapping space to indent, that would be ridiculous. The point is to still use the tab key or whatever (and a good editor will handle it all transparently), but that only spaces are actually written to the source code.
This is awesome. Thank you.
I use double-quotes because it's simply more comfortable for me to hit with the UK keyboard layout... and now I'm curious as to double vs single-quote usage by keyboard layout (which we could assume from developer's locations).
I really like my tabs, sorry.
PEP8: multiple statements on one line (colon) Ta-daah!
I'm guilty of the occasional dict-literal padding simply for cosmetic purposes. e.g. User.query.find({ full_name: "Rob Jackson" }).first() vs User.query.find({full_name: "Rob Jackson"}).first() I'm guessing the purpose of the graph was to find usages similar to that, but the example was over-exaggerated simply to make the concept clearer.
Where is Two Scoops of Django 1.6? Why isn't it out yet?
The biggest advantage I've seen is the Session model instead of active record. @zzzeek talks about it here: http://techspot.zzzeek.org/files/2012/session.key.pdf With active record style orms you get issues like this: user1 = User.get(id=5) user1.name = 'New Name' user1.save() user2 = User.get(id=5) user2.name = 'Some Other Name' user2.save() # fails - user1.name still says 'New Name' assert user1.name == 'Some Other Name' trans = Transaction.begin() user2.name = 'Yet Another Name' trans.rollback() # fails - user2.name still says 'Yet Another Name' assert user2.name == 'Some Other Name' Session solves for this: Data is expired when transactions, always explicit, are ended - hence no stale data session1 = Session() user1 = session1.query(User).filter_by(id=5).one() user1.name = 'New Name' session1.commit() session2 = Session() user2 = session2.query(User).filter_by(id=5).one() user2.name = 'Some Other Name' session2.commit() # user1 was expired by the commit, reloads here assert user1.name == 'Some Other Name' # change user2 ... user2.name = 'Yet Another Name' session2.rollback() # user2 was expired by the rollback, reloads here assert user2.name == 'Some Other Name' Many other examples in the slides I linked to earlier. 
Hmm. Well, on my magic fairy server with all the prerequisites already in place, I can just run "./go django go". Beat that. Disclaimer: postgis might be easier on non-corporate semi-modern installations.
I started using python after I took a class in c, so those habits just stuck.
The problem is with vim is that if you hit the arrow key, so you're not aligned to the tab width, it gets really confused and you have to manually fix it. I'm tempted to write a script to unexpand on read, and expand on write. There should be a smarter indentation method in vim.
I thought it moved on to 256. Some terminal emulators can support 24 bit colours, (konsole, that one that I forgot the name of that ships with enlightenment)
I generally use `'` for internal strings (dictionary keys, symbolic names, etc.) while I use `"` for strings that the user is expected to see at some point.
I wonder if anyone uses prime indents: first level of indentation is 2 spaces, second level is 3 spaces, fourth level 5 spaces, 7 spaces, 11 spaces, etc...
Oh god. How about writing a whitespace interpreter that has a sample program embedded in itself by mixing tabs and spaces?
It's not a terrible habit if you're switching between the two a lot. 
&gt; `DictRegister` accepts only objects that inherit __fromt__ the `collections.Mapping` Abstract Base Class. If you try to insert an object that does not stick with this rule you will receive a `ValueError`. 1. That should be "from". 2. Wouldn't it make more sense to raise a `TypeError` if you try an object with the wrong, y'know, type? &gt; so if you need to store a sequence as a value you have to store a `set` that contains the sequence. That is problematic for things like lists, and other mutable values. (Because they are unhashable.) Okay, that was enough complaining for today.
That would be the problem, then. I have set expandtab set shiftwidth=4 set softtabstop=4
Oh wow. Bonus points if that program is a quine or something. Oh! Or another Whitespace interpreter, which then interprets itself, etc.
I would counter this with the argument: Tabs for indentation, spaces for alignment. That is, in this case, use spaces because you are aligning according to a number of characters. Using tabs does not make sense. However, you can use tabs for indentation, so that, for example, if your code block was part of an indented block, you might have: class A: \t def foo(self): \t \t blob = struct.pack('IIII', \t \t val1, \t \t val2, \t \t val3, \t \t val4) Where each "\t" represents a tab (width 4 so the two spaces are part of the tab), and everything else is a space. This would not break alignment regardless of tab width, because you're using them only for indentation. Of course, I abandoned tabs myself because (visual) line length still breaks with different tab widths.
That's literally any decent editor.
So, what do these metrics really mean? So, 93.287% of lines are under 80 characters in length. Does is that 93% of all lines? Or 93% of all projects? Or 93% of all files?
A. Without Python on the list, it doesn't really belong here. B. That said, it is way more entertaining than it has any right to be.
please by all means use a fucking .vimrc file like rasbt said, don't push your config into program files thank you
It would be really interesting to see, for line length, how often people go out of the way to continue a long (80+ characters) line of code on the next line. The 93% is really kind of not telling, because most lines of code are under that naturally. The interesting part is what people do when they have a longer line of code. 
Posting because I find the official python client very bureaucratic and tedious to work with. This one uses requests instead of httplib2 and offers a nice interface. But documentation is lacking. Hopefully some more visibility would help with that.
Don't know why you were downvoted. Seems like a reasonable answer to me.
Check out the [Smart Spaces](https://wiki.gnome.org/GeditPlugins) plugin. It deletes spaces equal to your tab width (only spaces!). As others mentioned, deindent works too and is awesome.
You can usually do that with ctrl+Arrow
All lines. I'll bet at least 80% of files have at least *one* line over 80 characters, even if it's just comments.
What would you suggest? Someone else brought that up to me too but I'm not sure where I'd make the splits or what the standard practices are with that. Guidance appreciated.
thanks but I can just have Virtual machines instead, right ?
Without context of the actual code, this doesn't mean that much, any more than paying programmers by the line. People often write PEP-8 formatted code that is unreadable, and others often write code that isn't PEP-8 that looks clean. Some throwaway code of mine that passes a PEP-8 lint, but should be taken out and shot: def peek(f): pk = f.read(32) f.seek(-len(pk), 1) out = "%8d|" % (f.tell(), ) for i, b in enumerate(pk): if i == ord(pk[0])+1: out += ')%02x' % (ord(b)) else: out += ' %02x' % (ord(b)) return out People mistake coding convention for clean sometime :-(
Here's a brilliant idea, let's run random code off the internet from someone who's interested in stealing passwords.
I'll flip a coin to decide. Heads, tails is ', tails, tails is ". 
huh, but that says 7% of all lines are 80 characters or longer. That surprises me quite a bit.
I suppose this is the same comment, but it's worth mentioning anyway... A space is always a space regardless of formatting options, browser/IDE, etc. Tabs are not. That said, I have a developer that I work with who actually prefers tabs because they move around from code browser to code browser.
omg wtf, this is hot.
http://interactivepython.org/courselib/static/thinkcspy/toc.html _**How to Think Like A Computer Scientist: Interactive Edition**_ is pretty cool. You will learn to do a bunch of stuff with Python 3, including working with visual objects. You're able to do all your coding online at the website, so you don't have to hassle with installing Python, and you can set up an account and save your progress. This free online textbook is based on the text that is now _Think Python_. Well worth checking out.
Make sure that you are mixing your reading of python books with actual python programming. The best way to learn is through doing. Once you have a little experience, maybe try to make a tic tac toe game or something else that will help you practice. Good luck and practice makes perfect!
So mixing [Whitespace](http://en.wikipedia.org/wiki/Whitespace_(programming_language\)) in your Python?
[delivered](http://esolangs.org/wiki/Whitespace)
As you stated, tabs can result in different amounts of spaces. So code that is nicely formatted using one configuration may become misaligned using another.
I like it, the deeper you get, the bigger your indentations, forcing you to keep your code simple and split up into functions rather than having loops inside loops inside if inside try inside with inside method inside class.
They're pretty much the same language. The biggest difference is that you write `print("Hello")` in Python 3 instead of `print "Hello"` in Python 2. Just learn whatever your guide teaches first then take a couple hours to learn the other one. A good programmer can use both.
Good thing i have virtual machine 
He put it in a subreddit for other python developers to look through his code, not just a website where people are interested in utilizing it without looking through it. 
I don't know why there are not more beginner projects implementing IRC bots. Hah, just kidding (spam bots).
If you want to make money with python, you will eventually need to use virtualenv. And if you'd rather use Ruby, there's rvm and bundler.
oh. my. god. I'm never going on public wifi again w/o encrypted tunneling edit: public computers too
and it's open source
I'm casually browsing your code, and here's some suggestions/ideas: * You could implement a hyphenation algorithm, either as the primary method (TeX does this), or as a fallback to your dictionary-based method. See [hyphenate.py](http://nedbatchelder.com/code/modules/hyphenate.html) * You mention STIX fonts for math rendering in `mathtext.py`, so you should know that the [XITS project](http://en.wikipedia.org/wiki/XITS_font_project) takes the STIX v1.1 release and adds OpenType MATH support. No idea if this would make your life easier or not… [edit: I *think* the recent STIX v1.1.1-word release now contains OpenType MATH tables, so maybe the XITS version is somewhat irrelevant?]
Step 1: Install easy_install and pip curl -O http://python-distribute.org/distribute_setup.py python distribute_setup.py easy_install pip Step 2: Install virtualenv (Python 3 comes with the the helpful pyvenv command, see http://docs.python.org/dev/library/venv.html). pip install virtualenv Step 3: Create a new virtualenv (where my_virtualenv_dir is the path to the directory you want to create it in). virtualenv my_virtualenv_dir Step 4: Activate the virtualenv source my_virtualenv_dir/bin/activate Step 5: Install whatever packages you like via pip. Packages will now be installed into the my_virtualenv_dir site-packages directory rather than the system wide Python installation. Hope that helps :)
&gt; ng python3+ django exclusively right now. It's am Can you elaborate on your amazement? Which parts specifically do you feel are improved vs using python 2.7 for instance?
He posted all of the source code in his github repository...do you cook without reading the recipes? 
It may line up an if, but what about a for, while, elif, else, or with? Also some editors do not support it.
Using Pep 8 seems to be the most popular route still for coding conventions, I see.
My best pep8 guide is in pretty print &gt;&gt;&gt; pprint({"a": "Ah aa!", 'b':"'Ahbb'"}) {'a': 'Ah aa!', 'b': "'Ahbb'"} I use single quote except there is a single quote in the string. Don't bother if it's for human or a computer at the end of the process. Dictionnary keys can be for human too, and, it's definitely to complex. 
I really like the "demonstration" of the line length. # width is within 120 characters # width is within 150 characters This really helps to visualize!
Around line 830, you have a shell injection bug, as you're running os.system with victimIP, but you don't seem to verify that victimIP is actually an IP.
I totally agree. It seems to get conflated with it quite a bit though. (and I obviously need a different PEP 8 lint)
This is awesome.
Just identify which parts work without depending on other parts, and can be logically grouped. Extract those to named portion files. (if there are constants and utility functions which near everything depends on, extract those, too) Put the command line interface (and nothing else) into a `__main__.py` (without `if __name__ == '__main__'`), and every file into a directory. You now have a module. Use explicitly relative imports inside the module (I.e. `from .util import foo, bar`) Use `python -m modulename` from the directory above the module directory to run `__main__.py`
 blob = struct.pack('IIII', val1, val2, val3, val4) I just go with this. Looks fine to me and it is simple and consistent. 1 tab = 1 level of indentation. I am not trying to align things, just indent them, so you can see the structure.
The people over at /r/netsec would probably be interested in this, you should try crossposting there.
Not to mention a def or class
Most good editors can do this for you (maybe with some tweaks)
There are a few problems here: 1. analysis (this is what pysonar does) 2. compilation from something lower-level (LLVM comes to mind, but there are many projects that can fit that role) 3. deoptimization in case things go wrong. All the parts are hard, but the part 3. is what's missing from this proposition. It doesn't matter what you can infer that works in 99%, the question is how do you recover from the cases where the 1% occurs in a way that does not violate python semantics (hint - it's hard). You might want a solution that can invalidate compiled code and compile new code on the fly (e.g. JIT). Additionally "just" knowing types does not give you all that much. PyPy's optimizations just start there - on top of that you have tons and tons of stuff, like GCs, escape analysis, maps, type-specialized instances etc. etc. You can't do that without seriously modifying the interpreter itself (*and* breaking the C API ideally in the process)
Sure, but why have all the overhead? Virtualenv is pretty much the standard way to keep your environments clean and there really isn't a better alternative. Plus, what if you were looking to host multiple python apps on a web server? you can simply configure nginx/apache to point to these different virtual environments directories and viola. Virtual machines however wouldn't work too well on that scenario.
File a bug
 [*] Running ARP scan to identify users on the network; this may take a minute... much like a woman getting ready to go out; in this case, "a minute" is "forever" 
from the README.md file: Prereqs: Linux, scapy, python nfqueue-bindings, aircrack-ng, python twisted, BeEF (optional), and a wireless card capable of promiscuous mode if you don't use the -ip option 
how do we set which network interface to use? 
Well, you could treat any collection-type value as multiple values, so to use a list as a value, you would simply wrap it in a singleton list. To avoid confusion, it would probably be useful to have two methods to add new dictionaries: the default one, that adds only single values, and a "general" one, which only takes multiple values (so adding a dictionary that has a number for a value would be an error for that function, for example). #this: dr = dictregister.DictRegister() dr.append({'spam': 16, 'ham': [42, 17], 'mr f': set([1, 2, 3])}) #would be the same as: dr = dictregister.DictRegister() dr.append_multivalues({'spam': [16], 'ham': [[42, 17]], 'mr f': [set([1, 2, 3])]}) 
Forcing people to interact seems to be assuming they're too stupid to realize who they can work with and who they can't. An optimal solution might be to get some decent management.
As far as I know, none of the current implementation of Whitespace have embedded Whitespace programs (well, not purposefully).
True, but a program shouldn't have a problem like that. also interface and au.monmode are used like that. interface also has no verification, which if not specified on the command line, is gotten by /sbin/ip (line 912) au.monmode is gotten by calling /usr/sbin/airmon-ng, which if modified, would be able to run commands, as it's using regex to search for a substring. (line 796) Also you would be fucked if you added some kind of remote control. Oh, also, the program is enforced to run as root. Even more fun! I believe any os.system calls from a root python process is also run as root. OP needs to fix his shit.
Is there a specific reason this wouldn't work on OSX (recently made the switch?) 
I'm not sure OSX has nfqueue-bindings but I could be wrong.
using sudo python LANs.py -i wlan0 i get [*] Running ARP scan to identify users on the network; this may take a minute... forever. it just hangs here. nothing in the log. i have all dependencies installed. i know my wireless card works in monitor/promiscuous modes (wireshark works fine) uname -a: Linux **hostname** 3.8.0-25-generic #37-Ubuntu SMP Thu Jun 6 20:47:30 UTC 2013 i686 i686 i686 GNU/Linux (its actually linux mint)
&gt; The IS_VAMPIRE is a boolean... &gt; ...only gives me a yes or no. I think I found your issue.
[*] Running ARP scan to identify users on the network; this may take a minute... [-] Router MAC not found. Exiting. :( what would cause this?
Good presentation. I really like Kivy, but it's still pretty young which means it can be a bit rough. I hope that project continues to see development though. I'm also really hoping mobile Qt shows up in PyQt before too long. PyQt on the desktop has been a dream to work with and I'd love to work with it on mobile. And while both of the above may not give you purely native looks, the tradeoff is that you can target both iOS and Android. Why write apps just for Android when you can compile down binaries for both environments?
Consider posting this in the comment section of that post
I believe that the base decision tree class is only supposed to give the predicted label. You could make your own class that inherits decision tree regressor and write your own function for returning the probabilities you want.
Open source doesn't mean you should write insecure code. Setting up a virtualenv right now.
Nice! Nothing like a little graph theory to solve practical problems.
The problem I have (being a few years into Python coursework), is that there isn't much on the graphical side of Python. I wouldn't mind making an Android game from Python, but I can't find new libraries other than PyGame.
Can you tell us a use case when to use this data structure?
Well, kivy (as mentioned in the presentation) is a nice library that can definitely be used for games, though the interface is quite different to pygame's manual blitting etc. Also as mentioned in the presentation, you can run a single app on both desktop and mobile without much effort, which is nice.
Kivy only runs on Android phones with external SD cards in them, so it's pretty limiting.
This is something we do in machine learning a lot. If you're using sklearn and you want a probabilistic output, use sklearn.linear_model.LogisticRegression. Since all the sklearn models fit the same interface, you should be able to just replace DecisionTreeRegressor with LogisticRegression and go on your merry way.
i do not see how frozenset helps using ordered lists as dict key: &gt;&gt;&gt; frozenset([1, 2]) == frozenset([2, 1]) True 
and just as easy to create with: pip freeze &gt; requirements.txt
Is this not just an application of the round robin algorithm?
This is plain wrong, I'm not sure what else to say. It'll run on basically any modern device - the main technological requirement is opengl es 2.0, but that's very standard now. There's certainly no requirement for an external sd card. Edit: If you have a phone without an external sd card and want to prove this to yourself, you can install and use a kivy app like [Flat Jewels](https://play.google.com/store/apps/details?id=com.meltingrocks.flatjewels) from the play store. It should work fine.
post your git link when you're done, id like to try yours i cannot get this one to work
Having some issues with dependencies. Will try again later.
This is actually for a class, so I don't have time to read the book. Although, my christmas break is coming up, and I have gained a lot of interest in machine learning. I am an applied math student, and I find this stuff immensely interesting. I will read it over the break. Can you send me a link?
I googled it and it seems that your comment is very relevant. Here is a description of the 'round robin tournament scheduling' , it is not really completely the same, but it uses the same kind of tricks (even the 'add a dummy element if n is odd'): http://en.wikipedia.org/wiki/Round-robin_tournament One difference is that this algo makes n-1 constructions of n/2 pairs, while mine makes n/2 constructions of n-1 pairs on a path. The round-robin looks a lot like the walecki construction of hamiltonian decompositions that I speak of in the blog post by the way. Clearly the two algos have the same roots. I will add that to my blog post. Thanks !
[It says this in their own documentation](http://kivy.org/docs/guide/android.html) &gt; Kivy runs on Android, but you need a phone with: &gt; * SD Card &gt; * OpenGL ES 2.0 (Android 2.2 minimum)
That's unfortunate, the documentation is somewhere between misleading and wrong. Kivy does check paths that may resolve to the emulated sdcard directory (such as on the nexus 4 which has no sd card slot), but does not rely on the existence of an external sd card. I think it may have also been true in the past (as in years ago, not recently) that an sd card was needed for some reason. Even if so, this is no longer the case, and a kivy app can nowadays be installed in the data directories just like any normal android app. Thanks for pointing this out, I'll make sure it's fixed!
What do you need python to do that PyGame can't do?
I got that error because I had set a static ip and route to my firewall but did not have a default route to the gateway. Idk if something other than a routing issue would cause the same message tho.
How easy it is to use Python basic data structures to represent more complex ones. A common question that comes up is how to do a binary tree in Python. The answer: class Node: def __init__(self, left=None, right=None): self.left = left self.right = right Yep, that's it. How about N-ary trees or graphs then? Replace left &amp; right with an array called "edges"; done. 
NamedTuple. Does beautiful things for output readability
And for code readabilityþ
I really think the ease of composability of python's well-known data structures is one of its greatest features, not some of its lesser known ones. That said, deque probably doesn't get used enough (although sometimes advocating its use could be considered a micro-optimization anyway)
Mobile ... The land that speakerdeck forgot.
I like the ability to re-run portions of a program, rather than the entire thing. Very convenient for experimenting with big datasets.
Wasn't PySide a Nokia project that they're not supporting anymore? Digia has no financial incentive to support LGPL bindings for PySide. I believe other funding is coming through though.
Documentation, especially working with others and as everyone else has previously said working with large data sets it is great. Your also able to embed youtube videos, html pages and links in a document.. it is really nice. Using %pylab inline and it will output graphs directly in the document. Than you can use nbconvert and output the notebook to different formats (IE: pdf) and everything is displayed in there as it was in the notebook. The only downside is nbconvert depends on haskell-pandoc which has ALOT of dependencies (or maybe I am wrong?). EDIT: I should also note its integration with scientific languages like R . So you are able to run portions of R code and manipulate from there.
No, I shouldn't be using PySide. PyQt is GPL compatible which works fine for my personal/open source project use and if I did closed work under it my client/employer can foot the bill on the commercial licensing on PyQt. PyQt is on the 5.x branch of Qt right now, while PySide is still 4.8. True Android/iOS support is part of Qt 5.2(in beta right now), which PyQt will support before PySide does. I haven't used PySide, but Riverbank is doing a stellar job with keeping their Qt bindings current.
I believe it is.
and update with maintaining order (for keeping diffs sane) pip freeze -r requirements.txt &gt; requirements.txt
%load_ext autoreload %autoreload 2 
Why not just use Shedskin, it already does "deep static analysis" and compilation via C++. Now if it could escape back to PyPy or CPython for the stuff it can't analyze that would be damn cool.
im using DHCP if i use: python LANs.py -u -p -ip &lt;target computer ip&gt; everything works. Its just that first part of this script, that locates all of the computers on the router that doesnt work :( [the important part] also on a side note, why the **f** cant i run SeToolkit: Traceback (most recent call last): File "/usr/bin/setoolkit", line 27, in &lt;module&gt; from src.core.setcore import * ImportError: No module named src.core.setcore what provides this module?! edit: apt-get install setools fixed that. but the LANs.py still wont scan :/
I can't. open ssh? i don't know anything about this yet really.
I am an engineering student. When I wrote a simulation for a class, the project involved writing a piece of code, verifying it by plotting the results, debugging it, and integrating it into the simulation. Using the iPython notebook, with its interactive features, made this much easier and saved me a lot of time. This isn't a tool for everyone, but if it fits what you are trying to do, it's wonderful.
I like it because it make it very easy to explore idea and tests code, it's a perfect mix between a shell and a script file. To explain : In a shell, you can easily manipulate data, test code, introspect your objects, read their docs, have auto-completion, etc.. But when you have several lines of code and you realize you need to modify things in the firsts ones it quickly become a PITA because you have the search the history and reexcute all the lines manually. So you put them in a function but you notice quickly than multi-line editing in a shell totally suck. So you put that code in a file script. You gain a nice syntax coloring but you just lost all the advantages of the shell. So next logical step is to import that script into your shell so you can play with your code again. But then you need to modify or add code to your shell script and it's not reloaded automatically so you either close and reopen your shell or start playing with reload()... And then you start banging your head against the shell. But then come the Notebooks which solve all of theses problems and offer all the advantages of the different solution at once ! Which is why it's awesome. Another reason to like it is the easiness of sharing, we set up a server at work so we can easily share notebook between ourselves, to demo things or work collaboratively on them (but ipython has still some progress to do on that). But I also like all the notebook that are shared publicly and which are an easy way to show stuff (go to http://nbviewer.ipython.org/ if you haven't already) One another reason is that it make it easy to work on graphical data, not only images but graphs and even sql results. 
As soon as you put it in a frozenset though, the fact that it was sorted becomes irrelevant. 
It's much better than using the interpreter for editing multi-line code. But I already use emacs for this (PyCharm and PyDev would also be similar) so I haven't found the notebooks that much more useful. Except maybe the inline figures when you're sharing your project with someone else, especially if they don't use emacs.
sudo will install the package globally, just use pip install without sudo.
Maybe that pip isn't installed on your Python 3.3 setup and that it's Python 2.x's pip that you're running in step 4. You should install pip on python 3.3 and the re-create your virtualenv. By the way, you don't have to run pip under `sudo` when in a virtualenv.
Note, I'm using the latest Python. 3.6, I believe.
Another one that I don't think anyone has said yet: it's good for doing demos of code, e.g. in a presentation. You can show code and output together - unlike a script - but you don't have to try to type stuff correctly on stage, like you would in a shell. (I'm an IPython developer, btw - if you have more questions, fire away)
I believe this is what you're after: http://www.py2exe.org/
Seems to only work with Py 2.6?
Hm. Now I'm just googling, but if you need to stick with 3.x, then apparently cx_freeze might work.
Newbie here, what does the python 2 version of that look like? 
Mezzanine for Django attempts to be this.
It's the best lab notebook I've ever used. It keeps my thoughts, my code, and the output all together. Now, I won't have to guess why I did something, or make the same mistakes twice.
Hi, IPython rocks, thanks for your work on it. Is development on IPython your day job or ? 
I am writing a CMS http://www.quokkaproject.org still under Development but already suitable for a blog.
http://pysdl2.readthedocs.org/en/latest/
Nice project. 
IPython Notebook refers only to the web interface one right ? so then what's the point with the installed one ? (launched via "ipython" at command line) 
because the missing part is a hard thing to do
Personally, I'm waiting for when they add simultaneous user support. It'll be like Google Wave, but with Python. But in general, being able to have my Python, setup the way I like it with all my libraries and my data, anywhere, is pretty awesome. I use iPython (qt console) almost as a shell replacement on my computer, and Notebook is basically SSH for me. I can login into my iPython from any computer anywhere.
In some situations it didn't work well (I think it divided pages poorly), and nobody was very interested in fixing it, because there's nbconvert. We will expose 'save as' functionality in the UI, using nbconvert, once the REST APIs for that are done.
It is now, yes :-). I had been involved in the project in my spare time for a couple of years when they got funding, so they offered me a two-year postdoc working on it.
Yes, the Notebook is the web interface (and the document structure it creates). I use both that and the terminal interface in different situations - the terminal is convenient for quickly testing things that you don't want to preserve. Also, if it's not clear, the 'installed one' includes the code to run the notebook as well: launch `ipython notebook` at the command line. 
I was thinking of this as something that would autopost (or at least auto-email-me) on PRs and *only* show things that were introduced by the given set of changes. (I'm working with an existing code base that generates a bunch of errors with flake8)
It lets you work with your code in chunks, prototyping each step and being able to rerun/tweak it as necessary - it's really really helpful. Plus, I find it very helpful when I need to quickly throw something together or I want to start exploring a dataset.
And [here](https://www.youtube.com/watch?v=p77BR6e1uoo) is the video of this presentation.
 &gt;&gt;&gt; {frozenset([1,2]): 'foo'} {frozenset([1, 2]): 'foo'} &gt;&gt;&gt; {set([1,2]): 'foo'} Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: unhashable type: 'set' 
I'm gonna go out on a limb and say you're overgeneralizing.
Here's a very simple example that can load plugins dynamically: file "test/main.py": import os import sys path = "plugins/" plugins = {} # Load plugins sys.path.insert(0, path) for f in os.listdir(path): fname, ext = os.path.splitext(f) if ext == '.py': mod = __import__(fname) plugins[fname] = mod.Plugin() sys.path.pop(0) # Callback for plugin in plugins.values(): plugin.cb() file "test/plugins/test.py" class Plugin: def __init__(self): print "plugin Test: constructor" def cb(self): print "plugin Test: callback" Running main.py displays the following output: $ python ./plugin.py plugin Test: constructor plugin Test: callback This example uses the special `__import__` method to import the plugin. By temporary placing the plugins directory at the start of the system path, you'll always load the right plugin. You can reload modules using the `reload()` method. Unloading modules can be achieved using `del`, but can be tricky because if there are circular references to the module, `del` won't work. I recommend against allowing plugins easy access to the global namespace. It's better to provide a clear interface to the plugins through their constructors. I generally create a base Plugin class which all my plugins must inherit from.
djangocms
Because I didn't know about unicode_literals! Thanks :-) I'm a bit concerned about all strings becoming unicode objects (even internal ASCII identifiers), but I'll have to try and see if there are any problems in practice. Edit: incidentally, [PEP414](http://www.python.org/dev/peps/pep-0414/) adds 'u' prefix support back into Python 3 (.3), as a no-op.
Open wireshark and put 'arp' in the filter. You'e got a problem I don't know how to solve if there's not 255 arp packets being sent when you run the script. It's just calling nmap -sn with Popen. If you do see lots of ARP who-has packets then do you see any responses? If not, then your router might have some kind of configuration that prevents ARP pings or something. One problem I encountered was a router that had some protection on where arp spoofing worked, but only victim &gt; attacker &gt; router but not router &gt; attacker &gt; victim. It always just went straight to router &gt; victim so you can still see passwords and searches and stuff, but you couldn't inject html or anything. So dunno really, sounds like a problem with the router/firewall/network setup.
&gt;it's good for doing demos of code, e.g. in a presentation In small doses. I watched a 1-hour talk, and all of it was in one notebook. By the halfway point I was ready to puke watching him constantly scroll up and down between sections. I found the whole thing dizzying.
I do have it installed but have not seen the added value above what emacs python-mode already provides, so I have not taken the time to learn it yet. Any thoughts?
This website is awesome. A lot of thought went into it and it works great, also you can switch between Python 2.7 and 3.3. Check it out, but a little knowledge is necessary. http://www.checkio.org/
IMHO, this PyCon US 2013 talk is a good start: "Dynamic Code Patterns: Extending Your Applications with Plugins" http://pyvideo.org/video/1789/dynamic-code-patterns-extending-your-application
Just make the css and html layout proportional. For example http://codepen.io/imoran21/full/Htrxj Same code for phone or computer but is usable and friendly on any device
I found that to be a really, really, really, nice feature
Thank you very much &lt;3
I just used an IPython notebook to write a small scientific paper. I wrote as much of the LaTeX as possible directly in markdown cells, the rest as raw text (like \begin{section}). I then exported the ipynb to a tex file using nbconvert. I modified the template to not show the code input cells and voila I had a finished paper without any hassle with putting the images to the right place and whatnot. The nice thing is that you do it all in one pass. You write the LaTeX as a 'commentary' while you are developing the code and analysing the data. Normally you program stuff and produce pictures and in the end you have to gather it all and write the text around it. Using a notebook is just way more fluent.
If you really want a bytestring, you can prefix with 'b' to get a bytes literal. Edit: still a pretty neat script though! I agree that there are places that unicode_literals may not make the most sense if you're mid conversion.
Exactly.
Yes, definitely. Not everyone has done that before though. Although now I realize that /r/Python was probably the wrong place to post this, /r/Bitcoin would probably have been better :)
Ay... using ctypes instead of more direct binding is cool and all, but also slow as hell. ctypes imposes the libffi overhead for each and every call.
First, I don't see the reason why you are re-starting IPython all the time. There may be something you want to reconsider in your workflow. Second, starting IPython is instantaneous on my laptop, which is also quite old, maybe not as old as your machine, but I don't think that may justify a few order of magnitude increase in the time required to start IPython. Are you sure there are no issues specific to your installation?
you have lupus
I used [SL4A](https://code.google.com/p/android-scripting/) to write some little helpers in python. It doesn't give you much, but if your use-case is simple it's really easy to get started.
I'm using guake as my quick try-out terminal; If I could get it to automatically start ipyhton in a second tab on startup, that might fix the workflow problem, probably. I'll look into the guake source if I can trick it into doing so. Other than that, I don't think that it's a problem with my installation. If i load ipython a multiple times it only takes about 1-2 seconds to come up; I think it's just that it imports a lot of different stuff and my harddrive is to slow.
Damnit I would have loved to go to this and I'm sure my company would have sponsored. How do you people keep up with the conference circuit? 
That's not a data structure. And is not very different from how you would do it in other languages...
I suggest you have a config for with via plugin Dir and list of modules in that dir. Add the Dir to the end of sys.path a.d then use importlib to import the plugins.
`deque` is beautiful just for its `maxlen` argument, which makes writing functions that work on a moving window of data from another container trivial.
sets because of union, intersection and symmetric differences and because they kept all the math notation right which enable you to use them coorectly without thinking. I love fucking sets :) Definitively the most elegant port of a math abstraction to an elegant implementation that works the way it should efficiently
Check out freelancer.com. I just started working on there and there are two ways people know if I can program.... 1) there is a python test that I passed on there 2) there is a review system where you can check the person reviews to see what jobs they have done and how they did. So I did a job for someone on there and I am doing on going work for them but we aren't using the website to facilitate it anymore because there is no point paying the fees. However, for initially meeting it was great. Also the first job was much simpler compared to the work I'm doing now but I think it was smart of him to start out wanting me to do something relatively simplw, seeing how I performed then giving me the more complicated task. Also beware there are a lot of people overseas on it that don't speak English well and will bid on projects no matter what. Just make sure you talk to the person and read their reviews...you will get a pretty good handle on where they're at. Good luck! 
I love the whole concept behind the browser-based ipython notebook, however I find myself getting frustrated each time I try it and end up going back to the ipython qtconsole. My work normally involves playing with remote sensing imagery for algorithm development. I would think this work flow is a natural fit for the notebook. There are two points to my frustration: 1) the notebook currently has poor support for interactive graphics; 2) the embedded cell text editor doesn't have all the features I like to use in my everyday text editor (Sublime Text 3). For point #1 I realize there is a ton of work in progress right now across both Matplotlib and Ipython that may address this in the near future. I like having the ability to pan and zoom through my data. I like writing custom event handlers in Matplotlib to display interesting metadata. I look forward to playing with the new widgets in the future. As for point #2, I don't foresee the embedded editor ever turning into something as fancy as Sublime Text. Maybe I just need to give myself more time to practice with the embedded editor's keyboard shortcuts.
Plone?
type isnt a function. Its a class.
Agreed, that if should have been &lt;epic-myth&gt;if&lt;/epic-myth&gt;. But _if_ he was doing to work on a new project, Cython wouldn't be my first choice. Doing something like the google closure compiler and target Python-&gt;RPython (and thus PyPy or Shedskin) with escape seems like a better choice to me. It would be _awesome_ if PyPy was embeddable. A Shedskin&lt;-&gt;PyPy ouroboros would be a fun project. Actually, not needed. I need to go look at cppyy ... 
Hey, this is neat! Can you give a brief summary of how you set that up? I'm just getting started with iPython and I've setup the qt console on my machine, but I need a cool project to work on.
It's a metaclass.
You're right, the default runner can't handle Django properly because Django does things in its own runner, not only in the test-case, thus making things incompatible with the default PyDev test runner. So, I just took a look at how to fix that and it was pretty simple, so, if you get the latest nightly build -- see: http://pydev.org/download.html for details on how to get it -- you should be able to select any folder/file, right-click and do a run as &gt; python unittest (or with an open editor Ctrl+F9 to select the tests you want to run) and the results should be available in the pyunit view. 
Having your graphics embedded in the notebook itself is great if your ipython server is not running locally. I often access my work via a laptop and get the same experience with ipython/tmux as I would sitting at my workstation.
I am the main developer of CherryMusic and we're proud to announce our newest release, 0.29.0. Within the last 6 month, we've reinvented the user interface completely and added a lot of cool new features. http://github.com/devsnd/cherrymusic We're developing CM on github, so if you have any problems or find bugs, [just open a new issue](https://github.com/devsnd/cherrymusic/issues/new) and we'll take care of it. And if you like it a lot and have a spare minute, please [consider contributing to the project](https://github.com/devsnd/cherrymusic/wiki/Contribute). Please feel free to ask anything about CherryMusic.
I'm thinking of (buggy) code like 'isinstance(too, str)' which would suddenly start returning false. Still haven't tried unicode_literals yet, but I will. :-)
&gt; There are two points to my frustration: 1) the notebook currently has poor support for interactive graphics; This is more the fault of your plotting library. Go check out [Bokeh](http://bokeh.pydata.org/). &gt; 2) the embedded cell text editor doesn't have all the features I like to use in my everyday text editor (Sublime Text 3). Look into %edit.
Flask + mongoDB ... cool project dude !! 
Update 1: Asked about web2py [on their mailing list](https://groups.google.com/forum/#!searchin/web2py/jqmobile%7Csort:date/web2py/GE18t66kA0g/BnJa-tLv964J) - post isn't there as I'm writing this as they seem to have an approval process for posts. Update 2: Asked about pyjs [on their mailing list](https://groups.google.com/forum/#!searchin/pyjs-users/mobile$20app%7Csort:date/pyjs-users/Lb6nh_SW2lo/DUxC8cAk8UEJ)
Check out Sagemath Cloud: https://cloud.sagemath.com/ Simultaneous live coding and executing on the same notebook. If you want a quick demo without signing up, check here: http://www.randalolson.com/2013/11/02/sagemath-cloud-makes-collaborating-with-ipython-notebooks-easier-than-ever/
There is a tool to display it as a series of slides using reveal.js. That might make it less confusing, but of course there's still a limit to how much information you can actually convey to people.
Fernando Perez, the original creator of IPython, is at UC Berkeley, and there are three more of us working here with him. There are a couple more people at San Luis Obispo. One feature that I really like for debugging is that, after an exception, you can do `%debug` to drop into a post-mortem debugger and inspect variables. As of 1.0, that works in the notebook as well. We're still trying to work out how best to support working with larger bodies of code from the notebook.
Cool, thanks for the response. Did not know about `%debug` feature. Been doing things the same way in emacs python-mode for a long time. Time to check out new features...
I actually think that some of the problem is that researchers are ashamed of their code. Not that the code is wrong, but just ugly and confusing for the uninitiated. I for one know that I have written code that works, and that generate illustrations and visuals that looks fine and makes sense in my paper, but is horrible behind the scenes. I'm no researcher by profession, though. Just studied a lot.
Nikola or Pelican for static blogging.
I'm a long time Subsonic user; can you tell me what this might offer that Subsonic is missing?
I wanted to read their 'famous wiki tutorial' but its 404'd :(
I thought there was also a project called pony cms(based on django) for something like a blog... Not sure though.. 
I assume OP misspoke, and is referring to, for example, a simple representation for a reflexive matrix. For example, if you use tuples, then `(a, b)` is a different key than `(b, a)`. But if you're representing a reflexive matrix, you'd want them to be the same. A "hack" solution to this is to use `tuple(sorted([a, b]))`, where the idea is that it always produces the same ordering, and therefore the same key. That is, `tuple(sorted([a, b])) == tuple(sorted([b, a]))`. The other solution is to pay for this with added memory by storing both keys `(a, b)` and `(b, a)` and map them to the same value. The OP is saying that a `frozenset` is a nice solution to this. Namely, your key becomes `frozenset([a, b]) == frozenset([b, a])`. Obviously, a reflexive matrix is just an example. This generalizes to arbitrary dimension.
I explained it better [here](http://www.reddit.com/r/Python/comments/1q9iny/what_are_your_favorite_littleknown_data/cdb8a5o).
mobile-friendly is generally a font-end problem, you'll want to look into html and css practices that will help you with this.
bisect, for keeping lists in sorted order and making it simple to implement an n log n algorithm.
oh man I'm sorry you missed it. I learned about it just 4 days ago from [this thread](http://www.reddit.com/r/Python/comments/1pytlq/pydata_nyc_2013_nov_810_python_big_data_and/) and if you're in NYC area you should follow [NYCPython](http://www.meetup.com/nycpython/)
A Python class is a data structure, whether you like it or not, because "data structure" has a very broad definition (check Wikipedia for example). A Python class encapsulates efficient attribute access and a bunch of other things,
I don't know about the performance of subsonic, but CherryMusic is quite lightweight and even runs quite well on a raspberry pi. I've never tried subsonic up until now. From their website it seems that they have more features than CherryMusic and a quite a big community. So I'll just list a few things I noticed when I just tried subsonic out for a minute: - searches didn't return anything when I didn't write out the full name - the interface is confusing and built using HTML frames and breaks on small screens - It's not written in python ;) Maybe you can just give CherryMusic a shot; You can set it up in under a minute and it doesn't mess with your music library in any way, so there's no danger in trying it out. edit: spelling
Oh sure - it doesn't line things up perfectly. But I find lining code under an if more important than anything else. And I can't get my head around an editor that wouldn't "support" arbitrary indentation amounts.
 Also see pipe_controller: http://jugad2.blogspot.in/2012/10/swapping-pipe-components-at-runtime.html The above post is the latest in a chain of posts (each links to the previous one) which also talk about and show more of the use of pipe_controller, including how to swap pipe components at runtime, and how to run a pipe incrementally. One of the earliest posts in the series, also has links to a few other approaches to doing pipes in Python, including pyp, osh, plumbum, etc. 
Cool, thanks.
If only there was Pypy for Android. CFFI is a dream to work with
It's a class, as well as a metaclass, and its inaccessible metaclass (I guess that would be considered an eigenclass?) has a `__call__` method, so it can be treated similar to a function. Everyone wins!
Are you the [eli Ben](http://eli.thegreenplace.net/) ?
I figured there must be some way, even if it was just separate notebooks.
&gt; A Python class is a data structure No, it's not. A data structure is **abstraction + cost model**. Your `Node` class is *barely* an abstraction, and is too incomplete to have a cost model.
I have been using wxPython for a medium scale project. It is a disaster to modify the generated UI code once you have added logical code inside the generated UI code by wxGlade, wxFormBuilder, or any other wxPython UI tools. According to my experience, the UI designers can only be used for the first time, and can't be edited during rest of the development, or the code that you have added on top of the generated codes by the UI designers will be messed up, when you try to modify the UI files again. All of us know that the best approach of GUI software is design the UI layouts before the coding stage. But who can gurantee the UI will not be changed during the coding stage? what if the UI was enhanced in the next version update? My opinion is, if you are doing a small scale UI program, use wxPython + UI designer tools. Use wxPython + hand code. Does the above situation happen on PyQT / PySide + Qt Designer? i am waiting answers from you guys. (Please correct me if you have different experience on the above situation.)
I'll definitely give it a shot! Just wanted to know if there were any specific features I ought to be looking for or that would definitely improve over Subsonic.
What are the differences from using this than say MPD?
Well, one thing it can offer is the lack of the ~~shady~~ "donate 10 euro if you want to unlock device streaming" thing that Subsonic has. I used to use Subsonic and I have no problem donating to open source developers, but when the Subsonic dev added that crap I stopped using it.
I'll try my best. Sorry, I'm not good at summarizing, and I'm probably going into things a bit too much, so prepare to read... --- A typical computer program is a list of instructions that run within a thread. The instructions run in order, and each one doesn't run until the one before it finishes. Blocking instructions are instructions that take time to complete. A good example of a blocking instruction is reading data from a connection. Until some data arrives, the program gets blocked up waiting for it. I'll write a brief example. import socket sock = socket.create_connection(("www.google.com", 80)) sock.send("GET / HTTP/1.0\r\n\r\n") data = sock.recv() print data This Python script imports the [``socket``](http://docs.python.org/2/library/socket.html) module, and then it opens a connection to ``www.google.com`` on port 80. That blocks the program, waiting until the connection opens to continue. Then, it sends a very basic HTTP request. This blocks too, waiting until it can send all the data. Next, ``sock.recv()`` reads data from the socket. As you might guess, it blocks as well... waiting until it gets some data. When you're writing a client, such as a program that fetches a file from a server and parses data out of it, this can be convenient. You don't have to worry about the state of things. ``socket`` does it all for you. For servers though, this isn't desirable at all. Servers have to handle multiple connections, and it'd be disastrous if a server locked up for all its clients just because it was waiting on one of them. Now, there are a couple of ways around this. First up is threading. You could make a new thread and have that new thread deal with its own client. An instruction only blocks its own thread, so it wouldn't stop the other threads with their own connections from working. Threads use up a lot of resources though, and it's hard to share data between different threads. Any thread could be running at any particular time, so you have to write in lots of checks to make sure that you don't end up with two threads trying to use the same resources at the same time. ... Then you have asynchronous programming. The basic idea is that you want to make as *few* instructions block as possible. Instead of blocking, an instruction will somehow let you know that it didn't do everything you wanted. With asynchronous programming, it's preferred that instructions finish sooner rather than that they finish everything. The basic idea is that you can afford to go back and call it again until it manages to finish up what you need. Take sending data, for example. With synchronous code, you could hand it a block of a few megabytes of data, and it'd stop and wait until it sends it all before moving on to the next instruction. With *asynchronous* code, it'd send maybe a few kilobytes, and then it'd give up and let you know it only sent a few kilobytes. Hardly any time will have gone past, and your program can move on to the next thing it has to do. Later on, it can try sending the data again. Now... Pants is an asynchronous networking library with an API lending itself to event driven programming. Events are pretty cool, I think. At its core, Pants has a big list of all the different connections it has to worry about, and it calls a function that listens for any events involving those connections. Events are things like connections opening and closing, receiving data, or having all your data sent out so that you can write some more. Let me write the above example using Pants. import pants class SimpleClient(pants.Stream): def on_connect(self): self.write("GET / HTTP/1.0\r\n\r\n") def on_read(self, data): print data SimpleClient().connect(("www.google.com", 80)) pants.Engine.instance().start() It's a *bit* more complex, but it's worth the extra effort when a single server in a single thread can handle hundreds or even thousands of connections at once. Now let's walk you through that. First, we import [``pants``](http://docs.pantspowered.org/) of course. In Pants, we have a [``Stream``](http://docs.pantspowered.org/en/latest/core/stream.html) class. Streams represent connections, and they're where you do all your interaction with a connection. You can get information about a connection from a Stream, and a Stream is where you handle events. In the above example, we handle two events: ``on_connect`` and ``on_data``. Let's start with connecting. We make an instance of our ``SimpleClient`` and call its ``.connect()`` method. If this was synchronous code, the program would stop there and wait till it connected. It isn't though. The program keeps right on going, even though the client isn't connected yet. Because of that, we have to wait until the connect event to do anything with the connection. That's where ``on_connect`` comes in. After the client finally does connect, Pants sees the event, and it calls the ``on_connect`` method of our ``SimpleClient``. There, we write some data to the server. Of course, that data doesn't get written immediately, but I'm sure you could guess that by now. There's actually an ``on_write`` event you could catch, but it isn't that useful in most cases to know when all your data was sent. You just care about when you get a response. Now that our data's been sent, the server does its thing and it sends us some data. Pants notices that, and it calls our ``on_read`` method with the data. There, we can do whatever we want with it. We could send something back to the server. We could close the connection. Whatever. There's one last line to that example, of course. pants.Engine.instance().start() Pants has what we call the Engine. The Engine is what keeps track of all of the connections, listens for events, and dispatches the events to the various Streams. You have to ``.start()`` it before Pants will actually work. ``.start()`` is also the only blocking instruction that Pants has, so it's usually the last instruction in your program. --- What do people do with this? High performance networking applications. The Pants HTTP server, for example, can handle many thousands of requests per second (depending on your application and server hardware). Anyways, I hope this ramble helped a bit. Feel free to ask me any questions you have.
I don't mean to be impersonal here, but i'll just quote our FAQ there: &gt; MPD is a music server, that is able to play music and which can be remote controlled by the clients. CherryMusic is a mp3-Streaming server, that means that the clients will get to play to the music. This also means that you will be able to listen to your music everywhere, as long as you have internet.
One addition I think would be a great feature would be allowing the application to sit in the System Tray at the bottom right in Windows. That way you can know it's running without having to refer to a command prompt window, and you could have a simple context menu there for quickly starting and stopping the service as well as launching the webpage.
Well, I get that FOSS developers want to get something after having spent months on their product, but denying basic features is weird. It would make more sense if they would sell the android app for a buck in the market... Anyway, CherryMusic is designed to work in any browser, so you can use your smartphone for streaming as well. But I'll have to admit, that the phone version is not as polished as our desktop experience... mostly because I dont have a smart phone right now :)
These blog entries are very interesting. I went back to the first post in 2009 and have been reading from there. Thanks for posting this. Edit: typo - phone keyboards suck
Indeed. Subsonic is a good product and I'm sure he has spent many hours working on it. But, trying monetize an open source product by forcing users to "donate" to unlock major features is a bit concerning to say the least. There are much better ways to go about it. Admittedly it was easy to circumvent if you wanted to build it yourself, but it hurts your trust in the developer when they do something like that. And thank you for developing CherryMusic. I hadn't heard of it before seeing this post and it looks really great!
Mere mortals will bend over to the killing machine that is Ghoulinator IV.
I never liked that it's a "donation." It isn't a donation if they force you to do it to unlock major features (I consider device streaming to be major). I've contributed time and money to other open source projects, but something about the way Subsonic went about it always rubbed me the wrong way. I'm not saying he's evil or you're wrong for paying, just that I personally don't like it. Maybe shady was an overly harsh choice of words. Definitely people should be able to make money off of open source software, but don't call it a donation if it is forced.
is the "kernel" supposed to be a separate process ? http://bpaste.net/show/zX9jxFAhHI8hn8pmqZNJ/
Just installed it, so this is an initial experience review: I do like partial matching when searching, though I would also like the option to force strict searching, perhaps by putting the search string in quotes? I dislike that using (chrome, win7) the 'back' button attempts to leave the webpage rather than navigating back a level. Is it possible to populate the basedir with directories from multiple computers on the same network? Or is it possible at all? 
Thanks. I listened to portion of Brian Grangers talk today at PyData NYC. 2 questions I didnt have a chance to ask him. * is the "kernel" a process (visible via ps) ? it's not [the 2nd one](http://bpaste.net/show/zX9jxFAhHI8hn8pmqZNJ/), is it ? * Has anyone ever brought up that it might be good to have line number WITHIN a cell ?
no problem! :) I did know about the 3.3 `u` support, but thanks for the heads up.
By default, it starts up a new kernel yes. You can have many kernels in iPython. Even with the qtconsole, you can open a new tab with a new kernel (or with the same kernel). Each kernel has an identifier, which you can use in a command to connect to, if you want to share kernels. There's a lot of really neat things you can do, like sideload an iPython kernel in a python program, and connect to it with the qtconsole for real time debugging.
For those looking for the video: https://www.youtube.com/watch?v=p77BR6e1uoo
why does it say "Sage" instead of the "IP(y)..." one ?
Too late for me, it's already the 10th :(
* Yes, the kernel is a process. No, the second one you show there is the notebook server process. The kernels will look like `.../python -c from IPython.kernel.zmq.kernelapp import main; main() ...`. I guess you ran `ps` there before opening any notebooks, so it hadn't started any kernels. * Yep, Ctrl+M,L (i.e. hold Ctrl down, tap M then L). ;-)
Would something like a cython wrapper like this http://mdqinc.com/blog/2011/10/python-cython-wrapper-for-sdl-1-3/ be better performence-wise or what would be the ultimate way for making a SDL lib for python?
My understanding of it is that both MPD and CherryMusic would feel the same if there's one client user. The big difference is when there's multiple client users. Am I right?
There's a license to help with this, the [Community Research and Academic Programming License](http://matt.might.net/articles/crapl/) (CRAPL). &gt; Academics rarely release code, but I hope a license can encourage them. &gt; Generally, academic software is stapled together on a tight deadline; an expert user has to coerce it into running; and it's not pretty code. Academic code is about "proof of concept." These rough edges make academics reluctant to release their software. But, that doesn't mean they shouldn't. &gt; Most open source licenses (1) require source and modifications to be shared with binaries, and (2) absolve authors of legal liability. &gt; An open source license for academics has additional needs: (1) it should require that source and modifications used to validate scientific claims be released with those claims; and (2) more importantly, it should absolve authors of shame, embarrassment and ridicule for ugly code.
In step (4): Try: $&gt; pip-3.3 install django Is pip-3.3 in the virtualenv bin?
you can embed PyPy (uwsgi does that), not sure what you're talking about...
Sorry, I guess that's been confusing a lot of people. I meant that if you compiled your robot before the 9th, you have to recompile it. Robots are still working :-)
Please check out, for example, [SysTrayIcon.py](http://www.brunningonline.net/simon/blog/archives/SysTrayIcon.py.html) by Simon Brunning.
I tend to use IPython notebooks when I'm doing my math or physics homework (I'm a student at college). My handwriting sucks, so writing down what I'm doing in LaTeX lets me better keep track of where I am, and lets me go back and easily edit any mistakes I've made. (I could just directly use LaTeX from my computer, but it takes some time to compile, and isn't near-instantaneous like IPython is.) I can also directly switch to using Python for calculations and graphing -- I don't have to pull out a calculator, can do arbitrary experiments and tests, and am still recording my work for future reference. It's also a lot easier for me to backup or share what I'm working on when they're all stored electronically, instead of having to dig through a pile of old notebooks.
I really do hope you're joking. Why not go with 2. It's enough to see indentation, it saves TWO characters per indent, and if you need to save 1 character per indent to see long variable names, either your variables are too long, or you have too much indentation. Also, lining up only one indentation block at the cost of making everything else look "off" isn't worth it.
Just want to say I think this a great project, good to see it getting updated. Filed a suggestion/issue for you on github.
bog or blog?
Searched "python tutorials" Went through the entirety of the first page. Wrote a simple program. (I think I still have it)
They really do two different things. MPD is a music player with remote control. You hook up speakers to a computer, then install MPD on it and it will play your music. You can control MPD (e.g. play/pause, song selection etc.) from any computer/phone/tablet in the house, but the music will only play on that one computer you installed MPD on. This is a streaming server. You install it on a computer and point it to your music, and it will send that music to any place you like. So you could for example open up a web browser when you're at the library and play your own music collection, or get it on the go on your phone. tl;dr: MPD = remote control, cherrymusic = listen anywhere
That makes sense.
I've used this successfully in one of my projects, it's a breeze to work with and very easy to extend if it does not meet your requirements in some points. The setuptools integration is awesome, makes it very easy to ship your extensions separately and keep each in its own repository.
Off-topic but I couldn't not bring it up. Is the "Blog Archive" in the sidebar *vibrating* for anyone else?
Not for me.
It was for me. I decreased the font size and the problem stopped. YMMV.
well in case you are interested to know if the book is really worth it or not you could go through it yourself. I will be happy to give you a complimentary e-copy of the book. If you like the book you could review it for others to know. mail me -priyankab@packtpub.com
ABout browser behaviour: if you change the URL, the proper path part, not the hash, it is as if the page itself has changed. People do indeed expect to go to the previous page when they click 'back', but now the previous page itself is a CherryMusic page. Refer: github browsing. Github doesn't really refresh the whole page when you open a directory/file on github, it is still XmlHttpRequested, but HTML5's History API allows you to behave as if the page has changed, even giving you callbacks when user navigates.
Downloaded, installed it and ran without issues. Looks great! :) One thing - and it's one I may have missed since I'm at work - is it possible to broadcast music or is that one thing on the roadmap? Like it's done on Grooveshark, for instance?
Cython isn't a panacea. It can make some code run faster (especially places where you both know the types you are using *and* you are doing primitive ops like adding integers that can be translated directly into C code), but if you're using something that calls out to another pure Python function, (or PySonar infers a type that's something other than a primitive) it's not going to give you much of a speedup, if at all.
Perhaps "Django Fiber" ( https://github.com/ridethepony/django-fiber ) from "Ride the Pony"?
(For the record) There was Zine, a blog engine written by Armin Ronacher: http://zine.pocoo.org/ . Sadly, the project is abandoned since 2011 ( http://lucumr.pocoo.org/2010/1/6/status-update-2010/#Zine ).
&gt; Comparing an ~~8-bit~~ ASCII-encoded string to an equivalent unicode string should work fine
Cool, thanks!
&gt; A data structure is abstraction + cost model. That's an unusual definition. I find the one from Wikipedia more natural: &gt; a data structure is a particular way of storing and organizing data in a computer so that it can be used efficiently Sedgewick in his C++ algorithms book says: &gt; methods of organizing data involved in computation Let's see what Knuth thinks: &gt; A table of data including structural relationships Interesting. I suppose that a "table" here is in the most generic sense possible "data in memory". In any case, a Python `class` is a mechanism that fits all these definitions. It's not unlike a JavaScript object, by the way, which can be used (and is in fact used) to represent dicts, sets and other things. Python classes can easily represent dict, as well as many other constructs.
An interesting thing is that in Python class NewClass(object): attribute = 1 is a syntax sugar for NewClass = type('NewClass', (object,), {"attribute": 1}) Is is a nice way to create classes dynamically
As of now CherryMusic can not create a stream based on your taste in music. It also isn't possible yet for one user to create a stream which other users can listen to. I hope this answers your questions, because I don't really know what you mean by broadcasting...
Here's some reading for plugins with focus on Python: http://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures/
But completely loses readability. ;-(
The page isnt loading...
It was also for me, very annoying so I just nuked the sidebar from the debuger
Try using * for a wildcard in your searches.
I just installed it and I'm streaming to my devices from a server inside my home. Are you saying that's going to stop working? From what I can tell, the only thing that I can't do is use their *hostname*.subsonic.org address. But using dynamic DNS, it's connecting to my home server just fine. EDIT: When I say devices, I mean my Android phone.
What I meant was exactly that: One user creating a stream that others can listen to.
Errmm, yes. Doy.
Ah okay, that makes sense. But as I have mentioned somewhere else here, I'm all for good defaults; Or rather the principle of the least surprise. That's why in CherryMusic the last word of your search automatically gets a wildcard, because we noticed that this is how people search, e.g.: searching for ```michael jack``` in CherryMusic is equivalent to searching ```michael jack*``` in subsonic, which makes a lot of sense in my opinion. people are lazy, and we support that :)
Someone on github forked CM and started to implement this... but I think the fork diverged to much from out master branch, so I don't know if it's possible to merge it back.
&gt; a data structure is a particular way of storing and organizing data in a computer so that it can be used efficiently That seems in line with what I said. I don't really disagree with the other definitions you proposed either. The point is that a cost model entails representation. &gt; In any case, a Python class is a mechanism that fits all these definitions. Certainly a Python class could be thought of as an abstraction the associates keys to values and provides constant time random access to a value given a key. That's abstraction + cost model, which would indeed make it a data structure by my definition. But I wasn't commenting on Python classes. I was commenting on the tree "data structure" you proposed. It had almost no abstraction and was too incomplete to provide a cost model. Maybe you want to get technical and appeal to Knuth's definition and claim it's a data structure. Fine. I'm not going to argue with you about that. But it's certainly not something I'd call a data structure.
A lot of people also point to the ease of creating DSLs in Ruby. Personally, I find this to be, at best, a crutch, and at worst, a design flaw. I've never once said, "Boy, Python's so obtuse, I should really do this in a simpler language. I know, I'll write one in Python!" A lot of Rubyists do this, and now you've got the overhead of yet another mini-language for future devs to learn and maintain. Especially when learning a legacy codebase for the first time, it's hard enough figuring out where everything is. I don't want to also have to learn the semantics of some ex-employee's markup language whose parser is probably full of bugs and inconsistent logic.
I agree, but in all fairness, RoR is the only reason there are Ruby jobs out there. Whenever I see a job posting for Ruby, it's because the company is using RoR. Whereas with Python jobs, it's because they're doing a lot more than just web development.
Thanks for posting this. This is _exactly_ the type of content that should be in this subreddit.
[Pelican](http://getpelican.com) is a good start for static site building.
Same here, the vibration occurs only when zoomed into 150%.
Thank you, I'm going to work on it.
now I know why you think you have failed.
Sweet baby moses D: On another note, why the hell do so many people do myVariable instead of my_variable Do they not read PEP8? Pet peeve.
I was surprised it wasn't already posted here. There seems to be another discussion on /r/programming, here: http://www.reddit.com/r/programming/comments/1qce2s/the_story_of_none_true_and_false_by_guido_van/
This is a new blog, so I haven't set up fancy styles or comment sections yet. I wanted to start by getting something written. Feel free to comment on here for now. :-)
It's the API access that's restricted. So, stuff like the iPhone/Android app. Browser access is not. You also get 30 days before it demands a donation.
I'm using the Android app right now. Are you saying it's going to stop working after 30 days?
If you are going to ask a question I suggest trying /r/learnpython or StackOverflow. You also need to copy code exactly as you have it. You are missing quotes in your input function calls. When describing a problem it helps to list the exact error/exception you are getting too. When I ran this I got a "ValueError: math domain error" when calling the "asin" function. Look at what you put into the "asin" function.
Superb!!
What hackathon was it for? Edit: sounds like it would be pretty cool/fun if you get to solve problems like this. When i here hackathon I usually associate it with solving complex problems that don`t produce anything useful. 
I'm guilty of this but I come from a Java and C background and I'm also that guy that uses tabs. No I didn't read PEP8, I needed to get stuff done and I wrote code in a manner I was comfortable with that still worked. 
Not sure when I missed this news but I thought PyPy didn't have an embedding story? Just looked at the uWSGI src https://github.com/unbit/uwsgi/tree/master/plugins/pypy For the plugin you wrote. This is still the first link that comes up when searching for "embedding pypy" http://doc.pypy.org/en/latest/project-ideas.html Which seems like is a todo item. This is amazing news. PyPy can embedded in any C/C++ program.
http://en.wikipedia.org/wiki/Interpreted_language
Thank you.
The most common use case is that there's a program called `python` which is an interpreter. If your code is in `my_program.py` then you could run it as $ python my_program.py The other way it's commonly launched is to use the first line of the program to tell your system how to launch it. First Line: #!/usr/bin/env python Running it: $ ./my_program.py That tells your system to launch the program it finds when it runs 'env python' and use it to interpret the code. Then your 'my_program.py' can load whatever it needs (with `include` lines) into the same interpreter process. That's probably the most common way to use python; there are also ways to run it inside a JVM, compile it, use alternative versions of python with different behaviors, etc.
He covers many topics, from wxPython, Natural Language processing, Matplotlib, Django and Machine Learning, thanks for the link!
I think since you're using asin, it should be w/h. 
PEP8 are guidelines, not gospel.
Man, the Pep8 thing really gets under my skin -- or, more specifically, the people who adhere to it religiously. Which on one level makes me chuckle, as the very first item in Pep8 is &gt;**A Foolish Consistency is the Hobgoblin of Little Minds** &gt;...most importantly: know when to be inconsistent -- sometimes the style guide just doesn't apply. When in doubt, use your best judgment. I've had people submit pull requests on my code where *all* they fucking do is run a PEP8 suite on it. No. Not accepted. Fuck you. I like my tabs, and I like them to have a width of two spaces like Scala. Deal with it, people. 
does C have a style guide? I'd love to see it since I have no idea what the naming conventions are with C.
[Yep](http://www.subsonic.org/pages/premium.jsp). 
OK, gotcha. It says the premium features will stop working after 30 days. I'm going to take the wait and see approach and then try to convince myself to peel that dollar off each month. So far, I'm really enjoying the Android app, so it's worth it to me.
I suppose it's possible, but it's hard to get to the point of knowing a lot about Python without learning a bit about other computing concepts and languages along the way.
that worked thanks
&gt; Would you also say that `data Tree = Leaf | Branch Tree Tree` in Haskell is not a datastructure? Hardly. You're basically putting the abstraction down on paper and declaring that since there is something concrete, it is therefore a data structure. You've got the abstraction: *tree*. Now what kind of tree do you choose to provide? Namely, which *data structure* are you using? Is it a leftist heap? A balanced binary tree? A red-black tree? All of these things are data structures because they combine the abstract concept of *tree* with a cost model. &gt; What about `(cons nil (cons (cons nil nil) nil))` in lisp? That's quite a bit more interesting, because there is a definite cost model associated with the linked list construction you've chosen here. &gt; Remember you can both talk about a data structure as an abstract term Perhaps that is where we have our wires crossed. I prefer not to mix data structures and abstractions freely. A list is an abstraction. A tree is an abstraction. Sets are abstractions. So are queues. The properties you've pointed to define invariants considered fundamental in that abstraction. But add a cost model. Do you need a list of arbitrary size and constant time insertion? Linked list seems good. What kind of set do you want? If you can afford probabilistic membership testing, then a bloom filter would be a nice data structure. Or maybe you only care about the smallest element in a set, in which case a simple min-heap could be used as a data structure. &gt; By the way, a python list with its .append and .pop(0) is all it takes to have a queue in python, it does not need more or less abstraction, and you do not need to know how it is implemented, it is still guaranteed to function as a queue. I don't see anything to disagree with here. An abstraction is something that exists in the world of ideas. A cost model entails representation in your code. Combine the two, and you get data structure.
There is no "standard". There is only the next lesson. 
PEP8 recommends spaces over tabs and is therefore invalid /s
For me, in my line of work, it is not so much the language but what it is applied to. For example I do KPI reporting for the company I work for. Most of it is simple charts and graphs of the number of leads coming in from each division and how they are managed over time. I use a mixture of Php (cause that is what was there when I got here) and Python. The language doesn't really matter (of course there are obvious exceptions) - it is what you do with it that counts.
First, I don't believe the Fibbonacci Sequence ends with a 0 (lines 3 &amp; 4). I believe it typically ends with "1, 1" Now when grabbing the user's input I'd make that a while loop waiting on correct input. Then once you have an acceptable value from the user, break the while loop and enter another where you decrement y each time until y is 1. To get it all to print on the same line (I'd be printing each time in the loop), I'd try print str(fib(y)), That should get you to the last digit which should break your loop, since y = 1, and after your loop have one last print statement to print out the last 1 value.
 #!/usr/bin/env python import sys i = 0 try: i = int( sys.stdin.readline() ) except ValueError: print "That's not a number retard!" sys.exit(2) if( i &lt;= 0 ): print "Please enter a postive integer greater than 0!... NOOB" sys.exit(1) elif( i == 1 ): print "0" sys.exit(0) elif( i == 2 ): print "0,1" sys.exit(0) output = [0, 1] for x in range( 2, i ): output.append( output[x-1] + output[x-2] ) for x in range(0, len(output)): output[x] = str(output[x]) print ','.join(output)
Yeah, that sounds like a great collaborative attitude. The whole idea of PEP is to basically solve the annoying differences to let people get consistent code that is easier to maintain. Your idea that 2 spaced tabs and non PEP is somehow great (because you want it that way) sounds like a kid on the playground not wanting to play with anyone else. That's a fine attitude to have by itself, but it'd make me want to get someone off a dev team asap, since I'd be very concerned that the person would get touchy about all things related to his code, if he got hung up about doing things a standardized to make it easier for everyone.
Next time I do your homework I'm gonna have to charge.
I think you took my comment as a primadonna one, which it wasn't meant to be. I actually agree with you to a point. The people I take issue with are those that think PEP8 is the one and only way to do things. *If* I'm working *on a team*, or submitting code to an *existing project*, yeah, I follow whichever standards are set. If I'm working on a Wx project, I CamelCase all of my function names -- even the first letter! because that's the standard set in the project. I think the Google Python Style guide is a little more useful than PEP8. It boils down to "Follow the standards set by the existing code." Even down to comment style. For instance, If the other guys add boxes around their comments, you do the same. It makes everything gravy when it's all the same. However, if I'm working on a personal project, **I** set the standard. I like tabs with a width of two spaces. I dig the way it looks, and find it better than 4 spaces. If you find it childish that I write code in a way that suits me, then OK, that's fine, I guess. The 4 spaces vs one tab argument runs deep with you. Also, the beauty of tabs is that you can adjust their width in the editor, so its pretty much a moot point anyway. 
I think you misunderstand how programming works. My answer to your question is years or forever. I have been programming in primarily Python for maybe 5 years and I know quite a lot about what I use it for...but I know nothing about the hundreds of other ways you could use Python. But I'm going to agree with the previous comment. Once you've known Python for a while you might start learning C or C++ or fortran or javascript or matlab, even if just to rewrite programs written in those languages. It all depends on what you'll be using it for.
Different backgrounds and coding experiences in the workforce. Adherence to a project's standards is the most important. I try to follow PEP8 whenever starting a project, but if I'm working on someone else's code and they're consistent in style, I follow it.
&gt; Am I totally misunderstanding this? Well, sort of kind of. You see, the Free Software ideal is not about using software to make the world a better place the way Greenpeace tries to use ships and such to make the world better. The Free Software idea is that humanity as a whole benefits maximally and most fairly from software when it is free (in the sense of Richard Stallman's famous "Four Freedoms" - look them up). Such freedom is fundamentally at odds with disallowing usage for certain purposes: as soon as you disallow commercial use, your software is no longer free (in the speech sense). Free Software isn't about giving stuff away, either - there's free commercial software like Ubuntu or MySQL's community version; and there's gratis non-free software like Flash Player, Internet Explorer, and many more. In short, when you forbid commercial use, your software is no longer Free Software. &gt; Am I some kind of selfish asshole for not wanting Massive Corporation X to be able to resell my code? No, but your ideal is unrealistic. You can forbid commercial use, but then your software is no longer free. You should also keep in mind that not all commercial use is bad: more often than not, free software projects benefit greatly from commercial adoption - the World's finest HTML rendering engines wouldn't be anywhere near their current quality if it hadn't been for massive adoption by Apple, Google, and countless other companies. That said, you *can* avoid the undesirable situation where Massive Corporation X takes your code, sticks it in a proprietary product and makes big bucks without telling anyone they used your code. Personally, I'm fine with this even, but if you're not, pick one of the more restrictive licenses - at the low end, some of the liberal licenses require attribution, while others do not - with an attribution requirement, anyone who uses your code has to reproduce and include the copyright statement and license text in their product. Or you can crank it up and go with some flavor of GPL, which requires not only attribution, but also a link or equivalent reference to the original sources and any modifications thereof, and typically also requires releasing the modifications under the same or compatible terms. This pretty much rules out the massive-megacorp-sellout doom scenario - provided that you have the financial stamina to take an infringer to court over GPL. &gt; Github's site seems to list every major code license I've ever heard about- is it just excluding the few that prohibit commercial use? It lists the Free Software licenses that the Open Source Initiative recognizes; as I explained above, prohibiting commercial use makes a license non-free, and one of Github's stated goals is promoting Free Software. &gt; It does list Creative Commons licenses which can disallow commercial use, but seems ill suited for code. "Commercial use" is an ill-defined concept anyway; I don't really understand why they'd list them at all, but I assume it's because some people use github to host things that are not code - artwork, copywrite, stuff like that, and for those, CC licenses have some sort of authoritative status. &gt; If I pick a license- can I change it later? (assuming I'm the only contributor) You can always re-release your software under a different license. People who have already acquired the software under a different license are still entitled to the old one in most cases though, since free software licenses are typically irrevocable (making them revocable would introduce all sorts of social and practical problems, and it would arguably make them non-free, because you couldn't re-release modified versions freely anymore without risking them to become illegitimate when you revoke the license, without the end user having a chance of knowing). &gt; If I change a license, is it retroactive or can someone just go back a version and grab the old code under the old license? As soon as you stop offering software under the old license, people can only accept the new one. Those who have already accepted the old one may still be entitled to it though. If you keep the old version downloadable under the old version, people can probably still accept the old terms for that version, and if someone else forks an old version that they have already licensed from you, keeping to the old license agreement, others will be able to get the software under the old terms from them. For example, if I download your code under an MIT license, then you change it to GPL3, I can still re-release the version I have under MIT (or even under a proprietary license, because the MIT license allows this). This effect, BTW, is also the reason why the more restrictive open-source licenses (e.g. GPL) effectively make proprietary resale pointless - you can sell the software, but since you have to provide the source code, and release it under GPL as well, others can take your work and release it gratis. This is actually by design; it ensures that the software will remain free (though not necessarily gratis). 
TIL "displays".
I like the pyramid framework but I'll stick with vim and a console I think. 
The short answer is that the proper way to say "don't exploit my code" is to use the GPL which is finely tuned to do most of what it seems like you actually want, rather than adding your own restrictions. The long answer is that a blanket prohibition on commercial use has two problems. One is that it isn't compatible with the licenses everyone else already uses so no other project will even look at your code, since they're not going to (and likely *can't*) change their licenses just for you. The other is that it's too broad, and might prevent things like selling Linux DVDs for the cost of postage to people with crappy internet, installing it as part of a Linux distro on leased servers or on client machines you're supporting as a consultant, displaying your code to users of a commercial git hosting service, etc. And for this reason, your code *and anything depending on it* would not be allowed in the all-Free core of distributions like Debian (and by extension Ubuntu). And finally there is the issue that "commercial use" may not be exploitive at all. How many products are built on top of a bunch of existing stuff (language interpreters, libraries, web servers, etc.)? Pretty much everything is, and by and large nobody is really trying to take credit for the stuff they build on, even if they are selling their own work that depends on it. Or consider a huge project like the Linux kernel, Apache, etc. ... where would they be without corporate interest which leads to developers being paid (directly or indirectly) to work on them? (Note that Linux's GPL licensing has been used a number of times as leverage to prevent the "slap a new name on it and pretend we own it" type of exploitation you mention.) As for your other questions. Yes, you can change your license later if you are the only contributor... but once you get more contributors, you need their permission unless you have them assign their copyright to you like the FSF does with their projects. And if you do change the license it's not retroactive unless the old license makes it so (like the "we can change the terms at any time and you're stuck with them" clauses in EULAs and cellphone contracts etc.). Applying any common free/open source license is pretty much forever. 
IPython is great for CLI programming and really all you need for learning the language. If you need/want an IDE you should try the community edition of PyCharm.
Am I the only one getting compilation errors? I'm Running python 3.3 on windows.. http://i.imgur.com/MfGMM0m.png
Pycharm has a vim plugin and a built in terminal, if that makes any difference to you. 
I was already leaning towards GPL (as, like you said, it seemed to heavily lean towards "don't exploit my code.") But with what you and tdammers said, I might even do more open licenses. Thanks for taking the time to explain.
[Then why is it listed under functions](http://docs.python.org/2/library/functions.html#type)? Because it is a function. Perhaps you are confused because it returns a class when given three arguments.
I've always liked Flask. 
pyramid had python 3 support before django
PyCharm also costs $99 with a $59 recurring license every year if you want Pyramid framework support.
Type returns a new type object I should say.
That really isn't that much money if you are doing this for any significant amount of time. 
Subscribed! Holy smokes. This is the mother-load of Python video tutorials.
https://github.com/wrobstory/vincent Awesome project too. 
you are looking for something like pyjamas I think. There is also pythonjs (or classy pythonjs) https://github.com/PythonJS/ that allows you to write Python and compile it to Javascript. If you are like me and prefer to write Python but know Javascript I would go with Classy PythonJS. That said, there is no framework with PythonJS you still need to use something like jquery-mobile except you do it in Python.
Flask is nice if you know what you're doing and if you have been web development for a while. Django holds your hand a little so you can do stuff easily without having to look around too much.
I think the original version was better. I don't like using `partial` if I can help it, and I expect that most other Python devs don't know that `iter(x)` and `iter(x, y)` behave completely differently. `while True` is a very clear sign to the reader that you're going to have an `if ... break` clause in there somewhere.
Am I the only one that doesn't see anything wrong with mixing languages, especially if it means reusing a good amount of code?
I don't disagree with you, it's just a point to bring up for people who are thinking about using PyCharm as an IDE.
I don't mind pep8 much except for the 80 char line limit rule. Who the hell is still working on an 800x600 resolution monitor? 
probably not the most comprehensive explanation you are looking for but when it's put there and your .py file has executable permission, you can run the file by just typing ./file.py rather than python file.py
how's the quality of the instruction ?
Vim. 'Nuff said.
I really like [Sublime Text](http://www.sublimetext.com/) just get the [package control](https://sublime.wbond.net/installation#st2) and you can download some good packages that will really help out. Pretty sure someone has a Yum repo out there too for a quick installation. Some good packages: * AutoPep8 &lt;-- helps a lot with automatically formatting to Pep8 standards * SublimeREPL &lt;-- Python shell inside your IDE * Pylint
To each his or her own, but I just don't get the tab thing. Any modern editor should be able replace tabs with spaces transparently to the user, so I just don't what the issue is with using tab characters vs. spaces.
I would recommend a [copyfree](http://copyfree.org) license like the MIT or Simplified BSD. Short, simple to understand and free for anyone to use for any purpose. No mess; no fuss. I prefer copyfree licenses from an ethical perspective (the most freedom possible) and from a practical perspective. There are plenty of people in situations where use of GPL software in their own is not allowed.
As a developer who's staying to get into Web development, this looks like great advice. If anyone would like to add to this here it would be greatly appreciated. 
There's also a free community edition now. That alone wouldn't make me switch, but it should be mentioned. I suppose you'd still need to pay for their framework support.
Only use a fully qualified path (e.g., /usr/bin/python) if you're sure that's the Python interpreter you want to use.
Yea I was comparing functionality of the free versus paid versions. The free version is still pretty limited.
Pretty easy to come up, if you have terminator or iTerm and split screens. Heck, when I've got code up, I'll have split screens in my editor, and lines longer than 80 char end up wrapping.
I agree with avoiding partial, but I do like using `iter(..., sentinel)` as described. In my opinion the less explicit branches, the better (in general of course)
/r/pyramid * http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/quick_tour.html http://www.reddit.com/r/Python/comments/1eboql/python_website_tuts_that_dont_use_django/#c9yxl8w
I've seen some people do the `./file.py` instead of `python file.py`. Other than a slightly shorter command, is there really any difference between the two?
Really good stuff, just what I was looking for at the moment. His style is very enjoyable. Hope this guy sticks around for awhile.
Yea it totally makes sense. I'm so used to Vim and Sublime Text at this point I'd probably have a hard time switching.
I'm still learning myself, but to my knowledge there isn't any significant difference between the two. In ./file.py, the shebang tells the operating system that the file should be run by python. So then the operating system replaces "./file.py" with "python file.py" and then executes that instead. So I guess the take away is that if the operating system knows it's a python script, you can use "./file.py" as a shortcut, but it's always a shortcut for "python file.py" (which should always work so long as python is part of the operating system path). It seems like sys.argv behaves the same way regardless of which way the script is invoked. (I personally always just use argparse so if there are differences, I've never had to worry about them.)
Specifically, Vim with Vundle, Tagbar, and possibly NerdTree.
From the wiki page: &gt; Putting the facility into the system gives the following benefits. &gt; 1) It makes shell scripts more like real executable files, because they can be the subject of 'exec.' &gt; 2) If you do a 'ps' while such a command is running, its real name appears instead of 'sh'. Likewise, accounting is done on the basis of the real name. &gt; 3) Shell scripts can be set-user-ID. &gt; 4) It is simpler to have alternate shells available; e.g. if you like the Berkeley csh there is no question about which shell is to interpret a file. &gt; 5) It will allow other interpreters to fit in more smoothly.
Yes, but this is not the case for instances of object: &gt;&gt;&gt; x = object() &gt;&gt;&gt; x.__dict__ Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; AttributeError: 'object' object has no attribute '__dict__' &gt;&gt;&gt; x.foo = 3 Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; AttributeError: 'object' object has no attribute 'foo' 
You can also use it to make sure a specific version of python is used e.g. #!/usr/bin/python2.7 
I was just thinking about writing this the other day.
 &gt;&gt;&gt; x = object() &gt;&gt;&gt; assert hasattr(x, '__name__') == False &gt;&gt;&gt; print(object.__doc__) &gt;&gt;&gt; setattr(x, 'one', True) Traceback (most recent call last): File "&lt;ipython-input-10-7337de08fc39&gt;", line 1, in &lt;module&gt; setattr(x, 'one', True) AttributeError: 'object' object has no attribute 'one'
CherryPy sits somewhere between flask and django in "hand holding" . Works on 3.x . Would suggest you looking at that . 
&gt;For a reader unfamiliar with this code-form, it’s not clear that if block == '' is a technical, implemetation-driver detail. It might seem like an semantic value returned from the read. But that's not any different for the proposed solution.
&gt; Point to a repository you think should be the gold standard for modern python projects. * /r/pyramid * https://github.com/pylons/pyramid &gt; structure http://pyramid.readthedocs.org/en/latest/narr/project.html#the-project-structure &gt; naming scheme http://docs.pylonsproject.org/en/latest/docs/pyramid.html#supported-add-ons &gt; unit tests https://github.com/Pylons/pyramid/tree/master/pyramid/tests https://github.com/Pylons/pyramid/blob/master/tox.ini &gt; documentation, readability http://docs.pylonsproject.org/en/latest/docs/pyramid.html http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/quick_tour.html &gt; maintainability https://github.com/Pylons/pyramid/releases https://github.com/Pylons/pyramid/blob/master/HACKING.txt https://pypi.python.org/pypi/pyramid 
I guess I'm wondering why you wouldn't do: def read_blocks(f, size): block = f.read(size) while block != "": yield block block = f.read(size) Also, at the end, he does: blocks = ''.join(iter(partial(f.read, 32), '')) Why wouldn't you just do: blocks = f.read()
&gt; Vim with NeoBundle, vimproc, fugitive, neocomplete, python-mode, coveragepy, ultisnips, vim-surround, airline, arpeggio, ack/ag and a decent colorscheme. Bonus points for unite. FTFY 
thanks are you familiar with wakari ? 
The general process is similar for 2.7 / 3.3 / 3.4: http://www.troeger.eu/files/teaching/pythonvm08.pdf
Exactly and I know with virtualenv you would want to use /usr/bin/env python because /usr/bin/python will pick up the system python and not your virtual environment. 
Except the Vim plugin sucks, like they always do compared to the real deal. 
Amazing :) Cool concept, very interesting application.
https://github.com/pythonhub/web2py-modular-blog-engine
I have plans to write a MongoEngine adapter to Postgres HSTORE api. maybe it works for people who dont like Mongo.
I guess I should document it better ;-) updates the project ideas so they reflect more what has been done
Emacs = jedi.el for autocompletion and Rope for refactoring. By the way, I'm stil building my environment: next steps will be introducing flycheck and virtualenv.
evil-mode in emacs is the only vim emulation that gets it right.
Flake8Lint is nice too.
OP here. I posted a link to stackoverflow because I had the question already formulated there and though maybe someone wants to earn some reputation. If you don't have a stackoverflow account but want to contribute, feel free to post here as a top level comment. **Update:** I have added my final solution to the stackoverflow, in case you are interested. This is going to be a module for ETL processing (in a Data Warehouse evironment). I am thinking of making this a proper module with comments and all and pushing it to github.
This needs to be x-posted to /r/gis! Definitely going to give this a try. One question, you write that you use the geographic coordinates to do your calculations, are you using them as Cartesian coordinates? If so, do you know if it affects your result any? Depending on your latitude off course, but that will compress your north south distances quite a lot. It will also mess a lot with your angle calculations compared to actual angles on the ground.
wow
what’s the problem with partial? i love it! e.g.: import os.path as p here = partial(p.join, p.realpath(p.dirname(__file__))) my_resource_path = here('my_resource.dat') much better than import os.path as p HERE = p.realpath(p.dirname(__file__)) def here(file_name): return p.join(HERE, file_name) my_resource_path = here('my_resource.dat') and if you’re saying that’s cheating, because i didn’t create a constant in the first example: it isn’t, because i only did it in the second ecample to avoid re-evaluation, which happens automatically in the first.
the first point is valid, but the second one is obviously just an example showing that it worked.
i just do class IM_A_NAMESPACE: bar = 5
One is intended to be directly executable, the other isn't.
 such lack of style much attribute wow many namespacing so shortcut wow
collections.namedtuple?
FWIW PyGtk (gtk+-2) has been superceded by PyGObject (gtk+-3). There is a matplotlib backend for both, so interoperability from plotting to the UI is very easy (via cairo). Personally, I'd like a simple UI tool that allowed one to open a pandas dataframe and simply plot things on the same / different (sub)plots, use/ignore the time axis and resample where appropriate. Basically a rich GUI wrapper around DataFrame.plot Please PM me for more info on gtk+matplotlib et al, I have heaps code that intersects both projects.
Thank goodness for that!
This is a tad off track, but you might consider taking a look at [The Grammar of Graphics](http://www.amazon.com/The-Grammar-Graphics-Statistics-Computing/dp/0387245448), by [Leland Wilkinson](http://www.cs.uic.edu/~wilkinson/). When [Hadley Wickham](http://had.co.nz/) developed [ggplot2](https://en.wikipedia.org/wiki/Ggplot2), the 'gg' refers to the fact it was based on "The Grammar of Graphics." 
As a side question to Linux experts: how does this method compare to the Windows way of registering a particular file extension with a program instead of every script having to have a shebang line at the top? I'm mainly Windows-based so the file extension registry thing makes sense to me but with plenty of other Linux concepts I have had an "aha" moment that makes me wonder why Windows does it so awkwardly.
That is really cool.
* Python3 as interpreter * PyCharm community edition as editor * iPython3 as interactive interpreter for fooling around * virtualenv+pip for packages :-)
The point would be to update and maintain the data, not the html templates. Let's say that your website titles follow a pattern of: "company x: about us" "company x: contact us" "company x: history" "company x: products" One day the pointy haired boss looks at the website and demands that the format of the title be changed to: "company x - about us" "company x - contact us" "company x - history" "company x - products" When you have 5 pages its not a big deal, but what if you're amazon? This applies to any part of the site. Abstract it out so you can make cascading small changes rather than hundreds of tedious changes.
Yeh +1 for camel case programmers from Java/C backgrounds. It doesn't really matter though in the grand scheme of things if it is readable and consistent. 
I_dont_see_why_people_pretend_underscore_notation_is_more_readable: IPrettyLoveTheUnreadableCamelCaseEspeciallyWhenMixingAcronyms
This is super cool. import cffi ffi = cffi.FFI() ffi.cdef("""\ char* rpython_startup_code(void); int pypy_setup_home(char *, int); int pypy_execute_source(char *); void pypy_thread_attach(void); void pypy_init_threads(void); """) try: ffi.verify('',libraries=['pypy-c'],library_dirs=['.']) except Error, e: print e pypy = ffi.dlopen("pypy-c") pypy.rpython_startup_code() print pypy.pypy_execute_source("answer = 'is 42'") pypy.pypy_execute_source("print 'answer %s' % (answer,)") print "the end!" When run FROM pypy gives 0 answer is 42 the end! If I comment out verify (some arch= 64, 32 bit problem), it gives the same output under CPython! Freak'n sweet. Couple questions 1. How do go about understanding `pypy/goal/targetpypystandalone.py` I'd like to generate a lib that takes a pointer to an execution context so that multiple pypy VMs could run in the same process. What is the best way to achieve this goal? 2. How does I marshal objects between C&lt;-&gt;PyPy ? 3. Thank you! 
I made a new release (4.1), which now also takes the XDG spec into account. I tried not to break backwards compatibility, so it still reads the `~/.group/app/app.ini` file. But is gives out a logging message with level `WARNING`. So a properly configured application should get the notification soon enough. The detailed order of loading (and precedence rules) are [explained in the docs][1]. What's your thought on this? [1]: http://config-resolver.readthedocs.org/en/latest/#description-usage
Do you have this available on Github by chance? If not, would you be open to sharing it with me (even privately) so I can take a look at it and see if I can do anything to make that process more automatic for others?
&gt; While I strongly believe that IPython has a central place in enabling open science, "forced" is probably a bit strong for my taste. I agree in principle. However, I don't mean it in the strong-armed sense. I mean it in the "as a condition of publication" sense. Most journals already have archiving policies (that aren't really enforced) for papers they publish, it's not really much a leap to say "include a working IPython notebook". &gt; Instead, I believe that by creating open tools that are better suited to the needs of researchers, as a community we can improve the scientific workflow and see science done more efficiently. If those tools simultaneously lower the barriers to releasing the analyses and data that go into preparing a published paper, then more researchers will release them. I'm kind of with you; but I actually see the parallel as more explicit. The journals need to be edited out of science. I foresee that we'll slowly (with the help of exactly the tools you talk about) move towards self-publication and peer-review in the same way open source does it -- publish everything and don your flameproof suit for the comments section. &gt; I don't want to force researchers to use a particular format - I want to see the cultural revolution that has resulted in the software development community that I love so much sweep across academia. Me either really. I'm just expressing a little bit of annoyance because of the non-scientific behaviour of many authors who want to keep their data and methods secret but still get the scientific credit for their work. These days, a paper is not enough. Code and data or it didn't happen.
before building a framework, build applications suiting (your) actual needs. then factorize common patterns into a lib. starting a framework without knowing what to put in is probably not a good idea.
It seems to me tulip has a similar concept to this explicit receive value, AIUI anyway. In that you can yield an explicit Future that when completed will effectively call send() on your generator. The tulip coroutine scheduler then acts like a bit like your decorator So: f = Future(...) yield from f Not quite the same thing, but similar in that you can be more explicit about it.
I have added support for Google Appengine dev_appserver, Django and Pyramid. The API has changed dramatically. https://github.com/peterhudec/testliveserver
Wheels allow you to package your project as a binary distribution. A major benefit of this is installation speed which can improve things like testing - Travis CI is a good example of this and can be quite slow to build a python environment due to the package installation. As of Pip 1.4 wheels are also the default distribution method so I would guess the PyPA folks are moving that direction to be the de facto standard.
I mentioned this on twitter: * Why a wheel of shame? Why not a wheel of heroes? * You shouldn't be publicly shaming developers for not having the time to implement a nearly undocumented and almost unused format. * Where on the site does it explain how to get your project out of the red? I've asked that documentation of wheel be expanded. Furthermore, why the need to shame and attack people who maintain seriously challenging projects for something as trivial as this? As a developer working on open source projects, this attitude seems unfair and unpleasant. It's certainly not good for anyone's enthusiasm of wheel. FWIW, I'm all for wheel and I like the concept of this site, I just think it would have more impact if tweaked to have a more positive focus and linked to meaningful documentation.
Python is a language. It is also a program. The python program takes a text file with python code and runs it in the python interpreter. This requires, of course, an operating system to provide all the things that python needs just to get started.
mrtristan - It's not popular yet. FWIW, documentation on wheel is woefully sparse, justification is obfuscated as a PEP (except for in-forum posts like ghickman's), and adoption is very slow.
FWIW, I'm all for wheel. :D
does wheel work on windows?
That's an interesting point. Both will resume the coroutine when something is ready for it to process, but as I see it, they're fundamentally different semantics. Tulip's `yield from future` is like making a function call: the coroutine is specifying what should happen next before it can continue. My `yield receive` is more like defining a function: control passes back to the caller, and the coroutine is ready to be called (sent a value) again. It doesn't know anything about what will happen before it resumes, or even whether it will be resumed.
I believe the name is just a reference to the Wall of Shame/Wall of Superpowers. 
I dont know what that is
[Wall of Superpowers](https://python3wos.appspot.com/)
&gt; Green packages offer generic wheels, orange packages only have platform or architecture-specific releases Wait, don't wheels exist largely as a way to make platform or architecture specific binary distributions? That's what it's currently hard to do with Python packaging. So why is that the orange, half-way-good state?
Yes
I've been watching his videos for a little while now, great stuff. He also responds to questions in a timely manor. 
PEPs accepted.
It's sometimes necessary to make platform-specific releases and often desirable to make platform-independent releases. It's a positive feature that wheel both allows platform-independent and platform-specific releases to be built in a very similar way - so that you can use the same tool for all your distribution needs. (Disclaimer: I know nothing much about wheel except for what I've learned reading this page...)
Agreed. Basically, every line of your code needs to be exception-safe if you're going to use this technique. Which, mind you, is a very good property to aspire to, and not outrageously hard in Python.
Python 3: creating confusion since 2008
I did a lot of learning by working on Project Euler as well. I consider reaching level 2 on Project Euler as one of my great accomplishments in life. 
The Wall of Superpowers (https://python3wos.appspot.com/) used to be called Wall of Shame. A lot of people didn't like it, people ranted about it, but almost no one spoke up publicly, including me. I wish I had, and kick myself for not standing up way back when. I would love to see the 'Wheel of Shame' site focus on advocacy instead of malignancy.
hahahah love this!!!!
Nice project, looks very convenient to use!
Good luck getting the scientific python stack to release platform-independent wheels, especially when you need to support different versions of numpy. Plus, this does not encourage me to use the wheel format...seriously it's not like 2/3 compatibility, this is a convenience for packaging and one that can't even really be used cross platform, since PyPI won't let you upload binaries for non-Windows platforms. conda was really impressive at PyData - I wouldn't be surprised if it ended up as the package manager of choice for scientific python.
nice, whither joins? can you move over to SQLAlchemy later if storage and performance demands require it?
Looks cool Def gonna try it
Why is distribute still on there? It's a dead package. Use setuptools.
I seem to be inexorably drifting towards tornado these days
I don't know why you insist on pushing this false dichotomy, most of the submissions to this subreddit are neither of those things. 
Looks pretty neat SqlSoup. From the author of SQLAlchemy (Not an ORM) link: http://readthedocs.org/docs/sqlsoup EDIT: Correct library name.
In some cases, it's nice to have a binary that acts like any other Unix program, in which case you can strip the `.py` and just do `./file` I agree, though, that if you keep the `.py` extension I don't really see a point to having the shebang there at all.
I like it because of the hideous naked mole rat mascot. 
That's how you know it's good.
*Highly* suggest installing [ipython notebook](http://ipython.org/notebook.html) to get some familiarity and play around. Getting comfortable with [pip](https://pypi.python.org/pypi/pip), [virtualenv](https://pypi.python.org/pypi/virtualenv) and [virtualenvwrapper](http://virtualenvwrapper.readthedocs.org/en/latest/) is also a great idea. Another vote for [SublimeText2](http://www.sublimetext.com/2) as well.
Wheels don't have to be platform independent, however they are currently tied to Windows/OS X due to the complexity of creating them for various Linux distros. Thanks for pointing out conda, I'd not heard of that one. What do you think it provides over wheel as a packaging format or pip as an installation method?
Is Sublime text free? I'm seeing on the website that it's just a trial version. 
I've been using 2.7.5 and it works for me.
How big is the application? Do you need an ORM? Do you need a database migration tool? Do you need sessions? Do you need caching? Etc etc. I've enjoyed using Flask recently. CherryPy has supported Python 3 for longer, though. Flask was an interesting choice for me because you can get something simple working very quickly, then build features using flask extensions. This tutorial: http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world is a great place to start. One thing I can recommend right away is uWSGI in Emperor mode with Nginx. Great way to host WSGI apps with support for static files and SSL, and it's very fast. 
It just pops up and says "purchase me Y/N" every.. 100 saves? Slightly annoying yes but its such a good editor you forget about it 2 seconds later. 
I find it much easier only having to press backspace once instead of 2-4 times.
It seems this project has hit something of a nerve in the community and we really should have taken a second to think about the name before ploughing on with it's deployment. Hindsight is a wonderful thing. Aside from the poor naming, the responses here have shown how little the community knows about the wheel format (something neither of us realised). We've already had a list of good suggestions from [jezdez on GitHub](https://github.com/meshy/wheelofshame/issues/3) about how this site (once renamed) could help that situation. However we'd love to hear of any particular areas you'd be interested in knowing about?
Does this run on Python 3? Pip installed it, but I get a "No module named 'urlparse'" message when I try to import it. 
How is migration accomplished?
If you would not otherwise be using a database anywhere else on the site, and there are only a few bits of data to maintain, then it would make sense for you to keep things simple and put everything in the template. But databases are very quick. Your database will be a fraction of the processor time and disk i/o that building the template will use. If you're already using a database, then dropping another little bit of data into a template is not going to make any difference. If speed (and scalability) are your primary concerns, then you will get far greater benefits from tuning your servers disk caching, correctly configuring database caching and caching generated pages in something like memcache (or using static file generation) than worrying about the microseconds that it takes to build a template. 
For me the cool part of this post is all about the one-liner at the very end. If you use TCP sockets, you are never sure that you have recieved a complete message until there is a terminal value indicating the message is complete. If you are just reading from a static file, of course you can use read() but when the contents of a socket are continuously being added, you need a sentinel value to separate/end the bytes
Very good explanation, thanks!
Oh for fucks sake... I hate this, but I must upvote.
absolute bollocks
I suppose it depends on the type of python program you are debugging. 15 years ago when writing C code I would often write something with complex internal state. It was hard to "dump" that state without writing special code, if you have a python list, dict and set, you can just do "print list,dict,set". If you have a C data structure, you need to write some dumping code to display it -- but it's easier in the debugger. Nowadays, my programs mostly display web pages. If I get into an error state to restart the program and get to the invalid state all it takes is a Reload in the browser. That's if I don't generate an exception -- if an uncaught exception happens I see all the debug info I'd see with bt / info locals in gdb. 95% of the time it's obvious where the error is. Having said that, pycharm has lovely debugger integration which I might try one day.
First, I had heard that wheels weren't available for OS X either. Second, in terms of conda, it makes it much easier to install the scientific python stack. Someone emailed me the other day having had trouble installing pandas for weeks (I'm guessing it was because of mismatched numpy versions with pandas) and conda resolved it immediately. I don't really have time to look through the whole wheel spec, but it doesn't look like there's any set way to, for example, specify the compiler used to build the package or the numpy version it needs to be used with.
that's not really possible for C extensions...
The *pun* is too good to not have a **w**h**a**e**ll** of shame ;)
I don't care about wheel at all, but... ... as a colorblind, the set of colors that were chosen are really bad :(
It's not handled within the library, as far as I can tell. But there are tools for that if you use sqlalchemy directly. 
Item #1 is complete bullshit. You can absolutely get very specific information from a debugger. That's the reason to use one. I personally dislike debuggers and avoid using them, but I don't advise others to avoid them. I'll use one if needed, but such instances are few and far between. I prefer unit tests that are quickly and easily repeatable.
I'm going to answer with: It depends. I haven't used a debugger since my C days many many years ago. It isn't something that is good or bad, it just is. I tend to make complex things out of many simple things so I don't really need the full gambit of information that a debugger would provide. As to the actual advice I think they are wrong as there isn't one best way to do anything. The best way depends on the person and their style. I would encourage people to at least look at debuggers and see if it helps them. Just because I find using prints and logs more useful doesn't mean someone else will.
A debugger is not like a full-body scan. It's explorative surgery. I doubt the person that wrote this has any idea of what a debugger is. The clear analogy to a full-body scan would be logging, static analysis tools, and compiler warnings. 2 Is a nice way to have horrible code, and waste time. When debuggers provide an excellent way to monitor variable changes and conditions as they occur, without altering your code. 3 Meh. Mostly right, but in some cases impossible.
http://www.reddit.com/r/Python/comments/1drv59/getting_started_with_automated_testing/c9tfxgd #Debugging
It still uses completely standard databases behind the scenes. This is just a pass-through interface, so you could move to SQLAlchemy, python.sqlite3 or any other conceivable interface. You probably *shouldn't* use python.sqlite3 though, since both this and SQLAlchemy exist. 
Thanks! * https://pypi.python.org/pypi/dataset/ * https://github.com/pudo/dataset
No suggestion other than I would recommend a laptop so you can create an environment for coding in Python. I recommend getting your hands dirty and actually code with a physical keyboard. Get an ebook like Learn Python. Plenty of programming books can be found [here](http://www.it-ebooks.info/) using title search, top right.
Different debugging strategies apply for different problems. In many cases, you can get by using only print statements. In other cases, using a debugger helps more.
The writer of that book/tutorial is very opiniated - it's better if you use your own judgement. I rather use a debugger when I already have some code written and have some idea where it might be going wrong. Sometimes when writing from scratch, I add some prints here and there until I know it is working properly and then delete all prints...this is something that should be done properly by logging.
It looks like it's built on top of SQLAlchemy, so you could probably grab the SQLA engine it's using, and use both interfaces in parallel. 
I'm curious what the performance hit is for this kind of ease of use. It's really awesome that we can interact with structured data like this, but what am I trading for it?
Stop focusing on spreading a negative message. What's the point of pissing people off?
Here is a python implementation of GG: https://github.com/yhat/ggplot/
I have a question. How is the dog getting drawn on the terminal? From reading the code, the script reads 'doge/static/doge.txt' as the 'picture'; however I'm a little confused about the contents of that text file. Can someone clarify the inner workings? Thanks! 
Totally agree with you. Who is up voting these ridiculous responses?
Context matters. In this case the context of the advice "is to teach you the three most essential skills that a beginning programmer needs to know: reading and writing, attention to detail, and spotting differences". Presumably those tips are therefore given for the audience completing the given tasks and everyone else (i.e. all that will offer their opinion on here) would be the "smarties" that should "Go learn Lisp". http://learnpythonthehardway.org/book/intro.html Short version: Do what the book says when you're learning. Do what you like when you're learned.
Not sure you went far enough, but yes, complete and utter scrotal glands.
Upvote this because Python isn't afraid of such silly things.
Someone want to help me implement word boundaries in the regex?
If it's on top of sqlite, all datatypes are effectively strings, anyway.
Why RFC822 and not ISO8601 for datetimes? Just curious...
&gt; Compatibility: Being built on top of SQLAlchemy, dataset works with all major databases, such as SQLite, PostgreSQL and MySQL. Even though the example is in SQLite it does support PostgreSQL and MySQL, well according to the docs.
If it's built on top of SQLAlchemy and SQLAlchemy supports Oracle will this work on Oracle ? Seems like from the docs it's sqlite, postgres and mysql only.
However with Mongo you can't easily migrate to a traditional RDBMS, while with dataset you are already using an RDBMS so you can use regular queries (Or regular SQLAlchemy) whenever you want.
1. it's not quite possible yet, sorry 2. well, as with anything - however you like, it's your problem. let me clarify - for simple values cffi will help you. for more complex ones you can use C structs and arrays and cffi will help you there too, so you can manipulate them from python. 3. Pleasure!
Great job, this is a nice piece of work! One feature I would love would be a party mode, where it would work sort of like touch tunes. Instead of playing songs from your device, you can pick songs to add to the master players queue but only the master/admin can delete/skip songs. Also, Agree with others who would like to change how the back button is currently implemented. Just my 2 pennies... keep up the great work!
&gt; The `urlparse` module is renamed to `urllib.parse` in Python 3 Which seems to imply it doesn't. Additionally, see [this GitHub issue](https://github.com/pudo/dataset/issues/32)
Wow, this would make things more accurate in many cases.
There should be a question mark on the post title.
I'm surprised (well half-surprised), it's such an inept analogy. The pro-debugger argument is of course that a debugger can show the changes of variables while stepping through code which can be of great help to novices. There is a world of difference of course between gdb, pydb, and debugging featured in pycharm, eclipse or visual studio. Not saying the later are more powerful (clearly they aren't) but simpler for someone new to programming.
Dear Reddit, Yesterday I posted a link to the "Python Wheel of Shame" (http://www.reddit.com/r/Python/comments/1qgs8w/python_wheel_of_shame/). Given the feedback I recieved there, I have changed the name of the website, added more useful information, and re-deployed the service under a new domain. The old site was neither constructive nor as encouraging as I had intended, and I hope the new one delivers the useful service to the community that the old one was intended to provide. The new site is deployed at http://pythonwheels.com/ Thanks for the feedback.
Automatic schema enabled by default?? o_O Who wants that? table.insert(dict(namme='John Doe', age=37)) ... oups ... *crrr*, *crrr* (creating a new column over my 1gb table) ... :'( 
I have taken the site down and moved it. For more information, see http://www.reddit.com/r/Python/comments/1qj3il/python_wheels/
Forgive my ignorance but why should one not use the aforementioned python lib?
+1 for Pythonista, it has a large amount of docs that ship with the app so you don't need to be online. Short of that, grab an ebook and switch between the app and the book, or a physical book and read it along side.
I think you meant to comment on http://www.reddit.com/r/Python/comments/1qgnte/dataset_databases_for_lazy_people/cdcvm57 
I am fairly new to python, so feel free to correct this. I was testing how performance behaves with different number of writers, so i wrote this so I could easily vary it.
How did you request for the 360 first downloaded packages?
Much Better than the shaming, but I have a suggestion for the docs - make them task based. * Question: Are you a... * new python user (go to example 1) * existing python user that doesn't understand how this format is related to the current packaging mess (go to example 2) *example 1* 1. use python 3.X??? no idea 2. create a setup.py (or are we using setup.cfg now????) 3. make sure setuptools/distutils/distutils2/distribute/some_other_thing is / is not currently installed on your system because you followed some other packing howto some years ago 4. what is a manifest file - I have one of those from my old sdist failures 5. python setup.py bdist_wheel 6. finished? what does your user need to have installed to make this work? *example 2* Some PEP finally united all the other failed PEPS and decided something something so that build and dist is now declarative or something in a .cfg file. So since Python $version you don't need to install some third party thing to be able to make sensible binary and source distributions. But hey, because you are an experienced python developer, you might be interested in knowing how this relates to native code. * how to convert a pure python package to wheel * how to convert a setup.py that uses setuptools * how to convert a setup.py that uses distutils etc. 
I did an XML RPC call to `top_packages()` on http://pypi.python.org/pypi which gives a list of all packages ordered by number of downloads, and then sliced the first 360. (I hope) the code is pretty easy to follow. Have a look: https://github.com/meshy/pythonwheels/blob/master/utils.py#L68-L71 :)
Thanks. I'll be trying to improve the docs, and I'll bear that in mind.
Yes there is... not as mature as meteor but has some potential: http://skariel.org/webalchemy/ watch the demo here: https://vimeo.com/74150054 
Thanks. I shan't have been so lazy as not to look for it myself. 
Interestingly, I can't find cherrypy which has a larger number of downloads that some other packages you have listed.
[Tornado](http://www.tornadoweb.org/en/stable/) is probably the most popular. Regarding Meteor, * The entire mongo db is only accessible on the client if you allow it. * Node is being picked up by big corporations like [Microsoft, Yahoo](https://github.com/joyent/node/wiki/Projects,-Applications,-and-Companies-Using-Node), [Groupon](https://engineering.groupon.com/2013/node-js/geekon-i-tier/). 
So what actually is it that you like about Meteor that you want to see in a Python framework? If you just want a microframework, check out Tornado and Flask. As for this comment: &gt; One simple page that you could write in LAMP, would end up approaching a few megabytes even with all the optimizations in place, the browser would crash at times due to the heavy Javascript. If this is too heavy for you, you'll probably get much better returns from switching from Apache to nginx, and rethinking your data storage requirements than from switching frameworks. If you're loading so much js as to *crash your browser*, then you have a js problem, not a framework / server side architecture problem.
There was a framework built on top of twisted called "nevow". It let you define live pages and call code in the page from the server for example. Had some success with it a few years (5+) ago, but I wouldn't like to go back since using meteor - its moved on a long way.
Good thing MongoDB is production ready. 
[img2xterm is a program that can display bitmap images on 256-colour terminals by converting them into Unicode block characters and xterm compatible control sequences. Based on software by lachs0r and Xebec for creating colourful cowfiles, img2xterm improves on the colour selection and block printing logic, providing cleaner output on terminals with nice bitmap fonts.](https://github.com/rossy2401/img2xterm)
I used Pycharm for Django... Super heavy, slow IDE. I use sublime now.
I second this. It's always annoying to sift through basics covered in some docs. What's even worse, I tend to "over-skim", passing over sections I *should* have read. Having a concise summary with the differences is so much more useful!
Why the hell is this named as dataset instead of nakedmolerat?
I am actually slightly freaked out by this because I had no idea my package was among the top most 360 downloaded packages. I will fix. Edit: If that list is in order, it's in the top 100. Holy cow.
done (but not showing up yet)
&gt;Wheels are the new standard of python distribution and are intended to replace eggs. I've been trying to figure out how to get something in PyPi forever. Is it easy to become registered wheel developer? How does this compare to anaconda, which I believe has a package manager too?
IMHO you will not achieve this if app does not use native widgets. In this case only main window (and pupups/dialogs) are "real" windows that you can Find/Enumerate/... with WinAPI, and everything else is painted "by hand", i.e. using custom GUI toolkit, not standard Windows libraries. Some time ago I was developing library for internal use to automate data input to/from other third-party applications. It works with Vanilla WinAPI or MFC applications, but not, for example, Qt or Java (depending on toolkit it uses I believe, it's native one and other custom-draw, right?). Well.. I was thinking about Qt case... what if install hook and then in app-space, calling QCoreApplication::instance() to get QApplication and then with help of QApplication::allWidgets()... 
Thanks. As an interesting note, I just saw https://pypi.python.org/pypi/d2to1 Which is an iconic representation of the clusterfuck hack tower of python packaging you need to clearly document your path through....
I get it, it returns the cumulated downloads. I was looking at the monthly numbers. Fair enough, since cherrypy started only recently uploading to PyPi it has low numbers.
Python requests by Kenneth Reitz https://github.com/kennethreitz/requests
Ahh, that explains a lot. I hadn't realized cherrypy hasn't been on PyPI for very long.
Congratulations!
This is /r/python not /r/programminghumor, and those two sentences have nothing to do with one another. 
Check out [elpy](https://github.com/jorgenschaefer/elpy); it's a better version of the hacked together emacs environment i'd been working on.
At work, they gave me a brand new machine. I'll give it a try right tomorrow morning. Thanks for the advice.
I was able to see the address bar in UISpy (part of the Windows SDK, a free download if you don't have it already, OP) and even able to highlight it. However, that's as far as my Windows UI knowledge goes, I don't know what to do with that information :(
[**@gvanrossum**](https://twitter.com/gvanrossum): &gt;[2013-11-13 19:19:16 UTC](https://twitter.com/gvanrossum/status/400704432385449984) &gt;New Dropbox announcement: [*blog.dropbox.com*](https://blog.dropbox.com/2013/11/this-isnt-business-as-usual/) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/1qk05c%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://www.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
I'm intrigued: which package is it?
Really really great. Lots of technical detail on the kickstarter page, and after looking into the author's biography it looks legitimate. Supported!
Definitely legit, the guy who started it is a good friend of mine, and is crazy smart. Can't wait to play with this board, very cool idea :) 
Thanks for the pledge! Everything on the Kickstarter page has been implemented and is working as advertised. Can't wait to send you out a board!
Very cool - definitely preferable to running a board in python via serial bridge. Backed.
http://le.reddit.com/r/Python/comments/1gsxcb/python_graphingchart_toolslibraries/
* https://github.com/wrobstory/vincent (Pandas + Vega + D3.js) * https://github.com/wrobstory/bearcart (Pandas + Jinja2 + Ricksha.js)
Because there's almost always a reason to go higher up the stack. Think about it in terms of abstraction: do you really need to mess around with the raw, fundamental components of a system, or can you afford to sacrifice power for simplicity? I'd argue that most casual users of python.sqlite3 could move to dataset or another, higher sqlite library without losing anything. They're only using the raw tools because that's all they know. I myself was in this category until just now.
I liked the shame. :-( 
http://docs.python.org/3/distutils/packageindex.html
I don't want to spoil the fun, but download counts on PyPI seem to be dramatically exaggerated for many packages (see [this SO post](http://stackoverflow.com/questions/9648015/pypi-download-counts-seem-unrealistic)). Kudos for getting in the top 360, though.
Cool project man, best of luck with the kickstarter. What about a C api , is it possible ? an ability to reuse large c frameworks like the arduino or mbed would be very usefull , and help make this useful for commercial projects. And regarding licensing ,my 0.02cents : choose a license that lets this software used commercially. The LGPL is not so good with this regards, because it forces you to release object file, which isn't good for ip protection for commercial purposes. 
The design of your blog makes it absolutely unreadable. Why the huge heading font? Why do I have to scroll 17 times just to see the rest of the article? Too bad the design scares me away, because the content looks awesome.
Just what I have been waiting for.
Nature Documentary Narrator Voice, the camera pans slowly over the vast field of python "And now begins the slow and epic migration of the python community to a new technology standard, not yet finished with the last epic migration from 2.x to 3.x the tribe seems undaunted at the prospect of making two migrations at once -- they know, it seems, that they have six years to get there, and move as a gracefully un-coordinated mass, slowly, forward." A red hawk caws to the image of an eagle flying across the screen. Brought to you by the Mutual of Omaha.
Thanks! There is a C api with Micro Python. It's not the same as the official CPython api (mainly because I use garbage collection in MP, not reference counting), so you can't just copy over large chunks of Python C modules. But, you can very easily reuse C code from mbed or arduino libraries, and give it Micro Python bindings. Since Micro Python will be open source, everyone will have access to be able to write their own C functions for whatever they need. Thanks for the tip with licensing. I think it would benefit Micro Python if it could be used commercially, but I'll have to read into the details of the licenses that allow this.
Which version of python3? are they going to support py3, or 3.3 first, as its the first 3.x release where people started releasing with (flask, django, etc.) 
Please import packages at the top of your code. If you ever want to work as a python programmer or contribute code to an open source project I'd also suggest reading pep8. 
As a red/green colorblind person, this website is rather disorienting.
https://code.google.com/p/python-on-a-chip/ Somewhat similar on the software specs side, though lacking one click install solution etc.
More of an experiment, but a couple years ago I made a cherrypy like hybrid with Twisted. https://github.com/devdave/txWeb#basic-usage
Site looked nice on my tablet...
well, you are right and wrong. Right: it is more reliable to get a file on a FS then a call to q DB that stores exactly the same information on a file, on a server, you speak to with an unreliable connection.. Less point of failures, it should be the way. Wrong: in both case at one point there will be one and more cache (at the application level, OS level, protocol....).The cost of fetching the information will tend to be marginal, so you may not care, unless you have a unified interface for administration that relies on a DB. The only important thing is whatever your choice is always bring a nice balanced argumentation to defend your point of view, and if discarded, draw the conclusions ;) I personnaly think that the code that involves the less complexity overall is more important than small code.
Really looking forward to this, pledging soon! Great work.
This is the first kickstarter I can truly get behind. Pledged and excited!
Use [Splinter](http://splinter.cobrateam.info/)
Micro Python's Flying Circuits?
I would say this is more of a learning system than something built to actually solve problems. It's a fun programming toy, that does things in a way I haven't seen done before - a beginner's raspberry pi. Also, why do this when p14p exists? From p14p's page you linked to: &gt;The PyMite VM DOES NOT HAVE: A ready-to-go solution for the beginner (you need to know C and how to work with microcontrollers) Whereas this is super simple to get up and running and play with. You get the whole integrated experience.
So excited for this! I'm very impressed
This is awesome
Hi ogmios, I know you wrote this comment about a month ago - but I just now noticed it. Since this time isort has added project level configuration which could fix this problem for you, if not let me know or report an issue on github and I'll fix it. Thanks! Timothy
It doesn't currently but I would be more than happy to implement that! Just add an issue on github specifying how you would like it to appear. Thanks! Timothy
This is so cool. I really want to think of cool things to do with it.
good job, some example scripts would be useful!
p14p / PyMIte does not have a compiler. You need to compile Python code on your PC then upload the byte code to the chip, where it will run on the PyMite VM. Micro Python includes a complete parser and compiler that runs on the chip. It supports Python 3.3 (compared with 2.6 of PyMite). Micro Python also has the option to compile your Python functions to native machine code, to improve speed. You have a C API with Micro Python so you can, if you like, write C code for some parts of the application, and make bindings to Micro Python so it can be used as the high-level control.
Yes, PyMite is just the Python VM, not a complete solution. And, as pointed out above, it doesn't include a compiler.
Thank you!
Can I ask, what are you skeptical about? Micro Python is not a panacea, but I think it has quite some scope.
Correct, my bad
Does it mean numpy works fine on pypy? How much compatible is it? Can I get scipy on pypy now? :D
I target 2.7. When libraries support 3, I'll start to care.
https://python3wos.appspot.com/ That's 270 out of 400 or 67.5%. But go on, stay lazy.
Which ones? Most of the major ones do at this point.
What you consider major is different from what I consider major. scikit-learn, gevent, scikit-image, nltk, mechanize, and pymc. Also, the division change is going to fuck a lot of my stuff, which isn't going to be shifted.
Is there a feature comparison with the already available [PyMCU](http://www.pymcu.com) board ? Apart from the fact than Micro Python is OpenMaterial are there other main differences ?
Can it be simplified further? (of course, without removing the print statements).
numpy support is still experimental, it's not finished yet.
Well, [these guys](http://www.telit.com/en/products/gsm-gprs.php?p_id=12&amp;p_ac=show&amp;p=2) sell GSM/GPRS modules with Python onboard, so apparently there is a market for that kind of thing.
And, more importantly, [swapy](https://code.google.com/p/swapy/), which is basically a mix between UISpy and a PyWinAuto code generator.
I would call it "5 Random Facts" not "Top 5 Facts." You don't need the str(number) call. The %s formatting (or %d because number an int) is enough.
I really wish I had money to donate to this project. Like a lot of money. 
Funny thing is that I used Idle's debugger a lot when I started to learn python, and it really help me to grasp things like object references and scope rules. Now that I use python at work, I hardly use any debugger, except the built-in flask debugger (which is very nice, by the way), when an except blows in my face. Most of the time I just look at the logs and try bits of code in the shell.
What does it mean to target 2.7.3, as opposed to 2.7.6?
My advice would be to use AutoIT for the win32GUI automation and tie it together with your python app using xmlrpc. Also depending on what you are doing Selenium might be an option.
Thanks for your valuable feedback regarding the license. I am open to suggestions on which license to use. I will need to do some proper research on this to see what is best, but perhaps the community can help me make this decision? What would you suggest and why? It was important to support Python 3.3, since that is the future! Glad you also agree. I can't decisively say that Micro Python could/couldn't control a 3 axis CNC machine.... But my guess would be that it could, so long as you use something like an A3977 as the motor driver to control the current. I can tell you though about the serial USB support. Micro Python implements a composite USB device. Thus, when you plug it in to your PC, it acts as *both* a mass storage device *and* a USB serial device at the same time. Under Linux, I run "picocom /dev/ttyACM0" to get a Python REPL, and at the same time can mount/umount the device /dev/sdb1 (and also /dev/sdb2 when the Micro SD card is inserted). In your own application, you can have serial comms and storage. There is also a boot option to turn one or the other off, or replace them with mouse/keyboard HID descriptors. So yes, it supports 2 way communications (that is how the REPL works). And I don't see any problem with using this to stream G-Code. At the very least, the Micro Python board gives you the powerful STM32F405 chip running at 168MHz which you can program with your own C code if you need every clock cycle.
Could you use Selenium Webdriver? Firefox has native support, and there's a binary floating around out there that adds it for Chrome.
IIRC, .3 -&gt; .6 are all just bugfix releases. So they'd be targeting a specific version of functionality of python, the latest of which on the 2 branch is 2.7.3.
I backed this because I like Python and have been wanting to get into electronics as a hobby. I will probably build something that will jerk me off so I can claim that I'm having sex with Python. I like Python that much.
So, what's your question? Are you expecting us to write a whole thing for you?
well, I'm trying it myself, but im not sure if im doing it right i made a list from the text file, now im trying to multiply the things in [] brackets x times (x is the number after repeat) and then remove all occurencies of string 'repeat' '[' ']' and the numbers, but im not sure if this is the right way
Can't wait for Pypy3 and Numpypy!
I don't have any experience with logo, but the to..end block looks like a function definition to me, and 'repeat x' sounds like a for loop. Writing a parser for a programming language, even such a simple as LOGO, is a rather complex task. I think you should parse this file line-by-line, making a list out of it is unnecessary. You can handle most calls using getattr on turtle, since a lot of it's api is logo-derived. For example, handling a 'fd 100' logo command would look like: logo = 'fd 100' getattr(turtle, logo.split()[0])(int(logo.split()[1])) This will call turtle.fd(100). 
The str(number) is for &lt;-- 1. &lt;-- fact 1 2. &lt;-- fact 2
I donated $25 for you. It's not a lot and there's no way to do it in your name but, hey, you take what you can get. Edit: And I got to choose the project. Congratulations, you supported the STM effort. 
the final output should look like this http://preview.sita.sk/pythonlogo.png
Curious to see if the innovations your working on here are more broadly applicable. For instance, would Micro Python be a good choice to run on a Linux server where you're processing datasets too big to fit in memory in CPython?
https://github.com/scikit-learn/scikit-learn --- Specifically "scikit-learn is tested to work under Python 2.6+ and Python 3.3+ (using the same codebase thanks to an embedded copy of six)." http://scikit-image.org/docs/dev/install.html Although not perfect, I have used NLTK in Python 3 using http://nltk.org/nltk3-alpha/ I've been running PyMC on Python 3.3 with no problems after making some small changes locally. It appears that there is a pull request now to support both 2.7 and 3.3. As for mechanize and gevent I'm not sure. I haven't used either of those libraries
Stick with one font, Guido.
Don't anger him! He'll change PEP8 to make Comic Sans the standard editor font.
String manipulation is one of the most basic tasks in python, it's all in the [docs](http://docs.python.org/3/library/stdtypes.html#text-sequence-type-str).
Installed it and tried it; wonderful little tool for simplifying complex setups. That being said, holy hell that's a lot of dependencies.
Can use a context manager for opening the file: with open(to_file, 'w') as out_file: # dostuff Also, no need to str(): print "%d). %s " % (number, data) 
http://www.reddit.com/r/Python/comments/1qc5x9/guido_van_rossum_the_history_of_python_the_story/
Thank you! STM would have been my choice as well :D! 
I would like to say though if you accepted Bitcoin for donations I do have some of that to spare.
Paraphrasing: &gt; Why reduce() must die: &gt; &gt; Because I don't understand it.
Yet more reason why Haskell is my new favorite language.
Splinter doesn't seem to be compatible with Python 3 unfortunately. (My bad - I didn't specify this in the post.) Even so, it looks like starting up a Spinter web driver will pull up a *new* browser window from which you can grab information - rather than looking inside an existing window. I wonder why it is so hard to look at an existing window compared to a new one?
Unfortunately Selenium isn't an option - see my reply to LightBright32 above.
[PDF Link](https://www.dropbox.com/s/krs1d1nnuv7bofs/Py2v3Hackers2013.pdf)
[PDF Link](https://www.dropbox.com/s/krs1d1nnuv7bofs/Py2v3Hackers2013.pdf) in case you do not have PPT or just want to see a PDF format.
Correction: &gt; Because I don't instantly understand what it does in each particular case.
Just because you posted that I put in $30 too for bendertotes. That is $55 donated from that comment.
Agree 100%. You aren't even sacrificing power, because in all of those toolkits there's always a way to get to the underlying database. And unlike high-level languages, you aren't even sacrificing efficiency. Big win, little downside.
I originally wanted to make it even smaller than it is, basically a board just large enough to fit the MCU. But, to make it hacker friendly with 0.1 inch spacing, and also break out as many pins as possible, I opted for the current size and layout. I thought about having 2 options for the Kickstarter: a very small one, and a larger one with more features. But that's twice as much work, and means I need double the funds to do a small manufacturing run of 2 different boards. One could easily remove the sd card and accelerometer and still have a funtioning board, and then change the 0.1 inch pinout for something smaller. That would be pretty cool. Maybe you, or someone, should do a Kickstarter for it? :)
I agree, but it isn't terrible to have to write: table.insert(dict(namme='John Doe', age=37), ensure=False) Still, I noted that when I read the article - when do I EVER want to create a table column automatically? (OK, I can imagine some applications but they're definitely the exception...)
Yes, I thought about this a lot. Micro Python currently runs well on a 64-bit x86-64 machine (actually a bit faster than CPython). But my efforts have focused on getting it working well on the STM32F405 MCU. My hope with open sourcing it is that others might be interested in, for example, making it fully functional on a PC.
This was posted here before http://www.reddit.com/r/Python/comments/1pyn6i/sqlite_working_with_large_data_sets_in_python/
so it's not going away? even in python 2.7 it gives a warning that it will be deprecated.
99.9% of the time I'm with Guido, but I see no reason it *shouldn't* be in the standard library. I never ever use it, but first-glance confusion is not a valid reason for exclusion; if that were the case then he shouldn't even be considering a multi-line lambda.
No, it isn't. format() is preferred, but I get the feeling we'll see a lot of % usage for quite a while. I know I sure as hell prefer it.
I already knew most of this stuff, but finding out about [mypy](http://mypy-lang.org/) was cool.
It is still in the stdlib, just not in the builtins.
Sorry, I meant the built-ins. It should be kept alongside map, in my humble opinion. Whether that means relegating map exclusively to functools or putting reduce back into the built-ins doesn't particularly matter to me, but it just feels really weird to seperate them.
Me? Absolutely never. Then again, I never use map either because comprehensions exist.
Good question. I have no idea, but I'll check.
Wait, what? I thought % was completely removed in Python 3
There's now an FAQ comparing this to previous micro python implementations on the Kickstarter page: http://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers#project_faq_74091
&gt; Bytes are ints, e.g. `b'abc'[0] == 97` This is supposed to be a good thing? I've never found it to be anything other than a repeated pain in the ass surprise. It's a type that behaves almost exactly like a str in all its methods except if you index it you randomly get back something completely different. Screws up comparisons more than anything else. Most of the "bytes" I deal with aren't random binary crap where this *might* be appreciated; it's pseudo-ascii that can't be reliably or safely decoded in any way but still looks mostly like text. But try to compare one of the characters in the most natural way: thing[0] == b"a" and thing[1] = b"\x03": And it explodes. This is what `ord()` is supposed to be. Which still works on bytes for some reason, oddly enough, though it no longer has any nice-looking inverse. Maybe I'm misunderstanding.
LOGO is a full-fledged language (like Python) - what you're essentially trying to do here is write a LOGO interpreter. This will require full parsing if you want to handle all valid LOGO programs - just trying string manipulation won't be enough. In short, you may have bitten off a larger problem than you intended. If you're still interested, [pyparsing](http://pyparsing.wikispaces.com/) is a good python parsing library.
`my_obj = type('object2', (object,), {})()`
In a huge code base, I used reduce() only once, on a function that performs a crc16. It was the fastest option (of all pure python code alternatives). The same one-liner makes use of map() and operator.add. I feel dirty :-P
I did...
Go sit in the corner. :)
https://en.wikipedia.org/wiki/Web_scraping https://en.wikipedia.org/wiki/Robots.txt_protocol * http://docs.python.org/2/library/robotparser.html https://en.wikipedia.org/wiki/Comparison_of_HTML_parsers * http://lxml.de/index.html#documentation (libxml2 + libxslt) * http://www.crummy.com/software/BeautifulSoup/bs4/doc/ * http://html5lib.readthedocs.org/en/latest/ * http://pythonhosted.org/pyquery/ * http://stackoverflow.com/questions/8692/how-to-use-xpath-in-python https://en.wikipedia.org/wiki/Selenium_%28software%29 * https://en.wikipedia.org/wiki/Selenium_%28software%29#Selenium_WebDriver * http://www.seleniumhq.org/projects/ide/ * http://stackoverflow.com/questions/18094238/what-is-the-page-object-pattern-in-selenium-webdriver http://casperjs.org/ * http://phantomjs.org/ * https://github.com/ariya/phantomjs/wiki/Headless-Testing * https://github.com/detro/ghostdriver * http://slimerjs.org/ http://doc.scrapy.org/ (Twisted + lxml) * *http://doc.scrapy.org/en/0.20/topics/architecture.html* * http://doc.scrapy.org/en/0.20/topics/firefox.html * http://doc.scrapy.org/en/0.20/topics/firebug.html http://docs.python-guide.org/en/latest/scenarios/scrape/ (requests + lxml) http://redd.it/1c6866