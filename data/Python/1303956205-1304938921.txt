Not sure why libpng would get a downvote: [Sourceforge Link](http://libpng.sourceforge.net/index.html/) 
For the "no more than one character different" partial match you can just call your exact match function on split pieces of your input string. Examples: Matching for `"bananaphone"`... Assume that `em(x)` is your "find an exact match on input string x" function. search on em("b") and em("nanaphone") em("ba") and em("anaphone") em("ban") and em("naphone") em("bana") and em("aphone") etc. So assuming your em function returns the integer starting position of the search string... your partial match function returns true if any of its pairs have return positions that are off by one. Example input: is `"banan1phone"` a partial match for `"ring ring ring ring ring bananaphone!"` pair matched: `em("banan")` returns 25 for position 25, `em("phone")` returns 31 for position 31. 31 - 25 - len("banan") = 1 So you have a pair of exact matches separated by exactly one non-matching character, which is what we needed to declare a partial match. *You'll need to be able to deal with cases where the first or last character is the one that's changed, i.e. `7ananaphone` or `bananaphon3`. Edit: I hope you know how to make functions.
I think you would be able to do it using [masks](http://www.pygame.org/docs/ref/mask.html). 
you've already solved a problem very similar, what can you use from your first solution? if only this line: if stringB == stringA[i:j]: could compare two strings identical in all places but one, you'd be done i.e. if you are able to implement a function which does that def almostIdentical(a,b): # return True || False things will be jolly
Unfortunately 64bit python is a bit of a crapshoot =/
Saying "no CPython specific stuff" is as ridiculous as saying "no Pypy specific stuff". There is no Pypy reddit and there is no CPython reddit (and there don't need to be). Learning the C/Python API is confusing and I wanted to share this because I think my work might save others some trouble. Just because Pypy can be faster without C doesn't mean you should be mean to CPython. The PSF is nice to Pypy. 
polygon collision is very expensive. Are you sure that using a rectangle or circle to approximate your polygon will not work? Even if it doesn't, you should do bounding Rect collision detection first, then do whatever with your polygon (like the mask collision detection built in, the polygon detection that comes with pymunk or pyBox2D, or that you write yourself). Also, for large numbers of objects, pygame's built in collision is a very slow O(n^2 ). Pygame is better for graphics than collision detection.
Ok, that's of course clear and readable, but when you use your private member "Something_Or_Other" later on, you can't tell without looking at the declaration. (At least my coarse understanding addmittinng that I can't even write the simplest C++ code ;-)). But then, you have IDEs ...
I am trying to test collision against a 2D diagonal wall. The wall does not move or change. Does that make things less complex? 
If you're worried about end users breaking rules, maybe you shouldn't have them writing code. Make an interface. 
UML first.
My Python Math app was accepted by Apple today. Sadly, it has many of the same problems that several of you have complained about with this app. Let me explain why. 1) It does not support loading, editing, and saving scripts. I purposely left this out, hoping it would make it easier for Apple to accept. I will be working on that next to see what Apple is willing to accept. 2) It supports very few modules. This is partially because I'm focused on this as a math engine and partially because I feared Apple would not accept a Python app that included many of the standard modules. 3) It is 2.7, not 3.2. I was able to find an iphone port of 2.7.
Running multiple regex instances on the string would be less than ideal. Instead, he should really take his string (lets run with "dog") and shape it into a regex like ".og|d.g|do." That shouldn't be terribly difficult, something like: wildcard = '.' # or whatever, maybe just "\w" tolerant_patterns = [] for i in xrange(len(substr)): tolerant_patterns.append( re.escape(substr[:i]) + wildcard + re.escape(substr[i+1:]) ) pattern = '|'.join(tolerant_patterns) Then you could just run a re.finditer through the string and return/yield the matches. This method would work really well if you never wanted to extend it beyond catching a single mistake (which, is the assignment, so thats cool). My proposed method would be to take the unique characters in the substring like this: set(substr) and then form them into something like (using the "dog" example): "[dog\w]{3}" this would technically be populated as: substr_chars = ''.join(set(substr)) wildcard = "\w" pattern = "[%s%s]{%d}" % ( re.escape(substr_chars), wildcard, len(substr) ) Obviously, this is going to generate a shit ton of potentials. The cool thing about this is then you can test for substrings with more than a single mistake: tolerance = 2 for match in re.finditer(pattern, string): mistakes = 0 for x, y in zip(substr, match.group(0)): if x != y: mistake += 1 if mistakes &gt; tolerance: break else: print match.group(0), match.start, match.stop I realize that this is a homework question and it shouldn't really be answered for him. But, I put a small amount of work in here and if he is grown up enough to be taking a programming class, I hope he is grown up to understand any code that he turns in. Below is my full code import re def iter_like_substrings1(string, substr, wildcard=r"\w", re_flags=0): tolerant_patterns = [] # Create a regex pattern that tolerates one incorrect character # for the substr "dog" this would result in ["\wog", "d\wg", "do\w"] # given wildcard="\w" for i in xrange(len(substr)): tolerant_patterns.append( re.escape(substr[:i]) + wildcard + re.escape(substr[i+1:]) ) substr_pattern = '|'.join(tolerant_patterns) for match in re.finditer(substr_pattern, string, re_flags): yield (match.group(0), match.start(), match.end()) def iter_like_substrings2(string, substr, wildcard=r"\w", re_flags=0, tolerance=1): substr_pattern = '[%s%s]{%d}' % ( re.escape(''.join(set(substr))), wildcard, len(substr) ) for match in re.finditer(substr_pattern, string, re_flags): mistakes = 0 for x, y in zip(match.group(0), substr): if x != y: mistakes += 1 if mistakes &gt; tolerance: break else: yield (match.group(0), match.start(), match.end()) if __name__ == "__main__": the_substr = "banana" the_tests = ["banana", "a banana", "manana", "a wonderful and delicious Babana", "pooana"] longstring = '''Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin a ultrices diam. Suspendisse gravida, arcu porttitor consectetur pretium, purus sem egestas metus, non tristique justo odio eget velit. Donec adipiscing semper suscipit. Duis ultricies feugiat blandit. Donec sed vulputate diam. Curabitur tempus ultricies mollis. Nam ac elit sed ante gravida fermentum. Integer eu ligula nibh. Phasellus et mi at sapien euismod accumsan. Sed facilisis quam sit amet erat pellentesque facilisis ultrices eros sagittis. Phasellus venenatis suscipit tempus. Donec lorem leo, porta in tristique at, auctor eu nulla. Phasellus rhoncus quam elit, ut iaculis magna. Morbi ante urna, pellentesque et congue ac, pellentesque semper magna. Mauris sit amet risus id lorem congue eleifend at vitae nulla. Fusce tempor rhoncus nulla ac consectetur. Proin non leo nisl. Donec odio nibh, egestas vel fringilla ut, tempus id turpis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin a ultrices diam. Suspendisse gravida, arcu porttitor consectetur pretium, purus sem egestas metus, non tristique justo odio eget velit. Donec adipiscing semper suscipit. Duis ultricies feugiat blandit. Donec sed vulputate diam. Curabitur tempus ultricies mollis. Nam ac elit sed ante gravida fermentum. Integer eu ligula nibh. Phasellus et mi at sapien euismod accumsan. Sed facilisis quam sit amet erat pellentesque facilisis ultrices eros sagittis. Phasellus venenatis suscipit tempus. Donec lorem leo, porta in tristique at, auctor eu nulla. Phasellus rhoncus quam elit, ut iaculis magna. Morbi ante urna, pellentesque et congue ac, pellentesque semper magna. Mauris sit amet risus id lorem congue eleifend at vitae nulla. Fusce tempor rhoncus nulla ac consectetur. Proin non leo nisl. Donec odio nibh, egestas vel fringilla ut, tempus id turpis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin a ultrices diam. Suspendisse gravida, arcu porttitor consectetur pretium, purus sem egestas metus, non tristique justo odio eget velit. Donec adipiscing semper suscipit. Duis ultricies feugiat blandit. Donec sed vulputate diam. Curabitur tempus ultricies mollis. Nam ac elit sed ante gravida fermentum. Integer eu ligula nibh. Phasellus et mi at sapien euismod accumsan. Sed facilisis quam sit amet erat pellentesque facilisis ultrices eros sagittis. Phasellus venenatis suscipit tempus. Donec lorem leo, porta in tristique at, auctor eu nulla. Phasellus rhoncus quam elit, ut iaculis magna. Morbi ante urna, pellentesque et congue ac, pellentesque semper magna. Mauris sit amet risus id lorem congue eleifend at vitae nulla. Fusce tempor rhoncus nulla ac consectetur. Proin non leo nisl. Donec odio nibh, egestas vel fringilla ut, tempus id turpis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin a ultrices diam. Suspendisse gravida, arcu porttitor consectetur pretium, purus sem egestas metus, non tristique justo odio eget velit. Donec adipiscing semper suscipit. Duis ultricies feugiat blandit. Donec sed vulputate diam. Curabitur tempus ultricies mollis. Nam ac elit sed ante gravida fermentum. Integer eu ligula nibh. Phasellus et mi at sapien euismod accumsan. Sed facilisis quam sit amet erat pellentesque facilisis ultrices eros sagittis. Phasellus venenatis suscipit tempus. Donec lorem leo, porta in tristique at, auctor eu nulla. Phasellus rhoncus quam elit, ut iaculis magna. Morbi ante urna, pellentesque et congue ac, pellentesque semper magna. Mauris sit amet risus id lorem congue eleifend at vitae nulla. Fusce tempor rhoncus nulla ac consectetur. Proin non leo nisl. Donec odio nibh, egestas vel fringilla ut, tempus id turpis.''' for x in the_tests: for match, start, stop in iter_like_substrings1(x, the_substr, re_flags=re.I): print match, start, stop for match, start, stop in iter_like_substrings2(x, the_substr, re_flags=re.I, tolerance=3): print match, start, stop for match, start, stop in iter_like_substrings2(longstring, the_substr, re_flags=re.I, tolerance=3): print match, start, stop **EDIT:** I realize that the second method is not performant AT ALL, I couldn't really think of another way to do this allowing multiple faults. Also, I really do understand that doing peoples homework for them is frowned upon and I'm sorry. I'd never taken the time to do a tolerant substr match like this and so I had to do it. And once I finished it I had to share it.
Mask collisions are extremely efficient, though I recommend caching the masks if possible. Creating the mask from a pygame Surface is somewhat more expensive.
Quite a lot less complex. You can just check y &gt; mx + b or y &lt; mx +b on each of the four corners of the rectangle, where m is the slope of the line, b is the starting y for x = 0, and x and y are the coordinates of the corners. That's the most efficient way if you just have one diagonal wall and some rectangles to check against. If you have some number of different walls to check against that are not moving, you may be better off getting a Mask of all the walls combined, and then checking a Mask of each rectangle against that.
I'd much rather make them simply unable to break the rules, and then not give a crap about how they use it.
Are you Alex Gaynor?
I want something like Sublime Text, but open-source. http://www.sublimetext.com/blog/articles/sublime-text-2-public-alpha
The ideal of Python is that you don't care what they do with it, so you don't mind if they break the "rules". 
like this? http://collabedit.com/h2jme Feel free to ftfy. 
Yeah, but then someone always gets back to you with "I don't know how to follow instructions and I was messing around and your shit broke. You should really fix that.". I usually ignore that crap, but it does get annoying after a while.
I recently saw this article in r/programming - [Collision detection for dummies](http://www.wildbunny.co.uk/blog/2011/04/20/collision-detection-for-dummies/) - it might help. I didn't read it yet though.
Is this a college class? If so, you might want to consider switching majors because the rest of your life will be full of problems like this.
On the real, reddit is not your nerdy friend who will do your homework for you.
Finally, someone who understand exact what `exec` was made for.
*Sigh* yet another reason to really make me want an android device.
Previous [discussion](http://www.reddit.com/r/Python/comments/dv995/guido_on_pycharm/)
Accordingly, you might also want to [run your own WebServer](http://www.defuze.org/archives/228-running-cherrypy-on-android-with-sl4a.html) on your device. 
awesome stuff I gotta give this a try sometime.
I completely agree - strunk and white are childish faggots. You must read the amusing remarks of [Geoffrey Pullum](http://en.wikipedia.org/wiki/The_Elements_of_Style#Criticism) on the book. Among his vituperous comments, he criticizes *Elements* for promoting linguistic prescriptivism, and hypercorrection among anglophones, referring to it as "the book that ate America's brain." 
In order to distribute apps developed in Python to other users, do they also have to have SL4A installed on their phones? It doesn't seem like they'd be very popular if that's the case.
Exactly my question also. This guide does not show how to "Develop Your First Android Application in Python", no, it shows "How to get a python file to run in an android app (SL4A)". I would be interested in a guide how to pack up SL4A and your python modules and create a real app, if that is even possible.
No they don't have to install SL4a on their cell phones. I am working on the article that will explain how you can develop a standalone .APK for your python scripts.
Are your polygons concave or convex? If convex, then you can simply test all the points of one poly against all the edges of the other poly. Use the vector dot product to find if a point is on the inside or outside.
Having less rules you can count is not necessarily pragmatic.
Note he mentioned the file system cache.
Goes without saying, but please post this to /r/Python when it's ready :)
hmm, could you point to some resources or briefly explain what is required in the meantime?
you can create png files quite simply without a lib. here is a minimalistic implementation of png encoding: https://bitbucket.org/rndblnch/opengl-programmable/src/tip/png.py 
I first installed it with PYPM and had lots of problems with javascript execution. Checked out the latest version from github and everything works just great! README seems a bit out of date, but the api is quite self explanatory. Use ipython -q4thread and you have interactive programmatic browsing.
This is so freaking sweet. Damn it... now I need a decent IDEA I can try out. 
The one and only (not literally, some other Alex Gaynor got the .com domain, jerk).
Assuming that the variable "substr" actually contains a string the built-in "len" function returns the number of characters contained in the string. The built-in function "xrange", which behaves identically to the "range" function starting with Python 2.6+, (which will be deprecated in favor for the "range" function starting with Python 3) returns a generator object over which you iterate with the for loop the exact number of times the "substr" variable is long. That means if the string was "Hello World" the "i" variable would take the values 0-10, changing 11 times overall. &gt;&gt;&gt; substr = "Hello World" &gt;&gt;&gt; len(substr) 11 &gt;&gt;&gt; xrange(len(substr)) # Generator xrange(11) &gt;&gt;&gt; range(len(substr)) # List [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] &gt;&gt;&gt; for index in xrange(len(substr)): ... print index ... 0 1 2 ... &gt;&gt;&gt; for index in range(len(substr)): ... print index ... 0 1 2 ... &gt;&gt;&gt; The difference between "range" and "xrange" is that the next value of the iterator is only returned when it is actually requested with the "\_\_next\_\_" method, which is transparently called when iterating over the generator object with a for-loop, of the iterator object. The expression "range(len(substr))" is fully evaluated after its creation.
Good too see that you've refined the art execing of strings. Hopefully this wasn't work related...
In 2.6+ the range() function *is* xrange().
What's silly is to redefine Python's built-in functionality (in this case, dict), and somehow hopes that things will work as expected. Try sticking this "False, True = True, False", into the middle of your program, and see the fireworks. Exec allows Python programmers extra capabilities to do things. And if used wisely, it can be empowering. If you want to be silly, you can do silly things with exec. But then again, you can do silly things with many other aspects of Python. 
It can be possible. As of right now, their isn't any nice way to actually write an entire Android app with Python, but it's coming, I'm sure. Ruby has Rubuto-core, so its only a matter of time before someone gets the ball rolling for Python. However, that doesn't mean SL4A is not as powerful, take a look at this:: http://www.mattcutts.com/blog/android-barcode-scanner/ **The guy writes an Android barcode scanner app with 6 lines of Python. That's pretty damn impressive to me.**
Had index been a string instead of a function, it would have been legal syntax. Something I recently learned and was quite surprised by.
Here you go: http://code.google.com/p/android-scripting/wiki/SharingScripts
If you don't mind vector overkill (unit madness), [pycairo](http://cairographics.org/pycairo/) will do that too. :)
I will definitely do that. After seeing this positive response I am actually excited to complete that article and share it here. :)
I got everything installed and my first AVD up, but it can't connect to the internet. I set up the SDK and AVD manager settings with my work proxy settings and was able to download all the packages (obviously), but I can't get my virtual device to connect. I've tried poking around in the settings on it, but nothing jumps out at me. At work we have no wireless devices. Is that it? Would it be trying to connect to a wireless device? I figured it would just use the settings of the AVD Manager. Any thoughts?
I think that's a cool idea, but isn't that what /r/learnpython is for?
Ah yes, but you're all to familiar with the codebase that had a hand in inspiring this post :)
I was just happy to not see any real-world examples mixed in there.
Don't know why people down-voted you. After developing larger library-type applications in Python for clients that may not be as savvy, I find that there is no substitute for truly private variables/methods. I think the Python community is so smitten with the ease of development they are quick to dismiss larger implications of library design. If someone don't understand why the ability to manipulate a class instance's data without the class's knowledge is bad, or worse, they don't care, I don't trust them to develop anything of consequence.
Hopefully you have your own solution by now. Here's what I came up with: def diff_string(s1, s2): '''Return the number of different characters between corresponding indexes of strings s1 and s2.''' return(sum(x != y for x,y in zip(s1, s2)) + abs(len(s1) - len(s2))) def find_sub(s, sub, tol=0): '''Return the first index and match of sub within s. A match can have up to "tol" different characters.''' # case 1, left edge partial match for i in range(1, tol + 1): if sub[i:] == s[:len(sub) - i]: return 0, s[:len(sub) - i] # case 2, match within s or the right edge for i in range(len(s) - len(sub) + tol + 1): if diff_string(sub, s[i:i + len(sub)]) &lt;= tol: return i, s[i:i+len(sub)] # case 3, sub not found in s return -1, '' # testing s = "The quick brown fox jumps over the lazy dog." tests = ["--The quick","-The quick", "The quick", "jumps", "juMps", "juMPs", "dog.", "dog.-", "dog.--"] results = [[find_sub(s, sub, tol) for sub in tests] for tol in range(3)] for tol, result in enumerate(results): print("\n tol={0}".format(tol)) for sub, result in zip(tests, result): print(" '{0}': {1}".format(sub, result)) # output tol=0 '--The quick': (-1, '') '-The quick': (-1, '') 'The quick': (0, 'The quick') 'jumps': (20, 'jumps') 'juMps': (-1, '') 'juMPs': (-1, '') 'dog.': (40, 'dog.') 'dog.-': (-1, '') 'dog.--': (-1, '') tol=1 '--The quick': (-1, '') '-The quick': (0, 'The quick') 'The quick': (0, 'The quick') 'jumps': (20, 'jumps') 'juMps': (20, 'jumps') 'juMPs': (-1, '') 'dog.': (40, 'dog.') 'dog.-': (40, 'dog.') 'dog.--': (-1, '') tol=2 '--The quick': (0, 'The quick') '-The quick': (0, 'The quick') 'The quick': (0, 'The quick') 'jumps': (20, 'jumps') 'juMps': (20, 'jumps') 'juMPs': (20, 'jumps') 'dog.': (40, 'dog.') 'dog.-': (40, 'dog.') 'dog.--': (40, 'dog.') 
Don't get excited. This should rather be titled: "How to pop up a dialog in Python"...you can't actually do anything worth a shit with SL4A -- no activities, no services, no intents, no buttons, no graphics, none of the good stuff.
If you have a Symbian phone you can [play with it as well](http://wiki.forum.nokia.com/index.php/Python_on_Symbian).
Alright, well that explains all of this. Keep up the good work, but I still stand by my position; I will not sacrifice my C modules because other implementations can't use them.... that's unfortunate, but if it was slow enough to get me in the mood to code C, it must have been really slow.
So what you're saying is, man up and learn Java?
Sortof, but /r/learnpython is much less active (768 subs as opposed to 20895 subs) and much less responsive than /r/python. It's a good idea and I would love to get training as such, as I am pretty new to Python myself. 
I thing this construct is redundand, although often encountered in the newbie's code, followed by substr[i] somewhere in the loop body. More concise way of doing this is just for i in substr: # here is i holds current letter form substr ... As for your general message: there *is* such place already, it's called StackOverflow.
i'm looking forward to this. I had to jump a few hoops to install gevent on Debian squeeze (not a big deal; but node.js installation was very smooth). A preliminary test of gevent against node.js (on a simple hello-world web app), made me like gevent more than node.js. Node.js performs a little faster, but its performance is much more variant. In the end, I think gevent is better. 
"[Dark side of the force](https://github.com/mirah/mirah) is the pathway to many abilities, some considered to be... [unnatural](https://github.com/mirah/pindah)." 
SL4A has been around a while, it'd be nice if there was a way to actually code full-fledged apps in Python
I find that /r/learnpython should more aptly be titled /r/askpython -- which is fine, asking questions usually leads to some kind of teaching anyway.
I can understand why some may be against this (and why /r/learnpython exists). The signal to noise on /r/python is great! it's the one reddit that actually lives in my rss reader. That said I'd love to help out but coming up with topics is the hardest part. maybe use /r/learnpython to poll for topics or something and if someone writes a good article, submit it to /r/python? I dunno just thinking out loud :)
Interesting. Must investigate further. 
I think the same thing every time I see another blog post about SL4A. I wrote a few small apps with SL4A last year, but without any plugs into the real UI API, there's only so much you can do with popups. 
Oh god, I would love you forever if you did that.
Despite my distaste for gevent, this is a really nice guide to the difference between libev and libevent. Nice to see somebody take the time to explain it. :)
You can use webviews, which is what some popular apps (such as gmail) use. I know its not the best, but at least its something.
Sorry, I couldn't help myself from [sharing awhile back](http://www.reddit.com/r/Python/comments/du7ku/writing_clean_testable_high_quality_code_in_python/c12zzax?context=3).
In Python 2.7, range returns a 'list' whereas xrange returns an 'xrange'. Moreover, x = xrange(10000000) uses hardly any memory, but x = range(10000000) uses roughly 155 MiB of memory. I guess it depends on what the definition of 'is' is....
Incredibly awesome. I'd been looking into the PhantomJS project, but this will probably solve all my needs. Thanks for the link, man.
Could you provide an example that was semantically useful, not just syntactically correct?
Your last sentence hits the nail on the head. But he is not redefining dict.
My first reaction to the grandparent was *work-related? Didn't you read the code?* ... but now having seen some of the contents of your job's VCS I understand how you could imagine the OP being production code. Apologies on the behalf of the human race.
There's also the Pygame Subset for Android, which I'm involved with: http://pygame.renpy.org A new release should be out this weekend.
Awesome. Any ETA for the Article? Where will it be posted, etc? I am going to be writing an android app soon and would love any real-world-python-apps input you could provide on this subject :)
I'd say that you can just open the file and either use the csv modules to parse each line, or write a regex. Once you have an array of arrays, use list comprehensions to separate the columns. Now you just need to plot the columns against one another. For this I would highly recommend matplotlib.
&gt; in ~~2.6+~~ 3.0+ the range() function is xrange(). FTFY
Added code to [github](https://github.com/monstrado/lolock), I made this code when I first started with Python so don't be too mean to me :D. Please feel free to fork it and add some cool stuff. 
Okay, that all sounds good. I'm pretty new to this (hence trying to post to /r/learnpython) so where would be a good place to find out how to &gt; use list comprehensions to separate the columns
Added code to [github](https://github.com/monstrado/lolock), I made this code when I first started with Python so don't be too mean to me :D. Please feel free to fork it and add some cool stuff. 
Added code to [github](https://github.com/monstrado/lolock), I made this code when I first started with Python so don't be too mean to me :D. Please feel free to fork it and add some cool stuff. 
Added code to [github](https://github.com/monstrado/lolock), I made this code when I first started with Python so don't be too mean to me :D. Please feel free to fork it and add some cool stuff. 
Seems to me you don't even need a regex, but you might want [matplotlib](http://matplotlib.sourceforge.net/) and possibly [numpy](http://numpy.scipy.org/). An example is [here](http://matplotlib.sourceforge.net/examples/api/date_demo.html). If this is something you do each day, it may be better to run your script as a [cron job](http://en.wikipedia.org/wiki/Cron) and then use something like [pyinotify](http://pyinotify.sourceforge.net/) to run the script below. If you wanted to get really fancy, you could also use pyinotify to generate an email using [python's email](http://docs.python.org/library/email) once the graph(s) was(were) rendered. I know all of this will work on Linux, but I'm not entirely sure about solaris. I'm not sure if the following will work (there's probably at least one bug), but it should get you started. #!/usr/bin/env python from sys import stdin import matplotlib as mpl def get_data_points(fd=stdin): """ get_data_points will read from some file descriptor and then return each line of the file as a list Doing it this way will save you on memory overhead """ for line in fd.readlines(): line = line.strip("\n") line_date, line_data = line.split(":") line_data = line_data.split(",") line_data.insert(0,line_date) yield line_data # populate something with the data you need dictionary_of_mailboxes = dict() for (date, mailbox, blocks, used, available, percentage) in get_data_points(fd=open('filename.ext','r')): dictionary_of_mailboxes.set_default(mailbox,list()).append((date,used)) # create a figure to populate with the data figure = mpl.pyplot.figure() axes = figure.add_subplot(111) for mailbox in dictionary_of_mailboxes: axes.plot(dictionary_of_mailboxes[mailbox]) """ you probably want to mess with the x and y axes here """ # this should create the graph mpl.pyplot.show() 
Awesome - thanks very much!
Could start with google. :)
The only thing that would worry me is getting matplotlib running on Solaris. I found at least one [good indicator](http://www.scipy.org/Cookbook/Matplotlib/CompilingMatPlotLibOnSolaris10), best of wishes. I have done some porting in my life but matplotlib (or rather numpy) is one hell of a beast.
Picking up Python myself, but wouldn't you need to do the indexing method if you wanted to alter the string character-by-character? The loop you gave would only let you read over the string, yes?
This really isn't Pythonic. When we have generators, why would you want to build a massive "array of arrays"? (list of lists in python) Also, even if you went down this path, wouldn't the data set lend itself better to a list of dicts ? I guess you could use collections.namedtuple() as well but it amounts to the same thing... 
regarding passing a dict subclass to exec, to quote Guido 9 years ago: &gt;We either say (as we say now) "you can't override __getitem__ in a dict passed into the Python interpreter and expect it to work".... It would be really bad to say "you can override __getitem__ and it will usually work but not in these twelve situations...." What this person did is exactly what Guido said to be "really bad": making dict to randomly raise key errors in exec. Like I said, exec is not perfect, and in the right hand, can be useful (otherwise, it wouldn't have lasted this long). But if you want to be silly, there are plenty of things to be silly about. Ref: http://mail.python.org/pipermail/python-dev/2002-October/029769.html
use the standard library [csv module](http://docs.python.org/py3k/library/csv.html) instead of rolling your own. Also, collections.namedtuple() could be used in the population paragraph. from collections import namedtuple DiskUsage = namedtuple('DiskUsage', 'date, mailbox, blocks, used, available, percentage') import csv for du in map(DiskUsage._make, csv.reader(open("diskstats.csv", "rb"))): axes.plot((du.date,du.used)) 
Links from Raymond Hettinger's post: * [dev/library/heapq.html#priority-queue-implementation-notes](http://docs.python.org/dev/library/heapq.html#priority-queue-implementation-notes) * [dev/library/bisect.html#searching-sorted-lists](http://docs.python.org/dev/library/bisect.html#searching-sorted-lists) * [dev/library/re.html#writing-a-tokenizer](http://docs.python.org/dev/library/re.html#writing-a-tokenizer) * [dev/library/cmd.html#cmd-example](http://docs.python.org/dev/library/cmd.html#cmd-example) * [dev/library/collections.html#ordereddict-examples-and-recipes](http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes) * [dev/library/collections.html#collections.namedtuple](http://docs.python.org/dev/library/collections.html#collections.namedtuple) * [dev/howto/logging.html](http://docs.python.org/dev/howto/logging.html) * [dev/howto/sorting.html](http://docs.python.org/dev/howto/sorting.html) 
Well, that was the whole point of my post. I have tried google and was pretty much overwhelmed with the various options there - didn't know where to start.
How about something involving sentiment analysis?
You can get some interesting results applying that Markov and the text from some popular novels, and since those novels are available in text form... (I did this last year. Try "Tom Sawyer", it's fun.) Also, it's kind of fun to try it with Twitter, but that takes a while. It's also kind of fun to do some simulation with Python, especially with OpenGl or VIdle. A little bit of work later and you've got a visual of the current position of the moon and sun, or a nice robot figure. Have fun!
Yeah, I used War and Peace as a corpus and got this interesting sentence: &gt; ‎"A fine fellow--your friend--I like him! He stirs me up. They hold me captive. What, me? Me? My immortal soul? Ha-ha-ha! Ha-ha-ha!..." and he made no confusion, did not leave his room one evening in the cold white light without shadows, without perspective, without distinction of class, without enmity, united by indissoluble bonds, these temptations of the table, making signs to the minutest details of his activity. Simulations and procedural generation are things that always seemed "out of reach" from a programming perspective, but now I think I have the chops to at least get started. Any specific ideas? I can Google and search for implementation tips/techniques, just need a few ideas... I don't know what's a simple enough piece to bite off and chew on.
I'm on board. /r/learnpython is a great idea and is probably the place to post lessons. It would be nice if it were a bit more active, but I think /r/python could tolerate a crosspost every once in a while. Any ideas for lessons or things you wish someone would expand on?
I haven't looked through all of them but dev/howto/logging looks to be a godsend. The Logger class documentation previously was a bit obtusely written and was easiest to follow if you understood *other* logger interfaces, especially [syslog](http://ccrma.stanford.edu/planetccrma/man/man3/syslog.3.html) in POSIX. The big problem was, if you didn't have a *nix/POSIX background grokking Logger seemed to be a difficulty. The end result for *many* projects I've worked on in the past was to come up with our own logging classes (often wrapping parts of Logger, these bits usually written by people like me who understood Logger :-) just so that our more platform agnostic Python engineers (generally folks who came from the Windows or Mac worlds) could get at the various logging features our apps were providing. This logging howto explains things so extremely well, I feel very comfortable just pointing anyone at it without any explanation at all.
that makes much more sense. Not that the OP is trying to do anything well or useful :-).
Join us...
Java is really not that difficult of a language. Just do yourself a favour and learn the core language and Object Oriented Programming fundamentals before jumping into the Android SDK. It really is quite a treat to work with though.
http://docs.python.org/howto/functional.html#generator-expressions-and-list-comprehensions a = [['date1', 'type1', 'footer1'], ['date2', 'type2', 'footer2'], ['date3', 'type3', 'footer3']] print [row[1] for row in a] &gt;&gt; ['type1', 'type2', 'type3']
True, for any sort of larger maintainable/effecient script you should use these things, but for someone asking where to start, I figured the 5 line solution might be more approachable.
Aha, The python docs have some pretty concise examples of these. I'd suggest digging around those. http://docs.python.org/tutorial/datastructures.html#list-comprehensions 
You can. It works in 2.7 too: Python 2.7.1 (r271:86832, Nov 28 2010, 00:47:24) [GCC 4.2.1 (Apple Inc. build 5664)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; {1, 2, 3} set([1, 2, 3]) 
Also for Python 2.7 here's a [partial list of 3.1 features that were backported](http://docs.python.org/dev/whatsnew/2.7.html#python-3-1-features): * The syntax for set literals ({1,2,3} is a mutable set). * Dictionary and set comprehensions ({ i: i*2 for i in range(3)}). * Multiple context managers in a single with statement. * A new version of the io library, rewritten in C for performance. * The ordered-dictionary type described in PEP 372: Adding an Ordered Dictionary to collections. * The new "," format specifier described in PEP 378: Format Specifier for Thousands Separator. * The memoryview object. * A small subset of the importlib module, described below. * The repr() of a float x is shorter in many cases: it’s now based on the shortest decimal string that’s guaranteed to round back to x. As in previous versions of Python, it’s guaranteed that float(repr(x)) recovers x. * Float-to-string and string-to-float conversions are correctly rounded. The round() function is also now correctly rounded. * The PyCapsule type, used to provide a C API for extension modules. * The PyLong_AsLongAndOverflow() C API function.
I love working with python, but in my brief adventures, I can't say I love the docs. Many functions, for example, are all listed on the same page making ctrl+f'ing awkward sometimes. 
Your routing is similar to Pyramids traversal, and Pyramid is even faster. (But yeah, Pyramid is not a micro framework, and has dependencies, but I never understood why that would be a problem).
I've never really liked the selection api in OpenGL. I usually end up doing something like this if I need picking: before hand: set up a framebuffer object (FBO) when a user clicks or selects a pixel: 1. bind your FBO 2. set up projection and modelvie matrices just liek in your normal scene 3. disable ligthing and materials 4. draw all your objects that can be selected using a unique color 5. use glReadPixel (slow so only read as much as you have to) to get the color at the location the user clicked value 6. based on the color you'll know which object it was If your using shaders this can be nicely done by setting the colors usinga uniform or having the object id stored along the vertices in a vbo or something simmilar. then all you have to do is switch the shaders.
Why don't set and dictionary comprehensions contaminate the outer namespace like list comprehensions? For example: def test(): d = {i:i for i in [1,2,3]} s = {i for i in [1,2,3,3,2,1]} lst = [j for j in [1,2,3]] try: print("j={0}".format(j)) print("i={0}".format(i)) except NameError as e: print(e.message) In [1]: test() j=3 global name 'i' is not defined I wouldn't expect leakage if I used a generator to instantiate the container, such as the following: d = dict((i,i) for i in [1,2,3]) s = set(i for i in [1,2,3,3,2,1]) lst = list(i for i in [1,2,3]) 
I solved this problem by maintaining a [framebuffer](http://www.songho.ca/opengl/gl_fbo.html) the same size as the onscreen window and using it for offscreen rendering of the scene where the different objects are rendered with unique colors. The pixel-perfect picking is then performed by reading the color value from the framebuffer at the mouse coordinates and looking up which object that color refers to. I actually read a small block of pixels surrounding the mouse and then calculate the dominant color by "pixel weight" (pixels in the center of the block have more weight than those on the edge) so that it's easier to pick out very small things. The problem now becomes managing a framebuffer and I believe you will find more easy to follow tutorials on that subject, sorry I don't have a minimal example to show you.
Here's a literary gem: Harry Potter an' Hermione Granger, telling a downright lie to a treacle tart, but he wished at once by a bearded giant, Uncle Vernon's rations turned out to all pupils. And a whisper, but they caught every word -- like Professor McGonagall, and they left Eeylops Owl Emporium -- Tawny, Screech, Barn, Brown, and Snowy. Several boys of about Harry's age had their noses pressed against the wall. "Do you think it's funny that Longbottom here heard the little bundle; Hagrid's shoulders shook, Professor McGonagall irritably. "But that's no reason to be quiet and beckoned them all to get across?"
Python strings are immutable, so you can't do that in a straightforward manner like substr[i] = 'c'. However this would be possible if you make a list from string first, but even then there is a better idiom: for i, ch in enumerate(substr): # is is the current index, ch is the curent char ... The for-loop will iterate over any *iterable*, so it works for strings, lists, tuples, dictionaries, etc. 
I'm not a computer science major
&gt; Can anyone explain why the slicing method does not work? It works, but not in the way you are expecting. It makes a copy of the outer list, but then both the copy and original contain references to the same inner lists.
If the app needs to be cross-platform, it's better to use pixels for font size instead of points, since the translation between those two depends on the OS. Point-size based GUI designs thus don't look as expected on other platforms.
heapq should become a class part of collections, with support for passing a key option. And for those notes about priority queues: instead of including code in the _documentation_, make the code part of the standard library... Speaking of collections, it's described as "high-performance datatypes"; what's high-performance about named tuples? Or Ordered dictionaries? It's just a variation of a known theme. I want balanced binary search trees and tries and other advanced datastructures. However, each time when someone submits them for inclusion, they get rejected. Is there some sort of anti-CS attitude with the Python-devs?
You're thinking that a "2d-array" is a single object with a convenient foo[x][y] syntax. It's not: it's an outer object (a list), which happens to contain a bunch of independent objects (also lists), which themselves contain whatever objects. Generally this sort of thing is a clue that you're not doing something in an ideal fashion in python. Although this particular approach isn't necessarily the answer, you may consider using a dict or defaultdict with a tuple key instead, for instance: import collections something = collections.defaultdict(int) #any callable works here something[1, 1] += 1 something[1, 2] += 1 something[1, 2] += 1 something[1, 3] += 1 print something #&gt;defaultdict(&lt;type 'int'&gt;, {(1, 2): 2, (1, 3): 1, (1, 1): 1}) print dict(something) #&gt;{(1, 2): 2, (1, 3): 1, (1, 1): 1} This has the added benefit of being sparse, i.e., not requiring allocated space for each not-yet-used entry, which becomes a big deal with more dimensions.
&gt; /500. That’s an error. No, I can't load the page
IIRC the scope contamination by list comprehensions is considered a bug which is fixed in 3.x, but not in 2.x because of backwards compatibility. So here they decided that this weird kind of consistency alone would not be worth reintroducing the bug in the backported list/dict comprehensions. Or maybe just didn't think about it.
what? you want separate pages for each function? how would you ctrl+f for other functions of that module then?
 You are probably right that csv is a good module to use. Named tuples are a nice addition to python. But, the cvs module isn't going to parse that data properly. And, I don't think he's going to want to put python 3 on an older solaris box.
What you're calling "partial match" also has another definition. It is the [Hamming distance](http://en.wikipedia.org/wiki/Hamming_distance) between two strings. The wikipedia article even has a python snippet you could steal for your project :) 
Here is the HOWTO section in the docs, recommended reading: http://docs.python.org/howto/ Also note that you can download all these docs and have a local copy. Recommended that you update your local copies periodically: http://docs.python.org/download.html
I'm pretty sure you cannot make APKs from python which means you can't really do much.
that makes some sense. But why doesnt b = a[:][:] work?
You can parse the text file line by line and do something like this: outputfile = open('output.xml','w') for line in lines: date = datetime.date(int(line[0:4], int(line[5:7]),int(line[8:9])) values = file[12:].split(',') #iterate through the values and put them in some XML form for excel outputfile.write(xml) As far as displaying it, what I would do it instead of writing to XML, I would build a python dictionary, dump it as json, and parse it with javascript. Dynamic plots using [flot](http://code.google.com/p/flot/) or [google plots](http://code.google.com/apis/chart/) are WAY nicer than the static images you would get with python. 
This guy has come javascript experience. Wouldn't it be nicer to have interactive plots viewable in a webpage? Putting the data in a nice workable form seems to be his biggest challenge.
because it's the same as: b = a[:] b = b[:] You have just copied *a* twice.
Interactive plots on a web app sounds really nice. If he had a lot of time on his hands, it sounds like he could develop a web application and serve up interactive plots on his solaris box. He's got some experience there, so I'm sure he could do it. But if it were me: I'd want something automated so I could drop the output into some powerpoint slides every week / month /quarter as a report to give to either my team or my management. I wouldn't want to spend the effort to produce and maintain a web app. I'd want something put together with minimal fuss that runs on the server each time I need the slide. And I'd just want it to work each time because my report will be about the same every week -- just new pictures. 
Marie does have a routing system that is similar to Pyramids, also CherryPy, Bottle, Flask etc. There are a few things that are different in the routing. The biggest two being that you can point out a function as requiring authorization and you don't have to declare URL arguments. It's also not as full featured which depending on who you are and what you are doing will be a plus or a minus. As for speed I would wager that Marie and Pyramid are pretty much in the same league. I haven't benched them against each other, but I have benched it against other frameworks that are slightly faster than Pyramid. Either way they are both very fast, but never nearly as fast as bare metal WSGI.
Doing that saves more time than then doing this matplotlib thing and figuring out how to display the pictures for a presentation. It is REALLY EASY. You can't go to a presentation with a bunch of PNGs, like you said you have to make a powerpoint, but you can with an interactive graph. Metadata adds a LOT to a graph.
Thanks. Here's a brief explanation from Alexandre Vassalotti in [issue 2333](http://bugs.python.org/issue2333#msg91338) (almost 2 years ago): &gt; The patch preserves the Python 3.x's syntax and semantics of the &gt; feature. Although this makes dict and set comprehensions is &gt; inconsistent with list comprehension, I believe this is reasonable &gt; since the backport aimed to improve the compatibility of Python 2.x &gt; with Python 3.x. 
Ok. Cool. Do you have a quick solution you can whip up and post here? I'd love to learn something.
The only viable alternative I've seen is a scheme like: * *docs/module*: contains a list of all members of that module. * *docs/module/some_member*: contains either a function overview of the members of this member (for nested modules). Wasn't a bad system pre-decent search engines, and if you know roughly what you were looking for, you could often find it directly from the address bar. I think the Python docs are a pretty good compromise; if you know the name of the module you're looking for and want a specific member, it's usually *module.html#module.member_name*, like *string.ascii_letters* is http://docs.python.org/library/string.html#string.ascii_letters 
Thanks! I like the idea of outputting JSON. Another thing to learn, but I know it well enough I think.
Thanks much
Thank for your response! I never thought of doing it this way. :O This certainly will help me move forward. However, spending all night thinking about this has given me a new question. Hypothetically saying I had a quad displayed, how would I go about determining which point on the quad the mouse has clicked? Would that require a different method, or could it work with this idea?
Thanks for your response! Finally a method that doesn't seem so confusing :P But like I asked tehansen, is there any way to determine which point on a simple shape (like a flat quad) is being clicked? I thought up this question last night, and realized that it would both be the next step in improving this idea you both suggested and actually required for my project. :P Would this be possible, or would it require a different method? It's alright that you don't have an example, that link to the framebuffer tutorial will do nicely. :)
:P i know it seems like common knowledge to me now but this would have been nice before i got my degree lol
Try http://babbledrive.appspot.com/ for browsing the Python docs. I've found it to way faster than trying to use the official documentation. 
Try using it on [the bible](http://www.cas.mcmaster.ca/~bill/strings/english/bible), it will result in some pretty funny generations. Edit, is your code up anywhere?
Also here's a clever way to do [lazy module loading](http://stackoverflow.com/questions/1462986/lazy-module-variables-can-it-be-done#1463773) using just Python.
Watch out when making a shallow copy of the dict. If you do `something_new = dict(something)` then you'll no longer have a defaultdict. If you want to keep the original type, use the copy method, such as `something_new = something.copy()`.
I set up a custom search engine in Chrome and Firefox so that typing "py json" sends me to [http://pyth0n.org/json](http://pyth0n.org/json), which redirects to the Python json module. This works for Python core modules, built-in types/methods, and a few other things. It's saved me lots of time; thought I'd share!
I've written a bunch of things similar to this for reporting and i think the first time I did it it took me three hours, from writing the DB query to being satisfied with how it looked in flot. JSON is so similar to the python dictionary structure that you don't need to think much about the conversion.
My challenge is that Python is almost entirely new to me. I saw this as a way to learn the language along with some other resources.
Would be nice if you could throw a version on there, like http://pyth0n.org/json/3.2 to bring you 3.2 specific results.
I'd also like to see the code. :-) 
Great! Just the thing to go with my Java anonymous class to FORTRAN subroutine converter!
LOL, you lucky. I thought I had deleted the script I was thinking of and found it in a vim swap file... it is part of something a lot more complicated, so I hope it is still understandable... I cleaned it up to get rid of proprietary elements. There were a bunch of dirty hacks I removed that were due to a previous developer storing data in a very strange format. What I had done is grab a list of factories(like the industrial kind) from a database along with a json string of data associated with each, then set up 12 sliders that vary different parameters and build graphs predicting the factory outputs over the next month. So, whenever you moved a slider, all the graphs for every factory would update instantly. Also, for each factory there were some other configurable things. It was a nice dashboard I enjoyed building it. This is just the code needed for plotting. I hope I trimmed it properly. Run as is, the python program served the webpage nicely including the static files. [Code Sample](http://mvrak.com/codesample.txt)
That's pretty useful feedback, you should send that along to them. I hope I didn't give the impression that I wrote pyth0n.org; it's just a neat little tool I found one day.
[See my other comment, I hope the code is legible.](http://www.reddit.com/r/Python/comments/gzqzm/for_some_reason_my_posts_in_rlearnpython_are/c1rm25e) The synergy between Python, html, and javascript should hopefully be evident.
Two simple approaches come to mind: * Calculate and store the bounding boxes for shapes, then with a little bit of simple math you can calculate the mouse position relative to the bounding box of the selected shape. This will probably only work properly for 2d applications. * Use a part of the RGBA color signature information for identifying regions of shapes (for example RG identifies the shape BA identifies the shape region). This will not give you absolutely accurate detection but it will work correctly in 3d.
When comparing Django templating to Jinja2 templating they look really similar, however I tend to do a lot of small projects in flask or cherrypy, so using a small standalone templating system like Jinja2 works great for me. I've hadn't run into any problems with templating systems except for one thing. I do not think they should ever be XML based. It is a waste of resources and parsing time. 
I quickly get to the documentation with google searches. Is that weird?
I like the idea, a lot, but could you get a domain that doesn't make you look like a scammer or typo squatter? When I went to python I missed the ability to get docs by going php.net/func_name 
I've been using [bunny1](http://www.bunny1.org/) as my search engine. Let's you do these lookups with the 'py' and 'python' commands. Chrome + bunny1 + Vimium = python document heaven. Plus bunny1 has all sorts of other useful commands... 
You can use a texture (or just use colors for simple thing liske quads) where the every pixel actually has the position encoded in teh color. so e.g. bottom left pixel is all the way to the right it will be red at the bottom and yellow at the top (and green channel can encode x). I have used this technique to draw directly onto 3D objects (use a texture liek this ti figure out the coordinate, draw into an fbo at that coordinate, and then use the fbo as a texture) 
Raymond Hettinger is awesome. If you get a chance to see him talking about python somewhere, go see it. Also, talk to the man, he's awesome.
nice! my only gripe with it is that it seems to be geared specifically towards modules/functions and not "concepts". For example, I was trying to find list comprehension docs and couldn't find them.
In case of bitrot: https://gist.github.com/1a03e0da156f82b5a668
Didn't know about bunny1. Thanks
Yeah, every function I write ends up returning like a 5-tuple of unrelated values before long. Then again, it's not like I've never used a triply-nested std::map in C++ either.
I use [babbledrive.appspot.com](http://babbledrive.appspot.com/) most of the time nowadays. It's super handy.
If you actually write the low-level string comparison yourself instead of having Python do it for you with slices, etc., the solution is pretty simple (and a lot faster!). It's just a string comparison with a counter (here I used True/False since it's only one mistake). When you normally would give up on a match, you increment the counter instead. def match(search, line): search_range = range(len(search)) for i in range(len(line) - len(search) + 1): mistake = False for j in search_range: if line[i+j] != search[j]: if mistake: break else: mistake = True else: return True return False Instead of comparing every possible substring of a certain length in the text with the search, this just compares the bare minimum of letters, so it's a lot faster (if that matters at all). EDIT: BTW, an else clause on a for loop executes if the for loop didn't break. Confusing but handy.
I haven't tried it on 3.2 yet. Doesn't this module require PySerial? You can always look on the Modbus org site. Maybe a port is in order. 
if you use numpy, there is an alternative way: In [1]: from numpy import * In [2]: m = arange(10).reshape(2, 5) In [3]: m Out[3]: array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]) In [4]: n = m[:,:] In [5]: n Out[5]: array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]) In [6]: m[0] is n[0] Out[6]: False 
Maybe this will help you think about it. *a* is a variable, that is, the location (reference) of an array - an address, if you will. *a[:]* returns all the items from the array at location *a*; One way to think why this must be so: If you have a string "abcde", and you return a substring ("abcde"[1:3]), it makes more sense to return copies of "bc" than to have a structure that marks the beginning and end. However you want to rationalize the implementation, just remember this thinking: slices return copies of the elements, that is: the slice by value. Now - *a[ [1,2,3], [4,5,6] ]* is an array containing two elements. Remember *a*? It just contains the location of a list. The list has two elements. Each of those elements is ... what? A list, that is a reference to a location containing a list. Maybe this will make the discussion clearer going forward: previously, this was *a* defined with two anonymous arrays (that is, locations without a name associated with them. If you, instead, rewrite our latest *a* definition in this way: listone = [1,2,3] listtwo = [4,5,6] a = [listone, listtwo] Now - what is *a[0]* (or, equivalently, *a[listone]*)? It's the reference to a list - in other words, it contains an address. So, what is *a[listone][:]* ? It returns copies of all the elements at location listone (by value), in the form of a list: In [37]: a[0][:] Out[37]: [1, 2, 3] Now - to your expectation that *a[:][:]* will give you the two lists: what does *a[:]* return? A copy of the list elements - in this case, two things that are references (two addresses). *a[:]* returns (lets say, to be graphic) [0x123, 0x470]. What does [0x123, 0x470][:] mean? What would you expect it to do? A simple illustration might help: what would you expect [1,2][:] to return? Copies (by value) of the contents of the list *[1,2]*: In [38]: [1,2][:] Out[38]: [1, 2] Is this starting to make sense yet? If you want *b* to contain references (addresses) to copies of the lists in *a*, this (just to make it clear) would replicate what you did in the first part of your post: blist1 = a[0][:] # or listone[:] - elements by value, i.e. copies blist2 = a[1][:] b= [blist1,blist2] # two references to copies of lists This is exactly what your last line does: *for x in a* (*a* has 2 elements)... that is to say, the above 3 lines are equivalent to the more general: b = [x[:] for x in a] Hope that helps in thinking about it! Cheers!
This is a really great idea. I wish he had some more samples!
i suppose i should have done that in the first place, then i would have kept it in separate, yet functional pieces
actually, it's not; it's the same as making copies of the references to the two lists... either way, it's not what Juts expected.
Be careful if you're planning to mix such magic with threading and/or forking. Python has an internal "import lock" that can cause deadlocks and other funny behaviour if you mix imports and concurrency in certain ways, e.g. http://docs.python.org/library/threading.html#importing-in-threaded-code
http://pastebin.com/BM40PrNb You can import this class and use it to create a Markov object, which will generate the text for you. I just did my examples from a python shell. You could change the size of the key from 2 to 3 or 4 for maybe "better" generation, who knows.
http://www.reddit.com/r/Python/comments/gzvsi/recently_made_a_simple_markov_chain_generator_any/c1rns2b
Here is a 3,000 word Markov Bible: http://pastebin.com/APewV9Ym
Assuming you have the picking working to get the quad from the other 2 posts, and somehow you can get the coordinates of the vertices of the quad on screen (I dont know enough opengl to know how this can be done), we can transform any position on screen (mouse click location) to the original position on the quad. 1. Get the mouse x, y position from the click (variable e). 2. Get the object from the picking. 3. Get the original coordinates of the quad vertices as a, b, c, d. I assume here that the vertices are in the x, y plane and z = 0 for all of them. 4. Get the transformed coordinates of the quad (screen coords) as a', b', c', d'. here too, we need only the x, y coordinates. 5. Take 3 vertices a,b,c (we don't need the fourth d for this method) and form the matrix A, where Matrix A (MA) = [a1, b1, c1; a2, b2, c2; 1, 1, 1] Similarly form MB from a', b', c' (MB)= [a'1, b'1, c'1; a'2, b'2, c'2; 1, 1, 1] 6. The transformation by opengl (transformation matrix C) has transformed matrix A into B , so we undo that. C*A = B A = invC*B invC = A*invB We calculate A*invB. For finding invB, use numpy and see, http://stackoverflow.com/questions/211160/python-inverse-of-a-matrix Finally, r = invC*[e1;e2;1] # e is the location of the mouse click r[0], r[1] are the x and y coordinates in the quad. This assumes the B matrix can be inverted, which it can if the points a', b', c' are not collinear.
Thanks. :-)
That was the point, as passing a defaultdict to code that isn't expecting one can cause subtle bugs. 
Very helpful man, thanks. I think i finally grasp it
It's hosted here: https://bitbucket.org/henry/reform How are you installing it? Are you using easy_install or pip?
No, let's not leave aside whether or not it's a good idea. It's a very bad idea. Why not use Python's built-in ConfigParser module? 
Second try. First I might be wrong about PySerial, the PyModbus site indicates the use of Twisted which isn't 3.2 ready. Nothing said about PySerial. In any event if you check in SVN they apparently are working on a 3.2 variant as there is a directory for a 3.2 ported PyModbus. The best thing here is to contact the developers. A release suitable for 3.2 Python could be a day or a year away. In any event I'd suggest looking up Modbus and Python to see what is out there. I actually found some interesting stuff right off the bat. Unfortunately need to get back to work now. 
csv will parse it fine. If you're concerned about the fact the date and mountpoint have a different delimiter to the rest of the items, there's a myriad of ways around it. My suggestion, since the OP has control over the script generating this input, is to fix that other script to ensure its outputting the data in a consistent CSV manner. On the python side you could run the csv parser again over item 1 and delimit by ':' instead of ',' or you could use the split() method on string or re objects, or various other ways. Even if it was somehow impossible to run python 3 on Solaris (I don't see why, as its supported and documented in the build instructions in the readme file), namedtuple() has been available since 2.6 and csv since 2.3
I realise graphing libraries are a bit few &amp; far between for Python, but if push comes to shove for this kind of data you can always roll your own in Tkinter/ttk using the Canvas object :) 
FWIW http://readthedocs.org has this for every project that it hosts, on the short-url of rtfd.org. eg. http://python.rtfd.org/json http://django.rtfd.org/queryset http://pip.rtfd.org/git I would be interested in incorporating these other bits of code if they are generally re-usable. These are culled from Intersphinx mappings that the projects used, as described here: http://ericholscher.com/blog/2011/apr/11/read-docs-update/ The code is also open source, if anyone cares to hack on it: https://github.com/rtfd/readthedocs.org/
[PNGCanvas](http://the.taoofmac.com/space/projects/PNGCanvas) is self-contained/small/pure Python module to do this. Extremely simple to directly set pixels, e.g: from pngcanvas import PNGCanvas c = PNGCanvas(256, 256) for x in range(256): for y in range(256): c.point(x, y, color = (x,y,0,255)) f = open("blah.png", "wb") f.write(c.dump()) f.close() The color tuple is (r, g, b, a) - setting the alpha to 0 (or not setting a pixel at all) will give transparency.
Have you looked at Cython? Your post inspired me to play about with it again, and it's remarkably more simple. Based on [this tutorial](http://docs.cython.org/src/userguide/tutorial.html): `cTest.pyx`: def doubler(int a): return a * 2 `setup.py`: from distutils.core import setup from distutils.extension import Extension from Cython.Distutils import build_ext setup( cmdclass = {'build_ext': build_ext}, ext_modules = [Extension("cTest", ["cTest.pyx"])] ) Then running `python setup.py build_ext --inplace` generates a [quite long .c file](http://pastie.org/1849972), which is also compiled into cTest.so Goes against your "interest in how the low-level interaction works", as it's pretty abstracted, but it seems like a very sensibly designed project (I like how it makes a standalone C file that can be compiled by someone without installing Cython)
I quickly get to the documentation with a URL shortcut: `python unittest` automatically expands to `http://docs.python.org/library/unittest.html`. Bam. done.
I didn't see any documentation and don't have Firebird SQL installed, so does anyone know how far the "pure python" thing goes here? I saw some C sources in the repository, but the setup script does not appear to reference them. Is this usable on PyPy? Jython? IronPython?
This uses one specific web service to send text messages. I wrote a script that could potentially be extended to send texts (currently it only deals with receiving them). I'll post it on request. If you must use a web service, use one that uses real currency, instead of a "credits" system like TextMagic and TM4B. Also worth investigating is whether a local VOIP provider supports SMS. I know several in Australia do.
The download page has not been yet updated, but direct links are working: x86 http://pypy.org/download/pypy-1.5-linux.tar.bz2 x64 http://pypy.org/download/pypy-1.5-linux64.tar.bz2
It's been a while since I've looked closely at the project, and I'm impressed at how things have changed! (In a positive way.)
Apparently it has been updated a couple of minutes after your post here. :)
Also SciPy tips at https://twitter.com/#!/SciPyTip A list of python commiters https://twitter.com/#!/brettsky/python-committers
Oh, nice. I wasn't so patient… Well anyway, direct links everyone!
I was looking for something like this a while go for a server performance monitor. but now I use wormly, no point writing my own.
This is actually a really poor comparison. I think libevent2 is much nicer for C or C++ programs with the concept of bufferevents and Windows IOCPs and thread safety are big wins as well.
Has anyone managed to get it working with virtualenv? There is some sort of bug, it seems. I've tried 1.6 release and HEAD and it always fails on importing md5 (which should be in hashlib, but is as a top-level module nevertheless, and in fact pypy -c "import md5" executes fine).
Oh! Weird. This was me. I have a bunch more material at: http://atl.me/work/remix/ The master project has matured a fair bit since I wrote and presented that material, and lives on here: http://code.google.com/p/echo-nest-remix/ Enjoy!
Need to dothis. There are often some excellent functions hidden in all of that. 
thank you
I will love it if in a couple years the mainstream implementation of Python is PyPy. People are going to be upgrading their Python installations anyway when they move to Python 3. If PyPy can get Python 3 support in without too much delay, maybe people will switch to PyPy at the same time.
It will work with virtualenv 1.6.1, due to be released this weekend.
Awesome!
Does anyone know how far it is from supporting numpy? I'd be very interested.
Well, we'll never support the core of upstream numpy, however we are interested in implementing it (we've done a prototype and proved we can be faster). As usual, it's an issue of time, not enough of it to go around :(
That would be fantastic! Can we help? How hard is it?
make a blog post about it :D
I don't like paying for things, so I usually use email addresses from the carrier I'm targeting that convert email to SMS. http://sms411.net/how-to-send-email-to-a-phone/ Then it's just a matter of sending emails through SMTP or what have you. http://pastebin.com/raw.php?i=LV96kjDY Not really an option for more serious/heavy duty texting, but if you're like this guy and concerned about £20, maybe. I assume if I had money to work with, it wouldn't be hard finding solution X.
I think this definitely something we'd love contributors for, personally I find PyPy's codebase (and RPython) nice to work with, even if the theory of how the whole thing works is pretty complicated. I'd send a message to pypy-dev saying you're interested in helping out with NumPy support and hopefully Maciej Fijalkowski, who did the prototype, will have some ideas for how to get started helping out.
Yes, I think it only covers the Library Reference portion of the Python docs.
Right, but as a n00b I type, [how to test in python i am n00b](http://www.google.com/search?sourceid=chrome&amp;ie=UTF-8&amp;q='how+to+test+in+python+yo+soy+n00b'#sclient=psy&amp;hl=en&amp;biw=925&amp;bih=471&amp;source=hp&amp;q='how+to+unit+test+in+python+i+am+n00b'&amp;aq=f&amp;aqi=&amp;aql=&amp;oq=&amp;pbx=1&amp;fp=35563b2416e60182) and I still get there.
I'm not sure, but google trends may do that. Without programming.
@pypyproject doesn't feature tips, but does have news and such
Can you elaborate for the pypy noobs, why can't you ever support numpy core? I heard cpython extension support is on the way.
&gt;I'll post it on request. Request. Random thought: does Google Voice expose an API for sending texts? I occasionally use the GV Chrome extension to send texts (it's free for the GV subscriber), so it would make sense that there is some API that it makes use of.
Sorry I should have spoken more precisely. Someday numpy core might compile under CPyext, but it will never be optimal. This is because there's an inherent overhead to using CPyext, and so we don't recommended it for speed, and since numpy is all about speed, it effectively doesn't work for end users.
Why is there more overhead in using cpython extensions with pypy than with regular cpython?
Because we don't use a reference counting based GC, so we have to fake all sorts of things.
Keep in mind the terms of use of the search engine you're going to use. Google forbids any automated use of its services (technically, even pinging google.com to check for Internet connectivity is a violation of the TOS, IIRC). Instead they provide an API you can sign up for. Further info: http://code.google.com/apis/customsearch/v1/overview.html
virtualenv 1.6.1 is now released
Shit! I've been pinging google for the last 5 years! Now I have to find another site with a short URL and is iconic...
NumPy/SciPy support is all I want :(
Whatever happened to that NumPy RPy GSoC project? IIRC it was never quite finished, but was it abandoned?
Who cares?
AFAIK the approach it took was deemed to not be good compared to the approach taken in the new prototype we did.
Any more info on that prototype? How is it different?
Let me say I'm super impressed with the progress PyPy has made - I can't wait until I can replace CPython. With that said, one performance tarpit I've found in PyPy is list slicing/segmenting. Here's a contrived benchmark that takes twice as long with PyPy: http://pastebin.com/XwEW6Wg6 Edit: Looks like this is an issue on my end... nevermind.
Basically when you do a pairwise operation like `a + b + c` where all of those are Numpy arrays it builds a tree out of the operations, and when you actually need to evaluate the final result it JITs the computation, and it avoids allocating an intermediary result for `a + b` and it can also take advantage of the various SSE vector ops (though the second part isn't implemented), also things like ufuncs can be inlined.
So something like [numexpr](http://code.google.com/p/numexpr/)? Any chance of you guys doing a few blog entries related to NumPy? Seems like there are quite a few people who'd be interested. Final question: what are the chances of getting something like PyQt working in PyPy with good performance?
Hrm, weird that definitely shouldn't be slower. I'll investigate! (We love reports of programs where we're slower, it helps focus development, we already have tons of programs where we're faster).
Thanks!
Yes I think so, but automatically :) I'll ask Maciej to do a blog post. Your best bet would probably to take the framework that the PySide has for generating it's Qt wrappers and having it output wrappers that work on PyPy, I think someone actually looked into that.
Or http://docs.python.org/py3k/library/unittest I wish there was a link from the stable Python 2 docs to the stable Python 3 docs and vice versa.
I ran the benchmark and it's about 2x fast under PyPy as CPython (that is, takes half as much time under PyPy). Were you using a different version or something? Do I need to change any parameters?
Thanks for the reply! I tested the linux64 binaries running on Debian 6.0 - they were half the speed of Python 2.7 (Core 2 Duo Xeon, 2GB RAM - physical box). On my windows machine, the PyPy Win32 binaries are still slower, but not quite as much (11.6 secs for PyPy 1.5.0a0, 7.72 seconds for CPython 2.6.4 32bit on a i7 920 win7 64bit). I just ran pypy directly - no optimization flags. The fact that its faster for you means it's very likely a configuration problem on my end. I'll try building the latest from scratch and trying some different options. What would you recommend?
That's pretty strange, FWIW I'm running Linux-64 on Ubuntu 11.04, comparing to CPython 2.7. Total time was about 4 seconds for PyPy and 8 for CPython.
Awesome man! I will have fun playing around with this! I'll let you know if I make anything cool
Awesome, thanks!
build from http://pypy.org/download/pypy-1.5-linux64.tar.bz2 pypy -V says "PyPy 1.5.0-alpha0"
I tested the script again on my Ubuntu 11.04 64bit VM running on my i7. Here are the results. CPython 2.7.1: 9.2 seconds PyPy 1.5 Linux64: 6.1 seconds PyPy is MUCH faster for me in Ubuntu versus Debian and Windows for some reason.
Yes, this is a tad unfortunate, it's unlikely to be fixed though :/
That's extremely strange, I don't really have any explanation for you :/
Yep, that's exactly what I do. You can even use IMAP's idle command to get "push" notifications to your server.
You will. When the provider bans your server's IP because you violated the TOS and suddenly your users are left with a broken website and you're possibly losing business because of it. In other words: fuck you.
I guess you're safe if you're not doing it excessively. You could always use `example.com`, of course.
https://bitbucket.org/voltagex/smsaction Create the config file. execute run.py
There is pygooglevoice, but I'm an Australian so can't test it.
&gt; after reading 200 pages of that monstrosity, I still can't do a damn thing with Python. then stop reading. STOP right now. and start coding. 
I guess "index" would also have to be a literal, not a variable. s = "this is a " "single string" " and I don't need any separators" I don't know that's it's all that useful, but I can imagine there's a few cases that it's more readable.
Hi folks, this project is very very beta. It might have a couple of bugs and I haven't finalized the structure of the created projects. Was hoping that I could get some feedback, suggestions or critisism, in order to make the project more useful. I've spend quite a bit working on this, will be looking forward to finish it :)
Thanks. The best use I can personally think of is this: s = "this is a very " \ "long string" Instead of: s = "this is a very " + \ "long string" Even still, I'm not sure if I like it more than: s = ("this is a very " + "long string")
Well that seems easy enough :P Based on what I read about glReadPixel, I think this idea could be easy to implement! Thank you :)
For the second approach, would the detection have enough accuracy to function in, for example, and rts-style game that does not utilize a grid? I am fairly sure a game like that doesn't require __exactly__ pixel-perfect accuracy, so I think this method might be just what I need! Thank you :)
Thank you for your response! Would this method you suggest be more efficient or more accurate than the methods suggest by tehansen and r4ziel? Honestly, this method does seem more complicated (and I do not have much experience in matrices), but if it provides noticeably improved accuracy than it might be worth the investment. Or perhaps learning matrices more properly would help me in many other ways, and I should just do it anyway. :P
initial feedback: I like this idea. I could see it being useful. Your setup.sh is missing the install requirements step though. The requirements files themselves also show up in the project with the names 'requirements\base.txt' -- I'm assuming this is a byproduct of hardcoded paths on a Windows machine (should use os.path.join)? Also, my own personal preference would be to not have the start scripts install pip/virtualenv, as it is generally already present in whatever environment I'm working in. Not sure how others feel about this one though. anyway, it's a good start :) keep us posted on your progress! 
forgot to add: virtualenv needs --no-site-packages
You can do: s = ("my string is " "too big!") I suppose it actually is a nice alternative to triple-quoting that doesn't suffer the whitespace ugliness problem. Python is probably optimized enough to make the string + string operation at compile time, not at runtime, but if it doesn't, the implicit concat would probably perform better too.
thanks a lot sib! :) ...btw yes I developed this under windows. I'll apply all the fixes you mentioned, also thanks a lot for pointing out the need of --no-site-packages! I reckon I should improve those bash scripts quite a bit. e.g. error handling **EDIT:** I've applied the fixes, I hope that the requirement files aren't showing up as 'requirements\base.txt' anymore! I have left the installation of pip/virtualenv, as I am not 100% if I should remove it yet? Thanks again for your help!
Nice work! I will be very interesting to see how well TK and Idle work with the speed ups. 
i cant consistently spell example.
two i like: Ian Bicking's blog @ http://blog.ianbicking.org/ and The Mouse vs The Python @ http://www.blog.pythonlibrary.org/
how are you actually sending the zip file? The server seems to be not supplying a filename or something, which is causing weird issues (eg, downloads as "Wf3b80AT.zip(1).part" in firefox or just using the url in safari). The file itself is fine (just rename and unzip). (I'm on a mac btw)
&gt; I've applied the fixes, I hope that the requirement files aren't showing up as 'requirements\base.txt' anymore! I can confirm that this is fixed.
The accuracy depends on how you allocate the RBGA color space. If you use RG-BA allocation you could have a 256x256 grid on every shape. Of course you don't have to use a grid, the regions could be hand-made to identify the relevant areas on a shape (think textures). This would maybe allow you to use only the alpha for region identification leaving you more space for shape identifiers.
Beautiful.
Thanks to everyone who helped out. I converted to 32bit Python and was able to quickly generate all the bitmaps (512 * 3) quite painlessly. Of course, when I got through I realized that now some chump (me) had to add all 1500+ files into animation blocks plus add 1500+ scalers to convert the values from 0-65535 -&gt; 0-511. Ouch. I'm going to see if the client is willing to shell out the $800 for my time and beer to pull off the project conversion. Thanks again for all the help.
I read 50 pages of Zelle's book and I've already programmed a few things. 
You need to do a [scan](http://docs.pylonsproject.org/projects/pyramid/1.0/api/config.html#pyramid.config.Configurator.scan) as documented [here](http://docs.pylonsproject.org/projects/pyramid/1.0/narr/configuration.html#configuration-decorations-and-code-scanning).
Any advice how to use this? The email generated just bounces back for me no matter what address I try. Am using UK numbers by the way.
ok, get [a-zA-Z]{6}.
Cool. The more mind-twistingly DSL-like stuff in the presentation might be better seen as an experimental branch, but there's a lot of cool stuff that's been put in there--time stretching, video, and more.
For god's sake, please indent code properly if you're pasting it on reddit. Put four spaces before each line so Markdown knows it's code. 1 from pyramid.response import Response 2 from pyramid.view import view_config 3 from pyramid.renderers import render_to_response 4 5 def my_blog(request): 6 return {'project': 'tricky'} 7 8 @view_config(renderer='templates/foo.pt') 9 def foo_blog(request): 10 return {'name': 'tricky'} and 8 config.add_route('foo_blog', '/blog/{foo}', view='tricky.views.Blog.blog.foo_blog', renderer='tricky:templates/mytemplate.pt') Also, please take the time to learn about [PEP8](http://www.python.org/dev/peps/pep-0008/) to make your code more readable. _Don't_ put spaces after opening and before closing parentheses, _do_ put a space after colons in dictionary literals. BTW, you had a syntax error in the second code sample. You were missing the comma after the first keyword argument.
I think I fixed this now :) forgot to add `response['Content-Disposition'] = 'attachment; filename=%s' %archive_name` thanks a lot for checking if I applied the fixes right!
It's my hobby project, and I would very much appreciate any kind of feedback.
Keep in mind that doesn't work in every browser. Some browsers will use whatever comes after the last slash in the URL (i.e. the "file name" of the "page" they're loading).
UI complaint. Clicking on a checkbox should toggle it. I shouldn't be required to click on the label of the checkbox (chromium, linux - if that makes a difference) Also, in Introduction the opening text is "Django builder "... when elsewhere it's referred to as "Django Canvas". Just in case that's something you missed.
Hi thanks for pointing that out, I'm trying to fix the checkbox problem now. Originally the project was called django-builder, but the domain is taken. I'm out of ideas right now, so I just reused this domain I had. :| **EDIT:** I think I finally fixed it :)
I don't really understand the last example you used with the list parsing; `1, 2, [ [3,4], 5], [6,7 ]` is a perfectly valid statement in Python as tuples are implied without parentheses. &gt;&gt;&gt; x=1, 2, [ [3,4], 5], [6,7 ] &gt;&gt;&gt; x (1, 2, [[3, 4], 5], [6, 7]) 
Of course it is, but the grammar didn't specify that it was allowed (though it would be easy to allow it). To clarify, plyplus *can* parse python, and even comes with a working python grammar, but it's a general purpose parser, capable of accepting any grammar.
Ah, I see. I wasn't paying close attention and just now noticed it was still a `list_parser` method and not a generic parser instance.
I tried to translate 1.4 with the JIT enabled and it ended up taking 5 hours and ending with my laptop frozen. Would pre translated pypy binaries work, and are they available? I was quite interested in pypy, but the huge translation time period is quite a hurdle for a casual programmer such as myself to get involved.
works for me
You might want to stress that in the into of your README, that it's both a *python parser* and a *generic parser written in python.* I was confused as well, because the intro text made me believe plyplus only parsed python, but then your tutorial started building a parser from scratch. Also, an example of how you use the provided python grammar would be great. Looks great, btw. Edit: Actually, your [unit tests](https://github.com/erezsh/plyplus/blob/master/test/plyplus_test.py) are pretty easy to follow.
The only issue is that you need to know the cell-phone company of the recipient. That means when they register the cell-phone number on your site, you have to ask them what company (of those listed) they use. It is possible some of the numbers are out of service and must be updated. If you find out any problem, please let us know.
I've been trying it out on my family's numbers haha. If a random UK number is, say, 07701123456, and the network is O2, then none of the following get through for me: 7701123456@o2.co.uk 07701123456@o2.co.uk +447701123456@o2.co.uk 004407701123456@o2.co.uk Ah well. Perhaps it just doesn't work in the UK. Pretty cool module all the same.
At some point, you would could reasonably expect deepcopy to be faster (as well as avoid circular reference problems / bugs). See the notes at http://docs.python.org/py3k/library/copy.html?highlight=deepcopy (pretty much the same docs for all recent python versions)
Would be nice if this was available as a script so it could be included in a program's build system. I imagine something like this could work similar to libraries like Qt where stub classes are generated which you then subclass to implement the actual functionality.
Thanks, I'll work on clarifying that. There's still a lot of work I want to do regarding the post-processing of the parse-output, to eventually make plyplus a "one-stop shop" for getting text into a desired data structure. One thing I had in mind was a way to search for certain elements in the parse tree, similar to how you specify css elements. So getting the names all functions in a python file would mean parsing it and then just running the search "funcdef name" against it, and getting all *methods* would be just "classdef funcdef name". 
Interesting idea, but it's a service. There's no code, it's not open source. You can't even license the code.
Well, at this time, the service gives you the models.py and admin.py files that you need to generate the admin interface with Django. The idea is that the service generates these files for you instead of doing it yourself. In this sense it's true that there's no more code than these two python files. Django does th rest (which I don't think it's a bad idea, let's not reinvent the wheel). 
hmmm. I never tried uk myself. Sorry. Perhaps they need to activate email2sms service? It may depend on carrier.
Yes, but if the service is done by a script, I want that script.
My nipples explode with delight!
You should post your findings to the PyPy mailing list.
How much memory does your laptop have? &gt; Do not start a translation on a machine with insufficient RAM! It will just swap forever. From http://pypy.org/download.html
what would anyone use this for?
KILL UML WITH FIRE!!!!!
&gt; Plyplus is capable of parsing python, which has a notoriously hard grammar. (Please don't take this negatively towards your code in general, but this statement stuck out for me.) "notoriously hard"? Python's grammar is one of the simpler ones around.
Maybe go through the hassle of packaging it if it solves a problem and put it up on pypi
Go to github.com and dump em all in a repository. 
I would think [Python recipes](http://code.activestate.com/recipes/langs/python/)?
It really isn't. Firstly, python's indentation is really hard on traditional lex&amp;yacc. Secondly, python has a really strange syntax which makes certain parsing algorithms behave oddly.
Tk and Idle will still be ugly and clunky, and no JIT can ever fix that.
There's [Utility Mill](http://utilitymill.com/).
awesome thanks! :)
Well IMHO that is a matter of preference. Some people (i.e. me) like to keep common (and seldom changing) packages (e.g. psycopg2) in the global environment
Gists will also work, if the collection is relatively small.
answer found?????....... in the docs?????? WOW!!!!! :)
I guess I could put it as an option under settings at a later stage :)
Add to that that you can have a home page for every git repository, and you've got just what you're looking for.
I'd suggest that if they're in some way related.
For python: [mercurial](http://mercurial.selenic.com/) is probably better... under [bitbucket.org](https://bitbucket.org/)
I think storrgie meant individually. Perhaps not? 
Today shall be known as Day Zero. Where marketing found a way to cut coders out of the development cycle.
Have you tried examining the source code of the `ast` module or at least reading the comments if you don't want spoilers?
Fredrik Lundh has a good article on building up a [simple top-down parser](http://effbot.org/zone/simple-top-down-parsing.htm) for arithmetic expressions step-by-step.
Maybe start by parsing the data into a tree like such? : http://i.imgur.com/WKbjd.gif This shouldn't be too complicated then you can just apply rules for operation priority.
In fact Python itself doesn't describe indentation using grammars but post-processes token sequences in order to produce NEWLINE, INDENT and DEDENT token from whitespace and line comments. tokenizer.py contains a complete algorithm. Otherwise Pythons grammar is LL(1), so one can parse the language with the most simple top-down parsers.
TIL that Javascript is insane.
yes. I was actually looking for how to do this. that was the question.
hmm, very nice. cleaner then the whole FSA / stack system. Still not as clean as I would like but definitely something for me to start with, once I have a full understanding of how this works I'll clean it up to the way I like it. Thank you.
Very similar to `man pipe`.
But...what's the point? You write to one file, and the contents will either be moved or copied to another file...not really a good analogy to "portals" imho...
hah go me. Master obvious oblivious. 
..declare variable types, use semi-colons and brackets instead of mandatory indentation..
another UI thing - a message after a successful build. I use download-statusbar so I don't have popups when I download and didn't notice that a new file appeared (I was downloading other stuff and I wasn't expecting a .zip right away) and clicked for a second time.
I used to use this trick for SMS. You can even omit the From: header so it doesn't look likes more like a text than an email when it's received. But, I'm going to say: don't do it. Real SMS is dirt cheap. Use a provider like Twilio: you don't have to ask users for their providers (bad UX), they can reply to your SMS (which creates a whole new realm of accessibility possibilities for your app), and you're much more likely to have the SMS delivered. I think it's like, 1 cent per message, $1/month for a phone number. SMS over SMTP gateways is a hack, and unless you're writing a quick script that sends to very few numbers that you already know the providers of, it's not that great of a hack. Just my couple of cents.
How do you receive messages with this solution? Also, don't the texts look like emails?
No worries. I've responded in the same way in the past to similar questions.
I wouldn't call this a BDD framework. The point of BDD frameworks is that tests are written in a language that end users can understand otherwise known as 'executable specifications'.
The pure driver is quite pure Hajime Nakagami answered on firebird-python: I think the most important reason to supoort Python2.5 is "Jython". Now 0.4.1 work on CPython 2.5+(include 3.x), IronPython and Jython. I have never test on PyPy Best Regards
can I download this?
Yes, it is indeed: [http://www.wtfjs.com](http://www.wtfjs.com)
TIL how to refer to the global object in JavaScript: &gt; (function(){return this})() Example: &gt; javascript:alert((function(){return this})() === window) And loggingDecorator is awesome. Whenever confused about the this, use loggingDecorator.
Why is it better for python?
Make a token setup.py and people can easily `pip install -e` it for their enjoyment. I don't bother with otherwise useful code if I can't `pip` it.
[PEP 374](http://www.python.org/dev/peps/pep-0374/) &amp; [PEP 385](http://www.python.org/dev/peps/pep-0385/): Mercurial is the distribution repository that was chosen by the python language maintainers in [2008](http://sayspy.blogspot.com/2009/03/why-python-is-switching-to-mercurial.html?m=1) to be the standard version control system for python. Mercurial is also [written in python](http://mercurial.selenic.com/about/). And there are a number of different [well-known and used](http://mercurial.selenic.com/wiki/ProjectsUsingMercurial) python packages that use Mercurial as their primary software configuration management system.
The other lightning talks are also good, of course. But the Python port of Adventure blew my mind. 
if you're only doing operator prescedence, you can use dijsktras shunting yard :-) 
Ummm ... yea so what? If cpython code devs decided to switch to mercurial (just happens to be written in the same language) this doesn't make it a better piece of VCS for python source code.
Maybe because it's not obvious you can click "Select options"? Maybe make it look more like a button or link.
I was wondering the same. I think the answer is no, but you can get a lot of the other videos from PyCon this year and years past with Miro (just not this talk apparently) :(
don't know how to download it from this website, though you can download it from http://blip.tv/file/4882883 "Files and Links" has download link
Thanks for the response. Yea it does rely on PySerial, but that's already compatible with 3.2. I may just end up figuring out how to do it with just pyserial if I can't find an alternative, or going back to 2.7, although I'm still pretty new to Python and started with 3.2. I'll post if I find an alternative.
You can try to use PLY http://www.dabeaz.com/ply/. It is an excellent and elegant Python lexer and parser generator.
What do you mean? You can [download anything](http://j18.video2.blip.tv/10430008041265/Pycon-PyCon2011JavascriptForPeopleWhoKnowPython954.m4v).
Go with one the Python microframeworks or Tornado if you're going to do a lot of realtime output. Matplotlib can generate nice plots on the server side.
Write it in javascript, not python.
my Python is stronger than my Javascript ;)
started looking into it
For any pythonista wanting to do JS development, I really recommend skipping the JS part and going straight to where the action is, a little language that is inspired by python and ruby, specifically made to fix what is borked in JS: http://jashkenas.github.com/coffee-script/ 
Would "Expectation Driven Development" be acceptable? pyVows reminds me a bit of RSpec, but with less magic, so I'd argue more pythonic. I wouldn't say RSpec tests can be easily understood by end users but it calls itself a BDD framework. Perhaps the wikipedia page on BDD needs updating...
I like CoffeeScript, but you frequently need to look at the compiled source to debug things, and IMHO a good knowledge of Javascript is a prerequisite for using CoffeeScript well.
Almost all of those have to do with Javascript's peculiar coercion rules. Avoid `==` (use `===`) and use `+` carefully and you'll generally be fine.
I sorta started a similar kind of thing a few weeks ago. My approach was to use graphite (via statsd) as a backend rather than RRD (via all sorts of stuff), and to wrap it all up in a nice web interface after I got the hang of the graphing stuff. I got kind of conceptually stuck though, storing data and charting it is easy, and haven't really got far.
If only I'd had that *before* I went to the gym. I though the format would be SWF, which would require conversion, which is more than I care to do. But this is awesome.
Fair enough. My reasoning would be that if the end user can't read the expectations and it can only be understood by the developer, you're just doing TDD with a different framework.
[For the lazy.](http://pypi.python.org/pypi/adventure/1.1)
You might also want to check out [pandas](http://pandas.sourceforge.net/) for handling data and plotting. It uses numpy for data and matplotlib for plots, but handles all of the PITA parts of dealing w/timeseries data. There's also scikits.timeseries which is a little more powerful but also a bit rougher in terms of API.
which, if you read what my question was about, is directly what I don't want to do. I've used lex/parser generators. I want to understand lexing and parsing, not solve the current programming problem. Obviously if I'm solving a problem I should use a lexer/parser generator until a custom solution is the only option because of some outside factor. I'm concerned about what I will do when that outside factor occurs and I need to learn about lexing and parsing AND about optimizing one for some specific problem. tl;dr You answered a question I didn't ask. Thanks though.
Thanks! something new to read. though it's still 'mathy'. I don't know what it is, I understand things after I've played with an algorithm in code and pulled and pushed it around, but plop the math in front of me...and I can't figure it out. I got through most of my math classes in college by implementing the concepts in programming languages first then going back to the math. Edit: Ok this isn't 'mathy' at all. This is *perfect*. I'll still have to create a table of operator / precedence / associativity but it's not to bad, I could set this up in a configuration section with lots of commenting (so I can remember wtf I was doing later). Then plug in some comments about what the algorithm is doing (along with a wikipedia link of course) and maybe some 'and this is how I did x and y to the output to get z) which should be more then enough to get me on with my learning. Thanks again.
Isn't `.*?` redundant?
Why yes, I suppose it is. edit: fix0red.
yea, i think you are right. wouldn't a closer analogy just be a symbolic link?
That's pretty sweet, although I assume the emulation can't be perfect, since isinstance() and id() won't be consistent on the proxy object with the actual returned value (which would potentially break e.g. set membership). I can imagine a lot of high level code that would look a lot cleaner using something like this, but the subtleties of the proxy object would keep me away personally. Still cute, and a very minimalist approach. :) Have you seen the object spaces feature in PyPy? It allows implementation of this kind of thing without the 'hacks', although obviously it's PyPy only.
I love how when he start to explain his mis-use of \_\_repr\_\_ you can hear an loud "OH NO!" from the audience as someone figured out what he was about to say.
Right. isinstance() and id() link to the proxy object, but I figured that most of the time you wouldn't use those anyway. Is there anything I could do to improve it? Why thank you =) I had not seen the object spaces feature before, but it certainly looks interesting. Not that I want to do PyPy specific coding (although PyPy is amazing, don't get me wrong!).
 reddit.downvote sub ^ syntax error. Expected '('
There ya go. 
On second thoughts, identity will never make sense anyway, since the 'real' object lived in some child process and there's no way to compare the proxy with the 'real', so that's not really a problem (I think?). As for isinstance(), well, use of it is often a sign of brittle code, so you could write that off as a non-problem too :P I guess then the only question is whether, if the proxy causes some problem not covered here, it's clear from the exception backtrace / repr() what the proxy is and where it came from. It's too sunny a day for this :) Good luck!
Well actually, the thread/process that the function is executed within gets transferred to the main thread via a Queue, so the object is moved to the local stack, and the other process is shut down. I haven't thoroughly tested this (I pretty much just wrote it for fun/to see if I could), but I'm not sure what kind of problem the proxy could cause. The way I handle exceptions is as follows: If the exception came from the asynchronously executed function, the exception is recorded and reraised whenever the proxy is evaluated. If the exception comes from the proxy, then the stacktrace will show that since the proxy and the executing function are not connected. If you are calling a function on the proxied object and that throws an exception, then the stack trace will reflect that the proxied object threw the exception. I'm sure there are subtleties that I'm missing, but I feel like those are the three biggest cases.
`urllib.error.URLError: &lt;urlopen error [Errno 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond&gt;`
It's a mixture of amazement and the desire to lynch him for such a gross violation of contract.
 import httplib conn = httplib.HTTPConnection("reddit.com") conn.request("GET", "/") response = conn.getresponse() data = response.read() print data conn.close() "reddit is under heavy load right now, sorry. Try again in a few minutes." &amp;#3232;\_&amp;#3232; 
Why?
Because there is already a perfectly working graphing backend, all that is really needed is a nicer frontend to chose which graphs and datasets you want to view. From what I recall, the munin developers are already working on such a frontend.
FYI, this WILL get you ghosted. During the 2008 presidential election, I had another account where I used a greasemonkey script to hide all Ron Paul posts. I didn't read it too carefully...it would not just hide all submissions, but downvote them as well. My account got ghosted as a result. If you don't know what that is, your votes don't count, and though you can post comments and links, no one can see them. If you run the above script often, you'll have to create a new account like I did.
Thanks for the answer
It's not a real script, just my bad attempt at some humor.
Why is this good? What problem is it supposed to solve? There are numerous design and stylistic problems with the code, but overall I think it's just unnecessary and a bad idea.
I think I will continue to use Twisted :-)
Feel free to message me directly with parsing questions. I love parsing 
reddit module? is this real?
For is instance, you could inherit from the type you're proxying. Maybe.
It makes the use of threads transparent to the programmer, and makes threaded functions act like regular functions. Instead of managing the thread yourself, you can get them practically for free. I would like to know what "design and stylistic problems" my code has and why it's a bad idea, since this form has been implemented in at least one language (scheme) with no complaints.
Oh! I hadn't realized Twisted had such libraries. I will check it out. I mostly wrote this for fun, but thought it might be useful for someone.
Thing is, I don't know what type I'm proxying until the function returns. Dynamic inheritance would actually be the ideal solution here (I think), since that would mean that my object would become the proxied object. If you have any ideas of how to do this, I would love to hear them.
You know you can create classes at run-time, right? So you could call type(...) To create a new type with whatever bases you want, and set your proxy object's _\_class_\_ to the return of that. Maybe cache the proxy classes in a dict keyed on the base type.
I don't know about your code, but I just completed my buzzword bingo card :P
Could you format your code a little more nicely? If you're using IDLE, the default VPython editor, indent everything one additional time by selecting all and then ctl-] and paste that in. It doesn't look to me like this code would work at all; is the code doing anything right now? For now, having so many planets is unnecessary; consider posting your code with just one or two planets. 
This looks pretty handy. How often do you find a need for this sort of abstraction? Do you believe that this is better than using list comprehensions? &gt;&gt;&gt; import glob &gt;&gt;&gt; notice = "From root Sat Apr 25 19:23:02 1981\nSys down, 6a-9a\n\n" &gt;&gt;&gt; usermboxes = glob.glob("/var/spool/mail/*") &gt;&gt;&gt; iostreams = map(open, usermboxes, "a") &gt;&gt;&gt; [x.write(notice) for x in iostreams] [None, None] &gt;&gt;&gt; [x.name for x in iostreams] ["/var/spool/mail/colin", "/var/spool/mail/lacco"] 
Thank you. 
So you've reinvented [futures](http://docs.python.org/dev/whatsnew/3.2.html#pep-3148-the-concurrent-futures-module)? :) Anyway, I don't think too much transparency with concurrent execution is such a good idea, considering that most data structures in Python are mutable by default (and your code is completely oblivious to that fact btw). EDIT: Also multiprocessing's Queue works by *copying* memory (rather than sharing), so you may be for a nasty surprise. 
I only cobbled it and the use-case together after seeing the "portal" code this morning and thinking he could have done a better job of making something more useful / flexible (no offense intended). I cannot think of anything where I might go back and replace old code with this module. List comprehensions work well, but they are not as readable. With properly named variables, mine reads almost like plain English. Additionally, if you needed to write to multiple streams regularly (a chat server perhaps?), the module could help tidy things up. Ninja Edit 99: Yes, I think it's better because it's more readable and already handles exceptions for you.
Yes the code works correctly for me right now, I will try what you said and this time only post the sun and mecury revolving around. Here is the code: from visual import * sun = sphere(pos=(0,0,0), radius=6.5e10, color=color.yellow) mercury = sphere(pos=(1e11,1e11,0), radius=.7e10, color=color.blue) theta = 0 while true: r = 10e10 rate(11) theta = theta + 1e10 mercury.x = cos(theta)*r*1 mercury.y = sin(theta)*r 
The indentation of theta before the while loop is wrong, but otherwise as you said, this code will work perfectly. The problem comes when you want multiple planets revolving around the sun. In your original code, you set the rate for each planet inside the loop. This effectively makes the program wait for 1/n seconds before moving to the next movement. When you have multiple rate values in the same while loop, they are executed in serial. Mercury moves first at some given rate. After that, venus moves. After that earth move. So at any given time, only one planet is moving. You might want to consider keeping the rate constant and changing the orbital velocity instead. Or, if the angular velocity is equal for all planets(?), you could group all the planets into one block and just rotate that block.
Right. My point is that it's not possible to make the use of threads transparent to the programmer. Also, there's no benefits to trying and a lot of pain and confusion that can result from it. If you _really_ want this stuff to be transparent to the programmer, you have to get rid of or severely limit the use of mutable state.
Twisted doesn't have such libraries. It does have a [thread pool](http://twistedmatrix.com/documents/11.0.0/core/howto/threading.html) for the rare cases you do need to invoke stuff in a separate thread, but the _normal_ case for stuff in Twisted is to run it non-blockingly in the main thread.
Hmm, I guess I'm not understanding all of my code then...what variables in my code changes the orbital velocity? Also I just tried to put rate() before the while loop and it did not seem to work properly at all. This is my main problem, when I try to put in more then one planet. This code right here will show the biggest problem: from visual import * sun = sphere(pos=(0,0,0), radius=6.5e10, color=color.yellow) mercury = sphere(pos=(1e11,1e11,0), radius=.7e10, color=color.blue) venus = sphere(pos=(1.5e11,0,0), radius=1.5e10, color=color.red) theta = 0 while true: rate(10) r = 1e11 theta = theta + 1e10 mercury.x = cos(theta)*r mercury.y = sin(theta)*r r = 1.5e11 rate(10) venus.x = cos(theta*1.4)*r*1.25 venus.y = sin(theta*1.4)*r*1.25 I can't seem to get the second planet or any planet after that to revolve just like the first red one.
* Rate affects the overall execution speed, not how fast the next 4-5 lines of code right after it will be executed. You probably don't ever need to be changing it, except possibly once outside of your loop if you don't like the overall speed of your animation. * Theta is in radians; this means that changing from 0 to 3.14 causes one half rotation, so adding 10000000000 is way too much. (adding a number small than pi would be ideal, much smaller for smooth movement) * You should probably just be changing theta once per loop, so you have the amount that theta increases per loop in one spot, instead of scattered all over. * You'll be ok if you don't change this, but there's no reason to set r again every single time the loop is executed; instead, you should move it out above the loop. The code in your original post looked worse, but I see now that you do have *'s in your code where they're needed.
I've never used this module, and haven't tested the following code. From what I gather from the docs and examples, the 'rate' command is to limit the maximum update speed to a specified number of updates per second. As such it should only be called once at the start of the loop. I also see that the vectors have a convenience 'rotate' function. So here's maybe an idea or 2 for you: from visual import * sun = sphere(pos=(0,0,0), radius=6.5e10, color=color.yellow) mercury = sphere(pos=(1e11,1e11,0), radius=.7e10, color=color.blue) venus = sphere(pos=(1.5e11,0,0), radius=1.5e10, color=color.red) earth = sphere(pos=(2.5e11,1e11,0), radius=2.5e10, color=color.blue, material=materials.earth) mars = sphere(pos=(3.75e11,2e11,0), radius=1.25e10, color=color.red) jupiter = sphere(pos=(5.5e11,4e11,0), radius=5e10, color=color.red) saturn = sphere(pos=(6.75e11,5.5e11,0), radius=3.65e10, color=color.yellow) uranus = sphere(pos=(7.9e11,7e11,0), radius=3.7e10, color=color.blue) neptune = sphere(pos=(9.5e11,8.5e11,0), radius=3e10, color=color.red) planets = (mercury, venus, earth, mars, jupiter, saturn, uranus, neptune) angular_rates = (4.1506, 1.6255, 1.0000, 0.5317, 0.0840, 0.0337, 0.0119, 0.0061) planets = zip(planets, angular_rates) dt = 0.01 while True: rate(100) # max of 100 frames/second for planet, angular_rate in planets: theta = angular_rate * dt * 2 * pi planet.pos = rotate(planet.pos, angle=theta) 
oh no. I do understand these types of parsing. that's why I'm saying they seem inelegant and clunky. I dislike them a great great great deal because I've tried them and I disliked writing them (though with a generator they seem pretty great). I was mostly looking for alternatives and other options.
Orbital velocity is set by the multiplier of theta that you have in the cos and sin functions for each planet's position. Except it's not orbital velocity, it's the frequency over 2 pi.
Have you tried winpdb yet?
Yeah, this really does have some interesting resources for the budding self-taught programmer. I wouldn't recommend to anyone starting here, but it's a great follow-up and route forward from the [Google classes](http://code.google.com/edu/languages/google-python-class/)
This is blocked at my workplace, can anyone post a summary?
Wow, you are awesome...thanks very much. The code you created had very little errors. Here is what I got from it and it works nicely: from visual import * sun = sphere(pos=(0,0,0), radius=13e10, color=color.yellow) mercury = sphere(pos=(1e11,1e11,0), radius=1.4e10, color=color.blue, make_trail=True) venus = sphere(pos=(1.75e11,0,0), radius=3e10, color=color.red, make_trail=True) earth = sphere(pos=(2.5e11,1e11,0), radius=5e10, color=color.blue, material=materials.earth, make_trail=True) mars = sphere(pos=(3.75e11,2e11,0), radius=2.5e10, color=color.red, make_trail=True) jupiter = sphere(pos=(5.5e11,4e11,0), radius=10e10, color=color.red, make_trail=True) saturn = sphere(pos=(6.75e11,5.5e11,0), radius=7.3e10, color=color.yellow, make_trail=True) uranus = sphere(pos=(7.9e11,7e11,0), radius=7.4e10, color=color.blue, make_trail=True) neptune = sphere(pos=(9.5e11,8.5e11,0), radius=6e10, color=color.red, make_trail=True) planets = (mercury, venus, earth, mars, jupiter, saturn, uranus, neptune) angular_rates = (.0306, .0307, .0308, 0.0309, 0.0310, 0.0311, 0.0312, 0.0313) planets = zip(planets, angular_rates) dt = 0.004 theta = 0 while True: rate(1000) for planet, angular_rate in planets: theta = angular_rate * dt * 2 * pi planet.pos = rotate(planet.pos, angle=theta) would you happen to know how to change the trail color to white? I am using the vPython website for help and its not helping much lol. Could you explain to me what the line planets = zip(planets, angular_rates) is doing in the program?
That c++ fan in the comments seems a little offended that some people also like python.
The super short version of the article (minus the examples, exploit info etc.): # easy_install shodan # Import the class from shodan.wps import GoogleLocation # Setup the object wps_client = GoogleLocation() # Locate the physical address of the MAC/ BSSID address = wps_client.locate('00:1D:7E:F0:A2:B0') The GoogleLocation class is a super simple wrapper around Google's JSON API for resolving the MAC address to the physical location. And what software is blocking the website? Sort of curious why you can't access my website :(
Whatever filter my workplace is using at the proxy level. Your site is classified as "Hacking" material.
Like I said, I haven't used this module; I don't even have it installed! Instead of using zip, the following yields the same result, which should answer your question: planets = [(mercury, 4.1506), (venus, 1.6255), (earth, 1.0000), (mars, 0.5317), (jupiter, 0.0840), (saturn, 0.0337), (uranus, 0.0119), (neptune, 0.0061)] I based the rates relative to Earth's, but that might not be the best scale for presentation. You seem to have changed it to make the outer planets orbit at a slightly faster angular velocity (i.e. rotation in radians per iteration). To make it smoother, you can just use a smaller dt. You're probably not going to get, and couldn't possibly perceive, 1000 updates per second. Edit: In the code you posted, I think you forgot to indent the 'while' suite, and setting `theta = 0` isn't doing anything. For each planet in the container 'planets', theta gets calculated. You could save this calculation by just pre-computing: dt = 0.01 dtheta = 2 * pi * dt planets = (mercury, venus, earth, mars, jupiter, saturn, uranus, neptune) relative_rates = (4.1506, 1.6255, 1.0000, 0.5317, 0.0840, 0.0337, 0.0119, 0.0061) planets = zip(planets, (r * dtheta for r in relative_rates)) while True: rate(100) # max of 100 frames/second for planet, dtheta in planets: planet.pos = rotate(planet.pos, angle=dtheta) 
Check out ["Language Implementation Patterns"](http://pragprog.com/titles/tpdsl/language-implementation-patterns) I can't recommend it highly enough. After reading it I created [interpreter](http://ruslanspivak.com/2011/01/21/tree-based-interpreter-for-tinypie-language/), [assembler](http://ruslanspivak.com/2011/01/23/ast-visualizer-for-tinypie/) and [register-based VM for TinyPie language](http://ruslanspivak.com/2011/02/08/register-based-virtual-machine-for-tinypie/). And all that includes hand-crafted lexer, parser, AST construction code, etc.
ok! I've got the dragon book (first edition) and a few others * Algorithms by Robert sedgewick * Compiler construction by Niklaus wirth * Introduction to computer science by Nance and Naps (i like this one a lot!) and tons of others scatters around. The problem is most of them only give a bit of brief info on parsing (or skip it and present a generator GERR!) or it's simply a tiny part of a much larger section. Edit: Just purchased it and I'm off an reading!
Sigh. Might be websense I guess, thanks.
http://pypi.python.org/pypi/pdbpp/
* [ipython](http://ipython.scipy.org/moin/), Interactive Python Console (tab completion, syntax highlighting, debugger) * [bpython](http://bpython-interpreter.org/), Simpler Interactive Python Console (tab completion, syntax highlighting) * pydoc (included with python), Interactive documentation viewer (console, built-in webserver) * [pylint](http://sphinx.pocoo.org/), analyzes Python source code looking for bugs and signs of poor quality. 
Examples of post-processing the token stream for use in PLY are in my python4ply code, and my earlier GardenSnake code (both on dalkescientific.com). It took a while to get right, but it wasn't "notoriously hard." I would reserve that term for parsing FORTRAN with lex/yacc.
I don't think you fully understand that C++ can also be liked. Edit: I mean, I don't understand why you people are spending all this time talking about how people can like Python when C++ already had people liking it before. Edit2: uhh, /sarcasm?
simpler, and the parameters don't need to be of the same class class CallableList(list): def __init__(self, l): super(CallableList, self).__init__(l) def __call__(self, *args, **kwargs): return map(lambda x: x(*args, **kwargs), self) class Forall(object): def __init__(self, objects): self.wrapped_objects = objects def __getattr__(self, name): return CallableList(map(lambda x: getattr(x, name), self.wrapped_objects)) &gt;&gt;&gt; Forall([" a ", " bb "]).strip() ['a', 'bb'] &gt;&gt;&gt; Forall([" a ", " bb "]).count("a") [1, 0] &gt;&gt;&gt; Forall([1, 2]).real [1, 2] 
Twisted is design for a network application but you are right: can design this stuff with the reactor thread pool easilly. This [threading exemple](http://twistedmatrix.com/documents/current/core/howto/threading.html#auto2) could be written with the inlineCallbacks syntax. from twisted.internet import reactor, threads from twisted.internet.defer import inlineCallbacks def add_two_numbers(a,b): # .... do long calculation here ... return a+b @inlineCallbacks def printResult(a,b): # run method in thread and get result as defer.Deferred x = yield threads.deferToThread(add_two_numbers,a,b) print x reactor.stop() printResult(5,4) reactor.run() Or from twisted.internet import reactor, threads from twisted.internet.defer import inlineCallbacks @inlineCallbacks def add_two_numbers(a,b): def impl(a, b): return a + b x = yield threads.deferToThread(impl,a,b) print x reactor.stop() add_two_numbers(4,5) reactor.run() And if a thread is not the good solution, you can easy switch to a webservice call to do the job. You can also manage error easily. I think I will continue to use Twisted :-) :-)
He seems quite persistent that indentation should *never* be considered better than curly braces.
Kill the way "they" (vendors/consultants/books) have told us to use UML with fire. I believe in minimizing the amount of modeling as much as possible. That's way the input of this service is just a plain class diagram. Nothing else (no profiles, no sequence diagrams, no use cases,...). 
Make sure to try PyDev's debugger as well!
Much better. I was unaware of the `__call__` magic method. Thanks.
So the "Dragon Book" http://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools contains all the knowledge you need. But it is relatively difficult reading.
This is my hobby compiler project and here is a blog post about it: [SlimIt – a JavaScript minifier-to-be is released](http://ruslanspivak.com/2011/05/02/slimit-a-javascript-minifier-to-be-is-released/) Any feedback is welcome.
It's awesome how simple are things like that in Python :D
I wouldn't say that I've reinvented futures, although I can see some similarities. It's not that my code is oblivious to the fact that data structures in Python are mutable, it's that I chose to not do anything special for mutable objects. The idea is that there's little to no shared data between the two threads or that the programmer has taken care of the concurrency issues with semaphores and locks. I guess the fact that the Queue copies memory only matters when you expect the function to return a modification of an existing object. This is a case I chose not to support at first, though now that I think about it, maybe I should.
It's not supposed to be the be-all and end-all solution to threads in Python that magically takes care of everything you could ever think of. You still have to think about shared data and set up locks where appropriate. The reason that "this is good" is because it's no worse (functionally) than using threads or processes explicitly, and in my humble opinion, it's better stylistically and is easier to use. All you have to do is add a decorator to your function and it's magically asynchronous. You don't even have to change how you use it (for the most part). I will admit that it's not perfect and doesn't consider every corner case. Like assignments, for instance. But again, I wasn't trying to make threads transparent to the user, I was trying to make the use of threads to evaluate a function and getting its result transparent to the user.
The problem isn't *creating* the class it's *setting* the class. I don't think I can make my proxy object first subclass from object and then change it's superclass to the proxied object's type. And *then*, I would have to figure out a way to set the value of my proxy object to be equivalent to the proxied type. Again, if I'm wrong, and there is a way to do this, please let me know because it would be a much better way of doing things than the way I'm currently doing them.
how do we circumvent websense. Websense is not always spot on.
[pudb!](http://pypi.python.org/pypi/pudb)
&gt; Look at you, hacker. Sorry, couldn't resist.
Before starting this grammar I did a thorough search and did not find one single grammar which got it right. (not including parses tailored for python) I did come across python4ply and it was the best I've seen so far, but despite how detailed and extensive it was it still didn't cover all the edge cases. To contrast this with a language like C that has dozens of complete grammars, I figured parsing Python might be pretty hard. 
Sounds Interesting, though it's quite ambitious.
If a JavaScript minifier is what you feel like writing, then go for it, though from what I've seen, mod_gzip will give you bigger benefits than any of the many already existing minification tools but without the drawbacks of reduced debugability resulting from minification, etc. From what I've seen the various lint tools available for JavaScript aren't really all that awesome. I'd like something that warns about using e.g. Array.indexOf, which is unavaliable in most IEs, trailing commas (also an IE no no), undeclared global variables, taking closures insode of loops, and a bunch of other common coding mistakes. A good JS lint tool would definitely be useful to me. Either way, good luck with the project and happy hacking.
I believe you minify your JavaScript after every thing has been debugged and tested.
Sure, but then you can't debug a problem on the prod server. And it's an additional build step that can possibly occasionaly go wrong. And the laternatives, reducing the number of .js files and using mod_deflate, give larger benefits.
Though I am new (just started learning JS, so not an expert) but from what I have seen, compacters (like [Closure](http://closure-compiler.appspot.com/home) really cant make a mistake just removing whitespace or just renaming variables to be shorter. Not saying mod_deflate is bad, just saying. But yes, it can be hard to debug compacted code. **EDIT:** Almost forgot, use [Google's hosted libraries](http://code.google.com/apis/libraries/) so it will be cached from other sites that use jQuery.
I countered some of his incorrect statements: http://www.endlesslycurious.com/2011/05/02/praise-for-python/#comment-1129
I'm getting a GoDaddy domain parking page?
I figured it out. Here's how you do it: &gt;&gt;&gt; class MutableType (object): def switch_class (self, new_class): self.__class__ = new_class #Yes, you can actually do this! &gt;&gt;&gt; class Test (object): #Now we need a dummy class to test it with def __init__ (self, x): self.x = x &gt;&gt;&gt; proxy1 = MutableType () #We'll try changing this proxy &gt;&gt;&gt; proxy2 = MutableType () #This proxy is a control to show that we don't have unintended side-effects &gt;&gt;&gt; proxy1.switch_class (Test) &gt;&gt;&gt; type (proxy1) &lt;class '__main__.Test'&gt; &gt;&gt;&gt; type (proxy2) &lt;class '__main__.MutableType'&gt; &gt;&gt;&gt; #We've successfully shown that the type can be changed without side-effects. Isinstance() also works as you'd expect. Please post to /r/Python when you've gotten the other issues resolved. Your asynchronous functions decorator is interesting, I'll have to look at that in more detail later, and the proxy object is actually really useful. I've had situations where I wanted to supply a proxy object and couldn't, so, if you get this fully worked out, I'd be extremely impressed.
Hmm, maybe domain redirection is not yet updated. Check this page instead: [http://packages.python.org/slimit/](http://packages.python.org/slimit/)
I'm worried about bugs in either the deflation code or in the build process. More complexity =&gt; more opportunities for bugs.
aye. I just like code more then mathematical-ish explanations. Seeing how data moves and being able to get in there and break it helps me learn a heck of a lot more. After that I can go back out and make sense of the math. It's a personal failing of mine that this is the only way I seem to be able to get some of this stuff.
I think it's a combination of all of that that gives the ultimate benefit: minification + concatenation + gzipping. You're right about server-side debugging though but the problem can be somewhat alleviated with Firebug or Google extension to "beautify" JavaScript code for debugging purposes and with an extensive unit tests suite.
:)
Thanks ascii, Minification is the main target, but byproducts will include lexer, beautifier and a general mechanism to walk over JavaScript AST which will allow safe source code modification(might be useful when regular expression doesn't fit the bill).
Like I said, just set \_\_class\_\_ on your object, and its class will change. That is all Python uses to determine the class of an object, and it's writable. (Similarly, if you have a class, \_\_bases\_\_ is writable.)
&gt; The reason that "this is good" is because it's no worse (functionally) than using threads or processes explicitly &gt; All you have to do is add a decorator to your function and it's magically asynchronous. Explicit is better than implicit, magic is bad, and broad assertions are always incorrect ;) I think that your approach is a bit problematic precisely because it's transparent -- for a programmer who is going to read and maybe even modify your code at some later point in time (that includes yourself). Some things like glass shards or concurrent parts of Python programs are dangerous enough by themselves, due to their pointy nature; making them completely transparent turns them deadly. On the other hand, if your decorator returned a future object which had to be forced explicitly, via some kind of `get_value()` method, using it would not be that much harder. And you would want to check all places where it was used anyway. And anyone would immediately see that something special is going on here. Unless you can make sure that your magic is 99.9% percent waterproof, you are better off not using it. The number of keystroke needed for writing a given program is only one, and honestly not very important, parameter of a programming language or library.
* [virtualenvwrapper](http://pypi.python.org/pypi/virtualenvwrapper) * [pyflakes](http://pypi.python.org/pypi/pyflakes)
What do you mean by steal? Why do you show us the code if you dont want us to use it? Wtf mate? 
The Dragon Book is not very mathematical. There are no proofs there, mainly algorithms and recipes. It is intended for programmers and not for theoretical computer scientists.
Hear, Hear! I've been bitching at designers for a while about this. If you want me to debug your code, stop minifying it! For christsakes, stop it: -rw-r--r-- 1 emoritz staff 66782 May 3 13:22 jquery-1.6.js.gz -rw-r--r-- 1 emoritz staff 90518 May 3 13:22 jquery-1.6.min.js -rw-r--r-- 1 emoritz staff 232651 May 3 13:23 jquery-1.6.orig.js
&gt;You mean to say that everything in Python is a *reference*. But even this is incorrect, since Python has several literal types (numeric types, strings, None). Those are also references to actual things, but since they are immutable, you can't tell the difference.
Well, you certainly convinced me. Thank God for gzip. EDIT: Wait, if gzipped content is smaller than minified, why is the Firebug Page Speed extension bitching at me to minify my things?
what about minify + gzip? I know it's combining compression systems and they don't generally stack, but minifying is syntax aware and can throw out data where gzip would just preserve it. (likewise gzip isn't bounded by the javascript parser and can compress independant of it). Just hypothesising, it's quite possible the gains are miniscule
Not only are they immutable, they are also not container types, meaning that the concept of immutability is well-defined and easy to grok.
What if you both minify and serve gzipped? It probably won't be as strong a compression ratio compared to non-minified, but it would still be something.
I know, I just feel like I'm not getting it from that point of view. It's just not even remotely 'meshing' for me. The shunting yard algorithm though, that I just 'snap' got once I saw it in action. I had one of those 'well why didn't I think of that, it's so simple!' I'm probably just not spending enough time trying to hammer the ideas through. I'm lazy and looking for a book that explains the problem in the way my brain likes to think =-P I fully admit this is just me not 'liking' the current explanations and descriptions because they are 'to different' for me to figure out. Aka, I'm being whiny, ignore me =-P
Minification helps the overall size and performance. It isn't just time to send over the wire that matters. The Javascript text has to be lexed, parsed and later on executed. The larger that text is and the longer the the identifiers within, the longer those steps take and the more memory is used. Remember that Javascript executes on low end systems now. They will be more efficient working with a 90kb string than a 232kb string. As to how much the difference is I don't know. Mobile browsers are considerably more opaque then desktop ones.
If it's ignorant, why post it here? Why does it deserve our pageviews?
No, it'll never stop because it works. You've missed out the other key file in that set, minified *and* gzipped, which is about 25kb last I checked, so smaller than all 3 of those by at-least over half. Wire transfers are a delicate thing for high-load servers and minify+gz is _very_ common practice. However, during development all JS should be full source, with comments. Minification + Gzipping should only occur at the production level, preferably in a make/build stage. If you're having to debug minified javascript, you're doing it wrong.
And to back this up with numbers, here's jQuery 1.6: unminified uncompressed 232651 bytes minified uncompressed 90518 bytes unminified compressed (gz) 66782 bytes minified compressed (gz) 31614 bytes 
 I tried it, it goes original (50 kb) &gt; minified (29.2) &gt; gzipped (14.5) &gt; gzipped AND minified (13.5). I'm guessing the extra stripped comments and whitespace do make a difference, so I'll keep minification enabled (both for JS and CSS).
Unfortunately, most minifiers pack the string, which increases runtime significantly, as it needs to be unpacked. I try to pass raw scripts to the minifier, but sometimes I only have packed scripts already and don't want to break my toolchain, so some end up getting packed twice.
Actually the article is pretty good.
I just meant don't pass it off as your own. Feel free to use it.
They're both excellent -- do whichever you'd like. If your friend is using web2py maybe you should too, if for no other reason than to have someone around that can give you a hand.
The reason to use Django over web2py is if Django matches your needs better. It's that simple, both are quality frameworks. Infact there are many different quality frameworks, CherryPy, TruboGears, Pyramid, etc. Not to mention micro-frameworks which generally don't include ORMs. If you want something simple you might try a micro-framework such as Bottle, Flask, or Marie. Anyone of these may or may not be what you need.
Google suggested web2py? Funny, when I started learning Python, I was basically in the same boat. I Googled Python web development and Django was the top result.
web2py is definitely the right way to go
If you choose to go for web2py, make sure you watch [this](http://python.mirocommunity.org/video/4052/pycon-2011-web2py-secrets-tuto) and [this](http://www.youtube.com/watch?v=nvvWE2rVnR0) videos, since each of them may already do 90% of what you need and they are easy to customize.
Is Python your first language? If so, you might want to use a smaller framework so that you're not learning the framework before the language. If not, read on. ~~Both~~Most of the existing answers are absolutely correct, and I haven't worked with web2py. But since you asked, I'll offer a few big reasons why I use Django (although I swear I'll get around to trying out web2py eventually): 1. Django is the elephant in the room with regard to Python web frameworks. It's the big one. You might claim it is to Python what Rails is to Ruby. (I don't think this claim is *too* controversial, but if you need proof: [4.67M results](http://www.google.com/search?q=python+django) vs [151000](http://www.google.com/search?q=python+web2py)). This probably means there are a lot more resources out there for you as a budding dev. It probably also means the signal to noise ratio is lower, but *c'est la vie*. 1. Django tries to adhere to Python's "explicit is better than implicit" axiom. web2py doesn't. In fact, web2py's lead [points out](http://stackoverflow.com/questions/4352428/django-vs-web2py-for-a-beginner-developer/4353033#4353033) that this makes web2py code more compact, which I guess is cool if you're into code golf. 1. Django's documentation is *excellent* - better than the docs for Python itself by far. I can't offer an experienced comparison to web2py's docs, but it seems they're basically organized around a book instead of by some more atomic grouping, which IMO would make them harder to use in development. 1. web2py seems to be avoiding conversion to Python 3, which is quite understandable given their commitment to backward compatibility. Whether this counts as a fact in favor of or against Django really depends on your attitude toward the 3.x move -- which you probably aren't even aware of, since you're just learning Python. In fact, just ignore this point. If I were you, I'd try to build an extremely simple application like a Notes app or a blog in each. That won't take too long, and it'll give you a good feel for the app-building process. It'll also give you a feel for the options out there for when you get stuck and your friend isn't around to help. Good luck!
I second this. Pydev is great, especially for debugging!
To be fair, I whittled it down to web2py or Django then googled web2py vs Django and read through several pages of opinions. A lot of them seemed to suggest that Django was more widely used, but the people moving to web2py were much more happy with it after giving it a chance.
Yikes! Long videos. I'll sit down and watch them tomorrow. I've managed to install web2py on my local test server and get some basic apps running so I'm familiar with the back end. I looked into using existing projects licensed under GPL and integrating them together but that is a bit counter productive to the idea of learning from extremely simple building up to very complex doing it from the ground up.
Ones that do nonsense like base64 encode the content are complete waste from a space, efficiency and performance point of view. I've only seen them used to try and hide what the code is doing! 
Python is my first language, but I just haven't been able to think of a "pure Python" project other than stupid little random scripts that have no real use for me. Since I am most interested in web development I decided to try to work through Learn Python the Hard Way, then using the framework along with Python reference sites to build my skills. I am familiar with the Python 3.x move and as recommended by most sources I'm starting with 2.x (specifically 2.6 since it comes with Ubuntu Server 10.04, which is what my local server is running). I am intrigued by Djanogo's larger community and better documentation, but I fear as web2py grows I may regret that decision down the line of I go with the former.
You'll notice that I used "like" three times. Not like three times - actually three times. But serially, I need to install oauth on this mac so I can do some work and not lose my shitty job. Incidentally, I'm not a programmer, I just have a boss who likes to give me these "challenges", such as writing some kind of API monster within a week. WTF, right?
Virtualenv? 
Your mac comes with a version of Python, so that part is done (unless you want to use 2.7 or 3.0, in which case you should google for macports or homebrew and examine the setup path there.) Now you only have three steps left: 1) Go to pypi.python.org, search for and download setuptools (this will put a setuptools-&lt;someversion&gt;.egg file into your Download folder.) 2) In a terminal window run "sudo sh ~/Downloads/setuptools-&lt;someversion&gt;.egg" to install the setuptools package. This will also put the easy_install program into your bin directory. 3) In that same terminal run "sudo easy_install oauth" Done. It should be noted that a lot of people prefer pip to setuptools as a Python package manager, but once you get more familiar with Python you can decide for yourself if pip is a better choice. 
pip?
Open Terminal. cd ~/Desktop/ svn co http://oauth.googlecode.com/svn/code/python/ cd python sudo python setup.py install Done. Import oauth to your heart's content. I don't understand what you mean by confusing. easy_install works on Mac, setuptools works, etc. Where's the difficulty?
This is really solid advice. You will hear people talk about pip/virtualenv/distribute, for now just focus on your code and worry about tuning your environment later. oauth can take a bit to wrap your head around, especially if you aren't a programmer. Good luck!
Are you marrying this framework? Until /dev/null do us part? Sure it's a big decision, but not ruinous in any future situation. You can make the crappiest code in the crappiest framework scale with external tools and spending more on hardware. If you're lucky and successful you will rewrite most of your project at least once, but more likely twice in your first 5 years. You're in analysis paralysis. Flip a coin and go build something.
&gt;Python is my first language. &gt;I haven't looked into Django other than my google searching, but I've read much of the web2py manual I'd like to think we're past the point where I have to explain that I don't know what would be entailed in porting it from one framework to another in the future. I'm trying to save myself a potential future headache with in-depth research.
this worked greeat. Thanks so much for the clear instructions.
I was really hoping this would work, but I got a gateway 502 error. So unfortunately today's prize goes to evgen. Thanks for your help anyway.
And I'm saying that it doesn't matter. It really doesn't. You have no idea you even will have future headaches or what they will be. I've done this a few times and they still surprise me. Right now I have amazing tech and not enough good people. 5 years ago it was lots of amazing people and lesser tech. Some things are slightly better at this than that, but it's not significant. Whichever makes the most sense to you based on the advice in here and your research. If you feel you like web2py, go with it. Is it perfect for you, no. Would Django be, no. Just don't over stress this part and let it hold you up.
yah, I'm just discovering the joys of SSL now. It makes me think that with the huge opening-up of the interphones and the resultant API incontinence, there must be someone who's made a nicely kitted out development environment? Like eclipse but with all the necessary plugs to start banging around with web data.... Or perhaps this kind of stuff is now so routine for programmers that they don't even think about it? 
Just as an FYI - OS X 10.6 includes python 2.6.1 with a setuptools 0.6c9 distro located at: /System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/setuptools - and easy_install (in /usr/bin), out of the box. Still - good instructions if you want the most recent version.
Your first step is to install a quality linux distribution like Ubuntu. Edit: seriously, python programming, and even python development, is so jaw-droppingly easy on Ubuntu. I've had colleagues try to program Python on Mac and wasted days with Macports and whatever else distribution systems they are randomly choosing between.
Your boss sounds a little crazy. Installing oauth may not be your first problem that needs solving.
Thanks, that makes things a lot more clear.
For what it's worth, I think the simplest way to build webapps is tornado and mongo, and I'll write a bit about why I use that stack. Django does so much that it's almost a dialect of Python all in it's own (spiffyman talks about learning the framework before the language), and the big thing is that it blends it's own ORM in. ORMs, and databases are a huge huge part of modern web apps. The big choice to make is, learning how to use an ORM, v. learning SQL v. learning Redis or Mongo. Since Mongo is basically dictionaries and lists, it's pretty quick to understand if all you have is basic python. tornado is simple (like web2py), but does some very complicated things easily, and benchmarks *very* well against every other python framework. It's also very simple to deploy because it has a nice web server built in (ie, you don't have to fuck with wsgi or fast cgi). I've used all of the Python web frameworks professionally, and working with tornado + mongo has been much quicker, simpler and headache free.
Most of this is a bit beyond my current scope of understanding, bit I've bookmarked some pages on mongo so I'll give it a look later.
Django's documentation is *comprehensive*, anyhow. What do you like about it so much?
I'm recommending it especially because I think it's easier to learn.
I'd say web2py, having tried both. For problems the documentation doesn't hit (I do agree that Django's documentation is superior), the Google mailing list is really fast to get back to you. I prefer web2py's ORM and general philosophy. Django has far more plugins / modules / whatever they're called. Pre-written pluggable pieces of code. So if your problem has already been solved, there's more likely to be a Django module for it. web2py (I think) has a lower learning curve. I built a relatively large site in web2py in about half the time it took me to build a PHP site of comparable scope. Python is a lot of fun, and it's a good choice for a first language no matter what web framework you use. Remember to learn the language, and not just a framework.
I use OSX for my work (mainly PHP stuff) ... but I would recommend "homebrew".... https://github.com/mxcl/homebrew/wiki/Homebrew-and-Python
mmm...would this require dicking around to get my internet connection? And given my childhood memories of my dad trying to partition a hard-drive to run linux and a spanking new windows '95....well, I just don't think it's good to curse that much. But seriously, how hard is it to install?
Django. The documentation is hands down the best, not to mention the community is awesome. Third party support is also a very big feature ...not to mention its very easy to learn for newbies. With that being said, for very new python learners I would suggest starting with a microframework like Flask. Have fun! 
that is a pornographically gratuitous number of directories. But after a bit benny hill style cursoring I got there. Now, how do I make it so the python I'm using in eclipse can see the stuff in there?
Use Django.
Preferences -&gt; Pydev -&gt; Interpreter - Python Just make sure you're set to the "Default" /usr/bin/python. This will make use of python 2.6.1 which shipped with OS X 10.6 and grants you access to all the things it ships with. Anything you install using easy_install from the OS X -included python will actually install to a slightly different path: /Library/Python/2.6/site-packages (You may notice oauth there now, for instance.) To verify this is the python interpreter you're using in OS X Terminal, you may want to 'which python' in Terminal and see that it says /usr/bin/python - if it doesn't, you might have installed something which included a different version of python (like macports, fink, homebrew, etc.) Since you're new to OS X, here's another tip: The reason for the slightly different paths: OS X system level components are found in 1 of 3 locations: * /System/Library - OS X system components not generally intended to be modified by the end user. * /Library - The end user modifiable counterpart to /System/Library. If something needs to be installed at the system level that affects all users, it's generally in here. * /Users/yourname/Library - The per-user Library. Each user home directory has one, but its contents are only paid attention to while that specific user is logged in. 
If you're able to click next, Ubuntu will install.
This does not answer your question but still relevant i believe. I was dealing with this same question a few weeks back. The enormity of Django quickly got to me! I have since shifted to Flask + SQLAlchemy(ORM) + Jinja(Template). Maybe being able recognise the different parts of the framework and studying them separately will help you whichever framework you choose. Just my $0.02
[Here's a lengthy article](http://www.mutualinformation.org/2010/03/why-i-switched-to-pylons-after-using-django-for-six-months/) about one developer's experience with Django and reasons to move on from it, in favor of Pylons. It's worth a read, and is somewhat consistent with my own experience. I'm a junior developer. As spiffyman noted, "Is Python your first language? If so, you might want to use a smaller framework so that you're not learning the framework before the language." This was my exact experience with Django. Python wasn't my first language but I was learning Python as I was learning Django. Django has it's own psuedo language that you need to learn. With Django you'll learn how to make database calls without knowing how to write inner or outer joins. You won't even learn SQL or ever see it. The same with the intricacies and gotchas with form processing. It has its own method and syntax which is neat and helpful, but it hides so many details you'll miss normal Python coding. I don't know anything about web2py and am only just starting to look into Pylons, but I think you'd be better off with either of those than Django. The reality is your first few websites might not be world class quality so you're better off becoming more familiar with Python, SQL, and how the web works, than spending all your time learning a humongous framework and its special syntax.
There should be plugins for eclipse, first get [PyDev](http://pydev.org/) for python devel. Now I'm guessing but it sounds like you could end up doing REST calls so have a look here (http://www.ywebb.com/eclipse-restful-http-client-plugin-http4e/) maybe it can help you. Also i like JSON so here's a plugin for that (http://sourceforge.net/projects/eclipsejsonedit/). happy hacking
You are a goddamn prince. The weird directories make me feel like I'm having a psychotic break whenever I try to find something. 
&gt;Django has far more plugins / modules / whatever they're called. Pre-written pluggable pieces of code. So if your problem has already been solved, there's more likely to be a Django module for it. As far as already-available functionality, the most important thing is a powerful auth system which seems to be built right in to web2py. I've skimmed the web2py slices site and there seems to be a lot there I can use/reference. But yea, this seems to be the consensus I've been getting from everyone who's actually tried both.
web2py auth is great. I love decorating functions to restrict access to them; it really makes sense to me. The caveat there is that you might have to decorate a lot of functions :P but there are helpers for it.
Well I'm not completely ignorant at web development and SQL, I just don't know how to actually write in any specific language. I've done quite a bit of work on PHP based web apps like phpBB, Wordpress, Mediawiki etc. Just dicking around in the code of those apps I've managed to do some fairly heavy customization to them so on the web side of things I have a bit of experience. Just enough to know I want nothing to do with PHP development but want to know how to build my own apps from scratch. I wasn't aware of these smaller frameworks being mentioned that would help me focus more on actual Python. It's looking like a much better option the more I read into it. web2py won't be much less simple than learning Django. It's about the same size and scope it seems. Although I think I've started to settle on web2py for the final project when I get it started.
&gt; after a bit benny hill style cursoring So, the single most important favor you can do yourself is learn the basics of how to work at the command line. OS X is Unix under the hood, and all the handy utilities are there or easily installable.
this man speaks the truth. No idea why you went Mac, but that's your problem right there. A significant lack of linux!
Thanks, this might be just what I need to make a quick transition from Python to framework when I'm ready to start on the real project.
indeed. I'm my own worst enemy though....when technical problems arise, and he predictably turns to me, I always make out like it won't be a problem....you know, disarmingly casual about the whole thing. Then I work like snot to do it. The failures have been spectacular. 
Oh dear - I know you're right. And I gave it a go, but a couple of things annoy me which, naturally, I haven't figured out how to change. The central issue is cosmetic. When I'm working at the terminal it puts the name of the computer right there before the prompt, but it's a really long name so the screen looks all messy, and I lose track of where I am. Then I start to get frustrated and antsy, and things go wrong, and I'm worried the instructions I'm blindly entering are going to turn my computer into 4chan's toilet.
Worst case scenario, find someone who knows how to click next and have them install it.
Oh... didn't mean to insult your tech savvy. I updated my original comment. Best with your efforts. I was thinking of trying the tornado/mongo combo described japherwocky.
Oh I wasn't insulted, just trying to be thorough! I appreciate the feedback. EDIT: I meant ignorant in the literal sense. I use it a lot and people tend to take it as offensive or a sign of offense.
You can fix that with a .bashrc file that changes your $PS1 (I think?) environment variable. Google it and I promise you'll find the way without much trouble.
You mean cancel? I only want to install one thing so why would I click next?
You may want to look at a bash config file ([here's mine](https://bitbucket.org/ubernostrum/dotfiles/src/3f5ed74beab7/bashrc.sh)) for tips on how to make that and other aspects of your terminal nicer.
1. [Download VirtualBox](http://www.virtualbox.org/wiki/Downloads). 2. Install it. 3. [Download Ubuntu](http://www.ubuntu.com/download/ubuntu/download). 4. Create a new VM in VirtualBox. 5. Mount the ISO inside the VM. 6. Install Ubuntu in the VM. 7. Mount the "VirtualBox Guest Additions" ISO. 8. Install it. 9. Reboot the VM and turn on "seamless mode". You now have Ubuntu running inside your local workstation. You should do all your Python development inside the VM. Don't forget to use `virtualenv` to avoid version conflicts between projects.
That is an interesting dynamic you've got there. I daren't ask the name of your company, just you know, like, avoid your products ;) More seriously, I hear your pain, Mac can be confusing if you start having to dig into macports and other stuff of the like. Things are about to get funny for you.
Would you report the edge cases I missed? I passed it through all of Python's standard library code and a few other libraries and didn't find anything it didn't handle. If I missed something then there's also a decent chance that one of the other parsers of Python also missed it. I assume by "not including parsers tailored for python" you mean CPython, Jython, IronPython and PyPy, but there's also the syntax highlighter in Pygments and other places which might need some extra test cases.
if you are a python newbie and want to learn python with building a web application pyramid is the way to go. if you are a good python developer, pyramid still is the way to go. :)
Confusing? Maybe. Return a list of generators? Nope.
Some very good info and some not so good. First Mac ports sucks! Do not pollute your drive with that crap. Homebrew has some good points but you can also get Python installers from www.python.org. Home brew might be a better choice but that is for you to decide. I went with the www.python.org version of python because it serves my limited needs fine. Package installers have otherwise been covered and I can't add much. As to the Linux wannabes responding here it is all BS, the Mac is an excellent development platform. After all it is BSD UNIX underneath. 
No need to heed those telling you to install linux; You'll just swap one set of problems for another. Unless you know why you need linux, you don't need linux. If your crazy boss is likely to continue giving you these 'problems', I suggest the following (some of which have already been mentioned). # Install homebrew (https://github.com/mxcl/homebrew) # Install XCode (http://developer.apple.com/xcode/). Not needed for xcode, but for the dependencies it installs. # Using homebrew, install python 2.7 (unless you're targeting an earlier version) # Install virtualenv (http://www.virtualenv.org/en/latest/) # Ensure you have the latest setuptools (curl -O http://peak.telecommunity.com/dist/ez_setup.py &amp;&amp; python ez_setup.py -U setuptools) # Look into pip (http://www.pip-installer.org/en/latest/)
it is unfortunate, but this isn't working. I can install oauth, but not in a directory where the interpreter sees it. It's utterly depressing that it takes so long to try the simplest tasks, and still I pathetically fail. Ugh
Sure, I'll try to find them.
So you more or less wrote what was allready there as [lazypy](https://bitbucket.org/rfc1437/lazypy) ;)
There seems to be law (we will call it "Snirps second law", until it is claimed by some other dude) that the more obscure a language or framework is, the vehemently it is advocated on the internets. Comparisons are usually made from the perspective of the less-used framework/language. In this specific case, i think that Django has no major flaws, is well documented, has plugins for everything, is tested by thousands of users and has a helpful community. Make sure to take those into account when reading comparisons. I am not promoting Django here, maybe web2py suits your needs better. Django might well be the "safe" bet here. As others have said: just get your feet wet. You picked the right language to get started: don't waste too much time on the framework. Get a project done and draw your conclusion.
&gt; Django does so much that it's almost a dialect of Python all in it's own (spiffyman talks about learning the framework before the language) Well, i'd have to contest that. Django has helped me understand Python and does a pretty decent job at being pythonic itself. Since everything is basically a python script, it is a testimony to the versatility. Moreover, you get to zoom in to the workings of a specific module you want to know more about. I learned a lot from studying Authentication and the Templating system.
Executive versions: Django has something called Pinax that you may hear a lot. Web2py has plugin_wiki and Powerpack. Those videos talk about them. Each of them will add functionality including wiki/comments/widgets to any web2py app. Looks like they may be useful for your blog/bbs.
I am as much as a fan of Ubuntu as the next guy, but we should not be lying to people about how easy it is to install. More likely than not, it won't be this easy to install. Every time i've installed Ubuntu, it has not been this easy.
Yeah, you're absolutely right. My mistake, sorry.
You're avoiding Linux because it's hard to install? As a Python dev on Mac OS, you're about to get one hell of a lesson about "ease of use". Nice priority stack.
Dunno why you are getting downvoted. I guess misery loves company.
One of the many nice things about MacOS X is that it comes with a better shell than bash by default. So modifying .bashrc will do nothing for a modern Mac user. 
No idea either. Sure, MacOS is usually less of a problem than Windows, but it can be a hassle to get packages like bcrypt which rely on certain libraries to install in non-Linux environments. Besides, the point is that you can emulate the production environment during development (to some degree), giving you fewer surprises when you deploy the project to a staging server.
Actually there are shortcuts like: if request.function in (...) and not auth.is_logged_in(): redirect(URL('not_authorized')) So you don't need decorators at all if you think you have too many:
I don't have any advice for you, just came to upvote for "confusing as shit tacos". 
I had the same problems. I'm a really technical guy, having written loads of code and used many different OSes, but in the end I just said "fuck it" and installed Ubuntu. Between the three Pythons installed in OS X (native, one I downloaded and the macports one), the millions of different paths things can go in but never come out of and the general "almost-designed-for-this-but-not-exactly", I decided that it wasn't a good use of my time. With Ubuntu, I either apt-get or pip install whatever I need, and that's that.
Eh, I haven't ever bothered to quantify it, but here's a first pass: 1. Django's docs are visually designed better -- i.e., it's easier to read -- than both Python and web2py's docs; 1. They have fairly atomic pages, at least in comparison to Python and web2py's docs. This probably falls under visual design, but it not having to scroll for ages makes them significantly easier to read; 1. For most topics, there are both tutorial-style pages for overviews and hardcore API references. E.g., [topics in models](http://docs.djangoproject.com/en/1.3/topics/db/models/) vs. [the model API reference](http://docs.djangoproject.com/en/1.3/ref/models/). Admittedly the final point is more important for a beginning dev, but I use the tutorial-style docs for new features like class-based views or for things I haven't used in a while. Of course, they're comprehensive as well. That's critical, absolutely. But web2py's docs don't look any less comprehensive (although I can't know that for sure until I try it out).
Don't knock "stupid little random scripts." I have dozens of them for work and personal use. :) You're right to start with 2.x. In that case, let me reformulate #4 above to say that you shouldn't let the fact that Django *is* planning to migrate to 3.x discourage you from using it. I agree with frankwiles that you may be over-analyzing. Your choice of frameworks isn't a lifelong one. You said elsewhere that you've built the example apps in web2py's docs, so do the Django tutorial, make your choice, and then get to building!
Um. Works just fine for me...
The trouble here is most likely the usual suspect: novice users are looking for the shortest possible path from A to B. Without the ability to spot traps (Mac OS) they invariably get stuck in the bunkers (macports, XCode).
I claim your law. It is now andypants's law.
I would definitely recommend installing the latest Python.org python instead of using the default that comes with OS X. For one, you can keep up with the latest releases/bug fixes sooner. Two, you may have issues later on with executable packaging, i.e. py2app (same thing as py2exe if you're familiar).
unit testing...*sad trombone*
Agreed. The pure Python approach of Django, and its general adherence to Pythonic idioms, structures, etc., makes it a great way to learn better Python. Not sure how other frameworks compare on this point.
Hey, I have the same problem, only I installed 3.1.1 at some point, and I can't find setup tools for that. What should I do?
Even if OP goes with Django, I wouldn't recommend Pinax. I toyed with it for a project last year, and while you get a lot out of the box, customizing things like user profiles is a maintenance nightmare waiting to happen. The 0.9 branch is supposed to fix this, but they recently dubbed it a fresh-start branch, so I'm not sure how much of the out-of-the-box stuff is ready to go. I'm working on a similar project now, and we're just piecing it together with [Userena](https://django-userena.org/) and a bunch of other apps. Development has gone *much* faster, and as a bonus we know where all the moving parts are.
Most packages can be solved by: 1) Get setuptools, and install 2) type 'easy_install pip' 3) forget about easy install 4) type 'pip install &lt;package&gt;'
What do you mean by "pseudo language" or that Django has its own syntax? I agree with what you're saying about the ORM, but most ORMs will abstract away the SQL (that's the point, right?), and Django's awfully Pythonic. **Edit:** Unless you're talking about the template language, which is explicitly *not* Python...
I haven't used web2py, but it was in our list along with turbogears, pylons, django, zope, etc. when we were choosing our framework. We needed a cms that non-developers could use out of the box while giving us a powerful framework and not locking us in if we changed our minds later. We chose Django. I use bobo + webob + genshi for my personal stuff since they have low overhead and a very shallow learning curve, plus I don't need a comprehensive cms. From what I gather, web2py is strictly MVC (like Ruby on Rails) where Django is a bit more free-form in coding style. We really like Django's context processors, forms, and middleware too; they let us rapidly develop from the consumer side of the site (where revenue is generated) instead of relying too much on backend development which isn't a primary source of revenue generation.
Left click on mouse don't work.
I would change how you represent the effort so you're not constantly shooting yourself in the foot, but I think you have the right attitude. When it comes to work, I'm mostly Mr. Yes. I almost never turn down a sticky problem. Consequently, I'm the guy they tend to turn to with problems that aren't cookie cutter problems,; and a surprising number of the problems are not easily categorized. My standard platform X purist co-workers think I'm crazy, and that's just the way I like it.
I picked web.py for my [own reasons](http://www.reddit.com/r/Python/comments/go9wc/ask_python_why_are_lesspopular_web_frameworks/c1p2c29). I wrote an example application that hits many of the main features I needed for doing general web development and [released it on github](http://github.com/DaGoodBoy/webpy-example). I am more sysadmin than programmer, so I built the example for deployment under Apache/WSGI + PostgreSQL on Debian/Ubuntu. Don't know if it helps or not, but I figured I'd toss my opinion in the ring.
I see, then put it under BSD or MIT or even GPL so we know. 
Most people don't consider Django's code to be very great, many of the errors it throws are very hard to decipher if you're not familiar with Django, and you end up writing as much ORM / templating / settings code as you do python. Even the controllers are a lot of code that's only used in Django projects. You're saying, "oh well it's written in python so it's versatile, and also you can read the code." Well no shit, but that also applies to every single other python framework. It's not terrible, but it's really not particularly *good* for learning Python.
I'm not sure what this is getting at. I'm also not sure how a book that not only physically resembles a bible, but content-wise is as close to a Python standard library bible as you can get, could be a "part of the problem". Sure, it would be great to update a 1500 page book comprised of years of writing for a version change, but almost all of the contents of this book are relevant and accurate for 3.x. The book is about the standard library, and outside of a few choice renames, you can pretty easily apply the examples and contents to 3.x. Yes, there will be some `str`/`bytes` differences that receive zero coverage, and that's not awesome, but that's what the second edition is for. If you want examples of `zipfile` usage in just about any version of Python ever, the coverage for both versions is the same. If you're doing `email` stuff, then you have to pay closer attention to the versions. ps. This book is better than the documentation.
It just seems like everyone says the Django docs are good, but nobody talks about what makes them so good. There are definitely a *lot* of them, but that's always made working with them a bit tedious for me. Which is good, since the code relies on a fair amount of magic to work, (ie, name this file this in this directory) and is complex enough to make reading the actual code impractical. Without pretty extensive docs, I don't think Django would be very usable at all! But I'm not convinced it's a feature so much as work required to offset a flaw? To each their own. :)
&gt;all the handy utilities are there or easily installable ironically enough, the few times I've used an osx laptop, what tripped me up was that it mainly *didn't* use the standard GNU command-line tools. They either had different names or different command-line options.
I struggled a lot with Django documentation. I found myself referring directly to the source code for an explanation. The documentation seems to contain examples and no real explanation of what is possible or where autogenerated variables are coming from.
I've used PHP frameworks before trying both Python and a framework at the same time. I tried to get into Django, but for some reason I didn't like all the magic, and really couldn't get behind it. Web2Py, however, made more sense to me as far as how it's deployed on say a Linux server (tho you may struggle a bit if you do something like making it run on something other then it's built-in web server like Apache or Lighttpd (which was my case (lord, triple nested parentheses, I am a programmer))). Anything I was looking to do which I was so used to doing in PHP without thinking twice was very easy to just pick up quickly on the site docs and do.
That's because it's derived from BSD, and so has BSD tools rather than GNU. Not too difficult to get used to, really, and if you get really lost you can always go and install GNU versions of stuff.
&gt; ... Python 2 is still likely to be the primary version of Python used ... Definitely with that attitude!
Oh come on, it's not that simple. [Which version you ought to use is mostly dependent on what you want to get done](http://wiki.python.org/moin/Python2orPython3). 
You're getting a lot of good advice in other threads so I want to use this thread to nip something specific in the bud. Be forewarned that there is a lot of angst out there aimed at web2py because of some design decisions that don't sit well with various other members of the python community. As far as I can tell (I haven't tried web2py myself and am basing this on my observations of past discussion threads), the biggest point of contention is that the framework adds a couple of extra objects into the global namespace (`request`, `response`, etc.) automatically for you instead of forcing you to import them manually. People who have dark memories of PHP's and its globally namespaced standard library of doom probably faint at the thought of a framework automatically introducing more globals, but I personally actually think this is a good idea as long as the number of new globals is small, and actually justified by being needed in more than one place. Besides, if web2py claims of backwards compatibility are to be believed then they by definition can't add any more globals as this might break older apps that use said names, so you don't have to worry about installing web2py 1.next and suddenly seeing 10,000 `web2py_real_response_dict` globals. Don't get me wrong, as someone who mainly slags CakePHP and Django there _are_ things that bother me about web2py at first glance. However, the ugly truth of web development is that you will usually find a list of things that bother you about nearly any framework out there, if not immediately then shortly after the honeymoon period, and you could probably do (much much) worse than either of your two selections. Try both (or more) and see which one you like better. If all else fails, flip a coin.
This is excellent, and as a side effect it will produce a pure Python version of numpy which would be useful in several less common Python environments. 
Can you give a tutorial on how to write a library in RPython to be benefited by jit? I think if people can start writing high performance library in pypy it will attract much more people to look at PyPy. 
there is now a blog post about numpy: http://morepypy.blogspot.com/2011/05/numpy-in-pypy-status-and-roadmap.html
Great! Thanks for letting me know.
You missed the part where Doug worked for ten years to compile the content that's now in this book.
Much upvotes. I don't use Mac (I actually really loathe the platform... I'm just saying :-) but, in general, Virtualenv is an utter *lifesaver* when dealing with custom Python jobbery (especially when you're developing libraries, or having to go "off the rails" in other regards). I have friends who have gone from more pure *nix worlds to Macs and they find Virtualenv an utter godsend there. Of course, it's a godsend elsewhere :-) 
it's a bit tricky because we lack separate compilation (you have to translate pypy together with the library which sucks). I guess reading series of blog posts about writing a BF interpreter. The essential idea is that you need some sort of an interpreter, with part that's a compile time constant and a part that is not. http://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html and http://morepypy.blogspot.com/2011/04/tutorial-part-2-adding-jit.html
not completely, this is an RPython implementation, it wouldn't be of much use outside of PyPy
I was having trouble coming up with the right term. japherwocky described it better as a dialect of Python. 
Thanks a lot for posting this! How difficult would it be to implement just the core features of NumPy in RPy (like the ``array`` class)? I think once that's done it should be fairly easy for anyone to contribute any of the additional NumPy modules, particularly if they can now be implemented in normal Python instead of as C modules (some already are).
Would it be pure Python or RPy?
array class (with all the features, including say memory views) is quite a bit of work. not sure how much, but it's very gradual (you do this and it works, then that etc.)
I think I will try installing Django just to give it a shot, but the general consensus around here seems to be the same I was finding on Google. People who have experience with wep2py seem to mostly lean towards that. I wasn't knocking random little python scripts as much as saying I can't think of one I have any use for in the real world :(
I don't have any RPython experience, but I'd have though it'd be much easier and faster to work with than pure C.
in short: yes :) that's why we did pypy in RPython and not in C (also RPython is easier to test and analyze)
I'm a NumPy user (i.e., I use it a lot by I've never dug deep on its code) and I have basically no experience with PyPy and RPython (mostly because all code I write depends on numpy). From what I gather from the BF interpreter posts, this would be slightly harder than just "reimplement numpy in rpython", as you'd have to write the code in such a way that the JIT can speed it up greatly. My question is: assuming no previous experience with pypy, how hard would it be for someone to start contributing to this meaningfully? I'd LOVE to have numpy working with pypy, but I'm afraid that if I tried to help right now I'd end up doing more harm than good...
you should never refuse to participate based on grounds that you're not good enough. come, ask, we'll find you something, it's easier than you think, although learning is work. If the only outcome is "I've learned something" that's a win-win situation.
Is RPython not a proper subset of Python?
Yes, but all the APIs make it really unusable outside of PyPy. It's still perfectly runnable, but some functions are only simulators anyway.
He's doing better than my pro-Ubuntu post. Sitting at a cool -1.
Why don't you just use Mac's version of aptitude?
Okay, thank you! I've downloaded the code and I'm taking a look at it. Hopefully I can find something easy enough to get me started.
&gt; I'd LOVE to have numpy working with pypy, but I'm afraid that if I tried to help right now I'd end up doing more harm than good... You might be interested in [this thread](http://news.ycombinator.com/item?id=2510964) from HN.
Isn't RPython a strict subset of Python? 
I can't even tell how excited I am about the possibility of Numpy getting support in PyPy. A lot of my code does number crunching with Numpy and the ability to use PyPy with it is just win-win. :) I wonder how close getting OpenCL support into PyPy is. I guess it's just a matter of proper Numpy arrays and OpenCL bindings.
the problem is, I've been way too productive since I started coding in python full time. they are about to revoke my coders union card. that's a problem
It supports Sassy CSS _only_ (no love for the original Sass syntax). Additional features: &gt; pyScss is fully compatible with SCSS (Sass) 3.2 ...it has: &gt; &gt; * Compass: Compass 0.11 Support &gt; * Nested rules &gt; * Keyword arguments &gt; * Mixins: @mixin, @include &gt; * Functions: @function, @return &gt; * Inheritance: @extend &gt; * Conditions: @if, @else if, @else &gt; * Loops: @for, @each &gt; * Variables: $, @variables, @vars &gt; * Sprites: sprite-map(), sprite(), sprite-position(), sprite-url(), ... &gt; * Images: image-url(), image-width(), image-height(), ... &gt; * Embedded (inline) images: inline-image() &gt; * Colors handling: adjust-color(), scale-color(), opacify()/transparentize(), lighten()/darken(), mix(), ... &gt; * Math functions: sin(), cos(), tan(), round(), ceil(), floor(), pi(), ... &gt; * CSS Compression: @option compress:yes; 
I think that is a *good* thing.
Great stuff. Let's just hope it will support sass syntax (whitespace aware, no braces) soon as most Python folks will find that more appealing (including myself).
We do something similar - but it's a serial keyboard so it's completely different I/O. Does the USB number pad show up as "keyboard" or as serial device?
&gt; After all it is BSD UNIX underneath. Yes, and that's all it takes. Derp on
I actually prefer the CSS syntax because it's less of a context switch when you have to work with vanilla CSS too. I certainly prefer CoffeeScript over JavaScript, though.
show up were? in windows i look in device manger and it is shown as a HID keyboard device as well as other categories. I'm not sure what you mean.
i wonder what support is really needed for win2k? it seems like if it runs on xp it should run on 2k.
They invented `hg backout` so we don't worry so much, you can't do that much harm :), and there's a very good chance you'll help us out, which we like.
not sure what you mean here, comrade. Do you want to give me a lesson in installation of linux? What would be the benefits of spending the time doing it? Throw a few rationalisations at me....
Oh no! This can't be happening!
yeah - exactly. I like working on problems that are outside of a particular 'framework'. I work with a lot of high-finance blowhards....whenever there's a left-field problem all these guys piss their pinstripes. 
Ugh. _Finally_ reStructuredText support. Let's hope Jinja2 support will be next. But seriously: good work, guys!
Mostly true except in a few corner cases involving unicode handling. As a big part of the whole py3k thing is unicode everywhere I'll bet they're having a hell of a time with it.
Exactly. You would probably like languages like [K](http://en.wikipedia.org/wiki/K_%28programming_language%29), [J](http://en.wikipedia.org/wiki/J_%28programming_language%29), and/or [Q](http://en.wikipedia.org/wiki/Q_%28programming_language_from_Kx_Systems%29) if you're working in finance.
Yes, I suppose I did. I'll have to check it out in more detail.
I've never really understood how licences work. Should I just say that it's under GPL? Or do I have to do something special?
There's some differences in constants and functions that would be easier to support without `ifdef` dances based on version. Plus, if I remember correctly, there are a number of functions that are conditionally loaded and used via `GetModuleHandle`/`GetProcAddress` that would be nicer if we could just always depend on them being there.
When was the last time you tried? I've used Ubuntu since 8.04, and I agree, installing drivers and getting wireless used to be a pain. In the more recent releases, it's gotten much better. Natty Narwhal (11.04) seems to be even easier. I haven't had to worry about getting any drivers installed as it takes care of it all automatically.
2GB of RAM
I'd use it if it had `pyScss watch` to automatically compile and an optional config file to store in the directory telling pyScss where it should find scss files and where to compile them. Until then, compass is easier to use.
I would rather try to steer you away from development work. You are clearly not suited for it.
Not to sound rude, but I'm starting with numpy, would I be able to message you when I have a question?
Feel free to pop by #pypy on freenode, I'm sure we can find you something (I'm Alex_Gaynor there).
This makes me glad that I've haven't upgraded to Python 3. (Windows 2000) Edit: Why the downvotes? I'm not offended. I literally laughed out loud when I saw the -2 pts. Just curious.
I have not heard they are having "trouble" with it at all.
Is there a pypy-beginners list or something like that? I tried irc, but I accidentally pasted a patch in there and was banned. I wrote one patch implementing len() and one fixing an off-by-one in getitem, but I'm currently having some trouble writing a test that checks if an exception was raised. "raises(IndexError, a.__getitem__, 5)" properly fails if IndexError isn't raised, but it *also* fails if it *is* raised.
You weren't banned, but you were muted to prevent the patch, you should still be able to talk, if not PM me on IRC and I can unban you (banning you was never the intention, just to prevent the flood).
Sure, though there's probably a lot of people that understand a lot more about numpy than I do here in /r/Python.
Took a look at your code. I'm not sure about all your problems, but I found a few. I'm not an expert, so take this with a grain of salt. first in your engine.py startup function you do this: self.background = self.resources['bg_image'] this makes background a reference of resources['bg_image'], not a copy. So if you change background, which you do in rune.py, you also change resources['bg_image']. try: # make a copy of resources['bg_image'] self.background = self.resources['bg_image'].copy() Also in rune.py (line 74) you reassign background to surface, background is no longer in reference to self.resources['bg_image'] anymore. These are some things to look at. If I have time later, I'll take a deeper look at it. 
This would be pretty cool...but for more than just pygame... I'm toying with the idea of writing a game in python, but don't intend to use pygame. What's your site? Do you have any content up yet?
Munin doesn't do realtime output so why bother? You incur a lot of overhead in development effort when going with an async framework.
Just wondering, is the separate compilation a planned feature? 
Pipe down, asshole. I'm not a developer, I make no pretension to being one of the grey-faced drones who pump out shitty code for shitty products. I'm just trying to solve a problem here, and it happens to require a bit of coding, so I learn what I need to solve the problem. It's not software development.
Well, I don't work in finance, but the stuff I do involves people who usually think in finance/economic/legal terms
Not sure if serious.....
Sort of, we'd like it, but I don't think anyone has a plan for it at the moment, and it's not necessary for a lot of things (especially as we continue to make RPython less and less necessary by making Python faster and faster).
blog link? nemmine. [found it](http://inventwithpython.com/blog/).
It's hard.
Al, I came across your book and I haven't read it yet, but I commend your efforts. I think this will be HUGE and very helpful to many people in the coming years. What a great way to learn. I love the concept, and many thanks. 
Could I have some ideas for tests and the like before I'm tempted to put it on PYPI? Someone suggested that I write it in Cython, which I'll look into, but I thought it might be useful for anyone that wants secure hashing and isn't happy with hashlib's limited selection. There's already a pure python implementation of whirlpool, which is fantastic, however because this one is in C, it is literally about 400x faster. a C: 8aca2602792aec6f11a67206531fb7d7f0dff59413145e6973c45001d0087b42d11bc645413aeff63a42391a39145a591a92200d560195e53b478584fdae231a Python: 8aca2602792aec6f11a67206531fb7d7f0dff59413145e6973c45001d0087b42d11bc645413aeff63a42391a39145a591a92200d560195e53b478584fdae231a reallyLongSTRING C: 9337a456488210966bca611ff070994c8fc0a314f925b1c52c5458d9cbf7d285495cc6c5ed24fa7cd843ddad95a1399723d4aa44589d7dacab54d40b51b437c1 Python: 9337a456488210966bca611ff070994c8fc0a314f925b1c52c5458d9cbf7d285495cc6c5ed24fa7cd843ddad95a1399723d4aa44589d7dacab54d40b51b437c1 somethig*&amp;(*&amp;Withweirdchars C: e3f82ec84bd91e807d9b3a54fd26c06a86f1048490b95b293f141e5c87bcb877e279049d03d2d1e24e1251425ab69fae9aad020e7fdac5fc729e39b2839e15d6 Python: e3f82ec84bd91e807d9b3a54fd26c06a86f1048490b95b293f141e5c87bcb877e279049d03d2d1e24e1251425ab69fae9aad020e7fdac5fc729e39b2839e15d6 POTATO C: 6c5d2756909a7ce72daffc01e8151f11db85f05fbbbfe64ac50006617a302542724ad43a79cf7488d2c72bf07f1aea0ba8d21dee7428ec72cdd9b5962e383da6 Python: 6c5d2756909a7ce72daffc01e8151f11db85f05fbbbfe64ac50006617a302542724ad43a79cf7488d2c72bf07f1aea0ba8d21dee7428ec72cdd9b5962e383da6 Hashing "TEST STRING" for a total of 16384 iterations Python version: Total time: 34.061111927 secs C version: Total time: 0.0481641292572 secs Much thanks to the people in #python on freenode.
I could be completely off, but my understanding of the .clear() function is that it requires a reference to an unaltered surface so that it knows what to fill into the areas where the sprites were. So maintain a copy of the background without the sprites on it and pass that into the function. 
No offense intended, but that's probably because your comment is totally uninteresting, and also because your reason for being glad is totally incorrect (version 3.0..3.2 should work fine in Windows 2000).
if you take a look at its github repo, there's a ticket for that already https://github.com/Kronuz/pyScss/issues/1
It's too bad it takes such an event for the maintainers of the active and working VMS port to come out of the wood...
This is a cool idea, I've always wanted to make my own games I've been thinking about learning Python. Going to have to check this out when I have some free time.
Thanks for answering, but I don't think your explanations are correct. Uninteresting comments are ignored, not downvoted. Believe me, that's not my first totally uninteresting comment. Second, there is nothing correct or incorrect about my comment. I didn't state or imply that version 3.0.. 3.2 won't work. My guess is that I offended people by not endorsing Python 3.X.
I know that good engineering is about taking things *away* instead of adding them, but how about better support for Windows in general?
According to the tracker, Jinja is planned for post-2.0 (Mako for 2.0, Genshi for post-2.0) There is a tracking bug for each of those on Jetbrain's YouTrack, you ought vote on the bugs you're interested in (not that this is the primary driver for features, mind you — the Jinja and Mako tracking bug are at second place with 30 votes each — but I'm sure it still helps)
Aw, shucks. Seeing what they did with reST (which went from zero to full integration), I guess they just don't want to cut corners and support Jinja etc to the same extent they already support Django templates, so that's fair enough.
&gt; Seeing what they did with reST (which went from zero to full integration) After using it for a few hours, it's not quite "full integration" yet (there are a bunch of bugs, the 2-args `:param:` info field does not work right, it does not understand that `:type:` and `:rtype:` can link to types, that kind of stuff). But it's an alright start.
Python doesn't have good Windows support in general?
Isn't "Early Access" a fancy name for a public beta? What I meant by "full integration" is mostly the existence of language-specific code intelligence in addition to the syntax highlighting (which is all you get for non-core languages in most IDEs, e.g. Komodo).
&gt; Isn't "Early Access" a fancy name for a public beta? At Jetbrains, it covers the alpha and beta lifecycles basically.
Python has great support on windows.
Maybe you could turn it into a patch to hashlib instead? In the standard library is even better ;) I also wonder why you didn't use Cython, might be less work for the same efficiency?
It doesn't even set the PATH, or have a GUI that is actually more convenient than just a REPL.
The first of those is the job of the installer or package management, the second is an IDE which is also not the job of Python itself.
Of all modern scripting languages, Python has by far the best support for Windows.
I wasn't really making a comparison. Thanks for the input though, I'll keep it in mind.
Excellent work. Are you aware of Cython, it can make building C extension modules much easier. 
Sass and Compass are great. The only rubyesque tools in our mostly python shop, but they are worth the dependencies. Good luck to pyScss too.
It does set the PATH and even PATHEXT IIRC (*edit: weird, it does not right now for me, I could've sworn...*), and it has IDLE.
No, the shortcut to IDLE sets the path. The PATH is not set in cmd.exe. Try it.
Weird, you are right. It does make .py files executable though.
&gt; Get Ruby, PHP and Python apps in the cloud with just a few lines of code. The cloud is getting crowded.
Good to see your work. However I'd suggest you to try using ctypes next time, especially if you've got something non-performance critical (I don't know how well does ctypes work on cpython). This way your code should work on cpython 2, 3, pypy and probably even some other implementations too.
There's also [LESS](http://lesscss.org/) which apparently is now a client-side JS script (or server-side node.js), used to be server-side Ruby. Sounds neat but potentially slow, though their own site uses it client-side and seems to instaload.
This is something we're working on. I plan on adding an option to the installer to add Python to the PATH. There's discussion on a new launcher that will work similar to how she-bang lines work on *nix systems. We're trying to keep up with what people have increasingly been asking for. Looking back through the tracker, there's really not many people asking for PATH addition, and that might just be because people got used to it. However, within the last year, some of those bug reports have been reopened with new comment, and I've talked directly with two authors/trainers about Python on Windows and their #1 gripe is the lack of PATH setup for first time users. Newcomers don't enjoy when a tutorial says "Type `python`" and they get "`'python' is not recognized as an internal...`. I think the reason it took so long to get to this point is that Python use has grown much faster on the outside than it has on the inside. What I mean is, the same core developers are using Windows while 726,267 outsiders downloaded `python-2.7.1.msi` [in the month of April alone](http://www.python.org/webstats/usage_201104.html). I actually think the number of core developers may be less than it was a few years ago, although there's no stats on that (just going off of names I remember seeing that I don't see anymore). What that boils down to is that a lot more people have a lot more bugs, want a lot more features, and have a lot more gripes, while the same or less people are dealing with that workload. When I speak of growth, I should also mention that that the areas of use have grown as well, and the landscape of these areas are changing a lot as well. Big IT departments love to have control over everything they install from the outside, and I can see a lot of them loving the lack of a PATH addition so they can handle it themselves in a way that they can ensure works with all of their existing software. Big places like that also do automated rollouts and have custom images ready to burn for their employees, and full control over the path was probably great for them. Nowadays, Python is making its way into small, medium, and large shops where Python use is more independent (meaning the users are more on their own, likely to submit bugs on their own, rather than internalizing it all in some megacorp), and a lot more of that landscape is do-it-yourself -- if you want Python, install it. No more PATH handholding, you're on your own. Because of that, and because of the lack of resources on the development end, we probably haven't been able to keep up with some of this stuff. Maybe people really wanted the PATH insertion 3 years ago, I don't know, but we're trying to get it here and now.
Keep getting better and better. Too bad its soo good Im willing to pirate it. 
It's PaaS on top of Amazon AWS.
Diaf
Is it normal to go through a SHITLOAD of trial and error, and nearly re-write the program a couple of times? Hahaha. Yes, yes it is.
Just install Macports. Then you can just install packages from the macports repository (just like you were in linux). for example sudo port install py27-numpy Would install NumPy for python 2.7 Macports.org
Instead of generating a random number, check out the random.choice function that takes a sequence and returns a random element. EDIT: just noticed this idea conflicts with your use of linecache.
Macports or Fink. :-) Either works. I'm fond of macports myself.
This is indeed normal. As you practice you will get better. The program looks good.
I preferred LESS' syntax greatly before scss was released. The old sass syntax has too many warts; there's not much between them these days. I was a bit skeptical at first, but the less js implementation is really nice to work with; there's no need to run 'blah -w' or 'blah watch' while developing, because the page actually loads your less file and the js lib takes care of it css compilation. When you go to production with it, you can use less (via node) to compile a css file from your less, fully minified, etc.
In case anyone is interested, I've bought a few ebooks from Packt because their titles are interesting, but none of them are formatted in a way that I can read the code samples on a nook color. Trying to get them to address this for the last 6 months haven't gone anywhere.
too bad it requires Java 6 on Mac
In case anyone is interested, I've bought this ebook from Packt because the title interested me, but it's not formatted in a way that I can read the code samples on a nook color. Trying to get them to address this for the last 6 months hasn't gone anywhere.
Just put a LICENSE.txt or COPYING.txt with the content from here http://www.gnu.org/licenses/gpl.txt and put your name instead of "Free Software Foundation" after the © sign at the top. 
Use the Python Package Index via the 'pip' tool. First uninstall the version in the Ubuntu repo. Then sudo easy_install pip sudo pip install scipy 
I didn't know much about it. Are there any good tutorials? How would I rewrite the extension using it?
I am now. Know any good tutorials?
Is ctypes the same as cpython? What exactly is ctypes? The thing about hashing is that it *is* very performance critical. There's a pure-python implementation of it, and the C version is around 400x faster. And with hashing, you want to be able to do it as quickly as possible, so that when you stretch it, you can stretch it a huge amount without impacting your application.
Ho well does PyCharm work with all files being remote (via SSH/SCP)?
There really aren't a lot of good ones, but go look at the Sage project. They probably have the largest amount of Cython code in existence and most of it's pretty literate.
Wake me up when windows support ends
You did a great job. A working program is always a great outcome :) Want some more fun / things to learn about python? Try this as a replacement for your print_board: def print_board(wrong_guesses): board = """ ____ | | %s | %s%s%s | %s | %s %s | | ======= """ parts = list("O\\|/|/\\")[:wrong_guesses] if (wrong_guesses == 2): parts = ["O"," ","|"] #fix the out-of-order 'head plus neck' stage print board % tuple((parts + [" "]*7)[:7]) Technically, your version is "more pythonic" in that the ideal goal is easy to read and understand code. But if I didn't try to make mine as compact, it would still be valid. In addition, it has the bonus that my version of print_board will not error out if you give too large a number for wrong_guesses. And in the meantime, it can teach you about: * Commenting your code * [List slices](http://docs.python.org/tutorial/introduction.html#lists) * [String formatting](http://docs.python.org/library/stdtypes.html#string-formatting) * [String escape codes](http://docs.python.org/reference/lexical_analysis.html#string-literals) * And, as a side effect, [tuples](http://docs.python.org/library/functions.html#tuple) - as string formatting needs them Congrats on your code :)
Yeah, because 90-something% of the computers in the world aren't important at all.
osx comes with the proper java runtime.
To build packages you'll also need python-dev. Run this first and all should go well. sudo aptitude install python-dev
First of all: congrats on the code, looks awesome, specially for a first attempt. Here's what I would recommend: def intro(): username = raw_input('What\'s your name?\n') return username Could be def intro(): return raw_input('What\'s your name?\n') There are several examples through your code where this sort of change can be applied. Then the change suggested by pudquick, definitely the change suggested by pudquick, try to avoid repetition whenever possible. :) Also: if the_guess == 'exit': break Could be if the_guess == 'exit': break There are mostly small, aesthetic changes, but every one counts when you are building something big. :) Oh, and one last thing: probably this is a matter of style, but you are using 8 spaces for indentation, and that is a LOT. I think the convention in Python is to use 4 spaces, and I find that it is much more readable that way. Other than those details, awesome work! :D 
ctypes is a Python module in the standard library that lets you map C functions to Python functions using pure Python code. See http://docs.python.org/library/ctypes
Interesting, thanks for taking a look!
Thanks :) Haven't figured out how to make Notepad++ use spaces when I tab...so I'm using tabs.
 def intro(): return raw_input('What\'s your name?\n') Why not start using double-quotes so you don't have to escape every contraction? def intro(): return raw_input("What's your name?\n") 
As a fellow learner, I've installed Python 3.2. How would I go about executing this? I've tried running it from the command line python hangman.py but it tells me: File "hangman.py", line 84 print boards[wrong_guesses] ^ SyntaxError: invalid syntax :&lt;
Is it anything to do with Cython/is it as fast as C extensions for python?
Hmm, not sure. I used Python 2.7. Maybe someone else can chime in.
You are right, didn't even noticed that. :) 
Here are my tips You can interchange the " and ' so that you don't have to escape the single-quotes. message = "It's" I'd test for range instead of inequality, it's safer: while wrong_guesses &lt; 8 and True: You can use the "in" keyword to find something in a sequence (strings are sequences too): if the_guess not in guessed_list: if the_guess in word: #success You can use the += operator for incrementing: wrong_guesses += 1 You can loop through each character in the word instead of using range(len(word)-1), and use the zip function for more fanciness" displayed = '' for space, letter in zip(spaces, word): if the_guess == letter: displayed += letter else: displayed += space spaces = displayed I'm not sure you always want len(word)-1. len(word) will be the length of the word. When you do range(len(word)) it is creating a list of numbers from 0 up to and including len(word) but since sequences are zero-indexed you add the -1. Other times you don't. 
That's probably why, actually :)
Are you using windows? You can try Intype, it worked pretty well for me back in the day. :) 
I don't know how fast is ctypes with cpython. Theoretically there will be some overhead (IIRC constant for every call), which will be visible if you plan to call native code multiple times (think hundreds of times per second). On the other side if you only need to call your native library few times (like with a big chunk of data at once), you won't notice that. But I have never measured that difference properly. However, if you plan to use another python implementation, things might be different. For example if you use pypy, ctypes should actually be much faster than going through cpython compatibility layer.
It was why! I ran Python32\Tools\2to3.py and it gave me a diff of what to fix to update the script to run in Python 3.2. The upshot was that print commands require ()'s and raw_input() becomes input(). Everything works wonderfully now! :D
Does Ninja-IDE have a graphical debugger, where you can set breakpoints just by clicking beside a line of code? PyCharm (and possibly Komodo) has this feature, but I can't get over how slow PyCharm runs on my machine.
[maybe...not really](http://www.reddit.com/r/mac/comments/h2qo4/how_to_update_to_java_16/)
Awesome, very helpful. I'm not sure I understand the zip function but I will have to read more about it.
 if guessed_letters.find(the_guess) != -1: Instead, "if the\_guess in guessed\_letters:" Also make guessed_letters a list or a set. Don't concatenate strings when you don't have to.
I need to check it out and also take a look back at ctypes. Thanks for sharing.
Can I haz macports or downloadable binary for Mac?
OS X costs less than an Xbox or PS3 game. There's not much reason not to upgrade unless your hardware is too old and in that case maybe JetBrains doesn't want to support that old hardware.
I know, why are these people making it more complicated than it is.
On second thought, it is really unnecessary in this case. guesses = set() guesses.add(raw_input("Your letter? ").strip()[0]) print ''.join([ letter if letter in guesses else '_' for letter in word]) But that's just my style, I like to generate things rather than store them. The zip function takes two lists and creates one list of tuples of paired items. &gt;&gt;&gt;list1 = [1, 2, 3] &gt;&gt;&gt;lits2 = ['a', 'b'] &gt;&gt;&gt;print zip(list1, list2) [(1, 'a'), (2, 'b')]
Settings &gt; Preferences &gt; Language Menu/Tab Settings &gt; Replace by space 4 spaces is standard Python practice.
That's because in Python 2.x, `print` is a statement, and in Python 3.x it's a function. See [What's New in Python 3.0](http://docs.python.org/release/3.0.1/whatsnew/3.0.html#print-is-a-function)
 guesses = set() guess.add(raw_input("Your letter? ").strip()[0]) print ''.join([ letter if letter in guesses else '_' for letter in word]) Damn that's very smooth. I assume that realizing these possibilities becomes easier as you get more fluent with Python? 
`zip` is a super handy function for iterating over multiple iterables simultaneously. See [the official docs](http://docs.python.org/library/functions.html#zip) for details, or feel free to ask me.
There are many ways to do the same thing, lots of which are probably not good ideas - and lots of which are *great* ways to do it. One thing you may want to learn about programming, in general, is the different types of data structures that you can use/make. Python comes with a lot of useful ones. set(), for instance, is a *perfect* choice for hangman / any type of operation where you're working on "choices" for data, where each choice is unique (like the letters in the alphabet). Think of it as a "bag" of data that you can add to it only what hasn't been added before and that you can check to see if something is already in it. Great for determining if a person has already guessed a particular letter, or determining if the letters that make up the secret word have been guessed already. The other trick that's used in there is a *very* powerful python syntax known as a [list comprehension](http://docs.python.org/tutorial/datastructures.html#list-comprehensions). If **a_list = \[1,2,3,4\]** is a list, you can do operations on it like: [2*x for x in a_list] Which, in plain English, says: for every item in a_list, temporarily set the variable 'x' to that item, perform an operation on 'x' (namely: 2*x), and then build a brand new list with all the results. So for \[1,2,3,4\], using the example above, you get \[2,4,6,8\]. In fatalfred's example, instead of just doing some simple math / operation, he actually included an **if / else** statement. Almost anything that you could write on one line can be used there. Think of it as flattening a "for:" loop, as these are essentially equivalent: the_answer = [] for x in a_list: the_answer.append(x*2) and: the_answer = [x*2 for x in a_list] It even works for nested for loops: the_answer = [] for x in a_list: for y in another_list: the_answer.append(x*y) vs: the_answer = [[x*y for y in another_list] for x in a_list] For future fun, there's also a "filtering" portion to list comprehensions, namely: [x*2 for x in a_list if x &gt; 2] See that bit at the end? If a_list = \[1,2,3,4\], because of that filter at the end, your output is only \[6,8\] - as 1 and 2 don't pass the test. python is a fun language :)
Wow, that's awesome. Thanks for taking the time to explain it. 
Just gave this a quick try. (Hadn't heard of it before). First disappointment: Dragging a .py file and dropping it didn't open it. The "+" mouse icon suggests this should work. (Running on Windows XP.) Tried to report this using the built in "Report Bugs" menu item (good idea). Can't report a bug without logging into an account (bad idea). Also, no back and forward buttons in the integrated browser. Might be better to just launch the system browser. Sideways tab text on the preferences! D: Couldn't work out how to customise key bindings. No recent files list. Sorry if that came out a bit negative :-/
I am wondering what you are basing that on?
Aye, but with my extension, there's already a whirlpool implementation in pure python. Even with pypy, the C extension I wrote is 400 or so times faster :/
netbeans has it...
How would I create a composite surface that I can then use clear() on? Here's the [question on StackOverflow](http://stackoverflow.com/questions/5859630/building-a-background-image-from-smaller-images-in-pygame) that I found out how to build the composite image with.
I don't see mention of python support on netbean's website. 
It's overwritten on purpose. Engine is meant to be re-used and simply picks self.resources['bg_image'] as a default, game.py overwrites this when loading a new level. It's the loaded image that won't refresh correctly I'm looking for help with.
PyDev has it.
[I've been using it for a year, its pretty good.](http://wiki.netbeans.org/Python)
It works really well too!
As I'd still recommend copy when assigning surfaces, you can fix your code by. #in engine.py #on lines 49 and 50 self.background = self.resources['bg_image'].copy() self.originalBackground=self.resources['bg_image'].copy() #change line 64 to this. self.sprites.clear(self.screen, self.originalBackground) #rune.py #add to line 97 self.originalBackground=self.background.copy() Hope this helps.
Your .copy() idea solved it. I played around with it and made game.py run this: self.background = self.background.copy() Yay for magic :)
Cython have two uses: wrap c code (like your main.c does) and generate c code from a language based in python. Convert python code to cython it's easy (usually add types information). Rewrite python code to c its a harder work.
Also: http://www.activestate.com/cloud
to build numpy from sources on Ubuntu: * sudo apt-get build-dev python-numpy # install all the build dependencies * sudo apt-get install python-nose # for testing * python setup.py install --user # from numpy sources * python -c "import numpy; numpy.test()" # optional, test the install works * python setup.py install --user # from scipy sources Neither pip or easy_install will help you, BTW.
Know not to pass it off as your own? It doesn't need to be licensed for that.
How easy would it be to convert my main.c to Cython?
That's 10.5.8. 10.6.x is current.
Well for starters, Ubuntu 10.04 is 12 months old now. The current version is 11.04 (released a week ago) http://www.ubuntu.com/download/ubuntu/upgrade Next, learn a little about .deb packaging because 99% of the time you can apt-get source &lt;somepackage&gt; and use its debian/ build directory to package up &lt;somepackage_v+1&gt; as the basic method of compiling somepackage rarely, if ever, changes. If you're not keen on upgrading your outdated system, or rolling your own packages, another method is to install a different python distribution (e.g. ActivePython or whatever) and use pypm (for ActivePython) or pip, or easy_install, or whatever to pull updated modules into it - then use that python distro for the project that requires those updated modules. It'll live alongside your system python and not interfere with each other. 
how come such old known information get votes? seriously, poster is just another copy/paster with no imagination at all.
In these cases, it's the GNU version that is non-standard. The BSD ones are often lacking GNU-isms, but they implement the POSIX spec.
WTF are you babbling about ??? that's MY SUBMISSION
Unrelated to Cython. Cython is a language that looks like Python with annotations. You compile it in to C code that's importable from Python. In fact you can even just use it to compile straight out Python code and get a decent speedup. Here's a Stackoverflow question that has a good explanation of the three ways to use C we're talking about here: http://stackoverflow.com/questions/1942298/wrapping-a-c-library-in-python-c-cython-or-ctypes If I had to decide which one to use this is what I would do: * Using an existing C library: ctypes. It takes the least amount of effort and offers pretty good performance. * Accelerating existing Python numerical code: Cython. It has good integration with the numpy libraries and porting the existing code is fairly easy. * Maximum performance / low level control: Native C extensions. This is of course a gross simplification, but a good starting point.
If your aim is GPUs, getting good performance out of your code isn't really a matter of just porting to OpenCL and flipping a switch. OpenCL code that is written ignorant of the hardware it is to be run on will be terribly slow.
Well, you are #include'ing a .c file, which I'm not sure would work (it might!), but looking at the rest of your main.c, it would be fairly trivial.
 def choose_word(): f = open('words2.txt','r') return random.choice(f.readlines()).rstrip()
OpenShift Express doesn't come with a MySQL database? :(
Cool! I thought that Cython was built for being able to wrap C libraries (such as Whirlpool.c) ?
Indeed, but it would work more like a traditional C module. If you were writing a C program that used the code in whirlpool.c, you typically wouldn't #include the C file. You would write (or have supplied) a .h file containing the function prototypes, and you'd include that. Then you'd compile each separately into .o object files and finally link them together, either into an executable or a .so or whatever. Cython could import the C signatures from such a .h file with a "cdef extern from" block. Then you'd write your Cython code, which is basically Python with a few optional garnishes, call it main.pyx, and build it (the easiest way is by writing some boilerplate setup.py, the template for which you can find on the Cython website) which would translate main.pyx into main.c (which would look kind of like your handwritten .c file except it would probably include some #ifdefs and such for making it Python 2 *and* 3 compatible, insert any reference counting calls automatically, probably do some extra error checking on the input). Then it would compile both main.c and whirlpool.c and link them together into a Python C extension .so file.
Of course, I could always hit CTRL+Z when I hear the sound...
Thanks for the followup. I hope numpy posts become a regular occurrence on the PyPy blog.
Personal experience. It's IMHO, like everything else I write.
I'm told [bcrypt](http://packages.python.org/passlib/lib/passlib.hash.bcrypt.html) is the way to go today, for new applications. Salted SHA and similar aren't that secure today; bcrypt supports variable rounds meaning you can easily make it more computationally expensive.
[Eric IDE](http://eric-ide.python-projects.org/images/eric4-screen-02.png) has it too.
only if something interesting shows up :)
Thanks, it'll help me get started using virtualenv.
Good job. Now all you have to do is write a script to solve that pesky math problem in the morning automatically so you can go back to sleep. 
As far as I know they've dropped support for python in 7.0 - which is really really sad. Netbeans works pretty awesome for many things...
You're doing really well for a first timer, this is a really tricky problem! When working with time, I always find it easiest to convert to seconds and then work from there - it makes "deltas" really easy to do. [Unix](http://en.wikipedia.org/wiki/Unix_time) agrees with me ;). My rule of thumb is that the time should be in seconds format as long as possible (convert it as soon as you get it, and delay converting it back as long as possible). Now, for your code - firstly, you don't have a way to make sure a user is doing as they should be (they never do ;)). I've added a `read_usertime` to show the sort of thing you might have when the user's given a freeform text box. Secondly, instead of commenting above the function, make an unmarked string (almost always triple-quoted) immediately below the function declaration. The interpreter reads this as documentation and saves it as an attribute of the function called "__doc__". Library code all has this code - if you're ever stuck on some mysterfunction and you have a python interpreter handy, do `print(mysteryfunction.__doc__)`. import time def read_usertime(usertime): """ Function for normalising and checking for errors on user-supplied time """ user_hrs, user_mins = usertime.split(":") if len(user_hrs) != 2: raise ValueError("Too many fields!") user_hrs = int(user_hrs) # TypeError.. user_mins = int(user_mins) # TypeError if user_hrs &gt; 23 or user_hrs &lt; 0: raise ValueError("Hours out of range (must be between 0 and 23!)") if user_mins &gt; 59 or user_mins &lt; 0: raise ValueError("Minutes out of range (must be between 0 and 59!)") return (user_hrs, user_mins) def hrsmins_to_secs(hrs,mins,secs=0): "Just what it says" return (user_hrs * 3600) + (user_mins * 60) + secs while True: # Never exit until they get it right try: usertime = raw_input("Enter the time you want [hh:mm]" &gt;") usertime = read_usertime(usertime) usertime = hrsmins_to_secs(usertime) break # bail out of while loop except (ValueError,TypeError) as ErrorMessage: # Python exceptions. If you haven't covered these, then this # example covers almost everything you need to know. print(ErrorMessage) print("You are a bad person, enter a proper time!") continue cur_hours, cur_mins=time.localtime()[3:5] # tuple(hours,minutes) # http://docs.python.org/library/time.html#time.localtime secs_since_midnight=hrsmins_to_secs(cur_hours, cur_mins) if secs_since_midnight &gt; usertime: # usertime already passed today, set for tomorrow secs_to_midnight = (186400 - secs_since_midnight) # 186400 = seconds in 1 day sleep_time = secs_to_midnight + usertime else: # Time is for today sleep_time = usertime - secs_since_midnight PS. &gt; Of course, I can always hit CTRL+Z Now, you can't stop CTRL+Z, but you can stop CTRL+C; while True: try: # Blah blah blah break except KeyboardInterrupt: print("Nice try, mister!") continue If you want to stop CTRL+Z, spawn-and-detach the sound player (tricky, don't have time to get into it unfortunately). They can CTRL+Z, but the music won't stop ;)
&gt; Neither pip or easy_install will help you, BTW. Thank You.
Nice - python AND postgresql, the best of both worlds.
Try looking at [Cython for NumPy users](http://wiki.cython.org/tutorials/numpy) and stopping before the part about NumPy arrays if you don't need 'em.
SciPy contains code to do this in several places, including `scipy.signal.convolve2d` or `scipy.signal.fftconvolve`. Neither are particularly fast though.
&gt;I was trying to remove python 3.1 from my computer and go back to 2.6, and I accidentally... ...the whole dev env?
its "rm -rf" not "rm rf-" if you can't even get that right, you shouldn't be mucking about with the command line or sudo at all. I have nothing constructive to say, I just came to point and laugh. 
I got it right when I put it into terminal, calm down. 
Yup, the whole thing.
What you've done is (as your current user; `whoami`) removed everything below `/Library`, recursively with the `force` switch on. Depending on what Unix flavor you're on, you can try to reinstall using your package manager (in case that binary isn't gone as well :). The thing for you to remember is that you should probably always use some package manager (APT, RPM, pip, ...) of some sort and not low-level tools to install/remove software.
Heh, I'll keep that in mind. Any hints as to where to find the package manager?
Perhaps [James Fee](http://www.spatiallyadjusted.com/2011/01/03/2011-the-year-python-takes-over-gis/) was right...
He's clearly on OSX as you can see by the /Library instead of /lib and the fact that the default font is helvetica. OSX doesn't have a package manager, because its a crap OS. 
no, clearly you got SOMETHING wrong when you typed it into the terminal. My point is that the mere fact that you would ever type "rm rf-" whether it be in a reddit post, or a terminal, shows that you're lacking even the slightest understanding of command line tools. you did it twice in the same post and didn't notice, so clearly you're not fit for using a command line. 
Thanks, I should probably stick to TV and smoking weed from now on. Or I could try something new, maybe make a few mistakes and learn something. Naaaaahh....that might piss off some people on reddit.
You'll need to reinstall, you screwed your OS' X install, as as you know by now, there are tons of critical files on /Library. Backup /Applications and /Users and reinstall with the DVD
A couple of things - while just plain salted sha is a joke, the commonly used schemes under Linux are SHA256-Crypt / [SHA512-Crypt](http://packages.python.org/passlib/lib/passlib.hash.sha512_crypt.html), which are *not* merely salted sha - they are complex schemes supporting all the features of bcrypt, but using cryptographic primitives that have been better studied. while no one has broken bcrypt, many have been wary because it *is* based on a reversible stream cipher that's been repurposed, not a one-way hash. these are the main reasons why they're still used in some places instead of bcrypt. also, bcrypt / sha256-crypt etc are becoming old hat. The new hotness is [PBKDF2](http://packages.python.org/passlib/lib/passlib.hash.pbkdf2_digest.html) (with HMAC-SHA256) - it's simpler than any of the others (about 20 lines of code outside of the HMAC-SHA256) - which makes it easier to verify correctness - but also has the property that it can withstand the underlying hash having collision and even pre-image attacks, and still hold up. edit: removed rendundant link to bcrypt in passlib :)
Time machine?
Unless you have a backup to restore from. If you aren't using Time Machine (or something else for automatic backups) now is the time to start.
here you have my refactoring: http://pastebin.com/R5vCtJ4D Python: 3.1+
I've used this library a bunch; works great!
There's full support on the client side though. You can create an amazon RDS instance for example and connect to it that way.
I know it is too late for this but for future reference if you installed python 3.1 with the OSX installer you shouldn't have to uninstall 3.1 to use 2.6. In fact, 2.6 should still be the default python.
I remember shapefile libs to be pretty unpythonic the time I worked with shapefiles. Hopefully this changes that.
On Linux.
in my ~/.zshrc 252 # 10 second wait so you don't accidentally the whole repo 253 setopt RM_STAR_WAIT
what is that ?
&gt; You should do all your Python development inside why ?
huh ? WHHAATT ? you're not programmer and boss is giving you these techie, API wtf to kill fucking time ? I don't even know WTF oauth is until reading this and I still have no idea WTF it is/does..... 
so why are you developing on Mac ?
10.04 is the current latest LTS version, so expect people to be using it (on servers) for the next 5 years
[–]dogboi 1 point 1 day ago Macports or Fink. :-) Either works. I'm fond of macports myself.
"on Mac" makes no sense, really. "On a Macintosh" feels better. It's still Python. Python is for prototyping. You can do this anywhere, but on a Macintosh it's painfully crippled. OP wants to develop a finished solution in Python on a Macintosh. Foolish. OP also thinks he can avoid "dicking around" and not be like Dad, with all that thinking and fiddling and hard work. Someone sold him the idea that "on Mac" it'll all be effortless. Idiotic
Watch the worker shield his heart from the world outside Didn't get a chance to let him know Alsace is spinning fast and wine mixed with the tide Please don't let my brain explode
I thought this was going to be step-by-step implementation of a Python interpreter.
Try checking out macports and homebrew, they both offer package manager utilities for mac.
If anyone is interested in financial visualization, i recently wrote a R-plugin that fetches data from NASDAQ - that you then can visualize using R's plot-functionality 
try: http://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.filters.convolve.html#scipy.ndimage.filters.convolve The standard builds of numpy/scipy use vanilla FFTPACK routines. If you need every ounce of speed, try seeking out an optimised FFT library for your platform (Intel MKL, FFTW, DJBFFT etc.). These may not be supported in scipy but can be called directly using ctypes if no existing python wrappers are available. FWIW, I've never found the need for these myself.
in scratch scratch.mit.edu
Not in Scratch, just from scratch would be awesome enough.
You can add your own web apps to be monitored as well, fyi. Just sign in using your google account and click "Create a group" on the homepage. When adding a location ignore the "uptime URL", more info on that will come later.
Which status codes do you count as failure?
**SUCKS FOR YOU %s, YOU GOT FUCKING HANGED!** I love the game messages.
None yet, it only measures if it can reach it or not. In the future I will count internal errors (500's) as a failure - the issue is not all sites obey that and may return a 200 code and a page saying there was an error. Any suggestions for other failure codes?
Good idea!
Anything &gt;= 400 is an error.
What framework did you use? What did you use for charts? (looks like google charts, did you use a helper library?) This looks very useful. I added one of my sites. Thanks!
I used the standard google webapp framework. For the charts I used the google chart API with the pygooglechart library (pygooglechart.slowchop.com/) - how to generate those graphs took me hours to figure out!. I will also open source it when I have done a bit more work on it. Its got an API (no documentation yet) and you can embed the graphs on other sites, just add an image pointing to http://isitupordown.appspot.com/graph/[GROUP_NAME]/[LOCATION_NAME]/current and it will display the latest graph.
is this your very first app engine app ? did you follow some sort of tutorial or book ? can you recommend one ? I want to play with App Engine with Python too 
I just picked it up, the only hard bit is getting your head around the datastore, for example with this app I was thinking like a relational database - each result would have its own row in the database. This won't work with appengine because fetching from the datastore is pretty expensive so everything is stored in one row/entity. Just learn python and read the *amazing* docs @ http://code.google.com/appengine/
Sadly, it seems like the signal package has been removed from scipy. I need stsci for it, which in turn depends on a stuff like IRAF which is not available for windows. Thank you though!
I use Overlook Whiz android app. Allows me to load page and check for char string.I'd like a web app though to do same and send me email alert. I have better control on my phone how I am notified about email.overlook has limited notification options. 
I tried R the other day but found it hard going. Can you recommend a good tutorial/book for R?
That could be possible, you want to be able to define a string and if the string is in the page it counts as a failure?
Oh, thanks a lot! Looks nice, I hope this will help me find problems in our application.
whoah nice. this could prove very useful. the call graphs especially
Thanks for the comments; if you notice something missing from the framework--please, let me know! Also, the latest official release (0.1.1) is available on PyPi: http://pypi.python.org/pypi/linesman
that sounds very interesting, could you share it? thanks.
I was using mechanize for a scraper recently but ultimately had to do raw ssl sockets because mechanize doesn't support keep-alive connections, which this bizarre web application required. It's too bad, mechanize looked like a web scraper's dream.
does it execute javascript? For instance, i need to scape a page where some of the content is javascript generated.
Wow, awesome. I'm going to check it out extensively on monday!
Well, first of all, you should run your Python code in an environment that matches your production environment as closely as possible to avoid surprises. Secondly, if you already put your code inside a VM to run it, and if you're using an IDE with code intelligence that can't work with remote Python interpreters (which seems to include all Python IDEs at the moment), it avoids some redundancy to keep your code inside the VM throughout development and move your IDE to where the code is. The alternative is to work on a module locally and then either deploy it to a development server _every single time you want to try it out_ or run it locally on your native OS (thereby completely side-stepping the entire point of having a development environment that matches your production environment to begin with). Installing a desktop Linux is the closest you can get to mirroring the production environment without being unable to run an IDE in it. Of course the suggestion of Ubuntu assumes you're using Ubuntu server, preferably at the same version as the desktop version you download. (The closest match would be using the exact same distro and just adding the packages necessary to add a desktop environment capable of running your IDE to it).
Super cool. Good stuff
"""Is it normal to go through a SHITLOAD of trial and error, and nearly re-write the program a couple of times?""" Yes. It is all about learning as you learn more about a language you recognize the simplicity of your previous approaches. Even professionals end up doing rewrites when they realize what they started out with isn't what the customer wanted. Though often in these cases it is more of a problem not knowing what the customer wanted in the first place - communications counts. You seemed to have indicated that you are using Python 2.7. That is all well and good but I'd recommend that new programmers start out on Python 3.2. There are a number of reasons but consider that the 3.x series fixes a lot of problems and enhances upon the old versions of Python. Further the 3.x series is stable enough right now for serious work which should lead to a lot of development moving to that revision level. In the end what you learn will have a longer shelf life than if you focused on writing 2.x code. Note a lot of people will tell you that is BS but history is pretty clear hear, once a new language revision is released and stabilized migration is pretty swift. Just look at the various C/C++ standards, MS Visual (whatever's), BASH, or insert your favorite language. The point is educate yourself for the future not the past. 
I would suggest using rpy2 to wrap R in python as it makes R less of a pain. 
Possibly a good idea in the sense of a code generator but because it is a SaaS I wouldn't touch it with a ten foot pole. Sorry folks but SaaS is BS for the most part.
Looks awesome! Is there any data on how much overhead the middleware adds to the profiling? Should it be run all the time, or just in certain situations you are looking to optimize?
Because its using cProfile to actually run the profiling, the overhead you can expect can be "up to an order of magnitude." However, realistically speaking, it tends to add about 10% or so a typical call in our applications. So don't run it on production! :) You'll want to run this locally and use it to identify specific bottlenecks on a function-by-function basis. Because it stores past queries across restarts, its also useful to be able to compare different runs to look for speedups. Hope this helps to get you started!
IMO the article failed in its stated goals: After reading this, you will: * be able to write the server part of Comet applications, even if you have to do it from scratch *this is a shitty exposition of the select() loop model imo. Maybe it works for some.* * have a better understanding of the Tornado web framework, if you plan do develop on it *If I wanted to code on Tornado, understanding how to write an async handler is what I'd be crying for.* * have a bit more informed opinion in the tornado-twisted debate *given that's the only mention of "twisted" in the article, I'm not sure how this was supposed to happen*
Upvote for using with
l2zen of python, why so many alternatives
I dunno, maybe for the benefit of the OP?
does it work with Django?
I guess either approach could be useful but I look for a string and consider it an error if not present.
you probably didn't even need the loop as "intersection" is a function of set already so you could simply do: set(list_one).intersection(list_two) 
Cool, will try this. This saves me more time. I luv python...
Hey, that's awesome you created this. I don't have too much to contribute, but I'm willing to test, even though I'm just a beginner myself when it comes to programming and Python in general. Which leads me to my question, which is.. How did you get to this point in your learning? That is, what all did you do to get up to this point so that you could create Py7File and submit it to Pypi? What resources/material did you use to teach yourself Python and what exercises helped you the most? I'm currently going through the Learn Python the Hard Way book right now, but I'm sure there's more I should probably learn or maybe not before taking on a project like this myself. Any advice/feedback is appreciated. Thanks and awesome job!
set(list_one) &amp; set(list_two) Equivalent but quicker to type
Set is actually not a function but a first-order data type. It's like a list but prevents duplicates and defines a number of useful additional methods relevant to set operations. 
Me too. I do character rigging and tools work for games, which means working with body parts a lot. I used to use MEL, but similar code in Python is at least an order of magnitude smaller, very non-repetitive, and so much easier to manage. armparts = ('shoulder', 'elbow', 'wrist') legparts = ('hip', 'knee', 'ankle', 'ball') sides = ('l', 'r') ctrlpat = 'ctrl_%s_fk%s' # string pattern for building FK control names Now if I need a list of all the FK arm controls, I can use a list comprehension: [ctrlpat % (side, part.capitalize()) for side in sides for part in armparts] # Result: ['ctrl_l_fkShoulder', 'ctrl_l_fkElbow', 'ctrl_l_fkWrist', 'ctrl_r_fkShoulder', 'ctrl_r_fkElbow', 'ctrl_r_fkWrist'] # If I just want the left ones: [ctrlpat % ('l', part.capitalize()) for part in armparts] # Result: ['ctrl_l_fkShoulder', 'ctrl_l_fkElbow', 'ctrl_l_fkWrist'] # I can also do something right inside the list comprehension, and get back a list of the results of the operations: import maya.cmds as cmds [cmds.doSomething(ctrlpat % (side, part.capitalize())) for side in sides for part in armparts] These things can be made more powerful, i.e. to work with other tools inside of classes and all of that, but if I just have something I want to throw together to get something done with only an hour of available time, I can crap out code like the above so easily, and it just works.
Sets are still very much a work in progress though. There seem to be a lot of opportunities for integration with dictionaries, comprehensions and lists in general that haven't made it in yet, but I've little doubt such glitches will be addressed in time. A fun thing to do: go through old code looking for tedious chores that can be more elegantly addressed with sets. I find that my code is littered with situations where I've got a lot of used-once variables to test to see if something was set to some value before and after an operation, which get reduced to one-liners by simply using a set to act as an accumulator. You need to force yourself to think in terms of sets though first; it's a bit of a slippery paradigm shift, a la decorators, but if it results in cleaner code I say it's worth the effort.
Not *quite* equivalent - .intersection() merely needs to iterate over the elements in list_two, comparing them to list_one and adding them to the in-progress result set - while your solution requires converting list_two to a set before doing the exact same procedure so for large list_two's, the original is much faster, and uses O(len(list_one)) amount of memory, not O(len(list_one) + len(list_two))
It's true that set.intersection(Set, Iterable) is more efficient, but I don't see any reason why there is no equivalent “set() &amp; Iterable”: static PyObject * set_and(PySetObject *so, PyObject *other) { if (!PyAnySet_Check(so) || !PyAnySet_Check(other)) { Py_INCREF(Py_NotImplemented); return Py_NotImplemented; } return set_intersection(so, other); }
One thing I noticed: in your delete method, you remove the file but don't invalidate the object. For example, if you use delete() and then move() it throws an error (plus all the properties reference data on a nonexistent file. I'd recommend doing something similar to the builtin file object - throw a valueerror when they try to do further operations. Also, why do you only work with files that have extensions? The filename has absolutely no effect on how the file works. You can return an empty string for the extension property.
That would be worth doing. The whole reason why I migrated to Python was the clean and easy to use code so that I'm not fighting the program but spending more time on the logic. 
Interesting. This could be useful for some of my taxonomic work that I'm trying to categorize. 
http://www.reddit.com/r/Python/comments/gza87/spynner_is_a_stateful_programmatic_web_browser/ Requires that you install Qt (obviously) and is therefore far from as light as mechanize. Read my comment about installing. Gave me some headaches first.
They are? That is great news! Where did you hear that? How are they going about implementing this?
Actually, set() *is* a function which returns a set object, with elements taken from the argument. http://docs.python.org/library/stdtypes.html#set
No, you're linking to the documentation for "class set([iterable])" on the "built-in types" page. That "class" means it is a type. Calling set() invokes the constructor of that type. Same thing as list(), dict(), and friends. Edit: Note, the set type appeared first as a core module, but became a built-in type in 2.5.
It's almost like you've coded python professionally. Crazy.
**Scratch an itch.** Think of something that you wish there was an app for and build it. Reading up on a language is a great start, but to really get a good grasp of it you need to start putting it into practice. Don't worry about your code being perfect, get a working prototype, put it on Github and ask your peers to review it. Take the feedback and improve your code, and keep doing that until you have a production ready product. If you can't think of an itch that needs scratching. Try looking on [The Internet Wishlist](http://theinternetwishlist.com/) for an idea someone else has had.
int(), float(), etc. are also constructors. Is there practical value in arguing that they too are not functions? In fact, the Python docs list all of these as [Built-in Functions](http://docs.python.org/library/functions.html).
There's not a lot of worth in arguing the difference, I just prefer the accuracy. Given the C implementation, they really are constructor *methods* (on objects) rather than functions (which have no associated object type). It really isn't a big difference. In this context (a new guy learning the language), I think it is at least marginally useful to keep the language and descriptions pure. It's not really calling a function, it's invoking a constructor. As for being on the list of built-ins, that's really more of a list of things in the \_\_builtins\_\_ space. They're not reserved words, but programmers should mind them so as not to call problems. I lost count of the number of times a lazy programmer use the variable name "str" and had code that worked... until it didn't. :-) Anyhow, it's really neither here nor there and not a big deal. When talking OO, I still like to make it clear when a construtor is being called. Given were talking about a function implemented in the init slot of setobject.c as well, I think constructor is more accurate. Granted, it's fair to counter that there is no difference between methods and functions in Python's implementation (other than the implicit first argument).
I've written a line or two...
Provide an email address on your GitHub profile and in the documentation of the project. This way people might have a chance to contact you.
I agree, and let Python have a say: $ python Python 2.7.1+ (r271:86832, Apr 11 2011, 18:05:24) [GCC 4.5.2] on linux2 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; set &lt;type 'set'&gt; &gt;&gt;&gt; set() set([])
i believe set and map comprehensions are in py3
Bear in mind that construction of a set is not free. If you're checking for a single item's membership in a collection of items, it's cheaper to say item in list_one than item in set(list_one) But if you are doing more than one or two membership checks (as the intersection method does) it becomes more efficient to do: set_one = set(list_one) result_one = item_one in set_one result_two = item_two in set_two ... Specifically, item in list is an O(~~log~~(n)) operation. item in set is an O(1) operation. But set(list) is an O(n) operation.
I tried it last night, and it seemed very bare. I'll look back into it if it ever gets Django support =)
And 2.7.
&gt; Is there practical value in arguing that they too are not functions? Yes. Functions and types are both callable, but you can inherit from a type, not from a function. edit: you can also use a type in an `isinstance()` call, doing the same with a function is going to yield a type error. Are types and functions interchangeable in some (if not many) places in Python? Sure, but that does not mean the differences are inconsequential.
&gt; but I don't see any reason why there is no equivalent “set() &amp; Iterable”: You'd not be able to reverse the operands without everything blowing up.
&gt; it becomes more efficient to do: It **may** become more efficient to. Building a `set` object really is rather costly, and many set operations have quite high a constant factor. You're better off with a list or a tuple than a set for short collections (under 5-10 objects, something like that) because though `item in list` is `O(n)` the constant factor is very small, and it may be done before `item in set` is done doing whatever pre-operations it does.
&gt; If you're checking for a single item's membership in a collection of items, it's cheaper to say &gt; item in list_one &gt; than &gt; item in set(list_one) If list_one is a bunch of literals, than in current versions of Python it is fastest to use a literal set: &gt; if item in {1,2,5,'a',None} unlike the set() constructor which would be called every time this the line is evaluated, this ends up with a frozenset created at compile time and stored in co_consts for the containing function.
Yep, it should! Because this runs at the middleware level, it shouldn't matter what framework you use--provided it adheres to the WSGI status. That being said, if you *do* notice issues when running this on Django, definitely let me know.
Thats indeed a good idea... done
&gt;Is there practical value in arguing that they too are not functions? Yes. Instance and type tests.
If one already has a list (or iterable) that already has falsy stuff to rid of, one can `filter(bool, iterable)` it.
Thanks for the feedback ... Leaving the data around after deleting the referenced file is intentional and needed for .restore() to work... You are right about the filename extension. The problem was that a .unzip() for a "myfile.zip would create a folder named "myfile". That did not work with extensionless filenames... (at least on windows you cannot have file and a directory with the same name in the same directory.... anyway i fixed that in the latest commit... 
Hmm, when I tried unzipping with a zip that had no extension, it unzipped to a folder called "a_unzipped" (which rezipped with no problem). Was this not the case with you?
The tutorial/book that got me going in the first place was [Think Python](http://www.greenteapress.com/thinkpython/thinkpython.html). The rest is "trying to build little usefull scripts for fun" while *googling* and *stackoverflowing* my way to a working version (and often failing miserably ;.) There are many topics that I still don´t grasp but I discovered that if I revisit those topics from time to time, eventualy things start to make sense. I assume having a friend that does python development or working together with other python devs would be a huge benefit also... I am looking forward to that...
yes thats because I just fixed it... (did not work with the initial release) ... thanks for testing ;) 
That will not work for the request, which is blank lines. On the other hand, `str` has a method `isspace()` which returns `True` if the string only contains whitespace. Sadly it returns `False` for empty lines, so you have to write: (line for line in lines if line and not line.isspace()) 
What about the repair option on the install DVD? It might be an item accessible from the menu bar after the box reboots from the DVD. Edit: P.S. sudo was definitely *on*. Else you would have just been asked for the password.
 filter(lambda line: line.strip(), lines)
see also: http://www.finchrobot.com/software/python
Wired only? What's the point of a mobile robot if its required to be wired to the computer.
Is nowhere near as clear (the chunk I posted says precisely what it means), and it is significantly (~200%) slower in the case of empty lines, while being roughly the same speed on non-empty lines (when used in a listcomp, using `filter` it's 20% slower at best due to function calls)
I have no desire in arguing with that. I only posted the code in response to your comment that seems to imply that [`filter`] "will not work for the request, which is blank lines."
&gt; I only posted the code in response to your comment that seems to imply that [filter] "will not work for the request, which is blank lines." If it implies that to you, you most definitely read it wrong.
Sure, but I'd go with aesthetic appeal if the performance gain is tiny (as it normally is).
Sure I would import collections class eagerlyintersectingset(frozenset): def __and__(self, other): assert issubclass(type(self), collections.Set) if issubclass(type(other), collections.Iterable): return self.intersection(other) else: raise NotImplementedError() class MultipliableCollection(collections.Iterable): def __init__(self, collection): self._collection = tuple(collection) def __and__(self, other): if issubclass(type(other), collections.Iterable): return [a*b for a,b in zip(self, other)] else: raise NotImplementedError() def __iter__(self): return iter(self._collection) a = eagerlyintersectingset({1,2,3}) b = MultipliableCollection([4,2,5]) assert a &amp; b == {2} assert b &amp; a == [4, 4, 15] I'd just have to be aware of the right order. So yeah, I don't see any *technical* reason. But limiting that behaviour for the sake of elegance and simplicity… I can kind of agree. I think the author's perception was that it's not the case that &amp; is not powerful enough, but rather that set.intersection(Set, Iterable) is an optimization *hack* in the first place. But nothing is going to blow up. EDIT: Source code formatting.
`int()` invokes the constructor of `int`, a built-in type. If anything, `int` is a callable by virtue of being a type. If you call it a function, you might as well call all types and classes functions, at which point the term becomes identical with "callable" and therefore useless.
Very cool. Any usage examples?
Good to know. Unfortunately my company's clients use RHEL5, which means I'm stuck programming in 2.4 with little hope of moving beyond 2.6 in the foreseeable future.
I can't speak for what happens in the interpreter, but literal sets like that return set objects. &gt;&gt;&gt; type({3,3,3}) &lt;class 'set'&gt; 
Right, but since we only take the `iter` of it, when the whole function gets compiled it will be optimized to store a frozenset. In Python 3.2: &gt;&gt;&gt; def f(x): return x in {1,2,3} ... &gt;&gt;&gt; f.__code__.co_consts (None, 1, 2, 3, frozenset({1, 2, 3})) I don't get this result using 2.7, so this optimization must be added more recently.
It's primarily a teaching tool, so it wasn't designed to be fully mobile. From their website: &gt; The Finch draws power from USB and is a high-current device. The Finch comes with a 15 foot USB Type A to Type B cable. The tether provides the Finch with a number of advantages, notably lower costs, easy language integration, and the elimination of batteries and battery charging overhead, but it does reduce the usefulness of the Finch's motors. 
&gt; Sure I would No, as you demonstrate you need new types everywhere for it to work, and the and operator would have to be added to *all* iterable types (generators, callable-iterators, listiterators, etc...). Or, alternatively, `set` would have to implement `__rand__`. &gt; So yeah, I don't see any technical reason. There is no technical reason. It was an explicit decision made by the implementor: &gt; In contrast, their operator based counterparts require their arguments to be sets. This precludes error-prone constructions like `set('abc') &amp; 'cbs'` in favor of the more readable `set('abc').intersection('cbs')`. http://docs.python.org/library/stdtypes.html#set.copy &gt; but rather that set.intersection(Set, Iterable) is an optimization hack in the first place. That is complete and absolute nonsense. `&amp;` is sugar for `set.intersection` (as demonstrated by *the code you posted yourself*). What optimization and what hack are you talking about?
What exactly is paster? Googling seems to just come up with stuff to do with Pylons. The package looks awesome and I love going all OCD and profiling things I write :)
Worth noting: It is free software. Any use for this other than education?
&gt;The Finch currently supports Python using Jython :/
Surely an empty line causing a crash should be an **except**ion to the rule. Explicitly testing every line will slow things down. with open('text.txt') as infile: for line in infile: try: print(1 / len(line.strip())) except ZeroDivisionError as e: print("empty line") 
I love your enthusiasm! Paster is [PasteScript](http://pythonpaste.org/script/), which is an entirely Pythonic WSGI server. Currently, the framework is design specifically to be run as a framework--but there are plans to be able to run this against normal applications. What kind of things are you looking to profile?
After the very useful responses to my [reversi project](http://www.reddit.com/r/Python/comments/gxpee/a_reversi_game_i_made_pygame/) I figured I'd carry on posting these learning projects to github and post them to /r/python. The TD game is not complete yet but it's a fairly large jump from the reversi game and I'm pretty sure I'm doing some stuff horribly wrong. I'd love to hear suggestions on where my implementation is weak and what stuff works well.
That's an awesome tip. I should look into other hidden zsh features.
&gt; No, as you demonstrate you need new types everywhere for it to work, and the and operator would have to be added to all iterable types (generators, callable-iterators, listiterators, etc...). Or, alternatively, set would have to implement \_\_rand\_\_. I'm sorry, leaving \_\_rand\_\_ unimplemented was an explicit decision on my part—I should have made it clearer. &gt; It was an explicit decision made by the implementor That's pretty obvious. When I said *technical reason*, I meant to refer to to the alleged ‘error-proneness’ of having an operand with equal set of functionality. &gt; That is complete and absolute nonsense. &amp; is sugar for set.intersection (as demonstrated by the code you posted yourself). What optimization and what hack are you talking about? If you think of set as a pure structure in (figuratively) mathematical sense, there is no such operation as *intersection* of *set* and *collection*. The intersection occurs between two sets, it's just that construction of the second set and the intersection between two sets are folded into one operation. So this was my guess as to author's intentions. It's good to know that the reasoning behind this implementation details is right there, in the documentation (which I have glanced over and missed, sorry!). Now I personally think, that if the only motivation was the \_\_and\_\_ and \_\_rand\_\_-caused possible indeterminism, it'd still be useful to just implement \_\_and\_\_, giving the developer the benefit of the doubt, in the regard, that they know what they're doing. So it'd work as such: &gt;&gt;&gt; [1,2,3] &amp; eagerlyintersectingset({1,2,3}) TypeError: unsupported operand type(s) for &amp;: 'list' and 'eagerlyintersectingset' And I think this is still elegant (even more so, because ‘&amp;’ then is *actually* sugar, not just weaker version) and does not introduce any of the mess, of which to avoid was the author's original intention. Hope this makes more sense now!
Upvote for you because I was doing the same thing, but got discouraged.
Thanks. Just general speed, see what's taking the longest on my server, etc. I pretty much know it's the redis connection that's slowing it the most (and not very much), but I like going over callgraphs and see if I'm missing something etc.
Here's dis for that function in Python 3.2: &gt;&gt;&gt; dis.dis(f) 2 0 LOAD_FAST 0 (x) 3 LOAD_CONST 4 (frozenset({1, 2, 3})) 6 COMPARE_OP 6 (in) 9 RETURN_VALUE From Python 3.2's “What's new”: &gt; Python’s peephole optimizer now recognizes patterns such x in {1, 2, 3} as being a test for membership in a set of constants. The optimizer recasts the set as a frozenset and stores the pre-built constant.
yes. fun.
It's like Logo in real life!
Man this paster shit is confusing. I'm trying to follow this tutorial http://flask.pocoo.org/snippets/27/ as it's the first thing for "Paster flask" on google. I came up with this config, but it doesn't seem to work. Going to /\_\_profiler\_\_ just gives a 404. http://pastie.org/1879591 Honestly I don't even understand what it's doing? In production I decided to use gunicorn and meinheld as it has great performance, but now there's all this deployment and paster stuff my brain is starting to hurt. I tried the quick start but it told me to make a compatible .egg and I have no idea what that entails. Edit: Seem to have got it working but it takes ages to load a single page :S
Can you describe the problem a little bit? What errors are you seeing for example?
[here](http://pastebin.com/Br74qAiK) is how far the program goes 
This is true. You don't have to have many operations before it's beneficial to use sets rather than lists for membership testing operations, but it does take more than one. By the time you're doing three or four operations it's a wash, and much more than that you'll start getting benefits from using set operations. I'm mainly trying to make sure people don't think it's a good idea to construct a set for a single comparison, or worse, reconstruct the same set from the same list multiple times for multiple operations.
inputPlayerLetter() doesn't actually return the letter. Python treats this as if it's returning "None". "None" thus gets stored in your board list instead of X or O, and when you try to print that, it goes wrong! edit: I suppose it's ok to print None, it's just you can't pretend it's a string and add it to other strings.
True. He should be returning letter because the alternative is to assign a global variable. 
Good, we don't have to use gdal to handle shapefiles any more.
Two things that can help: 1) print info everywhere 2) wherever you want to jump in, look at variable assignments, and step through code, throw in an "import pdb; pdb.set_trace()"
I tried running it, but: * It's extremely fast. It takes about 10 seconds for the first enemy to get from one end of the trail to the other. You may want to look at [regulating the frame rate](http://lazyfoo.net/SDL_tutorials/lesson14/index.php). EDIT: Actually, try [frame-independent movement](http://lazyfoo.net/SDL_tutorials/lesson32/index.php), which seems like it would be a better approach than simply capping the frame rate. * The graphics seem messed up. [Here's what I see.](http://i.imgur.com/QBLif.png) I don't know if that's intended, but you should put up some screenshots on imgur so people can compare. * I couldn't close the game without force. Clicking the close button on my window didn't do anything. Someone mentioned that about your Reversi game, but it's not fixed in either that game or this one. * While it's great that you're learning something new, you may want to advertise when it's at a more playable state, since people will get more excited about your work. Otherwise, it's really easy for people to dismiss it. * Please keep your README at most 80 characters in width. Not only is it good practice to have readable line-widths, but tools like git, and consequently github, assume that your files are that width at most. Most of the text is cut off for me. * You should consider applying the same rule to your source code. It makes things much more readable. * Great job on making it easy to get up and running! I experienced no problems at all. Keep up the good work. EDIT: You should add `*.pyc` to your `.gitignore` so that you don't end up with a cluttered `git status` after running the program.
and zero examples.....thanks
Looks like the return move is inside the while loop, while you want it to be AFTER the while loop. The while loop should continue running until you have valid input. After you do, you should return (int)move. Also as a matter of speed and good measure, you should move the '1 2 ...'.split outside the while loop. There is no reason you should call split every time the loop runs though. Move that to a more global area or just hard code the list. It's always better to move code that gives the same result every time to somewhere that it only needs to be run once. validInputs = ['1','2','3','4','5','6','7','8','9']; def thePlayersmove(board): #lets the player type his move in.. move = ' ' while move not in validInputs or not isSpaceFree(board, int(move)): print('what is your next move? (1-9)') move = input() return int(move) You also never switch turns. The starting player keeps going over and over until they win. Your code to check for winner also doesn't seem to work quite right. Whenever I enter a '1' it says I win. You'll want to test all that pretty thoroughly. Hit me with an orangered if you need more help. 
Hmm, well, assuming that your application is indeed WSGI (it sounds like it if you're using gunicorn), then you should be able to wrap the outer call with the middleware itself. I'll update the documentation to reflect this approach as an alternative to using the paster config.
Also make sure you do this in the same way as in my comment, outside the while loop.
Awesome!
so should i define letter = 'x' or 'o' instead of letter = ''? (before the while loop)?
You should crosspost this to /r/gamedev
Yeah. Did a performance test, and got same times w/in margin of error until I bumped the list sizes &gt; 1000 elements - then got about a 10% improvement (~ 1 second).
Do you want everything to be chmod'ed? What about using chmod +x **?
Thanks for the suggestions and advice. I'll definitely take a look at the Internet Wishlist! 
I hear ya. Thanks for advice. I'll take a look at that book.
I have the same two comments I made with Reversi and that akdas mentioned in this thread to start, that the class naming is unusual and the window can't close without being forced. The "each square that survives will spawn more of them, not a lot of strategy but it's a work in progress" makes for really odd playability. If you kill most of the enemies in the first round, it doesn't send any additional rounds (I was expecting more, and didn't realize what was going on until I re-read the README). However, if you don't kill almost any enemies, the rounds come faster and faster and quickly become absurd. If this is intended, it's pretty unusual for a TD game. "Dictionary lookup is faster than an if-statement We're going to iterate over this loop so much it's well worth it" Did you actually benchmark that assertion? I would be surprised if that were true -- it's not in most languages. I'm aware the dictionary solution is an idiomatic Python version of the switch-case statement but the need to get the hash code should cause it to perform worse. I don't think the performance here matters as much as the comment would suggest though, unless someone is rapid-firing their mouse on a very slow computer. 
My tip for any project: always have screenshots.
why "crazy" ?
I imagine it's also dependent on the amount of "non-uniqueness". The gains could be very different if list_two is something like [1] * 2000 as compared with list(range(1000)) * 2000.
He is actually regulating the frame rate in a way, at engine.py:181, and delaying updates at engine.py:78. The delay seems to be the limiting factor for me -- 10ms probably isn't the best value to use because 100fps is unnecessary here and it doesn't match the distance the guys move per frame leading to the blazing speed. Changing 10 to 50 makes the game move at a more reasonable pace for me. Also, Teifion, it looks like QUIT is the event Pygame sends when akdas and I expect the game to exit. It's pretty easy to add a handler that calls your quit() when it gets the QUIT event.
Are you expecting "file_or_path.name" to (always) return FULL path ?
Basically, with the help of everyone here (thanks guys!) the main problem i'm having is with the program not drawing the X's or O's on the board. here's the error i get Traceback (most recent call last): File "C:\Python31\Tic Tac Toe.py", line 78, in &lt;module&gt; drawBoard(theBoard) File "C:\Python31\Tic Tac Toe.py", line 13, in drawBoard print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6]) TypeError: Can't convert 'NoneType' object to str implicitly any idea what the problem to this is? 
via: http://streamhacker.com/2011/04/26/interview-article-nltk-textprocessing/
one quick way to move past this error would be to switch your print functions to use multiple arguments instead of concatenating the string before it's passed to the print function like this: print(' ', board[1], ' | ', board[2], ' | ', board[3]) Now, if you do this, the elements of the array that have a value of None are going to print "None" right into the grid, which of course you don't want. A simple way to get past this would be simply to: print(' ', board[1] or ' ' , ' | ', board[2] or ' ', ' | ', board[3] or ' ') You might instead though consider pre-initializing your board with empty spaces, so that there is never an empty gridspace.
The idea is exactly NOT to chmod everything. If you chmod everything, Dropbox will sync everything. The script proposed here overcomes this problem.
would have better smarter to use git.
Why is that?
Here's a simple function to draw your board: def drawBoard(board): rows = [' | '.join(board[i:i+3]) for i in [7,4,1]] print('\n--|---|--\n'.join(rows)) # empty # # | | # --|---|-- # | | # --|---|-- # | | # # full # # X | O | O # --|---|-- # X | O | X # --|---|-- # O | X | O Also, at least to my preference, this is a simpler way to write `Winner`: def Winner(board, letter): #tells me if the player has won or not triples = ((7,8,9), (4,5,6), (1,2,3), # rows: top, mid, bot (7,4,1), (8,5,2), (9,6,3), # cols: left, mid, right (7,5,3), (9,5,1)) # diagonals return any(all(board[i] == letter for i in triple) for triple in triples) Finally, you should read [PEP 8](http://www.python.org/dev/peps/pep-0008). Function names should be lowercase with underscores.
it's more like util functions, not macros.
Because it just would have better, that's why.
&gt; He is actually regulating the frame rate in a way, at engine.py:181, and delaying updates at engine.py:78. The delay seems to be the limiting factor for me -- 10ms probably isn't the best value to use because 100fps is unnecessary here and it doesn't match the distance the guys move per frame leading to the blazing speed. Changing 10 to 50 makes the game move at a more reasonable pace for me. Awesome! I realized after reading your post that [this was actually what I had in mind](http://lazyfoo.net/SDL_tutorials/lesson32/index.php). But if frame-limiting is sufficient, then great.
The way I see it, here's a list of initial requirements: * Record audio * Play audio * Mix two (or more) tracks * Write audio to mp3 To "play a track and record audio over it", you'll combine the first two requirements and begin recording as soon as your start playing - that way the recording begins at the exact same time as the audio. Echonest looks like it can mix tracks, but if you want to do it manually, [this](http://stackoverflow.com/questions/376036/algorithm-to-mix-sound) looks really interesting. I'd study up on how audio is represented digitally (byte streams, etc) and how you can manipulate them in your language of choice (Python). This sounds like a really cool project, good luck!
Thank you for the reply. I like what you're saying about combining the first two requirements. I don't want to automatically mix the tracks when recording, because I seem to need like 10 takes before I'm happy with something. I guess I'm timid when it comes to learning about this stuff, because I'm nervous about sticking my head down the rabbit hole. Representing audio with byte streams and that sort of stuff is Japanese to me. I guess that's the learning process, though! In the long run I'd like to make a website based on this program. I'm not sure about your familiarity with Python, but does this sound like something that could be compatible with html stuff?
I used to work with kylev. Hence, I was joking. 
I've used [pymad](http://spacepants.org/src/pymad/) for reading mp3s before, but there really isn't any good documentation for it. Really, if you do `open("/path/to/audio.mp3")` and read from that, the returned string is Python's equivalent of a byte stream. Depending on the format of mp3, you'll need to read past headers / tags / etc before you get to the actual audio though (the mp3 format itself should be well documented). HTML will be pretty much useless here, as it's a markup language (for visual display) while audio processing is definitely a low level application.
What we need is a good vim-mode plugin for Eclipse. Making VIM into an IDE seems crazy. VIM is a great text editor, and it should stay that way. Instead of trying to make it into something it wasn't supposed to be (and goes against everything it stands for), why not stand on the shoulders of the giants? Eclipse is the modern Emacs: it's extendible, free, fast and powerful IDE. Now all it needs is a good *text editor*. BTW. If you really want to use the *reference implementation* of VIM, why not combine it with Eclipse in headless mode, *right now*, using [Eclim](http://eclim.org/).
you are right... thats stupid... fixed it by returning a FULL path with the filepath property. remembering the original eventually relative path in _filepath might become usefull at some point...
just added a simple .read() method that: * opens the file * reads the data * closes the file * returns the data What i would like to do is to detect if the file is a text or binary file and automatically read in the right mode (binary/textmode)... also it would be great to always return an unicode object if the file has textdata. but as i understand it is hard to reliably detecting the encoding ....
The Unix philosophy, when it has succeeded, has been to make tools that do one job well, leaving other tasks to other tools. I guess that's what you're getting at with Eclim.
echonest remix can do a lot of fancy remixing, but it's using the echonest web service. From your requirements I think you could just use [PyMedia](http://pymedia.org/) to handle mp3 encoding/decoding and recording, plus [NumPy](http://numpy.scipy.org) for number crunching arrays of audio data. 
1. CPython uses hg 2. CPython will likely remain the standard library maintainer 3. Sharing the standard library between Python implementations is much easier if all implementations use the same VCS (they can just merge/graft the stdlib) 4. Pypy uses hg 5. fuck you with a rake
&gt; WTF are you babbling about ??? He's saying that updating your OSX to 10.6 would fix the issue.
No it is not. One of the main problems of Eclipse (or any other big IDEs) is its slowness. On the other hand you can't squeeze Emacs or Vim (and yet you still have a pretty nice environment).
Wow you're getting downvoted suddenly. I hope that's not my fault. I thought your comment was insightful. Got a question though, after following this link and seeing some useful vim plugins (I don't tend to use many), and following yours: *what advantages does Eclipse provide?* I'm a total troglodyte when it comes to IDEs, not having used one at all since MS-DOS was an operating system. I've always found a good editor (vim), a good shell environment (posix/gnu), a good VCS (git these days, but it's been just about everything) and a build system that doesn't get in the way too much, provide everything I could really hope for. The few times I've had to interact with Eclipse it has provided the build system and got in the way of everything else (mostly because I don't know how to drive it). What am I missing out on?
If only the plugin system of Eclipse wasn't such a mess... 
no, you just need to add a return statement at the end of that function: def inputPlayerLetter(): letter = '' while not (letter == 'X' or letter == 'O'): print('Do you want to be X or O?') letter = input().upper() return letter (same as your code, except for last line)
I'm just taking it nice and slow, there's no deadlines or boss standing over me if I fail. I can do as much or as little as I have time for each day.